

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Sun Nov 15 22:40:46 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	text76,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    89                           	psect	text78,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    92  0000                     
    93                           	psect	smallconst
    94  0008BE                     __psmallconst:
    95                           	opt stack 0
    96  0008BE                     _vscp_deviceURL:
    97                           	opt stack 0
    98  0008BE  77                 	db	119
    99  0008BF  77                 	db	119
   100  0008C0  77                 	db	119
   101  0008C1  2E                 	db	46
   102  0008C2  65                 	db	101
   103  0008C3  75                 	db	117
   104  0008C4  72                 	db	114
   105  0008C5  6F                 	db	111
   106  0008C6  73                 	db	115
   107  0008C7  6F                 	db	111
   108  0008C8  75                 	db	117
   109  0008C9  72                 	db	114
   110  0008CA  63                 	db	99
   111  0008CB  65                 	db	101
   112  0008CC  2E                 	db	46
   113  0008CD  73                 	db	115
   114  0008CE  65                 	db	101
   115  0008CF  2F                 	db	47
   116  0008D0  70                 	db	112
   117  0008D1  61                 	db	97
   118  0008D2  72                 	db	114
   119  0008D3  69                 	db	105
   120  0008D4  73                 	db	115
   121  0008D5  5F                 	db	95
   122  0008D6  30                 	db	48
   123  0008D7  31                 	db	49
   124  0008D8  30                 	db	48
   125  0008D9  2E                 	db	46
   126  0008DA  78                 	db	120
   127  0008DB  6D                 	db	109
   128  0008DC  6C                 	db	108
   129  0008DD  00                 	db	0
   130  0008DE                     __end_of_vscp_deviceURL:
   131                           	opt stack 0
   132  0000                     _BRGCON1	set	3952
   133  0000                     _BRGCON2	set	3953
   134  0000                     _BRGCON3	set	3954
   135  0000                     _BSEL0	set	3576
   136  0000                     _CANCON	set	3951
   137  0000                     _CIOCON	set	3955
   138  0000                     _ECANCON	set	3959
   139  0000                     _EEADR	set	4009
   140  0000                     _EECON1bits	set	4006
   141  0000                     _EECON2	set	4007
   142  0000                     _EEDATA	set	4008
   143  0000                     _INTCONbits	set	4082
   144  0000                     _LATBbits	set	3978
   145  0000                     _LATCbits	set	3979
   146  0000                     _MSEL0	set	3568
   147  0000                     _MSEL1	set	3569
   148  0000                     _MSEL2	set	3570
   149  0000                     _PORTA	set	3968
   150  0000                     _PORTB	set	3969
   151  0000                     _PORTC	set	3970
   152  0000                     _PORTCbits	set	3970
   153  0000                     _RXB1CONbits	set	3920
   154  0000                     _RXF0EIDH	set	3842
   155  0000                     _RXF0EIDL	set	3843
   156  0000                     _RXF0SIDH	set	3840
   157  0000                     _RXF0SIDL	set	3841
   158  0000                     _RXF1EIDH	set	3846
   159  0000                     _RXF1EIDL	set	3847
   160  0000                     _RXF1SIDL	set	3845
   161  0000                     _RXFBCON0	set	3552
   162  0000                     _RXFBCON1	set	3553
   163  0000                     _RXFBCON2	set	3554
   164  0000                     _RXFBCON3	set	3555
   165  0000                     _RXFBCON4	set	3556
   166  0000                     _RXFBCON5	set	3557
   167  0000                     _RXFBCON6	set	3558
   168  0000                     _RXFBCON7	set	3559
   169  0000                     _RXFCON0	set	3540
   170  0000                     _RXFCON1	set	3541
   171  0000                     _RXM0EIDH	set	3866
   172  0000                     _RXM0EIDL	set	3867
   173  0000                     _RXM0SIDH	set	3864
   174  0000                     _RXM0SIDL	set	3865
   175  0000                     _RXM1EIDH	set	3870
   176  0000                     _RXM1EIDL	set	3871
   177  0000                     _RXM1SIDL	set	3869
   178  0000                     _T0CON	set	4053
   179  0000                     _T0CONbits	set	4053
   180  0000                     _TMR0H	set	4055
   181  0000                     _TMR0L	set	4054
   182  0000                     _TRISA	set	3986
   183  0000                     _TRISB	set	3987
   184  0000                     _TRISC	set	3988
   185  0000                     _B0RXFUL	set	28935
   186  0000                     _B0TXEN	set	28610
   187  0000                     _B1RXFUL	set	29063
   188  0000                     _B1TXEN	set	28611
   189  0000                     _B2RXFUL	set	29191
   190  0000                     _B2TXEN	set	28612
   191  0000                     _B3RXFUL	set	29319
   192  0000                     _B3TXEN	set	28613
   193  0000                     _B4RXFUL	set	29447
   194  0000                     _B4TXEN	set	28614
   195  0000                     _B5RXFUL	set	29575
   196  0000                     _B5TXEN	set	28615
   197  0000                     _FIFOEMPTY	set	31655
   198  0000                     _IRXIF	set	32039
   199  0000                     _MDSEL0	set	31678
   200  0000                     _MDSEL1	set	31679
   201  0000                     _RXB0FILHIT0	set	31488
   202  0000                     _RXB0FUL	set	31495
   203  0000                     _RXB0IF	set	32032
   204  0000                     _RXB0OVFL	set	31655
   205  0000                     _RXB1IF	set	32033
   206  0000                     _RXB1OVFL	set	31654
   207  0000                     _RXF1EN	set	28321
   208  0000                     _RXM0EXIDM	set	30923
   209  0000                     _RXM1EXIDEN	set	30955
   210  0000                     _B0CON	set	3616
   211  0000                     _B1CON	set	3632
   212  0000                     _B2CON	set	3648
   213  0000                     _B3CON	set	3664
   214  0000                     _B4CON	set	3680
   215  0000                     _B5CON	set	3696
   216  0000                     _RXB0CON	set	3936
   217  0000                     _RXB1CON	set	3920
   218  0000                     _RXF1SIDH	set	3844
   219  0000                     _RXM1SIDH	set	3868
   220  0000                     _TXB0CON	set	3904
   221  0000                     _TXB1CON	set	3888
   222  0000                     _TXB2CON	set	3872
   223                           
   224                           ; #config settings
   225  0008DE  00                 	db	0	; dummy byte at the end
   226  0000                     
   227                           	psect	cinit
   228  0042E4                     __pcinit:
   229                           	opt stack 0
   230  0042E4                     start_initialization:
   231                           	opt stack 0
   232  0042E4                     __initialization:
   233                           	opt stack 0
   234                           
   235                           ; Clear objects allocated to BANK0 (82 bytes)
   236  0042E4  EE00  F060         	lfsr	0,__pbssBANK0
   237  0042E8  0E52               	movlw	82
   238  0042EA                     clear_0:
   239  0042EA  6AEE               	clrf	postinc0,c
   240  0042EC  06E8               	decf	wreg,f,c
   241  0042EE  E1FD               	bnz	clear_0
   242                           
   243                           ; Clear objects allocated to COMRAM (7 bytes)
   244  0042F0  EE00  F052         	lfsr	0,__pbssCOMRAM
   245  0042F4  0E07               	movlw	7
   246  0042F6                     clear_1:
   247  0042F6  6AEE               	clrf	postinc0,c
   248  0042F8  06E8               	decf	wreg,f,c
   249  0042FA  E1FD               	bnz	clear_1
   250  0042FC                     end_of_initialization:
   251                           	opt stack 0
   252  0042FC                     __end_of__initialization:
   253                           	opt stack 0
   254  0042FC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   255  0042FE  6EF8               	movwf	tblptru,c
   256  004300  0100               	movlb	0
   257  004302  EF03  F01D         	goto	_main	;jump to C main() function
   258                           tblptru	equ	0xFF8
   259                           postinc0	equ	0xFEE
   260                           wreg	equ	0xFE8
   261                           
   262                           	psect	bssCOMRAM
   263  000052                     __pbssCOMRAM:
   264                           	opt stack 0
   265  000052                     _vscp_page_select:
   266                           	opt stack 0
   267  000052                     	ds	2
   268  000054                     __ECANRxFilterHitInfo:
   269                           	opt stack 0
   270  000054                     	ds	1
   271  000055                     _vscp_alarmstatus:
   272                           	opt stack 0
   273  000055                     	ds	1
   274  000056                     _vscp_initledfunc:
   275                           	opt stack 0
   276  000056                     	ds	1
   277  000057                     _vscp_probe_address:
   278                           	opt stack 0
   279  000057                     	ds	1
   280  000058                     _vscp_statuscnt:
   281                           	opt stack 0
   282  000058                     	ds	1
   283                           tblptru	equ	0xFF8
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287                           	psect	bssBANK0
   288  000060                     __pbssBANK0:
   289                           	opt stack 0
   290  000060                     _relay_protection_timer:
   291                           	opt stack 0
   292  000060                     	ds	16
   293  000070                     _relay_pulse_timer:
   294                           	opt stack 0
   295  000070                     	ds	16
   296  000080                     _measurement_clock:
   297                           	opt stack 0
   298  000080                     	ds	4
   299  000084                     _sendTimer:
   300                           	opt stack 0
   301  000084                     	ds	2
   302  000086                     _vscp_configtimer:
   303                           	opt stack 0
   304  000086                     	ds	2
   305  000088                     _vscp_timer:
   306                           	opt stack 0
   307  000088                     	ds	2
   308  00008A                     _hours:
   309                           	opt stack 0
   310  00008A                     	ds	1
   311  00008B                     _minutes:
   312                           	opt stack 0
   313  00008B                     	ds	1
   314  00008C                     _relay_pulse_flags:
   315                           	opt stack 0
   316  00008C                     	ds	1
   317  00008D                     _seconds:
   318                           	opt stack 0
   319  00008D                     	ds	1
   320  00008E                     _vscp_guid_reset:
   321                           	opt stack 0
   322  00008E                     	ds	1
   323  00008F                     _vscp_hour:
   324                           	opt stack 0
   325  00008F                     	ds	1
   326  000090                     _vscp_initbtncnt:
   327                           	opt stack 0
   328  000090                     	ds	1
   329  000091                     _vscp_minute:
   330                           	opt stack 0
   331  000091                     	ds	1
   332  000092                     _vscp_nickname:
   333                           	opt stack 0
   334  000092                     	ds	1
   335  000093                     _vscp_node_state:
   336                           	opt stack 0
   337  000093                     	ds	1
   338  000094                     _vscp_node_substate:
   339                           	opt stack 0
   340  000094                     	ds	1
   341  000095                     _vscp_probe_cnt:
   342                           	opt stack 0
   343  000095                     	ds	1
   344  000096                     _vscp_second:
   345                           	opt stack 0
   346  000096                     	ds	1
   347  000097                     _vscp_imsg:
   348                           	opt stack 0
   349  000097                     	ds	14
   350  0000A5                     _vscp_omsg:
   351                           	opt stack 0
   352  0000A5                     	ds	13
   353                           tblptru	equ	0xFF8
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           
   357                           	psect	cstackBANK0
   358  0000B2                     __pcstackBANK0:
   359                           	opt stack 0
   360  0000B2                     ??_sendVSCPFrame:
   361                           
   362                           ; 0 bytes @ 0x0
   363  0000B2                     	ds	20
   364  0000C6                     ?_SendInformationEvent:
   365                           	opt stack 0
   366  0000C6                     ?_vscp_sendHeartBeat:
   367                           	opt stack 0
   368  0000C6                     SendInformationEvent@eventClass:
   369                           	opt stack 0
   370  0000C6                     vscp_sendHeartBeat@subzone:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x14
   374  0000C6                     	ds	1
   375  0000C7                     SendInformationEvent@eventTypeId:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x15
   379  0000C7                     	ds	1
   380  0000C8                     ??_doActionOff:
   381  0000C8                     ??_doActionOn:
   382  0000C8                     ??_doActionStatus:
   383  0000C8                     ??_doActionToggle:
   384  0000C8                     ??_vscp_writeAppReg:
   385                           
   386                           ; 0 bytes @ 0x16
   387  0000C8                     	ds	2
   388  0000CA                     doActionOff@dmflags:
   389                           	opt stack 0
   390  0000CA                     doActionStatus@dmflags:
   391                           	opt stack 0
   392  0000CA                     doActionToggle@dmflags:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x18
   396  0000CA                     	ds	1
   397  0000CB                     vscp_writeAppReg@bInfoEvent:
   398                           	opt stack 0
   399  0000CB                     doActionOn@dmflags:
   400                           	opt stack 0
   401  0000CB                     doActionOff@val:
   402                           	opt stack 0
   403  0000CB                     doActionStatus@bOn:
   404                           	opt stack 0
   405  0000CB                     doActionToggle@val:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x19
   409  0000CB                     	ds	1
   410  0000CC                     vscp_writeAppReg@val_682:
   411                           	opt stack 0
   412  0000CC                     doActionOn@val:
   413                           	opt stack 0
   414  0000CC                     doActionOff@i:
   415                           	opt stack 0
   416  0000CC                     doActionStatus@val:
   417                           	opt stack 0
   418  0000CC                     doActionToggle@bOn:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x1A
   422  0000CC                     	ds	1
   423  0000CD                     ??_doApplicationOneSecondWork:
   424  0000CD                     vscp_writeAppReg@rv:
   425                           	opt stack 0
   426  0000CD                     doActionOn@i:
   427                           	opt stack 0
   428  0000CD                     doActionStatus@i:
   429                           	opt stack 0
   430  0000CD                     doActionToggle@i:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x1B
   434  0000CD                     	ds	1
   435  0000CE                     ??_doDM:
   436  0000CE                     vscp_writeAppReg@bOn:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x1C
   440  0000CE                     	ds	1
   441  0000CF                     vscp_writeAppReg@reg:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x1D
   445  0000CF                     	ds	1
   446  0000D0                     ?_vscp_writeRegister:
   447                           	opt stack 0
   448  0000D0                     doApplicationOneSecondWork@bOn:
   449                           	opt stack 0
   450  0000D0                     vscp_writeRegister@value:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x1E
   454  0000D0                     	ds	1
   455  0000D1                     doApplicationOneSecondWork@ctrlreg:
   456                           	opt stack 0
   457  0000D1                     vscp_writeRegister@reg:
   458                           	opt stack 0
   459  0000D1                     doDM@class_filter:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x1F
   463  0000D1                     	ds	1
   464  0000D2                     ??_vscp_handleProtocolEvent:
   465  0000D2                     doApplicationOneSecondWork@i:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x20
   469  0000D2                     	ds	1
   470  0000D3                     doDM@class_mask:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x21
   474  0000D3                     	ds	2
   475  0000D5                     doDM@type_filter:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x23
   479  0000D5                     	ds	1
   480  0000D6                     doDM@type_mask:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x24
   484  0000D6                     	ds	1
   485  0000D7                     _doDM$2152:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x25
   489  0000D7                     	ds	1
   490  0000D8                     _doDM$2153:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0x26
   494  0000D8                     	ds	1
   495  0000D9                     _doDM$2154:
   496                           	opt stack 0
   497  0000D9                     vscp_handleProtocolEvent@page_save:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x27
   501  0000D9                     	ds	1
   502  0000DA                     _doDM$2155:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x28
   506  0000DA                     	ds	1
   507  0000DB                     _doDM$2156:
   508                           	opt stack 0
   509  0000DB                     vscp_handleProtocolEvent@page_save_1294:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x29
   513  0000DB                     	ds	1
   514  0000DC                     _doDM$2157:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x2A
   518  0000DC                     	ds	1
   519  0000DD                     doDM@dmflags:
   520                           	opt stack 0
   521  0000DD                     vscp_handleProtocolEvent@offset:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x2B
   525  0000DD                     	ds	1
   526  0000DE                     doDM@i:
   527                           	opt stack 0
   528  0000DE                     vscp_handleProtocolEvent@pos:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x2C
   532  0000DE                     	ds	1
   533  0000DF                     vscp_handleProtocolEvent@bytes:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x2D
   537  0000DF                     	ds	1
   538  0000E0                     vscp_handleProtocolEvent@len:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x2E
   542  0000E0                     	ds	1
   543  0000E1                     vscp_handleProtocolEvent@pos_1283:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x2F
   547  0000E1                     	ds	1
   548  0000E2                     vscp_handleProtocolEvent@len_1284:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x30
   552  0000E2                     	ds	1
   553  0000E3                     vscp_handleProtocolEvent@bytes_this_time:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x31
   557  0000E3                     	ds	1
   558  0000E4                     vscp_handleProtocolEvent@cb:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x32
   562  0000E4                     	ds	1
   563  0000E5                     vscp_handleProtocolEvent@i_1293:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x33
   567  0000E5                     	ds	1
   568  0000E6                     vscp_handleProtocolEvent@k:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x34
   572  0000E6                     	ds	1
   573  0000E7                     vscp_handleProtocolEvent@i_1282:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x35
   577  0000E7                     	ds	1
   578  0000E8                     vscp_handleProtocolEvent@byte:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x36
   582  0000E8                     	ds	1
   583  0000E9                     vscp_handleProtocolEvent@bytes_1289:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x37
   587  0000E9                     	ds	2
   588  0000EB                     vscp_handleProtocolEvent@i_1285:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x39
   592  0000EB                     	ds	1
   593  0000EC                     vscp_handleProtocolEvent@i:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x3A
   597  0000EC                     	ds	1
   598  0000ED                     vscp_handleProtocolEvent@j:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x3B
   602  0000ED                     	ds	1
   603                           tblptru	equ	0xFF8
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           
   607                           	psect	cstackCOMRAM
   608  000001                     __pcstackCOMRAM:
   609                           	opt stack 0
   610  000001                     ?i1_WriteTimer0:
   611                           	opt stack 0
   612  000001                     i1WriteTimer0@timer0:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x0
   616  000001                     	ds	2
   617  000003                     i1WriteTimer0@timer:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x2
   621  000003                     	ds	2
   622  000005                     ??_interrupt_at_low_vector:
   623                           
   624                           ; 0 bytes @ 0x4
   625  000005                     	ds	3
   626  000008                     ?_WriteTimer0:
   627                           	opt stack 0
   628  000008                     ?_Write_b_eep:
   629                           	opt stack 0
   630  000008                     ?__CANIDToRegs:
   631                           	opt stack 0
   632  000008                     ?__RegsToCANID:
   633                           	opt stack 0
   634  000008                     ??_vscp_getMDF_URL:
   635  000008                     ?_Read_b_eep:
   636                           	opt stack 0
   637  000008                     ?___lbmod:
   638                           	opt stack 0
   639  000008                     ?__ECANPointBuffer:
   640                           	opt stack 0
   641  000008                     ?_vscp_getFamilyCode:
   642                           	opt stack 0
   643  000008                     ?_vscp_getFamilyType:
   644                           	opt stack 0
   645  000008                     vscp_getMatrixInfo@i:
   646                           	opt stack 0
   647  000008                     ECANSetOperationMode@mode:
   648                           	opt stack 0
   649  000008                     OpenTimer0@config:
   650                           	opt stack 0
   651  000008                     ___lbmod@divisor:
   652                           	opt stack 0
   653  000008                     __CANIDToRegs@ptr:
   654                           	opt stack 0
   655  000008                     __RegsToCANID@ptr:
   656                           	opt stack 0
   657  000008                     Read_b_eep@badd:
   658                           	opt stack 0
   659  000008                     Write_b_eep@badd:
   660                           	opt stack 0
   661  000008                     WriteTimer0@timer0:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x7
   665  000008                     	ds	1
   666  000009                     vscp_getMDF_URL@idx:
   667                           	opt stack 0
   668  000009                     ___lbmod@dividend:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x8
   672  000009                     	ds	1
   673  00000A                     ??_init_app_ram:
   674  00000A                     ?_doActionPulse:
   675                           	opt stack 0
   676  00000A                     vscp_readAppReg@rv:
   677                           	opt stack 0
   678  00000A                     doActionPulse@arg:
   679                           	opt stack 0
   680  00000A                     vscp_getGUID@idx:
   681                           	opt stack 0
   682  00000A                     vscp_getUserID@idx:
   683                           	opt stack 0
   684  00000A                     vscp_getManufacturerId@idx:
   685                           	opt stack 0
   686  00000A                     __RegsToCANID@val:
   687                           	opt stack 0
   688  00000A                     Write_b_eep@bdat:
   689                           	opt stack 0
   690  00000A                     ___lbmod@counter:
   691                           	opt stack 0
   692  00000A                     WriteTimer0@timer:
   693                           	opt stack 0
   694  00000A                     __CANIDToRegs@val:
   695                           	opt stack 0
   696                           
   697                           ; 4 bytes @ 0x9
   698  00000A                     	ds	1
   699  00000B                     ??_doActionPulse:
   700  00000B                     vscp_readAppReg@reg:
   701                           	opt stack 0
   702  00000B                     __RegsToCANID@type:
   703                           	opt stack 0
   704  00000B                     __ECANPointBuffer@b:
   705                           	opt stack 0
   706  00000B                     Write_b_eep@GIE_BIT_VAL:
   707                           	opt stack 0
   708  00000B                     ___lbmod@rem:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0xA
   712  00000B                     	ds	1
   713  00000C                     ?_doActionDisable:
   714                           	opt stack 0
   715  00000C                     ??__RegsToCANID:
   716  00000C                     ??_vscp_readStdReg:
   717  00000C                     ?_vscp_setGUID:
   718                           	opt stack 0
   719  00000C                     ?_vscp_setManufacturerId:
   720                           	opt stack 0
   721  00000C                     ?_vscp_setUserID:
   722                           	opt stack 0
   723  00000C                     init_app_ram@i:
   724                           	opt stack 0
   725  00000C                     vscp_setGUID@data:
   726                           	opt stack 0
   727  00000C                     vscp_setManufacturerId@data:
   728                           	opt stack 0
   729  00000C                     vscp_writeNicknamePermanent@nickname:
   730                           	opt stack 0
   731  00000C                     doActionDisable@arg:
   732                           	opt stack 0
   733  00000C                     vscp_setUserID@data:
   734                           	opt stack 0
   735  00000C                     vscp_setSegmentCRC@crc:
   736                           	opt stack 0
   737  00000C                     vscp_setControlByte@ctrl:
   738                           	opt stack 0
   739  00000C                     vscp_goBootloaderMode@algorithm:
   740                           	opt stack 0
   741  00000C                     __ECANPointBuffer@pt:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0xB
   745  00000C                     	ds	1
   746  00000D                     ??_doActionDisable:
   747  00000D                     vscp_setGUID@idx:
   748                           	opt stack 0
   749  00000D                     vscp_setManufacturerId@idx:
   750                           	opt stack 0
   751  00000D                     vscp_setUserID@idx:
   752                           	opt stack 0
   753  00000D                     vscp_handleDropNickname@bytes:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0xC
   757  00000D                     	ds	1
   758  00000E                     doActionPulse@val:
   759                           	opt stack 0
   760  00000E                     __CANIDToRegs@type:
   761                           	opt stack 0
   762  00000E                     __RegsToCANID@Value:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0xD
   766  00000E                     	ds	1
   767  00000F                     ??__CANIDToRegs:
   768  00000F                     ?_ECANReceiveMessage:
   769                           	opt stack 0
   770  00000F                     doActionPulse@dmflags:
   771                           	opt stack 0
   772  00000F                     doActionDisable@val:
   773                           	opt stack 0
   774  00000F                     ECANReceiveMessage@data:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0xE
   778  00000F                     	ds	1
   779  000010                     doActionPulse@i:
   780                           	opt stack 0
   781  000010                     doActionDisable@dmflags:
   782                           	opt stack 0
   783  000010                     ECANReceiveMessage@dataLen:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0xF
   787  000010                     	ds	1
   788  000011                     doActionDisable@i:
   789                           	opt stack 0
   790  000011                     ECANReceiveMessage@msgFlags:
   791                           	opt stack 0
   792  000011                     __CANIDToRegs@Value:
   793                           	opt stack 0
   794  000011                     vscp_readStdReg@code:
   795                           	opt stack 0
   796                           
   797                           ; 4 bytes @ 0x10
   798  000011                     	ds	1
   799  000012                     ??_calculateSetFilterMask:
   800  000012                     ?_ECANSendMessage:
   801                           	opt stack 0
   802  000012                     ECANReceiveMessage@savedPtr:
   803                           	opt stack 0
   804  000012                     ECANSendMessage@id:
   805                           	opt stack 0
   806                           
   807                           ; 4 bytes @ 0x11
   808  000012                     	ds	2
   809  000014                     ECANReceiveMessage@id:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x13
   813  000014                     	ds	1
   814  000015                     ECANReceiveMessage@i:
   815                           	opt stack 0
   816  000015                     vscp_readStdReg@code_1267:
   817                           	opt stack 0
   818                           
   819                           ; 4 bytes @ 0x14
   820  000015                     	ds	1
   821  000016                     ECANReceiveMessage@mode:
   822                           	opt stack 0
   823  000016                     ECANSendMessage@data:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0x15
   827  000016                     	ds	1
   828  000017                     ECANReceiveMessage@temp:
   829                           	opt stack 0
   830                           
   831                           ; 1 bytes @ 0x16
   832  000017                     	ds	1
   833  000018                     ECANSendMessage@dataLen:
   834                           	opt stack 0
   835  000018                     ECANReceiveMessage@ptr:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x17
   839  000018                     	ds	1
   840  000019                     ECANSendMessage@msgFlags:
   841                           	opt stack 0
   842  000019                     vscp_readStdReg@idx:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x18
   846  000019                     	ds	1
   847  00001A                     ??_ECANSendMessage:
   848  00001A                     ?_getCANFrame:
   849                           	opt stack 0
   850  00001A                     getCANFrame@pdlc:
   851                           	opt stack 0
   852  00001A                     vscp_readStdReg@idx_1268:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x19
   856  00001A                     	ds	1
   857  00001B                     getCANFrame@pdata:
   858                           	opt stack 0
   859  00001B                     vscp_readStdReg@rv:
   860                           	opt stack 0
   861  00001B                     ECANSendMessage@pb:
   862                           	opt stack 0
   863                           
   864                           ; 18 bytes @ 0x1A
   865  00001B                     	ds	1
   866  00001C                     getCANFrame@pid:
   867                           	opt stack 0
   868  00001C                     vscp_readStdReg@reg:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x1B
   872  00001C                     	ds	1
   873  00001D                     getCANFrame@flags:
   874                           	opt stack 0
   875  00001D                     vscp_readRegister@reg:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x1C
   879  00001D                     	ds	1
   880  00001E                     ?_getVSCPFrame:
   881                           	opt stack 0
   882  00001E                     getVSCPFrame@pvscptype:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0x1D
   886  00001E                     	ds	1
   887  00001F                     getVSCPFrame@pNodeId:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x1E
   891  00001F                     	ds	1
   892  000020                     getVSCPFrame@pPriority:
   893                           	opt stack 0
   894                           
   895                           ; 1 bytes @ 0x1F
   896  000020                     	ds	1
   897  000021                     getVSCPFrame@pSize:
   898                           	opt stack 0
   899                           
   900                           ; 1 bytes @ 0x20
   901  000021                     	ds	1
   902  000022                     getVSCPFrame@pData:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x21
   906  000022                     	ds	1
   907  000023                     ??_getVSCPFrame:
   908                           
   909                           ; 0 bytes @ 0x22
   910  000023                     	ds	4
   911  000027                     getVSCPFrame@pvscpclass:
   912                           	opt stack 0
   913                           
   914                           ; 1 bytes @ 0x26
   915  000027                     	ds	1
   916  000028                     getVSCPFrame@id:
   917                           	opt stack 0
   918                           
   919                           ; 4 bytes @ 0x27
   920  000028                     	ds	4
   921  00002C                     vscp_getEvent@rv:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x2B
   925  00002C                     	ds	1
   926  00002D                     ECANSendMessage@mode:
   927                           	opt stack 0
   928                           
   929                           ; 1 bytes @ 0x2C
   930  00002D                     	ds	1
   931  00002E                     ECANSendMessage@buffers:
   932                           	opt stack 0
   933                           
   934                           ; 1 bytes @ 0x2D
   935  00002E                     	ds	1
   936  00002F                     ECANSendMessage@j:
   937                           	opt stack 0
   938                           
   939                           ; 1 bytes @ 0x2E
   940  00002F                     	ds	1
   941  000030                     ECANSendMessage@tempBSEL0:
   942                           	opt stack 0
   943                           
   944                           ; 1 bytes @ 0x2F
   945  000030                     	ds	1
   946  000031                     ECANSendMessage@tempPtr:
   947                           	opt stack 0
   948  000031                     calculateSetFilterMask@rowmask:
   949                           	opt stack 0
   950                           
   951                           ; 4 bytes @ 0x30
   952  000031                     	ds	2
   953  000033                     ECANSendMessage@temp:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x32
   957  000033                     	ds	1
   958  000034                     ECANSendMessage@i:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0x33
   962  000034                     	ds	1
   963  000035                     calculateSetFilterMask@lastOID:
   964                           	opt stack 0
   965  000035                     ECANSendMessage@ptr:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x34
   969  000035                     	ds	1
   970  000036                     calculateSetFilterMask@mask:
   971                           	opt stack 0
   972                           
   973                           ; 4 bytes @ 0x35
   974  000036                     	ds	1
   975  000037                     ?_sendCANFrame:
   976                           	opt stack 0
   977  000037                     sendCANFrame@id:
   978                           	opt stack 0
   979                           
   980                           ; 4 bytes @ 0x36
   981  000037                     	ds	3
   982  00003A                     calculateSetFilterMask@filter:
   983                           	opt stack 0
   984                           
   985                           ; 4 bytes @ 0x39
   986  00003A                     	ds	1
   987  00003B                     sendCANFrame@dlc:
   988                           	opt stack 0
   989                           
   990                           ; 1 bytes @ 0x3A
   991  00003B                     	ds	1
   992  00003C                     sendCANFrame@pdata:
   993                           	opt stack 0
   994                           
   995                           ; 2 bytes @ 0x3B
   996  00003C                     	ds	2
   997  00003E                     sendCANFrame@rv:
   998                           	opt stack 0
   999  00003E                     calculateSetFilterMask@rowfilter:
  1000                           	opt stack 0
  1001                           
  1002                           ; 4 bytes @ 0x3D
  1003  00003E                     	ds	1
  1004  00003F                     ?_sendVSCPFrame:
  1005                           	opt stack 0
  1006  00003F                     sendVSCPFrame@vscpclass:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x3E
  1010  00003F                     	ds	2
  1011  000041                     sendVSCPFrame@vscptype:
  1012                           	opt stack 0
  1013                           
  1014                           ; 1 bytes @ 0x40
  1015  000041                     	ds	1
  1016  000042                     sendVSCPFrame@nodeid:
  1017                           	opt stack 0
  1018  000042                     calculateSetFilterMask@j:
  1019                           	opt stack 0
  1020                           
  1021                           ; 1 bytes @ 0x41
  1022  000042                     	ds	1
  1023  000043                     sendVSCPFrame@priority:
  1024                           	opt stack 0
  1025  000043                     calculateSetFilterMask@i:
  1026                           	opt stack 0
  1027                           
  1028                           ; 1 bytes @ 0x42
  1029  000043                     	ds	1
  1030  000044                     ??_init_app_eeprom:
  1031  000044                     sendVSCPFrame@size:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x43
  1035  000044                     	ds	1
  1036  000045                     sendVSCPFrame@pData:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0x44
  1040  000045                     	ds	1
  1041  000046                     init_app_eeprom@i:
  1042                           	opt stack 0
  1043                           
  1044                           ; 1 bytes @ 0x45
  1045  000046                     	ds	1
  1046  000047                     init_app_eeprom@j:
  1047                           	opt stack 0
  1048  000047                     sendVSCPFrame@id:
  1049                           	opt stack 0
  1050                           
  1051                           ; 4 bytes @ 0x46
  1052  000047                     	ds	1
  1053  000048                     ?_vscp_writeStdReg:
  1054                           	opt stack 0
  1055  000048                     vscp_writeStdReg@value:
  1056                           	opt stack 0
  1057                           
  1058                           ; 1 bytes @ 0x47
  1059  000048                     	ds	1
  1060  000049                     ??_vscp_writeStdReg:
  1061                           
  1062                           ; 0 bytes @ 0x48
  1063  000049                     	ds	2
  1064  00004B                     ??_SendInformationEvent:
  1065  00004B                     
  1066                           ; 0 bytes @ 0x4A
  1067  00004B                     	ds	1
  1068  00004C                     ??_vscp_newNodeOnline:
  1069  00004C                     vscp_sendHeartBeat@zone:
  1070                           	opt stack 0
  1071                           
  1072                           ; 1 bytes @ 0x4B
  1073  00004C                     	ds	1
  1074  00004D                     ??_vscp_doOneSecondWork:
  1075  00004D                     vscp_writeStdReg@rv:
  1076                           	opt stack 0
  1077  00004D                     SendInformationEvent@data:
  1078                           	opt stack 0
  1079                           
  1080                           ; 3 bytes @ 0x4C
  1081  00004D                     	ds	1
  1082  00004E                     vscp_writeStdReg@reg:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x4D
  1086  00004E                     	ds	2
  1087  000050                     SendInformationEvent@idx:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0x4F
  1091  000050                     	ds	1
  1092  000051                     ?_doActionOff:
  1093                           	opt stack 0
  1094  000051                     ?_doActionOn:
  1095                           	opt stack 0
  1096  000051                     ?_doActionStatus:
  1097                           	opt stack 0
  1098  000051                     ?_doActionToggle:
  1099                           	opt stack 0
  1100  000051                     ?_vscp_writeAppReg:
  1101                           	opt stack 0
  1102  000051                     vscp_writeAppReg@val:
  1103                           	opt stack 0
  1104  000051                     doActionOn@arg:
  1105                           	opt stack 0
  1106  000051                     doActionOff@arg:
  1107                           	opt stack 0
  1108  000051                     doActionStatus@arg:
  1109                           	opt stack 0
  1110  000051                     doActionToggle@arg:
  1111                           	opt stack 0
  1112                           
  1113                           ; 1 bytes @ 0x50
  1114  000051                     	ds	1
  1115  000052                     tblptru	equ	0xFF8
  1116                           postinc0	equ	0xFEE
  1117                           wreg	equ	0xFE8
  1118                           
  1119                           ; 0 bytes @ 0x51
  1120 ;;
  1121 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1122 ;;
  1123 ;; *************** function _main *****************
  1124 ;; Defined at:
  1125 ;;		line 188 in file "../main.c"
  1126 ;; Parameters:    Size  Location     Type
  1127 ;;		None
  1128 ;; Auto vars:     Size  Location     Type
  1129 ;;		None
  1130 ;; Return value:  Size  Location     Type
  1131 ;;		None               void
  1132 ;; Registers used:
  1133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : F/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1139 ;;      Params:         0       0       0       0       0       0       0
  1140 ;;      Locals:         0       0       0       0       0       0       0
  1141 ;;      Temps:          0       0       0       0       0       0       0
  1142 ;;      Totals:         0       0       0       0       0       0       0
  1143 ;;Total ram usage:        0 bytes
  1144 ;; Hardware stack levels required when called:   10
  1145 ;; This function calls:
  1146 ;;		_init
  1147 ;;		_vscp_check_pstorage
  1148 ;;		_init_app_eeprom
  1149 ;;		_init_app_ram
  1150 ;;		_calculateSetFilterMask
  1151 ;;		_vscp_init
  1152 ;;		_Busy_eep
  1153 ;;		_Write_b_eep
  1154 ;;		_vscp_getEvent
  1155 ;;		_vscp_goActiveState
  1156 ;;		_vscp_handleProbeState
  1157 ;;		_vscp_handleProtocolEvent
  1158 ;;		_doDM
  1159 ;;		_vscp_error
  1160 ;;		_vscp_doOneSecondWork
  1161 ;;		_doApplicationOneSecondWork
  1162 ;;		_doWork
  1163 ;; This function is called by:
  1164 ;;		Startup code after reset
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           	psect	text0
  1169  003A06                     __ptext0:
  1170                           	opt stack 0
  1171  003A06                     _main:
  1172                           	opt stack 21
  1173                           
  1174                           ;main.c: 189: init();
  1175                           
  1176                           ;incstack = 0
  1177                           ;incstack = 0
  1178  003A06  EC5D  F020         	call	_init	;wreg free
  1179                           
  1180                           ;main.c: 193: if ( !vscp_check_pstorage() ) {
  1181  003A0A  EC60  F021         	call	_vscp_check_pstorage	;wreg free
  1182  003A0E  0900               	iorlw	0
  1183  003A10  E104               	bnz	l9975
  1184                           
  1185                           ;main.c: 196: init_app_eeprom();
  1186  003A12  ECDA  F00E         	call	_init_app_eeprom	;wreg free
  1187                           
  1188                           ;main.c: 197: init_app_ram();
  1189  003A16  EC85  F01B         	call	_init_app_ram	;wreg free
  1190  003A1A                     l9975:
  1191                           
  1192                           ;main.c: 200: }
  1193                           ;main.c: 203: calculateSetFilterMask();
  1194  003A1A  ECA4  F00C         	call	_calculateSetFilterMask	;wreg free
  1195                           
  1196                           ;main.c: 205: vscp_init();
  1197  003A1E  EC1C  F020         	call	_vscp_init	;wreg free
  1198  003A22                     l151:
  1199                           
  1200                           ; BSR set to: 0
  1201  003A22  0004               	clrwdt		;# 
  1202                           
  1203                           ;main.c: 211: if ( ( vscp_initbtncnt > 250 ) &&
  1204                           ;main.c: 212: ( 0x01 != vscp_node_state ) ) {
  1205  003A24  0EFA               	movlw	250
  1206  003A26  0100               	movlb	0	; () banked
  1207  003A28  6590               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1208  003A2A  D00E               	goto	l9991
  1209                           
  1210                           ; BSR set to: 0
  1211  003A2C  0593               	decf	_vscp_node_state& (0+255),w,b
  1212  003A2E  E00C               	bz	l9991
  1213                           
  1214                           ; BSR set to: 0
  1215                           ;main.c: 215: vscp_nickname = 0xff;
  1216  003A30  6992               	setf	_vscp_nickname& (0+255),b
  1217                           
  1218                           ; BSR set to: 0
  1219                           ;main.c: 216: (Busy_eep(), Write_b_eep(0x01,0xff));
  1220  003A32  EC7F  F022         	call	_Busy_eep	;wreg free
  1221  003A36  6A09               	clrf	?_Write_b_eep+1,c
  1222  003A38  0E01               	movlw	1
  1223  003A3A  6E08               	movwf	?_Write_b_eep,c
  1224  003A3C  0EFF               	movlw	255
  1225  003A3E  680A               	setf	?_Write_b_eep+2,c
  1226  003A40  EC7C  F020         	call	_Write_b_eep	;wreg free
  1227                           
  1228                           ;main.c: 217: vscp_init();
  1229  003A44  EC1C  F020         	call	_vscp_init	;wreg free
  1230  003A48                     l9991:
  1231                           
  1232                           ; BSR set to: 0
  1233                           ;main.c: 219: }
  1234                           ;main.c: 224: vscp_imsg.flags = 0;
  1235  003A48  6B97               	clrf	_vscp_imsg& (0+255),b
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;main.c: 225: vscp_getEvent();
  1239  003A4A  ECD9  F020         	call	_vscp_getEvent	;wreg free
  1240                           
  1241                           ;main.c: 227: switch ( vscp_node_state ) {
  1242  003A4E  D01C               	goto	l10015
  1243  003A50                     l9995:
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;main.c: 232: if (0xff == vscp_nickname) {
  1247  003A50  2992               	incf	_vscp_nickname& (0+255),w,b
  1248  003A52  E103               	bnz	l9999
  1249                           
  1250                           ; BSR set to: 0
  1251                           ;main.c: 234: vscp_node_state = 0x01;
  1252  003A54  0E01               	movlw	1
  1253  003A56  6F93               	movwf	_vscp_node_state& (0+255),b
  1254                           
  1255                           ;main.c: 235: } else {
  1256  003A58  D023               	goto	l10017
  1257  003A5A                     l9999:
  1258                           
  1259                           ; BSR set to: 0
  1260                           ;main.c: 237: vscp_node_state = 0x03;
  1261  003A5A  0E03               	movlw	3
  1262  003A5C  6F93               	movwf	_vscp_node_state& (0+255),b
  1263  003A5E                     l10001:
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;main.c: 238: vscp_goActiveState();
  1267  003A5E  ECA4  F021         	call	_vscp_goActiveState	;wreg free
  1268  003A62  D01E               	goto	l10017
  1269  003A64                     l10003:
  1270                           
  1271                           ; BSR set to: 0
  1272                           ;main.c: 243: vscp_handleProbeState();
  1273  003A64  EC76  F01D         	call	_vscp_handleProbeState	;wreg free
  1274                           
  1275                           ;main.c: 244: break;
  1276  003A68  D01B               	goto	l10017
  1277  003A6A                     l160:
  1278                           
  1279                           ; BSR set to: 0
  1280                           ;main.c: 253: if (vscp_imsg.flags & 0x80) {
  1281  003A6A  AF97               	btfss	_vscp_imsg& (0+255),7,b
  1282  003A6C  D019               	goto	l10017
  1283                           
  1284                           ; BSR set to: 0
  1285                           ;main.c: 255: if ( 0 == vscp_imsg.vscp_class ) {
  1286  003A6E  519A               	movf	(_vscp_imsg+3)& (0+255),w,b
  1287  003A70  1199               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1288  003A72  B4D8               	btfsc	status,2,c
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;main.c: 258: vscp_handleProtocolEvent();
  1292  003A74  EC85  F009         	call	_vscp_handleProtocolEvent	;wreg free
  1293                           
  1294                           ;main.c: 260: }
  1295                           ;main.c: 262: doDM();
  1296  003A78  EC0C  F011         	call	_doDM	;wreg free
  1297  003A7C  D011               	goto	l10017
  1298  003A7E                     l10011:
  1299                           
  1300                           ; BSR set to: 0
  1301                           ;main.c: 268: vscp_error();
  1302  003A7E  EC82  F022         	call	_vscp_error	;wreg free
  1303                           
  1304                           ;main.c: 269: break;
  1305  003A82  D00E               	goto	l10017
  1306  003A84                     l164:
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;main.c: 272: vscp_node_state = 0x00;
  1310  003A84  6B93               	clrf	_vscp_node_state& (0+255),b
  1311                           
  1312                           ;main.c: 273: break;
  1313  003A86  D00C               	goto	l10017
  1314  003A88                     l10015:
  1315  003A88  0100               	movlb	0	; () banked
  1316  003A8A  5193               	movf	_vscp_node_state& (0+255),w,b
  1317                           
  1318                           ; Switch size 1, requested type "speed"
  1319                           ; Number of cases is 5, Range of values is 0 to 4
  1320                           ; switch strategies available:
  1321                           ; Name         Instructions Cycles
  1322                           ; simple_byte           16     9 (average)
  1323                           ;	Chosen strategy is simple_byte
  1324  003A8C  E0E1               	bz	l9995
  1325  003A8E  0A01               	xorlw	1	; case 1
  1326  003A90  E0E9               	bz	l10003
  1327  003A92  0A03               	xorlw	3	; case 2
  1328  003A94  E0E4               	bz	l10001
  1329  003A96  0A01               	xorlw	1	; case 3
  1330  003A98  E0E8               	bz	l160
  1331  003A9A  0A07               	xorlw	7	; case 4
  1332  003A9C  E0F0               	bz	l10011
  1333  003A9E  D7F2               	goto	l164
  1334  003AA0                     l10017:
  1335                           
  1336                           ;main.c: 278: if ( measurement_clock > 1000 ) {
  1337  003AA0  0EE9               	movlw	233
  1338  003AA2  0100               	movlb	0	; () banked
  1339  003AA4  5D80               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1340  003AA6  0E03               	movlw	3
  1341  003AA8  5981               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1342  003AAA  0E00               	movlw	0
  1343  003AAC  5982               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1344  003AAE  0E00               	movlw	0
  1345  003AB0  5983               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1346  003AB2  E30B               	bnc	l10027
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;main.c: 280: measurement_clock = 0;
  1350  003AB4  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
  1351  003AB6  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1352  003AB8  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1353  003ABA  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1354                           
  1355                           ; BSR set to: 0
  1356                           ;main.c: 283: vscp_doOneSecondWork();
  1357  003ABC  ECD0  F01F         	call	_vscp_doOneSecondWork	;wreg free
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;main.c: 287: if ( 0x03 == vscp_node_state ) {
  1361  003AC0  5193               	movf	_vscp_node_state& (0+255),w,b
  1362  003AC2  0A03               	xorlw	3
  1363  003AC4  B4D8               	btfsc	status,2,c
  1364                           
  1365                           ; BSR set to: 0
  1366                           ;main.c: 290: doApplicationOneSecondWork();
  1367  003AC6  EC8B  F012         	call	_doApplicationOneSecondWork	;wreg free
  1368  003ACA                     l10027:
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;main.c: 292: }
  1372                           ;main.c: 294: }
  1373                           ;main.c: 297: if ( seconds > 59 ) {
  1374  003ACA  0E3B               	movlw	59
  1375  003ACC  658D               	cpfsgt	_seconds& (0+255),b
  1376  003ACE  D00B               	goto	l10043
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;main.c: 299: seconds = 0;
  1380  003AD0  6B8D               	clrf	_seconds& (0+255),b
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;main.c: 300: minutes++;
  1384  003AD2  2B8B               	incf	_minutes& (0+255),f,b
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;main.c: 302: if ( minutes > 59 ) {
  1388  003AD4  0E3B               	movlw	59
  1389  003AD6  658B               	cpfsgt	_minutes& (0+255),b
  1390  003AD8  D002               	goto	l10039
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;main.c: 303: minutes = 0;
  1394  003ADA  6B8B               	clrf	_minutes& (0+255),b
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;main.c: 304: hours++;
  1398  003ADC  2B8A               	incf	_hours& (0+255),f,b
  1399  003ADE                     l10039:
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;main.c: 305: }
  1403                           ;main.c: 307: if ( hours > 23 ) hours = 0;
  1404  003ADE  0E17               	movlw	23
  1405  003AE0  658A               	cpfsgt	_hours& (0+255),b
  1406  003AE2  D001               	goto	l10043
  1407                           
  1408                           ; BSR set to: 0
  1409  003AE4  6B8A               	clrf	_hours& (0+255),b
  1410  003AE6                     l10043:
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;main.c: 309: }
  1414                           ;main.c: 311: doWork();
  1415  003AE6  EC84  F022         	call	_doWork	;wreg free
  1416  003AEA  D79B               	goto	l151
  1417  003AEC                     __end_of_main:
  1418                           	opt stack 0
  1419                           tblptru	equ	0xFF8
  1420                           postinc0	equ	0xFEE
  1421                           wreg	equ	0xFE8
  1422                           status	equ	0xFD8
  1423                           
  1424 ;; *************** function _doWork *****************
  1425 ;; Defined at:
  1426 ;;		line 890 in file "../main.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;		None
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;		None
  1431 ;; Return value:  Size  Location     Type
  1432 ;;		None               void
  1433 ;; Registers used:
  1434 ;;		wreg, status,2, status,0
  1435 ;; Tracked objects:
  1436 ;;		On entry : F/0
  1437 ;;		On exit  : F/0
  1438 ;;		Unchanged: F/0
  1439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1440 ;;      Params:         0       0       0       0       0       0       0
  1441 ;;      Locals:         0       0       0       0       0       0       0
  1442 ;;      Temps:          0       0       0       0       0       0       0
  1443 ;;      Totals:         0       0       0       0       0       0       0
  1444 ;;Total ram usage:        0 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; Hardware stack levels required when called:    2
  1447 ;; This function calls:
  1448 ;;		Nothing
  1449 ;; This function is called by:
  1450 ;;		_main
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           	psect	text1
  1455  004508                     __ptext1:
  1456                           	opt stack 0
  1457  004508                     _doWork:
  1458                           	opt stack 28
  1459                           
  1460                           ; BSR set to: 0
  1461                           
  1462                           ; BSR set to: 0
  1463                           
  1464                           ; BSR set to: 0
  1465                           ;incstack = 0
  1466                           ;incstack = 0
  1467  004508  0012               	return	
  1468  00450A                     __end_of_doWork:
  1469                           	opt stack 0
  1470                           tblptru	equ	0xFF8
  1471                           postinc0	equ	0xFEE
  1472                           wreg	equ	0xFE8
  1473                           status	equ	0xFD8
  1474                           
  1475 ;; *************** function _doApplicationOneSecondWork *****************
  1476 ;; Defined at:
  1477 ;;		line 595 in file "../main.c"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;		None
  1480 ;; Auto vars:     Size  Location     Type
  1481 ;;  i               1   32[BANK0 ] unsigned char 
  1482 ;;  ctrlreg         1   31[BANK0 ] unsigned char 
  1483 ;;  bOn             1   30[BANK0 ] enum E15660
  1484 ;; Return value:  Size  Location     Type
  1485 ;;		None               void
  1486 ;; Registers used:
  1487 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1488 ;; Tracked objects:
  1489 ;;		On entry : F/0
  1490 ;;		On exit  : F/0
  1491 ;;		Unchanged: 0/0
  1492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1493 ;;      Params:         0       0       0       0       0       0       0
  1494 ;;      Locals:         0       3       0       0       0       0       0
  1495 ;;      Temps:          0       3       0       0       0       0       0
  1496 ;;      Totals:         0       6       0       0       0       0       0
  1497 ;;Total ram usage:        6 bytes
  1498 ;; Hardware stack levels used:    1
  1499 ;; Hardware stack levels required when called:    8
  1500 ;; This function calls:
  1501 ;;		_Read_b_eep
  1502 ;;		_doActionOff
  1503 ;;		_SendInformationEvent
  1504 ;; This function is called by:
  1505 ;;		_main
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           	psect	text2
  1510  002516                     __ptext2:
  1511                           	opt stack 0
  1512  002516                     _doApplicationOneSecondWork:
  1513                           	opt stack 22
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;main.c: 597: uint8_t i;
  1517                           ;main.c: 598: uint8_t ctrlreg;
  1518                           ;main.c: 599: BOOL bOn = 0;
  1519                           
  1520                           ; BSR set to: 0
  1521                           ;incstack = 0
  1522                           ;incstack = 0
  1523  002516  6BD0               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1524                           
  1525                           ;main.c: 601: for ( i = 0; i < 8; i++ ) {
  1526  002518  6BD2               	clrf	doApplicationOneSecondWork@i& (0+255),b
  1527  00251A                     l10535:
  1528                           
  1529                           ; BSR set to: 0
  1530  00251A  0E07               	movlw	7
  1531  00251C  65D2               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  1532  00251E  D001               	goto	l10539
  1533  002520  D172               	goto	l236
  1534  002522                     l10539:
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;main.c: 604: ctrlreg = Read_b_eep(0x43 + 10 + i);
  1538  002522  0E4D               	movlw	77
  1539  002524  25D2               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1540  002526  6E08               	movwf	?_Read_b_eep,c
  1541  002528  6A09               	clrf	?_Read_b_eep+1,c
  1542  00252A  0E00               	movlw	0
  1543  00252C  2209               	addwfc	?_Read_b_eep+1,f,c
  1544  00252E  EC4B  F022         	call	_Read_b_eep	;wreg free
  1545  002532  0100               	movlb	0	; () banked
  1546  002534  6FD1               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;main.c: 607: if ( !( ctrlreg & 0x80 ) ) continue;
  1550  002536  AFD1               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  1551  002538  D164               	goto	l10623
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;main.c: 611: if ( relay_protection_timer[ i ] ) {
  1555                           
  1556                           ; BSR set to: 0
  1557  00253A  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1558  00253C  0D02               	mullw	2
  1559  00253E  50F3               	movf	prodl,w,c
  1560  002540  0F60               	addlw	low _relay_protection_timer
  1561  002542  6ED9               	movwf	fsr2l,c
  1562  002544  6ADA               	clrf	fsr2h,c
  1563  002546  50DE               	movf	postinc2,w,c
  1564  002548  10DD               	iorwf	postdec2,w,c
  1565  00254A  E037               	bz	l10557
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;main.c: 613: relay_protection_timer[ i ]--;
  1569  00254C  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1570  00254E  0D02               	mullw	2
  1571  002550  50F3               	movf	prodl,w,c
  1572  002552  0F60               	addlw	low _relay_protection_timer
  1573  002554  6ED9               	movwf	fsr2l,c
  1574  002556  6ADA               	clrf	fsr2h,c
  1575  002558  06DE               	decf	postinc2,f,c
  1576  00255A  0E00               	movlw	0
  1577  00255C  5ADD               	subwfb	postdec2,f,c
  1578                           
  1579                           ;main.c: 616: if ( !relay_protection_timer[ i ] &&
  1580                           ;main.c: 617: ( Read_b_eep(0x43 + 10 + i) &
  1581                           ;main.c: 618: 0x04 ) ) {
  1582  00255E  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1583  002560  0D02               	mullw	2
  1584  002562  50F3               	movf	prodl,w,c
  1585  002564  0F60               	addlw	low _relay_protection_timer
  1586  002566  6ED9               	movwf	fsr2l,c
  1587  002568  6ADA               	clrf	fsr2h,c
  1588  00256A  50DE               	movf	postinc2,w,c
  1589  00256C  10DD               	iorwf	postdec2,w,c
  1590  00256E  E146               	bnz	l10559
  1591                           
  1592                           ; BSR set to: 0
  1593  002570  0E4D               	movlw	77
  1594  002572  25D2               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1595  002574  6E08               	movwf	?_Read_b_eep,c
  1596  002576  6A09               	clrf	?_Read_b_eep+1,c
  1597  002578  0E00               	movlw	0
  1598  00257A  2209               	addwfc	?_Read_b_eep+1,f,c
  1599  00257C  EC4B  F022         	call	_Read_b_eep	;wreg free
  1600  002580  0100               	movlb	0	; () banked
  1601  002582  6FCD               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1602  002584  A5CD               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1603  002586  D03A               	goto	l10559
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;main.c: 621: doActionOff( 0, (1 << i) );
  1607  002588  C0D2  F0CD         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1608  00258C  0E01               	movlw	1
  1609  00258E  6FCE               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1610  002590  2BCD               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1611  002592  D002               	goto	u12394
  1612  002594                     u12395:
  1613  002594  90D8               	bcf	status,0,c
  1614  002596  37CE               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1615  002598                     u12394:
  1616  002598  2FCD               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1617  00259A  D7FC               	goto	u12395
  1618  00259C  51CE               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1619  00259E  6E51               	movwf	?_doActionOff,c
  1620  0025A0  0E00               	movlw	0
  1621  0025A2  EC8F  F01C         	call	_doActionOff
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;main.c: 624: if ( ctrlreg & 0x02 ) {
  1625  0025A6  A3D1               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  1626  0025A8  D029               	goto	l10559
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;main.c: 625: SendInformationEvent( i, 1,
  1630                           ;main.c: 626: 2 );
  1631  0025AA  0E01               	movlw	1
  1632  0025AC  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  1633  0025AE  0E02               	movlw	2
  1634  0025B0  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1635  0025B2  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1636  0025B4  EC9A  F01F         	call	_SendInformationEvent
  1637  0025B8  D021               	goto	l10559
  1638  0025BA                     l10557:
  1639                           
  1640                           ; BSR set to: 0
  1641                           ;main.c: 631: else {
  1642                           ;main.c: 633: relay_protection_timer[ i ] =
  1643                           ;main.c: 634: Read_b_eep(0x43 + 34 + i) * 256 +
  1644                           ;main.c: 635: Read_b_eep(0x43 + 35 + i);
  1645  0025BA  0E65               	movlw	101
  1646  0025BC  25D2               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1647  0025BE  6E08               	movwf	?_Read_b_eep,c
  1648  0025C0  6A09               	clrf	?_Read_b_eep+1,c
  1649  0025C2  0E00               	movlw	0
  1650  0025C4  2209               	addwfc	?_Read_b_eep+1,f,c
  1651  0025C6  EC4B  F022         	call	_Read_b_eep	;wreg free
  1652  0025CA  0100               	movlb	0	; () banked
  1653  0025CC  6FCE               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1654  0025CE  6BCD               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1655  0025D0  0E66               	movlw	102
  1656  0025D2  25D2               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1657  0025D4  6E08               	movwf	?_Read_b_eep,c
  1658  0025D6  6A09               	clrf	?_Read_b_eep+1,c
  1659  0025D8  0E00               	movlw	0
  1660  0025DA  2209               	addwfc	?_Read_b_eep+1,f,c
  1661  0025DC  EC4B  F022         	call	_Read_b_eep	;wreg free
  1662  0025E0  0100               	movlb	0	; () banked
  1663  0025E2  27CD               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1664  0025E4  0E00               	movlw	0
  1665  0025E6  23CE               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1666  0025E8  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1667  0025EA  0D02               	mullw	2
  1668  0025EC  50F3               	movf	prodl,w,c
  1669  0025EE  0F60               	addlw	low _relay_protection_timer
  1670  0025F0  6ED9               	movwf	fsr2l,c
  1671  0025F2  6ADA               	clrf	fsr2h,c
  1672  0025F4  C0CD  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1673  0025F8  C0CE  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1674  0025FC                     l10559:
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;main.c: 636: }
  1678                           ;main.c: 639: if ( relay_pulse_flags & (1 << i) ) {
  1679  0025FC  C0D2  F0CD         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1680  002600  0E01               	movlw	1
  1681  002602  6FCE               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1682  002604  2BCD               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1683  002606  D002               	goto	u12414
  1684  002608                     u12415:
  1685  002608  90D8               	bcf	status,0,c
  1686  00260A  37CE               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1687  00260C                     u12414:
  1688  00260C  2FCD               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1689  00260E  D7FC               	goto	u12415
  1690  002610  51CE               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1691  002612  158C               	andwf	_relay_pulse_flags& (0+255),w,b
  1692  002614  E101 D0F5          	bz	l10623
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;main.c: 641: if ( relay_pulse_timer[ i ] ) {
  1696  002618  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1697  00261A  0D02               	mullw	2
  1698  00261C  50F3               	movf	prodl,w,c
  1699  00261E  0F70               	addlw	low _relay_pulse_timer
  1700  002620  6ED9               	movwf	fsr2l,c
  1701  002622  6ADA               	clrf	fsr2h,c
  1702  002624  50DE               	movf	postinc2,w,c
  1703  002626  10DD               	iorwf	postdec2,w,c
  1704  002628  E101 D0CC          	bz	l10621
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;main.c: 643: relay_pulse_timer[ i ]--;
  1708  00262C  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1709  00262E  0D02               	mullw	2
  1710  002630  50F3               	movf	prodl,w,c
  1711  002632  0F70               	addlw	low _relay_pulse_timer
  1712  002634  6ED9               	movwf	fsr2l,c
  1713  002636  6ADA               	clrf	fsr2h,c
  1714  002638  06DE               	decf	postinc2,f,c
  1715  00263A  0E00               	movlw	0
  1716  00263C  5ADD               	subwfb	postdec2,f,c
  1717                           
  1718                           ;main.c: 646: if ( !relay_pulse_timer[ i ] ) {
  1719  00263E  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1720  002640  0D02               	mullw	2
  1721  002642  50F3               	movf	prodl,w,c
  1722  002644  0F70               	addlw	low _relay_pulse_timer
  1723  002646  6ED9               	movwf	fsr2l,c
  1724  002648  6ADA               	clrf	fsr2h,c
  1725  00264A  50DE               	movf	postinc2,w,c
  1726  00264C  10DD               	iorwf	postdec2,w,c
  1727  00264E  E02E               	bz	l10597
  1728  002650  D0D8               	goto	l10623
  1729  002652                     l206:
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;main.c: 651: if ( LATBbits.LATB4 ) {
  1733  002652  A88A               	btfss	3978,4,c	;volatile
  1734  002654  D002               	goto	l207
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;main.c: 652: LATBbits.LATB4 = 0;
  1738  002656  988A               	bcf	3978,4,c	;volatile
  1739  002658  D025               	goto	L6
  1740  00265A                     l207:
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;main.c: 655: LATBbits.LATB4 = 1;
  1744  00265A  888A               	bsf	3978,4,c	;volatile
  1745  00265C                     l10569:
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;main.c: 656: bOn = 1;
  1749  00265C  0E01               	movlw	1
  1750  00265E  6FD0               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  1751  002660  D033               	goto	l10599
  1752  002662                     l210:
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;main.c: 661: if ( LATBbits.LATB1 ) {
  1756  002662  A28A               	btfss	3978,1,c	;volatile
  1757  002664  D002               	goto	l211
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;main.c: 662: LATBbits.LATB1 = 0;
  1761  002666  928A               	bcf	3978,1,c	;volatile
  1762  002668  D01D               	goto	L6
  1763  00266A                     l211:
  1764                           
  1765                           ; BSR set to: 0
  1766                           ;main.c: 665: LATBbits.LATB1 = 1;
  1767  00266A  828A               	bsf	3978,1,c	;volatile
  1768  00266C  D7F7               	goto	l10569
  1769  00266E                     l213:
  1770                           
  1771                           ; BSR set to: 0
  1772                           ;main.c: 671: if ( LATBbits.LATB0 ) {
  1773  00266E  A08A               	btfss	3978,0,c	;volatile
  1774  002670  D002               	goto	l214
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;main.c: 672: LATBbits.LATB0 = 0;
  1778  002672  908A               	bcf	3978,0,c	;volatile
  1779  002674  D017               	goto	L6
  1780  002676                     l214:
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;main.c: 675: LATBbits.LATB0 = 1;
  1784  002676  808A               	bsf	3978,0,c	;volatile
  1785  002678  D7F1               	goto	l10569
  1786  00267A                     l216:
  1787                           
  1788                           ; BSR set to: 0
  1789                           ;main.c: 681: if ( LATCbits.LATC7 ) {
  1790  00267A  AE8B               	btfss	3979,7,c	;volatile
  1791  00267C  D002               	goto	l217
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;main.c: 682: LATCbits.LATC7 = 0;
  1795  00267E  9E8B               	bcf	3979,7,c	;volatile
  1796  002680  D011               	goto	L6
  1797  002682                     l217:
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;main.c: 685: LATCbits.LATC7 = 1;
  1801  002682  8E8B               	bsf	3979,7,c	;volatile
  1802  002684  D7EB               	goto	l10569
  1803  002686                     l219:
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;main.c: 691: if ( LATCbits.LATC6 ) {
  1807  002686  AC8B               	btfss	3979,6,c	;volatile
  1808  002688  D002               	goto	l220
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;main.c: 692: LATCbits.LATC6 = 0;
  1812  00268A  9C8B               	bcf	3979,6,c	;volatile
  1813  00268C  D00B               	goto	L6
  1814  00268E                     l220:
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;main.c: 695: LATCbits.LATC6 = 1;
  1818  00268E  8C8B               	bsf	3979,6,c	;volatile
  1819  002690  D7E5               	goto	l10569
  1820  002692                     l222:
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;main.c: 701: if ( LATCbits.LATC5 ) {
  1824  002692  AA8B               	btfss	3979,5,c	;volatile
  1825  002694  D002               	goto	l223
  1826                           
  1827                           ; BSR set to: 0
  1828                           ;main.c: 702: LATCbits.LATC5 = 0;
  1829  002696  9A8B               	bcf	3979,5,c	;volatile
  1830  002698  D005               	goto	L6
  1831  00269A                     l223:
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;main.c: 705: LATCbits.LATC5 = 1;
  1835  00269A  8A8B               	bsf	3979,5,c	;volatile
  1836  00269C  D7DF               	goto	l10569
  1837  00269E                     l225:
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;main.c: 711: if ( LATCbits.LATC4 ) {
  1841  00269E  A88B               	btfss	3979,4,c	;volatile
  1842  0026A0  D003               	goto	l226
  1843                           
  1844                           ; BSR set to: 0
  1845                           ;main.c: 712: LATCbits.LATC4 = 0;
  1846  0026A2  988B               	bcf	3979,4,c	;volatile
  1847  0026A4                     L6:
  1848                           
  1849                           ;main.c: 713: bOn = 0;
  1850  0026A4  6BD0               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1851                           
  1852                           ;main.c: 714: } else {
  1853  0026A6  D010               	goto	l10599
  1854  0026A8                     l226:
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;main.c: 715: LATCbits.LATC4 = 1;
  1858  0026A8  888B               	bsf	3979,4,c	;volatile
  1859  0026AA  D7D8               	goto	l10569
  1860  0026AC                     l10597:
  1861                           
  1862                           ; BSR set to: 0
  1863  0026AC  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1864                           
  1865                           ; Switch size 1, requested type "speed"
  1866                           ; Number of cases is 7, Range of values is 0 to 6
  1867                           ; switch strategies available:
  1868                           ; Name         Instructions Cycles
  1869                           ; simple_byte           22    12 (average)
  1870                           ;	Chosen strategy is simple_byte
  1871  0026AE  E0D1               	bz	l206
  1872  0026B0  0A01               	xorlw	1	; case 1
  1873  0026B2  E0D7               	bz	l210
  1874  0026B4  0A03               	xorlw	3	; case 2
  1875  0026B6  E0DB               	bz	l213
  1876  0026B8  0A01               	xorlw	1	; case 3
  1877  0026BA  E0DF               	bz	l216
  1878  0026BC  0A07               	xorlw	7	; case 4
  1879  0026BE  E0E3               	bz	l219
  1880  0026C0  0A01               	xorlw	1	; case 5
  1881  0026C2  E0E7               	bz	l222
  1882  0026C4  0A03               	xorlw	3	; case 6
  1883  0026C6  E0EB               	bz	l225
  1884  0026C8                     l10599:
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;main.c: 723: relay_pulse_timer[ i ] =
  1888                           ;main.c: 724: Read_b_eep(0x43 + 18 + 2*i) * 256 +
  1889                           ;main.c: 726: Read_b_eep(0x43 + 19 + 2*i);
  1890  0026C8  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1891  0026CA  0D02               	mullw	2
  1892  0026CC  0E55               	movlw	85
  1893  0026CE  24F3               	addwf	prodl,w,c
  1894  0026D0  6E08               	movwf	?_Read_b_eep,c
  1895  0026D2  0E00               	movlw	0
  1896  0026D4  20F4               	addwfc	prodh,w,c
  1897  0026D6  6E09               	movwf	?_Read_b_eep+1,c
  1898  0026D8  EC4B  F022         	call	_Read_b_eep	;wreg free
  1899  0026DC  0100               	movlb	0	; () banked
  1900  0026DE  6FCE               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1901  0026E0  6BCD               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1902  0026E2  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1903  0026E4  0D02               	mullw	2
  1904  0026E6  0E56               	movlw	86
  1905  0026E8  24F3               	addwf	prodl,w,c
  1906  0026EA  6E08               	movwf	?_Read_b_eep,c
  1907  0026EC  0E00               	movlw	0
  1908  0026EE  20F4               	addwfc	prodh,w,c
  1909  0026F0  6E09               	movwf	?_Read_b_eep+1,c
  1910  0026F2  EC4B  F022         	call	_Read_b_eep	;wreg free
  1911  0026F6  0100               	movlb	0	; () banked
  1912  0026F8  27CD               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1913  0026FA  0E00               	movlw	0
  1914  0026FC  23CE               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1915  0026FE  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1916  002700  0D02               	mullw	2
  1917  002702  50F3               	movf	prodl,w,c
  1918  002704  0F70               	addlw	low _relay_pulse_timer
  1919  002706  6ED9               	movwf	fsr2l,c
  1920  002708  6ADA               	clrf	fsr2h,c
  1921  00270A  C0CD  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1922  00270E  C0CE  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1923                           
  1924                           ; BSR set to: 0
  1925                           ;main.c: 729: if ( bOn ) {
  1926  002712  51D0               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  1927  002714  E044               	bz	l228
  1928                           
  1929                           ; BSR set to: 0
  1930                           ;main.c: 732: if ( Read_b_eep(0x43 + 10 + i) & 0x04 ) {
  1931  002716  0E4D               	movlw	77
  1932  002718  25D2               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1933  00271A  6E08               	movwf	?_Read_b_eep,c
  1934  00271C  6A09               	clrf	?_Read_b_eep+1,c
  1935  00271E  0E00               	movlw	0
  1936  002720  2209               	addwfc	?_Read_b_eep+1,f,c
  1937  002722  EC4B  F022         	call	_Read_b_eep	;wreg free
  1938  002726  0100               	movlb	0	; () banked
  1939  002728  6FCD               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1940  00272A  A5CD               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1941  00272C  D025               	goto	l10607
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;main.c: 733: relay_protection_timer[ i ] =
  1945                           ;main.c: 734: Read_b_eep(0x43 + 34 + 2*i) * 256 +
  1946                           ;main.c: 735: Read_b_eep(0x43 + 35 + 2*i);
  1947  00272E  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1948  002730  0D02               	mullw	2
  1949  002732  0E65               	movlw	101
  1950  002734  24F3               	addwf	prodl,w,c
  1951  002736  6E08               	movwf	?_Read_b_eep,c
  1952  002738  0E00               	movlw	0
  1953  00273A  20F4               	addwfc	prodh,w,c
  1954  00273C  6E09               	movwf	?_Read_b_eep+1,c
  1955  00273E  EC4B  F022         	call	_Read_b_eep	;wreg free
  1956  002742  0100               	movlb	0	; () banked
  1957  002744  6FCE               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1958  002746  6BCD               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1959  002748  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1960  00274A  0D02               	mullw	2
  1961  00274C  0E66               	movlw	102
  1962  00274E  24F3               	addwf	prodl,w,c
  1963  002750  6E08               	movwf	?_Read_b_eep,c
  1964  002752  0E00               	movlw	0
  1965  002754  20F4               	addwfc	prodh,w,c
  1966  002756  6E09               	movwf	?_Read_b_eep+1,c
  1967  002758  EC4B  F022         	call	_Read_b_eep	;wreg free
  1968  00275C  0100               	movlb	0	; () banked
  1969  00275E  27CD               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1970  002760  0E00               	movlw	0
  1971  002762  23CE               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1972  002764  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1973  002766  0D02               	mullw	2
  1974  002768  50F3               	movf	prodl,w,c
  1975  00276A  0F60               	addlw	low _relay_protection_timer
  1976  00276C  6ED9               	movwf	fsr2l,c
  1977  00276E  6ADA               	clrf	fsr2h,c
  1978  002770  C0CD  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1979  002774  C0CE  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1980  002778                     l10607:
  1981                           
  1982                           ; BSR set to: 0
  1983                           ;main.c: 736: }
  1984                           ;main.c: 738: if ( ctrlreg & 0x08 ) {
  1985  002778  A7D1               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  1986  00277A  D007               	goto	l10611
  1987                           
  1988                           ; BSR set to: 0
  1989                           ;main.c: 739: SendInformationEvent( i, 20,
  1990                           ;main.c: 740: 3 );
  1991  00277C  0E14               	movlw	20
  1992  00277E  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  1993  002780  0E03               	movlw	3
  1994  002782  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1995  002784  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1996  002786  EC9A  F01F         	call	_SendInformationEvent
  1997  00278A                     l10611:
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;main.c: 741: }
  2001                           ;main.c: 743: if ( ctrlreg & 0x20 ) {
  2002  00278A  ABD1               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2003  00278C  D03A               	goto	l10623
  2004                           
  2005                           ; BSR set to: 0
  2006                           ;main.c: 744: SendInformationEvent( i, 20,
  2007                           ;main.c: 745: 25 );
  2008  00278E  0E14               	movlw	20
  2009  002790  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  2010  002792  0E19               	movlw	25
  2011  002794  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2012  002796  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2013  002798  EC9A  F01F         	call	_SendInformationEvent
  2014  00279C  D032               	goto	l10623
  2015  00279E                     l228:
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;main.c: 750: if ( ctrlreg & 0x10 ) {
  2019  00279E  A9D1               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2020  0027A0  D007               	goto	l10617
  2021                           
  2022                           ; BSR set to: 0
  2023                           ;main.c: 751: SendInformationEvent( i, 20,
  2024                           ;main.c: 752: 4 );
  2025  0027A2  0E14               	movlw	20
  2026  0027A4  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  2027  0027A6  0E04               	movlw	4
  2028  0027A8  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2029  0027AA  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2030  0027AC  EC9A  F01F         	call	_SendInformationEvent
  2031  0027B0                     l10617:
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;main.c: 753: }
  2035                           ;main.c: 755: if (ctrlreg & 0x40) {
  2036  0027B0  ADD1               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),6,b
  2037  0027B2  D027               	goto	l10623
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;main.c: 756: SendInformationEvent( i, 20,
  2041                           ;main.c: 757: 24 );
  2042  0027B4  0E14               	movlw	20
  2043  0027B6  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  2044  0027B8  0E18               	movlw	24
  2045  0027BA  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2046  0027BC  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2047  0027BE  EC9A  F01F         	call	_SendInformationEvent
  2048  0027C2  D01F               	goto	l10623
  2049  0027C4                     l10621:
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;main.c: 764: else {
  2053                           ;main.c: 766: relay_pulse_timer[ 0 ] =
  2054                           ;main.c: 767: Read_b_eep(0x43 + 18 + 2*i) * 256 +
  2055                           ;main.c: 768: Read_b_eep(0x43 + 19 + 2*i);
  2056  0027C4  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2057  0027C6  0D02               	mullw	2
  2058  0027C8  0E56               	movlw	86
  2059  0027CA  24F3               	addwf	prodl,w,c
  2060  0027CC  6E08               	movwf	?_Read_b_eep,c
  2061  0027CE  0E00               	movlw	0
  2062  0027D0  20F4               	addwfc	prodh,w,c
  2063  0027D2  6E09               	movwf	?_Read_b_eep+1,c
  2064  0027D4  EC4B  F022         	call	_Read_b_eep	;wreg free
  2065  0027D8  0100               	movlb	0	; () banked
  2066  0027DA  6FCD               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2067  0027DC  51D2               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2068  0027DE  0D02               	mullw	2
  2069  0027E0  0E55               	movlw	85
  2070  0027E2  24F3               	addwf	prodl,w,c
  2071  0027E4  6E08               	movwf	?_Read_b_eep,c
  2072  0027E6  0E00               	movlw	0
  2073  0027E8  20F4               	addwfc	prodh,w,c
  2074  0027EA  6E09               	movwf	?_Read_b_eep+1,c
  2075  0027EC  EC4B  F022         	call	_Read_b_eep	;wreg free
  2076  0027F0  0100               	movlb	0	; () banked
  2077  0027F2  6FCF               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2078  0027F4  6BCE               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2079  0027F6  51CD               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2080  0027F8  25CE               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2081  0027FA  6F70               	movwf	_relay_pulse_timer& (0+255),b
  2082  0027FC  0E00               	movlw	0
  2083  0027FE  21CF               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2084  002800  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  2085  002802                     l10623:
  2086                           
  2087                           ; BSR set to: 0
  2088  002802  2BD2               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  2089  002804  D68A               	goto	l10535
  2090  002806                     l236:
  2091                           
  2092                           ; BSR set to: 0
  2093  002806  0012               	return	
  2094  002808                     __end_of_doApplicationOneSecondWork:
  2095                           	opt stack 0
  2096                           tblptru	equ	0xFF8
  2097                           prodh	equ	0xFF4
  2098                           prodl	equ	0xFF3
  2099                           postinc0	equ	0xFEE
  2100                           wreg	equ	0xFE8
  2101                           postinc2	equ	0xFDE
  2102                           postdec2	equ	0xFDD
  2103                           fsr2h	equ	0xFDA
  2104                           fsr2l	equ	0xFD9
  2105                           status	equ	0xFD8
  2106                           
  2107 ;; *************** function _vscp_doOneSecondWork *****************
  2108 ;; Defined at:
  2109 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;		None
  2112 ;; Auto vars:     Size  Location     Type
  2113 ;;		None
  2114 ;; Return value:  Size  Location     Type
  2115 ;;		None               void
  2116 ;; Registers used:
  2117 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2118 ;; Tracked objects:
  2119 ;;		On entry : F/0
  2120 ;;		On exit  : F/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2123 ;;      Params:         0       0       0       0       0       0       0
  2124 ;;      Locals:         0       0       0       0       0       0       0
  2125 ;;      Temps:          1       0       0       0       0       0       0
  2126 ;;      Totals:         1       0       0       0       0       0       0
  2127 ;;Total ram usage:        1 bytes
  2128 ;; Hardware stack levels used:    1
  2129 ;; Hardware stack levels required when called:    8
  2130 ;; This function calls:
  2131 ;;		_vscp_getZone
  2132 ;;		_vscp_getSubzone
  2133 ;;		_vscp_sendHeartBeat
  2134 ;; This function is called by:
  2135 ;;		_main
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           	psect	text3
  2140  003FA0                     __ptext3:
  2141                           	opt stack 0
  2142  003FA0                     _vscp_doOneSecondWork:
  2143                           	opt stack 22
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;vscp_firmware.c: 526: ++vscp_second;
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;incstack = 0
  2150                           ;incstack = 0
  2151  003FA0  2B96               	incf	_vscp_second& (0+255),f,b
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  2155  003FA2  0E3B               	movlw	59
  2156  003FA4  6596               	cpfsgt	_vscp_second& (0+255),b
  2157  003FA6  D00D               	goto	l8595
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;vscp_firmware.c: 529: vscp_second = 0;
  2161  003FA8  6B96               	clrf	_vscp_second& (0+255),b
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;vscp_firmware.c: 530: vscp_minute++;
  2165  003FAA  2B91               	incf	_vscp_minute& (0+255),f,b
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  2169  003FAC  5193               	movf	_vscp_node_state& (0+255),w,b
  2170  003FAE  0A03               	xorlw	3
  2171  003FB0  E108               	bnz	l8595
  2172                           
  2173                           ; BSR set to: 0
  2174                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  2175                           ;vscp_firmware.c: 535: vscp_getSubzone());
  2176  003FB2  EC5D  F022         	call	_vscp_getSubzone	;wreg free
  2177  003FB6  0100               	movlb	0	; () banked
  2178  003FB8  6FC6               	movwf	?_vscp_sendHeartBeat& (0+255),b
  2179  003FBA  EC62  F022         	call	_vscp_getZone	;wreg free
  2180  003FBE  EC02  F021         	call	_vscp_sendHeartBeat
  2181  003FC2                     l8595:
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;vscp_firmware.c: 536: }
  2185                           ;vscp_firmware.c: 537: }
  2186                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  2187  003FC2  0E3B               	movlw	59
  2188  003FC4  6591               	cpfsgt	_vscp_minute& (0+255),b
  2189  003FC6  D002               	goto	l8601
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;vscp_firmware.c: 540: vscp_minute = 0;
  2193  003FC8  6B91               	clrf	_vscp_minute& (0+255),b
  2194                           
  2195                           ; BSR set to: 0
  2196                           ;vscp_firmware.c: 541: vscp_hour++;
  2197  003FCA  2B8F               	incf	_vscp_hour& (0+255),f,b
  2198  003FCC                     l8601:
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;vscp_firmware.c: 542: }
  2202                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  2203  003FCC  0E17               	movlw	23
  2204  003FCE  658F               	cpfsgt	_vscp_hour& (0+255),b
  2205  003FD0  D001               	goto	l8605
  2206                           
  2207                           ; BSR set to: 0
  2208  003FD2  6B8F               	clrf	_vscp_hour& (0+255),b
  2209  003FD4                     l8605:
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  2213  003FD4  5193               	movf	_vscp_node_state& (0+255),w,b
  2214  003FD6  0A03               	xorlw	3
  2215  003FD8  E109               	bnz	l1122
  2216                           
  2217                           ; BSR set to: 0
  2218                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  2219  003FDA  2B8E               	incf	_vscp_guid_reset& (0+255),f,b
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  2223  003FDC  C08E  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  2224  003FE0  0E0F               	movlw	15
  2225  003FE2  164D               	andwf	??_vscp_doOneSecondWork,f,c
  2226  003FE4  0E02               	movlw	2
  2227  003FE6  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  2228  003FE8  B0D8               	btfsc	status,0,c
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  2232  003FEA  6B8E               	clrf	_vscp_guid_reset& (0+255),b
  2233  003FEC                     l1122:
  2234                           
  2235                           ; BSR set to: 0
  2236  003FEC  0012               	return	
  2237  003FEE                     __end_of_vscp_doOneSecondWork:
  2238                           	opt stack 0
  2239                           tblptru	equ	0xFF8
  2240                           prodh	equ	0xFF4
  2241                           prodl	equ	0xFF3
  2242                           postinc0	equ	0xFEE
  2243                           wreg	equ	0xFE8
  2244                           postinc2	equ	0xFDE
  2245                           postdec2	equ	0xFDD
  2246                           fsr2h	equ	0xFDA
  2247                           fsr2l	equ	0xFD9
  2248                           status	equ	0xFD8
  2249                           
  2250 ;; *************** function _vscp_sendHeartBeat *****************
  2251 ;; Defined at:
  2252 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;  zone            1    wreg     unsigned char 
  2255 ;;  subzone         1   20[BANK0 ] unsigned char 
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;  zone            1   75[COMRAM] unsigned char 
  2258 ;; Return value:  Size  Location     Type
  2259 ;;		None               void
  2260 ;; Registers used:
  2261 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : F/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2267 ;;      Params:         0       1       0       0       0       0       0
  2268 ;;      Locals:         1       0       0       0       0       0       0
  2269 ;;      Temps:          0       0       0       0       0       0       0
  2270 ;;      Totals:         1       1       0       0       0       0       0
  2271 ;;Total ram usage:        2 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; Hardware stack levels required when called:    7
  2274 ;; This function calls:
  2275 ;;		_vscp_sendEvent
  2276 ;; This function is called by:
  2277 ;;		_vscp_doOneSecondWork
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           	psect	text4
  2282  004204                     __ptext4:
  2283                           	opt stack 0
  2284  004204                     _vscp_sendHeartBeat:
  2285                           	opt stack 22
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;incstack = 0
  2289                           ;incstack = 0
  2290                           ;vscp_sendHeartBeat@zone stored from wreg
  2291  004204  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  2292                           
  2293                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  2294  004208  0E83               	movlw	131
  2295  00420A  0100               	movlb	0	; () banked
  2296  00420C  6FA5               	movwf	_vscp_omsg& (0+255),b
  2297                           
  2298                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  2299  00420E  0E07               	movlw	7
  2300  004210  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  2301                           
  2302                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  2303  004212  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  2304  004214  0E14               	movlw	20
  2305  004216  6FA7               	movwf	(_vscp_omsg+2)& (0+255),b
  2306                           
  2307                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  2308  004218  0E09               	movlw	9
  2309  00421A  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  2313  00421C  6BAA               	clrf	(_vscp_omsg+5)& (0+255),b
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  2317  00421E  C04C  F0AB         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  2321  004222  C0C6  F0AC         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;vscp_firmware.c: 388: vscp_sendEvent();
  2325  004226  EF3B  F021         	goto	_vscp_sendEvent	;wreg free
  2326  00422A                     __end_of_vscp_sendHeartBeat:
  2327                           	opt stack 0
  2328                           tblptru	equ	0xFF8
  2329                           prodh	equ	0xFF4
  2330                           prodl	equ	0xFF3
  2331                           postinc0	equ	0xFEE
  2332                           wreg	equ	0xFE8
  2333                           postinc2	equ	0xFDE
  2334                           postdec2	equ	0xFDD
  2335                           fsr2h	equ	0xFDA
  2336                           fsr2l	equ	0xFD9
  2337                           status	equ	0xFD8
  2338                           
  2339 ;; *************** function _vscp_getSubzone *****************
  2340 ;; Defined at:
  2341 ;;		line 879 in file "../main.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;		None
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;		None
  2346 ;; Return value:  Size  Location     Type
  2347 ;;                  1    wreg      unsigned char 
  2348 ;; Registers used:
  2349 ;;		wreg, status,2, cstack
  2350 ;; Tracked objects:
  2351 ;;		On entry : F/0
  2352 ;;		On exit  : 0/0
  2353 ;;		Unchanged: 0/0
  2354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2355 ;;      Params:         0       0       0       0       0       0       0
  2356 ;;      Locals:         0       0       0       0       0       0       0
  2357 ;;      Temps:          0       0       0       0       0       0       0
  2358 ;;      Totals:         0       0       0       0       0       0       0
  2359 ;;Total ram usage:        0 bytes
  2360 ;; Hardware stack levels used:    1
  2361 ;; Hardware stack levels required when called:    3
  2362 ;; This function calls:
  2363 ;;		_Read_b_eep
  2364 ;; This function is called by:
  2365 ;;		_vscp_doOneSecondWork
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           	psect	text5
  2370  0044BA                     __ptext5:
  2371                           	opt stack 0
  2372  0044BA                     _vscp_getSubzone:
  2373                           	opt stack 26
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;main.c: 880: return Read_b_eep(0x43 + 1);
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;incstack = 0
  2380                           ;incstack = 0
  2381  0044BA  6A09               	clrf	?_Read_b_eep+1,c
  2382  0044BC  0E44               	movlw	68
  2383  0044BE  6E08               	movwf	?_Read_b_eep,c
  2384  0044C0  EF4B  F022         	goto	_Read_b_eep	;wreg free
  2385  0044C4                     __end_of_vscp_getSubzone:
  2386                           	opt stack 0
  2387                           tblptru	equ	0xFF8
  2388                           prodh	equ	0xFF4
  2389                           prodl	equ	0xFF3
  2390                           postinc0	equ	0xFEE
  2391                           wreg	equ	0xFE8
  2392                           postinc2	equ	0xFDE
  2393                           postdec2	equ	0xFDD
  2394                           fsr2h	equ	0xFDA
  2395                           fsr2l	equ	0xFD9
  2396                           status	equ	0xFD8
  2397                           
  2398 ;; *************** function _vscp_getZone *****************
  2399 ;; Defined at:
  2400 ;;		line 870 in file "../main.c"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;		None
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;		None
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  1    wreg      unsigned char 
  2407 ;; Registers used:
  2408 ;;		wreg, status,2, cstack
  2409 ;; Tracked objects:
  2410 ;;		On entry : F/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2414 ;;      Params:         0       0       0       0       0       0       0
  2415 ;;      Locals:         0       0       0       0       0       0       0
  2416 ;;      Temps:          0       0       0       0       0       0       0
  2417 ;;      Totals:         0       0       0       0       0       0       0
  2418 ;;Total ram usage:        0 bytes
  2419 ;; Hardware stack levels used:    1
  2420 ;; Hardware stack levels required when called:    3
  2421 ;; This function calls:
  2422 ;;		_Read_b_eep
  2423 ;; This function is called by:
  2424 ;;		_vscp_doOneSecondWork
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428                           	psect	text6
  2429  0044C4                     __ptext6:
  2430                           	opt stack 0
  2431  0044C4                     _vscp_getZone:
  2432                           	opt stack 26
  2433                           
  2434                           ; BSR set to: 0
  2435                           ;main.c: 871: return Read_b_eep(0x43 + 0);
  2436                           
  2437                           ;incstack = 0
  2438                           ;incstack = 0
  2439  0044C4  6A09               	clrf	?_Read_b_eep+1,c
  2440  0044C6  0E43               	movlw	67
  2441  0044C8  6E08               	movwf	?_Read_b_eep,c
  2442  0044CA  EF4B  F022         	goto	_Read_b_eep	;wreg free
  2443  0044CE                     __end_of_vscp_getZone:
  2444                           	opt stack 0
  2445                           tblptru	equ	0xFF8
  2446                           prodh	equ	0xFF4
  2447                           prodl	equ	0xFF3
  2448                           postinc0	equ	0xFEE
  2449                           wreg	equ	0xFE8
  2450                           postinc2	equ	0xFDE
  2451                           postdec2	equ	0xFDD
  2452                           fsr2h	equ	0xFDA
  2453                           fsr2l	equ	0xFD9
  2454                           status	equ	0xFD8
  2455                           
  2456 ;; *************** function _vscp_error *****************
  2457 ;; Defined at:
  2458 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;		None
  2461 ;; Auto vars:     Size  Location     Type
  2462 ;;		None
  2463 ;; Return value:  Size  Location     Type
  2464 ;;		None               void
  2465 ;; Registers used:
  2466 ;;		None
  2467 ;; Tracked objects:
  2468 ;;		On entry : 0/0
  2469 ;;		On exit  : 0/0
  2470 ;;		Unchanged: 0/0
  2471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2472 ;;      Params:         0       0       0       0       0       0       0
  2473 ;;      Locals:         0       0       0       0       0       0       0
  2474 ;;      Temps:          0       0       0       0       0       0       0
  2475 ;;      Totals:         0       0       0       0       0       0       0
  2476 ;;Total ram usage:        0 bytes
  2477 ;; Hardware stack levels used:    1
  2478 ;; Hardware stack levels required when called:    2
  2479 ;; This function calls:
  2480 ;;		Nothing
  2481 ;; This function is called by:
  2482 ;;		_main
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           	psect	text7
  2487  004504                     __ptext7:
  2488                           	opt stack 0
  2489  004504                     _vscp_error:
  2490                           	opt stack 28
  2491                           
  2492                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  2493                           
  2494                           ;incstack = 0
  2495                           ;incstack = 0
  2496  004504  6A56               	clrf	_vscp_initledfunc,c
  2497  004506  0012               	return	
  2498  004508                     __end_of_vscp_error:
  2499                           	opt stack 0
  2500                           tblptru	equ	0xFF8
  2501                           prodh	equ	0xFF4
  2502                           prodl	equ	0xFF3
  2503                           postinc0	equ	0xFEE
  2504                           wreg	equ	0xFE8
  2505                           postinc2	equ	0xFDE
  2506                           postdec2	equ	0xFDD
  2507                           fsr2h	equ	0xFDA
  2508                           fsr2l	equ	0xFD9
  2509                           status	equ	0xFD8
  2510                           
  2511 ;; *************** function _doDM *****************
  2512 ;; Defined at:
  2513 ;;		line 1635 in file "../main.c"
  2514 ;; Parameters:    Size  Location     Type
  2515 ;;		None
  2516 ;; Auto vars:     Size  Location     Type
  2517 ;;  class_mask      2   33[BANK0 ] unsigned short 
  2518 ;;  class_filter    2   31[BANK0 ] unsigned short 
  2519 ;;  i               1   44[BANK0 ] unsigned char 
  2520 ;;  dmflags         1   43[BANK0 ] unsigned char 
  2521 ;;  type_mask       1   36[BANK0 ] unsigned char 
  2522 ;;  type_filter     1   35[BANK0 ] unsigned char 
  2523 ;; Return value:  Size  Location     Type
  2524 ;;		None               void
  2525 ;; Registers used:
  2526 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : F/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2532 ;;      Params:         0       0       0       0       0       0       0
  2533 ;;      Locals:         0      14       0       0       0       0       0
  2534 ;;      Temps:          0       3       0       0       0       0       0
  2535 ;;      Totals:         0      17       0       0       0       0       0
  2536 ;;Total ram usage:       17 bytes
  2537 ;; Hardware stack levels used:    1
  2538 ;; Hardware stack levels required when called:    8
  2539 ;; This function calls:
  2540 ;;		_Read_b_eep
  2541 ;;		_doActionOff
  2542 ;;		_doActionOn
  2543 ;;		_doActionPulse
  2544 ;;		_doActionStatus
  2545 ;;		_doActionDisable
  2546 ;;		_doActionToggle
  2547 ;; This function is called by:
  2548 ;;		_main
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           	psect	text8
  2553  002218                     __ptext8:
  2554                           	opt stack 0
  2555  002218                     _doDM:
  2556                           	opt stack 22
  2557                           
  2558                           ;main.c: 1636: unsigned char i;
  2559                           ;main.c: 1637: unsigned char dmflags;
  2560                           ;main.c: 1638: unsigned short class_filter;
  2561                           ;main.c: 1639: unsigned short class_mask;
  2562                           ;main.c: 1640: unsigned char type_filter;
  2563                           ;main.c: 1641: unsigned char type_mask;
  2564                           ;main.c: 1644: if ( 0 == vscp_imsg.vscp_class ) return;
  2565                           
  2566                           ;incstack = 0
  2567                           ;incstack = 0
  2568  002218  0100               	movlb	0	; () banked
  2569  00221A  519A               	movf	(_vscp_imsg+3)& (0+255),w,b
  2570  00221C  1199               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2571  00221E  E101 D179          	bz	l420
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;main.c: 1646: for (i = 0; i < 7; i++) {
  2575  002222  6BDE               	clrf	doDM@i& (0+255),b
  2576  002224                     l10483:
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;main.c: 1649: dmflags = Read_b_eep(0x43 + 72 + 1 + (8 * i));
  2580  002224  51DE               	movf	doDM@i& (0+255),w,b
  2581  002226  6FCE               	movwf	??_doDM& (0+255),b
  2582  002228  6BCF               	clrf	(??_doDM+1)& (0+255),b
  2583  00222A  90D8               	bcf	status,0,c
  2584  00222C  37CE               	rlcf	??_doDM& (0+255),f,b
  2585  00222E  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2586  002230  90D8               	bcf	status,0,c
  2587  002232  37CE               	rlcf	??_doDM& (0+255),f,b
  2588  002234  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2589  002236  90D8               	bcf	status,0,c
  2590  002238  37CE               	rlcf	??_doDM& (0+255),f,b
  2591  00223A  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2592  00223C  0E8C               	movlw	140
  2593  00223E  25CE               	addwf	??_doDM& (0+255),w,b
  2594  002240  6E08               	movwf	?_Read_b_eep,c
  2595  002242  0E00               	movlw	0
  2596  002244  21CF               	addwfc	(??_doDM+1)& (0+255),w,b
  2597  002246  6E09               	movwf	?_Read_b_eep+1,c
  2598  002248  EC4B  F022         	call	_Read_b_eep	;wreg free
  2599  00224C  0100               	movlb	0	; () banked
  2600  00224E  6FDD               	movwf	doDM@dmflags& (0+255),b
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;main.c: 1652: if ( dmflags & 0x80 ) {
  2604  002250  AFDD               	btfss	doDM@dmflags& (0+255),7,b
  2605  002252  D15B               	goto	l10529
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;main.c: 1655: if ( ( dmflags & 0x40 ) &&
  2609                           ;main.c: 1656: ( vscp_imsg.oaddr != Read_b_eep(0x43 + 72 + (8 * i)) ) ) {
  2610  002254  ADDD               	btfss	doDM@dmflags& (0+255),6,b
  2611  002256  D018               	goto	l10493
  2612                           
  2613                           ; BSR set to: 0
  2614  002258  51DE               	movf	doDM@i& (0+255),w,b
  2615  00225A  6FCE               	movwf	??_doDM& (0+255),b
  2616  00225C  6BCF               	clrf	(??_doDM+1)& (0+255),b
  2617  00225E  90D8               	bcf	status,0,c
  2618  002260  37CE               	rlcf	??_doDM& (0+255),f,b
  2619  002262  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2620  002264  90D8               	bcf	status,0,c
  2621  002266  37CE               	rlcf	??_doDM& (0+255),f,b
  2622  002268  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2623  00226A  90D8               	bcf	status,0,c
  2624  00226C  37CE               	rlcf	??_doDM& (0+255),f,b
  2625  00226E  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2626  002270  0E8B               	movlw	139
  2627  002272  25CE               	addwf	??_doDM& (0+255),w,b
  2628  002274  6E08               	movwf	?_Read_b_eep,c
  2629  002276  0E00               	movlw	0
  2630  002278  21CF               	addwfc	(??_doDM+1)& (0+255),w,b
  2631  00227A  6E09               	movwf	?_Read_b_eep+1,c
  2632  00227C  EC4B  F022         	call	_Read_b_eep	;wreg free
  2633  002280  0100               	movlb	0	; () banked
  2634  002282  199C               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2635  002284  E001 D141          	bnz	l10529
  2636  002288                     l10493:
  2637                           
  2638                           ; BSR set to: 0
  2639                           ;main.c: 1658: }
  2640                           ;main.c: 1682: class_filter = ( dmflags & 0x01)*256 +
  2641                           ;main.c: 1683: Read_b_eep(0x43 + 72 + (8 * i) + 3);
  2642  002288  51DE               	movf	doDM@i& (0+255),w,b
  2643  00228A  0D08               	mullw	8
  2644  00228C  0E8E               	movlw	142
  2645  00228E  24F3               	addwf	prodl,w,c
  2646  002290  6E08               	movwf	?_Read_b_eep,c
  2647  002292  0E00               	movlw	0
  2648  002294  20F4               	addwfc	prodh,w,c
  2649  002296  6E09               	movwf	?_Read_b_eep+1,c
  2650  002298  EC4B  F022         	call	_Read_b_eep	;wreg free
  2651  00229C  0100               	movlb	0	; () banked
  2652  00229E  6FCE               	movwf	??_doDM& (0+255),b
  2653  0022A0  51DD               	movf	doDM@dmflags& (0+255),w,b
  2654  0022A2  0B01               	andlw	1
  2655  0022A4  6FD0               	movwf	(??_doDM+2)& (0+255),b
  2656  0022A6  6BCF               	clrf	(??_doDM+1)& (0+255),b
  2657  0022A8  51CE               	movf	??_doDM& (0+255),w,b
  2658  0022AA  25CF               	addwf	(??_doDM+1)& (0+255),w,b
  2659  0022AC  6FD1               	movwf	doDM@class_filter& (0+255),b
  2660  0022AE  0E00               	movlw	0
  2661  0022B0  21D0               	addwfc	(??_doDM+2)& (0+255),w,b
  2662  0022B2  6FD2               	movwf	(doDM@class_filter+1)& (0+255),b
  2663                           
  2664                           ;main.c: 1687: class_mask = ( dmflags & 0x02)*256 +
  2665                           ;main.c: 1688: Read_b_eep(0x43 + 72 + (8 * i) + 2);
  2666  0022B4  51DE               	movf	doDM@i& (0+255),w,b
  2667  0022B6  0D08               	mullw	8
  2668  0022B8  0E8D               	movlw	141
  2669  0022BA  24F3               	addwf	prodl,w,c
  2670  0022BC  6E08               	movwf	?_Read_b_eep,c
  2671  0022BE  0E00               	movlw	0
  2672  0022C0  20F4               	addwfc	prodh,w,c
  2673  0022C2  6E09               	movwf	?_Read_b_eep+1,c
  2674  0022C4  EC4B  F022         	call	_Read_b_eep	;wreg free
  2675  0022C8  0100               	movlb	0	; () banked
  2676  0022CA  6FCE               	movwf	??_doDM& (0+255),b
  2677  0022CC  51DD               	movf	doDM@dmflags& (0+255),w,b
  2678  0022CE  0B02               	andlw	2
  2679  0022D0  6FD0               	movwf	(??_doDM+2)& (0+255),b
  2680  0022D2  6BCF               	clrf	(??_doDM+1)& (0+255),b
  2681  0022D4  51CE               	movf	??_doDM& (0+255),w,b
  2682  0022D6  25CF               	addwf	(??_doDM+1)& (0+255),w,b
  2683  0022D8  6FD3               	movwf	doDM@class_mask& (0+255),b
  2684  0022DA  0E00               	movlw	0
  2685  0022DC  21D0               	addwfc	(??_doDM+2)& (0+255),w,b
  2686  0022DE  6FD4               	movwf	(doDM@class_mask+1)& (0+255),b
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;main.c: 1692: type_filter = Read_b_eep(0x43 + 72 + (8 * i) + 5);
  2690  0022E0  51DE               	movf	doDM@i& (0+255),w,b
  2691  0022E2  6FCE               	movwf	??_doDM& (0+255),b
  2692  0022E4  6BCF               	clrf	(??_doDM+1)& (0+255),b
  2693  0022E6  90D8               	bcf	status,0,c
  2694  0022E8  37CE               	rlcf	??_doDM& (0+255),f,b
  2695  0022EA  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2696  0022EC  90D8               	bcf	status,0,c
  2697  0022EE  37CE               	rlcf	??_doDM& (0+255),f,b
  2698  0022F0  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2699  0022F2  90D8               	bcf	status,0,c
  2700  0022F4  37CE               	rlcf	??_doDM& (0+255),f,b
  2701  0022F6  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2702  0022F8  0E90               	movlw	144
  2703  0022FA  25CE               	addwf	??_doDM& (0+255),w,b
  2704  0022FC  6E08               	movwf	?_Read_b_eep,c
  2705  0022FE  0E00               	movlw	0
  2706  002300  21CF               	addwfc	(??_doDM+1)& (0+255),w,b
  2707  002302  6E09               	movwf	?_Read_b_eep+1,c
  2708  002304  EC4B  F022         	call	_Read_b_eep	;wreg free
  2709  002308  0100               	movlb	0	; () banked
  2710  00230A  6FD5               	movwf	doDM@type_filter& (0+255),b
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;main.c: 1696: type_mask = Read_b_eep(0x43 + 72 + (8 * i) + 4);
  2714  00230C  51DE               	movf	doDM@i& (0+255),w,b
  2715  00230E  6FCE               	movwf	??_doDM& (0+255),b
  2716  002310  6BCF               	clrf	(??_doDM+1)& (0+255),b
  2717  002312  90D8               	bcf	status,0,c
  2718  002314  37CE               	rlcf	??_doDM& (0+255),f,b
  2719  002316  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2720  002318  90D8               	bcf	status,0,c
  2721  00231A  37CE               	rlcf	??_doDM& (0+255),f,b
  2722  00231C  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2723  00231E  90D8               	bcf	status,0,c
  2724  002320  37CE               	rlcf	??_doDM& (0+255),f,b
  2725  002322  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2726  002324  0E8F               	movlw	143
  2727  002326  25CE               	addwf	??_doDM& (0+255),w,b
  2728  002328  6E08               	movwf	?_Read_b_eep,c
  2729  00232A  0E00               	movlw	0
  2730  00232C  21CF               	addwfc	(??_doDM+1)& (0+255),w,b
  2731  00232E  6E09               	movwf	?_Read_b_eep+1,c
  2732  002330  EC4B  F022         	call	_Read_b_eep	;wreg free
  2733  002334  0100               	movlb	0	; () banked
  2734  002336  6FD6               	movwf	doDM@type_mask& (0+255),b
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;main.c: 1701: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2738                           ;main.c: 1702: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2739  002338  EE20  F099         	lfsr	2,_vscp_imsg+2
  2740  00233C  CFDE F0CE          	movff	postinc2,??_doDM
  2741  002340  CFDD F0CF          	movff	postdec2,??_doDM+1
  2742  002344  51D1               	movf	doDM@class_filter& (0+255),w,b
  2743  002346  1BCE               	xorwf	??_doDM& (0+255),f,b
  2744  002348  51D2               	movf	(doDM@class_filter+1)& (0+255),w,b
  2745  00234A  1BCF               	xorwf	(??_doDM+1)& (0+255),f,b
  2746  00234C  51D3               	movf	doDM@class_mask& (0+255),w,b
  2747  00234E  17CE               	andwf	??_doDM& (0+255),f,b
  2748  002350  51D4               	movf	(doDM@class_mask+1)& (0+255),w,b
  2749  002352  17CF               	andwf	(??_doDM+1)& (0+255),f,b
  2750  002354  51CF               	movf	(??_doDM+1)& (0+255),w,b
  2751  002356  11CE               	iorwf	??_doDM& (0+255),w,b
  2752  002358  E001 D0D7          	bnz	l10529
  2753                           
  2754                           ; BSR set to: 0
  2755  00235C  519B               	movf	(_vscp_imsg+4)& (0+255),w,b
  2756  00235E  19D5               	xorwf	doDM@type_filter& (0+255),w,b
  2757  002360  15D6               	andwf	doDM@type_mask& (0+255),w,b
  2758  002362  E101 D0AF          	bz	l10527
  2759  002366  D0D1               	goto	l10529
  2760  002368                     l10505:
  2761                           
  2762                           ;main.c: 1708: doActionOn( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2763  002368  0100               	movlb	0	; () banked
  2764  00236A  51DE               	movf	doDM@i& (0+255),w,b
  2765  00236C  6FCE               	movwf	??_doDM& (0+255),b
  2766  00236E  6BCF               	clrf	(??_doDM+1)& (0+255),b
  2767  002370  90D8               	bcf	status,0,c
  2768  002372  37CE               	rlcf	??_doDM& (0+255),f,b
  2769  002374  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2770  002376  90D8               	bcf	status,0,c
  2771  002378  37CE               	rlcf	??_doDM& (0+255),f,b
  2772  00237A  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2773  00237C  90D8               	bcf	status,0,c
  2774  00237E  37CE               	rlcf	??_doDM& (0+255),f,b
  2775  002380  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2776  002382  0E92               	movlw	146
  2777  002384  25CE               	addwf	??_doDM& (0+255),w,b
  2778  002386  6E08               	movwf	?_Read_b_eep,c
  2779  002388  0E00               	movlw	0
  2780  00238A  21CF               	addwfc	(??_doDM+1)& (0+255),w,b
  2781  00238C  6E09               	movwf	?_Read_b_eep+1,c
  2782  00238E  EC4B  F022         	call	_Read_b_eep	;wreg free
  2783  002392  0100               	movlb	0	; () banked
  2784  002394  6FD7               	movwf	_doDM$2152& (0+255),b
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;main.c: 1708: doActionOn( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2788  002396  C0D7  F051         	movff	_doDM$2152,?_doActionOn
  2789  00239A  51DD               	movf	doDM@dmflags& (0+255),w,b
  2790  00239C  EC04  F014         	call	_doActionOn
  2791                           
  2792                           ;main.c: 1709: break;
  2793  0023A0  D0B4               	goto	l10529
  2794  0023A2                     l10509:
  2795                           
  2796                           ;main.c: 1712: doActionOff( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2797  0023A2  0100               	movlb	0	; () banked
  2798  0023A4  51DE               	movf	doDM@i& (0+255),w,b
  2799  0023A6  6FCE               	movwf	??_doDM& (0+255),b
  2800  0023A8  6BCF               	clrf	(??_doDM+1)& (0+255),b
  2801  0023AA  90D8               	bcf	status,0,c
  2802  0023AC  37CE               	rlcf	??_doDM& (0+255),f,b
  2803  0023AE  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2804  0023B0  90D8               	bcf	status,0,c
  2805  0023B2  37CE               	rlcf	??_doDM& (0+255),f,b
  2806  0023B4  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2807  0023B6  90D8               	bcf	status,0,c
  2808  0023B8  37CE               	rlcf	??_doDM& (0+255),f,b
  2809  0023BA  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2810  0023BC  0E92               	movlw	146
  2811  0023BE  25CE               	addwf	??_doDM& (0+255),w,b
  2812  0023C0  6E08               	movwf	?_Read_b_eep,c
  2813  0023C2  0E00               	movlw	0
  2814  0023C4  21CF               	addwfc	(??_doDM+1)& (0+255),w,b
  2815  0023C6  6E09               	movwf	?_Read_b_eep+1,c
  2816  0023C8  EC4B  F022         	call	_Read_b_eep	;wreg free
  2817  0023CC  0100               	movlb	0	; () banked
  2818  0023CE  6FD8               	movwf	_doDM$2153& (0+255),b
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;main.c: 1712: doActionOff( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2822  0023D0  C0D8  F051         	movff	_doDM$2153,?_doActionOff
  2823  0023D4  51DD               	movf	doDM@dmflags& (0+255),w,b
  2824  0023D6  EC8F  F01C         	call	_doActionOff
  2825                           
  2826                           ;main.c: 1713: break;
  2827  0023DA  D097               	goto	l10529
  2828  0023DC                     l10513:
  2829                           
  2830                           ;main.c: 1716: doActionPulse( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2831  0023DC  0100               	movlb	0	; () banked
  2832  0023DE  51DE               	movf	doDM@i& (0+255),w,b
  2833  0023E0  6FCE               	movwf	??_doDM& (0+255),b
  2834  0023E2  6BCF               	clrf	(??_doDM+1)& (0+255),b
  2835  0023E4  90D8               	bcf	status,0,c
  2836  0023E6  37CE               	rlcf	??_doDM& (0+255),f,b
  2837  0023E8  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2838  0023EA  90D8               	bcf	status,0,c
  2839  0023EC  37CE               	rlcf	??_doDM& (0+255),f,b
  2840  0023EE  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2841  0023F0  90D8               	bcf	status,0,c
  2842  0023F2  37CE               	rlcf	??_doDM& (0+255),f,b
  2843  0023F4  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2844  0023F6  0E92               	movlw	146
  2845  0023F8  25CE               	addwf	??_doDM& (0+255),w,b
  2846  0023FA  6E08               	movwf	?_Read_b_eep,c
  2847  0023FC  0E00               	movlw	0
  2848  0023FE  21CF               	addwfc	(??_doDM+1)& (0+255),w,b
  2849  002400  6E09               	movwf	?_Read_b_eep+1,c
  2850  002402  EC4B  F022         	call	_Read_b_eep	;wreg free
  2851  002406  0100               	movlb	0	; () banked
  2852  002408  6FD9               	movwf	_doDM$2154& (0+255),b
  2853                           
  2854                           ;main.c: 1716: doActionPulse( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2855  00240A  C0D9  F00A         	movff	_doDM$2154,?_doActionPulse
  2856  00240E  51DD               	movf	doDM@dmflags& (0+255),w,b
  2857  002410  EC58  F016         	call	_doActionPulse
  2858                           
  2859                           ;main.c: 1717: break;
  2860  002414  D07A               	goto	l10529
  2861  002416                     l10515:
  2862                           
  2863                           ;main.c: 1720: doActionStatus( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2864  002416  0100               	movlb	0	; () banked
  2865  002418  51DE               	movf	doDM@i& (0+255),w,b
  2866  00241A  6FCE               	movwf	??_doDM& (0+255),b
  2867  00241C  6BCF               	clrf	(??_doDM+1)& (0+255),b
  2868  00241E  90D8               	bcf	status,0,c
  2869  002420  37CE               	rlcf	??_doDM& (0+255),f,b
  2870  002422  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2871  002424  90D8               	bcf	status,0,c
  2872  002426  37CE               	rlcf	??_doDM& (0+255),f,b
  2873  002428  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2874  00242A  90D8               	bcf	status,0,c
  2875  00242C  37CE               	rlcf	??_doDM& (0+255),f,b
  2876  00242E  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2877  002430  0E92               	movlw	146
  2878  002432  25CE               	addwf	??_doDM& (0+255),w,b
  2879  002434  6E08               	movwf	?_Read_b_eep,c
  2880  002436  0E00               	movlw	0
  2881  002438  21CF               	addwfc	(??_doDM+1)& (0+255),w,b
  2882  00243A  6E09               	movwf	?_Read_b_eep+1,c
  2883  00243C  EC4B  F022         	call	_Read_b_eep	;wreg free
  2884  002440  0100               	movlb	0	; () banked
  2885  002442  6FDA               	movwf	_doDM$2155& (0+255),b
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;main.c: 1720: doActionStatus( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2889  002444  C0DA  F051         	movff	_doDM$2155,?_doActionStatus
  2890  002448  51DD               	movf	doDM@dmflags& (0+255),w,b
  2891  00244A  ECE7  F01A         	call	_doActionStatus
  2892                           
  2893                           ;main.c: 1721: break;
  2894  00244E  D05D               	goto	l10529
  2895  002450                     l10519:
  2896                           
  2897                           ;main.c: 1724: doActionDisable( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2898  002450  0100               	movlb	0	; () banked
  2899  002452  51DE               	movf	doDM@i& (0+255),w,b
  2900  002454  6FCE               	movwf	??_doDM& (0+255),b
  2901  002456  6BCF               	clrf	(??_doDM+1)& (0+255),b
  2902  002458  90D8               	bcf	status,0,c
  2903  00245A  37CE               	rlcf	??_doDM& (0+255),f,b
  2904  00245C  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2905  00245E  90D8               	bcf	status,0,c
  2906  002460  37CE               	rlcf	??_doDM& (0+255),f,b
  2907  002462  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2908  002464  90D8               	bcf	status,0,c
  2909  002466  37CE               	rlcf	??_doDM& (0+255),f,b
  2910  002468  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2911  00246A  0E92               	movlw	146
  2912  00246C  25CE               	addwf	??_doDM& (0+255),w,b
  2913  00246E  6E08               	movwf	?_Read_b_eep,c
  2914  002470  0E00               	movlw	0
  2915  002472  21CF               	addwfc	(??_doDM+1)& (0+255),w,b
  2916  002474  6E09               	movwf	?_Read_b_eep+1,c
  2917  002476  EC4B  F022         	call	_Read_b_eep	;wreg free
  2918  00247A  0100               	movlb	0	; () banked
  2919  00247C  6FDB               	movwf	_doDM$2156& (0+255),b
  2920                           
  2921                           ;main.c: 1724: doActionDisable( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2922  00247E  C0DB  F00C         	movff	_doDM$2156,?_doActionDisable
  2923  002482  51DD               	movf	doDM@dmflags& (0+255),w,b
  2924  002484  EC89  F01E         	call	_doActionDisable
  2925                           
  2926                           ;main.c: 1725: break;
  2927  002488  D040               	goto	l10529
  2928  00248A                     l10521:
  2929                           
  2930                           ;main.c: 1728: doActionToggle( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2931  00248A  0100               	movlb	0	; () banked
  2932  00248C  51DE               	movf	doDM@i& (0+255),w,b
  2933  00248E  6FCE               	movwf	??_doDM& (0+255),b
  2934  002490  6BCF               	clrf	(??_doDM+1)& (0+255),b
  2935  002492  90D8               	bcf	status,0,c
  2936  002494  37CE               	rlcf	??_doDM& (0+255),f,b
  2937  002496  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2938  002498  90D8               	bcf	status,0,c
  2939  00249A  37CE               	rlcf	??_doDM& (0+255),f,b
  2940  00249C  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2941  00249E  90D8               	bcf	status,0,c
  2942  0024A0  37CE               	rlcf	??_doDM& (0+255),f,b
  2943  0024A2  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2944  0024A4  0E92               	movlw	146
  2945  0024A6  25CE               	addwf	??_doDM& (0+255),w,b
  2946  0024A8  6E08               	movwf	?_Read_b_eep,c
  2947  0024AA  0E00               	movlw	0
  2948  0024AC  21CF               	addwfc	(??_doDM+1)& (0+255),w,b
  2949  0024AE  6E09               	movwf	?_Read_b_eep+1,c
  2950  0024B0  EC4B  F022         	call	_Read_b_eep	;wreg free
  2951  0024B4  0100               	movlb	0	; () banked
  2952  0024B6  6FDC               	movwf	_doDM$2157& (0+255),b
  2953                           
  2954                           ; BSR set to: 0
  2955                           ;main.c: 1728: doActionToggle( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2956  0024B8  C0DC  F051         	movff	_doDM$2157,?_doActionToggle
  2957  0024BC  51DD               	movf	doDM@dmflags& (0+255),w,b
  2958  0024BE  EC96  F019         	call	_doActionToggle
  2959                           
  2960                           ;main.c: 1729: break;
  2961  0024C2  D023               	goto	l10529
  2962  0024C4                     l10527:
  2963                           
  2964                           ; BSR set to: 0
  2965  0024C4  51DE               	movf	doDM@i& (0+255),w,b
  2966  0024C6  6FCE               	movwf	??_doDM& (0+255),b
  2967  0024C8  6BCF               	clrf	(??_doDM+1)& (0+255),b
  2968  0024CA  90D8               	bcf	status,0,c
  2969  0024CC  37CE               	rlcf	??_doDM& (0+255),f,b
  2970  0024CE  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2971  0024D0  90D8               	bcf	status,0,c
  2972  0024D2  37CE               	rlcf	??_doDM& (0+255),f,b
  2973  0024D4  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2974  0024D6  90D8               	bcf	status,0,c
  2975  0024D8  37CE               	rlcf	??_doDM& (0+255),f,b
  2976  0024DA  37CF               	rlcf	(??_doDM+1)& (0+255),f,b
  2977  0024DC  0E91               	movlw	145
  2978  0024DE  25CE               	addwf	??_doDM& (0+255),w,b
  2979  0024E0  6E08               	movwf	?_Read_b_eep,c
  2980  0024E2  0E00               	movlw	0
  2981  0024E4  21CF               	addwfc	(??_doDM+1)& (0+255),w,b
  2982  0024E6  6E09               	movwf	?_Read_b_eep+1,c
  2983  0024E8  EC4B  F022         	call	_Read_b_eep	;wreg free
  2984                           
  2985                           ; Switch size 1, requested type "speed"
  2986                           ; Number of cases is 6, Range of values is 1 to 16
  2987                           ; switch strategies available:
  2988                           ; Name         Instructions Cycles
  2989                           ; simple_byte           19    10 (average)
  2990                           ;	Chosen strategy is simple_byte
  2991  0024EC  0A01               	xorlw	1	; case 1
  2992  0024EE  E101 D73B          	bz	l10505
  2993  0024F2  0A03               	xorlw	3	; case 2
  2994  0024F4  E101 D755          	bz	l10509
  2995  0024F8  0A01               	xorlw	1	; case 3
  2996  0024FA  E101 D76F          	bz	l10513
  2997  0024FE  0A07               	xorlw	7	; case 4
  2998  002500  E0C4               	bz	l10521
  2999  002502  0A0E               	xorlw	14	; case 10
  3000  002504  E088               	bz	l10515
  3001  002506  0A1A               	xorlw	26	; case 16
  3002  002508  E0A3               	bz	l10519
  3003  00250A                     l10529:
  3004  00250A  0100               	movlb	0	; () banked
  3005  00250C  2BDE               	incf	doDM@i& (0+255),f,b
  3006                           
  3007                           ; BSR set to: 0
  3008  00250E  0E06               	movlw	6
  3009  002510  65DE               	cpfsgt	doDM@i& (0+255),b
  3010  002512  D688               	goto	l10483
  3011  002514                     l420:
  3012                           
  3013                           ; BSR set to: 0
  3014  002514  0012               	return	
  3015  002516                     __end_of_doDM:
  3016                           	opt stack 0
  3017                           tblptru	equ	0xFF8
  3018                           prodh	equ	0xFF4
  3019                           prodl	equ	0xFF3
  3020                           postinc0	equ	0xFEE
  3021                           wreg	equ	0xFE8
  3022                           postinc2	equ	0xFDE
  3023                           postdec2	equ	0xFDD
  3024                           fsr2h	equ	0xFDA
  3025                           fsr2l	equ	0xFD9
  3026                           status	equ	0xFD8
  3027                           
  3028 ;; *************** function _doActionToggle *****************
  3029 ;; Defined at:
  3030 ;;		line 2175 in file "../main.c"
  3031 ;; Parameters:    Size  Location     Type
  3032 ;;  dmflags         1    wreg     unsigned char 
  3033 ;;  arg             1   80[COMRAM] unsigned char 
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3036 ;;  i               1   27[BANK0 ] unsigned char 
  3037 ;;  bOn             1   26[BANK0 ] enum E15660
  3038 ;;  val             1   25[BANK0 ] unsigned char 
  3039 ;; Return value:  Size  Location     Type
  3040 ;;		None               void
  3041 ;; Registers used:
  3042 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3043 ;; Tracked objects:
  3044 ;;		On entry : F/0
  3045 ;;		On exit  : F/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3048 ;;      Params:         1       0       0       0       0       0       0
  3049 ;;      Locals:         0       4       0       0       0       0       0
  3050 ;;      Temps:          0       2       0       0       0       0       0
  3051 ;;      Totals:         1       6       0       0       0       0       0
  3052 ;;Total ram usage:        7 bytes
  3053 ;; Hardware stack levels used:    1
  3054 ;; Hardware stack levels required when called:    7
  3055 ;; This function calls:
  3056 ;;		_Read_b_eep
  3057 ;;		_SendInformationEvent
  3058 ;; This function is called by:
  3059 ;;		_doDM
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text9
  3064  00332C                     __ptext9:
  3065                           	opt stack 0
  3066  00332C                     _doActionToggle:
  3067                           	opt stack 22
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;incstack = 0
  3071                           ;incstack = 0
  3072                           ;doActionToggle@dmflags stored from wreg
  3073  00332C  CFE8 F0CA          	movff	wreg,doActionToggle@dmflags
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;main.c: 2177: unsigned char i;
  3077                           ;main.c: 2178: unsigned char val;
  3078                           ;main.c: 2179: BOOL bOn = 0;
  3079  003330  6BCC               	clrf	doActionToggle@bOn& (0+255),b
  3080                           
  3081                           ;main.c: 2181: for ( i = 0; i < 8; i++ ) {
  3082  003332  6BCD               	clrf	doActionToggle@i& (0+255),b
  3083  003334                     l11251:
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;main.c: 2184: if ( !( arg & (1 << i) ) ) continue;
  3087  003334  C0CD  F0C8         	movff	doActionToggle@i,??_doActionToggle
  3088  003338  0E01               	movlw	1
  3089  00333A  6FC9               	movwf	(??_doActionToggle+1)& (0+255),b
  3090  00333C  2BC8               	incf	??_doActionToggle& (0+255),f,b
  3091  00333E  D002               	goto	u13534
  3092  003340                     u13535:
  3093  003340  90D8               	bcf	status,0,c
  3094  003342  37C9               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3095  003344                     u13534:
  3096  003344  2FC8               	decfsz	??_doActionToggle& (0+255),f,b
  3097  003346  D7FC               	goto	u13535
  3098  003348  51C9               	movf	(??_doActionToggle+1)& (0+255),w,b
  3099  00334A  1451               	andwf	doActionToggle@arg,w,c
  3100  00334C  E101 D092          	bz	l11313
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;main.c: 2187: if ( dmflags & 0x10 ) {
  3104  003350  A9CA               	btfss	doActionToggle@dmflags& (0+255),4,b
  3105  003352  D011               	goto	l552
  3106                           
  3107                           ; BSR set to: 0
  3108                           ;main.c: 2188: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3109  003354  90D8               	bcf	status,0,c
  3110  003356  35CD               	rlcf	doActionToggle@i& (0+255),w,b
  3111  003358  6FC8               	movwf	??_doActionToggle& (0+255),b
  3112  00335A  6BC9               	clrf	(??_doActionToggle+1)& (0+255),b
  3113  00335C  37C9               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3114  00335E  0E75               	movlw	117
  3115  003360  25C8               	addwf	??_doActionToggle& (0+255),w,b
  3116  003362  6E08               	movwf	?_Read_b_eep,c
  3117  003364  0E00               	movlw	0
  3118  003366  21C9               	addwfc	(??_doActionToggle+1)& (0+255),w,b
  3119  003368  6E09               	movwf	?_Read_b_eep+1,c
  3120  00336A  EC4B  F022         	call	_Read_b_eep	;wreg free
  3121  00336E  0100               	movlb	0	; () banked
  3122  003370  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3123  003372  E001 D07F          	bnz	l11313
  3124  003376                     l552:
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;main.c: 2191: }
  3128                           ;main.c: 2192: }
  3129                           ;main.c: 2195: if ( dmflags & 0x08 ) {
  3130  003376  A7CA               	btfss	doActionToggle@dmflags& (0+255),3,b
  3131  003378  D010               	goto	l11263
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;main.c: 2196: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3135  00337A  90D8               	bcf	status,0,c
  3136  00337C  35CD               	rlcf	doActionToggle@i& (0+255),w,b
  3137  00337E  6FC8               	movwf	??_doActionToggle& (0+255),b
  3138  003380  6BC9               	clrf	(??_doActionToggle+1)& (0+255),b
  3139  003382  37C9               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3140  003384  0E76               	movlw	118
  3141  003386  25C8               	addwf	??_doActionToggle& (0+255),w,b
  3142  003388  6E08               	movwf	?_Read_b_eep,c
  3143  00338A  0E00               	movlw	0
  3144  00338C  21C9               	addwfc	(??_doActionToggle+1)& (0+255),w,b
  3145  00338E  6E09               	movwf	?_Read_b_eep+1,c
  3146  003390  EC4B  F022         	call	_Read_b_eep	;wreg free
  3147  003394  0100               	movlb	0	; () banked
  3148  003396  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3149  003398  E16D               	bnz	l11313
  3150  00339A                     l11263:
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;main.c: 2199: }
  3154                           ;main.c: 2200: }
  3155                           ;main.c: 2202: val = Read_b_eep(0x43 + 10 + i);
  3156  00339A  0E4D               	movlw	77
  3157  00339C  25CD               	addwf	doActionToggle@i& (0+255),w,b
  3158  00339E  6E08               	movwf	?_Read_b_eep,c
  3159  0033A0  6A09               	clrf	?_Read_b_eep+1,c
  3160  0033A2  0E00               	movlw	0
  3161  0033A4  2209               	addwfc	?_Read_b_eep+1,f,c
  3162  0033A6  EC4B  F022         	call	_Read_b_eep	;wreg free
  3163  0033AA  0100               	movlb	0	; () banked
  3164  0033AC  6FCB               	movwf	doActionToggle@val& (0+255),b
  3165                           
  3166                           ;main.c: 2204: switch ( i ) {
  3167  0033AE  D02D               	goto	l11295
  3168  0033B0                     l557:
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;main.c: 2207: if ( LATBbits.LATB4 ) {
  3172  0033B0  A88A               	btfss	3978,4,c	;volatile
  3173  0033B2  D002               	goto	l558
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;main.c: 2208: LATBbits.LATB4 = 0;
  3177  0033B4  988A               	bcf	3978,4,c	;volatile
  3178  0033B6  D025               	goto	L12
  3179  0033B8                     l558:
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;main.c: 2211: LATBbits.LATB4 = 1;
  3183  0033B8  888A               	bsf	3978,4,c	;volatile
  3184  0033BA                     l11267:
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;main.c: 2212: bOn = 1;
  3188  0033BA  0E01               	movlw	1
  3189  0033BC  6FCC               	movwf	doActionToggle@bOn& (0+255),b
  3190  0033BE  D033               	goto	l11297
  3191  0033C0                     l561:
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;main.c: 2217: if ( LATBbits.LATB1 ) {
  3195  0033C0  A28A               	btfss	3978,1,c	;volatile
  3196  0033C2  D002               	goto	l562
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;main.c: 2218: LATBbits.LATB1 = 0;
  3200  0033C4  928A               	bcf	3978,1,c	;volatile
  3201  0033C6  D01D               	goto	L12
  3202  0033C8                     l562:
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;main.c: 2221: LATBbits.LATB1 = 1;
  3206  0033C8  828A               	bsf	3978,1,c	;volatile
  3207  0033CA  D7F7               	goto	l11267
  3208  0033CC                     l564:
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;main.c: 2227: if ( LATBbits.LATB0 ) {
  3212  0033CC  A08A               	btfss	3978,0,c	;volatile
  3213  0033CE  D002               	goto	l565
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;main.c: 2228: LATBbits.LATB0 = 0;
  3217  0033D0  908A               	bcf	3978,0,c	;volatile
  3218  0033D2  D017               	goto	L12
  3219  0033D4                     l565:
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;main.c: 2231: LATBbits.LATB0 = 1;
  3223  0033D4  808A               	bsf	3978,0,c	;volatile
  3224  0033D6  D7F1               	goto	l11267
  3225  0033D8                     l567:
  3226                           
  3227                           ; BSR set to: 0
  3228                           ;main.c: 2237: if ( LATCbits.LATC7 ) {
  3229  0033D8  AE8B               	btfss	3979,7,c	;volatile
  3230  0033DA  D002               	goto	l568
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;main.c: 2238: LATCbits.LATC7 = 0;
  3234  0033DC  9E8B               	bcf	3979,7,c	;volatile
  3235  0033DE  D011               	goto	L12
  3236  0033E0                     l568:
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;main.c: 2241: LATCbits.LATC7 = 1;
  3240  0033E0  8E8B               	bsf	3979,7,c	;volatile
  3241  0033E2  D7EB               	goto	l11267
  3242  0033E4                     l570:
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 2247: if ( LATCbits.LATC6 ) {
  3246  0033E4  AC8B               	btfss	3979,6,c	;volatile
  3247  0033E6  D002               	goto	l571
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;main.c: 2248: LATCbits.LATC6 = 0;
  3251  0033E8  9C8B               	bcf	3979,6,c	;volatile
  3252  0033EA  D00B               	goto	L12
  3253  0033EC                     l571:
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;main.c: 2251: LATCbits.LATC6 = 1;
  3257  0033EC  8C8B               	bsf	3979,6,c	;volatile
  3258  0033EE  D7E5               	goto	l11267
  3259  0033F0                     l573:
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;main.c: 2257: if ( LATCbits.LATC5 ) {
  3263  0033F0  AA8B               	btfss	3979,5,c	;volatile
  3264  0033F2  D002               	goto	l574
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;main.c: 2258: LATCbits.LATC5 = 0;
  3268  0033F4  9A8B               	bcf	3979,5,c	;volatile
  3269  0033F6  D005               	goto	L12
  3270  0033F8                     l574:
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;main.c: 2261: LATCbits.LATC5 = 1;
  3274  0033F8  8A8B               	bsf	3979,5,c	;volatile
  3275  0033FA  D7DF               	goto	l11267
  3276  0033FC                     l576:
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;main.c: 2267: if ( LATCbits.LATC4 ) {
  3280  0033FC  A88B               	btfss	3979,4,c	;volatile
  3281  0033FE  D003               	goto	l577
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;main.c: 2268: LATCbits.LATC4 = 0;
  3285  003400  988B               	bcf	3979,4,c	;volatile
  3286  003402                     L12:
  3287                           
  3288                           ;main.c: 2269: bOn = 0;
  3289  003402  6BCC               	clrf	doActionToggle@bOn& (0+255),b
  3290                           
  3291                           ;main.c: 2270: } else {
  3292  003404  D010               	goto	l11297
  3293  003406                     l577:
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;main.c: 2271: LATCbits.LATC4 = 1;
  3297  003406  888B               	bsf	3979,4,c	;volatile
  3298  003408  D7D8               	goto	l11267
  3299  00340A                     l11295:
  3300                           
  3301                           ; BSR set to: 0
  3302  00340A  51CD               	movf	doActionToggle@i& (0+255),w,b
  3303                           
  3304                           ; Switch size 1, requested type "speed"
  3305                           ; Number of cases is 7, Range of values is 0 to 6
  3306                           ; switch strategies available:
  3307                           ; Name         Instructions Cycles
  3308                           ; simple_byte           22    12 (average)
  3309                           ;	Chosen strategy is simple_byte
  3310  00340C  E0D1               	bz	l557
  3311  00340E  0A01               	xorlw	1	; case 1
  3312  003410  E0D7               	bz	l561
  3313  003412  0A03               	xorlw	3	; case 2
  3314  003414  E0DB               	bz	l564
  3315  003416  0A01               	xorlw	1	; case 3
  3316  003418  E0DF               	bz	l567
  3317  00341A  0A07               	xorlw	7	; case 4
  3318  00341C  E0E3               	bz	l570
  3319  00341E  0A01               	xorlw	1	; case 5
  3320  003420  E0E7               	bz	l573
  3321  003422  0A03               	xorlw	3	; case 6
  3322  003424  E0EB               	bz	l576
  3323  003426                     l11297:
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;main.c: 2278: if ( bOn ) {
  3327  003426  51CC               	movf	doActionToggle@bOn& (0+255),w,b
  3328  003428  E013               	bz	l579
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;main.c: 2281: if ( val & 0x08 ) {
  3332  00342A  A7CB               	btfss	doActionToggle@val& (0+255),3,b
  3333  00342C  D007               	goto	l11303
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;main.c: 2282: SendInformationEvent( i, 20, 3 );
  3337  00342E  0E14               	movlw	20
  3338  003430  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  3339  003432  0E03               	movlw	3
  3340  003434  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3341  003436  51CD               	movf	doActionToggle@i& (0+255),w,b
  3342  003438  EC9A  F01F         	call	_SendInformationEvent
  3343  00343C                     l11303:
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;main.c: 2283: }
  3347                           ;main.c: 2286: if ( val & 0x20 ) {
  3348  00343C  ABCB               	btfss	doActionToggle@val& (0+255),5,b
  3349  00343E  D01A               	goto	l11313
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;main.c: 2287: SendInformationEvent( i, 20, 25 );
  3353  003440  0E14               	movlw	20
  3354  003442  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  3355  003444  0E19               	movlw	25
  3356  003446  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3357  003448  51CD               	movf	doActionToggle@i& (0+255),w,b
  3358  00344A  EC9A  F01F         	call	_SendInformationEvent
  3359  00344E  D012               	goto	l11313
  3360  003450                     l579:
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;main.c: 2291: else {
  3364                           ;main.c: 2294: if ( val & 0x10 ) {
  3365  003450  A9CB               	btfss	doActionToggle@val& (0+255),4,b
  3366  003452  D007               	goto	l11309
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;main.c: 2295: SendInformationEvent( i, 20, 4 );
  3370  003454  0E14               	movlw	20
  3371  003456  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  3372  003458  0E04               	movlw	4
  3373  00345A  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3374  00345C  51CD               	movf	doActionToggle@i& (0+255),w,b
  3375  00345E  EC9A  F01F         	call	_SendInformationEvent
  3376  003462                     l11309:
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;main.c: 2296: }
  3380                           ;main.c: 2299: if (val & 0x40 ) {
  3381  003462  ADCB               	btfss	doActionToggle@val& (0+255),6,b
  3382  003464  D007               	goto	l11313
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;main.c: 2300: SendInformationEvent( i, 20, 24 );
  3386  003466  0E14               	movlw	20
  3387  003468  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  3388  00346A  0E18               	movlw	24
  3389  00346C  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3390  00346E  51CD               	movf	doActionToggle@i& (0+255),w,b
  3391  003470  EC9A  F01F         	call	_SendInformationEvent
  3392  003474                     l11313:
  3393                           
  3394                           ; BSR set to: 0
  3395  003474  2BCD               	incf	doActionToggle@i& (0+255),f,b
  3396                           
  3397                           ; BSR set to: 0
  3398  003476  0E07               	movlw	7
  3399  003478  65CD               	cpfsgt	doActionToggle@i& (0+255),b
  3400  00347A  D75C               	goto	l11251
  3401                           
  3402                           ; BSR set to: 0
  3403  00347C  0C07               	retlw	7
  3404  00347E                     __end_of_doActionToggle:
  3405                           	opt stack 0
  3406                           tblptru	equ	0xFF8
  3407                           prodh	equ	0xFF4
  3408                           prodl	equ	0xFF3
  3409                           postinc0	equ	0xFEE
  3410                           wreg	equ	0xFE8
  3411                           postinc2	equ	0xFDE
  3412                           postdec2	equ	0xFDD
  3413                           fsr2h	equ	0xFDA
  3414                           fsr2l	equ	0xFD9
  3415                           status	equ	0xFD8
  3416                           
  3417 ;; *************** function _doActionDisable *****************
  3418 ;; Defined at:
  3419 ;;		line 2138 in file "../main.c"
  3420 ;; Parameters:    Size  Location     Type
  3421 ;;  dmflags         1    wreg     unsigned char 
  3422 ;;  arg             1   11[COMRAM] unsigned char 
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;  dmflags         1   15[COMRAM] unsigned char 
  3425 ;;  i               1   16[COMRAM] unsigned char 
  3426 ;;  val             1   14[COMRAM] unsigned char 
  3427 ;; Return value:  Size  Location     Type
  3428 ;;		None               void
  3429 ;; Registers used:
  3430 ;;		wreg, status,2, status,0, cstack
  3431 ;; Tracked objects:
  3432 ;;		On entry : F/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3436 ;;      Params:         1       0       0       0       0       0       0
  3437 ;;      Locals:         3       0       0       0       0       0       0
  3438 ;;      Temps:          2       0       0       0       0       0       0
  3439 ;;      Totals:         6       0       0       0       0       0       0
  3440 ;;Total ram usage:        6 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:    3
  3443 ;; This function calls:
  3444 ;;		_Busy_eep
  3445 ;;		_Write_b_eep
  3446 ;;		_Read_b_eep
  3447 ;; This function is called by:
  3448 ;;		_doDM
  3449 ;; This function uses a non-reentrant model
  3450 ;;
  3451                           
  3452                           	psect	text10
  3453  003D12                     __ptext10:
  3454                           	opt stack 0
  3455  003D12                     _doActionDisable:
  3456                           	opt stack 26
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;incstack = 0
  3460                           ;incstack = 0
  3461                           ;doActionDisable@dmflags stored from wreg
  3462  003D12  CFE8 F010          	movff	wreg,doActionDisable@dmflags
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;main.c: 2140: unsigned char i;
  3466                           ;main.c: 2141: unsigned char val;
  3467                           ;main.c: 2143: for ( i = 0; i < 8; i++ ) {
  3468  003D16  6A11               	clrf	doActionDisable@i,c
  3469  003D18                     l9475:
  3470                           
  3471                           ;main.c: 2146: if ( !( arg & (1 << i) ) ) continue;
  3472  003D18  C011  F00D         	movff	doActionDisable@i,??_doActionDisable
  3473  003D1C  0E01               	movlw	1
  3474  003D1E  6E0E               	movwf	(??_doActionDisable+1)& (0+255),c
  3475  003D20  2A0D               	incf	??_doActionDisable,f,c
  3476  003D22  D002               	goto	u10624
  3477  003D24                     u10625:
  3478  003D24  90D8               	bcf	status,0,c
  3479  003D26  360E               	rlcf	??_doActionDisable+1,f,c
  3480  003D28                     u10624:
  3481  003D28  2E0D               	decfsz	??_doActionDisable,f,c
  3482  003D2A  D7FC               	goto	u10625
  3483  003D2C  500E               	movf	??_doActionDisable+1,w,c
  3484  003D2E  140C               	andwf	doActionDisable@arg,w,c
  3485  003D30  E03A               	bz	l9493
  3486                           
  3487                           ;main.c: 2149: if ( dmflags & 0x10 ) {
  3488  003D32  A810               	btfss	doActionDisable@dmflags,4,c
  3489  003D34  D010               	goto	l541
  3490                           
  3491                           ;main.c: 2150: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3492  003D36  90D8               	bcf	status,0,c
  3493  003D38  3411               	rlcf	doActionDisable@i,w,c
  3494  003D3A  6E0D               	movwf	??_doActionDisable& (0+255),c
  3495  003D3C  6A0E               	clrf	(??_doActionDisable+1)& (0+255),c
  3496  003D3E  360E               	rlcf	(??_doActionDisable+1)& (0+255),f,c
  3497  003D40  0E75               	movlw	117
  3498  003D42  240D               	addwf	??_doActionDisable,w,c
  3499  003D44  6E08               	movwf	?_Read_b_eep,c
  3500  003D46  0E00               	movlw	0
  3501  003D48  200E               	addwfc	??_doActionDisable+1,w,c
  3502  003D4A  6E09               	movwf	?_Read_b_eep+1,c
  3503  003D4C  EC4B  F022         	call	_Read_b_eep	;wreg free
  3504  003D50  0100               	movlb	0	; () banked
  3505  003D52  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3506  003D54  E128               	bnz	l9493
  3507  003D56                     l541:
  3508                           
  3509                           ;main.c: 2153: }
  3510                           ;main.c: 2154: }
  3511                           ;main.c: 2157: if ( dmflags & 0x08 ) {
  3512  003D56  A610               	btfss	doActionDisable@dmflags,3,c
  3513  003D58  D010               	goto	l9487
  3514                           
  3515                           ;main.c: 2158: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3516  003D5A  90D8               	bcf	status,0,c
  3517  003D5C  3411               	rlcf	doActionDisable@i,w,c
  3518  003D5E  6E0D               	movwf	??_doActionDisable& (0+255),c
  3519  003D60  6A0E               	clrf	(??_doActionDisable+1)& (0+255),c
  3520  003D62  360E               	rlcf	(??_doActionDisable+1)& (0+255),f,c
  3521  003D64  0E76               	movlw	118
  3522  003D66  240D               	addwf	??_doActionDisable,w,c
  3523  003D68  6E08               	movwf	?_Read_b_eep,c
  3524  003D6A  0E00               	movlw	0
  3525  003D6C  200E               	addwfc	??_doActionDisable+1,w,c
  3526  003D6E  6E09               	movwf	?_Read_b_eep+1,c
  3527  003D70  EC4B  F022         	call	_Read_b_eep	;wreg free
  3528  003D74  0100               	movlb	0	; () banked
  3529  003D76  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3530  003D78  E116               	bnz	l9493
  3531  003D7A                     l9487:
  3532                           
  3533                           ;main.c: 2161: }
  3534                           ;main.c: 2162: }
  3535                           ;main.c: 2164: val = Read_b_eep(0x43 + 10 + i);
  3536  003D7A  0E4D               	movlw	77
  3537  003D7C  2411               	addwf	doActionDisable@i,w,c
  3538  003D7E  6E08               	movwf	?_Read_b_eep,c
  3539  003D80  6A09               	clrf	?_Read_b_eep+1,c
  3540  003D82  0E00               	movlw	0
  3541  003D84  2209               	addwfc	?_Read_b_eep+1,f,c
  3542  003D86  EC4B  F022         	call	_Read_b_eep	;wreg free
  3543  003D8A  6E0F               	movwf	doActionDisable@val,c
  3544                           
  3545                           ;main.c: 2165: (Busy_eep(), Write_b_eep(0x43 + 10 + i,val & ~0x80));
  3546  003D8C  EC7F  F022         	call	_Busy_eep	;wreg free
  3547  003D90  0E4D               	movlw	77
  3548  003D92  2411               	addwf	doActionDisable@i,w,c
  3549  003D94  6E08               	movwf	?_Write_b_eep,c
  3550  003D96  6A09               	clrf	?_Write_b_eep+1,c
  3551  003D98  0E00               	movlw	0
  3552  003D9A  2209               	addwfc	?_Write_b_eep+1,f,c
  3553  003D9C  500F               	movf	doActionDisable@val,w,c
  3554  003D9E  0B7F               	andlw	127
  3555  003DA0  6E0A               	movwf	?_Write_b_eep+2,c
  3556  003DA2  EC7C  F020         	call	_Write_b_eep	;wreg free
  3557  003DA6                     l9493:
  3558  003DA6  2A11               	incf	doActionDisable@i,f,c
  3559  003DA8  0E07               	movlw	7
  3560  003DAA  6411               	cpfsgt	doActionDisable@i,c
  3561  003DAC  D7B5               	goto	l9475
  3562  003DAE  0C07               	retlw	7
  3563  003DB0                     __end_of_doActionDisable:
  3564                           	opt stack 0
  3565                           tblptru	equ	0xFF8
  3566                           prodh	equ	0xFF4
  3567                           prodl	equ	0xFF3
  3568                           postinc0	equ	0xFEE
  3569                           wreg	equ	0xFE8
  3570                           postinc2	equ	0xFDE
  3571                           postdec2	equ	0xFDD
  3572                           fsr2h	equ	0xFDA
  3573                           fsr2l	equ	0xFD9
  3574                           status	equ	0xFD8
  3575                           
  3576 ;; *************** function _doActionStatus *****************
  3577 ;; Defined at:
  3578 ;;		line 2042 in file "../main.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;  dmflags         1    wreg     unsigned char 
  3581 ;;  arg             1   80[COMRAM] unsigned char 
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3584 ;;  i               1   27[BANK0 ] unsigned char 
  3585 ;;  val             1   26[BANK0 ] unsigned char 
  3586 ;;  bOn             1   25[BANK0 ] enum E15660
  3587 ;; Return value:  Size  Location     Type
  3588 ;;		None               void
  3589 ;; Registers used:
  3590 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3591 ;; Tracked objects:
  3592 ;;		On entry : F/0
  3593 ;;		On exit  : F/0
  3594 ;;		Unchanged: 0/0
  3595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3596 ;;      Params:         1       0       0       0       0       0       0
  3597 ;;      Locals:         0       4       0       0       0       0       0
  3598 ;;      Temps:          0       2       0       0       0       0       0
  3599 ;;      Totals:         1       6       0       0       0       0       0
  3600 ;;Total ram usage:        7 bytes
  3601 ;; Hardware stack levels used:    1
  3602 ;; Hardware stack levels required when called:    7
  3603 ;; This function calls:
  3604 ;;		_Read_b_eep
  3605 ;;		_SendInformationEvent
  3606 ;; This function is called by:
  3607 ;;		_doDM
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           	psect	text11
  3612  0035CE                     __ptext11:
  3613                           	opt stack 0
  3614  0035CE                     _doActionStatus:
  3615                           	opt stack 22
  3616                           
  3617                           ;incstack = 0
  3618                           ;incstack = 0
  3619                           ;doActionStatus@dmflags stored from wreg
  3620  0035CE  CFE8 F0CA          	movff	wreg,doActionStatus@dmflags
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;main.c: 2044: unsigned char i;
  3624                           ;main.c: 2045: unsigned char val;
  3625                           ;main.c: 2046: BOOL bOn = 0;
  3626  0035D2  6BCB               	clrf	doActionStatus@bOn& (0+255),b
  3627                           
  3628                           ;main.c: 2048: for (i = 0; i < 8; i++) {
  3629  0035D4  6BCD               	clrf	doActionStatus@i& (0+255),b
  3630  0035D6                     l11193:
  3631                           
  3632                           ; BSR set to: 0
  3633                           ;main.c: 2051: if (!(arg & (1 << i))) continue;
  3634  0035D6  C0CD  F0C8         	movff	doActionStatus@i,??_doActionStatus
  3635  0035DA  0E01               	movlw	1
  3636  0035DC  6FC9               	movwf	(??_doActionStatus+1)& (0+255),b
  3637  0035DE  2BC8               	incf	??_doActionStatus& (0+255),f,b
  3638  0035E0  D002               	goto	u13414
  3639  0035E2                     u13415:
  3640  0035E2  90D8               	bcf	status,0,c
  3641  0035E4  37C9               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3642  0035E6                     u13414:
  3643  0035E6  2FC8               	decfsz	??_doActionStatus& (0+255),f,b
  3644  0035E8  D7FC               	goto	u13415
  3645  0035EA  51C9               	movf	(??_doActionStatus+1)& (0+255),w,b
  3646  0035EC  1451               	andwf	doActionStatus@arg,w,c
  3647  0035EE  E101 D087          	bz	l11241
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;main.c: 2054: if ( dmflags & 0x10 ) {
  3651  0035F2  A9CA               	btfss	doActionStatus@dmflags& (0+255),4,b
  3652  0035F4  D010               	goto	l515
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;main.c: 2055: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3656  0035F6  90D8               	bcf	status,0,c
  3657  0035F8  35CD               	rlcf	doActionStatus@i& (0+255),w,b
  3658  0035FA  6FC8               	movwf	??_doActionStatus& (0+255),b
  3659  0035FC  6BC9               	clrf	(??_doActionStatus+1)& (0+255),b
  3660  0035FE  37C9               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3661  003600  0E75               	movlw	117
  3662  003602  25C8               	addwf	??_doActionStatus& (0+255),w,b
  3663  003604  6E08               	movwf	?_Read_b_eep,c
  3664  003606  0E00               	movlw	0
  3665  003608  21C9               	addwfc	(??_doActionStatus+1)& (0+255),w,b
  3666  00360A  6E09               	movwf	?_Read_b_eep+1,c
  3667  00360C  EC4B  F022         	call	_Read_b_eep	;wreg free
  3668  003610  0100               	movlb	0	; () banked
  3669  003612  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3670  003614  E175               	bnz	l11241
  3671  003616                     l515:
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;main.c: 2058: }
  3675                           ;main.c: 2059: }
  3676                           ;main.c: 2062: if ( dmflags & 0x08 ) {
  3677  003616  A7CA               	btfss	doActionStatus@dmflags& (0+255),3,b
  3678  003618  D010               	goto	l11205
  3679                           
  3680                           ; BSR set to: 0
  3681                           ;main.c: 2063: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3682  00361A  90D8               	bcf	status,0,c
  3683  00361C  35CD               	rlcf	doActionStatus@i& (0+255),w,b
  3684  00361E  6FC8               	movwf	??_doActionStatus& (0+255),b
  3685  003620  6BC9               	clrf	(??_doActionStatus+1)& (0+255),b
  3686  003622  37C9               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3687  003624  0E76               	movlw	118
  3688  003626  25C8               	addwf	??_doActionStatus& (0+255),w,b
  3689  003628  6E08               	movwf	?_Read_b_eep,c
  3690  00362A  0E00               	movlw	0
  3691  00362C  21C9               	addwfc	(??_doActionStatus+1)& (0+255),w,b
  3692  00362E  6E09               	movwf	?_Read_b_eep+1,c
  3693  003630  EC4B  F022         	call	_Read_b_eep	;wreg free
  3694  003634  0100               	movlb	0	; () banked
  3695  003636  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3696  003638  E163               	bnz	l11241
  3697  00363A                     l11205:
  3698                           
  3699                           ; BSR set to: 0
  3700                           ;main.c: 2066: }
  3701                           ;main.c: 2067: }
  3702                           ;main.c: 2069: val = Read_b_eep(0x43 + 10 + i);
  3703  00363A  0E4D               	movlw	77
  3704  00363C  25CD               	addwf	doActionStatus@i& (0+255),w,b
  3705  00363E  6E08               	movwf	?_Read_b_eep,c
  3706  003640  6A09               	clrf	?_Read_b_eep+1,c
  3707  003642  0E00               	movlw	0
  3708  003644  2209               	addwfc	?_Read_b_eep+1,f,c
  3709  003646  EC4B  F022         	call	_Read_b_eep	;wreg free
  3710  00364A  0100               	movlb	0	; () banked
  3711  00364C  6FCC               	movwf	doActionStatus@val& (0+255),b
  3712                           
  3713                           ;main.c: 2071: switch (i) {
  3714  00364E  D023               	goto	l11223
  3715  003650                     l11207:
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;main.c: 2074: bOn = LATBbits.LATB4;
  3719  003650  0E00               	movlw	0
  3720  003652  B88A               	btfsc	3978,4,c	;volatile
  3721  003654  0E01               	movlw	1
  3722  003656  6FCB               	movwf	doActionStatus@bOn& (0+255),b
  3723                           
  3724                           ;main.c: 2075: break;
  3725  003658  D02C               	goto	l11225
  3726  00365A                     l11209:
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;main.c: 2078: bOn = LATBbits.LATB1;
  3730  00365A  0E00               	movlw	0
  3731  00365C  B28A               	btfsc	3978,1,c	;volatile
  3732  00365E  0E01               	movlw	1
  3733  003660  6FCB               	movwf	doActionStatus@bOn& (0+255),b
  3734                           
  3735                           ;main.c: 2079: break;
  3736  003662  D027               	goto	l11225
  3737  003664                     l11211:
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;main.c: 2082: bOn = LATBbits.LATB0;
  3741  003664  0E00               	movlw	0
  3742  003666  B08A               	btfsc	3978,0,c	;volatile
  3743  003668  0E01               	movlw	1
  3744  00366A  6FCB               	movwf	doActionStatus@bOn& (0+255),b
  3745                           
  3746                           ;main.c: 2083: break;
  3747  00366C  D022               	goto	l11225
  3748  00366E                     l11213:
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;main.c: 2086: bOn = LATCbits.LATC7;
  3752  00366E  0E00               	movlw	0
  3753  003670  BE8B               	btfsc	3979,7,c	;volatile
  3754  003672  0E01               	movlw	1
  3755  003674  6FCB               	movwf	doActionStatus@bOn& (0+255),b
  3756                           
  3757                           ;main.c: 2087: break;
  3758  003676  D01D               	goto	l11225
  3759  003678                     l11215:
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;main.c: 2090: bOn = LATCbits.LATC6;
  3763  003678  0E00               	movlw	0
  3764  00367A  BC8B               	btfsc	3979,6,c	;volatile
  3765  00367C  0E01               	movlw	1
  3766  00367E  6FCB               	movwf	doActionStatus@bOn& (0+255),b
  3767                           
  3768                           ;main.c: 2091: break;
  3769  003680  D018               	goto	l11225
  3770  003682                     l11217:
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;main.c: 2094: bOn = LATCbits.LATC5;
  3774  003682  0E00               	movlw	0
  3775  003684  BA8B               	btfsc	3979,5,c	;volatile
  3776  003686  0E01               	movlw	1
  3777  003688  6FCB               	movwf	doActionStatus@bOn& (0+255),b
  3778                           
  3779                           ;main.c: 2095: break;
  3780  00368A  D013               	goto	l11225
  3781  00368C                     l11219:
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;main.c: 2098: bOn = LATCbits.LATC4;
  3785  00368C  0E00               	movlw	0
  3786  00368E  B88B               	btfsc	3979,4,c	;volatile
  3787  003690  0E01               	movlw	1
  3788  003692  6FCB               	movwf	doActionStatus@bOn& (0+255),b
  3789                           
  3790                           ;main.c: 2099: break;
  3791  003694  D00E               	goto	l11225
  3792  003696                     l11223:
  3793                           
  3794                           ; BSR set to: 0
  3795  003696  51CD               	movf	doActionStatus@i& (0+255),w,b
  3796                           
  3797                           ; Switch size 1, requested type "speed"
  3798                           ; Number of cases is 7, Range of values is 0 to 6
  3799                           ; switch strategies available:
  3800                           ; Name         Instructions Cycles
  3801                           ; simple_byte           22    12 (average)
  3802                           ;	Chosen strategy is simple_byte
  3803  003698  E0DB               	bz	l11207
  3804  00369A  0A01               	xorlw	1	; case 1
  3805  00369C  E0DE               	bz	l11209
  3806  00369E  0A03               	xorlw	3	; case 2
  3807  0036A0  E0E1               	bz	l11211
  3808  0036A2  0A01               	xorlw	1	; case 3
  3809  0036A4  E0E4               	bz	l11213
  3810  0036A6  0A07               	xorlw	7	; case 4
  3811  0036A8  E0E7               	bz	l11215
  3812  0036AA  0A01               	xorlw	1	; case 5
  3813  0036AC  E0EA               	bz	l11217
  3814  0036AE  0A03               	xorlw	3	; case 6
  3815  0036B0  E0ED               	bz	l11219
  3816  0036B2                     l11225:
  3817                           
  3818                           ; BSR set to: 0
  3819                           ;main.c: 2103: if (bOn) {
  3820  0036B2  51CB               	movf	doActionStatus@bOn& (0+255),w,b
  3821  0036B4  E013               	bz	l528
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;main.c: 2106: if ( val & 0x10 ) {
  3825  0036B6  A9CC               	btfss	doActionStatus@val& (0+255),4,b
  3826  0036B8  D007               	goto	l11231
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;main.c: 2107: SendInformationEvent( i, 20, 4 );
  3830  0036BA  0E14               	movlw	20
  3831  0036BC  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  3832  0036BE  0E04               	movlw	4
  3833  0036C0  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3834  0036C2  51CD               	movf	doActionStatus@i& (0+255),w,b
  3835  0036C4  EC9A  F01F         	call	_SendInformationEvent
  3836  0036C8                     l11231:
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;main.c: 2108: }
  3840                           ;main.c: 2111: if ( val & 0x40 ) {
  3841  0036C8  ADCC               	btfss	doActionStatus@val& (0+255),6,b
  3842  0036CA  D01A               	goto	l11241
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;main.c: 2112: SendInformationEvent( i, 20, 24 );
  3846  0036CC  0E14               	movlw	20
  3847  0036CE  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  3848  0036D0  0E18               	movlw	24
  3849  0036D2  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3850  0036D4  51CD               	movf	doActionStatus@i& (0+255),w,b
  3851  0036D6  EC9A  F01F         	call	_SendInformationEvent
  3852  0036DA  D012               	goto	l11241
  3853  0036DC                     l528:
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;main.c: 2116: else {
  3857                           ;main.c: 2119: if ( val & 0x10 ) {
  3858  0036DC  A9CC               	btfss	doActionStatus@val& (0+255),4,b
  3859  0036DE  D007               	goto	l11237
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;main.c: 2120: SendInformationEvent( i, 20, 4 );
  3863  0036E0  0E14               	movlw	20
  3864  0036E2  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  3865  0036E4  0E04               	movlw	4
  3866  0036E6  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3867  0036E8  51CD               	movf	doActionStatus@i& (0+255),w,b
  3868  0036EA  EC9A  F01F         	call	_SendInformationEvent
  3869  0036EE                     l11237:
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;main.c: 2121: }
  3873                           ;main.c: 2124: if ( val & 0x40 ) {
  3874  0036EE  ADCC               	btfss	doActionStatus@val& (0+255),6,b
  3875  0036F0  D007               	goto	l11241
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;main.c: 2125: SendInformationEvent( i, 20, 24 );
  3879  0036F2  0E14               	movlw	20
  3880  0036F4  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  3881  0036F6  0E18               	movlw	24
  3882  0036F8  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3883  0036FA  51CD               	movf	doActionStatus@i& (0+255),w,b
  3884  0036FC  EC9A  F01F         	call	_SendInformationEvent
  3885  003700                     l11241:
  3886                           
  3887                           ; BSR set to: 0
  3888  003700  2BCD               	incf	doActionStatus@i& (0+255),f,b
  3889                           
  3890                           ; BSR set to: 0
  3891  003702  0E07               	movlw	7
  3892  003704  65CD               	cpfsgt	doActionStatus@i& (0+255),b
  3893  003706  D767               	goto	l11193
  3894                           
  3895                           ; BSR set to: 0
  3896  003708  0C07               	retlw	7
  3897  00370A                     __end_of_doActionStatus:
  3898                           	opt stack 0
  3899                           tblptru	equ	0xFF8
  3900                           prodh	equ	0xFF4
  3901                           prodl	equ	0xFF3
  3902                           postinc0	equ	0xFEE
  3903                           wreg	equ	0xFE8
  3904                           postinc2	equ	0xFDE
  3905                           postdec2	equ	0xFDD
  3906                           fsr2h	equ	0xFDA
  3907                           fsr2l	equ	0xFD9
  3908                           status	equ	0xFD8
  3909                           
  3910 ;; *************** function _doActionPulse *****************
  3911 ;; Defined at:
  3912 ;;		line 1944 in file "../main.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;  dmflags         1    wreg     unsigned char 
  3915 ;;  arg             1    9[COMRAM] unsigned char 
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;  dmflags         1   14[COMRAM] unsigned char 
  3918 ;;  i               1   15[COMRAM] unsigned char 
  3919 ;;  val             1   13[COMRAM] unsigned char 
  3920 ;; Return value:  Size  Location     Type
  3921 ;;		None               void
  3922 ;; Registers used:
  3923 ;;		wreg, status,2, status,0, cstack
  3924 ;; Tracked objects:
  3925 ;;		On entry : F/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3929 ;;      Params:         1       0       0       0       0       0       0
  3930 ;;      Locals:         3       0       0       0       0       0       0
  3931 ;;      Temps:          3       0       0       0       0       0       0
  3932 ;;      Totals:         7       0       0       0       0       0       0
  3933 ;;Total ram usage:        7 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; Hardware stack levels required when called:    3
  3936 ;; This function calls:
  3937 ;;		_Read_b_eep
  3938 ;; This function is called by:
  3939 ;;		_doDM
  3940 ;; This function uses a non-reentrant model
  3941 ;;
  3942                           
  3943                           	psect	text12
  3944  002CB0                     __ptext12:
  3945                           	opt stack 0
  3946  002CB0                     _doActionPulse:
  3947                           	opt stack 26
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;incstack = 0
  3951                           ;incstack = 0
  3952                           ;doActionPulse@dmflags stored from wreg
  3953  002CB0  CFE8 F00F          	movff	wreg,doActionPulse@dmflags
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;main.c: 1946: unsigned char i;
  3957                           ;main.c: 1947: unsigned char val;
  3958                           ;main.c: 1949: for ( i = 0; i < 8; i++ ) {
  3959  002CB4  6A10               	clrf	doActionPulse@i,c
  3960  002CB6                     l9357:
  3961                           
  3962                           ;main.c: 1952: if ( !( arg & ( 1 << i ) ) ) continue;
  3963  002CB6  C010  F00B         	movff	doActionPulse@i,??_doActionPulse
  3964  002CBA  0E01               	movlw	1
  3965  002CBC  6E0C               	movwf	(??_doActionPulse+1)& (0+255),c
  3966  002CBE  2A0B               	incf	??_doActionPulse,f,c
  3967  002CC0  D002               	goto	u10424
  3968  002CC2                     u10425:
  3969  002CC2  90D8               	bcf	status,0,c
  3970  002CC4  360C               	rlcf	??_doActionPulse+1,f,c
  3971  002CC6                     u10424:
  3972  002CC6  2E0B               	decfsz	??_doActionPulse,f,c
  3973  002CC8  D7FC               	goto	u10425
  3974  002CCA  500C               	movf	??_doActionPulse+1,w,c
  3975  002CCC  140A               	andwf	doActionPulse@arg,w,c
  3976  002CCE  E101 D0EA          	bz	l9407
  3977                           
  3978                           ;main.c: 1955: if ( dmflags & 0x10 ) {
  3979  002CD2  A80F               	btfss	doActionPulse@dmflags,4,c
  3980  002CD4  D011               	goto	l494
  3981                           
  3982                           ;main.c: 1956: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3983  002CD6  90D8               	bcf	status,0,c
  3984  002CD8  3410               	rlcf	doActionPulse@i,w,c
  3985  002CDA  6E0B               	movwf	??_doActionPulse& (0+255),c
  3986  002CDC  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  3987  002CDE  360C               	rlcf	(??_doActionPulse+1)& (0+255),f,c
  3988  002CE0  0E75               	movlw	117
  3989  002CE2  240B               	addwf	??_doActionPulse,w,c
  3990  002CE4  6E08               	movwf	?_Read_b_eep,c
  3991  002CE6  0E00               	movlw	0
  3992  002CE8  200C               	addwfc	??_doActionPulse+1,w,c
  3993  002CEA  6E09               	movwf	?_Read_b_eep+1,c
  3994  002CEC  EC4B  F022         	call	_Read_b_eep	;wreg free
  3995  002CF0  0100               	movlb	0	; () banked
  3996  002CF2  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3997  002CF4  E001 D0D7          	bnz	l9407
  3998  002CF8                     l494:
  3999                           
  4000                           ;main.c: 1959: }
  4001                           ;main.c: 1960: }
  4002                           ;main.c: 1963: if ( dmflags & 0x08 ) {
  4003  002CF8  A60F               	btfss	doActionPulse@dmflags,3,c
  4004  002CFA  D011               	goto	l9369
  4005                           
  4006                           ;main.c: 1964: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  4007  002CFC  90D8               	bcf	status,0,c
  4008  002CFE  3410               	rlcf	doActionPulse@i,w,c
  4009  002D00  6E0B               	movwf	??_doActionPulse& (0+255),c
  4010  002D02  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4011  002D04  360C               	rlcf	(??_doActionPulse+1)& (0+255),f,c
  4012  002D06  0E76               	movlw	118
  4013  002D08  240B               	addwf	??_doActionPulse,w,c
  4014  002D0A  6E08               	movwf	?_Read_b_eep,c
  4015  002D0C  0E00               	movlw	0
  4016  002D0E  200C               	addwfc	??_doActionPulse+1,w,c
  4017  002D10  6E09               	movwf	?_Read_b_eep+1,c
  4018  002D12  EC4B  F022         	call	_Read_b_eep	;wreg free
  4019  002D16  0100               	movlb	0	; () banked
  4020  002D18  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4021  002D1A  E001 D0C4          	bnz	l9407
  4022  002D1E                     l9369:
  4023                           
  4024                           ;main.c: 1967: }
  4025                           ;main.c: 1968: }
  4026                           ;main.c: 1970: val = Read_b_eep(0x43 + 10 + i);
  4027  002D1E  0E4D               	movlw	77
  4028  002D20  2410               	addwf	doActionPulse@i,w,c
  4029  002D22  6E08               	movwf	?_Read_b_eep,c
  4030  002D24  6A09               	clrf	?_Read_b_eep+1,c
  4031  002D26  0E00               	movlw	0
  4032  002D28  2209               	addwfc	?_Read_b_eep+1,f,c
  4033  002D2A  EC4B  F022         	call	_Read_b_eep	;wreg free
  4034  002D2E  6E0E               	movwf	doActionPulse@val,c
  4035                           
  4036                           ;main.c: 1973: if ( !( val & 0x80 ) ) continue;
  4037  002D30  AE0E               	btfss	doActionPulse@val,7,c
  4038  002D32  D0B9               	goto	l9407
  4039  002D34  D0A8               	goto	l9405
  4040  002D36                     l500:
  4041                           
  4042                           ;main.c: 1978: LATBbits.LATB4 = 0;
  4043  002D36  988A               	bcf	3978,4,c	;volatile
  4044                           
  4045                           ;main.c: 1979: relay_pulse_flags |= 0x01;
  4046  002D38  0100               	movlb	0	; () banked
  4047  002D3A  818C               	bsf	_relay_pulse_flags& (0+255),0,b
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;main.c: 1980: relay_pulse_timer[ 0 ] =
  4051                           ;main.c: 1981: Read_b_eep(0x43 + 18) * 256 +
  4052                           ;main.c: 1982: Read_b_eep(0x43 + 19);
  4053  002D3C  6A09               	clrf	?_Read_b_eep+1,c
  4054  002D3E  0E56               	movlw	86
  4055  002D40  6E08               	movwf	?_Read_b_eep,c
  4056  002D42  EC4B  F022         	call	_Read_b_eep	;wreg free
  4057  002D46  6E0B               	movwf	??_doActionPulse& (0+255),c
  4058  002D48  6A09               	clrf	?_Read_b_eep+1,c
  4059  002D4A  0E55               	movlw	85
  4060  002D4C  6E08               	movwf	?_Read_b_eep,c
  4061  002D4E  EC4B  F022         	call	_Read_b_eep	;wreg free
  4062  002D52  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4063  002D54  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4064  002D56  500B               	movf	??_doActionPulse,w,c
  4065  002D58  240C               	addwf	??_doActionPulse+1,w,c
  4066  002D5A  0100               	movlb	0	; () banked
  4067  002D5C  6F70               	movwf	_relay_pulse_timer& (0+255),b
  4068  002D5E  0E00               	movlw	0
  4069  002D60  200D               	addwfc	??_doActionPulse+2,w,c
  4070  002D62  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  4071                           
  4072                           ;main.c: 1983: break;
  4073  002D64  D0A0               	goto	l9407
  4074  002D66                     l502:
  4075                           
  4076                           ;main.c: 1986: LATBbits.LATB1 = 0;
  4077  002D66  928A               	bcf	3978,1,c	;volatile
  4078                           
  4079                           ;main.c: 1987: relay_pulse_flags |= 0x02;
  4080  002D68  0100               	movlb	0	; () banked
  4081  002D6A  838C               	bsf	_relay_pulse_flags& (0+255),1,b
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;main.c: 1988: relay_pulse_timer[ 1 ] =
  4085                           ;main.c: 1989: Read_b_eep(0x43 + 20) * 256 +
  4086                           ;main.c: 1990: Read_b_eep(0x43 + 21);
  4087  002D6C  6A09               	clrf	?_Read_b_eep+1,c
  4088  002D6E  0E58               	movlw	88
  4089  002D70  6E08               	movwf	?_Read_b_eep,c
  4090  002D72  EC4B  F022         	call	_Read_b_eep	;wreg free
  4091  002D76  6E0B               	movwf	??_doActionPulse& (0+255),c
  4092  002D78  6A09               	clrf	?_Read_b_eep+1,c
  4093  002D7A  0E57               	movlw	87
  4094  002D7C  6E08               	movwf	?_Read_b_eep,c
  4095  002D7E  EC4B  F022         	call	_Read_b_eep	;wreg free
  4096  002D82  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4097  002D84  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4098  002D86  500B               	movf	??_doActionPulse,w,c
  4099  002D88  240C               	addwf	??_doActionPulse+1,w,c
  4100  002D8A  0100               	movlb	0	; () banked
  4101  002D8C  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  4102  002D8E  0E00               	movlw	0
  4103  002D90  200D               	addwfc	??_doActionPulse+2,w,c
  4104  002D92  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  4105                           
  4106                           ;main.c: 1991: break;
  4107  002D94  D088               	goto	l9407
  4108  002D96                     l503:
  4109                           
  4110                           ;main.c: 1994: LATBbits.LATB0 = 0;
  4111  002D96  908A               	bcf	3978,0,c	;volatile
  4112                           
  4113                           ;main.c: 1995: relay_pulse_flags |= 0x04;
  4114  002D98  0100               	movlb	0	; () banked
  4115  002D9A  858C               	bsf	_relay_pulse_flags& (0+255),2,b
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;main.c: 1996: relay_pulse_timer[ 2 ] =
  4119                           ;main.c: 1997: Read_b_eep(0x43 + 22) * 256 +
  4120                           ;main.c: 1998: Read_b_eep(0x43 + 23);
  4121  002D9C  6A09               	clrf	?_Read_b_eep+1,c
  4122  002D9E  0E5A               	movlw	90
  4123  002DA0  6E08               	movwf	?_Read_b_eep,c
  4124  002DA2  EC4B  F022         	call	_Read_b_eep	;wreg free
  4125  002DA6  6E0B               	movwf	??_doActionPulse& (0+255),c
  4126  002DA8  6A09               	clrf	?_Read_b_eep+1,c
  4127  002DAA  0E59               	movlw	89
  4128  002DAC  6E08               	movwf	?_Read_b_eep,c
  4129  002DAE  EC4B  F022         	call	_Read_b_eep	;wreg free
  4130  002DB2  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4131  002DB4  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4132  002DB6  500B               	movf	??_doActionPulse,w,c
  4133  002DB8  240C               	addwf	??_doActionPulse+1,w,c
  4134  002DBA  0100               	movlb	0	; () banked
  4135  002DBC  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  4136  002DBE  0E00               	movlw	0
  4137  002DC0  200D               	addwfc	??_doActionPulse+2,w,c
  4138  002DC2  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  4139                           
  4140                           ;main.c: 1999: break;
  4141  002DC4  D070               	goto	l9407
  4142  002DC6                     l504:
  4143                           
  4144                           ;main.c: 2002: LATCbits.LATC7 = 0;
  4145  002DC6  9E8B               	bcf	3979,7,c	;volatile
  4146                           
  4147                           ;main.c: 2003: relay_pulse_flags |= 0x08;
  4148  002DC8  0100               	movlb	0	; () banked
  4149  002DCA  878C               	bsf	_relay_pulse_flags& (0+255),3,b
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;main.c: 2004: relay_pulse_timer[ 3 ] =
  4153                           ;main.c: 2005: Read_b_eep(0x43 + 24) * 256 +
  4154                           ;main.c: 2006: Read_b_eep(0x43 + 25);
  4155  002DCC  6A09               	clrf	?_Read_b_eep+1,c
  4156  002DCE  0E5C               	movlw	92
  4157  002DD0  6E08               	movwf	?_Read_b_eep,c
  4158  002DD2  EC4B  F022         	call	_Read_b_eep	;wreg free
  4159  002DD6  6E0B               	movwf	??_doActionPulse& (0+255),c
  4160  002DD8  6A09               	clrf	?_Read_b_eep+1,c
  4161  002DDA  0E5B               	movlw	91
  4162  002DDC  6E08               	movwf	?_Read_b_eep,c
  4163  002DDE  EC4B  F022         	call	_Read_b_eep	;wreg free
  4164  002DE2  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4165  002DE4  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4166  002DE6  500B               	movf	??_doActionPulse,w,c
  4167  002DE8  240C               	addwf	??_doActionPulse+1,w,c
  4168  002DEA  0100               	movlb	0	; () banked
  4169  002DEC  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  4170  002DEE  0E00               	movlw	0
  4171  002DF0  200D               	addwfc	??_doActionPulse+2,w,c
  4172  002DF2  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  4173                           
  4174                           ;main.c: 2007: break;
  4175  002DF4  D058               	goto	l9407
  4176  002DF6                     l505:
  4177                           
  4178                           ;main.c: 2010: LATCbits.LATC6 = 0;
  4179  002DF6  9C8B               	bcf	3979,6,c	;volatile
  4180                           
  4181                           ;main.c: 2011: relay_pulse_flags |= 0x10;
  4182  002DF8  0100               	movlb	0	; () banked
  4183  002DFA  898C               	bsf	_relay_pulse_flags& (0+255),4,b
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;main.c: 2012: relay_pulse_timer[ 4 ] =
  4187                           ;main.c: 2013: Read_b_eep(0x43 + 26) * 256 +
  4188                           ;main.c: 2014: Read_b_eep(0x43 + 27);
  4189  002DFC  6A09               	clrf	?_Read_b_eep+1,c
  4190  002DFE  0E5E               	movlw	94
  4191  002E00  6E08               	movwf	?_Read_b_eep,c
  4192  002E02  EC4B  F022         	call	_Read_b_eep	;wreg free
  4193  002E06  6E0B               	movwf	??_doActionPulse& (0+255),c
  4194  002E08  6A09               	clrf	?_Read_b_eep+1,c
  4195  002E0A  0E5D               	movlw	93
  4196  002E0C  6E08               	movwf	?_Read_b_eep,c
  4197  002E0E  EC4B  F022         	call	_Read_b_eep	;wreg free
  4198  002E12  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4199  002E14  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4200  002E16  500B               	movf	??_doActionPulse,w,c
  4201  002E18  240C               	addwf	??_doActionPulse+1,w,c
  4202  002E1A  0100               	movlb	0	; () banked
  4203  002E1C  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  4204  002E1E  0E00               	movlw	0
  4205  002E20  200D               	addwfc	??_doActionPulse+2,w,c
  4206  002E22  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  4207                           
  4208                           ;main.c: 2015: break;
  4209  002E24  D040               	goto	l9407
  4210  002E26                     l506:
  4211                           
  4212                           ;main.c: 2018: LATCbits.LATC5 = 0;
  4213  002E26  9A8B               	bcf	3979,5,c	;volatile
  4214                           
  4215                           ;main.c: 2019: relay_pulse_flags |= 0x20;
  4216  002E28  0100               	movlb	0	; () banked
  4217  002E2A  8B8C               	bsf	_relay_pulse_flags& (0+255),5,b
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;main.c: 2020: relay_pulse_timer[ 5 ] =
  4221                           ;main.c: 2021: Read_b_eep(0x43 + 28) * 256 +
  4222                           ;main.c: 2022: Read_b_eep(0x43 + 29);
  4223  002E2C  6A09               	clrf	?_Read_b_eep+1,c
  4224  002E2E  0E60               	movlw	96
  4225  002E30  6E08               	movwf	?_Read_b_eep,c
  4226  002E32  EC4B  F022         	call	_Read_b_eep	;wreg free
  4227  002E36  6E0B               	movwf	??_doActionPulse& (0+255),c
  4228  002E38  6A09               	clrf	?_Read_b_eep+1,c
  4229  002E3A  0E5F               	movlw	95
  4230  002E3C  6E08               	movwf	?_Read_b_eep,c
  4231  002E3E  EC4B  F022         	call	_Read_b_eep	;wreg free
  4232  002E42  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4233  002E44  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4234  002E46  500B               	movf	??_doActionPulse,w,c
  4235  002E48  240C               	addwf	??_doActionPulse+1,w,c
  4236  002E4A  0100               	movlb	0	; () banked
  4237  002E4C  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  4238  002E4E  0E00               	movlw	0
  4239  002E50  200D               	addwfc	??_doActionPulse+2,w,c
  4240  002E52  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  4241                           
  4242                           ;main.c: 2023: break;
  4243  002E54  D028               	goto	l9407
  4244  002E56                     l507:
  4245                           
  4246                           ;main.c: 2026: LATCbits.LATC4 = 0;
  4247  002E56  988B               	bcf	3979,4,c	;volatile
  4248                           
  4249                           ;main.c: 2027: relay_pulse_flags |= 0x40;
  4250  002E58  0100               	movlb	0	; () banked
  4251  002E5A  8D8C               	bsf	_relay_pulse_flags& (0+255),6,b
  4252                           
  4253                           ; BSR set to: 0
  4254                           ;main.c: 2028: relay_pulse_timer[ 6 ] =
  4255                           ;main.c: 2029: Read_b_eep(0x43 + 30) * 256 +
  4256                           ;main.c: 2030: Read_b_eep(0x43 + 31);
  4257  002E5C  6A09               	clrf	?_Read_b_eep+1,c
  4258  002E5E  0E62               	movlw	98
  4259  002E60  6E08               	movwf	?_Read_b_eep,c
  4260  002E62  EC4B  F022         	call	_Read_b_eep	;wreg free
  4261  002E66  6E0B               	movwf	??_doActionPulse& (0+255),c
  4262  002E68  6A09               	clrf	?_Read_b_eep+1,c
  4263  002E6A  0E61               	movlw	97
  4264  002E6C  6E08               	movwf	?_Read_b_eep,c
  4265  002E6E  EC4B  F022         	call	_Read_b_eep	;wreg free
  4266  002E72  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4267  002E74  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4268  002E76  500B               	movf	??_doActionPulse,w,c
  4269  002E78  240C               	addwf	??_doActionPulse+1,w,c
  4270  002E7A  0100               	movlb	0	; () banked
  4271  002E7C  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  4272  002E7E  0E00               	movlw	0
  4273  002E80  200D               	addwfc	??_doActionPulse+2,w,c
  4274  002E82  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  4275                           
  4276                           ;main.c: 2031: break;
  4277  002E84  D010               	goto	l9407
  4278  002E86                     l9405:
  4279  002E86  5010               	movf	doActionPulse@i,w,c
  4280                           
  4281                           ; Switch size 1, requested type "speed"
  4282                           ; Number of cases is 7, Range of values is 0 to 6
  4283                           ; switch strategies available:
  4284                           ; Name         Instructions Cycles
  4285                           ; simple_byte           22    12 (average)
  4286                           ;	Chosen strategy is simple_byte
  4287  002E88  E101 D755          	bz	l500
  4288  002E8C  0A01               	xorlw	1	; case 1
  4289  002E8E  E101 D76A          	bz	l502
  4290  002E92  0A03               	xorlw	3	; case 2
  4291  002E94  E080               	bz	l503
  4292  002E96  0A01               	xorlw	1	; case 3
  4293  002E98  E096               	bz	l504
  4294  002E9A  0A07               	xorlw	7	; case 4
  4295  002E9C  E0AC               	bz	l505
  4296  002E9E  0A01               	xorlw	1	; case 5
  4297  002EA0  E0C2               	bz	l506
  4298  002EA2  0A03               	xorlw	3	; case 6
  4299  002EA4  E0D8               	bz	l507
  4300  002EA6                     l9407:
  4301  002EA6  2A10               	incf	doActionPulse@i,f,c
  4302  002EA8  0E07               	movlw	7
  4303  002EAA  6410               	cpfsgt	doActionPulse@i,c
  4304  002EAC  D704               	goto	l9357
  4305  002EAE  0C07               	retlw	7
  4306  002EB0                     __end_of_doActionPulse:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           prodh	equ	0xFF4
  4310                           prodl	equ	0xFF3
  4311                           postinc0	equ	0xFEE
  4312                           wreg	equ	0xFE8
  4313                           postinc2	equ	0xFDE
  4314                           postdec2	equ	0xFDD
  4315                           fsr2h	equ	0xFDA
  4316                           fsr2l	equ	0xFD9
  4317                           status	equ	0xFD8
  4318                           
  4319 ;; *************** function _doActionOn *****************
  4320 ;; Defined at:
  4321 ;;		line 1742 in file "../main.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;  dmflags         1    wreg     unsigned char 
  4324 ;;  arg             1   80[COMRAM] unsigned char 
  4325 ;; Auto vars:     Size  Location     Type
  4326 ;;  dmflags         1   25[BANK0 ] unsigned char 
  4327 ;;  i               1   27[BANK0 ] unsigned char 
  4328 ;;  val             1   26[BANK0 ] unsigned char 
  4329 ;; Return value:  Size  Location     Type
  4330 ;;		None               void
  4331 ;; Registers used:
  4332 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4333 ;; Tracked objects:
  4334 ;;		On entry : F/0
  4335 ;;		On exit  : F/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4338 ;;      Params:         1       0       0       0       0       0       0
  4339 ;;      Locals:         0       3       0       0       0       0       0
  4340 ;;      Temps:          0       3       0       0       0       0       0
  4341 ;;      Totals:         1       6       0       0       0       0       0
  4342 ;;Total ram usage:        7 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    7
  4345 ;; This function calls:
  4346 ;;		_Read_b_eep
  4347 ;;		_SendInformationEvent
  4348 ;; This function is called by:
  4349 ;;		_doDM
  4350 ;; This function uses a non-reentrant model
  4351 ;;
  4352                           
  4353                           	psect	text13
  4354  002808                     __ptext13:
  4355                           	opt stack 0
  4356  002808                     _doActionOn:
  4357                           	opt stack 22
  4358                           
  4359                           ;incstack = 0
  4360                           ;incstack = 0
  4361                           ;doActionOn@dmflags stored from wreg
  4362  002808  CFE8 F0CB          	movff	wreg,doActionOn@dmflags
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;main.c: 1744: unsigned char i;
  4366                           ;main.c: 1745: unsigned char val;
  4367                           ;main.c: 1747: for (i = 0; i < 8; i++) {
  4368  00280C  6BCD               	clrf	doActionOn@i& (0+255),b
  4369  00280E                     l11127:
  4370                           
  4371                           ; BSR set to: 0
  4372                           ;main.c: 1750: if ( !( arg & ( 1 << i ) ) ) continue;
  4373  00280E  C0CD  F0C8         	movff	doActionOn@i,??_doActionOn
  4374  002812  0E01               	movlw	1
  4375  002814  6FC9               	movwf	(??_doActionOn+1)& (0+255),b
  4376  002816  2BC8               	incf	??_doActionOn& (0+255),f,b
  4377  002818  D002               	goto	u13244
  4378  00281A                     u13245:
  4379  00281A  90D8               	bcf	status,0,c
  4380  00281C  37C9               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4381  00281E                     u13244:
  4382  00281E  2FC8               	decfsz	??_doActionOn& (0+255),f,b
  4383  002820  D7FC               	goto	u13245
  4384  002822  51C9               	movf	(??_doActionOn+1)& (0+255),w,b
  4385  002824  1451               	andwf	doActionOn@arg,w,c
  4386  002826  E101 D137          	bz	l11183
  4387                           
  4388                           ; BSR set to: 0
  4389                           ;main.c: 1753: if ( dmflags & 0x10 ) {
  4390  00282A  A9CB               	btfss	doActionOn@dmflags& (0+255),4,b
  4391  00282C  D011               	goto	l441
  4392                           
  4393                           ; BSR set to: 0
  4394                           ;main.c: 1754: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  4395  00282E  90D8               	bcf	status,0,c
  4396  002830  35CD               	rlcf	doActionOn@i& (0+255),w,b
  4397  002832  6FC8               	movwf	??_doActionOn& (0+255),b
  4398  002834  6BC9               	clrf	(??_doActionOn+1)& (0+255),b
  4399  002836  37C9               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4400  002838  0E75               	movlw	117
  4401  00283A  25C8               	addwf	??_doActionOn& (0+255),w,b
  4402  00283C  6E08               	movwf	?_Read_b_eep,c
  4403  00283E  0E00               	movlw	0
  4404  002840  21C9               	addwfc	(??_doActionOn+1)& (0+255),w,b
  4405  002842  6E09               	movwf	?_Read_b_eep+1,c
  4406  002844  EC4B  F022         	call	_Read_b_eep	;wreg free
  4407  002848  0100               	movlb	0	; () banked
  4408  00284A  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4409  00284C  E001 D124          	bnz	l11183
  4410  002850                     l441:
  4411                           
  4412                           ; BSR set to: 0
  4413                           ;main.c: 1757: }
  4414                           ;main.c: 1758: }
  4415                           ;main.c: 1761: if ( dmflags & 0x08 ) {
  4416  002850  A7CB               	btfss	doActionOn@dmflags& (0+255),3,b
  4417  002852  D011               	goto	l11139
  4418                           
  4419                           ; BSR set to: 0
  4420                           ;main.c: 1762: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  4421  002854  90D8               	bcf	status,0,c
  4422  002856  35CD               	rlcf	doActionOn@i& (0+255),w,b
  4423  002858  6FC8               	movwf	??_doActionOn& (0+255),b
  4424  00285A  6BC9               	clrf	(??_doActionOn+1)& (0+255),b
  4425  00285C  37C9               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4426  00285E  0E76               	movlw	118
  4427  002860  25C8               	addwf	??_doActionOn& (0+255),w,b
  4428  002862  6E08               	movwf	?_Read_b_eep,c
  4429  002864  0E00               	movlw	0
  4430  002866  21C9               	addwfc	(??_doActionOn+1)& (0+255),w,b
  4431  002868  6E09               	movwf	?_Read_b_eep+1,c
  4432  00286A  EC4B  F022         	call	_Read_b_eep	;wreg free
  4433  00286E  0100               	movlb	0	; () banked
  4434  002870  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4435  002872  E001 D111          	bnz	l11183
  4436  002876                     l11139:
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;main.c: 1765: }
  4440                           ;main.c: 1766: }
  4441                           ;main.c: 1768: val = Read_b_eep(0x43 + 10 + i);
  4442  002876  0E4D               	movlw	77
  4443  002878  25CD               	addwf	doActionOn@i& (0+255),w,b
  4444  00287A  6E08               	movwf	?_Read_b_eep,c
  4445  00287C  6A09               	clrf	?_Read_b_eep+1,c
  4446  00287E  0E00               	movlw	0
  4447  002880  2209               	addwfc	?_Read_b_eep+1,f,c
  4448  002882  EC4B  F022         	call	_Read_b_eep	;wreg free
  4449  002886  0100               	movlb	0	; () banked
  4450  002888  6FCC               	movwf	doActionOn@val& (0+255),b
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;main.c: 1771: if ( !( val & 0x80 ) ) continue;
  4454  00288A  AFCC               	btfss	doActionOn@val& (0+255),7,b
  4455  00288C  D105               	goto	l11183
  4456  00288E  D0E0               	goto	l11175
  4457  002890                     l447:
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;main.c: 1776: LATBbits.LATB4 = 1;
  4461  002890  888A               	bsf	3978,4,c	;volatile
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;main.c: 1778: if (Read_b_eep(0x43 + 10) & 0x04 ) {
  4465  002892  6A09               	clrf	?_Read_b_eep+1,c
  4466  002894  0E4D               	movlw	77
  4467  002896  6E08               	movwf	?_Read_b_eep,c
  4468  002898  EC4B  F022         	call	_Read_b_eep	;wreg free
  4469  00289C  0100               	movlb	0	; () banked
  4470  00289E  6FC8               	movwf	??_doActionOn& (0+255),b
  4471  0028A0  A5C8               	btfss	??_doActionOn& (0+255),2,b
  4472  0028A2  D0E8               	goto	l449
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;main.c: 1779: relay_protection_timer[ 0 ] =
  4476                           ;main.c: 1780: Read_b_eep(0x43 + 34) * 256 +
  4477                           ;main.c: 1781: Read_b_eep(0x43 + 35);
  4478  0028A4  6A09               	clrf	?_Read_b_eep+1,c
  4479  0028A6  0E66               	movlw	102
  4480  0028A8  6E08               	movwf	?_Read_b_eep,c
  4481  0028AA  EC4B  F022         	call	_Read_b_eep	;wreg free
  4482  0028AE  0100               	movlb	0	; () banked
  4483  0028B0  6FC8               	movwf	??_doActionOn& (0+255),b
  4484  0028B2  6A09               	clrf	?_Read_b_eep+1,c
  4485  0028B4  0E65               	movlw	101
  4486  0028B6  6E08               	movwf	?_Read_b_eep,c
  4487  0028B8  EC4B  F022         	call	_Read_b_eep	;wreg free
  4488  0028BC  0100               	movlb	0	; () banked
  4489  0028BE  6FCA               	movwf	(??_doActionOn+2)& (0+255),b
  4490  0028C0  6BC9               	clrf	(??_doActionOn+1)& (0+255),b
  4491  0028C2  51C8               	movf	??_doActionOn& (0+255),w,b
  4492  0028C4  25C9               	addwf	(??_doActionOn+1)& (0+255),w,b
  4493  0028C6  6F60               	movwf	_relay_protection_timer& (0+255),b
  4494  0028C8  0E00               	movlw	0
  4495  0028CA  21CA               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4496  0028CC  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  4497  0028CE  D0D2               	goto	l449
  4498  0028D0                     l450:
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;main.c: 1786: LATBbits.LATB1 = 1;
  4502  0028D0  828A               	bsf	3978,1,c	;volatile
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;main.c: 1788: if (Read_b_eep(0x43 + 11) & 0x04 ) {
  4506  0028D2  6A09               	clrf	?_Read_b_eep+1,c
  4507  0028D4  0E4E               	movlw	78
  4508  0028D6  6E08               	movwf	?_Read_b_eep,c
  4509  0028D8  EC4B  F022         	call	_Read_b_eep	;wreg free
  4510  0028DC  0100               	movlb	0	; () banked
  4511  0028DE  6FC8               	movwf	??_doActionOn& (0+255),b
  4512  0028E0  A5C8               	btfss	??_doActionOn& (0+255),2,b
  4513  0028E2  D0C8               	goto	l449
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;main.c: 1789: relay_protection_timer[ 1 ] =
  4517                           ;main.c: 1790: Read_b_eep(0x43 + 36) * 256 +
  4518                           ;main.c: 1791: Read_b_eep(0x43 + 37);
  4519  0028E4  6A09               	clrf	?_Read_b_eep+1,c
  4520  0028E6  0E68               	movlw	104
  4521  0028E8  6E08               	movwf	?_Read_b_eep,c
  4522  0028EA  EC4B  F022         	call	_Read_b_eep	;wreg free
  4523  0028EE  0100               	movlb	0	; () banked
  4524  0028F0  6FC8               	movwf	??_doActionOn& (0+255),b
  4525  0028F2  6A09               	clrf	?_Read_b_eep+1,c
  4526  0028F4  0E67               	movlw	103
  4527  0028F6  6E08               	movwf	?_Read_b_eep,c
  4528  0028F8  EC4B  F022         	call	_Read_b_eep	;wreg free
  4529  0028FC  0100               	movlb	0	; () banked
  4530  0028FE  6FCA               	movwf	(??_doActionOn+2)& (0+255),b
  4531  002900  6BC9               	clrf	(??_doActionOn+1)& (0+255),b
  4532  002902  51C8               	movf	??_doActionOn& (0+255),w,b
  4533  002904  25C9               	addwf	(??_doActionOn+1)& (0+255),w,b
  4534  002906  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  4535  002908  0E00               	movlw	0
  4536  00290A  21CA               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4537  00290C  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  4538  00290E  D0B2               	goto	l449
  4539  002910                     l452:
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;main.c: 1796: LATBbits.LATB0 = 1;
  4543  002910  808A               	bsf	3978,0,c	;volatile
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;main.c: 1798: if (Read_b_eep(0x43 + 12) & 0x04 ) {
  4547  002912  6A09               	clrf	?_Read_b_eep+1,c
  4548  002914  0E4F               	movlw	79
  4549  002916  6E08               	movwf	?_Read_b_eep,c
  4550  002918  EC4B  F022         	call	_Read_b_eep	;wreg free
  4551  00291C  0100               	movlb	0	; () banked
  4552  00291E  6FC8               	movwf	??_doActionOn& (0+255),b
  4553  002920  A5C8               	btfss	??_doActionOn& (0+255),2,b
  4554  002922  D0A8               	goto	l449
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;main.c: 1799: relay_protection_timer[ 2 ] =
  4558                           ;main.c: 1800: Read_b_eep(0x43 + 38) * 256 +
  4559                           ;main.c: 1801: Read_b_eep(0x43 + 39);
  4560  002924  6A09               	clrf	?_Read_b_eep+1,c
  4561  002926  0E6A               	movlw	106
  4562  002928  6E08               	movwf	?_Read_b_eep,c
  4563  00292A  EC4B  F022         	call	_Read_b_eep	;wreg free
  4564  00292E  0100               	movlb	0	; () banked
  4565  002930  6FC8               	movwf	??_doActionOn& (0+255),b
  4566  002932  6A09               	clrf	?_Read_b_eep+1,c
  4567  002934  0E69               	movlw	105
  4568  002936  6E08               	movwf	?_Read_b_eep,c
  4569  002938  EC4B  F022         	call	_Read_b_eep	;wreg free
  4570  00293C  0100               	movlb	0	; () banked
  4571  00293E  6FCA               	movwf	(??_doActionOn+2)& (0+255),b
  4572  002940  6BC9               	clrf	(??_doActionOn+1)& (0+255),b
  4573  002942  51C8               	movf	??_doActionOn& (0+255),w,b
  4574  002944  25C9               	addwf	(??_doActionOn+1)& (0+255),w,b
  4575  002946  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  4576  002948  0E00               	movlw	0
  4577  00294A  21CA               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4578  00294C  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  4579  00294E  D092               	goto	l449
  4580  002950                     l454:
  4581                           
  4582                           ; BSR set to: 0
  4583                           ;main.c: 1806: LATCbits.LATC7 = 1;
  4584  002950  8E8B               	bsf	3979,7,c	;volatile
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;main.c: 1808: if ( Read_b_eep(0x43 + 13) & 0x04 ) {
  4588  002952  6A09               	clrf	?_Read_b_eep+1,c
  4589  002954  0E50               	movlw	80
  4590  002956  6E08               	movwf	?_Read_b_eep,c
  4591  002958  EC4B  F022         	call	_Read_b_eep	;wreg free
  4592  00295C  0100               	movlb	0	; () banked
  4593  00295E  6FC8               	movwf	??_doActionOn& (0+255),b
  4594  002960  A5C8               	btfss	??_doActionOn& (0+255),2,b
  4595  002962  D088               	goto	l449
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;main.c: 1809: relay_protection_timer[ 3 ] =
  4599                           ;main.c: 1810: Read_b_eep(0x43 + 40) * 256 +
  4600                           ;main.c: 1811: Read_b_eep(0x43 + 41);
  4601  002964  6A09               	clrf	?_Read_b_eep+1,c
  4602  002966  0E6C               	movlw	108
  4603  002968  6E08               	movwf	?_Read_b_eep,c
  4604  00296A  EC4B  F022         	call	_Read_b_eep	;wreg free
  4605  00296E  0100               	movlb	0	; () banked
  4606  002970  6FC8               	movwf	??_doActionOn& (0+255),b
  4607  002972  6A09               	clrf	?_Read_b_eep+1,c
  4608  002974  0E6B               	movlw	107
  4609  002976  6E08               	movwf	?_Read_b_eep,c
  4610  002978  EC4B  F022         	call	_Read_b_eep	;wreg free
  4611  00297C  0100               	movlb	0	; () banked
  4612  00297E  6FCA               	movwf	(??_doActionOn+2)& (0+255),b
  4613  002980  6BC9               	clrf	(??_doActionOn+1)& (0+255),b
  4614  002982  51C8               	movf	??_doActionOn& (0+255),w,b
  4615  002984  25C9               	addwf	(??_doActionOn+1)& (0+255),w,b
  4616  002986  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  4617  002988  0E00               	movlw	0
  4618  00298A  21CA               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4619  00298C  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  4620  00298E  D072               	goto	l449
  4621  002990                     l456:
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;main.c: 1816: LATCbits.LATC6 = 1;
  4625  002990  8C8B               	bsf	3979,6,c	;volatile
  4626                           
  4627                           ; BSR set to: 0
  4628                           ;main.c: 1818: if (Read_b_eep(0x43 + 14) & 0x04 ) {
  4629  002992  6A09               	clrf	?_Read_b_eep+1,c
  4630  002994  0E51               	movlw	81
  4631  002996  6E08               	movwf	?_Read_b_eep,c
  4632  002998  EC4B  F022         	call	_Read_b_eep	;wreg free
  4633  00299C  0100               	movlb	0	; () banked
  4634  00299E  6FC8               	movwf	??_doActionOn& (0+255),b
  4635  0029A0  A5C8               	btfss	??_doActionOn& (0+255),2,b
  4636  0029A2  D068               	goto	l449
  4637                           
  4638                           ; BSR set to: 0
  4639                           ;main.c: 1819: relay_protection_timer[ 4 ] =
  4640                           ;main.c: 1820: Read_b_eep(0x43 + 42) * 256 +
  4641                           ;main.c: 1821: Read_b_eep(0x43 + 43);
  4642  0029A4  6A09               	clrf	?_Read_b_eep+1,c
  4643  0029A6  0E6E               	movlw	110
  4644  0029A8  6E08               	movwf	?_Read_b_eep,c
  4645  0029AA  EC4B  F022         	call	_Read_b_eep	;wreg free
  4646  0029AE  0100               	movlb	0	; () banked
  4647  0029B0  6FC8               	movwf	??_doActionOn& (0+255),b
  4648  0029B2  6A09               	clrf	?_Read_b_eep+1,c
  4649  0029B4  0E6D               	movlw	109
  4650  0029B6  6E08               	movwf	?_Read_b_eep,c
  4651  0029B8  EC4B  F022         	call	_Read_b_eep	;wreg free
  4652  0029BC  0100               	movlb	0	; () banked
  4653  0029BE  6FCA               	movwf	(??_doActionOn+2)& (0+255),b
  4654  0029C0  6BC9               	clrf	(??_doActionOn+1)& (0+255),b
  4655  0029C2  51C8               	movf	??_doActionOn& (0+255),w,b
  4656  0029C4  25C9               	addwf	(??_doActionOn+1)& (0+255),w,b
  4657  0029C6  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  4658  0029C8  0E00               	movlw	0
  4659  0029CA  21CA               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4660  0029CC  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  4661  0029CE  D052               	goto	l449
  4662  0029D0                     l458:
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;main.c: 1826: LATCbits.LATC5 = 1;
  4666  0029D0  8A8B               	bsf	3979,5,c	;volatile
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;main.c: 1828: if (Read_b_eep(0x43 + 15) & 0x04) {
  4670  0029D2  6A09               	clrf	?_Read_b_eep+1,c
  4671  0029D4  0E52               	movlw	82
  4672  0029D6  6E08               	movwf	?_Read_b_eep,c
  4673  0029D8  EC4B  F022         	call	_Read_b_eep	;wreg free
  4674  0029DC  0100               	movlb	0	; () banked
  4675  0029DE  6FC8               	movwf	??_doActionOn& (0+255),b
  4676  0029E0  A5C8               	btfss	??_doActionOn& (0+255),2,b
  4677  0029E2  D048               	goto	l449
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;main.c: 1829: relay_protection_timer[ 5 ] =
  4681                           ;main.c: 1830: Read_b_eep(0x43 + 44) * 256 +
  4682                           ;main.c: 1831: Read_b_eep(0x43 + 45);
  4683  0029E4  6A09               	clrf	?_Read_b_eep+1,c
  4684  0029E6  0E70               	movlw	112
  4685  0029E8  6E08               	movwf	?_Read_b_eep,c
  4686  0029EA  EC4B  F022         	call	_Read_b_eep	;wreg free
  4687  0029EE  0100               	movlb	0	; () banked
  4688  0029F0  6FC8               	movwf	??_doActionOn& (0+255),b
  4689  0029F2  6A09               	clrf	?_Read_b_eep+1,c
  4690  0029F4  0E6F               	movlw	111
  4691  0029F6  6E08               	movwf	?_Read_b_eep,c
  4692  0029F8  EC4B  F022         	call	_Read_b_eep	;wreg free
  4693  0029FC  0100               	movlb	0	; () banked
  4694  0029FE  6FCA               	movwf	(??_doActionOn+2)& (0+255),b
  4695  002A00  6BC9               	clrf	(??_doActionOn+1)& (0+255),b
  4696  002A02  51C8               	movf	??_doActionOn& (0+255),w,b
  4697  002A04  25C9               	addwf	(??_doActionOn+1)& (0+255),w,b
  4698  002A06  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  4699  002A08  0E00               	movlw	0
  4700  002A0A  21CA               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4701  002A0C  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  4702  002A0E  D032               	goto	l449
  4703  002A10                     l460:
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;main.c: 1836: LATCbits.LATC4 = 1;
  4707  002A10  888B               	bsf	3979,4,c	;volatile
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;main.c: 1838: if ( Read_b_eep(0x43 + 16) & 0x04) {
  4711  002A12  6A09               	clrf	?_Read_b_eep+1,c
  4712  002A14  0E53               	movlw	83
  4713  002A16  6E08               	movwf	?_Read_b_eep,c
  4714  002A18  EC4B  F022         	call	_Read_b_eep	;wreg free
  4715  002A1C  0100               	movlb	0	; () banked
  4716  002A1E  6FC8               	movwf	??_doActionOn& (0+255),b
  4717  002A20  A5C8               	btfss	??_doActionOn& (0+255),2,b
  4718  002A22  D028               	goto	l449
  4719                           
  4720                           ; BSR set to: 0
  4721                           ;main.c: 1839: relay_protection_timer[ 6 ] =
  4722                           ;main.c: 1840: Read_b_eep(0x43 + 46) * 256 +
  4723                           ;main.c: 1841: Read_b_eep(0x43 + 47);
  4724  002A24  6A09               	clrf	?_Read_b_eep+1,c
  4725  002A26  0E72               	movlw	114
  4726  002A28  6E08               	movwf	?_Read_b_eep,c
  4727  002A2A  EC4B  F022         	call	_Read_b_eep	;wreg free
  4728  002A2E  0100               	movlb	0	; () banked
  4729  002A30  6FC8               	movwf	??_doActionOn& (0+255),b
  4730  002A32  6A09               	clrf	?_Read_b_eep+1,c
  4731  002A34  0E71               	movlw	113
  4732  002A36  6E08               	movwf	?_Read_b_eep,c
  4733  002A38  EC4B  F022         	call	_Read_b_eep	;wreg free
  4734  002A3C  0100               	movlb	0	; () banked
  4735  002A3E  6FCA               	movwf	(??_doActionOn+2)& (0+255),b
  4736  002A40  6BC9               	clrf	(??_doActionOn+1)& (0+255),b
  4737  002A42  51C8               	movf	??_doActionOn& (0+255),w,b
  4738  002A44  25C9               	addwf	(??_doActionOn+1)& (0+255),w,b
  4739  002A46  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  4740  002A48  0E00               	movlw	0
  4741  002A4A  21CA               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4742  002A4C  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  4743  002A4E  D012               	goto	l449
  4744  002A50                     l11175:
  4745                           
  4746                           ; BSR set to: 0
  4747  002A50  51CD               	movf	doActionOn@i& (0+255),w,b
  4748                           
  4749                           ; Switch size 1, requested type "speed"
  4750                           ; Number of cases is 7, Range of values is 0 to 6
  4751                           ; switch strategies available:
  4752                           ; Name         Instructions Cycles
  4753                           ; simple_byte           22    12 (average)
  4754                           ;	Chosen strategy is simple_byte
  4755  002A52  E101 D71D          	bz	l447
  4756  002A56  0A01               	xorlw	1	; case 1
  4757  002A58  E101 D73A          	bz	l450
  4758  002A5C  0A03               	xorlw	3	; case 2
  4759  002A5E  E101 D757          	bz	l452
  4760  002A62  0A01               	xorlw	1	; case 3
  4761  002A64  E101 D774          	bz	l454
  4762  002A68  0A07               	xorlw	7	; case 4
  4763  002A6A  E092               	bz	l456
  4764  002A6C  0A01               	xorlw	1	; case 5
  4765  002A6E  E0B0               	bz	l458
  4766  002A70  0A03               	xorlw	3	; case 6
  4767  002A72  E0CE               	bz	l460
  4768  002A74                     l449:
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;main.c: 1848: if ( val & 0x08 ) {
  4772  002A74  A7CC               	btfss	doActionOn@val& (0+255),3,b
  4773  002A76  D007               	goto	l11179
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;main.c: 1849: SendInformationEvent( i, 20, 3 );
  4777  002A78  0E14               	movlw	20
  4778  002A7A  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  4779  002A7C  0E03               	movlw	3
  4780  002A7E  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4781  002A80  51CD               	movf	doActionOn@i& (0+255),w,b
  4782  002A82  EC9A  F01F         	call	_SendInformationEvent
  4783  002A86                     l11179:
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;main.c: 1850: }
  4787                           ;main.c: 1853: if ( val & 0x20 ) {
  4788  002A86  ABCC               	btfss	doActionOn@val& (0+255),5,b
  4789  002A88  D007               	goto	l11183
  4790                           
  4791                           ; BSR set to: 0
  4792                           ;main.c: 1854: SendInformationEvent( i, 20, 25 );
  4793  002A8A  0E14               	movlw	20
  4794  002A8C  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  4795  002A8E  0E19               	movlw	25
  4796  002A90  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4797  002A92  51CD               	movf	doActionOn@i& (0+255),w,b
  4798  002A94  EC9A  F01F         	call	_SendInformationEvent
  4799  002A98                     l11183:
  4800                           
  4801                           ; BSR set to: 0
  4802  002A98  2BCD               	incf	doActionOn@i& (0+255),f,b
  4803                           
  4804                           ; BSR set to: 0
  4805  002A9A  0E07               	movlw	7
  4806  002A9C  65CD               	cpfsgt	doActionOn@i& (0+255),b
  4807  002A9E  D6B7               	goto	l11127
  4808                           
  4809                           ; BSR set to: 0
  4810  002AA0  0C07               	retlw	7
  4811  002AA2                     __end_of_doActionOn:
  4812                           	opt stack 0
  4813                           tblptru	equ	0xFF8
  4814                           prodh	equ	0xFF4
  4815                           prodl	equ	0xFF3
  4816                           postinc0	equ	0xFEE
  4817                           wreg	equ	0xFE8
  4818                           postinc2	equ	0xFDE
  4819                           postdec2	equ	0xFDD
  4820                           fsr2h	equ	0xFDA
  4821                           fsr2l	equ	0xFD9
  4822                           status	equ	0xFD8
  4823                           
  4824 ;; *************** function _doActionOff *****************
  4825 ;; Defined at:
  4826 ;;		line 1864 in file "../main.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;  dmflags         1    wreg     unsigned char 
  4829 ;;  arg             1   80[COMRAM] unsigned char 
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;  dmflags         1   24[BANK0 ] unsigned char 
  4832 ;;  i               1   26[BANK0 ] unsigned char 
  4833 ;;  val             1   25[BANK0 ] unsigned char 
  4834 ;; Return value:  Size  Location     Type
  4835 ;;		None               void
  4836 ;; Registers used:
  4837 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4838 ;; Tracked objects:
  4839 ;;		On entry : F/0
  4840 ;;		On exit  : F/0
  4841 ;;		Unchanged: 0/0
  4842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4843 ;;      Params:         1       0       0       0       0       0       0
  4844 ;;      Locals:         0       3       0       0       0       0       0
  4845 ;;      Temps:          0       2       0       0       0       0       0
  4846 ;;      Totals:         1       5       0       0       0       0       0
  4847 ;;Total ram usage:        6 bytes
  4848 ;; Hardware stack levels used:    1
  4849 ;; Hardware stack levels required when called:    7
  4850 ;; This function calls:
  4851 ;;		_Read_b_eep
  4852 ;;		_SendInformationEvent
  4853 ;; This function is called by:
  4854 ;;		_doApplicationOneSecondWork
  4855 ;;		_doDM
  4856 ;; This function uses a non-reentrant model
  4857 ;;
  4858                           
  4859                           	psect	text14
  4860  00391E                     __ptext14:
  4861                           	opt stack 0
  4862  00391E                     _doActionOff:
  4863                           	opt stack 22
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;incstack = 0
  4867                           ;incstack = 0
  4868                           ;doActionOff@dmflags stored from wreg
  4869  00391E  CFE8 F0CA          	movff	wreg,doActionOff@dmflags
  4870                           
  4871                           ; BSR set to: 0
  4872                           ;main.c: 1866: unsigned char i;
  4873                           ;main.c: 1867: unsigned char val;
  4874                           ;main.c: 1869: for ( i = 0; i < 8; i++ ) {
  4875  003922  6BCC               	clrf	doActionOff@i& (0+255),b
  4876  003924                     l10633:
  4877                           
  4878                           ; BSR set to: 0
  4879                           ;main.c: 1872: if ( !( arg & ( 1 << i ) ) ) continue;
  4880  003924  C0CC  F0C8         	movff	doActionOff@i,??_doActionOff
  4881  003928  0E01               	movlw	1
  4882  00392A  6FC9               	movwf	(??_doActionOff+1)& (0+255),b
  4883  00392C  2BC8               	incf	??_doActionOff& (0+255),f,b
  4884  00392E  D002               	goto	u12584
  4885  003930                     u12585:
  4886  003930  90D8               	bcf	status,0,c
  4887  003932  37C9               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4888  003934                     u12584:
  4889  003934  2FC8               	decfsz	??_doActionOff& (0+255),f,b
  4890  003936  D7FC               	goto	u12585
  4891  003938  51C9               	movf	(??_doActionOff+1)& (0+255),w,b
  4892  00393A  1451               	andwf	doActionOff@arg,w,c
  4893  00393C  E05F               	bz	l10661
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;main.c: 1875: if ( dmflags & 0x10 ) {
  4897  00393E  A9CA               	btfss	doActionOff@dmflags& (0+255),4,b
  4898  003940  D010               	goto	l471
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;main.c: 1876: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  4902  003942  90D8               	bcf	status,0,c
  4903  003944  35CC               	rlcf	doActionOff@i& (0+255),w,b
  4904  003946  6FC8               	movwf	??_doActionOff& (0+255),b
  4905  003948  6BC9               	clrf	(??_doActionOff+1)& (0+255),b
  4906  00394A  37C9               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4907  00394C  0E75               	movlw	117
  4908  00394E  25C8               	addwf	??_doActionOff& (0+255),w,b
  4909  003950  6E08               	movwf	?_Read_b_eep,c
  4910  003952  0E00               	movlw	0
  4911  003954  21C9               	addwfc	(??_doActionOff+1)& (0+255),w,b
  4912  003956  6E09               	movwf	?_Read_b_eep+1,c
  4913  003958  EC4B  F022         	call	_Read_b_eep	;wreg free
  4914  00395C  0100               	movlb	0	; () banked
  4915  00395E  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4916  003960  E14D               	bnz	l10661
  4917  003962                     l471:
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;main.c: 1879: }
  4921                           ;main.c: 1880: }
  4922                           ;main.c: 1883: if ( dmflags & 0x08 ) {
  4923  003962  A7CA               	btfss	doActionOff@dmflags& (0+255),3,b
  4924  003964  D010               	goto	l10645
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;main.c: 1884: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  4928  003966  90D8               	bcf	status,0,c
  4929  003968  35CC               	rlcf	doActionOff@i& (0+255),w,b
  4930  00396A  6FC8               	movwf	??_doActionOff& (0+255),b
  4931  00396C  6BC9               	clrf	(??_doActionOff+1)& (0+255),b
  4932  00396E  37C9               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4933  003970  0E76               	movlw	118
  4934  003972  25C8               	addwf	??_doActionOff& (0+255),w,b
  4935  003974  6E08               	movwf	?_Read_b_eep,c
  4936  003976  0E00               	movlw	0
  4937  003978  21C9               	addwfc	(??_doActionOff+1)& (0+255),w,b
  4938  00397A  6E09               	movwf	?_Read_b_eep+1,c
  4939  00397C  EC4B  F022         	call	_Read_b_eep	;wreg free
  4940  003980  0100               	movlb	0	; () banked
  4941  003982  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4942  003984  E13B               	bnz	l10661
  4943  003986                     l10645:
  4944                           
  4945                           ; BSR set to: 0
  4946                           ;main.c: 1887: }
  4947                           ;main.c: 1888: }
  4948                           ;main.c: 1890: val = Read_b_eep(0x43 + 10 + i);
  4949  003986  0E4D               	movlw	77
  4950  003988  25CC               	addwf	doActionOff@i& (0+255),w,b
  4951  00398A  6E08               	movwf	?_Read_b_eep,c
  4952  00398C  6A09               	clrf	?_Read_b_eep+1,c
  4953  00398E  0E00               	movlw	0
  4954  003990  2209               	addwfc	?_Read_b_eep+1,f,c
  4955  003992  EC4B  F022         	call	_Read_b_eep	;wreg free
  4956  003996  0100               	movlb	0	; () banked
  4957  003998  6FCB               	movwf	doActionOff@val& (0+255),b
  4958                           
  4959                           ; BSR set to: 0
  4960                           ;main.c: 1893: if ( !( val & 0x80 ) ) continue;
  4961  00399A  AFCB               	btfss	doActionOff@val& (0+255),7,b
  4962  00399C  D02F               	goto	l10661
  4963  00399E  D00E               	goto	l10653
  4964  0039A0                     l477:
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;main.c: 1898: LATBbits.LATB4 = 0;
  4968  0039A0  988A               	bcf	3978,4,c	;volatile
  4969                           
  4970                           ;main.c: 1899: break;
  4971  0039A2  D01A               	goto	l478
  4972  0039A4                     l479:
  4973                           
  4974                           ; BSR set to: 0
  4975                           ;main.c: 1902: LATBbits.LATB1 = 0;
  4976  0039A4  928A               	bcf	3978,1,c	;volatile
  4977                           
  4978                           ;main.c: 1903: break;
  4979  0039A6  D018               	goto	l478
  4980  0039A8                     l480:
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;main.c: 1906: LATBbits.LATB0 = 0;
  4984  0039A8  908A               	bcf	3978,0,c	;volatile
  4985                           
  4986                           ;main.c: 1907: break;
  4987  0039AA  D016               	goto	l478
  4988  0039AC                     l481:
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;main.c: 1910: LATCbits.LATC7 = 0;
  4992  0039AC  9E8B               	bcf	3979,7,c	;volatile
  4993                           
  4994                           ;main.c: 1911: break;
  4995  0039AE  D014               	goto	l478
  4996  0039B0                     l482:
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;main.c: 1914: LATCbits.LATC6 = 0;
  5000  0039B0  9C8B               	bcf	3979,6,c	;volatile
  5001                           
  5002                           ;main.c: 1915: break;
  5003  0039B2  D012               	goto	l478
  5004  0039B4                     l483:
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;main.c: 1918: LATCbits.LATC5 = 0;
  5008  0039B4  9A8B               	bcf	3979,5,c	;volatile
  5009                           
  5010                           ;main.c: 1919: break;
  5011  0039B6  D010               	goto	l478
  5012  0039B8                     l484:
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;main.c: 1922: LATCbits.LATC4 = 0;
  5016  0039B8  988B               	bcf	3979,4,c	;volatile
  5017                           
  5018                           ;main.c: 1923: break;
  5019  0039BA  D00E               	goto	l478
  5020  0039BC                     l10653:
  5021                           
  5022                           ; BSR set to: 0
  5023  0039BC  51CC               	movf	doActionOff@i& (0+255),w,b
  5024                           
  5025                           ; Switch size 1, requested type "speed"
  5026                           ; Number of cases is 7, Range of values is 0 to 6
  5027                           ; switch strategies available:
  5028                           ; Name         Instructions Cycles
  5029                           ; simple_byte           22    12 (average)
  5030                           ;	Chosen strategy is simple_byte
  5031  0039BE  E0F0               	bz	l477
  5032  0039C0  0A01               	xorlw	1	; case 1
  5033  0039C2  E0F0               	bz	l479
  5034  0039C4  0A03               	xorlw	3	; case 2
  5035  0039C6  E0F0               	bz	l480
  5036  0039C8  0A01               	xorlw	1	; case 3
  5037  0039CA  E0F0               	bz	l481
  5038  0039CC  0A07               	xorlw	7	; case 4
  5039  0039CE  E0F0               	bz	l482
  5040  0039D0  0A01               	xorlw	1	; case 5
  5041  0039D2  E0F0               	bz	l483
  5042  0039D4  0A03               	xorlw	3	; case 6
  5043  0039D6  E0F0               	bz	l484
  5044  0039D8                     l478:
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;main.c: 1928: if ( val & 0x10 ) {
  5048  0039D8  A9CB               	btfss	doActionOff@val& (0+255),4,b
  5049  0039DA  D007               	goto	l10657
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;main.c: 1929: SendInformationEvent( i, 20, 4 );
  5053  0039DC  0E14               	movlw	20
  5054  0039DE  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  5055  0039E0  0E04               	movlw	4
  5056  0039E2  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5057  0039E4  51CC               	movf	doActionOff@i& (0+255),w,b
  5058  0039E6  EC9A  F01F         	call	_SendInformationEvent
  5059  0039EA                     l10657:
  5060                           
  5061                           ; BSR set to: 0
  5062                           ;main.c: 1930: }
  5063                           ;main.c: 1933: if ( val & 0x40 ) {
  5064  0039EA  ADCB               	btfss	doActionOff@val& (0+255),6,b
  5065  0039EC  D007               	goto	l10661
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;main.c: 1934: SendInformationEvent( i, 20, 24 );
  5069  0039EE  0E14               	movlw	20
  5070  0039F0  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  5071  0039F2  0E18               	movlw	24
  5072  0039F4  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5073  0039F6  51CC               	movf	doActionOff@i& (0+255),w,b
  5074  0039F8  EC9A  F01F         	call	_SendInformationEvent
  5075  0039FC                     l10661:
  5076                           
  5077                           ; BSR set to: 0
  5078  0039FC  2BCC               	incf	doActionOff@i& (0+255),f,b
  5079                           
  5080                           ; BSR set to: 0
  5081  0039FE  0E07               	movlw	7
  5082  003A00  65CC               	cpfsgt	doActionOff@i& (0+255),b
  5083  003A02  D790               	goto	l10633
  5084                           
  5085                           ; BSR set to: 0
  5086  003A04  0C07               	retlw	7
  5087  003A06                     __end_of_doActionOff:
  5088                           	opt stack 0
  5089                           tblptru	equ	0xFF8
  5090                           prodh	equ	0xFF4
  5091                           prodl	equ	0xFF3
  5092                           postinc0	equ	0xFEE
  5093                           wreg	equ	0xFE8
  5094                           postinc2	equ	0xFDE
  5095                           postdec2	equ	0xFDD
  5096                           fsr2h	equ	0xFDA
  5097                           fsr2l	equ	0xFD9
  5098                           status	equ	0xFD8
  5099                           
  5100 ;; *************** function _vscp_handleProtocolEvent *****************
  5101 ;; Defined at:
  5102 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;		None
  5105 ;; Auto vars:     Size  Location     Type
  5106 ;;  bytes           1   45[BANK0 ] unsigned char 
  5107 ;;  page_save       2   41[BANK0 ] unsigned short 
  5108 ;;  i               1   51[BANK0 ] unsigned char 
  5109 ;;  bytes           2   55[BANK0 ] unsigned short 
  5110 ;;  page_save       2   39[BANK0 ] unsigned short 
  5111 ;;  byte            1   54[BANK0 ] unsigned char 
  5112 ;;  cb              1   50[BANK0 ] unsigned char 
  5113 ;;  bytes_this_t    1   49[BANK0 ] unsigned char 
  5114 ;;  j               1   59[BANK0 ] unsigned char 
  5115 ;;  i               1   57[BANK0 ] unsigned char 
  5116 ;;  k               1   52[BANK0 ] unsigned char 
  5117 ;;  i               1   53[BANK0 ] unsigned char 
  5118 ;;  len             1   48[BANK0 ] unsigned char 
  5119 ;;  pos             1   47[BANK0 ] unsigned char 
  5120 ;;  i               1   58[BANK0 ] unsigned char 
  5121 ;;  len             1   46[BANK0 ] unsigned char 
  5122 ;;  pos             1   44[BANK0 ] unsigned char 
  5123 ;;  offset          1   43[BANK0 ] unsigned char 
  5124 ;; Return value:  Size  Location     Type
  5125 ;;		None               void
  5126 ;; Registers used:
  5127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5128 ;; Tracked objects:
  5129 ;;		On entry : F/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5133 ;;      Params:         0       0       0       0       0       0       0
  5134 ;;      Locals:         0      21       0       0       0       0       0
  5135 ;;      Temps:          0       7       0       0       0       0       0
  5136 ;;      Totals:         0      28       0       0       0       0       0
  5137 ;;Total ram usage:       28 bytes
  5138 ;; Hardware stack levels used:    1
  5139 ;; Hardware stack levels required when called:    9
  5140 ;; This function calls:
  5141 ;;		_vscp_init
  5142 ;;		_vscp_readAppReg
  5143 ;;		_vscp_writeAppReg
  5144 ;;		_vscp_sendEvent
  5145 ;;		_vscp_getGUID
  5146 ;;		_vscp_getMDF_URL
  5147 ;;		_vscp_goBootloaderMode
  5148 ;;		_vscp_getMatrixInfo
  5149 ;;		_vscp_handleHeartbeat
  5150 ;;		_vscp_handleSetNickname
  5151 ;;		_vscp_handleDropNickname
  5152 ;;		_vscp_newNodeOnline
  5153 ;;		_vscp_readRegister
  5154 ;;		_vscp_readStdReg
  5155 ;;		_vscp_writeRegister
  5156 ;;		_vscp_writeStdReg
  5157 ;;		___lbmod
  5158 ;; This function is called by:
  5159 ;;		_main
  5160 ;; This function uses a non-reentrant model
  5161 ;;
  5162                           
  5163                           	psect	text15
  5164  00130A                     __ptext15:
  5165                           	opt stack 0
  5166  00130A                     _vscp_handleProtocolEvent:
  5167                           	opt stack 21
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;incstack = 0
  5174                           ;incstack = 0
  5175  00130A  519A               	movf	(_vscp_imsg+3)& (0+255),w,b
  5176  00130C  1199               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  5177  00130E  E101 D2E9          	bz	l10467
  5178  001312  D319               	goto	l1291
  5179  001314                     l10049:
  5180                           
  5181                           ; BSR set to: 0
  5182                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  5183  001314  EC3E  F020         	call	_vscp_handleHeartbeat	;wreg free
  5184                           
  5185                           ;vscp_firmware.c: 807: break;
  5186  001318  D316               	goto	l1291
  5187  00131A                     l10051:
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  5191  00131A  ECC4  F020         	call	_vscp_newNodeOnline	;wreg free
  5192                           
  5193                           ;vscp_firmware.c: 812: break;
  5194  00131E  D313               	goto	l1291
  5195  001320                     l10053:
  5196                           
  5197                           ; BSR set to: 0
  5198                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  5199  001320  EC4E  F021         	call	_vscp_handleSetNickname	;wreg free
  5200                           
  5201                           ;vscp_firmware.c: 817: break;
  5202  001324  D310               	goto	l1291
  5203  001326                     l10055:
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  5207  001326  EC96  F020         	call	_vscp_handleDropNickname	;wreg free
  5208                           
  5209                           ;vscp_firmware.c: 822: break;
  5210  00132A  D30D               	goto	l1291
  5211  00132C                     l10057:
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  5215                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5216  00132C  5197               	movf	_vscp_imsg& (0+255),w,b
  5217  00132E  0B0F               	andlw	15
  5218  001330  0A02               	xorlw	2
  5219  001332  E001 D308          	bnz	l1291
  5220                           
  5221                           ; BSR set to: 0
  5222  001336  5192               	movf	_vscp_nickname& (0+255),w,b
  5223  001338  EE20  F09D         	lfsr	2,_vscp_imsg+6
  5224  00133C  62DF               	cpfseq	indf2,c
  5225  00133E  D303               	goto	l1291
  5226                           
  5227                           ; BSR set to: 0
  5228                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  5229  001340  0E80               	movlw	128
  5230  001342  619E               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5231  001344  D012               	goto	l10077
  5232                           
  5233                           ; BSR set to: 0
  5234                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  5235  001346  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  5236  001348  EC2E  F01E         	call	_vscp_readAppReg
  5237  00134C                     L13:
  5238  00134C  0100               	movlb	0	; () banked
  5239  00134E                     L14:
  5240  00134E  6FAB               	movwf	(_vscp_omsg+6)& (0+255),b
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  5244  001350  C09E  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+5
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  5248  001354  0E03               	movlw	3
  5249  001356  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  5250                           
  5251                           ; BSR set to: 0
  5252                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  5253  001358  0E82               	movlw	130
  5254  00135A  6FA5               	movwf	_vscp_omsg& (0+255),b
  5255                           
  5256                           ; BSR set to: 0
  5257                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  5258  00135C  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  5259  00135E  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  5263  001360  0E0A               	movlw	10
  5264  001362  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  5265  001364                     l10075:
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;vscp_firmware.c: 843: vscp_sendEvent();
  5269  001364  EC3B  F021         	call	_vscp_sendEvent	;wreg free
  5270                           
  5271                           ;vscp_firmware.c: 844: }
  5272  001368  D2EE               	goto	l1291
  5273  00136A                     l10077:
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;vscp_firmware.c: 845: else {
  5277                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  5278                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  5279  00136A  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  5280  00136C  EC58  F017         	call	_vscp_readStdReg
  5281  001370  D7ED               	goto	L13
  5282  001372                     l10091:
  5283                           
  5284                           ; BSR set to: 0
  5285                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  5286                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5287  001372  5197               	movf	_vscp_imsg& (0+255),w,b
  5288  001374  0B0F               	andlw	15
  5289  001376  0A03               	xorlw	3
  5290  001378  E001 D2E5          	bnz	l1291
  5291                           
  5292                           ; BSR set to: 0
  5293  00137C  5192               	movf	_vscp_nickname& (0+255),w,b
  5294  00137E  EE20  F09D         	lfsr	2,_vscp_imsg+6
  5295  001382  62DF               	cpfseq	indf2,c
  5296  001384  D2E0               	goto	l1291
  5297                           
  5298                           ; BSR set to: 0
  5299                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  5300  001386  0E80               	movlw	128
  5301  001388  619E               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5302  00138A  D006               	goto	l10111
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  5306                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5307  00138C  C09F  F051         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  5308  001390  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  5309  001392  EC70  F004         	call	_vscp_writeAppReg
  5310  001396  D7DB               	goto	L14
  5311  001398                     l10111:
  5312                           
  5313                           ; BSR set to: 0
  5314                           ;vscp_firmware.c: 888: else {
  5315                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  5316                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5317  001398  C09F  F048         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  5318  00139C  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  5319  00139E  EC0C  F01C         	call	_vscp_writeStdReg
  5320  0013A2  D7D4               	goto	L13
  5321  0013A4                     l10125:
  5322                           
  5323                           ; BSR set to: 0
  5324                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  5325                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  5326                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  5327                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  5328                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  5329                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  5330                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  5331  0013A4  5192               	movf	_vscp_nickname& (0+255),w,b
  5332  0013A6  EE20  F09D         	lfsr	2,_vscp_imsg+6
  5333  0013AA  62DF               	cpfseq	indf2,c
  5334  0013AC  D2CC               	goto	l1291
  5335                           
  5336                           ; BSR set to: 0
  5337  0013AE  0E00               	movlw	0
  5338  0013B0  EC38  F022         	call	_vscp_getGUID
  5339  0013B4  0100               	movlb	0	; () banked
  5340  0013B6  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5341  0013B8  E001 D2C5          	bnz	l1291
  5342                           
  5343                           ; BSR set to: 0
  5344  0013BC  0E03               	movlw	3
  5345  0013BE  EC38  F022         	call	_vscp_getGUID
  5346  0013C2  0100               	movlb	0	; () banked
  5347  0013C4  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5348  0013C6  E001 D2BE          	bnz	l1291
  5349                           
  5350                           ; BSR set to: 0
  5351  0013CA  0E05               	movlw	5
  5352  0013CC  EC38  F022         	call	_vscp_getGUID
  5353  0013D0  0100               	movlb	0	; () banked
  5354  0013D2  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5355  0013D4  E001 D2B7          	bnz	l1291
  5356                           
  5357                           ; BSR set to: 0
  5358  0013D8  0E07               	movlw	7
  5359  0013DA  EC38  F022         	call	_vscp_getGUID
  5360  0013DE  0100               	movlb	0	; () banked
  5361  0013E0  19A2               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  5362  0013E2  E001 D2B0          	bnz	l1291
  5363                           
  5364                           ; BSR set to: 0
  5365  0013E6  5053               	movf	_vscp_page_select+1,w,c
  5366  0013E8  19A3               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  5367  0013EA  E001 D2AC          	bnz	l1291
  5368                           
  5369                           ; BSR set to: 0
  5370  0013EE  5052               	movf	_vscp_page_select,w,c
  5371  0013F0  EE20  F0A4         	lfsr	2,_vscp_imsg+13
  5372  0013F4  62DF               	cpfseq	indf2,c
  5373  0013F6  D2A7               	goto	l1291
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  5377  0013F8  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  5378  0013FA  ECD0  F021         	call	_vscp_goBootloaderMode
  5379  0013FE  D2A3               	goto	l1291
  5380  001400                     l10141:
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  5384                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  5385                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  5386                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  5387  001400  0E00               	movlw	0
  5388  001402  EC38  F022         	call	_vscp_getGUID
  5389  001406  0100               	movlb	0	; () banked
  5390  001408  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5391  00140A  E173               	bnz	l10185
  5392                           
  5393                           ; BSR set to: 0
  5394  00140C  0E01               	movlw	1
  5395  00140E  EC38  F022         	call	_vscp_getGUID
  5396  001412  0100               	movlb	0	; () banked
  5397  001414  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5398  001416  E16D               	bnz	l10185
  5399                           
  5400                           ; BSR set to: 0
  5401  001418  0E02               	movlw	2
  5402  00141A  EC38  F022         	call	_vscp_getGUID
  5403  00141E  0100               	movlb	0	; () banked
  5404  001420  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5405  001422  E167               	bnz	l10185
  5406                           
  5407                           ; BSR set to: 0
  5408  001424  0E03               	movlw	3
  5409  001426  EC38  F022         	call	_vscp_getGUID
  5410  00142A  0100               	movlb	0	; () banked
  5411  00142C  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5412  00142E  E161               	bnz	l10185
  5413                           
  5414                           ; BSR set to: 0
  5415                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  5416  001430  898E               	bsf	_vscp_guid_reset& (0+255),4,b
  5417  001432  D05F               	goto	l10185
  5418  001434                     l10151:
  5419                           
  5420                           ; BSR set to: 0
  5421                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  5422                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  5423                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  5424                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  5425  001434  0E04               	movlw	4
  5426  001436  EC38  F022         	call	_vscp_getGUID
  5427  00143A  0100               	movlb	0	; () banked
  5428  00143C  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5429  00143E  E159               	bnz	l10185
  5430                           
  5431                           ; BSR set to: 0
  5432  001440  0E05               	movlw	5
  5433  001442  EC38  F022         	call	_vscp_getGUID
  5434  001446  0100               	movlb	0	; () banked
  5435  001448  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5436  00144A  E153               	bnz	l10185
  5437                           
  5438                           ; BSR set to: 0
  5439  00144C  0E06               	movlw	6
  5440  00144E  EC38  F022         	call	_vscp_getGUID
  5441  001452  0100               	movlb	0	; () banked
  5442  001454  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5443  001456  E14D               	bnz	l10185
  5444                           
  5445                           ; BSR set to: 0
  5446  001458  0E07               	movlw	7
  5447  00145A  EC38  F022         	call	_vscp_getGUID
  5448  00145E  0100               	movlb	0	; () banked
  5449  001460  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5450  001462  E147               	bnz	l10185
  5451                           
  5452                           ; BSR set to: 0
  5453                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  5454  001464  8B8E               	bsf	_vscp_guid_reset& (0+255),5,b
  5455  001466  D045               	goto	l10185
  5456  001468                     l10161:
  5457                           
  5458                           ; BSR set to: 0
  5459                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  5460                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  5461                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  5462                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  5463  001468  0E08               	movlw	8
  5464  00146A  EC38  F022         	call	_vscp_getGUID
  5465  00146E  0100               	movlb	0	; () banked
  5466  001470  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5467  001472  E13F               	bnz	l10185
  5468                           
  5469                           ; BSR set to: 0
  5470  001474  0E09               	movlw	9
  5471  001476  EC38  F022         	call	_vscp_getGUID
  5472  00147A  0100               	movlb	0	; () banked
  5473  00147C  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5474  00147E  E139               	bnz	l10185
  5475                           
  5476                           ; BSR set to: 0
  5477  001480  0E0A               	movlw	10
  5478  001482  EC38  F022         	call	_vscp_getGUID
  5479  001486  0100               	movlb	0	; () banked
  5480  001488  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5481  00148A  E133               	bnz	l10185
  5482                           
  5483                           ; BSR set to: 0
  5484  00148C  0E0B               	movlw	11
  5485  00148E  EC38  F022         	call	_vscp_getGUID
  5486  001492  0100               	movlb	0	; () banked
  5487  001494  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5488  001496  E12D               	bnz	l10185
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  5492  001498  8D8E               	bsf	_vscp_guid_reset& (0+255),6,b
  5493  00149A  D02B               	goto	l10185
  5494  00149C                     l10171:
  5495                           
  5496                           ; BSR set to: 0
  5497                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  5498                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  5499                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  5500                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  5501  00149C  0E0C               	movlw	12
  5502  00149E  EC38  F022         	call	_vscp_getGUID
  5503  0014A2  0100               	movlb	0	; () banked
  5504  0014A4  199E               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5505  0014A6  E125               	bnz	l10185
  5506                           
  5507                           ; BSR set to: 0
  5508  0014A8  0E0D               	movlw	13
  5509  0014AA  EC38  F022         	call	_vscp_getGUID
  5510  0014AE  0100               	movlb	0	; () banked
  5511  0014B0  199F               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5512  0014B2  E11F               	bnz	l10185
  5513                           
  5514                           ; BSR set to: 0
  5515  0014B4  0E0E               	movlw	14
  5516  0014B6  EC38  F022         	call	_vscp_getGUID
  5517  0014BA  0100               	movlb	0	; () banked
  5518  0014BC  19A0               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5519  0014BE  E119               	bnz	l10185
  5520                           
  5521                           ; BSR set to: 0
  5522  0014C0  0E0F               	movlw	15
  5523  0014C2  EC38  F022         	call	_vscp_getGUID
  5524  0014C6  0100               	movlb	0	; () banked
  5525  0014C8  19A1               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5526  0014CA  E113               	bnz	l10185
  5527                           
  5528                           ; BSR set to: 0
  5529                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  5530  0014CC  8F8E               	bsf	_vscp_guid_reset& (0+255),7,b
  5531  0014CE  D011               	goto	l10185
  5532  0014D0                     l1231:
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  5536  0014D0  6B8E               	clrf	_vscp_guid_reset& (0+255),b
  5537                           
  5538                           ;vscp_firmware.c: 965: break;
  5539  0014D2  D00F               	goto	l10185
  5540  0014D4                     l10183:
  5541                           
  5542                           ; BSR set to: 0
  5543  0014D4  399D               	swapf	(_vscp_imsg+6)& (0+255),w,b
  5544  0014D6  0B0F               	andlw	15
  5545  0014D8  6FD2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5546  0014DA  6BD3               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5547                           
  5548                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5549                           ; Switch size 1, requested type "speed"
  5550                           ; Number of cases is 1, Range of values is 0 to 0
  5551                           ; switch strategies available:
  5552                           ; Name         Instructions Cycles
  5553                           ; simple_byte            4     3 (average)
  5554                           ;	Chosen strategy is simple_byte
  5555  0014DC  51D3               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5556  0014DE  E1F8               	bnz	l1231
  5557                           
  5558                           ; BSR set to: 0
  5559                           ; Switch size 1, requested type "speed"
  5560                           ; Number of cases is 4, Range of values is 0 to 3
  5561                           ; switch strategies available:
  5562                           ; Name         Instructions Cycles
  5563                           ; simple_byte           13     7 (average)
  5564                           ;	Chosen strategy is simple_byte
  5565  0014E0  51D2               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5566  0014E2  E08E               	bz	l10141
  5567  0014E4  0A01               	xorlw	1	; case 1
  5568  0014E6  E0A6               	bz	l10151
  5569  0014E8  0A03               	xorlw	3	; case 2
  5570  0014EA  E0BE               	bz	l10161
  5571  0014EC  0A01               	xorlw	1	; case 3
  5572  0014EE  E0D6               	bz	l10171
  5573  0014F0  D7EF               	goto	l1231
  5574  0014F2                     l10185:
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  5578  0014F2  518E               	movf	_vscp_guid_reset& (0+255),w,b
  5579  0014F4  0BF0               	andlw	240
  5580  0014F6  0AF0               	xorlw	240
  5581  0014F8  E001 D225          	bnz	l1291
  5582                           
  5583                           ; BSR set to: 0
  5584                           ;vscp_firmware.c: 970: vscp_init();
  5585  0014FC  EC1C  F020         	call	_vscp_init	;wreg free
  5586  001500  D222               	goto	l1291
  5587  001502                     l10189:
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5591  001502  5192               	movf	_vscp_nickname& (0+255),w,b
  5592  001504  EE20  F09D         	lfsr	2,_vscp_imsg+6
  5593  001508  62DF               	cpfseq	indf2,c
  5594  00150A  D21D               	goto	l1291
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;vscp_firmware.c: 978: uint8_t i;
  5598                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  5599  00150C  6BDE               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  5600                           
  5601                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  5602  00150E  C09E  F0DD         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  5603                           
  5604                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  5605  001512  C09F  F0E0         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  5606                           
  5607                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  5608  001516  6BEC               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  5609  001518  D047               	goto	l10221
  5610  00151A                     l10193:
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  5614  00151A  0E07               	movlw	7
  5615  00151C  6E08               	movwf	?___lbmod,c
  5616  00151E  51EC               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5617  001520  ECEE  F020         	call	___lbmod
  5618  001524  0100               	movlb	0	; () banked
  5619  001526  6FD2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5620  001528  51D2               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5621  00152A  0FAB               	addlw	low (_vscp_omsg+6)
  5622  00152C  6ED9               	movwf	fsr2l,c
  5623  00152E  6ADA               	clrf	fsr2h,c
  5624  001530  51DD               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  5625  001532  25EC               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5626  001534  ECDE  F021         	call	_vscp_readRegister
  5627  001538  6EDF               	movwf	indf2,c
  5628                           
  5629                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  5630  00153A  0E07               	movlw	7
  5631  00153C  6E08               	movwf	?___lbmod,c
  5632  00153E  0100               	movlb	0	; () banked
  5633  001540  51EC               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5634  001542  ECEE  F020         	call	___lbmod
  5635  001546  0A06               	xorlw	6
  5636  001548  E00B               	bz	l10199
  5637  00154A  0EFF               	movlw	255
  5638  00154C  0100               	movlb	0	; () banked
  5639  00154E  25E0               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  5640  001550  6FD2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5641  001552  6BD3               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5642  001554  0EFF               	movlw	255
  5643  001556  23D3               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  5644  001558  51EC               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5645  00155A  19D2               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5646  00155C  11D3               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5647  00155E  E123               	bnz	l10219
  5648  001560                     l10199:
  5649                           
  5650                           ;vscp_firmware.c: 988: uint8_t bytes;
  5651                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  5652  001560  0E07               	movlw	7
  5653  001562  6E08               	movwf	?___lbmod,c
  5654  001564  0100               	movlb	0	; () banked
  5655  001566  51EC               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5656  001568  ECEE  F020         	call	___lbmod
  5657  00156C  0A06               	xorlw	6
  5658  00156E  E103               	bnz	l10203
  5659                           
  5660                           ;vscp_firmware.c: 991: bytes = 7;
  5661  001570  0E07               	movlw	7
  5662  001572  0100               	movlb	0	; () banked
  5663  001574  D009               	goto	L15
  5664  001576                     l10203:
  5665                           
  5666                           ;vscp_firmware.c: 993: else {
  5667                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  5668  001576  0E07               	movlw	7
  5669  001578  6E08               	movwf	?___lbmod,c
  5670  00157A  0100               	movlb	0	; () banked
  5671  00157C  51EC               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5672  00157E  ECEE  F020         	call	___lbmod
  5673  001582  0100               	movlb	0	; () banked
  5674  001584  6FD2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5675  001586  29D2               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5676  001588                     L15:
  5677  001588  6FDF               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  5678                           
  5679                           ; BSR set to: 0
  5680                           ;vscp_firmware.c: 995: }
  5681                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  5682  00158A  51DF               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  5683  00158C  0F81               	addlw	129
  5684  00158E  6FA5               	movwf	_vscp_omsg& (0+255),b
  5685                           
  5686                           ; BSR set to: 0
  5687                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  5688  001590  0E07               	movlw	7
  5689  001592  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  5690                           
  5691                           ; BSR set to: 0
  5692                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  5693  001594  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  5694  001596  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  5698  001598  0E1A               	movlw	26
  5699  00159A  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  5700                           
  5701                           ; BSR set to: 0
  5702                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  5703  00159C  C0DE  F0AA         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  5704                           
  5705                           ; BSR set to: 0
  5706                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  5707  0015A0  EC3B  F021         	call	_vscp_sendEvent	;wreg free
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;vscp_firmware.c: 1005: pos++;
  5711  0015A4  2BDE               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  5712  0015A6                     l10219:
  5713                           
  5714                           ; BSR set to: 0
  5715  0015A6  2BEC               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  5716  0015A8                     l10221:
  5717                           
  5718                           ; BSR set to: 0
  5719  0015A8  51E0               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  5720  0015AA  5DEC               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5721  0015AC  E301 D1CB          	bc	l1291
  5722  0015B0  D7B4               	goto	l10193
  5723  0015B2                     l10223:
  5724                           
  5725                           ; BSR set to: 0
  5726                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5727  0015B2  5192               	movf	_vscp_nickname& (0+255),w,b
  5728  0015B4  EE20  F09D         	lfsr	2,_vscp_imsg+6
  5729  0015B8  62DF               	cpfseq	indf2,c
  5730  0015BA  D1C5               	goto	l1291
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;vscp_firmware.c: 1014: uint8_t i;
  5734                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  5735  0015BC  C09E  F0E1         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1283
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  5739  0015C0  5197               	movf	_vscp_imsg& (0+255),w,b
  5740  0015C2  0FFE               	addlw	254
  5741  0015C4  0B07               	andlw	7
  5742  0015C6  6FE2               	movwf	vscp_handleProtocolEvent@len_1284& (0+255),b
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  5746  0015C8  6BE7               	clrf	vscp_handleProtocolEvent@i_1282& (0+255),b
  5747  0015CA  D016               	goto	l10237
  5748  0015CC                     l10231:
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  5752  0015CC  51E7               	movf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5753  0015CE  0F9F               	addlw	low (_vscp_imsg+8)
  5754  0015D0  6ED9               	movwf	fsr2l,c
  5755  0015D2  6ADA               	clrf	fsr2h,c
  5756  0015D4  50DF               	movf	indf2,w,c
  5757  0015D6  6FD0               	movwf	?_vscp_writeRegister& (0+255),b
  5758  0015D8  51E1               	movf	vscp_handleProtocolEvent@pos_1283& (0+255),w,b
  5759  0015DA  25E7               	addwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5760  0015DC  EC83  F021         	call	_vscp_writeRegister
  5761                           
  5762                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  5763  0015E0  0100               	movlb	0	; () banked
  5764  0015E2  51E7               	movf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5765  0015E4  0FAB               	addlw	low (_vscp_omsg+6)
  5766  0015E6  6ED9               	movwf	fsr2l,c
  5767  0015E8  6ADA               	clrf	fsr2h,c
  5768  0015EA  51E1               	movf	vscp_handleProtocolEvent@pos_1283& (0+255),w,b
  5769  0015EC  25E7               	addwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5770  0015EE  ECDE  F021         	call	_vscp_readRegister
  5771  0015F2  6EDF               	movwf	indf2,c
  5772  0015F4  0100               	movlb	0	; () banked
  5773  0015F6  2BE7               	incf	vscp_handleProtocolEvent@i_1282& (0+255),f,b
  5774  0015F8                     l10237:
  5775                           
  5776                           ; BSR set to: 0
  5777  0015F8  51E2               	movf	vscp_handleProtocolEvent@len_1284& (0+255),w,b
  5778  0015FA  5DE7               	subwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5779  0015FC  E3E7               	bnc	l10231
  5780                           
  5781                           ; BSR set to: 0
  5782                           ;vscp_firmware.c: 1022: }
  5783                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  5784  0015FE  0E07               	movlw	7
  5785  001600  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  5789  001602  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  5790  001604  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  5791                           
  5792                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  5793  001606  0E1A               	movlw	26
  5794  001608  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  5798  00160A  6BAA               	clrf	(_vscp_omsg+5)& (0+255),b
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  5802  00160C  51E2               	movf	vscp_handleProtocolEvent@len_1284& (0+255),w,b
  5803  00160E  0F81               	addlw	129
  5804  001610  6FA5               	movwf	_vscp_omsg& (0+255),b
  5805  001612  D6A8               	goto	l10075
  5806  001614                     l10249:
  5807                           
  5808                           ; BSR set to: 0
  5809                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5810  001614  5192               	movf	_vscp_nickname& (0+255),w,b
  5811  001616  EE20  F09D         	lfsr	2,_vscp_imsg+6
  5812  00161A  62DF               	cpfseq	indf2,c
  5813  00161C  D194               	goto	l1291
  5814                           
  5815                           ; BSR set to: 0
  5816                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5817                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  5818                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  5819  00161E  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  5820  001620  EC2E  F01E         	call	_vscp_readAppReg
  5821  001624  0100               	movlb	0	; () banked
  5822  001626  6FD2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5823  001628  29D2               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5824  00162A  6E51               	movwf	?_vscp_writeAppReg,c
  5825  00162C  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  5826  00162E  EC70  F004         	call	_vscp_writeAppReg
  5827  001632  D68D               	goto	L14
  5828  001634                     l10265:
  5829                           
  5830                           ; BSR set to: 0
  5831                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5832  001634  5192               	movf	_vscp_nickname& (0+255),w,b
  5833  001636  EE20  F09D         	lfsr	2,_vscp_imsg+6
  5834  00163A  62DF               	cpfseq	indf2,c
  5835  00163C  D184               	goto	l1291
  5836                           
  5837                           ; BSR set to: 0
  5838                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5839                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  5840                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  5841  00163E  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  5842  001640  EC2E  F01E         	call	_vscp_readAppReg
  5843  001644  0100               	movlb	0	; () banked
  5844  001646  6FD2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5845  001648  05D2               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  5846  00164A  6E51               	movwf	?_vscp_writeAppReg,c
  5847  00164C  519E               	movf	(_vscp_imsg+7)& (0+255),w,b
  5848  00164E  EC70  F004         	call	_vscp_writeAppReg
  5849  001652  D67D               	goto	L14
  5850  001654                     l10281:
  5851                           
  5852                           ; BSR set to: 0
  5853                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  5854                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  5855  001654  519D               	movf	(_vscp_imsg+6)& (0+255),w,b
  5856  001656  1992               	xorwf	_vscp_nickname& (0+255),w,b
  5857  001658  E003               	bz	l1255
  5858                           
  5859                           ; BSR set to: 0
  5860  00165A  299D               	incf	(_vscp_imsg+6)& (0+255),w,b
  5861  00165C  E001 D173          	bnz	l1291
  5862  001660                     l1255:
  5863                           
  5864                           ; BSR set to: 0
  5865                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  5866  001660  6BE6               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  5870  001662  0E03               	movlw	3
  5871  001664  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  5872                           
  5873                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  5874  001666  0E88               	movlw	136
  5875  001668  6FA5               	movwf	_vscp_omsg& (0+255),b
  5876                           
  5877                           ; BSR set to: 0
  5878                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  5879  00166A  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  5880  00166C  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  5881                           
  5882                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  5883  00166E  0E20               	movlw	32
  5884  001670  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  5885                           
  5886                           ; BSR set to: 0
  5887                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  5888  001672  6BEB               	clrf	vscp_handleProtocolEvent@i_1285& (0+255),b
  5889  001674                     l1256:
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;vscp_firmware.c: 1091: {
  5893                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  5894  001674  C0EB  F0AA         	movff	vscp_handleProtocolEvent@i_1285,_vscp_omsg+5
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  5898  001678  0E01               	movlw	1
  5899  00167A  6FED               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  5900  00167C                     l10301:
  5901                           
  5902                           ; BSR set to: 0
  5903                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  5904  00167C  51ED               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5905  00167E  0FAA               	addlw	low (_vscp_omsg+5)
  5906  001680  6ED9               	movwf	fsr2l,c
  5907  001682  6ADA               	clrf	fsr2h,c
  5908  001684  51E6               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5909  001686  080F               	sublw	15
  5910  001688  EC38  F022         	call	_vscp_getGUID
  5911  00168C  6EDF               	movwf	indf2,c
  5912  00168E  0100               	movlb	0	; () banked
  5913  001690  2BE6               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;vscp_firmware.c: 1096: if (k > 16)
  5917  001692  0E10               	movlw	16
  5918  001694  65E6               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5919  001696  D001               	goto	l10309
  5920  001698  D004               	goto	l10313
  5921  00169A                     l10309:
  5922                           
  5923                           ; BSR set to: 0
  5924  00169A  2BED               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5925                           
  5926                           ; BSR set to: 0
  5927  00169C  0E07               	movlw	7
  5928  00169E  65ED               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5929  0016A0  D7ED               	goto	l10301
  5930  0016A2                     l10313:
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;vscp_firmware.c: 1098: }
  5934                           ;vscp_firmware.c: 1100: if (k > 16)
  5935  0016A2  0E10               	movlw	16
  5936  0016A4  65E6               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5937  0016A6  D001               	goto	l10317
  5938  0016A8  D006               	goto	l1257
  5939  0016AA                     l10317:
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  5943  0016AA  EC3B  F021         	call	_vscp_sendEvent	;wreg free
  5944                           
  5945                           ; BSR set to: 0
  5946  0016AE  2BEB               	incf	vscp_handleProtocolEvent@i_1285& (0+255),f,b
  5947                           
  5948                           ; BSR set to: 0
  5949  0016B0  0E02               	movlw	2
  5950  0016B2  65EB               	cpfsgt	vscp_handleProtocolEvent@i_1285& (0+255),b
  5951  0016B4  D7DF               	goto	l1256
  5952  0016B6                     l1257:
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;vscp_firmware.c: 1104: }
  5956                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  5957  0016B6  6BED               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  5958  0016B8                     l10327:
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;vscp_firmware.c: 1107: {
  5962                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  5963  0016B8  51ED               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5964  0016BA  ECEB  F021         	call	_vscp_getMDF_URL
  5965  0016BE  0900               	iorlw	0
  5966  0016C0  E008               	bz	l10331
  5967                           
  5968                           ; BSR set to: 0
  5969                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  5970  0016C2  51ED               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5971  0016C4  0FAD               	addlw	low (_vscp_omsg+8)
  5972  0016C6  6ED9               	movwf	fsr2l,c
  5973  0016C8  6ADA               	clrf	fsr2h,c
  5974  0016CA  51ED               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5975  0016CC  ECEB  F021         	call	_vscp_getMDF_URL
  5976  0016D0  D005               	goto	L16
  5977  0016D2                     l10331:
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;vscp_firmware.c: 1110: else
  5981                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  5982  0016D2  51ED               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5983  0016D4  0FAD               	addlw	low (_vscp_omsg+8)
  5984  0016D6  6ED9               	movwf	fsr2l,c
  5985  0016D8  6ADA               	clrf	fsr2h,c
  5986  0016DA  0E00               	movlw	0
  5987  0016DC                     L16:
  5988  0016DC  6EDF               	movwf	indf2,c
  5989                           
  5990                           ; BSR set to: 0
  5991  0016DE  2BED               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5992                           
  5993                           ; BSR set to: 0
  5994  0016E0  0E04               	movlw	4
  5995  0016E2  65ED               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5996  0016E4  D7E9               	goto	l10327
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;vscp_firmware.c: 1112: }
  6000                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  6001  0016E6  EC3B  F021         	call	_vscp_sendEvent	;wreg free
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;vscp_firmware.c: 1116: k = 5;
  6005  0016EA  0E05               	movlw	5
  6006  0016EC  6FE6               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  6010  0016EE  0E03               	movlw	3
  6011  0016F0  6FEB               	movwf	vscp_handleProtocolEvent@i_1285& (0+255),b
  6012  0016F2                     l1266:
  6013                           
  6014                           ; BSR set to: 0
  6015                           ;vscp_firmware.c: 1118: {
  6016                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  6017  0016F2  C0EB  F0AA         	movff	vscp_handleProtocolEvent@i_1285,_vscp_omsg+5
  6018                           
  6019                           ; BSR set to: 0
  6020                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  6021  0016F6  0E01               	movlw	1
  6022  0016F8  6FED               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  6023  0016FA                     l10353:
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  6027  0016FA  51ED               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6028  0016FC  0FAA               	addlw	low (_vscp_omsg+5)
  6029  0016FE  6ED9               	movwf	fsr2l,c
  6030  001700  6ADA               	clrf	fsr2h,c
  6031  001702  51E6               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  6032  001704  ECEB  F021         	call	_vscp_getMDF_URL
  6033  001708  6EDF               	movwf	indf2,c
  6034                           
  6035                           ; BSR set to: 0
  6036  00170A  2BE6               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  6037                           
  6038                           ; BSR set to: 0
  6039  00170C  2BED               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  6040                           
  6041                           ; BSR set to: 0
  6042  00170E  0E07               	movlw	7
  6043  001710  65ED               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  6044  001712  D7F3               	goto	l10353
  6045                           
  6046                           ; BSR set to: 0
  6047                           ;vscp_firmware.c: 1123: }
  6048                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  6049  001714  EC3B  F021         	call	_vscp_sendEvent	;wreg free
  6050                           
  6051                           ; BSR set to: 0
  6052  001718  2BEB               	incf	vscp_handleProtocolEvent@i_1285& (0+255),f,b
  6053                           
  6054                           ; BSR set to: 0
  6055  00171A  0E06               	movlw	6
  6056  00171C  65EB               	cpfsgt	vscp_handleProtocolEvent@i_1285& (0+255),b
  6057  00171E  D7E9               	goto	l1266
  6058  001720  D112               	goto	l1291
  6059  001722                     l10367:
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  6063  001722  5192               	movf	_vscp_nickname& (0+255),w,b
  6064  001724  EE20  F09D         	lfsr	2,_vscp_imsg+6
  6065  001728  62DF               	cpfseq	indf2,c
  6066  00172A  D10D               	goto	l1291
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  6070  00172C  0E03               	movlw	3
  6071  00172E  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  6072                           
  6073                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  6074  001730  0E87               	movlw	135
  6075  001732  6FA5               	movwf	_vscp_omsg& (0+255),b
  6076                           
  6077                           ; BSR set to: 0
  6078                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  6079  001734  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  6080  001736  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  6081                           
  6082                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  6083  001738  0E22               	movlw	34
  6084  00173A  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  6088  00173C  0EAA               	movlw	(_vscp_omsg+5)& (0+255)
  6089  00173E  EC94  F021         	call	_vscp_getMatrixInfo
  6090  001742  D610               	goto	l10075
  6091  001744                     l10377:
  6092                           
  6093                           ; BSR set to: 0
  6094                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  6095  001744  5192               	movf	_vscp_nickname& (0+255),w,b
  6096  001746  EE20  F09D         	lfsr	2,_vscp_imsg+6
  6097  00174A  62DF               	cpfseq	indf2,c
  6098  00174C  D0FC               	goto	l1291
  6099                           
  6100                           ; BSR set to: 0
  6101                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  6102  00174E  6BE8               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  6103                           
  6104                           ; BSR set to: 0
  6105                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  6106                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  6107  001750  C097  F0D2         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  6108  001754  0E0F               	movlw	15
  6109  001756  17D2               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6110  001758  0E04               	movlw	4
  6111  00175A  5DD2               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6112  00175C  E312               	bnc	l10393
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  6116  00175E  C0A1  F0E9         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1289
  6117  001762  6BEA               	clrf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  6121  001764  51EA               	movf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6122  001766  11E9               	iorwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6123  001768  E103               	bnz	l10389
  6124                           
  6125                           ; BSR set to: 0
  6126  00176A  0E01               	movlw	1
  6127  00176C  6FEA               	movwf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6128  00176E  6BE9               	clrf	vscp_handleProtocolEvent@bytes_1289& (0+255),b
  6129  001770                     l10389:
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  6133  001770  0E01               	movlw	1
  6134  001772  5DE9               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6135  001774  0E01               	movlw	1
  6136  001776  59EA               	subwfb	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6137  001778  E307               	bnc	l10395
  6138                           
  6139                           ; BSR set to: 0
  6140  00177A  0E01               	movlw	1
  6141  00177C  6FEA               	movwf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6142  00177E  0E00               	movlw	0
  6143  001780  D002               	goto	L18
  6144  001782                     l10393:
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;vscp_firmware.c: 1173: else {
  6148                           ;vscp_firmware.c: 1174: bytes = 1;
  6149  001782  6BEA               	clrf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6150  001784  0E01               	movlw	1
  6151  001786                     L18:
  6152  001786  6FE9               	movwf	vscp_handleProtocolEvent@bytes_1289& (0+255),b
  6153  001788                     l10395:
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;vscp_firmware.c: 1175: }
  6157                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  6158  001788  C052  F0D9         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  6159  00178C  C053  F0DA         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  6163  001790  519F               	movf	(_vscp_imsg+8)& (0+255),w,b
  6164  001792  C09E  F0D2         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6165  001796  6BD3               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6166  001798  C0D2  F0D3         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6167  00179C  6BD2               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6168  00179E  11D2               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6169  0017A0  6E52               	movwf	_vscp_page_select,c
  6170  0017A2  51D3               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6171  0017A4  6E53               	movwf	_vscp_page_select+1,c
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  6175  0017A6  0E07               	movlw	7
  6176  0017A8  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  6177                           
  6178                           ; BSR set to: 0
  6179                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  6180  0017AA  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  6181  0017AC  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  6185  0017AE  0E27               	movlw	39
  6186  0017B0  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  6187                           
  6188                           ; BSR set to: 0
  6189                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  6190  0017B2  6BAA               	clrf	(_vscp_omsg+5)& (0+255),b
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  6194  0017B4  C09E  F0AB         	movff	_vscp_imsg+7,_vscp_omsg+6
  6195                           
  6196                           ; BSR set to: 0
  6197                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  6198  0017B8  C09F  F0AC         	movff	_vscp_imsg+8,_vscp_omsg+7
  6199  0017BC                     l10411:
  6200                           
  6201                           ; BSR set to: 0
  6202                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  6203  0017BC  51E8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6204  0017BE  5DE9               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6205  0017C0  6FD2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6206  0017C2  0E00               	movlw	0
  6207  0017C4  59EA               	subwfb	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6208  0017C6  6FD3               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6209  0017C8  0E04               	movlw	4
  6210  0017CA  5DD2               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6211  0017CC  0E00               	movlw	0
  6212  0017CE  59D3               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6213  0017D0  E302               	bnc	l10415
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  6217  0017D2  0E04               	movlw	4
  6218  0017D4  D002               	goto	L19
  6219  0017D6                     l10415:
  6220                           
  6221                           ; BSR set to: 0
  6222                           ;vscp_firmware.c: 1198: else {
  6223                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  6224  0017D6  51E8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6225  0017D8  5DE9               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6226  0017DA                     L19:
  6227  0017DA  6FE3               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;vscp_firmware.c: 1200: }
  6231                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  6232  0017DC  51E3               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6233  0017DE  0F84               	addlw	132
  6234  0017E0  6FA5               	movwf	_vscp_omsg& (0+255),b
  6235                           
  6236                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  6237                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  6238  0017E2  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  6239  0017E4  25E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6240  0017E6  6FAD               	movwf	(_vscp_omsg+8)& (0+255),b
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  6244  0017E8  6BE4               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  6245  0017EA  D00C               	goto	l10423
  6246  0017EC                     l10419:
  6247                           
  6248                           ; BSR set to: 0
  6249                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  6250                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  6251  0017EC  51E4               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6252  0017EE  0FAE               	addlw	low (_vscp_omsg+9)
  6253  0017F0  6ED9               	movwf	fsr2l,c
  6254  0017F2  6ADA               	clrf	fsr2h,c
  6255  0017F4  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  6256  0017F6  25E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6257  0017F8  25E4               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6258  0017FA  ECDE  F021         	call	_vscp_readRegister
  6259  0017FE  6EDF               	movwf	indf2,c
  6260  001800  0100               	movlb	0	; () banked
  6261  001802  2BE4               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  6262  001804                     l10423:
  6263                           
  6264                           ; BSR set to: 0
  6265  001804  51E3               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6266  001806  5DE4               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6267  001808  E3F1               	bnc	l10419
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;vscp_firmware.c: 1211: }
  6271                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  6272  00180A  EC3B  F021         	call	_vscp_sendEvent	;wreg free
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  6276  00180E  51E3               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6277  001810  27E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  6281  001812  2BAA               	incf	(_vscp_omsg+5)& (0+255),f,b
  6282                           
  6283                           ; BSR set to: 0
  6284                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  6285  001814  51E8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6286  001816  6FD2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6287  001818  6BD3               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6288  00181A  51E9               	movf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6289  00181C  5DD2               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6290  00181E  51EA               	movf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6291  001820  59D3               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6292  001822  E3CC               	bnc	l10411
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  6296  001824  C0D9  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  6297  001828  C0DA  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  6298  00182C  D08C               	goto	l1291
  6299  00182E                     l10433:
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  6303  00182E  5192               	movf	_vscp_nickname& (0+255),w,b
  6304  001830  EE20  F09D         	lfsr	2,_vscp_imsg+6
  6305  001834  62DF               	cpfseq	indf2,c
  6306  001836  D087               	goto	l1291
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;vscp_firmware.c: 1234: uint8_t i;
  6310                           ;vscp_firmware.c: 1235: uint16_t page_save;
  6311                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  6312  001838  C052  F0DB         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1294
  6313  00183C  C053  F0DC         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1294+1
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  6317  001840  519F               	movf	(_vscp_imsg+8)& (0+255),w,b
  6318  001842  C09E  F0D2         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6319  001846  6BD3               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6320  001848  C0D2  F0D3         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6321  00184C  6BD2               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6322  00184E  11D2               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6323  001850  6E52               	movwf	_vscp_page_select,c
  6324  001852  51D3               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6325  001854  6E53               	movwf	_vscp_page_select+1,c
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  6329  001856  C0A0  F0E5         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1293
  6330                           
  6331                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  6332                           ;vscp_firmware.c: 1248: i++) {
  6333  00185A  D014               	goto	l10445
  6334  00185C                     l10441:
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  6338                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  6339  00185C  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  6340  00185E  08A1               	sublw	low (_vscp_imsg+10)
  6341  001860  25E5               	addwf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6342  001862  6ED9               	movwf	fsr2l,c
  6343  001864  6ADA               	clrf	fsr2h,c
  6344  001866  50DF               	movf	indf2,w,c
  6345  001868  6FD0               	movwf	?_vscp_writeRegister& (0+255),b
  6346  00186A  51E5               	movf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6347  00186C  EC83  F021         	call	_vscp_writeRegister
  6348  001870  0100               	movlb	0	; () banked
  6349  001872  6FD2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6350  001874  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  6351  001876  08AE               	sublw	low (_vscp_omsg+9)
  6352  001878  25E5               	addwf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6353  00187A  6ED9               	movwf	fsr2l,c
  6354  00187C  6ADA               	clrf	fsr2h,c
  6355  00187E  C0D2  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  6356                           
  6357                           ; BSR set to: 0
  6358  001882  2BE5               	incf	vscp_handleProtocolEvent@i_1293& (0+255),f,b
  6359  001884                     l10445:
  6360                           
  6361                           ; BSR set to: 0
  6362  001884  5197               	movf	_vscp_imsg& (0+255),w,b
  6363  001886  0B0F               	andlw	15
  6364  001888  6FD2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6365  00188A  6BD3               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6366  00188C  51A0               	movf	(_vscp_imsg+9)& (0+255),w,b
  6367  00188E  27D2               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6368  001890  0E00               	movlw	0
  6369  001892  23D3               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6370  001894  0EFC               	movlw	252
  6371  001896  25D2               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6372  001898  6FD4               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  6373  00189A  0EFF               	movlw	255
  6374  00189C  21D3               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6375  00189E  6FD5               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  6376  0018A0  51E5               	movf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6377  0018A2  6FD6               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  6378  0018A4  6BD7               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  6379  0018A6  51D7               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  6380  0018A8  0A80               	xorlw	128
  6381  0018AA  6FD8               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  6382  0018AC  51D4               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  6383  0018AE  5DD6               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  6384  0018B0  51D5               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  6385  0018B2  0A80               	xorlw	128
  6386  0018B4  59D8               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  6387  0018B6  E3D2               	bnc	l10441
  6388                           
  6389                           ; BSR set to: 0
  6390                           ;vscp_firmware.c: 1251: }
  6391                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  6392  0018B8  C0DB  F052         	movff	vscp_handleProtocolEvent@page_save_1294,_vscp_page_select
  6393  0018BC  C0DC  F053         	movff	vscp_handleProtocolEvent@page_save_1294+1,_vscp_page_select+1
  6394                           
  6395                           ; BSR set to: 0
  6396                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  6397  0018C0  0E07               	movlw	7
  6398  0018C2  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  6402  0018C4  5197               	movf	_vscp_imsg& (0+255),w,b
  6403  0018C6  0B0F               	andlw	15
  6404  0018C8  0F80               	addlw	128
  6405  0018CA  6FA5               	movwf	_vscp_omsg& (0+255),b
  6406                           
  6407                           ; BSR set to: 0
  6408                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  6409  0018CC  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
  6410  0018CE  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  6414  0018D0  0E27               	movlw	39
  6415  0018D2  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  6419  0018D4  6BAA               	clrf	(_vscp_omsg+5)& (0+255),b
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  6423  0018D6  C09E  F0AB         	movff	_vscp_imsg+7,_vscp_omsg+6
  6424                           
  6425                           ; BSR set to: 0
  6426                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  6427  0018DA  C09F  F0AC         	movff	_vscp_imsg+8,_vscp_omsg+7
  6428                           
  6429                           ; BSR set to: 0
  6430                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  6431  0018DE  C0A0  F0AD         	movff	_vscp_imsg+9,_vscp_omsg+8
  6432  0018E2  D540               	goto	l10075
  6433  0018E4                     l10467:
  6434                           
  6435                           ; BSR set to: 0
  6436  0018E4  519B               	movf	(_vscp_imsg+4)& (0+255),w,b
  6437                           
  6438                           ; Switch size 1, requested type "speed"
  6439                           ; Number of cases is 16, Range of values is 1 to 38
  6440                           ; switch strategies available:
  6441                           ; Name         Instructions Cycles
  6442                           ; simple_byte           49    25 (average)
  6443                           ;	Chosen strategy is simple_byte
  6444  0018E6  0A01               	xorlw	1	; case 1
  6445  0018E8  E101 D514          	bz	l10049
  6446  0018EC  0A03               	xorlw	3	; case 2
  6447  0018EE  E101 D514          	bz	l10051
  6448  0018F2  0A04               	xorlw	4	; case 6
  6449  0018F4  E101 D514          	bz	l10053
  6450  0018F8  0A0E               	xorlw	14	; case 8
  6451  0018FA  E101 D514          	bz	l10055
  6452  0018FE  0A01               	xorlw	1	; case 9
  6453  001900  E101 D514          	bz	l10057
  6454  001904  0A02               	xorlw	2	; case 11
  6455  001906  E101 D534          	bz	l10091
  6456  00190A  0A07               	xorlw	7	; case 12
  6457  00190C  E101 D54A          	bz	l10125
  6458  001910  0A1B               	xorlw	27	; case 23
  6459  001912  E101 D5DF          	bz	l10183
  6460  001916  0A0F               	xorlw	15	; case 24
  6461  001918  E101 D5F3          	bz	l10189
  6462  00191C  0A01               	xorlw	1	; case 25
  6463  00191E  E101 D648          	bz	l10223
  6464  001922  0A04               	xorlw	4	; case 29
  6465  001924  E101 D676          	bz	l10249
  6466  001928  0A03               	xorlw	3	; case 30
  6467  00192A  E101 D683          	bz	l10265
  6468  00192E  0A01               	xorlw	1	; case 31
  6469  001930  E101 D690          	bz	l10281
  6470  001934  0A3E               	xorlw	62	; case 33
  6471  001936  E101 D6F4          	bz	l10367
  6472  00193A  0A04               	xorlw	4	; case 37
  6473  00193C  E101 D702          	bz	l10377
  6474  001940  0A03               	xorlw	3	; case 38
  6475  001942  E101 D774          	bz	l10433
  6476  001946                     l1291:
  6477  001946  0012               	return	
  6478  001948                     __end_of_vscp_handleProtocolEvent:
  6479                           	opt stack 0
  6480                           tblptru	equ	0xFF8
  6481                           prodh	equ	0xFF4
  6482                           prodl	equ	0xFF3
  6483                           postinc0	equ	0xFEE
  6484                           wreg	equ	0xFE8
  6485                           indf2	equ	0xFDF
  6486                           postinc2	equ	0xFDE
  6487                           postdec2	equ	0xFDD
  6488                           fsr2h	equ	0xFDA
  6489                           fsr2l	equ	0xFD9
  6490                           status	equ	0xFD8
  6491                           
  6492 ;; *************** function ___lbmod *****************
  6493 ;; Defined at:
  6494 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  6495 ;; Parameters:    Size  Location     Type
  6496 ;;  dividend        1    wreg     unsigned char 
  6497 ;;  divisor         1    7[COMRAM] unsigned char 
  6498 ;; Auto vars:     Size  Location     Type
  6499 ;;  dividend        1    8[COMRAM] unsigned char 
  6500 ;;  rem             1   10[COMRAM] unsigned char 
  6501 ;;  counter         1    9[COMRAM] unsigned char 
  6502 ;; Return value:  Size  Location     Type
  6503 ;;                  1    wreg      unsigned char 
  6504 ;; Registers used:
  6505 ;;		wreg, status,2, status,0
  6506 ;; Tracked objects:
  6507 ;;		On entry : F/0
  6508 ;;		On exit  : 0/0
  6509 ;;		Unchanged: 0/0
  6510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6511 ;;      Params:         1       0       0       0       0       0       0
  6512 ;;      Locals:         3       0       0       0       0       0       0
  6513 ;;      Temps:          0       0       0       0       0       0       0
  6514 ;;      Totals:         4       0       0       0       0       0       0
  6515 ;;Total ram usage:        4 bytes
  6516 ;; Hardware stack levels used:    1
  6517 ;; Hardware stack levels required when called:    2
  6518 ;; This function calls:
  6519 ;;		Nothing
  6520 ;; This function is called by:
  6521 ;;		_vscp_handleProtocolEvent
  6522 ;; This function uses a non-reentrant model
  6523 ;;
  6524                           
  6525                           	psect	text16
  6526  0041DC                     __ptext16:
  6527                           	opt stack 0
  6528  0041DC                     ___lbmod:
  6529                           	opt stack 27
  6530                           
  6531                           ;incstack = 0
  6532                           ;incstack = 0
  6533                           ;___lbmod@dividend stored from wreg
  6534  0041DC  CFE8 F009          	movff	wreg,___lbmod@dividend
  6535                           
  6536                           ; BSR set to: 0
  6537  0041E0  0E08               	movlw	8
  6538  0041E2  6E0A               	movwf	___lbmod@counter,c
  6539                           
  6540                           ; BSR set to: 0
  6541  0041E4  6A0B               	clrf	___lbmod@rem,c
  6542  0041E6                     l7525:
  6543  0041E6  90D8               	bcf	status,0,c
  6544  0041E8  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  6545  0041EA  340B               	rlcf	___lbmod@rem& (0+255),w,c
  6546  0041EC  6E0B               	movwf	___lbmod@rem,c
  6547  0041EE  90D8               	bcf	status,0,c
  6548  0041F0  3609               	rlcf	___lbmod@dividend,f,c
  6549  0041F2  5008               	movf	___lbmod@divisor,w,c
  6550  0041F4  5C0B               	subwf	___lbmod@rem,w,c
  6551  0041F6  E302               	bnc	l7533
  6552  0041F8  5008               	movf	___lbmod@divisor,w,c
  6553  0041FA  5E0B               	subwf	___lbmod@rem,f,c
  6554  0041FC                     l7533:
  6555  0041FC  2E0A               	decfsz	___lbmod@counter,f,c
  6556  0041FE  D7F3               	goto	l7525
  6557  004200  500B               	movf	___lbmod@rem,w,c
  6558  004202  0012               	return	
  6559  004204                     __end_of___lbmod:
  6560                           	opt stack 0
  6561                           tblptru	equ	0xFF8
  6562                           prodh	equ	0xFF4
  6563                           prodl	equ	0xFF3
  6564                           postinc0	equ	0xFEE
  6565                           wreg	equ	0xFE8
  6566                           indf2	equ	0xFDF
  6567                           postinc2	equ	0xFDE
  6568                           postdec2	equ	0xFDD
  6569                           fsr2h	equ	0xFDA
  6570                           fsr2l	equ	0xFD9
  6571                           status	equ	0xFD8
  6572                           
  6573 ;; *************** function _vscp_writeRegister *****************
  6574 ;; Defined at:
  6575 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;  reg             1    wreg     unsigned char 
  6578 ;;  value           1   30[BANK0 ] unsigned char 
  6579 ;; Auto vars:     Size  Location     Type
  6580 ;;  reg             1   31[BANK0 ] unsigned char 
  6581 ;; Return value:  Size  Location     Type
  6582 ;;                  1    wreg      unsigned char 
  6583 ;; Registers used:
  6584 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6585 ;; Tracked objects:
  6586 ;;		On entry : F/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6590 ;;      Params:         0       1       0       0       0       0       0
  6591 ;;      Locals:         0       1       0       0       0       0       0
  6592 ;;      Temps:          0       0       0       0       0       0       0
  6593 ;;      Totals:         0       2       0       0       0       0       0
  6594 ;;Total ram usage:        2 bytes
  6595 ;; Hardware stack levels used:    1
  6596 ;; Hardware stack levels required when called:    8
  6597 ;; This function calls:
  6598 ;;		_vscp_writeAppReg
  6599 ;;		_vscp_writeStdReg
  6600 ;; This function is called by:
  6601 ;;		_vscp_handleProtocolEvent
  6602 ;; This function uses a non-reentrant model
  6603 ;;
  6604                           
  6605                           	psect	text17
  6606  004306                     __ptext17:
  6607                           	opt stack 0
  6608  004306                     _vscp_writeRegister:
  6609                           	opt stack 21
  6610                           
  6611                           ;incstack = 0
  6612                           ;incstack = 0
  6613                           ;vscp_writeRegister@reg stored from wreg
  6614  004306  CFE8 F0D1          	movff	wreg,vscp_writeRegister@reg
  6615                           
  6616                           ; BSR set to: 0
  6617                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  6618  00430A  0E7F               	movlw	127
  6619  00430C  65D1               	cpfsgt	vscp_writeRegister@reg& (0+255),b
  6620  00430E  D006               	goto	l11325
  6621                           
  6622                           ; BSR set to: 0
  6623                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  6624  004310  C0D0  F048         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  6625  004314  51D1               	movf	vscp_writeRegister@reg& (0+255),w,b
  6626  004316  EC0C  F01C         	call	_vscp_writeStdReg
  6627  00431A  D005               	goto	l1171
  6628  00431C                     l11325:
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;vscp_firmware.c: 705: else {
  6632                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  6633  00431C  C0D0  F051         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  6634  004320  51D1               	movf	vscp_writeRegister@reg& (0+255),w,b
  6635  004322  EC70  F004         	call	_vscp_writeAppReg
  6636  004326                     l1171:
  6637  004326  0012               	return	
  6638  004328                     __end_of_vscp_writeRegister:
  6639                           	opt stack 0
  6640                           tblptru	equ	0xFF8
  6641                           prodh	equ	0xFF4
  6642                           prodl	equ	0xFF3
  6643                           postinc0	equ	0xFEE
  6644                           wreg	equ	0xFE8
  6645                           indf2	equ	0xFDF
  6646                           postinc2	equ	0xFDE
  6647                           postdec2	equ	0xFDD
  6648                           fsr2h	equ	0xFDA
  6649                           fsr2l	equ	0xFD9
  6650                           status	equ	0xFD8
  6651                           
  6652 ;; *************** function _vscp_writeStdReg *****************
  6653 ;; Defined at:
  6654 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;  reg             1    wreg     unsigned char 
  6657 ;;  value           1   71[COMRAM] unsigned char 
  6658 ;; Auto vars:     Size  Location     Type
  6659 ;;  reg             1   77[COMRAM] unsigned char 
  6660 ;;  rv              1   76[COMRAM] unsigned char 
  6661 ;; Return value:  Size  Location     Type
  6662 ;;                  1    wreg      unsigned char 
  6663 ;; Registers used:
  6664 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6665 ;; Tracked objects:
  6666 ;;		On entry : F/0
  6667 ;;		On exit  : 0/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6670 ;;      Params:         1       0       0       0       0       0       0
  6671 ;;      Locals:         2       0       0       0       0       0       0
  6672 ;;      Temps:          4       0       0       0       0       0       0
  6673 ;;      Totals:         7       0       0       0       0       0       0
  6674 ;;Total ram usage:        7 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:    6
  6677 ;; This function calls:
  6678 ;;		_vscp_setGUID
  6679 ;;		_vscp_setManufacturerId
  6680 ;;		_vscp_getGUID
  6681 ;;		_vscp_getUserID
  6682 ;;		_vscp_setUserID
  6683 ;;		_vscp_getManufacturerId
  6684 ;;		_vscp_restoreDefaults
  6685 ;; This function is called by:
  6686 ;;		_vscp_writeRegister
  6687 ;;		_vscp_handleProtocolEvent
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           	psect	text18
  6692  003818                     __ptext18:
  6693                           	opt stack 0
  6694  003818                     _vscp_writeStdReg:
  6695                           	opt stack 23
  6696                           
  6697                           ;incstack = 0
  6698                           ;incstack = 0
  6699                           ;vscp_writeStdReg@reg stored from wreg
  6700  003818  CFE8 F04E          	movff	wreg,vscp_writeStdReg@reg
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  6704  00381C  1C48               	comf	vscp_writeStdReg@value,w,c
  6705  00381E  6E4D               	movwf	vscp_writeStdReg@rv,c
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  6709                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  6710  003820  0E83               	movlw	131
  6711  003822  644E               	cpfsgt	vscp_writeStdReg@reg,c
  6712  003824  D00E               	goto	l9881
  6713                           
  6714                           ; BSR set to: 0
  6715  003826  0E89               	movlw	137
  6716  003828  604E               	cpfslt	vscp_writeStdReg@reg,c
  6717  00382A  D00B               	goto	l9881
  6718                           
  6719                           ; BSR set to: 0
  6720                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  6721  00382C  C048  F00C         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  6722  003830  504E               	movf	vscp_writeStdReg@reg,w,c
  6723  003832  0F7C               	addlw	124
  6724  003834  ECC2  F021         	call	_vscp_setUserID
  6725                           
  6726                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  6727  003838  504E               	movf	vscp_writeStdReg@reg,w,c
  6728  00383A  0F7C               	addlw	124
  6729  00383C  EC2E  F022         	call	_vscp_getUserID
  6730  003840  D069               	goto	L25
  6731  003842                     l9881:
  6732                           
  6733                           ; BSR set to: 0
  6734                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  6735  003842  504E               	movf	vscp_writeStdReg@reg,w,c
  6736  003844  0A92               	xorlw	146
  6737  003846  E10D               	bnz	l9887
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  6741  003848  5048               	movf	vscp_writeStdReg@value,w,c
  6742  00384A  6E4A               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6743  00384C  6A49               	clrf	??_vscp_writeStdReg& (0+255),c
  6744  00384E  5052               	movf	_vscp_page_select,w,c
  6745  003850  6E4B               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  6746  003852  6A4C               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  6747  003854  1049               	iorwf	??_vscp_writeStdReg,w,c
  6748  003856  6E52               	movwf	_vscp_page_select,c
  6749  003858  504A               	movf	??_vscp_writeStdReg+1,w,c
  6750  00385A  104C               	iorwf	??_vscp_writeStdReg+3,w,c
  6751  00385C  6E53               	movwf	_vscp_page_select+1,c
  6752                           
  6753                           ; BSR set to: 0
  6754                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  6755  00385E  5053               	movf	_vscp_page_select+1,w,c
  6756  003860  D059               	goto	L25
  6757  003862                     l9887:
  6758                           
  6759                           ; BSR set to: 0
  6760                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  6761  003862  504E               	movf	vscp_writeStdReg@reg,w,c
  6762  003864  0A93               	xorlw	147
  6763  003866  E10B               	bnz	l9893
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  6767  003868  6A49               	clrf	??_vscp_writeStdReg& (0+255),c
  6768  00386A  5053               	movf	_vscp_page_select+1,w,c
  6769  00386C  6E4A               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6770  00386E  5048               	movf	vscp_writeStdReg@value,w,c
  6771  003870  1049               	iorwf	??_vscp_writeStdReg,w,c
  6772  003872  6E52               	movwf	_vscp_page_select,c
  6773  003874  504A               	movf	??_vscp_writeStdReg+1,w,c
  6774  003876  6E53               	movwf	_vscp_page_select+1,c
  6775                           
  6776                           ; BSR set to: 0
  6777                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  6778  003878  C052  F04D         	movff	_vscp_page_select,vscp_writeStdReg@rv
  6779                           
  6780                           ;vscp_firmware.c: 737: }
  6781  00387C  D04E               	goto	l9935
  6782  00387E                     l9893:
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  6786  00387E  0E88               	movlw	136
  6787  003880  644E               	cpfsgt	vscp_writeStdReg@reg,c
  6788  003882  D019               	goto	l9905
  6789                           
  6790                           ; BSR set to: 0
  6791  003884  0E91               	movlw	145
  6792  003886  604E               	cpfslt	vscp_writeStdReg@reg,c
  6793  003888  D016               	goto	l9905
  6794                           
  6795                           ; BSR set to: 0
  6796                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6797                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  6798  00388A  C053  F049         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6799  00388E  C049  F04A         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6800  003892  6A4B               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6801  003894  284A               	incf	??_vscp_writeStdReg+1,w,c
  6802  003896  E102               	bnz	l9901
  6803                           
  6804                           ; BSR set to: 0
  6805  003898  2852               	incf	_vscp_page_select,w,c
  6806  00389A  E002               	bz	l9903
  6807  00389C                     l9901:
  6808                           
  6809                           ; BSR set to: 0
  6810                           ;vscp_firmware.c: 747: rv = ~value;
  6811  00389C  1C48               	comf	vscp_writeStdReg@value,w,c
  6812  00389E  D03A               	goto	L25
  6813  0038A0                     l9903:
  6814                           
  6815                           ; BSR set to: 0
  6816                           ;vscp_firmware.c: 749: else {
  6817                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  6818  0038A0  C048  F00C         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  6819  0038A4  504E               	movf	vscp_writeStdReg@reg,w,c
  6820  0038A6  0F77               	addlw	119
  6821  0038A8  EC15  F021         	call	_vscp_setManufacturerId
  6822                           
  6823                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  6824  0038AC  504E               	movf	vscp_writeStdReg@reg,w,c
  6825  0038AE  0F77               	addlw	119
  6826  0038B0  EC24  F022         	call	_vscp_getManufacturerId
  6827  0038B4  D02F               	goto	L25
  6828  0038B6                     l9905:
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  6832  0038B6  0ECF               	movlw	207
  6833  0038B8  644E               	cpfsgt	vscp_writeStdReg@reg,c
  6834  0038BA  D017               	goto	l9917
  6835                           
  6836                           ; BSR set to: 0
  6837  0038BC  0EE0               	movlw	224
  6838  0038BE  604E               	cpfslt	vscp_writeStdReg@reg,c
  6839  0038C0  D014               	goto	l9917
  6840                           
  6841                           ; BSR set to: 0
  6842                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6843                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  6844  0038C2  C053  F049         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6845  0038C6  C049  F04A         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6846  0038CA  6A4B               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6847  0038CC  284A               	incf	??_vscp_writeStdReg+1,w,c
  6848  0038CE  E1E6               	bnz	l9901
  6849                           
  6850                           ; BSR set to: 0
  6851  0038D0  2852               	incf	_vscp_page_select,w,c
  6852  0038D2  E1E4               	bnz	l9901
  6853                           
  6854                           ; BSR set to: 0
  6855                           ;vscp_firmware.c: 762: else {
  6856                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  6857  0038D4  C048  F00C         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  6858  0038D8  504E               	movf	vscp_writeStdReg@reg,w,c
  6859  0038DA  0F30               	addlw	48
  6860  0038DC  EC28  F021         	call	_vscp_setGUID
  6861                           
  6862                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  6863  0038E0  504E               	movf	vscp_writeStdReg@reg,w,c
  6864  0038E2  0F30               	addlw	48
  6865  0038E4  EC38  F022         	call	_vscp_getGUID
  6866  0038E8  D015               	goto	L25
  6867  0038EA                     l9917:
  6868                           
  6869                           ; BSR set to: 0
  6870                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  6871  0038EA  504E               	movf	vscp_writeStdReg@reg,w,c
  6872  0038EC  0AA2               	xorlw	162
  6873  0038EE  E1D6               	bnz	l9901
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  6877  0038F0  5048               	movf	vscp_writeStdReg@value,w,c
  6878  0038F2  0A55               	xorlw	85
  6879  0038F4  E104               	bnz	l9925
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  6883  0038F6  6B86               	clrf	_vscp_configtimer& (0+255),b	;volatile
  6884  0038F8  6B87               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;vscp_firmware.c: 771: rv = 0x55;
  6888  0038FA  0E55               	movlw	85
  6889  0038FC  D00B               	goto	L25
  6890  0038FE                     l9925:
  6891                           
  6892                           ; BSR set to: 0
  6893                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  6894  0038FE  5048               	movf	vscp_writeStdReg@value,w,c
  6895  003900  0AAA               	xorlw	170
  6896  003902  E10B               	bnz	l9935
  6897                           
  6898                           ; BSR set to: 0
  6899                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  6900  003904  0EE8               	movlw	232
  6901  003906  5D86               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  6902  003908  0E03               	movlw	3
  6903  00390A  5987               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  6904  00390C  E205               	bc	l1197
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  6908  00390E  EC7B  F022         	call	_vscp_restoreDefaults	;wreg free
  6909                           
  6910                           ;vscp_firmware.c: 776: rv = 0xaa;
  6911  003912  0EAA               	movlw	170
  6912  003914                     L25:
  6913  003914  6E4D               	movwf	vscp_writeStdReg@rv,c
  6914                           
  6915                           ;vscp_firmware.c: 777: }
  6916  003916  D001               	goto	l9935
  6917  003918                     l1197:
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;vscp_firmware.c: 778: else {
  6921                           ;vscp_firmware.c: 779: rv = 0;
  6922  003918  6A4D               	clrf	vscp_writeStdReg@rv,c
  6923  00391A                     l9935:
  6924                           
  6925                           ;vscp_firmware.c: 787: }
  6926                           ;vscp_firmware.c: 789: return rv;
  6927  00391A  504D               	movf	vscp_writeStdReg@rv,w,c
  6928  00391C  0012               	return	
  6929  00391E                     __end_of_vscp_writeStdReg:
  6930                           	opt stack 0
  6931                           tblptru	equ	0xFF8
  6932                           prodh	equ	0xFF4
  6933                           prodl	equ	0xFF3
  6934                           postinc0	equ	0xFEE
  6935                           wreg	equ	0xFE8
  6936                           indf2	equ	0xFDF
  6937                           postinc2	equ	0xFDE
  6938                           postdec2	equ	0xFDD
  6939                           fsr2h	equ	0xFDA
  6940                           fsr2l	equ	0xFD9
  6941                           status	equ	0xFD8
  6942                           
  6943 ;; *************** function _vscp_restoreDefaults *****************
  6944 ;; Defined at:
  6945 ;;		line 2565 in file "../main.c"
  6946 ;; Parameters:    Size  Location     Type
  6947 ;;		None
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;		None
  6950 ;; Return value:  Size  Location     Type
  6951 ;;		None               void
  6952 ;; Registers used:
  6953 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6954 ;; Tracked objects:
  6955 ;;		On entry : F/0
  6956 ;;		On exit  : 0/0
  6957 ;;		Unchanged: 0/0
  6958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6959 ;;      Params:         0       0       0       0       0       0       0
  6960 ;;      Locals:         0       0       0       0       0       0       0
  6961 ;;      Temps:          0       0       0       0       0       0       0
  6962 ;;      Totals:         0       0       0       0       0       0       0
  6963 ;;Total ram usage:        0 bytes
  6964 ;; Hardware stack levels used:    1
  6965 ;; Hardware stack levels required when called:    5
  6966 ;; This function calls:
  6967 ;;		_init_app_eeprom
  6968 ;;		_init_app_ram
  6969 ;; This function is called by:
  6970 ;;		_vscp_writeStdReg
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           	psect	text19
  6975  0044F6                     __ptext19:
  6976                           	opt stack 0
  6977  0044F6                     _vscp_restoreDefaults:
  6978                           	opt stack 23
  6979                           
  6980                           ; BSR set to: 0
  6981                           ;main.c: 2566: init_app_eeprom();
  6982                           
  6983                           ;incstack = 0
  6984                           ;incstack = 0
  6985  0044F6  ECDA  F00E         	call	_init_app_eeprom	;wreg free
  6986                           
  6987                           ;main.c: 2567: init_app_ram();
  6988  0044FA  EF85  F01B         	goto	_init_app_ram	;wreg free
  6989  0044FE                     __end_of_vscp_restoreDefaults:
  6990                           	opt stack 0
  6991                           tblptru	equ	0xFF8
  6992                           prodh	equ	0xFF4
  6993                           prodl	equ	0xFF3
  6994                           postinc0	equ	0xFEE
  6995                           wreg	equ	0xFE8
  6996                           indf2	equ	0xFDF
  6997                           postinc2	equ	0xFDE
  6998                           postdec2	equ	0xFDD
  6999                           fsr2h	equ	0xFDA
  7000                           fsr2l	equ	0xFD9
  7001                           status	equ	0xFD8
  7002                           
  7003 ;; *************** function _init_app_eeprom *****************
  7004 ;; Defined at:
  7005 ;;		line 481 in file "../main.c"
  7006 ;; Parameters:    Size  Location     Type
  7007 ;;		None
  7008 ;; Auto vars:     Size  Location     Type
  7009 ;;  j               1   70[COMRAM] unsigned char 
  7010 ;;  i               1   69[COMRAM] unsigned char 
  7011 ;; Return value:  Size  Location     Type
  7012 ;;		None               void
  7013 ;; Registers used:
  7014 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7020 ;;      Params:         0       0       0       0       0       0       0
  7021 ;;      Locals:         2       0       0       0       0       0       0
  7022 ;;      Temps:          2       0       0       0       0       0       0
  7023 ;;      Totals:         4       0       0       0       0       0       0
  7024 ;;Total ram usage:        4 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    4
  7027 ;; This function calls:
  7028 ;;		_calculateSetFilterMask
  7029 ;;		_Busy_eep
  7030 ;;		_Write_b_eep
  7031 ;; This function is called by:
  7032 ;;		_main
  7033 ;;		_vscp_restoreDefaults
  7034 ;; This function uses a non-reentrant model
  7035 ;;
  7036                           
  7037                           	psect	text20
  7038  001DB4                     __ptext20:
  7039                           	opt stack 0
  7040  001DB4                     _init_app_eeprom:
  7041                           	opt stack 23
  7042                           
  7043                           ;main.c: 482: unsigned char i, j;
  7044                           ;main.c: 484: (Busy_eep(), Write_b_eep(0x43 + 0,0));
  7045                           
  7046                           ;incstack = 0
  7047                           ;incstack = 0
  7048  001DB4  EC7F  F022         	call	_Busy_eep	;wreg free
  7049  001DB8  6A09               	clrf	?_Write_b_eep+1,c
  7050  001DBA  0E43               	movlw	67
  7051  001DBC  6E08               	movwf	?_Write_b_eep,c
  7052  001DBE  0E00               	movlw	0
  7053  001DC0  6A0A               	clrf	?_Write_b_eep+2,c
  7054  001DC2  EC7C  F020         	call	_Write_b_eep	;wreg free
  7055                           
  7056                           ;main.c: 485: (Busy_eep(), Write_b_eep(0x43 + 1,0));
  7057  001DC6  EC7F  F022         	call	_Busy_eep	;wreg free
  7058  001DCA  6A09               	clrf	?_Write_b_eep+1,c
  7059  001DCC  0E44               	movlw	68
  7060  001DCE  6E08               	movwf	?_Write_b_eep,c
  7061  001DD0  0E00               	movlw	0
  7062  001DD2  6A0A               	clrf	?_Write_b_eep+2,c
  7063  001DD4  EC7C  F020         	call	_Write_b_eep	;wreg free
  7064                           
  7065                           ;main.c: 487: (Busy_eep(), Write_b_eep(0x43 + 10,0x08 | 0x10 | 0x80));
  7066  001DD8  EC7F  F022         	call	_Busy_eep	;wreg free
  7067  001DDC  6A09               	clrf	?_Write_b_eep+1,c
  7068  001DDE  0E4D               	movlw	77
  7069  001DE0  6E08               	movwf	?_Write_b_eep,c
  7070  001DE2  0E98               	movlw	152
  7071  001DE4  6E0A               	movwf	?_Write_b_eep+2,c
  7072  001DE6  EC7C  F020         	call	_Write_b_eep	;wreg free
  7073                           
  7074                           ;main.c: 492: (Busy_eep(), Write_b_eep(0x43 + 11,0x08 | 0x10 | 0x80));
  7075  001DEA  EC7F  F022         	call	_Busy_eep	;wreg free
  7076  001DEE  6A09               	clrf	?_Write_b_eep+1,c
  7077  001DF0  0E4E               	movlw	78
  7078  001DF2  6E08               	movwf	?_Write_b_eep,c
  7079  001DF4  0E98               	movlw	152
  7080  001DF6  6E0A               	movwf	?_Write_b_eep+2,c
  7081  001DF8  EC7C  F020         	call	_Write_b_eep	;wreg free
  7082                           
  7083                           ;main.c: 497: (Busy_eep(), Write_b_eep(0x43 + 12,0x08 | 0x10 | 0x80));
  7084  001DFC  EC7F  F022         	call	_Busy_eep	;wreg free
  7085  001E00  6A09               	clrf	?_Write_b_eep+1,c
  7086  001E02  0E4F               	movlw	79
  7087  001E04  6E08               	movwf	?_Write_b_eep,c
  7088  001E06  0E98               	movlw	152
  7089  001E08  6E0A               	movwf	?_Write_b_eep+2,c
  7090  001E0A  EC7C  F020         	call	_Write_b_eep	;wreg free
  7091                           
  7092                           ;main.c: 502: (Busy_eep(), Write_b_eep(0x43 + 13,0x08 | 0x10 | 0x80));
  7093  001E0E  EC7F  F022         	call	_Busy_eep	;wreg free
  7094  001E12  6A09               	clrf	?_Write_b_eep+1,c
  7095  001E14  0E50               	movlw	80
  7096  001E16  6E08               	movwf	?_Write_b_eep,c
  7097  001E18  0E98               	movlw	152
  7098  001E1A  6E0A               	movwf	?_Write_b_eep+2,c
  7099  001E1C  EC7C  F020         	call	_Write_b_eep	;wreg free
  7100                           
  7101                           ;main.c: 507: (Busy_eep(), Write_b_eep(0x43 + 14,0x08 | 0x10 | 0x80));
  7102  001E20  EC7F  F022         	call	_Busy_eep	;wreg free
  7103  001E24  6A09               	clrf	?_Write_b_eep+1,c
  7104  001E26  0E51               	movlw	81
  7105  001E28  6E08               	movwf	?_Write_b_eep,c
  7106  001E2A  0E98               	movlw	152
  7107  001E2C  6E0A               	movwf	?_Write_b_eep+2,c
  7108  001E2E  EC7C  F020         	call	_Write_b_eep	;wreg free
  7109                           
  7110                           ;main.c: 512: (Busy_eep(), Write_b_eep(0x43 + 15,0x08 | 0x10 | 0x80));
  7111  001E32  EC7F  F022         	call	_Busy_eep	;wreg free
  7112  001E36  6A09               	clrf	?_Write_b_eep+1,c
  7113  001E38  0E52               	movlw	82
  7114  001E3A  6E08               	movwf	?_Write_b_eep,c
  7115  001E3C  0E98               	movlw	152
  7116  001E3E  6E0A               	movwf	?_Write_b_eep+2,c
  7117  001E40  EC7C  F020         	call	_Write_b_eep	;wreg free
  7118                           
  7119                           ;main.c: 517: (Busy_eep(), Write_b_eep(0x43 + 16,0x08 | 0x10 | 0x80));
  7120  001E44  EC7F  F022         	call	_Busy_eep	;wreg free
  7121  001E48  6A09               	clrf	?_Write_b_eep+1,c
  7122  001E4A  0E53               	movlw	83
  7123  001E4C  6E08               	movwf	?_Write_b_eep,c
  7124  001E4E  0E98               	movlw	152
  7125  001E50  6E0A               	movwf	?_Write_b_eep+2,c
  7126  001E52  EC7C  F020         	call	_Write_b_eep	;wreg free
  7127                           
  7128                           ;main.c: 522: (Busy_eep(), Write_b_eep(0x43 + 17,0x08 | 0x10 | 0x80));
  7129  001E56  EC7F  F022         	call	_Busy_eep	;wreg free
  7130  001E5A  6A09               	clrf	?_Write_b_eep+1,c
  7131  001E5C  0E54               	movlw	84
  7132  001E5E  6E08               	movwf	?_Write_b_eep,c
  7133  001E60  0E98               	movlw	152
  7134  001E62  6E0A               	movwf	?_Write_b_eep+2,c
  7135  001E64  EC7C  F020         	call	_Write_b_eep	;wreg free
  7136                           
  7137                           ;main.c: 527: (Busy_eep(), Write_b_eep(0x43 + 18,0));
  7138  001E68  EC7F  F022         	call	_Busy_eep	;wreg free
  7139  001E6C  6A09               	clrf	?_Write_b_eep+1,c
  7140  001E6E  0E55               	movlw	85
  7141  001E70  6E08               	movwf	?_Write_b_eep,c
  7142  001E72  0E00               	movlw	0
  7143  001E74  6A0A               	clrf	?_Write_b_eep+2,c
  7144  001E76  EC7C  F020         	call	_Write_b_eep	;wreg free
  7145                           
  7146                           ;main.c: 528: (Busy_eep(), Write_b_eep(0x43 + 19,0));
  7147  001E7A  EC7F  F022         	call	_Busy_eep	;wreg free
  7148  001E7E  6A09               	clrf	?_Write_b_eep+1,c
  7149  001E80  0E56               	movlw	86
  7150  001E82  6E08               	movwf	?_Write_b_eep,c
  7151  001E84  0E00               	movlw	0
  7152  001E86  6A0A               	clrf	?_Write_b_eep+2,c
  7153  001E88  EC7C  F020         	call	_Write_b_eep	;wreg free
  7154                           
  7155                           ;main.c: 529: (Busy_eep(), Write_b_eep(0x43 + 20,0));
  7156  001E8C  EC7F  F022         	call	_Busy_eep	;wreg free
  7157  001E90  6A09               	clrf	?_Write_b_eep+1,c
  7158  001E92  0E57               	movlw	87
  7159  001E94  6E08               	movwf	?_Write_b_eep,c
  7160  001E96  0E00               	movlw	0
  7161  001E98  6A0A               	clrf	?_Write_b_eep+2,c
  7162  001E9A  EC7C  F020         	call	_Write_b_eep	;wreg free
  7163                           
  7164                           ;main.c: 530: (Busy_eep(), Write_b_eep(0x43 + 21,0));
  7165  001E9E  EC7F  F022         	call	_Busy_eep	;wreg free
  7166  001EA2  6A09               	clrf	?_Write_b_eep+1,c
  7167  001EA4  0E58               	movlw	88
  7168  001EA6  6E08               	movwf	?_Write_b_eep,c
  7169  001EA8  0E00               	movlw	0
  7170  001EAA  6A0A               	clrf	?_Write_b_eep+2,c
  7171  001EAC  EC7C  F020         	call	_Write_b_eep	;wreg free
  7172                           
  7173                           ;main.c: 531: (Busy_eep(), Write_b_eep(0x43 + 22,0));
  7174  001EB0  EC7F  F022         	call	_Busy_eep	;wreg free
  7175  001EB4  6A09               	clrf	?_Write_b_eep+1,c
  7176  001EB6  0E59               	movlw	89
  7177  001EB8  6E08               	movwf	?_Write_b_eep,c
  7178  001EBA  0E00               	movlw	0
  7179  001EBC  6A0A               	clrf	?_Write_b_eep+2,c
  7180  001EBE  EC7C  F020         	call	_Write_b_eep	;wreg free
  7181                           
  7182                           ;main.c: 532: (Busy_eep(), Write_b_eep(0x43 + 23,0));
  7183  001EC2  EC7F  F022         	call	_Busy_eep	;wreg free
  7184  001EC6  6A09               	clrf	?_Write_b_eep+1,c
  7185  001EC8  0E5A               	movlw	90
  7186  001ECA  6E08               	movwf	?_Write_b_eep,c
  7187  001ECC  0E00               	movlw	0
  7188  001ECE  6A0A               	clrf	?_Write_b_eep+2,c
  7189  001ED0  EC7C  F020         	call	_Write_b_eep	;wreg free
  7190                           
  7191                           ;main.c: 533: (Busy_eep(), Write_b_eep(0x43 + 24,0));
  7192  001ED4  EC7F  F022         	call	_Busy_eep	;wreg free
  7193  001ED8  6A09               	clrf	?_Write_b_eep+1,c
  7194  001EDA  0E5B               	movlw	91
  7195  001EDC  6E08               	movwf	?_Write_b_eep,c
  7196  001EDE  0E00               	movlw	0
  7197  001EE0  6A0A               	clrf	?_Write_b_eep+2,c
  7198  001EE2  EC7C  F020         	call	_Write_b_eep	;wreg free
  7199                           
  7200                           ;main.c: 534: (Busy_eep(), Write_b_eep(0x43 + 25,0));
  7201  001EE6  EC7F  F022         	call	_Busy_eep	;wreg free
  7202  001EEA  6A09               	clrf	?_Write_b_eep+1,c
  7203  001EEC  0E5C               	movlw	92
  7204  001EEE  6E08               	movwf	?_Write_b_eep,c
  7205  001EF0  0E00               	movlw	0
  7206  001EF2  6A0A               	clrf	?_Write_b_eep+2,c
  7207  001EF4  EC7C  F020         	call	_Write_b_eep	;wreg free
  7208                           
  7209                           ;main.c: 535: (Busy_eep(), Write_b_eep(0x43 + 26,0));
  7210  001EF8  EC7F  F022         	call	_Busy_eep	;wreg free
  7211  001EFC  6A09               	clrf	?_Write_b_eep+1,c
  7212  001EFE  0E5D               	movlw	93
  7213  001F00  6E08               	movwf	?_Write_b_eep,c
  7214  001F02  0E00               	movlw	0
  7215  001F04  6A0A               	clrf	?_Write_b_eep+2,c
  7216  001F06  EC7C  F020         	call	_Write_b_eep	;wreg free
  7217                           
  7218                           ;main.c: 536: (Busy_eep(), Write_b_eep(0x43 + 27,0));
  7219  001F0A  EC7F  F022         	call	_Busy_eep	;wreg free
  7220  001F0E  6A09               	clrf	?_Write_b_eep+1,c
  7221  001F10  0E5E               	movlw	94
  7222  001F12  6E08               	movwf	?_Write_b_eep,c
  7223  001F14  0E00               	movlw	0
  7224  001F16  6A0A               	clrf	?_Write_b_eep+2,c
  7225  001F18  EC7C  F020         	call	_Write_b_eep	;wreg free
  7226                           
  7227                           ;main.c: 537: (Busy_eep(), Write_b_eep(0x43 + 28,0));
  7228  001F1C  EC7F  F022         	call	_Busy_eep	;wreg free
  7229  001F20  6A09               	clrf	?_Write_b_eep+1,c
  7230  001F22  0E5F               	movlw	95
  7231  001F24  6E08               	movwf	?_Write_b_eep,c
  7232  001F26  0E00               	movlw	0
  7233  001F28  6A0A               	clrf	?_Write_b_eep+2,c
  7234  001F2A  EC7C  F020         	call	_Write_b_eep	;wreg free
  7235                           
  7236                           ;main.c: 538: (Busy_eep(), Write_b_eep(0x43 + 29,0));
  7237  001F2E  EC7F  F022         	call	_Busy_eep	;wreg free
  7238  001F32  6A09               	clrf	?_Write_b_eep+1,c
  7239  001F34  0E60               	movlw	96
  7240  001F36  6E08               	movwf	?_Write_b_eep,c
  7241  001F38  0E00               	movlw	0
  7242  001F3A  6A0A               	clrf	?_Write_b_eep+2,c
  7243  001F3C  EC7C  F020         	call	_Write_b_eep	;wreg free
  7244                           
  7245                           ;main.c: 539: (Busy_eep(), Write_b_eep(0x43 + 30,0));
  7246  001F40  EC7F  F022         	call	_Busy_eep	;wreg free
  7247  001F44  6A09               	clrf	?_Write_b_eep+1,c
  7248  001F46  0E61               	movlw	97
  7249  001F48  6E08               	movwf	?_Write_b_eep,c
  7250  001F4A  0E00               	movlw	0
  7251  001F4C  6A0A               	clrf	?_Write_b_eep+2,c
  7252  001F4E  EC7C  F020         	call	_Write_b_eep	;wreg free
  7253                           
  7254                           ;main.c: 540: (Busy_eep(), Write_b_eep(0x43 + 31,0));
  7255  001F52  EC7F  F022         	call	_Busy_eep	;wreg free
  7256  001F56  6A09               	clrf	?_Write_b_eep+1,c
  7257  001F58  0E62               	movlw	98
  7258  001F5A  6E08               	movwf	?_Write_b_eep,c
  7259  001F5C  0E00               	movlw	0
  7260  001F5E  6A0A               	clrf	?_Write_b_eep+2,c
  7261  001F60  EC7C  F020         	call	_Write_b_eep	;wreg free
  7262                           
  7263                           ;main.c: 541: (Busy_eep(), Write_b_eep(0x43 + 32,0));
  7264  001F64  EC7F  F022         	call	_Busy_eep	;wreg free
  7265  001F68  6A09               	clrf	?_Write_b_eep+1,c
  7266  001F6A  0E63               	movlw	99
  7267  001F6C  6E08               	movwf	?_Write_b_eep,c
  7268  001F6E  0E00               	movlw	0
  7269  001F70  6A0A               	clrf	?_Write_b_eep+2,c
  7270  001F72  EC7C  F020         	call	_Write_b_eep	;wreg free
  7271                           
  7272                           ;main.c: 542: (Busy_eep(), Write_b_eep(0x43 + 33,0));
  7273  001F76  EC7F  F022         	call	_Busy_eep	;wreg free
  7274  001F7A  6A09               	clrf	?_Write_b_eep+1,c
  7275  001F7C  0E64               	movlw	100
  7276  001F7E  6E08               	movwf	?_Write_b_eep,c
  7277  001F80  0E00               	movlw	0
  7278  001F82  6A0A               	clrf	?_Write_b_eep+2,c
  7279  001F84  EC7C  F020         	call	_Write_b_eep	;wreg free
  7280                           
  7281                           ;main.c: 544: (Busy_eep(), Write_b_eep(0x43 + 34,0));
  7282  001F88  EC7F  F022         	call	_Busy_eep	;wreg free
  7283  001F8C  6A09               	clrf	?_Write_b_eep+1,c
  7284  001F8E  0E65               	movlw	101
  7285  001F90  6E08               	movwf	?_Write_b_eep,c
  7286  001F92  0E00               	movlw	0
  7287  001F94  6A0A               	clrf	?_Write_b_eep+2,c
  7288  001F96  EC7C  F020         	call	_Write_b_eep	;wreg free
  7289                           
  7290                           ;main.c: 545: (Busy_eep(), Write_b_eep(0x43 + 35,0));
  7291  001F9A  EC7F  F022         	call	_Busy_eep	;wreg free
  7292  001F9E  6A09               	clrf	?_Write_b_eep+1,c
  7293  001FA0  0E66               	movlw	102
  7294  001FA2  6E08               	movwf	?_Write_b_eep,c
  7295  001FA4  0E00               	movlw	0
  7296  001FA6  6A0A               	clrf	?_Write_b_eep+2,c
  7297  001FA8  EC7C  F020         	call	_Write_b_eep	;wreg free
  7298                           
  7299                           ;main.c: 546: (Busy_eep(), Write_b_eep(0x43 + 36,0));
  7300  001FAC  EC7F  F022         	call	_Busy_eep	;wreg free
  7301  001FB0  6A09               	clrf	?_Write_b_eep+1,c
  7302  001FB2  0E67               	movlw	103
  7303  001FB4  6E08               	movwf	?_Write_b_eep,c
  7304  001FB6  0E00               	movlw	0
  7305  001FB8  6A0A               	clrf	?_Write_b_eep+2,c
  7306  001FBA  EC7C  F020         	call	_Write_b_eep	;wreg free
  7307                           
  7308                           ;main.c: 547: (Busy_eep(), Write_b_eep(0x43 + 37,0));
  7309  001FBE  EC7F  F022         	call	_Busy_eep	;wreg free
  7310  001FC2  6A09               	clrf	?_Write_b_eep+1,c
  7311  001FC4  0E68               	movlw	104
  7312  001FC6  6E08               	movwf	?_Write_b_eep,c
  7313  001FC8  0E00               	movlw	0
  7314  001FCA  6A0A               	clrf	?_Write_b_eep+2,c
  7315  001FCC  EC7C  F020         	call	_Write_b_eep	;wreg free
  7316                           
  7317                           ;main.c: 548: (Busy_eep(), Write_b_eep(0x43 + 38,0));
  7318  001FD0  EC7F  F022         	call	_Busy_eep	;wreg free
  7319  001FD4  6A09               	clrf	?_Write_b_eep+1,c
  7320  001FD6  0E69               	movlw	105
  7321  001FD8  6E08               	movwf	?_Write_b_eep,c
  7322  001FDA  0E00               	movlw	0
  7323  001FDC  6A0A               	clrf	?_Write_b_eep+2,c
  7324  001FDE  EC7C  F020         	call	_Write_b_eep	;wreg free
  7325                           
  7326                           ;main.c: 549: (Busy_eep(), Write_b_eep(0x43 + 39,0));
  7327  001FE2  EC7F  F022         	call	_Busy_eep	;wreg free
  7328  001FE6  6A09               	clrf	?_Write_b_eep+1,c
  7329  001FE8  0E6A               	movlw	106
  7330  001FEA  6E08               	movwf	?_Write_b_eep,c
  7331  001FEC  0E00               	movlw	0
  7332  001FEE  6A0A               	clrf	?_Write_b_eep+2,c
  7333  001FF0  EC7C  F020         	call	_Write_b_eep	;wreg free
  7334                           
  7335                           ;main.c: 550: (Busy_eep(), Write_b_eep(0x43 + 40,0));
  7336  001FF4  EC7F  F022         	call	_Busy_eep	;wreg free
  7337  001FF8  6A09               	clrf	?_Write_b_eep+1,c
  7338  001FFA  0E6B               	movlw	107
  7339  001FFC  6E08               	movwf	?_Write_b_eep,c
  7340  001FFE  0E00               	movlw	0
  7341  002000  6A0A               	clrf	?_Write_b_eep+2,c
  7342  002002  EC7C  F020         	call	_Write_b_eep	;wreg free
  7343                           
  7344                           ;main.c: 551: (Busy_eep(), Write_b_eep(0x43 + 41,0));
  7345  002006  EC7F  F022         	call	_Busy_eep	;wreg free
  7346  00200A  6A09               	clrf	?_Write_b_eep+1,c
  7347  00200C  0E6C               	movlw	108
  7348  00200E  6E08               	movwf	?_Write_b_eep,c
  7349  002010  0E00               	movlw	0
  7350  002012  6A0A               	clrf	?_Write_b_eep+2,c
  7351  002014  EC7C  F020         	call	_Write_b_eep	;wreg free
  7352                           
  7353                           ;main.c: 552: (Busy_eep(), Write_b_eep(0x43 + 42,0));
  7354  002018  EC7F  F022         	call	_Busy_eep	;wreg free
  7355  00201C  6A09               	clrf	?_Write_b_eep+1,c
  7356  00201E  0E6D               	movlw	109
  7357  002020  6E08               	movwf	?_Write_b_eep,c
  7358  002022  0E00               	movlw	0
  7359  002024  6A0A               	clrf	?_Write_b_eep+2,c
  7360  002026  EC7C  F020         	call	_Write_b_eep	;wreg free
  7361                           
  7362                           ;main.c: 553: (Busy_eep(), Write_b_eep(0x43 + 43,0));
  7363  00202A  EC7F  F022         	call	_Busy_eep	;wreg free
  7364  00202E  6A09               	clrf	?_Write_b_eep+1,c
  7365  002030  0E6E               	movlw	110
  7366  002032  6E08               	movwf	?_Write_b_eep,c
  7367  002034  0E00               	movlw	0
  7368  002036  6A0A               	clrf	?_Write_b_eep+2,c
  7369  002038  EC7C  F020         	call	_Write_b_eep	;wreg free
  7370                           
  7371                           ;main.c: 554: (Busy_eep(), Write_b_eep(0x43 + 44,0));
  7372  00203C  EC7F  F022         	call	_Busy_eep	;wreg free
  7373  002040  6A09               	clrf	?_Write_b_eep+1,c
  7374  002042  0E6F               	movlw	111
  7375  002044  6E08               	movwf	?_Write_b_eep,c
  7376  002046  0E00               	movlw	0
  7377  002048  6A0A               	clrf	?_Write_b_eep+2,c
  7378  00204A  EC7C  F020         	call	_Write_b_eep	;wreg free
  7379                           
  7380                           ;main.c: 555: (Busy_eep(), Write_b_eep(0x43 + 45,0));
  7381  00204E  EC7F  F022         	call	_Busy_eep	;wreg free
  7382  002052  6A09               	clrf	?_Write_b_eep+1,c
  7383  002054  0E70               	movlw	112
  7384  002056  6E08               	movwf	?_Write_b_eep,c
  7385  002058  0E00               	movlw	0
  7386  00205A  6A0A               	clrf	?_Write_b_eep+2,c
  7387  00205C  EC7C  F020         	call	_Write_b_eep	;wreg free
  7388                           
  7389                           ;main.c: 556: (Busy_eep(), Write_b_eep(0x43 + 46,0));
  7390  002060  EC7F  F022         	call	_Busy_eep	;wreg free
  7391  002064  6A09               	clrf	?_Write_b_eep+1,c
  7392  002066  0E71               	movlw	113
  7393  002068  6E08               	movwf	?_Write_b_eep,c
  7394  00206A  0E00               	movlw	0
  7395  00206C  6A0A               	clrf	?_Write_b_eep+2,c
  7396  00206E  EC7C  F020         	call	_Write_b_eep	;wreg free
  7397                           
  7398                           ;main.c: 557: (Busy_eep(), Write_b_eep(0x43 + 47,0));
  7399  002072  EC7F  F022         	call	_Busy_eep	;wreg free
  7400  002076  6A09               	clrf	?_Write_b_eep+1,c
  7401  002078  0E72               	movlw	114
  7402  00207A  6E08               	movwf	?_Write_b_eep,c
  7403  00207C  0E00               	movlw	0
  7404  00207E  6A0A               	clrf	?_Write_b_eep+2,c
  7405  002080  EC7C  F020         	call	_Write_b_eep	;wreg free
  7406                           
  7407                           ;main.c: 558: (Busy_eep(), Write_b_eep(0x43 + 48,0));
  7408  002084  EC7F  F022         	call	_Busy_eep	;wreg free
  7409  002088  6A09               	clrf	?_Write_b_eep+1,c
  7410  00208A  0E73               	movlw	115
  7411  00208C  6E08               	movwf	?_Write_b_eep,c
  7412  00208E  0E00               	movlw	0
  7413  002090  6A0A               	clrf	?_Write_b_eep+2,c
  7414  002092  EC7C  F020         	call	_Write_b_eep	;wreg free
  7415                           
  7416                           ;main.c: 559: (Busy_eep(), Write_b_eep(0x43 + 49,0));
  7417  002096  EC7F  F022         	call	_Busy_eep	;wreg free
  7418  00209A  6A09               	clrf	?_Write_b_eep+1,c
  7419  00209C  0E74               	movlw	116
  7420  00209E  6E08               	movwf	?_Write_b_eep,c
  7421  0020A0  0E00               	movlw	0
  7422  0020A2  6A0A               	clrf	?_Write_b_eep+2,c
  7423  0020A4  EC7C  F020         	call	_Write_b_eep	;wreg free
  7424                           
  7425                           ;main.c: 561: (Busy_eep(), Write_b_eep(0x43 + 50,0));
  7426  0020A8  EC7F  F022         	call	_Busy_eep	;wreg free
  7427  0020AC  6A09               	clrf	?_Write_b_eep+1,c
  7428  0020AE  0E75               	movlw	117
  7429  0020B0  6E08               	movwf	?_Write_b_eep,c
  7430  0020B2  0E00               	movlw	0
  7431  0020B4  6A0A               	clrf	?_Write_b_eep+2,c
  7432  0020B6  EC7C  F020         	call	_Write_b_eep	;wreg free
  7433                           
  7434                           ;main.c: 562: (Busy_eep(), Write_b_eep(0x43 + 51,0));
  7435  0020BA  EC7F  F022         	call	_Busy_eep	;wreg free
  7436  0020BE  6A09               	clrf	?_Write_b_eep+1,c
  7437  0020C0  0E76               	movlw	118
  7438  0020C2  6E08               	movwf	?_Write_b_eep,c
  7439  0020C4  0E00               	movlw	0
  7440  0020C6  6A0A               	clrf	?_Write_b_eep+2,c
  7441  0020C8  EC7C  F020         	call	_Write_b_eep	;wreg free
  7442                           
  7443                           ;main.c: 563: (Busy_eep(), Write_b_eep(0x43 + 52,0));
  7444  0020CC  EC7F  F022         	call	_Busy_eep	;wreg free
  7445  0020D0  6A09               	clrf	?_Write_b_eep+1,c
  7446  0020D2  0E77               	movlw	119
  7447  0020D4  6E08               	movwf	?_Write_b_eep,c
  7448  0020D6  0E00               	movlw	0
  7449  0020D8  6A0A               	clrf	?_Write_b_eep+2,c
  7450  0020DA  EC7C  F020         	call	_Write_b_eep	;wreg free
  7451                           
  7452                           ;main.c: 564: (Busy_eep(), Write_b_eep(0x43 + 53,0));
  7453  0020DE  EC7F  F022         	call	_Busy_eep	;wreg free
  7454  0020E2  6A09               	clrf	?_Write_b_eep+1,c
  7455  0020E4  0E78               	movlw	120
  7456  0020E6  6E08               	movwf	?_Write_b_eep,c
  7457  0020E8  0E00               	movlw	0
  7458  0020EA  6A0A               	clrf	?_Write_b_eep+2,c
  7459  0020EC  EC7C  F020         	call	_Write_b_eep	;wreg free
  7460                           
  7461                           ;main.c: 565: (Busy_eep(), Write_b_eep(0x43 + 54,0));
  7462  0020F0  EC7F  F022         	call	_Busy_eep	;wreg free
  7463  0020F4  6A09               	clrf	?_Write_b_eep+1,c
  7464  0020F6  0E79               	movlw	121
  7465  0020F8  6E08               	movwf	?_Write_b_eep,c
  7466  0020FA  0E00               	movlw	0
  7467  0020FC  6A0A               	clrf	?_Write_b_eep+2,c
  7468  0020FE  EC7C  F020         	call	_Write_b_eep	;wreg free
  7469                           
  7470                           ;main.c: 566: (Busy_eep(), Write_b_eep(0x43 + 55,0));
  7471  002102  EC7F  F022         	call	_Busy_eep	;wreg free
  7472  002106  6A09               	clrf	?_Write_b_eep+1,c
  7473  002108  0E7A               	movlw	122
  7474  00210A  6E08               	movwf	?_Write_b_eep,c
  7475  00210C  0E00               	movlw	0
  7476  00210E  6A0A               	clrf	?_Write_b_eep+2,c
  7477  002110  EC7C  F020         	call	_Write_b_eep	;wreg free
  7478                           
  7479                           ;main.c: 567: (Busy_eep(), Write_b_eep(0x43 + 56,0));
  7480  002114  EC7F  F022         	call	_Busy_eep	;wreg free
  7481  002118  6A09               	clrf	?_Write_b_eep+1,c
  7482  00211A  0E7B               	movlw	123
  7483  00211C  6E08               	movwf	?_Write_b_eep,c
  7484  00211E  0E00               	movlw	0
  7485  002120  6A0A               	clrf	?_Write_b_eep+2,c
  7486  002122  EC7C  F020         	call	_Write_b_eep	;wreg free
  7487                           
  7488                           ;main.c: 568: (Busy_eep(), Write_b_eep(0x43 + 57,0));
  7489  002126  EC7F  F022         	call	_Busy_eep	;wreg free
  7490  00212A  6A09               	clrf	?_Write_b_eep+1,c
  7491  00212C  0E7C               	movlw	124
  7492  00212E  6E08               	movwf	?_Write_b_eep,c
  7493  002130  0E00               	movlw	0
  7494  002132  6A0A               	clrf	?_Write_b_eep+2,c
  7495  002134  EC7C  F020         	call	_Write_b_eep	;wreg free
  7496                           
  7497                           ;main.c: 569: (Busy_eep(), Write_b_eep(0x43 + 58,0));
  7498  002138  EC7F  F022         	call	_Busy_eep	;wreg free
  7499  00213C  6A09               	clrf	?_Write_b_eep+1,c
  7500  00213E  0E7D               	movlw	125
  7501  002140  6E08               	movwf	?_Write_b_eep,c
  7502  002142  0E00               	movlw	0
  7503  002144  6A0A               	clrf	?_Write_b_eep+2,c
  7504  002146  EC7C  F020         	call	_Write_b_eep	;wreg free
  7505                           
  7506                           ;main.c: 570: (Busy_eep(), Write_b_eep(0x43 + 59,0));
  7507  00214A  EC7F  F022         	call	_Busy_eep	;wreg free
  7508  00214E  6A09               	clrf	?_Write_b_eep+1,c
  7509  002150  0E7E               	movlw	126
  7510  002152  6E08               	movwf	?_Write_b_eep,c
  7511  002154  0E00               	movlw	0
  7512  002156  6A0A               	clrf	?_Write_b_eep+2,c
  7513  002158  EC7C  F020         	call	_Write_b_eep	;wreg free
  7514                           
  7515                           ;main.c: 571: (Busy_eep(), Write_b_eep(0x43 + 60,0));
  7516  00215C  EC7F  F022         	call	_Busy_eep	;wreg free
  7517  002160  6A09               	clrf	?_Write_b_eep+1,c
  7518  002162  0E7F               	movlw	127
  7519  002164  6E08               	movwf	?_Write_b_eep,c
  7520  002166  0E00               	movlw	0
  7521  002168  6A0A               	clrf	?_Write_b_eep+2,c
  7522  00216A  EC7C  F020         	call	_Write_b_eep	;wreg free
  7523                           
  7524                           ;main.c: 572: (Busy_eep(), Write_b_eep(0x43 + 61,0));
  7525  00216E  EC7F  F022         	call	_Busy_eep	;wreg free
  7526  002172  6A09               	clrf	?_Write_b_eep+1,c
  7527  002174  0E80               	movlw	128
  7528  002176  6E08               	movwf	?_Write_b_eep,c
  7529  002178  0E00               	movlw	0
  7530  00217A  6A0A               	clrf	?_Write_b_eep+2,c
  7531  00217C  EC7C  F020         	call	_Write_b_eep	;wreg free
  7532                           
  7533                           ;main.c: 573: (Busy_eep(), Write_b_eep(0x43 + 62,0));
  7534  002180  EC7F  F022         	call	_Busy_eep	;wreg free
  7535  002184  6A09               	clrf	?_Write_b_eep+1,c
  7536  002186  0E81               	movlw	129
  7537  002188  6E08               	movwf	?_Write_b_eep,c
  7538  00218A  0E00               	movlw	0
  7539  00218C  6A0A               	clrf	?_Write_b_eep+2,c
  7540  00218E  EC7C  F020         	call	_Write_b_eep	;wreg free
  7541                           
  7542                           ;main.c: 574: (Busy_eep(), Write_b_eep(0x43 + 63,0));
  7543  002192  EC7F  F022         	call	_Busy_eep	;wreg free
  7544  002196  6A09               	clrf	?_Write_b_eep+1,c
  7545  002198  0E82               	movlw	130
  7546  00219A  6E08               	movwf	?_Write_b_eep,c
  7547  00219C  0E00               	movlw	0
  7548  00219E  6A0A               	clrf	?_Write_b_eep+2,c
  7549  0021A0  EC7C  F020         	call	_Write_b_eep	;wreg free
  7550                           
  7551                           ;main.c: 575: (Busy_eep(), Write_b_eep(0x43 + 64,0));
  7552  0021A4  EC7F  F022         	call	_Busy_eep	;wreg free
  7553  0021A8  6A09               	clrf	?_Write_b_eep+1,c
  7554  0021AA  0E83               	movlw	131
  7555  0021AC  6E08               	movwf	?_Write_b_eep,c
  7556  0021AE  0E00               	movlw	0
  7557  0021B0  6A0A               	clrf	?_Write_b_eep+2,c
  7558  0021B2  EC7C  F020         	call	_Write_b_eep	;wreg free
  7559                           
  7560                           ;main.c: 576: (Busy_eep(), Write_b_eep(0x43 + 65,0));
  7561  0021B6  EC7F  F022         	call	_Busy_eep	;wreg free
  7562  0021BA  6A09               	clrf	?_Write_b_eep+1,c
  7563  0021BC  0E84               	movlw	132
  7564  0021BE  6E08               	movwf	?_Write_b_eep,c
  7565  0021C0  0E00               	movlw	0
  7566  0021C2  6A0A               	clrf	?_Write_b_eep+2,c
  7567  0021C4  EC7C  F020         	call	_Write_b_eep	;wreg free
  7568                           
  7569                           ;main.c: 580: for ( i = 0; i < 7; i++ ) {
  7570  0021C8  6A46               	clrf	init_app_eeprom@i,c
  7571  0021CA                     l187:
  7572                           
  7573                           ;main.c: 581: for ( j = 0; j < 8; j++ ) {
  7574  0021CA  6A47               	clrf	init_app_eeprom@j,c
  7575  0021CC                     l7897:
  7576                           
  7577                           ;main.c: 582: (Busy_eep(), Write_b_eep(0x43 + 72 + i * 8 + j,0));
  7578  0021CC  EC7F  F022         	call	_Busy_eep	;wreg free
  7579  0021D0  5047               	movf	init_app_eeprom@j,w,c
  7580  0021D2  C046  F044         	movff	init_app_eeprom@i,??_init_app_eeprom
  7581  0021D6  6A45               	clrf	(??_init_app_eeprom+1)& (0+255),c
  7582  0021D8  90D8               	bcf	status,0,c
  7583  0021DA  3644               	rlcf	??_init_app_eeprom,f,c
  7584  0021DC  3645               	rlcf	??_init_app_eeprom+1,f,c
  7585  0021DE  90D8               	bcf	status,0,c
  7586  0021E0  3644               	rlcf	??_init_app_eeprom,f,c
  7587  0021E2  3645               	rlcf	??_init_app_eeprom+1,f,c
  7588  0021E4  90D8               	bcf	status,0,c
  7589  0021E6  3644               	rlcf	??_init_app_eeprom,f,c
  7590  0021E8  3645               	rlcf	??_init_app_eeprom+1,f,c
  7591  0021EA  2644               	addwf	??_init_app_eeprom,f,c
  7592  0021EC  0E00               	movlw	0
  7593  0021EE  2245               	addwfc	??_init_app_eeprom+1,f,c
  7594  0021F0  0E8B               	movlw	139
  7595  0021F2  2444               	addwf	??_init_app_eeprom,w,c
  7596  0021F4  6E08               	movwf	?_Write_b_eep,c
  7597  0021F6  0E00               	movlw	0
  7598  0021F8  2045               	addwfc	??_init_app_eeprom+1,w,c
  7599  0021FA  6E09               	movwf	?_Write_b_eep+1,c
  7600  0021FC  0E00               	movlw	0
  7601  0021FE  6A0A               	clrf	?_Write_b_eep+2,c
  7602  002200  EC7C  F020         	call	_Write_b_eep	;wreg free
  7603  002204  2A47               	incf	init_app_eeprom@j,f,c
  7604  002206  0E07               	movlw	7
  7605  002208  6447               	cpfsgt	init_app_eeprom@j,c
  7606  00220A  D7E0               	goto	l7897
  7607  00220C  2A46               	incf	init_app_eeprom@i,f,c
  7608  00220E  0E06               	movlw	6
  7609  002210  6446               	cpfsgt	init_app_eeprom@i,c
  7610  002212  D7DB               	goto	l187
  7611                           
  7612                           ;main.c: 583: }
  7613                           ;main.c: 584: }
  7614                           ;main.c: 587: calculateSetFilterMask();
  7615  002214  EFA4  F00C         	goto	_calculateSetFilterMask	;wreg free
  7616  002218                     __end_of_init_app_eeprom:
  7617                           	opt stack 0
  7618                           tblptru	equ	0xFF8
  7619                           prodh	equ	0xFF4
  7620                           prodl	equ	0xFF3
  7621                           postinc0	equ	0xFEE
  7622                           wreg	equ	0xFE8
  7623                           indf2	equ	0xFDF
  7624                           postinc2	equ	0xFDE
  7625                           postdec2	equ	0xFDD
  7626                           fsr2h	equ	0xFDA
  7627                           fsr2l	equ	0xFD9
  7628                           status	equ	0xFD8
  7629                           
  7630 ;; *************** function _vscp_setUserID *****************
  7631 ;; Defined at:
  7632 ;;		line 2380 in file "../main.c"
  7633 ;; Parameters:    Size  Location     Type
  7634 ;;  idx             1    wreg     unsigned char 
  7635 ;;  data            1   11[COMRAM] unsigned char 
  7636 ;; Auto vars:     Size  Location     Type
  7637 ;;  idx             1   12[COMRAM] unsigned char 
  7638 ;; Return value:  Size  Location     Type
  7639 ;;		None               void
  7640 ;; Registers used:
  7641 ;;		wreg, status,2, status,0, cstack
  7642 ;; Tracked objects:
  7643 ;;		On entry : F/0
  7644 ;;		On exit  : 0/0
  7645 ;;		Unchanged: 0/0
  7646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7647 ;;      Params:         1       0       0       0       0       0       0
  7648 ;;      Locals:         1       0       0       0       0       0       0
  7649 ;;      Temps:          0       0       0       0       0       0       0
  7650 ;;      Totals:         2       0       0       0       0       0       0
  7651 ;;Total ram usage:        2 bytes
  7652 ;; Hardware stack levels used:    1
  7653 ;; Hardware stack levels required when called:    3
  7654 ;; This function calls:
  7655 ;;		_Busy_eep
  7656 ;;		_Write_b_eep
  7657 ;; This function is called by:
  7658 ;;		_vscp_writeStdReg
  7659 ;; This function uses a non-reentrant model
  7660 ;;
  7661                           
  7662                           	psect	text21
  7663  004384                     __ptext21:
  7664                           	opt stack 0
  7665  004384                     _vscp_setUserID:
  7666                           	opt stack 25
  7667                           
  7668                           ;incstack = 0
  7669                           ;incstack = 0
  7670                           ;vscp_setUserID@idx stored from wreg
  7671  004384  CFE8 F00D          	movff	wreg,vscp_setUserID@idx
  7672                           
  7673                           ; BSR set to: 0
  7674                           ;main.c: 2381: (Busy_eep(), Write_b_eep(idx + 0x06,data));
  7675  004388  EC7F  F022         	call	_Busy_eep	;wreg free
  7676  00438C  0E06               	movlw	6
  7677  00438E  240D               	addwf	vscp_setUserID@idx,w,c
  7678  004390  6E08               	movwf	?_Write_b_eep,c
  7679  004392  6A09               	clrf	?_Write_b_eep+1,c
  7680  004394  0E00               	movlw	0
  7681  004396  2209               	addwfc	?_Write_b_eep+1,f,c
  7682  004398  C00C  F00A         	movff	vscp_setUserID@data,?_Write_b_eep+2
  7683  00439C  EF7C  F020         	goto	_Write_b_eep	;wreg free
  7684  0043A0                     __end_of_vscp_setUserID:
  7685                           	opt stack 0
  7686                           tblptru	equ	0xFF8
  7687                           prodh	equ	0xFF4
  7688                           prodl	equ	0xFF3
  7689                           postinc0	equ	0xFEE
  7690                           wreg	equ	0xFE8
  7691                           indf2	equ	0xFDF
  7692                           postinc2	equ	0xFDE
  7693                           postdec2	equ	0xFDD
  7694                           fsr2h	equ	0xFDA
  7695                           fsr2l	equ	0xFD9
  7696                           status	equ	0xFD8
  7697                           
  7698 ;; *************** function _vscp_setManufacturerId *****************
  7699 ;; Defined at:
  7700 ;;		line 823 in file "../main.c"
  7701 ;; Parameters:    Size  Location     Type
  7702 ;;  idx             1    wreg     unsigned char 
  7703 ;;  data            1   11[COMRAM] unsigned char 
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;  idx             1   12[COMRAM] unsigned char 
  7706 ;; Return value:  Size  Location     Type
  7707 ;;		None               void
  7708 ;; Registers used:
  7709 ;;		wreg, status,2, status,0, cstack
  7710 ;; Tracked objects:
  7711 ;;		On entry : F/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7715 ;;      Params:         1       0       0       0       0       0       0
  7716 ;;      Locals:         1       0       0       0       0       0       0
  7717 ;;      Temps:          0       0       0       0       0       0       0
  7718 ;;      Totals:         2       0       0       0       0       0       0
  7719 ;;Total ram usage:        2 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; Hardware stack levels required when called:    3
  7722 ;; This function calls:
  7723 ;;		_Busy_eep
  7724 ;;		_Write_b_eep
  7725 ;; This function is called by:
  7726 ;;		_vscp_writeStdReg
  7727 ;; This function uses a non-reentrant model
  7728 ;;
  7729                           
  7730                           	psect	text22
  7731  00422A                     __ptext22:
  7732                           	opt stack 0
  7733  00422A                     _vscp_setManufacturerId:
  7734                           	opt stack 25
  7735                           
  7736                           ;incstack = 0
  7737                           ;incstack = 0
  7738                           ;vscp_setManufacturerId@idx stored from wreg
  7739  00422A  CFE8 F00D          	movff	wreg,vscp_setManufacturerId@idx
  7740                           
  7741                           ; BSR set to: 0
  7742                           ;main.c: 824: if ( idx>7 ) return;
  7743  00422E  0E07               	movlw	7
  7744  004230  640D               	cpfsgt	vscp_setManufacturerId@idx,c
  7745  004232  D001               	goto	l6025
  7746  004234  D00C               	goto	l253
  7747  004236                     l6025:
  7748                           
  7749                           ; BSR set to: 0
  7750                           ;main.c: 825: (Busy_eep(), Write_b_eep(0x0B + idx,data));
  7751  004236  EC7F  F022         	call	_Busy_eep	;wreg free
  7752  00423A  0E0B               	movlw	11
  7753  00423C  240D               	addwf	vscp_setManufacturerId@idx,w,c
  7754  00423E  6E08               	movwf	?_Write_b_eep,c
  7755  004240  6A09               	clrf	?_Write_b_eep+1,c
  7756  004242  0E00               	movlw	0
  7757  004244  2209               	addwfc	?_Write_b_eep+1,f,c
  7758  004246  C00C  F00A         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  7759  00424A  EC7C  F020         	call	_Write_b_eep	;wreg free
  7760  00424E                     l253:
  7761  00424E  0012               	return	
  7762  004250                     __end_of_vscp_setManufacturerId:
  7763                           	opt stack 0
  7764                           tblptru	equ	0xFF8
  7765                           prodh	equ	0xFF4
  7766                           prodl	equ	0xFF3
  7767                           postinc0	equ	0xFEE
  7768                           wreg	equ	0xFE8
  7769                           indf2	equ	0xFDF
  7770                           postinc2	equ	0xFDE
  7771                           postdec2	equ	0xFDD
  7772                           fsr2h	equ	0xFDA
  7773                           fsr2l	equ	0xFD9
  7774                           status	equ	0xFD8
  7775                           
  7776 ;; *************** function _vscp_setGUID *****************
  7777 ;; Defined at:
  7778 ;;		line 811 in file "../main.c"
  7779 ;; Parameters:    Size  Location     Type
  7780 ;;  idx             1    wreg     unsigned char 
  7781 ;;  data            1   11[COMRAM] unsigned char 
  7782 ;; Auto vars:     Size  Location     Type
  7783 ;;  idx             1   12[COMRAM] unsigned char 
  7784 ;; Return value:  Size  Location     Type
  7785 ;;		None               void
  7786 ;; Registers used:
  7787 ;;		wreg, status,2, status,0, cstack
  7788 ;; Tracked objects:
  7789 ;;		On entry : F/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7793 ;;      Params:         1       0       0       0       0       0       0
  7794 ;;      Locals:         1       0       0       0       0       0       0
  7795 ;;      Temps:          0       0       0       0       0       0       0
  7796 ;;      Totals:         2       0       0       0       0       0       0
  7797 ;;Total ram usage:        2 bytes
  7798 ;; Hardware stack levels used:    1
  7799 ;; Hardware stack levels required when called:    3
  7800 ;; This function calls:
  7801 ;;		_Busy_eep
  7802 ;;		_Write_b_eep
  7803 ;; This function is called by:
  7804 ;;		_vscp_writeStdReg
  7805 ;; This function uses a non-reentrant model
  7806 ;;
  7807                           
  7808                           	psect	text23
  7809  004250                     __ptext23:
  7810                           	opt stack 0
  7811  004250                     _vscp_setGUID:
  7812                           	opt stack 25
  7813                           
  7814                           ;incstack = 0
  7815                           ;incstack = 0
  7816                           ;vscp_setGUID@idx stored from wreg
  7817  004250  CFE8 F00D          	movff	wreg,vscp_setGUID@idx
  7818                           
  7819                           ; BSR set to: 0
  7820                           ;main.c: 812: if ( idx>15 ) return;
  7821  004254  0E0F               	movlw	15
  7822  004256  640D               	cpfsgt	vscp_setGUID@idx,c
  7823  004258  D001               	goto	l6017
  7824  00425A  D00C               	goto	l249
  7825  00425C                     l6017:
  7826                           
  7827                           ; BSR set to: 0
  7828                           ;main.c: 813: (Busy_eep(), Write_b_eep(0x13 + idx,data));
  7829  00425C  EC7F  F022         	call	_Busy_eep	;wreg free
  7830  004260  0E13               	movlw	19
  7831  004262  240D               	addwf	vscp_setGUID@idx,w,c
  7832  004264  6E08               	movwf	?_Write_b_eep,c
  7833  004266  6A09               	clrf	?_Write_b_eep+1,c
  7834  004268  0E00               	movlw	0
  7835  00426A  2209               	addwfc	?_Write_b_eep+1,f,c
  7836  00426C  C00C  F00A         	movff	vscp_setGUID@data,?_Write_b_eep+2
  7837  004270  EC7C  F020         	call	_Write_b_eep	;wreg free
  7838  004274                     l249:
  7839  004274  0012               	return	
  7840  004276                     __end_of_vscp_setGUID:
  7841                           	opt stack 0
  7842                           tblptru	equ	0xFF8
  7843                           prodh	equ	0xFF4
  7844                           prodl	equ	0xFF3
  7845                           postinc0	equ	0xFEE
  7846                           wreg	equ	0xFE8
  7847                           indf2	equ	0xFDF
  7848                           postinc2	equ	0xFDE
  7849                           postdec2	equ	0xFDD
  7850                           fsr2h	equ	0xFDA
  7851                           fsr2l	equ	0xFD9
  7852                           status	equ	0xFD8
  7853                           
  7854 ;; *************** function _vscp_writeAppReg *****************
  7855 ;; Defined at:
  7856 ;;		line 975 in file "../main.c"
  7857 ;; Parameters:    Size  Location     Type
  7858 ;;  reg             1    wreg     unsigned char 
  7859 ;;  val             1   80[COMRAM] unsigned char 
  7860 ;; Auto vars:     Size  Location     Type
  7861 ;;  reg             1   29[BANK0 ] unsigned char 
  7862 ;;  val             1   26[BANK0 ] unsigned char 
  7863 ;;  bOn             1   28[BANK0 ] enum E15660
  7864 ;;  rv              1   27[BANK0 ] unsigned char 
  7865 ;;  bInfoEvent      1   25[BANK0 ] enum E15660
  7866 ;; Return value:  Size  Location     Type
  7867 ;;                  1    wreg      unsigned char 
  7868 ;; Registers used:
  7869 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7870 ;; Tracked objects:
  7871 ;;		On entry : F/0
  7872 ;;		On exit  : F/0
  7873 ;;		Unchanged: 0/0
  7874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7875 ;;      Params:         1       0       0       0       0       0       0
  7876 ;;      Locals:         0       5       0       0       0       0       0
  7877 ;;      Temps:          0       3       0       0       0       0       0
  7878 ;;      Totals:         1       8       0       0       0       0       0
  7879 ;;Total ram usage:        9 bytes
  7880 ;; Hardware stack levels used:    1
  7881 ;; Hardware stack levels required when called:    7
  7882 ;; This function calls:
  7883 ;;		_calculateSetFilterMask
  7884 ;;		_Busy_eep
  7885 ;;		_Write_b_eep
  7886 ;;		_Read_b_eep
  7887 ;;		_SendInformationEvent
  7888 ;; This function is called by:
  7889 ;;		_vscp_writeRegister
  7890 ;;		_vscp_handleProtocolEvent
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           	psect	text24
  7895  0008E0                     __ptext24:
  7896                           	opt stack 0
  7897  0008E0                     _vscp_writeAppReg:
  7898                           	opt stack 21
  7899                           
  7900                           ;incstack = 0
  7901                           ;incstack = 0
  7902                           ;vscp_writeAppReg@reg stored from wreg
  7903  0008E0  CFE8 F0CF          	movff	wreg,vscp_writeAppReg@reg
  7904                           
  7905                           ; BSR set to: 0
  7906                           ;main.c: 976: uint8_t rv;
  7907                           ;main.c: 977: BOOL bInfoEvent = 0;
  7908  0008E4  6BCB               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7909                           
  7910                           ;main.c: 978: BOOL bOn = 0;
  7911  0008E6  6BCE               	clrf	vscp_writeAppReg@bOn& (0+255),b
  7912                           
  7913                           ; BSR set to: 0
  7914                           ;main.c: 980: rv = ~val;
  7915  0008E8  1C51               	comf	vscp_writeAppReg@val,w,c
  7916  0008EA  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  7917                           
  7918                           ; BSR set to: 0
  7919                           ;main.c: 983: if ( reg == 0 ) {
  7920  0008EC  67CF               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  7921  0008EE  D010               	goto	l10677
  7922                           
  7923                           ; BSR set to: 0
  7924                           ;main.c: 984: (Busy_eep(), Write_b_eep(0x43 + 0,val));
  7925  0008F0  EC7F  F022         	call	_Busy_eep	;wreg free
  7926  0008F4  6A09               	clrf	?_Write_b_eep+1,c
  7927  0008F6  0E43               	movlw	67
  7928  0008F8  6E08               	movwf	?_Write_b_eep,c
  7929  0008FA  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  7930  0008FE  EC7C  F020         	call	_Write_b_eep	;wreg free
  7931                           
  7932                           ;main.c: 985: rv = Read_b_eep(0x43 + 0);
  7933  000902  6A09               	clrf	?_Read_b_eep+1,c
  7934  000904  0E43               	movlw	67
  7935  000906  6E08               	movwf	?_Read_b_eep,c
  7936  000908  EC4B  F022         	call	_Read_b_eep	;wreg free
  7937  00090C  EF33  F009         	goto	L27
  7938  000910                     l10677:
  7939                           
  7940                           ; BSR set to: 0
  7941                           ;main.c: 987: else if ( reg == 1 ) {
  7942  000910  05CF               	decf	vscp_writeAppReg@reg& (0+255),w,b
  7943  000912  E110               	bnz	l10685
  7944                           
  7945                           ; BSR set to: 0
  7946                           ;main.c: 989: (Busy_eep(), Write_b_eep(0x43 + 1,val));
  7947  000914  EC7F  F022         	call	_Busy_eep	;wreg free
  7948  000918  6A09               	clrf	?_Write_b_eep+1,c
  7949  00091A  0E44               	movlw	68
  7950  00091C  6E08               	movwf	?_Write_b_eep,c
  7951  00091E  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  7952  000922  EC7C  F020         	call	_Write_b_eep	;wreg free
  7953                           
  7954                           ;main.c: 990: rv = Read_b_eep(0x43 + 1);
  7955  000926  6A09               	clrf	?_Read_b_eep+1,c
  7956  000928  0E44               	movlw	68
  7957  00092A  6E08               	movwf	?_Read_b_eep,c
  7958  00092C  EC4B  F022         	call	_Read_b_eep	;wreg free
  7959  000930  EF33  F009         	goto	L27
  7960  000934                     l10685:
  7961                           
  7962                           ; BSR set to: 0
  7963                           ;main.c: 993: else if ( (reg >= 2) && (reg <= 9) ) {
  7964  000934  0E01               	movlw	1
  7965  000936  65CF               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  7966  000938  D185               	goto	l10837
  7967                           
  7968                           ; BSR set to: 0
  7969  00093A  0E0A               	movlw	10
  7970  00093C  61CF               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  7971  00093E  D182               	goto	l10837
  7972                           
  7973                           ; BSR set to: 0
  7974                           ;main.c: 995: if ( Read_b_eep(0x43 + 10 + reg - 2) &
  7975                           ;main.c: 997: 0x80 ) {
  7976  000940  0E4B               	movlw	75
  7977  000942  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  7978  000944  6E08               	movwf	?_Read_b_eep,c
  7979  000946  6A09               	clrf	?_Read_b_eep+1,c
  7980  000948  0E00               	movlw	0
  7981  00094A  2209               	addwfc	?_Read_b_eep+1,f,c
  7982  00094C  EC4B  F022         	call	_Read_b_eep	;wreg free
  7983  000950  0100               	movlb	0	; () banked
  7984  000952  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  7985  000954  BFC8               	btfsc	??_vscp_writeAppReg& (0+255),7,b
  7986  000956  D161               	goto	l10835
  7987  000958  EF4C  F009         	goto	l11097
  7988  00095C                     l10693:
  7989                           
  7990                           ; BSR set to: 0
  7991                           ;main.c: 1004: bInfoEvent = 1;
  7992  00095C  0E01               	movlw	1
  7993  00095E  6FCB               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7994                           
  7995                           ; BSR set to: 0
  7996                           ;main.c: 1006: if ( 1 == val ) {
  7997  000960  0451               	decf	vscp_writeAppReg@val,w,c
  7998  000962  E128               	bnz	l306
  7999                           
  8000                           ; BSR set to: 0
  8001                           ;main.c: 1008: LATBbits.LATB4 = 1;
  8002  000964  888A               	bsf	3978,4,c	;volatile
  8003                           
  8004                           ; BSR set to: 0
  8005                           ;main.c: 1009: rv = LATBbits.LATB4;
  8006  000966  0E00               	movlw	0
  8007  000968  B88A               	btfsc	3978,4,c	;volatile
  8008  00096A  0E01               	movlw	1
  8009  00096C  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8010                           
  8011                           ; BSR set to: 0
  8012                           ;main.c: 1010: bOn = 1;
  8013  00096E  0E01               	movlw	1
  8014  000970  6FCE               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8015                           
  8016                           ; BSR set to: 0
  8017                           ;main.c: 1013: if ( Read_b_eep(0x43 + 10) & 0x04 ) {
  8018  000972  6A09               	clrf	?_Read_b_eep+1,c
  8019  000974  0E4D               	movlw	77
  8020  000976  6E08               	movwf	?_Read_b_eep,c
  8021  000978  EC4B  F022         	call	_Read_b_eep	;wreg free
  8022  00097C  0100               	movlb	0	; () banked
  8023  00097E  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8024  000980  A5C8               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8025  000982  EF4C  F009         	goto	l11097
  8026  000986                     l10705:
  8027                           
  8028                           ; BSR set to: 0
  8029                           ;main.c: 1014: relay_protection_timer[ 0 ] =
  8030                           ;main.c: 1015: Read_b_eep(0x43 + 34) * 256 +
  8031                           ;main.c: 1016: Read_b_eep(0x43 + 35);
  8032  000986  6A09               	clrf	?_Read_b_eep+1,c
  8033  000988  0E66               	movlw	102
  8034  00098A  6E08               	movwf	?_Read_b_eep,c
  8035  00098C  EC4B  F022         	call	_Read_b_eep	;wreg free
  8036  000990  0100               	movlb	0	; () banked
  8037  000992  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8038  000994  6A09               	clrf	?_Read_b_eep+1,c
  8039  000996  0E65               	movlw	101
  8040  000998  6E08               	movwf	?_Read_b_eep,c
  8041  00099A  EC4B  F022         	call	_Read_b_eep	;wreg free
  8042  00099E  0100               	movlb	0	; () banked
  8043  0009A0  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8044  0009A2  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8045  0009A4  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  8046  0009A6  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8047  0009A8  6F60               	movwf	_relay_protection_timer& (0+255),b
  8048  0009AA  0E00               	movlw	0
  8049  0009AC  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8050  0009AE  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  8051  0009B0  EF4C  F009         	goto	l11097
  8052  0009B4                     l306:
  8053                           
  8054                           ; BSR set to: 0
  8055                           ;main.c: 1020: else if (0 == val) {
  8056  0009B4  6651               	tstfsz	vscp_writeAppReg@val,c
  8057  0009B6  EF4C  F009         	goto	l11097
  8058                           
  8059                           ; BSR set to: 0
  8060                           ;main.c: 1021: LATBbits.LATB4 = 0;
  8061  0009BA  988A               	bcf	3978,4,c	;volatile
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;main.c: 1022: rv = LATBbits.LATB4;
  8065  0009BC  0E00               	movlw	0
  8066  0009BE  B88A               	btfsc	3978,4,c	;volatile
  8067  0009C0  0E01               	movlw	1
  8068  0009C2  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8069  0009C4                     l10711:
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;main.c: 1023: bOn = 0;
  8073  0009C4  6BCE               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8074  0009C6  EF4C  F009         	goto	l11097
  8075  0009CA                     l10713:
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;main.c: 1030: bInfoEvent = 1;
  8079  0009CA  0E01               	movlw	1
  8080  0009CC  6FCB               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8081                           
  8082                           ; BSR set to: 0
  8083                           ;main.c: 1032: if (1 == val) {
  8084  0009CE  0451               	decf	vscp_writeAppReg@val,w,c
  8085  0009D0  E11E               	bnz	l312
  8086                           
  8087                           ; BSR set to: 0
  8088                           ;main.c: 1034: LATBbits.LATB1 = 1;
  8089  0009D2  828A               	bsf	3978,1,c	;volatile
  8090                           
  8091                           ; BSR set to: 0
  8092                           ;main.c: 1035: rv = LATBbits.LATB1;
  8093  0009D4  0E00               	movlw	0
  8094  0009D6  B28A               	btfsc	3978,1,c	;volatile
  8095  0009D8  0E01               	movlw	1
  8096  0009DA  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8097                           
  8098                           ; BSR set to: 0
  8099                           ;main.c: 1036: bOn = 1;
  8100  0009DC  0E01               	movlw	1
  8101  0009DE  6FCE               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8102                           
  8103                           ; BSR set to: 0
  8104                           ;main.c: 1038: if (Read_b_eep(0x43 + 11) & 0x04) {
  8105  0009E0  6A09               	clrf	?_Read_b_eep+1,c
  8106  0009E2  0E4E               	movlw	78
  8107  0009E4  6E08               	movwf	?_Read_b_eep,c
  8108  0009E6  EC4B  F022         	call	_Read_b_eep	;wreg free
  8109  0009EA  0100               	movlb	0	; () banked
  8110  0009EC  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8111  0009EE  A5C8               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8112  0009F0  EF4C  F009         	goto	l11097
  8113  0009F4                     l10725:
  8114                           
  8115                           ; BSR set to: 0
  8116                           ;main.c: 1039: relay_protection_timer[ 1 ] =
  8117                           ;main.c: 1040: Read_b_eep(0x43 + 36) * 256 +
  8118                           ;main.c: 1041: Read_b_eep(0x43 + 37);
  8119  0009F4  6A09               	clrf	?_Read_b_eep+1,c
  8120  0009F6  0E68               	movlw	104
  8121  0009F8  6E08               	movwf	?_Read_b_eep,c
  8122  0009FA  EC4B  F022         	call	_Read_b_eep	;wreg free
  8123  0009FE  0100               	movlb	0	; () banked
  8124  000A00  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8125  000A02  6A09               	clrf	?_Read_b_eep+1,c
  8126  000A04  0E67               	movlw	103
  8127  000A06  6E08               	movwf	?_Read_b_eep,c
  8128  000A08  EC4B  F022         	call	_Read_b_eep	;wreg free
  8129  000A0C  D19F               	goto	L28
  8130  000A0E                     l312:
  8131                           
  8132                           ; BSR set to: 0
  8133                           ;main.c: 1045: else if (0 == val) {
  8134  000A0E  6651               	tstfsz	vscp_writeAppReg@val,c
  8135  000A10  EF4C  F009         	goto	l11097
  8136                           
  8137                           ; BSR set to: 0
  8138                           ;main.c: 1046: LATBbits.LATB1 = 0;
  8139  000A14  928A               	bcf	3978,1,c	;volatile
  8140                           
  8141                           ; BSR set to: 0
  8142                           ;main.c: 1047: rv = LATBbits.LATB1;
  8143  000A16  0E00               	movlw	0
  8144  000A18  B28A               	btfsc	3978,1,c	;volatile
  8145  000A1A  0E01               	movlw	1
  8146  000A1C  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8147  000A1E  D7D2               	goto	l10711
  8148  000A20                     l10733:
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;main.c: 1055: bInfoEvent = 1;
  8152  000A20  0E01               	movlw	1
  8153  000A22  6FCB               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8154                           
  8155                           ; BSR set to: 0
  8156                           ;main.c: 1057: if (1 == val) {
  8157  000A24  0451               	decf	vscp_writeAppReg@val,w,c
  8158  000A26  E128               	bnz	l317
  8159                           
  8160                           ; BSR set to: 0
  8161                           ;main.c: 1059: LATBbits.LATB0 = 1;
  8162  000A28  808A               	bsf	3978,0,c	;volatile
  8163                           
  8164                           ; BSR set to: 0
  8165                           ;main.c: 1060: rv = LATBbits.LATB0;
  8166  000A2A  0E00               	movlw	0
  8167  000A2C  B08A               	btfsc	3978,0,c	;volatile
  8168  000A2E  0E01               	movlw	1
  8169  000A30  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;main.c: 1061: bOn = 1;
  8173  000A32  0E01               	movlw	1
  8174  000A34  6FCE               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8175                           
  8176                           ; BSR set to: 0
  8177                           ;main.c: 1063: if ( Read_b_eep(0x43 + 12) & 0x04) {
  8178  000A36  6A09               	clrf	?_Read_b_eep+1,c
  8179  000A38  0E4F               	movlw	79
  8180  000A3A  6E08               	movwf	?_Read_b_eep,c
  8181  000A3C  EC4B  F022         	call	_Read_b_eep	;wreg free
  8182  000A40  0100               	movlb	0	; () banked
  8183  000A42  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8184  000A44  A5C8               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8185  000A46  EF4C  F009         	goto	l11097
  8186  000A4A                     l10745:
  8187                           
  8188                           ; BSR set to: 0
  8189                           ;main.c: 1064: relay_protection_timer[ 2 ] =
  8190                           ;main.c: 1065: Read_b_eep(0x43 + 38) * 256 +
  8191                           ;main.c: 1066: Read_b_eep(0x43 + 39);
  8192  000A4A  6A09               	clrf	?_Read_b_eep+1,c
  8193  000A4C  0E6A               	movlw	106
  8194  000A4E  6E08               	movwf	?_Read_b_eep,c
  8195  000A50  EC4B  F022         	call	_Read_b_eep	;wreg free
  8196  000A54  0100               	movlb	0	; () banked
  8197  000A56  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8198  000A58  6A09               	clrf	?_Read_b_eep+1,c
  8199  000A5A  0E69               	movlw	105
  8200  000A5C  6E08               	movwf	?_Read_b_eep,c
  8201  000A5E  EC4B  F022         	call	_Read_b_eep	;wreg free
  8202  000A62  0100               	movlb	0	; () banked
  8203  000A64  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8204  000A66  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8205  000A68  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  8206  000A6A  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8207  000A6C  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  8208  000A6E  0E00               	movlw	0
  8209  000A70  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8210  000A72  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  8211  000A74  EF4C  F009         	goto	l11097
  8212  000A78                     l317:
  8213                           
  8214                           ; BSR set to: 0
  8215                           ;main.c: 1070: else if (0 == val) {
  8216  000A78  6651               	tstfsz	vscp_writeAppReg@val,c
  8217  000A7A  EF4C  F009         	goto	l11097
  8218                           
  8219                           ; BSR set to: 0
  8220                           ;main.c: 1071: LATBbits.LATB0 = 0;
  8221  000A7E  908A               	bcf	3978,0,c	;volatile
  8222                           
  8223                           ; BSR set to: 0
  8224                           ;main.c: 1072: rv = LATBbits.LATB0;
  8225  000A80  0E00               	movlw	0
  8226  000A82  B08A               	btfsc	3978,0,c	;volatile
  8227  000A84  0E01               	movlw	1
  8228  000A86  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8229  000A88  D79D               	goto	l10711
  8230  000A8A                     l10753:
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;main.c: 1081: bInfoEvent = 1;
  8234  000A8A  0E01               	movlw	1
  8235  000A8C  6FCB               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8236                           
  8237                           ; BSR set to: 0
  8238                           ;main.c: 1083: if (1 == val) {
  8239  000A8E  0451               	decf	vscp_writeAppReg@val,w,c
  8240  000A90  E126               	bnz	l322
  8241                           
  8242                           ; BSR set to: 0
  8243                           ;main.c: 1085: LATCbits.LATC7 = 1;
  8244  000A92  8E8B               	bsf	3979,7,c	;volatile
  8245                           
  8246                           ; BSR set to: 0
  8247                           ;main.c: 1086: rv = LATCbits.LATC7;
  8248  000A94  0E00               	movlw	0
  8249  000A96  BE8B               	btfsc	3979,7,c	;volatile
  8250  000A98  0E01               	movlw	1
  8251  000A9A  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8252                           
  8253                           ; BSR set to: 0
  8254                           ;main.c: 1087: bOn = 1;
  8255  000A9C  0E01               	movlw	1
  8256  000A9E  6FCE               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8257                           
  8258                           ; BSR set to: 0
  8259                           ;main.c: 1089: if (Read_b_eep(0x43 + 13) & 0x04) {
  8260  000AA0  6A09               	clrf	?_Read_b_eep+1,c
  8261  000AA2  0E50               	movlw	80
  8262  000AA4  6E08               	movwf	?_Read_b_eep,c
  8263  000AA6  EC4B  F022         	call	_Read_b_eep	;wreg free
  8264  000AAA  0100               	movlb	0	; () banked
  8265  000AAC  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8266  000AAE  A5C8               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8267  000AB0  D3F3               	goto	l11097
  8268  000AB2                     l10765:
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;main.c: 1090: relay_protection_timer[ 3 ] =
  8272                           ;main.c: 1091: Read_b_eep(0x43 + 40) * 256 +
  8273                           ;main.c: 1092: Read_b_eep(0x43 + 41);
  8274  000AB2  6A09               	clrf	?_Read_b_eep+1,c
  8275  000AB4  0E6C               	movlw	108
  8276  000AB6  6E08               	movwf	?_Read_b_eep,c
  8277  000AB8  EC4B  F022         	call	_Read_b_eep	;wreg free
  8278  000ABC  0100               	movlb	0	; () banked
  8279  000ABE  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8280  000AC0  6A09               	clrf	?_Read_b_eep+1,c
  8281  000AC2  0E6B               	movlw	107
  8282  000AC4  6E08               	movwf	?_Read_b_eep,c
  8283  000AC6  EC4B  F022         	call	_Read_b_eep	;wreg free
  8284  000ACA  0100               	movlb	0	; () banked
  8285  000ACC  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8286  000ACE  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8287  000AD0  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  8288  000AD2  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8289  000AD4  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  8290  000AD6  0E00               	movlw	0
  8291  000AD8  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8292  000ADA  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  8293  000ADC  D3DD               	goto	l11097
  8294  000ADE                     l322:
  8295                           
  8296                           ; BSR set to: 0
  8297                           ;main.c: 1096: else if (0 == val) {
  8298  000ADE  6651               	tstfsz	vscp_writeAppReg@val,c
  8299  000AE0  D3DB               	goto	l11097
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;main.c: 1097: LATCbits.LATC7 = 0;
  8303  000AE2  9E8B               	bcf	3979,7,c	;volatile
  8304                           
  8305                           ; BSR set to: 0
  8306                           ;main.c: 1098: rv = LATCbits.LATC7;
  8307  000AE4  0E00               	movlw	0
  8308  000AE6  BE8B               	btfsc	3979,7,c	;volatile
  8309  000AE8  0E01               	movlw	1
  8310  000AEA  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8311  000AEC  D76B               	goto	l10711
  8312  000AEE                     l10773:
  8313                           
  8314                           ; BSR set to: 0
  8315                           ;main.c: 1107: bInfoEvent = 1;
  8316  000AEE  0E01               	movlw	1
  8317  000AF0  6FCB               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8318                           
  8319                           ; BSR set to: 0
  8320                           ;main.c: 1109: if (1 == val) {
  8321  000AF2  0451               	decf	vscp_writeAppReg@val,w,c
  8322  000AF4  E126               	bnz	l327
  8323                           
  8324                           ; BSR set to: 0
  8325                           ;main.c: 1111: LATCbits.LATC6 = 1;
  8326  000AF6  8C8B               	bsf	3979,6,c	;volatile
  8327                           
  8328                           ; BSR set to: 0
  8329                           ;main.c: 1112: rv = LATCbits.LATC6;
  8330  000AF8  0E00               	movlw	0
  8331  000AFA  BC8B               	btfsc	3979,6,c	;volatile
  8332  000AFC  0E01               	movlw	1
  8333  000AFE  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8334                           
  8335                           ; BSR set to: 0
  8336                           ;main.c: 1113: bOn = 1;
  8337  000B00  0E01               	movlw	1
  8338  000B02  6FCE               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8339                           
  8340                           ; BSR set to: 0
  8341                           ;main.c: 1115: if (Read_b_eep(0x43 + 14) & 0x04) {
  8342  000B04  6A09               	clrf	?_Read_b_eep+1,c
  8343  000B06  0E51               	movlw	81
  8344  000B08  6E08               	movwf	?_Read_b_eep,c
  8345  000B0A  EC4B  F022         	call	_Read_b_eep	;wreg free
  8346  000B0E  0100               	movlb	0	; () banked
  8347  000B10  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8348  000B12  A5C8               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8349  000B14  D3C1               	goto	l11097
  8350  000B16                     l10785:
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;main.c: 1116: relay_protection_timer[ 4 ] =
  8354                           ;main.c: 1117: Read_b_eep(0x43 + 42) * 256 +
  8355                           ;main.c: 1118: Read_b_eep(0x43 + 43);
  8356  000B16  6A09               	clrf	?_Read_b_eep+1,c
  8357  000B18  0E6E               	movlw	110
  8358  000B1A  6E08               	movwf	?_Read_b_eep,c
  8359  000B1C  EC4B  F022         	call	_Read_b_eep	;wreg free
  8360  000B20  0100               	movlb	0	; () banked
  8361  000B22  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8362  000B24  6A09               	clrf	?_Read_b_eep+1,c
  8363  000B26  0E6D               	movlw	109
  8364  000B28  6E08               	movwf	?_Read_b_eep,c
  8365  000B2A  EC4B  F022         	call	_Read_b_eep	;wreg free
  8366  000B2E  0100               	movlb	0	; () banked
  8367  000B30  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8368  000B32  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8369  000B34  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  8370  000B36  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8371  000B38  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  8372  000B3A  0E00               	movlw	0
  8373  000B3C  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8374  000B3E  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  8375  000B40  D3AB               	goto	l11097
  8376  000B42                     l327:
  8377                           
  8378                           ; BSR set to: 0
  8379                           ;main.c: 1122: else if (0 == val) {
  8380  000B42  6651               	tstfsz	vscp_writeAppReg@val,c
  8381  000B44  D3A9               	goto	l11097
  8382                           
  8383                           ; BSR set to: 0
  8384                           ;main.c: 1123: LATCbits.LATC6 = 0;
  8385  000B46  9C8B               	bcf	3979,6,c	;volatile
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;main.c: 1124: rv = LATCbits.LATC6;
  8389  000B48  0E00               	movlw	0
  8390  000B4A  BC8B               	btfsc	3979,6,c	;volatile
  8391  000B4C  0E01               	movlw	1
  8392  000B4E  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8393  000B50  D739               	goto	l10711
  8394  000B52                     l10793:
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;main.c: 1133: bInfoEvent = 1;
  8398  000B52  0E01               	movlw	1
  8399  000B54  6FCB               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;main.c: 1135: if (1 == val) {
  8403  000B56  0451               	decf	vscp_writeAppReg@val,w,c
  8404  000B58  E126               	bnz	l332
  8405                           
  8406                           ; BSR set to: 0
  8407                           ;main.c: 1137: LATCbits.LATC5 = 1;
  8408  000B5A  8A8B               	bsf	3979,5,c	;volatile
  8409                           
  8410                           ; BSR set to: 0
  8411                           ;main.c: 1138: rv = LATCbits.LATC5;
  8412  000B5C  0E00               	movlw	0
  8413  000B5E  BA8B               	btfsc	3979,5,c	;volatile
  8414  000B60  0E01               	movlw	1
  8415  000B62  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8416                           
  8417                           ; BSR set to: 0
  8418                           ;main.c: 1139: bOn = 1;
  8419  000B64  0E01               	movlw	1
  8420  000B66  6FCE               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8421                           
  8422                           ; BSR set to: 0
  8423                           ;main.c: 1141: if (Read_b_eep(0x43 + 15) & 0x04) {
  8424  000B68  6A09               	clrf	?_Read_b_eep+1,c
  8425  000B6A  0E52               	movlw	82
  8426  000B6C  6E08               	movwf	?_Read_b_eep,c
  8427  000B6E  EC4B  F022         	call	_Read_b_eep	;wreg free
  8428  000B72  0100               	movlb	0	; () banked
  8429  000B74  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8430  000B76  A5C8               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8431  000B78  D38F               	goto	l11097
  8432  000B7A                     l10805:
  8433                           
  8434                           ; BSR set to: 0
  8435                           ;main.c: 1142: relay_protection_timer[ 5 ] =
  8436                           ;main.c: 1143: Read_b_eep(0x43 + 44) * 256 +
  8437                           ;main.c: 1144: Read_b_eep(0x43 + 45);
  8438  000B7A  6A09               	clrf	?_Read_b_eep+1,c
  8439  000B7C  0E70               	movlw	112
  8440  000B7E  6E08               	movwf	?_Read_b_eep,c
  8441  000B80  EC4B  F022         	call	_Read_b_eep	;wreg free
  8442  000B84  0100               	movlb	0	; () banked
  8443  000B86  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8444  000B88  6A09               	clrf	?_Read_b_eep+1,c
  8445  000B8A  0E6F               	movlw	111
  8446  000B8C  6E08               	movwf	?_Read_b_eep,c
  8447  000B8E  EC4B  F022         	call	_Read_b_eep	;wreg free
  8448  000B92  0100               	movlb	0	; () banked
  8449  000B94  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8450  000B96  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8451  000B98  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  8452  000B9A  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8453  000B9C  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  8454  000B9E  0E00               	movlw	0
  8455  000BA0  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8456  000BA2  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  8457  000BA4  D379               	goto	l11097
  8458  000BA6                     l332:
  8459                           
  8460                           ; BSR set to: 0
  8461                           ;main.c: 1148: else if (0 == val) {
  8462  000BA6  6651               	tstfsz	vscp_writeAppReg@val,c
  8463  000BA8  D377               	goto	l11097
  8464                           
  8465                           ; BSR set to: 0
  8466                           ;main.c: 1149: LATCbits.LATC5 = 0;
  8467  000BAA  9A8B               	bcf	3979,5,c	;volatile
  8468                           
  8469                           ; BSR set to: 0
  8470                           ;main.c: 1150: rv = LATCbits.LATC5;
  8471  000BAC  0E00               	movlw	0
  8472  000BAE  BA8B               	btfsc	3979,5,c	;volatile
  8473  000BB0  0E01               	movlw	1
  8474  000BB2  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8475  000BB4  D707               	goto	l10711
  8476  000BB6                     l10813:
  8477                           
  8478                           ; BSR set to: 0
  8479                           ;main.c: 1158: bInfoEvent = 1;
  8480  000BB6  0E01               	movlw	1
  8481  000BB8  6FCB               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8482                           
  8483                           ; BSR set to: 0
  8484                           ;main.c: 1160: if (1 == val) {
  8485  000BBA  0451               	decf	vscp_writeAppReg@val,w,c
  8486  000BBC  E126               	bnz	l337
  8487                           
  8488                           ; BSR set to: 0
  8489                           ;main.c: 1162: LATCbits.LATC4 = 1;
  8490  000BBE  888B               	bsf	3979,4,c	;volatile
  8491                           
  8492                           ; BSR set to: 0
  8493                           ;main.c: 1163: rv = LATCbits.LATC4;
  8494  000BC0  0E00               	movlw	0
  8495  000BC2  B88B               	btfsc	3979,4,c	;volatile
  8496  000BC4  0E01               	movlw	1
  8497  000BC6  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;main.c: 1164: bOn = 1;
  8501  000BC8  0E01               	movlw	1
  8502  000BCA  6FCE               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8503                           
  8504                           ; BSR set to: 0
  8505                           ;main.c: 1166: if (Read_b_eep(0x43 + 16) & 0x04) {
  8506  000BCC  6A09               	clrf	?_Read_b_eep+1,c
  8507  000BCE  0E53               	movlw	83
  8508  000BD0  6E08               	movwf	?_Read_b_eep,c
  8509  000BD2  EC4B  F022         	call	_Read_b_eep	;wreg free
  8510  000BD6  0100               	movlb	0	; () banked
  8511  000BD8  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8512  000BDA  A5C8               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8513  000BDC  D35D               	goto	l11097
  8514  000BDE                     l10825:
  8515                           
  8516                           ; BSR set to: 0
  8517                           ;main.c: 1167: relay_protection_timer[ 6 ] =
  8518                           ;main.c: 1168: Read_b_eep(0x43 + 46) * 256 +
  8519                           ;main.c: 1169: Read_b_eep(0x43 + 47);
  8520  000BDE  6A09               	clrf	?_Read_b_eep+1,c
  8521  000BE0  0E72               	movlw	114
  8522  000BE2  6E08               	movwf	?_Read_b_eep,c
  8523  000BE4  EC4B  F022         	call	_Read_b_eep	;wreg free
  8524  000BE8  0100               	movlb	0	; () banked
  8525  000BEA  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8526  000BEC  6A09               	clrf	?_Read_b_eep+1,c
  8527  000BEE  0E71               	movlw	113
  8528  000BF0  6E08               	movwf	?_Read_b_eep,c
  8529  000BF2  EC4B  F022         	call	_Read_b_eep	;wreg free
  8530  000BF6  0100               	movlb	0	; () banked
  8531  000BF8  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8532  000BFA  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8533  000BFC  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  8534  000BFE  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8535  000C00  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  8536  000C02  0E00               	movlw	0
  8537  000C04  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8538  000C06  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  8539  000C08  D347               	goto	l11097
  8540  000C0A                     l337:
  8541                           
  8542                           ; BSR set to: 0
  8543                           ;main.c: 1173: else if (0 == val) {
  8544  000C0A  6651               	tstfsz	vscp_writeAppReg@val,c
  8545  000C0C  D345               	goto	l11097
  8546                           
  8547                           ; BSR set to: 0
  8548                           ;main.c: 1174: LATCbits.LATC4 = 0;
  8549  000C0E  988B               	bcf	3979,4,c	;volatile
  8550                           
  8551                           ; BSR set to: 0
  8552                           ;main.c: 1175: rv = LATCbits.LATC4;
  8553  000C10  0E00               	movlw	0
  8554  000C12  B88B               	btfsc	3979,4,c	;volatile
  8555  000C14  0E01               	movlw	1
  8556  000C16  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8557  000C18  D6D5               	goto	l10711
  8558  000C1A                     l10835:
  8559                           
  8560                           ; BSR set to: 0
  8561  000C1A  51CF               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8562                           
  8563                           ; Switch size 1, requested type "speed"
  8564                           ; Number of cases is 7, Range of values is 2 to 8
  8565                           ; switch strategies available:
  8566                           ; Name         Instructions Cycles
  8567                           ; simple_byte           22    12 (average)
  8568                           ;	Chosen strategy is simple_byte
  8569  000C1C  0A02               	xorlw	2	; case 2
  8570  000C1E  E101 D69D          	bz	l10693
  8571  000C22  0A01               	xorlw	1	; case 3
  8572  000C24  E101 D6D1          	bz	l10713
  8573  000C28  0A07               	xorlw	7	; case 4
  8574  000C2A  E101 D6F9          	bz	l10733
  8575  000C2E  0A01               	xorlw	1	; case 5
  8576  000C30  E101 D72B          	bz	l10753
  8577  000C34  0A03               	xorlw	3	; case 6
  8578  000C36  E101 D75A          	bz	l10773
  8579  000C3A  0A01               	xorlw	1	; case 7
  8580  000C3C  E08A               	bz	l10793
  8581  000C3E  0A0F               	xorlw	15	; case 8
  8582  000C40  E0BA               	bz	l10813
  8583                           
  8584                           ; BSR set to: 0
  8585                           ;main.c: 1181: }
  8586                           ;main.c: 1182: }
  8587  000C42  D32A               	goto	l11097
  8588  000C44                     l10837:
  8589                           
  8590                           ; BSR set to: 0
  8591                           ;main.c: 1185: else if ( (reg >= 10 ) &&
  8592                           ;main.c: 1186: (reg <= 17) ) {
  8593  000C44  0E09               	movlw	9
  8594  000C46  65CF               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8595  000C48  D1BE               	goto	l11015
  8596                           
  8597                           ; BSR set to: 0
  8598  000C4A  0E12               	movlw	18
  8599  000C4C  61CF               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8600  000C4E  D1BB               	goto	l11015
  8601  000C50  D1A4               	goto	l11013
  8602  000C52                     l10843:
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;main.c: 1192: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8606  000C52  EC7F  F022         	call	_Busy_eep	;wreg free
  8607  000C56  0E43               	movlw	67
  8608  000C58  0100               	movlb	0	; () banked
  8609  000C5A  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8610  000C5C  6E08               	movwf	?_Write_b_eep,c
  8611  000C5E  6A09               	clrf	?_Write_b_eep+1,c
  8612  000C60  0E00               	movlw	0
  8613  000C62  2209               	addwfc	?_Write_b_eep+1,f,c
  8614  000C64  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8615  000C68  EC7C  F020         	call	_Write_b_eep	;wreg free
  8616                           
  8617                           ;main.c: 1193: rv = Read_b_eep(0x43 + reg);
  8618  000C6C  0E43               	movlw	67
  8619  000C6E  0100               	movlb	0	; () banked
  8620  000C70  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8621  000C72  6E08               	movwf	?_Read_b_eep,c
  8622  000C74  6A09               	clrf	?_Read_b_eep+1,c
  8623  000C76  0E00               	movlw	0
  8624  000C78  2209               	addwfc	?_Read_b_eep+1,f,c
  8625  000C7A  EC4B  F022         	call	_Read_b_eep	;wreg free
  8626  000C7E  0100               	movlb	0	; () banked
  8627  000C80  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8628                           
  8629                           ; BSR set to: 0
  8630                           ;main.c: 1195: if ( val & 0x01 ) {
  8631  000C82  A051               	btfss	vscp_writeAppReg@val,0,c
  8632  000C84  D019               	goto	l10857
  8633                           
  8634                           ; BSR set to: 0
  8635                           ;main.c: 1197: LATBbits.LATB4 = 0;
  8636  000C86  988A               	bcf	3978,4,c	;volatile
  8637                           
  8638                           ;main.c: 1198: bOn = 0;
  8639  000C88  6BCE               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8640                           
  8641                           ; BSR set to: 0
  8642                           ;main.c: 1200: relay_pulse_flags |= 0x01;
  8643  000C8A  818C               	bsf	_relay_pulse_flags& (0+255),0,b
  8644                           
  8645                           ; BSR set to: 0
  8646                           ;main.c: 1201: relay_pulse_timer[ 0 ] =
  8647                           ;main.c: 1202: Read_b_eep(0x43 + 18) * 256 +
  8648                           ;main.c: 1203: Read_b_eep(0x43 + 19);
  8649  000C8C  6A09               	clrf	?_Read_b_eep+1,c
  8650  000C8E  0E56               	movlw	86
  8651  000C90  6E08               	movwf	?_Read_b_eep,c
  8652  000C92  EC4B  F022         	call	_Read_b_eep	;wreg free
  8653  000C96  0100               	movlb	0	; () banked
  8654  000C98  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8655  000C9A  6A09               	clrf	?_Read_b_eep+1,c
  8656  000C9C  0E55               	movlw	85
  8657  000C9E  6E08               	movwf	?_Read_b_eep,c
  8658  000CA0  EC4B  F022         	call	_Read_b_eep	;wreg free
  8659  000CA4  0100               	movlb	0	; () banked
  8660  000CA6  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8661  000CA8  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8662  000CAA  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  8663  000CAC  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8664  000CAE  6F70               	movwf	_relay_pulse_timer& (0+255),b
  8665  000CB0  0E00               	movlw	0
  8666  000CB2  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8667  000CB4  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  8668                           
  8669                           ;main.c: 1204: }
  8670  000CB6  D003               	goto	l10863
  8671  000CB8                     l10857:
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;main.c: 1205: else {
  8675                           ;main.c: 1206: relay_pulse_flags &= 0b11111110;
  8676  000CB8  918C               	bcf	_relay_pulse_flags& (0+255),0,b
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;main.c: 1207: LATBbits.LATB4 = 0;
  8680  000CBA  988A               	bcf	3978,4,c	;volatile
  8681                           
  8682                           ; BSR set to: 0
  8683                           ;main.c: 1208: bOn = 0;
  8684  000CBC  6BCE               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8685  000CBE                     l10863:
  8686                           
  8687                           ; BSR set to: 0
  8688                           ;main.c: 1209: }
  8689                           ;main.c: 1211: if ( val & 0x04 ) {
  8690  000CBE  B451               	btfsc	vscp_writeAppReg@val,2,c
  8691  000CC0  D662               	goto	l10705
  8692  000CC2  D2EA               	goto	l11097
  8693  000CC4                     l10867:
  8694                           
  8695                           ; BSR set to: 0
  8696                           ;main.c: 1220: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8697  000CC4  EC7F  F022         	call	_Busy_eep	;wreg free
  8698  000CC8  0E43               	movlw	67
  8699  000CCA  0100               	movlb	0	; () banked
  8700  000CCC  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8701  000CCE  6E08               	movwf	?_Write_b_eep,c
  8702  000CD0  6A09               	clrf	?_Write_b_eep+1,c
  8703  000CD2  0E00               	movlw	0
  8704  000CD4  2209               	addwfc	?_Write_b_eep+1,f,c
  8705  000CD6  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8706  000CDA  EC7C  F020         	call	_Write_b_eep	;wreg free
  8707                           
  8708                           ;main.c: 1221: rv = Read_b_eep(0x43 + reg);
  8709  000CDE  0E43               	movlw	67
  8710  000CE0  0100               	movlb	0	; () banked
  8711  000CE2  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8712  000CE4  6E08               	movwf	?_Read_b_eep,c
  8713  000CE6  6A09               	clrf	?_Read_b_eep+1,c
  8714  000CE8  0E00               	movlw	0
  8715  000CEA  2209               	addwfc	?_Read_b_eep+1,f,c
  8716  000CEC  EC4B  F022         	call	_Read_b_eep	;wreg free
  8717  000CF0  0100               	movlb	0	; () banked
  8718  000CF2  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8719                           
  8720                           ; BSR set to: 0
  8721                           ;main.c: 1223: if ( val & 0x01 ) {
  8722  000CF4  A051               	btfss	vscp_writeAppReg@val,0,c
  8723  000CF6  D019               	goto	l10881
  8724                           
  8725                           ; BSR set to: 0
  8726                           ;main.c: 1225: LATBbits.LATB1 = 0;
  8727  000CF8  928A               	bcf	3978,1,c	;volatile
  8728                           
  8729                           ;main.c: 1226: bOn = 0;
  8730  000CFA  6BCE               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8731                           
  8732                           ; BSR set to: 0
  8733                           ;main.c: 1228: relay_pulse_flags |= 0x02;
  8734  000CFC  838C               	bsf	_relay_pulse_flags& (0+255),1,b
  8735                           
  8736                           ; BSR set to: 0
  8737                           ;main.c: 1229: relay_pulse_timer[ 1 ] =
  8738                           ;main.c: 1230: Read_b_eep(0x43 + 18) * 256 +
  8739                           ;main.c: 1231: Read_b_eep(0x43 + 19);
  8740  000CFE  6A09               	clrf	?_Read_b_eep+1,c
  8741  000D00  0E56               	movlw	86
  8742  000D02  6E08               	movwf	?_Read_b_eep,c
  8743  000D04  EC4B  F022         	call	_Read_b_eep	;wreg free
  8744  000D08  0100               	movlb	0	; () banked
  8745  000D0A  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8746  000D0C  6A09               	clrf	?_Read_b_eep+1,c
  8747  000D0E  0E55               	movlw	85
  8748  000D10  6E08               	movwf	?_Read_b_eep,c
  8749  000D12  EC4B  F022         	call	_Read_b_eep	;wreg free
  8750  000D16  0100               	movlb	0	; () banked
  8751  000D18  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8752  000D1A  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8753  000D1C  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  8754  000D1E  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8755  000D20  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  8756  000D22  0E00               	movlw	0
  8757  000D24  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8758  000D26  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  8759                           
  8760                           ;main.c: 1232: }
  8761  000D28  D003               	goto	l10887
  8762  000D2A                     l10881:
  8763                           
  8764                           ; BSR set to: 0
  8765                           ;main.c: 1233: else {
  8766                           ;main.c: 1234: relay_pulse_flags &= 0b11111101;
  8767  000D2A  938C               	bcf	_relay_pulse_flags& (0+255),1,b
  8768                           
  8769                           ; BSR set to: 0
  8770                           ;main.c: 1235: LATBbits.LATB1 = 0;
  8771  000D2C  928A               	bcf	3978,1,c	;volatile
  8772                           
  8773                           ; BSR set to: 0
  8774                           ;main.c: 1236: bOn = 0;
  8775  000D2E  6BCE               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8776  000D30                     l10887:
  8777                           
  8778                           ; BSR set to: 0
  8779                           ;main.c: 1237: }
  8780                           ;main.c: 1239: if ( val & 0x04 ) {
  8781  000D30  A451               	btfss	vscp_writeAppReg@val,2,c
  8782  000D32  D2B2               	goto	l11097
  8783                           
  8784                           ; BSR set to: 0
  8785                           ;main.c: 1240: relay_protection_timer[ 1 ] =
  8786                           ;main.c: 1241: Read_b_eep(0x43 + 34) * 256 +
  8787                           ;main.c: 1242: Read_b_eep(0x43 + 35);
  8788  000D34  6A09               	clrf	?_Read_b_eep+1,c
  8789  000D36  0E66               	movlw	102
  8790  000D38  6E08               	movwf	?_Read_b_eep,c
  8791  000D3A  EC4B  F022         	call	_Read_b_eep	;wreg free
  8792  000D3E  0100               	movlb	0	; () banked
  8793  000D40  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8794  000D42  6A09               	clrf	?_Read_b_eep+1,c
  8795  000D44  0E65               	movlw	101
  8796  000D46  6E08               	movwf	?_Read_b_eep,c
  8797  000D48  EC4B  F022         	call	_Read_b_eep	;wreg free
  8798  000D4C                     L28:
  8799  000D4C  0100               	movlb	0	; () banked
  8800  000D4E  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8801  000D50  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8802  000D52  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  8803  000D54  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8804  000D56  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  8805  000D58  0E00               	movlw	0
  8806  000D5A  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8807  000D5C  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  8808  000D5E  D29C               	goto	l11097
  8809  000D60                     l10891:
  8810                           
  8811                           ; BSR set to: 0
  8812                           ;main.c: 1248: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8813  000D60  EC7F  F022         	call	_Busy_eep	;wreg free
  8814  000D64  0E43               	movlw	67
  8815  000D66  0100               	movlb	0	; () banked
  8816  000D68  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8817  000D6A  6E08               	movwf	?_Write_b_eep,c
  8818  000D6C  6A09               	clrf	?_Write_b_eep+1,c
  8819  000D6E  0E00               	movlw	0
  8820  000D70  2209               	addwfc	?_Write_b_eep+1,f,c
  8821  000D72  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8822  000D76  EC7C  F020         	call	_Write_b_eep	;wreg free
  8823                           
  8824                           ;main.c: 1249: rv = Read_b_eep(0x43 + reg);
  8825  000D7A  0E43               	movlw	67
  8826  000D7C  0100               	movlb	0	; () banked
  8827  000D7E  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8828  000D80  6E08               	movwf	?_Read_b_eep,c
  8829  000D82  6A09               	clrf	?_Read_b_eep+1,c
  8830  000D84  0E00               	movlw	0
  8831  000D86  2209               	addwfc	?_Read_b_eep+1,f,c
  8832  000D88  EC4B  F022         	call	_Read_b_eep	;wreg free
  8833  000D8C  0100               	movlb	0	; () banked
  8834  000D8E  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8835                           
  8836                           ; BSR set to: 0
  8837                           ;main.c: 1251: if ( val & 0x01 ) {
  8838  000D90  A051               	btfss	vscp_writeAppReg@val,0,c
  8839  000D92  D019               	goto	l10905
  8840                           
  8841                           ; BSR set to: 0
  8842                           ;main.c: 1253: LATBbits.LATB0 = 0;
  8843  000D94  908A               	bcf	3978,0,c	;volatile
  8844                           
  8845                           ;main.c: 1254: bOn = 0;
  8846  000D96  6BCE               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8847                           
  8848                           ; BSR set to: 0
  8849                           ;main.c: 1256: relay_pulse_flags |= 0x04;
  8850  000D98  858C               	bsf	_relay_pulse_flags& (0+255),2,b
  8851                           
  8852                           ; BSR set to: 0
  8853                           ;main.c: 1257: relay_pulse_timer[ 2 ] =
  8854                           ;main.c: 1258: Read_b_eep(0x43 + 22) * 256 +
  8855                           ;main.c: 1259: Read_b_eep(0x43 + 23);
  8856  000D9A  6A09               	clrf	?_Read_b_eep+1,c
  8857  000D9C  0E5A               	movlw	90
  8858  000D9E  6E08               	movwf	?_Read_b_eep,c
  8859  000DA0  EC4B  F022         	call	_Read_b_eep	;wreg free
  8860  000DA4  0100               	movlb	0	; () banked
  8861  000DA6  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8862  000DA8  6A09               	clrf	?_Read_b_eep+1,c
  8863  000DAA  0E59               	movlw	89
  8864  000DAC  6E08               	movwf	?_Read_b_eep,c
  8865  000DAE  EC4B  F022         	call	_Read_b_eep	;wreg free
  8866  000DB2  0100               	movlb	0	; () banked
  8867  000DB4  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8868  000DB6  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8869  000DB8  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  8870  000DBA  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8871  000DBC  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  8872  000DBE  0E00               	movlw	0
  8873  000DC0  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8874  000DC2  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  8875                           
  8876                           ;main.c: 1260: }
  8877  000DC4  D003               	goto	l10911
  8878  000DC6                     l10905:
  8879                           
  8880                           ; BSR set to: 0
  8881                           ;main.c: 1261: else {
  8882                           ;main.c: 1262: relay_pulse_flags &= 0b11111011;
  8883  000DC6  958C               	bcf	_relay_pulse_flags& (0+255),2,b
  8884                           
  8885                           ; BSR set to: 0
  8886                           ;main.c: 1263: LATBbits.LATB0 = 0;
  8887  000DC8  908A               	bcf	3978,0,c	;volatile
  8888                           
  8889                           ; BSR set to: 0
  8890                           ;main.c: 1264: bOn = 0;
  8891  000DCA  6BCE               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8892  000DCC                     l10911:
  8893                           
  8894                           ; BSR set to: 0
  8895                           ;main.c: 1265: }
  8896                           ;main.c: 1267: if ( val & 0x04 ) {
  8897  000DCC  B451               	btfsc	vscp_writeAppReg@val,2,c
  8898  000DCE  D63D               	goto	l10745
  8899  000DD0  D263               	goto	l11097
  8900  000DD2                     l10915:
  8901                           
  8902                           ; BSR set to: 0
  8903                           ;main.c: 1276: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8904  000DD2  EC7F  F022         	call	_Busy_eep	;wreg free
  8905  000DD6  0E43               	movlw	67
  8906  000DD8  0100               	movlb	0	; () banked
  8907  000DDA  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8908  000DDC  6E08               	movwf	?_Write_b_eep,c
  8909  000DDE  6A09               	clrf	?_Write_b_eep+1,c
  8910  000DE0  0E00               	movlw	0
  8911  000DE2  2209               	addwfc	?_Write_b_eep+1,f,c
  8912  000DE4  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8913  000DE8  EC7C  F020         	call	_Write_b_eep	;wreg free
  8914                           
  8915                           ;main.c: 1277: rv = Read_b_eep(0x43 + reg);
  8916  000DEC  0E43               	movlw	67
  8917  000DEE  0100               	movlb	0	; () banked
  8918  000DF0  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8919  000DF2  6E08               	movwf	?_Read_b_eep,c
  8920  000DF4  6A09               	clrf	?_Read_b_eep+1,c
  8921  000DF6  0E00               	movlw	0
  8922  000DF8  2209               	addwfc	?_Read_b_eep+1,f,c
  8923  000DFA  EC4B  F022         	call	_Read_b_eep	;wreg free
  8924  000DFE  0100               	movlb	0	; () banked
  8925  000E00  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;main.c: 1279: if ( val & 0x01 ) {
  8929  000E02  A051               	btfss	vscp_writeAppReg@val,0,c
  8930  000E04  D019               	goto	l10929
  8931                           
  8932                           ; BSR set to: 0
  8933                           ;main.c: 1281: LATCbits.LATC7 = 0;
  8934  000E06  9E8B               	bcf	3979,7,c	;volatile
  8935                           
  8936                           ;main.c: 1282: bOn = 0;
  8937  000E08  6BCE               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8938                           
  8939                           ; BSR set to: 0
  8940                           ;main.c: 1284: relay_pulse_flags |= 0x08;
  8941  000E0A  878C               	bsf	_relay_pulse_flags& (0+255),3,b
  8942                           
  8943                           ; BSR set to: 0
  8944                           ;main.c: 1285: relay_pulse_timer[ 3 ] =
  8945                           ;main.c: 1286: Read_b_eep(0x43 + 24) * 256 +
  8946                           ;main.c: 1287: Read_b_eep(0x43 + 25);
  8947  000E0C  6A09               	clrf	?_Read_b_eep+1,c
  8948  000E0E  0E5C               	movlw	92
  8949  000E10  6E08               	movwf	?_Read_b_eep,c
  8950  000E12  EC4B  F022         	call	_Read_b_eep	;wreg free
  8951  000E16  0100               	movlb	0	; () banked
  8952  000E18  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  8953  000E1A  6A09               	clrf	?_Read_b_eep+1,c
  8954  000E1C  0E5B               	movlw	91
  8955  000E1E  6E08               	movwf	?_Read_b_eep,c
  8956  000E20  EC4B  F022         	call	_Read_b_eep	;wreg free
  8957  000E24  0100               	movlb	0	; () banked
  8958  000E26  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8959  000E28  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8960  000E2A  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  8961  000E2C  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8962  000E2E  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  8963  000E30  0E00               	movlw	0
  8964  000E32  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8965  000E34  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  8966                           
  8967                           ;main.c: 1288: }
  8968  000E36  D003               	goto	l10935
  8969  000E38                     l10929:
  8970                           
  8971                           ; BSR set to: 0
  8972                           ;main.c: 1289: else {
  8973                           ;main.c: 1290: relay_pulse_flags &= 0b11110111;
  8974  000E38  978C               	bcf	_relay_pulse_flags& (0+255),3,b
  8975                           
  8976                           ; BSR set to: 0
  8977                           ;main.c: 1291: LATCbits.LATC7 = 0;
  8978  000E3A  9E8B               	bcf	3979,7,c	;volatile
  8979                           
  8980                           ; BSR set to: 0
  8981                           ;main.c: 1292: bOn = 0;
  8982  000E3C  6BCE               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8983  000E3E                     l10935:
  8984                           
  8985                           ; BSR set to: 0
  8986                           ;main.c: 1293: }
  8987                           ;main.c: 1295: if ( val & 0x04 ) {
  8988  000E3E  B451               	btfsc	vscp_writeAppReg@val,2,c
  8989  000E40  D638               	goto	l10765
  8990  000E42  D22A               	goto	l11097
  8991  000E44                     l10939:
  8992                           
  8993                           ; BSR set to: 0
  8994                           ;main.c: 1304: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8995  000E44  EC7F  F022         	call	_Busy_eep	;wreg free
  8996  000E48  0E43               	movlw	67
  8997  000E4A  0100               	movlb	0	; () banked
  8998  000E4C  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8999  000E4E  6E08               	movwf	?_Write_b_eep,c
  9000  000E50  6A09               	clrf	?_Write_b_eep+1,c
  9001  000E52  0E00               	movlw	0
  9002  000E54  2209               	addwfc	?_Write_b_eep+1,f,c
  9003  000E56  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9004  000E5A  EC7C  F020         	call	_Write_b_eep	;wreg free
  9005                           
  9006                           ;main.c: 1305: rv = Read_b_eep(0x43 + reg);
  9007  000E5E  0E43               	movlw	67
  9008  000E60  0100               	movlb	0	; () banked
  9009  000E62  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9010  000E64  6E08               	movwf	?_Read_b_eep,c
  9011  000E66  6A09               	clrf	?_Read_b_eep+1,c
  9012  000E68  0E00               	movlw	0
  9013  000E6A  2209               	addwfc	?_Read_b_eep+1,f,c
  9014  000E6C  EC4B  F022         	call	_Read_b_eep	;wreg free
  9015  000E70  0100               	movlb	0	; () banked
  9016  000E72  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9017                           
  9018                           ; BSR set to: 0
  9019                           ;main.c: 1307: if ( val & 0x01 ) {
  9020  000E74  A051               	btfss	vscp_writeAppReg@val,0,c
  9021  000E76  D019               	goto	l10953
  9022                           
  9023                           ; BSR set to: 0
  9024                           ;main.c: 1309: LATCbits.LATC6 = 0;
  9025  000E78  9C8B               	bcf	3979,6,c	;volatile
  9026                           
  9027                           ;main.c: 1310: bOn = 0;
  9028  000E7A  6BCE               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9029                           
  9030                           ; BSR set to: 0
  9031                           ;main.c: 1312: relay_pulse_flags |= 0x10;
  9032  000E7C  898C               	bsf	_relay_pulse_flags& (0+255),4,b
  9033                           
  9034                           ; BSR set to: 0
  9035                           ;main.c: 1313: relay_pulse_timer[ 4 ] =
  9036                           ;main.c: 1314: Read_b_eep(0x43 + 26) * 256 +
  9037                           ;main.c: 1315: Read_b_eep(0x43 + 27);
  9038  000E7E  6A09               	clrf	?_Read_b_eep+1,c
  9039  000E80  0E5E               	movlw	94
  9040  000E82  6E08               	movwf	?_Read_b_eep,c
  9041  000E84  EC4B  F022         	call	_Read_b_eep	;wreg free
  9042  000E88  0100               	movlb	0	; () banked
  9043  000E8A  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  9044  000E8C  6A09               	clrf	?_Read_b_eep+1,c
  9045  000E8E  0E5D               	movlw	93
  9046  000E90  6E08               	movwf	?_Read_b_eep,c
  9047  000E92  EC4B  F022         	call	_Read_b_eep	;wreg free
  9048  000E96  0100               	movlb	0	; () banked
  9049  000E98  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9050  000E9A  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9051  000E9C  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  9052  000E9E  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9053  000EA0  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9054  000EA2  0E00               	movlw	0
  9055  000EA4  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9056  000EA6  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9057                           
  9058                           ;main.c: 1316: }
  9059  000EA8  D003               	goto	l10959
  9060  000EAA                     l10953:
  9061                           
  9062                           ; BSR set to: 0
  9063                           ;main.c: 1317: else {
  9064                           ;main.c: 1318: relay_pulse_flags &= 0b11101111;
  9065  000EAA  998C               	bcf	_relay_pulse_flags& (0+255),4,b
  9066                           
  9067                           ; BSR set to: 0
  9068                           ;main.c: 1319: LATCbits.LATC6 = 0;
  9069  000EAC  9C8B               	bcf	3979,6,c	;volatile
  9070                           
  9071                           ; BSR set to: 0
  9072                           ;main.c: 1320: bOn = 0;
  9073  000EAE  6BCE               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9074  000EB0                     l10959:
  9075                           
  9076                           ; BSR set to: 0
  9077                           ;main.c: 1321: }
  9078                           ;main.c: 1323: if ( val & 0x04 ) {
  9079  000EB0  B451               	btfsc	vscp_writeAppReg@val,2,c
  9080  000EB2  D631               	goto	l10785
  9081  000EB4  D1F1               	goto	l11097
  9082  000EB6                     l10963:
  9083                           
  9084                           ; BSR set to: 0
  9085                           ;main.c: 1332: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9086  000EB6  EC7F  F022         	call	_Busy_eep	;wreg free
  9087  000EBA  0E43               	movlw	67
  9088  000EBC  0100               	movlb	0	; () banked
  9089  000EBE  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9090  000EC0  6E08               	movwf	?_Write_b_eep,c
  9091  000EC2  6A09               	clrf	?_Write_b_eep+1,c
  9092  000EC4  0E00               	movlw	0
  9093  000EC6  2209               	addwfc	?_Write_b_eep+1,f,c
  9094  000EC8  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9095  000ECC  EC7C  F020         	call	_Write_b_eep	;wreg free
  9096                           
  9097                           ;main.c: 1333: rv = Read_b_eep(0x43 + reg);
  9098  000ED0  0E43               	movlw	67
  9099  000ED2  0100               	movlb	0	; () banked
  9100  000ED4  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9101  000ED6  6E08               	movwf	?_Read_b_eep,c
  9102  000ED8  6A09               	clrf	?_Read_b_eep+1,c
  9103  000EDA  0E00               	movlw	0
  9104  000EDC  2209               	addwfc	?_Read_b_eep+1,f,c
  9105  000EDE  EC4B  F022         	call	_Read_b_eep	;wreg free
  9106  000EE2  0100               	movlb	0	; () banked
  9107  000EE4  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9108                           
  9109                           ; BSR set to: 0
  9110                           ;main.c: 1335: if ( val & 0x01 ) {
  9111  000EE6  A051               	btfss	vscp_writeAppReg@val,0,c
  9112  000EE8  D019               	goto	l10977
  9113                           
  9114                           ; BSR set to: 0
  9115                           ;main.c: 1337: LATCbits.LATC5 = 0;
  9116  000EEA  9A8B               	bcf	3979,5,c	;volatile
  9117                           
  9118                           ;main.c: 1338: bOn = 0;
  9119  000EEC  6BCE               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9120                           
  9121                           ; BSR set to: 0
  9122                           ;main.c: 1340: relay_pulse_flags |= 0x20;
  9123  000EEE  8B8C               	bsf	_relay_pulse_flags& (0+255),5,b
  9124                           
  9125                           ; BSR set to: 0
  9126                           ;main.c: 1341: relay_pulse_timer[ 5 ] =
  9127                           ;main.c: 1342: Read_b_eep(0x43 + 28) * 256 +
  9128                           ;main.c: 1343: Read_b_eep(0x43 + 29);
  9129  000EF0  6A09               	clrf	?_Read_b_eep+1,c
  9130  000EF2  0E60               	movlw	96
  9131  000EF4  6E08               	movwf	?_Read_b_eep,c
  9132  000EF6  EC4B  F022         	call	_Read_b_eep	;wreg free
  9133  000EFA  0100               	movlb	0	; () banked
  9134  000EFC  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  9135  000EFE  6A09               	clrf	?_Read_b_eep+1,c
  9136  000F00  0E5F               	movlw	95
  9137  000F02  6E08               	movwf	?_Read_b_eep,c
  9138  000F04  EC4B  F022         	call	_Read_b_eep	;wreg free
  9139  000F08  0100               	movlb	0	; () banked
  9140  000F0A  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9141  000F0C  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9142  000F0E  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  9143  000F10  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9144  000F12  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9145  000F14  0E00               	movlw	0
  9146  000F16  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9147  000F18  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9148                           
  9149                           ;main.c: 1344: }
  9150  000F1A  D003               	goto	l10983
  9151  000F1C                     l10977:
  9152                           
  9153                           ; BSR set to: 0
  9154                           ;main.c: 1345: else {
  9155                           ;main.c: 1346: relay_pulse_flags &= 0b11011111;
  9156  000F1C  9B8C               	bcf	_relay_pulse_flags& (0+255),5,b
  9157                           
  9158                           ; BSR set to: 0
  9159                           ;main.c: 1347: LATCbits.LATC5 = 0;
  9160  000F1E  9A8B               	bcf	3979,5,c	;volatile
  9161                           
  9162                           ; BSR set to: 0
  9163                           ;main.c: 1348: bOn = 0;
  9164  000F20  6BCE               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9165  000F22                     l10983:
  9166                           
  9167                           ; BSR set to: 0
  9168                           ;main.c: 1349: }
  9169                           ;main.c: 1351: if ( val & 0x04 ) {
  9170  000F22  B451               	btfsc	vscp_writeAppReg@val,2,c
  9171  000F24  D62A               	goto	l10805
  9172  000F26  D1B8               	goto	l11097
  9173  000F28                     l10987:
  9174                           
  9175                           ; BSR set to: 0
  9176                           ;main.c: 1360: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9177  000F28  EC7F  F022         	call	_Busy_eep	;wreg free
  9178  000F2C  0E43               	movlw	67
  9179  000F2E  0100               	movlb	0	; () banked
  9180  000F30  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9181  000F32  6E08               	movwf	?_Write_b_eep,c
  9182  000F34  6A09               	clrf	?_Write_b_eep+1,c
  9183  000F36  0E00               	movlw	0
  9184  000F38  2209               	addwfc	?_Write_b_eep+1,f,c
  9185  000F3A  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9186  000F3E  EC7C  F020         	call	_Write_b_eep	;wreg free
  9187                           
  9188                           ;main.c: 1361: rv = Read_b_eep(0x43 + reg);
  9189  000F42  0E43               	movlw	67
  9190  000F44  0100               	movlb	0	; () banked
  9191  000F46  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9192  000F48  6E08               	movwf	?_Read_b_eep,c
  9193  000F4A  6A09               	clrf	?_Read_b_eep+1,c
  9194  000F4C  0E00               	movlw	0
  9195  000F4E  2209               	addwfc	?_Read_b_eep+1,f,c
  9196  000F50  EC4B  F022         	call	_Read_b_eep	;wreg free
  9197  000F54  0100               	movlb	0	; () banked
  9198  000F56  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9199                           
  9200                           ; BSR set to: 0
  9201                           ;main.c: 1363: if ( val & 0x01 ) {
  9202  000F58  A051               	btfss	vscp_writeAppReg@val,0,c
  9203  000F5A  D019               	goto	l11001
  9204                           
  9205                           ; BSR set to: 0
  9206                           ;main.c: 1365: LATCbits.LATC4 = 0;
  9207  000F5C  988B               	bcf	3979,4,c	;volatile
  9208                           
  9209                           ;main.c: 1366: bOn = 0;
  9210  000F5E  6BCE               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9211                           
  9212                           ; BSR set to: 0
  9213                           ;main.c: 1368: relay_pulse_flags |= 0x40;
  9214  000F60  8D8C               	bsf	_relay_pulse_flags& (0+255),6,b
  9215                           
  9216                           ; BSR set to: 0
  9217                           ;main.c: 1369: relay_pulse_timer[ 6 ] =
  9218                           ;main.c: 1370: Read_b_eep(0x43 + 30) * 256 +
  9219                           ;main.c: 1371: Read_b_eep(0x43 + 31);
  9220  000F62  6A09               	clrf	?_Read_b_eep+1,c
  9221  000F64  0E62               	movlw	98
  9222  000F66  6E08               	movwf	?_Read_b_eep,c
  9223  000F68  EC4B  F022         	call	_Read_b_eep	;wreg free
  9224  000F6C  0100               	movlb	0	; () banked
  9225  000F6E  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  9226  000F70  6A09               	clrf	?_Read_b_eep+1,c
  9227  000F72  0E61               	movlw	97
  9228  000F74  6E08               	movwf	?_Read_b_eep,c
  9229  000F76  EC4B  F022         	call	_Read_b_eep	;wreg free
  9230  000F7A  0100               	movlb	0	; () banked
  9231  000F7C  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9232  000F7E  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9233  000F80  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  9234  000F82  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9235  000F84  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9236  000F86  0E00               	movlw	0
  9237  000F88  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9238  000F8A  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9239                           
  9240                           ;main.c: 1372: }
  9241  000F8C  D003               	goto	l11007
  9242  000F8E                     l11001:
  9243                           
  9244                           ; BSR set to: 0
  9245                           ;main.c: 1373: else {
  9246                           ;main.c: 1374: relay_pulse_flags &= 0b10111111;
  9247  000F8E  9D8C               	bcf	_relay_pulse_flags& (0+255),6,b
  9248                           
  9249                           ; BSR set to: 0
  9250                           ;main.c: 1375: LATCbits.LATC7 = 0;
  9251  000F90  9E8B               	bcf	3979,7,c	;volatile
  9252                           
  9253                           ; BSR set to: 0
  9254                           ;main.c: 1376: bOn = 0;
  9255  000F92  6BCE               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9256  000F94                     l11007:
  9257                           
  9258                           ; BSR set to: 0
  9259                           ;main.c: 1377: }
  9260                           ;main.c: 1379: if ( val & 0x04 ) {
  9261  000F94  B451               	btfsc	vscp_writeAppReg@val,2,c
  9262  000F96  D623               	goto	l10825
  9263  000F98  D17F               	goto	l11097
  9264  000F9A                     l11013:
  9265                           
  9266                           ; BSR set to: 0
  9267  000F9A  51CF               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9268                           
  9269                           ; Switch size 1, requested type "speed"
  9270                           ; Number of cases is 7, Range of values is 10 to 16
  9271                           ; switch strategies available:
  9272                           ; Name         Instructions Cycles
  9273                           ; simple_byte           22    12 (average)
  9274                           ;	Chosen strategy is simple_byte
  9275  000F9C  0A0A               	xorlw	10	; case 10
  9276  000F9E  E101 D658          	bz	l10843
  9277  000FA2  0A01               	xorlw	1	; case 11
  9278  000FA4  E101 D68E          	bz	l10867
  9279  000FA8  0A07               	xorlw	7	; case 12
  9280  000FAA  E101 D6D9          	bz	l10891
  9281  000FAE  0A01               	xorlw	1	; case 13
  9282  000FB0  E101 D70F          	bz	l10915
  9283  000FB4  0A03               	xorlw	3	; case 14
  9284  000FB6  E101 D745          	bz	l10939
  9285  000FBA  0A01               	xorlw	1	; case 15
  9286  000FBC  E101 D77B          	bz	l10963
  9287  000FC0  0A1F               	xorlw	31	; case 16
  9288  000FC2  E0B2               	bz	l10987
  9289  000FC4  D169               	goto	l11097
  9290  000FC6                     l11015:
  9291                           
  9292                           ; BSR set to: 0
  9293                           ;main.c: 1390: else if ( (reg >= 18 ) &&
  9294                           ;main.c: 1391: (reg <= 33 ) ) {
  9295  000FC6  0E11               	movlw	17
  9296  000FC8  65CF               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9297  000FCA  D0E1               	goto	l11045
  9298                           
  9299                           ; BSR set to: 0
  9300  000FCC  0E22               	movlw	34
  9301  000FCE  61CF               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9302  000FD0  D0DE               	goto	l11045
  9303                           
  9304                           ; BSR set to: 0
  9305                           ;main.c: 1394: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9306  000FD2  EC7F  F022         	call	_Busy_eep	;wreg free
  9307  000FD6  0E43               	movlw	67
  9308  000FD8  0100               	movlb	0	; () banked
  9309  000FDA  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9310  000FDC  6E08               	movwf	?_Write_b_eep,c
  9311  000FDE  6A09               	clrf	?_Write_b_eep+1,c
  9312  000FE0  0E00               	movlw	0
  9313  000FE2  2209               	addwfc	?_Write_b_eep+1,f,c
  9314  000FE4  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9315  000FE8  EC7C  F020         	call	_Write_b_eep	;wreg free
  9316                           
  9317                           ;main.c: 1395: rv = Read_b_eep(0x43 + reg);
  9318  000FEC  0E43               	movlw	67
  9319  000FEE  0100               	movlb	0	; () banked
  9320  000FF0  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9321  000FF2  6E08               	movwf	?_Read_b_eep,c
  9322  000FF4  6A09               	clrf	?_Read_b_eep+1,c
  9323  000FF6  0E00               	movlw	0
  9324  000FF8  2209               	addwfc	?_Read_b_eep+1,f,c
  9325  000FFA  EC4B  F022         	call	_Read_b_eep	;wreg free
  9326  000FFE  0100               	movlb	0	; () banked
  9327  001000  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9328                           
  9329                           ;main.c: 1399: switch ( reg ) {
  9330  001002  D0B0               	goto	l11043
  9331  001004                     l11025:
  9332                           
  9333                           ; BSR set to: 0
  9334                           ;main.c: 1402: relay_pulse_timer[ 0 ] =
  9335                           ;main.c: 1403: Read_b_eep(0x43 + 18) * 256 +
  9336                           ;main.c: 1404: Read_b_eep(0x43 + 19);
  9337  001004  6A09               	clrf	?_Read_b_eep+1,c
  9338  001006  0E56               	movlw	86
  9339  001008  6E08               	movwf	?_Read_b_eep,c
  9340  00100A  EC4B  F022         	call	_Read_b_eep	;wreg free
  9341  00100E  0100               	movlb	0	; () banked
  9342  001010  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  9343  001012  6A09               	clrf	?_Read_b_eep+1,c
  9344  001014  0E55               	movlw	85
  9345  001016  6E08               	movwf	?_Read_b_eep,c
  9346  001018  EC4B  F022         	call	_Read_b_eep	;wreg free
  9347  00101C  0100               	movlb	0	; () banked
  9348  00101E  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9349  001020  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9350  001022  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  9351  001024  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9352  001026  6F70               	movwf	_relay_pulse_timer& (0+255),b
  9353  001028  0E00               	movlw	0
  9354  00102A  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9355  00102C  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  9356                           
  9357                           ;main.c: 1405: break;
  9358  00102E  D134               	goto	l11097
  9359  001030                     l11027:
  9360                           
  9361                           ; BSR set to: 0
  9362                           ;main.c: 1408: relay_pulse_timer[ 1 ] =
  9363                           ;main.c: 1409: Read_b_eep(0x43 + 20) * 256 +
  9364                           ;main.c: 1410: Read_b_eep(0x43 + 21);
  9365  001030  6A09               	clrf	?_Read_b_eep+1,c
  9366  001032  0E58               	movlw	88
  9367  001034  6E08               	movwf	?_Read_b_eep,c
  9368  001036  EC4B  F022         	call	_Read_b_eep	;wreg free
  9369  00103A  0100               	movlb	0	; () banked
  9370  00103C  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  9371  00103E  6A09               	clrf	?_Read_b_eep+1,c
  9372  001040  0E57               	movlw	87
  9373  001042  6E08               	movwf	?_Read_b_eep,c
  9374  001044  EC4B  F022         	call	_Read_b_eep	;wreg free
  9375  001048  0100               	movlb	0	; () banked
  9376  00104A  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9377  00104C  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9378  00104E  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  9379  001050  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9380  001052  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  9381  001054  0E00               	movlw	0
  9382  001056  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9383  001058  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  9384                           
  9385                           ;main.c: 1411: break;
  9386  00105A  D11E               	goto	l11097
  9387  00105C                     l11029:
  9388                           
  9389                           ; BSR set to: 0
  9390                           ;main.c: 1414: relay_pulse_timer[ 2 ] =
  9391                           ;main.c: 1415: Read_b_eep(0x43 + 22) * 256 +
  9392                           ;main.c: 1416: Read_b_eep(0x43 + 23);
  9393  00105C  6A09               	clrf	?_Read_b_eep+1,c
  9394  00105E  0E5A               	movlw	90
  9395  001060  6E08               	movwf	?_Read_b_eep,c
  9396  001062  EC4B  F022         	call	_Read_b_eep	;wreg free
  9397  001066  0100               	movlb	0	; () banked
  9398  001068  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  9399  00106A  6A09               	clrf	?_Read_b_eep+1,c
  9400  00106C  0E59               	movlw	89
  9401  00106E  6E08               	movwf	?_Read_b_eep,c
  9402  001070  EC4B  F022         	call	_Read_b_eep	;wreg free
  9403  001074  0100               	movlb	0	; () banked
  9404  001076  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9405  001078  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9406  00107A  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  9407  00107C  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9408  00107E  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  9409  001080  0E00               	movlw	0
  9410  001082  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9411  001084  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  9412                           
  9413                           ;main.c: 1417: break;
  9414  001086  D108               	goto	l11097
  9415  001088                     l11031:
  9416                           
  9417                           ; BSR set to: 0
  9418                           ;main.c: 1420: relay_pulse_timer[ 3 ] =
  9419                           ;main.c: 1421: Read_b_eep(0x43 + 24) * 256 +
  9420                           ;main.c: 1422: Read_b_eep(0x43 + 25);
  9421  001088  6A09               	clrf	?_Read_b_eep+1,c
  9422  00108A  0E5C               	movlw	92
  9423  00108C  6E08               	movwf	?_Read_b_eep,c
  9424  00108E  EC4B  F022         	call	_Read_b_eep	;wreg free
  9425  001092  0100               	movlb	0	; () banked
  9426  001094  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  9427  001096  6A09               	clrf	?_Read_b_eep+1,c
  9428  001098  0E5B               	movlw	91
  9429  00109A  6E08               	movwf	?_Read_b_eep,c
  9430  00109C  EC4B  F022         	call	_Read_b_eep	;wreg free
  9431  0010A0  0100               	movlb	0	; () banked
  9432  0010A2  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9433  0010A4  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9434  0010A6  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  9435  0010A8  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9436  0010AA  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  9437  0010AC  0E00               	movlw	0
  9438  0010AE  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9439  0010B0  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  9440                           
  9441                           ;main.c: 1423: break;
  9442  0010B2  D0F2               	goto	l11097
  9443  0010B4                     l11033:
  9444                           
  9445                           ; BSR set to: 0
  9446                           ;main.c: 1426: relay_pulse_timer[ 4 ] =
  9447                           ;main.c: 1427: Read_b_eep(0x43 + 26) * 256 +
  9448                           ;main.c: 1428: Read_b_eep(0x43 + 27);
  9449  0010B4  6A09               	clrf	?_Read_b_eep+1,c
  9450  0010B6  0E5E               	movlw	94
  9451  0010B8  6E08               	movwf	?_Read_b_eep,c
  9452  0010BA  EC4B  F022         	call	_Read_b_eep	;wreg free
  9453  0010BE  0100               	movlb	0	; () banked
  9454  0010C0  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  9455  0010C2  6A09               	clrf	?_Read_b_eep+1,c
  9456  0010C4  0E5D               	movlw	93
  9457  0010C6  6E08               	movwf	?_Read_b_eep,c
  9458  0010C8  EC4B  F022         	call	_Read_b_eep	;wreg free
  9459  0010CC  0100               	movlb	0	; () banked
  9460  0010CE  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9461  0010D0  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9462  0010D2  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  9463  0010D4  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9464  0010D6  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9465  0010D8  0E00               	movlw	0
  9466  0010DA  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9467  0010DC  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9468                           
  9469                           ;main.c: 1429: break;
  9470  0010DE  D0DC               	goto	l11097
  9471  0010E0                     l11035:
  9472                           
  9473                           ; BSR set to: 0
  9474                           ;main.c: 1432: relay_pulse_timer[ 5 ] =
  9475                           ;main.c: 1433: Read_b_eep(0x43 + 28) * 256 +
  9476                           ;main.c: 1434: Read_b_eep(0x43 + 29);
  9477  0010E0  6A09               	clrf	?_Read_b_eep+1,c
  9478  0010E2  0E60               	movlw	96
  9479  0010E4  6E08               	movwf	?_Read_b_eep,c
  9480  0010E6  EC4B  F022         	call	_Read_b_eep	;wreg free
  9481  0010EA  0100               	movlb	0	; () banked
  9482  0010EC  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  9483  0010EE  6A09               	clrf	?_Read_b_eep+1,c
  9484  0010F0  0E5F               	movlw	95
  9485  0010F2  6E08               	movwf	?_Read_b_eep,c
  9486  0010F4  EC4B  F022         	call	_Read_b_eep	;wreg free
  9487  0010F8  0100               	movlb	0	; () banked
  9488  0010FA  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9489  0010FC  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9490  0010FE  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  9491  001100  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9492  001102  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9493  001104  0E00               	movlw	0
  9494  001106  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9495  001108  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9496                           
  9497                           ;main.c: 1435: break;
  9498  00110A  D0C6               	goto	l11097
  9499  00110C                     l11037:
  9500                           
  9501                           ; BSR set to: 0
  9502                           ;main.c: 1438: relay_pulse_timer[ 6 ] =
  9503                           ;main.c: 1439: Read_b_eep(0x43 + 30) * 256 +
  9504                           ;main.c: 1440: Read_b_eep(0x43 + 31);
  9505  00110C  6A09               	clrf	?_Read_b_eep+1,c
  9506  00110E  0E62               	movlw	98
  9507  001110  6E08               	movwf	?_Read_b_eep,c
  9508  001112  EC4B  F022         	call	_Read_b_eep	;wreg free
  9509  001116  0100               	movlb	0	; () banked
  9510  001118  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  9511  00111A  6A09               	clrf	?_Read_b_eep+1,c
  9512  00111C  0E61               	movlw	97
  9513  00111E  6E08               	movwf	?_Read_b_eep,c
  9514  001120  EC4B  F022         	call	_Read_b_eep	;wreg free
  9515  001124  0100               	movlb	0	; () banked
  9516  001126  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9517  001128  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9518  00112A  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  9519  00112C  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9520  00112E  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9521  001130  0E00               	movlw	0
  9522  001132  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9523  001134  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9524                           
  9525                           ;main.c: 1441: break;
  9526  001136  D0B0               	goto	l11097
  9527  001138                     l11039:
  9528                           
  9529                           ; BSR set to: 0
  9530                           ;main.c: 1444: relay_pulse_timer[ 7 ] =
  9531                           ;main.c: 1445: Read_b_eep(0x43 + 32) * 256 +
  9532                           ;main.c: 1446: Read_b_eep(0x43 + 33);
  9533  001138  6A09               	clrf	?_Read_b_eep+1,c
  9534  00113A  0E64               	movlw	100
  9535  00113C  6E08               	movwf	?_Read_b_eep,c
  9536  00113E  EC4B  F022         	call	_Read_b_eep	;wreg free
  9537  001142  0100               	movlb	0	; () banked
  9538  001144  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  9539  001146  6A09               	clrf	?_Read_b_eep+1,c
  9540  001148  0E63               	movlw	99
  9541  00114A  6E08               	movwf	?_Read_b_eep,c
  9542  00114C  EC4B  F022         	call	_Read_b_eep	;wreg free
  9543  001150  0100               	movlb	0	; () banked
  9544  001152  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9545  001154  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9546  001156  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  9547  001158  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9548  00115A  6F7E               	movwf	(_relay_pulse_timer+14)& (0+255),b
  9549  00115C  0E00               	movlw	0
  9550  00115E  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9551  001160  6F7F               	movwf	(_relay_pulse_timer+15)& (0+255),b
  9552                           
  9553                           ;main.c: 1447: break;
  9554  001162  D09A               	goto	l11097
  9555  001164                     l11043:
  9556                           
  9557                           ; BSR set to: 0
  9558  001164  51CF               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9559                           
  9560                           ; Switch size 1, requested type "speed"
  9561                           ; Number of cases is 8, Range of values is 19 to 33
  9562                           ; switch strategies available:
  9563                           ; Name         Instructions Cycles
  9564                           ; simple_byte           25    13 (average)
  9565                           ;	Chosen strategy is simple_byte
  9566  001166  0A13               	xorlw	19	; case 19
  9567  001168  E101 D74C          	bz	l11025
  9568  00116C  0A06               	xorlw	6	; case 21
  9569  00116E  E101 D75F          	bz	l11027
  9570  001172  0A02               	xorlw	2	; case 23
  9571  001174  E101 D772          	bz	l11029
  9572  001178  0A0E               	xorlw	14	; case 25
  9573  00117A  E086               	bz	l11031
  9574  00117C  0A02               	xorlw	2	; case 27
  9575  00117E  E09A               	bz	l11033
  9576  001180  0A06               	xorlw	6	; case 29
  9577  001182  E0AE               	bz	l11035
  9578  001184  0A02               	xorlw	2	; case 31
  9579  001186  E0C2               	bz	l11037
  9580  001188  0A3E               	xorlw	62	; case 33
  9581  00118A  E0D6               	bz	l11039
  9582  00118C  D085               	goto	l11097
  9583  00118E                     l11045:
  9584                           
  9585                           ; BSR set to: 0
  9586                           ;main.c: 1455: else if ( ( reg >= 34 ) &&
  9587                           ;main.c: 1456: ( reg <= 49 ) ) {
  9588  00118E  0E21               	movlw	33
  9589  001190  65CF               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9590  001192  D04D               	goto	l11075
  9591                           
  9592                           ; BSR set to: 0
  9593  001194  0E32               	movlw	50
  9594  001196  61CF               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9595  001198  D04A               	goto	l11075
  9596                           
  9597                           ; BSR set to: 0
  9598                           ;main.c: 1459: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9599  00119A  EC7F  F022         	call	_Busy_eep	;wreg free
  9600  00119E  0E43               	movlw	67
  9601  0011A0  0100               	movlb	0	; () banked
  9602  0011A2  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9603  0011A4  6E08               	movwf	?_Write_b_eep,c
  9604  0011A6  6A09               	clrf	?_Write_b_eep+1,c
  9605  0011A8  0E00               	movlw	0
  9606  0011AA  2209               	addwfc	?_Write_b_eep+1,f,c
  9607  0011AC  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9608  0011B0  EC7C  F020         	call	_Write_b_eep	;wreg free
  9609                           
  9610                           ;main.c: 1460: rv = Read_b_eep(0x43 + reg);
  9611  0011B4  0E43               	movlw	67
  9612  0011B6  0100               	movlb	0	; () banked
  9613  0011B8  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9614  0011BA  6E08               	movwf	?_Read_b_eep,c
  9615  0011BC  6A09               	clrf	?_Read_b_eep+1,c
  9616  0011BE  0E00               	movlw	0
  9617  0011C0  2209               	addwfc	?_Read_b_eep+1,f,c
  9618  0011C2  EC4B  F022         	call	_Read_b_eep	;wreg free
  9619  0011C6  0100               	movlb	0	; () banked
  9620  0011C8  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9621                           
  9622                           ;main.c: 1462: switch ( reg ) {
  9623  0011CA  D016               	goto	l11073
  9624  0011CC                     l11069:
  9625                           
  9626                           ; BSR set to: 0
  9627                           ;main.c: 1507: relay_protection_timer[ 7 ] =
  9628                           ;main.c: 1508: Read_b_eep(0x43 + 48) * 256 +
  9629                           ;main.c: 1509: Read_b_eep(0x43 + 49);
  9630  0011CC  6A09               	clrf	?_Read_b_eep+1,c
  9631  0011CE  0E74               	movlw	116
  9632  0011D0  6E08               	movwf	?_Read_b_eep,c
  9633  0011D2  EC4B  F022         	call	_Read_b_eep	;wreg free
  9634  0011D6  0100               	movlb	0	; () banked
  9635  0011D8  6FC8               	movwf	??_vscp_writeAppReg& (0+255),b
  9636  0011DA  6A09               	clrf	?_Read_b_eep+1,c
  9637  0011DC  0E73               	movlw	115
  9638  0011DE  6E08               	movwf	?_Read_b_eep,c
  9639  0011E0  EC4B  F022         	call	_Read_b_eep	;wreg free
  9640  0011E4  0100               	movlb	0	; () banked
  9641  0011E6  6FCA               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9642  0011E8  6BC9               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9643  0011EA  51C8               	movf	??_vscp_writeAppReg& (0+255),w,b
  9644  0011EC  25C9               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9645  0011EE  6F6E               	movwf	(_relay_protection_timer+14)& (0+255),b
  9646  0011F0  0E00               	movlw	0
  9647  0011F2  21CA               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9648  0011F4  6F6F               	movwf	(_relay_protection_timer+15)& (0+255),b
  9649                           
  9650                           ;main.c: 1510: break;
  9651  0011F6  D050               	goto	l11097
  9652  0011F8                     l11073:
  9653                           
  9654                           ; BSR set to: 0
  9655  0011F8  51CF               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9656                           
  9657                           ; Switch size 1, requested type "speed"
  9658                           ; Number of cases is 8, Range of values is 35 to 49
  9659                           ; switch strategies available:
  9660                           ; Name         Instructions Cycles
  9661                           ; simple_byte           25    13 (average)
  9662                           ;	Chosen strategy is simple_byte
  9663  0011FA  0A23               	xorlw	35	; case 35
  9664  0011FC  E102 EFC3  F004    	bz	l10705
  9665  001202  0A06               	xorlw	6	; case 37
  9666  001204  E102 EFFA  F004    	bz	l10725
  9667  00120A  0A02               	xorlw	2	; case 39
  9668  00120C  E101 D41D          	bz	l10745
  9669  001210  0A0E               	xorlw	14	; case 41
  9670  001212  E101 D44E          	bz	l10765
  9671  001216  0A02               	xorlw	2	; case 43
  9672  001218  E101 D47D          	bz	l10785
  9673  00121C  0A06               	xorlw	6	; case 45
  9674  00121E  E101 D4AC          	bz	l10805
  9675  001222  0A02               	xorlw	2	; case 47
  9676  001224  E101 D4DB          	bz	l10825
  9677  001228  0A1E               	xorlw	30	; case 49
  9678  00122A  E0D0               	bz	l11069
  9679  00122C  D035               	goto	l11097
  9680  00122E                     l11075:
  9681                           
  9682                           ; BSR set to: 0
  9683                           ;main.c: 1518: else if ( (reg >= 50 ) && (reg <= 65) ) {
  9684  00122E  0E31               	movlw	49
  9685  001230  65CF               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9686  001232  D01C               	goto	l11085
  9687                           
  9688                           ; BSR set to: 0
  9689  001234  0E42               	movlw	66
  9690  001236  61CF               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9691  001238  D019               	goto	l11085
  9692                           
  9693                           ; BSR set to: 0
  9694                           ;main.c: 1521: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9695  00123A  EC7F  F022         	call	_Busy_eep	;wreg free
  9696  00123E  0E43               	movlw	67
  9697  001240  0100               	movlb	0	; () banked
  9698  001242  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9699  001244  6E08               	movwf	?_Write_b_eep,c
  9700  001246  6A09               	clrf	?_Write_b_eep+1,c
  9701  001248  0E00               	movlw	0
  9702  00124A  2209               	addwfc	?_Write_b_eep+1,f,c
  9703  00124C  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9704  001250  EC7C  F020         	call	_Write_b_eep	;wreg free
  9705  001254                     l11083:
  9706                           
  9707                           ;main.c: 1522: rv = Read_b_eep(0x43 + reg);
  9708  001254  0E43               	movlw	67
  9709  001256  0100               	movlb	0	; () banked
  9710  001258  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9711  00125A  6E08               	movwf	?_Read_b_eep,c
  9712  00125C  6A09               	clrf	?_Read_b_eep+1,c
  9713  00125E  0E00               	movlw	0
  9714  001260  2209               	addwfc	?_Read_b_eep+1,f,c
  9715  001262  EC4B  F022         	call	_Read_b_eep	;wreg free
  9716  001266                     L27:
  9717  001266  0100               	movlb	0	; () banked
  9718  001268  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9719                           
  9720                           ;main.c: 1524: }
  9721  00126A  D016               	goto	l11097
  9722  00126C                     l11085:
  9723                           
  9724                           ; BSR set to: 0
  9725                           ;main.c: 1525: else if ( (reg >= 72) &&
  9726                           ;main.c: 1526: (reg < (72 + 7 * 8)) ) {
  9727  00126C  0E47               	movlw	71
  9728  00126E  65CF               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9729  001270  D013               	goto	l11097
  9730                           
  9731                           ; BSR set to: 0
  9732  001272  0E80               	movlw	128
  9733  001274  61CF               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9734  001276  D010               	goto	l11097
  9735                           
  9736                           ; BSR set to: 0
  9737                           ;main.c: 1527: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9738  001278  EC7F  F022         	call	_Busy_eep	;wreg free
  9739  00127C  0E43               	movlw	67
  9740  00127E  0100               	movlb	0	; () banked
  9741  001280  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9742  001282  6E08               	movwf	?_Write_b_eep,c
  9743  001284  6A09               	clrf	?_Write_b_eep+1,c
  9744  001286  0E00               	movlw	0
  9745  001288  2209               	addwfc	?_Write_b_eep+1,f,c
  9746  00128A  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9747  00128E  EC7C  F020         	call	_Write_b_eep	;wreg free
  9748                           
  9749                           ;main.c: 1528: calculateSetFilterMask();
  9750  001292  ECA4  F00C         	call	_calculateSetFilterMask	;wreg free
  9751  001296  D7DE               	goto	l11083
  9752  001298                     l11097:
  9753                           
  9754                           ; BSR set to: 0
  9755                           ;main.c: 1530: }
  9756                           ;main.c: 1536: if ( bInfoEvent ) {
  9757  001298  51CB               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
  9758  00129A  E035               	bz	l11117
  9759                           
  9760                           ; BSR set to: 0
  9761                           ;main.c: 1538: unsigned char val;
  9762                           ;main.c: 1539: val = Read_b_eep(0x43 + 10 + (reg - 2));
  9763  00129C  0E4B               	movlw	75
  9764  00129E  25CF               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9765  0012A0  6E08               	movwf	?_Read_b_eep,c
  9766  0012A2  6A09               	clrf	?_Read_b_eep+1,c
  9767  0012A4  0E00               	movlw	0
  9768  0012A6  2209               	addwfc	?_Read_b_eep+1,f,c
  9769  0012A8  EC4B  F022         	call	_Read_b_eep	;wreg free
  9770  0012AC  0100               	movlb	0	; () banked
  9771  0012AE  6FCC               	movwf	vscp_writeAppReg@val_682& (0+255),b
  9772                           
  9773                           ; BSR set to: 0
  9774                           ;main.c: 1542: if ( bOn ) {
  9775  0012B0  51CE               	movf	vscp_writeAppReg@bOn& (0+255),w,b
  9776  0012B2  E015               	bz	l404
  9777                           
  9778                           ; BSR set to: 0
  9779                           ;main.c: 1544: if ( val & 0x08 ) {
  9780  0012B4  A7CC               	btfss	vscp_writeAppReg@val_682& (0+255),3,b
  9781  0012B6  D008               	goto	l11107
  9782                           
  9783                           ; BSR set to: 0
  9784                           ;main.c: 1545: SendInformationEvent( reg - 2,
  9785                           ;main.c: 1546: 20,
  9786                           ;main.c: 1547: 3 );
  9787  0012B8  0E14               	movlw	20
  9788  0012BA  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  9789  0012BC  0E03               	movlw	3
  9790  0012BE  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9791  0012C0  51CF               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9792  0012C2  0FFE               	addlw	254
  9793  0012C4  EC9A  F01F         	call	_SendInformationEvent
  9794  0012C8                     l11107:
  9795                           
  9796                           ; BSR set to: 0
  9797                           ;main.c: 1548: }
  9798                           ;main.c: 1550: if ( val & 0x20 ) {
  9799  0012C8  ABCC               	btfss	vscp_writeAppReg@val_682& (0+255),5,b
  9800  0012CA  D01D               	goto	l11117
  9801                           
  9802                           ; BSR set to: 0
  9803                           ;main.c: 1551: SendInformationEvent( reg - 2,
  9804                           ;main.c: 1552: 20,
  9805                           ;main.c: 1553: 25 );
  9806  0012CC  0E14               	movlw	20
  9807  0012CE  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  9808  0012D0  0E19               	movlw	25
  9809  0012D2  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9810  0012D4  51CF               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9811  0012D6  0FFE               	addlw	254
  9812  0012D8  EC9A  F01F         	call	_SendInformationEvent
  9813  0012DC  D014               	goto	l11117
  9814  0012DE                     l404:
  9815                           
  9816                           ; BSR set to: 0
  9817                           ;main.c: 1557: else {
  9818                           ;main.c: 1559: if ( val & 0x10 ) {
  9819  0012DE  A9CC               	btfss	vscp_writeAppReg@val_682& (0+255),4,b
  9820  0012E0  D008               	goto	l11113
  9821                           
  9822                           ; BSR set to: 0
  9823                           ;main.c: 1560: SendInformationEvent( reg - 2,
  9824                           ;main.c: 1561: 20,
  9825                           ;main.c: 1562: 4 );
  9826  0012E2  0E14               	movlw	20
  9827  0012E4  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  9828  0012E6  0E04               	movlw	4
  9829  0012E8  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9830  0012EA  51CF               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9831  0012EC  0FFE               	addlw	254
  9832  0012EE  EC9A  F01F         	call	_SendInformationEvent
  9833  0012F2                     l11113:
  9834                           
  9835                           ; BSR set to: 0
  9836                           ;main.c: 1563: }
  9837                           ;main.c: 1565: if ( val & 0x40 ) {
  9838  0012F2  ADCC               	btfss	vscp_writeAppReg@val_682& (0+255),6,b
  9839  0012F4  D008               	goto	l11117
  9840                           
  9841                           ; BSR set to: 0
  9842                           ;main.c: 1566: SendInformationEvent( reg - 2,
  9843                           ;main.c: 1567: 20,
  9844                           ;main.c: 1568: 24 );
  9845  0012F6  0E14               	movlw	20
  9846  0012F8  6FC6               	movwf	?_SendInformationEvent& (0+255),b
  9847  0012FA  0E18               	movlw	24
  9848  0012FC  6FC7               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9849  0012FE  51CF               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9850  001300  0FFE               	addlw	254
  9851  001302  EC9A  F01F         	call	_SendInformationEvent
  9852  001306                     l11117:
  9853                           
  9854                           ; BSR set to: 0
  9855                           ;main.c: 1569: }
  9856                           ;main.c: 1570: }
  9857                           ;main.c: 1571: }
  9858                           ;main.c: 1573: return rv;
  9859  001306  51CD               	movf	vscp_writeAppReg@rv& (0+255),w,b
  9860                           
  9861                           ; BSR set to: 0
  9862  001308  0012               	return	
  9863  00130A                     __end_of_vscp_writeAppReg:
  9864                           	opt stack 0
  9865                           tblptru	equ	0xFF8
  9866                           prodh	equ	0xFF4
  9867                           prodl	equ	0xFF3
  9868                           postinc0	equ	0xFEE
  9869                           wreg	equ	0xFE8
  9870                           indf2	equ	0xFDF
  9871                           postinc2	equ	0xFDE
  9872                           postdec2	equ	0xFDD
  9873                           fsr2h	equ	0xFDA
  9874                           fsr2l	equ	0xFD9
  9875                           status	equ	0xFD8
  9876                           
  9877 ;; *************** function _SendInformationEvent *****************
  9878 ;; Defined at:
  9879 ;;		line 1603 in file "../main.c"
  9880 ;; Parameters:    Size  Location     Type
  9881 ;;  idx             1    wreg     unsigned char 
  9882 ;;  eventClass      1   20[BANK0 ] unsigned char 
  9883 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
  9884 ;; Auto vars:     Size  Location     Type
  9885 ;;  idx             1   79[COMRAM] unsigned char 
  9886 ;;  data            3   76[COMRAM] unsigned char [3]
  9887 ;; Return value:  Size  Location     Type
  9888 ;;		None               void
  9889 ;; Registers used:
  9890 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9891 ;; Tracked objects:
  9892 ;;		On entry : F/0
  9893 ;;		On exit  : F/0
  9894 ;;		Unchanged: 0/0
  9895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9896 ;;      Params:         0       2       0       0       0       0       0
  9897 ;;      Locals:         4       0       0       0       0       0       0
  9898 ;;      Temps:          2       0       0       0       0       0       0
  9899 ;;      Totals:         6       2       0       0       0       0       0
  9900 ;;Total ram usage:        8 bytes
  9901 ;; Hardware stack levels used:    1
  9902 ;; Hardware stack levels required when called:    6
  9903 ;; This function calls:
  9904 ;;		_Read_b_eep
  9905 ;;		_sendVSCPFrame
  9906 ;; This function is called by:
  9907 ;;		_doApplicationOneSecondWork
  9908 ;;		_vscp_writeAppReg
  9909 ;;		_doActionOn
  9910 ;;		_doActionOff
  9911 ;;		_doActionStatus
  9912 ;;		_doActionToggle
  9913 ;; This function uses a non-reentrant model
  9914 ;;
  9915                           
  9916                           	psect	text25
  9917  003F34                     __ptext25:
  9918                           	opt stack 0
  9919  003F34                     _SendInformationEvent:
  9920                           	opt stack 23
  9921                           
  9922                           ; BSR set to: 0
  9923                           ;incstack = 0
  9924                           ;incstack = 0
  9925                           ;SendInformationEvent@idx stored from wreg
  9926  003F34  CFE8 F050          	movff	wreg,SendInformationEvent@idx
  9927                           
  9928                           ; BSR set to: 0
  9929                           ;main.c: 1604: uint8_t data[3];
  9930                           ;main.c: 1617: data[ 0 ] = idx;
  9931  003F38  C050  F04D         	movff	SendInformationEvent@idx,SendInformationEvent@data
  9932                           
  9933                           ; BSR set to: 0
  9934                           ;main.c: 1618: data[ 1 ] = Read_b_eep(0x43 + 50 + 2*idx);
  9935  003F3C  90D8               	bcf	status,0,c
  9936  003F3E  3450               	rlcf	SendInformationEvent@idx,w,c
  9937  003F40  6E4B               	movwf	??_SendInformationEvent& (0+255),c
  9938  003F42  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
  9939  003F44  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
  9940  003F46  0E75               	movlw	117
  9941  003F48  244B               	addwf	??_SendInformationEvent,w,c
  9942  003F4A  6E08               	movwf	?_Read_b_eep,c
  9943  003F4C  0E00               	movlw	0
  9944  003F4E  204C               	addwfc	??_SendInformationEvent+1,w,c
  9945  003F50  6E09               	movwf	?_Read_b_eep+1,c
  9946  003F52  EC4B  F022         	call	_Read_b_eep	;wreg free
  9947  003F56  6E4E               	movwf	SendInformationEvent@data+1,c
  9948                           
  9949                           ;main.c: 1619: data[ 2 ] = Read_b_eep(0x43 + 51 + 2*idx);
  9950  003F58  90D8               	bcf	status,0,c
  9951  003F5A  3450               	rlcf	SendInformationEvent@idx,w,c
  9952  003F5C  6E4B               	movwf	??_SendInformationEvent& (0+255),c
  9953  003F5E  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
  9954  003F60  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
  9955  003F62  0E76               	movlw	118
  9956  003F64  244B               	addwf	??_SendInformationEvent,w,c
  9957  003F66  6E08               	movwf	?_Read_b_eep,c
  9958  003F68  0E00               	movlw	0
  9959  003F6A  204C               	addwfc	??_SendInformationEvent+1,w,c
  9960  003F6C  6E09               	movwf	?_Read_b_eep+1,c
  9961  003F6E  EC4B  F022         	call	_Read_b_eep	;wreg free
  9962  003F72  6E4F               	movwf	SendInformationEvent@data+2,c
  9963                           
  9964                           ;main.c: 1620: sendVSCPFrame( eventClass,
  9965                           ;main.c: 1621: eventTypeId,
  9966                           ;main.c: 1622: vscp_nickname,
  9967                           ;main.c: 1623: 0x03,
  9968                           ;main.c: 1624: 3,
  9969                           ;main.c: 1625: data );
  9970  003F74  0100               	movlb	0	; () banked
  9971  003F76  C0C6  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
  9972  003F7A  6A40               	clrf	?_sendVSCPFrame+1,c
  9973  003F7C  C0C7  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
  9974  003F80  C092  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  9975  003F84  0E03               	movlw	3
  9976  003F86  6E43               	movwf	?_sendVSCPFrame+4,c
  9977  003F88  6E44               	movwf	?_sendVSCPFrame+5,c
  9978  003F8A  0E4D               	movlw	low SendInformationEvent@data
  9979  003F8C  6E45               	movwf	?_sendVSCPFrame+6,c
  9980  003F8E  0E00               	movlw	high SendInformationEvent@data
  9981  003F90  6E46               	movwf	?_sendVSCPFrame+7,c
  9982  003F92  0E0F               	movlw	15
  9983  003F94  6E46               	movwf	?_sendVSCPFrame+7,c
  9984  003F96  0E5F               	movlw	__accesstop+-1
  9985  003F98  6445               	cpfsgt	?_sendVSCPFrame+6,c
  9986  003F9A  6A46               	clrf	?_sendVSCPFrame+7,c
  9987  003F9C  EFD3  F01D         	goto	_sendVSCPFrame	;wreg free
  9988  003FA0                     __end_of_SendInformationEvent:
  9989                           	opt stack 0
  9990                           tblptru	equ	0xFF8
  9991                           prodh	equ	0xFF4
  9992                           prodl	equ	0xFF3
  9993                           postinc0	equ	0xFEE
  9994                           wreg	equ	0xFE8
  9995                           indf2	equ	0xFDF
  9996                           postinc2	equ	0xFDE
  9997                           postdec2	equ	0xFDD
  9998                           fsr2h	equ	0xFDA
  9999                           fsr2l	equ	0xFD9
 10000                           status	equ	0xFD8
 10001                           
 10002 ;; *************** function _calculateSetFilterMask *****************
 10003 ;; Defined at:
 10004 ;;		line 2686 in file "../main.c"
 10005 ;; Parameters:    Size  Location     Type
 10006 ;;		None
 10007 ;; Auto vars:     Size  Location     Type
 10008 ;;  rowfilter       4   61[COMRAM] unsigned long 
 10009 ;;  filter          4   57[COMRAM] unsigned long 
 10010 ;;  mask            4   53[COMRAM] unsigned long 
 10011 ;;  rowmask         4   48[COMRAM] unsigned long 
 10012 ;;  i               1   66[COMRAM] unsigned char 
 10013 ;;  j               1   65[COMRAM] unsigned char 
 10014 ;;  lastOID         1   52[COMRAM] unsigned char 
 10015 ;; Return value:  Size  Location     Type
 10016 ;;		None               void
 10017 ;; Registers used:
 10018 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10019 ;; Tracked objects:
 10020 ;;		On entry : 0/0
 10021 ;;		On exit  : 0/0
 10022 ;;		Unchanged: 0/0
 10023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10024 ;;      Params:         0       0       0       0       0       0       0
 10025 ;;      Locals:        19       0       0       0       0       0       0
 10026 ;;      Temps:         31       0       0       0       0       0       0
 10027 ;;      Totals:        50       0       0       0       0       0       0
 10028 ;;Total ram usage:       50 bytes
 10029 ;; Hardware stack levels used:    1
 10030 ;; Hardware stack levels required when called:    3
 10031 ;; This function calls:
 10032 ;;		_Read_b_eep
 10033 ;;		_ECANSetOperationMode
 10034 ;;		__CANIDToRegs
 10035 ;; This function is called by:
 10036 ;;		_main
 10037 ;;		_init_app_eeprom
 10038 ;;		_vscp_writeAppReg
 10039 ;; This function uses a non-reentrant model
 10040 ;;
 10041                           
 10042                           	psect	text26
 10043  001948                     __ptext26:
 10044                           	opt stack 0
 10045  001948                     _calculateSetFilterMask:
 10046                           	opt stack 23
 10047                           
 10048                           ;main.c: 2687: uint8_t i,j;
 10049                           ;main.c: 2688: uint8_t lastOID;
 10050                           ;main.c: 2689: uint32_t rowmask;
 10051                           ;main.c: 2690: uint32_t rowfilter;
 10052                           ;main.c: 2693: uint32_t mask = 0xffffffff;
 10053                           
 10054                           ; BSR set to: 0
 10055                           ;incstack = 0
 10056                           ;incstack = 0
 10057  001948  6836               	setf	calculateSetFilterMask@mask,c
 10058  00194A  6837               	setf	calculateSetFilterMask@mask+1,c
 10059  00194C  6838               	setf	calculateSetFilterMask@mask+2,c
 10060  00194E  6839               	setf	calculateSetFilterMask@mask+3,c
 10061                           
 10062                           ;main.c: 2694: uint32_t filter = 0x00000000;
 10063  001950  6A3A               	clrf	calculateSetFilterMask@filter,c
 10064  001952  6A3B               	clrf	calculateSetFilterMask@filter+1,c
 10065  001954  6A3C               	clrf	calculateSetFilterMask@filter+2,c
 10066  001956  6A3D               	clrf	calculateSetFilterMask@filter+3,c
 10067                           
 10068                           ;main.c: 2697: for ( i=0; i < 7; i++ ) {
 10069  001958  6A43               	clrf	calculateSetFilterMask@i,c
 10070  00195A                     l7945:
 10071                           
 10072                           ;main.c: 2700: if ( Read_b_eep(0x43 + 8*i + 1) & 0x80 ) {
 10073  00195A  5043               	movf	calculateSetFilterMask@i,w,c
 10074  00195C  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10075  00195E  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10076  001960  90D8               	bcf	status,0,c
 10077  001962  3612               	rlcf	??_calculateSetFilterMask,f,c
 10078  001964  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10079  001966  90D8               	bcf	status,0,c
 10080  001968  3612               	rlcf	??_calculateSetFilterMask,f,c
 10081  00196A  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10082  00196C  90D8               	bcf	status,0,c
 10083  00196E  3612               	rlcf	??_calculateSetFilterMask,f,c
 10084  001970  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10085  001972  0E44               	movlw	68
 10086  001974  2412               	addwf	??_calculateSetFilterMask,w,c
 10087  001976  6E08               	movwf	?_Read_b_eep,c
 10088  001978  0E00               	movlw	0
 10089  00197A  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10090  00197C  6E09               	movwf	?_Read_b_eep+1,c
 10091  00197E  EC4B  F022         	call	_Read_b_eep	;wreg free
 10092  001982  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10093  001984  AE14               	btfss	??_calculateSetFilterMask+2,7,c
 10094  001986  D1E8               	goto	l7989
 10095                           
 10096                           ;main.c: 2709: rowmask =
 10097                           ;main.c: 2711: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 0x02 ) << 23 ) |
 10098                           ;main.c: 2713: ( (uint32_t)Read_b_eep(0x43 + 8*i + 2) << 16 ) |
 10099                           ;main.c: 2715: ( (uint32_t)Read_b_eep(0x43 + 8*i + 4) << 8 ) |
 10100                           ;main.c: 2719: 0xff;
 10101  001988  5043               	movf	calculateSetFilterMask@i,w,c
 10102  00198A  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10103  00198C  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10104  00198E  90D8               	bcf	status,0,c
 10105  001990  3612               	rlcf	??_calculateSetFilterMask,f,c
 10106  001992  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10107  001994  90D8               	bcf	status,0,c
 10108  001996  3612               	rlcf	??_calculateSetFilterMask,f,c
 10109  001998  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10110  00199A  90D8               	bcf	status,0,c
 10111  00199C  3612               	rlcf	??_calculateSetFilterMask,f,c
 10112  00199E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10113  0019A0  0E47               	movlw	71
 10114  0019A2  2412               	addwf	??_calculateSetFilterMask,w,c
 10115  0019A4  6E08               	movwf	?_Read_b_eep,c
 10116  0019A6  0E00               	movlw	0
 10117  0019A8  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10118  0019AA  6E09               	movwf	?_Read_b_eep+1,c
 10119  0019AC  EC4B  F022         	call	_Read_b_eep	;wreg free
 10120  0019B0  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10121  0019B2  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 10122  0019B6  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 10123  0019B8  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10124  0019BA  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 10125  0019BC  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 10126  0019C0  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 10127  0019C4  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 10128  0019C8  6A15               	clrf	??_calculateSetFilterMask+3,c
 10129  0019CA  5043               	movf	calculateSetFilterMask@i,w,c
 10130  0019CC  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 10131  0019CE  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 10132  0019D0  90D8               	bcf	status,0,c
 10133  0019D2  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10134  0019D4  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10135  0019D6  90D8               	bcf	status,0,c
 10136  0019D8  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10137  0019DA  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10138  0019DC  90D8               	bcf	status,0,c
 10139  0019DE  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10140  0019E0  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10141  0019E2  0E45               	movlw	69
 10142  0019E4  2419               	addwf	??_calculateSetFilterMask+7,w,c
 10143  0019E6  6E08               	movwf	?_Read_b_eep,c
 10144  0019E8  0E00               	movlw	0
 10145  0019EA  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 10146  0019EC  6E09               	movwf	?_Read_b_eep+1,c
 10147  0019EE  EC4B  F022         	call	_Read_b_eep	;wreg free
 10148  0019F2  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 10149  0019F4  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 10150  0019F8  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 10151  0019FA  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 10152  0019FC  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 10153  0019FE  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 10154  001A02  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 10155  001A06  6A1D               	clrf	??_calculateSetFilterMask+11,c
 10156  001A08  6A1C               	clrf	??_calculateSetFilterMask+10,c
 10157  001A0A  5043               	movf	calculateSetFilterMask@i,w,c
 10158  001A0C  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 10159  001A0E  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 10160  001A10  90D8               	bcf	status,0,c
 10161  001A12  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10162  001A14  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10163  001A16  90D8               	bcf	status,0,c
 10164  001A18  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10165  001A1A  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10166  001A1C  90D8               	bcf	status,0,c
 10167  001A1E  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10168  001A20  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10169  001A22  0E44               	movlw	68
 10170  001A24  2420               	addwf	??_calculateSetFilterMask+14,w,c
 10171  001A26  6E08               	movwf	?_Read_b_eep,c
 10172  001A28  0E00               	movlw	0
 10173  001A2A  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 10174  001A2C  6E09               	movwf	?_Read_b_eep+1,c
 10175  001A2E  EC4B  F022         	call	_Read_b_eep	;wreg free
 10176  001A32  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 10177  001A34  0E02               	movlw	2
 10178  001A36  1622               	andwf	??_calculateSetFilterMask+16,f,c
 10179  001A38  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 10180  001A3C  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 10181  001A3E  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 10182  001A40  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 10183  001A42  0E17               	movlw	23
 10184  001A44                     u8315:
 10185  001A44  90D8               	bcf	status,0,c
 10186  001A46  3623               	rlcf	??_calculateSetFilterMask+17,f,c
 10187  001A48  3624               	rlcf	??_calculateSetFilterMask+18,f,c
 10188  001A4A  3625               	rlcf	??_calculateSetFilterMask+19,f,c
 10189  001A4C  3626               	rlcf	??_calculateSetFilterMask+20,f,c
 10190  001A4E  2EE8               	decfsz	wreg,f,c
 10191  001A50  D7F9               	goto	u8315
 10192  001A52  501C               	movf	??_calculateSetFilterMask+10,w,c
 10193  001A54  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 10194  001A56  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 10195  001A58  501D               	movf	??_calculateSetFilterMask+11,w,c
 10196  001A5A  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 10197  001A5C  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 10198  001A5E  501E               	movf	??_calculateSetFilterMask+12,w,c
 10199  001A60  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 10200  001A62  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 10201  001A64  501F               	movf	??_calculateSetFilterMask+13,w,c
 10202  001A66  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 10203  001A68  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 10204  001A6A  5015               	movf	??_calculateSetFilterMask+3,w,c
 10205  001A6C  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 10206  001A6E  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 10207  001A70  5016               	movf	??_calculateSetFilterMask+4,w,c
 10208  001A72  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 10209  001A74  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 10210  001A76  5017               	movf	??_calculateSetFilterMask+5,w,c
 10211  001A78  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 10212  001A7A  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 10213  001A7C  5018               	movf	??_calculateSetFilterMask+6,w,c
 10214  001A7E  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10215  001A80  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10216  001A82  0EFF               	movlw	255
 10217  001A84  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10218  001A86  6E31               	movwf	calculateSetFilterMask@rowmask,c
 10219  001A88  502C               	movf	??_calculateSetFilterMask+26,w,c
 10220  001A8A  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
 10221  001A8C  502D               	movf	??_calculateSetFilterMask+27,w,c
 10222  001A8E  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
 10223  001A90  502E               	movf	??_calculateSetFilterMask+28,w,c
 10224  001A92  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
 10225                           
 10226                           ;main.c: 2725: rowfilter =
 10227                           ;main.c: 2727: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 0x01 ) << 24 ) |
 10228                           ;main.c: 2729: ( (uint32_t)Read_b_eep(0x43 + 8*i + 3) << 16 ) |
 10229                           ;main.c: 2731: ( (uint32_t)Read_b_eep(0x43 + 8*i + 5) << 8 ) |
 10230                           ;main.c: 2734: Read_b_eep(0x43 + 8*i);
 10231  001A94  5043               	movf	calculateSetFilterMask@i,w,c
 10232  001A96  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10233  001A98  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10234  001A9A  90D8               	bcf	status,0,c
 10235  001A9C  3612               	rlcf	??_calculateSetFilterMask,f,c
 10236  001A9E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10237  001AA0  90D8               	bcf	status,0,c
 10238  001AA2  3612               	rlcf	??_calculateSetFilterMask,f,c
 10239  001AA4  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10240  001AA6  90D8               	bcf	status,0,c
 10241  001AA8  3612               	rlcf	??_calculateSetFilterMask,f,c
 10242  001AAA  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10243  001AAC  0E48               	movlw	72
 10244  001AAE  2412               	addwf	??_calculateSetFilterMask,w,c
 10245  001AB0  6E08               	movwf	?_Read_b_eep,c
 10246  001AB2  0E00               	movlw	0
 10247  001AB4  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10248  001AB6  6E09               	movwf	?_Read_b_eep+1,c
 10249  001AB8  EC4B  F022         	call	_Read_b_eep	;wreg free
 10250  001ABC  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10251  001ABE  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 10252  001AC2  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 10253  001AC4  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10254  001AC6  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 10255  001AC8  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 10256  001ACC  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 10257  001AD0  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 10258  001AD4  6A15               	clrf	??_calculateSetFilterMask+3,c
 10259  001AD6  5043               	movf	calculateSetFilterMask@i,w,c
 10260  001AD8  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 10261  001ADA  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 10262  001ADC  90D8               	bcf	status,0,c
 10263  001ADE  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10264  001AE0  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10265  001AE2  90D8               	bcf	status,0,c
 10266  001AE4  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10267  001AE6  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10268  001AE8  90D8               	bcf	status,0,c
 10269  001AEA  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10270  001AEC  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10271  001AEE  0E46               	movlw	70
 10272  001AF0  2419               	addwf	??_calculateSetFilterMask+7,w,c
 10273  001AF2  6E08               	movwf	?_Read_b_eep,c
 10274  001AF4  0E00               	movlw	0
 10275  001AF6  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 10276  001AF8  6E09               	movwf	?_Read_b_eep+1,c
 10277  001AFA  EC4B  F022         	call	_Read_b_eep	;wreg free
 10278  001AFE  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 10279  001B00  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 10280  001B04  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 10281  001B06  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 10282  001B08  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 10283  001B0A  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 10284  001B0E  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 10285  001B12  6A1D               	clrf	??_calculateSetFilterMask+11,c
 10286  001B14  6A1C               	clrf	??_calculateSetFilterMask+10,c
 10287  001B16  5043               	movf	calculateSetFilterMask@i,w,c
 10288  001B18  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 10289  001B1A  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 10290  001B1C  90D8               	bcf	status,0,c
 10291  001B1E  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10292  001B20  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10293  001B22  90D8               	bcf	status,0,c
 10294  001B24  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10295  001B26  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10296  001B28  90D8               	bcf	status,0,c
 10297  001B2A  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10298  001B2C  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10299  001B2E  0E44               	movlw	68
 10300  001B30  2420               	addwf	??_calculateSetFilterMask+14,w,c
 10301  001B32  6E08               	movwf	?_Read_b_eep,c
 10302  001B34  0E00               	movlw	0
 10303  001B36  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 10304  001B38  6E09               	movwf	?_Read_b_eep+1,c
 10305  001B3A  EC4B  F022         	call	_Read_b_eep	;wreg free
 10306  001B3E  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 10307  001B40  0E01               	movlw	1
 10308  001B42  1622               	andwf	??_calculateSetFilterMask+16,f,c
 10309  001B44  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 10310  001B48  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 10311  001B4A  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 10312  001B4C  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 10313  001B4E  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
 10314  001B52  6A25               	clrf	??_calculateSetFilterMask+19,c
 10315  001B54  6A24               	clrf	??_calculateSetFilterMask+18,c
 10316  001B56  6A23               	clrf	??_calculateSetFilterMask+17,c
 10317  001B58  501C               	movf	??_calculateSetFilterMask+10,w,c
 10318  001B5A  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 10319  001B5C  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 10320  001B5E  501D               	movf	??_calculateSetFilterMask+11,w,c
 10321  001B60  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 10322  001B62  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 10323  001B64  501E               	movf	??_calculateSetFilterMask+12,w,c
 10324  001B66  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 10325  001B68  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 10326  001B6A  501F               	movf	??_calculateSetFilterMask+13,w,c
 10327  001B6C  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 10328  001B6E  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 10329  001B70  5015               	movf	??_calculateSetFilterMask+3,w,c
 10330  001B72  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 10331  001B74  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 10332  001B76  5016               	movf	??_calculateSetFilterMask+4,w,c
 10333  001B78  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 10334  001B7A  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 10335  001B7C  5017               	movf	??_calculateSetFilterMask+5,w,c
 10336  001B7E  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 10337  001B80  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 10338  001B82  5018               	movf	??_calculateSetFilterMask+6,w,c
 10339  001B84  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10340  001B86  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10341  001B88  5043               	movf	calculateSetFilterMask@i,w,c
 10342  001B8A  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
 10343  001B8C  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
 10344  001B8E  90D8               	bcf	status,0,c
 10345  001B90  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10346  001B92  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10347  001B94  90D8               	bcf	status,0,c
 10348  001B96  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10349  001B98  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10350  001B9A  90D8               	bcf	status,0,c
 10351  001B9C  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10352  001B9E  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10353  001BA0  0E43               	movlw	67
 10354  001BA2  242F               	addwf	??_calculateSetFilterMask+29,w,c
 10355  001BA4  6E08               	movwf	?_Read_b_eep,c
 10356  001BA6  0E00               	movlw	0
 10357  001BA8  2030               	addwfc	??_calculateSetFilterMask+30,w,c
 10358  001BAA  6E09               	movwf	?_Read_b_eep+1,c
 10359  001BAC  EC4B  F022         	call	_Read_b_eep	;wreg free
 10360  001BB0  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10361  001BB2  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
 10362  001BB4  502C               	movf	??_calculateSetFilterMask+26,w,c
 10363  001BB6  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
 10364  001BB8  502D               	movf	??_calculateSetFilterMask+27,w,c
 10365  001BBA  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
 10366  001BBC  502E               	movf	??_calculateSetFilterMask+28,w,c
 10367  001BBE  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
 10368                           
 10369                           ;main.c: 2736: if ( 0 == i ) filter = rowfilter;
 10370  001BC0  6643               	tstfsz	calculateSetFilterMask@i,c
 10371  001BC2  D008               	goto	l7953
 10372  001BC4  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
 10373  001BC8  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
 10374  001BCC  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
 10375  001BD0  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
 10376  001BD4                     l7953:
 10377                           
 10378                           ;main.c: 2740: mask &= rowmask;
 10379  001BD4  5031               	movf	calculateSetFilterMask@rowmask,w,c
 10380  001BD6  1636               	andwf	calculateSetFilterMask@mask,f,c
 10381  001BD8  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
 10382  001BDA  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10383  001BDC  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
 10384  001BDE  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10385  001BE0  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
 10386  001BE2  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10387                           
 10388                           ;main.c: 2745: for ( j=0; j<32; j++ ) {
 10389  001BE4  6A42               	clrf	calculateSetFilterMask@j,c
 10390  001BE6                     l7961:
 10391                           
 10392                           ;main.c: 2747: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
 10393  001BE6  5042               	movf	calculateSetFilterMask@j,w,c
 10394  001BE8  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
 10395  001BEC  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
 10396  001BF0  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
 10397  001BF4  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
 10398  001BF8  2AE8               	incf	wreg,f,c
 10399  001BFA  D005               	goto	u8330
 10400  001BFC                     u8335:
 10401  001BFC  90D8               	bcf	status,0,c
 10402  001BFE  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10403  001C00  3214               	rrcf	??_calculateSetFilterMask+2,f,c
 10404  001C02  3213               	rrcf	??_calculateSetFilterMask+1,f,c
 10405  001C04  3212               	rrcf	??_calculateSetFilterMask,f,c
 10406  001C06                     u8330:
 10407  001C06  2EE8               	decfsz	wreg,f,c
 10408  001C08  D7F9               	goto	u8335
 10409  001C0A  0E01               	movlw	1
 10410  001C0C  1612               	andwf	??_calculateSetFilterMask,f,c
 10411  001C0E  5042               	movf	calculateSetFilterMask@j,w,c
 10412  001C10  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
 10413  001C14  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
 10414  001C18  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
 10415  001C1C  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
 10416  001C20  2AE8               	incf	wreg,f,c
 10417  001C22  D005               	goto	u8340
 10418  001C24                     u8345:
 10419  001C24  90D8               	bcf	status,0,c
 10420  001C26  3219               	rrcf	??_calculateSetFilterMask+7,f,c
 10421  001C28  3218               	rrcf	??_calculateSetFilterMask+6,f,c
 10422  001C2A  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10423  001C2C  3216               	rrcf	??_calculateSetFilterMask+4,f,c
 10424  001C2E                     u8340:
 10425  001C2E  2EE8               	decfsz	wreg,f,c
 10426  001C30  D7F9               	goto	u8345
 10427  001C32  5016               	movf	??_calculateSetFilterMask+4,w,c
 10428  001C34  0B01               	andlw	1
 10429  001C36  1812               	xorwf	??_calculateSetFilterMask,w,c
 10430  001C38  E01D               	bz	l7965
 10431                           
 10432                           ;main.c: 2748: mask &= ~(1<<j);
 10433  001C3A  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
 10434  001C3E  0E01               	movlw	1
 10435  001C40  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10436  001C42  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10437  001C44  2A12               	incf	??_calculateSetFilterMask,f,c
 10438  001C46  D003               	goto	u8364
 10439  001C48                     u8365:
 10440  001C48  90D8               	bcf	status,0,c
 10441  001C4A  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10442  001C4C  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10443  001C4E                     u8364:
 10444  001C4E  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10445  001C50  D7FB               	goto	u8365
 10446  001C52  1C13               	comf	??_calculateSetFilterMask+1,w,c
 10447  001C54  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10448  001C56  1C14               	comf	??_calculateSetFilterMask+2,w,c
 10449  001C58  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
 10450  001C5A  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10451  001C5C  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10452  001C5E  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
 10453  001C60  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
 10454  001C62  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10455  001C64  5015               	movf	??_calculateSetFilterMask+3,w,c
 10456  001C66  1636               	andwf	calculateSetFilterMask@mask,f,c
 10457  001C68  5016               	movf	??_calculateSetFilterMask+4,w,c
 10458  001C6A  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10459  001C6C  5017               	movf	??_calculateSetFilterMask+5,w,c
 10460  001C6E  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10461  001C70  5018               	movf	??_calculateSetFilterMask+6,w,c
 10462  001C72  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10463  001C74                     l7965:
 10464  001C74  2A42               	incf	calculateSetFilterMask@j,f,c
 10465  001C76  0E1F               	movlw	31
 10466  001C78  6442               	cpfsgt	calculateSetFilterMask@j,c
 10467  001C7A  D7B5               	goto	l7961
 10468                           
 10469                           ;main.c: 2749: }
 10470                           ;main.c: 2750: }
 10471                           ;main.c: 2756: filter &= rowfilter;
 10472  001C7C  503E               	movf	calculateSetFilterMask@rowfilter,w,c
 10473  001C7E  163A               	andwf	calculateSetFilterMask@filter,f,c
 10474  001C80  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
 10475  001C82  163B               	andwf	calculateSetFilterMask@filter+1,f,c
 10476  001C84  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
 10477  001C86  163C               	andwf	calculateSetFilterMask@filter+2,f,c
 10478  001C88  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
 10479  001C8A  163D               	andwf	calculateSetFilterMask@filter+3,f,c
 10480                           
 10481                           ;main.c: 2764: }
 10482                           ;main.c: 2766: if ( i ) {
 10483                           
 10484                           ;main.c: 2759: if ( !Read_b_eep(0x43 + 8*i + 1) & 0x40 ) {
 10485  001C8C  5043               	movf	calculateSetFilterMask@i,w,c
 10486  001C8E  E04F               	bz	l7985
 10487                           
 10488                           ;main.c: 2769: for (j = 0; j < 8; j++) {
 10489  001C90  6A42               	clrf	calculateSetFilterMask@j,c
 10490  001C92                     l7979:
 10491                           
 10492                           ;main.c: 2770: if ((lastOID >> i & 1)
 10493                           ;main.c: 2771: != (Read_b_eep(0x43 + 8*i) >> i & 1)) {
 10494  001C92  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10495  001C96  5043               	movf	calculateSetFilterMask@i,w,c
 10496  001C98  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10497  001C9A  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10498  001C9C  90D8               	bcf	status,0,c
 10499  001C9E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10500  001CA0  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10501  001CA2  90D8               	bcf	status,0,c
 10502  001CA4  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10503  001CA6  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10504  001CA8  90D8               	bcf	status,0,c
 10505  001CAA  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10506  001CAC  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10507  001CAE  0E43               	movlw	67
 10508  001CB0  2413               	addwf	??_calculateSetFilterMask+1,w,c
 10509  001CB2  6E08               	movwf	?_Read_b_eep,c
 10510  001CB4  0E00               	movlw	0
 10511  001CB6  2014               	addwfc	??_calculateSetFilterMask+2,w,c
 10512  001CB8  6E09               	movwf	?_Read_b_eep+1,c
 10513  001CBA  EC4B  F022         	call	_Read_b_eep	;wreg free
 10514  001CBE  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10515  001CC0  2A12               	incf	??_calculateSetFilterMask,f,c
 10516  001CC2  D002               	goto	u8394
 10517  001CC4                     u8395:
 10518  001CC4  90D8               	bcf	status,0,c
 10519  001CC6  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10520  001CC8                     u8394:
 10521  001CC8  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10522  001CCA  D7FC               	goto	u8395
 10523  001CCC  0E01               	movlw	1
 10524  001CCE  1615               	andwf	??_calculateSetFilterMask+3,f,c
 10525  001CD0  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 10526  001CD4  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 10527  001CD8  2A16               	incf	??_calculateSetFilterMask+4,f,c
 10528  001CDA  D002               	goto	u8404
 10529  001CDC                     u8405:
 10530  001CDC  90D8               	bcf	status,0,c
 10531  001CDE  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10532  001CE0                     u8404:
 10533  001CE0  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 10534  001CE2  D7FC               	goto	u8405
 10535  001CE4  5017               	movf	??_calculateSetFilterMask+5,w,c
 10536  001CE6  0B01               	andlw	1
 10537  001CE8  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 10538  001CEA  E01D               	bz	l7983
 10539                           
 10540                           ;main.c: 2772: mask &= (1 << i);
 10541  001CEC  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10542  001CF0  0E01               	movlw	1
 10543  001CF2  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10544  001CF4  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10545  001CF6  2A12               	incf	??_calculateSetFilterMask,f,c
 10546  001CF8  D003               	goto	u8424
 10547  001CFA                     u8425:
 10548  001CFA  90D8               	bcf	status,0,c
 10549  001CFC  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10550  001CFE  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10551  001D00                     u8424:
 10552  001D00  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10553  001D02  D7FB               	goto	u8425
 10554  001D04  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 10555  001D08  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 10556  001D0C  0E00               	movlw	0
 10557  001D0E  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10558  001D10  0EFF               	movlw	255
 10559  001D12  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 10560  001D14  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10561  001D16  5015               	movf	??_calculateSetFilterMask+3,w,c
 10562  001D18  1636               	andwf	calculateSetFilterMask@mask,f,c
 10563  001D1A  5016               	movf	??_calculateSetFilterMask+4,w,c
 10564  001D1C  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10565  001D1E  5017               	movf	??_calculateSetFilterMask+5,w,c
 10566  001D20  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10567  001D22  5018               	movf	??_calculateSetFilterMask+6,w,c
 10568  001D24  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10569  001D26                     l7983:
 10570  001D26  2A42               	incf	calculateSetFilterMask@j,f,c
 10571  001D28  0E07               	movlw	7
 10572  001D2A  6442               	cpfsgt	calculateSetFilterMask@j,c
 10573  001D2C  D7B2               	goto	l7979
 10574  001D2E                     l7985:
 10575                           
 10576                           ;main.c: 2773: }
 10577                           ;main.c: 2774: }
 10578                           ;main.c: 2776: lastOID = Read_b_eep(0x43 + 8*i);
 10579  001D2E  5043               	movf	calculateSetFilterMask@i,w,c
 10580  001D30  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10581  001D32  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10582  001D34  90D8               	bcf	status,0,c
 10583  001D36  3612               	rlcf	??_calculateSetFilterMask,f,c
 10584  001D38  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10585  001D3A  90D8               	bcf	status,0,c
 10586  001D3C  3612               	rlcf	??_calculateSetFilterMask,f,c
 10587  001D3E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10588  001D40  90D8               	bcf	status,0,c
 10589  001D42  3612               	rlcf	??_calculateSetFilterMask,f,c
 10590  001D44  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10591  001D46  0E43               	movlw	67
 10592  001D48  2412               	addwf	??_calculateSetFilterMask,w,c
 10593  001D4A  6E08               	movwf	?_Read_b_eep,c
 10594  001D4C  0E00               	movlw	0
 10595  001D4E  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10596  001D50  6E09               	movwf	?_Read_b_eep+1,c
 10597  001D52  EC4B  F022         	call	_Read_b_eep	;wreg free
 10598  001D56  6E35               	movwf	calculateSetFilterMask@lastOID,c
 10599  001D58                     l7989:
 10600  001D58  2A43               	incf	calculateSetFilterMask@i,f,c
 10601  001D5A  0E06               	movlw	6
 10602  001D5C  6443               	cpfsgt	calculateSetFilterMask@i,c
 10603  001D5E  D5FD               	goto	l7945
 10604                           
 10605                           ;main.c: 2782: }
 10606                           ;main.c: 2784: }
 10607                           ;main.c: 2785: }
 10608                           ;main.c: 2788: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 10609  001D60  0E80               	movlw	128
 10610  001D62  ECF7  F021         	call	_ECANSetOperationMode
 10611                           
 10612                           ;main.c: 2791: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 10613  001D66  010F               	movlb	15	; () banked
 10614  001D68  0E0F               	movlw	15	;volatile
 10615  001D6A  6E09               	movwf	?__CANIDToRegs+1,c
 10616  001D6C  0E1C               	movlw	28	;volatile
 10617  001D6E  6E08               	movwf	?__CANIDToRegs,c
 10618  001D70  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 10619  001D74  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 10620  001D78  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 10621  001D7C  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 10622  001D80  0E01               	movlw	1
 10623  001D82  6E0E               	movwf	?__CANIDToRegs+6,c
 10624  001D84  EC3F  F01A         	call	__CANIDToRegs	;wreg free
 10625                           
 10626                           ;main.c: 2794: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 10627  001D88  010D               	movlb	13	; () banked
 10628  001D8A  83D4               	bsf	212,1,b	;volatile
 10629                           
 10630                           ; BSR set to: 13
 10631  001D8C  010F               	movlb	15	; () banked
 10632  001D8E  0E0F               	movlw	15	;volatile
 10633  001D90  6E09               	movwf	?__CANIDToRegs+1,c
 10634  001D92  0E04               	movlw	4	;volatile
 10635  001D94  6E08               	movwf	?__CANIDToRegs,c
 10636  001D96  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 10637  001D9A  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 10638  001D9E  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 10639  001DA2  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 10640  001DA6  0E01               	movlw	1
 10641  001DA8  6E0E               	movwf	?__CANIDToRegs+6,c
 10642  001DAA  EC3F  F01A         	call	__CANIDToRegs	;wreg free
 10643                           
 10644                           ;main.c: 2797: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 10645  001DAE  0E00               	movlw	0
 10646  001DB0  EFF7  F021         	goto	_ECANSetOperationMode
 10647  001DB4                     __end_of_calculateSetFilterMask:
 10648                           	opt stack 0
 10649                           tblptru	equ	0xFF8
 10650                           prodh	equ	0xFF4
 10651                           prodl	equ	0xFF3
 10652                           postinc0	equ	0xFEE
 10653                           wreg	equ	0xFE8
 10654                           indf2	equ	0xFDF
 10655                           postinc2	equ	0xFDE
 10656                           postdec2	equ	0xFDD
 10657                           fsr2h	equ	0xFDA
 10658                           fsr2l	equ	0xFD9
 10659                           status	equ	0xFD8
 10660                           
 10661 ;; *************** function _vscp_readRegister *****************
 10662 ;; Defined at:
 10663 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 10664 ;; Parameters:    Size  Location     Type
 10665 ;;  reg             1    wreg     unsigned char 
 10666 ;; Auto vars:     Size  Location     Type
 10667 ;;  reg             1   28[COMRAM] unsigned char 
 10668 ;; Return value:  Size  Location     Type
 10669 ;;                  1    wreg      unsigned char 
 10670 ;; Registers used:
 10671 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10672 ;; Tracked objects:
 10673 ;;		On entry : F/0
 10674 ;;		On exit  : 0/0
 10675 ;;		Unchanged: 0/0
 10676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10677 ;;      Params:         0       0       0       0       0       0       0
 10678 ;;      Locals:         1       0       0       0       0       0       0
 10679 ;;      Temps:          0       0       0       0       0       0       0
 10680 ;;      Totals:         1       0       0       0       0       0       0
 10681 ;;Total ram usage:        1 bytes
 10682 ;; Hardware stack levels used:    1
 10683 ;; Hardware stack levels required when called:    5
 10684 ;; This function calls:
 10685 ;;		_vscp_readAppReg
 10686 ;;		_vscp_readStdReg
 10687 ;; This function is called by:
 10688 ;;		_vscp_handleProtocolEvent
 10689 ;; This function uses a non-reentrant model
 10690 ;;
 10691                           
 10692                           	psect	text27
 10693  0043BC                     __ptext27:
 10694                           	opt stack 0
 10695  0043BC                     _vscp_readRegister:
 10696                           	opt stack 24
 10697                           
 10698                           ;incstack = 0
 10699                           ;incstack = 0
 10700                           ;vscp_readRegister@reg stored from wreg
 10701  0043BC  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
 10702                           
 10703                           ; BSR set to: 0
 10704                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 10705  0043C0  0E7F               	movlw	127
 10706  0043C2  641D               	cpfsgt	vscp_readRegister@reg,c
 10707  0043C4  D004               	goto	l9759
 10708                           
 10709                           ; BSR set to: 0
 10710                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 10711  0043C6  501D               	movf	vscp_readRegister@reg,w,c
 10712  0043C8  EC58  F017         	call	_vscp_readStdReg
 10713  0043CC  D003               	goto	l1126
 10714  0043CE                     l9759:
 10715                           
 10716                           ; BSR set to: 0
 10717                           ;vscp_firmware.c: 565: else {
 10718                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 10719  0043CE  501D               	movf	vscp_readRegister@reg,w,c
 10720  0043D0  EC2E  F01E         	call	_vscp_readAppReg
 10721  0043D4                     l1126:
 10722  0043D4  0012               	return	
 10723  0043D6                     __end_of_vscp_readRegister:
 10724                           	opt stack 0
 10725                           tblptru	equ	0xFF8
 10726                           prodh	equ	0xFF4
 10727                           prodl	equ	0xFF3
 10728                           postinc0	equ	0xFEE
 10729                           wreg	equ	0xFE8
 10730                           indf2	equ	0xFDF
 10731                           postinc2	equ	0xFDE
 10732                           postdec2	equ	0xFDD
 10733                           fsr2h	equ	0xFDA
 10734                           fsr2l	equ	0xFD9
 10735                           status	equ	0xFD8
 10736                           
 10737 ;; *************** function _vscp_readStdReg *****************
 10738 ;; Defined at:
 10739 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 10740 ;; Parameters:    Size  Location     Type
 10741 ;;  reg             1    wreg     unsigned char 
 10742 ;; Auto vars:     Size  Location     Type
 10743 ;;  reg             1   27[COMRAM] unsigned char 
 10744 ;;  code            4   20[COMRAM] unsigned long 
 10745 ;;  idx             1   25[COMRAM] unsigned char 
 10746 ;;  code            4   16[COMRAM] unsigned long 
 10747 ;;  idx             1   24[COMRAM] unsigned char 
 10748 ;;  rv              1   26[COMRAM] unsigned char 
 10749 ;; Return value:  Size  Location     Type
 10750 ;;                  1    wreg      unsigned char 
 10751 ;; Registers used:
 10752 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10753 ;; Tracked objects:
 10754 ;;		On entry : F/0
 10755 ;;		On exit  : 0/0
 10756 ;;		Unchanged: 0/0
 10757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10758 ;;      Params:         0       0       0       0       0       0       0
 10759 ;;      Locals:        12       0       0       0       0       0       0
 10760 ;;      Temps:          5       0       0       0       0       0       0
 10761 ;;      Totals:        17       0       0       0       0       0       0
 10762 ;;Total ram usage:       17 bytes
 10763 ;; Hardware stack levels used:    1
 10764 ;; Hardware stack levels required when called:    4
 10765 ;; This function calls:
 10766 ;;		_vscp_getMajorVersion
 10767 ;;		_vscp_getMinorVersion
 10768 ;;		_vscp_getSubMinorVersion
 10769 ;;		_vscp_getGUID
 10770 ;;		_vscp_getMDF_URL
 10771 ;;		_vscp_getUserID
 10772 ;;		_vscp_getManufacturerId
 10773 ;;		_vscp_getBootLoaderAlgorithm
 10774 ;;		_vscp_getBufferSize
 10775 ;;		_vscp_getFamilyCode
 10776 ;;		_vscp_getFamilyType
 10777 ;;		_vscp_getRegisterPagesUsed
 10778 ;; This function is called by:
 10779 ;;		_vscp_readRegister
 10780 ;;		_vscp_handleProtocolEvent
 10781 ;; This function uses a non-reentrant model
 10782 ;;
 10783                           
 10784                           	psect	text28
 10785  002EB0                     __ptext28:
 10786                           	opt stack 0
 10787  002EB0                     _vscp_readStdReg:
 10788                           	opt stack 25
 10789                           
 10790                           ;incstack = 0
 10791                           ;incstack = 0
 10792                           ;vscp_readStdReg@reg stored from wreg
 10793  002EB0  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
 10794                           
 10795                           ; BSR set to: 0
 10796                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 10797  002EB4  6A1B               	clrf	vscp_readStdReg@rv,c
 10798                           
 10799                           ; BSR set to: 0
 10800                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 10801  002EB6  501C               	movf	vscp_readStdReg@reg,w,c
 10802  002EB8  0A80               	xorlw	128
 10803  002EBA  E104               	bnz	l9769
 10804                           
 10805                           ; BSR set to: 0
 10806                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 10807  002EBC  C055  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 10808                           
 10809                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 10810  002EC0  6A55               	clrf	_vscp_alarmstatus,c
 10811                           
 10812                           ;vscp_firmware.c: 584: }
 10813  002EC2  D0CB               	goto	l9857
 10814  002EC4                     l9769:
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 10818  002EC4  501C               	movf	vscp_readStdReg@reg,w,c
 10819  002EC6  0A81               	xorlw	129
 10820  002EC8  E102               	bnz	l9773
 10821                           
 10822                           ; BSR set to: 0
 10823                           ;vscp_firmware.c: 588: rv = 1;
 10824  002ECA  0E01               	movlw	1
 10825  002ECC  D081               	goto	L39
 10826  002ECE                     l9773:
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 10830  002ECE  501C               	movf	vscp_readStdReg@reg,w,c
 10831  002ED0  0A82               	xorlw	130
 10832  002ED2  E102               	bnz	l9777
 10833                           
 10834                           ; BSR set to: 0
 10835                           ;vscp_firmware.c: 594: rv = 5;
 10836  002ED4  0E05               	movlw	5
 10837  002ED6  D07C               	goto	L39
 10838  002ED8                     l9777:
 10839                           
 10840                           ; BSR set to: 0
 10841                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 10842  002ED8  501C               	movf	vscp_readStdReg@reg,w,c
 10843  002EDA  0A83               	xorlw	131
 10844  002EDC  E102               	bnz	l9781
 10845                           
 10846                           ; BSR set to: 0
 10847                           ;vscp_firmware.c: 600: rv = 0;
 10848  002EDE  6A1B               	clrf	vscp_readStdReg@rv,c
 10849                           
 10850                           ;vscp_firmware.c: 602: }
 10851  002EE0  D0BC               	goto	l9857
 10852  002EE2                     l9781:
 10853                           
 10854                           ; BSR set to: 0
 10855                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 10856  002EE2  501C               	movf	vscp_readStdReg@reg,w,c
 10857  002EE4  0A94               	xorlw	148
 10858  002EE6  E103               	bnz	l9785
 10859                           
 10860                           ; BSR set to: 0
 10861                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 10862  002EE8  EC8A  F022         	call	_vscp_getMajorVersion	;wreg free
 10863  002EEC  D071               	goto	L39
 10864  002EEE                     l9785:
 10865                           
 10866                           ; BSR set to: 0
 10867                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 10868  002EEE  501C               	movf	vscp_readStdReg@reg,w,c
 10869  002EF0  0A95               	xorlw	149
 10870  002EF2  E103               	bnz	l9789
 10871                           
 10872                           ; BSR set to: 0
 10873                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 10874  002EF4  EC89  F022         	call	_vscp_getMinorVersion	;wreg free
 10875  002EF8  D06B               	goto	L39
 10876  002EFA                     l9789:
 10877                           
 10878                           ; BSR set to: 0
 10879                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 10880  002EFA  501C               	movf	vscp_readStdReg@reg,w,c
 10881  002EFC  0A96               	xorlw	150
 10882  002EFE  E103               	bnz	l9793
 10883                           
 10884                           ; BSR set to: 0
 10885                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 10886  002F00  EC88  F022         	call	_vscp_getSubMinorVersion	;wreg free
 10887  002F04  D065               	goto	L39
 10888  002F06                     l9793:
 10889                           
 10890                           ; BSR set to: 0
 10891                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 10892  002F06  0E89               	movlw	137
 10893  002F08  601C               	cpfslt	vscp_readStdReg@reg,c
 10894  002F0A  D005               	goto	l9797
 10895                           
 10896                           ; BSR set to: 0
 10897                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 10898  002F0C  501C               	movf	vscp_readStdReg@reg,w,c
 10899  002F0E  0F7C               	addlw	124
 10900  002F10  EC2E  F022         	call	_vscp_getUserID
 10901  002F14  D05D               	goto	L39
 10902  002F16                     l9797:
 10903                           
 10904                           ; BSR set to: 0
 10905                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 10906                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 10907  002F16  0E88               	movlw	136
 10908  002F18  641C               	cpfsgt	vscp_readStdReg@reg,c
 10909  002F1A  D008               	goto	l9803
 10910                           
 10911                           ; BSR set to: 0
 10912  002F1C  0E91               	movlw	145
 10913  002F1E  601C               	cpfslt	vscp_readStdReg@reg,c
 10914  002F20  D005               	goto	l9803
 10915                           
 10916                           ; BSR set to: 0
 10917                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 10918  002F22  501C               	movf	vscp_readStdReg@reg,w,c
 10919  002F24  0F77               	addlw	119
 10920  002F26  EC24  F022         	call	_vscp_getManufacturerId
 10921  002F2A  D052               	goto	L39
 10922  002F2C                     l9803:
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 10926  002F2C  501C               	movf	vscp_readStdReg@reg,w,c
 10927  002F2E  0A91               	xorlw	145
 10928  002F30  E103               	bnz	l9807
 10929                           
 10930                           ; BSR set to: 0
 10931                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 10932  002F32  C092  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
 10933                           
 10934                           ;vscp_firmware.c: 639: }
 10935  002F36  D091               	goto	l9857
 10936  002F38                     l9807:
 10937                           
 10938                           ; BSR set to: 0
 10939                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 10940  002F38  501C               	movf	vscp_readStdReg@reg,w,c
 10941  002F3A  0A93               	xorlw	147
 10942  002F3C  E103               	bnz	l9811
 10943                           
 10944                           ; BSR set to: 0
 10945                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 10946  002F3E  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
 10947                           
 10948                           ;vscp_firmware.c: 645: }
 10949  002F42  D08B               	goto	l9857
 10950  002F44                     l9811:
 10951                           
 10952                           ; BSR set to: 0
 10953                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 10954  002F44  501C               	movf	vscp_readStdReg@reg,w,c
 10955  002F46  0A92               	xorlw	146
 10956  002F48  E102               	bnz	l9815
 10957                           
 10958                           ; BSR set to: 0
 10959                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 10960  002F4A  5053               	movf	_vscp_page_select+1,w,c
 10961  002F4C  D041               	goto	L39
 10962  002F4E                     l9815:
 10963                           
 10964                           ; BSR set to: 0
 10965                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 10966  002F4E  501C               	movf	vscp_readStdReg@reg,w,c
 10967  002F50  0A97               	xorlw	151
 10968  002F52  E103               	bnz	l9819
 10969                           
 10970                           ; BSR set to: 0
 10971                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 10972  002F54  EC87  F022         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 10973  002F58  D03B               	goto	L39
 10974  002F5A                     l9819:
 10975                           
 10976                           ; BSR set to: 0
 10977                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 10978  002F5A  501C               	movf	vscp_readStdReg@reg,w,c
 10979  002F5C  0A98               	xorlw	152
 10980  002F5E  E103               	bnz	l9823
 10981                           
 10982                           ; BSR set to: 0
 10983                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 10984  002F60  EC86  F022         	call	_vscp_getBufferSize	;wreg free
 10985  002F64  D035               	goto	L39
 10986  002F66                     l9823:
 10987                           
 10988                           ; BSR set to: 0
 10989                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 10990  002F66  501C               	movf	vscp_readStdReg@reg,w,c
 10991  002F68  0A99               	xorlw	153
 10992  002F6A  E103               	bnz	l9827
 10993                           
 10994                           ; BSR set to: 0
 10995                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 10996  002F6C  EC85  F022         	call	_vscp_getRegisterPagesUsed	;wreg free
 10997  002F70  D02F               	goto	L39
 10998  002F72                     l9827:
 10999                           
 11000                           ; BSR set to: 0
 11001                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 11002                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 11003  002F72  0E99               	movlw	153
 11004  002F74  641C               	cpfsgt	vscp_readStdReg@reg,c
 11005  002F76  D02E               	goto	l9837
 11006                           
 11007                           ; BSR set to: 0
 11008  002F78  0E9E               	movlw	158
 11009  002F7A  601C               	cpfslt	vscp_readStdReg@reg,c
 11010  002F7C  D02B               	goto	l9837
 11011                           
 11012                           ; BSR set to: 0
 11013                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 11014  002F7E  EC6C  F022         	call	_vscp_getFamilyCode	;wreg free
 11015  002F82  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 11016  002F86  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 11017  002F8A  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 11018  002F8E  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 11019                           
 11020                           ; BSR set to: 0
 11021                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 11022  002F92  501C               	movf	vscp_readStdReg@reg,w,c
 11023  002F94  0F66               	addlw	102
 11024  002F96  6E19               	movwf	vscp_readStdReg@idx,c
 11025                           
 11026                           ; BSR set to: 0
 11027                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 11028  002F98  5019               	movf	vscp_readStdReg@idx,w,c
 11029  002F9A  0803               	sublw	3
 11030  002F9C  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 11031  002F9E  90D8               	bcf	status,0,c
 11032  002FA0  360C               	rlcf	??_vscp_readStdReg,f,c
 11033  002FA2  90D8               	bcf	status,0,c
 11034  002FA4  360C               	rlcf	??_vscp_readStdReg,f,c
 11035  002FA6  90D8               	bcf	status,0,c
 11036  002FA8  360C               	rlcf	??_vscp_readStdReg,f,c
 11037  002FAA  500C               	movf	??_vscp_readStdReg,w,c
 11038  002FAC  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 11039  002FB0  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 11040  002FB4  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 11041  002FB8  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 11042  002FBC  2AE8               	incf	wreg,f,c
 11043  002FBE  D005               	goto	u11320
 11044  002FC0                     u11325:
 11045  002FC0  90D8               	bcf	status,0,c
 11046  002FC2  3210               	rrcf	??_vscp_readStdReg+4,f,c
 11047  002FC4  320F               	rrcf	??_vscp_readStdReg+3,f,c
 11048  002FC6  320E               	rrcf	??_vscp_readStdReg+2,f,c
 11049  002FC8  320D               	rrcf	??_vscp_readStdReg+1,f,c
 11050  002FCA                     u11320:
 11051  002FCA  2EE8               	decfsz	wreg,f,c
 11052  002FCC  D7F9               	goto	u11325
 11053  002FCE  D030               	goto	L40
 11054  002FD0                     L39:
 11055  002FD0  6E1B               	movwf	vscp_readStdReg@rv,c
 11056                           
 11057                           ;vscp_firmware.c: 671: }
 11058  002FD2  D043               	goto	l9857
 11059  002FD4                     l9837:
 11060                           
 11061                           ; BSR set to: 0
 11062                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 11063                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 11064  002FD4  0E9D               	movlw	157
 11065  002FD6  641C               	cpfsgt	vscp_readStdReg@reg,c
 11066  002FD8  D02D               	goto	l9847
 11067                           
 11068                           ; BSR set to: 0
 11069  002FDA  0EA2               	movlw	162
 11070  002FDC  601C               	cpfslt	vscp_readStdReg@reg,c
 11071  002FDE  D02A               	goto	l9847
 11072                           
 11073                           ; BSR set to: 0
 11074                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 11075  002FE0  EC67  F022         	call	_vscp_getFamilyType	;wreg free
 11076  002FE4  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1267+3
 11077  002FE8  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1267+2
 11078  002FEC  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1267+1
 11079  002FF0  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1267
 11080                           
 11081                           ; BSR set to: 0
 11082                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 11083  002FF4  501C               	movf	vscp_readStdReg@reg,w,c
 11084  002FF6  0F62               	addlw	98
 11085  002FF8  6E1A               	movwf	vscp_readStdReg@idx_1268,c
 11086                           
 11087                           ; BSR set to: 0
 11088                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 11089  002FFA  501A               	movf	vscp_readStdReg@idx_1268,w,c
 11090  002FFC  0803               	sublw	3
 11091  002FFE  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 11092  003000  90D8               	bcf	status,0,c
 11093  003002  360C               	rlcf	??_vscp_readStdReg,f,c
 11094  003004  90D8               	bcf	status,0,c
 11095  003006  360C               	rlcf	??_vscp_readStdReg,f,c
 11096  003008  90D8               	bcf	status,0,c
 11097  00300A  360C               	rlcf	??_vscp_readStdReg,f,c
 11098  00300C  500C               	movf	??_vscp_readStdReg,w,c
 11099  00300E  C015  F00D         	movff	vscp_readStdReg@code_1267,??_vscp_readStdReg+1
 11100  003012  C016  F00E         	movff	vscp_readStdReg@code_1267+1,??_vscp_readStdReg+2
 11101  003016  C017  F00F         	movff	vscp_readStdReg@code_1267+2,??_vscp_readStdReg+3
 11102  00301A  C018  F010         	movff	vscp_readStdReg@code_1267+3,??_vscp_readStdReg+4
 11103  00301E  2AE8               	incf	wreg,f,c
 11104  003020  D005               	goto	u11350
 11105  003022                     u11355:
 11106  003022  90D8               	bcf	status,0,c
 11107  003024  3210               	rrcf	??_vscp_readStdReg+4,f,c
 11108  003026  320F               	rrcf	??_vscp_readStdReg+3,f,c
 11109  003028  320E               	rrcf	??_vscp_readStdReg+2,f,c
 11110  00302A  320D               	rrcf	??_vscp_readStdReg+1,f,c
 11111  00302C                     u11350:
 11112  00302C  2EE8               	decfsz	wreg,f,c
 11113  00302E  D7F9               	goto	u11355
 11114  003030                     L40:
 11115  003030  500D               	movf	??_vscp_readStdReg+1,w,c
 11116  003032  D7CE               	goto	L39
 11117  003034                     l9847:
 11118                           
 11119                           ; BSR set to: 0
 11120                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 11121                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 11122  003034  0ECF               	movlw	207
 11123  003036  641C               	cpfsgt	vscp_readStdReg@reg,c
 11124  003038  D008               	goto	l9853
 11125                           
 11126                           ; BSR set to: 0
 11127  00303A  0EE0               	movlw	224
 11128  00303C  601C               	cpfslt	vscp_readStdReg@reg,c
 11129  00303E  D005               	goto	l9853
 11130                           
 11131                           ; BSR set to: 0
 11132                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 11133  003040  501C               	movf	vscp_readStdReg@reg,w,c
 11134  003042  0F30               	addlw	48
 11135  003044  EC38  F022         	call	_vscp_getGUID
 11136  003048  D7C3               	goto	L39
 11137  00304A                     l9853:
 11138                           
 11139                           ; BSR set to: 0
 11140                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 11141  00304A  0EDF               	movlw	223
 11142  00304C  641C               	cpfsgt	vscp_readStdReg@reg,c
 11143  00304E  D005               	goto	l9857
 11144                           
 11145                           ; BSR set to: 0
 11146                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 11147  003050  501C               	movf	vscp_readStdReg@reg,w,c
 11148  003052  0F20               	addlw	32
 11149  003054  ECEB  F021         	call	_vscp_getMDF_URL
 11150  003058  D7BB               	goto	L39
 11151  00305A                     l9857:
 11152                           
 11153                           ;vscp_firmware.c: 691: }
 11154                           ;vscp_firmware.c: 693: return rv;
 11155  00305A  501B               	movf	vscp_readStdReg@rv,w,c
 11156  00305C  0012               	return	
 11157  00305E                     __end_of_vscp_readStdReg:
 11158                           	opt stack 0
 11159                           tblptru	equ	0xFF8
 11160                           prodh	equ	0xFF4
 11161                           prodl	equ	0xFF3
 11162                           postinc0	equ	0xFEE
 11163                           wreg	equ	0xFE8
 11164                           indf2	equ	0xFDF
 11165                           postinc2	equ	0xFDE
 11166                           postdec2	equ	0xFDD
 11167                           fsr2h	equ	0xFDA
 11168                           fsr2l	equ	0xFD9
 11169                           status	equ	0xFD8
 11170                           
 11171 ;; *************** function _vscp_getRegisterPagesUsed *****************
 11172 ;; Defined at:
 11173 ;;		line 2576 in file "../main.c"
 11174 ;; Parameters:    Size  Location     Type
 11175 ;;		None
 11176 ;; Auto vars:     Size  Location     Type
 11177 ;;		None
 11178 ;; Return value:  Size  Location     Type
 11179 ;;                  1    wreg      unsigned char 
 11180 ;; Registers used:
 11181 ;;		wreg
 11182 ;; Tracked objects:
 11183 ;;		On entry : F/0
 11184 ;;		On exit  : F/0
 11185 ;;		Unchanged: F/0
 11186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11187 ;;      Params:         0       0       0       0       0       0       0
 11188 ;;      Locals:         0       0       0       0       0       0       0
 11189 ;;      Temps:          0       0       0       0       0       0       0
 11190 ;;      Totals:         0       0       0       0       0       0       0
 11191 ;;Total ram usage:        0 bytes
 11192 ;; Hardware stack levels used:    1
 11193 ;; Hardware stack levels required when called:    2
 11194 ;; This function calls:
 11195 ;;		Nothing
 11196 ;; This function is called by:
 11197 ;;		_vscp_readStdReg
 11198 ;; This function uses a non-reentrant model
 11199 ;;
 11200                           
 11201                           	psect	text29
 11202  00450A                     __ptext29:
 11203                           	opt stack 0
 11204  00450A                     _vscp_getRegisterPagesUsed:
 11205                           	opt stack 26
 11206                           
 11207                           ; BSR set to: 0
 11208                           
 11209                           ; BSR set to: 0
 11210                           ;main.c: 2577: return 1;
 11211                           
 11212                           ;incstack = 0
 11213                           ;incstack = 0
 11214  00450A  0C01               	retlw	1
 11215  00450C                     __end_of_vscp_getRegisterPagesUsed:
 11216                           	opt stack 0
 11217                           tblptru	equ	0xFF8
 11218                           prodh	equ	0xFF4
 11219                           prodl	equ	0xFF3
 11220                           postinc0	equ	0xFEE
 11221                           wreg	equ	0xFE8
 11222                           indf2	equ	0xFDF
 11223                           postinc2	equ	0xFDE
 11224                           postdec2	equ	0xFDD
 11225                           fsr2h	equ	0xFDA
 11226                           fsr2l	equ	0xFD9
 11227                           status	equ	0xFD8
 11228                           
 11229 ;; *************** function _vscp_getFamilyType *****************
 11230 ;; Defined at:
 11231 ;;		line 2557 in file "../main.c"
 11232 ;; Parameters:    Size  Location     Type
 11233 ;;		None
 11234 ;; Auto vars:     Size  Location     Type
 11235 ;;		None
 11236 ;; Return value:  Size  Location     Type
 11237 ;;                  4    7[COMRAM] unsigned long 
 11238 ;; Registers used:
 11239 ;;		None
 11240 ;; Tracked objects:
 11241 ;;		On entry : F/0
 11242 ;;		On exit  : F/0
 11243 ;;		Unchanged: F/0
 11244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11245 ;;      Params:         4       0       0       0       0       0       0
 11246 ;;      Locals:         0       0       0       0       0       0       0
 11247 ;;      Temps:          0       0       0       0       0       0       0
 11248 ;;      Totals:         4       0       0       0       0       0       0
 11249 ;;Total ram usage:        4 bytes
 11250 ;; Hardware stack levels used:    1
 11251 ;; Hardware stack levels required when called:    2
 11252 ;; This function calls:
 11253 ;;		Nothing
 11254 ;; This function is called by:
 11255 ;;		_vscp_readStdReg
 11256 ;; This function uses a non-reentrant model
 11257 ;;
 11258                           
 11259                           	psect	text30
 11260  0044CE                     __ptext30:
 11261                           	opt stack 0
 11262  0044CE                     _vscp_getFamilyType:
 11263                           	opt stack 26
 11264                           
 11265                           ; BSR set to: 0
 11266                           ;main.c: 2558: return 0;
 11267                           
 11268                           ; BSR set to: 0
 11269                           ;incstack = 0
 11270                           ;incstack = 0
 11271  0044CE  6A08               	clrf	?_vscp_getFamilyType,c
 11272  0044D0  6A09               	clrf	?_vscp_getFamilyType+1,c
 11273  0044D2  6A0A               	clrf	?_vscp_getFamilyType+2,c
 11274  0044D4  6A0B               	clrf	?_vscp_getFamilyType+3,c
 11275                           
 11276                           ; BSR set to: 0
 11277  0044D6  0012               	return	
 11278  0044D8                     __end_of_vscp_getFamilyType:
 11279                           	opt stack 0
 11280                           tblptru	equ	0xFF8
 11281                           prodh	equ	0xFF4
 11282                           prodl	equ	0xFF3
 11283                           postinc0	equ	0xFEE
 11284                           wreg	equ	0xFE8
 11285                           indf2	equ	0xFDF
 11286                           postinc2	equ	0xFDE
 11287                           postdec2	equ	0xFDD
 11288                           fsr2h	equ	0xFDA
 11289                           fsr2l	equ	0xFD9
 11290                           status	equ	0xFD8
 11291                           
 11292 ;; *************** function _vscp_getFamilyCode *****************
 11293 ;; Defined at:
 11294 ;;		line 2548 in file "../main.c"
 11295 ;; Parameters:    Size  Location     Type
 11296 ;;		None
 11297 ;; Auto vars:     Size  Location     Type
 11298 ;;		None
 11299 ;; Return value:  Size  Location     Type
 11300 ;;                  4    7[COMRAM] unsigned long 
 11301 ;; Registers used:
 11302 ;;		None
 11303 ;; Tracked objects:
 11304 ;;		On entry : F/0
 11305 ;;		On exit  : F/0
 11306 ;;		Unchanged: F/0
 11307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11308 ;;      Params:         4       0       0       0       0       0       0
 11309 ;;      Locals:         0       0       0       0       0       0       0
 11310 ;;      Temps:          0       0       0       0       0       0       0
 11311 ;;      Totals:         4       0       0       0       0       0       0
 11312 ;;Total ram usage:        4 bytes
 11313 ;; Hardware stack levels used:    1
 11314 ;; Hardware stack levels required when called:    2
 11315 ;; This function calls:
 11316 ;;		Nothing
 11317 ;; This function is called by:
 11318 ;;		_vscp_readStdReg
 11319 ;; This function uses a non-reentrant model
 11320 ;;
 11321                           
 11322                           	psect	text31
 11323  0044D8                     __ptext31:
 11324                           	opt stack 0
 11325  0044D8                     _vscp_getFamilyCode:
 11326                           	opt stack 26
 11327                           
 11328                           ; BSR set to: 0
 11329                           ;main.c: 2549: return 0L;
 11330                           
 11331                           ; BSR set to: 0
 11332                           ;incstack = 0
 11333                           ;incstack = 0
 11334  0044D8  6A08               	clrf	?_vscp_getFamilyCode,c
 11335  0044DA  6A09               	clrf	?_vscp_getFamilyCode+1,c
 11336  0044DC  6A0A               	clrf	?_vscp_getFamilyCode+2,c
 11337  0044DE  6A0B               	clrf	?_vscp_getFamilyCode+3,c
 11338                           
 11339                           ; BSR set to: 0
 11340  0044E0  0012               	return	
 11341  0044E2                     __end_of_vscp_getFamilyCode:
 11342                           	opt stack 0
 11343                           tblptru	equ	0xFF8
 11344                           prodh	equ	0xFF4
 11345                           prodl	equ	0xFF3
 11346                           postinc0	equ	0xFEE
 11347                           wreg	equ	0xFE8
 11348                           indf2	equ	0xFDF
 11349                           postinc2	equ	0xFDE
 11350                           postdec2	equ	0xFDD
 11351                           fsr2h	equ	0xFDA
 11352                           fsr2l	equ	0xFD9
 11353                           status	equ	0xFD8
 11354                           
 11355 ;; *************** function _vscp_getBufferSize *****************
 11356 ;; Defined at:
 11357 ;;		line 2409 in file "../main.c"
 11358 ;; Parameters:    Size  Location     Type
 11359 ;;		None
 11360 ;; Auto vars:     Size  Location     Type
 11361 ;;		None
 11362 ;; Return value:  Size  Location     Type
 11363 ;;                  1    wreg      unsigned char 
 11364 ;; Registers used:
 11365 ;;		wreg
 11366 ;; Tracked objects:
 11367 ;;		On entry : F/0
 11368 ;;		On exit  : F/0
 11369 ;;		Unchanged: F/0
 11370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11371 ;;      Params:         0       0       0       0       0       0       0
 11372 ;;      Locals:         0       0       0       0       0       0       0
 11373 ;;      Temps:          0       0       0       0       0       0       0
 11374 ;;      Totals:         0       0       0       0       0       0       0
 11375 ;;Total ram usage:        0 bytes
 11376 ;; Hardware stack levels used:    1
 11377 ;; Hardware stack levels required when called:    2
 11378 ;; This function calls:
 11379 ;;		Nothing
 11380 ;; This function is called by:
 11381 ;;		_vscp_readStdReg
 11382 ;; This function uses a non-reentrant model
 11383 ;;
 11384                           
 11385                           	psect	text32
 11386  00450C                     __ptext32:
 11387                           	opt stack 0
 11388  00450C                     _vscp_getBufferSize:
 11389                           	opt stack 26
 11390                           
 11391                           ; BSR set to: 0
 11392                           
 11393                           ; BSR set to: 0
 11394                           ;main.c: 2410: return 8;
 11395                           
 11396                           ; BSR set to: 0
 11397                           ;incstack = 0
 11398                           ;incstack = 0
 11399  00450C  0C08               	retlw	8
 11400  00450E                     __end_of_vscp_getBufferSize:
 11401                           	opt stack 0
 11402                           tblptru	equ	0xFF8
 11403                           prodh	equ	0xFF4
 11404                           prodl	equ	0xFF3
 11405                           postinc0	equ	0xFEE
 11406                           wreg	equ	0xFE8
 11407                           indf2	equ	0xFDF
 11408                           postinc2	equ	0xFDE
 11409                           postdec2	equ	0xFDD
 11410                           fsr2h	equ	0xFDA
 11411                           fsr2l	equ	0xFD9
 11412                           status	equ	0xFD8
 11413                           
 11414 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 11415 ;; Defined at:
 11416 ;;		line 2400 in file "../main.c"
 11417 ;; Parameters:    Size  Location     Type
 11418 ;;		None
 11419 ;; Auto vars:     Size  Location     Type
 11420 ;;		None
 11421 ;; Return value:  Size  Location     Type
 11422 ;;                  1    wreg      unsigned char 
 11423 ;; Registers used:
 11424 ;;		wreg
 11425 ;; Tracked objects:
 11426 ;;		On entry : F/0
 11427 ;;		On exit  : F/0
 11428 ;;		Unchanged: F/0
 11429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11430 ;;      Params:         0       0       0       0       0       0       0
 11431 ;;      Locals:         0       0       0       0       0       0       0
 11432 ;;      Temps:          0       0       0       0       0       0       0
 11433 ;;      Totals:         0       0       0       0       0       0       0
 11434 ;;Total ram usage:        0 bytes
 11435 ;; Hardware stack levels used:    1
 11436 ;; Hardware stack levels required when called:    2
 11437 ;; This function calls:
 11438 ;;		Nothing
 11439 ;; This function is called by:
 11440 ;;		_vscp_readStdReg
 11441 ;; This function uses a non-reentrant model
 11442 ;;
 11443                           
 11444                           	psect	text33
 11445  00450E                     __ptext33:
 11446                           	opt stack 0
 11447  00450E                     _vscp_getBootLoaderAlgorithm:
 11448                           	opt stack 26
 11449                           
 11450                           ; BSR set to: 0
 11451                           
 11452                           ; BSR set to: 0
 11453                           ;main.c: 2401: return 0x01;
 11454                           
 11455                           ; BSR set to: 0
 11456                           ;incstack = 0
 11457                           ;incstack = 0
 11458  00450E  0C01               	retlw	1
 11459  004510                     __end_of_vscp_getBootLoaderAlgorithm:
 11460                           	opt stack 0
 11461                           tblptru	equ	0xFF8
 11462                           prodh	equ	0xFF4
 11463                           prodl	equ	0xFF3
 11464                           postinc0	equ	0xFEE
 11465                           wreg	equ	0xFE8
 11466                           indf2	equ	0xFDF
 11467                           postinc2	equ	0xFDE
 11468                           postdec2	equ	0xFDD
 11469                           fsr2h	equ	0xFDA
 11470                           fsr2l	equ	0xFD9
 11471                           status	equ	0xFD8
 11472                           
 11473 ;; *************** function _vscp_getManufacturerId *****************
 11474 ;; Defined at:
 11475 ;;		line 2391 in file "../main.c"
 11476 ;; Parameters:    Size  Location     Type
 11477 ;;  idx             1    wreg     unsigned char 
 11478 ;; Auto vars:     Size  Location     Type
 11479 ;;  idx             1    9[COMRAM] unsigned char 
 11480 ;; Return value:  Size  Location     Type
 11481 ;;                  1    wreg      unsigned char 
 11482 ;; Registers used:
 11483 ;;		wreg, status,2, status,0, cstack
 11484 ;; Tracked objects:
 11485 ;;		On entry : 0/0
 11486 ;;		On exit  : 0/0
 11487 ;;		Unchanged: 0/0
 11488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11489 ;;      Params:         0       0       0       0       0       0       0
 11490 ;;      Locals:         1       0       0       0       0       0       0
 11491 ;;      Temps:          0       0       0       0       0       0       0
 11492 ;;      Totals:         1       0       0       0       0       0       0
 11493 ;;Total ram usage:        1 bytes
 11494 ;; Hardware stack levels used:    1
 11495 ;; Hardware stack levels required when called:    3
 11496 ;; This function calls:
 11497 ;;		_Read_b_eep
 11498 ;; This function is called by:
 11499 ;;		_vscp_readStdReg
 11500 ;;		_vscp_writeStdReg
 11501 ;; This function uses a non-reentrant model
 11502 ;;
 11503                           
 11504                           	psect	text34
 11505  004448                     __ptext34:
 11506                           	opt stack 0
 11507  004448                     _vscp_getManufacturerId:
 11508                           	opt stack 25
 11509                           
 11510                           ; BSR set to: 0
 11511                           ;incstack = 0
 11512                           ;incstack = 0
 11513                           ;vscp_getManufacturerId@idx stored from wreg
 11514  004448  CFE8 F00A          	movff	wreg,vscp_getManufacturerId@idx
 11515                           
 11516                           ;main.c: 2392: return Read_b_eep(0x0B + idx);
 11517  00444C  0E0B               	movlw	11
 11518  00444E  240A               	addwf	vscp_getManufacturerId@idx,w,c
 11519  004450  6E08               	movwf	?_Read_b_eep,c
 11520  004452  6A09               	clrf	?_Read_b_eep+1,c
 11521  004454  0E00               	movlw	0
 11522  004456  2209               	addwfc	?_Read_b_eep+1,f,c
 11523  004458  EF4B  F022         	goto	_Read_b_eep	;wreg free
 11524  00445C                     __end_of_vscp_getManufacturerId:
 11525                           	opt stack 0
 11526                           tblptru	equ	0xFF8
 11527                           prodh	equ	0xFF4
 11528                           prodl	equ	0xFF3
 11529                           postinc0	equ	0xFEE
 11530                           wreg	equ	0xFE8
 11531                           indf2	equ	0xFDF
 11532                           postinc2	equ	0xFDE
 11533                           postdec2	equ	0xFDD
 11534                           fsr2h	equ	0xFDA
 11535                           fsr2l	equ	0xFD9
 11536                           status	equ	0xFD8
 11537                           
 11538 ;; *************** function _vscp_getUserID *****************
 11539 ;; Defined at:
 11540 ;;		line 2371 in file "../main.c"
 11541 ;; Parameters:    Size  Location     Type
 11542 ;;  idx             1    wreg     unsigned char 
 11543 ;; Auto vars:     Size  Location     Type
 11544 ;;  idx             1    9[COMRAM] unsigned char 
 11545 ;; Return value:  Size  Location     Type
 11546 ;;                  1    wreg      unsigned char 
 11547 ;; Registers used:
 11548 ;;		wreg, status,2, status,0, cstack
 11549 ;; Tracked objects:
 11550 ;;		On entry : 0/0
 11551 ;;		On exit  : 0/0
 11552 ;;		Unchanged: 0/0
 11553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11554 ;;      Params:         0       0       0       0       0       0       0
 11555 ;;      Locals:         1       0       0       0       0       0       0
 11556 ;;      Temps:          0       0       0       0       0       0       0
 11557 ;;      Totals:         1       0       0       0       0       0       0
 11558 ;;Total ram usage:        1 bytes
 11559 ;; Hardware stack levels used:    1
 11560 ;; Hardware stack levels required when called:    3
 11561 ;; This function calls:
 11562 ;;		_Read_b_eep
 11563 ;; This function is called by:
 11564 ;;		_vscp_readStdReg
 11565 ;;		_vscp_writeStdReg
 11566 ;; This function uses a non-reentrant model
 11567 ;;
 11568                           
 11569                           	psect	text35
 11570  00445C                     __ptext35:
 11571                           	opt stack 0
 11572  00445C                     _vscp_getUserID:
 11573                           	opt stack 25
 11574                           
 11575                           ;incstack = 0
 11576                           ;incstack = 0
 11577                           ;vscp_getUserID@idx stored from wreg
 11578  00445C  CFE8 F00A          	movff	wreg,vscp_getUserID@idx
 11579                           
 11580                           ;main.c: 2372: return Read_b_eep(0x06 + idx);
 11581  004460  0E06               	movlw	6
 11582  004462  240A               	addwf	vscp_getUserID@idx,w,c
 11583  004464  6E08               	movwf	?_Read_b_eep,c
 11584  004466  6A09               	clrf	?_Read_b_eep+1,c
 11585  004468  0E00               	movlw	0
 11586  00446A  2209               	addwfc	?_Read_b_eep+1,f,c
 11587  00446C  EF4B  F022         	goto	_Read_b_eep	;wreg free
 11588  004470                     __end_of_vscp_getUserID:
 11589                           	opt stack 0
 11590                           tblptru	equ	0xFF8
 11591                           prodh	equ	0xFF4
 11592                           prodl	equ	0xFF3
 11593                           postinc0	equ	0xFEE
 11594                           wreg	equ	0xFE8
 11595                           indf2	equ	0xFDF
 11596                           postinc2	equ	0xFDE
 11597                           postdec2	equ	0xFDD
 11598                           fsr2h	equ	0xFDA
 11599                           fsr2l	equ	0xFD9
 11600                           status	equ	0xFD8
 11601                           
 11602 ;; *************** function _vscp_getMDF_URL *****************
 11603 ;; Defined at:
 11604 ;;		line 2362 in file "../main.c"
 11605 ;; Parameters:    Size  Location     Type
 11606 ;;  idx             1    wreg     unsigned char 
 11607 ;; Auto vars:     Size  Location     Type
 11608 ;;  idx             1    8[COMRAM] unsigned char 
 11609 ;; Return value:  Size  Location     Type
 11610 ;;                  1    wreg      unsigned char 
 11611 ;; Registers used:
 11612 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11613 ;; Tracked objects:
 11614 ;;		On entry : F/0
 11615 ;;		On exit  : F/0
 11616 ;;		Unchanged: F/0
 11617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11618 ;;      Params:         0       0       0       0       0       0       0
 11619 ;;      Locals:         1       0       0       0       0       0       0
 11620 ;;      Temps:          1       0       0       0       0       0       0
 11621 ;;      Totals:         2       0       0       0       0       0       0
 11622 ;;Total ram usage:        2 bytes
 11623 ;; Hardware stack levels used:    1
 11624 ;; Hardware stack levels required when called:    2
 11625 ;; This function calls:
 11626 ;;		Nothing
 11627 ;; This function is called by:
 11628 ;;		_vscp_readStdReg
 11629 ;;		_vscp_handleProtocolEvent
 11630 ;; This function uses a non-reentrant model
 11631 ;;
 11632                           
 11633                           	psect	text36
 11634  0043D6                     __ptext36:
 11635                           	opt stack 0
 11636  0043D6                     _vscp_getMDF_URL:
 11637                           	opt stack 26
 11638                           
 11639                           ;incstack = 0
 11640                           ;incstack = 0
 11641                           ;vscp_getMDF_URL@idx stored from wreg
 11642  0043D6  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 11643                           
 11644                           ; BSR set to: 0
 11645                           ;main.c: 2363: return vscp_deviceURL[ idx ];
 11646  0043DA  5009               	movf	vscp_getMDF_URL@idx,w,c
 11647  0043DC  0FBE               	addlw	low _vscp_deviceURL
 11648  0043DE  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 11649  0043E0  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 11650  0043E4  0E08               	movlw	high __smallconst
 11651  0043E6  6EF7               	movwf	tblptrh,c
 11652  0043E8  0008               	tblrd		*
 11653  0043EA  50F5               	movf	tablat,w,c
 11654                           
 11655                           ; BSR set to: 0
 11656  0043EC  0012               	return	
 11657  0043EE                     __end_of_vscp_getMDF_URL:
 11658                           	opt stack 0
 11659                           tblptru	equ	0xFF8
 11660                           tblptrh	equ	0xFF7
 11661                           tblptrl	equ	0xFF6
 11662                           tablat	equ	0xFF5
 11663                           prodh	equ	0xFF4
 11664                           prodl	equ	0xFF3
 11665                           postinc0	equ	0xFEE
 11666                           wreg	equ	0xFE8
 11667                           indf2	equ	0xFDF
 11668                           postinc2	equ	0xFDE
 11669                           postdec2	equ	0xFDD
 11670                           fsr2h	equ	0xFDA
 11671                           fsr2l	equ	0xFD9
 11672                           status	equ	0xFD8
 11673                           
 11674 ;; *************** function _vscp_getGUID *****************
 11675 ;; Defined at:
 11676 ;;		line 2350 in file "../main.c"
 11677 ;; Parameters:    Size  Location     Type
 11678 ;;  idx             1    wreg     unsigned char 
 11679 ;; Auto vars:     Size  Location     Type
 11680 ;;  idx             1    9[COMRAM] unsigned char 
 11681 ;; Return value:  Size  Location     Type
 11682 ;;                  1    wreg      unsigned char 
 11683 ;; Registers used:
 11684 ;;		wreg, status,2, status,0, cstack
 11685 ;; Tracked objects:
 11686 ;;		On entry : 0/0
 11687 ;;		On exit  : 0/0
 11688 ;;		Unchanged: 0/0
 11689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11690 ;;      Params:         0       0       0       0       0       0       0
 11691 ;;      Locals:         1       0       0       0       0       0       0
 11692 ;;      Temps:          0       0       0       0       0       0       0
 11693 ;;      Totals:         1       0       0       0       0       0       0
 11694 ;;Total ram usage:        1 bytes
 11695 ;; Hardware stack levels used:    1
 11696 ;; Hardware stack levels required when called:    3
 11697 ;; This function calls:
 11698 ;;		_Read_b_eep
 11699 ;; This function is called by:
 11700 ;;		_vscp_readStdReg
 11701 ;;		_vscp_writeStdReg
 11702 ;;		_vscp_handleProtocolEvent
 11703 ;; This function uses a non-reentrant model
 11704 ;;
 11705                           
 11706                           	psect	text37
 11707  004470                     __ptext37:
 11708                           	opt stack 0
 11709  004470                     _vscp_getGUID:
 11710                           	opt stack 25
 11711                           
 11712                           ; BSR set to: 0
 11713                           ;incstack = 0
 11714                           ;incstack = 0
 11715                           ;vscp_getGUID@idx stored from wreg
 11716  004470  CFE8 F00A          	movff	wreg,vscp_getGUID@idx
 11717                           
 11718                           ;main.c: 2351: return Read_b_eep(0x13 + idx);
 11719  004474  0E13               	movlw	19
 11720  004476  240A               	addwf	vscp_getGUID@idx,w,c
 11721  004478  6E08               	movwf	?_Read_b_eep,c
 11722  00447A  6A09               	clrf	?_Read_b_eep+1,c
 11723  00447C  0E00               	movlw	0
 11724  00447E  2209               	addwfc	?_Read_b_eep+1,f,c
 11725  004480  EF4B  F022         	goto	_Read_b_eep	;wreg free
 11726  004484                     __end_of_vscp_getGUID:
 11727                           	opt stack 0
 11728                           tblptru	equ	0xFF8
 11729                           tblptrh	equ	0xFF7
 11730                           tblptrl	equ	0xFF6
 11731                           tablat	equ	0xFF5
 11732                           prodh	equ	0xFF4
 11733                           prodl	equ	0xFF3
 11734                           postinc0	equ	0xFEE
 11735                           wreg	equ	0xFE8
 11736                           indf2	equ	0xFDF
 11737                           postinc2	equ	0xFDE
 11738                           postdec2	equ	0xFDD
 11739                           fsr2h	equ	0xFDA
 11740                           fsr2l	equ	0xFD9
 11741                           status	equ	0xFD8
 11742                           
 11743 ;; *************** function _vscp_getSubMinorVersion *****************
 11744 ;; Defined at:
 11745 ;;		line 2339 in file "../main.c"
 11746 ;; Parameters:    Size  Location     Type
 11747 ;;		None
 11748 ;; Auto vars:     Size  Location     Type
 11749 ;;		None
 11750 ;; Return value:  Size  Location     Type
 11751 ;;                  1    wreg      unsigned char 
 11752 ;; Registers used:
 11753 ;;		wreg
 11754 ;; Tracked objects:
 11755 ;;		On entry : F/0
 11756 ;;		On exit  : F/0
 11757 ;;		Unchanged: F/0
 11758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11759 ;;      Params:         0       0       0       0       0       0       0
 11760 ;;      Locals:         0       0       0       0       0       0       0
 11761 ;;      Temps:          0       0       0       0       0       0       0
 11762 ;;      Totals:         0       0       0       0       0       0       0
 11763 ;;Total ram usage:        0 bytes
 11764 ;; Hardware stack levels used:    1
 11765 ;; Hardware stack levels required when called:    2
 11766 ;; This function calls:
 11767 ;;		Nothing
 11768 ;; This function is called by:
 11769 ;;		_vscp_readStdReg
 11770 ;; This function uses a non-reentrant model
 11771 ;;
 11772                           
 11773                           	psect	text38
 11774  004510                     __ptext38:
 11775                           	opt stack 0
 11776  004510                     _vscp_getSubMinorVersion:
 11777                           	opt stack 26
 11778                           
 11779                           ; BSR set to: 0
 11780                           
 11781                           ; BSR set to: 0
 11782                           ;main.c: 2340: return 2;
 11783                           
 11784                           ;incstack = 0
 11785                           ;incstack = 0
 11786  004510  0C02               	retlw	2
 11787  004512                     __end_of_vscp_getSubMinorVersion:
 11788                           	opt stack 0
 11789                           tblptru	equ	0xFF8
 11790                           tblptrh	equ	0xFF7
 11791                           tblptrl	equ	0xFF6
 11792                           tablat	equ	0xFF5
 11793                           prodh	equ	0xFF4
 11794                           prodl	equ	0xFF3
 11795                           postinc0	equ	0xFEE
 11796                           wreg	equ	0xFE8
 11797                           indf2	equ	0xFDF
 11798                           postinc2	equ	0xFDE
 11799                           postdec2	equ	0xFDD
 11800                           fsr2h	equ	0xFDA
 11801                           fsr2l	equ	0xFD9
 11802                           status	equ	0xFD8
 11803                           
 11804 ;; *************** function _vscp_getMinorVersion *****************
 11805 ;; Defined at:
 11806 ;;		line 2330 in file "../main.c"
 11807 ;; Parameters:    Size  Location     Type
 11808 ;;		None
 11809 ;; Auto vars:     Size  Location     Type
 11810 ;;		None
 11811 ;; Return value:  Size  Location     Type
 11812 ;;                  1    wreg      unsigned char 
 11813 ;; Registers used:
 11814 ;;		wreg
 11815 ;; Tracked objects:
 11816 ;;		On entry : F/0
 11817 ;;		On exit  : F/0
 11818 ;;		Unchanged: F/0
 11819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11820 ;;      Params:         0       0       0       0       0       0       0
 11821 ;;      Locals:         0       0       0       0       0       0       0
 11822 ;;      Temps:          0       0       0       0       0       0       0
 11823 ;;      Totals:         0       0       0       0       0       0       0
 11824 ;;Total ram usage:        0 bytes
 11825 ;; Hardware stack levels used:    1
 11826 ;; Hardware stack levels required when called:    2
 11827 ;; This function calls:
 11828 ;;		Nothing
 11829 ;; This function is called by:
 11830 ;;		_vscp_readStdReg
 11831 ;; This function uses a non-reentrant model
 11832 ;;
 11833                           
 11834                           	psect	text39
 11835  004512                     __ptext39:
 11836                           	opt stack 0
 11837  004512                     _vscp_getMinorVersion:
 11838                           	opt stack 26
 11839                           
 11840                           ; BSR set to: 0
 11841                           
 11842                           ; BSR set to: 0
 11843                           ;main.c: 2331: return 1;
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;incstack = 0
 11847                           ;incstack = 0
 11848  004512  0C01               	retlw	1
 11849  004514                     __end_of_vscp_getMinorVersion:
 11850                           	opt stack 0
 11851                           tblptru	equ	0xFF8
 11852                           tblptrh	equ	0xFF7
 11853                           tblptrl	equ	0xFF6
 11854                           tablat	equ	0xFF5
 11855                           prodh	equ	0xFF4
 11856                           prodl	equ	0xFF3
 11857                           postinc0	equ	0xFEE
 11858                           wreg	equ	0xFE8
 11859                           indf2	equ	0xFDF
 11860                           postinc2	equ	0xFDE
 11861                           postdec2	equ	0xFDD
 11862                           fsr2h	equ	0xFDA
 11863                           fsr2l	equ	0xFD9
 11864                           status	equ	0xFD8
 11865                           
 11866 ;; *************** function _vscp_getMajorVersion *****************
 11867 ;; Defined at:
 11868 ;;		line 2321 in file "../main.c"
 11869 ;; Parameters:    Size  Location     Type
 11870 ;;		None
 11871 ;; Auto vars:     Size  Location     Type
 11872 ;;		None
 11873 ;; Return value:  Size  Location     Type
 11874 ;;                  1    wreg      unsigned char 
 11875 ;; Registers used:
 11876 ;;		wreg
 11877 ;; Tracked objects:
 11878 ;;		On entry : F/0
 11879 ;;		On exit  : F/0
 11880 ;;		Unchanged: F/0
 11881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11882 ;;      Params:         0       0       0       0       0       0       0
 11883 ;;      Locals:         0       0       0       0       0       0       0
 11884 ;;      Temps:          0       0       0       0       0       0       0
 11885 ;;      Totals:         0       0       0       0       0       0       0
 11886 ;;Total ram usage:        0 bytes
 11887 ;; Hardware stack levels used:    1
 11888 ;; Hardware stack levels required when called:    2
 11889 ;; This function calls:
 11890 ;;		Nothing
 11891 ;; This function is called by:
 11892 ;;		_vscp_readStdReg
 11893 ;; This function uses a non-reentrant model
 11894 ;;
 11895                           
 11896                           	psect	text40
 11897  004514                     __ptext40:
 11898                           	opt stack 0
 11899  004514                     _vscp_getMajorVersion:
 11900                           	opt stack 26
 11901                           
 11902                           ; BSR set to: 0
 11903                           
 11904                           ; BSR set to: 0
 11905                           ;main.c: 2322: return 1;
 11906                           
 11907                           ; BSR set to: 0
 11908                           ;incstack = 0
 11909                           ;incstack = 0
 11910  004514  0C01               	retlw	1
 11911  004516                     __end_of_vscp_getMajorVersion:
 11912                           	opt stack 0
 11913                           tblptru	equ	0xFF8
 11914                           tblptrh	equ	0xFF7
 11915                           tblptrl	equ	0xFF6
 11916                           tablat	equ	0xFF5
 11917                           prodh	equ	0xFF4
 11918                           prodl	equ	0xFF3
 11919                           postinc0	equ	0xFEE
 11920                           wreg	equ	0xFE8
 11921                           indf2	equ	0xFDF
 11922                           postinc2	equ	0xFDE
 11923                           postdec2	equ	0xFDD
 11924                           fsr2h	equ	0xFDA
 11925                           fsr2l	equ	0xFD9
 11926                           status	equ	0xFD8
 11927                           
 11928 ;; *************** function _vscp_newNodeOnline *****************
 11929 ;; Defined at:
 11930 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 11931 ;; Parameters:    Size  Location     Type
 11932 ;;		None
 11933 ;; Auto vars:     Size  Location     Type
 11934 ;;		None
 11935 ;; Return value:  Size  Location     Type
 11936 ;;		None               void
 11937 ;; Registers used:
 11938 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11939 ;; Tracked objects:
 11940 ;;		On entry : F/0
 11941 ;;		On exit  : F/0
 11942 ;;		Unchanged: 0/0
 11943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11944 ;;      Params:         0       0       0       0       0       0       0
 11945 ;;      Locals:         0       0       0       0       0       0       0
 11946 ;;      Temps:          1       0       0       0       0       0       0
 11947 ;;      Totals:         1       0       0       0       0       0       0
 11948 ;;Total ram usage:        1 bytes
 11949 ;; Hardware stack levels used:    1
 11950 ;; Hardware stack levels required when called:    7
 11951 ;; This function calls:
 11952 ;;		_vscp_sendEvent
 11953 ;; This function is called by:
 11954 ;;		_vscp_handleProtocolEvent
 11955 ;; This function uses a non-reentrant model
 11956 ;;
 11957                           
 11958                           	psect	text41
 11959  004188                     __ptext41:
 11960                           	opt stack 0
 11961  004188                     _vscp_newNodeOnline:
 11962                           	opt stack 22
 11963                           
 11964                           ; BSR set to: 0
 11965                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 11966                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11967                           
 11968                           ; BSR set to: 0
 11969                           ;incstack = 0
 11970                           ;incstack = 0
 11971  004188  C097  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 11972  00418C  0E0F               	movlw	15
 11973  00418E  164C               	andwf	??_vscp_newNodeOnline,f,c
 11974  004190  044C               	decf	??_vscp_newNodeOnline,w,c
 11975  004192  E10E               	bnz	l1113
 11976                           
 11977                           ; BSR set to: 0
 11978  004194  5192               	movf	_vscp_nickname& (0+255),w,b
 11979  004196  EE20  F09D         	lfsr	2,_vscp_imsg+6
 11980  00419A  62DF               	cpfseq	indf2,c
 11981  00419C  D009               	goto	l1113
 11982                           
 11983                           ; BSR set to: 0
 11984                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 11985  00419E  0E80               	movlw	128
 11986  0041A0  6FA5               	movwf	_vscp_omsg& (0+255),b
 11987                           
 11988                           ; BSR set to: 0
 11989                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 11990  0041A2  6BA6               	clrf	(_vscp_omsg+1)& (0+255),b
 11991                           
 11992                           ; BSR set to: 0
 11993                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 11994  0041A4  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 11995  0041A6  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 11996                           
 11997                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 11998  0041A8  0E03               	movlw	3
 11999  0041AA  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
 12000                           
 12001                           ; BSR set to: 0
 12002                           ;vscp_firmware.c: 514: vscp_sendEvent();
 12003  0041AC  EC3B  F021         	call	_vscp_sendEvent	;wreg free
 12004  0041B0                     l1113:
 12005                           
 12006                           ; BSR set to: 0
 12007  0041B0  0012               	return	
 12008  0041B2                     __end_of_vscp_newNodeOnline:
 12009                           	opt stack 0
 12010                           tblptru	equ	0xFF8
 12011                           tblptrh	equ	0xFF7
 12012                           tblptrl	equ	0xFF6
 12013                           tablat	equ	0xFF5
 12014                           prodh	equ	0xFF4
 12015                           prodl	equ	0xFF3
 12016                           postinc0	equ	0xFEE
 12017                           wreg	equ	0xFE8
 12018                           indf2	equ	0xFDF
 12019                           postinc2	equ	0xFDE
 12020                           postdec2	equ	0xFDD
 12021                           fsr2h	equ	0xFDA
 12022                           fsr2l	equ	0xFD9
 12023                           status	equ	0xFD8
 12024                           
 12025 ;; *************** function _vscp_handleDropNickname *****************
 12026 ;; Defined at:
 12027 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 12028 ;; Parameters:    Size  Location     Type
 12029 ;;		None
 12030 ;; Auto vars:     Size  Location     Type
 12031 ;;  bytes           1   12[COMRAM] unsigned char 
 12032 ;; Return value:  Size  Location     Type
 12033 ;;		None               void
 12034 ;; Registers used:
 12035 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12036 ;; Tracked objects:
 12037 ;;		On entry : F/0
 12038 ;;		On exit  : F/0
 12039 ;;		Unchanged: 0/0
 12040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12041 ;;      Params:         0       0       0       0       0       0       0
 12042 ;;      Locals:         1       0       0       0       0       0       0
 12043 ;;      Temps:          0       0       0       0       0       0       0
 12044 ;;      Totals:         1       0       0       0       0       0       0
 12045 ;;Total ram usage:        1 bytes
 12046 ;; Hardware stack levels used:    1
 12047 ;; Hardware stack levels required when called:    5
 12048 ;; This function calls:
 12049 ;;		_vscp_init
 12050 ;;		_vscp_writeNicknamePermanent
 12051 ;; This function is called by:
 12052 ;;		_vscp_handleProtocolEvent
 12053 ;; This function uses a non-reentrant model
 12054 ;;
 12055                           
 12056                           	psect	text42
 12057  00412C                     __ptext42:
 12058                           	opt stack 0
 12059  00412C                     _vscp_handleDropNickname:
 12060                           	opt stack 24
 12061                           
 12062                           ; BSR set to: 0
 12063                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 12064                           
 12065                           ; BSR set to: 0
 12066                           ;incstack = 0
 12067                           ;incstack = 0
 12068  00412C  5197               	movf	_vscp_imsg& (0+255),w,b
 12069  00412E  0B0F               	andlw	15
 12070  004130  6E0D               	movwf	vscp_handleDropNickname@bytes,c
 12071                           
 12072                           ; BSR set to: 0
 12073                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12074  004132  500D               	movf	vscp_handleDropNickname@bytes,w,c
 12075  004134  E012               	bz	l1109
 12076                           
 12077                           ; BSR set to: 0
 12078  004136  5192               	movf	_vscp_nickname& (0+255),w,b
 12079  004138  EE20  F09D         	lfsr	2,_vscp_imsg+6
 12080  00413C  62DF               	cpfseq	indf2,c
 12081  00413E  D00D               	goto	l1109
 12082                           
 12083                           ; BSR set to: 0
 12084                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 12085  004140  040D               	decf	vscp_handleDropNickname@bytes,w,c
 12086  004142  E005               	bz	l1108
 12087                           
 12088                           ; BSR set to: 0
 12089  004144  0E01               	movlw	1
 12090  004146  640D               	cpfsgt	vscp_handleDropNickname@bytes,c
 12091  004148  D008               	goto	l1109
 12092                           
 12093                           ; BSR set to: 0
 12094  00414A  679E               	tstfsz	(_vscp_imsg+7)& (0+255),b
 12095  00414C  D006               	goto	l1109
 12096  00414E                     l1108:
 12097                           
 12098                           ; BSR set to: 0
 12099                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 12100  00414E  6992               	setf	_vscp_nickname& (0+255),b
 12101                           
 12102                           ; BSR set to: 0
 12103                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 12104  004150  0EFF               	movlw	255
 12105  004152  EC19  F022         	call	_vscp_writeNicknamePermanent
 12106                           
 12107                           ;vscp_firmware.c: 481: vscp_init();
 12108  004156  EC1C  F020         	call	_vscp_init	;wreg free
 12109  00415A                     l1109:
 12110                           
 12111                           ; BSR set to: 0
 12112  00415A  0012               	return	
 12113  00415C                     __end_of_vscp_handleDropNickname:
 12114                           	opt stack 0
 12115                           tblptru	equ	0xFF8
 12116                           tblptrh	equ	0xFF7
 12117                           tblptrl	equ	0xFF6
 12118                           tablat	equ	0xFF5
 12119                           prodh	equ	0xFF4
 12120                           prodl	equ	0xFF3
 12121                           postinc0	equ	0xFEE
 12122                           wreg	equ	0xFE8
 12123                           indf2	equ	0xFDF
 12124                           postinc2	equ	0xFDE
 12125                           postdec2	equ	0xFDD
 12126                           fsr2h	equ	0xFDA
 12127                           fsr2l	equ	0xFD9
 12128                           status	equ	0xFD8
 12129                           
 12130 ;; *************** function _vscp_init *****************
 12131 ;; Defined at:
 12132 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 12133 ;; Parameters:    Size  Location     Type
 12134 ;;		None
 12135 ;; Auto vars:     Size  Location     Type
 12136 ;;		None
 12137 ;; Return value:  Size  Location     Type
 12138 ;;		None               void
 12139 ;; Registers used:
 12140 ;;		wreg, status,2, cstack
 12141 ;; Tracked objects:
 12142 ;;		On entry : 0/0
 12143 ;;		On exit  : F/0
 12144 ;;		Unchanged: 0/0
 12145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12146 ;;      Params:         0       0       0       0       0       0       0
 12147 ;;      Locals:         0       0       0       0       0       0       0
 12148 ;;      Temps:          0       0       0       0       0       0       0
 12149 ;;      Totals:         0       0       0       0       0       0       0
 12150 ;;Total ram usage:        0 bytes
 12151 ;; Hardware stack levels used:    1
 12152 ;; Hardware stack levels required when called:    4
 12153 ;; This function calls:
 12154 ;;		_vscp_readNicknamePermanent
 12155 ;; This function is called by:
 12156 ;;		_main
 12157 ;;		_vscp_handleDropNickname
 12158 ;;		_vscp_handleProtocolEvent
 12159 ;; This function uses a non-reentrant model
 12160 ;;
 12161                           
 12162                           	psect	text43
 12163  004038                     __ptext43:
 12164                           	opt stack 0
 12165  004038                     _vscp_init:
 12166                           	opt stack 24
 12167                           
 12168                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 12169                           
 12170                           ; BSR set to: 0
 12171                           ;incstack = 0
 12172                           ;incstack = 0
 12173  004038  0E02               	movlw	2
 12174  00403A  6E56               	movwf	_vscp_initledfunc,c
 12175                           
 12176                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 12177  00403C  EC71  F022         	call	_vscp_readNicknamePermanent	;wreg free
 12178  004040  0100               	movlb	0	; () banked
 12179  004042  6F92               	movwf	_vscp_nickname& (0+255),b
 12180                           
 12181                           ; BSR set to: 0
 12182                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 12183  004044  6792               	tstfsz	_vscp_nickname& (0+255),b
 12184  004046  D001               	goto	l1050
 12185                           
 12186                           ; BSR set to: 0
 12187  004048  6992               	setf	_vscp_nickname& (0+255),b
 12188  00404A                     l1050:
 12189                           
 12190                           ; BSR set to: 0
 12191                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 12192  00404A  6B97               	clrf	_vscp_imsg& (0+255),b
 12193                           
 12194                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 12195  00404C  6B98               	clrf	(_vscp_imsg+1)& (0+255),b
 12196                           
 12197                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 12198  00404E  6B99               	clrf	(_vscp_imsg+2)& (0+255),b
 12199  004050  6B9A               	clrf	(_vscp_imsg+3)& (0+255),b
 12200                           
 12201                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 12202  004052  6B9B               	clrf	(_vscp_imsg+4)& (0+255),b
 12203                           
 12204                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 12205  004054  6BA5               	clrf	_vscp_omsg& (0+255),b
 12206                           
 12207                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 12208  004056  6BA6               	clrf	(_vscp_omsg+1)& (0+255),b
 12209                           
 12210                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 12211  004058  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 12212  00405A  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 12213                           
 12214                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 12215  00405C  6BA9               	clrf	(_vscp_omsg+4)& (0+255),b
 12216                           
 12217                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 12218  00405E  6A55               	clrf	_vscp_alarmstatus,c
 12219                           
 12220                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 12221  004060  6A57               	clrf	_vscp_probe_address,c
 12222                           
 12223                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 12224  004062  6B93               	clrf	_vscp_node_state& (0+255),b
 12225                           
 12226                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 12227  004064  6B94               	clrf	_vscp_node_substate& (0+255),b
 12228                           
 12229                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 12230  004066  6B95               	clrf	_vscp_probe_cnt& (0+255),b
 12231                           
 12232                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 12233  004068  6A52               	clrf	_vscp_page_select,c
 12234  00406A  6A53               	clrf	_vscp_page_select+1,c
 12235                           
 12236                           ;vscp_firmware.c: 153: vscp_timer = 0;
 12237  00406C  6B88               	clrf	_vscp_timer& (0+255),b	;volatile
 12238  00406E  6B89               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12239                           
 12240                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 12241  004070  6B86               	clrf	_vscp_configtimer& (0+255),b	;volatile
 12242  004072  6B87               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 12243                           
 12244                           ;vscp_firmware.c: 155: vscp_second = 0;
 12245  004074  6B96               	clrf	_vscp_second& (0+255),b
 12246                           
 12247                           ;vscp_firmware.c: 156: vscp_minute = 0;
 12248  004076  6B91               	clrf	_vscp_minute& (0+255),b
 12249                           
 12250                           ;vscp_firmware.c: 157: vscp_hour = 0;
 12251  004078  6B8F               	clrf	_vscp_hour& (0+255),b
 12252                           
 12253                           ; BSR set to: 0
 12254  00407A  0012               	return	
 12255  00407C                     __end_of_vscp_init:
 12256                           	opt stack 0
 12257                           tblptru	equ	0xFF8
 12258                           tblptrh	equ	0xFF7
 12259                           tblptrl	equ	0xFF6
 12260                           tablat	equ	0xFF5
 12261                           prodh	equ	0xFF4
 12262                           prodl	equ	0xFF3
 12263                           postinc0	equ	0xFEE
 12264                           wreg	equ	0xFE8
 12265                           indf2	equ	0xFDF
 12266                           postinc2	equ	0xFDE
 12267                           postdec2	equ	0xFDD
 12268                           fsr2h	equ	0xFDA
 12269                           fsr2l	equ	0xFD9
 12270                           status	equ	0xFD8
 12271                           
 12272 ;; *************** function _vscp_readNicknamePermanent *****************
 12273 ;; Defined at:
 12274 ;;		line 852 in file "../main.c"
 12275 ;; Parameters:    Size  Location     Type
 12276 ;;		None
 12277 ;; Auto vars:     Size  Location     Type
 12278 ;;		None
 12279 ;; Return value:  Size  Location     Type
 12280 ;;                  1    wreg      unsigned char 
 12281 ;; Registers used:
 12282 ;;		wreg, status,2, cstack
 12283 ;; Tracked objects:
 12284 ;;		On entry : 0/0
 12285 ;;		On exit  : 0/0
 12286 ;;		Unchanged: 0/0
 12287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12288 ;;      Params:         0       0       0       0       0       0       0
 12289 ;;      Locals:         0       0       0       0       0       0       0
 12290 ;;      Temps:          0       0       0       0       0       0       0
 12291 ;;      Totals:         0       0       0       0       0       0       0
 12292 ;;Total ram usage:        0 bytes
 12293 ;; Hardware stack levels used:    1
 12294 ;; Hardware stack levels required when called:    3
 12295 ;; This function calls:
 12296 ;;		_Read_b_eep
 12297 ;; This function is called by:
 12298 ;;		_vscp_init
 12299 ;; This function uses a non-reentrant model
 12300 ;;
 12301                           
 12302                           	psect	text44
 12303  0044E2                     __ptext44:
 12304                           	opt stack 0
 12305  0044E2                     _vscp_readNicknamePermanent:
 12306                           	opt stack 24
 12307                           
 12308                           ;main.c: 853: return Read_b_eep(0x01);
 12309                           
 12310                           ; BSR set to: 0
 12311                           ;incstack = 0
 12312                           ;incstack = 0
 12313  0044E2  6A09               	clrf	?_Read_b_eep+1,c
 12314  0044E4  0E01               	movlw	1
 12315  0044E6  6E08               	movwf	?_Read_b_eep,c
 12316  0044E8  EF4B  F022         	goto	_Read_b_eep	;wreg free
 12317  0044EC                     __end_of_vscp_readNicknamePermanent:
 12318                           	opt stack 0
 12319                           tblptru	equ	0xFF8
 12320                           tblptrh	equ	0xFF7
 12321                           tblptrl	equ	0xFF6
 12322                           tablat	equ	0xFF5
 12323                           prodh	equ	0xFF4
 12324                           prodl	equ	0xFF3
 12325                           postinc0	equ	0xFEE
 12326                           wreg	equ	0xFE8
 12327                           indf2	equ	0xFDF
 12328                           postinc2	equ	0xFDE
 12329                           postdec2	equ	0xFDD
 12330                           fsr2h	equ	0xFDA
 12331                           fsr2l	equ	0xFD9
 12332                           status	equ	0xFD8
 12333                           
 12334 ;; *************** function _vscp_handleSetNickname *****************
 12335 ;; Defined at:
 12336 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 12337 ;; Parameters:    Size  Location     Type
 12338 ;;		None
 12339 ;; Auto vars:     Size  Location     Type
 12340 ;;		None
 12341 ;; Return value:  Size  Location     Type
 12342 ;;		None               void
 12343 ;; Registers used:
 12344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12345 ;; Tracked objects:
 12346 ;;		On entry : F/0
 12347 ;;		On exit  : 0/0
 12348 ;;		Unchanged: 0/0
 12349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12350 ;;      Params:         0       0       0       0       0       0       0
 12351 ;;      Locals:         0       0       0       0       0       0       0
 12352 ;;      Temps:          0       0       0       0       0       0       0
 12353 ;;      Totals:         0       0       0       0       0       0       0
 12354 ;;Total ram usage:        0 bytes
 12355 ;; Hardware stack levels used:    1
 12356 ;; Hardware stack levels required when called:    4
 12357 ;; This function calls:
 12358 ;;		_vscp_writeNicknamePermanent
 12359 ;;		_vscp_setSegmentCRC
 12360 ;; This function is called by:
 12361 ;;		_vscp_handleProtocolEvent
 12362 ;; This function uses a non-reentrant model
 12363 ;;
 12364                           
 12365                           	psect	text45
 12366  00429C                     __ptext45:
 12367                           	opt stack 0
 12368  00429C                     _vscp_handleSetNickname:
 12369                           	opt stack 25
 12370                           
 12371                           ; BSR set to: 0
 12372                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 12373                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12374                           
 12375                           ;incstack = 0
 12376                           ;incstack = 0
 12377  00429C  5197               	movf	_vscp_imsg& (0+255),w,b
 12378  00429E  0B0F               	andlw	15
 12379  0042A0  0A02               	xorlw	2
 12380  0042A2  E10D               	bnz	l1102
 12381                           
 12382                           ; BSR set to: 0
 12383  0042A4  5192               	movf	_vscp_nickname& (0+255),w,b
 12384  0042A6  EE20  F09D         	lfsr	2,_vscp_imsg+6
 12385  0042AA  62DF               	cpfseq	indf2,c
 12386  0042AC  D008               	goto	l1102
 12387                           
 12388                           ; BSR set to: 0
 12389                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 12390  0042AE  C09E  F092         	movff	_vscp_imsg+7,_vscp_nickname
 12391                           
 12392                           ; BSR set to: 0
 12393                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 12394  0042B2  5192               	movf	_vscp_nickname& (0+255),w,b
 12395  0042B4  EC19  F022         	call	_vscp_writeNicknamePermanent
 12396                           
 12397                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 12398  0042B8  0E40               	movlw	64
 12399  0042BA  EC0E  F022         	call	_vscp_setSegmentCRC
 12400  0042BE                     l1102:
 12401  0042BE  0012               	return	
 12402  0042C0                     __end_of_vscp_handleSetNickname:
 12403                           	opt stack 0
 12404                           tblptru	equ	0xFF8
 12405                           tblptrh	equ	0xFF7
 12406                           tblptrl	equ	0xFF6
 12407                           tablat	equ	0xFF5
 12408                           prodh	equ	0xFF4
 12409                           prodl	equ	0xFF3
 12410                           postinc0	equ	0xFEE
 12411                           wreg	equ	0xFE8
 12412                           indf2	equ	0xFDF
 12413                           postinc2	equ	0xFDE
 12414                           postdec2	equ	0xFDD
 12415                           fsr2h	equ	0xFDA
 12416                           fsr2l	equ	0xFD9
 12417                           status	equ	0xFD8
 12418                           
 12419 ;; *************** function _vscp_handleHeartbeat *****************
 12420 ;; Defined at:
 12421 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 12422 ;; Parameters:    Size  Location     Type
 12423 ;;		None
 12424 ;; Auto vars:     Size  Location     Type
 12425 ;;		None
 12426 ;; Return value:  Size  Location     Type
 12427 ;;		None               void
 12428 ;; Registers used:
 12429 ;;		wreg, status,2, status,0, cstack
 12430 ;; Tracked objects:
 12431 ;;		On entry : F/0
 12432 ;;		On exit  : 0/0
 12433 ;;		Unchanged: 0/0
 12434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12435 ;;      Params:         0       0       0       0       0       0       0
 12436 ;;      Locals:         0       0       0       0       0       0       0
 12437 ;;      Temps:          0       0       0       0       0       0       0
 12438 ;;      Totals:         0       0       0       0       0       0       0
 12439 ;;Total ram usage:        0 bytes
 12440 ;; Hardware stack levels used:    1
 12441 ;; Hardware stack levels required when called:    4
 12442 ;; This function calls:
 12443 ;;		_vscp_writeNicknamePermanent
 12444 ;;		_vscp_getSegmentCRC
 12445 ;;		_vscp_setSegmentCRC
 12446 ;; This function is called by:
 12447 ;;		_vscp_handleProtocolEvent
 12448 ;; This function uses a non-reentrant model
 12449 ;;
 12450                           
 12451                           	psect	text46
 12452  00407C                     __ptext46:
 12453                           	opt stack 0
 12454  00407C                     _vscp_handleHeartbeat:
 12455                           	opt stack 25
 12456                           
 12457                           ; BSR set to: 0
 12458                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 12459                           
 12460                           ;incstack = 0
 12461                           ;incstack = 0
 12462  00407C  EC76  F022         	call	_vscp_getSegmentCRC	;wreg free
 12463  004080  0900               	iorlw	0
 12464  004082  E116               	bnz	l9723
 12465                           
 12466                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 12467                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 12468  004084  0100               	movlb	0	; () banked
 12469  004086  5197               	movf	_vscp_imsg& (0+255),w,b
 12470  004088  0B0F               	andlw	15
 12471  00408A  0A05               	xorlw	5
 12472  00408C  E115               	bnz	l1098
 12473                           
 12474                           ; BSR set to: 0
 12475  00408E  EC76  F022         	call	_vscp_getSegmentCRC	;wreg free
 12476  004092  0100               	movlb	0	; () banked
 12477  004094  199D               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 12478  004096  E010               	bz	l1098
 12479                           
 12480                           ; BSR set to: 0
 12481                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12482  004098  519D               	movf	(_vscp_imsg+6)& (0+255),w,b
 12483  00409A  EC0E  F022         	call	_vscp_setSegmentCRC
 12484                           
 12485                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 12486  00409E  0100               	movlb	0	; () banked
 12487  0040A0  6992               	setf	_vscp_nickname& (0+255),b
 12488                           
 12489                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 12490  0040A2  0EFF               	movlw	255
 12491  0040A4  EC19  F022         	call	_vscp_writeNicknamePermanent
 12492                           
 12493                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 12494  0040A8  0E01               	movlw	1
 12495  0040AA  0100               	movlb	0	; () banked
 12496  0040AC  6F93               	movwf	_vscp_node_state& (0+255),b
 12497  0040AE  D004               	goto	l1098
 12498  0040B0                     l9723:
 12499                           
 12500                           ;vscp_firmware.c: 411: else {
 12501                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12502  0040B0  0100               	movlb	0	; () banked
 12503  0040B2  519D               	movf	(_vscp_imsg+6)& (0+255),w,b
 12504  0040B4  EC0E  F022         	call	_vscp_setSegmentCRC
 12505  0040B8                     l1098:
 12506  0040B8  0012               	return	
 12507  0040BA                     __end_of_vscp_handleHeartbeat:
 12508                           	opt stack 0
 12509                           tblptru	equ	0xFF8
 12510                           tblptrh	equ	0xFF7
 12511                           tblptrl	equ	0xFF6
 12512                           tablat	equ	0xFF5
 12513                           prodh	equ	0xFF4
 12514                           prodl	equ	0xFF3
 12515                           postinc0	equ	0xFEE
 12516                           wreg	equ	0xFE8
 12517                           indf2	equ	0xFDF
 12518                           postinc2	equ	0xFDE
 12519                           postdec2	equ	0xFDD
 12520                           fsr2h	equ	0xFDA
 12521                           fsr2l	equ	0xFD9
 12522                           status	equ	0xFD8
 12523                           
 12524 ;; *************** function _vscp_getMatrixInfo *****************
 12525 ;; Defined at:
 12526 ;;		line 2531 in file "../main.c"
 12527 ;; Parameters:    Size  Location     Type
 12528 ;;  pData           1    wreg     PTR unsigned char 
 12529 ;;		 -> vscp_omsg(13), 
 12530 ;; Auto vars:     Size  Location     Type
 12531 ;;  pData           1    0[COMRAM] PTR unsigned char 
 12532 ;;		 -> vscp_omsg(13), 
 12533 ;;  i               1    7[COMRAM] unsigned char 
 12534 ;; Return value:  Size  Location     Type
 12535 ;;		None               void
 12536 ;; Registers used:
 12537 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12538 ;; Tracked objects:
 12539 ;;		On entry : F/0
 12540 ;;		On exit  : F/0
 12541 ;;		Unchanged: 0/0
 12542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12543 ;;      Params:         0       0       0       0       0       0       0
 12544 ;;      Locals:         1       0       0       0       0       0       0
 12545 ;;      Temps:          0       0       0       0       0       0       0
 12546 ;;      Totals:         1       0       0       0       0       0       0
 12547 ;;Total ram usage:        1 bytes
 12548 ;; Hardware stack levels used:    1
 12549 ;; Hardware stack levels required when called:    2
 12550 ;; This function calls:
 12551 ;;		Nothing
 12552 ;; This function is called by:
 12553 ;;		_vscp_handleProtocolEvent
 12554 ;; This function uses a non-reentrant model
 12555 ;;
 12556                           
 12557                           	psect	text47
 12558  004328                     __ptext47:
 12559                           	opt stack 0
 12560  004328                     _vscp_getMatrixInfo:
 12561                           	opt stack 27
 12562                           
 12563                           ; BSR set to: 0
 12564                           ;main.c: 2532: uint8_t i;
 12565                           ;main.c: 2534: vscp_omsg.data[ 0 ] = 7;
 12566                           
 12567                           ;incstack = 0
 12568                           ;incstack = 0
 12569  004328  0E07               	movlw	7
 12570  00432A  6FAA               	movwf	(_vscp_omsg+5)& (0+255),b
 12571                           
 12572                           ;main.c: 2535: vscp_omsg.data[ 1 ] = 72;
 12573  00432C  0E48               	movlw	72
 12574  00432E  6FAB               	movwf	(_vscp_omsg+6)& (0+255),b
 12575                           
 12576                           ;main.c: 2538: for ( i = 2; i < 8; i++ ) {
 12577  004330  0E02               	movlw	2
 12578  004332  6E08               	movwf	vscp_getMatrixInfo@i,c
 12579  004334                     l6909:
 12580                           
 12581                           ; BSR set to: 0
 12582                           ;main.c: 2539: vscp_omsg.data[ i ] = 0;
 12583  004334  5008               	movf	vscp_getMatrixInfo@i,w,c
 12584  004336  0FAA               	addlw	low (_vscp_omsg+5)
 12585  004338  6ED9               	movwf	fsr2l,c
 12586  00433A  6ADA               	clrf	fsr2h,c
 12587  00433C  6ADF               	clrf	indf2,c
 12588                           
 12589                           ; BSR set to: 0
 12590  00433E  2A08               	incf	vscp_getMatrixInfo@i,f,c
 12591                           
 12592                           ; BSR set to: 0
 12593  004340  0E07               	movlw	7
 12594  004342  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 12595  004344  D7F7               	goto	l6909
 12596                           
 12597                           ; BSR set to: 0
 12598  004346  0C07               	retlw	7
 12599  004348                     __end_of_vscp_getMatrixInfo:
 12600                           	opt stack 0
 12601                           tblptru	equ	0xFF8
 12602                           tblptrh	equ	0xFF7
 12603                           tblptrl	equ	0xFF6
 12604                           tablat	equ	0xFF5
 12605                           prodh	equ	0xFF4
 12606                           prodl	equ	0xFF3
 12607                           postinc0	equ	0xFEE
 12608                           wreg	equ	0xFE8
 12609                           indf2	equ	0xFDF
 12610                           postinc2	equ	0xFDE
 12611                           postdec2	equ	0xFDD
 12612                           fsr2h	equ	0xFDA
 12613                           fsr2l	equ	0xFD9
 12614                           status	equ	0xFD8
 12615                           
 12616 ;; *************** function _vscp_goBootloaderMode *****************
 12617 ;; Defined at:
 12618 ;;		line 2515 in file "../main.c"
 12619 ;; Parameters:    Size  Location     Type
 12620 ;;  algorithm       1    wreg     unsigned char 
 12621 ;; Auto vars:     Size  Location     Type
 12622 ;;  algorithm       1   11[COMRAM] unsigned char 
 12623 ;; Return value:  Size  Location     Type
 12624 ;;		None               void
 12625 ;; Registers used:
 12626 ;;		wreg, status,2, status,0, cstack
 12627 ;; Tracked objects:
 12628 ;;		On entry : F/0
 12629 ;;		On exit  : 0/0
 12630 ;;		Unchanged: 0/0
 12631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12632 ;;      Params:         0       0       0       0       0       0       0
 12633 ;;      Locals:         1       0       0       0       0       0       0
 12634 ;;      Temps:          0       0       0       0       0       0       0
 12635 ;;      Totals:         1       0       0       0       0       0       0
 12636 ;;Total ram usage:        1 bytes
 12637 ;; Hardware stack levels used:    1
 12638 ;; Hardware stack levels required when called:    3
 12639 ;; This function calls:
 12640 ;;		_Busy_eep
 12641 ;;		_Write_b_eep
 12642 ;; This function is called by:
 12643 ;;		_vscp_handleProtocolEvent
 12644 ;; This function uses a non-reentrant model
 12645 ;;
 12646                           
 12647                           	psect	text48
 12648  0043A0                     __ptext48:
 12649                           	opt stack 0
 12650  0043A0                     _vscp_goBootloaderMode:
 12651                           	opt stack 26
 12652                           
 12653                           ; BSR set to: 0
 12654                           ;incstack = 0
 12655                           ;incstack = 0
 12656                           ;vscp_goBootloaderMode@algorithm stored from wreg
 12657  0043A0  CFE8 F00C          	movff	wreg,vscp_goBootloaderMode@algorithm
 12658                           
 12659                           ; BSR set to: 0
 12660                           ;main.c: 2516: if ( 0x01 != algorithm ) return;
 12661  0043A4  040C               	decf	vscp_goBootloaderMode@algorithm,w,c
 12662  0043A6  E109               	bnz	l640
 12663                           
 12664                           ; BSR set to: 0
 12665                           ;main.c: 2520: (Busy_eep(), Write_b_eep(0x00,0xff));
 12666  0043A8  EC7F  F022         	call	_Busy_eep	;wreg free
 12667  0043AC  6A09               	clrf	?_Write_b_eep+1,c
 12668  0043AE  6A08               	clrf	?_Write_b_eep,c
 12669  0043B0  0EFF               	movlw	255
 12670  0043B2  680A               	setf	?_Write_b_eep+2,c
 12671  0043B4  EC7C  F020         	call	_Write_b_eep	;wreg free
 12672  0043B8  00FF               	reset		;# 
 12673  0043BA                     l640:
 12674  0043BA  0012               	return	
 12675  0043BC                     __end_of_vscp_goBootloaderMode:
 12676                           	opt stack 0
 12677                           tblptru	equ	0xFF8
 12678                           tblptrh	equ	0xFF7
 12679                           tblptrl	equ	0xFF6
 12680                           tablat	equ	0xFF5
 12681                           prodh	equ	0xFF4
 12682                           prodl	equ	0xFF3
 12683                           postinc0	equ	0xFEE
 12684                           wreg	equ	0xFE8
 12685                           indf2	equ	0xFDF
 12686                           postinc2	equ	0xFDE
 12687                           postdec2	equ	0xFDD
 12688                           fsr2h	equ	0xFDA
 12689                           fsr2l	equ	0xFD9
 12690                           status	equ	0xFD8
 12691                           
 12692 ;; *************** function _vscp_handleProbeState *****************
 12693 ;; Defined at:
 12694 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 12695 ;; Parameters:    Size  Location     Type
 12696 ;;		None
 12697 ;; Auto vars:     Size  Location     Type
 12698 ;;		None
 12699 ;; Return value:  Size  Location     Type
 12700 ;;		None               void
 12701 ;; Registers used:
 12702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12703 ;; Tracked objects:
 12704 ;;		On entry : 0/0
 12705 ;;		On exit  : F/0
 12706 ;;		Unchanged: 0/0
 12707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12708 ;;      Params:         0       0       0       0       0       0       0
 12709 ;;      Locals:         0       0       0       0       0       0       0
 12710 ;;      Temps:          0       0       0       0       0       0       0
 12711 ;;      Totals:         0       0       0       0       0       0       0
 12712 ;;Total ram usage:        0 bytes
 12713 ;; Hardware stack levels used:    1
 12714 ;; Hardware stack levels required when called:    8
 12715 ;; This function calls:
 12716 ;;		_vscp_goActiveState
 12717 ;;		_vscp_writeNicknamePermanent
 12718 ;;		_vscp_sendEvent
 12719 ;;		_vscp_setSegmentCRC
 12720 ;; This function is called by:
 12721 ;;		_main
 12722 ;; This function uses a non-reentrant model
 12723 ;;
 12724                           
 12725                           	psect	text49
 12726  003AEC                     __ptext49:
 12727                           	opt stack 0
 12728  003AEC                     _vscp_handleProbeState:
 12729                           	opt stack 22
 12730                           
 12731                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 12732                           
 12733                           ;incstack = 0
 12734                           ;incstack = 0
 12735  003AEC  D053               	goto	l8093
 12736  003AEE                     l8023:
 12737                           
 12738                           ; BSR set to: 0
 12739                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 12740  003AEE  2857               	incf	_vscp_probe_address,w,c
 12741  003AF0  E010               	bz	l8039
 12742                           
 12743                           ; BSR set to: 0
 12744                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 12745  003AF2  0E81               	movlw	129
 12746  003AF4  6FA5               	movwf	_vscp_omsg& (0+255),b
 12747                           
 12748                           ; BSR set to: 0
 12749                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 12750  003AF6  6BA6               	clrf	(_vscp_omsg+1)& (0+255),b
 12751                           
 12752                           ; BSR set to: 0
 12753                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 12754  003AF8  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 12755  003AFA  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 12756                           
 12757                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 12758  003AFC  0E02               	movlw	2
 12759  003AFE  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
 12760                           
 12761                           ; BSR set to: 0
 12762                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 12763  003B00  C057  F0AA         	movff	_vscp_probe_address,_vscp_omsg+5
 12764                           
 12765                           ; BSR set to: 0
 12766                           ;vscp_firmware.c: 216: vscp_sendEvent();
 12767  003B04  EC3B  F021         	call	_vscp_sendEvent	;wreg free
 12768                           
 12769                           ; BSR set to: 0
 12770                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 12771  003B08  0E01               	movlw	1
 12772  003B0A  6F94               	movwf	_vscp_node_substate& (0+255),b
 12773  003B0C                     l8037:
 12774                           
 12775                           ; BSR set to: 0
 12776                           ;vscp_firmware.c: 219: vscp_timer = 0;
 12777  003B0C  6B88               	clrf	_vscp_timer& (0+255),b	;volatile
 12778  003B0E  6B89               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12779                           
 12780                           ;vscp_firmware.c: 221: }
 12781  003B10  D048               	goto	l1065
 12782  003B12                     l8039:
 12783                           
 12784                           ; BSR set to: 0
 12785                           ;vscp_firmware.c: 222: else {
 12786                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 12787  003B12  0E04               	movlw	4
 12788  003B14  6F93               	movwf	_vscp_node_state& (0+255),b
 12789                           
 12790                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 12791  003B16  0E81               	movlw	129
 12792  003B18  6FA5               	movwf	_vscp_omsg& (0+255),b
 12793                           
 12794                           ; BSR set to: 0
 12795                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 12796  003B1A  69AA               	setf	(_vscp_omsg+5)& (0+255),b
 12797                           
 12798                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 12799  003B1C  0E07               	movlw	7
 12800  003B1E  6FA6               	movwf	(_vscp_omsg+1)& (0+255),b
 12801                           
 12802                           ; BSR set to: 0
 12803                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 12804  003B20  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 12805  003B22  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 12806                           
 12807                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 12808  003B24  0E03               	movlw	3
 12809  003B26  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
 12810                           
 12811                           ; BSR set to: 0
 12812                           ;vscp_firmware.c: 235: vscp_sendEvent();
 12813  003B28  EC3B  F021         	call	_vscp_sendEvent	;wreg free
 12814  003B2C  D03A               	goto	l1065
 12815  003B2E                     l1066:
 12816                           
 12817                           ; BSR set to: 0
 12818                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 12819  003B2E  AF97               	btfss	_vscp_imsg& (0+255),7,b
 12820  003B30  D00F               	goto	l8063
 12821                           
 12822                           ; BSR set to: 0
 12823                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 12824                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 12825  003B32  519A               	movf	(_vscp_imsg+3)& (0+255),w,b
 12826  003B34  1199               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 12827  003B36  E135               	bnz	l1065
 12828                           
 12829                           ; BSR set to: 0
 12830  003B38  519B               	movf	(_vscp_imsg+4)& (0+255),w,b
 12831  003B3A  0A03               	xorlw	3
 12832  003B3C  E132               	bnz	l1065
 12833                           
 12834                           ; BSR set to: 0
 12835                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 12836  003B3E  6657               	tstfsz	_vscp_probe_address,c
 12837  003B40  D003               	goto	l8057
 12838                           
 12839                           ; BSR set to: 0
 12840                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 12841  003B42  0E02               	movlw	2
 12842  003B44  6F93               	movwf	_vscp_node_state& (0+255),b
 12843  003B46  D7E2               	goto	l8037
 12844  003B48                     l8057:
 12845                           
 12846                           ; BSR set to: 0
 12847                           ;vscp_firmware.c: 257: else {
 12848                           ;vscp_firmware.c: 260: vscp_probe_address++;
 12849  003B48  2A57               	incf	_vscp_probe_address,f,c
 12850                           
 12851                           ; BSR set to: 0
 12852                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 12853  003B4A  6B94               	clrf	_vscp_node_substate& (0+255),b
 12854  003B4C                     l8061:
 12855                           
 12856                           ; BSR set to: 0
 12857                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 12858  003B4C  6B95               	clrf	_vscp_probe_cnt& (0+255),b
 12859  003B4E  D029               	goto	l1065
 12860  003B50                     l8063:
 12861                           
 12862                           ; BSR set to: 0
 12863                           ;vscp_firmware.c: 267: else {
 12864                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 12865  003B50  0EE9               	movlw	233
 12866  003B52  5D88               	subwf	_vscp_timer& (0+255),w,b	;volatile
 12867  003B54  0E03               	movlw	3
 12868  003B56  5989               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 12869  003B58  E324               	bnc	l1065
 12870                           
 12871                           ; BSR set to: 0
 12872                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 12873  003B5A  2B95               	incf	_vscp_probe_cnt& (0+255),f,b
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 12877  003B5C  0E02               	movlw	2
 12878  003B5E  6595               	cpfsgt	_vscp_probe_cnt& (0+255),b
 12879  003B60  D017               	goto	l1073
 12880                           
 12881                           ; BSR set to: 0
 12882                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 12883  003B62  6657               	tstfsz	_vscp_probe_address,c
 12884  003B64  D005               	goto	l1074
 12885                           
 12886                           ; BSR set to: 0
 12887                           ;vscp_firmware.c: 279: vscp_probe_address++;
 12888  003B66  2A57               	incf	_vscp_probe_address,f,c
 12889                           
 12890                           ; BSR set to: 0
 12891                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 12892  003B68  6B94               	clrf	_vscp_node_substate& (0+255),b
 12893                           
 12894                           ; BSR set to: 0
 12895                           ;vscp_firmware.c: 281: vscp_timer = 0;
 12896  003B6A  6B88               	clrf	_vscp_timer& (0+255),b	;volatile
 12897  003B6C  6B89               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12898  003B6E  D7EE               	goto	l8061
 12899  003B70                     l1074:
 12900                           
 12901                           ; BSR set to: 0
 12902                           ;vscp_firmware.c: 285: else {
 12903                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 12904  003B70  C057  F092         	movff	_vscp_probe_address,_vscp_nickname
 12905                           
 12906                           ; BSR set to: 0
 12907                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 12908  003B74  0E03               	movlw	3
 12909  003B76  6F93               	movwf	_vscp_node_state& (0+255),b
 12910                           
 12911                           ; BSR set to: 0
 12912                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 12913  003B78  6B94               	clrf	_vscp_node_substate& (0+255),b
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 12917  003B7A  5192               	movf	_vscp_nickname& (0+255),w,b
 12918  003B7C  EC19  F022         	call	_vscp_writeNicknamePermanent
 12919                           
 12920                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 12921  003B80  0E40               	movlw	64
 12922  003B82  EC0E  F022         	call	_vscp_setSegmentCRC
 12923                           
 12924                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 12925  003B86  0100               	movlb	0	; () banked
 12926  003B88  6B95               	clrf	_vscp_probe_cnt& (0+255),b
 12927                           
 12928                           ; BSR set to: 0
 12929                           ;vscp_firmware.c: 296: vscp_goActiveState();
 12930  003B8A  ECA4  F021         	call	_vscp_goActiveState	;wreg free
 12931  003B8E  D009               	goto	l1065
 12932  003B90                     l1073:
 12933                           
 12934                           ; BSR set to: 0
 12935                           ;vscp_firmware.c: 300: else {
 12936                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 12937  003B90  6B94               	clrf	_vscp_node_substate& (0+255),b
 12938  003B92  D007               	goto	l1065
 12939  003B94                     l8093:
 12940  003B94  0100               	movlb	0	; () banked
 12941  003B96  5194               	movf	_vscp_node_substate& (0+255),w,b
 12942                           
 12943                           ; Switch size 1, requested type "speed"
 12944                           ; Number of cases is 3, Range of values is 0 to 2
 12945                           ; switch strategies available:
 12946                           ; Name         Instructions Cycles
 12947                           ; simple_byte           10     6 (average)
 12948                           ;	Chosen strategy is simple_byte
 12949  003B98  E0AA               	bz	l8023
 12950  003B9A  0A01               	xorlw	1	; case 1
 12951  003B9C  E0C8               	bz	l1066
 12952  003B9E  0A03               	xorlw	3	; case 2
 12953  003BA0  E1F7               	bnz	l1073
 12954  003BA2                     l1065:
 12955                           
 12956                           ; BSR set to: 0
 12957                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 12958  003BA2  6B97               	clrf	_vscp_imsg& (0+255),b
 12959                           
 12960                           ; BSR set to: 0
 12961  003BA4  0012               	return	
 12962  003BA6                     __end_of_vscp_handleProbeState:
 12963                           	opt stack 0
 12964                           tblptru	equ	0xFF8
 12965                           tblptrh	equ	0xFF7
 12966                           tblptrl	equ	0xFF6
 12967                           tablat	equ	0xFF5
 12968                           prodh	equ	0xFF4
 12969                           prodl	equ	0xFF3
 12970                           postinc0	equ	0xFEE
 12971                           wreg	equ	0xFE8
 12972                           indf2	equ	0xFDF
 12973                           postinc2	equ	0xFDE
 12974                           postdec2	equ	0xFDD
 12975                           fsr2h	equ	0xFDA
 12976                           fsr2l	equ	0xFD9
 12977                           status	equ	0xFD8
 12978                           
 12979 ;; *************** function _vscp_goActiveState *****************
 12980 ;; Defined at:
 12981 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 12982 ;; Parameters:    Size  Location     Type
 12983 ;;		None
 12984 ;; Auto vars:     Size  Location     Type
 12985 ;;		None
 12986 ;; Return value:  Size  Location     Type
 12987 ;;		None               void
 12988 ;; Registers used:
 12989 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12990 ;; Tracked objects:
 12991 ;;		On entry : 0/0
 12992 ;;		On exit  : F/0
 12993 ;;		Unchanged: 0/0
 12994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12995 ;;      Params:         0       0       0       0       0       0       0
 12996 ;;      Locals:         0       0       0       0       0       0       0
 12997 ;;      Temps:          0       0       0       0       0       0       0
 12998 ;;      Totals:         0       0       0       0       0       0       0
 12999 ;;Total ram usage:        0 bytes
 13000 ;; Hardware stack levels used:    1
 13001 ;; Hardware stack levels required when called:    7
 13002 ;; This function calls:
 13003 ;;		_vscp_sendEvent
 13004 ;; This function is called by:
 13005 ;;		_main
 13006 ;;		_vscp_handleProbeState
 13007 ;; This function uses a non-reentrant model
 13008 ;;
 13009                           
 13010                           	psect	text50
 13011  004348                     __ptext50:
 13012                           	opt stack 0
 13013  004348                     _vscp_goActiveState:
 13014                           	opt stack 22
 13015                           
 13016                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 13017                           
 13018                           ; BSR set to: 0
 13019                           ;incstack = 0
 13020                           ;incstack = 0
 13021  004348  0E81               	movlw	129
 13022  00434A  0100               	movlb	0	; () banked
 13023  00434C  6FA5               	movwf	_vscp_omsg& (0+255),b
 13024                           
 13025                           ; BSR set to: 0
 13026                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 13027  00434E  6BA6               	clrf	(_vscp_omsg+1)& (0+255),b
 13028                           
 13029                           ; BSR set to: 0
 13030                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 13031  004350  6BA7               	clrf	(_vscp_omsg+2)& (0+255),b
 13032  004352  6BA8               	clrf	(_vscp_omsg+3)& (0+255),b
 13033                           
 13034                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 13035  004354  0E02               	movlw	2
 13036  004356  6FA9               	movwf	(_vscp_omsg+4)& (0+255),b
 13037                           
 13038                           ; BSR set to: 0
 13039                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 13040  004358  C092  F0AA         	movff	_vscp_nickname,_vscp_omsg+5
 13041                           
 13042                           ; BSR set to: 0
 13043                           ;vscp_firmware.c: 366: vscp_sendEvent();
 13044  00435C  EC3B  F021         	call	_vscp_sendEvent	;wreg free
 13045                           
 13046                           ; BSR set to: 0
 13047                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 13048  004360  0E01               	movlw	1
 13049  004362  6E56               	movwf	_vscp_initledfunc,c
 13050                           
 13051                           ; BSR set to: 0
 13052  004364  0C01               	retlw	1
 13053  004366                     __end_of_vscp_goActiveState:
 13054                           	opt stack 0
 13055                           tblptru	equ	0xFF8
 13056                           tblptrh	equ	0xFF7
 13057                           tblptrl	equ	0xFF6
 13058                           tablat	equ	0xFF5
 13059                           prodh	equ	0xFF4
 13060                           prodl	equ	0xFF3
 13061                           postinc0	equ	0xFEE
 13062                           wreg	equ	0xFE8
 13063                           indf2	equ	0xFDF
 13064                           postinc2	equ	0xFDE
 13065                           postdec2	equ	0xFDD
 13066                           fsr2h	equ	0xFDA
 13067                           fsr2l	equ	0xFD9
 13068                           status	equ	0xFD8
 13069                           
 13070 ;; *************** function _vscp_sendEvent *****************
 13071 ;; Defined at:
 13072 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 13073 ;; Parameters:    Size  Location     Type
 13074 ;;		None
 13075 ;; Auto vars:     Size  Location     Type
 13076 ;;  rv              1    0        unsigned char 
 13077 ;; Return value:  Size  Location     Type
 13078 ;;                  1    wreg      unsigned char 
 13079 ;; Registers used:
 13080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13081 ;; Tracked objects:
 13082 ;;		On entry : F/0
 13083 ;;		On exit  : F/0
 13084 ;;		Unchanged: 0/0
 13085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13086 ;;      Params:         0       0       0       0       0       0       0
 13087 ;;      Locals:         1       0       0       0       0       0       0
 13088 ;;      Temps:          0       0       0       0       0       0       0
 13089 ;;      Totals:         1       0       0       0       0       0       0
 13090 ;;Total ram usage:        1 bytes
 13091 ;; Hardware stack levels used:    1
 13092 ;; Hardware stack levels required when called:    6
 13093 ;; This function calls:
 13094 ;;		_sendVSCPFrame
 13095 ;; This function is called by:
 13096 ;;		_vscp_handleProbeState
 13097 ;;		_vscp_goActiveState
 13098 ;;		_vscp_sendHeartBeat
 13099 ;;		_vscp_newNodeOnline
 13100 ;;		_vscp_handleProtocolEvent
 13101 ;; This function uses a non-reentrant model
 13102 ;;
 13103                           
 13104                           	psect	text51
 13105  004276                     __ptext51:
 13106                           	opt stack 0
 13107  004276                     _vscp_sendEvent:
 13108                           	opt stack 22
 13109                           
 13110                           ; BSR set to: 0
 13111                           
 13112                           ; BSR set to: 0
 13113                           ;incstack = 0
 13114                           ;incstack = 0
 13115  004276  C0A7  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 13116  00427A  C0A8  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 13117  00427E  C0A9  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 13118  004282  C092  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 13119  004286  C0A6  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 13120  00428A  51A5               	movf	_vscp_omsg& (0+255),w,b
 13121  00428C  0B0F               	andlw	15
 13122  00428E  6E44               	movwf	?_sendVSCPFrame+5,c
 13123  004290  0E00               	movlw	high (_vscp_omsg+5)
 13124  004292  6E46               	movwf	?_sendVSCPFrame+7,c
 13125  004294  0EAA               	movlw	low (_vscp_omsg+5)
 13126  004296  6E45               	movwf	?_sendVSCPFrame+6,c
 13127  004298  EFD3  F01D         	goto	_sendVSCPFrame	;wreg free
 13128  00429C                     __end_of_vscp_sendEvent:
 13129                           	opt stack 0
 13130                           tblptru	equ	0xFF8
 13131                           tblptrh	equ	0xFF7
 13132                           tblptrl	equ	0xFF6
 13133                           tablat	equ	0xFF5
 13134                           prodh	equ	0xFF4
 13135                           prodl	equ	0xFF3
 13136                           postinc0	equ	0xFEE
 13137                           wreg	equ	0xFE8
 13138                           indf2	equ	0xFDF
 13139                           postinc2	equ	0xFDE
 13140                           postdec2	equ	0xFDD
 13141                           fsr2h	equ	0xFDA
 13142                           fsr2l	equ	0xFD9
 13143                           status	equ	0xFD8
 13144                           
 13145 ;; *************** function _sendVSCPFrame *****************
 13146 ;; Defined at:
 13147 ;;		line 2590 in file "../main.c"
 13148 ;; Parameters:    Size  Location     Type
 13149 ;;  vscpclass       2   62[COMRAM] unsigned short 
 13150 ;;  vscptype        1   64[COMRAM] unsigned char 
 13151 ;;  nodeid          1   65[COMRAM] unsigned char 
 13152 ;;  priority        1   66[COMRAM] unsigned char 
 13153 ;;  size            1   67[COMRAM] unsigned char 
 13154 ;;  pData           2   68[COMRAM] PTR unsigned char 
 13155 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13156 ;; Auto vars:     Size  Location     Type
 13157 ;;  id              4   70[COMRAM] unsigned long 
 13158 ;; Return value:  Size  Location     Type
 13159 ;;                  1    wreg      unsigned char 
 13160 ;; Registers used:
 13161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13162 ;; Tracked objects:
 13163 ;;		On entry : F/0
 13164 ;;		On exit  : F/0
 13165 ;;		Unchanged: 0/0
 13166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13167 ;;      Params:         8       0       0       0       0       0       0
 13168 ;;      Locals:         4       0       0       0       0       0       0
 13169 ;;      Temps:          0      20       0       0       0       0       0
 13170 ;;      Totals:        12      20       0       0       0       0       0
 13171 ;;Total ram usage:       32 bytes
 13172 ;; Hardware stack levels used:    1
 13173 ;; Hardware stack levels required when called:    5
 13174 ;; This function calls:
 13175 ;;		_sendCANFrame
 13176 ;; This function is called by:
 13177 ;;		_SendInformationEvent
 13178 ;;		_vscp_sendEvent
 13179 ;; This function uses a non-reentrant model
 13180 ;;
 13181                           
 13182                           	psect	text52
 13183  003BA6                     __ptext52:
 13184                           	opt stack 0
 13185  003BA6                     _sendVSCPFrame:
 13186                           	opt stack 23
 13187                           
 13188                           ; BSR set to: 0
 13189                           ;main.c: 2591: uint32_t id = ( (uint32_t)priority << 26 ) |
 13190                           ;main.c: 2592: ( (uint32_t)vscpclass << 16 ) |
 13191                           ;main.c: 2593: ( (uint32_t)vscptype << 8 ) |
 13192                           ;main.c: 2594: nodeid;
 13193                           
 13194                           ; BSR set to: 0
 13195                           ;incstack = 0
 13196                           ;incstack = 0
 13197  003BA6  C041  F0B2         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 13198  003BAA  6BB3               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 13199  003BAC  6BB4               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 13200  003BAE  6BB5               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 13201  003BB0  C0B4  F0B5         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 13202  003BB4  C0B3  F0B4         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 13203  003BB8  C0B2  F0B3         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 13204  003BBC  6BB2               	clrf	??_sendVSCPFrame& (0+255),b
 13205  003BBE  503F               	movf	sendVSCPFrame@vscpclass,w,c
 13206  003BC0  6FB6               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 13207  003BC2  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 13208  003BC4  6FB7               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 13209  003BC6  6BB8               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 13210  003BC8  6BB9               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 13211  003BCA  C0B7  F0B9         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 13212  003BCE  C0B6  F0B8         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 13213  003BD2  6BB7               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 13214  003BD4  6BB6               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 13215  003BD6  C043  F0BA         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 13216  003BDA  6BBB               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 13217  003BDC  6BBC               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 13218  003BDE  6BBD               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 13219  003BE0  0E1A               	movlw	26
 13220  003BE2                     u10235:
 13221  003BE2  90D8               	bcf	status,0,c
 13222  003BE4  37BA               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 13223  003BE6  37BB               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 13224  003BE8  37BC               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 13225  003BEA  37BD               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 13226  003BEC  2EE8               	decfsz	wreg,f,c
 13227  003BEE  D7F9               	goto	u10235
 13228  003BF0  51B6               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 13229  003BF2  11BA               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 13230  003BF4  6FBE               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 13231  003BF6  51B7               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 13232  003BF8  11BB               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 13233  003BFA  6FBF               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 13234  003BFC  51B8               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 13235  003BFE  11BC               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 13236  003C00  6FC0               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 13237  003C02  51B9               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 13238  003C04  11BD               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 13239  003C06  6FC1               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 13240  003C08  51B2               	movf	??_sendVSCPFrame& (0+255),w,b
 13241  003C0A  11BE               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 13242  003C0C  6FC2               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 13243  003C0E  51B3               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 13244  003C10  11BF               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 13245  003C12  6FC3               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 13246  003C14  51B4               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 13247  003C16  11C0               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 13248  003C18  6FC4               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 13249  003C1A  51B5               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 13250  003C1C  11C1               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 13251  003C1E  6FC5               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 13252  003C20  5042               	movf	sendVSCPFrame@nodeid,w,c
 13253  003C22  11C2               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 13254  003C24  6E47               	movwf	sendVSCPFrame@id,c
 13255  003C26  51C3               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 13256  003C28  6E48               	movwf	sendVSCPFrame@id+1,c
 13257  003C2A  51C4               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 13258  003C2C  6E49               	movwf	sendVSCPFrame@id+2,c
 13259  003C2E  51C5               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 13260  003C30  6E4A               	movwf	sendVSCPFrame@id+3,c
 13261                           
 13262                           ; BSR set to: 0
 13263                           ;main.c: 2596: if ( !sendCANFrame( id, size, pData ) ) {
 13264  003C32  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 13265  003C36  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 13266  003C3A  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 13267  003C3E  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 13268  003C42  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 13269  003C46  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 13270  003C4A  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 13271  003C4E  ECF7  F01F         	call	_sendCANFrame	;wreg free
 13272  003C52  0900               	iorlw	0
 13273                           
 13274                           ; BSR set to: 0
 13275                           ;main.c: 2597: return 0;
 13276  003C54  0E00               	movlw	0
 13277  003C56  A4D8               	btfss	status,2,c
 13278                           
 13279                           ; BSR set to: 0
 13280                           ;main.c: 2598: }
 13281                           ;main.c: 2600: return 1;
 13282  003C58  0E01               	movlw	1
 13283                           
 13284                           ; BSR set to: 0
 13285  003C5A  0012               	return	
 13286  003C5C                     __end_of_sendVSCPFrame:
 13287                           	opt stack 0
 13288                           tblptru	equ	0xFF8
 13289                           tblptrh	equ	0xFF7
 13290                           tblptrl	equ	0xFF6
 13291                           tablat	equ	0xFF5
 13292                           prodh	equ	0xFF4
 13293                           prodl	equ	0xFF3
 13294                           postinc0	equ	0xFEE
 13295                           wreg	equ	0xFE8
 13296                           indf2	equ	0xFDF
 13297                           postinc2	equ	0xFDE
 13298                           postdec2	equ	0xFDD
 13299                           fsr2h	equ	0xFDA
 13300                           fsr2l	equ	0xFD9
 13301                           status	equ	0xFD8
 13302                           
 13303 ;; *************** function _sendCANFrame *****************
 13304 ;; Defined at:
 13305 ;;		line 2635 in file "../main.c"
 13306 ;; Parameters:    Size  Location     Type
 13307 ;;  id              4   54[COMRAM] unsigned long 
 13308 ;;  dlc             1   58[COMRAM] unsigned char 
 13309 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 13310 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13311 ;; Auto vars:     Size  Location     Type
 13312 ;;  rv              1   61[COMRAM] unsigned char 
 13313 ;; Return value:  Size  Location     Type
 13314 ;;                  1    wreg      unsigned char 
 13315 ;; Registers used:
 13316 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13317 ;; Tracked objects:
 13318 ;;		On entry : F/0
 13319 ;;		On exit  : F/0
 13320 ;;		Unchanged: 0/0
 13321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13322 ;;      Params:         7       0       0       0       0       0       0
 13323 ;;      Locals:         1       0       0       0       0       0       0
 13324 ;;      Temps:          0       0       0       0       0       0       0
 13325 ;;      Totals:         8       0       0       0       0       0       0
 13326 ;;Total ram usage:        8 bytes
 13327 ;; Hardware stack levels used:    1
 13328 ;; Hardware stack levels required when called:    4
 13329 ;; This function calls:
 13330 ;;		_ECANSendMessage
 13331 ;; This function is called by:
 13332 ;;		_sendVSCPFrame
 13333 ;; This function uses a non-reentrant model
 13334 ;;
 13335                           
 13336                           	psect	text53
 13337  003FEE                     __ptext53:
 13338                           	opt stack 0
 13339  003FEE                     _sendCANFrame:
 13340                           	opt stack 23
 13341                           
 13342                           ; BSR set to: 0
 13343                           ;main.c: 2636: uint8_t rv = 0;
 13344                           
 13345                           ; BSR set to: 0
 13346                           ;incstack = 0
 13347                           ;incstack = 0
 13348  003FEE  6A3E               	clrf	sendCANFrame@rv,c
 13349                           
 13350                           ;main.c: 2638: sendTimer = 0;
 13351  003FF0  6B84               	clrf	_sendTimer& (0+255),b	;volatile
 13352  003FF2  6B85               	clrf	(_sendTimer+1)& (0+255),b	;volatile
 13353                           
 13354                           ;main.c: 2639: while ( sendTimer < 1000 ) {
 13355  003FF4  D017               	goto	l9595
 13356  003FF6                     l9591:
 13357                           
 13358                           ; BSR set to: 0
 13359                           ;main.c: 2640: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 13360  003FF6  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 13361  003FFA  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 13362  003FFE  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 13363  004002  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 13364  004006  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 13365  00400A  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 13366  00400E  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 13367  004012  0E20               	movlw	32
 13368  004014  6E19               	movwf	?_ECANSendMessage+7,c
 13369  004016  EC2F  F018         	call	_ECANSendMessage	;wreg free
 13370  00401A  0900               	iorlw	0
 13371  00401C  E003               	bz	l9595
 13372                           
 13373                           ;main.c: 2641: rv = 1;
 13374  00401E  0E01               	movlw	1
 13375  004020  6E3E               	movwf	sendCANFrame@rv,c
 13376                           
 13377                           ;main.c: 2642: break;
 13378  004022  D006               	goto	l671
 13379  004024                     l9595:
 13380  004024  0EE8               	movlw	232
 13381  004026  0100               	movlb	0	; () banked
 13382  004028  5D84               	subwf	_sendTimer& (0+255),w,b	;volatile
 13383  00402A  0E03               	movlw	3
 13384  00402C  5985               	subwfb	(_sendTimer+1)& (0+255),w,b	;volatile
 13385  00402E  E3E3               	bnc	l9591
 13386  004030                     l671:
 13387                           
 13388                           ;main.c: 2643: }
 13389                           ;main.c: 2644: }
 13390                           ;main.c: 2646: vscp_omsg.flags = 0;
 13391  004030  0100               	movlb	0	; () banked
 13392  004032  6BA5               	clrf	_vscp_omsg& (0+255),b
 13393                           
 13394                           ; BSR set to: 0
 13395                           ;main.c: 2648: return rv;
 13396  004034  503E               	movf	sendCANFrame@rv,w,c
 13397                           
 13398                           ; BSR set to: 0
 13399  004036  0012               	return	
 13400  004038                     __end_of_sendCANFrame:
 13401                           	opt stack 0
 13402                           tblptru	equ	0xFF8
 13403                           tblptrh	equ	0xFF7
 13404                           tblptrl	equ	0xFF6
 13405                           tablat	equ	0xFF5
 13406                           prodh	equ	0xFF4
 13407                           prodl	equ	0xFF3
 13408                           postinc0	equ	0xFEE
 13409                           wreg	equ	0xFE8
 13410                           indf2	equ	0xFDF
 13411                           postinc2	equ	0xFDE
 13412                           postdec2	equ	0xFDD
 13413                           fsr2h	equ	0xFDA
 13414                           fsr2l	equ	0xFD9
 13415                           status	equ	0xFD8
 13416                           
 13417 ;; *************** function _ECANSendMessage *****************
 13418 ;; Defined at:
 13419 ;;		line 617 in file "../ECAN.c"
 13420 ;; Parameters:    Size  Location     Type
 13421 ;;  id              4   17[COMRAM] unsigned long 
 13422 ;;  data            2   21[COMRAM] PTR unsigned char 
 13423 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13424 ;;  dataLen         1   23[COMRAM] unsigned char 
 13425 ;;  msgFlags        1   24[COMRAM] enum E16306
 13426 ;; Auto vars:     Size  Location     Type
 13427 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 13428 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13429 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13430 ;;		 -> B0CON(1), 
 13431 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 13432 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13433 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13434 ;;		 -> B0CON(1), 
 13435 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 13436 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13437 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13438 ;;		 -> B0CON(1), 
 13439 ;;  i               1   51[COMRAM] unsigned char 
 13440 ;;  temp            1   50[COMRAM] unsigned char 
 13441 ;;  tempBSEL0       1   47[COMRAM] struct .
 13442 ;;  j               1   46[COMRAM] unsigned char 
 13443 ;;  buffers         1   45[COMRAM] unsigned char 
 13444 ;;  mode            1   44[COMRAM] unsigned char 
 13445 ;; Return value:  Size  Location     Type
 13446 ;;                  1    wreg      enum E15660
 13447 ;; Registers used:
 13448 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13449 ;; Tracked objects:
 13450 ;;		On entry : F/0
 13451 ;;		On exit  : 0/0
 13452 ;;		Unchanged: 0/0
 13453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13454 ;;      Params:         8       0       0       0       0       0       0
 13455 ;;      Locals:        28       0       0       0       0       0       0
 13456 ;;      Temps:          1       0       0       0       0       0       0
 13457 ;;      Totals:        37       0       0       0       0       0       0
 13458 ;;Total ram usage:       37 bytes
 13459 ;; Hardware stack levels used:    1
 13460 ;; Hardware stack levels required when called:    3
 13461 ;; This function calls:
 13462 ;;		__CANIDToRegs
 13463 ;; This function is called by:
 13464 ;;		_sendCANFrame
 13465 ;; This function uses a non-reentrant model
 13466 ;;
 13467                           
 13468                           	psect	text54
 13469  00305E                     __ptext54:
 13470                           	opt stack 0
 13471  00305E                     _ECANSendMessage:
 13472                           	opt stack 23
 13473                           
 13474                           ; BSR set to: 0
 13475                           ;ECAN.c: 619: BYTE mode;
 13476                           ;ECAN.c: 620: BYTE buffers;
 13477                           ;ECAN.c: 628: BYTE i,j;
 13478                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 13479                           ;ECAN.c: 630: BYTE* pb[9];
 13480                           ;ECAN.c: 631: BYTE temp;
 13481                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 13482                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 13483                           
 13484                           ; BSR set to: 0
 13485                           ;incstack = 0
 13486                           ;incstack = 0
 13487  00305E  0E0F               	movlw	15	;volatile
 13488  003060  6E1C               	movwf	ECANSendMessage@pb+1,c
 13489  003062  0E40               	movlw	64	;volatile
 13490  003064  6E1B               	movwf	ECANSendMessage@pb,c
 13491                           
 13492                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 13493  003066  0E0F               	movlw	15	;volatile
 13494  003068  6E1E               	movwf	ECANSendMessage@pb+3,c
 13495  00306A  0E30               	movlw	48	;volatile
 13496  00306C  6E1D               	movwf	ECANSendMessage@pb+2,c
 13497                           
 13498                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 13499  00306E  0E0F               	movlw	15	;volatile
 13500  003070  6E20               	movwf	ECANSendMessage@pb+5,c
 13501  003072  0E20               	movlw	32	;volatile
 13502  003074  6E1F               	movwf	ECANSendMessage@pb+4,c
 13503                           
 13504                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 13505  003076  0E0E               	movlw	14	;volatile
 13506  003078  6E22               	movwf	ECANSendMessage@pb+7,c
 13507  00307A  0E20               	movlw	32	;volatile
 13508  00307C  6E21               	movwf	ECANSendMessage@pb+6,c
 13509                           
 13510                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 13511  00307E  0E0E               	movlw	14	;volatile
 13512  003080  6E24               	movwf	ECANSendMessage@pb+9,c
 13513  003082  0E30               	movlw	48	;volatile
 13514  003084  6E23               	movwf	ECANSendMessage@pb+8,c
 13515                           
 13516                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 13517  003086  0E0E               	movlw	14	;volatile
 13518  003088  6E26               	movwf	ECANSendMessage@pb+11,c
 13519  00308A  0E40               	movlw	64	;volatile
 13520  00308C  6E25               	movwf	ECANSendMessage@pb+10,c
 13521                           
 13522                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 13523  00308E  0E0E               	movlw	14	;volatile
 13524  003090  6E28               	movwf	ECANSendMessage@pb+13,c
 13525  003092  0E50               	movlw	80	;volatile
 13526  003094  6E27               	movwf	ECANSendMessage@pb+12,c
 13527                           
 13528                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 13529  003096  0E0E               	movlw	14	;volatile
 13530  003098  6E2A               	movwf	ECANSendMessage@pb+15,c
 13531  00309A  0E60               	movlw	96	;volatile
 13532  00309C  6E29               	movwf	ECANSendMessage@pb+14,c
 13533                           
 13534                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 13535  00309E  0E0E               	movlw	14	;volatile
 13536  0030A0  6E2C               	movwf	ECANSendMessage@pb+17,c
 13537  0030A2  0E70               	movlw	112	;volatile
 13538  0030A4  6E2B               	movwf	ECANSendMessage@pb+16,c
 13539                           
 13540                           ; BSR set to: 14
 13541                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 13542  0030A6  5077               	movf	3959,w,c	;volatile
 13543  0030A8  0BC0               	andlw	192
 13544  0030AA  6E2D               	movwf	ECANSendMessage@mode,c
 13545                           
 13546                           ; BSR set to: 14
 13547                           ;ECAN.c: 660: if ( mode == 0x00 )
 13548  0030AC  662D               	tstfsz	ECANSendMessage@mode,c
 13549  0030AE  D002               	goto	l9609
 13550                           
 13551                           ; BSR set to: 14
 13552                           ;ECAN.c: 661: buffers = 2;
 13553  0030B0  0E02               	movlw	2
 13554  0030B2  D001               	goto	L41
 13555  0030B4                     l9609:
 13556                           
 13557                           ; BSR set to: 14
 13558                           ;ECAN.c: 662: else
 13559                           ;ECAN.c: 663: buffers = 8;
 13560  0030B4  0E08               	movlw	8
 13561  0030B6                     L41:
 13562  0030B6  6E2E               	movwf	ECANSendMessage@buffers,c
 13563                           
 13564                           ; BSR set to: 14
 13565                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 13566  0030B8  010D               	movlb	13	; () banked
 13567  0030BA  90D8               	bcf	status,0,c
 13568  0030BC  31F8               	rrcf	248,w,b	;volatile
 13569  0030BE  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 13570                           
 13571                           ; BSR set to: 13
 13572                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 13573  0030C0  6A34               	clrf	ECANSendMessage@i,c
 13574  0030C2  D07D               	goto	l9669
 13575  0030C4                     l9615:
 13576                           
 13577                           ;ECAN.c: 688: {
 13578                           ;ECAN.c: 693: ptr = pb[i];
 13579  0030C4  5034               	movf	ECANSendMessage@i,w,c
 13580  0030C6  0D02               	mullw	2
 13581  0030C8  50F3               	movf	prodl,w,c
 13582  0030CA  0F1B               	addlw	low ECANSendMessage@pb
 13583  0030CC  6ED9               	movwf	fsr2l,c
 13584  0030CE  6ADA               	clrf	fsr2h,c
 13585  0030D0  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 13586  0030D4  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 13587                           
 13588                           ;ECAN.c: 694: tempPtr = ptr;
 13589  0030D8  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 13590  0030DC  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 13591                           
 13592                           ;ECAN.c: 702: if ( i > 2 )
 13593  0030E0  0E02               	movlw	2
 13594  0030E2  6434               	cpfsgt	ECANSendMessage@i,c
 13595  0030E4  D004               	goto	l9627
 13596                           
 13597                           ;ECAN.c: 703: {
 13598                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 13599  0030E6  90D8               	bcf	status,0,c
 13600  0030E8  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 13601                           
 13602                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 13603  0030EA  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 13604  0030EC  D067               	goto	l9667
 13605  0030EE                     l9627:
 13606                           
 13607                           ;ECAN.c: 714: }
 13608                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 13609  0030EE  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13610  0030F2  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13611  0030F6  50DF               	movf	indf2,w,c
 13612  0030F8  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13613  0030FA  B61A               	btfsc	??_ECANSendMessage,3,c
 13614  0030FC  D05F               	goto	l9667
 13615                           
 13616                           ;ECAN.c: 721: {
 13617                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 13618  0030FE  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13619  003102  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13620  003106  0EFC               	movlw	252
 13621  003108  16DF               	andwf	indf2,f,c
 13622                           
 13623                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 13624  00310A  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 13625  00310E  0E03               	movlw	3
 13626  003110  161A               	andwf	??_ECANSendMessage,f,c
 13627  003112  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13628  003116  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13629  00311A  501A               	movf	??_ECANSendMessage,w,c
 13630  00311C  12DF               	iorwf	indf2,f,c
 13631                           
 13632                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 13633  00311E  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 13634  003120  D004               	goto	l863
 13635                           
 13636                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 13637  003122  5018               	movf	ECANSendMessage@dataLen,w,c
 13638  003124  0940               	iorlw	64
 13639  003126  6E33               	movwf	ECANSendMessage@temp,c
 13640  003128  D002               	goto	l9637
 13641  00312A                     l863:
 13642                           
 13643                           ;ECAN.c: 729: else
 13644                           ;ECAN.c: 730: temp = dataLen;
 13645  00312A  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 13646  00312E                     l9637:
 13647                           
 13648                           ;ECAN.c: 732: *(ptr+5) = temp;
 13649  00312E  EE20 F005          	lfsr	2,5
 13650  003132  5035               	movf	ECANSendMessage@ptr,w,c
 13651  003134  26D9               	addwf	fsr2l,f,c
 13652  003136  5036               	movf	ECANSendMessage@ptr+1,w,c
 13653  003138  22DA               	addwfc	fsr2h,f,c
 13654  00313A  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 13655                           
 13656                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 13657  00313E  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 13658  003140  D003               	goto	l865
 13659                           
 13660                           ;ECAN.c: 736: temp = 1;
 13661  003142  0E01               	movlw	1
 13662  003144  6E33               	movwf	ECANSendMessage@temp,c
 13663  003146  D001               	goto	l9643
 13664  003148                     l865:
 13665                           
 13666                           ;ECAN.c: 738: else
 13667                           ;ECAN.c: 739: temp = 0;
 13668  003148  6A33               	clrf	ECANSendMessage@temp,c
 13669  00314A                     l9643:
 13670                           
 13671                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 13672  00314A  2835               	incf	ECANSendMessage@ptr,w,c
 13673  00314C  6E08               	movwf	?__CANIDToRegs,c
 13674  00314E  0E00               	movlw	0
 13675  003150  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 13676  003152  6E09               	movwf	?__CANIDToRegs+1,c
 13677  003154  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 13678  003158  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 13679  00315C  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 13680  003160  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 13681  003164  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 13682  003168  EC3F  F01A         	call	__CANIDToRegs	;wreg free
 13683                           
 13684                           ;ECAN.c: 745: ptr += 6;
 13685  00316C  0E06               	movlw	6
 13686  00316E  2635               	addwf	ECANSendMessage@ptr,f,c
 13687  003170  0E00               	movlw	0
 13688  003172  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 13689                           
 13690                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 13691  003174  6A2F               	clrf	ECANSendMessage@j,c
 13692  003176  D00F               	goto	l9657
 13693  003178                     l9649:
 13694                           
 13695                           ;ECAN.c: 748: *ptr++ = *data++;
 13696  003178  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 13697  00317C  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 13698  003180  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 13699  003184  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 13700  003188  CFDF FFE7          	movff	indf2,indf1
 13701  00318C  4A16               	infsnz	ECANSendMessage@data,f,c
 13702  00318E  2A17               	incf	ECANSendMessage@data+1,f,c
 13703  003190  4A35               	infsnz	ECANSendMessage@ptr,f,c
 13704  003192  2A36               	incf	ECANSendMessage@ptr+1,f,c
 13705  003194  2A2F               	incf	ECANSendMessage@j,f,c
 13706  003196                     l9657:
 13707  003196  5018               	movf	ECANSendMessage@dataLen,w,c
 13708  003198  5C2F               	subwf	ECANSendMessage@j,w,c
 13709  00319A  E3EE               	bnc	l9649
 13710                           
 13711                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 13712  00319C  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13713  0031A0  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13714  0031A4  50DF               	movf	indf2,w,c
 13715  0031A6  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13716  0031A8  B41A               	btfsc	??_ECANSendMessage,2,c
 13717  0031AA  D006               	goto	l9663
 13718                           
 13719                           ;ECAN.c: 753: *tempPtr |= 0x08;
 13720  0031AC  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13721  0031B0  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13722  0031B4  0E00               	movlw	0
 13723  0031B6  86DB               	bsf	plusw2,3,c
 13724  0031B8                     l9663:
 13725                           
 13726                           ;ECAN.c: 755: return TRUE;
 13727  0031B8  0E01               	movlw	1
 13728  0031BA  D005               	goto	l871
 13729  0031BC                     l9667:
 13730  0031BC  2A34               	incf	ECANSendMessage@i,f,c
 13731  0031BE                     l9669:
 13732  0031BE  502E               	movf	ECANSendMessage@buffers,w,c
 13733  0031C0  5C34               	subwf	ECANSendMessage@i,w,c
 13734  0031C2  E380               	bnc	l9615
 13735                           
 13736                           ;ECAN.c: 756: }
 13737                           ;ECAN.c: 757: }
 13738                           ;ECAN.c: 760: return FALSE;
 13739  0031C4  0E00               	movlw	0
 13740  0031C6                     l871:
 13741  0031C6  0012               	return	
 13742  0031C8                     __end_of_ECANSendMessage:
 13743                           	opt stack 0
 13744                           tblptru	equ	0xFF8
 13745                           tblptrh	equ	0xFF7
 13746                           tblptrl	equ	0xFF6
 13747                           tablat	equ	0xFF5
 13748                           prodh	equ	0xFF4
 13749                           prodl	equ	0xFF3
 13750                           postinc0	equ	0xFEE
 13751                           wreg	equ	0xFE8
 13752                           indf1	equ	0xFE7
 13753                           fsr1h	equ	0xFE2
 13754                           fsr1l	equ	0xFE1
 13755                           indf2	equ	0xFDF
 13756                           postinc2	equ	0xFDE
 13757                           postdec2	equ	0xFDD
 13758                           plusw2	equ	0xFDB
 13759                           fsr2h	equ	0xFDA
 13760                           fsr2l	equ	0xFD9
 13761                           status	equ	0xFD8
 13762                           
 13763 ;; *************** function __CANIDToRegs *****************
 13764 ;; Defined at:
 13765 ;;		line 1099 in file "../ECAN.c"
 13766 ;; Parameters:    Size  Location     Type
 13767 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 13768 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13769 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13770 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
 13771 ;;  val             4    9[COMRAM] unsigned long 
 13772 ;;  type            1   13[COMRAM] unsigned char 
 13773 ;; Auto vars:     Size  Location     Type
 13774 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 13775 ;;		 -> _CANIDToRegs@val(4), 
 13776 ;; Return value:  Size  Location     Type
 13777 ;;		None               void
 13778 ;; Registers used:
 13779 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13780 ;; Tracked objects:
 13781 ;;		On entry : 0/F
 13782 ;;		On exit  : 0/0
 13783 ;;		Unchanged: 0/0
 13784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13785 ;;      Params:         7       0       0       0       0       0       0
 13786 ;;      Locals:         1       0       0       0       0       0       0
 13787 ;;      Temps:          2       0       0       0       0       0       0
 13788 ;;      Totals:        10       0       0       0       0       0       0
 13789 ;;Total ram usage:       10 bytes
 13790 ;; Hardware stack levels used:    1
 13791 ;; Hardware stack levels required when called:    2
 13792 ;; This function calls:
 13793 ;;		Nothing
 13794 ;; This function is called by:
 13795 ;;		_calculateSetFilterMask
 13796 ;;		_ECANSendMessage
 13797 ;; This function uses a non-reentrant model
 13798 ;;
 13799                           
 13800                           	psect	text55
 13801  00347E                     __ptext55:
 13802                           	opt stack 0
 13803  00347E                     __CANIDToRegs:
 13804                           	opt stack 23
 13805                           
 13806                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 13807                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 13808                           
 13809                           ;incstack = 0
 13810                           ;incstack = 0
 13811  00347E  0E0A               	movlw	low __CANIDToRegs@val
 13812  003480  6E11               	movwf	__CANIDToRegs@Value,c
 13813                           
 13814                           ;ECAN.c: 1104: if ( type == 0 )
 13815  003482  660E               	tstfsz	__CANIDToRegs@type,c
 13816  003484  D037               	goto	l9685
 13817                           
 13818                           ;ECAN.c: 1105: {
 13819                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 13820  003486  5011               	movf	__CANIDToRegs@Value,w,c
 13821  003488  6ED9               	movwf	fsr2l,c
 13822  00348A  6ADA               	clrf	fsr2h,c
 13823  00348C  50DF               	movf	indf2,w,c
 13824  00348E  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13825  003490  90D8               	bcf	status,0,c
 13826  003492  320F               	rrcf	??__CANIDToRegs,f,c
 13827  003494  90D8               	bcf	status,0,c
 13828  003496  320F               	rrcf	??__CANIDToRegs,f,c
 13829  003498  90D8               	bcf	status,0,c
 13830  00349A  300F               	rrcf	??__CANIDToRegs,w,c
 13831  00349C  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13832  0034A0  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13833  0034A4  6EDF               	movwf	indf2,c
 13834                           
 13835                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 13836  0034A6  5011               	movf	__CANIDToRegs@Value,w,c
 13837  0034A8  6ED9               	movwf	fsr2l,c
 13838  0034AA  6ADA               	clrf	fsr2h,c
 13839  0034AC  2AD9               	incf	fsr2l,f,c
 13840  0034AE  6ADA               	clrf	fsr2h,c
 13841  0034B0  50DF               	movf	indf2,w,c
 13842  0034B2  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13843  0034B4  0E05               	movlw	5
 13844  0034B6  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13845  0034B8                     u11005:
 13846  0034B8  90D8               	bcf	status,0,c
 13847  0034BA  360F               	rlcf	??__CANIDToRegs,f,c
 13848  0034BC  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13849  0034BE  D7FC               	goto	u11005
 13850  0034C0  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13851  0034C4  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13852  0034C8  500F               	movf	??__CANIDToRegs,w,c
 13853  0034CA  12DF               	iorwf	indf2,f,c
 13854                           
 13855                           ;ECAN.c: 1109: ptr++;
 13856  0034CC  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13857  0034CE  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13858                           
 13859                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 13860  0034D0  5011               	movf	__CANIDToRegs@Value,w,c
 13861  0034D2  6ED9               	movwf	fsr2l,c
 13862  0034D4  6ADA               	clrf	fsr2h,c
 13863  0034D6  50DF               	movf	indf2,w,c
 13864  0034D8  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13865  0034DA  0E05               	movlw	5
 13866  0034DC  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13867  0034DE                     u11015:
 13868  0034DE  90D8               	bcf	status,0,c
 13869  0034E0  360F               	rlcf	??__CANIDToRegs,f,c
 13870  0034E2  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13871  0034E4  D7FC               	goto	u11015
 13872  0034E6  500F               	movf	??__CANIDToRegs,w,c
 13873  0034E8  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13874  0034EC  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13875  0034F0  6EDF               	movwf	indf2,c
 13876                           
 13877                           ;ECAN.c: 1111: }
 13878  0034F2  D06C               	goto	l925
 13879  0034F4                     l9685:
 13880                           
 13881                           ;ECAN.c: 1112: else
 13882                           ;ECAN.c: 1113: {
 13883                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 13884  0034F4  5011               	movf	__CANIDToRegs@Value,w,c
 13885  0034F6  6ED9               	movwf	fsr2l,c
 13886  0034F8  6ADA               	clrf	fsr2h,c
 13887  0034FA  0E02               	movlw	2
 13888  0034FC  26D9               	addwf	fsr2l,f,c
 13889  0034FE  6ADA               	clrf	fsr2h,c
 13890  003500  50DF               	movf	indf2,w,c
 13891  003502  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13892  003504  0E05               	movlw	5
 13893  003506  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13894  003508                     u11025:
 13895  003508  90D8               	bcf	status,0,c
 13896  00350A  320F               	rrcf	??__CANIDToRegs,f,c
 13897  00350C  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13898  00350E  D7FC               	goto	u11025
 13899  003510  500F               	movf	??__CANIDToRegs,w,c
 13900  003512  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13901  003516  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13902  00351A  6EDF               	movwf	indf2,c
 13903                           
 13904                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 13905  00351C  5011               	movf	__CANIDToRegs@Value,w,c
 13906  00351E  6ED9               	movwf	fsr2l,c
 13907  003520  6ADA               	clrf	fsr2h,c
 13908  003522  0E03               	movlw	3
 13909  003524  26D9               	addwf	fsr2l,f,c
 13910  003526  6ADA               	clrf	fsr2h,c
 13911  003528  50DF               	movf	indf2,w,c
 13912  00352A  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13913  00352C  90D8               	bcf	status,0,c
 13914  00352E  360F               	rlcf	??__CANIDToRegs,f,c
 13915  003530  90D8               	bcf	status,0,c
 13916  003532  360F               	rlcf	??__CANIDToRegs,f,c
 13917  003534  90D8               	bcf	status,0,c
 13918  003536  360F               	rlcf	??__CANIDToRegs,f,c
 13919  003538  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13920  00353C  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13921  003540  500F               	movf	??__CANIDToRegs,w,c
 13922  003542  12DF               	iorwf	indf2,f,c
 13923                           
 13924                           ;ECAN.c: 1117: ptr++;
 13925  003544  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13926  003546  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13927                           
 13928                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 13929  003548  5011               	movf	__CANIDToRegs@Value,w,c
 13930  00354A  6ED9               	movwf	fsr2l,c
 13931  00354C  6ADA               	clrf	fsr2h,c
 13932  00354E  0E02               	movlw	2
 13933  003550  26D9               	addwf	fsr2l,f,c
 13934  003552  6ADA               	clrf	fsr2h,c
 13935  003554  50DF               	movf	indf2,w,c
 13936  003556  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13937  003558  90D8               	bcf	status,0,c
 13938  00355A  360F               	rlcf	??__CANIDToRegs,f,c
 13939  00355C  90D8               	bcf	status,0,c
 13940  00355E  360F               	rlcf	??__CANIDToRegs,f,c
 13941  003560  90D8               	bcf	status,0,c
 13942  003562  340F               	rlcf	??__CANIDToRegs,w,c
 13943  003564  0BE0               	andlw	224
 13944  003566  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13945  00356A  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13946  00356E  6EDF               	movwf	indf2,c
 13947                           
 13948                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 13949  003570  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13950  003574  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13951  003578  0E00               	movlw	0
 13952  00357A  86DB               	bsf	plusw2,3,c
 13953                           
 13954                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 13955  00357C  5011               	movf	__CANIDToRegs@Value,w,c
 13956  00357E  6ED9               	movwf	fsr2l,c
 13957  003580  6ADA               	clrf	fsr2h,c
 13958  003582  0E02               	movlw	2
 13959  003584  26D9               	addwf	fsr2l,f,c
 13960  003586  6ADA               	clrf	fsr2h,c
 13961  003588  50DF               	movf	indf2,w,c
 13962  00358A  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13963  00358C  0E03               	movlw	3
 13964  00358E  160F               	andwf	??__CANIDToRegs,f,c
 13965  003590  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13966  003594  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13967  003598  500F               	movf	??__CANIDToRegs,w,c
 13968  00359A  12DF               	iorwf	indf2,f,c
 13969                           
 13970                           ;ECAN.c: 1122: ptr++;
 13971  00359C  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13972  00359E  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13973                           
 13974                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 13975  0035A0  5011               	movf	__CANIDToRegs@Value,w,c
 13976  0035A2  6ED9               	movwf	fsr2l,c
 13977  0035A4  6ADA               	clrf	fsr2h,c
 13978  0035A6  2AD9               	incf	fsr2l,f,c
 13979  0035A8  6ADA               	clrf	fsr2h,c
 13980  0035AA  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13981  0035AE  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13982  0035B2  CFDF FFE7          	movff	indf2,indf1
 13983                           
 13984                           ;ECAN.c: 1124: ptr++;
 13985  0035B6  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13986  0035B8  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13987                           
 13988                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 13989  0035BA  5011               	movf	__CANIDToRegs@Value,w,c
 13990  0035BC  6ED9               	movwf	fsr2l,c
 13991  0035BE  6ADA               	clrf	fsr2h,c
 13992  0035C0  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13993  0035C4  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13994  0035C8  CFDF FFE7          	movff	indf2,indf1
 13995  0035CC                     l925:
 13996  0035CC  0012               	return	
 13997  0035CE                     __end_of__CANIDToRegs:
 13998                           	opt stack 0
 13999                           tblptru	equ	0xFF8
 14000                           tblptrh	equ	0xFF7
 14001                           tblptrl	equ	0xFF6
 14002                           tablat	equ	0xFF5
 14003                           prodh	equ	0xFF4
 14004                           prodl	equ	0xFF3
 14005                           postinc0	equ	0xFEE
 14006                           wreg	equ	0xFE8
 14007                           indf1	equ	0xFE7
 14008                           fsr1h	equ	0xFE2
 14009                           fsr1l	equ	0xFE1
 14010                           indf2	equ	0xFDF
 14011                           postinc2	equ	0xFDE
 14012                           postdec2	equ	0xFDD
 14013                           plusw2	equ	0xFDB
 14014                           fsr2h	equ	0xFDA
 14015                           fsr2l	equ	0xFD9
 14016                           status	equ	0xFD8
 14017                           
 14018 ;; *************** function _vscp_getEvent *****************
 14019 ;; Defined at:
 14020 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 14021 ;; Parameters:    Size  Location     Type
 14022 ;;		None
 14023 ;; Auto vars:     Size  Location     Type
 14024 ;;  rv              1   43[COMRAM] unsigned char 
 14025 ;; Return value:  Size  Location     Type
 14026 ;;                  1    wreg      unsigned char 
 14027 ;; Registers used:
 14028 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14029 ;; Tracked objects:
 14030 ;;		On entry : F/0
 14031 ;;		On exit  : 0/0
 14032 ;;		Unchanged: 0/0
 14033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14034 ;;      Params:         0       0       0       0       0       0       0
 14035 ;;      Locals:         1       0       0       0       0       0       0
 14036 ;;      Temps:          0       0       0       0       0       0       0
 14037 ;;      Totals:         1       0       0       0       0       0       0
 14038 ;;Total ram usage:        1 bytes
 14039 ;; Hardware stack levels used:    1
 14040 ;; Hardware stack levels required when called:    6
 14041 ;; This function calls:
 14042 ;;		_getVSCPFrame
 14043 ;; This function is called by:
 14044 ;;		_main
 14045 ;; This function uses a non-reentrant model
 14046 ;;
 14047                           
 14048                           	psect	text56
 14049  0041B2                     __ptext56:
 14050                           	opt stack 0
 14051  0041B2                     _vscp_getEvent:
 14052                           	opt stack 24
 14053                           
 14054                           ; BSR set to: 0
 14055                           ;vscp_firmware.c: 1309: int8_t rv;
 14056                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 14057                           
 14058                           ;incstack = 0
 14059                           ;incstack = 0
 14060  0041B2  BF97               	btfsc	_vscp_imsg& (0+255),7,b
 14061  0041B4  D012               	goto	l1299
 14062                           
 14063                           ; BSR set to: 0
 14064                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 14065                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 14066                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 14067                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 14068                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 14069                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 14070  0041B6  0E9B               	movlw	low (_vscp_imsg+4)
 14071  0041B8  6E1E               	movwf	?_getVSCPFrame,c
 14072  0041BA  0E9C               	movlw	low (_vscp_imsg+5)
 14073  0041BC  6E1F               	movwf	?_getVSCPFrame+1,c
 14074  0041BE  0E98               	movlw	low (_vscp_imsg+1)
 14075  0041C0  6E20               	movwf	?_getVSCPFrame+2,c
 14076  0041C2  0E97               	movlw	low _vscp_imsg
 14077  0041C4  6E21               	movwf	?_getVSCPFrame+3,c
 14078  0041C6  0E9D               	movlw	low (_vscp_imsg+6)
 14079  0041C8  6E22               	movwf	?_getVSCPFrame+4,c
 14080  0041CA  0E99               	movlw	(_vscp_imsg+2)& (0+255)
 14081  0041CC  EC23  F01F         	call	_getVSCPFrame
 14082  0041D0  6E2C               	movwf	vscp_getEvent@rv,c
 14083  0041D2  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 14084  0041D4  E002               	bz	l1299
 14085                           
 14086                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 14087  0041D6  0100               	movlb	0	; () banked
 14088  0041D8  8F97               	bsf	_vscp_imsg& (0+255),7,b
 14089  0041DA                     l1299:
 14090  0041DA  0012               	return	
 14091  0041DC                     __end_of_vscp_getEvent:
 14092                           	opt stack 0
 14093                           tblptru	equ	0xFF8
 14094                           tblptrh	equ	0xFF7
 14095                           tblptrl	equ	0xFF6
 14096                           tablat	equ	0xFF5
 14097                           prodh	equ	0xFF4
 14098                           prodl	equ	0xFF3
 14099                           postinc0	equ	0xFEE
 14100                           wreg	equ	0xFE8
 14101                           indf1	equ	0xFE7
 14102                           fsr1h	equ	0xFE2
 14103                           fsr1l	equ	0xFE1
 14104                           indf2	equ	0xFDF
 14105                           postinc2	equ	0xFDE
 14106                           postdec2	equ	0xFDD
 14107                           plusw2	equ	0xFDB
 14108                           fsr2h	equ	0xFDA
 14109                           fsr2l	equ	0xFD9
 14110                           status	equ	0xFD8
 14111                           
 14112 ;; *************** function _getVSCPFrame *****************
 14113 ;; Defined at:
 14114 ;;		line 2614 in file "../main.c"
 14115 ;; Parameters:    Size  Location     Type
 14116 ;;  pvscpclass      1    wreg     PTR unsigned short 
 14117 ;;		 -> vscp_imsg(14), 
 14118 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 14119 ;;		 -> vscp_imsg(14), 
 14120 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 14121 ;;		 -> vscp_imsg(14), 
 14122 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 14123 ;;		 -> vscp_imsg(14), 
 14124 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 14125 ;;		 -> vscp_imsg(14), 
 14126 ;;  pData           1   33[COMRAM] PTR unsigned char 
 14127 ;;		 -> vscp_imsg(14), 
 14128 ;; Auto vars:     Size  Location     Type
 14129 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 14130 ;;		 -> vscp_imsg(14), 
 14131 ;;  id              4   39[COMRAM] unsigned long 
 14132 ;; Return value:  Size  Location     Type
 14133 ;;                  1    wreg      unsigned char 
 14134 ;; Registers used:
 14135 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14136 ;; Tracked objects:
 14137 ;;		On entry : F/0
 14138 ;;		On exit  : 0/0
 14139 ;;		Unchanged: 0/0
 14140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14141 ;;      Params:         5       0       0       0       0       0       0
 14142 ;;      Locals:         5       0       0       0       0       0       0
 14143 ;;      Temps:          4       0       0       0       0       0       0
 14144 ;;      Totals:        14       0       0       0       0       0       0
 14145 ;;Total ram usage:       14 bytes
 14146 ;; Hardware stack levels used:    1
 14147 ;; Hardware stack levels required when called:    5
 14148 ;; This function calls:
 14149 ;;		_getCANFrame
 14150 ;; This function is called by:
 14151 ;;		_vscp_getEvent
 14152 ;; This function uses a non-reentrant model
 14153 ;;
 14154                           
 14155                           	psect	text57
 14156  003E46                     __ptext57:
 14157                           	opt stack 0
 14158  003E46                     _getVSCPFrame:
 14159                           	opt stack 24
 14160                           
 14161                           ;incstack = 0
 14162                           ;incstack = 0
 14163                           ;getVSCPFrame@pvscpclass stored from wreg
 14164  003E46  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 14165                           
 14166                           ; BSR set to: 0
 14167                           ;main.c: 2615: uint32_t id;
 14168                           ;main.c: 2617: if ( !getCANFrame(&id, pSize, pData) ) {
 14169  003E4A  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 14170  003E4E  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 14171  003E52  0E28               	movlw	getVSCPFrame@id& (0+255)
 14172  003E54  ECAE  F020         	call	_getCANFrame
 14173  003E58  0900               	iorlw	0
 14174  003E5A  E102               	bnz	l6945
 14175                           
 14176                           ;main.c: 2618: return 0;
 14177  003E5C  0E00               	movlw	0
 14178  003E5E  D02E               	goto	l665
 14179  003E60                     l6945:
 14180                           
 14181                           ;main.c: 2619: }
 14182                           ;main.c: 2621: *pNodeId = id & 0x0ff;
 14183  003E60  501F               	movf	getVSCPFrame@pNodeId,w,c
 14184  003E62  6ED9               	movwf	fsr2l,c
 14185  003E64  6ADA               	clrf	fsr2h,c
 14186  003E66  C028  FFDF         	movff	getVSCPFrame@id,indf2
 14187                           
 14188                           ;main.c: 2622: *pvscptype = (id >> 8) & 0xff;
 14189  003E6A  501E               	movf	getVSCPFrame@pvscptype,w,c
 14190  003E6C  6ED9               	movwf	fsr2l,c
 14191  003E6E  6ADA               	clrf	fsr2h,c
 14192  003E70  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 14193                           
 14194                           ;main.c: 2623: *pvscpclass = (id >> 16) & 0x1ff;
 14195  003E74  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 14196  003E76  6E23               	movwf	??_getVSCPFrame& (0+255),c
 14197  003E78  0E01               	movlw	1
 14198  003E7A  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 14199  003E7C  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 14200  003E7E  5027               	movf	getVSCPFrame@pvscpclass,w,c
 14201  003E80  6ED9               	movwf	fsr2l,c
 14202  003E82  6ADA               	clrf	fsr2h,c
 14203  003E84  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 14204  003E88  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 14205                           
 14206                           ;main.c: 2624: *pPriority = (uint16_t) (0x07 & (id >> 26));
 14207  003E8C  5020               	movf	getVSCPFrame@pPriority,w,c
 14208  003E8E  6ED9               	movwf	fsr2l,c
 14209  003E90  6ADA               	clrf	fsr2h,c
 14210  003E92  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 14211  003E96  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 14212  003E9A  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 14213  003E9E  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 14214  003EA2  0E1B               	movlw	27
 14215  003EA4  D005               	goto	u6960
 14216  003EA6                     u6965:
 14217  003EA6  90D8               	bcf	status,0,c
 14218  003EA8  3226               	rrcf	??_getVSCPFrame+3,f,c
 14219  003EAA  3225               	rrcf	??_getVSCPFrame+2,f,c
 14220  003EAC  3224               	rrcf	??_getVSCPFrame+1,f,c
 14221  003EAE  3223               	rrcf	??_getVSCPFrame,f,c
 14222  003EB0                     u6960:
 14223  003EB0  2EE8               	decfsz	wreg,f,c
 14224  003EB2  D7F9               	goto	u6965
 14225  003EB4  5023               	movf	??_getVSCPFrame,w,c
 14226  003EB6  0B07               	andlw	7
 14227  003EB8  6EDF               	movwf	indf2,c
 14228                           
 14229                           ;main.c: 2626: return 1;
 14230  003EBA  0E01               	movlw	1
 14231  003EBC                     l665:
 14232  003EBC  0012               	return	
 14233  003EBE                     __end_of_getVSCPFrame:
 14234                           	opt stack 0
 14235                           tblptru	equ	0xFF8
 14236                           tblptrh	equ	0xFF7
 14237                           tblptrl	equ	0xFF6
 14238                           tablat	equ	0xFF5
 14239                           prodh	equ	0xFF4
 14240                           prodl	equ	0xFF3
 14241                           postinc0	equ	0xFEE
 14242                           wreg	equ	0xFE8
 14243                           indf1	equ	0xFE7
 14244                           fsr1h	equ	0xFE2
 14245                           fsr1l	equ	0xFE1
 14246                           indf2	equ	0xFDF
 14247                           postinc2	equ	0xFDE
 14248                           postdec2	equ	0xFDD
 14249                           plusw2	equ	0xFDB
 14250                           fsr2h	equ	0xFDA
 14251                           fsr2l	equ	0xFD9
 14252                           status	equ	0xFD8
 14253                           
 14254 ;; *************** function _getCANFrame *****************
 14255 ;; Defined at:
 14256 ;;		line 2656 in file "../main.c"
 14257 ;; Parameters:    Size  Location     Type
 14258 ;;  pid             1    wreg     PTR unsigned long 
 14259 ;;		 -> getVSCPFrame@id(4), 
 14260 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 14261 ;;		 -> vscp_imsg(14), 
 14262 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 14263 ;;		 -> vscp_imsg(14), 
 14264 ;; Auto vars:     Size  Location     Type
 14265 ;;  pid             1   27[COMRAM] PTR unsigned long 
 14266 ;;		 -> getVSCPFrame@id(4), 
 14267 ;;  flags           1   28[COMRAM] enum E16332
 14268 ;; Return value:  Size  Location     Type
 14269 ;;                  1    wreg      unsigned char 
 14270 ;; Registers used:
 14271 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14272 ;; Tracked objects:
 14273 ;;		On entry : F/0
 14274 ;;		On exit  : 0/0
 14275 ;;		Unchanged: 0/0
 14276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14277 ;;      Params:         2       0       0       0       0       0       0
 14278 ;;      Locals:         2       0       0       0       0       0       0
 14279 ;;      Temps:          0       0       0       0       0       0       0
 14280 ;;      Totals:         4       0       0       0       0       0       0
 14281 ;;Total ram usage:        4 bytes
 14282 ;; Hardware stack levels used:    1
 14283 ;; Hardware stack levels required when called:    4
 14284 ;; This function calls:
 14285 ;;		_ECANReceiveMessage
 14286 ;; This function is called by:
 14287 ;;		_getVSCPFrame
 14288 ;; This function uses a non-reentrant model
 14289 ;;
 14290                           
 14291                           	psect	text58
 14292  00415C                     __ptext58:
 14293                           	opt stack 0
 14294  00415C                     _getCANFrame:
 14295                           	opt stack 24
 14296                           
 14297                           ;incstack = 0
 14298                           ;incstack = 0
 14299                           ;getCANFrame@pid stored from wreg
 14300  00415C  CFE8 F01C          	movff	wreg,getCANFrame@pid
 14301                           
 14302                           ; BSR set to: 0
 14303                           ;main.c: 2657: ECAN_RX_MSG_FLAGS flags;
 14304                           ;main.c: 2661: if (vscp_imsg.flags & 0x80) return 0;
 14305  004160  AF97               	btfss	_vscp_imsg& (0+255),7,b
 14306  004162  D002               	goto	l6961
 14307  004164                     l6957:
 14308  004164  0E00               	movlw	0
 14309  004166  D00F               	goto	l676
 14310  004168                     l6961:
 14311                           
 14312                           ; BSR set to: 0
 14313                           ;main.c: 2663: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 14314  004168  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 14315  00416C  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 14316  004170  0E1D               	movlw	low getCANFrame@flags
 14317  004172  6E11               	movwf	?_ECANReceiveMessage+2,c
 14318  004174  501C               	movf	getCANFrame@pid,w,c
 14319  004176  EC51  F015         	call	_ECANReceiveMessage
 14320  00417A  0900               	iorlw	0
 14321  00417C  E0F3               	bz	l6957
 14322                           
 14323                           ;main.c: 2666: if (flags & ECAN_RX_RTR_FRAME) return 0;
 14324  00417E  AC1D               	btfss	getCANFrame@flags,6,c
 14325                           
 14326                           ;main.c: 2669: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 14327  004180  AA1D               	btfss	getCANFrame@flags,5,c
 14328  004182  D7F0               	goto	l6957
 14329                           
 14330                           ;main.c: 2671: return 1;
 14331  004184  0E01               	movlw	1
 14332  004186                     l676:
 14333  004186  0012               	return	
 14334  004188                     __end_of_getCANFrame:
 14335                           	opt stack 0
 14336                           tblptru	equ	0xFF8
 14337                           tblptrh	equ	0xFF7
 14338                           tblptrl	equ	0xFF6
 14339                           tablat	equ	0xFF5
 14340                           prodh	equ	0xFF4
 14341                           prodl	equ	0xFF3
 14342                           postinc0	equ	0xFEE
 14343                           wreg	equ	0xFE8
 14344                           indf1	equ	0xFE7
 14345                           fsr1h	equ	0xFE2
 14346                           fsr1l	equ	0xFE1
 14347                           indf2	equ	0xFDF
 14348                           postinc2	equ	0xFDE
 14349                           postdec2	equ	0xFDD
 14350                           plusw2	equ	0xFDB
 14351                           fsr2h	equ	0xFDA
 14352                           fsr2l	equ	0xFD9
 14353                           status	equ	0xFD8
 14354                           
 14355 ;; *************** function _ECANReceiveMessage *****************
 14356 ;; Defined at:
 14357 ;;		line 803 in file "../ECAN.c"
 14358 ;; Parameters:    Size  Location     Type
 14359 ;;  id              1    wreg     PTR unsigned long 
 14360 ;;		 -> getVSCPFrame@id(4), 
 14361 ;;  data            1   14[COMRAM] PTR unsigned char 
 14362 ;;		 -> vscp_imsg(14), 
 14363 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 14364 ;;		 -> vscp_imsg(14), 
 14365 ;;  msgFlags        1   16[COMRAM] PTR enum E16324
 14366 ;;		 -> getCANFrame@flags(1), 
 14367 ;; Auto vars:     Size  Location     Type
 14368 ;;  id              1   19[COMRAM] PTR unsigned long 
 14369 ;;		 -> getVSCPFrame@id(4), 
 14370 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 14371 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14372 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14373 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 14374 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14375 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14376 ;;  temp            1   22[COMRAM] struct .
 14377 ;;  mode            1   21[COMRAM] unsigned char 
 14378 ;;  i               1   20[COMRAM] unsigned char 
 14379 ;; Return value:  Size  Location     Type
 14380 ;;                  1    wreg      enum E15660
 14381 ;; Registers used:
 14382 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14383 ;; Tracked objects:
 14384 ;;		On entry : F/0
 14385 ;;		On exit  : 0/0
 14386 ;;		Unchanged: 0/0
 14387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14388 ;;      Params:         3       0       0       0       0       0       0
 14389 ;;      Locals:         8       0       0       0       0       0       0
 14390 ;;      Temps:          0       0       0       0       0       0       0
 14391 ;;      Totals:        11       0       0       0       0       0       0
 14392 ;;Total ram usage:       11 bytes
 14393 ;; Hardware stack levels used:    1
 14394 ;; Hardware stack levels required when called:    3
 14395 ;; This function calls:
 14396 ;;		__ECANPointBuffer
 14397 ;;		__RegsToCANID
 14398 ;; This function is called by:
 14399 ;;		_getCANFrame
 14400 ;; This function uses a non-reentrant model
 14401 ;;
 14402                           
 14403                           	psect	text59
 14404  002AA2                     __ptext59:
 14405                           	opt stack 0
 14406  002AA2                     _ECANReceiveMessage:
 14407                           	opt stack 24
 14408                           
 14409                           ;incstack = 0
 14410                           ;incstack = 0
 14411                           ;ECANReceiveMessage@id stored from wreg
 14412  002AA2  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 14413                           
 14414                           ; BSR set to: 0
 14415                           ;ECAN.c: 805: BYTE mode;
 14416                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 14417                           ;ECAN.c: 809: char i;
 14418                           ;ECAN.c: 810: BYTE_VAL temp;
 14419                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 14420  002AA6  6A54               	clrf	__ECANRxFilterHitInfo,c
 14421                           
 14422                           ; BSR set to: 0
 14423                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 14424  002AA8  5077               	movf	3959,w,c	;volatile
 14425  002AAA  0BC0               	andlw	192
 14426  002AAC  6E16               	movwf	ECANReceiveMessage@mode,c
 14427                           
 14428                           ; BSR set to: 0
 14429                           ;ECAN.c: 816: if ( mode == 0x00 )
 14430  002AAE  6616               	tstfsz	ECANReceiveMessage@mode,c
 14431  002AB0  D032               	goto	l7093
 14432                           
 14433                           ; BSR set to: 0
 14434                           ;ECAN.c: 822: {
 14435                           ;ECAN.c: 824: if ( RXB0FUL )
 14436  002AB2  AE60               	btfss	3936,7,c	;volatile
 14437  002AB4  D012               	goto	l876
 14438                           
 14439                           ; BSR set to: 0
 14440                           ;ECAN.c: 825: {
 14441                           ;ECAN.c: 827: RXB0IF = 0;
 14442  002AB6  90A4               	bcf	4004,0,c	;volatile
 14443                           
 14444                           ;ECAN.c: 830: if ( RXB0OVFL )
 14445  002AB8  AE74               	btfss	3956,7,c	;volatile
 14446  002ABA  D006               	goto	l7069
 14447                           
 14448                           ; BSR set to: 0
 14449                           ;ECAN.c: 831: {
 14450                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 14451  002ABC  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14452  002ABE  6ED9               	movwf	fsr2l,c
 14453  002AC0  6ADA               	clrf	fsr2h,c
 14454  002AC2  0E00               	movlw	0
 14455  002AC4  86DB               	bsf	plusw2,3,c
 14456                           
 14457                           ; BSR set to: 0
 14458                           ;ECAN.c: 833: RXB0OVFL = 0;
 14459  002AC6  9E74               	bcf	3956,7,c	;volatile
 14460  002AC8                     l7069:
 14461                           
 14462                           ; BSR set to: 0
 14463                           ;ECAN.c: 834: }
 14464                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 14465  002AC8  A060               	btfss	3936,0,c	;volatile
 14466  002ACA  D002               	bra	u7135
 14467  002ACC  8054               	bsf	__ECANRxFilterHitInfo,0,c
 14468  002ACE  D001               	bra	u7137
 14469  002AD0                     u7135:
 14470  002AD0  9054               	bcf	__ECANRxFilterHitInfo,0,c
 14471  002AD2                     u7137:
 14472                           
 14473                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 14474  002AD2  0E0F               	movlw	15	;volatile
 14475  002AD4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14476  002AD6  0E60               	movlw	96	;volatile
 14477  002AD8  D01A               	goto	L42
 14478  002ADA                     l876:
 14479                           
 14480                           ; BSR set to: 0
 14481                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 14482  002ADA  010F               	movlb	15	; () banked
 14483  002ADC  AF50               	btfss	80,7,b	;volatile
 14484  002ADE  D019               	goto	l7087
 14485                           
 14486                           ; BSR set to: 15
 14487                           ;ECAN.c: 842: {
 14488                           ;ECAN.c: 844: RXB1IF = 0;
 14489  002AE0  92A4               	bcf	4004,1,c	;volatile
 14490                           
 14491                           ;ECAN.c: 847: if ( RXB1OVFL )
 14492  002AE2  AC74               	btfss	3956,6,c	;volatile
 14493  002AE4  D006               	goto	l7079
 14494                           
 14495                           ; BSR set to: 15
 14496                           ;ECAN.c: 848: {
 14497                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 14498  002AE6  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14499  002AE8  6ED9               	movwf	fsr2l,c
 14500  002AEA  6ADA               	clrf	fsr2h,c
 14501  002AEC  0E00               	movlw	0
 14502  002AEE  86DB               	bsf	plusw2,3,c
 14503                           
 14504                           ; BSR set to: 15
 14505                           ;ECAN.c: 850: RXB1OVFL = 0;
 14506  002AF0  9C74               	bcf	3956,6,c	;volatile
 14507  002AF2                     l7079:
 14508                           
 14509                           ; BSR set to: 15
 14510                           ;ECAN.c: 851: }
 14511                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 14512  002AF2  5150               	movf	80,w,b	;volatile
 14513  002AF4  0B07               	andlw	7
 14514  002AF6  6E54               	movwf	__ECANRxFilterHitInfo,c
 14515                           
 14516                           ; BSR set to: 15
 14517                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 14518  002AF8  0E02               	movlw	2
 14519  002AFA  6054               	cpfslt	__ECANRxFilterHitInfo,c
 14520  002AFC  D005               	goto	l7085
 14521                           
 14522                           ; BSR set to: 15
 14523                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 14524  002AFE  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14525  002B00  6ED9               	movwf	fsr2l,c
 14526  002B02  6ADA               	clrf	fsr2h,c
 14527  002B04  0E00               	movlw	0
 14528  002B06  8EDB               	bsf	plusw2,7,c
 14529  002B08                     l7085:
 14530                           
 14531                           ; BSR set to: 15
 14532                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 14533  002B08  0E0F               	movlw	15	;volatile
 14534  002B0A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14535  002B0C  0E50               	movlw	80	;volatile
 14536  002B0E                     L42:
 14537  002B0E  6E18               	movwf	ECANReceiveMessage@ptr,c
 14538                           
 14539                           ;ECAN.c: 860: }
 14540  002B10  D065               	goto	l7147
 14541  002B12                     l7087:
 14542                           
 14543                           ;ECAN.c: 861: else
 14544                           ;ECAN.c: 862: return FALSE;
 14545  002B12  0E00               	movlw	0
 14546  002B14  D0CC               	goto	l883
 14547  002B16                     l7093:
 14548                           
 14549                           ; BSR set to: 0
 14550                           ;ECAN.c: 869: else if ( mode == 0x40 )
 14551  002B16  5016               	movf	ECANReceiveMessage@mode,w,c
 14552  002B18  0A40               	xorlw	64
 14553  002B1A  E146               	bnz	l886
 14554                           
 14555                           ; BSR set to: 0
 14556                           ;ECAN.c: 875: {
 14557                           ;ECAN.c: 876: if ( RXB0FUL )
 14558  002B1C  AE60               	btfss	3936,7,c	;volatile
 14559  002B1E  D004               	goto	l887
 14560                           
 14561                           ; BSR set to: 0
 14562                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 14563  002B20  0E0F               	movlw	15	;volatile
 14564  002B22  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14565  002B24  0E60               	movlw	96	;volatile
 14566  002B26  D03E               	goto	L49
 14567  002B28                     l887:
 14568                           
 14569                           ; BSR set to: 0
 14570                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 14571  002B28  010F               	movlb	15	; () banked
 14572  002B2A  AF50               	btfss	80,7,b	;volatile
 14573  002B2C  D004               	goto	l889
 14574                           
 14575                           ; BSR set to: 15
 14576                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 14577  002B2E  0E0F               	movlw	15	;volatile
 14578  002B30  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14579  002B32  0E50               	movlw	80	;volatile
 14580  002B34  D037               	goto	L49
 14581  002B36                     l889:
 14582                           
 14583                           ; BSR set to: 15
 14584                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 14585  002B36  010D               	movlb	13
 14586  002B38  B5F8               	btfsc	248,2,b	;volatile
 14587  002B3A  D007               	goto	l891
 14588  002B3C  010E               	movlb	14
 14589  002B3E  AF20               	btfss	32,7,b	;volatile
 14590  002B40  D004               	goto	l891
 14591                           
 14592                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 14593  002B42  0E0E               	movlw	14	;volatile
 14594  002B44  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14595  002B46  0E20               	movlw	32	;volatile
 14596  002B48  D02D               	goto	L49
 14597  002B4A                     l891:
 14598                           
 14599                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 14600  002B4A  010D               	movlb	13
 14601  002B4C  B7F8               	btfsc	248,3,b	;volatile
 14602  002B4E  D007               	goto	l893
 14603  002B50  010E               	movlb	14
 14604  002B52  AF30               	btfss	48,7,b	;volatile
 14605  002B54  D004               	goto	l893
 14606                           
 14607                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 14608  002B56  0E0E               	movlw	14	;volatile
 14609  002B58  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14610  002B5A  0E30               	movlw	48	;volatile
 14611  002B5C  D023               	goto	L49
 14612  002B5E                     l893:
 14613                           
 14614                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 14615  002B5E  010D               	movlb	13
 14616  002B60  B9F8               	btfsc	248,4,b	;volatile
 14617  002B62  D007               	goto	l895
 14618  002B64  010E               	movlb	14
 14619  002B66  AF40               	btfss	64,7,b	;volatile
 14620  002B68  D004               	goto	l895
 14621                           
 14622                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 14623  002B6A  0E0E               	movlw	14	;volatile
 14624  002B6C  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14625  002B6E  0E40               	movlw	64	;volatile
 14626  002B70  D019               	goto	L49
 14627  002B72                     l895:
 14628                           
 14629                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 14630  002B72  010D               	movlb	13
 14631  002B74  BBF8               	btfsc	248,5,b	;volatile
 14632  002B76  D005               	goto	l897
 14633  002B78  010E               	movlb	14
 14634  002B7A  AF50               	btfss	80,7,b	;volatile
 14635  002B7C  D002               	goto	l897
 14636                           
 14637                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 14638  002B7E  0E0E               	movlw	14	;volatile
 14639  002B80  D7D7               	goto	L50
 14640  002B82                     l897:
 14641                           
 14642                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 14643  002B82  010D               	movlb	13
 14644  002B84  BDF8               	btfsc	248,6,b	;volatile
 14645  002B86  D005               	goto	l899
 14646  002B88  010E               	movlb	14
 14647  002B8A  AF60               	btfss	96,7,b	;volatile
 14648  002B8C  D002               	goto	l899
 14649                           
 14650                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 14651  002B8E  0E0E               	movlw	14	;volatile
 14652  002B90  D7C8               	goto	L51
 14653  002B92                     l899:
 14654                           
 14655                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 14656  002B92  010D               	movlb	13
 14657  002B94  BFF8               	btfsc	248,7,b	;volatile
 14658  002B96  D7BD               	goto	l7087
 14659  002B98  010E               	movlb	14
 14660  002B9A  AF70               	btfss	112,7,b	;volatile
 14661  002B9C  D7BA               	goto	l7087
 14662                           
 14663                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 14664  002B9E  0E0E               	movlw	14	;volatile
 14665  002BA0  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14666  002BA2  0E70               	movlw	112	;volatile
 14667  002BA4                     L49:
 14668  002BA4  6E18               	movwf	ECANReceiveMessage@ptr,c
 14669  002BA6  D00A               	goto	l7137
 14670  002BA8                     l886:
 14671                           
 14672                           ; BSR set to: 0
 14673                           ;ECAN.c: 910: else
 14674                           ;ECAN.c: 915: {
 14675                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 14676  002BA8  AE74               	btfss	3956,7,c	;volatile
 14677  002BAA  D7B3               	goto	l7087
 14678                           
 14679                           ; BSR set to: 0
 14680                           ;ECAN.c: 917: {
 14681                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 14682  002BAC  506F               	movf	3951,w,c	;volatile
 14683  002BAE  0B07               	andlw	7
 14684  002BB0  EC5F  F01F         	call	__ECANPointBuffer
 14685  002BB4  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 14686  002BB8  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 14687  002BBC                     l7137:
 14688                           
 14689                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 14690  002BBC  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14691  002BC0  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14692  002BC4  50DF               	movf	indf2,w,c
 14693  002BC6  0B1F               	andlw	31
 14694  002BC8  6E54               	movwf	__ECANRxFilterHitInfo,c
 14695                           
 14696                           ;ECAN.c: 932: RXB1IF = 0;
 14697  002BCA  92A4               	bcf	4004,1,c	;volatile
 14698                           
 14699                           ;ECAN.c: 934: if ( RXB1OVFL )
 14700  002BCC  AC74               	btfss	3956,6,c	;volatile
 14701  002BCE  D006               	goto	l7147
 14702                           
 14703                           ;ECAN.c: 935: {
 14704                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 14705  002BD0  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14706  002BD2  6ED9               	movwf	fsr2l,c
 14707  002BD4  6ADA               	clrf	fsr2h,c
 14708  002BD6  0E00               	movlw	0
 14709  002BD8  86DB               	bsf	plusw2,3,c
 14710                           
 14711                           ;ECAN.c: 937: RXB1OVFL = 0;
 14712  002BDA  9C74               	bcf	3956,6,c	;volatile
 14713  002BDC                     l7147:
 14714                           
 14715                           ;ECAN.c: 942: savedPtr = ptr;
 14716  002BDC  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 14717  002BE0  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 14718                           
 14719                           ;ECAN.c: 943: *msgFlags = 0;
 14720  002BE4  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14721  002BE6  6ED9               	movwf	fsr2l,c
 14722  002BE8  6ADA               	clrf	fsr2h,c
 14723  002BEA  6ADF               	clrf	indf2,c
 14724                           
 14725                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 14726  002BEC  EE20 F005          	lfsr	2,5
 14727  002BF0  5018               	movf	ECANReceiveMessage@ptr,w,c
 14728  002BF2  26D9               	addwf	fsr2l,f,c
 14729  002BF4  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14730  002BF6  22DA               	addwfc	fsr2h,f,c
 14731  002BF8  50DF               	movf	indf2,w,c
 14732  002BFA  6E17               	movwf	ECANReceiveMessage@temp,c
 14733                           
 14734                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 14735  002BFC  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14736  002BFE  6ED9               	movwf	fsr2l,c
 14737  002C00  6ADA               	clrf	fsr2h,c
 14738  002C02  5017               	movf	ECANReceiveMessage@temp,w,c
 14739  002C04  0B0F               	andlw	15
 14740  002C06  6EDF               	movwf	indf2,c
 14741                           
 14742                           ;ECAN.c: 950: if ( temp.bits.b6 )
 14743  002C08  AC17               	btfss	ECANReceiveMessage@temp,6,c
 14744  002C0A  D005               	goto	l907
 14745                           
 14746                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 14747  002C0C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14748  002C0E  6ED9               	movwf	fsr2l,c
 14749  002C10  6ADA               	clrf	fsr2h,c
 14750  002C12  0E00               	movlw	0
 14751  002C14  8CDB               	bsf	plusw2,6,c
 14752  002C16                     l907:
 14753                           
 14754                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 14755  002C16  EE20 F002          	lfsr	2,2
 14756  002C1A  5018               	movf	ECANReceiveMessage@ptr,w,c
 14757  002C1C  26D9               	addwf	fsr2l,f,c
 14758  002C1E  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14759  002C20  22DA               	addwfc	fsr2h,f,c
 14760  002C22  50DF               	movf	indf2,w,c
 14761  002C24  6E17               	movwf	ECANReceiveMessage@temp,c
 14762                           
 14763                           ;ECAN.c: 955: if ( temp.bits.b3 )
 14764  002C26  A617               	btfss	ECANReceiveMessage@temp,3,c
 14765  002C28  D008               	goto	l908
 14766                           
 14767                           ;ECAN.c: 956: {
 14768                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 14769  002C2A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14770  002C2C  6ED9               	movwf	fsr2l,c
 14771  002C2E  6ADA               	clrf	fsr2h,c
 14772  002C30  0E00               	movlw	0
 14773  002C32  8ADB               	bsf	plusw2,5,c
 14774                           
 14775                           ;ECAN.c: 958: temp.Val = 1;
 14776  002C34  0E01               	movlw	1
 14777  002C36  6E17               	movwf	ECANReceiveMessage@temp,c
 14778                           
 14779                           ;ECAN.c: 959: }
 14780  002C38  D001               	goto	l7165
 14781  002C3A                     l908:
 14782                           
 14783                           ;ECAN.c: 960: else
 14784                           ;ECAN.c: 961: temp.Val = 0;
 14785  002C3A  6A17               	clrf	ECANReceiveMessage@temp,c
 14786  002C3C                     l7165:
 14787                           
 14788                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 14789  002C3C  2818               	incf	ECANReceiveMessage@ptr,w,c
 14790  002C3E  6E08               	movwf	?__RegsToCANID,c
 14791  002C40  0E00               	movlw	0
 14792  002C42  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 14793  002C44  6E09               	movwf	?__RegsToCANID+1,c
 14794  002C46  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 14795  002C4A  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 14796  002C4E  ECE4  F018         	call	__RegsToCANID	;wreg free
 14797                           
 14798                           ;ECAN.c: 966: ptr += 6;
 14799  002C52  0E06               	movlw	6
 14800  002C54  2618               	addwf	ECANReceiveMessage@ptr,f,c
 14801  002C56  0E00               	movlw	0
 14802  002C58  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 14803                           
 14804                           ;ECAN.c: 967: temp.Val = *dataLen;
 14805  002C5A  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14806  002C5C  6ED9               	movwf	fsr2l,c
 14807  002C5E  6ADA               	clrf	fsr2h,c
 14808  002C60  50DF               	movf	indf2,w,c
 14809  002C62  6E17               	movwf	ECANReceiveMessage@temp,c
 14810                           
 14811                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 14812  002C64  6A15               	clrf	ECANReceiveMessage@i,c
 14813  002C66  D00D               	goto	l7181
 14814  002C68                     l7173:
 14815                           
 14816                           ;ECAN.c: 969: *data++ = *ptr++;
 14817  002C68  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14818  002C6C  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14819  002C70  500F               	movf	ECANReceiveMessage@data,w,c
 14820  002C72  6EE1               	movwf	fsr1l,c
 14821  002C74  6AE2               	clrf	fsr1h,c
 14822  002C76  CFDF FFE7          	movff	indf2,indf1
 14823  002C7A  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 14824  002C7C  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 14825  002C7E  2A0F               	incf	ECANReceiveMessage@data,f,c
 14826  002C80  2A15               	incf	ECANReceiveMessage@i,f,c
 14827  002C82                     l7181:
 14828  002C82  5017               	movf	ECANReceiveMessage@temp,w,c
 14829  002C84  5C15               	subwf	ECANReceiveMessage@i,w,c
 14830  002C86  E3F0               	bnc	l7173
 14831                           
 14832                           ;ECAN.c: 972: if ( IRXIF )
 14833  002C88  AEA4               	btfss	4004,7,c	;volatile
 14834  002C8A  D006               	goto	l7187
 14835                           
 14836                           ;ECAN.c: 973: {
 14837                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 14838  002C8C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14839  002C8E  6ED9               	movwf	fsr2l,c
 14840  002C90  6ADA               	clrf	fsr2h,c
 14841  002C92  0E00               	movlw	0
 14842  002C94  88DB               	bsf	plusw2,4,c
 14843                           
 14844                           ;ECAN.c: 975: IRXIF = 0;
 14845  002C96  9EA4               	bcf	4004,7,c	;volatile
 14846  002C98                     l7187:
 14847                           
 14848                           ;ECAN.c: 976: }
 14849                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 14850  002C98  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 14851  002C9C  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 14852  002CA0  0E7F               	movlw	127
 14853  002CA2  16DF               	andwf	indf2,f,c
 14854                           
 14855                           ;ECAN.c: 983: if ( mode == 0x80 )
 14856  002CA4  5016               	movf	ECANReceiveMessage@mode,w,c
 14857  002CA6  0A80               	xorlw	128
 14858  002CA8  B4D8               	btfsc	status,2,c
 14859                           
 14860                           ;ECAN.c: 984: FIFOEMPTY = 0;
 14861  002CAA  9E74               	bcf	3956,7,c	;volatile
 14862                           
 14863                           ;ECAN.c: 990: return TRUE;
 14864  002CAC  0E01               	movlw	1
 14865  002CAE                     l883:
 14866  002CAE  0012               	return	
 14867  002CB0                     __end_of_ECANReceiveMessage:
 14868                           	opt stack 0
 14869                           tblptru	equ	0xFF8
 14870                           tblptrh	equ	0xFF7
 14871                           tblptrl	equ	0xFF6
 14872                           tablat	equ	0xFF5
 14873                           prodh	equ	0xFF4
 14874                           prodl	equ	0xFF3
 14875                           postinc0	equ	0xFEE
 14876                           wreg	equ	0xFE8
 14877                           indf1	equ	0xFE7
 14878                           fsr1h	equ	0xFE2
 14879                           fsr1l	equ	0xFE1
 14880                           indf2	equ	0xFDF
 14881                           postinc2	equ	0xFDE
 14882                           postdec2	equ	0xFDD
 14883                           plusw2	equ	0xFDB
 14884                           fsr2h	equ	0xFDA
 14885                           fsr2l	equ	0xFD9
 14886                           status	equ	0xFD8
 14887                           
 14888 ;; *************** function __RegsToCANID *****************
 14889 ;; Defined at:
 14890 ;;		line 1156 in file "../ECAN.c"
 14891 ;; Parameters:    Size  Location     Type
 14892 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 14893 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14894 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14895 ;;  val             1    9[COMRAM] PTR unsigned long 
 14896 ;;		 -> getVSCPFrame@id(4), 
 14897 ;;  type            1   10[COMRAM] unsigned char 
 14898 ;; Auto vars:     Size  Location     Type
 14899 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 14900 ;;		 -> getVSCPFrame@id(4), 
 14901 ;; Return value:  Size  Location     Type
 14902 ;;		None               void
 14903 ;; Registers used:
 14904 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14905 ;; Tracked objects:
 14906 ;;		On entry : 0/0
 14907 ;;		On exit  : 0/0
 14908 ;;		Unchanged: 0/0
 14909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14910 ;;      Params:         4       0       0       0       0       0       0
 14911 ;;      Locals:         1       0       0       0       0       0       0
 14912 ;;      Temps:          2       0       0       0       0       0       0
 14913 ;;      Totals:         7       0       0       0       0       0       0
 14914 ;;Total ram usage:        7 bytes
 14915 ;; Hardware stack levels used:    1
 14916 ;; Hardware stack levels required when called:    2
 14917 ;; This function calls:
 14918 ;;		Nothing
 14919 ;; This function is called by:
 14920 ;;		_ECANReceiveMessage
 14921 ;; This function uses a non-reentrant model
 14922 ;;
 14923                           
 14924                           	psect	text60
 14925  0031C8                     __ptext60:
 14926                           	opt stack 0
 14927  0031C8                     __RegsToCANID:
 14928                           	opt stack 24
 14929                           
 14930                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 14931                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 14932                           
 14933                           ;incstack = 0
 14934                           ;incstack = 0
 14935  0031C8  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 14936                           
 14937                           ;ECAN.c: 1161: if ( type == 0 )
 14938  0031CC  660B               	tstfsz	__RegsToCANID@type,c
 14939  0031CE  D046               	goto	l7261
 14940                           
 14941                           ;ECAN.c: 1162: {
 14942                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 14943  0031D0  500E               	movf	__RegsToCANID@Value,w,c
 14944  0031D2  6ED9               	movwf	fsr2l,c
 14945  0031D4  6ADA               	clrf	fsr2h,c
 14946  0031D6  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14947  0031DA  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14948  0031DE  50E7               	movf	indf1,w,c
 14949  0031E0  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14950  0031E2  90D8               	bcf	status,0,c
 14951  0031E4  360C               	rlcf	??__RegsToCANID,f,c
 14952  0031E6  90D8               	bcf	status,0,c
 14953  0031E8  360C               	rlcf	??__RegsToCANID,f,c
 14954  0031EA  90D8               	bcf	status,0,c
 14955  0031EC  340C               	rlcf	??__RegsToCANID,w,c
 14956  0031EE  6EDF               	movwf	indf2,c
 14957                           
 14958                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 14959  0031F0  500E               	movf	__RegsToCANID@Value,w,c
 14960  0031F2  6ED9               	movwf	fsr2l,c
 14961  0031F4  6ADA               	clrf	fsr2h,c
 14962  0031F6  2AD9               	incf	fsr2l,f,c
 14963  0031F8  6ADA               	clrf	fsr2h,c
 14964  0031FA  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14965  0031FE  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14966  003202  50E7               	movf	indf1,w,c
 14967  003204  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14968  003206  0E05               	movlw	5
 14969  003208  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14970  00320A                     u7455:
 14971  00320A  90D8               	bcf	status,0,c
 14972  00320C  320C               	rrcf	??__RegsToCANID,f,c
 14973  00320E  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14974  003210  D7FC               	goto	u7455
 14975  003212  500C               	movf	??__RegsToCANID,w,c
 14976  003214  6EDF               	movwf	indf2,c
 14977                           
 14978                           ;ECAN.c: 1166: ptr++;
 14979  003216  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14980  003218  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14981                           
 14982                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 14983  00321A  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14984  00321E  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14985  003222  50DF               	movf	indf2,w,c
 14986  003224  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14987  003226  0E05               	movlw	5
 14988  003228  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14989  00322A                     u7465:
 14990  00322A  90D8               	bcf	status,0,c
 14991  00322C  320C               	rrcf	??__RegsToCANID,f,c
 14992  00322E  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14993  003230  D7FC               	goto	u7465
 14994  003232  500E               	movf	__RegsToCANID@Value,w,c
 14995  003234  6ED9               	movwf	fsr2l,c
 14996  003236  6ADA               	clrf	fsr2h,c
 14997  003238  500C               	movf	??__RegsToCANID,w,c
 14998  00323A  12DF               	iorwf	indf2,f,c
 14999                           
 15000                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 15001  00323C  500E               	movf	__RegsToCANID@Value,w,c
 15002  00323E  6ED9               	movwf	fsr2l,c
 15003  003240  6ADA               	clrf	fsr2h,c
 15004  003242  0E02               	movlw	2
 15005  003244  26D9               	addwf	fsr2l,f,c
 15006  003246  6ADA               	clrf	fsr2h,c
 15007  003248  6ADF               	clrf	indf2,c
 15008                           
 15009                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 15010  00324A  500E               	movf	__RegsToCANID@Value,w,c
 15011  00324C  6ED9               	movwf	fsr2l,c
 15012  00324E  6ADA               	clrf	fsr2h,c
 15013  003250  0E03               	movlw	3
 15014  003252  26D9               	addwf	fsr2l,f,c
 15015  003254  6ADA               	clrf	fsr2h,c
 15016  003256  0E00               	movlw	0
 15017  003258  6EDF               	movwf	indf2,c
 15018                           
 15019                           ;ECAN.c: 1170: }
 15020  00325A  D067               	goto	l930
 15021  00325C                     l7261:
 15022                           
 15023                           ;ECAN.c: 1171: else
 15024                           ;ECAN.c: 1172: {
 15025                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 15026  00325C  500E               	movf	__RegsToCANID@Value,w,c
 15027  00325E  6ED9               	movwf	fsr2l,c
 15028  003260  6ADA               	clrf	fsr2h,c
 15029  003262  0E02               	movlw	2
 15030  003264  26D9               	addwf	fsr2l,f,c
 15031  003266  6ADA               	clrf	fsr2h,c
 15032  003268  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 15033  00326C  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 15034  003270  50E7               	movf	indf1,w,c
 15035  003272  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15036  003274  0E05               	movlw	5
 15037  003276  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 15038  003278                     u7475:
 15039  003278  90D8               	bcf	status,0,c
 15040  00327A  360C               	rlcf	??__RegsToCANID,f,c
 15041  00327C  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 15042  00327E  D7FC               	goto	u7475
 15043  003280  500C               	movf	??__RegsToCANID,w,c
 15044  003282  6EDF               	movwf	indf2,c
 15045                           
 15046                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 15047  003284  500E               	movf	__RegsToCANID@Value,w,c
 15048  003286  6ED9               	movwf	fsr2l,c
 15049  003288  6ADA               	clrf	fsr2h,c
 15050  00328A  0E03               	movlw	3
 15051  00328C  26D9               	addwf	fsr2l,f,c
 15052  00328E  6ADA               	clrf	fsr2h,c
 15053  003290  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 15054  003294  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 15055  003298  50E7               	movf	indf1,w,c
 15056  00329A  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15057  00329C  90D8               	bcf	status,0,c
 15058  00329E  320C               	rrcf	??__RegsToCANID,f,c
 15059  0032A0  90D8               	bcf	status,0,c
 15060  0032A2  320C               	rrcf	??__RegsToCANID,f,c
 15061  0032A4  90D8               	bcf	status,0,c
 15062  0032A6  300C               	rrcf	??__RegsToCANID,w,c
 15063  0032A8  6EDF               	movwf	indf2,c
 15064                           
 15065                           ;ECAN.c: 1176: ptr++;
 15066  0032AA  4A08               	infsnz	__RegsToCANID@ptr,f,c
 15067  0032AC  2A09               	incf	__RegsToCANID@ptr+1,f,c
 15068                           
 15069                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 15070  0032AE  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15071  0032B2  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15072  0032B6  50DF               	movf	indf2,w,c
 15073  0032B8  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15074  0032BA  0E03               	movlw	3
 15075  0032BC  160C               	andwf	??__RegsToCANID,f,c
 15076  0032BE  500E               	movf	__RegsToCANID@Value,w,c
 15077  0032C0  6ED9               	movwf	fsr2l,c
 15078  0032C2  6ADA               	clrf	fsr2h,c
 15079  0032C4  0E02               	movlw	2
 15080  0032C6  26D9               	addwf	fsr2l,f,c
 15081  0032C8  6ADA               	clrf	fsr2h,c
 15082  0032CA  500C               	movf	??__RegsToCANID,w,c
 15083  0032CC  12DF               	iorwf	indf2,f,c
 15084                           
 15085                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 15086  0032CE  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15087  0032D2  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15088  0032D6  50DF               	movf	indf2,w,c
 15089  0032D8  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15090  0032DA  90D8               	bcf	status,0,c
 15091  0032DC  320C               	rrcf	??__RegsToCANID,f,c
 15092  0032DE  90D8               	bcf	status,0,c
 15093  0032E0  320C               	rrcf	??__RegsToCANID,f,c
 15094  0032E2  90D8               	bcf	status,0,c
 15095  0032E4  320C               	rrcf	??__RegsToCANID,f,c
 15096  0032E6  0E1C               	movlw	28
 15097  0032E8  160C               	andwf	??__RegsToCANID,f,c
 15098  0032EA  500E               	movf	__RegsToCANID@Value,w,c
 15099  0032EC  6ED9               	movwf	fsr2l,c
 15100  0032EE  6ADA               	clrf	fsr2h,c
 15101  0032F0  0E02               	movlw	2
 15102  0032F2  26D9               	addwf	fsr2l,f,c
 15103  0032F4  6ADA               	clrf	fsr2h,c
 15104  0032F6  500C               	movf	??__RegsToCANID,w,c
 15105  0032F8  12DF               	iorwf	indf2,f,c
 15106                           
 15107                           ;ECAN.c: 1180: ptr++;
 15108  0032FA  4A08               	infsnz	__RegsToCANID@ptr,f,c
 15109  0032FC  2A09               	incf	__RegsToCANID@ptr+1,f,c
 15110                           
 15111                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 15112  0032FE  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15113  003302  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15114  003306  500E               	movf	__RegsToCANID@Value,w,c
 15115  003308  6EE1               	movwf	fsr1l,c
 15116  00330A  6AE2               	clrf	fsr1h,c
 15117  00330C  2AE1               	incf	fsr1l,f,c
 15118  00330E  6AE2               	clrf	fsr1h,c
 15119  003310  CFDF FFE7          	movff	indf2,indf1
 15120                           
 15121                           ;ECAN.c: 1182: ptr++;
 15122  003314  4A08               	infsnz	__RegsToCANID@ptr,f,c
 15123  003316  2A09               	incf	__RegsToCANID@ptr+1,f,c
 15124                           
 15125                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 15126  003318  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15127  00331C  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15128  003320  500E               	movf	__RegsToCANID@Value,w,c
 15129  003322  6EE1               	movwf	fsr1l,c
 15130  003324  6AE2               	clrf	fsr1h,c
 15131  003326  CFDF FFE7          	movff	indf2,indf1
 15132  00332A                     l930:
 15133  00332A  0012               	return	
 15134  00332C                     __end_of__RegsToCANID:
 15135                           	opt stack 0
 15136                           tblptru	equ	0xFF8
 15137                           tblptrh	equ	0xFF7
 15138                           tblptrl	equ	0xFF6
 15139                           tablat	equ	0xFF5
 15140                           prodh	equ	0xFF4
 15141                           prodl	equ	0xFF3
 15142                           postinc0	equ	0xFEE
 15143                           wreg	equ	0xFE8
 15144                           indf1	equ	0xFE7
 15145                           fsr1h	equ	0xFE2
 15146                           fsr1l	equ	0xFE1
 15147                           indf2	equ	0xFDF
 15148                           postinc2	equ	0xFDE
 15149                           postdec2	equ	0xFDD
 15150                           plusw2	equ	0xFDB
 15151                           fsr2h	equ	0xFDA
 15152                           fsr2l	equ	0xFD9
 15153                           status	equ	0xFD8
 15154                           
 15155 ;; *************** function __ECANPointBuffer *****************
 15156 ;; Defined at:
 15157 ;;		line 1207 in file "../ECAN.c"
 15158 ;; Parameters:    Size  Location     Type
 15159 ;;  b               1    wreg     unsigned char 
 15160 ;; Auto vars:     Size  Location     Type
 15161 ;;  b               1   10[COMRAM] unsigned char 
 15162 ;;  pt              2   11[COMRAM] PTR unsigned char 
 15163 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 15164 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 15165 ;; Return value:  Size  Location     Type
 15166 ;;                  2    7[COMRAM] PTR unsigned char 
 15167 ;; Registers used:
 15168 ;;		wreg, status,2, status,0
 15169 ;; Tracked objects:
 15170 ;;		On entry : F/0
 15171 ;;		On exit  : 0/0
 15172 ;;		Unchanged: 0/0
 15173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15174 ;;      Params:         3       0       0       0       0       0       0
 15175 ;;      Locals:         3       0       0       0       0       0       0
 15176 ;;      Temps:          0       0       0       0       0       0       0
 15177 ;;      Totals:         6       0       0       0       0       0       0
 15178 ;;Total ram usage:        6 bytes
 15179 ;; Hardware stack levels used:    1
 15180 ;; Hardware stack levels required when called:    2
 15181 ;; This function calls:
 15182 ;;		Nothing
 15183 ;; This function is called by:
 15184 ;;		_ECANReceiveMessage
 15185 ;; This function uses a non-reentrant model
 15186 ;;
 15187                           
 15188                           	psect	text61
 15189  003EBE                     __ptext61:
 15190                           	opt stack 0
 15191  003EBE                     __ECANPointBuffer:
 15192                           	opt stack 24
 15193                           
 15194                           ;incstack = 0
 15195                           ;incstack = 0
 15196                           ;__ECANPointBuffer@b stored from wreg
 15197  003EBE  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 15198                           
 15199                           ; BSR set to: 0
 15200                           ;ECAN.c: 1208: BYTE* pt;
 15201                           ;ECAN.c: 1210: switch(b)
 15202  003EC2  D024               	goto	l7247
 15203  003EC4                     l7229:
 15204                           
 15205                           ; BSR set to: 0
 15206                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 15207  003EC4  0E0F               	movlw	15	;volatile
 15208  003EC6  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15209  003EC8  0E60               	movlw	96	;volatile
 15210  003ECA  D01E               	goto	L58
 15211  003ECC                     l7231:
 15212                           
 15213                           ; BSR set to: 0
 15214                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 15215  003ECC  010F               	movlb	15	; () banked
 15216  003ECE  0E0F               	movlw	15	;volatile
 15217  003ED0  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15218  003ED2  0E50               	movlw	80	;volatile
 15219  003ED4  D019               	goto	L58
 15220  003ED6                     l7233:
 15221                           
 15222                           ; BSR set to: 0
 15223                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 15224  003ED6  010E               	movlb	14	; () banked
 15225  003ED8  0E0E               	movlw	14	;volatile
 15226  003EDA  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15227  003EDC  0E20               	movlw	32	;volatile
 15228  003EDE  D014               	goto	L58
 15229  003EE0                     l7235:
 15230                           
 15231                           ; BSR set to: 0
 15232                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 15233  003EE0  010E               	movlb	14	; () banked
 15234  003EE2  0E0E               	movlw	14	;volatile
 15235  003EE4  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15236  003EE6  0E30               	movlw	48	;volatile
 15237  003EE8  D00F               	goto	L58
 15238  003EEA                     l7237:
 15239                           
 15240                           ; BSR set to: 0
 15241                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 15242  003EEA  010E               	movlb	14	; () banked
 15243  003EEC  0E0E               	movlw	14	;volatile
 15244  003EEE  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15245  003EF0  0E40               	movlw	64	;volatile
 15246  003EF2  D00A               	goto	L58
 15247  003EF4                     l7239:
 15248                           
 15249                           ; BSR set to: 0
 15250                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 15251  003EF4  010E               	movlb	14	; () banked
 15252  003EF6  0E0E               	movlw	14	;volatile
 15253  003EF8  D7EB               	goto	L59
 15254  003EFA                     l7241:
 15255                           
 15256                           ; BSR set to: 0
 15257                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 15258  003EFA  010E               	movlb	14	; () banked
 15259  003EFC  0E0E               	movlw	14	;volatile
 15260  003EFE  D7E3               	goto	L60
 15261  003F00                     l7243:
 15262                           
 15263                           ; BSR set to: 0
 15264                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 15265  003F00  010E               	movlb	14	; () banked
 15266  003F02  0E0E               	movlw	14	;volatile
 15267  003F04  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15268  003F06  0E70               	movlw	112	;volatile
 15269  003F08                     L58:
 15270  003F08  6E0C               	movwf	__ECANPointBuffer@pt,c
 15271                           
 15272                           ;ECAN.c: 1235: break;
 15273  003F0A  D00F               	goto	l935
 15274  003F0C                     l7247:
 15275                           
 15276                           ; BSR set to: 0
 15277  003F0C  500B               	movf	__ECANPointBuffer@b,w,c
 15278                           
 15279                           ; Switch size 1, requested type "speed"
 15280                           ; Number of cases is 7, Range of values is 0 to 6
 15281                           ; switch strategies available:
 15282                           ; Name         Instructions Cycles
 15283                           ; simple_byte           22    12 (average)
 15284                           ;	Chosen strategy is simple_byte
 15285  003F0E  E0DA               	bz	l7229
 15286  003F10  0A01               	xorlw	1	; case 1
 15287  003F12  E0DC               	bz	l7231
 15288  003F14  0A03               	xorlw	3	; case 2
 15289  003F16  E0DF               	bz	l7233
 15290  003F18  0A01               	xorlw	1	; case 3
 15291  003F1A  E0E2               	bz	l7235
 15292  003F1C  0A07               	xorlw	7	; case 4
 15293  003F1E  E0E5               	bz	l7237
 15294  003F20  0A01               	xorlw	1	; case 5
 15295  003F22  E0E8               	bz	l7239
 15296  003F24  0A03               	xorlw	3	; case 6
 15297  003F26  E0E9               	bz	l7241
 15298  003F28  D7EB               	goto	l7243
 15299  003F2A                     l935:
 15300                           
 15301                           ;ECAN.c: 1237: return (pt);
 15302  003F2A  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 15303  003F2E  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 15304  003F32  0012               	return	
 15305  003F34                     __end_of__ECANPointBuffer:
 15306                           	opt stack 0
 15307                           tblptru	equ	0xFF8
 15308                           tblptrh	equ	0xFF7
 15309                           tblptrl	equ	0xFF6
 15310                           tablat	equ	0xFF5
 15311                           prodh	equ	0xFF4
 15312                           prodl	equ	0xFF3
 15313                           postinc0	equ	0xFEE
 15314                           wreg	equ	0xFE8
 15315                           indf1	equ	0xFE7
 15316                           fsr1h	equ	0xFE2
 15317                           fsr1l	equ	0xFE1
 15318                           indf2	equ	0xFDF
 15319                           postinc2	equ	0xFDE
 15320                           postdec2	equ	0xFDD
 15321                           plusw2	equ	0xFDB
 15322                           fsr2h	equ	0xFDA
 15323                           fsr2l	equ	0xFD9
 15324                           status	equ	0xFD8
 15325                           
 15326 ;; *************** function _vscp_check_pstorage *****************
 15327 ;; Defined at:
 15328 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 15329 ;; Parameters:    Size  Location     Type
 15330 ;;		None
 15331 ;; Auto vars:     Size  Location     Type
 15332 ;;		None
 15333 ;; Return value:  Size  Location     Type
 15334 ;;                  1    wreg      unsigned char 
 15335 ;; Registers used:
 15336 ;;		wreg, status,2, status,0, cstack
 15337 ;; Tracked objects:
 15338 ;;		On entry : 0/0
 15339 ;;		On exit  : 0/0
 15340 ;;		Unchanged: 0/0
 15341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15342 ;;      Params:         0       0       0       0       0       0       0
 15343 ;;      Locals:         0       0       0       0       0       0       0
 15344 ;;      Temps:          0       0       0       0       0       0       0
 15345 ;;      Totals:         0       0       0       0       0       0       0
 15346 ;;Total ram usage:        0 bytes
 15347 ;; Hardware stack levels used:    1
 15348 ;; Hardware stack levels required when called:    4
 15349 ;; This function calls:
 15350 ;;		_vscp_writeNicknamePermanent
 15351 ;;		_vscp_getSegmentCRC
 15352 ;;		_vscp_setSegmentCRC
 15353 ;;		_vscp_setControlByte
 15354 ;; This function is called by:
 15355 ;;		_main
 15356 ;; This function uses a non-reentrant model
 15357 ;;
 15358                           
 15359                           	psect	text62
 15360  0042C0                     __ptext62:
 15361                           	opt stack 0
 15362  0042C0                     _vscp_check_pstorage:
 15363                           	opt stack 26
 15364                           
 15365                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 15366                           
 15367                           ;incstack = 0
 15368                           ;incstack = 0
 15369  0042C0  EC76  F022         	call	_vscp_getSegmentCRC	;wreg free
 15370  0042C4  0BC0               	andlw	192
 15371  0042C6  0A40               	xorlw	64
 15372  0042C8  E102               	bnz	l7725
 15373                           
 15374                           ;vscp_firmware.c: 172: return !0;
 15375  0042CA  0E01               	movlw	1
 15376  0042CC  D00A               	goto	l1055
 15377  0042CE                     l7725:
 15378                           
 15379                           ;vscp_firmware.c: 173: }
 15380                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 15381  0042CE  0EFF               	movlw	255
 15382  0042D0  EC19  F022         	call	_vscp_writeNicknamePermanent
 15383                           
 15384                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 15385  0042D4  0E00               	movlw	0
 15386  0042D6  EC0E  F022         	call	_vscp_setSegmentCRC
 15387                           
 15388                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 15389  0042DA  0EA0               	movlw	160
 15390  0042DC  EC03  F022         	call	_vscp_setControlByte
 15391                           
 15392                           ;vscp_firmware.c: 185: return 0;
 15393  0042E0  0E00               	movlw	0
 15394  0042E2                     l1055:
 15395  0042E2  0012               	return	
 15396  0042E4                     __end_of_vscp_check_pstorage:
 15397                           	opt stack 0
 15398                           tblptru	equ	0xFF8
 15399                           tblptrh	equ	0xFF7
 15400                           tblptrl	equ	0xFF6
 15401                           tablat	equ	0xFF5
 15402                           prodh	equ	0xFF4
 15403                           prodl	equ	0xFF3
 15404                           postinc0	equ	0xFEE
 15405                           wreg	equ	0xFE8
 15406                           indf1	equ	0xFE7
 15407                           fsr1h	equ	0xFE2
 15408                           fsr1l	equ	0xFE1
 15409                           indf2	equ	0xFDF
 15410                           postinc2	equ	0xFDE
 15411                           postdec2	equ	0xFDD
 15412                           plusw2	equ	0xFDB
 15413                           fsr2h	equ	0xFDA
 15414                           fsr2l	equ	0xFD9
 15415                           status	equ	0xFD8
 15416                           
 15417 ;; *************** function _vscp_setControlByte *****************
 15418 ;; Defined at:
 15419 ;;		line 2455 in file "../main.c"
 15420 ;; Parameters:    Size  Location     Type
 15421 ;;  ctrl            1    wreg     unsigned char 
 15422 ;; Auto vars:     Size  Location     Type
 15423 ;;  ctrl            1   11[COMRAM] unsigned char 
 15424 ;; Return value:  Size  Location     Type
 15425 ;;		None               void
 15426 ;; Registers used:
 15427 ;;		wreg, status,2, cstack
 15428 ;; Tracked objects:
 15429 ;;		On entry : 0/0
 15430 ;;		On exit  : 0/0
 15431 ;;		Unchanged: 0/0
 15432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15433 ;;      Params:         0       0       0       0       0       0       0
 15434 ;;      Locals:         1       0       0       0       0       0       0
 15435 ;;      Temps:          0       0       0       0       0       0       0
 15436 ;;      Totals:         1       0       0       0       0       0       0
 15437 ;;Total ram usage:        1 bytes
 15438 ;; Hardware stack levels used:    1
 15439 ;; Hardware stack levels required when called:    3
 15440 ;; This function calls:
 15441 ;;		_Busy_eep
 15442 ;;		_Write_b_eep
 15443 ;; This function is called by:
 15444 ;;		_vscp_check_pstorage
 15445 ;; This function uses a non-reentrant model
 15446 ;;
 15447                           
 15448                           	psect	text63
 15449  004406                     __ptext63:
 15450                           	opt stack 0
 15451  004406                     _vscp_setControlByte:
 15452                           	opt stack 26
 15453                           
 15454                           ;incstack = 0
 15455                           ;incstack = 0
 15456                           ;vscp_setControlByte@ctrl stored from wreg
 15457  004406  CFE8 F00C          	movff	wreg,vscp_setControlByte@ctrl
 15458                           
 15459                           ;main.c: 2456: (Busy_eep(), Write_b_eep(0x03,ctrl));
 15460  00440A  EC7F  F022         	call	_Busy_eep	;wreg free
 15461  00440E  6A09               	clrf	?_Write_b_eep+1,c
 15462  004410  0E03               	movlw	3
 15463  004412  6E08               	movwf	?_Write_b_eep,c
 15464  004414  C00C  F00A         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 15465  004418  EF7C  F020         	goto	_Write_b_eep	;wreg free
 15466  00441C                     __end_of_vscp_setControlByte:
 15467                           	opt stack 0
 15468                           tblptru	equ	0xFF8
 15469                           tblptrh	equ	0xFF7
 15470                           tblptrl	equ	0xFF6
 15471                           tablat	equ	0xFF5
 15472                           prodh	equ	0xFF4
 15473                           prodl	equ	0xFF3
 15474                           postinc0	equ	0xFEE
 15475                           wreg	equ	0xFE8
 15476                           indf1	equ	0xFE7
 15477                           fsr1h	equ	0xFE2
 15478                           fsr1l	equ	0xFE1
 15479                           indf2	equ	0xFDF
 15480                           postinc2	equ	0xFDE
 15481                           postdec2	equ	0xFDD
 15482                           plusw2	equ	0xFDB
 15483                           fsr2h	equ	0xFDA
 15484                           fsr2l	equ	0xFD9
 15485                           status	equ	0xFD8
 15486                           
 15487 ;; *************** function _vscp_setSegmentCRC *****************
 15488 ;; Defined at:
 15489 ;;		line 2446 in file "../main.c"
 15490 ;; Parameters:    Size  Location     Type
 15491 ;;  crc             1    wreg     unsigned char 
 15492 ;; Auto vars:     Size  Location     Type
 15493 ;;  crc             1   11[COMRAM] unsigned char 
 15494 ;; Return value:  Size  Location     Type
 15495 ;;		None               void
 15496 ;; Registers used:
 15497 ;;		wreg, status,2, cstack
 15498 ;; Tracked objects:
 15499 ;;		On entry : 0/0
 15500 ;;		On exit  : 0/0
 15501 ;;		Unchanged: 0/0
 15502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15503 ;;      Params:         0       0       0       0       0       0       0
 15504 ;;      Locals:         1       0       0       0       0       0       0
 15505 ;;      Temps:          0       0       0       0       0       0       0
 15506 ;;      Totals:         1       0       0       0       0       0       0
 15507 ;;Total ram usage:        1 bytes
 15508 ;; Hardware stack levels used:    1
 15509 ;; Hardware stack levels required when called:    3
 15510 ;; This function calls:
 15511 ;;		_Busy_eep
 15512 ;;		_Write_b_eep
 15513 ;; This function is called by:
 15514 ;;		_vscp_check_pstorage
 15515 ;;		_vscp_handleProbeState
 15516 ;;		_vscp_handleHeartbeat
 15517 ;;		_vscp_handleSetNickname
 15518 ;; This function uses a non-reentrant model
 15519 ;;
 15520                           
 15521                           	psect	text64
 15522  00441C                     __ptext64:
 15523                           	opt stack 0
 15524  00441C                     _vscp_setSegmentCRC:
 15525                           	opt stack 25
 15526                           
 15527                           ;incstack = 0
 15528                           ;incstack = 0
 15529                           ;vscp_setSegmentCRC@crc stored from wreg
 15530  00441C  CFE8 F00C          	movff	wreg,vscp_setSegmentCRC@crc
 15531                           
 15532                           ;main.c: 2447: (Busy_eep(), Write_b_eep(0x02,crc));
 15533  004420  EC7F  F022         	call	_Busy_eep	;wreg free
 15534  004424  6A09               	clrf	?_Write_b_eep+1,c
 15535  004426  0E02               	movlw	2
 15536  004428  6E08               	movwf	?_Write_b_eep,c
 15537  00442A  C00C  F00A         	movff	vscp_setSegmentCRC@crc,?_Write_b_eep+2
 15538  00442E  EF7C  F020         	goto	_Write_b_eep	;wreg free
 15539  004432                     __end_of_vscp_setSegmentCRC:
 15540                           	opt stack 0
 15541                           tblptru	equ	0xFF8
 15542                           tblptrh	equ	0xFF7
 15543                           tblptrl	equ	0xFF6
 15544                           tablat	equ	0xFF5
 15545                           prodh	equ	0xFF4
 15546                           prodl	equ	0xFF3
 15547                           postinc0	equ	0xFEE
 15548                           wreg	equ	0xFE8
 15549                           indf1	equ	0xFE7
 15550                           fsr1h	equ	0xFE2
 15551                           fsr1l	equ	0xFE1
 15552                           indf2	equ	0xFDF
 15553                           postinc2	equ	0xFDE
 15554                           postdec2	equ	0xFDD
 15555                           plusw2	equ	0xFDB
 15556                           fsr2h	equ	0xFDA
 15557                           fsr2l	equ	0xFD9
 15558                           status	equ	0xFD8
 15559                           
 15560 ;; *************** function _vscp_getSegmentCRC *****************
 15561 ;; Defined at:
 15562 ;;		line 2437 in file "../main.c"
 15563 ;; Parameters:    Size  Location     Type
 15564 ;;		None
 15565 ;; Auto vars:     Size  Location     Type
 15566 ;;		None
 15567 ;; Return value:  Size  Location     Type
 15568 ;;                  1    wreg      unsigned char 
 15569 ;; Registers used:
 15570 ;;		wreg, status,2, cstack
 15571 ;; Tracked objects:
 15572 ;;		On entry : 0/0
 15573 ;;		On exit  : 0/0
 15574 ;;		Unchanged: 0/0
 15575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15576 ;;      Params:         0       0       0       0       0       0       0
 15577 ;;      Locals:         0       0       0       0       0       0       0
 15578 ;;      Temps:          0       0       0       0       0       0       0
 15579 ;;      Totals:         0       0       0       0       0       0       0
 15580 ;;Total ram usage:        0 bytes
 15581 ;; Hardware stack levels used:    1
 15582 ;; Hardware stack levels required when called:    3
 15583 ;; This function calls:
 15584 ;;		_Read_b_eep
 15585 ;; This function is called by:
 15586 ;;		_vscp_check_pstorage
 15587 ;;		_vscp_handleHeartbeat
 15588 ;; This function uses a non-reentrant model
 15589 ;;
 15590                           
 15591                           	psect	text65
 15592  0044EC                     __ptext65:
 15593                           	opt stack 0
 15594  0044EC                     _vscp_getSegmentCRC:
 15595                           	opt stack 25
 15596                           
 15597                           ;main.c: 2438: return Read_b_eep(0x02);
 15598                           
 15599                           ;incstack = 0
 15600                           ;incstack = 0
 15601  0044EC  6A09               	clrf	?_Read_b_eep+1,c
 15602  0044EE  0E02               	movlw	2
 15603  0044F0  6E08               	movwf	?_Read_b_eep,c
 15604  0044F2  EF4B  F022         	goto	_Read_b_eep	;wreg free
 15605  0044F6                     __end_of_vscp_getSegmentCRC:
 15606                           	opt stack 0
 15607                           tblptru	equ	0xFF8
 15608                           tblptrh	equ	0xFF7
 15609                           tblptrl	equ	0xFF6
 15610                           tablat	equ	0xFF5
 15611                           prodh	equ	0xFF4
 15612                           prodl	equ	0xFF3
 15613                           postinc0	equ	0xFEE
 15614                           wreg	equ	0xFE8
 15615                           indf1	equ	0xFE7
 15616                           fsr1h	equ	0xFE2
 15617                           fsr1l	equ	0xFE1
 15618                           indf2	equ	0xFDF
 15619                           postinc2	equ	0xFDE
 15620                           postdec2	equ	0xFDD
 15621                           plusw2	equ	0xFDB
 15622                           fsr2h	equ	0xFDA
 15623                           fsr2l	equ	0xFD9
 15624                           status	equ	0xFD8
 15625                           
 15626 ;; *************** function _vscp_writeNicknamePermanent *****************
 15627 ;; Defined at:
 15628 ;;		line 861 in file "../main.c"
 15629 ;; Parameters:    Size  Location     Type
 15630 ;;  nickname        1    wreg     unsigned char 
 15631 ;; Auto vars:     Size  Location     Type
 15632 ;;  nickname        1   11[COMRAM] unsigned char 
 15633 ;; Return value:  Size  Location     Type
 15634 ;;		None               void
 15635 ;; Registers used:
 15636 ;;		wreg, status,2, cstack
 15637 ;; Tracked objects:
 15638 ;;		On entry : 0/0
 15639 ;;		On exit  : 0/0
 15640 ;;		Unchanged: 0/0
 15641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15642 ;;      Params:         0       0       0       0       0       0       0
 15643 ;;      Locals:         1       0       0       0       0       0       0
 15644 ;;      Temps:          0       0       0       0       0       0       0
 15645 ;;      Totals:         1       0       0       0       0       0       0
 15646 ;;Total ram usage:        1 bytes
 15647 ;; Hardware stack levels used:    1
 15648 ;; Hardware stack levels required when called:    3
 15649 ;; This function calls:
 15650 ;;		_Busy_eep
 15651 ;;		_Write_b_eep
 15652 ;; This function is called by:
 15653 ;;		_vscp_check_pstorage
 15654 ;;		_vscp_handleProbeState
 15655 ;;		_vscp_handleHeartbeat
 15656 ;;		_vscp_handleSetNickname
 15657 ;;		_vscp_handleDropNickname
 15658 ;; This function uses a non-reentrant model
 15659 ;;
 15660                           
 15661                           	psect	text66
 15662  004432                     __ptext66:
 15663                           	opt stack 0
 15664  004432                     _vscp_writeNicknamePermanent:
 15665                           	opt stack 25
 15666                           
 15667                           ;incstack = 0
 15668                           ;incstack = 0
 15669                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 15670  004432  CFE8 F00C          	movff	wreg,vscp_writeNicknamePermanent@nickname
 15671                           
 15672                           ;main.c: 862: (Busy_eep(), Write_b_eep(0x01,nickname));
 15673  004436  EC7F  F022         	call	_Busy_eep	;wreg free
 15674  00443A  6A09               	clrf	?_Write_b_eep+1,c
 15675  00443C  0E01               	movlw	1
 15676  00443E  6E08               	movwf	?_Write_b_eep,c
 15677  004440  C00C  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 15678  004444  EF7C  F020         	goto	_Write_b_eep	;wreg free
 15679  004448                     __end_of_vscp_writeNicknamePermanent:
 15680                           	opt stack 0
 15681                           tblptru	equ	0xFF8
 15682                           tblptrh	equ	0xFF7
 15683                           tblptrl	equ	0xFF6
 15684                           tablat	equ	0xFF5
 15685                           prodh	equ	0xFF4
 15686                           prodl	equ	0xFF3
 15687                           postinc0	equ	0xFEE
 15688                           wreg	equ	0xFE8
 15689                           indf1	equ	0xFE7
 15690                           fsr1h	equ	0xFE2
 15691                           fsr1l	equ	0xFE1
 15692                           indf2	equ	0xFDF
 15693                           postinc2	equ	0xFDE
 15694                           postdec2	equ	0xFDD
 15695                           plusw2	equ	0xFDB
 15696                           fsr2h	equ	0xFDA
 15697                           fsr2l	equ	0xFD9
 15698                           status	equ	0xFD8
 15699                           
 15700 ;; *************** function _Write_b_eep *****************
 15701 ;; Defined at:
 15702 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 15703 ;; Parameters:    Size  Location     Type
 15704 ;;  badd            2    7[COMRAM] unsigned int 
 15705 ;;  bdat            1    9[COMRAM] unsigned char 
 15706 ;; Auto vars:     Size  Location     Type
 15707 ;;  GIE_BIT_VAL     1   10[COMRAM] unsigned char 
 15708 ;; Return value:  Size  Location     Type
 15709 ;;		None               void
 15710 ;; Registers used:
 15711 ;;		wreg, status,2
 15712 ;; Tracked objects:
 15713 ;;		On entry : 0/0
 15714 ;;		On exit  : 0/0
 15715 ;;		Unchanged: 0/0
 15716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15717 ;;      Params:         3       0       0       0       0       0       0
 15718 ;;      Locals:         1       0       0       0       0       0       0
 15719 ;;      Temps:          0       0       0       0       0       0       0
 15720 ;;      Totals:         4       0       0       0       0       0       0
 15721 ;;Total ram usage:        4 bytes
 15722 ;; Hardware stack levels used:    1
 15723 ;; Hardware stack levels required when called:    2
 15724 ;; This function calls:
 15725 ;;		Nothing
 15726 ;; This function is called by:
 15727 ;;		_main
 15728 ;;		_init_app_eeprom
 15729 ;;		_vscp_setGUID
 15730 ;;		_vscp_setManufacturerId
 15731 ;;		_vscp_writeNicknamePermanent
 15732 ;;		_vscp_writeAppReg
 15733 ;;		_doActionDisable
 15734 ;;		_vscp_setUserID
 15735 ;;		_vscp_setSegmentCRC
 15736 ;;		_vscp_setControlByte
 15737 ;;		_vscp_goBootloaderMode
 15738 ;; This function uses a non-reentrant model
 15739 ;;
 15740                           
 15741                           	psect	text67
 15742  0040F8                     __ptext67:
 15743                           	opt stack 0
 15744  0040F8                     _Write_b_eep:
 15745                           	opt stack 26
 15746                           
 15747                           ;incstack = 0
 15748                           ;incstack = 0
 15749  0040F8  C008  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 15750  0040FC  C00A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 15751  004100  9EA6               	bcf	4006,7,c	;volatile
 15752  004102  9CA6               	bcf	4006,6,c	;volatile
 15753  004104  84A6               	bsf	4006,2,c	;volatile
 15754  004106  0E00               	movlw	0
 15755  004108  BEF2               	btfsc	intcon,7,c	;volatile
 15756  00410A  0E01               	movlw	1
 15757  00410C  6E0B               	movwf	Write_b_eep@GIE_BIT_VAL,c
 15758  00410E  9EF2               	bcf	intcon,7,c	;volatile
 15759  004110  0E55               	movlw	85
 15760  004112  6EA7               	movwf	4007,c	;volatile
 15761  004114  0EAA               	movlw	170
 15762  004116  6EA7               	movwf	4007,c	;volatile
 15763  004118  82A6               	bsf	4006,1,c	;volatile
 15764  00411A                     l1330:
 15765  00411A  B2A6               	btfsc	4006,1,c	;volatile
 15766  00411C  D7FE               	goto	l1330
 15767  00411E  B00B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 15768  004120  D002               	bra	u4435
 15769  004122  9EF2               	bcf	intcon,7,c	;volatile
 15770  004124  D001               	bra	u4436
 15771  004126                     u4435:
 15772  004126  8EF2               	bsf	intcon,7,c	;volatile
 15773  004128                     u4436:
 15774  004128  94A6               	bcf	4006,2,c	;volatile
 15775  00412A  0012               	return	
 15776  00412C                     __end_of_Write_b_eep:
 15777                           	opt stack 0
 15778                           tblptru	equ	0xFF8
 15779                           tblptrh	equ	0xFF7
 15780                           tblptrl	equ	0xFF6
 15781                           tablat	equ	0xFF5
 15782                           prodh	equ	0xFF4
 15783                           prodl	equ	0xFF3
 15784                           intcon	equ	0xFF2
 15785                           postinc0	equ	0xFEE
 15786                           wreg	equ	0xFE8
 15787                           indf1	equ	0xFE7
 15788                           fsr1h	equ	0xFE2
 15789                           fsr1l	equ	0xFE1
 15790                           indf2	equ	0xFDF
 15791                           postinc2	equ	0xFDE
 15792                           postdec2	equ	0xFDD
 15793                           plusw2	equ	0xFDB
 15794                           fsr2h	equ	0xFDA
 15795                           fsr2l	equ	0xFD9
 15796                           status	equ	0xFD8
 15797                           
 15798 ;; *************** function _Busy_eep *****************
 15799 ;; Defined at:
 15800 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 15801 ;; Parameters:    Size  Location     Type
 15802 ;;		None
 15803 ;; Auto vars:     Size  Location     Type
 15804 ;;		None
 15805 ;; Return value:  Size  Location     Type
 15806 ;;		None               void
 15807 ;; Registers used:
 15808 ;;		None
 15809 ;; Tracked objects:
 15810 ;;		On entry : 0/0
 15811 ;;		On exit  : 0/0
 15812 ;;		Unchanged: 0/0
 15813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15814 ;;      Params:         0       0       0       0       0       0       0
 15815 ;;      Locals:         0       0       0       0       0       0       0
 15816 ;;      Temps:          0       0       0       0       0       0       0
 15817 ;;      Totals:         0       0       0       0       0       0       0
 15818 ;;Total ram usage:        0 bytes
 15819 ;; Hardware stack levels used:    1
 15820 ;; Hardware stack levels required when called:    2
 15821 ;; This function calls:
 15822 ;;		Nothing
 15823 ;; This function is called by:
 15824 ;;		_main
 15825 ;;		_init_app_eeprom
 15826 ;;		_vscp_setGUID
 15827 ;;		_vscp_setManufacturerId
 15828 ;;		_vscp_writeNicknamePermanent
 15829 ;;		_vscp_writeAppReg
 15830 ;;		_doActionDisable
 15831 ;;		_vscp_setUserID
 15832 ;;		_vscp_setSegmentCRC
 15833 ;;		_vscp_setControlByte
 15834 ;;		_vscp_goBootloaderMode
 15835 ;; This function uses a non-reentrant model
 15836 ;;
 15837                           
 15838                           	psect	text68
 15839  0044FE                     __ptext68:
 15840                           	opt stack 0
 15841  0044FE                     _Busy_eep:
 15842                           	opt stack 26
 15843  0044FE                     l1305:
 15844  0044FE  A2A6               	btfss	4006,1,c	;volatile
 15845  004500  0012               	return	
 15846  004502  D7FD               	goto	l1305
 15847  004504                     __end_of_Busy_eep:
 15848                           	opt stack 0
 15849                           tblptru	equ	0xFF8
 15850                           tblptrh	equ	0xFF7
 15851                           tblptrl	equ	0xFF6
 15852                           tablat	equ	0xFF5
 15853                           prodh	equ	0xFF4
 15854                           prodl	equ	0xFF3
 15855                           intcon	equ	0xFF2
 15856                           postinc0	equ	0xFEE
 15857                           wreg	equ	0xFE8
 15858                           indf1	equ	0xFE7
 15859                           fsr1h	equ	0xFE2
 15860                           fsr1l	equ	0xFE1
 15861                           indf2	equ	0xFDF
 15862                           postinc2	equ	0xFDE
 15863                           postdec2	equ	0xFDD
 15864                           plusw2	equ	0xFDB
 15865                           fsr2h	equ	0xFDA
 15866                           fsr2l	equ	0xFD9
 15867                           status	equ	0xFD8
 15868                           
 15869 ;; *************** function _init *****************
 15870 ;; Defined at:
 15871 ;;		line 321 in file "../main.c"
 15872 ;; Parameters:    Size  Location     Type
 15873 ;;		None
 15874 ;; Auto vars:     Size  Location     Type
 15875 ;;		None
 15876 ;; Return value:  Size  Location     Type
 15877 ;;		None               void
 15878 ;; Registers used:
 15879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15880 ;; Tracked objects:
 15881 ;;		On entry : 0/0
 15882 ;;		On exit  : 0/0
 15883 ;;		Unchanged: 0/0
 15884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15885 ;;      Params:         0       0       0       0       0       0       0
 15886 ;;      Locals:         0       0       0       0       0       0       0
 15887 ;;      Temps:          0       0       0       0       0       0       0
 15888 ;;      Totals:         0       0       0       0       0       0       0
 15889 ;;Total ram usage:        0 bytes
 15890 ;; Hardware stack levels used:    1
 15891 ;; Hardware stack levels required when called:    4
 15892 ;; This function calls:
 15893 ;;		_WriteTimer0
 15894 ;;		_init_app_ram
 15895 ;;		_OpenTimer0
 15896 ;;		_ECANInitialize
 15897 ;; This function is called by:
 15898 ;;		_main
 15899 ;; This function uses a non-reentrant model
 15900 ;;
 15901                           
 15902                           	psect	text69
 15903  0040BA                     __ptext69:
 15904                           	opt stack 0
 15905  0040BA                     _init:
 15906                           	opt stack 26
 15907                           
 15908                           ;main.c: 326: init_app_ram();
 15909                           
 15910                           ;incstack = 0
 15911                           ;incstack = 0
 15912  0040BA  EC85  F01B         	call	_init_app_ram	;wreg free
 15913                           
 15914                           ;main.c: 337: TRISA = 0x00;
 15915  0040BE  6A92               	clrf	3986,c	;volatile
 15916                           
 15917                           ;main.c: 338: PORTA = 0x00;
 15918  0040C0  6A80               	clrf	3968,c	;volatile
 15919                           
 15920                           ;main.c: 350: TRISB = 0b00001000;
 15921  0040C2  0E08               	movlw	8
 15922  0040C4  6E93               	movwf	3987,c	;volatile
 15923                           
 15924                           ;main.c: 351: PORTB = 0x00;
 15925  0040C6  6A81               	clrf	3969,c	;volatile
 15926                           
 15927                           ;main.c: 361: TRISC = 0b00000001;
 15928  0040C8  0E01               	movlw	1
 15929  0040CA  6E94               	movwf	3988,c	;volatile
 15930                           
 15931                           ;main.c: 362: PORTC = 0x00;
 15932  0040CC  6A82               	clrf	3970,c	;volatile
 15933                           
 15934                           ;main.c: 388: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 15935  0040CE  0E92               	movlw	146
 15936  0040D0  ECB3  F021         	call	_OpenTimer0
 15937                           
 15938                           ;main.c: 389: WriteTimer0( 0xfb1d );
 15939  0040D4  0EFB               	movlw	251
 15940  0040D6  6E09               	movwf	?_WriteTimer0+1,c
 15941  0040D8  0E1D               	movlw	29
 15942  0040DA  6E08               	movwf	?_WriteTimer0,c
 15943  0040DC  EC42  F022         	call	_WriteTimer0	;wreg free
 15944                           
 15945                           ;main.c: 392: LATBbits.LATB4 = 0;
 15946  0040E0  988A               	bcf	3978,4,c	;volatile
 15947                           
 15948                           ;main.c: 393: LATBbits.LATB1 = 0;
 15949  0040E2  928A               	bcf	3978,1,c	;volatile
 15950                           
 15951                           ;main.c: 394: LATBbits.LATB0 = 0;
 15952  0040E4  908A               	bcf	3978,0,c	;volatile
 15953                           
 15954                           ;main.c: 395: LATCbits.LATC7 = 0;
 15955  0040E6  9E8B               	bcf	3979,7,c	;volatile
 15956                           
 15957                           ;main.c: 396: LATCbits.LATC6 = 0;
 15958  0040E8  9C8B               	bcf	3979,6,c	;volatile
 15959                           
 15960                           ;main.c: 397: LATCbits.LATC5 = 0;
 15961  0040EA  9A8B               	bcf	3979,5,c	;volatile
 15962                           
 15963                           ;main.c: 398: LATCbits.LATC4 = 0;
 15964  0040EC  988B               	bcf	3979,4,c	;volatile
 15965                           
 15966                           ;main.c: 401: ECANInitialize();
 15967  0040EE  ECD8  F01E         	call	_ECANInitialize	;wreg free
 15968                           
 15969                           ;main.c: 422: INTCONbits.PEIE = 1;
 15970  0040F2  8CF2               	bsf	intcon,6,c	;volatile
 15971                           
 15972                           ;main.c: 425: INTCONbits.GIE = 1;
 15973  0040F4  8EF2               	bsf	intcon,7,c	;volatile
 15974  0040F6  0012               	return	
 15975  0040F8                     __end_of_init:
 15976                           	opt stack 0
 15977                           tblptru	equ	0xFF8
 15978                           tblptrh	equ	0xFF7
 15979                           tblptrl	equ	0xFF6
 15980                           tablat	equ	0xFF5
 15981                           prodh	equ	0xFF4
 15982                           prodl	equ	0xFF3
 15983                           intcon	equ	0xFF2
 15984                           postinc0	equ	0xFEE
 15985                           wreg	equ	0xFE8
 15986                           indf1	equ	0xFE7
 15987                           fsr1h	equ	0xFE2
 15988                           fsr1l	equ	0xFE1
 15989                           indf2	equ	0xFDF
 15990                           postinc2	equ	0xFDE
 15991                           postdec2	equ	0xFDD
 15992                           plusw2	equ	0xFDB
 15993                           fsr2h	equ	0xFDA
 15994                           fsr2l	equ	0xFD9
 15995                           status	equ	0xFD8
 15996                           
 15997 ;; *************** function _ECANInitialize *****************
 15998 ;; Defined at:
 15999 ;;		line 168 in file "../ECAN.c"
 16000 ;; Parameters:    Size  Location     Type
 16001 ;;		None
 16002 ;; Auto vars:     Size  Location     Type
 16003 ;;		None
 16004 ;; Return value:  Size  Location     Type
 16005 ;;		None               void
 16006 ;; Registers used:
 16007 ;;		wreg, status,2, status,0, cstack
 16008 ;; Tracked objects:
 16009 ;;		On entry : 0/0
 16010 ;;		On exit  : 0/0
 16011 ;;		Unchanged: 0/0
 16012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16013 ;;      Params:         0       0       0       0       0       0       0
 16014 ;;      Locals:         0       0       0       0       0       0       0
 16015 ;;      Temps:          0       0       0       0       0       0       0
 16016 ;;      Totals:         0       0       0       0       0       0       0
 16017 ;;Total ram usage:        0 bytes
 16018 ;; Hardware stack levels used:    1
 16019 ;; Hardware stack levels required when called:    3
 16020 ;; This function calls:
 16021 ;;		_ECANSetOperationMode
 16022 ;; This function is called by:
 16023 ;;		_init
 16024 ;; This function uses a non-reentrant model
 16025 ;;
 16026                           
 16027                           	psect	text70
 16028  003DB0                     __ptext70:
 16029                           	opt stack 0
 16030  003DB0                     _ECANInitialize:
 16031                           	opt stack 26
 16032                           
 16033                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 16034                           
 16035                           ;incstack = 0
 16036                           ;incstack = 0
 16037  003DB0  0E80               	movlw	128
 16038  003DB2  ECF7  F021         	call	_ECANSetOperationMode
 16039                           
 16040                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 16041  003DB6  0E09               	movlw	9
 16042  003DB8  6E70               	movwf	3952,c	;volatile
 16043                           
 16044                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 16045  003DBA  0EFC               	movlw	252
 16046  003DBC  6E71               	movwf	3953,c	;volatile
 16047                           
 16048                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 16049                           ;ECAN.c: 181: (0 << 6) |
 16050                           ;ECAN.c: 182: (2-1);
 16051  003DBE  0E01               	movlw	1
 16052  003DC0  6E72               	movwf	3954,c	;volatile
 16053                           
 16054                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 16055  003DC2  0E20               	movlw	32
 16056  003DC4  6E73               	movwf	3955,c	;volatile
 16057                           
 16058                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 16059  003DC6  8E77               	bsf	3959,7,c	;volatile
 16060                           
 16061                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 16062  003DC8  9C77               	bcf	3959,6,c	;volatile
 16063                           
 16064                           ;ECAN.c: 205: RXB0CON = 0;
 16065  003DCA  6A60               	clrf	3936,c	;volatile
 16066                           
 16067                           ;ECAN.c: 211: RXB1CON = 0;
 16068  003DCC  010F               	movlb	15	; () banked
 16069  003DCE  6B50               	clrf	80,b	;volatile
 16070                           
 16071                           ; BSR set to: 15
 16072                           ;ECAN.c: 221: B0CON = 0;
 16073  003DD0  010E               	movlb	14	; () banked
 16074  003DD2  6B20               	clrf	32,b	;volatile
 16075                           
 16076                           ; BSR set to: 14
 16077                           ;ECAN.c: 231: B1CON = 0;
 16078  003DD4  6B30               	clrf	48,b	;volatile
 16079                           
 16080                           ; BSR set to: 14
 16081                           ;ECAN.c: 241: B2CON = 0;
 16082  003DD6  6B40               	clrf	64,b	;volatile
 16083                           
 16084                           ; BSR set to: 14
 16085                           ;ECAN.c: 254: B3CON = 0 << 2;
 16086  003DD8  6B50               	clrf	80,b	;volatile
 16087                           
 16088                           ; BSR set to: 14
 16089                           ;ECAN.c: 264: B4CON = 0 << 2;
 16090  003DDA  6B60               	clrf	96,b	;volatile
 16091                           
 16092                           ; BSR set to: 14
 16093                           ;ECAN.c: 274: B5CON = 0 << 2;
 16094  003DDC  6B70               	clrf	112,b	;volatile
 16095                           
 16096                           ; BSR set to: 14
 16097                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 16098  003DDE  0EE0               	movlw	224
 16099  003DE0  010D               	movlb	13	; () banked
 16100  003DE2  6FF8               	movwf	248,b	;volatile
 16101                           
 16102                           ; BSR set to: 13
 16103                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 16104  003DE4  010F               	movlb	15	; () banked
 16105  003DE6  6B00               	clrf	0,b	;volatile
 16106                           
 16107                           ; BSR set to: 15
 16108  003DE8  0E08               	movlw	8
 16109  003DEA  6F01               	movwf	1,b	;volatile
 16110                           
 16111                           ; BSR set to: 15
 16112  003DEC  6B02               	clrf	2,b	;volatile
 16113                           
 16114                           ; BSR set to: 15
 16115  003DEE  6B03               	clrf	3,b	;volatile
 16116                           
 16117                           ; BSR set to: 15
 16118                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 16119  003DF0  6B04               	clrf	4,b	;volatile
 16120                           
 16121                           ; BSR set to: 15
 16122  003DF2  0EE8               	movlw	232
 16123  003DF4  6F05               	movwf	5,b	;volatile
 16124                           
 16125                           ; BSR set to: 15
 16126  003DF6  0E1A               	movlw	26
 16127  003DF8  6F06               	movwf	6,b	;volatile
 16128                           
 16129                           ; BSR set to: 15
 16130  003DFA  6B07               	clrf	7,b	;volatile
 16131                           
 16132                           ; BSR set to: 15
 16133                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 16134  003DFC  0E03               	movlw	3
 16135  003DFE  010D               	movlb	13	; () banked
 16136  003E00  6FD4               	movwf	212,b	;volatile
 16137                           
 16138                           ; BSR set to: 13
 16139                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 16140  003E02  6BD5               	clrf	213,b	;volatile
 16141                           
 16142                           ; BSR set to: 13
 16143                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 16144  003E04  6BE0               	clrf	224,b	;volatile
 16145                           
 16146                           ; BSR set to: 13
 16147                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 16148  003E06  0E11               	movlw	17
 16149  003E08  6FE1               	movwf	225,b	;volatile
 16150                           
 16151                           ; BSR set to: 13
 16152                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 16153  003E0A  6FE2               	movwf	226,b	;volatile
 16154                           
 16155                           ; BSR set to: 13
 16156                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 16157  003E0C  6BE3               	clrf	227,b	;volatile
 16158                           
 16159                           ; BSR set to: 13
 16160                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 16161  003E0E  6BE4               	clrf	228,b	;volatile
 16162                           
 16163                           ; BSR set to: 13
 16164                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 16165  003E10  6BE5               	clrf	229,b	;volatile
 16166                           
 16167                           ; BSR set to: 13
 16168                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 16169  003E12  6BE6               	clrf	230,b	;volatile
 16170                           
 16171                           ; BSR set to: 13
 16172                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 16173  003E14  6BE7               	clrf	231,b	;volatile
 16174                           
 16175                           ; BSR set to: 13
 16176                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 16177  003E16  0E54               	movlw	84
 16178  003E18  6FF0               	movwf	240,b	;volatile
 16179                           
 16180                           ; BSR set to: 13
 16181                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 16182  003E1A  0E05               	movlw	5
 16183  003E1C  6FF1               	movwf	241,b	;volatile
 16184                           
 16185                           ; BSR set to: 13
 16186                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 16187  003E1E  6BF2               	clrf	242,b	;volatile
 16188                           
 16189                           ; BSR set to: 13
 16190                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 16191  003E20  6BF2               	clrf	242,b	;volatile
 16192                           
 16193                           ; BSR set to: 13
 16194                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 16195  003E22  0E0F               	movlw	15
 16196  003E24  010F               	movlb	15	; () banked
 16197  003E26  6F18               	movwf	24,b	;volatile
 16198                           
 16199                           ; BSR set to: 15
 16200  003E28  0EE0               	movlw	224
 16201  003E2A  6F19               	movwf	25,b	;volatile
 16202                           
 16203                           ; BSR set to: 15
 16204  003E2C  6B1A               	clrf	26,b	;volatile
 16205                           
 16206                           ; BSR set to: 15
 16207  003E2E  6B1B               	clrf	27,b	;volatile
 16208                           
 16209                           ; BSR set to: 15
 16210                           ;ECAN.c: 482: RXM0EXIDM = 1;
 16211  003E30  8719               	bsf	25,3,b	;volatile
 16212                           
 16213                           ; BSR set to: 15
 16214                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 16215  003E32  0E0F               	movlw	15
 16216  003E34  6F1C               	movwf	28,b	;volatile
 16217                           
 16218                           ; BSR set to: 15
 16219  003E36  0EE0               	movlw	224
 16220  003E38  6F1D               	movwf	29,b	;volatile
 16221                           
 16222                           ; BSR set to: 15
 16223  003E3A  691E               	setf	30,b	;volatile
 16224                           
 16225                           ; BSR set to: 15
 16226  003E3C  6B1F               	clrf	31,b	;volatile
 16227                           
 16228                           ; BSR set to: 15
 16229                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 16230  003E3E  871D               	bsf	29,3,b	;volatile
 16231                           
 16232                           ; BSR set to: 15
 16233                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 16234  003E40  0E00               	movlw	0
 16235  003E42  EFF7  F021         	goto	_ECANSetOperationMode
 16236  003E46                     __end_of_ECANInitialize:
 16237                           	opt stack 0
 16238                           tblptru	equ	0xFF8
 16239                           tblptrh	equ	0xFF7
 16240                           tblptrl	equ	0xFF6
 16241                           tablat	equ	0xFF5
 16242                           prodh	equ	0xFF4
 16243                           prodl	equ	0xFF3
 16244                           intcon	equ	0xFF2
 16245                           postinc0	equ	0xFEE
 16246                           wreg	equ	0xFE8
 16247                           indf1	equ	0xFE7
 16248                           fsr1h	equ	0xFE2
 16249                           fsr1l	equ	0xFE1
 16250                           indf2	equ	0xFDF
 16251                           postinc2	equ	0xFDE
 16252                           postdec2	equ	0xFDD
 16253                           plusw2	equ	0xFDB
 16254                           fsr2h	equ	0xFDA
 16255                           fsr2l	equ	0xFD9
 16256                           status	equ	0xFD8
 16257                           
 16258 ;; *************** function _ECANSetOperationMode *****************
 16259 ;; Defined at:
 16260 ;;		line 1012 in file "../ECAN.c"
 16261 ;; Parameters:    Size  Location     Type
 16262 ;;  mode            1    wreg     enum E16337
 16263 ;; Auto vars:     Size  Location     Type
 16264 ;;  mode            1    7[COMRAM] enum E16337
 16265 ;; Return value:  Size  Location     Type
 16266 ;;		None               void
 16267 ;; Registers used:
 16268 ;;		wreg, status,2, status,0
 16269 ;; Tracked objects:
 16270 ;;		On entry : 0/0
 16271 ;;		On exit  : 0/0
 16272 ;;		Unchanged: 0/0
 16273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16274 ;;      Params:         0       0       0       0       0       0       0
 16275 ;;      Locals:         1       0       0       0       0       0       0
 16276 ;;      Temps:          0       0       0       0       0       0       0
 16277 ;;      Totals:         1       0       0       0       0       0       0
 16278 ;;Total ram usage:        1 bytes
 16279 ;; Hardware stack levels used:    1
 16280 ;; Hardware stack levels required when called:    2
 16281 ;; This function calls:
 16282 ;;		Nothing
 16283 ;; This function is called by:
 16284 ;;		_calculateSetFilterMask
 16285 ;;		_ECANInitialize
 16286 ;; This function uses a non-reentrant model
 16287 ;;
 16288                           
 16289                           	psect	text71
 16290  0043EE                     __ptext71:
 16291                           	opt stack 0
 16292  0043EE                     _ECANSetOperationMode:
 16293                           	opt stack 23
 16294                           
 16295                           ;incstack = 0
 16296                           ;incstack = 0
 16297                           ;ECANSetOperationMode@mode stored from wreg
 16298  0043EE  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 16299                           
 16300                           ;ECAN.c: 1013: CANCON &= 0x1F;
 16301  0043F2  0E1F               	movlw	31
 16302  0043F4  166F               	andwf	3951,f,c	;volatile
 16303                           
 16304                           ;ECAN.c: 1014: CANCON |= mode;
 16305  0043F6  5008               	movf	ECANSetOperationMode@mode,w,c
 16306  0043F8  126F               	iorwf	3951,f,c	;volatile
 16307  0043FA                     l7199:
 16308  0043FA  506F               	movf	3951,w,c	;volatile
 16309  0043FC  0BE0               	andlw	224
 16310  0043FE  1808               	xorwf	ECANSetOperationMode@mode,w,c
 16311  004400  B4D8               	btfsc	status,2,c
 16312  004402  0012               	return	
 16313  004404  D7FA               	goto	l7199
 16314  004406                     __end_of_ECANSetOperationMode:
 16315                           	opt stack 0
 16316                           tblptru	equ	0xFF8
 16317                           tblptrh	equ	0xFF7
 16318                           tblptrl	equ	0xFF6
 16319                           tablat	equ	0xFF5
 16320                           prodh	equ	0xFF4
 16321                           prodl	equ	0xFF3
 16322                           intcon	equ	0xFF2
 16323                           postinc0	equ	0xFEE
 16324                           wreg	equ	0xFE8
 16325                           indf1	equ	0xFE7
 16326                           fsr1h	equ	0xFE2
 16327                           fsr1l	equ	0xFE1
 16328                           indf2	equ	0xFDF
 16329                           postinc2	equ	0xFDE
 16330                           postdec2	equ	0xFDD
 16331                           plusw2	equ	0xFDB
 16332                           fsr2h	equ	0xFDA
 16333                           fsr2l	equ	0xFD9
 16334                           status	equ	0xFD8
 16335                           
 16336 ;; *************** function _OpenTimer0 *****************
 16337 ;; Defined at:
 16338 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 16339 ;; Parameters:    Size  Location     Type
 16340 ;;  config          1    wreg     unsigned char 
 16341 ;; Auto vars:     Size  Location     Type
 16342 ;;  config          1    7[COMRAM] unsigned char 
 16343 ;; Return value:  Size  Location     Type
 16344 ;;		None               void
 16345 ;; Registers used:
 16346 ;;		wreg, status,2, status,0
 16347 ;; Tracked objects:
 16348 ;;		On entry : 0/0
 16349 ;;		On exit  : 0/0
 16350 ;;		Unchanged: 0/0
 16351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16352 ;;      Params:         0       0       0       0       0       0       0
 16353 ;;      Locals:         1       0       0       0       0       0       0
 16354 ;;      Temps:          0       0       0       0       0       0       0
 16355 ;;      Totals:         1       0       0       0       0       0       0
 16356 ;;Total ram usage:        1 bytes
 16357 ;; Hardware stack levels used:    1
 16358 ;; Hardware stack levels required when called:    2
 16359 ;; This function calls:
 16360 ;;		Nothing
 16361 ;; This function is called by:
 16362 ;;		_init
 16363 ;; This function uses a non-reentrant model
 16364 ;;
 16365                           
 16366                           	psect	text72
 16367  004366                     __ptext72:
 16368                           	opt stack 0
 16369  004366                     _OpenTimer0:
 16370                           	opt stack 27
 16371                           
 16372                           ;incstack = 0
 16373                           ;incstack = 0
 16374                           ;OpenTimer0@config stored from wreg
 16375  004366  CFE8 F008          	movff	wreg,OpenTimer0@config
 16376  00436A  5008               	movf	OpenTimer0@config,w,c
 16377  00436C  0B7F               	andlw	127
 16378  00436E  6ED5               	movwf	4053,c	;volatile
 16379  004370  6AD7               	clrf	4055,c	;volatile
 16380  004372  6AD6               	clrf	4054,c	;volatile
 16381  004374  94F2               	bcf	intcon,2,c	;volatile
 16382  004376  AE08               	btfss	OpenTimer0@config,7,c
 16383  004378  D002               	goto	l1346
 16384  00437A  8AF2               	bsf	intcon,5,c	;volatile
 16385  00437C  D001               	goto	l1347
 16386  00437E                     l1346:
 16387  00437E  9AF2               	bcf	intcon,5,c	;volatile
 16388  004380                     l1347:
 16389  004380  8ED5               	bsf	4053,7,c	;volatile
 16390  004382  0012               	return	
 16391  004384                     __end_of_OpenTimer0:
 16392                           	opt stack 0
 16393                           tblptru	equ	0xFF8
 16394                           tblptrh	equ	0xFF7
 16395                           tblptrl	equ	0xFF6
 16396                           tablat	equ	0xFF5
 16397                           prodh	equ	0xFF4
 16398                           prodl	equ	0xFF3
 16399                           intcon	equ	0xFF2
 16400                           postinc0	equ	0xFEE
 16401                           wreg	equ	0xFE8
 16402                           indf1	equ	0xFE7
 16403                           fsr1h	equ	0xFE2
 16404                           fsr1l	equ	0xFE1
 16405                           indf2	equ	0xFDF
 16406                           postinc2	equ	0xFDE
 16407                           postdec2	equ	0xFDD
 16408                           plusw2	equ	0xFDB
 16409                           fsr2h	equ	0xFDA
 16410                           fsr2l	equ	0xFD9
 16411                           status	equ	0xFD8
 16412                           
 16413 ;; *************** function _init_app_ram *****************
 16414 ;; Defined at:
 16415 ;;		line 435 in file "../main.c"
 16416 ;; Parameters:    Size  Location     Type
 16417 ;;		None
 16418 ;; Auto vars:     Size  Location     Type
 16419 ;;  i               1   11[COMRAM] unsigned char 
 16420 ;; Return value:  Size  Location     Type
 16421 ;;		None               void
 16422 ;; Registers used:
 16423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16424 ;; Tracked objects:
 16425 ;;		On entry : 0/0
 16426 ;;		On exit  : 0/0
 16427 ;;		Unchanged: 0/0
 16428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16429 ;;      Params:         0       0       0       0       0       0       0
 16430 ;;      Locals:         1       0       0       0       0       0       0
 16431 ;;      Temps:          2       0       0       0       0       0       0
 16432 ;;      Totals:         3       0       0       0       0       0       0
 16433 ;;Total ram usage:        3 bytes
 16434 ;; Hardware stack levels used:    1
 16435 ;; Hardware stack levels required when called:    3
 16436 ;; This function calls:
 16437 ;;		_Read_b_eep
 16438 ;; This function is called by:
 16439 ;;		_main
 16440 ;;		_init
 16441 ;;		_vscp_restoreDefaults
 16442 ;; This function uses a non-reentrant model
 16443 ;;
 16444                           
 16445                           	psect	text73
 16446  00370A                     __ptext73:
 16447                           	opt stack 0
 16448  00370A                     _init_app_ram:
 16449                           	opt stack 24
 16450                           
 16451                           ;main.c: 436: uint8_t i;
 16452                           ;main.c: 438: measurement_clock = 0;
 16453                           
 16454                           ;incstack = 0
 16455                           ;incstack = 0
 16456  00370A  0100               	movlb	0	; () banked
 16457  00370C  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
 16458  00370E  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 16459  003710  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 16460  003712  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 16461                           
 16462                           ;main.c: 440: seconds = 0;
 16463  003714  6B8D               	clrf	_seconds& (0+255),b
 16464                           
 16465                           ;main.c: 441: minutes = 0;
 16466  003716  6B8B               	clrf	_minutes& (0+255),b
 16467                           
 16468                           ;main.c: 442: hours = 0;
 16469  003718  6B8A               	clrf	_hours& (0+255),b
 16470                           
 16471                           ;main.c: 444: relay_pulse_flags = 0;
 16472  00371A  6B8C               	clrf	_relay_pulse_flags& (0+255),b
 16473                           
 16474                           ;main.c: 447: for ( i = 0; i < 8; i++ ) {
 16475  00371C  6A0C               	clrf	init_app_ram@i,c
 16476  00371E                     l7915:
 16477                           
 16478                           ; BSR set to: 0
 16479                           ;main.c: 448: relay_pulse_timer[ i ] = 0;
 16480  00371E  500C               	movf	init_app_ram@i,w,c
 16481  003720  0D02               	mullw	2
 16482  003722  50F3               	movf	prodl,w,c
 16483  003724  0F70               	addlw	low _relay_pulse_timer
 16484  003726  6ED9               	movwf	fsr2l,c
 16485  003728  6ADA               	clrf	fsr2h,c
 16486  00372A  6ADE               	clrf	postinc2,c
 16487  00372C  6ADD               	clrf	postdec2,c
 16488                           
 16489                           ;main.c: 449: relay_protection_timer[ i ] = 0;
 16490  00372E  500C               	movf	init_app_ram@i,w,c
 16491  003730  0D02               	mullw	2
 16492  003732  50F3               	movf	prodl,w,c
 16493  003734  0F60               	addlw	low _relay_protection_timer
 16494  003736  6ED9               	movwf	fsr2l,c
 16495  003738  6ADA               	clrf	fsr2h,c
 16496  00373A  6ADE               	clrf	postinc2,c
 16497  00373C  6ADD               	clrf	postdec2,c
 16498                           
 16499                           ; BSR set to: 0
 16500  00373E  2A0C               	incf	init_app_ram@i,f,c
 16501                           
 16502                           ; BSR set to: 0
 16503  003740  0E07               	movlw	7
 16504  003742  640C               	cpfsgt	init_app_ram@i,c
 16505  003744  D7EC               	goto	l7915
 16506                           
 16507                           ; BSR set to: 0
 16508                           ;main.c: 450: }
 16509                           ;main.c: 452: for ( i=0; i<7; i++ ) {
 16510  003746  6A0C               	clrf	init_app_ram@i,c
 16511  003748                     l7925:
 16512                           
 16513                           ;main.c: 455: if ( Read_b_eep(0x43 + 10 + i) &
 16514                           ;main.c: 456: 0x01 ) {
 16515  003748  0E4D               	movlw	77
 16516  00374A  240C               	addwf	init_app_ram@i,w,c
 16517  00374C  6E08               	movwf	?_Read_b_eep,c
 16518  00374E  6A09               	clrf	?_Read_b_eep+1,c
 16519  003750  0E00               	movlw	0
 16520  003752  2209               	addwfc	?_Read_b_eep+1,f,c
 16521  003754  EC4B  F022         	call	_Read_b_eep	;wreg free
 16522  003758  6E0A               	movwf	??_init_app_ram& (0+255),c
 16523  00375A  A00A               	btfss	??_init_app_ram,0,c
 16524  00375C  D02D               	goto	l7931
 16525                           
 16526                           ;main.c: 458: relay_pulse_flags |= (1<<i);
 16527  00375E  C00C  F00A         	movff	init_app_ram@i,??_init_app_ram
 16528  003762  0E01               	movlw	1
 16529  003764  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16530  003766  2A0A               	incf	??_init_app_ram,f,c
 16531  003768  D002               	goto	u8274
 16532  00376A                     u8275:
 16533  00376A  90D8               	bcf	status,0,c
 16534  00376C  360B               	rlcf	??_init_app_ram+1,f,c
 16535  00376E                     u8274:
 16536  00376E  2E0A               	decfsz	??_init_app_ram,f,c
 16537  003770  D7FC               	goto	u8275
 16538  003772  500B               	movf	??_init_app_ram+1,w,c
 16539  003774  0100               	movlb	0	; () banked
 16540  003776  138C               	iorwf	_relay_pulse_flags& (0+255),f,b
 16541                           
 16542                           ; BSR set to: 0
 16543                           ;main.c: 459: relay_pulse_timer[ i ] =
 16544                           ;main.c: 460: Read_b_eep(0x43 + 18 + i) * 256 +
 16545                           ;main.c: 461: Read_b_eep(0x43 + 19 + i);
 16546  003778  0E55               	movlw	85
 16547  00377A  240C               	addwf	init_app_ram@i,w,c
 16548  00377C  6E08               	movwf	?_Read_b_eep,c
 16549  00377E  6A09               	clrf	?_Read_b_eep+1,c
 16550  003780  0E00               	movlw	0
 16551  003782  2209               	addwfc	?_Read_b_eep+1,f,c
 16552  003784  EC4B  F022         	call	_Read_b_eep	;wreg free
 16553  003788  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16554  00378A  6A0A               	clrf	??_init_app_ram& (0+255),c
 16555  00378C  0E56               	movlw	86
 16556  00378E  240C               	addwf	init_app_ram@i,w,c
 16557  003790  6E08               	movwf	?_Read_b_eep,c
 16558  003792  6A09               	clrf	?_Read_b_eep+1,c
 16559  003794  0E00               	movlw	0
 16560  003796  2209               	addwfc	?_Read_b_eep+1,f,c
 16561  003798  EC4B  F022         	call	_Read_b_eep	;wreg free
 16562  00379C  260A               	addwf	??_init_app_ram,f,c
 16563  00379E  0E00               	movlw	0
 16564  0037A0  220B               	addwfc	??_init_app_ram+1,f,c
 16565  0037A2  500C               	movf	init_app_ram@i,w,c
 16566  0037A4  0D02               	mullw	2
 16567  0037A6  50F3               	movf	prodl,w,c
 16568  0037A8  0100               	movlb	0	; () banked
 16569  0037AA  0F70               	addlw	low _relay_pulse_timer
 16570  0037AC  6ED9               	movwf	fsr2l,c
 16571  0037AE  6ADA               	clrf	fsr2h,c
 16572  0037B0  C00A  FFDE         	movff	??_init_app_ram,postinc2
 16573  0037B4  C00B  FFDD         	movff	??_init_app_ram+1,postdec2
 16574  0037B8                     l7931:
 16575                           
 16576                           ;main.c: 462: }
 16577                           ;main.c: 465: if ( Read_b_eep(0x43 + 15 + i) & 0x04) {
 16578  0037B8  0E52               	movlw	82
 16579  0037BA  240C               	addwf	init_app_ram@i,w,c
 16580  0037BC  6E08               	movwf	?_Read_b_eep,c
 16581  0037BE  6A09               	clrf	?_Read_b_eep+1,c
 16582  0037C0  0E00               	movlw	0
 16583  0037C2  2209               	addwfc	?_Read_b_eep+1,f,c
 16584  0037C4  EC4B  F022         	call	_Read_b_eep	;wreg free
 16585  0037C8  6E0A               	movwf	??_init_app_ram& (0+255),c
 16586  0037CA  A40A               	btfss	??_init_app_ram,2,c
 16587  0037CC  D020               	goto	l7935
 16588                           
 16589                           ;main.c: 466: relay_protection_timer[ i ] =
 16590                           ;main.c: 467: Read_b_eep(0x43 + 44 + i) * 256 +
 16591                           ;main.c: 468: Read_b_eep(0x43 + 45 + i);
 16592  0037CE  0E6F               	movlw	111
 16593  0037D0  240C               	addwf	init_app_ram@i,w,c
 16594  0037D2  6E08               	movwf	?_Read_b_eep,c
 16595  0037D4  6A09               	clrf	?_Read_b_eep+1,c
 16596  0037D6  0E00               	movlw	0
 16597  0037D8  2209               	addwfc	?_Read_b_eep+1,f,c
 16598  0037DA  EC4B  F022         	call	_Read_b_eep	;wreg free
 16599  0037DE  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16600  0037E0  6A0A               	clrf	??_init_app_ram& (0+255),c
 16601  0037E2  0E70               	movlw	112
 16602  0037E4  240C               	addwf	init_app_ram@i,w,c
 16603  0037E6  6E08               	movwf	?_Read_b_eep,c
 16604  0037E8  6A09               	clrf	?_Read_b_eep+1,c
 16605  0037EA  0E00               	movlw	0
 16606  0037EC  2209               	addwfc	?_Read_b_eep+1,f,c
 16607  0037EE  EC4B  F022         	call	_Read_b_eep	;wreg free
 16608  0037F2  260A               	addwf	??_init_app_ram,f,c
 16609  0037F4  0E00               	movlw	0
 16610  0037F6  220B               	addwfc	??_init_app_ram+1,f,c
 16611  0037F8  500C               	movf	init_app_ram@i,w,c
 16612  0037FA  0D02               	mullw	2
 16613  0037FC  50F3               	movf	prodl,w,c
 16614  0037FE  0100               	movlb	0	; () banked
 16615  003800  0F60               	addlw	low _relay_protection_timer
 16616  003802  6ED9               	movwf	fsr2l,c
 16617  003804  6ADA               	clrf	fsr2h,c
 16618  003806  C00A  FFDE         	movff	??_init_app_ram,postinc2
 16619  00380A  C00B  FFDD         	movff	??_init_app_ram+1,postdec2
 16620  00380E                     l7935:
 16621  00380E  2A0C               	incf	init_app_ram@i,f,c
 16622  003810  0E06               	movlw	6
 16623  003812  640C               	cpfsgt	init_app_ram@i,c
 16624  003814  D799               	goto	l7925
 16625  003816  0C06               	retlw	6
 16626  003818                     __end_of_init_app_ram:
 16627                           	opt stack 0
 16628                           tblptru	equ	0xFF8
 16629                           tblptrh	equ	0xFF7
 16630                           tblptrl	equ	0xFF6
 16631                           tablat	equ	0xFF5
 16632                           prodh	equ	0xFF4
 16633                           prodl	equ	0xFF3
 16634                           intcon	equ	0xFF2
 16635                           postinc0	equ	0xFEE
 16636                           wreg	equ	0xFE8
 16637                           indf1	equ	0xFE7
 16638                           fsr1h	equ	0xFE2
 16639                           fsr1l	equ	0xFE1
 16640                           indf2	equ	0xFDF
 16641                           postinc2	equ	0xFDE
 16642                           postdec2	equ	0xFDD
 16643                           plusw2	equ	0xFDB
 16644                           fsr2h	equ	0xFDA
 16645                           fsr2l	equ	0xFD9
 16646                           status	equ	0xFD8
 16647                           
 16648 ;; *************** function _WriteTimer0 *****************
 16649 ;; Defined at:
 16650 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16651 ;; Parameters:    Size  Location     Type
 16652 ;;  timer0          2    7[COMRAM] unsigned int 
 16653 ;; Auto vars:     Size  Location     Type
 16654 ;;  timer           2    9[COMRAM] struct Timers
 16655 ;; Return value:  Size  Location     Type
 16656 ;;		None               void
 16657 ;; Registers used:
 16658 ;;		None
 16659 ;; Tracked objects:
 16660 ;;		On entry : 0/0
 16661 ;;		On exit  : 0/0
 16662 ;;		Unchanged: 0/0
 16663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16664 ;;      Params:         2       0       0       0       0       0       0
 16665 ;;      Locals:         2       0       0       0       0       0       0
 16666 ;;      Temps:          0       0       0       0       0       0       0
 16667 ;;      Totals:         4       0       0       0       0       0       0
 16668 ;;Total ram usage:        4 bytes
 16669 ;; Hardware stack levels used:    1
 16670 ;; Hardware stack levels required when called:    2
 16671 ;; This function calls:
 16672 ;;		Nothing
 16673 ;; This function is called by:
 16674 ;;		_init
 16675 ;; This function uses a non-reentrant model
 16676 ;;
 16677                           
 16678                           	psect	text74
 16679  004484                     __ptext74:
 16680                           	opt stack 0
 16681  004484                     _WriteTimer0:
 16682                           	opt stack 27
 16683                           
 16684                           ;incstack = 0
 16685                           ;incstack = 0
 16686  004484  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 16687  004488  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 16688  00448C  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 16689  004490  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 16690  004494  0012               	return	
 16691  004496                     __end_of_WriteTimer0:
 16692                           	opt stack 0
 16693                           tblptru	equ	0xFF8
 16694                           tblptrh	equ	0xFF7
 16695                           tblptrl	equ	0xFF6
 16696                           tablat	equ	0xFF5
 16697                           prodh	equ	0xFF4
 16698                           prodl	equ	0xFF3
 16699                           intcon	equ	0xFF2
 16700                           postinc0	equ	0xFEE
 16701                           wreg	equ	0xFE8
 16702                           indf1	equ	0xFE7
 16703                           fsr1h	equ	0xFE2
 16704                           fsr1l	equ	0xFE1
 16705                           indf2	equ	0xFDF
 16706                           postinc2	equ	0xFDE
 16707                           postdec2	equ	0xFDD
 16708                           plusw2	equ	0xFDB
 16709                           fsr2h	equ	0xFDA
 16710                           fsr2l	equ	0xFD9
 16711                           status	equ	0xFD8
 16712                           
 16713 ;; *************** function _vscp_readAppReg *****************
 16714 ;; Defined at:
 16715 ;;		line 901 in file "../main.c"
 16716 ;; Parameters:    Size  Location     Type
 16717 ;;  reg             1    wreg     unsigned char 
 16718 ;; Auto vars:     Size  Location     Type
 16719 ;;  reg             1   10[COMRAM] unsigned char 
 16720 ;;  rv              1    9[COMRAM] unsigned char 
 16721 ;; Return value:  Size  Location     Type
 16722 ;;                  1    wreg      unsigned char 
 16723 ;; Registers used:
 16724 ;;		wreg, status,2, status,0, cstack
 16725 ;; Tracked objects:
 16726 ;;		On entry : F/0
 16727 ;;		On exit  : 0/0
 16728 ;;		Unchanged: 0/0
 16729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16730 ;;      Params:         0       0       0       0       0       0       0
 16731 ;;      Locals:         2       0       0       0       0       0       0
 16732 ;;      Temps:          0       0       0       0       0       0       0
 16733 ;;      Totals:         2       0       0       0       0       0       0
 16734 ;;Total ram usage:        2 bytes
 16735 ;; Hardware stack levels used:    1
 16736 ;; Hardware stack levels required when called:    3
 16737 ;; This function calls:
 16738 ;;		_Read_b_eep
 16739 ;; This function is called by:
 16740 ;;		_vscp_readRegister
 16741 ;;		_vscp_handleProtocolEvent
 16742 ;; This function uses a non-reentrant model
 16743 ;;
 16744                           
 16745                           	psect	text75
 16746  003C5C                     __ptext75:
 16747                           	opt stack 0
 16748  003C5C                     _vscp_readAppReg:
 16749                           	opt stack 25
 16750                           
 16751                           ;incstack = 0
 16752                           ;incstack = 0
 16753                           ;vscp_readAppReg@reg stored from wreg
 16754  003C5C  CFE8 F00B          	movff	wreg,vscp_readAppReg@reg
 16755                           
 16756                           ; BSR set to: 0
 16757                           ;main.c: 902: uint8_t rv;
 16758                           ;main.c: 904: rv = 0x00;
 16759  003C60  6A0A               	clrf	vscp_readAppReg@rv,c
 16760                           
 16761                           ; BSR set to: 0
 16762                           ;main.c: 907: if ( reg == 0x00 ) {
 16763  003C62  660B               	tstfsz	vscp_readAppReg@reg,c
 16764  003C64  D006               	goto	l8777
 16765                           
 16766                           ; BSR set to: 0
 16767                           ;main.c: 908: rv = Read_b_eep(0x43 + 0);
 16768  003C66  6A09               	clrf	?_Read_b_eep+1,c
 16769  003C68  0E43               	movlw	67
 16770  003C6A  6E08               	movwf	?_Read_b_eep,c
 16771  003C6C  EC4B  F022         	call	_Read_b_eep	;wreg free
 16772  003C70  D04D               	goto	L63
 16773  003C72                     l8777:
 16774                           
 16775                           ; BSR set to: 0
 16776                           ;main.c: 911: else if ( reg == 0x01 ) {
 16777  003C72  040B               	decf	vscp_readAppReg@reg,w,c
 16778  003C74  E106               	bnz	l8781
 16779                           
 16780                           ; BSR set to: 0
 16781                           ;main.c: 912: rv = Read_b_eep(0x43 + 1);
 16782  003C76  6A09               	clrf	?_Read_b_eep+1,c
 16783  003C78  0E44               	movlw	68
 16784  003C7A  6E08               	movwf	?_Read_b_eep,c
 16785  003C7C  EC4B  F022         	call	_Read_b_eep	;wreg free
 16786  003C80  D045               	goto	L63
 16787  003C82                     l8781:
 16788                           
 16789                           ; BSR set to: 0
 16790                           ;main.c: 914: else if ( (reg >= 2) && (reg < 10) ) {
 16791  003C82  0E01               	movlw	1
 16792  003C84  640B               	cpfsgt	vscp_readAppReg@reg,c
 16793  003C86  D034               	goto	l8805
 16794                           
 16795                           ; BSR set to: 0
 16796  003C88  0E0A               	movlw	10
 16797  003C8A  600B               	cpfslt	vscp_readAppReg@reg,c
 16798  003C8C  D031               	goto	l8805
 16799  003C8E  D01E               	goto	l8803
 16800  003C90                     l8787:
 16801                           
 16802                           ; BSR set to: 0
 16803                           ;main.c: 920: rv = LATBbits.LATB4;
 16804  003C90  0E00               	movlw	0
 16805  003C92  B88A               	btfsc	3978,4,c	;volatile
 16806  003C94  0E01               	movlw	1
 16807  003C96  D03A               	goto	L63
 16808  003C98                     l8789:
 16809                           
 16810                           ; BSR set to: 0
 16811                           ;main.c: 925: rv = LATBbits.LATB1;
 16812  003C98  0E00               	movlw	0
 16813  003C9A  B28A               	btfsc	3978,1,c	;volatile
 16814  003C9C  0E01               	movlw	1
 16815  003C9E  D036               	goto	L63
 16816  003CA0                     l8791:
 16817                           
 16818                           ; BSR set to: 0
 16819                           ;main.c: 930: rv = LATBbits.LATB0;
 16820  003CA0  0E00               	movlw	0
 16821  003CA2  B08A               	btfsc	3978,0,c	;volatile
 16822  003CA4  0E01               	movlw	1
 16823  003CA6  D032               	goto	L63
 16824  003CA8                     l8793:
 16825                           
 16826                           ; BSR set to: 0
 16827                           ;main.c: 935: rv = LATCbits.LATC7;
 16828  003CA8  0E00               	movlw	0
 16829  003CAA  BE8B               	btfsc	3979,7,c	;volatile
 16830  003CAC  0E01               	movlw	1
 16831  003CAE  D02E               	goto	L63
 16832  003CB0                     l8795:
 16833                           
 16834                           ; BSR set to: 0
 16835                           ;main.c: 940: rv = LATCbits.LATC6;
 16836  003CB0  0E00               	movlw	0
 16837  003CB2  BC8B               	btfsc	3979,6,c	;volatile
 16838  003CB4  0E01               	movlw	1
 16839  003CB6  D02A               	goto	L63
 16840  003CB8                     l8797:
 16841                           
 16842                           ; BSR set to: 0
 16843                           ;main.c: 945: rv = LATCbits.LATC5;
 16844  003CB8  0E00               	movlw	0
 16845  003CBA  BA8B               	btfsc	3979,5,c	;volatile
 16846  003CBC  0E01               	movlw	1
 16847  003CBE  D026               	goto	L63
 16848  003CC0                     l8799:
 16849                           
 16850                           ; BSR set to: 0
 16851                           ;main.c: 950: rv = LATCbits.LATC4;
 16852  003CC0  0E00               	movlw	0
 16853  003CC2  B88B               	btfsc	3979,4,c	;volatile
 16854  003CC4  0E01               	movlw	1
 16855  003CC6  D022               	goto	L63
 16856  003CC8                     l292:
 16857                           
 16858                           ; BSR set to: 0
 16859                           ;main.c: 955: rv = 0;
 16860  003CC8  6A0A               	clrf	vscp_readAppReg@rv,c
 16861                           
 16862                           ;main.c: 956: break;
 16863  003CCA  D021               	goto	l8811
 16864  003CCC                     l8803:
 16865                           
 16866                           ; BSR set to: 0
 16867  003CCC  500B               	movf	vscp_readAppReg@reg,w,c
 16868                           
 16869                           ; Switch size 1, requested type "speed"
 16870                           ; Number of cases is 8, Range of values is 2 to 9
 16871                           ; switch strategies available:
 16872                           ; Name         Instructions Cycles
 16873                           ; simple_byte           25    13 (average)
 16874                           ;	Chosen strategy is simple_byte
 16875  003CCE  0A02               	xorlw	2	; case 2
 16876  003CD0  E0DF               	bz	l8787
 16877  003CD2  0A01               	xorlw	1	; case 3
 16878  003CD4  E0E1               	bz	l8789
 16879  003CD6  0A07               	xorlw	7	; case 4
 16880  003CD8  E0E3               	bz	l8791
 16881  003CDA  0A01               	xorlw	1	; case 5
 16882  003CDC  E0E5               	bz	l8793
 16883  003CDE  0A03               	xorlw	3	; case 6
 16884  003CE0  E0E7               	bz	l8795
 16885  003CE2  0A01               	xorlw	1	; case 7
 16886  003CE4  E0E9               	bz	l8797
 16887  003CE6  0A0F               	xorlw	15	; case 8
 16888  003CE8  E0EB               	bz	l8799
 16889  003CEA  0A01               	xorlw	1	; case 9
 16890  003CEC  E0ED               	bz	l292
 16891  003CEE  D00F               	goto	l8811
 16892  003CF0                     l8805:
 16893                           
 16894                           ; BSR set to: 0
 16895                           ;main.c: 961: else if ( ( reg >= 10 ) &&
 16896                           ;main.c: 962: (reg < (72 + 7 * 8 ) ) ) {
 16897  003CF0  0E09               	movlw	9
 16898  003CF2  640B               	cpfsgt	vscp_readAppReg@reg,c
 16899  003CF4  D00C               	goto	l8811
 16900                           
 16901                           ; BSR set to: 0
 16902  003CF6  0E80               	movlw	128
 16903  003CF8  600B               	cpfslt	vscp_readAppReg@reg,c
 16904  003CFA  D009               	goto	l8811
 16905                           
 16906                           ; BSR set to: 0
 16907                           ;main.c: 963: rv = Read_b_eep(0x43 + reg);
 16908  003CFC  0E43               	movlw	67
 16909  003CFE  240B               	addwf	vscp_readAppReg@reg,w,c
 16910  003D00  6E08               	movwf	?_Read_b_eep,c
 16911  003D02  6A09               	clrf	?_Read_b_eep+1,c
 16912  003D04  0E00               	movlw	0
 16913  003D06  2209               	addwfc	?_Read_b_eep+1,f,c
 16914  003D08  EC4B  F022         	call	_Read_b_eep	;wreg free
 16915  003D0C                     L63:
 16916  003D0C  6E0A               	movwf	vscp_readAppReg@rv,c
 16917  003D0E                     l8811:
 16918                           
 16919                           ;main.c: 964: }
 16920                           ;main.c: 966: return rv;
 16921  003D0E  500A               	movf	vscp_readAppReg@rv,w,c
 16922  003D10  0012               	return	
 16923  003D12                     __end_of_vscp_readAppReg:
 16924                           	opt stack 0
 16925                           tblptru	equ	0xFF8
 16926                           tblptrh	equ	0xFF7
 16927                           tblptrl	equ	0xFF6
 16928                           tablat	equ	0xFF5
 16929                           prodh	equ	0xFF4
 16930                           prodl	equ	0xFF3
 16931                           intcon	equ	0xFF2
 16932                           postinc0	equ	0xFEE
 16933                           wreg	equ	0xFE8
 16934                           indf1	equ	0xFE7
 16935                           fsr1h	equ	0xFE2
 16936                           fsr1l	equ	0xFE1
 16937                           indf2	equ	0xFDF
 16938                           postinc2	equ	0xFDE
 16939                           postdec2	equ	0xFDD
 16940                           plusw2	equ	0xFDB
 16941                           fsr2h	equ	0xFDA
 16942                           fsr2l	equ	0xFD9
 16943                           status	equ	0xFD8
 16944                           
 16945 ;; *************** function _Read_b_eep *****************
 16946 ;; Defined at:
 16947 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 16948 ;; Parameters:    Size  Location     Type
 16949 ;;  badd            2    7[COMRAM] unsigned int 
 16950 ;; Auto vars:     Size  Location     Type
 16951 ;;		None
 16952 ;; Return value:  Size  Location     Type
 16953 ;;                  1    wreg      unsigned char 
 16954 ;; Registers used:
 16955 ;;		wreg, status,2
 16956 ;; Tracked objects:
 16957 ;;		On entry : 0/0
 16958 ;;		On exit  : 0/0
 16959 ;;		Unchanged: 0/0
 16960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16961 ;;      Params:         2       0       0       0       0       0       0
 16962 ;;      Locals:         0       0       0       0       0       0       0
 16963 ;;      Temps:          0       0       0       0       0       0       0
 16964 ;;      Totals:         2       0       0       0       0       0       0
 16965 ;;Total ram usage:        2 bytes
 16966 ;; Hardware stack levels used:    1
 16967 ;; Hardware stack levels required when called:    2
 16968 ;; This function calls:
 16969 ;;		Nothing
 16970 ;; This function is called by:
 16971 ;;		_init_app_ram
 16972 ;;		_doApplicationOneSecondWork
 16973 ;;		_vscp_readNicknamePermanent
 16974 ;;		_vscp_getZone
 16975 ;;		_vscp_getSubzone
 16976 ;;		_vscp_readAppReg
 16977 ;;		_vscp_writeAppReg
 16978 ;;		_SendInformationEvent
 16979 ;;		_doDM
 16980 ;;		_doActionOn
 16981 ;;		_doActionOff
 16982 ;;		_doActionPulse
 16983 ;;		_doActionStatus
 16984 ;;		_doActionDisable
 16985 ;;		_doActionToggle
 16986 ;;		_vscp_getGUID
 16987 ;;		_vscp_getUserID
 16988 ;;		_vscp_getManufacturerId
 16989 ;;		_vscp_getSegmentCRC
 16990 ;;		_calculateSetFilterMask
 16991 ;; This function uses a non-reentrant model
 16992 ;;
 16993                           
 16994                           	psect	text76
 16995  004496                     __ptext76:
 16996                           	opt stack 0
 16997  004496                     _Read_b_eep:
 16998                           	opt stack 26
 16999                           
 17000                           ;incstack = 0
 17001                           ;incstack = 0
 17002  004496  C008  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 17003  00449A  9CA6               	bcf	4006,6,c	;volatile
 17004  00449C  9EA6               	bcf	4006,7,c	;volatile
 17005  00449E  80A6               	bsf	4006,0,c	;volatile
 17006  0044A0  F000               	nop		;# 
 17007  0044A2  F000               	nop		;# 
 17008  0044A4  50A8               	movf	4008,w,c	;volatile
 17009  0044A6  0012               	return	
 17010  0044A8                     __end_of_Read_b_eep:
 17011                           	opt stack 0
 17012                           tblptru	equ	0xFF8
 17013                           tblptrh	equ	0xFF7
 17014                           tblptrl	equ	0xFF6
 17015                           tablat	equ	0xFF5
 17016                           prodh	equ	0xFF4
 17017                           prodl	equ	0xFF3
 17018                           intcon	equ	0xFF2
 17019                           postinc0	equ	0xFEE
 17020                           wreg	equ	0xFE8
 17021                           indf1	equ	0xFE7
 17022                           fsr1h	equ	0xFE2
 17023                           fsr1l	equ	0xFE1
 17024                           indf2	equ	0xFDF
 17025                           postinc2	equ	0xFDE
 17026                           postdec2	equ	0xFDD
 17027                           plusw2	equ	0xFDB
 17028                           fsr2h	equ	0xFDA
 17029                           fsr2l	equ	0xFD9
 17030                           status	equ	0xFD8
 17031                           
 17032 ;; *************** function _interrupt_at_low_vector *****************
 17033 ;; Defined at:
 17034 ;;		line 131 in file "../main.c"
 17035 ;; Parameters:    Size  Location     Type
 17036 ;;		None
 17037 ;; Auto vars:     Size  Location     Type
 17038 ;;		None
 17039 ;; Return value:  Size  Location     Type
 17040 ;;		None               void
 17041 ;; Registers used:
 17042 ;;		wreg, status,2, status,0, cstack
 17043 ;; Tracked objects:
 17044 ;;		On entry : 0/0
 17045 ;;		On exit  : 0/0
 17046 ;;		Unchanged: 0/0
 17047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17048 ;;      Params:         0       0       0       0       0       0       0
 17049 ;;      Locals:         0       0       0       0       0       0       0
 17050 ;;      Temps:          3       0       0       0       0       0       0
 17051 ;;      Totals:         3       0       0       0       0       0       0
 17052 ;;Total ram usage:        3 bytes
 17053 ;; Hardware stack levels used:    1
 17054 ;; Hardware stack levels required when called:    1
 17055 ;; This function calls:
 17056 ;;		i1_WriteTimer0
 17057 ;; This function is called by:
 17058 ;;		Interrupt level 1
 17059 ;; This function uses a non-reentrant model
 17060 ;;
 17061                           
 17062                           	psect	intcodelo
 17063  000818                     __pintcodelo:
 17064                           	opt stack 0
 17065  000818                     _interrupt_at_low_vector:
 17066                           	opt stack 21
 17067                           
 17068                           ;incstack = 0
 17069  000818  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 17070  00081C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 17071  000820  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 17072  000824                     
 17073                           ;main.c: 133: if ( INTCONbits.TMR0IF ) {
 17074  000824  A4F2               	btfss	intcon,2,c	;volatile
 17075  000826  D001               	goto	i1u804_21
 17076  000828  D001               	goto	i1u804_20
 17077  00082A                     i1u804_21:
 17078  00082A  D040               	goto	i1l147
 17079  00082C                     i1u804_20:
 17080  00082C                     
 17081                           ;main.c: 136: WriteTimer0(0xfb1d);
 17082  00082C  0EFB               	movlw	251
 17083  00082E  6E02               	movwf	?i1_WriteTimer0+1,c
 17084  000830  0E1D               	movlw	29
 17085  000832  6E01               	movwf	?i1_WriteTimer0,c
 17086  000834  EC54  F022         	call	i1_WriteTimer0	;wreg free
 17087  000838                     
 17088                           ;main.c: 138: vscp_timer++;
 17089  000838  0100               	movlb	0	; () banked
 17090  00083A  4B88               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 17091  00083C  2B89               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 17092  00083E                     
 17093                           ; BSR set to: 0
 17094                           ;main.c: 139: vscp_configtimer++;
 17095  00083E  4B86               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 17096  000840  2B87               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 17097  000842                     
 17098                           ; BSR set to: 0
 17099                           ;main.c: 140: measurement_clock++;
 17100  000842  0E01               	movlw	1
 17101  000844  2780               	addwf	_measurement_clock& (0+255),f,b	;volatile
 17102  000846  0E00               	movlw	0
 17103  000848  2381               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 17104  00084A  0E00               	movlw	0
 17105  00084C  2382               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 17106  00084E  0E00               	movlw	0
 17107  000850  2383               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 17108  000852                     
 17109                           ; BSR set to: 0
 17110                           ;main.c: 141: sendTimer++;
 17111  000852  4B84               	infsnz	_sendTimer& (0+255),f,b	;volatile
 17112  000854  2B85               	incf	(_sendTimer+1)& (0+255),f,b	;volatile
 17113  000856                     
 17114                           ; BSR set to: 0
 17115                           ;main.c: 144: if ( PORTCbits.RC0 ) {
 17116  000856  A082               	btfss	3970,0,c	;volatile
 17117  000858  D001               	goto	i1u805_21
 17118  00085A  D001               	goto	i1u805_20
 17119  00085C                     i1u805_21:
 17120  00085C  D002               	goto	i1l7557
 17121  00085E                     i1u805_20:
 17122  00085E                     
 17123                           ; BSR set to: 0
 17124                           ;main.c: 145: vscp_initbtncnt = 0;
 17125  00085E  6B90               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 17126                           
 17127                           ;main.c: 146: } else {
 17128  000860  D001               	goto	i1l139
 17129  000862                     i1l7557:
 17130                           
 17131                           ; BSR set to: 0
 17132                           ;main.c: 148: vscp_initbtncnt++;
 17133  000862  2B90               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 17134  000864                     i1l139:
 17135                           
 17136                           ; BSR set to: 0
 17137                           ;main.c: 149: }
 17138                           ;main.c: 152: vscp_statuscnt++;
 17139  000864  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 17140  000866                     
 17141                           ; BSR set to: 0
 17142                           ;main.c: 153: if ( ( 0x02 == vscp_initledfunc ) &&
 17143                           ;main.c: 154: ( vscp_statuscnt > 100 ) ) {
 17144  000866  5056               	movf	_vscp_initledfunc,w,c
 17145  000868  0A02               	xorlw	2
 17146  00086A  A4D8               	btfss	status,2,c
 17147  00086C  D001               	goto	i1u806_21
 17148  00086E  D001               	goto	i1u806_20
 17149  000870                     i1u806_21:
 17150  000870  D00E               	goto	i1l7567
 17151  000872                     i1u806_20:
 17152  000872                     
 17153                           ; BSR set to: 0
 17154  000872  0E64               	movlw	100
 17155  000874  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 17156  000876  D001               	goto	i1u807_21
 17157  000878  D001               	goto	i1u807_20
 17158  00087A                     i1u807_21:
 17159  00087A  D009               	goto	i1l7567
 17160  00087C                     i1u807_20:
 17161  00087C                     
 17162                           ; BSR set to: 0
 17163                           ;main.c: 156: if ( PORTCbits.RC1 ) {
 17164  00087C  A282               	btfss	3970,1,c	;volatile
 17165  00087E  D001               	goto	i1u808_21
 17166  000880  D001               	goto	i1u808_20
 17167  000882                     i1u808_21:
 17168  000882  D002               	goto	i1l141
 17169  000884                     i1u808_20:
 17170  000884                     
 17171                           ; BSR set to: 0
 17172                           ;main.c: 157: PORTCbits.RC1 = 0;
 17173  000884  9282               	bcf	3970,1,c	;volatile
 17174                           
 17175                           ;main.c: 158: }
 17176  000886  D001               	goto	i1l142
 17177  000888                     i1l141:
 17178                           
 17179                           ; BSR set to: 0
 17180                           ;main.c: 159: else {
 17181                           ;main.c: 160: PORTCbits.RC1 = 1;
 17182  000888  8282               	bsf	3970,1,c	;volatile
 17183  00088A                     i1l142:
 17184                           
 17185                           ; BSR set to: 0
 17186                           ;main.c: 161: }
 17187                           ;main.c: 163: vscp_statuscnt = 0;
 17188  00088A  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17189                           
 17190                           ;main.c: 165: }
 17191  00088C  D00E               	goto	i1l143
 17192  00088E                     i1l7567:
 17193                           
 17194                           ; BSR set to: 0
 17195                           ;main.c: 166: else if (0x01 == vscp_initledfunc) {
 17196  00088E  0456               	decf	_vscp_initledfunc,w,c
 17197  000890  A4D8               	btfss	status,2,c
 17198  000892  D001               	goto	i1u809_21
 17199  000894  D001               	goto	i1u809_20
 17200  000896                     i1u809_21:
 17201  000896  D003               	goto	i1l144
 17202  000898                     i1u809_20:
 17203  000898                     
 17204                           ; BSR set to: 0
 17205                           ;main.c: 167: PORTCbits.RC1 = 1;
 17206  000898  8282               	bsf	3970,1,c	;volatile
 17207                           
 17208                           ;main.c: 168: vscp_statuscnt = 0;
 17209  00089A  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17210                           
 17211                           ;main.c: 169: }
 17212  00089C  D006               	goto	i1l143
 17213  00089E                     i1l144:
 17214                           
 17215                           ; BSR set to: 0
 17216                           ;main.c: 170: else if (0x00 == vscp_initledfunc) {
 17217  00089E  6656               	tstfsz	_vscp_initledfunc,c
 17218  0008A0  D001               	goto	i1u810_21
 17219  0008A2  D001               	goto	i1u810_20
 17220  0008A4                     i1u810_21:
 17221  0008A4  D002               	goto	i1l143
 17222  0008A6                     i1u810_20:
 17223  0008A6                     
 17224                           ; BSR set to: 0
 17225                           ;main.c: 171: PORTCbits.RC1 = 0;
 17226  0008A6  9282               	bcf	3970,1,c	;volatile
 17227                           
 17228                           ;main.c: 172: vscp_statuscnt = 0;
 17229  0008A8  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17230  0008AA                     i1l143:
 17231                           
 17232                           ; BSR set to: 0
 17233                           ;main.c: 173: }
 17234                           ;main.c: 175: INTCONbits.TMR0IF = 0;
 17235  0008AA  94F2               	bcf	intcon,2,c	;volatile
 17236  0008AC                     i1l147:
 17237  0008AC  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 17238  0008B0  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 17239  0008B4  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 17240  0008B8  0010               	retfie	
 17241  0008BA                     __end_of_interrupt_at_low_vector:
 17242                           	opt stack 0
 17243                           tblptru	equ	0xFF8
 17244                           tblptrh	equ	0xFF7
 17245                           tblptrl	equ	0xFF6
 17246                           tablat	equ	0xFF5
 17247                           prodh	equ	0xFF4
 17248                           prodl	equ	0xFF3
 17249                           intcon	equ	0xFF2
 17250                           postinc0	equ	0xFEE
 17251                           wreg	equ	0xFE8
 17252                           indf1	equ	0xFE7
 17253                           fsr1h	equ	0xFE2
 17254                           fsr1l	equ	0xFE1
 17255                           bsr	equ	0xFE0
 17256                           indf2	equ	0xFDF
 17257                           postinc2	equ	0xFDE
 17258                           postdec2	equ	0xFDD
 17259                           plusw2	equ	0xFDB
 17260                           fsr2h	equ	0xFDA
 17261                           fsr2l	equ	0xFD9
 17262                           status	equ	0xFD8
 17263                           
 17264 ;; *************** function i1_WriteTimer0 *****************
 17265 ;; Defined at:
 17266 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 17267 ;; Parameters:    Size  Location     Type
 17268 ;;  timer0          2    0[COMRAM] unsigned int 
 17269 ;; Auto vars:     Size  Location     Type
 17270 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 17271 ;; Return value:  Size  Location     Type
 17272 ;;		None               void
 17273 ;; Registers used:
 17274 ;;		None
 17275 ;; Tracked objects:
 17276 ;;		On entry : 0/0
 17277 ;;		On exit  : 0/0
 17278 ;;		Unchanged: 0/0
 17279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17280 ;;      Params:         2       0       0       0       0       0       0
 17281 ;;      Locals:         2       0       0       0       0       0       0
 17282 ;;      Temps:          0       0       0       0       0       0       0
 17283 ;;      Totals:         4       0       0       0       0       0       0
 17284 ;;Total ram usage:        4 bytes
 17285 ;; Hardware stack levels used:    1
 17286 ;; This function calls:
 17287 ;;		Nothing
 17288 ;; This function is called by:
 17289 ;;		_interrupt_at_low_vector
 17290 ;; This function uses a non-reentrant model
 17291 ;;
 17292                           
 17293                           	psect	text78
 17294  0044A8                     __ptext78:
 17295                           	opt stack 0
 17296  0044A8                     i1_WriteTimer0:
 17297                           	opt stack 21
 17298                           
 17299                           ;incstack = 0
 17300                           ;incstack = 0
 17301  0044A8  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 17302  0044AC  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 17303  0044B0  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 17304  0044B4  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 17305  0044B8  0012               	return	
 17306  0044BA                     __end_ofi1_WriteTimer0:
 17307                           	opt stack 0
 17308                           tblptru	equ	0xFF8
 17309                           tblptrh	equ	0xFF7
 17310                           tblptrl	equ	0xFF6
 17311                           tablat	equ	0xFF5
 17312                           prodh	equ	0xFF4
 17313                           prodl	equ	0xFF3
 17314                           intcon	equ	0xFF2
 17315                           postinc0	equ	0xFEE
 17316                           wreg	equ	0xFE8
 17317                           indf1	equ	0xFE7
 17318                           fsr1h	equ	0xFE2
 17319                           fsr1l	equ	0xFE1
 17320                           bsr	equ	0xFE0
 17321                           indf2	equ	0xFDF
 17322                           postinc2	equ	0xFDE
 17323                           postdec2	equ	0xFDD
 17324                           plusw2	equ	0xFDB
 17325                           fsr2h	equ	0xFDA
 17326                           fsr2l	equ	0xFD9
 17327                           status	equ	0xFD8
 17328                           tblptru	equ	0xFF8
 17329                           tblptrh	equ	0xFF7
 17330                           tblptrl	equ	0xFF6
 17331                           tablat	equ	0xFF5
 17332                           prodh	equ	0xFF4
 17333                           prodl	equ	0xFF3
 17334                           intcon	equ	0xFF2
 17335                           postinc0	equ	0xFEE
 17336                           wreg	equ	0xFE8
 17337                           indf1	equ	0xFE7
 17338                           fsr1h	equ	0xFE2
 17339                           fsr1l	equ	0xFE1
 17340                           bsr	equ	0xFE0
 17341                           indf2	equ	0xFDF
 17342                           postinc2	equ	0xFDE
 17343                           postdec2	equ	0xFDD
 17344                           plusw2	equ	0xFDB
 17345                           fsr2h	equ	0xFDA
 17346                           fsr2l	equ	0xFD9
 17347                           status	equ	0xFD8
 17348                           
 17349                           	psect	rparam
 17350  0000                     tblptru	equ	0xFF8
 17351                           tblptrh	equ	0xFF7
 17352                           tblptrl	equ	0xFF6
 17353                           tablat	equ	0xFF5
 17354                           prodh	equ	0xFF4
 17355                           prodl	equ	0xFF3
 17356                           intcon	equ	0xFF2
 17357                           postinc0	equ	0xFEE
 17358                           wreg	equ	0xFE8
 17359                           indf1	equ	0xFE7
 17360                           fsr1h	equ	0xFE2
 17361                           fsr1l	equ	0xFE1
 17362                           bsr	equ	0xFE0
 17363                           indf2	equ	0xFDF
 17364                           postinc2	equ	0xFDE
 17365                           postdec2	equ	0xFDD
 17366                           plusw2	equ	0xFDB
 17367                           fsr2h	equ	0xFDA
 17368                           fsr2l	equ	0xFD9
 17369                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         89
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     60     142
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionDisable->_Write_b_eep
    _doActionStatus->_SendInformationEvent
    _doActionPulse->_Read_b_eep
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeAppReg
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_calculateSetFilterMask
    _vscp_setUserID->_Write_b_eep
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _calculateSetFilterMask->__CANIDToRegs
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_Read_b_eep
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_Write_b_eep
    _vscp_setSegmentCRC->_Write_b_eep
    _vscp_getSegmentCRC->_Read_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_Read_b_eep
    _vscp_readAppReg->_Read_b_eep

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   77599
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
             _calculateSetFilterMask
                          _vscp_init
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           6     6      0    7438
                                             27 BANK0      6     6      0
                         _Read_b_eep
                        _doActionOff
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2370
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                17    17      0   15731
                                             28 BANK0     17    17      0
                         _Read_b_eep
                        _doActionOff
                         _doActionOn
                      _doActionPulse
                     _doActionStatus
                    _doActionDisable
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       7     6      1    3470
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionDisable                                      6     5      1     449
                                             11 COMRAM     6     5      1
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _doActionStatus                                       7     6      1    3428
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulse                                        7     6      1     381
                                              9 COMRAM     7     6      1
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           7     6      1    3212
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          6     5      1    3212
                                             80 COMRAM     1     0      1
                                             22 BANK0      5     5      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   38013
                                             32 BANK0     28    28      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   13131
                                             30 BANK0      2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    4058
                                             71 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0    2619
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0    2111
                                             67 COMRAM     4     4      0
             _calculateSetFilterMask
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     112
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     9     8      1    8863
                                             80 COMRAM     1     0      1
                                             22 BANK0      8     8      0
             _calculateSetFilterMask
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (2) _SendInformationEvent                                 8     6      2    2533
                                             74 COMRAM     6     6      0
                                             20 BANK0      2     0      2
                         _Read_b_eep
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (5) _calculateSetFilterMask                              50    50      0    1845
                                             17 COMRAM    50    50      0
                         _Read_b_eep
               _ECANSetOperationMode
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1773
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1334
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     217
                                             12 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      31
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     180
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     211
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4672
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     301
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _Write_b_eep                                          4     1      3      68
                                              7 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     666
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (6) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         3     3      0     508
                                              9 COMRAM     3     3      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     346
                                              9 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_getSegmentCRC
       _Read_b_eep
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
   _init_app_eeprom
     _calculateSetFilterMask
       _Read_b_eep
       _ECANSetOperationMode
       __CANIDToRegs
     _Busy_eep
     _Write_b_eep
   _init_app_ram
     _Read_b_eep
   _calculateSetFilterMask
     _Read_b_eep
     _ECANSetOperationMode
     __CANIDToRegs
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
     _vscp_readAppReg
       _Read_b_eep
     _vscp_writeAppReg
       _calculateSetFilterMask
         _Read_b_eep
         _ECANSetOperationMode
         __CANIDToRegs
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _Read_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _Read_b_eep
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_getSegmentCRC
         _Read_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _calculateSetFilterMask
           _Read_b_eep
           _ECANSetOperationMode
           __CANIDToRegs
         _Busy_eep
         _Write_b_eep
         _Read_b_eep
         _SendInformationEvent
           _Read_b_eep
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _Read_b_eep
       _vscp_writeStdReg
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_getGUID
           _Read_b_eep
         _vscp_getUserID
           _Read_b_eep
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _calculateSetFilterMask
               _Read_b_eep
               _ECANSetOperationMode
               __CANIDToRegs
             _Busy_eep
             _Write_b_eep
           _init_app_ram
             _Read_b_eep
     _vscp_writeStdReg
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_getGUID
         _Read_b_eep
       _vscp_getUserID
         _Read_b_eep
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _calculateSetFilterMask
             _Read_b_eep
             _ECANSetOperationMode
             __CANIDToRegs
           _Busy_eep
           _Write_b_eep
         _init_app_ram
           _Read_b_eep
     ___lbmod
   _doDM
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulse
       _Read_b_eep
     _doActionStatus
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionDisable
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
     _doActionToggle
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
     _vscp_getSubzone
       _Read_b_eep
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _Read_b_eep
       _vscp_getSubzone (ARG)
         _Read_b_eep
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _SendInformationEvent
       _Read_b_eep
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      8E       5       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E6       3        0.0%
DATA                 0      0      F2      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sun Nov 15 22:40:46 2015

                      doActionToggle@val 00CB                  __end_of_vscp_readAppReg 3D12  
                  __end_of_sendVSCPFrame 3C5C                              __CFG_CPB$ON 000000  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000C  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 305E  
                  doActionToggle@dmflags 00CA                              __CFG_LVP$ON 000000  
                            __CFG_WDT$ON 000000                                      l210 2662  
                                    l211 266A                                      l220 268E  
                                    l213 266E                                      l222 2692  
                                    l214 2676                                      l206 2652  
                                    l223 269A                                      l207 265A  
                                    l151 3A22                                      l312 0A0E  
                                    l216 267A                                      l160 3A6A  
                                    l225 269E                                      l217 2682  
                                    l322 0ADE                                      l306 09B4  
                                    l226 26A8                                      l219 2686  
                                    l404 12DE                                      l332 0BA6  
                                    l500 2D36                                      l420 2514  
                                    l228 279E                                      l236 2806  
                                    l164 3A84                                      l317 0A78  
                                    l253 424E                                      l502 2D66  
                                    l327 0B42                                      l503 2D96  
                                    l504 2DC6                                      l337 0C0A  
                                    l249 4274                                      l441 2850  
                                    l505 2DF6                       vscp_readStdReg@idx 0019  
                                    l450 28D0                                      l506 2E26  
                                    l187 21CA                                      l507 2E56  
                                    l515 3616                                      l292 3CC8  
                                    l460 2A10                                      l452 2910  
                                    l541 3D56                                      l454 2950  
                                    l471 3962                                      l447 2890  
                                    l640 43BA                                      l480 39A8  
                                    l456 2990                                      l528 36DC  
                                    l552 3376                                      l481 39AC  
                                    l449 2A74                                      l561 33C0  
                                    l482 39B0                                      l458 29D0  
                                    l570 33E4                                      l562 33C8  
                                    l483 39B4                                      l571 33EC  
                                    l484 39B8                                      l564 33CC  
                                    l477 39A0                                      l573 33F0  
                                    l565 33D4                                      l557 33B0  
                                    l478 39D8                                      l494 2CF8  
                                    l574 33F8                                      l558 33B8  
                                    l671 4030                                      l479 39A4  
                                    l567 33D8                                      l576 33FC  
                                    l568 33E0                                      l665 3EBC  
                                    l577 3406                                      l930 332A  
                                    l907 2C16                                      l579 3450  
                      doActionStatus@bOn 00CB                                      l908 2C3A  
                                    l676 4186                                      l925 35CC  
                     vscp_readStdReg@reg 001C                                      l935 3F2A  
                                    l871 31C6                                      l863 312A  
                                    l865 3148                                      l891 2B4A  
                                    l883 2CAE                                      l876 2ADA  
                                    l893 2B5E                                      l886 2BA8  
                                    l895 2B72                                      l887 2B28  
                                    l897 2B82                                      l889 2B36  
                                    l899 2B92           __size_of_vscp_handleProbeState 00BA  
                      doActionStatus@arg 0051                           getVSCPFrame@id 0028  
                      doActionStatus@val 00CC            __end_of_vscp_handleProbeState 3BA6  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                   __size_of_Write_b_eep 0034                   _calculateSetFilterMask 1948  
                                    wreg 000FE8              ?_doApplicationOneSecondWork 0001  
                                   l1102 42BE                                     l1113 41B0  
                                   l1050 404A                                     l1122 3FEC  
                                   l1108 414E                                     l1109 415A  
                   __size_of_doActionOff 00E8                                     l1126 43D4  
                                   l1055 42E2                                     l1231 14D0  
                                   l1305 44FE                                     l1073 3B90  
                                   l1065 3BA2                                     l1330 411A  
                                   l1074 3B70                                     l1066 3B2E  
                                   l1171 4326                                     l1255 1660  
                                   l1256 1674                                     l1257 16B6  
                                   l1346 437E                                     l1098 40B8  
                                   l1266 16F2                                     l1347 4380  
                                   l1291 1946                                     l1197 3918  
                                   l1299 41DA                                     l6017 425C  
                                   l6025 4236                      vscp_readStdReg@code 0011  
                                   l7231 3ECC                                     l8023 3AEE  
              vscp_getManufacturerId@idx 000A                                     l7241 3EFA  
                                   l7233 3ED6                                     l7137 2BBC  
                                   l7243 3F00                                     l7235 3EE0  
                                   l7147 2BDC                                     l7237 3EEA  
                                   l7229 3EC4                                     l7261 325C  
                                   l7173 2C68                                     l7181 2C82  
                                   l7165 2C3C                                     l7085 2B08  
                                   l7069 2AC8                                     l7093 2B16  
                                   l8061 3B4C                                     l8037 3B0C  
                                   l7239 3EF4                                     l7247 3F0C  
                                   l7079 2AF2                                     l7087 2B12  
                                   l8063 3B50                                     l8039 3B12  
                                   l8057 3B48                                     l7187 2C98  
                                   l8093 3B94                                     l7533 41FC  
                                   l7525 41E6                                     l7199 43FA  
                                   l8601 3FCC                                     l7725 42CE  
                                   l6909 4334                                     l9405 2E86  
                                   l8605 3FD4                                     l9407 2EA6  
                                   l6961 4168                                     l6945 3E60  
                                   l8803 3CCC                                     l8811 3D0E  
                                   l7931 37B8                                     l7915 371E  
                                   l8805 3CF0                                     l7925 3748  
                                   l6957 4164                                     l9357 2CB6  
                                   l7935 380E                                     l9615 30C4  
                                   l9609 30B4                                     l7961 1BE6  
                                   l7953 1BD4                                     l7945 195A  
                                   l9369 2D1E                                     l9643 314A  
                                   l9627 30EE                                     l9723 40B0  
                                   l9811 2F44                                     l9803 2F2C  
                                   l9475 3D18                                     l8595 3FC2  
                                   l8781 3C82                                     l9637 312E  
                                   l7965 1C74                                     l9901 389C  
                                   l9493 3DA6                                     l8791 3CA0  
                                   l9663 31B8                                     l9591 3FF6  
                                   l9823 2F66                                     l9815 2F4E  
                                   l9807 2F38                                     l7983 1D26  
                                   l9903 38A0                                     l9487 3D7A  
                                   l8793 3CA8                                     l8777 3C72  
                                   l9649 3178                                     l9657 3196  
                                   l7985 1D2E                                     l7897 21CC  
                                   l9905 38B6                                     l8795 3CB0  
                                   l8787 3C90                                     l9667 31BC  
                                   l9595 4024                                     l9827 2F72  
                                   l9819 2F5A                                     l7979 1C92  
                                   l8797 3CB8                                     l8789 3C98  
                                   l9685 34F4                                     l9669 31BE  
                                   l9853 304A                                     l9837 2FD4  
                                   l9781 2EE2                                     l9773 2ECE  
                                   l7989 1D58                                     l9925 38FE  
                                   l9917 38EA                                     l8799 3CC0  
                                   l9847 3034                                     l9759 43CE  
                                   l9935 391A                                     l9793 2F06  
                                   l9785 2EEE                                     l9777 2ED8  
                                   l9857 305A                                     l9769 2EC4  
                                   l9881 3842                                     l9797 2F16  
                                   l9789 2EFA                                     l9893 387E  
                                   l9887 3862                                     l9991 3A48  
                                   l9975 3A1A                                     l9995 3A50  
                                   l9999 3A5A              __size_of_vscp_getMatrixInfo 0020  
                                   u4435 4126                                     u4436 4128  
                         sendCANFrame@id 0037                                     u7135 2AD0  
                                   u7137 2AD2                                     u8330 1C06  
                                   u8315 1A44                                     u8404 1CE0  
                                   u8340 1C2E                                     u8405 1CDC  
                                   u7455 320A                                     u8335 1BFC  
                                   u8424 1D00                                     u7465 322A  
                                   u8425 1CFA                                     u8345 1C24  
                                   u8274 376E                                     u8275 376A  
                                   u7475 3278                                     u8364 1C4E  
                                   u8365 1C48                                     u6960 3EB0  
                         sendCANFrame@rv 003E                                     u8394 1CC8  
                                   u8395 1CC4                                     u6965 3EA6  
                       ??_ECANInitialize 0009                vscp_setManufacturerId@idx 000D  
                                   _doDM 2218                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 3A06  
                                   _init 40BA                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                    __size_of_vscp_getZone 000A  
                    i1WriteTimer0@timer0 0001                         _vscp_writeAppReg 08E0  
                            _vscp_minute 0091                              _vscp_second 0096  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 08BA                     doActionPulse@dmflags 000F  
          __size_of_vscp_doOneSecondWork 004E                        vscp_getUserID@idx 000A  
                  __size_of_vscp_setGUID 0026                         _vscp_writeStdReg 3818  
                        _doActionDisable 3D12                ECANReceiveMessage@dataLen 0010  
                  getVSCPFrame@pPriority 0020                     __end_of_getVSCPFrame 3EBE  
            __size_of_vscp_getSegmentCRC 000A                         __RegsToCANID@val 000A  
                       __RegsToCANID@ptr 0008                     __size_of_getCANFrame 002C  
                                  l10001 3A5E                                    l10011 3A7E  
                                  l10003 3A64                                    l10111 1398  
                                  l10015 3A88                                    l11001 0F8E  
                                  l10017 3AA0                                    l10203 1576  
                                  l10051 131A                                    l10043 3AE6  
                                  l10027 3ACA                                    l11013 0F9A  
                                  l10301 167C                                    l10221 15A8  
                                  l10141 1400                                    l10125 13A4  
                                  l10053 1320                                    l11031 1088  
                                  l11007 0F94                                    l11015 0FC6  
                                  l10231 15CC                                    l10223 15B2  
                                  l10151 1434                                    l10055 1326  
                                  l10039 3ADE                                    l11113 12F2  
                                  l11033 10B4                                    l11025 1004  
                                  l10313 16A2                                    l10161 1468  
                                  l10057 132C                                    l10049 1314  
                                  l11107 12C8                                    l11035 10E0  
                                  l11027 1030                                    l11043 1164  
                                  l10411 17BC                                    l10331 16D2  
                                  l10219 15A6                                    l10171 149C  
                                  l10091 1372                                    l10075 1364  
                                  l11211 3664                                    l11117 1306  
                                  l11037 110C                                    l11029 105C  
                                  l11045 118E                                    l10317 16AA  
                                  l10309 169A                                    l10237 15F8  
                                  l10077 136A                                    l11213 366E  
                                  l11205 363A                                    l11039 1138  
                                  l10423 1804                                    l10415 17D6  
                                  l10327 16B8                                    l10183 14D4  
                                  l11127 280E                                    l11231 36C8  
                                  l11215 3678                                    l11207 3650  
                                  l11223 3696                                    l11303 343C  
                                  _B0CON 000E20                                    l11073 11F8  
                                  l10441 185C                                    l10433 182E  
                                  l10353 16FA                                    l10281 1654  
                                  l10265 1634                                    l10249 1614  
                                  l10193 151A                                    l10185 14F2  
                                  l11217 3682                                    l11209 365A  
                                  l11225 36B2                                    l11241 3700  
                                  l11313 3474                                    l10521 248A  
                                  l10513 23DC                                    l10505 2368  
                                  l11083 1254                                    l11075 122E  
                                  l10419 17EC                                    l11139 2876  
                                  l11219 368C                                    l11251 3334  
                                  l10515 2416                                    l10611 278A  
                                  l11085 126C                                    l11069 11CC  
                                  l11325 431C                                    l10445 1884  
                                  l10189 1502                                    l11237 36EE  
                                  l11309 3462                                    l10509 23A2  
                                  l10621 27C4                                    l10711 09C4  
                                  l10367 1722                                    l10199 1560  
                                  l11175 2A50                                    l11183 2A98  
                                  l11263 339A                                    l10519 2450  
                                  l10527 24C4                                    l10607 2778  
                                  l10623 2802                                    l10535 251A  
                                  _B1CON 000E30                                    l10713 09CA  
                                  l10705 0986                                    l11097 1298  
                                  l10393 1782                                    l10377 1744  
                                  l10633 3924                                    l11193 35D6  
                                  l10529 250A                                    l10617 27B0  
                                  ?_doDM 0001                                    l10395 1788  
                                  l10467 18E4                                    l11179 2A86  
                                  l11267 33BA                                    l10483 2224  
                                  l10539 2522                                    l10813 0BB6  
                                  l10805 0B7A                                    l10733 0A20  
                                  l10725 09F4                                    l10389 1770  
                                  l10653 39BC                                    l10645 3986  
                                  l10661 39FC                                    l10493 2288  
                                  l10557 25BA                                    l10911 0DCC  
                                  l11295 340A                                    l10559 25FC  
                                  _B2CON 000E40                                    l10905 0DC6  
                                  l10825 0BDE                                    l10753 0A8A  
                                  l10745 0A4A                                    l10657 39EA  
                                  l11297 3426                                    l10569 265C  
                                  l10915 0DD2                                    l10843 0C52  
                                  l10835 0C1A                                    l10773 0AEE  
                                  l10765 0AB2                                    l10693 095C  
                                  l10837 0C44                                    l10685 0934  
                                  l10677 0910                                    l10597 26AC  
                                  l10935 0E3E                                    l10863 0CBE  
                                  l10599 26C8                                    _B3CON 000E50  
                                  l10953 0EAA                                    l10929 0E38  
                                  l10881 0D2A                                    l10857 0CB8  
                                  l10793 0B52                                    l10785 0B16  
                                  l10963 0EB6                                    l10939 0E44  
                                  l10891 0D60                                    l10867 0CC4  
                                  l10983 0F22                                    l10959 0EB0  
                                  l10887 0D30                                    _B4CON 000E60  
                                  l10977 0F1C            __size_of_SendInformationEvent 006C  
                                  l10987 0F28            __size_of_vscp_getMajorVersion 0002  
                                  _B5CON 000E70               __end_of_vscp_goActiveState 4366  
          ??_vscp_writeNicknamePermanent 000C                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                          i1_WriteTimer0 44A8                                    _EEADR 000FA9  
                        __end_of___lbmod 4204                  _vscp_handleDropNickname 412C  
                                  _BSEL0 000DF8                                    u11005 34B8  
                                  u11015 34DE                                    u11025 3508  
                                  u10235 3BE2                                    u11320 2FCA  
                                  u10424 2CC6                                    _T0CON 000FD5  
                                  u10425 2CC2                                    u11325 2FC0  
                                  u11350 302C                                    u10624 3D28  
                                  u10625 3D24                                    u11355 3022  
                                  u12414 260C                                    u12415 2608  
                                  u13244 281E                                    u13245 281A  
                                  u13414 35E6                                    u13415 35E2  
                                  u12394 2598                                    u12395 2594  
                                  u13534 3344                                    u13535 3340  
                                  u12584 3934                                    u12585 3930  
                                  i1l141 0888                                    i1l142 088A  
                                  i1l143 08AA                                    i1l144 089E  
                                  i1l139 0864                                    i1l147 08AC  
                        sendCANFrame@dlc 003B                                    _MSEL0 000DF0  
                                  _MSEL1 000DF1                                    _MSEL2 000DF2  
                                  _IRXIF 007D27                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 44EC  
             _vscp_readNicknamePermanent 44E2                                    _PORTA 000F80  
                                  _PORTB 000F81                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                         ?_vscp_getSubzone 0001  
                         __CFG_EBTR0$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                           _vscp_getGUID 4470                                    doDM@i 00DE  
                          __CFG_WRTD$OFF 000000                           Read_b_eep@badd 0008  
                         __CFG_EBTRB$OFF 000000                   Write_b_eep@GIE_BIT_VAL 000B  
                           _vscp_getZone 44C4                       vscp_writeAppReg@rv 00CD  
                                  _hours 008A                _vscp_getRegisterPagesUsed 450A  
                 __size_of_vscp_getEvent 002A                             _vscp_setGUID 4250  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 4510  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 422A                     _ECANSetOperationMode 43EE  
                        __initialization 42E4                             __end_of_doDM 2516  
                           __end_of_main 3AEC                             __end_of_init 40F8  
                       ?_vscp_readAppReg 0001                               _Read_b_eep 4496  
                _interrupt_at_low_vector 0818                         __end_of_Busy_eep 4504  
                         doDM@class_mask 00D3                           __CFG_OSC$HSPLL 000000  
                      ??_ECANSendMessage 001A                           ?i1_WriteTimer0 0001  
                                 ??_doDM 00CE                         ?_vscp_readStdReg 0001  
                  getVSCPFrame@pvscptype 001E                   ??_vscp_restoreDefaults 0048  
                                 ??_main 0052                                   ??_init 000D  
          __size_of_vscp_handleHeartbeat 003E                 ??_vscp_getManufacturerId 000A  
               ??_vscp_setManufacturerId 000D                 _vscp_handleProtocolEvent 130A  
                          __activetblptr 000002                        __RegsToCANID@type 000B  
             ECANReceiveMessage@msgFlags 0011            doApplicationOneSecondWork@bOn 00D0  
              __size_of__ECANPointBuffer 0076                                   _B0TXEN 006FC2  
                                 _B1TXEN 006FC3                                   _B2TXEN 006FC4  
                                 _B3TXEN 006FC5                                   _B4TXEN 006FC6  
                                 _B5TXEN 006FC7                   __size_of_doActionPulse 0200  
             ECANReceiveMessage@savedPtr 0012                                   _CANCON 000F6F  
                                 _EEDATA 000FA8                                   _EECON2 000FA7  
                                 _CIOCON 000F73                          __CFG_BBSIZ$2048 000000  
                          doDM@type_mask 00D6                       vscp_writeStdReg@rv 004D  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                               _OpenTimer0 4366  
                                 i1l7541 0824                                   i1l7551 0852  
                                 i1l7543 082C                                   i1l7561 0872  
                                 i1l7553 0856                                   i1l7545 0838  
                                 i1l7571 08A6                                   i1l7563 087C  
                                 i1l7555 085E                                   i1l7547 083E  
                                 i1l7565 0884                                   i1l7557 0862  
                                 i1l7549 0842                                   i1l7567 088E  
                                 i1l7559 0866                                   i1l7569 0898  
                        _init_app_eeprom 1DB4                                   _RXB0IF 007D20  
                                 _RXB1IF 007D21                  __end_of_doActionDisable 3DB0  
                         __CFG_WDTPS$128 000000                                   _RXF1EN 006EA1  
                 ECANReceiveMessage@data 000F                   ECANReceiveMessage@mode 0016  
                 ECANReceiveMessage@temp 0017                        getVSCPFrame@pData 0022  
                      getVSCPFrame@pSize 0021                       _vscp_newNodeOnline 4188  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0011  
 vscp_handleProtocolEvent@page_save_1294 00DB                           getCANFrame@pid 001C  
                         __CFG_STVREN$ON 000000                                ??___lbmod 0009  
                          _vscp_getEvent 41B2                                   _doWork 4508  
                       OpenTimer0@config 0008                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 000D                      vscp_writeAppReg@bOn 00CE  
        calculateSetFilterMask@rowfilter 003E               calculateSetFilterMask@mask 0036  
                    vscp_writeAppReg@reg 00CF               __end_of_vscp_setSegmentCRC 4432  
                    vscp_writeAppReg@val 0051                                   clear_0 42EA  
                                 clear_1 42F6                            ?_sendCANFrame 0037  
           vscp_handleProtocolEvent@byte 00E8                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 0092                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 000C  
              ??_vscp_getSubMinorVersion 0008     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 000A                     ??_vscp_newNodeOnline 004C  
                        ___lbmod@divisor 0008                          doActionToggle@i 00CD  
                             __accesstop 0060                  __end_of__initialization 42FC  
                        ___lbmod@counter 000A            __size_of_vscp_getMinorVersion 0002  
                        doActionStatus@i 00CD                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 4306                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0026                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001                            _doActionPulse 2CB0  
            __end_of_vscp_check_pstorage 42E4                  __size_of_vscp_setUserID 001C  
                            ?_Read_b_eep 0008                          ??i1_WriteTimer0 0003  
                    ?_vscp_writeRegister 00D0                           ??_sendCANFrame 003E  
                             _doActionOn 2808                  ?_calculateSetFilterMask 0001  
          calculateSetFilterMask@lastOID 0035               __end_of_vscp_getFamilyCode 44E2  
                          ?__RegsToCANID 0008              __size_of_ECANReceiveMessage 020E  
                     sendVSCPFrame@pData 0045               __end_of_vscp_getFamilyType 44D8  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 00D0  
        __size_of_vscp_setManufacturerId 0026                 __end_of_vscp_writeAppReg 130A  
                 getVSCPFrame@pvscpclass 0027                  __end_of_init_app_eeprom 2218  
            __end_of_vscp_setControlByte 441C                 __end_of_vscp_writeStdReg 391E  
          calculateSetFilterMask@rowmask 0031                       __RegsToCANID@Value 000E  
                   ??_vscp_writeRegister 0052          __end_of_vscp_handleDropNickname 415C  
                           _getVSCPFrame 3E46                               __pbssBANK0 0060  
                            ?_OpenTimer0 0001               __end_of_vscp_getBufferSize 450E  
                              ?_Busy_eep 0001                         ?_doActionDisable 000C  
                  vscp_writeRegister@reg 00D1                   ??_ECANSetOperationMode 0008  
     __size_of_vscp_getRegisterPagesUsed 0002                           ?_doActionPulse 000A  
        __end_of_vscp_getSubMinorVersion 4512                 ECANSetOperationMode@mode 0008  
                                _B0RXFUL 007107                                  _B1RXFUL 007187  
                   __ECANRxFilterHitInfo 0054                                  _B2RXFUL 007207  
                                _B3RXFUL 007287                                  _B4RXFUL 007307  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 000C  
                                _B5RXFUL 007387           __end_of_calculateSetFilterMask 1DB4  
                __size_of_doActionToggle 0152                         WriteTimer0@timer 000A  
                __size_of_doActionStatus 013C                                  _ECANCON 000F77  
                          ??_WriteTimer0 000A                           ??__RegsToCANID 000C  
                          ??_Write_b_eep 000B                    sendVSCPFrame@priority 0043  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72           SendInformationEvent@eventClass 00C6  
                    vscp_writeStdReg@reg 004E             __end_of_vscp_doOneSecondWork 3FEE  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0041  
                          ??_doActionOff 00C8          __end_of_interrupt_at_low_vector 08BA  
               vscp_readStdReg@code_1267 0015                        sendCANFrame@pdata 003C  
                  _vscp_handleProbeState 3AEC                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 3EBE               __end_of_vscp_getMatrixInfo 4348  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                    doActionStatus@dmflags 00CA  
                     _vscp_goActiveState 4348                   __size_of_sendVSCPFrame 00B6  
           __end_of_SendInformationEvent 3FA0             __end_of_vscp_getMajorVersion 4516  
                    __size_of_Read_b_eep 0012                       __size_of_vscp_init 0044  
                             ??_Busy_eep 0008                  SendInformationEvent@idx 0050  
                 _vscp_getManufacturerId 4448                   _vscp_setManufacturerId 422A  
                        _ECANSendMessage 305E                      ?_vscp_goActiveState 0001  
                                __Hparam 0000                          ??_vscp_getEvent 002C  
                                __Lparam 0000                       _vscp_node_substate 0094  
             __end_of_vscp_getSegmentCRC 44F6               ??_vscp_handleProtocolEvent 00D2  
                          ??_getCANFrame 001C                             doActionOff@i 00CC  
      __end_of_vscp_getRegisterPagesUsed 450C                 __size_of_vscp_getMDF_URL 0018  
                                ___lbmod 41DC                          getCANFrame@pdlc 001A  
                vscp_writeAppReg@val_682 00CC                                _FIFOEMPTY 007BA7  
                        __size_of_doWork 0002                             __psmallconst 08BE  
                   __end_of_init_app_ram 3818                       _vscp_sendHeartBeat 4204  
                                __pcinit 42E4                           _vscp_deviceURL 08BE  
                            ?_doActionOn 0051                                  __ramtop 0600  
                    __size_of_OpenTimer0 001E                                  __ptext0 3A06  
                                __ptext1 4508                                  __ptext2 2516  
                                __ptext3 3FA0                                  __ptext4 4204  
                                __ptext5 44BA                                  __ptext6 44C4  
                                __ptext7 4504                                  __ptext8 2218  
                                __ptext9 332C                           _vscp_getUserID 445C  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 004C  
                       doActionDisable@i 0011                    vscp_writeStdReg@value 0048  
                    ?_vscp_sendHeartBeat 00C6                 ??_vscp_handleSetNickname 000D  
                                _minutes 008B                                  _seconds 008D  
                    __end_of_WriteTimer0 4496                         ?_init_app_eeprom 0001  
                    __end_of_Write_b_eep 412C                        vscp_readAppReg@rv 000A  
                     vscp_getMDF_URL@idx 0009            vscp_handleProtocolEvent@bytes 00DF  
                   end_of_initialization 42FC                      __end_of_doActionOff 3A06  
           __end_of_vscp_handleHeartbeat 40BA                 __size_of_vscp_getSubzone 000A  
                          __Lmediumconst 0000                     __end_of_sendCANFrame 4038  
              vscp_handleProtocolEvent@i 00EC                vscp_handleProtocolEvent@j 00ED  
              vscp_handleProtocolEvent@k 00E6                          ??_doActionPulse 000B  
                 doActionDisable@dmflags 0010                     ??_vscp_sendHeartBeat 004C  
                         _vscp_sendEvent 4276                        ECANSendMessage@id 0012  
                      ECANSendMessage@pb 001B                                  postdec2 000FDD  
                __size_of_ECANInitialize 0096                           _vscp_setUserID 4384  
                                postinc0 000FEE                                  postinc2 000FDE  
                 __end_of_vscp_deviceURL 08DE      __end_of_vscp_writeNicknamePermanent 4448  
            _vscp_writeNicknamePermanent 4432                       __ECANPointBuffer@b 000B  
                          _sendVSCPFrame 3BA6                   __end_of_vscp_getUserID 4470  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0078CB  
                      __end_of_vscp_init 407C                           _vscp_probe_cnt 0095  
                              _PORTCbits 000F82                      __end_of_getCANFrame 4188  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
               __size_of_vscp_readAppReg 00B6                         ___lbmod@dividend 0009  
                       doActionPulse@arg 000A                           _vscp_statuscnt 0058  
               __size_of_vscp_readStdReg 01AE                         doActionPulse@val 000E  
                     _vscp_setSegmentCRC 441C               vscp_handleProtocolEvent@cb 00E4  
                __end_of_ECANSendMessage 31C8                        vscp_readStdReg@rv 001B  
                            ___lbmod@rem 000B                            ?__CANIDToRegs 0008  
                            doDM@dmflags 00DD                     __end_of__RegsToCANID 332C  
                    __size_of_doActionOn 029A                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 429C                               _vscp_error 4504  
                   _vscp_doOneSecondWork 3FA0                       i1WriteTimer0@timer 0003  
                             _vscp_timer 0088                   __end_of_vscp_setUserID 43A0  
                 vscp_sendHeartBeat@zone 004C                             ??_Read_b_eep 000A  
                         ?_sendVSCPFrame 003F              doApplicationOneSecondWork@i 00D2  
                         _doActionToggle 332C                           _doActionStatus 35CE  
                        ?_vscp_getUserID 0001                           __end_of_doWork 450A  
           __end_of_vscp_getMinorVersion 4514                              _WriteTimer0 4484  
                   _SendInformationEvent 3F34                     _vscp_getMajorVersion 4514  
                            _Write_b_eep 40F8                     ??_vscp_setSegmentCRC 000C  
                      ??_vscp_getMDF_URL 0008            ??_vscp_getBootLoaderAlgorithm 0008  
                      ?_vscp_writeAppReg 0051                      start_initialization 42E4  
                            _doActionOff 391E          __size_of_vscp_handleSetNickname 0024  
                     ??_vscp_writeAppReg 00C8                        ?_vscp_writeStdReg 0048  
                 _relay_protection_timer 0060                      __CFG_BOREN$BOACTIVE 000000  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 0008  
                     ??_vscp_writeStdReg 0049                       _vscp_getFamilyCode 44D8  
                         ??__CANIDToRegs 000F                       _vscp_getFamilyType 44CE  
                       doDM@class_filter 00D1                       __end_of_Read_b_eep 44A8  
                    sendVSCPFrame@nodeid 0042                        _vscp_readRegister 43BC  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 00E3  
                  ?_vscp_doOneSecondWork 0001                        __size_of_Busy_eep 0006  
                  ECANReceiveMessage@ptr 0018                      ?_vscp_getFamilyCode 0008  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 1948  
                              _doDM$2152 00D7                          ?_vscp_setUserID 000C  
                              _doDM$2153 00D8                                _doDM$2154 00D9  
                              _doDM$2155 00DA                                _doDM$2156 00DB  
                              _doDM$2157 00DC                      ?_vscp_getFamilyType 0008  
                  __size_of_init_app_ram 010E                 ?_vscp_handleDropNickname 0001  
                 __end_of_doActionToggle 347E                        ??_vscp_getSubzone 000A  
                 __end_of_doActionStatus 370A                 __end_of__ECANPointBuffer 3F34  
                      __CANIDToRegs@type 000E                              _getCANFrame 415C  
                               ??_doWork 0008                       _vscp_getBufferSize 450C  
            vscp_handleProtocolEvent@len 00E0                           doActionOff@arg 0051  
            vscp_handleProtocolEvent@pos 00DE               __end_of_ECANReceiveMessage 2CB0  
                         doActionOff@val 00CB                      ??_vscp_readRegister 001D  
         __size_of_vscp_goBootloaderMode 001C                    ?_SendInformationEvent 00C6  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 44BA  
          __end_of_vscp_goBootloaderMode 43BC                     _vscp_handleHeartbeat 407C  
                     __end_of_OpenTimer0 4384      __size_of_doApplicationOneSecondWork 02F2  
                    ?_vscp_getBufferSize 0001                           doActionPulse@i 0010  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 000C  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0052  
                   ??_vscp_getFamilyType 000C                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 00B2                         _vscp_alarmstatus 0055  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 004A  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 000C  
                          ?_vscp_setGUID 000C              __size_of_vscp_writeRegister 0022  
                       ?_ECANSendMessage 0012                        ??_vscp_readAppReg 000A  
                      sendVSCPFrame@size 0044                __end_of_vscp_readRegister 43D6  
                      _relay_pulse_flags 008C                             _init_app_ram 370A  
                      _relay_pulse_timer 0070             __size_of_vscp_setControlByte 0016  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 000C  
                   ??_vscp_getBufferSize 0008                              ?_vscp_error 0001  
                     _vscp_getMatrixInfo 4328                   _vscp_handleSetNickname 429C  
          __size_of_ECANSetOperationMode 0018                          ??_sendVSCPFrame 00B2  
                        ?_doActionToggle 0051                           _ECANInitialize 3DB0  
                        ?_doActionStatus 0051                 __size_of_doActionDisable 009E  
                               ?___lbmod 0008                      ?_vscp_getMatrixInfo 0001  
                calculateSetFilterMask@i 0043                  calculateSetFilterMask@j 0042  
                        vscp_getGUID@idx 000A                              __pintcodelo 0818  
                           ??_doActionOn 00C8                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1284 00E2                  vscp_readStdReg@idx_1268 001A  
             vscp_setManufacturerId@data 000C                             _sendCANFrame 3FEE  
                            __smallconst 08BE                        WriteTimer0@timer0 0008  
                     _vscp_getSegmentCRC 44EC                           ??_vscp_getGUID 000A  
                         ??_vscp_getZone 000A                              doActionOn@i 00CD  
         __end_of_vscp_getManufacturerId 445C           __end_of_vscp_setManufacturerId 4250  
                  __size_of__RegsToCANID 0164         vscp_handleProtocolEvent@pos_1283 00E1  
                        doDM@type_filter 00D5                           ??_vscp_setGUID 000D  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 0008  
                       _vscp_configtimer 0086                       doActionDisable@arg 000C  
                     doActionDisable@val 000F          SendInformationEvent@eventTypeId 00C7  
                 ??_vscp_doOneSecondWork 004D                   sendVSCPFrame@vscpclass 003F  
                               _LATBbits 000F8A                     _vscp_getMinorVersion 4512  
                               _LATCbits 000F8B                                _sendTimer 0084  
                     __end_of_doActionOn 2AA2                   __end_of_ECANInitialize 3E46  
                               i1u810_20 08A6                                 i1u810_21 08A4  
                               i1u804_20 082C                                 i1u804_21 082A  
                               i1u805_20 085E                                 i1u805_21 085C  
                               i1u806_20 0872                                 i1u806_21 0870  
                               i1u807_20 087C                                 i1u807_21 087A  
                               i1u808_20 0884                                 i1u808_21 0882  
                               i1u809_20 0898                                 i1u809_21 0896  
                       ECANSendMessage@i 0034                         ECANSendMessage@j 002F  
                  __end_of_vscp_getEvent 41DC                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 002C  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 000A                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                   ??_SendInformationEvent 004B  
                               _RXM1SIDH 000F1C                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000F1D               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000C  
                   __end_of__CANIDToRegs 35CE                             __RegsToCANID 31C8  
                     _vscp_probe_address 0057                          Write_b_eep@badd 0008  
                        Write_b_eep@bdat 000A                       doActionOff@dmflags 00CA  
            __size_of_vscp_goActiveState 001E                      getVSCPFrame@pNodeId 001F  
                              _vscp_init 4038                                _vscp_imsg 0097  
                              _vscp_hour 008F                                _vscp_omsg 00A5  
                       vscp_setGUID@data 000C        __size_of_vscp_handleProtocolEvent 063E  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
               SendInformationEvent@data 004D     __size_of_vscp_writeNicknamePermanent 0016  
     __end_of_doApplicationOneSecondWork 2808               _doApplicationOneSecondWork 2516  
                       _vscp_page_select 0052               __size_of_vscp_readRegister 001A  
                      _measurement_clock 0080                                 _Busy_eep 44FE  
                  ?_vscp_getMinorVersion 0001                 __size_of_init_app_eeprom 0464  
           __end_of_vscp_restoreDefaults 44FE                               _EECON1bits 000FA6  
                        ?_ECANInitialize 0001                 ??_calculateSetFilterMask 0012  
                               __Hrparam 0000                     ECANReceiveMessage@id 0014  
            __size_of_vscp_sendHeartBeat 0026                         ??_vscp_getUserID 000A  
                        _vscp_getMDF_URL 43D6                                 __Lrparam 0000  
                  __end_of_doActionPulse 2EB0                         __CANIDToRegs@val 000A  
                       __CANIDToRegs@ptr 0008                            doActionOn@arg 0051  
                          doActionOn@val 00CC                         _vscp_initledfunc 0056  
                       __size_of___lbmod 0028                   ??_vscp_handleHeartbeat 000D  
                       getCANFrame@flags 001D                             ?_WriteTimer0 0008  
                       getCANFrame@pdata 001B                             ?_Write_b_eep 0008  
                      ??_doActionDisable 000D               vscp_writeAppReg@bInfoEvent 00CB  
                             ?_vscp_init 0001                             ?_doActionOff 0051  
                               __ptext10 3D12                                 __ptext11 35CE  
                               __ptext20 1DB4                                 __ptext12 2CB0  
                               __ptext21 4384                                 __ptext13 2808  
                               __ptext30 44CE                                 __ptext22 422A  
                               __ptext14 391E                                 __ptext31 44D8  
                               __ptext23 4250                                 __ptext15 130A  
                               __ptext40 4514                                 __ptext32 450C  
                               __ptext24 08E0                                 __ptext16 41DC  
                               __ptext41 4188                                 __ptext33 450E  
                               __ptext25 3F34                                 __ptext17 4306  
                               __ptext50 4348                                 __ptext42 412C  
                               __ptext34 4448                                 __ptext26 1948  
                               __ptext18 3818                                 __ptext51 4276  
                               __ptext43 4038                                 __ptext35 445C  
                               __ptext27 43BC                                 __ptext19 44F6  
                               __ptext60 31C8                                 __ptext52 3BA6  
                               __ptext44 44E2                                 __ptext36 43D6  
                               __ptext28 2EB0                                 __ptext61 3EBE  
                               __ptext53 3FEE                                 __ptext45 429C  
                               __ptext37 4470                                 __ptext29 450A  
                               __ptext70 3DB0                                 __ptext62 42C0  
                               __ptext54 305E                                 __ptext46 407C  
                               __ptext38 4510                                 __ptext71 43EE  
                               __ptext63 4406                                 __ptext55 347E  
                               __ptext47 4328                                 __ptext39 4512  
                               __ptext72 4366                                 __ptext64 441C  
                               __ptext56 41B2                                 __ptext48 43A0  
                               __ptext73 370A                                 __ptext65 44EC  
                               __ptext57 3E46                                 __ptext49 3AEC  
                               __ptext74 4484                                 __ptext66 4432  
                               __ptext58 415C                                 __ptext75 3C5C  
                               __ptext67 40F8                                 __ptext59 2AA2  
                               __ptext76 4496                                 __ptext68 44FE  
                               __ptext69 40BA                                 __ptext78 44A8  
         vscp_goBootloaderMode@algorithm 000C                vscp_sendHeartBeat@subzone 00C6  
                          ?_getVSCPFrame 001E                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 44BA             calculateSetFilterMask@filter 003A  
                       ??_vscp_setUserID 000D                            __size_of_doDM 02FE  
                          __size_of_main 00E6                            __size_of_init 003E  
              __size_of_vscp_writeAppReg 0A2A                      _vscp_check_pstorage 42C0  
                          init_app_ram@i 000C           vscp_handleProtocolEvent@i_1282 00E7  
         vscp_handleProtocolEvent@i_1285 00EB           vscp_handleProtocolEvent@i_1293 00E5  
                   __end_of_vscp_getGUID 4484                __size_of_vscp_writeStdReg 0106  
                    ECANSendMessage@data 0016                 ECANSendMessage@tempBSEL0 0030  
                           ?_getCANFrame 001A                      ECANSendMessage@mode 002D  
                   __end_of_vscp_getZone 44CE                      ECANSendMessage@temp 0033  
                      ?__ECANPointBuffer 0008                        doActionOn@dmflags 00CB  
                      vscp_setUserID@idx 000D                     __end_of_vscp_setGUID 4276  
                     vscp_readAppReg@reg 000B                       ??__ECANPointBuffer 000B  
         vscp_handleProtocolEvent@offset 00DD                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 000D                         init_app_eeprom@i 0046  
                       init_app_eeprom@j 0047                      _vscp_setControlByte 4406  
            __size_of_vscp_setSegmentCRC 0016                          _vscp_readAppReg 3C5C  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000A                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 008E                          _vscp_readStdReg 2EB0  
           vscp_handleDropNickname@bytes 000D               __end_of_vscp_newNodeOnline 41B2  
                     _ECANReceiveMessage 2AA2                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 0090                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 43EE  
                   ?_vscp_setControlByte 0001                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001                         ??_doActionToggle 00C8  
       __size_of_vscp_getSubMinorVersion 0002                         ??_doActionStatus 00C8  
                        _vscp_node_state 0093                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019                      vscp_getMatrixInfo@i 0008  
        __size_of_calculateSetFilterMask 046C                  vscp_setControlByte@ctrl 000C  
                     ECANSendMessage@ptr 0035                        ??_init_app_eeprom 0044  
                  __size_of__CANIDToRegs 0150      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 4510              _vscp_getBootLoaderAlgorithm 450E  
       __size_of_interrupt_at_low_vector 00A2                   ECANSendMessage@dataLen 0018  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 000D                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 43A0             __end_of_ECANSetOperationMode 4406  
                   _vscp_restoreDefaults 44F6              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000A                  __end_of_vscp_getSubzone 44C4  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 4328                       __end_of_vscp_error 4508  
                 ECANSendMessage@tempPtr 0031           __end_of_vscp_handleSetNickname 42C0  
     vscp_handleProtocolEvent@bytes_1289 00E9                    ??_vscp_setControlByte 000C  
                   vscp_readRegister@reg 001D             ??_doApplicationOneSecondWork 00CD  
                           __CANIDToRegs 347E                   __size_ofi1_WriteTimer0 0012  
      vscp_handleProtocolEvent@page_save 00D9              __size_of_vscp_getBufferSize 0002  
      doApplicationOneSecondWork@ctrlreg 00D1                 __size_of_ECANSendMessage 016A  
                      doActionToggle@bOn 00CC                        doActionToggle@arg 0051  
