

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Wed Jun 17 11:21:05 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    88                           	psect	text77,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    91  0000                     
    92                           	psect	smallconst
    93  0008BA                     __psmallconst:
    94                           	opt stack 0
    95  0008BA                     _vscp_deviceURL:
    96                           	opt stack 0
    97  0008BA  77                 	db	119
    98  0008BB  77                 	db	119
    99  0008BC  77                 	db	119
   100  0008BD  2E                 	db	46
   101  0008BE  65                 	db	101
   102  0008BF  75                 	db	117
   103  0008C0  72                 	db	114
   104  0008C1  6F                 	db	111
   105  0008C2  73                 	db	115
   106  0008C3  6F                 	db	111
   107  0008C4  75                 	db	117
   108  0008C5  72                 	db	114
   109  0008C6  63                 	db	99
   110  0008C7  65                 	db	101
   111  0008C8  2E                 	db	46
   112  0008C9  73                 	db	115
   113  0008CA  65                 	db	101
   114  0008CB  2F                 	db	47
   115  0008CC  70                 	db	112
   116  0008CD  61                 	db	97
   117  0008CE  72                 	db	114
   118  0008CF  69                 	db	105
   119  0008D0  73                 	db	115
   120  0008D1  5F                 	db	95
   121  0008D2  30                 	db	48
   122  0008D3  31                 	db	49
   123  0008D4  30                 	db	48
   124  0008D5  2E                 	db	46
   125  0008D6  78                 	db	120
   126  0008D7  6D                 	db	109
   127  0008D8  6C                 	db	108
   128  0008D9  00                 	db	0
   129  0008DA                     __end_of_vscp_deviceURL:
   130                           	opt stack 0
   131  0000                     _BRGCON1	set	3952
   132  0000                     _BRGCON2	set	3953
   133  0000                     _BRGCON3	set	3954
   134  0000                     _BSEL0	set	3576
   135  0000                     _CANCON	set	3951
   136  0000                     _CIOCON	set	3955
   137  0000                     _ECANCON	set	3959
   138  0000                     _EEADR	set	4009
   139  0000                     _EECON1bits	set	4006
   140  0000                     _EECON2	set	4007
   141  0000                     _EEDATA	set	4008
   142  0000                     _INTCONbits	set	4082
   143  0000                     _LATBbits	set	3978
   144  0000                     _LATCbits	set	3979
   145  0000                     _MSEL0	set	3568
   146  0000                     _MSEL1	set	3569
   147  0000                     _MSEL2	set	3570
   148  0000                     _PIR2bits	set	4001
   149  0000                     _PORTA	set	3968
   150  0000                     _PORTB	set	3969
   151  0000                     _PORTC	set	3970
   152  0000                     _PORTCbits	set	3970
   153  0000                     _RXB1CONbits	set	3920
   154  0000                     _RXF0EIDH	set	3842
   155  0000                     _RXF0EIDL	set	3843
   156  0000                     _RXF0SIDH	set	3840
   157  0000                     _RXF0SIDL	set	3841
   158  0000                     _RXF1EIDH	set	3846
   159  0000                     _RXF1EIDL	set	3847
   160  0000                     _RXF1SIDL	set	3845
   161  0000                     _RXFBCON0	set	3552
   162  0000                     _RXFBCON1	set	3553
   163  0000                     _RXFBCON2	set	3554
   164  0000                     _RXFBCON3	set	3555
   165  0000                     _RXFBCON4	set	3556
   166  0000                     _RXFBCON5	set	3557
   167  0000                     _RXFBCON6	set	3558
   168  0000                     _RXFBCON7	set	3559
   169  0000                     _RXFCON0	set	3540
   170  0000                     _RXFCON1	set	3541
   171  0000                     _RXM0EIDH	set	3866
   172  0000                     _RXM0EIDL	set	3867
   173  0000                     _RXM0SIDH	set	3864
   174  0000                     _RXM0SIDL	set	3865
   175  0000                     _RXM1EIDH	set	3870
   176  0000                     _RXM1EIDL	set	3871
   177  0000                     _RXM1SIDL	set	3869
   178  0000                     _T0CON	set	4053
   179  0000                     _T0CONbits	set	4053
   180  0000                     _TMR0H	set	4055
   181  0000                     _TMR0L	set	4054
   182  0000                     _TRISA	set	3986
   183  0000                     _TRISB	set	3987
   184  0000                     _TRISC	set	3988
   185  0000                     _B0RXFUL	set	28935
   186  0000                     _B0TXEN	set	28610
   187  0000                     _B1RXFUL	set	29063
   188  0000                     _B1TXEN	set	28611
   189  0000                     _B2RXFUL	set	29191
   190  0000                     _B2TXEN	set	28612
   191  0000                     _B3RXFUL	set	29319
   192  0000                     _B3TXEN	set	28613
   193  0000                     _B4RXFUL	set	29447
   194  0000                     _B4TXEN	set	28614
   195  0000                     _B5RXFUL	set	29575
   196  0000                     _B5TXEN	set	28615
   197  0000                     _FIFOEMPTY	set	31655
   198  0000                     _IRXIF	set	32039
   199  0000                     _MDSEL0	set	31678
   200  0000                     _MDSEL1	set	31679
   201  0000                     _RXB0FILHIT0	set	31488
   202  0000                     _RXB0FUL	set	31495
   203  0000                     _RXB0IF	set	32032
   204  0000                     _RXB0OVFL	set	31655
   205  0000                     _RXB1IF	set	32033
   206  0000                     _RXB1OVFL	set	31654
   207  0000                     _RXF1EN	set	28321
   208  0000                     _RXM0EXIDM	set	30923
   209  0000                     _RXM1EXIDEN	set	30955
   210  0000                     _B0CON	set	3616
   211  0000                     _B1CON	set	3632
   212  0000                     _B2CON	set	3648
   213  0000                     _B3CON	set	3664
   214  0000                     _B4CON	set	3680
   215  0000                     _B5CON	set	3696
   216  0000                     _RXB0CON	set	3936
   217  0000                     _RXB1CON	set	3920
   218  0000                     _RXF1SIDH	set	3844
   219  0000                     _RXM1SIDH	set	3868
   220  0000                     _TXB0CON	set	3904
   221  0000                     _TXB1CON	set	3888
   222  0000                     _TXB2CON	set	3872
   223                           
   224                           ; #config settings
   225  0008DA  00                 	db	0	; dummy byte at the end
   226  0000                     
   227                           	psect	cinit
   228  003FFC                     __pcinit:
   229                           	opt stack 0
   230  003FFC                     start_initialization:
   231                           	opt stack 0
   232  003FFC                     __initialization:
   233                           	opt stack 0
   234                           
   235                           ; Clear objects allocated to BANK0 (81 bytes)
   236  003FFC  EE00  F060         	lfsr	0,__pbssBANK0
   237  004000  0E51               	movlw	81
   238  004002                     clear_0:
   239  004002  6AEE               	clrf	postinc0,c
   240  004004  06E8               	decf	wreg,f,c
   241  004006  E1FD               	bnz	clear_0
   242                           
   243                           ; Clear objects allocated to COMRAM (7 bytes)
   244  004008  EE00  F052         	lfsr	0,__pbssCOMRAM
   245  00400C  0E07               	movlw	7
   246  00400E                     clear_1:
   247  00400E  6AEE               	clrf	postinc0,c
   248  004010  06E8               	decf	wreg,f,c
   249  004012  E1FD               	bnz	clear_1
   250  004014                     end_of_initialization:
   251                           	opt stack 0
   252  004014                     __end_of__initialization:
   253                           	opt stack 0
   254  004014  0E00               	movlw	low (__Lmediumconst shr (0+16))
   255  004016  6EF8               	movwf	tblptru,c
   256  004018  0100               	movlb	0
   257  00401A  EF80  F01B         	goto	_main	;jump to C main() function
   258                           tblptru	equ	0xFF8
   259                           postinc0	equ	0xFEE
   260                           wreg	equ	0xFE8
   261                           
   262                           	psect	bssCOMRAM
   263  000052                     __pbssCOMRAM:
   264                           	opt stack 0
   265  000052                     _vscp_page_select:
   266                           	opt stack 0
   267  000052                     	ds	2
   268  000054                     __ECANRxFilterHitInfo:
   269                           	opt stack 0
   270  000054                     	ds	1
   271  000055                     _sendTimer:
   272                           	opt stack 0
   273  000055                     	ds	1
   274  000056                     _vscp_initledfunc:
   275                           	opt stack 0
   276  000056                     	ds	1
   277  000057                     _vscp_probe_address:
   278                           	opt stack 0
   279  000057                     	ds	1
   280  000058                     _vscp_statuscnt:
   281                           	opt stack 0
   282  000058                     	ds	1
   283                           tblptru	equ	0xFF8
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287                           	psect	bssBANK0
   288  000060                     __pbssBANK0:
   289                           	opt stack 0
   290  000060                     _relay_protection_timer:
   291                           	opt stack 0
   292  000060                     	ds	16
   293  000070                     _relay_pulse_timer:
   294                           	opt stack 0
   295  000070                     	ds	16
   296  000080                     _measurement_clock:
   297                           	opt stack 0
   298  000080                     	ds	4
   299  000084                     _vscp_configtimer:
   300                           	opt stack 0
   301  000084                     	ds	2
   302  000086                     _vscp_timer:
   303                           	opt stack 0
   304  000086                     	ds	2
   305  000088                     _hours:
   306                           	opt stack 0
   307  000088                     	ds	1
   308  000089                     _minutes:
   309                           	opt stack 0
   310  000089                     	ds	1
   311  00008A                     _relay_pulse_flags:
   312                           	opt stack 0
   313  00008A                     	ds	1
   314  00008B                     _seconds:
   315                           	opt stack 0
   316  00008B                     	ds	1
   317  00008C                     _vscp_alarmstatus:
   318                           	opt stack 0
   319  00008C                     	ds	1
   320  00008D                     _vscp_guid_reset:
   321                           	opt stack 0
   322  00008D                     	ds	1
   323  00008E                     _vscp_hour:
   324                           	opt stack 0
   325  00008E                     	ds	1
   326  00008F                     _vscp_initbtncnt:
   327                           	opt stack 0
   328  00008F                     	ds	1
   329  000090                     _vscp_minute:
   330                           	opt stack 0
   331  000090                     	ds	1
   332  000091                     _vscp_nickname:
   333                           	opt stack 0
   334  000091                     	ds	1
   335  000092                     _vscp_node_state:
   336                           	opt stack 0
   337  000092                     	ds	1
   338  000093                     _vscp_node_substate:
   339                           	opt stack 0
   340  000093                     	ds	1
   341  000094                     _vscp_probe_cnt:
   342                           	opt stack 0
   343  000094                     	ds	1
   344  000095                     _vscp_second:
   345                           	opt stack 0
   346  000095                     	ds	1
   347  000096                     _vscp_imsg:
   348                           	opt stack 0
   349  000096                     	ds	14
   350  0000A4                     _vscp_omsg:
   351                           	opt stack 0
   352  0000A4                     	ds	13
   353                           tblptru	equ	0xFF8
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           
   357                           	psect	cstackBANK0
   358  0000B1                     __pcstackBANK0:
   359                           	opt stack 0
   360  0000B1                     ??_sendVSCPFrame:
   361                           
   362                           ; 0 bytes @ 0x0
   363  0000B1                     	ds	20
   364  0000C5                     ?_SendInformationEvent:
   365                           	opt stack 0
   366  0000C5                     ?_vscp_sendHeartBeat:
   367                           	opt stack 0
   368  0000C5                     SendInformationEvent@eventClass:
   369                           	opt stack 0
   370  0000C5                     vscp_sendHeartBeat@subzone:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x14
   374  0000C5                     	ds	1
   375  0000C6                     SendInformationEvent@eventTypeId:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x15
   379  0000C6                     	ds	1
   380  0000C7                     ??_doActionOff:
   381  0000C7                     ??_doActionOn:
   382  0000C7                     ??_doActionStatus:
   383  0000C7                     ??_doActionToggle:
   384  0000C7                     ??_vscp_writeAppReg:
   385                           
   386                           ; 0 bytes @ 0x16
   387  0000C7                     	ds	2
   388  0000C9                     doActionOff@dmflags:
   389                           	opt stack 0
   390  0000C9                     doActionStatus@dmflags:
   391                           	opt stack 0
   392  0000C9                     doActionToggle@dmflags:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x18
   396  0000C9                     	ds	1
   397  0000CA                     vscp_writeAppReg@bInfoEvent:
   398                           	opt stack 0
   399  0000CA                     doActionOn@dmflags:
   400                           	opt stack 0
   401  0000CA                     doActionOff@val:
   402                           	opt stack 0
   403  0000CA                     doActionStatus@bOn:
   404                           	opt stack 0
   405  0000CA                     doActionToggle@val:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x19
   409  0000CA                     	ds	1
   410  0000CB                     vscp_writeAppReg@val_678:
   411                           	opt stack 0
   412  0000CB                     doActionOn@val:
   413                           	opt stack 0
   414  0000CB                     doActionOff@i:
   415                           	opt stack 0
   416  0000CB                     doActionStatus@val:
   417                           	opt stack 0
   418  0000CB                     doActionToggle@bOn:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x1A
   422  0000CB                     	ds	1
   423  0000CC                     ??_doApplicationOneSecondWork:
   424  0000CC                     vscp_writeAppReg@bOn:
   425                           	opt stack 0
   426  0000CC                     doActionOn@i:
   427                           	opt stack 0
   428  0000CC                     doActionStatus@i:
   429                           	opt stack 0
   430  0000CC                     doActionToggle@i:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x1B
   434  0000CC                     	ds	1
   435  0000CD                     ??_doDM:
   436  0000CD                     vscp_writeAppReg@rv:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x1C
   440  0000CD                     	ds	1
   441  0000CE                     vscp_writeAppReg@reg:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x1D
   445  0000CE                     	ds	1
   446  0000CF                     ?_vscp_writeRegister:
   447                           	opt stack 0
   448  0000CF                     doApplicationOneSecondWork@bOn:
   449                           	opt stack 0
   450  0000CF                     vscp_writeRegister@value:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x1E
   454  0000CF                     	ds	1
   455  0000D0                     doApplicationOneSecondWork@ctrlreg:
   456                           	opt stack 0
   457  0000D0                     vscp_writeRegister@reg:
   458                           	opt stack 0
   459  0000D0                     doDM@class_filter:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x1F
   463  0000D0                     	ds	1
   464  0000D1                     ??_vscp_handleProtocolEvent:
   465  0000D1                     doApplicationOneSecondWork@i:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x20
   469  0000D1                     	ds	1
   470  0000D2                     doDM@class_mask:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x21
   474  0000D2                     	ds	2
   475  0000D4                     doDM@type_filter:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x23
   479  0000D4                     	ds	1
   480  0000D5                     doDM@type_mask:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x24
   484  0000D5                     	ds	1
   485  0000D6                     _doDM$2146:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x25
   489  0000D6                     	ds	1
   490  0000D7                     _doDM$2147:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0x26
   494  0000D7                     	ds	1
   495  0000D8                     _doDM$2148:
   496                           	opt stack 0
   497  0000D8                     vscp_handleProtocolEvent@page_save:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x27
   501  0000D8                     	ds	1
   502  0000D9                     _doDM$2149:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x28
   506  0000D9                     	ds	1
   507  0000DA                     _doDM$2150:
   508                           	opt stack 0
   509  0000DA                     vscp_handleProtocolEvent@page_save_1290:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x29
   513  0000DA                     	ds	1
   514  0000DB                     _doDM$2151:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x2A
   518  0000DB                     	ds	1
   519  0000DC                     doDM@dmflags:
   520                           	opt stack 0
   521  0000DC                     vscp_handleProtocolEvent@offset:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x2B
   525  0000DC                     	ds	1
   526  0000DD                     doDM@i:
   527                           	opt stack 0
   528  0000DD                     vscp_handleProtocolEvent@pos:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x2C
   532  0000DD                     	ds	1
   533  0000DE                     vscp_handleProtocolEvent@bytes:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x2D
   537  0000DE                     	ds	1
   538  0000DF                     vscp_handleProtocolEvent@len:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x2E
   542  0000DF                     	ds	1
   543  0000E0                     vscp_handleProtocolEvent@pos_1279:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x2F
   547  0000E0                     	ds	1
   548  0000E1                     vscp_handleProtocolEvent@len_1280:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x30
   552  0000E1                     	ds	1
   553  0000E2                     vscp_handleProtocolEvent@bytes_this_time:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x31
   557  0000E2                     	ds	1
   558  0000E3                     vscp_handleProtocolEvent@cb:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x32
   562  0000E3                     	ds	1
   563  0000E4                     vscp_handleProtocolEvent@i_1289:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x33
   567  0000E4                     	ds	1
   568  0000E5                     vscp_handleProtocolEvent@k:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x34
   572  0000E5                     	ds	1
   573  0000E6                     vscp_handleProtocolEvent@bytes_1286:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x35
   577  0000E6                     	ds	1
   578  0000E7                     vscp_handleProtocolEvent@i_1278:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x36
   582  0000E7                     	ds	1
   583  0000E8                     vscp_handleProtocolEvent@byte:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0x37
   587  0000E8                     	ds	1
   588  0000E9                     vscp_handleProtocolEvent@i_1281:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x38
   592  0000E9                     	ds	1
   593  0000EA                     vscp_handleProtocolEvent@i:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x39
   597  0000EA                     	ds	1
   598  0000EB                     vscp_handleProtocolEvent@j:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x3A
   602  0000EB                     	ds	1
   603                           tblptru	equ	0xFF8
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           
   607                           	psect	cstackCOMRAM
   608  000001                     __pcstackCOMRAM:
   609                           	opt stack 0
   610  000001                     ?i1_WriteTimer0:
   611                           	opt stack 0
   612  000001                     i1WriteTimer0@timer0:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x0
   616  000001                     	ds	2
   617  000003                     i1WriteTimer0@timer:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x2
   621  000003                     	ds	2
   622  000005                     ??_interrupt_at_low_vector:
   623                           
   624                           ; 0 bytes @ 0x4
   625  000005                     	ds	3
   626  000008                     ?_WriteTimer0:
   627                           	opt stack 0
   628  000008                     ?_writeEEPROM:
   629                           	opt stack 0
   630  000008                     ?__CANIDToRegs:
   631                           	opt stack 0
   632  000008                     ?__RegsToCANID:
   633                           	opt stack 0
   634  000008                     ??_vscp_getMDF_URL:
   635  000008                     ?_readEEPROM:
   636                           	opt stack 0
   637  000008                     ?___lbmod:
   638                           	opt stack 0
   639  000008                     ?__ECANPointBuffer:
   640                           	opt stack 0
   641  000008                     ?_vscp_getFamilyCode:
   642                           	opt stack 0
   643  000008                     ?_vscp_getFamilyType:
   644                           	opt stack 0
   645  000008                     vscp_getMatrixInfo@i:
   646                           	opt stack 0
   647  000008                     ECANSetOperationMode@mode:
   648                           	opt stack 0
   649  000008                     OpenTimer0@config:
   650                           	opt stack 0
   651  000008                     ___lbmod@divisor:
   652                           	opt stack 0
   653  000008                     __CANIDToRegs@ptr:
   654                           	opt stack 0
   655  000008                     __RegsToCANID@ptr:
   656                           	opt stack 0
   657  000008                     writeEEPROM@address:
   658                           	opt stack 0
   659  000008                     readEEPROM@address:
   660                           	opt stack 0
   661  000008                     WriteTimer0@timer0:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x7
   665  000008                     	ds	1
   666  000009                     vscp_getMDF_URL@idx:
   667                           	opt stack 0
   668  000009                     ___lbmod@dividend:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x8
   672  000009                     	ds	1
   673  00000A                     __RegsToCANID@val:
   674                           	opt stack 0
   675  00000A                     writeEEPROM@data:
   676                           	opt stack 0
   677  00000A                     readEEPROM@data:
   678                           	opt stack 0
   679  00000A                     ___lbmod@counter:
   680                           	opt stack 0
   681  00000A                     WriteTimer0@timer:
   682                           	opt stack 0
   683  00000A                     __CANIDToRegs@val:
   684                           	opt stack 0
   685                           
   686                           ; 4 bytes @ 0x9
   687  00000A                     	ds	1
   688  00000B                     ??_init_app_eeprom:
   689  00000B                     ??_init_app_ram:
   690  00000B                     ?_doActionPulse:
   691                           	opt stack 0
   692  00000B                     ?_doActionDisable:
   693                           	opt stack 0
   694  00000B                     ?_vscp_setGUID:
   695                           	opt stack 0
   696  00000B                     ?_vscp_setManufacturerId:
   697                           	opt stack 0
   698  00000B                     ?_vscp_setUserID:
   699                           	opt stack 0
   700  00000B                     vscp_setGUID@data:
   701                           	opt stack 0
   702  00000B                     vscp_setManufacturerId@data:
   703                           	opt stack 0
   704  00000B                     vscp_writeNicknamePermanent@nickname:
   705                           	opt stack 0
   706  00000B                     vscp_readAppReg@rv:
   707                           	opt stack 0
   708  00000B                     doActionPulse@arg:
   709                           	opt stack 0
   710  00000B                     doActionDisable@arg:
   711                           	opt stack 0
   712  00000B                     vscp_getGUID@idx:
   713                           	opt stack 0
   714  00000B                     vscp_getUserID@idx:
   715                           	opt stack 0
   716  00000B                     vscp_setUserID@data:
   717                           	opt stack 0
   718  00000B                     vscp_getManufacturerId@idx:
   719                           	opt stack 0
   720  00000B                     vscp_setSegmentCRC@crc:
   721                           	opt stack 0
   722  00000B                     vscp_setControlByte@ctrl:
   723                           	opt stack 0
   724  00000B                     vscp_goBootloaderMode@algorithm:
   725                           	opt stack 0
   726  00000B                     __RegsToCANID@type:
   727                           	opt stack 0
   728  00000B                     __ECANPointBuffer@b:
   729                           	opt stack 0
   730  00000B                     ___lbmod@rem:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0xA
   734  00000B                     	ds	1
   735  00000C                     ??_doActionPulse:
   736  00000C                     ??_doActionDisable:
   737  00000C                     ??__RegsToCANID:
   738  00000C                     ??_vscp_readStdReg:
   739  00000C                     vscp_setGUID@idx:
   740                           	opt stack 0
   741  00000C                     vscp_setManufacturerId@idx:
   742                           	opt stack 0
   743  00000C                     vscp_readAppReg@reg:
   744                           	opt stack 0
   745  00000C                     vscp_setUserID@idx:
   746                           	opt stack 0
   747  00000C                     vscp_handleDropNickname@bytes:
   748                           	opt stack 0
   749  00000C                     __ECANPointBuffer@pt:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0xB
   753  00000C                     	ds	1
   754  00000D                     init_app_ram@i:
   755                           	opt stack 0
   756  00000D                     init_app_eeprom@i:
   757                           	opt stack 0
   758                           
   759                           ; 1 bytes @ 0xC
   760  00000D                     	ds	1
   761  00000E                     init_app_eeprom@j:
   762                           	opt stack 0
   763  00000E                     doActionDisable@dmflags:
   764                           	opt stack 0
   765  00000E                     __CANIDToRegs@type:
   766                           	opt stack 0
   767  00000E                     __RegsToCANID@Value:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0xD
   771  00000E                     	ds	1
   772  00000F                     ??__CANIDToRegs:
   773  00000F                     ?_ECANReceiveMessage:
   774                           	opt stack 0
   775  00000F                     ?_vscp_writeStdReg:
   776                           	opt stack 0
   777  00000F                     doActionPulse@dmflags:
   778                           	opt stack 0
   779  00000F                     doActionDisable@val:
   780                           	opt stack 0
   781  00000F                     ECANReceiveMessage@data:
   782                           	opt stack 0
   783  00000F                     vscp_writeStdReg@value:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0xE
   787  00000F                     	ds	1
   788  000010                     ??_vscp_writeStdReg:
   789  000010                     doActionPulse@val:
   790                           	opt stack 0
   791  000010                     doActionDisable@i:
   792                           	opt stack 0
   793  000010                     ECANReceiveMessage@dataLen:
   794                           	opt stack 0
   795                           
   796                           ; 1 bytes @ 0xF
   797  000010                     	ds	1
   798  000011                     doActionPulse@i:
   799                           	opt stack 0
   800  000011                     ECANReceiveMessage@msgFlags:
   801                           	opt stack 0
   802  000011                     __CANIDToRegs@Value:
   803                           	opt stack 0
   804  000011                     vscp_readStdReg@code:
   805                           	opt stack 0
   806                           
   807                           ; 4 bytes @ 0x10
   808  000011                     	ds	1
   809  000012                     ??_calculateSetFilterMask:
   810  000012                     ?_ECANSendMessage:
   811                           	opt stack 0
   812  000012                     ECANReceiveMessage@savedPtr:
   813                           	opt stack 0
   814  000012                     ECANSendMessage@id:
   815                           	opt stack 0
   816                           
   817                           ; 4 bytes @ 0x11
   818  000012                     	ds	2
   819  000014                     ECANReceiveMessage@id:
   820                           	opt stack 0
   821  000014                     vscp_writeStdReg@rv:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x13
   825  000014                     	ds	1
   826  000015                     ECANReceiveMessage@i:
   827                           	opt stack 0
   828  000015                     vscp_writeStdReg@reg:
   829                           	opt stack 0
   830  000015                     vscp_readStdReg@code_1263:
   831                           	opt stack 0
   832                           
   833                           ; 4 bytes @ 0x14
   834  000015                     	ds	1
   835  000016                     ECANReceiveMessage@mode:
   836                           	opt stack 0
   837  000016                     ECANSendMessage@data:
   838                           	opt stack 0
   839                           
   840                           ; 2 bytes @ 0x15
   841  000016                     	ds	1
   842  000017                     ECANReceiveMessage@temp:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x16
   846  000017                     	ds	1
   847  000018                     ECANSendMessage@dataLen:
   848                           	opt stack 0
   849  000018                     ECANReceiveMessage@ptr:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x17
   853  000018                     	ds	1
   854  000019                     ECANSendMessage@msgFlags:
   855                           	opt stack 0
   856  000019                     vscp_readStdReg@idx:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x18
   860  000019                     	ds	1
   861  00001A                     ??_ECANSendMessage:
   862  00001A                     ?_getCANFrame:
   863                           	opt stack 0
   864  00001A                     getCANFrame@pdlc:
   865                           	opt stack 0
   866  00001A                     vscp_readStdReg@idx_1264:
   867                           	opt stack 0
   868                           
   869                           ; 1 bytes @ 0x19
   870  00001A                     	ds	1
   871  00001B                     getCANFrame@pdata:
   872                           	opt stack 0
   873  00001B                     vscp_readStdReg@rv:
   874                           	opt stack 0
   875  00001B                     ECANSendMessage@pb:
   876                           	opt stack 0
   877                           
   878                           ; 18 bytes @ 0x1A
   879  00001B                     	ds	1
   880  00001C                     getCANFrame@pid:
   881                           	opt stack 0
   882  00001C                     vscp_readStdReg@reg:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0x1B
   886  00001C                     	ds	1
   887  00001D                     getCANFrame@flags:
   888                           	opt stack 0
   889  00001D                     vscp_readRegister@reg:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x1C
   893  00001D                     	ds	1
   894  00001E                     ?_getVSCPFrame:
   895                           	opt stack 0
   896  00001E                     getVSCPFrame@pvscptype:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x1D
   900  00001E                     	ds	1
   901  00001F                     getVSCPFrame@pNodeId:
   902                           	opt stack 0
   903                           
   904                           ; 1 bytes @ 0x1E
   905  00001F                     	ds	1
   906  000020                     getVSCPFrame@pPriority:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x1F
   910  000020                     	ds	1
   911  000021                     getVSCPFrame@pSize:
   912                           	opt stack 0
   913                           
   914                           ; 1 bytes @ 0x20
   915  000021                     	ds	1
   916  000022                     getVSCPFrame@pData:
   917                           	opt stack 0
   918                           
   919                           ; 1 bytes @ 0x21
   920  000022                     	ds	1
   921  000023                     ??_getVSCPFrame:
   922                           
   923                           ; 0 bytes @ 0x22
   924  000023                     	ds	4
   925  000027                     getVSCPFrame@pvscpclass:
   926                           	opt stack 0
   927                           
   928                           ; 1 bytes @ 0x26
   929  000027                     	ds	1
   930  000028                     getVSCPFrame@id:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x27
   934  000028                     	ds	4
   935  00002C                     vscp_getEvent@rv:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x2B
   939  00002C                     	ds	1
   940  00002D                     ECANSendMessage@mode:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x2C
   944  00002D                     	ds	1
   945  00002E                     ECANSendMessage@buffers:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x2D
   949  00002E                     	ds	1
   950  00002F                     ECANSendMessage@j:
   951                           	opt stack 0
   952                           
   953                           ; 1 bytes @ 0x2E
   954  00002F                     	ds	1
   955  000030                     ECANSendMessage@tempBSEL0:
   956                           	opt stack 0
   957                           
   958                           ; 1 bytes @ 0x2F
   959  000030                     	ds	1
   960  000031                     ECANSendMessage@tempPtr:
   961                           	opt stack 0
   962  000031                     calculateSetFilterMask@rowmask:
   963                           	opt stack 0
   964                           
   965                           ; 4 bytes @ 0x30
   966  000031                     	ds	2
   967  000033                     ECANSendMessage@temp:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0x32
   971  000033                     	ds	1
   972  000034                     ECANSendMessage@i:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x33
   976  000034                     	ds	1
   977  000035                     calculateSetFilterMask@lastOID:
   978                           	opt stack 0
   979  000035                     ECANSendMessage@ptr:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x34
   983  000035                     	ds	1
   984  000036                     calculateSetFilterMask@mask:
   985                           	opt stack 0
   986                           
   987                           ; 4 bytes @ 0x35
   988  000036                     	ds	1
   989  000037                     ?_sendCANFrame:
   990                           	opt stack 0
   991  000037                     sendCANFrame@id:
   992                           	opt stack 0
   993                           
   994                           ; 4 bytes @ 0x36
   995  000037                     	ds	3
   996  00003A                     calculateSetFilterMask@filter:
   997                           	opt stack 0
   998                           
   999                           ; 4 bytes @ 0x39
  1000  00003A                     	ds	1
  1001  00003B                     sendCANFrame@dlc:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0x3A
  1005  00003B                     	ds	1
  1006  00003C                     sendCANFrame@pdata:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x3B
  1010  00003C                     	ds	2
  1011  00003E                     sendCANFrame@rv:
  1012                           	opt stack 0
  1013  00003E                     calculateSetFilterMask@rowfilter:
  1014                           	opt stack 0
  1015                           
  1016                           ; 4 bytes @ 0x3D
  1017  00003E                     	ds	1
  1018  00003F                     ?_sendVSCPFrame:
  1019                           	opt stack 0
  1020  00003F                     sendVSCPFrame@vscpclass:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0x3E
  1024  00003F                     	ds	2
  1025  000041                     sendVSCPFrame@vscptype:
  1026                           	opt stack 0
  1027                           
  1028                           ; 1 bytes @ 0x40
  1029  000041                     	ds	1
  1030  000042                     sendVSCPFrame@nodeid:
  1031                           	opt stack 0
  1032  000042                     calculateSetFilterMask@j:
  1033                           	opt stack 0
  1034                           
  1035                           ; 1 bytes @ 0x41
  1036  000042                     	ds	1
  1037  000043                     sendVSCPFrame@priority:
  1038                           	opt stack 0
  1039  000043                     calculateSetFilterMask@i:
  1040                           	opt stack 0
  1041                           
  1042                           ; 1 bytes @ 0x42
  1043  000043                     	ds	1
  1044  000044                     sendVSCPFrame@size:
  1045                           	opt stack 0
  1046                           
  1047                           ; 1 bytes @ 0x43
  1048  000044                     	ds	1
  1049  000045                     sendVSCPFrame@pData:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0x44
  1053  000045                     	ds	2
  1054  000047                     sendVSCPFrame@id:
  1055                           	opt stack 0
  1056                           
  1057                           ; 4 bytes @ 0x46
  1058  000047                     	ds	4
  1059  00004B                     ??_SendInformationEvent:
  1060  00004B                     
  1061                           ; 0 bytes @ 0x4A
  1062  00004B                     	ds	1
  1063  00004C                     ??_vscp_newNodeOnline:
  1064  00004C                     vscp_sendHeartBeat@zone:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x4B
  1068  00004C                     	ds	1
  1069  00004D                     ??_vscp_doOneSecondWork:
  1070  00004D                     SendInformationEvent@data:
  1071                           	opt stack 0
  1072                           
  1073                           ; 3 bytes @ 0x4C
  1074  00004D                     	ds	3
  1075  000050                     SendInformationEvent@idx:
  1076                           	opt stack 0
  1077                           
  1078                           ; 1 bytes @ 0x4F
  1079  000050                     	ds	1
  1080  000051                     ?_doActionOff:
  1081                           	opt stack 0
  1082  000051                     ?_doActionOn:
  1083                           	opt stack 0
  1084  000051                     ?_doActionStatus:
  1085                           	opt stack 0
  1086  000051                     ?_doActionToggle:
  1087                           	opt stack 0
  1088  000051                     ?_vscp_writeAppReg:
  1089                           	opt stack 0
  1090  000051                     vscp_writeAppReg@val:
  1091                           	opt stack 0
  1092  000051                     doActionOn@arg:
  1093                           	opt stack 0
  1094  000051                     doActionOff@arg:
  1095                           	opt stack 0
  1096  000051                     doActionStatus@arg:
  1097                           	opt stack 0
  1098  000051                     doActionToggle@arg:
  1099                           	opt stack 0
  1100                           
  1101                           ; 1 bytes @ 0x50
  1102  000051                     	ds	1
  1103  000052                     tblptru	equ	0xFF8
  1104                           postinc0	equ	0xFEE
  1105                           wreg	equ	0xFE8
  1106                           
  1107                           ; 0 bytes @ 0x51
  1108 ;;
  1109 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1110 ;;
  1111 ;; *************** function _main *****************
  1112 ;; Defined at:
  1113 ;;		line 190 in file "../main.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;		None
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;		None
  1118 ;; Return value:  Size  Location     Type
  1119 ;;		None               void
  1120 ;; Registers used:
  1121 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : F/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1127 ;;      Params:         0       0       0       0       0       0       0
  1128 ;;      Locals:         0       0       0       0       0       0       0
  1129 ;;      Temps:          0       0       0       0       0       0       0
  1130 ;;      Totals:         0       0       0       0       0       0       0
  1131 ;;Total ram usage:        0 bytes
  1132 ;; Hardware stack levels required when called:   10
  1133 ;; This function calls:
  1134 ;;		_init
  1135 ;;		_vscp_check_pstorage
  1136 ;;		_init_app_eeprom
  1137 ;;		_init_app_ram
  1138 ;;		_vscp_init
  1139 ;;		_writeEEPROM
  1140 ;;		_vscp_getEvent
  1141 ;;		_vscp_goActiveState
  1142 ;;		_vscp_handleProbeState
  1143 ;;		_vscp_handleProtocolEvent
  1144 ;;		_doDM
  1145 ;;		_vscp_error
  1146 ;;		_vscp_doOneSecondWork
  1147 ;;		_doApplicationOneSecondWork
  1148 ;;		_doWork
  1149 ;; This function is called by:
  1150 ;;		Startup code after reset
  1151 ;; This function uses a non-reentrant model
  1152 ;;
  1153                           
  1154                           	psect	text0
  1155  003700                     __ptext0:
  1156                           	opt stack 0
  1157  003700                     _main:
  1158                           	opt stack 21
  1159                           
  1160                           ;main.c: 191: init();
  1161                           
  1162                           ;incstack = 0
  1163                           ;incstack = 0
  1164  003700  EC16  F01F         	call	_init	;wreg free
  1165                           
  1166                           ;main.c: 195: if ( !vscp_check_pstorage() ) {
  1167  003704  ECEC  F01F         	call	_vscp_check_pstorage	;wreg free
  1168  003708  0900               	iorlw	0
  1169  00370A  E104               	bnz	l9223
  1170                           
  1171                           ;main.c: 198: init_app_eeprom();
  1172  00370C  EC89  F00E         	call	_init_app_eeprom	;wreg free
  1173                           
  1174                           ;main.c: 199: init_app_ram();
  1175  003710  ECF0  F019         	call	_init_app_ram	;wreg free
  1176  003714                     l9223:
  1177                           
  1178                           ;main.c: 202: }
  1179                           ;main.c: 204: vscp_init();
  1180  003714  ECB5  F01E         	call	_vscp_init	;wreg free
  1181  003718                     l149:
  1182                           
  1183                           ; BSR set to: 0
  1184  003718  0004               	clrwdt		;# 
  1185                           
  1186                           ;main.c: 210: if ( ( vscp_initbtncnt > 250 ) &&
  1187                           ;main.c: 211: ( 0x01 != vscp_node_state ) ) {
  1188  00371A  0EFA               	movlw	250
  1189  00371C  0100               	movlb	0	; () banked
  1190  00371E  658F               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1191  003720  D00C               	goto	l9233
  1192                           
  1193                           ; BSR set to: 0
  1194  003722  0592               	decf	_vscp_node_state& (0+255),w,b
  1195  003724  E00A               	bz	l9233
  1196                           
  1197                           ; BSR set to: 0
  1198                           ;main.c: 214: vscp_nickname = 0xff;
  1199  003726  6991               	setf	_vscp_nickname& (0+255),b
  1200                           
  1201                           ; BSR set to: 0
  1202                           ;main.c: 215: writeEEPROM( 0x01, 0xff );
  1203  003728  6A09               	clrf	?_writeEEPROM+1,c
  1204  00372A  0E01               	movlw	1
  1205  00372C  6E08               	movwf	?_writeEEPROM,c
  1206  00372E  0EFF               	movlw	255
  1207  003730  680A               	setf	?_writeEEPROM+2,c
  1208  003732  ECC7  F01F         	call	_writeEEPROM	;wreg free
  1209                           
  1210                           ;main.c: 216: vscp_init();
  1211  003736  ECB5  F01E         	call	_vscp_init	;wreg free
  1212  00373A                     l9233:
  1213                           
  1214                           ; BSR set to: 0
  1215                           ;main.c: 218: }
  1216                           ;main.c: 221: vscp_imsg.flags = 0;
  1217  00373A  6B96               	clrf	_vscp_imsg& (0+255),b
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;main.c: 222: vscp_getEvent();
  1221  00373C  EC78  F01F         	call	_vscp_getEvent	;wreg free
  1222                           
  1223                           ;main.c: 224: switch ( vscp_node_state ) {
  1224  003740  D01C               	goto	l9257
  1225  003742                     l9237:
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;main.c: 229: if (0xff == vscp_nickname) {
  1229  003742  2991               	incf	_vscp_nickname& (0+255),w,b
  1230  003744  E103               	bnz	l9241
  1231                           
  1232                           ; BSR set to: 0
  1233                           ;main.c: 231: vscp_node_state = 0x01;
  1234  003746  0E01               	movlw	1
  1235  003748  6F92               	movwf	_vscp_node_state& (0+255),b
  1236                           
  1237                           ;main.c: 232: } else {
  1238  00374A  D023               	goto	l9259
  1239  00374C                     l9241:
  1240                           
  1241                           ; BSR set to: 0
  1242                           ;main.c: 234: vscp_node_state = 0x03;
  1243  00374C  0E03               	movlw	3
  1244  00374E  6F92               	movwf	_vscp_node_state& (0+255),b
  1245  003750                     l9243:
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;main.c: 235: vscp_goActiveState();
  1249  003750  EC52  F020         	call	_vscp_goActiveState	;wreg free
  1250  003754  D01E               	goto	l9259
  1251  003756                     l9245:
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;main.c: 240: vscp_handleProbeState();
  1255  003756  EC4D  F01C         	call	_vscp_handleProbeState	;wreg free
  1256                           
  1257                           ;main.c: 241: break;
  1258  00375A  D01B               	goto	l9259
  1259  00375C                     l158:
  1260                           
  1261                           ; BSR set to: 0
  1262                           ;main.c: 250: if (vscp_imsg.flags & 0x80) {
  1263  00375C  AF96               	btfss	_vscp_imsg& (0+255),7,b
  1264  00375E  D019               	goto	l9259
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;main.c: 252: if ( 0 == vscp_imsg.vscp_class ) {
  1268  003760  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  1269  003762  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1270  003764  B4D8               	btfsc	status,2,c
  1271                           
  1272                           ; BSR set to: 0
  1273                           ;main.c: 255: vscp_handleProtocolEvent();
  1274  003766  EC45  F009         	call	_vscp_handleProtocolEvent	;wreg free
  1275                           
  1276                           ;main.c: 257: }
  1277                           ;main.c: 259: doDM();
  1278  00376A  EC44  F010         	call	_doDM	;wreg free
  1279  00376E  D011               	goto	l9259
  1280  003770                     l9253:
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;main.c: 265: vscp_error();
  1284  003770  EC23  F021         	call	_vscp_error	;wreg free
  1285                           
  1286                           ;main.c: 266: break;
  1287  003774  D00E               	goto	l9259
  1288  003776                     l162:
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;main.c: 269: vscp_node_state = 0x00;
  1292  003776  6B92               	clrf	_vscp_node_state& (0+255),b
  1293                           
  1294                           ;main.c: 270: break;
  1295  003778  D00C               	goto	l9259
  1296  00377A                     l9257:
  1297  00377A  0100               	movlb	0	; () banked
  1298  00377C  5192               	movf	_vscp_node_state& (0+255),w,b
  1299                           
  1300                           ; Switch size 1, requested type "speed"
  1301                           ; Number of cases is 5, Range of values is 0 to 4
  1302                           ; switch strategies available:
  1303                           ; Name         Instructions Cycles
  1304                           ; simple_byte           16     9 (average)
  1305                           ;	Chosen strategy is simple_byte
  1306  00377E  E0E1               	bz	l9237
  1307  003780  0A01               	xorlw	1	; case 1
  1308  003782  E0E9               	bz	l9245
  1309  003784  0A03               	xorlw	3	; case 2
  1310  003786  E0E4               	bz	l9243
  1311  003788  0A01               	xorlw	1	; case 3
  1312  00378A  E0E8               	bz	l158
  1313  00378C  0A07               	xorlw	7	; case 4
  1314  00378E  E0F0               	bz	l9253
  1315  003790  D7F2               	goto	l162
  1316  003792                     l9259:
  1317                           
  1318                           ;main.c: 275: if ( measurement_clock > 1000 ) {
  1319  003792  0EE9               	movlw	233
  1320  003794  0100               	movlb	0	; () banked
  1321  003796  5D80               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1322  003798  0E03               	movlw	3
  1323  00379A  5981               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1324  00379C  0E00               	movlw	0
  1325  00379E  5982               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1326  0037A0  0E00               	movlw	0
  1327  0037A2  5983               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1328  0037A4  E30C               	bnc	l9271
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;main.c: 277: measurement_clock = 0;
  1332  0037A6  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
  1333  0037A8  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1334  0037AA  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1335  0037AC  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;main.c: 279: sendTimer++;
  1339  0037AE  2A55               	incf	_sendTimer,f,c
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;main.c: 282: vscp_doOneSecondWork();
  1343  0037B0  EC8E  F01E         	call	_vscp_doOneSecondWork	;wreg free
  1344                           
  1345                           ; BSR set to: 0
  1346                           ;main.c: 286: if ( 0x03 == vscp_node_state ) {
  1347  0037B4  5192               	movf	_vscp_node_state& (0+255),w,b
  1348  0037B6  0A03               	xorlw	3
  1349  0037B8  B4D8               	btfsc	status,2,c
  1350                           
  1351                           ; BSR set to: 0
  1352                           ;main.c: 289: doApplicationOneSecondWork();
  1353  0037BA  ECDD  F011         	call	_doApplicationOneSecondWork	;wreg free
  1354  0037BE                     l9271:
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;main.c: 291: }
  1358                           ;main.c: 293: }
  1359                           ;main.c: 296: if ( seconds > 59 ) {
  1360  0037BE  0E3B               	movlw	59
  1361  0037C0  658B               	cpfsgt	_seconds& (0+255),b
  1362  0037C2  D00B               	goto	l9287
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;main.c: 298: seconds = 0;
  1366  0037C4  6B8B               	clrf	_seconds& (0+255),b
  1367                           
  1368                           ; BSR set to: 0
  1369                           ;main.c: 299: minutes++;
  1370  0037C6  2B89               	incf	_minutes& (0+255),f,b
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;main.c: 301: if ( minutes > 59 ) {
  1374  0037C8  0E3B               	movlw	59
  1375  0037CA  6589               	cpfsgt	_minutes& (0+255),b
  1376  0037CC  D002               	goto	l9283
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;main.c: 302: minutes = 0;
  1380  0037CE  6B89               	clrf	_minutes& (0+255),b
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;main.c: 303: hours++;
  1384  0037D0  2B88               	incf	_hours& (0+255),f,b
  1385  0037D2                     l9283:
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;main.c: 304: }
  1389                           ;main.c: 306: if ( hours > 23 ) hours = 0;
  1390  0037D2  0E17               	movlw	23
  1391  0037D4  6588               	cpfsgt	_hours& (0+255),b
  1392  0037D6  D001               	goto	l9287
  1393                           
  1394                           ; BSR set to: 0
  1395  0037D8  6B88               	clrf	_hours& (0+255),b
  1396  0037DA                     l9287:
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;main.c: 308: }
  1400                           ;main.c: 310: doWork();
  1401  0037DA  EC25  F021         	call	_doWork	;wreg free
  1402  0037DE  D79C               	goto	l149
  1403  0037E0                     __end_of_main:
  1404                           	opt stack 0
  1405                           tblptru	equ	0xFF8
  1406                           postinc0	equ	0xFEE
  1407                           wreg	equ	0xFE8
  1408                           status	equ	0xFD8
  1409                           
  1410 ;; *************** function _doWork *****************
  1411 ;; Defined at:
  1412 ;;		line 887 in file "../main.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;		None
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;		None
  1417 ;; Return value:  Size  Location     Type
  1418 ;;		None               void
  1419 ;; Registers used:
  1420 ;;		wreg, status,2, status,0
  1421 ;; Tracked objects:
  1422 ;;		On entry : F/0
  1423 ;;		On exit  : F/0
  1424 ;;		Unchanged: F/0
  1425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1426 ;;      Params:         0       0       0       0       0       0       0
  1427 ;;      Locals:         0       0       0       0       0       0       0
  1428 ;;      Temps:          0       0       0       0       0       0       0
  1429 ;;      Totals:         0       0       0       0       0       0       0
  1430 ;;Total ram usage:        0 bytes
  1431 ;; Hardware stack levels used:    1
  1432 ;; Hardware stack levels required when called:    2
  1433 ;; This function calls:
  1434 ;;		Nothing
  1435 ;; This function is called by:
  1436 ;;		_main
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440                           	psect	text1
  1441  00424A                     __ptext1:
  1442                           	opt stack 0
  1443  00424A                     _doWork:
  1444                           	opt stack 28
  1445                           
  1446                           ; BSR set to: 0
  1447                           
  1448                           ; BSR set to: 0
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;incstack = 0
  1452                           ;incstack = 0
  1453  00424A  0012               	return	
  1454  00424C                     __end_of_doWork:
  1455                           	opt stack 0
  1456                           tblptru	equ	0xFF8
  1457                           postinc0	equ	0xFEE
  1458                           wreg	equ	0xFE8
  1459                           status	equ	0xFD8
  1460                           
  1461 ;; *************** function _doApplicationOneSecondWork *****************
  1462 ;; Defined at:
  1463 ;;		line 592 in file "../main.c"
  1464 ;; Parameters:    Size  Location     Type
  1465 ;;		None
  1466 ;; Auto vars:     Size  Location     Type
  1467 ;;  i               1   32[BANK0 ] unsigned char 
  1468 ;;  ctrlreg         1   31[BANK0 ] unsigned char 
  1469 ;;  bOn             1   30[BANK0 ] enum E15660
  1470 ;; Return value:  Size  Location     Type
  1471 ;;		None               void
  1472 ;; Registers used:
  1473 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1474 ;; Tracked objects:
  1475 ;;		On entry : F/0
  1476 ;;		On exit  : F/0
  1477 ;;		Unchanged: 0/0
  1478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1479 ;;      Params:         0       0       0       0       0       0       0
  1480 ;;      Locals:         0       3       0       0       0       0       0
  1481 ;;      Temps:          0       3       0       0       0       0       0
  1482 ;;      Totals:         0       6       0       0       0       0       0
  1483 ;;Total ram usage:        6 bytes
  1484 ;; Hardware stack levels used:    1
  1485 ;; Hardware stack levels required when called:    8
  1486 ;; This function calls:
  1487 ;;		_readEEPROM
  1488 ;;		_doActionOff
  1489 ;;		_SendInformationEvent
  1490 ;; This function is called by:
  1491 ;;		_main
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           	psect	text2
  1496  0023BA                     __ptext2:
  1497                           	opt stack 0
  1498  0023BA                     _doApplicationOneSecondWork:
  1499                           	opt stack 22
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;main.c: 594: uint8_t i;
  1503                           ;main.c: 595: uint8_t ctrlreg;
  1504                           ;main.c: 596: BOOL bOn = 0;
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;incstack = 0
  1508                           ;incstack = 0
  1509  0023BA  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1510                           
  1511                           ;main.c: 598: for ( i = 0; i < 8; i++ ) {
  1512  0023BC  6BD1               	clrf	doApplicationOneSecondWork@i& (0+255),b
  1513  0023BE                     l9785:
  1514                           
  1515                           ; BSR set to: 0
  1516  0023BE  0E07               	movlw	7
  1517  0023C0  65D1               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  1518  0023C2  D001               	goto	l9789
  1519  0023C4  D172               	goto	l234
  1520  0023C6                     l9789:
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;main.c: 601: ctrlreg = readEEPROM( 0x43 + 10 + i );
  1524  0023C6  0E4D               	movlw	77
  1525  0023C8  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1526  0023CA  6E08               	movwf	?_readEEPROM,c
  1527  0023CC  6A09               	clrf	?_readEEPROM+1,c
  1528  0023CE  0E00               	movlw	0
  1529  0023D0  2209               	addwfc	?_readEEPROM+1,f,c
  1530  0023D2  ECEF  F020         	call	_readEEPROM	;wreg free
  1531  0023D6  0100               	movlb	0	; () banked
  1532  0023D8  6FD0               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;main.c: 604: if ( !( ctrlreg & 0x80 ) ) continue;
  1536  0023DA  AFD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  1537  0023DC  D164               	goto	l9873
  1538                           
  1539                           ; BSR set to: 0
  1540                           ;main.c: 608: if ( relay_protection_timer[ i ] ) {
  1541                           
  1542                           ; BSR set to: 0
  1543  0023DE  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1544  0023E0  0D02               	mullw	2
  1545  0023E2  50F3               	movf	prodl,w,c
  1546  0023E4  0F60               	addlw	low _relay_protection_timer
  1547  0023E6  6ED9               	movwf	fsr2l,c
  1548  0023E8  6ADA               	clrf	fsr2h,c
  1549  0023EA  50DE               	movf	postinc2,w,c
  1550  0023EC  10DD               	iorwf	postdec2,w,c
  1551  0023EE  E037               	bz	l9807
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;main.c: 610: relay_protection_timer[ i ]--;
  1555  0023F0  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1556  0023F2  0D02               	mullw	2
  1557  0023F4  50F3               	movf	prodl,w,c
  1558  0023F6  0F60               	addlw	low _relay_protection_timer
  1559  0023F8  6ED9               	movwf	fsr2l,c
  1560  0023FA  6ADA               	clrf	fsr2h,c
  1561  0023FC  06DE               	decf	postinc2,f,c
  1562  0023FE  0E00               	movlw	0
  1563  002400  5ADD               	subwfb	postdec2,f,c
  1564                           
  1565                           ;main.c: 613: if ( !relay_protection_timer[ i ] &&
  1566                           ;main.c: 614: ( readEEPROM( 0x43 + 10 + i ) &
  1567                           ;main.c: 615: 0x04 ) ) {
  1568  002402  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1569  002404  0D02               	mullw	2
  1570  002406  50F3               	movf	prodl,w,c
  1571  002408  0F60               	addlw	low _relay_protection_timer
  1572  00240A  6ED9               	movwf	fsr2l,c
  1573  00240C  6ADA               	clrf	fsr2h,c
  1574  00240E  50DE               	movf	postinc2,w,c
  1575  002410  10DD               	iorwf	postdec2,w,c
  1576  002412  E146               	bnz	l9809
  1577                           
  1578                           ; BSR set to: 0
  1579  002414  0E4D               	movlw	77
  1580  002416  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1581  002418  6E08               	movwf	?_readEEPROM,c
  1582  00241A  6A09               	clrf	?_readEEPROM+1,c
  1583  00241C  0E00               	movlw	0
  1584  00241E  2209               	addwfc	?_readEEPROM+1,f,c
  1585  002420  ECEF  F020         	call	_readEEPROM	;wreg free
  1586  002424  0100               	movlb	0	; () banked
  1587  002426  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1588  002428  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1589  00242A  D03A               	goto	l9809
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;main.c: 618: doActionOff( 0, (1 << i) );
  1593  00242C  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1594  002430  0E01               	movlw	1
  1595  002432  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1596  002434  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1597  002436  D002               	goto	u12174
  1598  002438                     u12175:
  1599  002438  90D8               	bcf	status,0,c
  1600  00243A  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1601  00243C                     u12174:
  1602  00243C  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1603  00243E  D7FC               	goto	u12175
  1604  002440  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1605  002442  6E51               	movwf	?_doActionOff,c
  1606  002444  0E00               	movlw	0
  1607  002446  ECF0  F01B         	call	_doActionOff
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;main.c: 621: if ( ctrlreg & 0x02 ) {
  1611  00244A  A3D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  1612  00244C  D029               	goto	l9809
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;main.c: 622: SendInformationEvent( i, 1,
  1616                           ;main.c: 623: 2 );
  1617  00244E  0E01               	movlw	1
  1618  002450  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1619  002452  0E02               	movlw	2
  1620  002454  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1621  002456  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1622  002458  EC58  F01E         	call	_SendInformationEvent
  1623  00245C  D021               	goto	l9809
  1624  00245E                     l9807:
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;main.c: 628: else {
  1628                           ;main.c: 630: relay_protection_timer[ i ] =
  1629                           ;main.c: 631: readEEPROM(0x43 + 34 + i ) * 256 +
  1630                           ;main.c: 632: readEEPROM(0x43 + 35 + i );
  1631  00245E  0E65               	movlw	101
  1632  002460  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1633  002462  6E08               	movwf	?_readEEPROM,c
  1634  002464  6A09               	clrf	?_readEEPROM+1,c
  1635  002466  0E00               	movlw	0
  1636  002468  2209               	addwfc	?_readEEPROM+1,f,c
  1637  00246A  ECEF  F020         	call	_readEEPROM	;wreg free
  1638  00246E  0100               	movlb	0	; () banked
  1639  002470  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1640  002472  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1641  002474  0E66               	movlw	102
  1642  002476  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1643  002478  6E08               	movwf	?_readEEPROM,c
  1644  00247A  6A09               	clrf	?_readEEPROM+1,c
  1645  00247C  0E00               	movlw	0
  1646  00247E  2209               	addwfc	?_readEEPROM+1,f,c
  1647  002480  ECEF  F020         	call	_readEEPROM	;wreg free
  1648  002484  0100               	movlb	0	; () banked
  1649  002486  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1650  002488  0E00               	movlw	0
  1651  00248A  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1652  00248C  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1653  00248E  0D02               	mullw	2
  1654  002490  50F3               	movf	prodl,w,c
  1655  002492  0F60               	addlw	low _relay_protection_timer
  1656  002494  6ED9               	movwf	fsr2l,c
  1657  002496  6ADA               	clrf	fsr2h,c
  1658  002498  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1659  00249C  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1660  0024A0                     l9809:
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;main.c: 633: }
  1664                           ;main.c: 636: if ( relay_pulse_flags & (1 << i) ) {
  1665  0024A0  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1666  0024A4  0E01               	movlw	1
  1667  0024A6  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1668  0024A8  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1669  0024AA  D002               	goto	u12194
  1670  0024AC                     u12195:
  1671  0024AC  90D8               	bcf	status,0,c
  1672  0024AE  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1673  0024B0                     u12194:
  1674  0024B0  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1675  0024B2  D7FC               	goto	u12195
  1676  0024B4  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1677  0024B6  158A               	andwf	_relay_pulse_flags& (0+255),w,b
  1678  0024B8  E101 D0F5          	bz	l9873
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;main.c: 638: if ( relay_pulse_timer[ i ] ) {
  1682  0024BC  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1683  0024BE  0D02               	mullw	2
  1684  0024C0  50F3               	movf	prodl,w,c
  1685  0024C2  0F70               	addlw	low _relay_pulse_timer
  1686  0024C4  6ED9               	movwf	fsr2l,c
  1687  0024C6  6ADA               	clrf	fsr2h,c
  1688  0024C8  50DE               	movf	postinc2,w,c
  1689  0024CA  10DD               	iorwf	postdec2,w,c
  1690  0024CC  E101 D0CC          	bz	l9871
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;main.c: 640: relay_pulse_timer[ i ]--;
  1694  0024D0  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1695  0024D2  0D02               	mullw	2
  1696  0024D4  50F3               	movf	prodl,w,c
  1697  0024D6  0F70               	addlw	low _relay_pulse_timer
  1698  0024D8  6ED9               	movwf	fsr2l,c
  1699  0024DA  6ADA               	clrf	fsr2h,c
  1700  0024DC  06DE               	decf	postinc2,f,c
  1701  0024DE  0E00               	movlw	0
  1702  0024E0  5ADD               	subwfb	postdec2,f,c
  1703                           
  1704                           ;main.c: 643: if ( !relay_pulse_timer[ i ] ) {
  1705  0024E2  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1706  0024E4  0D02               	mullw	2
  1707  0024E6  50F3               	movf	prodl,w,c
  1708  0024E8  0F70               	addlw	low _relay_pulse_timer
  1709  0024EA  6ED9               	movwf	fsr2l,c
  1710  0024EC  6ADA               	clrf	fsr2h,c
  1711  0024EE  50DE               	movf	postinc2,w,c
  1712  0024F0  10DD               	iorwf	postdec2,w,c
  1713  0024F2  E02E               	bz	l9847
  1714  0024F4  D0D8               	goto	l9873
  1715  0024F6                     l204:
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;main.c: 648: if ( LATBbits.LATB4 ) {
  1719  0024F6  A88A               	btfss	3978,4,c	;volatile
  1720  0024F8  D002               	goto	l205
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;main.c: 649: LATBbits.LATB4 = 0;
  1724  0024FA  988A               	bcf	3978,4,c	;volatile
  1725  0024FC  D025               	goto	L6
  1726  0024FE                     l205:
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;main.c: 652: LATBbits.LATB4 = 1;
  1730  0024FE  888A               	bsf	3978,4,c	;volatile
  1731  002500                     l9819:
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;main.c: 653: bOn = 1;
  1735  002500  0E01               	movlw	1
  1736  002502  6FCF               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  1737  002504  D033               	goto	l9849
  1738  002506                     l208:
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;main.c: 658: if ( LATBbits.LATB1 ) {
  1742  002506  A28A               	btfss	3978,1,c	;volatile
  1743  002508  D002               	goto	l209
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;main.c: 659: LATBbits.LATB1 = 0;
  1747  00250A  928A               	bcf	3978,1,c	;volatile
  1748  00250C  D01D               	goto	L6
  1749  00250E                     l209:
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;main.c: 662: LATBbits.LATB1 = 1;
  1753  00250E  828A               	bsf	3978,1,c	;volatile
  1754  002510  D7F7               	goto	l9819
  1755  002512                     l211:
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;main.c: 668: if ( LATBbits.LATB0 ) {
  1759  002512  A08A               	btfss	3978,0,c	;volatile
  1760  002514  D002               	goto	l212
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;main.c: 669: LATBbits.LATB0 = 0;
  1764  002516  908A               	bcf	3978,0,c	;volatile
  1765  002518  D017               	goto	L6
  1766  00251A                     l212:
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;main.c: 672: LATBbits.LATB0 = 1;
  1770  00251A  808A               	bsf	3978,0,c	;volatile
  1771  00251C  D7F1               	goto	l9819
  1772  00251E                     l214:
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;main.c: 678: if ( LATCbits.LATC7 ) {
  1776  00251E  AE8B               	btfss	3979,7,c	;volatile
  1777  002520  D002               	goto	l215
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;main.c: 679: LATCbits.LATC7 = 0;
  1781  002522  9E8B               	bcf	3979,7,c	;volatile
  1782  002524  D011               	goto	L6
  1783  002526                     l215:
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;main.c: 682: LATCbits.LATC7 = 1;
  1787  002526  8E8B               	bsf	3979,7,c	;volatile
  1788  002528  D7EB               	goto	l9819
  1789  00252A                     l217:
  1790                           
  1791                           ; BSR set to: 0
  1792                           ;main.c: 688: if ( LATCbits.LATC6 ) {
  1793  00252A  AC8B               	btfss	3979,6,c	;volatile
  1794  00252C  D002               	goto	l218
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;main.c: 689: LATCbits.LATC6 = 0;
  1798  00252E  9C8B               	bcf	3979,6,c	;volatile
  1799  002530  D00B               	goto	L6
  1800  002532                     l218:
  1801                           
  1802                           ; BSR set to: 0
  1803                           ;main.c: 692: LATCbits.LATC6 = 1;
  1804  002532  8C8B               	bsf	3979,6,c	;volatile
  1805  002534  D7E5               	goto	l9819
  1806  002536                     l220:
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;main.c: 698: if ( LATCbits.LATC5 ) {
  1810  002536  AA8B               	btfss	3979,5,c	;volatile
  1811  002538  D002               	goto	l221
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;main.c: 699: LATCbits.LATC5 = 0;
  1815  00253A  9A8B               	bcf	3979,5,c	;volatile
  1816  00253C  D005               	goto	L6
  1817  00253E                     l221:
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;main.c: 702: LATCbits.LATC5 = 1;
  1821  00253E  8A8B               	bsf	3979,5,c	;volatile
  1822  002540  D7DF               	goto	l9819
  1823  002542                     l223:
  1824                           
  1825                           ; BSR set to: 0
  1826                           ;main.c: 708: if ( LATCbits.LATC4 ) {
  1827  002542  A88B               	btfss	3979,4,c	;volatile
  1828  002544  D003               	goto	l224
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;main.c: 709: LATCbits.LATC4 = 0;
  1832  002546  988B               	bcf	3979,4,c	;volatile
  1833  002548                     L6:
  1834                           
  1835                           ;main.c: 710: bOn = 0;
  1836  002548  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1837                           
  1838                           ;main.c: 711: } else {
  1839  00254A  D010               	goto	l9849
  1840  00254C                     l224:
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;main.c: 712: LATCbits.LATC4 = 1;
  1844  00254C  888B               	bsf	3979,4,c	;volatile
  1845  00254E  D7D8               	goto	l9819
  1846  002550                     l9847:
  1847                           
  1848                           ; BSR set to: 0
  1849  002550  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1850                           
  1851                           ; Switch size 1, requested type "speed"
  1852                           ; Number of cases is 7, Range of values is 0 to 6
  1853                           ; switch strategies available:
  1854                           ; Name         Instructions Cycles
  1855                           ; simple_byte           22    12 (average)
  1856                           ;	Chosen strategy is simple_byte
  1857  002552  E0D1               	bz	l204
  1858  002554  0A01               	xorlw	1	; case 1
  1859  002556  E0D7               	bz	l208
  1860  002558  0A03               	xorlw	3	; case 2
  1861  00255A  E0DB               	bz	l211
  1862  00255C  0A01               	xorlw	1	; case 3
  1863  00255E  E0DF               	bz	l214
  1864  002560  0A07               	xorlw	7	; case 4
  1865  002562  E0E3               	bz	l217
  1866  002564  0A01               	xorlw	1	; case 5
  1867  002566  E0E7               	bz	l220
  1868  002568  0A03               	xorlw	3	; case 6
  1869  00256A  E0EB               	bz	l223
  1870  00256C                     l9849:
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;main.c: 720: relay_pulse_timer[ i ] =
  1874                           ;main.c: 721: readEEPROM( 0x43 +
  1875                           ;main.c: 722: 18 + 2*i ) * 256 +
  1876                           ;main.c: 723: readEEPROM( 0x43 +
  1877                           ;main.c: 724: 19 + 2*i );
  1878  00256C  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1879  00256E  0D02               	mullw	2
  1880  002570  0E55               	movlw	85
  1881  002572  24F3               	addwf	prodl,w,c
  1882  002574  6E08               	movwf	?_readEEPROM,c
  1883  002576  0E00               	movlw	0
  1884  002578  20F4               	addwfc	prodh,w,c
  1885  00257A  6E09               	movwf	?_readEEPROM+1,c
  1886  00257C  ECEF  F020         	call	_readEEPROM	;wreg free
  1887  002580  0100               	movlb	0	; () banked
  1888  002582  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1889  002584  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1890  002586  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1891  002588  0D02               	mullw	2
  1892  00258A  0E56               	movlw	86
  1893  00258C  24F3               	addwf	prodl,w,c
  1894  00258E  6E08               	movwf	?_readEEPROM,c
  1895  002590  0E00               	movlw	0
  1896  002592  20F4               	addwfc	prodh,w,c
  1897  002594  6E09               	movwf	?_readEEPROM+1,c
  1898  002596  ECEF  F020         	call	_readEEPROM	;wreg free
  1899  00259A  0100               	movlb	0	; () banked
  1900  00259C  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1901  00259E  0E00               	movlw	0
  1902  0025A0  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1903  0025A2  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1904  0025A4  0D02               	mullw	2
  1905  0025A6  50F3               	movf	prodl,w,c
  1906  0025A8  0F70               	addlw	low _relay_pulse_timer
  1907  0025AA  6ED9               	movwf	fsr2l,c
  1908  0025AC  6ADA               	clrf	fsr2h,c
  1909  0025AE  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1910  0025B2  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;main.c: 726: if ( bOn ) {
  1914  0025B6  51CF               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  1915  0025B8  E044               	bz	l226
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;main.c: 729: if ( readEEPROM( 0x43 + 10 + i ) & 0x04 ) {
  1919  0025BA  0E4D               	movlw	77
  1920  0025BC  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1921  0025BE  6E08               	movwf	?_readEEPROM,c
  1922  0025C0  6A09               	clrf	?_readEEPROM+1,c
  1923  0025C2  0E00               	movlw	0
  1924  0025C4  2209               	addwfc	?_readEEPROM+1,f,c
  1925  0025C6  ECEF  F020         	call	_readEEPROM	;wreg free
  1926  0025CA  0100               	movlb	0	; () banked
  1927  0025CC  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1928  0025CE  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1929  0025D0  D025               	goto	l9857
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;main.c: 730: relay_protection_timer[ i ] =
  1933                           ;main.c: 731: readEEPROM( 0x43 + 34 + 2*i ) * 256 +
  1934                           ;main.c: 732: readEEPROM( 0x43 + 35 + 2*i );
  1935  0025D2  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1936  0025D4  0D02               	mullw	2
  1937  0025D6  0E65               	movlw	101
  1938  0025D8  24F3               	addwf	prodl,w,c
  1939  0025DA  6E08               	movwf	?_readEEPROM,c
  1940  0025DC  0E00               	movlw	0
  1941  0025DE  20F4               	addwfc	prodh,w,c
  1942  0025E0  6E09               	movwf	?_readEEPROM+1,c
  1943  0025E2  ECEF  F020         	call	_readEEPROM	;wreg free
  1944  0025E6  0100               	movlb	0	; () banked
  1945  0025E8  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1946  0025EA  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1947  0025EC  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1948  0025EE  0D02               	mullw	2
  1949  0025F0  0E66               	movlw	102
  1950  0025F2  24F3               	addwf	prodl,w,c
  1951  0025F4  6E08               	movwf	?_readEEPROM,c
  1952  0025F6  0E00               	movlw	0
  1953  0025F8  20F4               	addwfc	prodh,w,c
  1954  0025FA  6E09               	movwf	?_readEEPROM+1,c
  1955  0025FC  ECEF  F020         	call	_readEEPROM	;wreg free
  1956  002600  0100               	movlb	0	; () banked
  1957  002602  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1958  002604  0E00               	movlw	0
  1959  002606  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1960  002608  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1961  00260A  0D02               	mullw	2
  1962  00260C  50F3               	movf	prodl,w,c
  1963  00260E  0F60               	addlw	low _relay_protection_timer
  1964  002610  6ED9               	movwf	fsr2l,c
  1965  002612  6ADA               	clrf	fsr2h,c
  1966  002614  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1967  002618  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1968  00261C                     l9857:
  1969                           
  1970                           ; BSR set to: 0
  1971                           ;main.c: 733: }
  1972                           ;main.c: 735: if ( ctrlreg & 0x08 ) {
  1973  00261C  A7D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  1974  00261E  D007               	goto	l9861
  1975                           
  1976                           ; BSR set to: 0
  1977                           ;main.c: 736: SendInformationEvent( i, 20,
  1978                           ;main.c: 737: 3 );
  1979  002620  0E14               	movlw	20
  1980  002622  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1981  002624  0E03               	movlw	3
  1982  002626  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1983  002628  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1984  00262A  EC58  F01E         	call	_SendInformationEvent
  1985  00262E                     l9861:
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;main.c: 738: }
  1989                           ;main.c: 740: if ( ctrlreg & 0x20 ) {
  1990  00262E  ABD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  1991  002630  D03A               	goto	l9873
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;main.c: 741: SendInformationEvent( i, 20,
  1995                           ;main.c: 742: 25 );
  1996  002632  0E14               	movlw	20
  1997  002634  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1998  002636  0E19               	movlw	25
  1999  002638  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2000  00263A  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2001  00263C  EC58  F01E         	call	_SendInformationEvent
  2002  002640  D032               	goto	l9873
  2003  002642                     l226:
  2004                           
  2005                           ; BSR set to: 0
  2006                           ;main.c: 747: if ( ctrlreg & 0x10 ) {
  2007  002642  A9D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2008  002644  D007               	goto	l9867
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;main.c: 748: SendInformationEvent( i, 20,
  2012                           ;main.c: 749: 4 );
  2013  002646  0E14               	movlw	20
  2014  002648  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2015  00264A  0E04               	movlw	4
  2016  00264C  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2017  00264E  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2018  002650  EC58  F01E         	call	_SendInformationEvent
  2019  002654                     l9867:
  2020                           
  2021                           ; BSR set to: 0
  2022                           ;main.c: 750: }
  2023                           ;main.c: 752: if (ctrlreg & 0x40) {
  2024  002654  ADD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),6,b
  2025  002656  D027               	goto	l9873
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;main.c: 753: SendInformationEvent( i, 20,
  2029                           ;main.c: 754: 24 );
  2030  002658  0E14               	movlw	20
  2031  00265A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2032  00265C  0E18               	movlw	24
  2033  00265E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2034  002660  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2035  002662  EC58  F01E         	call	_SendInformationEvent
  2036  002666  D01F               	goto	l9873
  2037  002668                     l9871:
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;main.c: 761: else {
  2041                           ;main.c: 763: relay_pulse_timer[ 0 ] =
  2042                           ;main.c: 764: readEEPROM( 0x43 + 18 + 2*i ) * 256 +
  2043                           ;main.c: 765: readEEPROM( 0x43 + 19 + 2*i );
  2044  002668  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2045  00266A  0D02               	mullw	2
  2046  00266C  0E56               	movlw	86
  2047  00266E  24F3               	addwf	prodl,w,c
  2048  002670  6E08               	movwf	?_readEEPROM,c
  2049  002672  0E00               	movlw	0
  2050  002674  20F4               	addwfc	prodh,w,c
  2051  002676  6E09               	movwf	?_readEEPROM+1,c
  2052  002678  ECEF  F020         	call	_readEEPROM	;wreg free
  2053  00267C  0100               	movlb	0	; () banked
  2054  00267E  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2055  002680  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2056  002682  0D02               	mullw	2
  2057  002684  0E55               	movlw	85
  2058  002686  24F3               	addwf	prodl,w,c
  2059  002688  6E08               	movwf	?_readEEPROM,c
  2060  00268A  0E00               	movlw	0
  2061  00268C  20F4               	addwfc	prodh,w,c
  2062  00268E  6E09               	movwf	?_readEEPROM+1,c
  2063  002690  ECEF  F020         	call	_readEEPROM	;wreg free
  2064  002694  0100               	movlb	0	; () banked
  2065  002696  6FCE               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2066  002698  6BCD               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2067  00269A  51CC               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2068  00269C  25CD               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2069  00269E  6F70               	movwf	_relay_pulse_timer& (0+255),b
  2070  0026A0  0E00               	movlw	0
  2071  0026A2  21CE               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2072  0026A4  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  2073  0026A6                     l9873:
  2074                           
  2075                           ; BSR set to: 0
  2076  0026A6  2BD1               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  2077  0026A8  D68A               	goto	l9785
  2078  0026AA                     l234:
  2079                           
  2080                           ; BSR set to: 0
  2081  0026AA  0012               	return	
  2082  0026AC                     __end_of_doApplicationOneSecondWork:
  2083                           	opt stack 0
  2084                           tblptru	equ	0xFF8
  2085                           prodh	equ	0xFF4
  2086                           prodl	equ	0xFF3
  2087                           postinc0	equ	0xFEE
  2088                           wreg	equ	0xFE8
  2089                           postinc2	equ	0xFDE
  2090                           postdec2	equ	0xFDD
  2091                           fsr2h	equ	0xFDA
  2092                           fsr2l	equ	0xFD9
  2093                           status	equ	0xFD8
  2094                           
  2095 ;; *************** function _vscp_doOneSecondWork *****************
  2096 ;; Defined at:
  2097 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;		None
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;		None
  2102 ;; Return value:  Size  Location     Type
  2103 ;;		None               void
  2104 ;; Registers used:
  2105 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2106 ;; Tracked objects:
  2107 ;;		On entry : F/0
  2108 ;;		On exit  : F/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2111 ;;      Params:         0       0       0       0       0       0       0
  2112 ;;      Locals:         0       0       0       0       0       0       0
  2113 ;;      Temps:          1       0       0       0       0       0       0
  2114 ;;      Totals:         1       0       0       0       0       0       0
  2115 ;;Total ram usage:        1 bytes
  2116 ;; Hardware stack levels used:    1
  2117 ;; Hardware stack levels required when called:    8
  2118 ;; This function calls:
  2119 ;;		_vscp_getZone
  2120 ;;		_vscp_getSubzone
  2121 ;;		_vscp_sendHeartBeat
  2122 ;; This function is called by:
  2123 ;;		_main
  2124 ;; This function uses a non-reentrant model
  2125 ;;
  2126                           
  2127                           	psect	text3
  2128  003D1C                     __ptext3:
  2129                           	opt stack 0
  2130  003D1C                     _vscp_doOneSecondWork:
  2131                           	opt stack 22
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;vscp_firmware.c: 526: ++vscp_second;
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;incstack = 0
  2138                           ;incstack = 0
  2139  003D1C  2B95               	incf	_vscp_second& (0+255),f,b
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  2143  003D1E  0E3B               	movlw	59
  2144  003D20  6595               	cpfsgt	_vscp_second& (0+255),b
  2145  003D22  D00D               	goto	l7901
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;vscp_firmware.c: 529: vscp_second = 0;
  2149  003D24  6B95               	clrf	_vscp_second& (0+255),b
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;vscp_firmware.c: 530: vscp_minute++;
  2153  003D26  2B90               	incf	_vscp_minute& (0+255),f,b
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  2157  003D28  5192               	movf	_vscp_node_state& (0+255),w,b
  2158  003D2A  0A03               	xorlw	3
  2159  003D2C  E108               	bnz	l7901
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  2163                           ;vscp_firmware.c: 535: vscp_getSubzone());
  2164  003D2E  EC01  F021         	call	_vscp_getSubzone	;wreg free
  2165  003D32  0100               	movlb	0	; () banked
  2166  003D34  6FC5               	movwf	?_vscp_sendHeartBeat& (0+255),b
  2167  003D36  EC06  F021         	call	_vscp_getZone	;wreg free
  2168  003D3A  ECA1  F01F         	call	_vscp_sendHeartBeat
  2169  003D3E                     l7901:
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;vscp_firmware.c: 536: }
  2173                           ;vscp_firmware.c: 537: }
  2174                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  2175  003D3E  0E3B               	movlw	59
  2176  003D40  6590               	cpfsgt	_vscp_minute& (0+255),b
  2177  003D42  D002               	goto	l7907
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;vscp_firmware.c: 540: vscp_minute = 0;
  2181  003D44  6B90               	clrf	_vscp_minute& (0+255),b
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;vscp_firmware.c: 541: vscp_hour++;
  2185  003D46  2B8E               	incf	_vscp_hour& (0+255),f,b
  2186  003D48                     l7907:
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;vscp_firmware.c: 542: }
  2190                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  2191  003D48  0E17               	movlw	23
  2192  003D4A  658E               	cpfsgt	_vscp_hour& (0+255),b
  2193  003D4C  D001               	goto	l7911
  2194                           
  2195                           ; BSR set to: 0
  2196  003D4E  6B8E               	clrf	_vscp_hour& (0+255),b
  2197  003D50                     l7911:
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  2201  003D50  5192               	movf	_vscp_node_state& (0+255),w,b
  2202  003D52  0A03               	xorlw	3
  2203  003D54  E109               	bnz	l1107
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  2207  003D56  2B8D               	incf	_vscp_guid_reset& (0+255),f,b
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  2211  003D58  C08D  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  2212  003D5C  0E0F               	movlw	15
  2213  003D5E  164D               	andwf	??_vscp_doOneSecondWork,f,c
  2214  003D60  0E02               	movlw	2
  2215  003D62  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  2216  003D64  B0D8               	btfsc	status,0,c
  2217                           
  2218                           ; BSR set to: 0
  2219                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  2220  003D66  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  2221  003D68                     l1107:
  2222                           
  2223                           ; BSR set to: 0
  2224  003D68  0012               	return	
  2225  003D6A                     __end_of_vscp_doOneSecondWork:
  2226                           	opt stack 0
  2227                           tblptru	equ	0xFF8
  2228                           prodh	equ	0xFF4
  2229                           prodl	equ	0xFF3
  2230                           postinc0	equ	0xFEE
  2231                           wreg	equ	0xFE8
  2232                           postinc2	equ	0xFDE
  2233                           postdec2	equ	0xFDD
  2234                           fsr2h	equ	0xFDA
  2235                           fsr2l	equ	0xFD9
  2236                           status	equ	0xFD8
  2237                           
  2238 ;; *************** function _vscp_sendHeartBeat *****************
  2239 ;; Defined at:
  2240 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  2241 ;; Parameters:    Size  Location     Type
  2242 ;;  zone            1    wreg     unsigned char 
  2243 ;;  subzone         1   20[BANK0 ] unsigned char 
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;  zone            1   75[COMRAM] unsigned char 
  2246 ;; Return value:  Size  Location     Type
  2247 ;;		None               void
  2248 ;; Registers used:
  2249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : F/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2255 ;;      Params:         0       1       0       0       0       0       0
  2256 ;;      Locals:         1       0       0       0       0       0       0
  2257 ;;      Temps:          0       0       0       0       0       0       0
  2258 ;;      Totals:         1       1       0       0       0       0       0
  2259 ;;Total ram usage:        2 bytes
  2260 ;; Hardware stack levels used:    1
  2261 ;; Hardware stack levels required when called:    7
  2262 ;; This function calls:
  2263 ;;		_vscp_sendEvent
  2264 ;; This function is called by:
  2265 ;;		_vscp_doOneSecondWork
  2266 ;; This function uses a non-reentrant model
  2267 ;;
  2268                           
  2269                           	psect	text4
  2270  003F42                     __ptext4:
  2271                           	opt stack 0
  2272  003F42                     _vscp_sendHeartBeat:
  2273                           	opt stack 22
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;incstack = 0
  2277                           ;incstack = 0
  2278                           ;vscp_sendHeartBeat@zone stored from wreg
  2279  003F42  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  2280                           
  2281                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  2282  003F46  0E83               	movlw	131
  2283  003F48  0100               	movlb	0	; () banked
  2284  003F4A  6FA4               	movwf	_vscp_omsg& (0+255),b
  2285                           
  2286                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  2287  003F4C  0E07               	movlw	7
  2288  003F4E  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  2289                           
  2290                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  2291  003F50  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  2292  003F52  0E14               	movlw	20
  2293  003F54  6FA6               	movwf	(_vscp_omsg+2)& (0+255),b
  2294                           
  2295                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  2296  003F56  0E09               	movlw	9
  2297  003F58  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  2301  003F5A  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  2305  003F5C  C04C  F0AA         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  2309  003F60  C0C5  F0AB         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;vscp_firmware.c: 388: vscp_sendEvent();
  2313  003F64  EFB4  F01F         	goto	_vscp_sendEvent	;wreg free
  2314  003F68                     __end_of_vscp_sendHeartBeat:
  2315                           	opt stack 0
  2316                           tblptru	equ	0xFF8
  2317                           prodh	equ	0xFF4
  2318                           prodl	equ	0xFF3
  2319                           postinc0	equ	0xFEE
  2320                           wreg	equ	0xFE8
  2321                           postinc2	equ	0xFDE
  2322                           postdec2	equ	0xFDD
  2323                           fsr2h	equ	0xFDA
  2324                           fsr2l	equ	0xFD9
  2325                           status	equ	0xFD8
  2326                           
  2327 ;; *************** function _vscp_getSubzone *****************
  2328 ;; Defined at:
  2329 ;;		line 876 in file "../main.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;		None
  2332 ;; Auto vars:     Size  Location     Type
  2333 ;;		None
  2334 ;; Return value:  Size  Location     Type
  2335 ;;                  1    wreg      unsigned char 
  2336 ;; Registers used:
  2337 ;;		wreg, status,2, cstack
  2338 ;; Tracked objects:
  2339 ;;		On entry : F/0
  2340 ;;		On exit  : 0/0
  2341 ;;		Unchanged: 0/0
  2342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2343 ;;      Params:         0       0       0       0       0       0       0
  2344 ;;      Locals:         0       0       0       0       0       0       0
  2345 ;;      Temps:          0       0       0       0       0       0       0
  2346 ;;      Totals:         0       0       0       0       0       0       0
  2347 ;;Total ram usage:        0 bytes
  2348 ;; Hardware stack levels used:    1
  2349 ;; Hardware stack levels required when called:    3
  2350 ;; This function calls:
  2351 ;;		_readEEPROM
  2352 ;; This function is called by:
  2353 ;;		_vscp_doOneSecondWork
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           	psect	text5
  2358  004202                     __ptext5:
  2359                           	opt stack 0
  2360  004202                     _vscp_getSubzone:
  2361                           	opt stack 26
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;main.c: 877: return readEEPROM( 0x43 + 1 );
  2365                           
  2366                           ; BSR set to: 0
  2367                           ;incstack = 0
  2368                           ;incstack = 0
  2369  004202  6A09               	clrf	?_readEEPROM+1,c
  2370  004204  0E44               	movlw	68
  2371  004206  6E08               	movwf	?_readEEPROM,c
  2372  004208  EFEF  F020         	goto	_readEEPROM	;wreg free
  2373  00420C                     __end_of_vscp_getSubzone:
  2374                           	opt stack 0
  2375                           tblptru	equ	0xFF8
  2376                           prodh	equ	0xFF4
  2377                           prodl	equ	0xFF3
  2378                           postinc0	equ	0xFEE
  2379                           wreg	equ	0xFE8
  2380                           postinc2	equ	0xFDE
  2381                           postdec2	equ	0xFDD
  2382                           fsr2h	equ	0xFDA
  2383                           fsr2l	equ	0xFD9
  2384                           status	equ	0xFD8
  2385                           
  2386 ;; *************** function _vscp_getZone *****************
  2387 ;; Defined at:
  2388 ;;		line 867 in file "../main.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;		None
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;		None
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  1    wreg      unsigned char 
  2395 ;; Registers used:
  2396 ;;		wreg, status,2, cstack
  2397 ;; Tracked objects:
  2398 ;;		On entry : F/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2402 ;;      Params:         0       0       0       0       0       0       0
  2403 ;;      Locals:         0       0       0       0       0       0       0
  2404 ;;      Temps:          0       0       0       0       0       0       0
  2405 ;;      Totals:         0       0       0       0       0       0       0
  2406 ;;Total ram usage:        0 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; Hardware stack levels required when called:    3
  2409 ;; This function calls:
  2410 ;;		_readEEPROM
  2411 ;; This function is called by:
  2412 ;;		_vscp_doOneSecondWork
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           	psect	text6
  2417  00420C                     __ptext6:
  2418                           	opt stack 0
  2419  00420C                     _vscp_getZone:
  2420                           	opt stack 26
  2421                           
  2422                           ; BSR set to: 0
  2423                           ;main.c: 868: return readEEPROM( 0x43 + 0 );
  2424                           
  2425                           ;incstack = 0
  2426                           ;incstack = 0
  2427  00420C  6A09               	clrf	?_readEEPROM+1,c
  2428  00420E  0E43               	movlw	67
  2429  004210  6E08               	movwf	?_readEEPROM,c
  2430  004212  EFEF  F020         	goto	_readEEPROM	;wreg free
  2431  004216                     __end_of_vscp_getZone:
  2432                           	opt stack 0
  2433                           tblptru	equ	0xFF8
  2434                           prodh	equ	0xFF4
  2435                           prodl	equ	0xFF3
  2436                           postinc0	equ	0xFEE
  2437                           wreg	equ	0xFE8
  2438                           postinc2	equ	0xFDE
  2439                           postdec2	equ	0xFDD
  2440                           fsr2h	equ	0xFDA
  2441                           fsr2l	equ	0xFD9
  2442                           status	equ	0xFD8
  2443                           
  2444 ;; *************** function _vscp_error *****************
  2445 ;; Defined at:
  2446 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  2447 ;; Parameters:    Size  Location     Type
  2448 ;;		None
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;		None
  2451 ;; Return value:  Size  Location     Type
  2452 ;;		None               void
  2453 ;; Registers used:
  2454 ;;		None
  2455 ;; Tracked objects:
  2456 ;;		On entry : 0/0
  2457 ;;		On exit  : 0/0
  2458 ;;		Unchanged: 0/0
  2459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2460 ;;      Params:         0       0       0       0       0       0       0
  2461 ;;      Locals:         0       0       0       0       0       0       0
  2462 ;;      Temps:          0       0       0       0       0       0       0
  2463 ;;      Totals:         0       0       0       0       0       0       0
  2464 ;;Total ram usage:        0 bytes
  2465 ;; Hardware stack levels used:    1
  2466 ;; Hardware stack levels required when called:    2
  2467 ;; This function calls:
  2468 ;;		Nothing
  2469 ;; This function is called by:
  2470 ;;		_main
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           	psect	text7
  2475  004246                     __ptext7:
  2476                           	opt stack 0
  2477  004246                     _vscp_error:
  2478                           	opt stack 28
  2479                           
  2480                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  2481                           
  2482                           ;incstack = 0
  2483                           ;incstack = 0
  2484  004246  6A56               	clrf	_vscp_initledfunc,c
  2485  004248  0012               	return	
  2486  00424A                     __end_of_vscp_error:
  2487                           	opt stack 0
  2488                           tblptru	equ	0xFF8
  2489                           prodh	equ	0xFF4
  2490                           prodl	equ	0xFF3
  2491                           postinc0	equ	0xFEE
  2492                           wreg	equ	0xFE8
  2493                           postinc2	equ	0xFDE
  2494                           postdec2	equ	0xFDD
  2495                           fsr2h	equ	0xFDA
  2496                           fsr2l	equ	0xFD9
  2497                           status	equ	0xFD8
  2498                           
  2499 ;; *************** function _doDM *****************
  2500 ;; Defined at:
  2501 ;;		line 1596 in file "../main.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;		None
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;  class_mask      2   33[BANK0 ] unsigned short 
  2506 ;;  class_filter    2   31[BANK0 ] unsigned short 
  2507 ;;  i               1   44[BANK0 ] unsigned char 
  2508 ;;  dmflags         1   43[BANK0 ] unsigned char 
  2509 ;;  type_mask       1   36[BANK0 ] unsigned char 
  2510 ;;  type_filter     1   35[BANK0 ] unsigned char 
  2511 ;; Return value:  Size  Location     Type
  2512 ;;		None               void
  2513 ;; Registers used:
  2514 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : F/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2520 ;;      Params:         0       0       0       0       0       0       0
  2521 ;;      Locals:         0      14       0       0       0       0       0
  2522 ;;      Temps:          0       3       0       0       0       0       0
  2523 ;;      Totals:         0      17       0       0       0       0       0
  2524 ;;Total ram usage:       17 bytes
  2525 ;; Hardware stack levels used:    1
  2526 ;; Hardware stack levels required when called:    8
  2527 ;; This function calls:
  2528 ;;		_readEEPROM
  2529 ;;		_doActionOff
  2530 ;;		_doActionOn
  2531 ;;		_doActionPulse
  2532 ;;		_doActionStatus
  2533 ;;		_doActionDisable
  2534 ;;		_doActionToggle
  2535 ;; This function is called by:
  2536 ;;		_main
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text8
  2541  002088                     __ptext8:
  2542                           	opt stack 0
  2543  002088                     _doDM:
  2544                           	opt stack 22
  2545                           
  2546                           ;main.c: 1597: unsigned char i;
  2547                           ;main.c: 1598: unsigned char dmflags;
  2548                           ;main.c: 1599: unsigned short class_filter;
  2549                           ;main.c: 1600: unsigned short class_mask;
  2550                           ;main.c: 1601: unsigned char type_filter;
  2551                           ;main.c: 1602: unsigned char type_mask;
  2552                           ;main.c: 1605: if ( 0 == vscp_imsg.vscp_class ) return;
  2553                           
  2554                           ;incstack = 0
  2555                           ;incstack = 0
  2556  002088  0100               	movlb	0	; () banked
  2557  00208A  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  2558  00208C  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2559  00208E  E101 D193          	bz	l411
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;main.c: 1607: for (i = 0; i < 7; i++) {
  2563  002092  6BDD               	clrf	doDM@i& (0+255),b
  2564  002094                     l9721:
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;main.c: 1610: dmflags = readEEPROM( 0x43 + 72 + 1 + (8 * i) );
  2568  002094  51DD               	movf	doDM@i& (0+255),w,b
  2569  002096  6FCD               	movwf	??_doDM& (0+255),b
  2570  002098  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2571  00209A  90D8               	bcf	status,0,c
  2572  00209C  37CD               	rlcf	??_doDM& (0+255),f,b
  2573  00209E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2574  0020A0  90D8               	bcf	status,0,c
  2575  0020A2  37CD               	rlcf	??_doDM& (0+255),f,b
  2576  0020A4  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2577  0020A6  90D8               	bcf	status,0,c
  2578  0020A8  37CD               	rlcf	??_doDM& (0+255),f,b
  2579  0020AA  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2580  0020AC  0E8C               	movlw	140
  2581  0020AE  25CD               	addwf	??_doDM& (0+255),w,b
  2582  0020B0  6E08               	movwf	?_readEEPROM,c
  2583  0020B2  0E00               	movlw	0
  2584  0020B4  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2585  0020B6  6E09               	movwf	?_readEEPROM+1,c
  2586  0020B8  ECEF  F020         	call	_readEEPROM	;wreg free
  2587  0020BC  0100               	movlb	0	; () banked
  2588  0020BE  6FDC               	movwf	doDM@dmflags& (0+255),b
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;main.c: 1613: if ( dmflags & 0x80 ) {
  2592  0020C0  AFDC               	btfss	doDM@dmflags& (0+255),7,b
  2593  0020C2  D175               	goto	l9779
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;main.c: 1616: if ( ( dmflags & 0x40 ) &&
  2597                           ;main.c: 1617: ( vscp_imsg.oaddr != readEEPROM( 0x43 + 72 + (8 * i) ) ) ) {
  2598  0020C4  ADDC               	btfss	doDM@dmflags& (0+255),6,b
  2599  0020C6  D018               	goto	l415
  2600                           
  2601                           ; BSR set to: 0
  2602  0020C8  51DD               	movf	doDM@i& (0+255),w,b
  2603  0020CA  6FCD               	movwf	??_doDM& (0+255),b
  2604  0020CC  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2605  0020CE  90D8               	bcf	status,0,c
  2606  0020D0  37CD               	rlcf	??_doDM& (0+255),f,b
  2607  0020D2  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2608  0020D4  90D8               	bcf	status,0,c
  2609  0020D6  37CD               	rlcf	??_doDM& (0+255),f,b
  2610  0020D8  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2611  0020DA  90D8               	bcf	status,0,c
  2612  0020DC  37CD               	rlcf	??_doDM& (0+255),f,b
  2613  0020DE  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2614  0020E0  0E8B               	movlw	139
  2615  0020E2  25CD               	addwf	??_doDM& (0+255),w,b
  2616  0020E4  6E08               	movwf	?_readEEPROM,c
  2617  0020E6  0E00               	movlw	0
  2618  0020E8  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2619  0020EA  6E09               	movwf	?_readEEPROM+1,c
  2620  0020EC  ECEF  F020         	call	_readEEPROM	;wreg free
  2621  0020F0  0100               	movlb	0	; () banked
  2622  0020F2  199B               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2623  0020F4  E001 D15B          	bnz	l9779
  2624  0020F8                     l415:
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;main.c: 1619: }
  2628                           ;main.c: 1622: if ( dmflags & 0x10 ) {
  2629  0020F8  A9DC               	btfss	doDM@dmflags& (0+255),4,b
  2630  0020FA  D00B               	goto	l417
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;main.c: 1623: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2634  0020FC  299D               	incf	(_vscp_imsg+7)& (0+255),w,b
  2635  0020FE  E009               	bz	l417
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;main.c: 1624: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x43 + 0 ) ) {
  2639  002100  6A09               	clrf	?_readEEPROM+1,c
  2640  002102  0E43               	movlw	67
  2641  002104  6E08               	movwf	?_readEEPROM,c
  2642  002106  ECEF  F020         	call	_readEEPROM	;wreg free
  2643  00210A  0100               	movlb	0	; () banked
  2644  00210C  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2645  00210E  E001 D14E          	bnz	l9779
  2646  002112                     l417:
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;main.c: 1626: }
  2650                           ;main.c: 1627: }
  2651                           ;main.c: 1628: }
  2652                           ;main.c: 1631: if ( dmflags & 0x08 ) {
  2653  002112  A7DC               	btfss	doDM@dmflags& (0+255),3,b
  2654  002114  D00B               	goto	l9743
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;main.c: 1632: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2658  002116  299D               	incf	(_vscp_imsg+7)& (0+255),w,b
  2659  002118  E009               	bz	l9743
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;main.c: 1633: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x43 + 1 ) ) {
  2663  00211A  6A09               	clrf	?_readEEPROM+1,c
  2664  00211C  0E44               	movlw	68
  2665  00211E  6E08               	movwf	?_readEEPROM,c
  2666  002120  ECEF  F020         	call	_readEEPROM	;wreg free
  2667  002124  0100               	movlb	0	; () banked
  2668  002126  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2669  002128  E001 D141          	bnz	l9779
  2670  00212C                     l9743:
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;main.c: 1635: }
  2674                           ;main.c: 1636: }
  2675                           ;main.c: 1637: }
  2676                           ;main.c: 1639: class_filter = ( dmflags & 0x01)*256 +
  2677                           ;main.c: 1640: readEEPROM( 0x43 +
  2678                           ;main.c: 1641: 72 +
  2679                           ;main.c: 1642: (8 * i) +
  2680                           ;main.c: 1643: 3);
  2681  00212C  51DD               	movf	doDM@i& (0+255),w,b
  2682  00212E  0D08               	mullw	8
  2683  002130  0E8E               	movlw	142
  2684  002132  24F3               	addwf	prodl,w,c
  2685  002134  6E08               	movwf	?_readEEPROM,c
  2686  002136  0E00               	movlw	0
  2687  002138  20F4               	addwfc	prodh,w,c
  2688  00213A  6E09               	movwf	?_readEEPROM+1,c
  2689  00213C  ECEF  F020         	call	_readEEPROM	;wreg free
  2690  002140  0100               	movlb	0	; () banked
  2691  002142  6FCD               	movwf	??_doDM& (0+255),b
  2692  002144  51DC               	movf	doDM@dmflags& (0+255),w,b
  2693  002146  0B01               	andlw	1
  2694  002148  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2695  00214A  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2696  00214C  51CD               	movf	??_doDM& (0+255),w,b
  2697  00214E  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2698  002150  6FD0               	movwf	doDM@class_filter& (0+255),b
  2699  002152  0E00               	movlw	0
  2700  002154  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2701  002156  6FD1               	movwf	(doDM@class_filter+1)& (0+255),b
  2702                           
  2703                           ;main.c: 1644: class_mask = ( dmflags & 0x02)*256 +
  2704                           ;main.c: 1645: readEEPROM( 0x43 +
  2705                           ;main.c: 1646: 72 +
  2706                           ;main.c: 1647: (8 * i) +
  2707                           ;main.c: 1648: 2);
  2708  002158  51DD               	movf	doDM@i& (0+255),w,b
  2709  00215A  0D08               	mullw	8
  2710  00215C  0E8D               	movlw	141
  2711  00215E  24F3               	addwf	prodl,w,c
  2712  002160  6E08               	movwf	?_readEEPROM,c
  2713  002162  0E00               	movlw	0
  2714  002164  20F4               	addwfc	prodh,w,c
  2715  002166  6E09               	movwf	?_readEEPROM+1,c
  2716  002168  ECEF  F020         	call	_readEEPROM	;wreg free
  2717  00216C  0100               	movlb	0	; () banked
  2718  00216E  6FCD               	movwf	??_doDM& (0+255),b
  2719  002170  51DC               	movf	doDM@dmflags& (0+255),w,b
  2720  002172  0B02               	andlw	2
  2721  002174  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2722  002176  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2723  002178  51CD               	movf	??_doDM& (0+255),w,b
  2724  00217A  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2725  00217C  6FD2               	movwf	doDM@class_mask& (0+255),b
  2726  00217E  0E00               	movlw	0
  2727  002180  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2728  002182  6FD3               	movwf	(doDM@class_mask+1)& (0+255),b
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;main.c: 1649: type_filter = readEEPROM( 0x43 +
  2732                           ;main.c: 1650: 72 +
  2733                           ;main.c: 1651: (8 * i) +
  2734                           ;main.c: 1652: 5);
  2735  002184  51DD               	movf	doDM@i& (0+255),w,b
  2736  002186  6FCD               	movwf	??_doDM& (0+255),b
  2737  002188  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2738  00218A  90D8               	bcf	status,0,c
  2739  00218C  37CD               	rlcf	??_doDM& (0+255),f,b
  2740  00218E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2741  002190  90D8               	bcf	status,0,c
  2742  002192  37CD               	rlcf	??_doDM& (0+255),f,b
  2743  002194  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2744  002196  90D8               	bcf	status,0,c
  2745  002198  37CD               	rlcf	??_doDM& (0+255),f,b
  2746  00219A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2747  00219C  0E90               	movlw	144
  2748  00219E  25CD               	addwf	??_doDM& (0+255),w,b
  2749  0021A0  6E08               	movwf	?_readEEPROM,c
  2750  0021A2  0E00               	movlw	0
  2751  0021A4  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2752  0021A6  6E09               	movwf	?_readEEPROM+1,c
  2753  0021A8  ECEF  F020         	call	_readEEPROM	;wreg free
  2754  0021AC  0100               	movlb	0	; () banked
  2755  0021AE  6FD4               	movwf	doDM@type_filter& (0+255),b
  2756                           
  2757                           ; BSR set to: 0
  2758                           ;main.c: 1653: type_mask = readEEPROM( 0x43 +
  2759                           ;main.c: 1654: 72 +
  2760                           ;main.c: 1655: (8 * i) +
  2761                           ;main.c: 1656: 4);
  2762  0021B0  51DD               	movf	doDM@i& (0+255),w,b
  2763  0021B2  6FCD               	movwf	??_doDM& (0+255),b
  2764  0021B4  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2765  0021B6  90D8               	bcf	status,0,c
  2766  0021B8  37CD               	rlcf	??_doDM& (0+255),f,b
  2767  0021BA  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2768  0021BC  90D8               	bcf	status,0,c
  2769  0021BE  37CD               	rlcf	??_doDM& (0+255),f,b
  2770  0021C0  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2771  0021C2  90D8               	bcf	status,0,c
  2772  0021C4  37CD               	rlcf	??_doDM& (0+255),f,b
  2773  0021C6  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2774  0021C8  0E8F               	movlw	143
  2775  0021CA  25CD               	addwf	??_doDM& (0+255),w,b
  2776  0021CC  6E08               	movwf	?_readEEPROM,c
  2777  0021CE  0E00               	movlw	0
  2778  0021D0  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2779  0021D2  6E09               	movwf	?_readEEPROM+1,c
  2780  0021D4  ECEF  F020         	call	_readEEPROM	;wreg free
  2781  0021D8  0100               	movlb	0	; () banked
  2782  0021DA  6FD5               	movwf	doDM@type_mask& (0+255),b
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;main.c: 1658: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2786                           ;main.c: 1659: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2787  0021DC  EE20  F098         	lfsr	2,_vscp_imsg+2
  2788  0021E0  CFDE F0CD          	movff	postinc2,??_doDM
  2789  0021E4  CFDD F0CE          	movff	postdec2,??_doDM+1
  2790  0021E8  51D0               	movf	doDM@class_filter& (0+255),w,b
  2791  0021EA  1BCD               	xorwf	??_doDM& (0+255),f,b
  2792  0021EC  51D1               	movf	(doDM@class_filter+1)& (0+255),w,b
  2793  0021EE  1BCE               	xorwf	(??_doDM+1)& (0+255),f,b
  2794  0021F0  51D2               	movf	doDM@class_mask& (0+255),w,b
  2795  0021F2  17CD               	andwf	??_doDM& (0+255),f,b
  2796  0021F4  51D3               	movf	(doDM@class_mask+1)& (0+255),w,b
  2797  0021F6  17CE               	andwf	(??_doDM+1)& (0+255),f,b
  2798  0021F8  51CE               	movf	(??_doDM+1)& (0+255),w,b
  2799  0021FA  11CD               	iorwf	??_doDM& (0+255),w,b
  2800  0021FC  E001 D0D7          	bnz	l9779
  2801                           
  2802                           ; BSR set to: 0
  2803  002200  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  2804  002202  19D4               	xorwf	doDM@type_filter& (0+255),w,b
  2805  002204  15D5               	andwf	doDM@type_mask& (0+255),w,b
  2806  002206  E101 D0AF          	bz	l9777
  2807  00220A  D0D1               	goto	l9779
  2808  00220C                     l9755:
  2809                           
  2810                           ;main.c: 1665: doActionOn( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2811  00220C  0100               	movlb	0	; () banked
  2812  00220E  51DD               	movf	doDM@i& (0+255),w,b
  2813  002210  6FCD               	movwf	??_doDM& (0+255),b
  2814  002212  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2815  002214  90D8               	bcf	status,0,c
  2816  002216  37CD               	rlcf	??_doDM& (0+255),f,b
  2817  002218  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2818  00221A  90D8               	bcf	status,0,c
  2819  00221C  37CD               	rlcf	??_doDM& (0+255),f,b
  2820  00221E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2821  002220  90D8               	bcf	status,0,c
  2822  002222  37CD               	rlcf	??_doDM& (0+255),f,b
  2823  002224  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2824  002226  0E92               	movlw	146
  2825  002228  25CD               	addwf	??_doDM& (0+255),w,b
  2826  00222A  6E08               	movwf	?_readEEPROM,c
  2827  00222C  0E00               	movlw	0
  2828  00222E  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2829  002230  6E09               	movwf	?_readEEPROM+1,c
  2830  002232  ECEF  F020         	call	_readEEPROM	;wreg free
  2831  002236  0100               	movlb	0	; () banked
  2832  002238  6FD6               	movwf	_doDM$2146& (0+255),b
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;main.c: 1665: doActionOn( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2836  00223A  C0D6  F051         	movff	_doDM$2146,?_doActionOn
  2837  00223E  51DC               	movf	doDM@dmflags& (0+255),w,b
  2838  002240  EC56  F013         	call	_doActionOn
  2839                           
  2840                           ;main.c: 1666: break;
  2841  002244  D0B4               	goto	l9779
  2842  002246                     l9759:
  2843                           
  2844                           ;main.c: 1669: doActionOff( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2845  002246  0100               	movlb	0	; () banked
  2846  002248  51DD               	movf	doDM@i& (0+255),w,b
  2847  00224A  6FCD               	movwf	??_doDM& (0+255),b
  2848  00224C  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2849  00224E  90D8               	bcf	status,0,c
  2850  002250  37CD               	rlcf	??_doDM& (0+255),f,b
  2851  002252  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2852  002254  90D8               	bcf	status,0,c
  2853  002256  37CD               	rlcf	??_doDM& (0+255),f,b
  2854  002258  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2855  00225A  90D8               	bcf	status,0,c
  2856  00225C  37CD               	rlcf	??_doDM& (0+255),f,b
  2857  00225E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2858  002260  0E92               	movlw	146
  2859  002262  25CD               	addwf	??_doDM& (0+255),w,b
  2860  002264  6E08               	movwf	?_readEEPROM,c
  2861  002266  0E00               	movlw	0
  2862  002268  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2863  00226A  6E09               	movwf	?_readEEPROM+1,c
  2864  00226C  ECEF  F020         	call	_readEEPROM	;wreg free
  2865  002270  0100               	movlb	0	; () banked
  2866  002272  6FD7               	movwf	_doDM$2147& (0+255),b
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;main.c: 1669: doActionOff( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2870  002274  C0D7  F051         	movff	_doDM$2147,?_doActionOff
  2871  002278  51DC               	movf	doDM@dmflags& (0+255),w,b
  2872  00227A  ECF0  F01B         	call	_doActionOff
  2873                           
  2874                           ;main.c: 1670: break;
  2875  00227E  D097               	goto	l9779
  2876  002280                     l9763:
  2877                           
  2878                           ;main.c: 1673: doActionPulse( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2879  002280  0100               	movlb	0	; () banked
  2880  002282  51DD               	movf	doDM@i& (0+255),w,b
  2881  002284  6FCD               	movwf	??_doDM& (0+255),b
  2882  002286  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2883  002288  90D8               	bcf	status,0,c
  2884  00228A  37CD               	rlcf	??_doDM& (0+255),f,b
  2885  00228C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2886  00228E  90D8               	bcf	status,0,c
  2887  002290  37CD               	rlcf	??_doDM& (0+255),f,b
  2888  002292  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2889  002294  90D8               	bcf	status,0,c
  2890  002296  37CD               	rlcf	??_doDM& (0+255),f,b
  2891  002298  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2892  00229A  0E92               	movlw	146
  2893  00229C  25CD               	addwf	??_doDM& (0+255),w,b
  2894  00229E  6E08               	movwf	?_readEEPROM,c
  2895  0022A0  0E00               	movlw	0
  2896  0022A2  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2897  0022A4  6E09               	movwf	?_readEEPROM+1,c
  2898  0022A6  ECEF  F020         	call	_readEEPROM	;wreg free
  2899  0022AA  0100               	movlb	0	; () banked
  2900  0022AC  6FD8               	movwf	_doDM$2148& (0+255),b
  2901                           
  2902                           ;main.c: 1673: doActionPulse( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2903  0022AE  C0D8  F00B         	movff	_doDM$2148,?_doActionPulse
  2904  0022B2  51DC               	movf	doDM@dmflags& (0+255),w,b
  2905  0022B4  EC92  F015         	call	_doActionPulse
  2906                           
  2907                           ;main.c: 1674: break;
  2908  0022B8  D07A               	goto	l9779
  2909  0022BA                     l9765:
  2910                           
  2911                           ;main.c: 1677: doActionStatus( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2912  0022BA  0100               	movlb	0	; () banked
  2913  0022BC  51DD               	movf	doDM@i& (0+255),w,b
  2914  0022BE  6FCD               	movwf	??_doDM& (0+255),b
  2915  0022C0  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2916  0022C2  90D8               	bcf	status,0,c
  2917  0022C4  37CD               	rlcf	??_doDM& (0+255),f,b
  2918  0022C6  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2919  0022C8  90D8               	bcf	status,0,c
  2920  0022CA  37CD               	rlcf	??_doDM& (0+255),f,b
  2921  0022CC  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2922  0022CE  90D8               	bcf	status,0,c
  2923  0022D0  37CD               	rlcf	??_doDM& (0+255),f,b
  2924  0022D2  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2925  0022D4  0E92               	movlw	146
  2926  0022D6  25CD               	addwf	??_doDM& (0+255),w,b
  2927  0022D8  6E08               	movwf	?_readEEPROM,c
  2928  0022DA  0E00               	movlw	0
  2929  0022DC  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2930  0022DE  6E09               	movwf	?_readEEPROM+1,c
  2931  0022E0  ECEF  F020         	call	_readEEPROM	;wreg free
  2932  0022E4  0100               	movlb	0	; () banked
  2933  0022E6  6FD9               	movwf	_doDM$2149& (0+255),b
  2934                           
  2935                           ; BSR set to: 0
  2936                           ;main.c: 1677: doActionStatus( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2937  0022E8  C0D9  F051         	movff	_doDM$2149,?_doActionStatus
  2938  0022EC  51DC               	movf	doDM@dmflags& (0+255),w,b
  2939  0022EE  EC77  F01A         	call	_doActionStatus
  2940                           
  2941                           ;main.c: 1678: break;
  2942  0022F2  D05D               	goto	l9779
  2943  0022F4                     l9769:
  2944                           
  2945                           ;main.c: 1681: doActionDisable( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2946  0022F4  0100               	movlb	0	; () banked
  2947  0022F6  51DD               	movf	doDM@i& (0+255),w,b
  2948  0022F8  6FCD               	movwf	??_doDM& (0+255),b
  2949  0022FA  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2950  0022FC  90D8               	bcf	status,0,c
  2951  0022FE  37CD               	rlcf	??_doDM& (0+255),f,b
  2952  002300  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2953  002302  90D8               	bcf	status,0,c
  2954  002304  37CD               	rlcf	??_doDM& (0+255),f,b
  2955  002306  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2956  002308  90D8               	bcf	status,0,c
  2957  00230A  37CD               	rlcf	??_doDM& (0+255),f,b
  2958  00230C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2959  00230E  0E92               	movlw	146
  2960  002310  25CD               	addwf	??_doDM& (0+255),w,b
  2961  002312  6E08               	movwf	?_readEEPROM,c
  2962  002314  0E00               	movlw	0
  2963  002316  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2964  002318  6E09               	movwf	?_readEEPROM+1,c
  2965  00231A  ECEF  F020         	call	_readEEPROM	;wreg free
  2966  00231E  0100               	movlb	0	; () banked
  2967  002320  6FDA               	movwf	_doDM$2150& (0+255),b
  2968                           
  2969                           ;main.c: 1681: doActionDisable( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2970  002322  C0DA  F00B         	movff	_doDM$2150,?_doActionDisable
  2971  002326  51DC               	movf	doDM@dmflags& (0+255),w,b
  2972  002328  EC22  F01E         	call	_doActionDisable
  2973                           
  2974                           ;main.c: 1682: break;
  2975  00232C  D040               	goto	l9779
  2976  00232E                     l9771:
  2977                           
  2978                           ;main.c: 1685: doActionToggle( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2979  00232E  0100               	movlb	0	; () banked
  2980  002330  51DD               	movf	doDM@i& (0+255),w,b
  2981  002332  6FCD               	movwf	??_doDM& (0+255),b
  2982  002334  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2983  002336  90D8               	bcf	status,0,c
  2984  002338  37CD               	rlcf	??_doDM& (0+255),f,b
  2985  00233A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2986  00233C  90D8               	bcf	status,0,c
  2987  00233E  37CD               	rlcf	??_doDM& (0+255),f,b
  2988  002340  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2989  002342  90D8               	bcf	status,0,c
  2990  002344  37CD               	rlcf	??_doDM& (0+255),f,b
  2991  002346  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2992  002348  0E92               	movlw	146
  2993  00234A  25CD               	addwf	??_doDM& (0+255),w,b
  2994  00234C  6E08               	movwf	?_readEEPROM,c
  2995  00234E  0E00               	movlw	0
  2996  002350  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2997  002352  6E09               	movwf	?_readEEPROM+1,c
  2998  002354  ECEF  F020         	call	_readEEPROM	;wreg free
  2999  002358  0100               	movlb	0	; () banked
  3000  00235A  6FDB               	movwf	_doDM$2151& (0+255),b
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;main.c: 1685: doActionToggle( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3004  00235C  C0DB  F051         	movff	_doDM$2151,?_doActionToggle
  3005  002360  51DC               	movf	doDM@dmflags& (0+255),w,b
  3006  002362  EC60  F019         	call	_doActionToggle
  3007                           
  3008                           ;main.c: 1686: break;
  3009  002366  D023               	goto	l9779
  3010  002368                     l9777:
  3011                           
  3012                           ; BSR set to: 0
  3013  002368  51DD               	movf	doDM@i& (0+255),w,b
  3014  00236A  6FCD               	movwf	??_doDM& (0+255),b
  3015  00236C  6BCE               	clrf	(??_doDM+1)& (0+255),b
  3016  00236E  90D8               	bcf	status,0,c
  3017  002370  37CD               	rlcf	??_doDM& (0+255),f,b
  3018  002372  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3019  002374  90D8               	bcf	status,0,c
  3020  002376  37CD               	rlcf	??_doDM& (0+255),f,b
  3021  002378  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3022  00237A  90D8               	bcf	status,0,c
  3023  00237C  37CD               	rlcf	??_doDM& (0+255),f,b
  3024  00237E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3025  002380  0E91               	movlw	145
  3026  002382  25CD               	addwf	??_doDM& (0+255),w,b
  3027  002384  6E08               	movwf	?_readEEPROM,c
  3028  002386  0E00               	movlw	0
  3029  002388  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  3030  00238A  6E09               	movwf	?_readEEPROM+1,c
  3031  00238C  ECEF  F020         	call	_readEEPROM	;wreg free
  3032                           
  3033                           ; Switch size 1, requested type "speed"
  3034                           ; Number of cases is 6, Range of values is 1 to 16
  3035                           ; switch strategies available:
  3036                           ; Name         Instructions Cycles
  3037                           ; simple_byte           19    10 (average)
  3038                           ;	Chosen strategy is simple_byte
  3039  002390  0A01               	xorlw	1	; case 1
  3040  002392  E101 D73B          	bz	l9755
  3041  002396  0A03               	xorlw	3	; case 2
  3042  002398  E101 D755          	bz	l9759
  3043  00239C  0A01               	xorlw	1	; case 3
  3044  00239E  E101 D76F          	bz	l9763
  3045  0023A2  0A07               	xorlw	7	; case 4
  3046  0023A4  E0C4               	bz	l9771
  3047  0023A6  0A0E               	xorlw	14	; case 10
  3048  0023A8  E088               	bz	l9765
  3049  0023AA  0A1A               	xorlw	26	; case 16
  3050  0023AC  E0A3               	bz	l9769
  3051  0023AE                     l9779:
  3052  0023AE  0100               	movlb	0	; () banked
  3053  0023B0  2BDD               	incf	doDM@i& (0+255),f,b
  3054                           
  3055                           ; BSR set to: 0
  3056  0023B2  0E06               	movlw	6
  3057  0023B4  65DD               	cpfsgt	doDM@i& (0+255),b
  3058  0023B6  D66E               	goto	l9721
  3059  0023B8                     l411:
  3060                           
  3061                           ; BSR set to: 0
  3062  0023B8  0012               	return	
  3063  0023BA                     __end_of_doDM:
  3064                           	opt stack 0
  3065                           tblptru	equ	0xFF8
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           postinc0	equ	0xFEE
  3069                           wreg	equ	0xFE8
  3070                           postinc2	equ	0xFDE
  3071                           postdec2	equ	0xFDD
  3072                           fsr2h	equ	0xFDA
  3073                           fsr2l	equ	0xFD9
  3074                           status	equ	0xFD8
  3075                           
  3076 ;; *************** function _doActionToggle *****************
  3077 ;; Defined at:
  3078 ;;		line 2097 in file "../main.c"
  3079 ;; Parameters:    Size  Location     Type
  3080 ;;  dmflags         1    wreg     unsigned char 
  3081 ;;  arg             1   80[COMRAM] unsigned char 
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3084 ;;  i               1   27[BANK0 ] unsigned char 
  3085 ;;  bOn             1   26[BANK0 ] enum E15660
  3086 ;;  val             1   25[BANK0 ] unsigned char 
  3087 ;; Return value:  Size  Location     Type
  3088 ;;		None               void
  3089 ;; Registers used:
  3090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3091 ;; Tracked objects:
  3092 ;;		On entry : F/0
  3093 ;;		On exit  : F/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3096 ;;      Params:         1       0       0       0       0       0       0
  3097 ;;      Locals:         0       4       0       0       0       0       0
  3098 ;;      Temps:          0       2       0       0       0       0       0
  3099 ;;      Totals:         1       6       0       0       0       0       0
  3100 ;;Total ram usage:        7 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:    7
  3103 ;; This function calls:
  3104 ;;		_readEEPROM
  3105 ;;		_SendInformationEvent
  3106 ;; This function is called by:
  3107 ;;		_doDM
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111                           	psect	text9
  3112  0032C0                     __ptext9:
  3113                           	opt stack 0
  3114  0032C0                     _doActionToggle:
  3115                           	opt stack 22
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;incstack = 0
  3119                           ;incstack = 0
  3120                           ;doActionToggle@dmflags stored from wreg
  3121  0032C0  CFE8 F0C9          	movff	wreg,doActionToggle@dmflags
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;main.c: 2099: unsigned char i;
  3125                           ;main.c: 2100: unsigned char val;
  3126                           ;main.c: 2101: BOOL bOn = 0;
  3127  0032C4  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3128                           
  3129                           ;main.c: 2103: for ( i = 0; i < 8; i++ ) {
  3130  0032C6  6BCC               	clrf	doActionToggle@i& (0+255),b
  3131  0032C8                     l10397:
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;main.c: 2106: if ( !( arg & (1 << i) ) ) continue;
  3135  0032C8  C0CC  F0C7         	movff	doActionToggle@i,??_doActionToggle
  3136  0032CC  0E01               	movlw	1
  3137  0032CE  6FC8               	movwf	(??_doActionToggle+1)& (0+255),b
  3138  0032D0  2BC7               	incf	??_doActionToggle& (0+255),f,b
  3139  0032D2  D002               	goto	u13254
  3140  0032D4                     u13255:
  3141  0032D4  90D8               	bcf	status,0,c
  3142  0032D6  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3143  0032D8                     u13254:
  3144  0032D8  2FC7               	decfsz	??_doActionToggle& (0+255),f,b
  3145  0032DA  D7FC               	goto	u13255
  3146  0032DC  51C8               	movf	(??_doActionToggle+1)& (0+255),w,b
  3147  0032DE  1451               	andwf	doActionToggle@arg,w,c
  3148  0032E0  E07A               	bz	l10455
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;main.c: 2109: if ( dmflags & 0x08 ) {
  3152  0032E2  A7C9               	btfss	doActionToggle@dmflags& (0+255),3,b
  3153  0032E4  D00B               	goto	l10405
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;main.c: 2110: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3157                           ;main.c: 2111: 53 +
  3158                           ;main.c: 2112: i ) ) {
  3159  0032E6  0E78               	movlw	120
  3160  0032E8  25CC               	addwf	doActionToggle@i& (0+255),w,b
  3161  0032EA  6E08               	movwf	?_readEEPROM,c
  3162  0032EC  6A09               	clrf	?_readEEPROM+1,c
  3163  0032EE  0E00               	movlw	0
  3164  0032F0  2209               	addwfc	?_readEEPROM+1,f,c
  3165  0032F2  ECEF  F020         	call	_readEEPROM	;wreg free
  3166  0032F6  0100               	movlb	0	; () banked
  3167  0032F8  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3168  0032FA  E16D               	bnz	l10455
  3169  0032FC                     l10405:
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;main.c: 2114: }
  3173                           ;main.c: 2115: }
  3174                           ;main.c: 2117: val = readEEPROM(0x43 + 10 + i);
  3175  0032FC  0E4D               	movlw	77
  3176  0032FE  25CC               	addwf	doActionToggle@i& (0+255),w,b
  3177  003300  6E08               	movwf	?_readEEPROM,c
  3178  003302  6A09               	clrf	?_readEEPROM+1,c
  3179  003304  0E00               	movlw	0
  3180  003306  2209               	addwfc	?_readEEPROM+1,f,c
  3181  003308  ECEF  F020         	call	_readEEPROM	;wreg free
  3182  00330C  0100               	movlb	0	; () banked
  3183  00330E  6FCA               	movwf	doActionToggle@val& (0+255),b
  3184                           
  3185                           ;main.c: 2119: switch ( i ) {
  3186  003310  D02D               	goto	l10437
  3187  003312                     l542:
  3188                           
  3189                           ; BSR set to: 0
  3190                           ;main.c: 2122: if ( LATBbits.LATB4 ) {
  3191  003312  A88A               	btfss	3978,4,c	;volatile
  3192  003314  D002               	goto	l543
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;main.c: 2123: LATBbits.LATB4 = 0;
  3196  003316  988A               	bcf	3978,4,c	;volatile
  3197  003318  D025               	goto	L12
  3198  00331A                     l543:
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;main.c: 2126: LATBbits.LATB4 = 1;
  3202  00331A  888A               	bsf	3978,4,c	;volatile
  3203  00331C                     l10409:
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;main.c: 2127: bOn = 1;
  3207  00331C  0E01               	movlw	1
  3208  00331E  6FCB               	movwf	doActionToggle@bOn& (0+255),b
  3209  003320  D033               	goto	l10439
  3210  003322                     l546:
  3211                           
  3212                           ; BSR set to: 0
  3213                           ;main.c: 2132: if ( LATBbits.LATB1 ) {
  3214  003322  A28A               	btfss	3978,1,c	;volatile
  3215  003324  D002               	goto	l547
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;main.c: 2133: LATBbits.LATB1 = 0;
  3219  003326  928A               	bcf	3978,1,c	;volatile
  3220  003328  D01D               	goto	L12
  3221  00332A                     l547:
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;main.c: 2136: LATBbits.LATB1 = 1;
  3225  00332A  828A               	bsf	3978,1,c	;volatile
  3226  00332C  D7F7               	goto	l10409
  3227  00332E                     l549:
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;main.c: 2142: if ( LATBbits.LATB0 ) {
  3231  00332E  A08A               	btfss	3978,0,c	;volatile
  3232  003330  D002               	goto	l550
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;main.c: 2143: LATBbits.LATB0 = 0;
  3236  003332  908A               	bcf	3978,0,c	;volatile
  3237  003334  D017               	goto	L12
  3238  003336                     l550:
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;main.c: 2146: LATBbits.LATB0 = 1;
  3242  003336  808A               	bsf	3978,0,c	;volatile
  3243  003338  D7F1               	goto	l10409
  3244  00333A                     l552:
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;main.c: 2152: if ( LATCbits.LATC7 ) {
  3248  00333A  AE8B               	btfss	3979,7,c	;volatile
  3249  00333C  D002               	goto	l553
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;main.c: 2153: LATCbits.LATC7 = 0;
  3253  00333E  9E8B               	bcf	3979,7,c	;volatile
  3254  003340  D011               	goto	L12
  3255  003342                     l553:
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;main.c: 2156: LATCbits.LATC7 = 1;
  3259  003342  8E8B               	bsf	3979,7,c	;volatile
  3260  003344  D7EB               	goto	l10409
  3261  003346                     l555:
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;main.c: 2162: if ( LATCbits.LATC6 ) {
  3265  003346  AC8B               	btfss	3979,6,c	;volatile
  3266  003348  D002               	goto	l556
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;main.c: 2163: LATCbits.LATC6 = 0;
  3270  00334A  9C8B               	bcf	3979,6,c	;volatile
  3271  00334C  D00B               	goto	L12
  3272  00334E                     l556:
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;main.c: 2166: LATCbits.LATC6 = 1;
  3276  00334E  8C8B               	bsf	3979,6,c	;volatile
  3277  003350  D7E5               	goto	l10409
  3278  003352                     l558:
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;main.c: 2172: if ( LATCbits.LATC5 ) {
  3282  003352  AA8B               	btfss	3979,5,c	;volatile
  3283  003354  D002               	goto	l559
  3284                           
  3285                           ; BSR set to: 0
  3286                           ;main.c: 2173: LATCbits.LATC5 = 0;
  3287  003356  9A8B               	bcf	3979,5,c	;volatile
  3288  003358  D005               	goto	L12
  3289  00335A                     l559:
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;main.c: 2176: LATCbits.LATC5 = 1;
  3293  00335A  8A8B               	bsf	3979,5,c	;volatile
  3294  00335C  D7DF               	goto	l10409
  3295  00335E                     l561:
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;main.c: 2182: if ( LATCbits.LATC4 ) {
  3299  00335E  A88B               	btfss	3979,4,c	;volatile
  3300  003360  D003               	goto	l562
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;main.c: 2183: LATCbits.LATC4 = 0;
  3304  003362  988B               	bcf	3979,4,c	;volatile
  3305  003364                     L12:
  3306                           
  3307                           ;main.c: 2184: bOn = 0;
  3308  003364  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3309                           
  3310                           ;main.c: 2185: } else {
  3311  003366  D010               	goto	l10439
  3312  003368                     l562:
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;main.c: 2186: LATCbits.LATC4 = 1;
  3316  003368  888B               	bsf	3979,4,c	;volatile
  3317  00336A  D7D8               	goto	l10409
  3318  00336C                     l10437:
  3319                           
  3320                           ; BSR set to: 0
  3321  00336C  51CC               	movf	doActionToggle@i& (0+255),w,b
  3322                           
  3323                           ; Switch size 1, requested type "speed"
  3324                           ; Number of cases is 7, Range of values is 0 to 6
  3325                           ; switch strategies available:
  3326                           ; Name         Instructions Cycles
  3327                           ; simple_byte           22    12 (average)
  3328                           ;	Chosen strategy is simple_byte
  3329  00336E  E0D1               	bz	l542
  3330  003370  0A01               	xorlw	1	; case 1
  3331  003372  E0D7               	bz	l546
  3332  003374  0A03               	xorlw	3	; case 2
  3333  003376  E0DB               	bz	l549
  3334  003378  0A01               	xorlw	1	; case 3
  3335  00337A  E0DF               	bz	l552
  3336  00337C  0A07               	xorlw	7	; case 4
  3337  00337E  E0E3               	bz	l555
  3338  003380  0A01               	xorlw	1	; case 5
  3339  003382  E0E7               	bz	l558
  3340  003384  0A03               	xorlw	3	; case 6
  3341  003386  E0EB               	bz	l561
  3342  003388                     l10439:
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;main.c: 2193: if ( bOn ) {
  3346  003388  51CB               	movf	doActionToggle@bOn& (0+255),w,b
  3347  00338A  E013               	bz	l564
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;main.c: 2196: if ( val & 0x08 ) {
  3351  00338C  A7CA               	btfss	doActionToggle@val& (0+255),3,b
  3352  00338E  D007               	goto	l10445
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;main.c: 2197: SendInformationEvent( i, 20, 3 );
  3356  003390  0E14               	movlw	20
  3357  003392  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3358  003394  0E03               	movlw	3
  3359  003396  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3360  003398  51CC               	movf	doActionToggle@i& (0+255),w,b
  3361  00339A  EC58  F01E         	call	_SendInformationEvent
  3362  00339E                     l10445:
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;main.c: 2198: }
  3366                           ;main.c: 2201: if ( val & 0x20 ) {
  3367  00339E  ABCA               	btfss	doActionToggle@val& (0+255),5,b
  3368  0033A0  D01A               	goto	l10455
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;main.c: 2202: SendInformationEvent( i, 20, 25 );
  3372  0033A2  0E14               	movlw	20
  3373  0033A4  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3374  0033A6  0E19               	movlw	25
  3375  0033A8  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3376  0033AA  51CC               	movf	doActionToggle@i& (0+255),w,b
  3377  0033AC  EC58  F01E         	call	_SendInformationEvent
  3378  0033B0  D012               	goto	l10455
  3379  0033B2                     l564:
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;main.c: 2206: else {
  3383                           ;main.c: 2209: if ( val & 0x10 ) {
  3384  0033B2  A9CA               	btfss	doActionToggle@val& (0+255),4,b
  3385  0033B4  D007               	goto	l10451
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;main.c: 2210: SendInformationEvent( i, 20, 4 );
  3389  0033B6  0E14               	movlw	20
  3390  0033B8  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3391  0033BA  0E04               	movlw	4
  3392  0033BC  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3393  0033BE  51CC               	movf	doActionToggle@i& (0+255),w,b
  3394  0033C0  EC58  F01E         	call	_SendInformationEvent
  3395  0033C4                     l10451:
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;main.c: 2211: }
  3399                           ;main.c: 2214: if (val & 0x40 ) {
  3400  0033C4  ADCA               	btfss	doActionToggle@val& (0+255),6,b
  3401  0033C6  D007               	goto	l10455
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;main.c: 2215: SendInformationEvent( i, 20, 24 );
  3405  0033C8  0E14               	movlw	20
  3406  0033CA  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3407  0033CC  0E18               	movlw	24
  3408  0033CE  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3409  0033D0  51CC               	movf	doActionToggle@i& (0+255),w,b
  3410  0033D2  EC58  F01E         	call	_SendInformationEvent
  3411  0033D6                     l10455:
  3412                           
  3413                           ; BSR set to: 0
  3414  0033D6  2BCC               	incf	doActionToggle@i& (0+255),f,b
  3415                           
  3416                           ; BSR set to: 0
  3417  0033D8  0E07               	movlw	7
  3418  0033DA  65CC               	cpfsgt	doActionToggle@i& (0+255),b
  3419  0033DC  D775               	goto	l10397
  3420                           
  3421                           ; BSR set to: 0
  3422  0033DE  0C07               	retlw	7
  3423  0033E0                     __end_of_doActionToggle:
  3424                           	opt stack 0
  3425                           tblptru	equ	0xFF8
  3426                           prodh	equ	0xFF4
  3427                           prodl	equ	0xFF3
  3428                           postinc0	equ	0xFEE
  3429                           wreg	equ	0xFE8
  3430                           postinc2	equ	0xFDE
  3431                           postdec2	equ	0xFDD
  3432                           fsr2h	equ	0xFDA
  3433                           fsr2l	equ	0xFD9
  3434                           status	equ	0xFD8
  3435                           
  3436 ;; *************** function _doActionDisable *****************
  3437 ;; Defined at:
  3438 ;;		line 2067 in file "../main.c"
  3439 ;; Parameters:    Size  Location     Type
  3440 ;;  dmflags         1    wreg     unsigned char 
  3441 ;;  arg             1   10[COMRAM] unsigned char 
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;  dmflags         1   13[COMRAM] unsigned char 
  3444 ;;  i               1   15[COMRAM] unsigned char 
  3445 ;;  val             1   14[COMRAM] unsigned char 
  3446 ;; Return value:  Size  Location     Type
  3447 ;;		None               void
  3448 ;; Registers used:
  3449 ;;		wreg, status,2, status,0, cstack
  3450 ;; Tracked objects:
  3451 ;;		On entry : F/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3455 ;;      Params:         1       0       0       0       0       0       0
  3456 ;;      Locals:         3       0       0       0       0       0       0
  3457 ;;      Temps:          2       0       0       0       0       0       0
  3458 ;;      Totals:         6       0       0       0       0       0       0
  3459 ;;Total ram usage:        6 bytes
  3460 ;; Hardware stack levels used:    1
  3461 ;; Hardware stack levels required when called:    3
  3462 ;; This function calls:
  3463 ;;		_writeEEPROM
  3464 ;;		_readEEPROM
  3465 ;; This function is called by:
  3466 ;;		_doDM
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           	psect	text10
  3471  003C44                     __ptext10:
  3472                           	opt stack 0
  3473  003C44                     _doActionDisable:
  3474                           	opt stack 26
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;incstack = 0
  3478                           ;incstack = 0
  3479                           ;doActionDisable@dmflags stored from wreg
  3480  003C44  CFE8 F00E          	movff	wreg,doActionDisable@dmflags
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;main.c: 2069: unsigned char i;
  3484                           ;main.c: 2070: unsigned char val;
  3485                           ;main.c: 2072: for ( i = 0; i < 8; i++ ) {
  3486  003C48  6A10               	clrf	doActionDisable@i,c
  3487  003C4A                     l8735:
  3488                           
  3489                           ;main.c: 2075: if ( !( arg & (1 << i) ) ) continue;
  3490  003C4A  C010  F00C         	movff	doActionDisable@i,??_doActionDisable
  3491  003C4E  0E01               	movlw	1
  3492  003C50  6E0D               	movwf	(??_doActionDisable+1)& (0+255),c
  3493  003C52  2A0C               	incf	??_doActionDisable,f,c
  3494  003C54  D002               	goto	u10394
  3495  003C56                     u10395:
  3496  003C56  90D8               	bcf	status,0,c
  3497  003C58  360D               	rlcf	??_doActionDisable+1,f,c
  3498  003C5A                     u10394:
  3499  003C5A  2E0C               	decfsz	??_doActionDisable,f,c
  3500  003C5C  D7FC               	goto	u10395
  3501  003C5E  500D               	movf	??_doActionDisable+1,w,c
  3502  003C60  140B               	andwf	doActionDisable@arg,w,c
  3503  003C62  E021               	bz	l8745
  3504                           
  3505                           ;main.c: 2078: if ( dmflags & 0x08) {
  3506  003C64  A60E               	btfss	doActionDisable@dmflags,3,c
  3507  003C66  D00B               	goto	l8743
  3508                           
  3509                           ;main.c: 2079: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3510                           ;main.c: 2080: 53 +
  3511                           ;main.c: 2081: i ) ) {
  3512  003C68  0E78               	movlw	120
  3513  003C6A  2410               	addwf	doActionDisable@i,w,c
  3514  003C6C  6E08               	movwf	?_readEEPROM,c
  3515  003C6E  6A09               	clrf	?_readEEPROM+1,c
  3516  003C70  0E00               	movlw	0
  3517  003C72  2209               	addwfc	?_readEEPROM+1,f,c
  3518  003C74  ECEF  F020         	call	_readEEPROM	;wreg free
  3519  003C78  0100               	movlb	0	; () banked
  3520  003C7A  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3521  003C7C  E114               	bnz	l8745
  3522  003C7E                     l8743:
  3523                           
  3524                           ;main.c: 2083: }
  3525                           ;main.c: 2084: }
  3526                           ;main.c: 2086: val = readEEPROM( 0x43 + 10 + i );
  3527  003C7E  0E4D               	movlw	77
  3528  003C80  2410               	addwf	doActionDisable@i,w,c
  3529  003C82  6E08               	movwf	?_readEEPROM,c
  3530  003C84  6A09               	clrf	?_readEEPROM+1,c
  3531  003C86  0E00               	movlw	0
  3532  003C88  2209               	addwfc	?_readEEPROM+1,f,c
  3533  003C8A  ECEF  F020         	call	_readEEPROM	;wreg free
  3534  003C8E  6E0F               	movwf	doActionDisable@val,c
  3535                           
  3536                           ;main.c: 2087: writeEEPROM( 0x43 + 10 + i, val & ~0x80 );
  3537  003C90  0E4D               	movlw	77
  3538  003C92  2410               	addwf	doActionDisable@i,w,c
  3539  003C94  6E08               	movwf	?_writeEEPROM,c
  3540  003C96  6A09               	clrf	?_writeEEPROM+1,c
  3541  003C98  0E00               	movlw	0
  3542  003C9A  2209               	addwfc	?_writeEEPROM+1,f,c
  3543  003C9C  500F               	movf	doActionDisable@val,w,c
  3544  003C9E  0B7F               	andlw	127
  3545  003CA0  6E0A               	movwf	?_writeEEPROM+2,c
  3546  003CA2  ECC7  F01F         	call	_writeEEPROM	;wreg free
  3547  003CA6                     l8745:
  3548  003CA6  2A10               	incf	doActionDisable@i,f,c
  3549  003CA8  0E07               	movlw	7
  3550  003CAA  6410               	cpfsgt	doActionDisable@i,c
  3551  003CAC  D7CE               	goto	l8735
  3552  003CAE  0C07               	retlw	7
  3553  003CB0                     __end_of_doActionDisable:
  3554                           	opt stack 0
  3555                           tblptru	equ	0xFF8
  3556                           prodh	equ	0xFF4
  3557                           prodl	equ	0xFF3
  3558                           postinc0	equ	0xFEE
  3559                           wreg	equ	0xFE8
  3560                           postinc2	equ	0xFDE
  3561                           postdec2	equ	0xFDD
  3562                           fsr2h	equ	0xFDA
  3563                           fsr2l	equ	0xFD9
  3564                           status	equ	0xFD8
  3565                           
  3566 ;; *************** function _doActionStatus *****************
  3567 ;; Defined at:
  3568 ;;		line 1978 in file "../main.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;  dmflags         1    wreg     unsigned char 
  3571 ;;  arg             1   80[COMRAM] unsigned char 
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3574 ;;  i               1   27[BANK0 ] unsigned char 
  3575 ;;  val             1   26[BANK0 ] unsigned char 
  3576 ;;  bOn             1   25[BANK0 ] enum E15660
  3577 ;; Return value:  Size  Location     Type
  3578 ;;		None               void
  3579 ;; Registers used:
  3580 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3581 ;; Tracked objects:
  3582 ;;		On entry : F/0
  3583 ;;		On exit  : F/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3586 ;;      Params:         1       0       0       0       0       0       0
  3587 ;;      Locals:         0       4       0       0       0       0       0
  3588 ;;      Temps:          0       2       0       0       0       0       0
  3589 ;;      Totals:         1       6       0       0       0       0       0
  3590 ;;Total ram usage:        7 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; Hardware stack levels required when called:    7
  3593 ;; This function calls:
  3594 ;;		_readEEPROM
  3595 ;;		_SendInformationEvent
  3596 ;; This function is called by:
  3597 ;;		_doDM
  3598 ;; This function uses a non-reentrant model
  3599 ;;
  3600                           
  3601                           	psect	text11
  3602  0034EE                     __ptext11:
  3603                           	opt stack 0
  3604  0034EE                     _doActionStatus:
  3605                           	opt stack 22
  3606                           
  3607                           ;incstack = 0
  3608                           ;incstack = 0
  3609                           ;doActionStatus@dmflags stored from wreg
  3610  0034EE  CFE8 F0C9          	movff	wreg,doActionStatus@dmflags
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;main.c: 1980: unsigned char i;
  3614                           ;main.c: 1981: unsigned char val;
  3615                           ;main.c: 1982: BOOL bOn = 0;
  3616  0034F2  6BCA               	clrf	doActionStatus@bOn& (0+255),b
  3617                           
  3618                           ;main.c: 1984: for (i = 0; i < 8; i++) {
  3619  0034F4  6BCC               	clrf	doActionStatus@i& (0+255),b
  3620  0034F6                     l10343:
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;main.c: 1987: if (!(arg & (1 << i))) continue;
  3624  0034F6  C0CC  F0C7         	movff	doActionStatus@i,??_doActionStatus
  3625  0034FA  0E01               	movlw	1
  3626  0034FC  6FC8               	movwf	(??_doActionStatus+1)& (0+255),b
  3627  0034FE  2BC7               	incf	??_doActionStatus& (0+255),f,b
  3628  003500  D002               	goto	u13154
  3629  003502                     u13155:
  3630  003502  90D8               	bcf	status,0,c
  3631  003504  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3632  003506                     u13154:
  3633  003506  2FC7               	decfsz	??_doActionStatus& (0+255),f,b
  3634  003508  D7FC               	goto	u13155
  3635  00350A  51C8               	movf	(??_doActionStatus+1)& (0+255),w,b
  3636  00350C  1451               	andwf	doActionStatus@arg,w,c
  3637  00350E  E070               	bz	l10387
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;main.c: 1990: if (dmflags & 0x08) {
  3641  003510  A7C9               	btfss	doActionStatus@dmflags& (0+255),3,b
  3642  003512  D00B               	goto	l10351
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;main.c: 1991: if (vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3646                           ;main.c: 1992: 53 +
  3647                           ;main.c: 1993: i ) ) {
  3648  003514  0E78               	movlw	120
  3649  003516  25CC               	addwf	doActionStatus@i& (0+255),w,b
  3650  003518  6E08               	movwf	?_readEEPROM,c
  3651  00351A  6A09               	clrf	?_readEEPROM+1,c
  3652  00351C  0E00               	movlw	0
  3653  00351E  2209               	addwfc	?_readEEPROM+1,f,c
  3654  003520  ECEF  F020         	call	_readEEPROM	;wreg free
  3655  003524  0100               	movlb	0	; () banked
  3656  003526  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3657  003528  E163               	bnz	l10387
  3658  00352A                     l10351:
  3659                           
  3660                           ; BSR set to: 0
  3661                           ;main.c: 1995: }
  3662                           ;main.c: 1996: }
  3663                           ;main.c: 1998: val = readEEPROM( 0x43 + 10 + i );
  3664  00352A  0E4D               	movlw	77
  3665  00352C  25CC               	addwf	doActionStatus@i& (0+255),w,b
  3666  00352E  6E08               	movwf	?_readEEPROM,c
  3667  003530  6A09               	clrf	?_readEEPROM+1,c
  3668  003532  0E00               	movlw	0
  3669  003534  2209               	addwfc	?_readEEPROM+1,f,c
  3670  003536  ECEF  F020         	call	_readEEPROM	;wreg free
  3671  00353A  0100               	movlb	0	; () banked
  3672  00353C  6FCB               	movwf	doActionStatus@val& (0+255),b
  3673                           
  3674                           ;main.c: 2000: switch (i) {
  3675  00353E  D023               	goto	l10369
  3676  003540                     l10353:
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;main.c: 2003: bOn = LATBbits.LATB4;
  3680  003540  0E00               	movlw	0
  3681  003542  B88A               	btfsc	3978,4,c	;volatile
  3682  003544  0E01               	movlw	1
  3683  003546  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3684                           
  3685                           ;main.c: 2004: break;
  3686  003548  D02C               	goto	l10371
  3687  00354A                     l10355:
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;main.c: 2007: bOn = LATBbits.LATB1;
  3691  00354A  0E00               	movlw	0
  3692  00354C  B28A               	btfsc	3978,1,c	;volatile
  3693  00354E  0E01               	movlw	1
  3694  003550  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3695                           
  3696                           ;main.c: 2008: break;
  3697  003552  D027               	goto	l10371
  3698  003554                     l10357:
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;main.c: 2011: bOn = LATBbits.LATB0;
  3702  003554  0E00               	movlw	0
  3703  003556  B08A               	btfsc	3978,0,c	;volatile
  3704  003558  0E01               	movlw	1
  3705  00355A  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3706                           
  3707                           ;main.c: 2012: break;
  3708  00355C  D022               	goto	l10371
  3709  00355E                     l10359:
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;main.c: 2015: bOn = LATCbits.LATC7;
  3713  00355E  0E00               	movlw	0
  3714  003560  BE8B               	btfsc	3979,7,c	;volatile
  3715  003562  0E01               	movlw	1
  3716  003564  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3717                           
  3718                           ;main.c: 2016: break;
  3719  003566  D01D               	goto	l10371
  3720  003568                     l10361:
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;main.c: 2019: bOn = LATCbits.LATC6;
  3724  003568  0E00               	movlw	0
  3725  00356A  BC8B               	btfsc	3979,6,c	;volatile
  3726  00356C  0E01               	movlw	1
  3727  00356E  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3728                           
  3729                           ;main.c: 2020: break;
  3730  003570  D018               	goto	l10371
  3731  003572                     l10363:
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;main.c: 2023: bOn = LATCbits.LATC5;
  3735  003572  0E00               	movlw	0
  3736  003574  BA8B               	btfsc	3979,5,c	;volatile
  3737  003576  0E01               	movlw	1
  3738  003578  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3739                           
  3740                           ;main.c: 2024: break;
  3741  00357A  D013               	goto	l10371
  3742  00357C                     l10365:
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;main.c: 2027: bOn = LATCbits.LATC4;
  3746  00357C  0E00               	movlw	0
  3747  00357E  B88B               	btfsc	3979,4,c	;volatile
  3748  003580  0E01               	movlw	1
  3749  003582  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3750                           
  3751                           ;main.c: 2028: break;
  3752  003584  D00E               	goto	l10371
  3753  003586                     l10369:
  3754                           
  3755                           ; BSR set to: 0
  3756  003586  51CC               	movf	doActionStatus@i& (0+255),w,b
  3757                           
  3758                           ; Switch size 1, requested type "speed"
  3759                           ; Number of cases is 7, Range of values is 0 to 6
  3760                           ; switch strategies available:
  3761                           ; Name         Instructions Cycles
  3762                           ; simple_byte           22    12 (average)
  3763                           ;	Chosen strategy is simple_byte
  3764  003588  E0DB               	bz	l10353
  3765  00358A  0A01               	xorlw	1	; case 1
  3766  00358C  E0DE               	bz	l10355
  3767  00358E  0A03               	xorlw	3	; case 2
  3768  003590  E0E1               	bz	l10357
  3769  003592  0A01               	xorlw	1	; case 3
  3770  003594  E0E4               	bz	l10359
  3771  003596  0A07               	xorlw	7	; case 4
  3772  003598  E0E7               	bz	l10361
  3773  00359A  0A01               	xorlw	1	; case 5
  3774  00359C  E0EA               	bz	l10363
  3775  00359E  0A03               	xorlw	3	; case 6
  3776  0035A0  E0ED               	bz	l10365
  3777  0035A2                     l10371:
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;main.c: 2032: if (bOn) {
  3781  0035A2  51CA               	movf	doActionStatus@bOn& (0+255),w,b
  3782  0035A4  E013               	bz	l517
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;main.c: 2035: if ( val & 0x10 ) {
  3786  0035A6  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3787  0035A8  D007               	goto	l10377
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;main.c: 2036: SendInformationEvent( i, 20, 4 );
  3791  0035AA  0E14               	movlw	20
  3792  0035AC  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3793  0035AE  0E04               	movlw	4
  3794  0035B0  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3795  0035B2  51CC               	movf	doActionStatus@i& (0+255),w,b
  3796  0035B4  EC58  F01E         	call	_SendInformationEvent
  3797  0035B8                     l10377:
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;main.c: 2037: }
  3801                           ;main.c: 2040: if ( val & 0x40 ) {
  3802  0035B8  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3803  0035BA  D01A               	goto	l10387
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;main.c: 2041: SendInformationEvent( i, 20, 24 );
  3807  0035BC  0E14               	movlw	20
  3808  0035BE  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3809  0035C0  0E18               	movlw	24
  3810  0035C2  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3811  0035C4  51CC               	movf	doActionStatus@i& (0+255),w,b
  3812  0035C6  EC58  F01E         	call	_SendInformationEvent
  3813  0035CA  D012               	goto	l10387
  3814  0035CC                     l517:
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;main.c: 2045: else {
  3818                           ;main.c: 2048: if ( val & 0x10 ) {
  3819  0035CC  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3820  0035CE  D007               	goto	l10383
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;main.c: 2049: SendInformationEvent( i, 20, 4 );
  3824  0035D0  0E14               	movlw	20
  3825  0035D2  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3826  0035D4  0E04               	movlw	4
  3827  0035D6  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3828  0035D8  51CC               	movf	doActionStatus@i& (0+255),w,b
  3829  0035DA  EC58  F01E         	call	_SendInformationEvent
  3830  0035DE                     l10383:
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;main.c: 2050: }
  3834                           ;main.c: 2053: if ( val & 0x40 ) {
  3835  0035DE  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3836  0035E0  D007               	goto	l10387
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;main.c: 2054: SendInformationEvent( i, 20, 24 );
  3840  0035E2  0E14               	movlw	20
  3841  0035E4  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3842  0035E6  0E18               	movlw	24
  3843  0035E8  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3844  0035EA  51CC               	movf	doActionStatus@i& (0+255),w,b
  3845  0035EC  EC58  F01E         	call	_SendInformationEvent
  3846  0035F0                     l10387:
  3847                           
  3848                           ; BSR set to: 0
  3849  0035F0  2BCC               	incf	doActionStatus@i& (0+255),f,b
  3850                           
  3851                           ; BSR set to: 0
  3852  0035F2  0E07               	movlw	7
  3853  0035F4  65CC               	cpfsgt	doActionStatus@i& (0+255),b
  3854  0035F6  D77F               	goto	l10343
  3855                           
  3856                           ; BSR set to: 0
  3857  0035F8  0C07               	retlw	7
  3858  0035FA                     __end_of_doActionStatus:
  3859                           	opt stack 0
  3860                           tblptru	equ	0xFF8
  3861                           prodh	equ	0xFF4
  3862                           prodl	equ	0xFF3
  3863                           postinc0	equ	0xFEE
  3864                           wreg	equ	0xFE8
  3865                           postinc2	equ	0xFDE
  3866                           postdec2	equ	0xFDD
  3867                           fsr2h	equ	0xFDA
  3868                           fsr2l	equ	0xFD9
  3869                           status	equ	0xFD8
  3870                           
  3871 ;; *************** function _doActionPulse *****************
  3872 ;; Defined at:
  3873 ;;		line 1887 in file "../main.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;  dmflags         1    wreg     unsigned char 
  3876 ;;  arg             1   10[COMRAM] unsigned char 
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;  dmflags         1   14[COMRAM] unsigned char 
  3879 ;;  i               1   16[COMRAM] unsigned char 
  3880 ;;  val             1   15[COMRAM] unsigned char 
  3881 ;; Return value:  Size  Location     Type
  3882 ;;		None               void
  3883 ;; Registers used:
  3884 ;;		wreg, status,2, status,0, cstack
  3885 ;; Tracked objects:
  3886 ;;		On entry : F/0
  3887 ;;		On exit  : 0/0
  3888 ;;		Unchanged: 0/0
  3889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3890 ;;      Params:         1       0       0       0       0       0       0
  3891 ;;      Locals:         3       0       0       0       0       0       0
  3892 ;;      Temps:          3       0       0       0       0       0       0
  3893 ;;      Totals:         7       0       0       0       0       0       0
  3894 ;;Total ram usage:        7 bytes
  3895 ;; Hardware stack levels used:    1
  3896 ;; Hardware stack levels required when called:    3
  3897 ;; This function calls:
  3898 ;;		_readEEPROM
  3899 ;; This function is called by:
  3900 ;;		_doDM
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           	psect	text12
  3905  002B24                     __ptext12:
  3906                           	opt stack 0
  3907  002B24                     _doActionPulse:
  3908                           	opt stack 26
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;incstack = 0
  3912                           ;incstack = 0
  3913                           ;doActionPulse@dmflags stored from wreg
  3914  002B24  CFE8 F00F          	movff	wreg,doActionPulse@dmflags
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;main.c: 1889: unsigned char i;
  3918                           ;main.c: 1890: unsigned char val;
  3919                           ;main.c: 1892: for ( i = 0; i < 8; i++ ) {
  3920  002B28  6A11               	clrf	doActionPulse@i,c
  3921  002B2A                     l8625:
  3922                           
  3923                           ;main.c: 1895: if ( !( arg & ( 1 << i ) ) ) continue;
  3924  002B2A  C011  F00C         	movff	doActionPulse@i,??_doActionPulse
  3925  002B2E  0E01               	movlw	1
  3926  002B30  6E0D               	movwf	(??_doActionPulse+1)& (0+255),c
  3927  002B32  2A0C               	incf	??_doActionPulse,f,c
  3928  002B34  D002               	goto	u10234
  3929  002B36                     u10235:
  3930  002B36  90D8               	bcf	status,0,c
  3931  002B38  360D               	rlcf	??_doActionPulse+1,f,c
  3932  002B3A                     u10234:
  3933  002B3A  2E0C               	decfsz	??_doActionPulse,f,c
  3934  002B3C  D7FC               	goto	u10235
  3935  002B3E  500D               	movf	??_doActionPulse+1,w,c
  3936  002B40  140B               	andwf	doActionPulse@arg,w,c
  3937  002B42  E101 D0D2          	bz	l8671
  3938                           
  3939                           ;main.c: 1898: if (dmflags & 0x08) {
  3940  002B46  A60F               	btfss	doActionPulse@dmflags,3,c
  3941  002B48  D00C               	goto	l8633
  3942                           
  3943                           ;main.c: 1899: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3944                           ;main.c: 1900: 53 +
  3945                           ;main.c: 1901: i ) ) {
  3946  002B4A  0E78               	movlw	120
  3947  002B4C  2411               	addwf	doActionPulse@i,w,c
  3948  002B4E  6E08               	movwf	?_readEEPROM,c
  3949  002B50  6A09               	clrf	?_readEEPROM+1,c
  3950  002B52  0E00               	movlw	0
  3951  002B54  2209               	addwfc	?_readEEPROM+1,f,c
  3952  002B56  ECEF  F020         	call	_readEEPROM	;wreg free
  3953  002B5A  0100               	movlb	0	; () banked
  3954  002B5C  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3955  002B5E  E001 D0C4          	bnz	l8671
  3956  002B62                     l8633:
  3957                           
  3958                           ;main.c: 1903: }
  3959                           ;main.c: 1904: }
  3960                           ;main.c: 1906: val = readEEPROM( 0x43 + 10 + i );
  3961  002B62  0E4D               	movlw	77
  3962  002B64  2411               	addwf	doActionPulse@i,w,c
  3963  002B66  6E08               	movwf	?_readEEPROM,c
  3964  002B68  6A09               	clrf	?_readEEPROM+1,c
  3965  002B6A  0E00               	movlw	0
  3966  002B6C  2209               	addwfc	?_readEEPROM+1,f,c
  3967  002B6E  ECEF  F020         	call	_readEEPROM	;wreg free
  3968  002B72  6E10               	movwf	doActionPulse@val,c
  3969                           
  3970                           ;main.c: 1909: if ( !( val & 0x80 ) ) continue;
  3971  002B74  AE10               	btfss	doActionPulse@val,7,c
  3972  002B76  D0B9               	goto	l8671
  3973  002B78  D0A8               	goto	l8669
  3974  002B7A                     l491:
  3975                           
  3976                           ;main.c: 1914: LATBbits.LATB4 = 0;
  3977  002B7A  988A               	bcf	3978,4,c	;volatile
  3978                           
  3979                           ;main.c: 1915: relay_pulse_flags |= 0x01;
  3980  002B7C  0100               	movlb	0	; () banked
  3981  002B7E  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;main.c: 1916: relay_pulse_timer[ 0 ] =
  3985                           ;main.c: 1917: readEEPROM( 0x43 + 18 ) * 256 +
  3986                           ;main.c: 1918: readEEPROM( 0x43 + 19 );
  3987  002B80  6A09               	clrf	?_readEEPROM+1,c
  3988  002B82  0E56               	movlw	86
  3989  002B84  6E08               	movwf	?_readEEPROM,c
  3990  002B86  ECEF  F020         	call	_readEEPROM	;wreg free
  3991  002B8A  6E0C               	movwf	??_doActionPulse& (0+255),c
  3992  002B8C  6A09               	clrf	?_readEEPROM+1,c
  3993  002B8E  0E55               	movlw	85
  3994  002B90  6E08               	movwf	?_readEEPROM,c
  3995  002B92  ECEF  F020         	call	_readEEPROM	;wreg free
  3996  002B96  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  3997  002B98  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  3998  002B9A  500C               	movf	??_doActionPulse,w,c
  3999  002B9C  240D               	addwf	??_doActionPulse+1,w,c
  4000  002B9E  0100               	movlb	0	; () banked
  4001  002BA0  6F70               	movwf	_relay_pulse_timer& (0+255),b
  4002  002BA2  0E00               	movlw	0
  4003  002BA4  200E               	addwfc	??_doActionPulse+2,w,c
  4004  002BA6  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  4005                           
  4006                           ;main.c: 1919: break;
  4007  002BA8  D0A0               	goto	l8671
  4008  002BAA                     l493:
  4009                           
  4010                           ;main.c: 1922: LATBbits.LATB1 = 0;
  4011  002BAA  928A               	bcf	3978,1,c	;volatile
  4012                           
  4013                           ;main.c: 1923: relay_pulse_flags |= 0x02;
  4014  002BAC  0100               	movlb	0	; () banked
  4015  002BAE  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;main.c: 1924: relay_pulse_timer[ 1 ] =
  4019                           ;main.c: 1925: readEEPROM( 0x43 + 20 ) * 256 +
  4020                           ;main.c: 1926: readEEPROM( 0x43 + 21 );
  4021  002BB0  6A09               	clrf	?_readEEPROM+1,c
  4022  002BB2  0E58               	movlw	88
  4023  002BB4  6E08               	movwf	?_readEEPROM,c
  4024  002BB6  ECEF  F020         	call	_readEEPROM	;wreg free
  4025  002BBA  6E0C               	movwf	??_doActionPulse& (0+255),c
  4026  002BBC  6A09               	clrf	?_readEEPROM+1,c
  4027  002BBE  0E57               	movlw	87
  4028  002BC0  6E08               	movwf	?_readEEPROM,c
  4029  002BC2  ECEF  F020         	call	_readEEPROM	;wreg free
  4030  002BC6  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4031  002BC8  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4032  002BCA  500C               	movf	??_doActionPulse,w,c
  4033  002BCC  240D               	addwf	??_doActionPulse+1,w,c
  4034  002BCE  0100               	movlb	0	; () banked
  4035  002BD0  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  4036  002BD2  0E00               	movlw	0
  4037  002BD4  200E               	addwfc	??_doActionPulse+2,w,c
  4038  002BD6  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  4039                           
  4040                           ;main.c: 1927: break;
  4041  002BD8  D088               	goto	l8671
  4042  002BDA                     l494:
  4043                           
  4044                           ;main.c: 1930: LATBbits.LATB0 = 0;
  4045  002BDA  908A               	bcf	3978,0,c	;volatile
  4046                           
  4047                           ;main.c: 1931: relay_pulse_flags |= 0x04;
  4048  002BDC  0100               	movlb	0	; () banked
  4049  002BDE  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  4050                           
  4051                           ; BSR set to: 0
  4052                           ;main.c: 1932: relay_pulse_timer[ 2 ] =
  4053                           ;main.c: 1933: readEEPROM( 0x43 + 22 ) * 256 +
  4054                           ;main.c: 1934: readEEPROM( 0x43 + 23 );
  4055  002BE0  6A09               	clrf	?_readEEPROM+1,c
  4056  002BE2  0E5A               	movlw	90
  4057  002BE4  6E08               	movwf	?_readEEPROM,c
  4058  002BE6  ECEF  F020         	call	_readEEPROM	;wreg free
  4059  002BEA  6E0C               	movwf	??_doActionPulse& (0+255),c
  4060  002BEC  6A09               	clrf	?_readEEPROM+1,c
  4061  002BEE  0E59               	movlw	89
  4062  002BF0  6E08               	movwf	?_readEEPROM,c
  4063  002BF2  ECEF  F020         	call	_readEEPROM	;wreg free
  4064  002BF6  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4065  002BF8  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4066  002BFA  500C               	movf	??_doActionPulse,w,c
  4067  002BFC  240D               	addwf	??_doActionPulse+1,w,c
  4068  002BFE  0100               	movlb	0	; () banked
  4069  002C00  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  4070  002C02  0E00               	movlw	0
  4071  002C04  200E               	addwfc	??_doActionPulse+2,w,c
  4072  002C06  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  4073                           
  4074                           ;main.c: 1935: break;
  4075  002C08  D070               	goto	l8671
  4076  002C0A                     l495:
  4077                           
  4078                           ;main.c: 1938: LATCbits.LATC7 = 0;
  4079  002C0A  9E8B               	bcf	3979,7,c	;volatile
  4080                           
  4081                           ;main.c: 1939: relay_pulse_flags |= 0x08;
  4082  002C0C  0100               	movlb	0	; () banked
  4083  002C0E  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;main.c: 1940: relay_pulse_timer[ 3 ] =
  4087                           ;main.c: 1941: readEEPROM( 0x43 + 24 ) * 256 +
  4088                           ;main.c: 1942: readEEPROM( 0x43 + 25 );
  4089  002C10  6A09               	clrf	?_readEEPROM+1,c
  4090  002C12  0E5C               	movlw	92
  4091  002C14  6E08               	movwf	?_readEEPROM,c
  4092  002C16  ECEF  F020         	call	_readEEPROM	;wreg free
  4093  002C1A  6E0C               	movwf	??_doActionPulse& (0+255),c
  4094  002C1C  6A09               	clrf	?_readEEPROM+1,c
  4095  002C1E  0E5B               	movlw	91
  4096  002C20  6E08               	movwf	?_readEEPROM,c
  4097  002C22  ECEF  F020         	call	_readEEPROM	;wreg free
  4098  002C26  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4099  002C28  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4100  002C2A  500C               	movf	??_doActionPulse,w,c
  4101  002C2C  240D               	addwf	??_doActionPulse+1,w,c
  4102  002C2E  0100               	movlb	0	; () banked
  4103  002C30  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  4104  002C32  0E00               	movlw	0
  4105  002C34  200E               	addwfc	??_doActionPulse+2,w,c
  4106  002C36  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  4107                           
  4108                           ;main.c: 1943: break;
  4109  002C38  D058               	goto	l8671
  4110  002C3A                     l496:
  4111                           
  4112                           ;main.c: 1946: LATCbits.LATC6 = 0;
  4113  002C3A  9C8B               	bcf	3979,6,c	;volatile
  4114                           
  4115                           ;main.c: 1947: relay_pulse_flags |= 0x10;
  4116  002C3C  0100               	movlb	0	; () banked
  4117  002C3E  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;main.c: 1948: relay_pulse_timer[ 4 ] =
  4121                           ;main.c: 1949: readEEPROM( 0x43 + 26 ) * 256 +
  4122                           ;main.c: 1950: readEEPROM( 0x43 + 27 );
  4123  002C40  6A09               	clrf	?_readEEPROM+1,c
  4124  002C42  0E5E               	movlw	94
  4125  002C44  6E08               	movwf	?_readEEPROM,c
  4126  002C46  ECEF  F020         	call	_readEEPROM	;wreg free
  4127  002C4A  6E0C               	movwf	??_doActionPulse& (0+255),c
  4128  002C4C  6A09               	clrf	?_readEEPROM+1,c
  4129  002C4E  0E5D               	movlw	93
  4130  002C50  6E08               	movwf	?_readEEPROM,c
  4131  002C52  ECEF  F020         	call	_readEEPROM	;wreg free
  4132  002C56  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4133  002C58  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4134  002C5A  500C               	movf	??_doActionPulse,w,c
  4135  002C5C  240D               	addwf	??_doActionPulse+1,w,c
  4136  002C5E  0100               	movlb	0	; () banked
  4137  002C60  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  4138  002C62  0E00               	movlw	0
  4139  002C64  200E               	addwfc	??_doActionPulse+2,w,c
  4140  002C66  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  4141                           
  4142                           ;main.c: 1951: break;
  4143  002C68  D040               	goto	l8671
  4144  002C6A                     l497:
  4145                           
  4146                           ;main.c: 1954: LATCbits.LATC5 = 0;
  4147  002C6A  9A8B               	bcf	3979,5,c	;volatile
  4148                           
  4149                           ;main.c: 1955: relay_pulse_flags |= 0x20;
  4150  002C6C  0100               	movlb	0	; () banked
  4151  002C6E  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;main.c: 1956: relay_pulse_timer[ 5 ] =
  4155                           ;main.c: 1957: readEEPROM( 0x43 + 28 ) * 256 +
  4156                           ;main.c: 1958: readEEPROM( 0x43 + 29 );
  4157  002C70  6A09               	clrf	?_readEEPROM+1,c
  4158  002C72  0E60               	movlw	96
  4159  002C74  6E08               	movwf	?_readEEPROM,c
  4160  002C76  ECEF  F020         	call	_readEEPROM	;wreg free
  4161  002C7A  6E0C               	movwf	??_doActionPulse& (0+255),c
  4162  002C7C  6A09               	clrf	?_readEEPROM+1,c
  4163  002C7E  0E5F               	movlw	95
  4164  002C80  6E08               	movwf	?_readEEPROM,c
  4165  002C82  ECEF  F020         	call	_readEEPROM	;wreg free
  4166  002C86  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4167  002C88  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4168  002C8A  500C               	movf	??_doActionPulse,w,c
  4169  002C8C  240D               	addwf	??_doActionPulse+1,w,c
  4170  002C8E  0100               	movlb	0	; () banked
  4171  002C90  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  4172  002C92  0E00               	movlw	0
  4173  002C94  200E               	addwfc	??_doActionPulse+2,w,c
  4174  002C96  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  4175                           
  4176                           ;main.c: 1959: break;
  4177  002C98  D028               	goto	l8671
  4178  002C9A                     l498:
  4179                           
  4180                           ;main.c: 1962: LATCbits.LATC4 = 0;
  4181  002C9A  988B               	bcf	3979,4,c	;volatile
  4182                           
  4183                           ;main.c: 1963: relay_pulse_flags |= 0x40;
  4184  002C9C  0100               	movlb	0	; () banked
  4185  002C9E  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;main.c: 1964: relay_pulse_timer[ 6 ] =
  4189                           ;main.c: 1965: readEEPROM( 0x43 + 30 ) * 256 +
  4190                           ;main.c: 1966: readEEPROM( 0x43 + 31 );
  4191  002CA0  6A09               	clrf	?_readEEPROM+1,c
  4192  002CA2  0E62               	movlw	98
  4193  002CA4  6E08               	movwf	?_readEEPROM,c
  4194  002CA6  ECEF  F020         	call	_readEEPROM	;wreg free
  4195  002CAA  6E0C               	movwf	??_doActionPulse& (0+255),c
  4196  002CAC  6A09               	clrf	?_readEEPROM+1,c
  4197  002CAE  0E61               	movlw	97
  4198  002CB0  6E08               	movwf	?_readEEPROM,c
  4199  002CB2  ECEF  F020         	call	_readEEPROM	;wreg free
  4200  002CB6  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4201  002CB8  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4202  002CBA  500C               	movf	??_doActionPulse,w,c
  4203  002CBC  240D               	addwf	??_doActionPulse+1,w,c
  4204  002CBE  0100               	movlb	0	; () banked
  4205  002CC0  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  4206  002CC2  0E00               	movlw	0
  4207  002CC4  200E               	addwfc	??_doActionPulse+2,w,c
  4208  002CC6  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  4209                           
  4210                           ;main.c: 1967: break;
  4211  002CC8  D010               	goto	l8671
  4212  002CCA                     l8669:
  4213  002CCA  5011               	movf	doActionPulse@i,w,c
  4214                           
  4215                           ; Switch size 1, requested type "speed"
  4216                           ; Number of cases is 7, Range of values is 0 to 6
  4217                           ; switch strategies available:
  4218                           ; Name         Instructions Cycles
  4219                           ; simple_byte           22    12 (average)
  4220                           ;	Chosen strategy is simple_byte
  4221  002CCC  E101 D755          	bz	l491
  4222  002CD0  0A01               	xorlw	1	; case 1
  4223  002CD2  E101 D76A          	bz	l493
  4224  002CD6  0A03               	xorlw	3	; case 2
  4225  002CD8  E080               	bz	l494
  4226  002CDA  0A01               	xorlw	1	; case 3
  4227  002CDC  E096               	bz	l495
  4228  002CDE  0A07               	xorlw	7	; case 4
  4229  002CE0  E0AC               	bz	l496
  4230  002CE2  0A01               	xorlw	1	; case 5
  4231  002CE4  E0C2               	bz	l497
  4232  002CE6  0A03               	xorlw	3	; case 6
  4233  002CE8  E0D8               	bz	l498
  4234  002CEA                     l8671:
  4235  002CEA  2A11               	incf	doActionPulse@i,f,c
  4236  002CEC  0E07               	movlw	7
  4237  002CEE  6411               	cpfsgt	doActionPulse@i,c
  4238  002CF0  D71C               	goto	l8625
  4239  002CF2  0C07               	retlw	7
  4240  002CF4                     __end_of_doActionPulse:
  4241                           	opt stack 0
  4242                           tblptru	equ	0xFF8
  4243                           prodh	equ	0xFF4
  4244                           prodl	equ	0xFF3
  4245                           postinc0	equ	0xFEE
  4246                           wreg	equ	0xFE8
  4247                           postinc2	equ	0xFDE
  4248                           postdec2	equ	0xFDD
  4249                           fsr2h	equ	0xFDA
  4250                           fsr2l	equ	0xFD9
  4251                           status	equ	0xFD8
  4252                           
  4253 ;; *************** function _doActionOn *****************
  4254 ;; Defined at:
  4255 ;;		line 1699 in file "../main.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;  dmflags         1    wreg     unsigned char 
  4258 ;;  arg             1   80[COMRAM] unsigned char 
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;  dmflags         1   25[BANK0 ] unsigned char 
  4261 ;;  i               1   27[BANK0 ] unsigned char 
  4262 ;;  val             1   26[BANK0 ] unsigned char 
  4263 ;; Return value:  Size  Location     Type
  4264 ;;		None               void
  4265 ;; Registers used:
  4266 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4267 ;; Tracked objects:
  4268 ;;		On entry : F/0
  4269 ;;		On exit  : F/0
  4270 ;;		Unchanged: 0/0
  4271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4272 ;;      Params:         1       0       0       0       0       0       0
  4273 ;;      Locals:         0       3       0       0       0       0       0
  4274 ;;      Temps:          0       3       0       0       0       0       0
  4275 ;;      Totals:         1       6       0       0       0       0       0
  4276 ;;Total ram usage:        7 bytes
  4277 ;; Hardware stack levels used:    1
  4278 ;; Hardware stack levels required when called:    7
  4279 ;; This function calls:
  4280 ;;		_readEEPROM
  4281 ;;		_SendInformationEvent
  4282 ;; This function is called by:
  4283 ;;		_doDM
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           	psect	text13
  4288  0026AC                     __ptext13:
  4289                           	opt stack 0
  4290  0026AC                     _doActionOn:
  4291                           	opt stack 22
  4292                           
  4293                           ;incstack = 0
  4294                           ;incstack = 0
  4295                           ;doActionOn@dmflags stored from wreg
  4296  0026AC  CFE8 F0CA          	movff	wreg,doActionOn@dmflags
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;main.c: 1701: unsigned char i;
  4300                           ;main.c: 1702: unsigned char val;
  4301                           ;main.c: 1704: for (i = 0; i < 8; i++) {
  4302  0026B0  6BCC               	clrf	doActionOn@i& (0+255),b
  4303  0026B2                     l10281:
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;main.c: 1707: if ( !( arg & ( 1 << i ) ) ) continue;
  4307  0026B2  C0CC  F0C7         	movff	doActionOn@i,??_doActionOn
  4308  0026B6  0E01               	movlw	1
  4309  0026B8  6FC8               	movwf	(??_doActionOn+1)& (0+255),b
  4310  0026BA  2BC7               	incf	??_doActionOn& (0+255),f,b
  4311  0026BC  D002               	goto	u13004
  4312  0026BE                     u13005:
  4313  0026BE  90D8               	bcf	status,0,c
  4314  0026C0  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4315  0026C2                     u13004:
  4316  0026C2  2FC7               	decfsz	??_doActionOn& (0+255),f,b
  4317  0026C4  D7FC               	goto	u13005
  4318  0026C6  51C8               	movf	(??_doActionOn+1)& (0+255),w,b
  4319  0026C8  1451               	andwf	doActionOn@arg,w,c
  4320  0026CA  E101 D11F          	bz	l10333
  4321                           
  4322                           ; BSR set to: 0
  4323                           ;main.c: 1710: if ( dmflags & 0x08 ) {
  4324  0026CE  A7CA               	btfss	doActionOn@dmflags& (0+255),3,b
  4325  0026D0  D00C               	goto	l10289
  4326                           
  4327                           ; BSR set to: 0
  4328                           ;main.c: 1711: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  4329                           ;main.c: 1712: 53 +
  4330                           ;main.c: 1713: i ) ) {
  4331  0026D2  0E78               	movlw	120
  4332  0026D4  25CC               	addwf	doActionOn@i& (0+255),w,b
  4333  0026D6  6E08               	movwf	?_readEEPROM,c
  4334  0026D8  6A09               	clrf	?_readEEPROM+1,c
  4335  0026DA  0E00               	movlw	0
  4336  0026DC  2209               	addwfc	?_readEEPROM+1,f,c
  4337  0026DE  ECEF  F020         	call	_readEEPROM	;wreg free
  4338  0026E2  0100               	movlb	0	; () banked
  4339  0026E4  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4340  0026E6  E001 D111          	bnz	l10333
  4341  0026EA                     l10289:
  4342                           
  4343                           ; BSR set to: 0
  4344                           ;main.c: 1715: }
  4345                           ;main.c: 1716: }
  4346                           ;main.c: 1718: val = readEEPROM( 0x43 + 10 + i );
  4347  0026EA  0E4D               	movlw	77
  4348  0026EC  25CC               	addwf	doActionOn@i& (0+255),w,b
  4349  0026EE  6E08               	movwf	?_readEEPROM,c
  4350  0026F0  6A09               	clrf	?_readEEPROM+1,c
  4351  0026F2  0E00               	movlw	0
  4352  0026F4  2209               	addwfc	?_readEEPROM+1,f,c
  4353  0026F6  ECEF  F020         	call	_readEEPROM	;wreg free
  4354  0026FA  0100               	movlb	0	; () banked
  4355  0026FC  6FCB               	movwf	doActionOn@val& (0+255),b
  4356                           
  4357                           ; BSR set to: 0
  4358                           ;main.c: 1721: if ( !( val & 0x80 ) ) continue;
  4359  0026FE  AFCB               	btfss	doActionOn@val& (0+255),7,b
  4360  002700  D105               	goto	l10333
  4361  002702  D0E0               	goto	l10325
  4362  002704                     l442:
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;main.c: 1726: LATBbits.LATB4 = 1;
  4366  002704  888A               	bsf	3978,4,c	;volatile
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;main.c: 1728: if (readEEPROM( 0x43 + 10 ) & 0x04 ) {
  4370  002706  6A09               	clrf	?_readEEPROM+1,c
  4371  002708  0E4D               	movlw	77
  4372  00270A  6E08               	movwf	?_readEEPROM,c
  4373  00270C  ECEF  F020         	call	_readEEPROM	;wreg free
  4374  002710  0100               	movlb	0	; () banked
  4375  002712  6FC7               	movwf	??_doActionOn& (0+255),b
  4376  002714  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4377  002716  D0E8               	goto	l444
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;main.c: 1729: relay_protection_timer[ 0 ] =
  4381                           ;main.c: 1730: readEEPROM( 0x43 + 34 ) * 256 +
  4382                           ;main.c: 1731: readEEPROM( 0x43 + 35 );
  4383  002718  6A09               	clrf	?_readEEPROM+1,c
  4384  00271A  0E66               	movlw	102
  4385  00271C  6E08               	movwf	?_readEEPROM,c
  4386  00271E  ECEF  F020         	call	_readEEPROM	;wreg free
  4387  002722  0100               	movlb	0	; () banked
  4388  002724  6FC7               	movwf	??_doActionOn& (0+255),b
  4389  002726  6A09               	clrf	?_readEEPROM+1,c
  4390  002728  0E65               	movlw	101
  4391  00272A  6E08               	movwf	?_readEEPROM,c
  4392  00272C  ECEF  F020         	call	_readEEPROM	;wreg free
  4393  002730  0100               	movlb	0	; () banked
  4394  002732  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4395  002734  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4396  002736  51C7               	movf	??_doActionOn& (0+255),w,b
  4397  002738  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4398  00273A  6F60               	movwf	_relay_protection_timer& (0+255),b
  4399  00273C  0E00               	movlw	0
  4400  00273E  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4401  002740  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  4402  002742  D0D2               	goto	l444
  4403  002744                     l445:
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;main.c: 1736: LATBbits.LATB1 = 1;
  4407  002744  828A               	bsf	3978,1,c	;volatile
  4408                           
  4409                           ; BSR set to: 0
  4410                           ;main.c: 1738: if (readEEPROM( 0x43 + 11) & 0x04 ) {
  4411  002746  6A09               	clrf	?_readEEPROM+1,c
  4412  002748  0E4E               	movlw	78
  4413  00274A  6E08               	movwf	?_readEEPROM,c
  4414  00274C  ECEF  F020         	call	_readEEPROM	;wreg free
  4415  002750  0100               	movlb	0	; () banked
  4416  002752  6FC7               	movwf	??_doActionOn& (0+255),b
  4417  002754  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4418  002756  D0C8               	goto	l444
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;main.c: 1739: relay_protection_timer[ 1 ] =
  4422                           ;main.c: 1740: readEEPROM( 0x43 + 36 ) * 256 +
  4423                           ;main.c: 1741: readEEPROM( 0x43 + 37 );
  4424  002758  6A09               	clrf	?_readEEPROM+1,c
  4425  00275A  0E68               	movlw	104
  4426  00275C  6E08               	movwf	?_readEEPROM,c
  4427  00275E  ECEF  F020         	call	_readEEPROM	;wreg free
  4428  002762  0100               	movlb	0	; () banked
  4429  002764  6FC7               	movwf	??_doActionOn& (0+255),b
  4430  002766  6A09               	clrf	?_readEEPROM+1,c
  4431  002768  0E67               	movlw	103
  4432  00276A  6E08               	movwf	?_readEEPROM,c
  4433  00276C  ECEF  F020         	call	_readEEPROM	;wreg free
  4434  002770  0100               	movlb	0	; () banked
  4435  002772  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4436  002774  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4437  002776  51C7               	movf	??_doActionOn& (0+255),w,b
  4438  002778  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4439  00277A  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  4440  00277C  0E00               	movlw	0
  4441  00277E  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4442  002780  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  4443  002782  D0B2               	goto	l444
  4444  002784                     l447:
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;main.c: 1746: LATBbits.LATB0 = 1;
  4448  002784  808A               	bsf	3978,0,c	;volatile
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;main.c: 1748: if (readEEPROM( 0x43 + 12) & 0x04 ) {
  4452  002786  6A09               	clrf	?_readEEPROM+1,c
  4453  002788  0E4F               	movlw	79
  4454  00278A  6E08               	movwf	?_readEEPROM,c
  4455  00278C  ECEF  F020         	call	_readEEPROM	;wreg free
  4456  002790  0100               	movlb	0	; () banked
  4457  002792  6FC7               	movwf	??_doActionOn& (0+255),b
  4458  002794  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4459  002796  D0A8               	goto	l444
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;main.c: 1749: relay_protection_timer[ 2 ] =
  4463                           ;main.c: 1750: readEEPROM( 0x43 + 38 ) * 256 +
  4464                           ;main.c: 1751: readEEPROM( 0x43 + 39 );
  4465  002798  6A09               	clrf	?_readEEPROM+1,c
  4466  00279A  0E6A               	movlw	106
  4467  00279C  6E08               	movwf	?_readEEPROM,c
  4468  00279E  ECEF  F020         	call	_readEEPROM	;wreg free
  4469  0027A2  0100               	movlb	0	; () banked
  4470  0027A4  6FC7               	movwf	??_doActionOn& (0+255),b
  4471  0027A6  6A09               	clrf	?_readEEPROM+1,c
  4472  0027A8  0E69               	movlw	105
  4473  0027AA  6E08               	movwf	?_readEEPROM,c
  4474  0027AC  ECEF  F020         	call	_readEEPROM	;wreg free
  4475  0027B0  0100               	movlb	0	; () banked
  4476  0027B2  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4477  0027B4  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4478  0027B6  51C7               	movf	??_doActionOn& (0+255),w,b
  4479  0027B8  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4480  0027BA  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  4481  0027BC  0E00               	movlw	0
  4482  0027BE  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4483  0027C0  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  4484  0027C2  D092               	goto	l444
  4485  0027C4                     l449:
  4486                           
  4487                           ; BSR set to: 0
  4488                           ;main.c: 1756: LATCbits.LATC7 = 1;
  4489  0027C4  8E8B               	bsf	3979,7,c	;volatile
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;main.c: 1758: if ( readEEPROM( 0x43 + 13) & 0x04 ) {
  4493  0027C6  6A09               	clrf	?_readEEPROM+1,c
  4494  0027C8  0E50               	movlw	80
  4495  0027CA  6E08               	movwf	?_readEEPROM,c
  4496  0027CC  ECEF  F020         	call	_readEEPROM	;wreg free
  4497  0027D0  0100               	movlb	0	; () banked
  4498  0027D2  6FC7               	movwf	??_doActionOn& (0+255),b
  4499  0027D4  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4500  0027D6  D088               	goto	l444
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;main.c: 1759: relay_protection_timer[ 3 ] =
  4504                           ;main.c: 1760: readEEPROM( 0x43 + 40 ) * 256 +
  4505                           ;main.c: 1761: readEEPROM( 0x43 + 41 );
  4506  0027D8  6A09               	clrf	?_readEEPROM+1,c
  4507  0027DA  0E6C               	movlw	108
  4508  0027DC  6E08               	movwf	?_readEEPROM,c
  4509  0027DE  ECEF  F020         	call	_readEEPROM	;wreg free
  4510  0027E2  0100               	movlb	0	; () banked
  4511  0027E4  6FC7               	movwf	??_doActionOn& (0+255),b
  4512  0027E6  6A09               	clrf	?_readEEPROM+1,c
  4513  0027E8  0E6B               	movlw	107
  4514  0027EA  6E08               	movwf	?_readEEPROM,c
  4515  0027EC  ECEF  F020         	call	_readEEPROM	;wreg free
  4516  0027F0  0100               	movlb	0	; () banked
  4517  0027F2  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4518  0027F4  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4519  0027F6  51C7               	movf	??_doActionOn& (0+255),w,b
  4520  0027F8  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4521  0027FA  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  4522  0027FC  0E00               	movlw	0
  4523  0027FE  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4524  002800  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  4525  002802  D072               	goto	l444
  4526  002804                     l451:
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;main.c: 1766: LATCbits.LATC6 = 1;
  4530  002804  8C8B               	bsf	3979,6,c	;volatile
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;main.c: 1768: if (readEEPROM( 0x43 + 14) & 0x04 ) {
  4534  002806  6A09               	clrf	?_readEEPROM+1,c
  4535  002808  0E51               	movlw	81
  4536  00280A  6E08               	movwf	?_readEEPROM,c
  4537  00280C  ECEF  F020         	call	_readEEPROM	;wreg free
  4538  002810  0100               	movlb	0	; () banked
  4539  002812  6FC7               	movwf	??_doActionOn& (0+255),b
  4540  002814  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4541  002816  D068               	goto	l444
  4542                           
  4543                           ; BSR set to: 0
  4544                           ;main.c: 1769: relay_protection_timer[ 4 ] =
  4545                           ;main.c: 1770: readEEPROM( 0x43 + 42 ) * 256 +
  4546                           ;main.c: 1771: readEEPROM( 0x43 + 43 );
  4547  002818  6A09               	clrf	?_readEEPROM+1,c
  4548  00281A  0E6E               	movlw	110
  4549  00281C  6E08               	movwf	?_readEEPROM,c
  4550  00281E  ECEF  F020         	call	_readEEPROM	;wreg free
  4551  002822  0100               	movlb	0	; () banked
  4552  002824  6FC7               	movwf	??_doActionOn& (0+255),b
  4553  002826  6A09               	clrf	?_readEEPROM+1,c
  4554  002828  0E6D               	movlw	109
  4555  00282A  6E08               	movwf	?_readEEPROM,c
  4556  00282C  ECEF  F020         	call	_readEEPROM	;wreg free
  4557  002830  0100               	movlb	0	; () banked
  4558  002832  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4559  002834  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4560  002836  51C7               	movf	??_doActionOn& (0+255),w,b
  4561  002838  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4562  00283A  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  4563  00283C  0E00               	movlw	0
  4564  00283E  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4565  002840  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  4566  002842  D052               	goto	l444
  4567  002844                     l453:
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;main.c: 1776: LATCbits.LATC5 = 1;
  4571  002844  8A8B               	bsf	3979,5,c	;volatile
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;main.c: 1778: if (readEEPROM( 0x43 + 15) & 0x04) {
  4575  002846  6A09               	clrf	?_readEEPROM+1,c
  4576  002848  0E52               	movlw	82
  4577  00284A  6E08               	movwf	?_readEEPROM,c
  4578  00284C  ECEF  F020         	call	_readEEPROM	;wreg free
  4579  002850  0100               	movlb	0	; () banked
  4580  002852  6FC7               	movwf	??_doActionOn& (0+255),b
  4581  002854  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4582  002856  D048               	goto	l444
  4583                           
  4584                           ; BSR set to: 0
  4585                           ;main.c: 1779: relay_protection_timer[ 5 ] =
  4586                           ;main.c: 1780: readEEPROM( 0x43 + 44 ) * 256 +
  4587                           ;main.c: 1781: readEEPROM( 0x43 + 45 );
  4588  002858  6A09               	clrf	?_readEEPROM+1,c
  4589  00285A  0E70               	movlw	112
  4590  00285C  6E08               	movwf	?_readEEPROM,c
  4591  00285E  ECEF  F020         	call	_readEEPROM	;wreg free
  4592  002862  0100               	movlb	0	; () banked
  4593  002864  6FC7               	movwf	??_doActionOn& (0+255),b
  4594  002866  6A09               	clrf	?_readEEPROM+1,c
  4595  002868  0E6F               	movlw	111
  4596  00286A  6E08               	movwf	?_readEEPROM,c
  4597  00286C  ECEF  F020         	call	_readEEPROM	;wreg free
  4598  002870  0100               	movlb	0	; () banked
  4599  002872  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4600  002874  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4601  002876  51C7               	movf	??_doActionOn& (0+255),w,b
  4602  002878  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4603  00287A  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  4604  00287C  0E00               	movlw	0
  4605  00287E  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4606  002880  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  4607  002882  D032               	goto	l444
  4608  002884                     l455:
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;main.c: 1786: LATCbits.LATC4 = 1;
  4612  002884  888B               	bsf	3979,4,c	;volatile
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;main.c: 1788: if ( readEEPROM( 0x43 + 16) & 0x04) {
  4616  002886  6A09               	clrf	?_readEEPROM+1,c
  4617  002888  0E53               	movlw	83
  4618  00288A  6E08               	movwf	?_readEEPROM,c
  4619  00288C  ECEF  F020         	call	_readEEPROM	;wreg free
  4620  002890  0100               	movlb	0	; () banked
  4621  002892  6FC7               	movwf	??_doActionOn& (0+255),b
  4622  002894  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4623  002896  D028               	goto	l444
  4624                           
  4625                           ; BSR set to: 0
  4626                           ;main.c: 1789: relay_protection_timer[ 6 ] =
  4627                           ;main.c: 1790: readEEPROM( 0x43 + 46 ) * 256 +
  4628                           ;main.c: 1791: readEEPROM( 0x43 + 47 );
  4629  002898  6A09               	clrf	?_readEEPROM+1,c
  4630  00289A  0E72               	movlw	114
  4631  00289C  6E08               	movwf	?_readEEPROM,c
  4632  00289E  ECEF  F020         	call	_readEEPROM	;wreg free
  4633  0028A2  0100               	movlb	0	; () banked
  4634  0028A4  6FC7               	movwf	??_doActionOn& (0+255),b
  4635  0028A6  6A09               	clrf	?_readEEPROM+1,c
  4636  0028A8  0E71               	movlw	113
  4637  0028AA  6E08               	movwf	?_readEEPROM,c
  4638  0028AC  ECEF  F020         	call	_readEEPROM	;wreg free
  4639  0028B0  0100               	movlb	0	; () banked
  4640  0028B2  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4641  0028B4  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4642  0028B6  51C7               	movf	??_doActionOn& (0+255),w,b
  4643  0028B8  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4644  0028BA  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  4645  0028BC  0E00               	movlw	0
  4646  0028BE  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4647  0028C0  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  4648  0028C2  D012               	goto	l444
  4649  0028C4                     l10325:
  4650                           
  4651                           ; BSR set to: 0
  4652  0028C4  51CC               	movf	doActionOn@i& (0+255),w,b
  4653                           
  4654                           ; Switch size 1, requested type "speed"
  4655                           ; Number of cases is 7, Range of values is 0 to 6
  4656                           ; switch strategies available:
  4657                           ; Name         Instructions Cycles
  4658                           ; simple_byte           22    12 (average)
  4659                           ;	Chosen strategy is simple_byte
  4660  0028C6  E101 D71D          	bz	l442
  4661  0028CA  0A01               	xorlw	1	; case 1
  4662  0028CC  E101 D73A          	bz	l445
  4663  0028D0  0A03               	xorlw	3	; case 2
  4664  0028D2  E101 D757          	bz	l447
  4665  0028D6  0A01               	xorlw	1	; case 3
  4666  0028D8  E101 D774          	bz	l449
  4667  0028DC  0A07               	xorlw	7	; case 4
  4668  0028DE  E092               	bz	l451
  4669  0028E0  0A01               	xorlw	1	; case 5
  4670  0028E2  E0B0               	bz	l453
  4671  0028E4  0A03               	xorlw	3	; case 6
  4672  0028E6  E0CE               	bz	l455
  4673  0028E8                     l444:
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;main.c: 1798: if ( val & 0x08 ) {
  4677  0028E8  A7CB               	btfss	doActionOn@val& (0+255),3,b
  4678  0028EA  D007               	goto	l10329
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;main.c: 1799: SendInformationEvent( i, 20, 3 );
  4682  0028EC  0E14               	movlw	20
  4683  0028EE  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4684  0028F0  0E03               	movlw	3
  4685  0028F2  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4686  0028F4  51CC               	movf	doActionOn@i& (0+255),w,b
  4687  0028F6  EC58  F01E         	call	_SendInformationEvent
  4688  0028FA                     l10329:
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;main.c: 1800: }
  4692                           ;main.c: 1803: if ( val & 0x20 ) {
  4693  0028FA  ABCB               	btfss	doActionOn@val& (0+255),5,b
  4694  0028FC  D007               	goto	l10333
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;main.c: 1804: SendInformationEvent( i, 20, 25 );
  4698  0028FE  0E14               	movlw	20
  4699  002900  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4700  002902  0E19               	movlw	25
  4701  002904  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4702  002906  51CC               	movf	doActionOn@i& (0+255),w,b
  4703  002908  EC58  F01E         	call	_SendInformationEvent
  4704  00290C                     l10333:
  4705                           
  4706                           ; BSR set to: 0
  4707  00290C  2BCC               	incf	doActionOn@i& (0+255),f,b
  4708                           
  4709                           ; BSR set to: 0
  4710  00290E  0E07               	movlw	7
  4711  002910  65CC               	cpfsgt	doActionOn@i& (0+255),b
  4712  002912  D6CF               	goto	l10281
  4713                           
  4714                           ; BSR set to: 0
  4715  002914  0C07               	retlw	7
  4716  002916                     __end_of_doActionOn:
  4717                           	opt stack 0
  4718                           tblptru	equ	0xFF8
  4719                           prodh	equ	0xFF4
  4720                           prodl	equ	0xFF3
  4721                           postinc0	equ	0xFEE
  4722                           wreg	equ	0xFE8
  4723                           postinc2	equ	0xFDE
  4724                           postdec2	equ	0xFDD
  4725                           fsr2h	equ	0xFDA
  4726                           fsr2l	equ	0xFD9
  4727                           status	equ	0xFD8
  4728                           
  4729 ;; *************** function _doActionOff *****************
  4730 ;; Defined at:
  4731 ;;		line 1814 in file "../main.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;  dmflags         1    wreg     unsigned char 
  4734 ;;  arg             1   80[COMRAM] unsigned char 
  4735 ;; Auto vars:     Size  Location     Type
  4736 ;;  dmflags         1   24[BANK0 ] unsigned char 
  4737 ;;  i               1   26[BANK0 ] unsigned char 
  4738 ;;  val             1   25[BANK0 ] unsigned char 
  4739 ;; Return value:  Size  Location     Type
  4740 ;;		None               void
  4741 ;; Registers used:
  4742 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4743 ;; Tracked objects:
  4744 ;;		On entry : F/0
  4745 ;;		On exit  : F/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4748 ;;      Params:         1       0       0       0       0       0       0
  4749 ;;      Locals:         0       3       0       0       0       0       0
  4750 ;;      Temps:          0       2       0       0       0       0       0
  4751 ;;      Totals:         1       5       0       0       0       0       0
  4752 ;;Total ram usage:        6 bytes
  4753 ;; Hardware stack levels used:    1
  4754 ;; Hardware stack levels required when called:    7
  4755 ;; This function calls:
  4756 ;;		_readEEPROM
  4757 ;;		_SendInformationEvent
  4758 ;; This function is called by:
  4759 ;;		_doApplicationOneSecondWork
  4760 ;;		_doDM
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           	psect	text14
  4765  0037E0                     __ptext14:
  4766                           	opt stack 0
  4767  0037E0                     _doActionOff:
  4768                           	opt stack 22
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;incstack = 0
  4772                           ;incstack = 0
  4773                           ;doActionOff@dmflags stored from wreg
  4774  0037E0  CFE8 F0C9          	movff	wreg,doActionOff@dmflags
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;main.c: 1816: unsigned char i;
  4778                           ;main.c: 1817: unsigned char val;
  4779                           ;main.c: 1819: for ( i = 0; i < 8; i++ ) {
  4780  0037E4  6BCB               	clrf	doActionOff@i& (0+255),b
  4781  0037E6                     l9883:
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;main.c: 1822: if ( !( arg & ( 1 << i ) ) ) continue;
  4785  0037E6  C0CB  F0C7         	movff	doActionOff@i,??_doActionOff
  4786  0037EA  0E01               	movlw	1
  4787  0037EC  6FC8               	movwf	(??_doActionOff+1)& (0+255),b
  4788  0037EE  2BC7               	incf	??_doActionOff& (0+255),f,b
  4789  0037F0  D002               	goto	u12364
  4790  0037F2                     u12365:
  4791  0037F2  90D8               	bcf	status,0,c
  4792  0037F4  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4793  0037F6                     u12364:
  4794  0037F6  2FC7               	decfsz	??_doActionOff& (0+255),f,b
  4795  0037F8  D7FC               	goto	u12365
  4796  0037FA  51C8               	movf	(??_doActionOff+1)& (0+255),w,b
  4797  0037FC  1451               	andwf	doActionOff@arg,w,c
  4798  0037FE  E048               	bz	l9907
  4799                           
  4800                           ; BSR set to: 0
  4801                           ;main.c: 1825: if ( dmflags & 0x08 ) {
  4802  003800  A7C9               	btfss	doActionOff@dmflags& (0+255),3,b
  4803  003802  D00B               	goto	l9891
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;main.c: 1826: if ( vscp_imsg.data[ 2 ] != readEEPROM(0x43 +
  4807                           ;main.c: 1827: 53 +
  4808                           ;main.c: 1828: i ) ) {
  4809  003804  0E78               	movlw	120
  4810  003806  25CB               	addwf	doActionOff@i& (0+255),w,b
  4811  003808  6E08               	movwf	?_readEEPROM,c
  4812  00380A  6A09               	clrf	?_readEEPROM+1,c
  4813  00380C  0E00               	movlw	0
  4814  00380E  2209               	addwfc	?_readEEPROM+1,f,c
  4815  003810  ECEF  F020         	call	_readEEPROM	;wreg free
  4816  003814  0100               	movlb	0	; () banked
  4817  003816  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4818  003818  E13B               	bnz	l9907
  4819  00381A                     l9891:
  4820                           
  4821                           ; BSR set to: 0
  4822                           ;main.c: 1830: }
  4823                           ;main.c: 1831: }
  4824                           ;main.c: 1833: val = readEEPROM( 0x43 + 10 + i );
  4825  00381A  0E4D               	movlw	77
  4826  00381C  25CB               	addwf	doActionOff@i& (0+255),w,b
  4827  00381E  6E08               	movwf	?_readEEPROM,c
  4828  003820  6A09               	clrf	?_readEEPROM+1,c
  4829  003822  0E00               	movlw	0
  4830  003824  2209               	addwfc	?_readEEPROM+1,f,c
  4831  003826  ECEF  F020         	call	_readEEPROM	;wreg free
  4832  00382A  0100               	movlb	0	; () banked
  4833  00382C  6FCA               	movwf	doActionOff@val& (0+255),b
  4834                           
  4835                           ; BSR set to: 0
  4836                           ;main.c: 1836: if ( !( val & 0x80 ) ) continue;
  4837  00382E  AFCA               	btfss	doActionOff@val& (0+255),7,b
  4838  003830  D02F               	goto	l9907
  4839  003832  D00E               	goto	l9899
  4840  003834                     l470:
  4841                           
  4842                           ; BSR set to: 0
  4843                           ;main.c: 1841: LATBbits.LATB4 = 0;
  4844  003834  988A               	bcf	3978,4,c	;volatile
  4845                           
  4846                           ;main.c: 1842: break;
  4847  003836  D01A               	goto	l471
  4848  003838                     l472:
  4849                           
  4850                           ; BSR set to: 0
  4851                           ;main.c: 1845: LATBbits.LATB1 = 0;
  4852  003838  928A               	bcf	3978,1,c	;volatile
  4853                           
  4854                           ;main.c: 1846: break;
  4855  00383A  D018               	goto	l471
  4856  00383C                     l473:
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;main.c: 1849: LATBbits.LATB0 = 0;
  4860  00383C  908A               	bcf	3978,0,c	;volatile
  4861                           
  4862                           ;main.c: 1850: break;
  4863  00383E  D016               	goto	l471
  4864  003840                     l474:
  4865                           
  4866                           ; BSR set to: 0
  4867                           ;main.c: 1853: LATCbits.LATC7 = 0;
  4868  003840  9E8B               	bcf	3979,7,c	;volatile
  4869                           
  4870                           ;main.c: 1854: break;
  4871  003842  D014               	goto	l471
  4872  003844                     l475:
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;main.c: 1857: LATCbits.LATC6 = 0;
  4876  003844  9C8B               	bcf	3979,6,c	;volatile
  4877                           
  4878                           ;main.c: 1858: break;
  4879  003846  D012               	goto	l471
  4880  003848                     l476:
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;main.c: 1861: LATCbits.LATC5 = 0;
  4884  003848  9A8B               	bcf	3979,5,c	;volatile
  4885                           
  4886                           ;main.c: 1862: break;
  4887  00384A  D010               	goto	l471
  4888  00384C                     l477:
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;main.c: 1865: LATCbits.LATC4 = 0;
  4892  00384C  988B               	bcf	3979,4,c	;volatile
  4893                           
  4894                           ;main.c: 1866: break;
  4895  00384E  D00E               	goto	l471
  4896  003850                     l9899:
  4897                           
  4898                           ; BSR set to: 0
  4899  003850  51CB               	movf	doActionOff@i& (0+255),w,b
  4900                           
  4901                           ; Switch size 1, requested type "speed"
  4902                           ; Number of cases is 7, Range of values is 0 to 6
  4903                           ; switch strategies available:
  4904                           ; Name         Instructions Cycles
  4905                           ; simple_byte           22    12 (average)
  4906                           ;	Chosen strategy is simple_byte
  4907  003852  E0F0               	bz	l470
  4908  003854  0A01               	xorlw	1	; case 1
  4909  003856  E0F0               	bz	l472
  4910  003858  0A03               	xorlw	3	; case 2
  4911  00385A  E0F0               	bz	l473
  4912  00385C  0A01               	xorlw	1	; case 3
  4913  00385E  E0F0               	bz	l474
  4914  003860  0A07               	xorlw	7	; case 4
  4915  003862  E0F0               	bz	l475
  4916  003864  0A01               	xorlw	1	; case 5
  4917  003866  E0F0               	bz	l476
  4918  003868  0A03               	xorlw	3	; case 6
  4919  00386A  E0F0               	bz	l477
  4920  00386C                     l471:
  4921                           
  4922                           ; BSR set to: 0
  4923                           ;main.c: 1871: if ( val & 0x10 ) {
  4924  00386C  A9CA               	btfss	doActionOff@val& (0+255),4,b
  4925  00386E  D007               	goto	l9903
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;main.c: 1872: SendInformationEvent( i, 20, 4 );
  4929  003870  0E14               	movlw	20
  4930  003872  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4931  003874  0E04               	movlw	4
  4932  003876  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4933  003878  51CB               	movf	doActionOff@i& (0+255),w,b
  4934  00387A  EC58  F01E         	call	_SendInformationEvent
  4935  00387E                     l9903:
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;main.c: 1873: }
  4939                           ;main.c: 1876: if ( val & 0x40 ) {
  4940  00387E  ADCA               	btfss	doActionOff@val& (0+255),6,b
  4941  003880  D007               	goto	l9907
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;main.c: 1877: SendInformationEvent( i, 20, 24 );
  4945  003882  0E14               	movlw	20
  4946  003884  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4947  003886  0E18               	movlw	24
  4948  003888  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4949  00388A  51CB               	movf	doActionOff@i& (0+255),w,b
  4950  00388C  EC58  F01E         	call	_SendInformationEvent
  4951  003890                     l9907:
  4952                           
  4953                           ; BSR set to: 0
  4954  003890  2BCB               	incf	doActionOff@i& (0+255),f,b
  4955                           
  4956                           ; BSR set to: 0
  4957  003892  0E07               	movlw	7
  4958  003894  65CB               	cpfsgt	doActionOff@i& (0+255),b
  4959  003896  D7A7               	goto	l9883
  4960                           
  4961                           ; BSR set to: 0
  4962  003898  0C07               	retlw	7
  4963  00389A                     __end_of_doActionOff:
  4964                           	opt stack 0
  4965                           tblptru	equ	0xFF8
  4966                           prodh	equ	0xFF4
  4967                           prodl	equ	0xFF3
  4968                           postinc0	equ	0xFEE
  4969                           wreg	equ	0xFE8
  4970                           postinc2	equ	0xFDE
  4971                           postdec2	equ	0xFDD
  4972                           fsr2h	equ	0xFDA
  4973                           fsr2l	equ	0xFD9
  4974                           status	equ	0xFD8
  4975                           
  4976 ;; *************** function _vscp_handleProtocolEvent *****************
  4977 ;; Defined at:
  4978 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;		None
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;  bytes           1   45[BANK0 ] unsigned char 
  4983 ;;  page_save       2   41[BANK0 ] unsigned short 
  4984 ;;  i               1   51[BANK0 ] unsigned char 
  4985 ;;  page_save       2   39[BANK0 ] unsigned short 
  4986 ;;  byte            1   55[BANK0 ] unsigned char 
  4987 ;;  bytes           1   53[BANK0 ] unsigned char 
  4988 ;;  cb              1   50[BANK0 ] unsigned char 
  4989 ;;  bytes_this_t    1   49[BANK0 ] unsigned char 
  4990 ;;  j               1   58[BANK0 ] unsigned char 
  4991 ;;  i               1   56[BANK0 ] unsigned char 
  4992 ;;  k               1   52[BANK0 ] unsigned char 
  4993 ;;  i               1   54[BANK0 ] unsigned char 
  4994 ;;  len             1   48[BANK0 ] unsigned char 
  4995 ;;  pos             1   47[BANK0 ] unsigned char 
  4996 ;;  i               1   57[BANK0 ] unsigned char 
  4997 ;;  len             1   46[BANK0 ] unsigned char 
  4998 ;;  pos             1   44[BANK0 ] unsigned char 
  4999 ;;  offset          1   43[BANK0 ] unsigned char 
  5000 ;; Return value:  Size  Location     Type
  5001 ;;		None               void
  5002 ;; Registers used:
  5003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5004 ;; Tracked objects:
  5005 ;;		On entry : F/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5009 ;;      Params:         0       0       0       0       0       0       0
  5010 ;;      Locals:         0      20       0       0       0       0       0
  5011 ;;      Temps:          0       7       0       0       0       0       0
  5012 ;;      Totals:         0      27       0       0       0       0       0
  5013 ;;Total ram usage:       27 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    9
  5016 ;; This function calls:
  5017 ;;		_vscp_init
  5018 ;;		_vscp_readAppReg
  5019 ;;		_vscp_writeAppReg
  5020 ;;		_vscp_sendEvent
  5021 ;;		_vscp_getGUID
  5022 ;;		_vscp_getMDF_URL
  5023 ;;		_vscp_goBootloaderMode
  5024 ;;		_vscp_getMatrixInfo
  5025 ;;		_vscp_handleHeartbeat
  5026 ;;		_vscp_handleSetNickname
  5027 ;;		_vscp_handleDropNickname
  5028 ;;		_vscp_newNodeOnline
  5029 ;;		_vscp_readRegister
  5030 ;;		_vscp_readStdReg
  5031 ;;		_vscp_writeRegister
  5032 ;;		_vscp_writeStdReg
  5033 ;;		___lbmod
  5034 ;; This function is called by:
  5035 ;;		_main
  5036 ;; This function uses a non-reentrant model
  5037 ;;
  5038                           
  5039                           	psect	text15
  5040  00128A                     __ptext15:
  5041                           	opt stack 0
  5042  00128A                     _vscp_handleProtocolEvent:
  5043                           	opt stack 21
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;incstack = 0
  5050                           ;incstack = 0
  5051  00128A  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  5052  00128C  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  5053  00128E  E101 D2D8          	bz	l9705
  5054  001292  D308               	goto	l1275
  5055  001294                     l9293:
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  5059  001294  ECF7  F01E         	call	_vscp_handleHeartbeat	;wreg free
  5060                           
  5061                           ;vscp_firmware.c: 807: break;
  5062  001298  D305               	goto	l1275
  5063  00129A                     l9295:
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  5067  00129A  EC63  F01F         	call	_vscp_newNodeOnline	;wreg free
  5068                           
  5069                           ;vscp_firmware.c: 812: break;
  5070  00129E  D302               	goto	l1275
  5071  0012A0                     l9297:
  5072                           
  5073                           ; BSR set to: 0
  5074                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  5075  0012A0  ECDA  F01F         	call	_vscp_handleSetNickname	;wreg free
  5076                           
  5077                           ;vscp_firmware.c: 817: break;
  5078  0012A4  D2FF               	goto	l1275
  5079  0012A6                     l9299:
  5080                           
  5081                           ; BSR set to: 0
  5082                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  5083  0012A6  EC35  F01F         	call	_vscp_handleDropNickname	;wreg free
  5084                           
  5085                           ;vscp_firmware.c: 822: break;
  5086  0012AA  D2FC               	goto	l1275
  5087  0012AC                     l9301:
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  5091                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5092  0012AC  5196               	movf	_vscp_imsg& (0+255),w,b
  5093  0012AE  0B0F               	andlw	15
  5094  0012B0  0A02               	xorlw	2
  5095  0012B2  E001 D2F7          	bnz	l1275
  5096                           
  5097                           ; BSR set to: 0
  5098  0012B6  5191               	movf	_vscp_nickname& (0+255),w,b
  5099  0012B8  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5100  0012BC  62DF               	cpfseq	indf2,c
  5101  0012BE  D2F2               	goto	l1275
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  5105  0012C0  0E80               	movlw	128
  5106  0012C2  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5107  0012C4  D012               	goto	l9321
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  5111  0012C6  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5112  0012C8  EC05  F01D         	call	_vscp_readAppReg
  5113  0012CC                     L13:
  5114  0012CC  0100               	movlb	0	; () banked
  5115  0012CE                     L14:
  5116  0012CE  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  5120  0012D0  C09D  F0A9         	movff	_vscp_imsg+7,_vscp_omsg+5
  5121                           
  5122                           ; BSR set to: 0
  5123                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  5124  0012D4  0E03               	movlw	3
  5125  0012D6  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  5129  0012D8  0E82               	movlw	130
  5130  0012DA  6FA4               	movwf	_vscp_omsg& (0+255),b
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  5134  0012DC  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5135  0012DE  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  5139  0012E0  0E0A               	movlw	10
  5140  0012E2  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5141  0012E4                     l9319:
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;vscp_firmware.c: 843: vscp_sendEvent();
  5145  0012E4  ECB4  F01F         	call	_vscp_sendEvent	;wreg free
  5146                           
  5147                           ;vscp_firmware.c: 844: }
  5148  0012E8  D2DD               	goto	l1275
  5149  0012EA                     l9321:
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;vscp_firmware.c: 845: else {
  5153                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  5154                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  5155  0012EA  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5156  0012EC  EC7A  F016         	call	_vscp_readStdReg
  5157  0012F0  D7ED               	goto	L13
  5158  0012F2                     l9335:
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  5162                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5163  0012F2  5196               	movf	_vscp_imsg& (0+255),w,b
  5164  0012F4  0B0F               	andlw	15
  5165  0012F6  0A03               	xorlw	3
  5166  0012F8  E001 D2D4          	bnz	l1275
  5167                           
  5168                           ; BSR set to: 0
  5169  0012FC  5191               	movf	_vscp_nickname& (0+255),w,b
  5170  0012FE  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5171  001302  62DF               	cpfseq	indf2,c
  5172  001304  D2CF               	goto	l1275
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  5176  001306  0E80               	movlw	128
  5177  001308  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5178  00130A  D006               	goto	l9355
  5179                           
  5180                           ; BSR set to: 0
  5181                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  5182                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5183  00130C  C09E  F051         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  5184  001310  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5185  001312  EC6E  F004         	call	_vscp_writeAppReg
  5186  001316  D7DB               	goto	L14
  5187  001318                     l9355:
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;vscp_firmware.c: 888: else {
  5191                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  5192                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5193  001318  C09E  F00F         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  5194  00131C  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5195  00131E  ECFD  F01A         	call	_vscp_writeStdReg
  5196  001322  D7D4               	goto	L13
  5197  001324                     l9369:
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  5201                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  5202                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  5203                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  5204                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  5205                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  5206                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  5207  001324  5191               	movf	_vscp_nickname& (0+255),w,b
  5208  001326  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5209  00132A  62DF               	cpfseq	indf2,c
  5210  00132C  D2BB               	goto	l1275
  5211                           
  5212                           ; BSR set to: 0
  5213  00132E  0E00               	movlw	0
  5214  001330  ECC1  F020         	call	_vscp_getGUID
  5215  001334  0100               	movlb	0	; () banked
  5216  001336  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5217  001338  E001 D2B4          	bnz	l1275
  5218                           
  5219                           ; BSR set to: 0
  5220  00133C  0E03               	movlw	3
  5221  00133E  ECC1  F020         	call	_vscp_getGUID
  5222  001342  0100               	movlb	0	; () banked
  5223  001344  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5224  001346  E001 D2AD          	bnz	l1275
  5225                           
  5226                           ; BSR set to: 0
  5227  00134A  0E05               	movlw	5
  5228  00134C  ECC1  F020         	call	_vscp_getGUID
  5229  001350  0100               	movlb	0	; () banked
  5230  001352  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5231  001354  E001 D2A6          	bnz	l1275
  5232                           
  5233                           ; BSR set to: 0
  5234  001358  0E07               	movlw	7
  5235  00135A  ECC1  F020         	call	_vscp_getGUID
  5236  00135E  0100               	movlb	0	; () banked
  5237  001360  19A1               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  5238  001362  E001 D29F          	bnz	l1275
  5239                           
  5240                           ; BSR set to: 0
  5241  001366  5053               	movf	_vscp_page_select+1,w,c
  5242  001368  19A2               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  5243  00136A  E001 D29B          	bnz	l1275
  5244                           
  5245                           ; BSR set to: 0
  5246  00136E  5052               	movf	_vscp_page_select,w,c
  5247  001370  EE20  F0A3         	lfsr	2,_vscp_imsg+13
  5248  001374  62DF               	cpfseq	indf2,c
  5249  001376  D296               	goto	l1275
  5250                           
  5251                           ; BSR set to: 0
  5252                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  5253  001378  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5254  00137A  EC95  F020         	call	_vscp_goBootloaderMode
  5255  00137E  D292               	goto	l1275
  5256  001380                     l9385:
  5257                           
  5258                           ; BSR set to: 0
  5259                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  5260                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  5261                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  5262                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  5263  001380  0E00               	movlw	0
  5264  001382  ECC1  F020         	call	_vscp_getGUID
  5265  001386  0100               	movlb	0	; () banked
  5266  001388  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5267  00138A  E173               	bnz	l9429
  5268                           
  5269                           ; BSR set to: 0
  5270  00138C  0E01               	movlw	1
  5271  00138E  ECC1  F020         	call	_vscp_getGUID
  5272  001392  0100               	movlb	0	; () banked
  5273  001394  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5274  001396  E16D               	bnz	l9429
  5275                           
  5276                           ; BSR set to: 0
  5277  001398  0E02               	movlw	2
  5278  00139A  ECC1  F020         	call	_vscp_getGUID
  5279  00139E  0100               	movlb	0	; () banked
  5280  0013A0  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5281  0013A2  E167               	bnz	l9429
  5282                           
  5283                           ; BSR set to: 0
  5284  0013A4  0E03               	movlw	3
  5285  0013A6  ECC1  F020         	call	_vscp_getGUID
  5286  0013AA  0100               	movlb	0	; () banked
  5287  0013AC  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5288  0013AE  E161               	bnz	l9429
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  5292  0013B0  898D               	bsf	_vscp_guid_reset& (0+255),4,b
  5293  0013B2  D05F               	goto	l9429
  5294  0013B4                     l9395:
  5295                           
  5296                           ; BSR set to: 0
  5297                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  5298                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  5299                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  5300                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  5301  0013B4  0E04               	movlw	4
  5302  0013B6  ECC1  F020         	call	_vscp_getGUID
  5303  0013BA  0100               	movlb	0	; () banked
  5304  0013BC  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5305  0013BE  E159               	bnz	l9429
  5306                           
  5307                           ; BSR set to: 0
  5308  0013C0  0E05               	movlw	5
  5309  0013C2  ECC1  F020         	call	_vscp_getGUID
  5310  0013C6  0100               	movlb	0	; () banked
  5311  0013C8  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5312  0013CA  E153               	bnz	l9429
  5313                           
  5314                           ; BSR set to: 0
  5315  0013CC  0E06               	movlw	6
  5316  0013CE  ECC1  F020         	call	_vscp_getGUID
  5317  0013D2  0100               	movlb	0	; () banked
  5318  0013D4  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5319  0013D6  E14D               	bnz	l9429
  5320                           
  5321                           ; BSR set to: 0
  5322  0013D8  0E07               	movlw	7
  5323  0013DA  ECC1  F020         	call	_vscp_getGUID
  5324  0013DE  0100               	movlb	0	; () banked
  5325  0013E0  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5326  0013E2  E147               	bnz	l9429
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  5330  0013E4  8B8D               	bsf	_vscp_guid_reset& (0+255),5,b
  5331  0013E6  D045               	goto	l9429
  5332  0013E8                     l9405:
  5333                           
  5334                           ; BSR set to: 0
  5335                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  5336                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  5337                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  5338                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  5339  0013E8  0E08               	movlw	8
  5340  0013EA  ECC1  F020         	call	_vscp_getGUID
  5341  0013EE  0100               	movlb	0	; () banked
  5342  0013F0  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5343  0013F2  E13F               	bnz	l9429
  5344                           
  5345                           ; BSR set to: 0
  5346  0013F4  0E09               	movlw	9
  5347  0013F6  ECC1  F020         	call	_vscp_getGUID
  5348  0013FA  0100               	movlb	0	; () banked
  5349  0013FC  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5350  0013FE  E139               	bnz	l9429
  5351                           
  5352                           ; BSR set to: 0
  5353  001400  0E0A               	movlw	10
  5354  001402  ECC1  F020         	call	_vscp_getGUID
  5355  001406  0100               	movlb	0	; () banked
  5356  001408  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5357  00140A  E133               	bnz	l9429
  5358                           
  5359                           ; BSR set to: 0
  5360  00140C  0E0B               	movlw	11
  5361  00140E  ECC1  F020         	call	_vscp_getGUID
  5362  001412  0100               	movlb	0	; () banked
  5363  001414  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5364  001416  E12D               	bnz	l9429
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  5368  001418  8D8D               	bsf	_vscp_guid_reset& (0+255),6,b
  5369  00141A  D02B               	goto	l9429
  5370  00141C                     l9415:
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  5374                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  5375                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  5376                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  5377  00141C  0E0C               	movlw	12
  5378  00141E  ECC1  F020         	call	_vscp_getGUID
  5379  001422  0100               	movlb	0	; () banked
  5380  001424  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5381  001426  E125               	bnz	l9429
  5382                           
  5383                           ; BSR set to: 0
  5384  001428  0E0D               	movlw	13
  5385  00142A  ECC1  F020         	call	_vscp_getGUID
  5386  00142E  0100               	movlb	0	; () banked
  5387  001430  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5388  001432  E11F               	bnz	l9429
  5389                           
  5390                           ; BSR set to: 0
  5391  001434  0E0E               	movlw	14
  5392  001436  ECC1  F020         	call	_vscp_getGUID
  5393  00143A  0100               	movlb	0	; () banked
  5394  00143C  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5395  00143E  E119               	bnz	l9429
  5396                           
  5397                           ; BSR set to: 0
  5398  001440  0E0F               	movlw	15
  5399  001442  ECC1  F020         	call	_vscp_getGUID
  5400  001446  0100               	movlb	0	; () banked
  5401  001448  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5402  00144A  E113               	bnz	l9429
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  5406  00144C  8F8D               	bsf	_vscp_guid_reset& (0+255),7,b
  5407  00144E  D011               	goto	l9429
  5408  001450                     l1216:
  5409                           
  5410                           ; BSR set to: 0
  5411                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  5412  001450  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  5413                           
  5414                           ;vscp_firmware.c: 965: break;
  5415  001452  D00F               	goto	l9429
  5416  001454                     l9427:
  5417                           
  5418                           ; BSR set to: 0
  5419  001454  399C               	swapf	(_vscp_imsg+6)& (0+255),w,b
  5420  001456  0B0F               	andlw	15
  5421  001458  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5422  00145A  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5423                           
  5424                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5425                           ; Switch size 1, requested type "speed"
  5426                           ; Number of cases is 1, Range of values is 0 to 0
  5427                           ; switch strategies available:
  5428                           ; Name         Instructions Cycles
  5429                           ; simple_byte            4     3 (average)
  5430                           ;	Chosen strategy is simple_byte
  5431  00145C  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5432  00145E  E1F8               	bnz	l1216
  5433                           
  5434                           ; BSR set to: 0
  5435                           ; Switch size 1, requested type "speed"
  5436                           ; Number of cases is 4, Range of values is 0 to 3
  5437                           ; switch strategies available:
  5438                           ; Name         Instructions Cycles
  5439                           ; simple_byte           13     7 (average)
  5440                           ;	Chosen strategy is simple_byte
  5441  001460  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5442  001462  E08E               	bz	l9385
  5443  001464  0A01               	xorlw	1	; case 1
  5444  001466  E0A6               	bz	l9395
  5445  001468  0A03               	xorlw	3	; case 2
  5446  00146A  E0BE               	bz	l9405
  5447  00146C  0A01               	xorlw	1	; case 3
  5448  00146E  E0D6               	bz	l9415
  5449  001470  D7EF               	goto	l1216
  5450  001472                     l9429:
  5451                           
  5452                           ; BSR set to: 0
  5453                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  5454  001472  518D               	movf	_vscp_guid_reset& (0+255),w,b
  5455  001474  0BF0               	andlw	240
  5456  001476  0AF0               	xorlw	240
  5457  001478  E001 D214          	bnz	l1275
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;vscp_firmware.c: 970: vscp_init();
  5461  00147C  ECB5  F01E         	call	_vscp_init	;wreg free
  5462  001480  D211               	goto	l1275
  5463  001482                     l9433:
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5467  001482  5191               	movf	_vscp_nickname& (0+255),w,b
  5468  001484  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5469  001488  62DF               	cpfseq	indf2,c
  5470  00148A  D20C               	goto	l1275
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;vscp_firmware.c: 978: uint8_t i;
  5474                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  5475  00148C  6BDD               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  5476                           
  5477                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  5478  00148E  C09D  F0DC         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  5479                           
  5480                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  5481  001492  C09E  F0DF         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  5482                           
  5483                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  5484  001496  6BEA               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  5485  001498  D047               	goto	l9465
  5486  00149A                     l9437:
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  5490  00149A  0E07               	movlw	7
  5491  00149C  6E08               	movwf	?___lbmod,c
  5492  00149E  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5493  0014A0  EC8D  F01F         	call	___lbmod
  5494  0014A4  0100               	movlb	0	; () banked
  5495  0014A6  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5496  0014A8  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5497  0014AA  0FAA               	addlw	low (_vscp_omsg+6)
  5498  0014AC  6ED9               	movwf	fsr2l,c
  5499  0014AE  6ADA               	clrf	fsr2h,c
  5500  0014B0  51DC               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  5501  0014B2  25EA               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5502  0014B4  EC70  F020         	call	_vscp_readRegister
  5503  0014B8  6EDF               	movwf	indf2,c
  5504                           
  5505                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  5506  0014BA  0E07               	movlw	7
  5507  0014BC  6E08               	movwf	?___lbmod,c
  5508  0014BE  0100               	movlb	0	; () banked
  5509  0014C0  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5510  0014C2  EC8D  F01F         	call	___lbmod
  5511  0014C6  0A06               	xorlw	6
  5512  0014C8  E00B               	bz	l9443
  5513  0014CA  0EFF               	movlw	255
  5514  0014CC  0100               	movlb	0	; () banked
  5515  0014CE  25DF               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  5516  0014D0  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5517  0014D2  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5518  0014D4  0EFF               	movlw	255
  5519  0014D6  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  5520  0014D8  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5521  0014DA  19D1               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5522  0014DC  11D2               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5523  0014DE  E123               	bnz	l9463
  5524  0014E0                     l9443:
  5525                           
  5526                           ;vscp_firmware.c: 988: uint8_t bytes;
  5527                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  5528  0014E0  0E07               	movlw	7
  5529  0014E2  6E08               	movwf	?___lbmod,c
  5530  0014E4  0100               	movlb	0	; () banked
  5531  0014E6  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5532  0014E8  EC8D  F01F         	call	___lbmod
  5533  0014EC  0A06               	xorlw	6
  5534  0014EE  E103               	bnz	l9447
  5535                           
  5536                           ;vscp_firmware.c: 991: bytes = 7;
  5537  0014F0  0E07               	movlw	7
  5538  0014F2  0100               	movlb	0	; () banked
  5539  0014F4  D009               	goto	L15
  5540  0014F6                     l9447:
  5541                           
  5542                           ;vscp_firmware.c: 993: else {
  5543                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  5544  0014F6  0E07               	movlw	7
  5545  0014F8  6E08               	movwf	?___lbmod,c
  5546  0014FA  0100               	movlb	0	; () banked
  5547  0014FC  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5548  0014FE  EC8D  F01F         	call	___lbmod
  5549  001502  0100               	movlb	0	; () banked
  5550  001504  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5551  001506  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5552  001508                     L15:
  5553  001508  6FDE               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  5554                           
  5555                           ; BSR set to: 0
  5556                           ;vscp_firmware.c: 995: }
  5557                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  5558  00150A  51DE               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  5559  00150C  0F81               	addlw	129
  5560  00150E  6FA4               	movwf	_vscp_omsg& (0+255),b
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x03;
  5564  001510  0E03               	movlw	3
  5565  001512  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5566                           
  5567                           ; BSR set to: 0
  5568                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  5569  001514  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5570  001516  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  5574  001518  0E1A               	movlw	26
  5575  00151A  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5576                           
  5577                           ; BSR set to: 0
  5578                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  5579  00151C  C0DD  F0A9         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  5583  001520  ECB4  F01F         	call	_vscp_sendEvent	;wreg free
  5584                           
  5585                           ; BSR set to: 0
  5586                           ;vscp_firmware.c: 1005: pos++;
  5587  001524  2BDD               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  5588  001526                     l9463:
  5589                           
  5590                           ; BSR set to: 0
  5591  001526  2BEA               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  5592  001528                     l9465:
  5593                           
  5594                           ; BSR set to: 0
  5595  001528  51DF               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  5596  00152A  5DEA               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5597  00152C  E301 D1BA          	bc	l1275
  5598  001530  D7B4               	goto	l9437
  5599  001532                     l9467:
  5600                           
  5601                           ; BSR set to: 0
  5602                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5603  001532  5191               	movf	_vscp_nickname& (0+255),w,b
  5604  001534  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5605  001538  62DF               	cpfseq	indf2,c
  5606  00153A  D1B4               	goto	l1275
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;vscp_firmware.c: 1014: uint8_t i;
  5610                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  5611  00153C  C09D  F0E0         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1279
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  5615  001540  5196               	movf	_vscp_imsg& (0+255),w,b
  5616  001542  0FFE               	addlw	254
  5617  001544  0B07               	andlw	7
  5618  001546  6FE1               	movwf	vscp_handleProtocolEvent@len_1280& (0+255),b
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  5622  001548  6BE7               	clrf	vscp_handleProtocolEvent@i_1278& (0+255),b
  5623  00154A  D016               	goto	l9481
  5624  00154C                     l9475:
  5625                           
  5626                           ; BSR set to: 0
  5627                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  5628  00154C  51E7               	movf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5629  00154E  0F9E               	addlw	low (_vscp_imsg+8)
  5630  001550  6ED9               	movwf	fsr2l,c
  5631  001552  6ADA               	clrf	fsr2h,c
  5632  001554  50DF               	movf	indf2,w,c
  5633  001556  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  5634  001558  51E0               	movf	vscp_handleProtocolEvent@pos_1279& (0+255),w,b
  5635  00155A  25E7               	addwf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5636  00155C  EC0F  F020         	call	_vscp_writeRegister
  5637                           
  5638                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  5639  001560  0100               	movlb	0	; () banked
  5640  001562  51E7               	movf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5641  001564  0FAA               	addlw	low (_vscp_omsg+6)
  5642  001566  6ED9               	movwf	fsr2l,c
  5643  001568  6ADA               	clrf	fsr2h,c
  5644  00156A  51E0               	movf	vscp_handleProtocolEvent@pos_1279& (0+255),w,b
  5645  00156C  25E7               	addwf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5646  00156E  EC70  F020         	call	_vscp_readRegister
  5647  001572  6EDF               	movwf	indf2,c
  5648  001574  0100               	movlb	0	; () banked
  5649  001576  2BE7               	incf	vscp_handleProtocolEvent@i_1278& (0+255),f,b
  5650  001578                     l9481:
  5651                           
  5652                           ; BSR set to: 0
  5653  001578  51E1               	movf	vscp_handleProtocolEvent@len_1280& (0+255),w,b
  5654  00157A  5DE7               	subwf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5655  00157C  E3E7               	bnc	l9475
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;vscp_firmware.c: 1022: }
  5659                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x03;
  5660  00157E  0E03               	movlw	3
  5661  001580  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  5665  001582  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5666  001584  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5667                           
  5668                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  5669  001586  0E1A               	movlw	26
  5670  001588  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5671                           
  5672                           ; BSR set to: 0
  5673                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  5674  00158A  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  5678  00158C  51E1               	movf	vscp_handleProtocolEvent@len_1280& (0+255),w,b
  5679  00158E  0F81               	addlw	129
  5680  001590  6FA4               	movwf	_vscp_omsg& (0+255),b
  5681  001592  D6A8               	goto	l9319
  5682  001594                     l9493:
  5683                           
  5684                           ; BSR set to: 0
  5685                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5686  001594  5191               	movf	_vscp_nickname& (0+255),w,b
  5687  001596  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5688  00159A  62DF               	cpfseq	indf2,c
  5689  00159C  D183               	goto	l1275
  5690                           
  5691                           ; BSR set to: 0
  5692                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5693                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  5694                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  5695  00159E  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5696  0015A0  EC05  F01D         	call	_vscp_readAppReg
  5697  0015A4  0100               	movlb	0	; () banked
  5698  0015A6  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5699  0015A8  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5700  0015AA  6E51               	movwf	?_vscp_writeAppReg,c
  5701  0015AC  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5702  0015AE  EC6E  F004         	call	_vscp_writeAppReg
  5703  0015B2  D68D               	goto	L14
  5704  0015B4                     l9509:
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5708  0015B4  5191               	movf	_vscp_nickname& (0+255),w,b
  5709  0015B6  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5710  0015BA  62DF               	cpfseq	indf2,c
  5711  0015BC  D173               	goto	l1275
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5715                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  5716                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  5717  0015BE  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5718  0015C0  EC05  F01D         	call	_vscp_readAppReg
  5719  0015C4  0100               	movlb	0	; () banked
  5720  0015C6  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5721  0015C8  05D1               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  5722  0015CA  6E51               	movwf	?_vscp_writeAppReg,c
  5723  0015CC  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5724  0015CE  EC6E  F004         	call	_vscp_writeAppReg
  5725  0015D2  D67D               	goto	L14
  5726  0015D4                     l9525:
  5727                           
  5728                           ; BSR set to: 0
  5729                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  5730                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  5731  0015D4  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
  5732  0015D6  1991               	xorwf	_vscp_nickname& (0+255),w,b
  5733  0015D8  E003               	bz	l1240
  5734                           
  5735                           ; BSR set to: 0
  5736  0015DA  299C               	incf	(_vscp_imsg+6)& (0+255),w,b
  5737  0015DC  E001 D162          	bnz	l1275
  5738  0015E0                     l1240:
  5739                           
  5740                           ; BSR set to: 0
  5741                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  5742  0015E0  6BE5               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  5746  0015E2  0E03               	movlw	3
  5747  0015E4  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5748                           
  5749                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  5750  0015E6  0E88               	movlw	136
  5751  0015E8  6FA4               	movwf	_vscp_omsg& (0+255),b
  5752                           
  5753                           ; BSR set to: 0
  5754                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  5755  0015EA  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5756  0015EC  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5757                           
  5758                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  5759  0015EE  0E20               	movlw	32
  5760  0015F0  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  5764  0015F2  6BE9               	clrf	vscp_handleProtocolEvent@i_1281& (0+255),b
  5765  0015F4                     l1241:
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;vscp_firmware.c: 1091: {
  5769                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  5770  0015F4  C0E9  F0A9         	movff	vscp_handleProtocolEvent@i_1281,_vscp_omsg+5
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  5774  0015F8  0E01               	movlw	1
  5775  0015FA  6FEB               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  5776  0015FC                     l9545:
  5777                           
  5778                           ; BSR set to: 0
  5779                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  5780  0015FC  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5781  0015FE  0FA9               	addlw	low (_vscp_omsg+5)
  5782  001600  6ED9               	movwf	fsr2l,c
  5783  001602  6ADA               	clrf	fsr2h,c
  5784  001604  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5785  001606  080F               	sublw	15
  5786  001608  ECC1  F020         	call	_vscp_getGUID
  5787  00160C  6EDF               	movwf	indf2,c
  5788  00160E  0100               	movlb	0	; () banked
  5789  001610  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;vscp_firmware.c: 1096: if (k > 16)
  5793  001612  0E10               	movlw	16
  5794  001614  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5795  001616  D001               	goto	l9553
  5796  001618  D004               	goto	l9557
  5797  00161A                     l9553:
  5798                           
  5799                           ; BSR set to: 0
  5800  00161A  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5801                           
  5802                           ; BSR set to: 0
  5803  00161C  0E07               	movlw	7
  5804  00161E  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5805  001620  D7ED               	goto	l9545
  5806  001622                     l9557:
  5807                           
  5808                           ; BSR set to: 0
  5809                           ;vscp_firmware.c: 1098: }
  5810                           ;vscp_firmware.c: 1100: if (k > 16)
  5811  001622  0E10               	movlw	16
  5812  001624  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5813  001626  D001               	goto	l9561
  5814  001628  D006               	goto	l1242
  5815  00162A                     l9561:
  5816                           
  5817                           ; BSR set to: 0
  5818                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  5819  00162A  ECB4  F01F         	call	_vscp_sendEvent	;wreg free
  5820                           
  5821                           ; BSR set to: 0
  5822  00162E  2BE9               	incf	vscp_handleProtocolEvent@i_1281& (0+255),f,b
  5823                           
  5824                           ; BSR set to: 0
  5825  001630  0E02               	movlw	2
  5826  001632  65E9               	cpfsgt	vscp_handleProtocolEvent@i_1281& (0+255),b
  5827  001634  D7DF               	goto	l1241
  5828  001636                     l1242:
  5829                           
  5830                           ; BSR set to: 0
  5831                           ;vscp_firmware.c: 1104: }
  5832                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  5833  001636  6BEB               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  5834  001638                     l9571:
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;vscp_firmware.c: 1107: {
  5838                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  5839  001638  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5840  00163A  EC89  F020         	call	_vscp_getMDF_URL
  5841  00163E  0900               	iorlw	0
  5842  001640  E008               	bz	l9575
  5843                           
  5844                           ; BSR set to: 0
  5845                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  5846  001642  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5847  001644  0FAC               	addlw	low (_vscp_omsg+8)
  5848  001646  6ED9               	movwf	fsr2l,c
  5849  001648  6ADA               	clrf	fsr2h,c
  5850  00164A  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5851  00164C  EC89  F020         	call	_vscp_getMDF_URL
  5852  001650  D005               	goto	L16
  5853  001652                     l9575:
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;vscp_firmware.c: 1110: else
  5857                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  5858  001652  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5859  001654  0FAC               	addlw	low (_vscp_omsg+8)
  5860  001656  6ED9               	movwf	fsr2l,c
  5861  001658  6ADA               	clrf	fsr2h,c
  5862  00165A  0E00               	movlw	0
  5863  00165C                     L16:
  5864  00165C  6EDF               	movwf	indf2,c
  5865                           
  5866                           ; BSR set to: 0
  5867  00165E  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5868                           
  5869                           ; BSR set to: 0
  5870  001660  0E04               	movlw	4
  5871  001662  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5872  001664  D7E9               	goto	l9571
  5873                           
  5874                           ; BSR set to: 0
  5875                           ;vscp_firmware.c: 1112: }
  5876                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  5877  001666  ECB4  F01F         	call	_vscp_sendEvent	;wreg free
  5878                           
  5879                           ; BSR set to: 0
  5880                           ;vscp_firmware.c: 1116: k = 5;
  5881  00166A  0E05               	movlw	5
  5882  00166C  6FE5               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  5886  00166E  0E03               	movlw	3
  5887  001670  6FE9               	movwf	vscp_handleProtocolEvent@i_1281& (0+255),b
  5888  001672                     l1251:
  5889                           
  5890                           ; BSR set to: 0
  5891                           ;vscp_firmware.c: 1118: {
  5892                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  5893  001672  C0E9  F0A9         	movff	vscp_handleProtocolEvent@i_1281,_vscp_omsg+5
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  5897  001676  0E01               	movlw	1
  5898  001678  6FEB               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  5899  00167A                     l9597:
  5900                           
  5901                           ; BSR set to: 0
  5902                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  5903  00167A  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5904  00167C  0FA9               	addlw	low (_vscp_omsg+5)
  5905  00167E  6ED9               	movwf	fsr2l,c
  5906  001680  6ADA               	clrf	fsr2h,c
  5907  001682  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5908  001684  EC89  F020         	call	_vscp_getMDF_URL
  5909  001688  6EDF               	movwf	indf2,c
  5910                           
  5911                           ; BSR set to: 0
  5912  00168A  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5913                           
  5914                           ; BSR set to: 0
  5915  00168C  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5916                           
  5917                           ; BSR set to: 0
  5918  00168E  0E07               	movlw	7
  5919  001690  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5920  001692  D7F3               	goto	l9597
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;vscp_firmware.c: 1123: }
  5924                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  5925  001694  ECB4  F01F         	call	_vscp_sendEvent	;wreg free
  5926                           
  5927                           ; BSR set to: 0
  5928  001698  2BE9               	incf	vscp_handleProtocolEvent@i_1281& (0+255),f,b
  5929                           
  5930                           ; BSR set to: 0
  5931  00169A  0E06               	movlw	6
  5932  00169C  65E9               	cpfsgt	vscp_handleProtocolEvent@i_1281& (0+255),b
  5933  00169E  D7E9               	goto	l1251
  5934  0016A0  D101               	goto	l1275
  5935  0016A2                     l9611:
  5936                           
  5937                           ; BSR set to: 0
  5938                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5939  0016A2  5191               	movf	_vscp_nickname& (0+255),w,b
  5940  0016A4  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5941  0016A8  62DF               	cpfseq	indf2,c
  5942  0016AA  D0FC               	goto	l1275
  5943                           
  5944                           ; BSR set to: 0
  5945                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  5946  0016AC  0E03               	movlw	3
  5947  0016AE  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5948                           
  5949                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  5950  0016B0  0E87               	movlw	135
  5951  0016B2  6FA4               	movwf	_vscp_omsg& (0+255),b
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  5955  0016B4  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5956  0016B6  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5957                           
  5958                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  5959  0016B8  0E22               	movlw	34
  5960  0016BA  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  5964  0016BC  0EA9               	movlw	(_vscp_omsg+5)& (0+255)
  5965  0016BE  EC42  F020         	call	_vscp_getMatrixInfo
  5966  0016C2  D610               	goto	l9319
  5967  0016C4                     l9621:
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  5971  0016C4  5191               	movf	_vscp_nickname& (0+255),w,b
  5972  0016C6  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5973  0016CA  62DF               	cpfseq	indf2,c
  5974  0016CC  D0EB               	goto	l1275
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;vscp_firmware.c: 1158: uint16_t page_save;
  5978                           ;vscp_firmware.c: 1159: uint8_t byte = 0, bytes = 0;
  5979  0016CE  6BE8               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  5983                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  5984  0016D0  C096  F0D1         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  5985  0016D4  0E0F               	movlw	15
  5986  0016D6  17D1               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  5987  0016D8  0E04               	movlw	4
  5988  0016DA  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5989  0016DC  E304               	bnc	l9629
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;vscp_firmware.c: 1167: bytes = vscp_imsg.data[4];
  5993  0016DE  C0A0  F0E6         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1286
  5994                           
  5995                           ;vscp_firmware.c: 1169: if ( 0 == bytes ) {
  5996  0016E2  67E6               	tstfsz	vscp_handleProtocolEvent@bytes_1286& (0+255),b
  5997  0016E4  D002               	goto	l9633
  5998  0016E6                     l9629:
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;vscp_firmware.c: 1170: bytes = 1;
  6002  0016E6  0E01               	movlw	1
  6003  0016E8  6FE6               	movwf	vscp_handleProtocolEvent@bytes_1286& (0+255),b
  6004  0016EA                     l9633:
  6005                           
  6006                           ; BSR set to: 0
  6007                           ;vscp_firmware.c: 1175: }
  6008                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  6009  0016EA  C052  F0D8         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  6010  0016EE  C053  F0D9         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  6014  0016F2  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  6015  0016F4  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6016  0016F8  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6017  0016FA  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6018  0016FE  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6019  001700  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6020  001702  6E52               	movwf	_vscp_page_select,c
  6021  001704  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6022  001706  6E53               	movwf	_vscp_page_select+1,c
  6023                           
  6024                           ; BSR set to: 0
  6025                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x03;
  6026  001708  0E03               	movlw	3
  6027  00170A  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6028                           
  6029                           ; BSR set to: 0
  6030                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  6031  00170C  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6032  00170E  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  6036  001710  0E27               	movlw	39
  6037  001712  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6038                           
  6039                           ; BSR set to: 0
  6040                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  6041  001714  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  6045  001716  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  6049  00171A  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6050  00171E                     l9649:
  6051                           
  6052                           ; BSR set to: 0
  6053                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  6054  00171E  51E8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6055  001720  C0E6  F0D1         	movff	vscp_handleProtocolEvent@bytes_1286,??_vscp_handleProtocolEvent
  6056  001724  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6057  001726  5FD1               	subwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6058  001728  0E00               	movlw	0
  6059  00172A  5BD2               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6060  00172C  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6061  00172E  0A80               	xorlw	128
  6062  001730  0F80               	addlw	-128
  6063  001732  0E04               	movlw	4
  6064  001734  B4D8               	btfsc	status,2,c
  6065  001736  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6066  001738  E302               	bnc	l9653
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  6070  00173A  0E04               	movlw	4
  6071  00173C  D002               	goto	L18
  6072  00173E                     l9653:
  6073                           
  6074                           ; BSR set to: 0
  6075                           ;vscp_firmware.c: 1198: else {
  6076                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  6077  00173E  51E8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6078  001740  5DE6               	subwf	vscp_handleProtocolEvent@bytes_1286& (0+255),w,b
  6079  001742                     L18:
  6080  001742  6FE2               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  6081                           
  6082                           ; BSR set to: 0
  6083                           ;vscp_firmware.c: 1200: }
  6084                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  6085  001744  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6086  001746  0F84               	addlw	132
  6087  001748  6FA4               	movwf	_vscp_omsg& (0+255),b
  6088                           
  6089                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  6090                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  6091  00174A  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6092  00174C  25E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6093  00174E  6FAC               	movwf	(_vscp_omsg+8)& (0+255),b
  6094                           
  6095                           ; BSR set to: 0
  6096                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  6097  001750  6BE3               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  6098  001752  D00C               	goto	l9661
  6099  001754                     l9657:
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  6103                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  6104  001754  51E3               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6105  001756  0FAD               	addlw	low (_vscp_omsg+9)
  6106  001758  6ED9               	movwf	fsr2l,c
  6107  00175A  6ADA               	clrf	fsr2h,c
  6108  00175C  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6109  00175E  25E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6110  001760  25E3               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6111  001762  EC70  F020         	call	_vscp_readRegister
  6112  001766  6EDF               	movwf	indf2,c
  6113  001768  0100               	movlb	0	; () banked
  6114  00176A  2BE3               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  6115  00176C                     l9661:
  6116                           
  6117                           ; BSR set to: 0
  6118  00176C  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6119  00176E  5DE3               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6120  001770  E3F1               	bnc	l9657
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;vscp_firmware.c: 1211: }
  6124                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  6125  001772  ECB4  F01F         	call	_vscp_sendEvent	;wreg free
  6126                           
  6127                           ; BSR set to: 0
  6128                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  6129  001776  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6130  001778  27E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  6131                           
  6132                           ; BSR set to: 0
  6133                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  6134  00177A  2BA9               	incf	(_vscp_omsg+5)& (0+255),f,b
  6135                           
  6136                           ; BSR set to: 0
  6137                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  6138  00177C  51E6               	movf	vscp_handleProtocolEvent@bytes_1286& (0+255),w,b
  6139  00177E  5DE8               	subwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6140  001780  E3CE               	bnc	l9649
  6141                           
  6142                           ; BSR set to: 0
  6143                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  6144  001782  C0D8  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  6145  001786  C0D9  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  6146  00178A  D08C               	goto	l1275
  6147  00178C                     l9671:
  6148                           
  6149                           ; BSR set to: 0
  6150                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  6151  00178C  5191               	movf	_vscp_nickname& (0+255),w,b
  6152  00178E  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6153  001792  62DF               	cpfseq	indf2,c
  6154  001794  D087               	goto	l1275
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;vscp_firmware.c: 1234: uint8_t i;
  6158                           ;vscp_firmware.c: 1235: uint16_t page_save;
  6159                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  6160  001796  C052  F0DA         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1290
  6161  00179A  C053  F0DB         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1290+1
  6162                           
  6163                           ; BSR set to: 0
  6164                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  6165  00179E  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  6166  0017A0  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6167  0017A4  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6168  0017A6  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6169  0017AA  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6170  0017AC  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6171  0017AE  6E52               	movwf	_vscp_page_select,c
  6172  0017B0  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6173  0017B2  6E53               	movwf	_vscp_page_select+1,c
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  6177  0017B4  C09F  F0E4         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1289
  6178                           
  6179                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  6180                           ;vscp_firmware.c: 1248: i++) {
  6181  0017B8  D014               	goto	l9683
  6182  0017BA                     l9679:
  6183                           
  6184                           ; BSR set to: 0
  6185                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  6186                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  6187  0017BA  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6188  0017BC  08A0               	sublw	low (_vscp_imsg+10)
  6189  0017BE  25E4               	addwf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6190  0017C0  6ED9               	movwf	fsr2l,c
  6191  0017C2  6ADA               	clrf	fsr2h,c
  6192  0017C4  50DF               	movf	indf2,w,c
  6193  0017C6  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  6194  0017C8  51E4               	movf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6195  0017CA  EC0F  F020         	call	_vscp_writeRegister
  6196  0017CE  0100               	movlb	0	; () banked
  6197  0017D0  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6198  0017D2  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6199  0017D4  08AD               	sublw	low (_vscp_omsg+9)
  6200  0017D6  25E4               	addwf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6201  0017D8  6ED9               	movwf	fsr2l,c
  6202  0017DA  6ADA               	clrf	fsr2h,c
  6203  0017DC  C0D1  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  6204                           
  6205                           ; BSR set to: 0
  6206  0017E0  2BE4               	incf	vscp_handleProtocolEvent@i_1289& (0+255),f,b
  6207  0017E2                     l9683:
  6208                           
  6209                           ; BSR set to: 0
  6210  0017E2  5196               	movf	_vscp_imsg& (0+255),w,b
  6211  0017E4  0B0F               	andlw	15
  6212  0017E6  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6213  0017E8  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6214  0017EA  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6215  0017EC  27D1               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6216  0017EE  0E00               	movlw	0
  6217  0017F0  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6218  0017F2  0EFC               	movlw	252
  6219  0017F4  25D1               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6220  0017F6  6FD3               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  6221  0017F8  0EFF               	movlw	255
  6222  0017FA  21D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6223  0017FC  6FD4               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  6224  0017FE  51E4               	movf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6225  001800  6FD5               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  6226  001802  6BD6               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  6227  001804  51D6               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  6228  001806  0A80               	xorlw	128
  6229  001808  6FD7               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  6230  00180A  51D3               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  6231  00180C  5DD5               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  6232  00180E  51D4               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  6233  001810  0A80               	xorlw	128
  6234  001812  59D7               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  6235  001814  E3D2               	bnc	l9679
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;vscp_firmware.c: 1251: }
  6239                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  6240  001816  C0DA  F052         	movff	vscp_handleProtocolEvent@page_save_1290,_vscp_page_select
  6241  00181A  C0DB  F053         	movff	vscp_handleProtocolEvent@page_save_1290+1,_vscp_page_select+1
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x03;
  6245  00181E  0E03               	movlw	3
  6246  001820  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6247                           
  6248                           ; BSR set to: 0
  6249                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  6250  001822  5196               	movf	_vscp_imsg& (0+255),w,b
  6251  001824  0B0F               	andlw	15
  6252  001826  0F80               	addlw	128
  6253  001828  6FA4               	movwf	_vscp_omsg& (0+255),b
  6254                           
  6255                           ; BSR set to: 0
  6256                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  6257  00182A  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6258  00182C  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  6262  00182E  0E27               	movlw	39
  6263  001830  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  6267  001832  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  6271  001834  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  6275  001838  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  6279  00183C  C09F  F0AC         	movff	_vscp_imsg+9,_vscp_omsg+8
  6280  001840  D551               	goto	l9319
  6281  001842                     l9705:
  6282                           
  6283                           ; BSR set to: 0
  6284  001842  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  6285                           
  6286                           ; Switch size 1, requested type "speed"
  6287                           ; Number of cases is 16, Range of values is 1 to 38
  6288                           ; switch strategies available:
  6289                           ; Name         Instructions Cycles
  6290                           ; simple_byte           49    25 (average)
  6291                           ;	Chosen strategy is simple_byte
  6292  001844  0A01               	xorlw	1	; case 1
  6293  001846  E101 D525          	bz	l9293
  6294  00184A  0A03               	xorlw	3	; case 2
  6295  00184C  E101 D525          	bz	l9295
  6296  001850  0A04               	xorlw	4	; case 6
  6297  001852  E101 D525          	bz	l9297
  6298  001856  0A0E               	xorlw	14	; case 8
  6299  001858  E101 D525          	bz	l9299
  6300  00185C  0A01               	xorlw	1	; case 9
  6301  00185E  E101 D525          	bz	l9301
  6302  001862  0A02               	xorlw	2	; case 11
  6303  001864  E101 D545          	bz	l9335
  6304  001868  0A07               	xorlw	7	; case 12
  6305  00186A  E101 D55B          	bz	l9369
  6306  00186E  0A1B               	xorlw	27	; case 23
  6307  001870  E101 D5F0          	bz	l9427
  6308  001874  0A0F               	xorlw	15	; case 24
  6309  001876  E101 D604          	bz	l9433
  6310  00187A  0A01               	xorlw	1	; case 25
  6311  00187C  E101 D659          	bz	l9467
  6312  001880  0A04               	xorlw	4	; case 29
  6313  001882  E101 D687          	bz	l9493
  6314  001886  0A03               	xorlw	3	; case 30
  6315  001888  E101 D694          	bz	l9509
  6316  00188C  0A01               	xorlw	1	; case 31
  6317  00188E  E101 D6A1          	bz	l9525
  6318  001892  0A3E               	xorlw	62	; case 33
  6319  001894  E101 D705          	bz	l9611
  6320  001898  0A04               	xorlw	4	; case 37
  6321  00189A  E101 D713          	bz	l9621
  6322  00189E  0A03               	xorlw	3	; case 38
  6323  0018A0  E101 D774          	bz	l9671
  6324  0018A4                     l1275:
  6325  0018A4  0012               	return	
  6326  0018A6                     __end_of_vscp_handleProtocolEvent:
  6327                           	opt stack 0
  6328                           tblptru	equ	0xFF8
  6329                           prodh	equ	0xFF4
  6330                           prodl	equ	0xFF3
  6331                           postinc0	equ	0xFEE
  6332                           wreg	equ	0xFE8
  6333                           indf2	equ	0xFDF
  6334                           postinc2	equ	0xFDE
  6335                           postdec2	equ	0xFDD
  6336                           fsr2h	equ	0xFDA
  6337                           fsr2l	equ	0xFD9
  6338                           status	equ	0xFD8
  6339                           
  6340 ;; *************** function ___lbmod *****************
  6341 ;; Defined at:
  6342 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;  dividend        1    wreg     unsigned char 
  6345 ;;  divisor         1    7[COMRAM] unsigned char 
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;  dividend        1    8[COMRAM] unsigned char 
  6348 ;;  rem             1   10[COMRAM] unsigned char 
  6349 ;;  counter         1    9[COMRAM] unsigned char 
  6350 ;; Return value:  Size  Location     Type
  6351 ;;                  1    wreg      unsigned char 
  6352 ;; Registers used:
  6353 ;;		wreg, status,2, status,0
  6354 ;; Tracked objects:
  6355 ;;		On entry : F/0
  6356 ;;		On exit  : 0/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6359 ;;      Params:         1       0       0       0       0       0       0
  6360 ;;      Locals:         3       0       0       0       0       0       0
  6361 ;;      Temps:          0       0       0       0       0       0       0
  6362 ;;      Totals:         4       0       0       0       0       0       0
  6363 ;;Total ram usage:        4 bytes
  6364 ;; Hardware stack levels used:    1
  6365 ;; Hardware stack levels required when called:    2
  6366 ;; This function calls:
  6367 ;;		Nothing
  6368 ;; This function is called by:
  6369 ;;		_vscp_handleProtocolEvent
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           	psect	text16
  6374  003F1A                     __ptext16:
  6375                           	opt stack 0
  6376  003F1A                     ___lbmod:
  6377                           	opt stack 27
  6378                           
  6379                           ;incstack = 0
  6380                           ;incstack = 0
  6381                           ;___lbmod@dividend stored from wreg
  6382  003F1A  CFE8 F009          	movff	wreg,___lbmod@dividend
  6383                           
  6384                           ; BSR set to: 0
  6385  003F1E  0E08               	movlw	8
  6386  003F20  6E0A               	movwf	___lbmod@counter,c
  6387                           
  6388                           ; BSR set to: 0
  6389  003F22  6A0B               	clrf	___lbmod@rem,c
  6390  003F24                     l7071:
  6391  003F24  90D8               	bcf	status,0,c
  6392  003F26  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  6393  003F28  340B               	rlcf	___lbmod@rem& (0+255),w,c
  6394  003F2A  6E0B               	movwf	___lbmod@rem,c
  6395  003F2C  90D8               	bcf	status,0,c
  6396  003F2E  3609               	rlcf	___lbmod@dividend,f,c
  6397  003F30  5008               	movf	___lbmod@divisor,w,c
  6398  003F32  5C0B               	subwf	___lbmod@rem,w,c
  6399  003F34  E302               	bnc	l7079
  6400  003F36  5008               	movf	___lbmod@divisor,w,c
  6401  003F38  5E0B               	subwf	___lbmod@rem,f,c
  6402  003F3A                     l7079:
  6403  003F3A  2E0A               	decfsz	___lbmod@counter,f,c
  6404  003F3C  D7F3               	goto	l7071
  6405  003F3E  500B               	movf	___lbmod@rem,w,c
  6406  003F40  0012               	return	
  6407  003F42                     __end_of___lbmod:
  6408                           	opt stack 0
  6409                           tblptru	equ	0xFF8
  6410                           prodh	equ	0xFF4
  6411                           prodl	equ	0xFF3
  6412                           postinc0	equ	0xFEE
  6413                           wreg	equ	0xFE8
  6414                           indf2	equ	0xFDF
  6415                           postinc2	equ	0xFDE
  6416                           postdec2	equ	0xFDD
  6417                           fsr2h	equ	0xFDA
  6418                           fsr2l	equ	0xFD9
  6419                           status	equ	0xFD8
  6420                           
  6421 ;; *************** function _vscp_writeRegister *****************
  6422 ;; Defined at:
  6423 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  6424 ;; Parameters:    Size  Location     Type
  6425 ;;  reg             1    wreg     unsigned char 
  6426 ;;  value           1   30[BANK0 ] unsigned char 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  reg             1   31[BANK0 ] unsigned char 
  6429 ;; Return value:  Size  Location     Type
  6430 ;;                  1    wreg      unsigned char 
  6431 ;; Registers used:
  6432 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6433 ;; Tracked objects:
  6434 ;;		On entry : F/0
  6435 ;;		On exit  : 0/0
  6436 ;;		Unchanged: 0/0
  6437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6438 ;;      Params:         0       1       0       0       0       0       0
  6439 ;;      Locals:         0       1       0       0       0       0       0
  6440 ;;      Temps:          0       0       0       0       0       0       0
  6441 ;;      Totals:         0       2       0       0       0       0       0
  6442 ;;Total ram usage:        2 bytes
  6443 ;; Hardware stack levels used:    1
  6444 ;; Hardware stack levels required when called:    8
  6445 ;; This function calls:
  6446 ;;		_vscp_writeAppReg
  6447 ;;		_vscp_writeStdReg
  6448 ;; This function is called by:
  6449 ;;		_vscp_handleProtocolEvent
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           	psect	text17
  6454  00401E                     __ptext17:
  6455                           	opt stack 0
  6456  00401E                     _vscp_writeRegister:
  6457                           	opt stack 21
  6458                           
  6459                           ;incstack = 0
  6460                           ;incstack = 0
  6461                           ;vscp_writeRegister@reg stored from wreg
  6462  00401E  CFE8 F0D0          	movff	wreg,vscp_writeRegister@reg
  6463                           
  6464                           ; BSR set to: 0
  6465                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  6466  004022  0E7F               	movlw	127
  6467  004024  65D0               	cpfsgt	vscp_writeRegister@reg& (0+255),b
  6468  004026  D006               	goto	l10467
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  6472  004028  C0CF  F00F         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  6473  00402C  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6474  00402E  ECFD  F01A         	call	_vscp_writeStdReg
  6475  004032  D005               	goto	l1156
  6476  004034                     l10467:
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;vscp_firmware.c: 705: else {
  6480                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  6481  004034  C0CF  F051         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  6482  004038  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6483  00403A  EC6E  F004         	call	_vscp_writeAppReg
  6484  00403E                     l1156:
  6485  00403E  0012               	return	
  6486  004040                     __end_of_vscp_writeRegister:
  6487                           	opt stack 0
  6488                           tblptru	equ	0xFF8
  6489                           prodh	equ	0xFF4
  6490                           prodl	equ	0xFF3
  6491                           postinc0	equ	0xFEE
  6492                           wreg	equ	0xFE8
  6493                           indf2	equ	0xFDF
  6494                           postinc2	equ	0xFDE
  6495                           postdec2	equ	0xFDD
  6496                           fsr2h	equ	0xFDA
  6497                           fsr2l	equ	0xFD9
  6498                           status	equ	0xFD8
  6499                           
  6500 ;; *************** function _vscp_writeStdReg *****************
  6501 ;; Defined at:
  6502 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;  reg             1    wreg     unsigned char 
  6505 ;;  value           1   14[COMRAM] unsigned char 
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;  reg             1   20[COMRAM] unsigned char 
  6508 ;;  rv              1   19[COMRAM] unsigned char 
  6509 ;; Return value:  Size  Location     Type
  6510 ;;                  1    wreg      unsigned char 
  6511 ;; Registers used:
  6512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6513 ;; Tracked objects:
  6514 ;;		On entry : F/0
  6515 ;;		On exit  : 0/0
  6516 ;;		Unchanged: 0/0
  6517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6518 ;;      Params:         1       0       0       0       0       0       0
  6519 ;;      Locals:         2       0       0       0       0       0       0
  6520 ;;      Temps:          4       0       0       0       0       0       0
  6521 ;;      Totals:         7       0       0       0       0       0       0
  6522 ;;Total ram usage:        7 bytes
  6523 ;; Hardware stack levels used:    1
  6524 ;; Hardware stack levels required when called:    5
  6525 ;; This function calls:
  6526 ;;		_vscp_setGUID
  6527 ;;		_vscp_setManufacturerId
  6528 ;;		_vscp_getGUID
  6529 ;;		_vscp_getUserID
  6530 ;;		_vscp_setUserID
  6531 ;;		_vscp_getManufacturerId
  6532 ;;		_vscp_restoreDefaults
  6533 ;; This function is called by:
  6534 ;;		_vscp_writeRegister
  6535 ;;		_vscp_handleProtocolEvent
  6536 ;; This function uses a non-reentrant model
  6537 ;;
  6538                           
  6539                           	psect	text18
  6540  0035FA                     __ptext18:
  6541                           	opt stack 0
  6542  0035FA                     _vscp_writeStdReg:
  6543                           	opt stack 24
  6544                           
  6545                           ;incstack = 0
  6546                           ;incstack = 0
  6547                           ;vscp_writeStdReg@reg stored from wreg
  6548  0035FA  CFE8 F015          	movff	wreg,vscp_writeStdReg@reg
  6549                           
  6550                           ; BSR set to: 0
  6551                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  6552  0035FE  1C0F               	comf	vscp_writeStdReg@value,w,c
  6553  003600  6E14               	movwf	vscp_writeStdReg@rv,c
  6554                           
  6555                           ; BSR set to: 0
  6556                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  6557                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  6558  003602  0E83               	movlw	131
  6559  003604  6415               	cpfsgt	vscp_writeStdReg@reg,c
  6560  003606  D00E               	goto	l9129
  6561                           
  6562                           ; BSR set to: 0
  6563  003608  0E89               	movlw	137
  6564  00360A  6015               	cpfslt	vscp_writeStdReg@reg,c
  6565  00360C  D00B               	goto	l9129
  6566                           
  6567                           ; BSR set to: 0
  6568                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  6569  00360E  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  6570  003612  5015               	movf	vscp_writeStdReg@reg,w,c
  6571  003614  0F7C               	addlw	124
  6572  003616  EC7D  F020         	call	_vscp_setUserID
  6573                           
  6574                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  6575  00361A  5015               	movf	vscp_writeStdReg@reg,w,c
  6576  00361C  0F7C               	addlw	124
  6577  00361E  ECB7  F020         	call	_vscp_getUserID
  6578  003622  D069               	goto	L24
  6579  003624                     l9129:
  6580                           
  6581                           ; BSR set to: 0
  6582                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  6583  003624  5015               	movf	vscp_writeStdReg@reg,w,c
  6584  003626  0A92               	xorlw	146
  6585  003628  E10D               	bnz	l9135
  6586                           
  6587                           ; BSR set to: 0
  6588                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  6589  00362A  500F               	movf	vscp_writeStdReg@value,w,c
  6590  00362C  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6591  00362E  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  6592  003630  5052               	movf	_vscp_page_select,w,c
  6593  003632  6E12               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  6594  003634  6A13               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  6595  003636  1010               	iorwf	??_vscp_writeStdReg,w,c
  6596  003638  6E52               	movwf	_vscp_page_select,c
  6597  00363A  5011               	movf	??_vscp_writeStdReg+1,w,c
  6598  00363C  1013               	iorwf	??_vscp_writeStdReg+3,w,c
  6599  00363E  6E53               	movwf	_vscp_page_select+1,c
  6600                           
  6601                           ; BSR set to: 0
  6602                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  6603  003640  5053               	movf	_vscp_page_select+1,w,c
  6604  003642  D059               	goto	L24
  6605  003644                     l9135:
  6606                           
  6607                           ; BSR set to: 0
  6608                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  6609  003644  5015               	movf	vscp_writeStdReg@reg,w,c
  6610  003646  0A93               	xorlw	147
  6611  003648  E10B               	bnz	l9141
  6612                           
  6613                           ; BSR set to: 0
  6614                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  6615  00364A  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  6616  00364C  5053               	movf	_vscp_page_select+1,w,c
  6617  00364E  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6618  003650  500F               	movf	vscp_writeStdReg@value,w,c
  6619  003652  1010               	iorwf	??_vscp_writeStdReg,w,c
  6620  003654  6E52               	movwf	_vscp_page_select,c
  6621  003656  5011               	movf	??_vscp_writeStdReg+1,w,c
  6622  003658  6E53               	movwf	_vscp_page_select+1,c
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  6626  00365A  C052  F014         	movff	_vscp_page_select,vscp_writeStdReg@rv
  6627                           
  6628                           ;vscp_firmware.c: 737: }
  6629  00365E  D04E               	goto	l9183
  6630  003660                     l9141:
  6631                           
  6632                           ; BSR set to: 0
  6633                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  6634  003660  0E88               	movlw	136
  6635  003662  6415               	cpfsgt	vscp_writeStdReg@reg,c
  6636  003664  D019               	goto	l9153
  6637                           
  6638                           ; BSR set to: 0
  6639  003666  0E91               	movlw	145
  6640  003668  6015               	cpfslt	vscp_writeStdReg@reg,c
  6641  00366A  D016               	goto	l9153
  6642                           
  6643                           ; BSR set to: 0
  6644                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6645                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  6646  00366C  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6647  003670  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6648  003674  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6649  003676  2811               	incf	??_vscp_writeStdReg+1,w,c
  6650  003678  E102               	bnz	l9149
  6651                           
  6652                           ; BSR set to: 0
  6653  00367A  2852               	incf	_vscp_page_select,w,c
  6654  00367C  E002               	bz	l9151
  6655  00367E                     l9149:
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;vscp_firmware.c: 747: rv = ~value;
  6659  00367E  1C0F               	comf	vscp_writeStdReg@value,w,c
  6660  003680  D03A               	goto	L24
  6661  003682                     l9151:
  6662                           
  6663                           ; BSR set to: 0
  6664                           ;vscp_firmware.c: 749: else {
  6665                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  6666  003682  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  6667  003686  5015               	movf	vscp_writeStdReg@reg,w,c
  6668  003688  0F77               	addlw	119
  6669  00368A  EC20  F020         	call	_vscp_setManufacturerId
  6670                           
  6671                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  6672  00368E  5015               	movf	vscp_writeStdReg@reg,w,c
  6673  003690  0F77               	addlw	119
  6674  003692  ECAD  F020         	call	_vscp_getManufacturerId
  6675  003696  D02F               	goto	L24
  6676  003698                     l9153:
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  6680  003698  0ECF               	movlw	207
  6681  00369A  6415               	cpfsgt	vscp_writeStdReg@reg,c
  6682  00369C  D017               	goto	l9165
  6683                           
  6684                           ; BSR set to: 0
  6685  00369E  0EE0               	movlw	224
  6686  0036A0  6015               	cpfslt	vscp_writeStdReg@reg,c
  6687  0036A2  D014               	goto	l9165
  6688                           
  6689                           ; BSR set to: 0
  6690                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6691                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  6692  0036A4  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6693  0036A8  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6694  0036AC  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6695  0036AE  2811               	incf	??_vscp_writeStdReg+1,w,c
  6696  0036B0  E1E6               	bnz	l9149
  6697                           
  6698                           ; BSR set to: 0
  6699  0036B2  2852               	incf	_vscp_page_select,w,c
  6700  0036B4  E1E4               	bnz	l9149
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;vscp_firmware.c: 762: else {
  6704                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  6705  0036B6  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  6706  0036BA  5015               	movf	vscp_writeStdReg@reg,w,c
  6707  0036BC  0F30               	addlw	48
  6708  0036BE  EC31  F020         	call	_vscp_setGUID
  6709                           
  6710                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  6711  0036C2  5015               	movf	vscp_writeStdReg@reg,w,c
  6712  0036C4  0F30               	addlw	48
  6713  0036C6  ECC1  F020         	call	_vscp_getGUID
  6714  0036CA  D015               	goto	L24
  6715  0036CC                     l9165:
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  6719  0036CC  5015               	movf	vscp_writeStdReg@reg,w,c
  6720  0036CE  0AA2               	xorlw	162
  6721  0036D0  E1D6               	bnz	l9149
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  6725  0036D2  500F               	movf	vscp_writeStdReg@value,w,c
  6726  0036D4  0A55               	xorlw	85
  6727  0036D6  E104               	bnz	l9173
  6728                           
  6729                           ; BSR set to: 0
  6730                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  6731  0036D8  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
  6732  0036DA  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  6733                           
  6734                           ; BSR set to: 0
  6735                           ;vscp_firmware.c: 771: rv = 0x55;
  6736  0036DC  0E55               	movlw	85
  6737  0036DE  D00B               	goto	L24
  6738  0036E0                     l9173:
  6739                           
  6740                           ; BSR set to: 0
  6741                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  6742  0036E0  500F               	movf	vscp_writeStdReg@value,w,c
  6743  0036E2  0AAA               	xorlw	170
  6744  0036E4  E10B               	bnz	l9183
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  6748  0036E6  0EE8               	movlw	232
  6749  0036E8  5D84               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  6750  0036EA  0E03               	movlw	3
  6751  0036EC  5985               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  6752  0036EE  E205               	bc	l1182
  6753                           
  6754                           ; BSR set to: 0
  6755                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  6756  0036F0  EC1F  F021         	call	_vscp_restoreDefaults	;wreg free
  6757                           
  6758                           ;vscp_firmware.c: 776: rv = 0xaa;
  6759  0036F4  0EAA               	movlw	170
  6760  0036F6                     L24:
  6761  0036F6  6E14               	movwf	vscp_writeStdReg@rv,c
  6762                           
  6763                           ;vscp_firmware.c: 777: }
  6764  0036F8  D001               	goto	l9183
  6765  0036FA                     l1182:
  6766                           
  6767                           ; BSR set to: 0
  6768                           ;vscp_firmware.c: 778: else {
  6769                           ;vscp_firmware.c: 779: rv = 0;
  6770  0036FA  6A14               	clrf	vscp_writeStdReg@rv,c
  6771  0036FC                     l9183:
  6772                           
  6773                           ;vscp_firmware.c: 787: }
  6774                           ;vscp_firmware.c: 789: return rv;
  6775  0036FC  5014               	movf	vscp_writeStdReg@rv,w,c
  6776  0036FE  0012               	return	
  6777  003700                     __end_of_vscp_writeStdReg:
  6778                           	opt stack 0
  6779                           tblptru	equ	0xFF8
  6780                           prodh	equ	0xFF4
  6781                           prodl	equ	0xFF3
  6782                           postinc0	equ	0xFEE
  6783                           wreg	equ	0xFE8
  6784                           indf2	equ	0xFDF
  6785                           postinc2	equ	0xFDE
  6786                           postdec2	equ	0xFDD
  6787                           fsr2h	equ	0xFDA
  6788                           fsr2l	equ	0xFD9
  6789                           status	equ	0xFD8
  6790                           
  6791 ;; *************** function _vscp_restoreDefaults *****************
  6792 ;; Defined at:
  6793 ;;		line 2480 in file "../main.c"
  6794 ;; Parameters:    Size  Location     Type
  6795 ;;		None
  6796 ;; Auto vars:     Size  Location     Type
  6797 ;;		None
  6798 ;; Return value:  Size  Location     Type
  6799 ;;		None               void
  6800 ;; Registers used:
  6801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6802 ;; Tracked objects:
  6803 ;;		On entry : F/0
  6804 ;;		On exit  : 0/0
  6805 ;;		Unchanged: 0/0
  6806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6807 ;;      Params:         0       0       0       0       0       0       0
  6808 ;;      Locals:         0       0       0       0       0       0       0
  6809 ;;      Temps:          0       0       0       0       0       0       0
  6810 ;;      Totals:         0       0       0       0       0       0       0
  6811 ;;Total ram usage:        0 bytes
  6812 ;; Hardware stack levels used:    1
  6813 ;; Hardware stack levels required when called:    4
  6814 ;; This function calls:
  6815 ;;		_init_app_eeprom
  6816 ;;		_init_app_ram
  6817 ;; This function is called by:
  6818 ;;		_vscp_writeStdReg
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           	psect	text19
  6823  00423E                     __ptext19:
  6824                           	opt stack 0
  6825  00423E                     _vscp_restoreDefaults:
  6826                           	opt stack 24
  6827                           
  6828                           ; BSR set to: 0
  6829                           ;main.c: 2481: init_app_eeprom();
  6830                           
  6831                           ;incstack = 0
  6832                           ;incstack = 0
  6833  00423E  EC89  F00E         	call	_init_app_eeprom	;wreg free
  6834                           
  6835                           ;main.c: 2482: init_app_ram();
  6836  004242  EFF0  F019         	goto	_init_app_ram	;wreg free
  6837  004246                     __end_of_vscp_restoreDefaults:
  6838                           	opt stack 0
  6839                           tblptru	equ	0xFF8
  6840                           prodh	equ	0xFF4
  6841                           prodl	equ	0xFF3
  6842                           postinc0	equ	0xFEE
  6843                           wreg	equ	0xFE8
  6844                           indf2	equ	0xFDF
  6845                           postinc2	equ	0xFDE
  6846                           postdec2	equ	0xFDD
  6847                           fsr2h	equ	0xFDA
  6848                           fsr2l	equ	0xFD9
  6849                           status	equ	0xFD8
  6850                           
  6851 ;; *************** function _init_app_eeprom *****************
  6852 ;; Defined at:
  6853 ;;		line 480 in file "../main.c"
  6854 ;; Parameters:    Size  Location     Type
  6855 ;;		None
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;  j               1   13[COMRAM] unsigned char 
  6858 ;;  i               1   12[COMRAM] unsigned char 
  6859 ;; Return value:  Size  Location     Type
  6860 ;;		None               void
  6861 ;; Registers used:
  6862 ;;		wreg, status,2, status,0, cstack
  6863 ;; Tracked objects:
  6864 ;;		On entry : 0/0
  6865 ;;		On exit  : 0/0
  6866 ;;		Unchanged: 0/0
  6867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6868 ;;      Params:         0       0       0       0       0       0       0
  6869 ;;      Locals:         2       0       0       0       0       0       0
  6870 ;;      Temps:          2       0       0       0       0       0       0
  6871 ;;      Totals:         4       0       0       0       0       0       0
  6872 ;;Total ram usage:        4 bytes
  6873 ;; Hardware stack levels used:    1
  6874 ;; Hardware stack levels required when called:    3
  6875 ;; This function calls:
  6876 ;;		_writeEEPROM
  6877 ;; This function is called by:
  6878 ;;		_main
  6879 ;;		_vscp_restoreDefaults
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text20
  6884  001D12                     __ptext20:
  6885                           	opt stack 0
  6886  001D12                     _init_app_eeprom:
  6887                           	opt stack 24
  6888                           
  6889                           ;main.c: 481: unsigned char i, j;
  6890                           ;main.c: 483: writeEEPROM( 0x43 + 0, 0 );
  6891                           
  6892                           ;incstack = 0
  6893                           ;incstack = 0
  6894  001D12  6A09               	clrf	?_writeEEPROM+1,c
  6895  001D14  0E43               	movlw	67
  6896  001D16  6E08               	movwf	?_writeEEPROM,c
  6897  001D18  0E00               	movlw	0
  6898  001D1A  6A0A               	clrf	?_writeEEPROM+2,c
  6899  001D1C  ECC7  F01F         	call	_writeEEPROM	;wreg free
  6900                           
  6901                           ;main.c: 484: writeEEPROM( 0x43 + 1, 0 );
  6902  001D20  6A09               	clrf	?_writeEEPROM+1,c
  6903  001D22  0E44               	movlw	68
  6904  001D24  6E08               	movwf	?_writeEEPROM,c
  6905  001D26  0E00               	movlw	0
  6906  001D28  6A0A               	clrf	?_writeEEPROM+2,c
  6907  001D2A  ECC7  F01F         	call	_writeEEPROM	;wreg free
  6908                           
  6909                           ;main.c: 486: writeEEPROM( 0x43 + 10,
  6910                           ;main.c: 487: 0x08 |
  6911                           ;main.c: 488: 0x10 |
  6912                           ;main.c: 489: 0x80 );
  6913  001D2E  6A09               	clrf	?_writeEEPROM+1,c
  6914  001D30  0E4D               	movlw	77
  6915  001D32  6E08               	movwf	?_writeEEPROM,c
  6916  001D34  0E98               	movlw	152
  6917  001D36  6E0A               	movwf	?_writeEEPROM+2,c
  6918  001D38  ECC7  F01F         	call	_writeEEPROM	;wreg free
  6919                           
  6920                           ;main.c: 491: writeEEPROM( 0x43 + 11,
  6921                           ;main.c: 492: 0x08 |
  6922                           ;main.c: 493: 0x10 |
  6923                           ;main.c: 494: 0x80 );
  6924  001D3C  6A09               	clrf	?_writeEEPROM+1,c
  6925  001D3E  0E4E               	movlw	78
  6926  001D40  6E08               	movwf	?_writeEEPROM,c
  6927  001D42  0E98               	movlw	152
  6928  001D44  6E0A               	movwf	?_writeEEPROM+2,c
  6929  001D46  ECC7  F01F         	call	_writeEEPROM	;wreg free
  6930                           
  6931                           ;main.c: 496: writeEEPROM( 0x43 + 12,
  6932                           ;main.c: 497: 0x08 |
  6933                           ;main.c: 498: 0x10 |
  6934                           ;main.c: 499: 0x80 );
  6935  001D4A  6A09               	clrf	?_writeEEPROM+1,c
  6936  001D4C  0E4F               	movlw	79
  6937  001D4E  6E08               	movwf	?_writeEEPROM,c
  6938  001D50  0E98               	movlw	152
  6939  001D52  6E0A               	movwf	?_writeEEPROM+2,c
  6940  001D54  ECC7  F01F         	call	_writeEEPROM	;wreg free
  6941                           
  6942                           ;main.c: 501: writeEEPROM( 0x43 + 13,
  6943                           ;main.c: 502: 0x08 |
  6944                           ;main.c: 503: 0x10 |
  6945                           ;main.c: 504: 0x80 );
  6946  001D58  6A09               	clrf	?_writeEEPROM+1,c
  6947  001D5A  0E50               	movlw	80
  6948  001D5C  6E08               	movwf	?_writeEEPROM,c
  6949  001D5E  0E98               	movlw	152
  6950  001D60  6E0A               	movwf	?_writeEEPROM+2,c
  6951  001D62  ECC7  F01F         	call	_writeEEPROM	;wreg free
  6952                           
  6953                           ;main.c: 506: writeEEPROM( 0x43 + 14,
  6954                           ;main.c: 507: 0x08 |
  6955                           ;main.c: 508: 0x10 |
  6956                           ;main.c: 509: 0x80 );
  6957  001D66  6A09               	clrf	?_writeEEPROM+1,c
  6958  001D68  0E51               	movlw	81
  6959  001D6A  6E08               	movwf	?_writeEEPROM,c
  6960  001D6C  0E98               	movlw	152
  6961  001D6E  6E0A               	movwf	?_writeEEPROM+2,c
  6962  001D70  ECC7  F01F         	call	_writeEEPROM	;wreg free
  6963                           
  6964                           ;main.c: 511: writeEEPROM( 0x43 + 15,
  6965                           ;main.c: 512: 0x08 |
  6966                           ;main.c: 513: 0x10 |
  6967                           ;main.c: 514: 0x80 );
  6968  001D74  6A09               	clrf	?_writeEEPROM+1,c
  6969  001D76  0E52               	movlw	82
  6970  001D78  6E08               	movwf	?_writeEEPROM,c
  6971  001D7A  0E98               	movlw	152
  6972  001D7C  6E0A               	movwf	?_writeEEPROM+2,c
  6973  001D7E  ECC7  F01F         	call	_writeEEPROM	;wreg free
  6974                           
  6975                           ;main.c: 516: writeEEPROM( 0x43 + 16,
  6976                           ;main.c: 517: 0x08 |
  6977                           ;main.c: 518: 0x10 |
  6978                           ;main.c: 519: 0x80 );
  6979  001D82  6A09               	clrf	?_writeEEPROM+1,c
  6980  001D84  0E53               	movlw	83
  6981  001D86  6E08               	movwf	?_writeEEPROM,c
  6982  001D88  0E98               	movlw	152
  6983  001D8A  6E0A               	movwf	?_writeEEPROM+2,c
  6984  001D8C  ECC7  F01F         	call	_writeEEPROM	;wreg free
  6985                           
  6986                           ;main.c: 521: writeEEPROM( 0x43 + 17,
  6987                           ;main.c: 522: 0x08 |
  6988                           ;main.c: 523: 0x10 |
  6989                           ;main.c: 524: 0x80 );
  6990  001D90  6A09               	clrf	?_writeEEPROM+1,c
  6991  001D92  0E54               	movlw	84
  6992  001D94  6E08               	movwf	?_writeEEPROM,c
  6993  001D96  0E98               	movlw	152
  6994  001D98  6E0A               	movwf	?_writeEEPROM+2,c
  6995  001D9A  ECC7  F01F         	call	_writeEEPROM	;wreg free
  6996                           
  6997                           ;main.c: 526: writeEEPROM( 0x43 + 18, 0 );
  6998  001D9E  6A09               	clrf	?_writeEEPROM+1,c
  6999  001DA0  0E55               	movlw	85
  7000  001DA2  6E08               	movwf	?_writeEEPROM,c
  7001  001DA4  0E00               	movlw	0
  7002  001DA6  6A0A               	clrf	?_writeEEPROM+2,c
  7003  001DA8  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7004                           
  7005                           ;main.c: 527: writeEEPROM( 0x43 + 19, 0 );
  7006  001DAC  6A09               	clrf	?_writeEEPROM+1,c
  7007  001DAE  0E56               	movlw	86
  7008  001DB0  6E08               	movwf	?_writeEEPROM,c
  7009  001DB2  0E00               	movlw	0
  7010  001DB4  6A0A               	clrf	?_writeEEPROM+2,c
  7011  001DB6  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7012                           
  7013                           ;main.c: 528: writeEEPROM( 0x43 + 20, 0 );
  7014  001DBA  6A09               	clrf	?_writeEEPROM+1,c
  7015  001DBC  0E57               	movlw	87
  7016  001DBE  6E08               	movwf	?_writeEEPROM,c
  7017  001DC0  0E00               	movlw	0
  7018  001DC2  6A0A               	clrf	?_writeEEPROM+2,c
  7019  001DC4  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7020                           
  7021                           ;main.c: 529: writeEEPROM( 0x43 + 21, 0 );
  7022  001DC8  6A09               	clrf	?_writeEEPROM+1,c
  7023  001DCA  0E58               	movlw	88
  7024  001DCC  6E08               	movwf	?_writeEEPROM,c
  7025  001DCE  0E00               	movlw	0
  7026  001DD0  6A0A               	clrf	?_writeEEPROM+2,c
  7027  001DD2  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7028                           
  7029                           ;main.c: 530: writeEEPROM( 0x43 + 22, 0 );
  7030  001DD6  6A09               	clrf	?_writeEEPROM+1,c
  7031  001DD8  0E59               	movlw	89
  7032  001DDA  6E08               	movwf	?_writeEEPROM,c
  7033  001DDC  0E00               	movlw	0
  7034  001DDE  6A0A               	clrf	?_writeEEPROM+2,c
  7035  001DE0  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7036                           
  7037                           ;main.c: 531: writeEEPROM( 0x43 + 23, 0 );
  7038  001DE4  6A09               	clrf	?_writeEEPROM+1,c
  7039  001DE6  0E5A               	movlw	90
  7040  001DE8  6E08               	movwf	?_writeEEPROM,c
  7041  001DEA  0E00               	movlw	0
  7042  001DEC  6A0A               	clrf	?_writeEEPROM+2,c
  7043  001DEE  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7044                           
  7045                           ;main.c: 532: writeEEPROM( 0x43 + 24, 0 );
  7046  001DF2  6A09               	clrf	?_writeEEPROM+1,c
  7047  001DF4  0E5B               	movlw	91
  7048  001DF6  6E08               	movwf	?_writeEEPROM,c
  7049  001DF8  0E00               	movlw	0
  7050  001DFA  6A0A               	clrf	?_writeEEPROM+2,c
  7051  001DFC  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7052                           
  7053                           ;main.c: 533: writeEEPROM( 0x43 + 25, 0 );
  7054  001E00  6A09               	clrf	?_writeEEPROM+1,c
  7055  001E02  0E5C               	movlw	92
  7056  001E04  6E08               	movwf	?_writeEEPROM,c
  7057  001E06  0E00               	movlw	0
  7058  001E08  6A0A               	clrf	?_writeEEPROM+2,c
  7059  001E0A  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7060                           
  7061                           ;main.c: 534: writeEEPROM( 0x43 + 26, 0 );
  7062  001E0E  6A09               	clrf	?_writeEEPROM+1,c
  7063  001E10  0E5D               	movlw	93
  7064  001E12  6E08               	movwf	?_writeEEPROM,c
  7065  001E14  0E00               	movlw	0
  7066  001E16  6A0A               	clrf	?_writeEEPROM+2,c
  7067  001E18  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7068                           
  7069                           ;main.c: 535: writeEEPROM( 0x43 + 27, 0 );
  7070  001E1C  6A09               	clrf	?_writeEEPROM+1,c
  7071  001E1E  0E5E               	movlw	94
  7072  001E20  6E08               	movwf	?_writeEEPROM,c
  7073  001E22  0E00               	movlw	0
  7074  001E24  6A0A               	clrf	?_writeEEPROM+2,c
  7075  001E26  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7076                           
  7077                           ;main.c: 536: writeEEPROM( 0x43 + 28, 0 );
  7078  001E2A  6A09               	clrf	?_writeEEPROM+1,c
  7079  001E2C  0E5F               	movlw	95
  7080  001E2E  6E08               	movwf	?_writeEEPROM,c
  7081  001E30  0E00               	movlw	0
  7082  001E32  6A0A               	clrf	?_writeEEPROM+2,c
  7083  001E34  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7084                           
  7085                           ;main.c: 537: writeEEPROM( 0x43 + 29, 0 );
  7086  001E38  6A09               	clrf	?_writeEEPROM+1,c
  7087  001E3A  0E60               	movlw	96
  7088  001E3C  6E08               	movwf	?_writeEEPROM,c
  7089  001E3E  0E00               	movlw	0
  7090  001E40  6A0A               	clrf	?_writeEEPROM+2,c
  7091  001E42  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7092                           
  7093                           ;main.c: 538: writeEEPROM( 0x43 + 30, 0 );
  7094  001E46  6A09               	clrf	?_writeEEPROM+1,c
  7095  001E48  0E61               	movlw	97
  7096  001E4A  6E08               	movwf	?_writeEEPROM,c
  7097  001E4C  0E00               	movlw	0
  7098  001E4E  6A0A               	clrf	?_writeEEPROM+2,c
  7099  001E50  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7100                           
  7101                           ;main.c: 539: writeEEPROM( 0x43 + 31, 0 );
  7102  001E54  6A09               	clrf	?_writeEEPROM+1,c
  7103  001E56  0E62               	movlw	98
  7104  001E58  6E08               	movwf	?_writeEEPROM,c
  7105  001E5A  0E00               	movlw	0
  7106  001E5C  6A0A               	clrf	?_writeEEPROM+2,c
  7107  001E5E  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7108                           
  7109                           ;main.c: 540: writeEEPROM( 0x43 + 32, 0 );
  7110  001E62  6A09               	clrf	?_writeEEPROM+1,c
  7111  001E64  0E63               	movlw	99
  7112  001E66  6E08               	movwf	?_writeEEPROM,c
  7113  001E68  0E00               	movlw	0
  7114  001E6A  6A0A               	clrf	?_writeEEPROM+2,c
  7115  001E6C  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7116                           
  7117                           ;main.c: 541: writeEEPROM( 0x43 + 33, 0 );
  7118  001E70  6A09               	clrf	?_writeEEPROM+1,c
  7119  001E72  0E64               	movlw	100
  7120  001E74  6E08               	movwf	?_writeEEPROM,c
  7121  001E76  0E00               	movlw	0
  7122  001E78  6A0A               	clrf	?_writeEEPROM+2,c
  7123  001E7A  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7124                           
  7125                           ;main.c: 543: writeEEPROM( 0x43 + 34, 0 );
  7126  001E7E  6A09               	clrf	?_writeEEPROM+1,c
  7127  001E80  0E65               	movlw	101
  7128  001E82  6E08               	movwf	?_writeEEPROM,c
  7129  001E84  0E00               	movlw	0
  7130  001E86  6A0A               	clrf	?_writeEEPROM+2,c
  7131  001E88  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7132                           
  7133                           ;main.c: 544: writeEEPROM( 0x43 + 35, 0 );
  7134  001E8C  6A09               	clrf	?_writeEEPROM+1,c
  7135  001E8E  0E66               	movlw	102
  7136  001E90  6E08               	movwf	?_writeEEPROM,c
  7137  001E92  0E00               	movlw	0
  7138  001E94  6A0A               	clrf	?_writeEEPROM+2,c
  7139  001E96  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7140                           
  7141                           ;main.c: 545: writeEEPROM( 0x43 + 36, 0 );
  7142  001E9A  6A09               	clrf	?_writeEEPROM+1,c
  7143  001E9C  0E67               	movlw	103
  7144  001E9E  6E08               	movwf	?_writeEEPROM,c
  7145  001EA0  0E00               	movlw	0
  7146  001EA2  6A0A               	clrf	?_writeEEPROM+2,c
  7147  001EA4  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7148                           
  7149                           ;main.c: 546: writeEEPROM( 0x43 + 37, 0 );
  7150  001EA8  6A09               	clrf	?_writeEEPROM+1,c
  7151  001EAA  0E68               	movlw	104
  7152  001EAC  6E08               	movwf	?_writeEEPROM,c
  7153  001EAE  0E00               	movlw	0
  7154  001EB0  6A0A               	clrf	?_writeEEPROM+2,c
  7155  001EB2  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7156                           
  7157                           ;main.c: 547: writeEEPROM( 0x43 + 38, 0 );
  7158  001EB6  6A09               	clrf	?_writeEEPROM+1,c
  7159  001EB8  0E69               	movlw	105
  7160  001EBA  6E08               	movwf	?_writeEEPROM,c
  7161  001EBC  0E00               	movlw	0
  7162  001EBE  6A0A               	clrf	?_writeEEPROM+2,c
  7163  001EC0  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7164                           
  7165                           ;main.c: 548: writeEEPROM( 0x43 + 39, 0 );
  7166  001EC4  6A09               	clrf	?_writeEEPROM+1,c
  7167  001EC6  0E6A               	movlw	106
  7168  001EC8  6E08               	movwf	?_writeEEPROM,c
  7169  001ECA  0E00               	movlw	0
  7170  001ECC  6A0A               	clrf	?_writeEEPROM+2,c
  7171  001ECE  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7172                           
  7173                           ;main.c: 549: writeEEPROM( 0x43 + 40, 0 );
  7174  001ED2  6A09               	clrf	?_writeEEPROM+1,c
  7175  001ED4  0E6B               	movlw	107
  7176  001ED6  6E08               	movwf	?_writeEEPROM,c
  7177  001ED8  0E00               	movlw	0
  7178  001EDA  6A0A               	clrf	?_writeEEPROM+2,c
  7179  001EDC  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7180                           
  7181                           ;main.c: 550: writeEEPROM( 0x43 + 41, 0 );
  7182  001EE0  6A09               	clrf	?_writeEEPROM+1,c
  7183  001EE2  0E6C               	movlw	108
  7184  001EE4  6E08               	movwf	?_writeEEPROM,c
  7185  001EE6  0E00               	movlw	0
  7186  001EE8  6A0A               	clrf	?_writeEEPROM+2,c
  7187  001EEA  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7188                           
  7189                           ;main.c: 551: writeEEPROM( 0x43 + 42, 0 );
  7190  001EEE  6A09               	clrf	?_writeEEPROM+1,c
  7191  001EF0  0E6D               	movlw	109
  7192  001EF2  6E08               	movwf	?_writeEEPROM,c
  7193  001EF4  0E00               	movlw	0
  7194  001EF6  6A0A               	clrf	?_writeEEPROM+2,c
  7195  001EF8  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7196                           
  7197                           ;main.c: 552: writeEEPROM( 0x43 + 43, 0 );
  7198  001EFC  6A09               	clrf	?_writeEEPROM+1,c
  7199  001EFE  0E6E               	movlw	110
  7200  001F00  6E08               	movwf	?_writeEEPROM,c
  7201  001F02  0E00               	movlw	0
  7202  001F04  6A0A               	clrf	?_writeEEPROM+2,c
  7203  001F06  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7204                           
  7205                           ;main.c: 553: writeEEPROM( 0x43 + 44, 0 );
  7206  001F0A  6A09               	clrf	?_writeEEPROM+1,c
  7207  001F0C  0E6F               	movlw	111
  7208  001F0E  6E08               	movwf	?_writeEEPROM,c
  7209  001F10  0E00               	movlw	0
  7210  001F12  6A0A               	clrf	?_writeEEPROM+2,c
  7211  001F14  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7212                           
  7213                           ;main.c: 554: writeEEPROM( 0x43 + 45, 0 );
  7214  001F18  6A09               	clrf	?_writeEEPROM+1,c
  7215  001F1A  0E70               	movlw	112
  7216  001F1C  6E08               	movwf	?_writeEEPROM,c
  7217  001F1E  0E00               	movlw	0
  7218  001F20  6A0A               	clrf	?_writeEEPROM+2,c
  7219  001F22  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7220                           
  7221                           ;main.c: 555: writeEEPROM( 0x43 + 46, 0 );
  7222  001F26  6A09               	clrf	?_writeEEPROM+1,c
  7223  001F28  0E71               	movlw	113
  7224  001F2A  6E08               	movwf	?_writeEEPROM,c
  7225  001F2C  0E00               	movlw	0
  7226  001F2E  6A0A               	clrf	?_writeEEPROM+2,c
  7227  001F30  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7228                           
  7229                           ;main.c: 556: writeEEPROM( 0x43 + 47, 0 );
  7230  001F34  6A09               	clrf	?_writeEEPROM+1,c
  7231  001F36  0E72               	movlw	114
  7232  001F38  6E08               	movwf	?_writeEEPROM,c
  7233  001F3A  0E00               	movlw	0
  7234  001F3C  6A0A               	clrf	?_writeEEPROM+2,c
  7235  001F3E  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7236                           
  7237                           ;main.c: 557: writeEEPROM( 0x43 + 48, 0 );
  7238  001F42  6A09               	clrf	?_writeEEPROM+1,c
  7239  001F44  0E73               	movlw	115
  7240  001F46  6E08               	movwf	?_writeEEPROM,c
  7241  001F48  0E00               	movlw	0
  7242  001F4A  6A0A               	clrf	?_writeEEPROM+2,c
  7243  001F4C  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7244                           
  7245                           ;main.c: 558: writeEEPROM( 0x43 + 49, 0 );
  7246  001F50  6A09               	clrf	?_writeEEPROM+1,c
  7247  001F52  0E74               	movlw	116
  7248  001F54  6E08               	movwf	?_writeEEPROM,c
  7249  001F56  0E00               	movlw	0
  7250  001F58  6A0A               	clrf	?_writeEEPROM+2,c
  7251  001F5A  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7252                           
  7253                           ;main.c: 560: writeEEPROM( 0x43 + 50, 0 );
  7254  001F5E  6A09               	clrf	?_writeEEPROM+1,c
  7255  001F60  0E75               	movlw	117
  7256  001F62  6E08               	movwf	?_writeEEPROM,c
  7257  001F64  0E00               	movlw	0
  7258  001F66  6A0A               	clrf	?_writeEEPROM+2,c
  7259  001F68  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7260                           
  7261                           ;main.c: 561: writeEEPROM( 0x43 + 51, 0 );
  7262  001F6C  6A09               	clrf	?_writeEEPROM+1,c
  7263  001F6E  0E76               	movlw	118
  7264  001F70  6E08               	movwf	?_writeEEPROM,c
  7265  001F72  0E00               	movlw	0
  7266  001F74  6A0A               	clrf	?_writeEEPROM+2,c
  7267  001F76  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7268                           
  7269                           ;main.c: 562: writeEEPROM( 0x43 + 52, 0 );
  7270  001F7A  6A09               	clrf	?_writeEEPROM+1,c
  7271  001F7C  0E77               	movlw	119
  7272  001F7E  6E08               	movwf	?_writeEEPROM,c
  7273  001F80  0E00               	movlw	0
  7274  001F82  6A0A               	clrf	?_writeEEPROM+2,c
  7275  001F84  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7276                           
  7277                           ;main.c: 563: writeEEPROM( 0x43 + 53, 0 );
  7278  001F88  6A09               	clrf	?_writeEEPROM+1,c
  7279  001F8A  0E78               	movlw	120
  7280  001F8C  6E08               	movwf	?_writeEEPROM,c
  7281  001F8E  0E00               	movlw	0
  7282  001F90  6A0A               	clrf	?_writeEEPROM+2,c
  7283  001F92  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7284                           
  7285                           ;main.c: 564: writeEEPROM( 0x43 + 54, 0 );
  7286  001F96  6A09               	clrf	?_writeEEPROM+1,c
  7287  001F98  0E79               	movlw	121
  7288  001F9A  6E08               	movwf	?_writeEEPROM,c
  7289  001F9C  0E00               	movlw	0
  7290  001F9E  6A0A               	clrf	?_writeEEPROM+2,c
  7291  001FA0  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7292                           
  7293                           ;main.c: 565: writeEEPROM( 0x43 + 55, 0 );
  7294  001FA4  6A09               	clrf	?_writeEEPROM+1,c
  7295  001FA6  0E7A               	movlw	122
  7296  001FA8  6E08               	movwf	?_writeEEPROM,c
  7297  001FAA  0E00               	movlw	0
  7298  001FAC  6A0A               	clrf	?_writeEEPROM+2,c
  7299  001FAE  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7300                           
  7301                           ;main.c: 566: writeEEPROM( 0x43 + 56, 0 );
  7302  001FB2  6A09               	clrf	?_writeEEPROM+1,c
  7303  001FB4  0E7B               	movlw	123
  7304  001FB6  6E08               	movwf	?_writeEEPROM,c
  7305  001FB8  0E00               	movlw	0
  7306  001FBA  6A0A               	clrf	?_writeEEPROM+2,c
  7307  001FBC  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7308                           
  7309                           ;main.c: 567: writeEEPROM( 0x43 + 57, 0 );
  7310  001FC0  6A09               	clrf	?_writeEEPROM+1,c
  7311  001FC2  0E7C               	movlw	124
  7312  001FC4  6E08               	movwf	?_writeEEPROM,c
  7313  001FC6  0E00               	movlw	0
  7314  001FC8  6A0A               	clrf	?_writeEEPROM+2,c
  7315  001FCA  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7316                           
  7317                           ;main.c: 568: writeEEPROM( 0x43 + 58, 0 );
  7318  001FCE  6A09               	clrf	?_writeEEPROM+1,c
  7319  001FD0  0E7D               	movlw	125
  7320  001FD2  6E08               	movwf	?_writeEEPROM,c
  7321  001FD4  0E00               	movlw	0
  7322  001FD6  6A0A               	clrf	?_writeEEPROM+2,c
  7323  001FD8  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7324                           
  7325                           ;main.c: 569: writeEEPROM( 0x43 + 59, 0 );
  7326  001FDC  6A09               	clrf	?_writeEEPROM+1,c
  7327  001FDE  0E7E               	movlw	126
  7328  001FE0  6E08               	movwf	?_writeEEPROM,c
  7329  001FE2  0E00               	movlw	0
  7330  001FE4  6A0A               	clrf	?_writeEEPROM+2,c
  7331  001FE6  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7332                           
  7333                           ;main.c: 570: writeEEPROM( 0x43 + 60, 0 );
  7334  001FEA  6A09               	clrf	?_writeEEPROM+1,c
  7335  001FEC  0E7F               	movlw	127
  7336  001FEE  6E08               	movwf	?_writeEEPROM,c
  7337  001FF0  0E00               	movlw	0
  7338  001FF2  6A0A               	clrf	?_writeEEPROM+2,c
  7339  001FF4  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7340                           
  7341                           ;main.c: 571: writeEEPROM( 0x43 + 61, 0 );
  7342  001FF8  6A09               	clrf	?_writeEEPROM+1,c
  7343  001FFA  0E80               	movlw	128
  7344  001FFC  6E08               	movwf	?_writeEEPROM,c
  7345  001FFE  0E00               	movlw	0
  7346  002000  6A0A               	clrf	?_writeEEPROM+2,c
  7347  002002  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7348                           
  7349                           ;main.c: 572: writeEEPROM( 0x43 + 62, 0 );
  7350  002006  6A09               	clrf	?_writeEEPROM+1,c
  7351  002008  0E81               	movlw	129
  7352  00200A  6E08               	movwf	?_writeEEPROM,c
  7353  00200C  0E00               	movlw	0
  7354  00200E  6A0A               	clrf	?_writeEEPROM+2,c
  7355  002010  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7356                           
  7357                           ;main.c: 573: writeEEPROM( 0x43 + 63, 0 );
  7358  002014  6A09               	clrf	?_writeEEPROM+1,c
  7359  002016  0E82               	movlw	130
  7360  002018  6E08               	movwf	?_writeEEPROM,c
  7361  00201A  0E00               	movlw	0
  7362  00201C  6A0A               	clrf	?_writeEEPROM+2,c
  7363  00201E  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7364                           
  7365                           ;main.c: 574: writeEEPROM( 0x43 + 64, 0 );
  7366  002022  6A09               	clrf	?_writeEEPROM+1,c
  7367  002024  0E83               	movlw	131
  7368  002026  6E08               	movwf	?_writeEEPROM,c
  7369  002028  0E00               	movlw	0
  7370  00202A  6A0A               	clrf	?_writeEEPROM+2,c
  7371  00202C  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7372                           
  7373                           ;main.c: 575: writeEEPROM( 0x43 + 65, 0 );
  7374  002030  6A09               	clrf	?_writeEEPROM+1,c
  7375  002032  0E84               	movlw	132
  7376  002034  6E08               	movwf	?_writeEEPROM,c
  7377  002036  0E00               	movlw	0
  7378  002038  6A0A               	clrf	?_writeEEPROM+2,c
  7379  00203A  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7380                           
  7381                           ;main.c: 579: for ( i = 0; i < 7; i++ ) {
  7382  00203E  6A0D               	clrf	init_app_eeprom@i,c
  7383  002040                     l185:
  7384                           
  7385                           ;main.c: 580: for ( j = 0; j < 8; j++ ) {
  7386  002040  6A0E               	clrf	init_app_eeprom@j,c
  7387  002042                     l4697:
  7388                           
  7389                           ;main.c: 581: writeEEPROM( 0x43 + 72 + i * 8 + j, 0 );
  7390  002042  500E               	movf	init_app_eeprom@j,w,c
  7391  002044  C00D  F00B         	movff	init_app_eeprom@i,??_init_app_eeprom
  7392  002048  6A0C               	clrf	(??_init_app_eeprom+1)& (0+255),c
  7393  00204A  90D8               	bcf	status,0,c
  7394  00204C  360B               	rlcf	??_init_app_eeprom,f,c
  7395  00204E  360C               	rlcf	??_init_app_eeprom+1,f,c
  7396  002050  90D8               	bcf	status,0,c
  7397  002052  360B               	rlcf	??_init_app_eeprom,f,c
  7398  002054  360C               	rlcf	??_init_app_eeprom+1,f,c
  7399  002056  90D8               	bcf	status,0,c
  7400  002058  360B               	rlcf	??_init_app_eeprom,f,c
  7401  00205A  360C               	rlcf	??_init_app_eeprom+1,f,c
  7402  00205C  260B               	addwf	??_init_app_eeprom,f,c
  7403  00205E  0E00               	movlw	0
  7404  002060  220C               	addwfc	??_init_app_eeprom+1,f,c
  7405  002062  0E8B               	movlw	139
  7406  002064  240B               	addwf	??_init_app_eeprom,w,c
  7407  002066  6E08               	movwf	?_writeEEPROM,c
  7408  002068  0E00               	movlw	0
  7409  00206A  200C               	addwfc	??_init_app_eeprom+1,w,c
  7410  00206C  6E09               	movwf	?_writeEEPROM+1,c
  7411  00206E  0E00               	movlw	0
  7412  002070  6A0A               	clrf	?_writeEEPROM+2,c
  7413  002072  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7414  002076  2A0E               	incf	init_app_eeprom@j,f,c
  7415  002078  0E07               	movlw	7
  7416  00207A  640E               	cpfsgt	init_app_eeprom@j,c
  7417  00207C  D7E2               	goto	l4697
  7418  00207E  2A0D               	incf	init_app_eeprom@i,f,c
  7419  002080  0E06               	movlw	6
  7420  002082  640D               	cpfsgt	init_app_eeprom@i,c
  7421  002084  D7DD               	goto	l185
  7422  002086  0C06               	retlw	6
  7423  002088                     __end_of_init_app_eeprom:
  7424                           	opt stack 0
  7425                           tblptru	equ	0xFF8
  7426                           prodh	equ	0xFF4
  7427                           prodl	equ	0xFF3
  7428                           postinc0	equ	0xFEE
  7429                           wreg	equ	0xFE8
  7430                           indf2	equ	0xFDF
  7431                           postinc2	equ	0xFDE
  7432                           postdec2	equ	0xFDD
  7433                           fsr2h	equ	0xFDA
  7434                           fsr2l	equ	0xFD9
  7435                           status	equ	0xFD8
  7436                           
  7437 ;; *************** function _vscp_setUserID *****************
  7438 ;; Defined at:
  7439 ;;		line 2295 in file "../main.c"
  7440 ;; Parameters:    Size  Location     Type
  7441 ;;  idx             1    wreg     unsigned char 
  7442 ;;  data            1   10[COMRAM] unsigned char 
  7443 ;; Auto vars:     Size  Location     Type
  7444 ;;  idx             1   11[COMRAM] unsigned char 
  7445 ;; Return value:  Size  Location     Type
  7446 ;;		None               void
  7447 ;; Registers used:
  7448 ;;		wreg, status,2, status,0, cstack
  7449 ;; Tracked objects:
  7450 ;;		On entry : F/0
  7451 ;;		On exit  : 0/0
  7452 ;;		Unchanged: 0/0
  7453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7454 ;;      Params:         1       0       0       0       0       0       0
  7455 ;;      Locals:         1       0       0       0       0       0       0
  7456 ;;      Temps:          0       0       0       0       0       0       0
  7457 ;;      Totals:         2       0       0       0       0       0       0
  7458 ;;Total ram usage:        2 bytes
  7459 ;; Hardware stack levels used:    1
  7460 ;; Hardware stack levels required when called:    3
  7461 ;; This function calls:
  7462 ;;		_writeEEPROM
  7463 ;; This function is called by:
  7464 ;;		_vscp_writeStdReg
  7465 ;; This function uses a non-reentrant model
  7466 ;;
  7467                           
  7468                           	psect	text21
  7469  0040FA                     __ptext21:
  7470                           	opt stack 0
  7471  0040FA                     _vscp_setUserID:
  7472                           	opt stack 25
  7473                           
  7474                           ;incstack = 0
  7475                           ;incstack = 0
  7476                           ;vscp_setUserID@idx stored from wreg
  7477  0040FA  CFE8 F00C          	movff	wreg,vscp_setUserID@idx
  7478                           
  7479                           ; BSR set to: 0
  7480                           ;main.c: 2296: writeEEPROM( idx + 0x06, data );
  7481  0040FE  0E06               	movlw	6
  7482  004100  240C               	addwf	vscp_setUserID@idx,w,c
  7483  004102  6E08               	movwf	?_writeEEPROM,c
  7484  004104  6A09               	clrf	?_writeEEPROM+1,c
  7485  004106  0E00               	movlw	0
  7486  004108  2209               	addwfc	?_writeEEPROM+1,f,c
  7487  00410A  C00B  F00A         	movff	vscp_setUserID@data,?_writeEEPROM+2
  7488  00410E  EFC7  F01F         	goto	_writeEEPROM	;wreg free
  7489  004112                     __end_of_vscp_setUserID:
  7490                           	opt stack 0
  7491                           tblptru	equ	0xFF8
  7492                           prodh	equ	0xFF4
  7493                           prodl	equ	0xFF3
  7494                           postinc0	equ	0xFEE
  7495                           wreg	equ	0xFE8
  7496                           indf2	equ	0xFDF
  7497                           postinc2	equ	0xFDE
  7498                           postdec2	equ	0xFDD
  7499                           fsr2h	equ	0xFDA
  7500                           fsr2l	equ	0xFD9
  7501                           status	equ	0xFD8
  7502                           
  7503 ;; *************** function _vscp_setManufacturerId *****************
  7504 ;; Defined at:
  7505 ;;		line 820 in file "../main.c"
  7506 ;; Parameters:    Size  Location     Type
  7507 ;;  idx             1    wreg     unsigned char 
  7508 ;;  data            1   10[COMRAM] unsigned char 
  7509 ;; Auto vars:     Size  Location     Type
  7510 ;;  idx             1   11[COMRAM] unsigned char 
  7511 ;; Return value:  Size  Location     Type
  7512 ;;		None               void
  7513 ;; Registers used:
  7514 ;;		wreg, status,2, status,0, cstack
  7515 ;; Tracked objects:
  7516 ;;		On entry : F/0
  7517 ;;		On exit  : 0/0
  7518 ;;		Unchanged: 0/0
  7519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7520 ;;      Params:         1       0       0       0       0       0       0
  7521 ;;      Locals:         1       0       0       0       0       0       0
  7522 ;;      Temps:          0       0       0       0       0       0       0
  7523 ;;      Totals:         2       0       0       0       0       0       0
  7524 ;;Total ram usage:        2 bytes
  7525 ;; Hardware stack levels used:    1
  7526 ;; Hardware stack levels required when called:    3
  7527 ;; This function calls:
  7528 ;;		_writeEEPROM
  7529 ;; This function is called by:
  7530 ;;		_vscp_writeStdReg
  7531 ;; This function uses a non-reentrant model
  7532 ;;
  7533                           
  7534                           	psect	text22
  7535  004040                     __ptext22:
  7536                           	opt stack 0
  7537  004040                     _vscp_setManufacturerId:
  7538                           	opt stack 25
  7539                           
  7540                           ;incstack = 0
  7541                           ;incstack = 0
  7542                           ;vscp_setManufacturerId@idx stored from wreg
  7543  004040  CFE8 F00C          	movff	wreg,vscp_setManufacturerId@idx
  7544                           
  7545                           ; BSR set to: 0
  7546                           ;main.c: 821: if ( idx>7 ) return;
  7547  004044  0E07               	movlw	7
  7548  004046  640C               	cpfsgt	vscp_setManufacturerId@idx,c
  7549  004048  D001               	goto	l5637
  7550  00404A  D00A               	goto	l251
  7551  00404C                     l5637:
  7552                           
  7553                           ; BSR set to: 0
  7554                           ;main.c: 822: writeEEPROM(0x0B + idx, data);
  7555  00404C  0E0B               	movlw	11
  7556  00404E  240C               	addwf	vscp_setManufacturerId@idx,w,c
  7557  004050  6E08               	movwf	?_writeEEPROM,c
  7558  004052  6A09               	clrf	?_writeEEPROM+1,c
  7559  004054  0E00               	movlw	0
  7560  004056  2209               	addwfc	?_writeEEPROM+1,f,c
  7561  004058  C00B  F00A         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
  7562  00405C  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7563  004060                     l251:
  7564  004060  0012               	return	
  7565  004062                     __end_of_vscp_setManufacturerId:
  7566                           	opt stack 0
  7567                           tblptru	equ	0xFF8
  7568                           prodh	equ	0xFF4
  7569                           prodl	equ	0xFF3
  7570                           postinc0	equ	0xFEE
  7571                           wreg	equ	0xFE8
  7572                           indf2	equ	0xFDF
  7573                           postinc2	equ	0xFDE
  7574                           postdec2	equ	0xFDD
  7575                           fsr2h	equ	0xFDA
  7576                           fsr2l	equ	0xFD9
  7577                           status	equ	0xFD8
  7578                           
  7579 ;; *************** function _vscp_setGUID *****************
  7580 ;; Defined at:
  7581 ;;		line 808 in file "../main.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;  idx             1    wreg     unsigned char 
  7584 ;;  data            1   10[COMRAM] unsigned char 
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;  idx             1   11[COMRAM] unsigned char 
  7587 ;; Return value:  Size  Location     Type
  7588 ;;		None               void
  7589 ;; Registers used:
  7590 ;;		wreg, status,2, status,0, cstack
  7591 ;; Tracked objects:
  7592 ;;		On entry : F/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7596 ;;      Params:         1       0       0       0       0       0       0
  7597 ;;      Locals:         1       0       0       0       0       0       0
  7598 ;;      Temps:          0       0       0       0       0       0       0
  7599 ;;      Totals:         2       0       0       0       0       0       0
  7600 ;;Total ram usage:        2 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    3
  7603 ;; This function calls:
  7604 ;;		_writeEEPROM
  7605 ;; This function is called by:
  7606 ;;		_vscp_writeStdReg
  7607 ;; This function uses a non-reentrant model
  7608 ;;
  7609                           
  7610                           	psect	text23
  7611  004062                     __ptext23:
  7612                           	opt stack 0
  7613  004062                     _vscp_setGUID:
  7614                           	opt stack 25
  7615                           
  7616                           ;incstack = 0
  7617                           ;incstack = 0
  7618                           ;vscp_setGUID@idx stored from wreg
  7619  004062  CFE8 F00C          	movff	wreg,vscp_setGUID@idx
  7620                           
  7621                           ; BSR set to: 0
  7622                           ;main.c: 809: if ( idx>15 ) return;
  7623  004066  0E0F               	movlw	15
  7624  004068  640C               	cpfsgt	vscp_setGUID@idx,c
  7625  00406A  D001               	goto	l5631
  7626  00406C  D00A               	goto	l247
  7627  00406E                     l5631:
  7628                           
  7629                           ; BSR set to: 0
  7630                           ;main.c: 810: writeEEPROM(0x13 + idx, data);
  7631  00406E  0E13               	movlw	19
  7632  004070  240C               	addwf	vscp_setGUID@idx,w,c
  7633  004072  6E08               	movwf	?_writeEEPROM,c
  7634  004074  6A09               	clrf	?_writeEEPROM+1,c
  7635  004076  0E00               	movlw	0
  7636  004078  2209               	addwfc	?_writeEEPROM+1,f,c
  7637  00407A  C00B  F00A         	movff	vscp_setGUID@data,?_writeEEPROM+2
  7638  00407E  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7639  004082                     l247:
  7640  004082  0012               	return	
  7641  004084                     __end_of_vscp_setGUID:
  7642                           	opt stack 0
  7643                           tblptru	equ	0xFF8
  7644                           prodh	equ	0xFF4
  7645                           prodl	equ	0xFF3
  7646                           postinc0	equ	0xFEE
  7647                           wreg	equ	0xFE8
  7648                           indf2	equ	0xFDF
  7649                           postinc2	equ	0xFDE
  7650                           postdec2	equ	0xFDD
  7651                           fsr2h	equ	0xFDA
  7652                           fsr2l	equ	0xFD9
  7653                           status	equ	0xFD8
  7654                           
  7655 ;; *************** function _vscp_writeAppReg *****************
  7656 ;; Defined at:
  7657 ;;		line 971 in file "../main.c"
  7658 ;; Parameters:    Size  Location     Type
  7659 ;;  reg             1    wreg     unsigned char 
  7660 ;;  val             1   80[COMRAM] unsigned char 
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;  reg             1   29[BANK0 ] unsigned char 
  7663 ;;  val             1   26[BANK0 ] unsigned char 
  7664 ;;  rv              1   28[BANK0 ] unsigned char 
  7665 ;;  bOn             1   27[BANK0 ] enum E15660
  7666 ;;  bInfoEvent      1   25[BANK0 ] enum E15660
  7667 ;; Return value:  Size  Location     Type
  7668 ;;                  1    wreg      unsigned char 
  7669 ;; Registers used:
  7670 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7671 ;; Tracked objects:
  7672 ;;		On entry : F/0
  7673 ;;		On exit  : F/0
  7674 ;;		Unchanged: 0/0
  7675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7676 ;;      Params:         1       0       0       0       0       0       0
  7677 ;;      Locals:         0       5       0       0       0       0       0
  7678 ;;      Temps:          0       3       0       0       0       0       0
  7679 ;;      Totals:         1       8       0       0       0       0       0
  7680 ;;Total ram usage:        9 bytes
  7681 ;; Hardware stack levels used:    1
  7682 ;; Hardware stack levels required when called:    7
  7683 ;; This function calls:
  7684 ;;		_writeEEPROM
  7685 ;;		_readEEPROM
  7686 ;;		_SendInformationEvent
  7687 ;;		_calculateSetFilterMask
  7688 ;; This function is called by:
  7689 ;;		_vscp_writeRegister
  7690 ;;		_vscp_handleProtocolEvent
  7691 ;; This function uses a non-reentrant model
  7692 ;;
  7693                           
  7694                           	psect	text24
  7695  0008DC                     __ptext24:
  7696                           	opt stack 0
  7697  0008DC                     _vscp_writeAppReg:
  7698                           	opt stack 21
  7699                           
  7700                           ;incstack = 0
  7701                           ;incstack = 0
  7702                           ;vscp_writeAppReg@reg stored from wreg
  7703  0008DC  CFE8 F0CE          	movff	wreg,vscp_writeAppReg@reg
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;main.c: 972: uint8_t rv;
  7707                           ;main.c: 973: BOOL bInfoEvent = 0;
  7708  0008E0  6BCA               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7709                           
  7710                           ;main.c: 974: BOOL bOn = 0;
  7711  0008E2  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  7712                           
  7713                           ; BSR set to: 0
  7714                           ;main.c: 976: rv = ~val;
  7715  0008E4  1C51               	comf	vscp_writeAppReg@val,w,c
  7716  0008E6  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  7717                           
  7718                           ; BSR set to: 0
  7719                           ;main.c: 979: if ( reg == 0 ) {
  7720  0008E8  67CE               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  7721  0008EA  D00E               	goto	l9919
  7722                           
  7723                           ; BSR set to: 0
  7724                           ;main.c: 980: writeEEPROM(0x43 + 0, val);
  7725  0008EC  6A09               	clrf	?_writeEEPROM+1,c
  7726  0008EE  0E43               	movlw	67
  7727  0008F0  6E08               	movwf	?_writeEEPROM,c
  7728  0008F2  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  7729  0008F6  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7730                           
  7731                           ;main.c: 981: rv = readEEPROM(0x43 + 0);
  7732  0008FA  6A09               	clrf	?_readEEPROM+1,c
  7733  0008FC  0E43               	movlw	67
  7734  0008FE  6E08               	movwf	?_readEEPROM,c
  7735  000900  ECEF  F020         	call	_readEEPROM	;wreg free
  7736  000904  EF0A  F009         	goto	L25
  7737  000908                     l9919:
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;main.c: 983: else if ( reg == 1 ) {
  7741  000908  05CE               	decf	vscp_writeAppReg@reg& (0+255),w,b
  7742  00090A  E10E               	bnz	l9923
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;main.c: 985: writeEEPROM(0x43 + 1, val);
  7746  00090C  6A09               	clrf	?_writeEEPROM+1,c
  7747  00090E  0E44               	movlw	68
  7748  000910  6E08               	movwf	?_writeEEPROM,c
  7749  000912  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  7750  000916  ECC7  F01F         	call	_writeEEPROM	;wreg free
  7751                           
  7752                           ;main.c: 986: rv = readEEPROM(0x43 + 1);
  7753  00091A  6A09               	clrf	?_readEEPROM+1,c
  7754  00091C  0E44               	movlw	68
  7755  00091E  6E08               	movwf	?_readEEPROM,c
  7756  000920  ECEF  F020         	call	_readEEPROM	;wreg free
  7757  000924  EF0A  F009         	goto	L25
  7758  000928                     l9923:
  7759                           
  7760                           ; BSR set to: 0
  7761                           ;main.c: 989: else if ( (reg >= 2) && (reg <= 9) ) {
  7762  000928  0E01               	movlw	1
  7763  00092A  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  7764  00092C  D182               	goto	l10075
  7765                           
  7766                           ; BSR set to: 0
  7767  00092E  0E0A               	movlw	10
  7768  000930  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  7769  000932  D17F               	goto	l10075
  7770                           
  7771                           ; BSR set to: 0
  7772                           ;main.c: 991: if ( readEEPROM( 0x43 +
  7773                           ;main.c: 992: 10 + reg - 2 ) &
  7774                           ;main.c: 993: 0x80 ) {
  7775  000934  0E4B               	movlw	75
  7776  000936  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  7777  000938  6E08               	movwf	?_readEEPROM,c
  7778  00093A  6A09               	clrf	?_readEEPROM+1,c
  7779  00093C  0E00               	movlw	0
  7780  00093E  2209               	addwfc	?_readEEPROM+1,f,c
  7781  000940  ECEF  F020         	call	_readEEPROM	;wreg free
  7782  000944  0100               	movlb	0	; () banked
  7783  000946  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  7784  000948  BFC7               	btfsc	??_vscp_writeAppReg& (0+255),7,b
  7785  00094A  D15E               	goto	l10073
  7786  00094C  EF0C  F009         	goto	l10251
  7787  000950                     l9931:
  7788                           
  7789                           ; BSR set to: 0
  7790                           ;main.c: 1000: bInfoEvent = 1;
  7791  000950  0E01               	movlw	1
  7792  000952  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7793                           
  7794                           ; BSR set to: 0
  7795                           ;main.c: 1002: if ( 1 == val ) {
  7796  000954  0451               	decf	vscp_writeAppReg@val,w,c
  7797  000956  E128               	bnz	l304
  7798                           
  7799                           ; BSR set to: 0
  7800                           ;main.c: 1004: LATBbits.LATB4 = 1;
  7801  000958  888A               	bsf	3978,4,c	;volatile
  7802                           
  7803                           ; BSR set to: 0
  7804                           ;main.c: 1005: rv = LATBbits.LATB4;
  7805  00095A  0E00               	movlw	0
  7806  00095C  B88A               	btfsc	3978,4,c	;volatile
  7807  00095E  0E01               	movlw	1
  7808  000960  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  7809                           
  7810                           ; BSR set to: 0
  7811                           ;main.c: 1006: bOn = 1;
  7812  000962  0E01               	movlw	1
  7813  000964  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  7814                           
  7815                           ; BSR set to: 0
  7816                           ;main.c: 1009: if ( readEEPROM( 0x43 + 10 ) & 0x04 ) {
  7817  000966  6A09               	clrf	?_readEEPROM+1,c
  7818  000968  0E4D               	movlw	77
  7819  00096A  6E08               	movwf	?_readEEPROM,c
  7820  00096C  ECEF  F020         	call	_readEEPROM	;wreg free
  7821  000970  0100               	movlb	0	; () banked
  7822  000972  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  7823  000974  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  7824  000976  EF0C  F009         	goto	l10251
  7825  00097A                     l9943:
  7826                           
  7827                           ; BSR set to: 0
  7828                           ;main.c: 1010: relay_protection_timer[ 0 ] =
  7829                           ;main.c: 1011: readEEPROM( 0x43 + 34 ) * 256 +
  7830                           ;main.c: 1012: readEEPROM( 0x43 + 35 );
  7831  00097A  6A09               	clrf	?_readEEPROM+1,c
  7832  00097C  0E66               	movlw	102
  7833  00097E  6E08               	movwf	?_readEEPROM,c
  7834  000980  ECEF  F020         	call	_readEEPROM	;wreg free
  7835  000984  0100               	movlb	0	; () banked
  7836  000986  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  7837  000988  6A09               	clrf	?_readEEPROM+1,c
  7838  00098A  0E65               	movlw	101
  7839  00098C  6E08               	movwf	?_readEEPROM,c
  7840  00098E  ECEF  F020         	call	_readEEPROM	;wreg free
  7841  000992  0100               	movlb	0	; () banked
  7842  000994  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  7843  000996  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  7844  000998  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  7845  00099A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  7846  00099C  6F60               	movwf	_relay_protection_timer& (0+255),b
  7847  00099E  0E00               	movlw	0
  7848  0009A0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  7849  0009A2  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  7850  0009A4  EF0C  F009         	goto	l10251
  7851  0009A8                     l304:
  7852                           
  7853                           ; BSR set to: 0
  7854                           ;main.c: 1016: else if (0 == val) {
  7855  0009A8  6651               	tstfsz	vscp_writeAppReg@val,c
  7856  0009AA  EF0C  F009         	goto	l10251
  7857                           
  7858                           ; BSR set to: 0
  7859                           ;main.c: 1017: LATBbits.LATB4 = 0;
  7860  0009AE  988A               	bcf	3978,4,c	;volatile
  7861                           
  7862                           ; BSR set to: 0
  7863                           ;main.c: 1018: rv = LATBbits.LATB4;
  7864  0009B0  0E00               	movlw	0
  7865  0009B2  B88A               	btfsc	3978,4,c	;volatile
  7866  0009B4  0E01               	movlw	1
  7867  0009B6  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  7868  0009B8                     l9949:
  7869                           
  7870                           ; BSR set to: 0
  7871                           ;main.c: 1019: bOn = 0;
  7872  0009B8  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  7873  0009BA  EF0C  F009         	goto	l10251
  7874  0009BE                     l9951:
  7875                           
  7876                           ; BSR set to: 0
  7877                           ;main.c: 1026: bInfoEvent = 1;
  7878  0009BE  0E01               	movlw	1
  7879  0009C0  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7880                           
  7881                           ; BSR set to: 0
  7882                           ;main.c: 1028: if (1 == val) {
  7883  0009C2  0451               	decf	vscp_writeAppReg@val,w,c
  7884  0009C4  E11E               	bnz	l310
  7885                           
  7886                           ; BSR set to: 0
  7887                           ;main.c: 1030: LATBbits.LATB1 = 1;
  7888  0009C6  828A               	bsf	3978,1,c	;volatile
  7889                           
  7890                           ; BSR set to: 0
  7891                           ;main.c: 1031: rv = LATBbits.LATB1;
  7892  0009C8  0E00               	movlw	0
  7893  0009CA  B28A               	btfsc	3978,1,c	;volatile
  7894  0009CC  0E01               	movlw	1
  7895  0009CE  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  7896                           
  7897                           ; BSR set to: 0
  7898                           ;main.c: 1032: bOn = 1;
  7899  0009D0  0E01               	movlw	1
  7900  0009D2  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  7901                           
  7902                           ; BSR set to: 0
  7903                           ;main.c: 1034: if (readEEPROM(0x43 + 11) & 0x04) {
  7904  0009D4  6A09               	clrf	?_readEEPROM+1,c
  7905  0009D6  0E4E               	movlw	78
  7906  0009D8  6E08               	movwf	?_readEEPROM,c
  7907  0009DA  ECEF  F020         	call	_readEEPROM	;wreg free
  7908  0009DE  0100               	movlb	0	; () banked
  7909  0009E0  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  7910  0009E2  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  7911  0009E4  EF0C  F009         	goto	l10251
  7912  0009E8                     l9963:
  7913                           
  7914                           ; BSR set to: 0
  7915                           ;main.c: 1035: relay_protection_timer[ 1 ] =
  7916                           ;main.c: 1036: readEEPROM(0x43 + 36) * 256 +
  7917                           ;main.c: 1037: readEEPROM(0x43 + 37);
  7918  0009E8  6A09               	clrf	?_readEEPROM+1,c
  7919  0009EA  0E68               	movlw	104
  7920  0009EC  6E08               	movwf	?_readEEPROM,c
  7921  0009EE  ECEF  F020         	call	_readEEPROM	;wreg free
  7922  0009F2  0100               	movlb	0	; () banked
  7923  0009F4  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  7924  0009F6  6A09               	clrf	?_readEEPROM+1,c
  7925  0009F8  0E67               	movlw	103
  7926  0009FA  6E08               	movwf	?_readEEPROM,c
  7927  0009FC  ECEF  F020         	call	_readEEPROM	;wreg free
  7928  000A00  D18E               	goto	L26
  7929  000A02                     l310:
  7930                           
  7931                           ; BSR set to: 0
  7932                           ;main.c: 1041: else if (0 == val) {
  7933  000A02  6651               	tstfsz	vscp_writeAppReg@val,c
  7934  000A04  EF0C  F009         	goto	l10251
  7935                           
  7936                           ; BSR set to: 0
  7937                           ;main.c: 1042: LATBbits.LATB1 = 0;
  7938  000A08  928A               	bcf	3978,1,c	;volatile
  7939                           
  7940                           ; BSR set to: 0
  7941                           ;main.c: 1043: rv = LATBbits.LATB1;
  7942  000A0A  0E00               	movlw	0
  7943  000A0C  B28A               	btfsc	3978,1,c	;volatile
  7944  000A0E  0E01               	movlw	1
  7945  000A10  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  7946  000A12  D7D2               	goto	l9949
  7947  000A14                     l9971:
  7948                           
  7949                           ; BSR set to: 0
  7950                           ;main.c: 1051: bInfoEvent = 1;
  7951  000A14  0E01               	movlw	1
  7952  000A16  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7953                           
  7954                           ; BSR set to: 0
  7955                           ;main.c: 1053: if (1 == val) {
  7956  000A18  0451               	decf	vscp_writeAppReg@val,w,c
  7957  000A1A  E126               	bnz	l315
  7958                           
  7959                           ; BSR set to: 0
  7960                           ;main.c: 1055: LATBbits.LATB0 = 1;
  7961  000A1C  808A               	bsf	3978,0,c	;volatile
  7962                           
  7963                           ; BSR set to: 0
  7964                           ;main.c: 1056: rv = LATBbits.LATB0;
  7965  000A1E  0E00               	movlw	0
  7966  000A20  B08A               	btfsc	3978,0,c	;volatile
  7967  000A22  0E01               	movlw	1
  7968  000A24  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  7969                           
  7970                           ; BSR set to: 0
  7971                           ;main.c: 1057: bOn = 1;
  7972  000A26  0E01               	movlw	1
  7973  000A28  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  7974                           
  7975                           ; BSR set to: 0
  7976                           ;main.c: 1059: if ( readEEPROM(0x43 + 12) & 0x04) {
  7977  000A2A  6A09               	clrf	?_readEEPROM+1,c
  7978  000A2C  0E4F               	movlw	79
  7979  000A2E  6E08               	movwf	?_readEEPROM,c
  7980  000A30  ECEF  F020         	call	_readEEPROM	;wreg free
  7981  000A34  0100               	movlb	0	; () banked
  7982  000A36  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  7983  000A38  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  7984  000A3A  D3EE               	goto	l10251
  7985  000A3C                     l9983:
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;main.c: 1060: relay_protection_timer[ 2 ] =
  7989                           ;main.c: 1061: readEEPROM(0x43 + 38) * 256 +
  7990                           ;main.c: 1062: readEEPROM(0x43 + 39);
  7991  000A3C  6A09               	clrf	?_readEEPROM+1,c
  7992  000A3E  0E6A               	movlw	106
  7993  000A40  6E08               	movwf	?_readEEPROM,c
  7994  000A42  ECEF  F020         	call	_readEEPROM	;wreg free
  7995  000A46  0100               	movlb	0	; () banked
  7996  000A48  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  7997  000A4A  6A09               	clrf	?_readEEPROM+1,c
  7998  000A4C  0E69               	movlw	105
  7999  000A4E  6E08               	movwf	?_readEEPROM,c
  8000  000A50  ECEF  F020         	call	_readEEPROM	;wreg free
  8001  000A54  0100               	movlb	0	; () banked
  8002  000A56  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8003  000A58  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8004  000A5A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8005  000A5C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8006  000A5E  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  8007  000A60  0E00               	movlw	0
  8008  000A62  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8009  000A64  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  8010  000A66  D3D8               	goto	l10251
  8011  000A68                     l315:
  8012                           
  8013                           ; BSR set to: 0
  8014                           ;main.c: 1066: else if (0 == val) {
  8015  000A68  6651               	tstfsz	vscp_writeAppReg@val,c
  8016  000A6A  D3D6               	goto	l10251
  8017                           
  8018                           ; BSR set to: 0
  8019                           ;main.c: 1067: LATBbits.LATB0 = 0;
  8020  000A6C  908A               	bcf	3978,0,c	;volatile
  8021                           
  8022                           ; BSR set to: 0
  8023                           ;main.c: 1068: rv = LATBbits.LATB0;
  8024  000A6E  0E00               	movlw	0
  8025  000A70  B08A               	btfsc	3978,0,c	;volatile
  8026  000A72  0E01               	movlw	1
  8027  000A74  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8028  000A76  D7A0               	goto	l9949
  8029  000A78                     l9991:
  8030                           
  8031                           ; BSR set to: 0
  8032                           ;main.c: 1077: bInfoEvent = 1;
  8033  000A78  0E01               	movlw	1
  8034  000A7A  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;main.c: 1079: if (1 == val) {
  8038  000A7C  0451               	decf	vscp_writeAppReg@val,w,c
  8039  000A7E  E126               	bnz	l320
  8040                           
  8041                           ; BSR set to: 0
  8042                           ;main.c: 1081: LATCbits.LATC7 = 1;
  8043  000A80  8E8B               	bsf	3979,7,c	;volatile
  8044                           
  8045                           ; BSR set to: 0
  8046                           ;main.c: 1082: rv = LATCbits.LATC7;
  8047  000A82  0E00               	movlw	0
  8048  000A84  BE8B               	btfsc	3979,7,c	;volatile
  8049  000A86  0E01               	movlw	1
  8050  000A88  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8051                           
  8052                           ; BSR set to: 0
  8053                           ;main.c: 1083: bOn = 1;
  8054  000A8A  0E01               	movlw	1
  8055  000A8C  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8056                           
  8057                           ; BSR set to: 0
  8058                           ;main.c: 1085: if (readEEPROM(0x43 + 13) & 0x04) {
  8059  000A8E  6A09               	clrf	?_readEEPROM+1,c
  8060  000A90  0E50               	movlw	80
  8061  000A92  6E08               	movwf	?_readEEPROM,c
  8062  000A94  ECEF  F020         	call	_readEEPROM	;wreg free
  8063  000A98  0100               	movlb	0	; () banked
  8064  000A9A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8065  000A9C  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8066  000A9E  D3BC               	goto	l10251
  8067  000AA0                     l10003:
  8068                           
  8069                           ; BSR set to: 0
  8070                           ;main.c: 1086: relay_protection_timer[ 3 ] =
  8071                           ;main.c: 1087: readEEPROM(0x43 + 40) * 256 +
  8072                           ;main.c: 1088: readEEPROM(0x43 + 41);
  8073  000AA0  6A09               	clrf	?_readEEPROM+1,c
  8074  000AA2  0E6C               	movlw	108
  8075  000AA4  6E08               	movwf	?_readEEPROM,c
  8076  000AA6  ECEF  F020         	call	_readEEPROM	;wreg free
  8077  000AAA  0100               	movlb	0	; () banked
  8078  000AAC  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8079  000AAE  6A09               	clrf	?_readEEPROM+1,c
  8080  000AB0  0E6B               	movlw	107
  8081  000AB2  6E08               	movwf	?_readEEPROM,c
  8082  000AB4  ECEF  F020         	call	_readEEPROM	;wreg free
  8083  000AB8  0100               	movlb	0	; () banked
  8084  000ABA  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8085  000ABC  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8086  000ABE  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8087  000AC0  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8088  000AC2  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  8089  000AC4  0E00               	movlw	0
  8090  000AC6  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8091  000AC8  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  8092  000ACA  D3A6               	goto	l10251
  8093  000ACC                     l320:
  8094                           
  8095                           ; BSR set to: 0
  8096                           ;main.c: 1092: else if (0 == val) {
  8097  000ACC  6651               	tstfsz	vscp_writeAppReg@val,c
  8098  000ACE  D3A4               	goto	l10251
  8099                           
  8100                           ; BSR set to: 0
  8101                           ;main.c: 1093: LATCbits.LATC7 = 0;
  8102  000AD0  9E8B               	bcf	3979,7,c	;volatile
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;main.c: 1094: rv = LATCbits.LATC7;
  8106  000AD2  0E00               	movlw	0
  8107  000AD4  BE8B               	btfsc	3979,7,c	;volatile
  8108  000AD6  0E01               	movlw	1
  8109  000AD8  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8110  000ADA  D76E               	goto	l9949
  8111  000ADC                     l10011:
  8112                           
  8113                           ; BSR set to: 0
  8114                           ;main.c: 1103: bInfoEvent = 1;
  8115  000ADC  0E01               	movlw	1
  8116  000ADE  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8117                           
  8118                           ; BSR set to: 0
  8119                           ;main.c: 1105: if (1 == val) {
  8120  000AE0  0451               	decf	vscp_writeAppReg@val,w,c
  8121  000AE2  E126               	bnz	l325
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;main.c: 1107: LATCbits.LATC6 = 1;
  8125  000AE4  8C8B               	bsf	3979,6,c	;volatile
  8126                           
  8127                           ; BSR set to: 0
  8128                           ;main.c: 1108: rv = LATCbits.LATC6;
  8129  000AE6  0E00               	movlw	0
  8130  000AE8  BC8B               	btfsc	3979,6,c	;volatile
  8131  000AEA  0E01               	movlw	1
  8132  000AEC  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;main.c: 1109: bOn = 1;
  8136  000AEE  0E01               	movlw	1
  8137  000AF0  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8138                           
  8139                           ; BSR set to: 0
  8140                           ;main.c: 1111: if (readEEPROM(0x43 + 14) & 0x04) {
  8141  000AF2  6A09               	clrf	?_readEEPROM+1,c
  8142  000AF4  0E51               	movlw	81
  8143  000AF6  6E08               	movwf	?_readEEPROM,c
  8144  000AF8  ECEF  F020         	call	_readEEPROM	;wreg free
  8145  000AFC  0100               	movlb	0	; () banked
  8146  000AFE  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8147  000B00  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8148  000B02  D38A               	goto	l10251
  8149  000B04                     l10023:
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;main.c: 1112: relay_protection_timer[ 4 ] =
  8153                           ;main.c: 1113: readEEPROM(0x43 + 42) * 256 +
  8154                           ;main.c: 1114: readEEPROM(0x43 + 43);
  8155  000B04  6A09               	clrf	?_readEEPROM+1,c
  8156  000B06  0E6E               	movlw	110
  8157  000B08  6E08               	movwf	?_readEEPROM,c
  8158  000B0A  ECEF  F020         	call	_readEEPROM	;wreg free
  8159  000B0E  0100               	movlb	0	; () banked
  8160  000B10  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8161  000B12  6A09               	clrf	?_readEEPROM+1,c
  8162  000B14  0E6D               	movlw	109
  8163  000B16  6E08               	movwf	?_readEEPROM,c
  8164  000B18  ECEF  F020         	call	_readEEPROM	;wreg free
  8165  000B1C  0100               	movlb	0	; () banked
  8166  000B1E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8167  000B20  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8168  000B22  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8169  000B24  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8170  000B26  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  8171  000B28  0E00               	movlw	0
  8172  000B2A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8173  000B2C  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  8174  000B2E  D374               	goto	l10251
  8175  000B30                     l325:
  8176                           
  8177                           ; BSR set to: 0
  8178                           ;main.c: 1118: else if (0 == val) {
  8179  000B30  6651               	tstfsz	vscp_writeAppReg@val,c
  8180  000B32  D372               	goto	l10251
  8181                           
  8182                           ; BSR set to: 0
  8183                           ;main.c: 1119: LATCbits.LATC6 = 0;
  8184  000B34  9C8B               	bcf	3979,6,c	;volatile
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;main.c: 1120: rv = LATCbits.LATC6;
  8188  000B36  0E00               	movlw	0
  8189  000B38  BC8B               	btfsc	3979,6,c	;volatile
  8190  000B3A  0E01               	movlw	1
  8191  000B3C  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8192  000B3E  D73C               	goto	l9949
  8193  000B40                     l10031:
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;main.c: 1129: bInfoEvent = 1;
  8197  000B40  0E01               	movlw	1
  8198  000B42  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8199                           
  8200                           ; BSR set to: 0
  8201                           ;main.c: 1131: if (1 == val) {
  8202  000B44  0451               	decf	vscp_writeAppReg@val,w,c
  8203  000B46  E126               	bnz	l330
  8204                           
  8205                           ; BSR set to: 0
  8206                           ;main.c: 1133: LATCbits.LATC5 = 1;
  8207  000B48  8A8B               	bsf	3979,5,c	;volatile
  8208                           
  8209                           ; BSR set to: 0
  8210                           ;main.c: 1134: rv = LATCbits.LATC5;
  8211  000B4A  0E00               	movlw	0
  8212  000B4C  BA8B               	btfsc	3979,5,c	;volatile
  8213  000B4E  0E01               	movlw	1
  8214  000B50  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8215                           
  8216                           ; BSR set to: 0
  8217                           ;main.c: 1135: bOn = 1;
  8218  000B52  0E01               	movlw	1
  8219  000B54  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8220                           
  8221                           ; BSR set to: 0
  8222                           ;main.c: 1137: if (readEEPROM(0x43 + 15) & 0x04) {
  8223  000B56  6A09               	clrf	?_readEEPROM+1,c
  8224  000B58  0E52               	movlw	82
  8225  000B5A  6E08               	movwf	?_readEEPROM,c
  8226  000B5C  ECEF  F020         	call	_readEEPROM	;wreg free
  8227  000B60  0100               	movlb	0	; () banked
  8228  000B62  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8229  000B64  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8230  000B66  D358               	goto	l10251
  8231  000B68                     l10043:
  8232                           
  8233                           ; BSR set to: 0
  8234                           ;main.c: 1138: relay_protection_timer[ 5 ] =
  8235                           ;main.c: 1139: readEEPROM(0x43 + 44) * 256 +
  8236                           ;main.c: 1140: readEEPROM(0x43 + 45);
  8237  000B68  6A09               	clrf	?_readEEPROM+1,c
  8238  000B6A  0E70               	movlw	112
  8239  000B6C  6E08               	movwf	?_readEEPROM,c
  8240  000B6E  ECEF  F020         	call	_readEEPROM	;wreg free
  8241  000B72  0100               	movlb	0	; () banked
  8242  000B74  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8243  000B76  6A09               	clrf	?_readEEPROM+1,c
  8244  000B78  0E6F               	movlw	111
  8245  000B7A  6E08               	movwf	?_readEEPROM,c
  8246  000B7C  ECEF  F020         	call	_readEEPROM	;wreg free
  8247  000B80  0100               	movlb	0	; () banked
  8248  000B82  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8249  000B84  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8250  000B86  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8251  000B88  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8252  000B8A  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  8253  000B8C  0E00               	movlw	0
  8254  000B8E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8255  000B90  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  8256  000B92  D342               	goto	l10251
  8257  000B94                     l330:
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;main.c: 1144: else if (0 == val) {
  8261  000B94  6651               	tstfsz	vscp_writeAppReg@val,c
  8262  000B96  D340               	goto	l10251
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;main.c: 1145: LATCbits.LATC5 = 0;
  8266  000B98  9A8B               	bcf	3979,5,c	;volatile
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;main.c: 1146: rv = LATCbits.LATC5;
  8270  000B9A  0E00               	movlw	0
  8271  000B9C  BA8B               	btfsc	3979,5,c	;volatile
  8272  000B9E  0E01               	movlw	1
  8273  000BA0  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8274  000BA2  D70A               	goto	l9949
  8275  000BA4                     l10051:
  8276                           
  8277                           ; BSR set to: 0
  8278                           ;main.c: 1154: bInfoEvent = 1;
  8279  000BA4  0E01               	movlw	1
  8280  000BA6  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;main.c: 1156: if (1 == val) {
  8284  000BA8  0451               	decf	vscp_writeAppReg@val,w,c
  8285  000BAA  E126               	bnz	l335
  8286                           
  8287                           ; BSR set to: 0
  8288                           ;main.c: 1158: LATCbits.LATC4 = 1;
  8289  000BAC  888B               	bsf	3979,4,c	;volatile
  8290                           
  8291                           ; BSR set to: 0
  8292                           ;main.c: 1159: rv = LATCbits.LATC4;
  8293  000BAE  0E00               	movlw	0
  8294  000BB0  B88B               	btfsc	3979,4,c	;volatile
  8295  000BB2  0E01               	movlw	1
  8296  000BB4  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8297                           
  8298                           ; BSR set to: 0
  8299                           ;main.c: 1160: bOn = 1;
  8300  000BB6  0E01               	movlw	1
  8301  000BB8  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8302                           
  8303                           ; BSR set to: 0
  8304                           ;main.c: 1162: if (readEEPROM(0x43 + 16) & 0x04) {
  8305  000BBA  6A09               	clrf	?_readEEPROM+1,c
  8306  000BBC  0E53               	movlw	83
  8307  000BBE  6E08               	movwf	?_readEEPROM,c
  8308  000BC0  ECEF  F020         	call	_readEEPROM	;wreg free
  8309  000BC4  0100               	movlb	0	; () banked
  8310  000BC6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8311  000BC8  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8312  000BCA  D326               	goto	l10251
  8313  000BCC                     l10063:
  8314                           
  8315                           ; BSR set to: 0
  8316                           ;main.c: 1163: relay_protection_timer[ 6 ] =
  8317                           ;main.c: 1164: readEEPROM(0x43 + 46) * 256 +
  8318                           ;main.c: 1165: readEEPROM(0x43 + 47);
  8319  000BCC  6A09               	clrf	?_readEEPROM+1,c
  8320  000BCE  0E72               	movlw	114
  8321  000BD0  6E08               	movwf	?_readEEPROM,c
  8322  000BD2  ECEF  F020         	call	_readEEPROM	;wreg free
  8323  000BD6  0100               	movlb	0	; () banked
  8324  000BD8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8325  000BDA  6A09               	clrf	?_readEEPROM+1,c
  8326  000BDC  0E71               	movlw	113
  8327  000BDE  6E08               	movwf	?_readEEPROM,c
  8328  000BE0  ECEF  F020         	call	_readEEPROM	;wreg free
  8329  000BE4  0100               	movlb	0	; () banked
  8330  000BE6  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8331  000BE8  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8332  000BEA  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8333  000BEC  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8334  000BEE  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  8335  000BF0  0E00               	movlw	0
  8336  000BF2  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8337  000BF4  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  8338  000BF6  D310               	goto	l10251
  8339  000BF8                     l335:
  8340                           
  8341                           ; BSR set to: 0
  8342                           ;main.c: 1169: else if (0 == val) {
  8343  000BF8  6651               	tstfsz	vscp_writeAppReg@val,c
  8344  000BFA  D30E               	goto	l10251
  8345                           
  8346                           ; BSR set to: 0
  8347                           ;main.c: 1170: LATCbits.LATC4 = 0;
  8348  000BFC  988B               	bcf	3979,4,c	;volatile
  8349                           
  8350                           ; BSR set to: 0
  8351                           ;main.c: 1171: rv = LATCbits.LATC4;
  8352  000BFE  0E00               	movlw	0
  8353  000C00  B88B               	btfsc	3979,4,c	;volatile
  8354  000C02  0E01               	movlw	1
  8355  000C04  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8356  000C06  D6D8               	goto	l9949
  8357  000C08                     l10073:
  8358                           
  8359                           ; BSR set to: 0
  8360  000C08  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8361                           
  8362                           ; Switch size 1, requested type "speed"
  8363                           ; Number of cases is 7, Range of values is 2 to 8
  8364                           ; switch strategies available:
  8365                           ; Name         Instructions Cycles
  8366                           ; simple_byte           22    12 (average)
  8367                           ;	Chosen strategy is simple_byte
  8368  000C0A  0A02               	xorlw	2	; case 2
  8369  000C0C  E101 D6A0          	bz	l9931
  8370  000C10  0A01               	xorlw	1	; case 3
  8371  000C12  E101 D6D4          	bz	l9951
  8372  000C16  0A07               	xorlw	7	; case 4
  8373  000C18  E101 D6FC          	bz	l9971
  8374  000C1C  0A01               	xorlw	1	; case 5
  8375  000C1E  E101 D72B          	bz	l9991
  8376  000C22  0A03               	xorlw	3	; case 6
  8377  000C24  E101 D75A          	bz	l10011
  8378  000C28  0A01               	xorlw	1	; case 7
  8379  000C2A  E08A               	bz	l10031
  8380  000C2C  0A0F               	xorlw	15	; case 8
  8381  000C2E  E0BA               	bz	l10051
  8382                           
  8383                           ; BSR set to: 0
  8384                           ;main.c: 1177: }
  8385                           ;main.c: 1178: }
  8386  000C30  D2F3               	goto	l10251
  8387  000C32                     l10075:
  8388                           
  8389                           ; BSR set to: 0
  8390                           ;main.c: 1181: else if ( (reg >= 10 ) &&
  8391                           ;main.c: 1182: (reg <= 17) ) {
  8392  000C32  0E09               	movlw	9
  8393  000C34  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8394  000C36  D18C               	goto	l10183
  8395                           
  8396                           ; BSR set to: 0
  8397  000C38  0E12               	movlw	18
  8398  000C3A  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8399  000C3C  D189               	goto	l10183
  8400  000C3E  D173               	goto	l10181
  8401  000C40                     l10081:
  8402                           
  8403                           ; BSR set to: 0
  8404                           ;main.c: 1188: writeEEPROM( 0x43 + reg, val );
  8405  000C40  0E43               	movlw	67
  8406  000C42  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8407  000C44  6E08               	movwf	?_writeEEPROM,c
  8408  000C46  6A09               	clrf	?_writeEEPROM+1,c
  8409  000C48  0E00               	movlw	0
  8410  000C4A  2209               	addwfc	?_writeEEPROM+1,f,c
  8411  000C4C  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8412  000C50  ECC7  F01F         	call	_writeEEPROM	;wreg free
  8413                           
  8414                           ;main.c: 1189: rv = readEEPROM( 0x43 + reg );
  8415  000C54  0E43               	movlw	67
  8416  000C56  0100               	movlb	0	; () banked
  8417  000C58  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8418  000C5A  6E08               	movwf	?_readEEPROM,c
  8419  000C5C  6A09               	clrf	?_readEEPROM+1,c
  8420  000C5E  0E00               	movlw	0
  8421  000C60  2209               	addwfc	?_readEEPROM+1,f,c
  8422  000C62  ECEF  F020         	call	_readEEPROM	;wreg free
  8423  000C66  0100               	movlb	0	; () banked
  8424  000C68  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8425                           
  8426                           ; BSR set to: 0
  8427                           ;main.c: 1191: if ( val & 0x01 ) {
  8428  000C6A  A051               	btfss	vscp_writeAppReg@val,0,c
  8429  000C6C  D018               	goto	l10091
  8430                           
  8431                           ; BSR set to: 0
  8432                           ;main.c: 1193: LATBbits.LATB4 = 0;
  8433  000C6E  988A               	bcf	3978,4,c	;volatile
  8434                           
  8435                           ;main.c: 1194: bOn = 0;
  8436  000C70  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;main.c: 1196: relay_pulse_flags |= 0x01;
  8440  000C72  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;main.c: 1197: relay_pulse_timer[ 0 ] =
  8444                           ;main.c: 1198: readEEPROM( 0x43 + 18 ) * 256 +
  8445                           ;main.c: 1199: readEEPROM( 0x43 + 19 );
  8446  000C74  6A09               	clrf	?_readEEPROM+1,c
  8447  000C76  0E56               	movlw	86
  8448  000C78  6E08               	movwf	?_readEEPROM,c
  8449  000C7A  ECEF  F020         	call	_readEEPROM	;wreg free
  8450  000C7E  0100               	movlb	0	; () banked
  8451  000C80  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8452  000C82  6A09               	clrf	?_readEEPROM+1,c
  8453  000C84  0E55               	movlw	85
  8454  000C86  6E08               	movwf	?_readEEPROM,c
  8455  000C88  ECEF  F020         	call	_readEEPROM	;wreg free
  8456  000C8C  0100               	movlb	0	; () banked
  8457  000C8E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8458  000C90  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8459  000C92  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8460  000C94  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8461  000C96  6F70               	movwf	_relay_pulse_timer& (0+255),b
  8462  000C98  0E00               	movlw	0
  8463  000C9A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8464  000C9C  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  8465  000C9E                     l10091:
  8466                           
  8467                           ; BSR set to: 0
  8468                           ;main.c: 1200: }
  8469                           ;main.c: 1202: if ( val & 0x04 ) {
  8470  000C9E  B451               	btfsc	vscp_writeAppReg@val,2,c
  8471  000CA0  D66C               	goto	l9943
  8472  000CA2  D2BA               	goto	l10251
  8473  000CA4                     l10095:
  8474                           
  8475                           ; BSR set to: 0
  8476                           ;main.c: 1211: writeEEPROM( 0x43 + reg, val );
  8477  000CA4  0E43               	movlw	67
  8478  000CA6  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8479  000CA8  6E08               	movwf	?_writeEEPROM,c
  8480  000CAA  6A09               	clrf	?_writeEEPROM+1,c
  8481  000CAC  0E00               	movlw	0
  8482  000CAE  2209               	addwfc	?_writeEEPROM+1,f,c
  8483  000CB0  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8484  000CB4  ECC7  F01F         	call	_writeEEPROM	;wreg free
  8485                           
  8486                           ;main.c: 1212: rv = readEEPROM( 0x43 + reg );
  8487  000CB8  0E43               	movlw	67
  8488  000CBA  0100               	movlb	0	; () banked
  8489  000CBC  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8490  000CBE  6E08               	movwf	?_readEEPROM,c
  8491  000CC0  6A09               	clrf	?_readEEPROM+1,c
  8492  000CC2  0E00               	movlw	0
  8493  000CC4  2209               	addwfc	?_readEEPROM+1,f,c
  8494  000CC6  ECEF  F020         	call	_readEEPROM	;wreg free
  8495  000CCA  0100               	movlb	0	; () banked
  8496  000CCC  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8497                           
  8498                           ; BSR set to: 0
  8499                           ;main.c: 1214: if ( val & 0x01 ) {
  8500  000CCE  A051               	btfss	vscp_writeAppReg@val,0,c
  8501  000CD0  D018               	goto	l10105
  8502                           
  8503                           ; BSR set to: 0
  8504                           ;main.c: 1216: LATBbits.LATB1 = 0;
  8505  000CD2  928A               	bcf	3978,1,c	;volatile
  8506                           
  8507                           ;main.c: 1217: bOn = 0;
  8508  000CD4  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;main.c: 1219: relay_pulse_flags |= 0x02;
  8512  000CD6  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;main.c: 1220: relay_pulse_timer[ 1 ] =
  8516                           ;main.c: 1221: readEEPROM( 0x43 + 18) * 256 +
  8517                           ;main.c: 1222: readEEPROM( 0x43 + 19);
  8518  000CD8  6A09               	clrf	?_readEEPROM+1,c
  8519  000CDA  0E56               	movlw	86
  8520  000CDC  6E08               	movwf	?_readEEPROM,c
  8521  000CDE  ECEF  F020         	call	_readEEPROM	;wreg free
  8522  000CE2  0100               	movlb	0	; () banked
  8523  000CE4  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8524  000CE6  6A09               	clrf	?_readEEPROM+1,c
  8525  000CE8  0E55               	movlw	85
  8526  000CEA  6E08               	movwf	?_readEEPROM,c
  8527  000CEC  ECEF  F020         	call	_readEEPROM	;wreg free
  8528  000CF0  0100               	movlb	0	; () banked
  8529  000CF2  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8530  000CF4  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8531  000CF6  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8532  000CF8  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8533  000CFA  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  8534  000CFC  0E00               	movlw	0
  8535  000CFE  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8536  000D00  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  8537  000D02                     l10105:
  8538                           
  8539                           ; BSR set to: 0
  8540                           ;main.c: 1223: }
  8541                           ;main.c: 1225: if ( val & 0x04 ) {
  8542  000D02  A451               	btfss	vscp_writeAppReg@val,2,c
  8543  000D04  D289               	goto	l10251
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;main.c: 1226: relay_protection_timer[ 1 ] =
  8547                           ;main.c: 1227: readEEPROM( 0x43 + 34 ) * 256 +
  8548                           ;main.c: 1228: readEEPROM( 0x43 + 35 );
  8549  000D06  6A09               	clrf	?_readEEPROM+1,c
  8550  000D08  0E66               	movlw	102
  8551  000D0A  6E08               	movwf	?_readEEPROM,c
  8552  000D0C  ECEF  F020         	call	_readEEPROM	;wreg free
  8553  000D10  0100               	movlb	0	; () banked
  8554  000D12  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8555  000D14  6A09               	clrf	?_readEEPROM+1,c
  8556  000D16  0E65               	movlw	101
  8557  000D18  6E08               	movwf	?_readEEPROM,c
  8558  000D1A  ECEF  F020         	call	_readEEPROM	;wreg free
  8559  000D1E                     L26:
  8560  000D1E  0100               	movlb	0	; () banked
  8561  000D20  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8562  000D22  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8563  000D24  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8564  000D26  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8565  000D28  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  8566  000D2A  0E00               	movlw	0
  8567  000D2C  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8568  000D2E  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  8569  000D30  D273               	goto	l10251
  8570  000D32                     l10109:
  8571                           
  8572                           ; BSR set to: 0
  8573                           ;main.c: 1234: writeEEPROM( 0x43 + reg, val );
  8574  000D32  0E43               	movlw	67
  8575  000D34  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8576  000D36  6E08               	movwf	?_writeEEPROM,c
  8577  000D38  6A09               	clrf	?_writeEEPROM+1,c
  8578  000D3A  0E00               	movlw	0
  8579  000D3C  2209               	addwfc	?_writeEEPROM+1,f,c
  8580  000D3E  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8581  000D42  ECC7  F01F         	call	_writeEEPROM	;wreg free
  8582                           
  8583                           ;main.c: 1235: rv = readEEPROM( 0x43 + reg );
  8584  000D46  0E43               	movlw	67
  8585  000D48  0100               	movlb	0	; () banked
  8586  000D4A  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8587  000D4C  6E08               	movwf	?_readEEPROM,c
  8588  000D4E  6A09               	clrf	?_readEEPROM+1,c
  8589  000D50  0E00               	movlw	0
  8590  000D52  2209               	addwfc	?_readEEPROM+1,f,c
  8591  000D54  ECEF  F020         	call	_readEEPROM	;wreg free
  8592  000D58  0100               	movlb	0	; () banked
  8593  000D5A  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8594                           
  8595                           ; BSR set to: 0
  8596                           ;main.c: 1237: if ( val & 0x01 ) {
  8597  000D5C  A051               	btfss	vscp_writeAppReg@val,0,c
  8598  000D5E  D018               	goto	l10119
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;main.c: 1239: LATBbits.LATB0 = 0;
  8602  000D60  908A               	bcf	3978,0,c	;volatile
  8603                           
  8604                           ;main.c: 1240: bOn = 0;
  8605  000D62  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;main.c: 1242: relay_pulse_flags |= 0x04;
  8609  000D64  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  8610                           
  8611                           ; BSR set to: 0
  8612                           ;main.c: 1243: relay_pulse_timer[ 2 ] =
  8613                           ;main.c: 1244: readEEPROM( 0x43 + 22) * 256 +
  8614                           ;main.c: 1245: readEEPROM( 0x43 + 23);
  8615  000D66  6A09               	clrf	?_readEEPROM+1,c
  8616  000D68  0E5A               	movlw	90
  8617  000D6A  6E08               	movwf	?_readEEPROM,c
  8618  000D6C  ECEF  F020         	call	_readEEPROM	;wreg free
  8619  000D70  0100               	movlb	0	; () banked
  8620  000D72  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8621  000D74  6A09               	clrf	?_readEEPROM+1,c
  8622  000D76  0E59               	movlw	89
  8623  000D78  6E08               	movwf	?_readEEPROM,c
  8624  000D7A  ECEF  F020         	call	_readEEPROM	;wreg free
  8625  000D7E  0100               	movlb	0	; () banked
  8626  000D80  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8627  000D82  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8628  000D84  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8629  000D86  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8630  000D88  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  8631  000D8A  0E00               	movlw	0
  8632  000D8C  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8633  000D8E  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  8634  000D90                     l10119:
  8635                           
  8636                           ; BSR set to: 0
  8637                           ;main.c: 1246: }
  8638                           ;main.c: 1248: if ( val & 0x04 ) {
  8639  000D90  B451               	btfsc	vscp_writeAppReg@val,2,c
  8640  000D92  D654               	goto	l9983
  8641  000D94  D241               	goto	l10251
  8642  000D96                     l10123:
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;main.c: 1257: writeEEPROM( 0x43 + reg, val );
  8646  000D96  0E43               	movlw	67
  8647  000D98  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8648  000D9A  6E08               	movwf	?_writeEEPROM,c
  8649  000D9C  6A09               	clrf	?_writeEEPROM+1,c
  8650  000D9E  0E00               	movlw	0
  8651  000DA0  2209               	addwfc	?_writeEEPROM+1,f,c
  8652  000DA2  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8653  000DA6  ECC7  F01F         	call	_writeEEPROM	;wreg free
  8654                           
  8655                           ;main.c: 1258: rv = readEEPROM( 0x43 + reg );
  8656  000DAA  0E43               	movlw	67
  8657  000DAC  0100               	movlb	0	; () banked
  8658  000DAE  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8659  000DB0  6E08               	movwf	?_readEEPROM,c
  8660  000DB2  6A09               	clrf	?_readEEPROM+1,c
  8661  000DB4  0E00               	movlw	0
  8662  000DB6  2209               	addwfc	?_readEEPROM+1,f,c
  8663  000DB8  ECEF  F020         	call	_readEEPROM	;wreg free
  8664  000DBC  0100               	movlb	0	; () banked
  8665  000DBE  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8666                           
  8667                           ; BSR set to: 0
  8668                           ;main.c: 1260: if ( val & 0x01 ) {
  8669  000DC0  A051               	btfss	vscp_writeAppReg@val,0,c
  8670  000DC2  D018               	goto	l10133
  8671                           
  8672                           ; BSR set to: 0
  8673                           ;main.c: 1262: LATCbits.LATC7 = 0;
  8674  000DC4  9E8B               	bcf	3979,7,c	;volatile
  8675                           
  8676                           ;main.c: 1263: bOn = 0;
  8677  000DC6  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8678                           
  8679                           ; BSR set to: 0
  8680                           ;main.c: 1265: relay_pulse_flags |= 0x08;
  8681  000DC8  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  8682                           
  8683                           ; BSR set to: 0
  8684                           ;main.c: 1266: relay_pulse_timer[ 3 ] =
  8685                           ;main.c: 1267: readEEPROM( 0x43 + 24) * 256 +
  8686                           ;main.c: 1268: readEEPROM( 0x43 + 25);
  8687  000DCA  6A09               	clrf	?_readEEPROM+1,c
  8688  000DCC  0E5C               	movlw	92
  8689  000DCE  6E08               	movwf	?_readEEPROM,c
  8690  000DD0  ECEF  F020         	call	_readEEPROM	;wreg free
  8691  000DD4  0100               	movlb	0	; () banked
  8692  000DD6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8693  000DD8  6A09               	clrf	?_readEEPROM+1,c
  8694  000DDA  0E5B               	movlw	91
  8695  000DDC  6E08               	movwf	?_readEEPROM,c
  8696  000DDE  ECEF  F020         	call	_readEEPROM	;wreg free
  8697  000DE2  0100               	movlb	0	; () banked
  8698  000DE4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8699  000DE6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8700  000DE8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8701  000DEA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8702  000DEC  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  8703  000DEE  0E00               	movlw	0
  8704  000DF0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8705  000DF2  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  8706  000DF4                     l10133:
  8707                           
  8708                           ; BSR set to: 0
  8709                           ;main.c: 1269: }
  8710                           ;main.c: 1271: if ( val & 0x04 ) {
  8711  000DF4  B451               	btfsc	vscp_writeAppReg@val,2,c
  8712  000DF6  D654               	goto	l10003
  8713  000DF8  D20F               	goto	l10251
  8714  000DFA                     l10137:
  8715                           
  8716                           ; BSR set to: 0
  8717                           ;main.c: 1280: writeEEPROM( 0x43 + reg, val );
  8718  000DFA  0E43               	movlw	67
  8719  000DFC  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8720  000DFE  6E08               	movwf	?_writeEEPROM,c
  8721  000E00  6A09               	clrf	?_writeEEPROM+1,c
  8722  000E02  0E00               	movlw	0
  8723  000E04  2209               	addwfc	?_writeEEPROM+1,f,c
  8724  000E06  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8725  000E0A  ECC7  F01F         	call	_writeEEPROM	;wreg free
  8726                           
  8727                           ;main.c: 1281: rv = readEEPROM( 0x43 + reg );
  8728  000E0E  0E43               	movlw	67
  8729  000E10  0100               	movlb	0	; () banked
  8730  000E12  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8731  000E14  6E08               	movwf	?_readEEPROM,c
  8732  000E16  6A09               	clrf	?_readEEPROM+1,c
  8733  000E18  0E00               	movlw	0
  8734  000E1A  2209               	addwfc	?_readEEPROM+1,f,c
  8735  000E1C  ECEF  F020         	call	_readEEPROM	;wreg free
  8736  000E20  0100               	movlb	0	; () banked
  8737  000E22  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8738                           
  8739                           ; BSR set to: 0
  8740                           ;main.c: 1283: if ( val & 0x01 ) {
  8741  000E24  A051               	btfss	vscp_writeAppReg@val,0,c
  8742  000E26  D018               	goto	l10147
  8743                           
  8744                           ; BSR set to: 0
  8745                           ;main.c: 1285: LATCbits.LATC6 = 0;
  8746  000E28  9C8B               	bcf	3979,6,c	;volatile
  8747                           
  8748                           ;main.c: 1286: bOn = 0;
  8749  000E2A  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8750                           
  8751                           ; BSR set to: 0
  8752                           ;main.c: 1288: relay_pulse_flags |= 0x10;
  8753  000E2C  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  8754                           
  8755                           ; BSR set to: 0
  8756                           ;main.c: 1289: relay_pulse_timer[ 4 ] =
  8757                           ;main.c: 1290: readEEPROM( 0x43 + 26) * 256 +
  8758                           ;main.c: 1291: readEEPROM( 0x43 + 27);
  8759  000E2E  6A09               	clrf	?_readEEPROM+1,c
  8760  000E30  0E5E               	movlw	94
  8761  000E32  6E08               	movwf	?_readEEPROM,c
  8762  000E34  ECEF  F020         	call	_readEEPROM	;wreg free
  8763  000E38  0100               	movlb	0	; () banked
  8764  000E3A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8765  000E3C  6A09               	clrf	?_readEEPROM+1,c
  8766  000E3E  0E5D               	movlw	93
  8767  000E40  6E08               	movwf	?_readEEPROM,c
  8768  000E42  ECEF  F020         	call	_readEEPROM	;wreg free
  8769  000E46  0100               	movlb	0	; () banked
  8770  000E48  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8771  000E4A  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8772  000E4C  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8773  000E4E  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8774  000E50  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  8775  000E52  0E00               	movlw	0
  8776  000E54  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8777  000E56  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  8778  000E58                     l10147:
  8779                           
  8780                           ; BSR set to: 0
  8781                           ;main.c: 1292: }
  8782                           ;main.c: 1294: if ( val & 0x04 ) {
  8783  000E58  B451               	btfsc	vscp_writeAppReg@val,2,c
  8784  000E5A  D654               	goto	l10023
  8785  000E5C  D1DD               	goto	l10251
  8786  000E5E                     l10151:
  8787                           
  8788                           ; BSR set to: 0
  8789                           ;main.c: 1303: writeEEPROM( 0x43 + reg, val );
  8790  000E5E  0E43               	movlw	67
  8791  000E60  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8792  000E62  6E08               	movwf	?_writeEEPROM,c
  8793  000E64  6A09               	clrf	?_writeEEPROM+1,c
  8794  000E66  0E00               	movlw	0
  8795  000E68  2209               	addwfc	?_writeEEPROM+1,f,c
  8796  000E6A  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8797  000E6E  ECC7  F01F         	call	_writeEEPROM	;wreg free
  8798                           
  8799                           ;main.c: 1304: rv = readEEPROM( 0x43 + reg );
  8800  000E72  0E43               	movlw	67
  8801  000E74  0100               	movlb	0	; () banked
  8802  000E76  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8803  000E78  6E08               	movwf	?_readEEPROM,c
  8804  000E7A  6A09               	clrf	?_readEEPROM+1,c
  8805  000E7C  0E00               	movlw	0
  8806  000E7E  2209               	addwfc	?_readEEPROM+1,f,c
  8807  000E80  ECEF  F020         	call	_readEEPROM	;wreg free
  8808  000E84  0100               	movlb	0	; () banked
  8809  000E86  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8810                           
  8811                           ; BSR set to: 0
  8812                           ;main.c: 1306: if ( val & 0x01 ) {
  8813  000E88  A051               	btfss	vscp_writeAppReg@val,0,c
  8814  000E8A  D018               	goto	l10161
  8815                           
  8816                           ; BSR set to: 0
  8817                           ;main.c: 1308: LATCbits.LATC5 = 0;
  8818  000E8C  9A8B               	bcf	3979,5,c	;volatile
  8819                           
  8820                           ;main.c: 1309: bOn = 0;
  8821  000E8E  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8822                           
  8823                           ; BSR set to: 0
  8824                           ;main.c: 1311: relay_pulse_flags |= 0x20;
  8825  000E90  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  8826                           
  8827                           ; BSR set to: 0
  8828                           ;main.c: 1312: relay_pulse_timer[ 5 ] =
  8829                           ;main.c: 1313: readEEPROM( 0x43 + 28) * 256 +
  8830                           ;main.c: 1314: readEEPROM( 0x43 + 29);
  8831  000E92  6A09               	clrf	?_readEEPROM+1,c
  8832  000E94  0E60               	movlw	96
  8833  000E96  6E08               	movwf	?_readEEPROM,c
  8834  000E98  ECEF  F020         	call	_readEEPROM	;wreg free
  8835  000E9C  0100               	movlb	0	; () banked
  8836  000E9E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8837  000EA0  6A09               	clrf	?_readEEPROM+1,c
  8838  000EA2  0E5F               	movlw	95
  8839  000EA4  6E08               	movwf	?_readEEPROM,c
  8840  000EA6  ECEF  F020         	call	_readEEPROM	;wreg free
  8841  000EAA  0100               	movlb	0	; () banked
  8842  000EAC  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8843  000EAE  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8844  000EB0  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8845  000EB2  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8846  000EB4  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  8847  000EB6  0E00               	movlw	0
  8848  000EB8  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8849  000EBA  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  8850  000EBC                     l10161:
  8851                           
  8852                           ; BSR set to: 0
  8853                           ;main.c: 1315: }
  8854                           ;main.c: 1317: if ( val & 0x04 ) {
  8855  000EBC  B451               	btfsc	vscp_writeAppReg@val,2,c
  8856  000EBE  D654               	goto	l10043
  8857  000EC0  D1AB               	goto	l10251
  8858  000EC2                     l10165:
  8859                           
  8860                           ; BSR set to: 0
  8861                           ;main.c: 1326: writeEEPROM( 0x43 + reg, val );
  8862  000EC2  0E43               	movlw	67
  8863  000EC4  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8864  000EC6  6E08               	movwf	?_writeEEPROM,c
  8865  000EC8  6A09               	clrf	?_writeEEPROM+1,c
  8866  000ECA  0E00               	movlw	0
  8867  000ECC  2209               	addwfc	?_writeEEPROM+1,f,c
  8868  000ECE  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8869  000ED2  ECC7  F01F         	call	_writeEEPROM	;wreg free
  8870                           
  8871                           ;main.c: 1327: rv = readEEPROM( 0x43 + reg );
  8872  000ED6  0E43               	movlw	67
  8873  000ED8  0100               	movlb	0	; () banked
  8874  000EDA  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8875  000EDC  6E08               	movwf	?_readEEPROM,c
  8876  000EDE  6A09               	clrf	?_readEEPROM+1,c
  8877  000EE0  0E00               	movlw	0
  8878  000EE2  2209               	addwfc	?_readEEPROM+1,f,c
  8879  000EE4  ECEF  F020         	call	_readEEPROM	;wreg free
  8880  000EE8  0100               	movlb	0	; () banked
  8881  000EEA  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8882                           
  8883                           ; BSR set to: 0
  8884                           ;main.c: 1329: if ( val & 0x01 ) {
  8885  000EEC  A051               	btfss	vscp_writeAppReg@val,0,c
  8886  000EEE  D018               	goto	l10175
  8887                           
  8888                           ; BSR set to: 0
  8889                           ;main.c: 1331: LATCbits.LATC4 = 0;
  8890  000EF0  988B               	bcf	3979,4,c	;volatile
  8891                           
  8892                           ;main.c: 1332: bOn = 0;
  8893  000EF2  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8894                           
  8895                           ; BSR set to: 0
  8896                           ;main.c: 1334: relay_pulse_flags |= 0x40;
  8897  000EF4  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  8898                           
  8899                           ; BSR set to: 0
  8900                           ;main.c: 1335: relay_pulse_timer[ 6 ] =
  8901                           ;main.c: 1336: readEEPROM( 0x43 + 30) * 256 +
  8902                           ;main.c: 1337: readEEPROM( 0x43 + 31);
  8903  000EF6  6A09               	clrf	?_readEEPROM+1,c
  8904  000EF8  0E62               	movlw	98
  8905  000EFA  6E08               	movwf	?_readEEPROM,c
  8906  000EFC  ECEF  F020         	call	_readEEPROM	;wreg free
  8907  000F00  0100               	movlb	0	; () banked
  8908  000F02  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8909  000F04  6A09               	clrf	?_readEEPROM+1,c
  8910  000F06  0E61               	movlw	97
  8911  000F08  6E08               	movwf	?_readEEPROM,c
  8912  000F0A  ECEF  F020         	call	_readEEPROM	;wreg free
  8913  000F0E  0100               	movlb	0	; () banked
  8914  000F10  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8915  000F12  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8916  000F14  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8917  000F16  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8918  000F18  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  8919  000F1A  0E00               	movlw	0
  8920  000F1C  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8921  000F1E  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  8922  000F20                     l10175:
  8923                           
  8924                           ; BSR set to: 0
  8925                           ;main.c: 1338: }
  8926                           ;main.c: 1340: if ( val & 0x04 ) {
  8927  000F20  B451               	btfsc	vscp_writeAppReg@val,2,c
  8928  000F22  D654               	goto	l10063
  8929  000F24  D179               	goto	l10251
  8930  000F26                     l10181:
  8931                           
  8932                           ; BSR set to: 0
  8933  000F26  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8934                           
  8935                           ; Switch size 1, requested type "speed"
  8936                           ; Number of cases is 7, Range of values is 10 to 16
  8937                           ; switch strategies available:
  8938                           ; Name         Instructions Cycles
  8939                           ; simple_byte           22    12 (average)
  8940                           ;	Chosen strategy is simple_byte
  8941  000F28  0A0A               	xorlw	10	; case 10
  8942  000F2A  E101 D689          	bz	l10081
  8943  000F2E  0A01               	xorlw	1	; case 11
  8944  000F30  E101 D6B8          	bz	l10095
  8945  000F34  0A07               	xorlw	7	; case 12
  8946  000F36  E101 D6FC          	bz	l10109
  8947  000F3A  0A01               	xorlw	1	; case 13
  8948  000F3C  E101 D72B          	bz	l10123
  8949  000F40  0A03               	xorlw	3	; case 14
  8950  000F42  E101 D75A          	bz	l10137
  8951  000F46  0A01               	xorlw	1	; case 15
  8952  000F48  E08A               	bz	l10151
  8953  000F4A  0A1F               	xorlw	31	; case 16
  8954  000F4C  E0BA               	bz	l10165
  8955  000F4E  D164               	goto	l10251
  8956  000F50                     l10183:
  8957                           
  8958                           ; BSR set to: 0
  8959                           ;main.c: 1351: else if ( (reg >= 18 ) &&
  8960                           ;main.c: 1352: (reg <= 33 ) ) {
  8961  000F50  0E11               	movlw	17
  8962  000F52  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8963  000F54  D0DE               	goto	l10209
  8964                           
  8965                           ; BSR set to: 0
  8966  000F56  0E22               	movlw	34
  8967  000F58  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8968  000F5A  D0DB               	goto	l10209
  8969                           
  8970                           ; BSR set to: 0
  8971                           ;main.c: 1355: writeEEPROM( 0x43 + reg, val );
  8972  000F5C  0E43               	movlw	67
  8973  000F5E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8974  000F60  6E08               	movwf	?_writeEEPROM,c
  8975  000F62  6A09               	clrf	?_writeEEPROM+1,c
  8976  000F64  0E00               	movlw	0
  8977  000F66  2209               	addwfc	?_writeEEPROM+1,f,c
  8978  000F68  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8979  000F6C  ECC7  F01F         	call	_writeEEPROM	;wreg free
  8980                           
  8981                           ;main.c: 1356: rv = readEEPROM( 0x43 + reg );
  8982  000F70  0E43               	movlw	67
  8983  000F72  0100               	movlb	0	; () banked
  8984  000F74  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8985  000F76  6E08               	movwf	?_readEEPROM,c
  8986  000F78  6A09               	clrf	?_readEEPROM+1,c
  8987  000F7A  0E00               	movlw	0
  8988  000F7C  2209               	addwfc	?_readEEPROM+1,f,c
  8989  000F7E  ECEF  F020         	call	_readEEPROM	;wreg free
  8990  000F82  0100               	movlb	0	; () banked
  8991  000F84  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8992                           
  8993                           ;main.c: 1360: switch ( reg ) {
  8994  000F86  D0B0               	goto	l10207
  8995  000F88                     l10189:
  8996                           
  8997                           ; BSR set to: 0
  8998                           ;main.c: 1363: relay_pulse_timer[ 0 ] =
  8999                           ;main.c: 1364: readEEPROM( 0x43 + 18) * 256 +
  9000                           ;main.c: 1365: readEEPROM( 0x43 + 19);
  9001  000F88  6A09               	clrf	?_readEEPROM+1,c
  9002  000F8A  0E56               	movlw	86
  9003  000F8C  6E08               	movwf	?_readEEPROM,c
  9004  000F8E  ECEF  F020         	call	_readEEPROM	;wreg free
  9005  000F92  0100               	movlb	0	; () banked
  9006  000F94  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9007  000F96  6A09               	clrf	?_readEEPROM+1,c
  9008  000F98  0E55               	movlw	85
  9009  000F9A  6E08               	movwf	?_readEEPROM,c
  9010  000F9C  ECEF  F020         	call	_readEEPROM	;wreg free
  9011  000FA0  0100               	movlb	0	; () banked
  9012  000FA2  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9013  000FA4  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9014  000FA6  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9015  000FA8  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9016  000FAA  6F70               	movwf	_relay_pulse_timer& (0+255),b
  9017  000FAC  0E00               	movlw	0
  9018  000FAE  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9019  000FB0  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  9020                           
  9021                           ;main.c: 1366: break;
  9022  000FB2  D132               	goto	l10251
  9023  000FB4                     l10191:
  9024                           
  9025                           ; BSR set to: 0
  9026                           ;main.c: 1369: relay_pulse_timer[ 1 ] =
  9027                           ;main.c: 1370: readEEPROM( 0x43 + 20) * 256 +
  9028                           ;main.c: 1371: readEEPROM( 0x43 + 21);
  9029  000FB4  6A09               	clrf	?_readEEPROM+1,c
  9030  000FB6  0E58               	movlw	88
  9031  000FB8  6E08               	movwf	?_readEEPROM,c
  9032  000FBA  ECEF  F020         	call	_readEEPROM	;wreg free
  9033  000FBE  0100               	movlb	0	; () banked
  9034  000FC0  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9035  000FC2  6A09               	clrf	?_readEEPROM+1,c
  9036  000FC4  0E57               	movlw	87
  9037  000FC6  6E08               	movwf	?_readEEPROM,c
  9038  000FC8  ECEF  F020         	call	_readEEPROM	;wreg free
  9039  000FCC  0100               	movlb	0	; () banked
  9040  000FCE  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9041  000FD0  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9042  000FD2  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9043  000FD4  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9044  000FD6  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  9045  000FD8  0E00               	movlw	0
  9046  000FDA  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9047  000FDC  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  9048                           
  9049                           ;main.c: 1372: break;
  9050  000FDE  D11C               	goto	l10251
  9051  000FE0                     l10193:
  9052                           
  9053                           ; BSR set to: 0
  9054                           ;main.c: 1375: relay_pulse_timer[ 2 ] =
  9055                           ;main.c: 1376: readEEPROM( 0x43 + 22) * 256 +
  9056                           ;main.c: 1377: readEEPROM( 0x43 + 23);
  9057  000FE0  6A09               	clrf	?_readEEPROM+1,c
  9058  000FE2  0E5A               	movlw	90
  9059  000FE4  6E08               	movwf	?_readEEPROM,c
  9060  000FE6  ECEF  F020         	call	_readEEPROM	;wreg free
  9061  000FEA  0100               	movlb	0	; () banked
  9062  000FEC  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9063  000FEE  6A09               	clrf	?_readEEPROM+1,c
  9064  000FF0  0E59               	movlw	89
  9065  000FF2  6E08               	movwf	?_readEEPROM,c
  9066  000FF4  ECEF  F020         	call	_readEEPROM	;wreg free
  9067  000FF8  0100               	movlb	0	; () banked
  9068  000FFA  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9069  000FFC  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9070  000FFE  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9071  001000  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9072  001002  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  9073  001004  0E00               	movlw	0
  9074  001006  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9075  001008  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  9076                           
  9077                           ;main.c: 1378: break;
  9078  00100A  D106               	goto	l10251
  9079  00100C                     l10195:
  9080                           
  9081                           ; BSR set to: 0
  9082                           ;main.c: 1381: relay_pulse_timer[ 3 ] =
  9083                           ;main.c: 1382: readEEPROM( 0x43 + 24) * 256 +
  9084                           ;main.c: 1383: readEEPROM( 0x43 + 25);
  9085  00100C  6A09               	clrf	?_readEEPROM+1,c
  9086  00100E  0E5C               	movlw	92
  9087  001010  6E08               	movwf	?_readEEPROM,c
  9088  001012  ECEF  F020         	call	_readEEPROM	;wreg free
  9089  001016  0100               	movlb	0	; () banked
  9090  001018  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9091  00101A  6A09               	clrf	?_readEEPROM+1,c
  9092  00101C  0E5B               	movlw	91
  9093  00101E  6E08               	movwf	?_readEEPROM,c
  9094  001020  ECEF  F020         	call	_readEEPROM	;wreg free
  9095  001024  0100               	movlb	0	; () banked
  9096  001026  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9097  001028  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9098  00102A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9099  00102C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9100  00102E  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  9101  001030  0E00               	movlw	0
  9102  001032  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9103  001034  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  9104                           
  9105                           ;main.c: 1384: break;
  9106  001036  D0F0               	goto	l10251
  9107  001038                     l10197:
  9108                           
  9109                           ; BSR set to: 0
  9110                           ;main.c: 1387: relay_pulse_timer[ 4 ] =
  9111                           ;main.c: 1388: readEEPROM( 0x43 + 26) * 256 +
  9112                           ;main.c: 1389: readEEPROM( 0x43 + 27);
  9113  001038  6A09               	clrf	?_readEEPROM+1,c
  9114  00103A  0E5E               	movlw	94
  9115  00103C  6E08               	movwf	?_readEEPROM,c
  9116  00103E  ECEF  F020         	call	_readEEPROM	;wreg free
  9117  001042  0100               	movlb	0	; () banked
  9118  001044  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9119  001046  6A09               	clrf	?_readEEPROM+1,c
  9120  001048  0E5D               	movlw	93
  9121  00104A  6E08               	movwf	?_readEEPROM,c
  9122  00104C  ECEF  F020         	call	_readEEPROM	;wreg free
  9123  001050  0100               	movlb	0	; () banked
  9124  001052  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9125  001054  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9126  001056  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9127  001058  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9128  00105A  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9129  00105C  0E00               	movlw	0
  9130  00105E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9131  001060  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9132                           
  9133                           ;main.c: 1390: break;
  9134  001062  D0DA               	goto	l10251
  9135  001064                     l10199:
  9136                           
  9137                           ; BSR set to: 0
  9138                           ;main.c: 1393: relay_pulse_timer[ 5 ] =
  9139                           ;main.c: 1394: readEEPROM( 0x43 + 28) * 256 +
  9140                           ;main.c: 1395: readEEPROM( 0x43 + 29);
  9141  001064  6A09               	clrf	?_readEEPROM+1,c
  9142  001066  0E60               	movlw	96
  9143  001068  6E08               	movwf	?_readEEPROM,c
  9144  00106A  ECEF  F020         	call	_readEEPROM	;wreg free
  9145  00106E  0100               	movlb	0	; () banked
  9146  001070  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9147  001072  6A09               	clrf	?_readEEPROM+1,c
  9148  001074  0E5F               	movlw	95
  9149  001076  6E08               	movwf	?_readEEPROM,c
  9150  001078  ECEF  F020         	call	_readEEPROM	;wreg free
  9151  00107C  0100               	movlb	0	; () banked
  9152  00107E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9153  001080  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9154  001082  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9155  001084  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9156  001086  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9157  001088  0E00               	movlw	0
  9158  00108A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9159  00108C  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9160                           
  9161                           ;main.c: 1396: break;
  9162  00108E  D0C4               	goto	l10251
  9163  001090                     l10201:
  9164                           
  9165                           ; BSR set to: 0
  9166                           ;main.c: 1399: relay_pulse_timer[ 6 ] =
  9167                           ;main.c: 1400: readEEPROM( 0x43 + 30) * 256 +
  9168                           ;main.c: 1401: readEEPROM( 0x43 + 31);
  9169  001090  6A09               	clrf	?_readEEPROM+1,c
  9170  001092  0E62               	movlw	98
  9171  001094  6E08               	movwf	?_readEEPROM,c
  9172  001096  ECEF  F020         	call	_readEEPROM	;wreg free
  9173  00109A  0100               	movlb	0	; () banked
  9174  00109C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9175  00109E  6A09               	clrf	?_readEEPROM+1,c
  9176  0010A0  0E61               	movlw	97
  9177  0010A2  6E08               	movwf	?_readEEPROM,c
  9178  0010A4  ECEF  F020         	call	_readEEPROM	;wreg free
  9179  0010A8  0100               	movlb	0	; () banked
  9180  0010AA  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9181  0010AC  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9182  0010AE  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9183  0010B0  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9184  0010B2  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9185  0010B4  0E00               	movlw	0
  9186  0010B6  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9187  0010B8  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9188                           
  9189                           ;main.c: 1402: break;
  9190  0010BA  D0AE               	goto	l10251
  9191  0010BC                     l10203:
  9192                           
  9193                           ; BSR set to: 0
  9194                           ;main.c: 1405: relay_pulse_timer[ 7 ] =
  9195                           ;main.c: 1406: readEEPROM( 0x43 + 32) * 256 +
  9196                           ;main.c: 1407: readEEPROM( 0x43 + 33);
  9197  0010BC  6A09               	clrf	?_readEEPROM+1,c
  9198  0010BE  0E64               	movlw	100
  9199  0010C0  6E08               	movwf	?_readEEPROM,c
  9200  0010C2  ECEF  F020         	call	_readEEPROM	;wreg free
  9201  0010C6  0100               	movlb	0	; () banked
  9202  0010C8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9203  0010CA  6A09               	clrf	?_readEEPROM+1,c
  9204  0010CC  0E63               	movlw	99
  9205  0010CE  6E08               	movwf	?_readEEPROM,c
  9206  0010D0  ECEF  F020         	call	_readEEPROM	;wreg free
  9207  0010D4  0100               	movlb	0	; () banked
  9208  0010D6  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9209  0010D8  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9210  0010DA  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9211  0010DC  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9212  0010DE  6F7E               	movwf	(_relay_pulse_timer+14)& (0+255),b
  9213  0010E0  0E00               	movlw	0
  9214  0010E2  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9215  0010E4  6F7F               	movwf	(_relay_pulse_timer+15)& (0+255),b
  9216                           
  9217                           ;main.c: 1408: break;
  9218  0010E6  D098               	goto	l10251
  9219  0010E8                     l10207:
  9220                           
  9221                           ; BSR set to: 0
  9222  0010E8  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9223                           
  9224                           ; Switch size 1, requested type "speed"
  9225                           ; Number of cases is 8, Range of values is 19 to 33
  9226                           ; switch strategies available:
  9227                           ; Name         Instructions Cycles
  9228                           ; simple_byte           25    13 (average)
  9229                           ;	Chosen strategy is simple_byte
  9230  0010EA  0A13               	xorlw	19	; case 19
  9231  0010EC  E101 D74C          	bz	l10189
  9232  0010F0  0A06               	xorlw	6	; case 21
  9233  0010F2  E101 D75F          	bz	l10191
  9234  0010F6  0A02               	xorlw	2	; case 23
  9235  0010F8  E101 D772          	bz	l10193
  9236  0010FC  0A0E               	xorlw	14	; case 25
  9237  0010FE  E086               	bz	l10195
  9238  001100  0A02               	xorlw	2	; case 27
  9239  001102  E09A               	bz	l10197
  9240  001104  0A06               	xorlw	6	; case 29
  9241  001106  E0AE               	bz	l10199
  9242  001108  0A02               	xorlw	2	; case 31
  9243  00110A  E0C2               	bz	l10201
  9244  00110C  0A3E               	xorlw	62	; case 33
  9245  00110E  E0D6               	bz	l10203
  9246  001110  D083               	goto	l10251
  9247  001112                     l10209:
  9248                           
  9249                           ; BSR set to: 0
  9250                           ;main.c: 1416: else if ( ( reg >= 34 ) &&
  9251                           ;main.c: 1417: ( reg <= 49 ) ) {
  9252  001112  0E21               	movlw	33
  9253  001114  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9254  001116  D049               	goto	l10235
  9255                           
  9256                           ; BSR set to: 0
  9257  001118  0E32               	movlw	50
  9258  00111A  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9259  00111C  D046               	goto	l10235
  9260                           
  9261                           ; BSR set to: 0
  9262                           ;main.c: 1420: writeEEPROM( 0x43 + reg, val );
  9263  00111E  0E43               	movlw	67
  9264  001120  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9265  001122  6E08               	movwf	?_writeEEPROM,c
  9266  001124  6A09               	clrf	?_writeEEPROM+1,c
  9267  001126  0E00               	movlw	0
  9268  001128  2209               	addwfc	?_writeEEPROM+1,f,c
  9269  00112A  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9270  00112E  ECC7  F01F         	call	_writeEEPROM	;wreg free
  9271                           
  9272                           ;main.c: 1421: rv = readEEPROM( 0x43 + reg );
  9273  001132  0E43               	movlw	67
  9274  001134  0100               	movlb	0	; () banked
  9275  001136  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9276  001138  6E08               	movwf	?_readEEPROM,c
  9277  00113A  6A09               	clrf	?_readEEPROM+1,c
  9278  00113C  0E00               	movlw	0
  9279  00113E  2209               	addwfc	?_readEEPROM+1,f,c
  9280  001140  ECEF  F020         	call	_readEEPROM	;wreg free
  9281  001144  0100               	movlb	0	; () banked
  9282  001146  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9283                           
  9284                           ;main.c: 1423: switch ( reg ) {
  9285  001148  D016               	goto	l10233
  9286  00114A                     l10229:
  9287                           
  9288                           ; BSR set to: 0
  9289                           ;main.c: 1468: relay_protection_timer[ 7 ] =
  9290                           ;main.c: 1469: readEEPROM( 0x43 + 48 ) * 256 +
  9291                           ;main.c: 1470: readEEPROM( 0x43 + 49 );
  9292  00114A  6A09               	clrf	?_readEEPROM+1,c
  9293  00114C  0E74               	movlw	116
  9294  00114E  6E08               	movwf	?_readEEPROM,c
  9295  001150  ECEF  F020         	call	_readEEPROM	;wreg free
  9296  001154  0100               	movlb	0	; () banked
  9297  001156  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9298  001158  6A09               	clrf	?_readEEPROM+1,c
  9299  00115A  0E73               	movlw	115
  9300  00115C  6E08               	movwf	?_readEEPROM,c
  9301  00115E  ECEF  F020         	call	_readEEPROM	;wreg free
  9302  001162  0100               	movlb	0	; () banked
  9303  001164  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9304  001166  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9305  001168  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9306  00116A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9307  00116C  6F6E               	movwf	(_relay_protection_timer+14)& (0+255),b
  9308  00116E  0E00               	movlw	0
  9309  001170  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9310  001172  6F6F               	movwf	(_relay_protection_timer+15)& (0+255),b
  9311                           
  9312                           ;main.c: 1471: break;
  9313  001174  D051               	goto	l10251
  9314  001176                     l10233:
  9315                           
  9316                           ; BSR set to: 0
  9317  001176  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9318                           
  9319                           ; Switch size 1, requested type "speed"
  9320                           ; Number of cases is 8, Range of values is 35 to 49
  9321                           ; switch strategies available:
  9322                           ; Name         Instructions Cycles
  9323                           ; simple_byte           25    13 (average)
  9324                           ;	Chosen strategy is simple_byte
  9325  001178  0A23               	xorlw	35	; case 35
  9326  00117A  E102 EFBD  F004    	bz	l9943
  9327  001180  0A06               	xorlw	6	; case 37
  9328  001182  E101 D431          	bz	l9963
  9329  001186  0A02               	xorlw	2	; case 39
  9330  001188  E101 D458          	bz	l9983
  9331  00118C  0A0E               	xorlw	14	; case 41
  9332  00118E  E101 D487          	bz	l10003
  9333  001192  0A02               	xorlw	2	; case 43
  9334  001194  E101 D4B6          	bz	l10023
  9335  001198  0A06               	xorlw	6	; case 45
  9336  00119A  E101 D4E5          	bz	l10043
  9337  00119E  0A02               	xorlw	2	; case 47
  9338  0011A0  E101 D514          	bz	l10063
  9339  0011A4  0A1E               	xorlw	30	; case 49
  9340  0011A6  E0D1               	bz	l10229
  9341  0011A8  D037               	goto	l10251
  9342  0011AA                     l10235:
  9343                           
  9344                           ; BSR set to: 0
  9345                           ;main.c: 1479: else if ( (reg >= 50 ) && (reg <= 65) ) {
  9346  0011AA  0E31               	movlw	49
  9347  0011AC  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9348  0011AE  D017               	goto	l10241
  9349                           
  9350                           ; BSR set to: 0
  9351  0011B0  0E42               	movlw	66
  9352  0011B2  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9353  0011B4  D014               	goto	l10241
  9354                           
  9355                           ; BSR set to: 0
  9356                           ;main.c: 1482: writeEEPROM( 0x43 + reg, val );
  9357  0011B6  0E43               	movlw	67
  9358  0011B8  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9359  0011BA  6E08               	movwf	?_writeEEPROM,c
  9360  0011BC  6A09               	clrf	?_writeEEPROM+1,c
  9361  0011BE  0E00               	movlw	0
  9362  0011C0  2209               	addwfc	?_writeEEPROM+1,f,c
  9363  0011C2  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9364  0011C6  ECC7  F01F         	call	_writeEEPROM	;wreg free
  9365                           
  9366                           ;main.c: 1483: rv = readEEPROM( 0x43 + reg );
  9367  0011CA  0E43               	movlw	67
  9368  0011CC  0100               	movlb	0	; () banked
  9369  0011CE  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9370  0011D0  6E08               	movwf	?_readEEPROM,c
  9371  0011D2  6A09               	clrf	?_readEEPROM+1,c
  9372  0011D4  0E00               	movlw	0
  9373  0011D6  2209               	addwfc	?_readEEPROM+1,f,c
  9374  0011D8  ECEF  F020         	call	_readEEPROM	;wreg free
  9375  0011DC  D01B               	goto	L25
  9376  0011DE                     l10241:
  9377                           
  9378                           ; BSR set to: 0
  9379                           ;main.c: 1486: else if ( (reg >= 72) &&
  9380                           ;main.c: 1487: (reg < (72 + 7 * 8)) ) {
  9381  0011DE  0E47               	movlw	71
  9382  0011E0  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9383  0011E2  D01A               	goto	l10251
  9384                           
  9385                           ; BSR set to: 0
  9386  0011E4  0E80               	movlw	128
  9387  0011E6  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9388  0011E8  D017               	goto	l10251
  9389                           
  9390                           ; BSR set to: 0
  9391                           ;main.c: 1488: writeEEPROM( 0x43 + reg, val );
  9392  0011EA  0E43               	movlw	67
  9393  0011EC  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9394  0011EE  6E08               	movwf	?_writeEEPROM,c
  9395  0011F0  6A09               	clrf	?_writeEEPROM+1,c
  9396  0011F2  0E00               	movlw	0
  9397  0011F4  2209               	addwfc	?_writeEEPROM+1,f,c
  9398  0011F6  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9399  0011FA  ECC7  F01F         	call	_writeEEPROM	;wreg free
  9400                           
  9401                           ;main.c: 1489: calculateSetFilterMask();
  9402  0011FE  EC53  F00C         	call	_calculateSetFilterMask	;wreg free
  9403                           
  9404                           ;main.c: 1490: rv = readEEPROM( 0x43 + reg );
  9405  001202  0E43               	movlw	67
  9406  001204  0100               	movlb	0	; () banked
  9407  001206  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9408  001208  6E08               	movwf	?_readEEPROM,c
  9409  00120A  6A09               	clrf	?_readEEPROM+1,c
  9410  00120C  0E00               	movlw	0
  9411  00120E  2209               	addwfc	?_readEEPROM+1,f,c
  9412  001210  ECEF  F020         	call	_readEEPROM	;wreg free
  9413  001214                     L25:
  9414  001214  0100               	movlb	0	; () banked
  9415  001216  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9416  001218                     l10251:
  9417                           
  9418                           ; BSR set to: 0
  9419                           ;main.c: 1491: }
  9420                           ;main.c: 1497: if ( bInfoEvent ) {
  9421  001218  51CA               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
  9422  00121A  E035               	bz	l10271
  9423                           
  9424                           ; BSR set to: 0
  9425                           ;main.c: 1499: unsigned char val;
  9426                           ;main.c: 1500: val = readEEPROM( 0x43 +
  9427                           ;main.c: 1501: 10 + (reg - 2) );
  9428  00121C  0E4B               	movlw	75
  9429  00121E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9430  001220  6E08               	movwf	?_readEEPROM,c
  9431  001222  6A09               	clrf	?_readEEPROM+1,c
  9432  001224  0E00               	movlw	0
  9433  001226  2209               	addwfc	?_readEEPROM+1,f,c
  9434  001228  ECEF  F020         	call	_readEEPROM	;wreg free
  9435  00122C  0100               	movlb	0	; () banked
  9436  00122E  6FCB               	movwf	vscp_writeAppReg@val_678& (0+255),b
  9437                           
  9438                           ; BSR set to: 0
  9439                           ;main.c: 1503: if ( bOn ) {
  9440  001230  51CC               	movf	vscp_writeAppReg@bOn& (0+255),w,b
  9441  001232  E015               	bz	l395
  9442                           
  9443                           ; BSR set to: 0
  9444                           ;main.c: 1505: if ( val & 0x08 ) {
  9445  001234  A7CB               	btfss	vscp_writeAppReg@val_678& (0+255),3,b
  9446  001236  D008               	goto	l10261
  9447                           
  9448                           ; BSR set to: 0
  9449                           ;main.c: 1506: SendInformationEvent( reg - 2,
  9450                           ;main.c: 1507: 20,
  9451                           ;main.c: 1508: 3 );
  9452  001238  0E14               	movlw	20
  9453  00123A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9454  00123C  0E03               	movlw	3
  9455  00123E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9456  001240  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9457  001242  0FFE               	addlw	254
  9458  001244  EC58  F01E         	call	_SendInformationEvent
  9459  001248                     l10261:
  9460                           
  9461                           ; BSR set to: 0
  9462                           ;main.c: 1509: }
  9463                           ;main.c: 1511: if ( val & 0x20 ) {
  9464  001248  ABCB               	btfss	vscp_writeAppReg@val_678& (0+255),5,b
  9465  00124A  D01D               	goto	l10271
  9466                           
  9467                           ; BSR set to: 0
  9468                           ;main.c: 1512: SendInformationEvent( reg - 2,
  9469                           ;main.c: 1513: 20,
  9470                           ;main.c: 1514: 25 );
  9471  00124C  0E14               	movlw	20
  9472  00124E  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9473  001250  0E19               	movlw	25
  9474  001252  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9475  001254  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9476  001256  0FFE               	addlw	254
  9477  001258  EC58  F01E         	call	_SendInformationEvent
  9478  00125C  D014               	goto	l10271
  9479  00125E                     l395:
  9480                           
  9481                           ; BSR set to: 0
  9482                           ;main.c: 1518: else {
  9483                           ;main.c: 1520: if ( val & 0x10 ) {
  9484  00125E  A9CB               	btfss	vscp_writeAppReg@val_678& (0+255),4,b
  9485  001260  D008               	goto	l10267
  9486                           
  9487                           ; BSR set to: 0
  9488                           ;main.c: 1521: SendInformationEvent( reg - 2,
  9489                           ;main.c: 1522: 20,
  9490                           ;main.c: 1523: 4 );
  9491  001262  0E14               	movlw	20
  9492  001264  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9493  001266  0E04               	movlw	4
  9494  001268  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9495  00126A  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9496  00126C  0FFE               	addlw	254
  9497  00126E  EC58  F01E         	call	_SendInformationEvent
  9498  001272                     l10267:
  9499                           
  9500                           ; BSR set to: 0
  9501                           ;main.c: 1524: }
  9502                           ;main.c: 1526: if ( val & 0x40 ) {
  9503  001272  ADCB               	btfss	vscp_writeAppReg@val_678& (0+255),6,b
  9504  001274  D008               	goto	l10271
  9505                           
  9506                           ; BSR set to: 0
  9507                           ;main.c: 1527: SendInformationEvent( reg - 2,
  9508                           ;main.c: 1528: 20,
  9509                           ;main.c: 1529: 24 );
  9510  001276  0E14               	movlw	20
  9511  001278  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9512  00127A  0E18               	movlw	24
  9513  00127C  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9514  00127E  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9515  001280  0FFE               	addlw	254
  9516  001282  EC58  F01E         	call	_SendInformationEvent
  9517  001286                     l10271:
  9518                           
  9519                           ; BSR set to: 0
  9520                           ;main.c: 1530: }
  9521                           ;main.c: 1531: }
  9522                           ;main.c: 1532: }
  9523                           ;main.c: 1534: return rv;
  9524  001286  51CD               	movf	vscp_writeAppReg@rv& (0+255),w,b
  9525                           
  9526                           ; BSR set to: 0
  9527  001288  0012               	return	
  9528  00128A                     __end_of_vscp_writeAppReg:
  9529                           	opt stack 0
  9530                           tblptru	equ	0xFF8
  9531                           prodh	equ	0xFF4
  9532                           prodl	equ	0xFF3
  9533                           postinc0	equ	0xFEE
  9534                           wreg	equ	0xFE8
  9535                           indf2	equ	0xFDF
  9536                           postinc2	equ	0xFDE
  9537                           postdec2	equ	0xFDD
  9538                           fsr2h	equ	0xFDA
  9539                           fsr2l	equ	0xFD9
  9540                           status	equ	0xFD8
  9541                           
  9542 ;; *************** function _calculateSetFilterMask *****************
  9543 ;; Defined at:
  9544 ;;		line 2601 in file "../main.c"
  9545 ;; Parameters:    Size  Location     Type
  9546 ;;		None
  9547 ;; Auto vars:     Size  Location     Type
  9548 ;;  rowfilter       4   61[COMRAM] unsigned long 
  9549 ;;  filter          4   57[COMRAM] unsigned long 
  9550 ;;  mask            4   53[COMRAM] unsigned long 
  9551 ;;  rowmask         4   48[COMRAM] unsigned long 
  9552 ;;  i               1   66[COMRAM] unsigned char 
  9553 ;;  j               1   65[COMRAM] unsigned char 
  9554 ;;  lastOID         1   52[COMRAM] unsigned char 
  9555 ;; Return value:  Size  Location     Type
  9556 ;;		None               void
  9557 ;; Registers used:
  9558 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9559 ;; Tracked objects:
  9560 ;;		On entry : 0/0
  9561 ;;		On exit  : 0/0
  9562 ;;		Unchanged: 0/0
  9563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9564 ;;      Params:         0       0       0       0       0       0       0
  9565 ;;      Locals:        19       0       0       0       0       0       0
  9566 ;;      Temps:         31       0       0       0       0       0       0
  9567 ;;      Totals:        50       0       0       0       0       0       0
  9568 ;;Total ram usage:       50 bytes
  9569 ;; Hardware stack levels used:    1
  9570 ;; Hardware stack levels required when called:    3
  9571 ;; This function calls:
  9572 ;;		_readEEPROM
  9573 ;;		_ECANSetOperationMode
  9574 ;;		__CANIDToRegs
  9575 ;; This function is called by:
  9576 ;;		_vscp_writeAppReg
  9577 ;; This function uses a non-reentrant model
  9578 ;;
  9579                           
  9580                           	psect	text25
  9581  0018A6                     __ptext25:
  9582                           	opt stack 0
  9583  0018A6                     _calculateSetFilterMask:
  9584                           	opt stack 24
  9585                           
  9586                           ;main.c: 2602: uint8_t i,j;
  9587                           ;main.c: 2603: uint8_t lastOID;
  9588                           ;main.c: 2604: uint32_t rowmask;
  9589                           ;main.c: 2605: uint32_t rowfilter;
  9590                           ;main.c: 2608: uint32_t mask = 0xffffffff;
  9591                           
  9592                           ; BSR set to: 0
  9593                           ;incstack = 0
  9594                           ;incstack = 0
  9595  0018A6  6836               	setf	calculateSetFilterMask@mask,c
  9596  0018A8  6837               	setf	calculateSetFilterMask@mask+1,c
  9597  0018AA  6838               	setf	calculateSetFilterMask@mask+2,c
  9598  0018AC  6839               	setf	calculateSetFilterMask@mask+3,c
  9599                           
  9600                           ;main.c: 2609: uint32_t filter = 0;
  9601  0018AE  6A3A               	clrf	calculateSetFilterMask@filter,c
  9602  0018B0  6A3B               	clrf	calculateSetFilterMask@filter+1,c
  9603  0018B2  6A3C               	clrf	calculateSetFilterMask@filter+2,c
  9604  0018B4  6A3D               	clrf	calculateSetFilterMask@filter+3,c
  9605                           
  9606                           ;main.c: 2612: for ( i=0; i < 7; i++ ) {
  9607  0018B6  6A43               	clrf	calculateSetFilterMask@i,c
  9608  0018B8                     l8487:
  9609                           
  9610                           ;main.c: 2615: if ( readEEPROM( 0x43 + 8*i + 1 ) & 0x80 ) {
  9611  0018B8  5043               	movf	calculateSetFilterMask@i,w,c
  9612  0018BA  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
  9613  0018BC  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
  9614  0018BE  90D8               	bcf	status,0,c
  9615  0018C0  3612               	rlcf	??_calculateSetFilterMask,f,c
  9616  0018C2  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9617  0018C4  90D8               	bcf	status,0,c
  9618  0018C6  3612               	rlcf	??_calculateSetFilterMask,f,c
  9619  0018C8  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9620  0018CA  90D8               	bcf	status,0,c
  9621  0018CC  3612               	rlcf	??_calculateSetFilterMask,f,c
  9622  0018CE  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9623  0018D0  0E44               	movlw	68
  9624  0018D2  2412               	addwf	??_calculateSetFilterMask,w,c
  9625  0018D4  6E08               	movwf	?_readEEPROM,c
  9626  0018D6  0E00               	movlw	0
  9627  0018D8  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9628  0018DA  6E09               	movwf	?_readEEPROM+1,c
  9629  0018DC  ECEF  F020         	call	_readEEPROM	;wreg free
  9630  0018E0  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9631  0018E2  AE14               	btfss	??_calculateSetFilterMask+2,7,c
  9632  0018E4  D1E8               	goto	l8531
  9633                           
  9634                           ;main.c: 2624: rowmask =
  9635                           ;main.c: 2626: ( (uint32_t)( readEEPROM( 0x43 + 8*i + 1 ) & 2 ) << 23 ) |
  9636                           ;main.c: 2628: ( (uint32_t)readEEPROM( 0x43 + 8*i + 2 ) << 16 ) |
  9637                           ;main.c: 2630: ( (uint32_t)readEEPROM( 0x43 + 8*i + 4 ) << 8 ) |
  9638                           ;main.c: 2632: 0xff;
  9639  0018E6  5043               	movf	calculateSetFilterMask@i,w,c
  9640  0018E8  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
  9641  0018EA  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
  9642  0018EC  90D8               	bcf	status,0,c
  9643  0018EE  3612               	rlcf	??_calculateSetFilterMask,f,c
  9644  0018F0  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9645  0018F2  90D8               	bcf	status,0,c
  9646  0018F4  3612               	rlcf	??_calculateSetFilterMask,f,c
  9647  0018F6  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9648  0018F8  90D8               	bcf	status,0,c
  9649  0018FA  3612               	rlcf	??_calculateSetFilterMask,f,c
  9650  0018FC  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9651  0018FE  0E47               	movlw	71
  9652  001900  2412               	addwf	??_calculateSetFilterMask,w,c
  9653  001902  6E08               	movwf	?_readEEPROM,c
  9654  001904  0E00               	movlw	0
  9655  001906  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9656  001908  6E09               	movwf	?_readEEPROM+1,c
  9657  00190A  ECEF  F020         	call	_readEEPROM	;wreg free
  9658  00190E  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9659  001910  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
  9660  001914  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
  9661  001916  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
  9662  001918  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
  9663  00191A  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
  9664  00191E  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
  9665  001922  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
  9666  001926  6A15               	clrf	??_calculateSetFilterMask+3,c
  9667  001928  5043               	movf	calculateSetFilterMask@i,w,c
  9668  00192A  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
  9669  00192C  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
  9670  00192E  90D8               	bcf	status,0,c
  9671  001930  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9672  001932  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9673  001934  90D8               	bcf	status,0,c
  9674  001936  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9675  001938  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9676  00193A  90D8               	bcf	status,0,c
  9677  00193C  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9678  00193E  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9679  001940  0E45               	movlw	69
  9680  001942  2419               	addwf	??_calculateSetFilterMask+7,w,c
  9681  001944  6E08               	movwf	?_readEEPROM,c
  9682  001946  0E00               	movlw	0
  9683  001948  201A               	addwfc	??_calculateSetFilterMask+8,w,c
  9684  00194A  6E09               	movwf	?_readEEPROM+1,c
  9685  00194C  ECEF  F020         	call	_readEEPROM	;wreg free
  9686  001950  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
  9687  001952  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
  9688  001956  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
  9689  001958  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
  9690  00195A  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
  9691  00195C  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
  9692  001960  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
  9693  001964  6A1D               	clrf	??_calculateSetFilterMask+11,c
  9694  001966  6A1C               	clrf	??_calculateSetFilterMask+10,c
  9695  001968  5043               	movf	calculateSetFilterMask@i,w,c
  9696  00196A  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
  9697  00196C  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
  9698  00196E  90D8               	bcf	status,0,c
  9699  001970  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9700  001972  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9701  001974  90D8               	bcf	status,0,c
  9702  001976  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9703  001978  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9704  00197A  90D8               	bcf	status,0,c
  9705  00197C  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9706  00197E  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9707  001980  0E44               	movlw	68
  9708  001982  2420               	addwf	??_calculateSetFilterMask+14,w,c
  9709  001984  6E08               	movwf	?_readEEPROM,c
  9710  001986  0E00               	movlw	0
  9711  001988  2021               	addwfc	??_calculateSetFilterMask+15,w,c
  9712  00198A  6E09               	movwf	?_readEEPROM+1,c
  9713  00198C  ECEF  F020         	call	_readEEPROM	;wreg free
  9714  001990  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
  9715  001992  0E02               	movlw	2
  9716  001994  1622               	andwf	??_calculateSetFilterMask+16,f,c
  9717  001996  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
  9718  00199A  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
  9719  00199C  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
  9720  00199E  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
  9721  0019A0  0E17               	movlw	23
  9722  0019A2                     u9925:
  9723  0019A2  90D8               	bcf	status,0,c
  9724  0019A4  3623               	rlcf	??_calculateSetFilterMask+17,f,c
  9725  0019A6  3624               	rlcf	??_calculateSetFilterMask+18,f,c
  9726  0019A8  3625               	rlcf	??_calculateSetFilterMask+19,f,c
  9727  0019AA  3626               	rlcf	??_calculateSetFilterMask+20,f,c
  9728  0019AC  2EE8               	decfsz	wreg,f,c
  9729  0019AE  D7F9               	goto	u9925
  9730  0019B0  501C               	movf	??_calculateSetFilterMask+10,w,c
  9731  0019B2  1023               	iorwf	??_calculateSetFilterMask+17,w,c
  9732  0019B4  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
  9733  0019B6  501D               	movf	??_calculateSetFilterMask+11,w,c
  9734  0019B8  1024               	iorwf	??_calculateSetFilterMask+18,w,c
  9735  0019BA  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
  9736  0019BC  501E               	movf	??_calculateSetFilterMask+12,w,c
  9737  0019BE  1025               	iorwf	??_calculateSetFilterMask+19,w,c
  9738  0019C0  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
  9739  0019C2  501F               	movf	??_calculateSetFilterMask+13,w,c
  9740  0019C4  1026               	iorwf	??_calculateSetFilterMask+20,w,c
  9741  0019C6  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
  9742  0019C8  5015               	movf	??_calculateSetFilterMask+3,w,c
  9743  0019CA  1027               	iorwf	??_calculateSetFilterMask+21,w,c
  9744  0019CC  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
  9745  0019CE  5016               	movf	??_calculateSetFilterMask+4,w,c
  9746  0019D0  1028               	iorwf	??_calculateSetFilterMask+22,w,c
  9747  0019D2  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
  9748  0019D4  5017               	movf	??_calculateSetFilterMask+5,w,c
  9749  0019D6  1029               	iorwf	??_calculateSetFilterMask+23,w,c
  9750  0019D8  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
  9751  0019DA  5018               	movf	??_calculateSetFilterMask+6,w,c
  9752  0019DC  102A               	iorwf	??_calculateSetFilterMask+24,w,c
  9753  0019DE  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
  9754  0019E0  0EFF               	movlw	255
  9755  0019E2  102B               	iorwf	??_calculateSetFilterMask+25,w,c
  9756  0019E4  6E31               	movwf	calculateSetFilterMask@rowmask,c
  9757  0019E6  502C               	movf	??_calculateSetFilterMask+26,w,c
  9758  0019E8  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
  9759  0019EA  502D               	movf	??_calculateSetFilterMask+27,w,c
  9760  0019EC  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
  9761  0019EE  502E               	movf	??_calculateSetFilterMask+28,w,c
  9762  0019F0  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
  9763                           
  9764                           ;main.c: 2633: ;
  9765                           ;main.c: 2638: rowfilter =
  9766                           ;main.c: 2640: ( (uint32_t)( readEEPROM( 0x43 + 8*i + 1 ) & 1 ) << 24 ) |
  9767                           ;main.c: 2642: ( (uint32_t)readEEPROM( 0x43 + 8*i + 3 ) << 16 ) |
  9768                           ;main.c: 2644: ( (uint32_t)readEEPROM( 0x43 + 8*i + 5 ) << 8 ) |
  9769                           ;main.c: 2647: readEEPROM( 0x43 + 8*i );
  9770  0019F2  5043               	movf	calculateSetFilterMask@i,w,c
  9771  0019F4  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
  9772  0019F6  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
  9773  0019F8  90D8               	bcf	status,0,c
  9774  0019FA  3612               	rlcf	??_calculateSetFilterMask,f,c
  9775  0019FC  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9776  0019FE  90D8               	bcf	status,0,c
  9777  001A00  3612               	rlcf	??_calculateSetFilterMask,f,c
  9778  001A02  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9779  001A04  90D8               	bcf	status,0,c
  9780  001A06  3612               	rlcf	??_calculateSetFilterMask,f,c
  9781  001A08  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9782  001A0A  0E48               	movlw	72
  9783  001A0C  2412               	addwf	??_calculateSetFilterMask,w,c
  9784  001A0E  6E08               	movwf	?_readEEPROM,c
  9785  001A10  0E00               	movlw	0
  9786  001A12  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9787  001A14  6E09               	movwf	?_readEEPROM+1,c
  9788  001A16  ECEF  F020         	call	_readEEPROM	;wreg free
  9789  001A1A  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9790  001A1C  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
  9791  001A20  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
  9792  001A22  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
  9793  001A24  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
  9794  001A26  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
  9795  001A2A  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
  9796  001A2E  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
  9797  001A32  6A15               	clrf	??_calculateSetFilterMask+3,c
  9798  001A34  5043               	movf	calculateSetFilterMask@i,w,c
  9799  001A36  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
  9800  001A38  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
  9801  001A3A  90D8               	bcf	status,0,c
  9802  001A3C  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9803  001A3E  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9804  001A40  90D8               	bcf	status,0,c
  9805  001A42  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9806  001A44  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9807  001A46  90D8               	bcf	status,0,c
  9808  001A48  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9809  001A4A  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9810  001A4C  0E46               	movlw	70
  9811  001A4E  2419               	addwf	??_calculateSetFilterMask+7,w,c
  9812  001A50  6E08               	movwf	?_readEEPROM,c
  9813  001A52  0E00               	movlw	0
  9814  001A54  201A               	addwfc	??_calculateSetFilterMask+8,w,c
  9815  001A56  6E09               	movwf	?_readEEPROM+1,c
  9816  001A58  ECEF  F020         	call	_readEEPROM	;wreg free
  9817  001A5C  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
  9818  001A5E  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
  9819  001A62  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
  9820  001A64  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
  9821  001A66  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
  9822  001A68  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
  9823  001A6C  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
  9824  001A70  6A1D               	clrf	??_calculateSetFilterMask+11,c
  9825  001A72  6A1C               	clrf	??_calculateSetFilterMask+10,c
  9826  001A74  5043               	movf	calculateSetFilterMask@i,w,c
  9827  001A76  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
  9828  001A78  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
  9829  001A7A  90D8               	bcf	status,0,c
  9830  001A7C  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9831  001A7E  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9832  001A80  90D8               	bcf	status,0,c
  9833  001A82  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9834  001A84  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9835  001A86  90D8               	bcf	status,0,c
  9836  001A88  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9837  001A8A  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9838  001A8C  0E44               	movlw	68
  9839  001A8E  2420               	addwf	??_calculateSetFilterMask+14,w,c
  9840  001A90  6E08               	movwf	?_readEEPROM,c
  9841  001A92  0E00               	movlw	0
  9842  001A94  2021               	addwfc	??_calculateSetFilterMask+15,w,c
  9843  001A96  6E09               	movwf	?_readEEPROM+1,c
  9844  001A98  ECEF  F020         	call	_readEEPROM	;wreg free
  9845  001A9C  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
  9846  001A9E  0E01               	movlw	1
  9847  001AA0  1622               	andwf	??_calculateSetFilterMask+16,f,c
  9848  001AA2  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
  9849  001AA6  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
  9850  001AA8  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
  9851  001AAA  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
  9852  001AAC  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
  9853  001AB0  6A25               	clrf	??_calculateSetFilterMask+19,c
  9854  001AB2  6A24               	clrf	??_calculateSetFilterMask+18,c
  9855  001AB4  6A23               	clrf	??_calculateSetFilterMask+17,c
  9856  001AB6  501C               	movf	??_calculateSetFilterMask+10,w,c
  9857  001AB8  1023               	iorwf	??_calculateSetFilterMask+17,w,c
  9858  001ABA  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
  9859  001ABC  501D               	movf	??_calculateSetFilterMask+11,w,c
  9860  001ABE  1024               	iorwf	??_calculateSetFilterMask+18,w,c
  9861  001AC0  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
  9862  001AC2  501E               	movf	??_calculateSetFilterMask+12,w,c
  9863  001AC4  1025               	iorwf	??_calculateSetFilterMask+19,w,c
  9864  001AC6  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
  9865  001AC8  501F               	movf	??_calculateSetFilterMask+13,w,c
  9866  001ACA  1026               	iorwf	??_calculateSetFilterMask+20,w,c
  9867  001ACC  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
  9868  001ACE  5015               	movf	??_calculateSetFilterMask+3,w,c
  9869  001AD0  1027               	iorwf	??_calculateSetFilterMask+21,w,c
  9870  001AD2  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
  9871  001AD4  5016               	movf	??_calculateSetFilterMask+4,w,c
  9872  001AD6  1028               	iorwf	??_calculateSetFilterMask+22,w,c
  9873  001AD8  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
  9874  001ADA  5017               	movf	??_calculateSetFilterMask+5,w,c
  9875  001ADC  1029               	iorwf	??_calculateSetFilterMask+23,w,c
  9876  001ADE  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
  9877  001AE0  5018               	movf	??_calculateSetFilterMask+6,w,c
  9878  001AE2  102A               	iorwf	??_calculateSetFilterMask+24,w,c
  9879  001AE4  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
  9880  001AE6  5043               	movf	calculateSetFilterMask@i,w,c
  9881  001AE8  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
  9882  001AEA  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
  9883  001AEC  90D8               	bcf	status,0,c
  9884  001AEE  362F               	rlcf	??_calculateSetFilterMask+29,f,c
  9885  001AF0  3630               	rlcf	??_calculateSetFilterMask+30,f,c
  9886  001AF2  90D8               	bcf	status,0,c
  9887  001AF4  362F               	rlcf	??_calculateSetFilterMask+29,f,c
  9888  001AF6  3630               	rlcf	??_calculateSetFilterMask+30,f,c
  9889  001AF8  90D8               	bcf	status,0,c
  9890  001AFA  362F               	rlcf	??_calculateSetFilterMask+29,f,c
  9891  001AFC  3630               	rlcf	??_calculateSetFilterMask+30,f,c
  9892  001AFE  0E43               	movlw	67
  9893  001B00  242F               	addwf	??_calculateSetFilterMask+29,w,c
  9894  001B02  6E08               	movwf	?_readEEPROM,c
  9895  001B04  0E00               	movlw	0
  9896  001B06  2030               	addwfc	??_calculateSetFilterMask+30,w,c
  9897  001B08  6E09               	movwf	?_readEEPROM+1,c
  9898  001B0A  ECEF  F020         	call	_readEEPROM	;wreg free
  9899  001B0E  102B               	iorwf	??_calculateSetFilterMask+25,w,c
  9900  001B10  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
  9901  001B12  502C               	movf	??_calculateSetFilterMask+26,w,c
  9902  001B14  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
  9903  001B16  502D               	movf	??_calculateSetFilterMask+27,w,c
  9904  001B18  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
  9905  001B1A  502E               	movf	??_calculateSetFilterMask+28,w,c
  9906  001B1C  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
  9907                           
  9908                           ;main.c: 2649: if ( 0 == i ) filter = rowfilter;
  9909  001B1E  6643               	tstfsz	calculateSetFilterMask@i,c
  9910  001B20  D008               	goto	l8495
  9911  001B22  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
  9912  001B26  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
  9913  001B2A  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
  9914  001B2E  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
  9915  001B32                     l8495:
  9916                           
  9917                           ;main.c: 2653: mask &= rowmask;
  9918  001B32  5031               	movf	calculateSetFilterMask@rowmask,w,c
  9919  001B34  1636               	andwf	calculateSetFilterMask@mask,f,c
  9920  001B36  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
  9921  001B38  1637               	andwf	calculateSetFilterMask@mask+1,f,c
  9922  001B3A  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
  9923  001B3C  1638               	andwf	calculateSetFilterMask@mask+2,f,c
  9924  001B3E  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
  9925  001B40  1639               	andwf	calculateSetFilterMask@mask+3,f,c
  9926                           
  9927                           ;main.c: 2658: for ( j=0; j<32; j++ ) {
  9928  001B42  6A42               	clrf	calculateSetFilterMask@j,c
  9929  001B44                     l8503:
  9930                           
  9931                           ;main.c: 2660: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
  9932  001B44  5042               	movf	calculateSetFilterMask@j,w,c
  9933  001B46  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
  9934  001B4A  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
  9935  001B4E  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
  9936  001B52  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
  9937  001B56  2AE8               	incf	wreg,f,c
  9938  001B58  D005               	goto	u9940
  9939  001B5A                     u9945:
  9940  001B5A  90D8               	bcf	status,0,c
  9941  001B5C  3215               	rrcf	??_calculateSetFilterMask+3,f,c
  9942  001B5E  3214               	rrcf	??_calculateSetFilterMask+2,f,c
  9943  001B60  3213               	rrcf	??_calculateSetFilterMask+1,f,c
  9944  001B62  3212               	rrcf	??_calculateSetFilterMask,f,c
  9945  001B64                     u9940:
  9946  001B64  2EE8               	decfsz	wreg,f,c
  9947  001B66  D7F9               	goto	u9945
  9948  001B68  0E01               	movlw	1
  9949  001B6A  1612               	andwf	??_calculateSetFilterMask,f,c
  9950  001B6C  5042               	movf	calculateSetFilterMask@j,w,c
  9951  001B6E  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
  9952  001B72  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
  9953  001B76  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
  9954  001B7A  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
  9955  001B7E  2AE8               	incf	wreg,f,c
  9956  001B80  D005               	goto	u9950
  9957  001B82                     u9955:
  9958  001B82  90D8               	bcf	status,0,c
  9959  001B84  3219               	rrcf	??_calculateSetFilterMask+7,f,c
  9960  001B86  3218               	rrcf	??_calculateSetFilterMask+6,f,c
  9961  001B88  3217               	rrcf	??_calculateSetFilterMask+5,f,c
  9962  001B8A  3216               	rrcf	??_calculateSetFilterMask+4,f,c
  9963  001B8C                     u9950:
  9964  001B8C  2EE8               	decfsz	wreg,f,c
  9965  001B8E  D7F9               	goto	u9955
  9966  001B90  5016               	movf	??_calculateSetFilterMask+4,w,c
  9967  001B92  0B01               	andlw	1
  9968  001B94  1812               	xorwf	??_calculateSetFilterMask,w,c
  9969  001B96  E01D               	bz	l8507
  9970                           
  9971                           ;main.c: 2661: mask &= ~(1<<j);
  9972  001B98  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
  9973  001B9C  0E01               	movlw	1
  9974  001B9E  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
  9975  001BA0  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
  9976  001BA2  2A12               	incf	??_calculateSetFilterMask,f,c
  9977  001BA4  D003               	goto	u9974
  9978  001BA6                     u9975:
  9979  001BA6  90D8               	bcf	status,0,c
  9980  001BA8  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9981  001BAA  3614               	rlcf	??_calculateSetFilterMask+2,f,c
  9982  001BAC                     u9974:
  9983  001BAC  2E12               	decfsz	??_calculateSetFilterMask,f,c
  9984  001BAE  D7FB               	goto	u9975
  9985  001BB0  1C13               	comf	??_calculateSetFilterMask+1,w,c
  9986  001BB2  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
  9987  001BB4  1C14               	comf	??_calculateSetFilterMask+2,w,c
  9988  001BB6  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
  9989  001BB8  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
  9990  001BBA  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
  9991  001BBC  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
  9992  001BBE  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
  9993  001BC0  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
  9994  001BC2  5015               	movf	??_calculateSetFilterMask+3,w,c
  9995  001BC4  1636               	andwf	calculateSetFilterMask@mask,f,c
  9996  001BC6  5016               	movf	??_calculateSetFilterMask+4,w,c
  9997  001BC8  1637               	andwf	calculateSetFilterMask@mask+1,f,c
  9998  001BCA  5017               	movf	??_calculateSetFilterMask+5,w,c
  9999  001BCC  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10000  001BCE  5018               	movf	??_calculateSetFilterMask+6,w,c
 10001  001BD0  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10002  001BD2                     l8507:
 10003  001BD2  2A42               	incf	calculateSetFilterMask@j,f,c
 10004  001BD4  0E1F               	movlw	31
 10005  001BD6  6442               	cpfsgt	calculateSetFilterMask@j,c
 10006  001BD8  D7B5               	goto	l8503
 10007                           
 10008                           ;main.c: 2662: }
 10009                           ;main.c: 2663: }
 10010                           ;main.c: 2669: filter &= rowfilter;
 10011  001BDA  503E               	movf	calculateSetFilterMask@rowfilter,w,c
 10012  001BDC  163A               	andwf	calculateSetFilterMask@filter,f,c
 10013  001BDE  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
 10014  001BE0  163B               	andwf	calculateSetFilterMask@filter+1,f,c
 10015  001BE2  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
 10016  001BE4  163C               	andwf	calculateSetFilterMask@filter+2,f,c
 10017  001BE6  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
 10018  001BE8  163D               	andwf	calculateSetFilterMask@filter+3,f,c
 10019                           
 10020                           ;main.c: 2677: }
 10021                           ;main.c: 2679: if (i) {
 10022                           
 10023                           ;main.c: 2672: if ( !readEEPROM( 0x43 + 8*i + 1 ) & 0x40 ) {
 10024  001BEA  5043               	movf	calculateSetFilterMask@i,w,c
 10025  001BEC  E04F               	bz	l8527
 10026                           
 10027                           ;main.c: 2682: for (j = 0; j < 8; j++) {
 10028  001BEE  6A42               	clrf	calculateSetFilterMask@j,c
 10029  001BF0                     l8521:
 10030                           
 10031                           ;main.c: 2683: if ((lastOID >> i & 1)
 10032                           ;main.c: 2684: != (readEEPROM(0x43 + 8 * i) >> i & 1)) {
 10033  001BF0  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10034  001BF4  5043               	movf	calculateSetFilterMask@i,w,c
 10035  001BF6  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10036  001BF8  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10037  001BFA  90D8               	bcf	status,0,c
 10038  001BFC  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10039  001BFE  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10040  001C00  90D8               	bcf	status,0,c
 10041  001C02  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10042  001C04  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10043  001C06  90D8               	bcf	status,0,c
 10044  001C08  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10045  001C0A  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10046  001C0C  0E43               	movlw	67
 10047  001C0E  2413               	addwf	??_calculateSetFilterMask+1,w,c
 10048  001C10  6E08               	movwf	?_readEEPROM,c
 10049  001C12  0E00               	movlw	0
 10050  001C14  2014               	addwfc	??_calculateSetFilterMask+2,w,c
 10051  001C16  6E09               	movwf	?_readEEPROM+1,c
 10052  001C18  ECEF  F020         	call	_readEEPROM	;wreg free
 10053  001C1C  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10054  001C1E  2A12               	incf	??_calculateSetFilterMask,f,c
 10055  001C20  D002               	goto	u10004
 10056  001C22                     u10005:
 10057  001C22  90D8               	bcf	status,0,c
 10058  001C24  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10059  001C26                     u10004:
 10060  001C26  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10061  001C28  D7FC               	goto	u10005
 10062  001C2A  0E01               	movlw	1
 10063  001C2C  1615               	andwf	??_calculateSetFilterMask+3,f,c
 10064  001C2E  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 10065  001C32  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 10066  001C36  2A16               	incf	??_calculateSetFilterMask+4,f,c
 10067  001C38  D002               	goto	u10014
 10068  001C3A                     u10015:
 10069  001C3A  90D8               	bcf	status,0,c
 10070  001C3C  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10071  001C3E                     u10014:
 10072  001C3E  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 10073  001C40  D7FC               	goto	u10015
 10074  001C42  5017               	movf	??_calculateSetFilterMask+5,w,c
 10075  001C44  0B01               	andlw	1
 10076  001C46  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 10077  001C48  E01D               	bz	l8525
 10078                           
 10079                           ;main.c: 2685: mask &= (1 << i);
 10080  001C4A  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10081  001C4E  0E01               	movlw	1
 10082  001C50  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10083  001C52  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10084  001C54  2A12               	incf	??_calculateSetFilterMask,f,c
 10085  001C56  D003               	goto	u10034
 10086  001C58                     u10035:
 10087  001C58  90D8               	bcf	status,0,c
 10088  001C5A  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10089  001C5C  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10090  001C5E                     u10034:
 10091  001C5E  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10092  001C60  D7FB               	goto	u10035
 10093  001C62  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 10094  001C66  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 10095  001C6A  0E00               	movlw	0
 10096  001C6C  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10097  001C6E  0EFF               	movlw	255
 10098  001C70  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 10099  001C72  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10100  001C74  5015               	movf	??_calculateSetFilterMask+3,w,c
 10101  001C76  1636               	andwf	calculateSetFilterMask@mask,f,c
 10102  001C78  5016               	movf	??_calculateSetFilterMask+4,w,c
 10103  001C7A  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10104  001C7C  5017               	movf	??_calculateSetFilterMask+5,w,c
 10105  001C7E  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10106  001C80  5018               	movf	??_calculateSetFilterMask+6,w,c
 10107  001C82  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10108  001C84                     l8525:
 10109  001C84  2A42               	incf	calculateSetFilterMask@j,f,c
 10110  001C86  0E07               	movlw	7
 10111  001C88  6442               	cpfsgt	calculateSetFilterMask@j,c
 10112  001C8A  D7B2               	goto	l8521
 10113  001C8C                     l8527:
 10114                           
 10115                           ;main.c: 2686: }
 10116                           ;main.c: 2687: }
 10117                           ;main.c: 2689: lastOID = readEEPROM(0x43 + 8 * i);
 10118  001C8C  5043               	movf	calculateSetFilterMask@i,w,c
 10119  001C8E  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10120  001C90  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10121  001C92  90D8               	bcf	status,0,c
 10122  001C94  3612               	rlcf	??_calculateSetFilterMask,f,c
 10123  001C96  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10124  001C98  90D8               	bcf	status,0,c
 10125  001C9A  3612               	rlcf	??_calculateSetFilterMask,f,c
 10126  001C9C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10127  001C9E  90D8               	bcf	status,0,c
 10128  001CA0  3612               	rlcf	??_calculateSetFilterMask,f,c
 10129  001CA2  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10130  001CA4  0E43               	movlw	67
 10131  001CA6  2412               	addwf	??_calculateSetFilterMask,w,c
 10132  001CA8  6E08               	movwf	?_readEEPROM,c
 10133  001CAA  0E00               	movlw	0
 10134  001CAC  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10135  001CAE  6E09               	movwf	?_readEEPROM+1,c
 10136  001CB0  ECEF  F020         	call	_readEEPROM	;wreg free
 10137  001CB4  6E35               	movwf	calculateSetFilterMask@lastOID,c
 10138  001CB6                     l8531:
 10139  001CB6  2A43               	incf	calculateSetFilterMask@i,f,c
 10140  001CB8  0E06               	movlw	6
 10141  001CBA  6443               	cpfsgt	calculateSetFilterMask@i,c
 10142  001CBC  D5FD               	goto	l8487
 10143                           
 10144                           ;main.c: 2695: }
 10145                           ;main.c: 2697: }
 10146                           ;main.c: 2698: }
 10147                           ;main.c: 2701: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 10148  001CBE  0E80               	movlw	128
 10149  001CC0  ECA1  F020         	call	_ECANSetOperationMode
 10150                           
 10151                           ;main.c: 2704: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 10152  001CC4  010F               	movlb	15	; () banked
 10153  001CC6  0E0F               	movlw	15	;volatile
 10154  001CC8  6E09               	movwf	?__CANIDToRegs+1,c
 10155  001CCA  0E1C               	movlw	28	;volatile
 10156  001CCC  6E08               	movwf	?__CANIDToRegs,c
 10157  001CCE  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 10158  001CD2  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 10159  001CD6  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 10160  001CDA  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 10161  001CDE  0E01               	movlw	1
 10162  001CE0  6E0E               	movwf	?__CANIDToRegs+6,c
 10163  001CE2  ECB8  F018         	call	__CANIDToRegs	;wreg free
 10164                           
 10165                           ;main.c: 2707: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 10166  001CE6  010D               	movlb	13	; () banked
 10167  001CE8  83D4               	bsf	212,1,b	;volatile
 10168                           
 10169                           ; BSR set to: 13
 10170  001CEA  010F               	movlb	15	; () banked
 10171  001CEC  0E0F               	movlw	15	;volatile
 10172  001CEE  6E09               	movwf	?__CANIDToRegs+1,c
 10173  001CF0  0E04               	movlw	4	;volatile
 10174  001CF2  6E08               	movwf	?__CANIDToRegs,c
 10175  001CF4  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 10176  001CF8  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 10177  001CFC  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 10178  001D00  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 10179  001D04  0E01               	movlw	1
 10180  001D06  6E0E               	movwf	?__CANIDToRegs+6,c
 10181  001D08  ECB8  F018         	call	__CANIDToRegs	;wreg free
 10182                           
 10183                           ;main.c: 2710: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 10184  001D0C  0E00               	movlw	0
 10185  001D0E  EFA1  F020         	goto	_ECANSetOperationMode
 10186  001D12                     __end_of_calculateSetFilterMask:
 10187                           	opt stack 0
 10188                           tblptru	equ	0xFF8
 10189                           prodh	equ	0xFF4
 10190                           prodl	equ	0xFF3
 10191                           postinc0	equ	0xFEE
 10192                           wreg	equ	0xFE8
 10193                           indf2	equ	0xFDF
 10194                           postinc2	equ	0xFDE
 10195                           postdec2	equ	0xFDD
 10196                           fsr2h	equ	0xFDA
 10197                           fsr2l	equ	0xFD9
 10198                           status	equ	0xFD8
 10199                           
 10200 ;; *************** function _SendInformationEvent *****************
 10201 ;; Defined at:
 10202 ;;		line 1564 in file "../main.c"
 10203 ;; Parameters:    Size  Location     Type
 10204 ;;  idx             1    wreg     unsigned char 
 10205 ;;  eventClass      1   20[BANK0 ] unsigned char 
 10206 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
 10207 ;; Auto vars:     Size  Location     Type
 10208 ;;  idx             1   79[COMRAM] unsigned char 
 10209 ;;  data            3   76[COMRAM] unsigned char [3]
 10210 ;; Return value:  Size  Location     Type
 10211 ;;		None               void
 10212 ;; Registers used:
 10213 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10214 ;; Tracked objects:
 10215 ;;		On entry : F/0
 10216 ;;		On exit  : F/0
 10217 ;;		Unchanged: 0/0
 10218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10219 ;;      Params:         0       2       0       0       0       0       0
 10220 ;;      Locals:         4       0       0       0       0       0       0
 10221 ;;      Temps:          2       0       0       0       0       0       0
 10222 ;;      Totals:         6       2       0       0       0       0       0
 10223 ;;Total ram usage:        8 bytes
 10224 ;; Hardware stack levels used:    1
 10225 ;; Hardware stack levels required when called:    6
 10226 ;; This function calls:
 10227 ;;		_readEEPROM
 10228 ;;		_sendVSCPFrame
 10229 ;; This function is called by:
 10230 ;;		_doApplicationOneSecondWork
 10231 ;;		_vscp_writeAppReg
 10232 ;;		_doActionOn
 10233 ;;		_doActionOff
 10234 ;;		_doActionStatus
 10235 ;;		_doActionToggle
 10236 ;; This function uses a non-reentrant model
 10237 ;;
 10238                           
 10239                           	psect	text26
 10240  003CB0                     __ptext26:
 10241                           	opt stack 0
 10242  003CB0                     _SendInformationEvent:
 10243                           	opt stack 23
 10244                           
 10245                           ;incstack = 0
 10246                           ;incstack = 0
 10247                           ;SendInformationEvent@idx stored from wreg
 10248  003CB0  CFE8 F050          	movff	wreg,SendInformationEvent@idx
 10249                           
 10250                           ; BSR set to: 0
 10251                           ;main.c: 1565: uint8_t data[3];
 10252                           ;main.c: 1578: data[ 0 ] = idx;
 10253  003CB4  C050  F04D         	movff	SendInformationEvent@idx,SendInformationEvent@data
 10254                           
 10255                           ; BSR set to: 0
 10256                           ;main.c: 1579: data[ 1 ] = readEEPROM( 0x43 + 50 + 2*idx );
 10257  003CB8  90D8               	bcf	status,0,c
 10258  003CBA  3450               	rlcf	SendInformationEvent@idx,w,c
 10259  003CBC  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10260  003CBE  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10261  003CC0  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10262  003CC2  0E75               	movlw	117
 10263  003CC4  244B               	addwf	??_SendInformationEvent,w,c
 10264  003CC6  6E08               	movwf	?_readEEPROM,c
 10265  003CC8  0E00               	movlw	0
 10266  003CCA  204C               	addwfc	??_SendInformationEvent+1,w,c
 10267  003CCC  6E09               	movwf	?_readEEPROM+1,c
 10268  003CCE  ECEF  F020         	call	_readEEPROM	;wreg free
 10269  003CD2  6E4E               	movwf	SendInformationEvent@data+1,c
 10270                           
 10271                           ;main.c: 1580: data[ 2 ] = readEEPROM( 0x43 + 51 + 2*idx );
 10272  003CD4  90D8               	bcf	status,0,c
 10273  003CD6  3450               	rlcf	SendInformationEvent@idx,w,c
 10274  003CD8  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10275  003CDA  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10276  003CDC  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10277  003CDE  0E76               	movlw	118
 10278  003CE0  244B               	addwf	??_SendInformationEvent,w,c
 10279  003CE2  6E08               	movwf	?_readEEPROM,c
 10280  003CE4  0E00               	movlw	0
 10281  003CE6  204C               	addwfc	??_SendInformationEvent+1,w,c
 10282  003CE8  6E09               	movwf	?_readEEPROM+1,c
 10283  003CEA  ECEF  F020         	call	_readEEPROM	;wreg free
 10284  003CEE  6E4F               	movwf	SendInformationEvent@data+2,c
 10285                           
 10286                           ;main.c: 1581: sendVSCPFrame( eventClass,
 10287                           ;main.c: 1582: eventTypeId,
 10288                           ;main.c: 1583: vscp_nickname,
 10289                           ;main.c: 1584: 0x03,
 10290                           ;main.c: 1585: 3,
 10291                           ;main.c: 1586: data );
 10292  003CF0  0100               	movlb	0	; () banked
 10293  003CF2  C0C5  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
 10294  003CF6  6A40               	clrf	?_sendVSCPFrame+1,c
 10295  003CF8  C0C6  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
 10296  003CFC  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 10297  003D00  0E03               	movlw	3
 10298  003D02  6E43               	movwf	?_sendVSCPFrame+4,c
 10299  003D04  6E44               	movwf	?_sendVSCPFrame+5,c
 10300  003D06  0E4D               	movlw	low SendInformationEvent@data
 10301  003D08  6E45               	movwf	?_sendVSCPFrame+6,c
 10302  003D0A  0E00               	movlw	high SendInformationEvent@data
 10303  003D0C  6E46               	movwf	?_sendVSCPFrame+7,c
 10304  003D0E  0E0F               	movlw	15
 10305  003D10  6E46               	movwf	?_sendVSCPFrame+7,c
 10306  003D12  0E5F               	movlw	__accesstop+-1
 10307  003D14  6445               	cpfsgt	?_sendVSCPFrame+6,c
 10308  003D16  6A46               	clrf	?_sendVSCPFrame+7,c
 10309  003D18  EFAA  F01C         	goto	_sendVSCPFrame	;wreg free
 10310  003D1C                     __end_of_SendInformationEvent:
 10311                           	opt stack 0
 10312                           tblptru	equ	0xFF8
 10313                           prodh	equ	0xFF4
 10314                           prodl	equ	0xFF3
 10315                           postinc0	equ	0xFEE
 10316                           wreg	equ	0xFE8
 10317                           indf2	equ	0xFDF
 10318                           postinc2	equ	0xFDE
 10319                           postdec2	equ	0xFDD
 10320                           fsr2h	equ	0xFDA
 10321                           fsr2l	equ	0xFD9
 10322                           status	equ	0xFD8
 10323                           
 10324 ;; *************** function _vscp_readRegister *****************
 10325 ;; Defined at:
 10326 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 10327 ;; Parameters:    Size  Location     Type
 10328 ;;  reg             1    wreg     unsigned char 
 10329 ;; Auto vars:     Size  Location     Type
 10330 ;;  reg             1   28[COMRAM] unsigned char 
 10331 ;; Return value:  Size  Location     Type
 10332 ;;                  1    wreg      unsigned char 
 10333 ;; Registers used:
 10334 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10335 ;; Tracked objects:
 10336 ;;		On entry : F/0
 10337 ;;		On exit  : 0/0
 10338 ;;		Unchanged: 0/0
 10339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10340 ;;      Params:         0       0       0       0       0       0       0
 10341 ;;      Locals:         1       0       0       0       0       0       0
 10342 ;;      Temps:          0       0       0       0       0       0       0
 10343 ;;      Totals:         1       0       0       0       0       0       0
 10344 ;;Total ram usage:        1 bytes
 10345 ;; Hardware stack levels used:    1
 10346 ;; Hardware stack levels required when called:    5
 10347 ;; This function calls:
 10348 ;;		_vscp_readAppReg
 10349 ;;		_vscp_readStdReg
 10350 ;; This function is called by:
 10351 ;;		_vscp_handleProtocolEvent
 10352 ;; This function uses a non-reentrant model
 10353 ;;
 10354                           
 10355                           	psect	text27
 10356  0040E0                     __ptext27:
 10357                           	opt stack 0
 10358  0040E0                     _vscp_readRegister:
 10359                           	opt stack 24
 10360                           
 10361                           ; BSR set to: 0
 10362                           ;incstack = 0
 10363                           ;incstack = 0
 10364                           ;vscp_readRegister@reg stored from wreg
 10365  0040E0  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
 10366                           
 10367                           ; BSR set to: 0
 10368                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 10369  0040E4  0E7F               	movlw	127
 10370  0040E6  641D               	cpfsgt	vscp_readRegister@reg,c
 10371  0040E8  D004               	goto	l9007
 10372                           
 10373                           ; BSR set to: 0
 10374                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 10375  0040EA  501D               	movf	vscp_readRegister@reg,w,c
 10376  0040EC  EC7A  F016         	call	_vscp_readStdReg
 10377  0040F0  D003               	goto	l1111
 10378  0040F2                     l9007:
 10379                           
 10380                           ; BSR set to: 0
 10381                           ;vscp_firmware.c: 565: else {
 10382                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 10383  0040F2  501D               	movf	vscp_readRegister@reg,w,c
 10384  0040F4  EC05  F01D         	call	_vscp_readAppReg
 10385  0040F8                     l1111:
 10386  0040F8  0012               	return	
 10387  0040FA                     __end_of_vscp_readRegister:
 10388                           	opt stack 0
 10389                           tblptru	equ	0xFF8
 10390                           prodh	equ	0xFF4
 10391                           prodl	equ	0xFF3
 10392                           postinc0	equ	0xFEE
 10393                           wreg	equ	0xFE8
 10394                           indf2	equ	0xFDF
 10395                           postinc2	equ	0xFDE
 10396                           postdec2	equ	0xFDD
 10397                           fsr2h	equ	0xFDA
 10398                           fsr2l	equ	0xFD9
 10399                           status	equ	0xFD8
 10400                           
 10401 ;; *************** function _vscp_readStdReg *****************
 10402 ;; Defined at:
 10403 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 10404 ;; Parameters:    Size  Location     Type
 10405 ;;  reg             1    wreg     unsigned char 
 10406 ;; Auto vars:     Size  Location     Type
 10407 ;;  reg             1   27[COMRAM] unsigned char 
 10408 ;;  code            4   20[COMRAM] unsigned long 
 10409 ;;  idx             1   25[COMRAM] unsigned char 
 10410 ;;  code            4   16[COMRAM] unsigned long 
 10411 ;;  idx             1   24[COMRAM] unsigned char 
 10412 ;;  rv              1   26[COMRAM] unsigned char 
 10413 ;; Return value:  Size  Location     Type
 10414 ;;                  1    wreg      unsigned char 
 10415 ;; Registers used:
 10416 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10417 ;; Tracked objects:
 10418 ;;		On entry : F/0
 10419 ;;		On exit  : 0/0
 10420 ;;		Unchanged: 0/0
 10421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10422 ;;      Params:         0       0       0       0       0       0       0
 10423 ;;      Locals:        12       0       0       0       0       0       0
 10424 ;;      Temps:          5       0       0       0       0       0       0
 10425 ;;      Totals:        17       0       0       0       0       0       0
 10426 ;;Total ram usage:       17 bytes
 10427 ;; Hardware stack levels used:    1
 10428 ;; Hardware stack levels required when called:    4
 10429 ;; This function calls:
 10430 ;;		_vscp_getMajorVersion
 10431 ;;		_vscp_getMinorVersion
 10432 ;;		_vscp_getSubMinorVersion
 10433 ;;		_vscp_getGUID
 10434 ;;		_vscp_getMDF_URL
 10435 ;;		_vscp_getUserID
 10436 ;;		_vscp_getManufacturerId
 10437 ;;		_vscp_getBootLoaderAlgorithm
 10438 ;;		_vscp_getBufferSize
 10439 ;;		_vscp_getFamilyCode
 10440 ;;		_vscp_getFamilyType
 10441 ;;		_vscp_getRegisterPagesUsed
 10442 ;; This function is called by:
 10443 ;;		_vscp_readRegister
 10444 ;;		_vscp_handleProtocolEvent
 10445 ;; This function uses a non-reentrant model
 10446 ;;
 10447                           
 10448                           	psect	text28
 10449  002CF4                     __ptext28:
 10450                           	opt stack 0
 10451  002CF4                     _vscp_readStdReg:
 10452                           	opt stack 25
 10453                           
 10454                           ;incstack = 0
 10455                           ;incstack = 0
 10456                           ;vscp_readStdReg@reg stored from wreg
 10457  002CF4  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
 10458                           
 10459                           ; BSR set to: 0
 10460                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 10461  002CF8  6A1B               	clrf	vscp_readStdReg@rv,c
 10462                           
 10463                           ; BSR set to: 0
 10464                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 10465  002CFA  501C               	movf	vscp_readStdReg@reg,w,c
 10466  002CFC  0A80               	xorlw	128
 10467  002CFE  E104               	bnz	l9017
 10468                           
 10469                           ; BSR set to: 0
 10470                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 10471  002D00  C08C  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 10472                           
 10473                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 10474  002D04  6B8C               	clrf	_vscp_alarmstatus& (0+255),b
 10475                           
 10476                           ;vscp_firmware.c: 584: }
 10477  002D06  D0CB               	goto	l9105
 10478  002D08                     l9017:
 10479                           
 10480                           ; BSR set to: 0
 10481                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 10482  002D08  501C               	movf	vscp_readStdReg@reg,w,c
 10483  002D0A  0A81               	xorlw	129
 10484  002D0C  E102               	bnz	l9021
 10485                           
 10486                           ; BSR set to: 0
 10487                           ;vscp_firmware.c: 588: rv = 1;
 10488  002D0E  0E01               	movlw	1
 10489  002D10  D081               	goto	L37
 10490  002D12                     l9021:
 10491                           
 10492                           ; BSR set to: 0
 10493                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 10494  002D12  501C               	movf	vscp_readStdReg@reg,w,c
 10495  002D14  0A82               	xorlw	130
 10496  002D16  E102               	bnz	l9025
 10497                           
 10498                           ; BSR set to: 0
 10499                           ;vscp_firmware.c: 594: rv = 5;
 10500  002D18  0E05               	movlw	5
 10501  002D1A  D07C               	goto	L37
 10502  002D1C                     l9025:
 10503                           
 10504                           ; BSR set to: 0
 10505                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 10506  002D1C  501C               	movf	vscp_readStdReg@reg,w,c
 10507  002D1E  0A83               	xorlw	131
 10508  002D20  E102               	bnz	l9029
 10509                           
 10510                           ; BSR set to: 0
 10511                           ;vscp_firmware.c: 600: rv = 0;
 10512  002D22  6A1B               	clrf	vscp_readStdReg@rv,c
 10513                           
 10514                           ;vscp_firmware.c: 602: }
 10515  002D24  D0BC               	goto	l9105
 10516  002D26                     l9029:
 10517                           
 10518                           ; BSR set to: 0
 10519                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 10520  002D26  501C               	movf	vscp_readStdReg@reg,w,c
 10521  002D28  0A94               	xorlw	148
 10522  002D2A  E103               	bnz	l9033
 10523                           
 10524                           ; BSR set to: 0
 10525                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 10526  002D2C  EC2B  F021         	call	_vscp_getMajorVersion	;wreg free
 10527  002D30  D071               	goto	L37
 10528  002D32                     l9033:
 10529                           
 10530                           ; BSR set to: 0
 10531                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 10532  002D32  501C               	movf	vscp_readStdReg@reg,w,c
 10533  002D34  0A95               	xorlw	149
 10534  002D36  E103               	bnz	l9037
 10535                           
 10536                           ; BSR set to: 0
 10537                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 10538  002D38  EC2A  F021         	call	_vscp_getMinorVersion	;wreg free
 10539  002D3C  D06B               	goto	L37
 10540  002D3E                     l9037:
 10541                           
 10542                           ; BSR set to: 0
 10543                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 10544  002D3E  501C               	movf	vscp_readStdReg@reg,w,c
 10545  002D40  0A96               	xorlw	150
 10546  002D42  E103               	bnz	l9041
 10547                           
 10548                           ; BSR set to: 0
 10549                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 10550  002D44  EC29  F021         	call	_vscp_getSubMinorVersion	;wreg free
 10551  002D48  D065               	goto	L37
 10552  002D4A                     l9041:
 10553                           
 10554                           ; BSR set to: 0
 10555                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 10556  002D4A  0E89               	movlw	137
 10557  002D4C  601C               	cpfslt	vscp_readStdReg@reg,c
 10558  002D4E  D005               	goto	l9045
 10559                           
 10560                           ; BSR set to: 0
 10561                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 10562  002D50  501C               	movf	vscp_readStdReg@reg,w,c
 10563  002D52  0F7C               	addlw	124
 10564  002D54  ECB7  F020         	call	_vscp_getUserID
 10565  002D58  D05D               	goto	L37
 10566  002D5A                     l9045:
 10567                           
 10568                           ; BSR set to: 0
 10569                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 10570                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 10571  002D5A  0E88               	movlw	136
 10572  002D5C  641C               	cpfsgt	vscp_readStdReg@reg,c
 10573  002D5E  D008               	goto	l9051
 10574                           
 10575                           ; BSR set to: 0
 10576  002D60  0E91               	movlw	145
 10577  002D62  601C               	cpfslt	vscp_readStdReg@reg,c
 10578  002D64  D005               	goto	l9051
 10579                           
 10580                           ; BSR set to: 0
 10581                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 10582  002D66  501C               	movf	vscp_readStdReg@reg,w,c
 10583  002D68  0F77               	addlw	119
 10584  002D6A  ECAD  F020         	call	_vscp_getManufacturerId
 10585  002D6E  D052               	goto	L37
 10586  002D70                     l9051:
 10587                           
 10588                           ; BSR set to: 0
 10589                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 10590  002D70  501C               	movf	vscp_readStdReg@reg,w,c
 10591  002D72  0A91               	xorlw	145
 10592  002D74  E103               	bnz	l9055
 10593                           
 10594                           ; BSR set to: 0
 10595                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 10596  002D76  C091  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
 10597                           
 10598                           ;vscp_firmware.c: 639: }
 10599  002D7A  D091               	goto	l9105
 10600  002D7C                     l9055:
 10601                           
 10602                           ; BSR set to: 0
 10603                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 10604  002D7C  501C               	movf	vscp_readStdReg@reg,w,c
 10605  002D7E  0A93               	xorlw	147
 10606  002D80  E103               	bnz	l9059
 10607                           
 10608                           ; BSR set to: 0
 10609                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 10610  002D82  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
 10611                           
 10612                           ;vscp_firmware.c: 645: }
 10613  002D86  D08B               	goto	l9105
 10614  002D88                     l9059:
 10615                           
 10616                           ; BSR set to: 0
 10617                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 10618  002D88  501C               	movf	vscp_readStdReg@reg,w,c
 10619  002D8A  0A92               	xorlw	146
 10620  002D8C  E102               	bnz	l9063
 10621                           
 10622                           ; BSR set to: 0
 10623                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 10624  002D8E  5053               	movf	_vscp_page_select+1,w,c
 10625  002D90  D041               	goto	L37
 10626  002D92                     l9063:
 10627                           
 10628                           ; BSR set to: 0
 10629                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 10630  002D92  501C               	movf	vscp_readStdReg@reg,w,c
 10631  002D94  0A97               	xorlw	151
 10632  002D96  E103               	bnz	l9067
 10633                           
 10634                           ; BSR set to: 0
 10635                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 10636  002D98  EC28  F021         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 10637  002D9C  D03B               	goto	L37
 10638  002D9E                     l9067:
 10639                           
 10640                           ; BSR set to: 0
 10641                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 10642  002D9E  501C               	movf	vscp_readStdReg@reg,w,c
 10643  002DA0  0A98               	xorlw	152
 10644  002DA2  E103               	bnz	l9071
 10645                           
 10646                           ; BSR set to: 0
 10647                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 10648  002DA4  EC27  F021         	call	_vscp_getBufferSize	;wreg free
 10649  002DA8  D035               	goto	L37
 10650  002DAA                     l9071:
 10651                           
 10652                           ; BSR set to: 0
 10653                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 10654  002DAA  501C               	movf	vscp_readStdReg@reg,w,c
 10655  002DAC  0A99               	xorlw	153
 10656  002DAE  E103               	bnz	l9075
 10657                           
 10658                           ; BSR set to: 0
 10659                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 10660  002DB0  EC26  F021         	call	_vscp_getRegisterPagesUsed	;wreg free
 10661  002DB4  D02F               	goto	L37
 10662  002DB6                     l9075:
 10663                           
 10664                           ; BSR set to: 0
 10665                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 10666                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 10667  002DB6  0E99               	movlw	153
 10668  002DB8  641C               	cpfsgt	vscp_readStdReg@reg,c
 10669  002DBA  D02E               	goto	l9085
 10670                           
 10671                           ; BSR set to: 0
 10672  002DBC  0E9E               	movlw	158
 10673  002DBE  601C               	cpfslt	vscp_readStdReg@reg,c
 10674  002DC0  D02B               	goto	l9085
 10675                           
 10676                           ; BSR set to: 0
 10677                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 10678  002DC2  EC10  F021         	call	_vscp_getFamilyCode	;wreg free
 10679  002DC6  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 10680  002DCA  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 10681  002DCE  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 10682  002DD2  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 10683                           
 10684                           ; BSR set to: 0
 10685                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 10686  002DD6  501C               	movf	vscp_readStdReg@reg,w,c
 10687  002DD8  0F66               	addlw	102
 10688  002DDA  6E19               	movwf	vscp_readStdReg@idx,c
 10689                           
 10690                           ; BSR set to: 0
 10691                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 10692  002DDC  5019               	movf	vscp_readStdReg@idx,w,c
 10693  002DDE  0803               	sublw	3
 10694  002DE0  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 10695  002DE2  90D8               	bcf	status,0,c
 10696  002DE4  360C               	rlcf	??_vscp_readStdReg,f,c
 10697  002DE6  90D8               	bcf	status,0,c
 10698  002DE8  360C               	rlcf	??_vscp_readStdReg,f,c
 10699  002DEA  90D8               	bcf	status,0,c
 10700  002DEC  360C               	rlcf	??_vscp_readStdReg,f,c
 10701  002DEE  500C               	movf	??_vscp_readStdReg,w,c
 10702  002DF0  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 10703  002DF4  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 10704  002DF8  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 10705  002DFC  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 10706  002E00  2AE8               	incf	wreg,f,c
 10707  002E02  D005               	goto	u11050
 10708  002E04                     u11055:
 10709  002E04  90D8               	bcf	status,0,c
 10710  002E06  3210               	rrcf	??_vscp_readStdReg+4,f,c
 10711  002E08  320F               	rrcf	??_vscp_readStdReg+3,f,c
 10712  002E0A  320E               	rrcf	??_vscp_readStdReg+2,f,c
 10713  002E0C  320D               	rrcf	??_vscp_readStdReg+1,f,c
 10714  002E0E                     u11050:
 10715  002E0E  2EE8               	decfsz	wreg,f,c
 10716  002E10  D7F9               	goto	u11055
 10717  002E12  D030               	goto	L38
 10718  002E14                     L37:
 10719  002E14  6E1B               	movwf	vscp_readStdReg@rv,c
 10720                           
 10721                           ;vscp_firmware.c: 671: }
 10722  002E16  D043               	goto	l9105
 10723  002E18                     l9085:
 10724                           
 10725                           ; BSR set to: 0
 10726                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 10727                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 10728  002E18  0E9D               	movlw	157
 10729  002E1A  641C               	cpfsgt	vscp_readStdReg@reg,c
 10730  002E1C  D02D               	goto	l9095
 10731                           
 10732                           ; BSR set to: 0
 10733  002E1E  0EA2               	movlw	162
 10734  002E20  601C               	cpfslt	vscp_readStdReg@reg,c
 10735  002E22  D02A               	goto	l9095
 10736                           
 10737                           ; BSR set to: 0
 10738                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 10739  002E24  EC0B  F021         	call	_vscp_getFamilyType	;wreg free
 10740  002E28  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1263+3
 10741  002E2C  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1263+2
 10742  002E30  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1263+1
 10743  002E34  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1263
 10744                           
 10745                           ; BSR set to: 0
 10746                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 10747  002E38  501C               	movf	vscp_readStdReg@reg,w,c
 10748  002E3A  0F62               	addlw	98
 10749  002E3C  6E1A               	movwf	vscp_readStdReg@idx_1264,c
 10750                           
 10751                           ; BSR set to: 0
 10752                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 10753  002E3E  501A               	movf	vscp_readStdReg@idx_1264,w,c
 10754  002E40  0803               	sublw	3
 10755  002E42  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 10756  002E44  90D8               	bcf	status,0,c
 10757  002E46  360C               	rlcf	??_vscp_readStdReg,f,c
 10758  002E48  90D8               	bcf	status,0,c
 10759  002E4A  360C               	rlcf	??_vscp_readStdReg,f,c
 10760  002E4C  90D8               	bcf	status,0,c
 10761  002E4E  360C               	rlcf	??_vscp_readStdReg,f,c
 10762  002E50  500C               	movf	??_vscp_readStdReg,w,c
 10763  002E52  C015  F00D         	movff	vscp_readStdReg@code_1263,??_vscp_readStdReg+1
 10764  002E56  C016  F00E         	movff	vscp_readStdReg@code_1263+1,??_vscp_readStdReg+2
 10765  002E5A  C017  F00F         	movff	vscp_readStdReg@code_1263+2,??_vscp_readStdReg+3
 10766  002E5E  C018  F010         	movff	vscp_readStdReg@code_1263+3,??_vscp_readStdReg+4
 10767  002E62  2AE8               	incf	wreg,f,c
 10768  002E64  D005               	goto	u11080
 10769  002E66                     u11085:
 10770  002E66  90D8               	bcf	status,0,c
 10771  002E68  3210               	rrcf	??_vscp_readStdReg+4,f,c
 10772  002E6A  320F               	rrcf	??_vscp_readStdReg+3,f,c
 10773  002E6C  320E               	rrcf	??_vscp_readStdReg+2,f,c
 10774  002E6E  320D               	rrcf	??_vscp_readStdReg+1,f,c
 10775  002E70                     u11080:
 10776  002E70  2EE8               	decfsz	wreg,f,c
 10777  002E72  D7F9               	goto	u11085
 10778  002E74                     L38:
 10779  002E74  500D               	movf	??_vscp_readStdReg+1,w,c
 10780  002E76  D7CE               	goto	L37
 10781  002E78                     l9095:
 10782                           
 10783                           ; BSR set to: 0
 10784                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 10785                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 10786  002E78  0ECF               	movlw	207
 10787  002E7A  641C               	cpfsgt	vscp_readStdReg@reg,c
 10788  002E7C  D008               	goto	l9101
 10789                           
 10790                           ; BSR set to: 0
 10791  002E7E  0EE0               	movlw	224
 10792  002E80  601C               	cpfslt	vscp_readStdReg@reg,c
 10793  002E82  D005               	goto	l9101
 10794                           
 10795                           ; BSR set to: 0
 10796                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 10797  002E84  501C               	movf	vscp_readStdReg@reg,w,c
 10798  002E86  0F30               	addlw	48
 10799  002E88  ECC1  F020         	call	_vscp_getGUID
 10800  002E8C  D7C3               	goto	L37
 10801  002E8E                     l9101:
 10802                           
 10803                           ; BSR set to: 0
 10804                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 10805  002E8E  0EDF               	movlw	223
 10806  002E90  641C               	cpfsgt	vscp_readStdReg@reg,c
 10807  002E92  D005               	goto	l9105
 10808                           
 10809                           ; BSR set to: 0
 10810                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 10811  002E94  501C               	movf	vscp_readStdReg@reg,w,c
 10812  002E96  0F20               	addlw	32
 10813  002E98  EC89  F020         	call	_vscp_getMDF_URL
 10814  002E9C  D7BB               	goto	L37
 10815  002E9E                     l9105:
 10816                           
 10817                           ;vscp_firmware.c: 691: }
 10818                           ;vscp_firmware.c: 693: return rv;
 10819  002E9E  501B               	movf	vscp_readStdReg@rv,w,c
 10820  002EA0  0012               	return	
 10821  002EA2                     __end_of_vscp_readStdReg:
 10822                           	opt stack 0
 10823                           tblptru	equ	0xFF8
 10824                           prodh	equ	0xFF4
 10825                           prodl	equ	0xFF3
 10826                           postinc0	equ	0xFEE
 10827                           wreg	equ	0xFE8
 10828                           indf2	equ	0xFDF
 10829                           postinc2	equ	0xFDE
 10830                           postdec2	equ	0xFDD
 10831                           fsr2h	equ	0xFDA
 10832                           fsr2l	equ	0xFD9
 10833                           status	equ	0xFD8
 10834                           
 10835 ;; *************** function _vscp_getRegisterPagesUsed *****************
 10836 ;; Defined at:
 10837 ;;		line 2491 in file "../main.c"
 10838 ;; Parameters:    Size  Location     Type
 10839 ;;		None
 10840 ;; Auto vars:     Size  Location     Type
 10841 ;;		None
 10842 ;; Return value:  Size  Location     Type
 10843 ;;                  1    wreg      unsigned char 
 10844 ;; Registers used:
 10845 ;;		wreg
 10846 ;; Tracked objects:
 10847 ;;		On entry : F/0
 10848 ;;		On exit  : F/0
 10849 ;;		Unchanged: F/0
 10850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10851 ;;      Params:         0       0       0       0       0       0       0
 10852 ;;      Locals:         0       0       0       0       0       0       0
 10853 ;;      Temps:          0       0       0       0       0       0       0
 10854 ;;      Totals:         0       0       0       0       0       0       0
 10855 ;;Total ram usage:        0 bytes
 10856 ;; Hardware stack levels used:    1
 10857 ;; Hardware stack levels required when called:    2
 10858 ;; This function calls:
 10859 ;;		Nothing
 10860 ;; This function is called by:
 10861 ;;		_vscp_readStdReg
 10862 ;; This function uses a non-reentrant model
 10863 ;;
 10864                           
 10865                           	psect	text29
 10866  00424C                     __ptext29:
 10867                           	opt stack 0
 10868  00424C                     _vscp_getRegisterPagesUsed:
 10869                           	opt stack 26
 10870                           
 10871                           ; BSR set to: 0
 10872                           
 10873                           ; BSR set to: 0
 10874                           ;main.c: 2492: return 1;
 10875                           
 10876                           ;incstack = 0
 10877                           ;incstack = 0
 10878  00424C  0C01               	retlw	1
 10879  00424E                     __end_of_vscp_getRegisterPagesUsed:
 10880                           	opt stack 0
 10881                           tblptru	equ	0xFF8
 10882                           prodh	equ	0xFF4
 10883                           prodl	equ	0xFF3
 10884                           postinc0	equ	0xFEE
 10885                           wreg	equ	0xFE8
 10886                           indf2	equ	0xFDF
 10887                           postinc2	equ	0xFDE
 10888                           postdec2	equ	0xFDD
 10889                           fsr2h	equ	0xFDA
 10890                           fsr2l	equ	0xFD9
 10891                           status	equ	0xFD8
 10892                           
 10893 ;; *************** function _vscp_getFamilyType *****************
 10894 ;; Defined at:
 10895 ;;		line 2472 in file "../main.c"
 10896 ;; Parameters:    Size  Location     Type
 10897 ;;		None
 10898 ;; Auto vars:     Size  Location     Type
 10899 ;;		None
 10900 ;; Return value:  Size  Location     Type
 10901 ;;                  4    7[COMRAM] unsigned long 
 10902 ;; Registers used:
 10903 ;;		None
 10904 ;; Tracked objects:
 10905 ;;		On entry : F/0
 10906 ;;		On exit  : F/0
 10907 ;;		Unchanged: F/0
 10908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10909 ;;      Params:         4       0       0       0       0       0       0
 10910 ;;      Locals:         0       0       0       0       0       0       0
 10911 ;;      Temps:          0       0       0       0       0       0       0
 10912 ;;      Totals:         4       0       0       0       0       0       0
 10913 ;;Total ram usage:        4 bytes
 10914 ;; Hardware stack levels used:    1
 10915 ;; Hardware stack levels required when called:    2
 10916 ;; This function calls:
 10917 ;;		Nothing
 10918 ;; This function is called by:
 10919 ;;		_vscp_readStdReg
 10920 ;; This function uses a non-reentrant model
 10921 ;;
 10922                           
 10923                           	psect	text30
 10924  004216                     __ptext30:
 10925                           	opt stack 0
 10926  004216                     _vscp_getFamilyType:
 10927                           	opt stack 26
 10928                           
 10929                           ; BSR set to: 0
 10930                           ;main.c: 2473: return 0;
 10931                           
 10932                           ; BSR set to: 0
 10933                           ;incstack = 0
 10934                           ;incstack = 0
 10935  004216  6A08               	clrf	?_vscp_getFamilyType,c
 10936  004218  6A09               	clrf	?_vscp_getFamilyType+1,c
 10937  00421A  6A0A               	clrf	?_vscp_getFamilyType+2,c
 10938  00421C  6A0B               	clrf	?_vscp_getFamilyType+3,c
 10939                           
 10940                           ; BSR set to: 0
 10941  00421E  0012               	return	
 10942  004220                     __end_of_vscp_getFamilyType:
 10943                           	opt stack 0
 10944                           tblptru	equ	0xFF8
 10945                           prodh	equ	0xFF4
 10946                           prodl	equ	0xFF3
 10947                           postinc0	equ	0xFEE
 10948                           wreg	equ	0xFE8
 10949                           indf2	equ	0xFDF
 10950                           postinc2	equ	0xFDE
 10951                           postdec2	equ	0xFDD
 10952                           fsr2h	equ	0xFDA
 10953                           fsr2l	equ	0xFD9
 10954                           status	equ	0xFD8
 10955                           
 10956 ;; *************** function _vscp_getFamilyCode *****************
 10957 ;; Defined at:
 10958 ;;		line 2463 in file "../main.c"
 10959 ;; Parameters:    Size  Location     Type
 10960 ;;		None
 10961 ;; Auto vars:     Size  Location     Type
 10962 ;;		None
 10963 ;; Return value:  Size  Location     Type
 10964 ;;                  4    7[COMRAM] unsigned long 
 10965 ;; Registers used:
 10966 ;;		None
 10967 ;; Tracked objects:
 10968 ;;		On entry : F/0
 10969 ;;		On exit  : F/0
 10970 ;;		Unchanged: F/0
 10971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10972 ;;      Params:         4       0       0       0       0       0       0
 10973 ;;      Locals:         0       0       0       0       0       0       0
 10974 ;;      Temps:          0       0       0       0       0       0       0
 10975 ;;      Totals:         4       0       0       0       0       0       0
 10976 ;;Total ram usage:        4 bytes
 10977 ;; Hardware stack levels used:    1
 10978 ;; Hardware stack levels required when called:    2
 10979 ;; This function calls:
 10980 ;;		Nothing
 10981 ;; This function is called by:
 10982 ;;		_vscp_readStdReg
 10983 ;; This function uses a non-reentrant model
 10984 ;;
 10985                           
 10986                           	psect	text31
 10987  004220                     __ptext31:
 10988                           	opt stack 0
 10989  004220                     _vscp_getFamilyCode:
 10990                           	opt stack 26
 10991                           
 10992                           ; BSR set to: 0
 10993                           ;main.c: 2464: return 0L;
 10994                           
 10995                           ; BSR set to: 0
 10996                           ;incstack = 0
 10997                           ;incstack = 0
 10998  004220  6A08               	clrf	?_vscp_getFamilyCode,c
 10999  004222  6A09               	clrf	?_vscp_getFamilyCode+1,c
 11000  004224  6A0A               	clrf	?_vscp_getFamilyCode+2,c
 11001  004226  6A0B               	clrf	?_vscp_getFamilyCode+3,c
 11002                           
 11003                           ; BSR set to: 0
 11004  004228  0012               	return	
 11005  00422A                     __end_of_vscp_getFamilyCode:
 11006                           	opt stack 0
 11007                           tblptru	equ	0xFF8
 11008                           prodh	equ	0xFF4
 11009                           prodl	equ	0xFF3
 11010                           postinc0	equ	0xFEE
 11011                           wreg	equ	0xFE8
 11012                           indf2	equ	0xFDF
 11013                           postinc2	equ	0xFDE
 11014                           postdec2	equ	0xFDD
 11015                           fsr2h	equ	0xFDA
 11016                           fsr2l	equ	0xFD9
 11017                           status	equ	0xFD8
 11018                           
 11019 ;; *************** function _vscp_getBufferSize *****************
 11020 ;; Defined at:
 11021 ;;		line 2324 in file "../main.c"
 11022 ;; Parameters:    Size  Location     Type
 11023 ;;		None
 11024 ;; Auto vars:     Size  Location     Type
 11025 ;;		None
 11026 ;; Return value:  Size  Location     Type
 11027 ;;                  1    wreg      unsigned char 
 11028 ;; Registers used:
 11029 ;;		wreg
 11030 ;; Tracked objects:
 11031 ;;		On entry : F/0
 11032 ;;		On exit  : F/0
 11033 ;;		Unchanged: F/0
 11034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11035 ;;      Params:         0       0       0       0       0       0       0
 11036 ;;      Locals:         0       0       0       0       0       0       0
 11037 ;;      Temps:          0       0       0       0       0       0       0
 11038 ;;      Totals:         0       0       0       0       0       0       0
 11039 ;;Total ram usage:        0 bytes
 11040 ;; Hardware stack levels used:    1
 11041 ;; Hardware stack levels required when called:    2
 11042 ;; This function calls:
 11043 ;;		Nothing
 11044 ;; This function is called by:
 11045 ;;		_vscp_readStdReg
 11046 ;; This function uses a non-reentrant model
 11047 ;;
 11048                           
 11049                           	psect	text32
 11050  00424E                     __ptext32:
 11051                           	opt stack 0
 11052  00424E                     _vscp_getBufferSize:
 11053                           	opt stack 26
 11054                           
 11055                           ; BSR set to: 0
 11056                           
 11057                           ; BSR set to: 0
 11058                           ;main.c: 2325: return 8;
 11059                           
 11060                           ; BSR set to: 0
 11061                           ;incstack = 0
 11062                           ;incstack = 0
 11063  00424E  0C08               	retlw	8
 11064  004250                     __end_of_vscp_getBufferSize:
 11065                           	opt stack 0
 11066                           tblptru	equ	0xFF8
 11067                           prodh	equ	0xFF4
 11068                           prodl	equ	0xFF3
 11069                           postinc0	equ	0xFEE
 11070                           wreg	equ	0xFE8
 11071                           indf2	equ	0xFDF
 11072                           postinc2	equ	0xFDE
 11073                           postdec2	equ	0xFDD
 11074                           fsr2h	equ	0xFDA
 11075                           fsr2l	equ	0xFD9
 11076                           status	equ	0xFD8
 11077                           
 11078 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 11079 ;; Defined at:
 11080 ;;		line 2315 in file "../main.c"
 11081 ;; Parameters:    Size  Location     Type
 11082 ;;		None
 11083 ;; Auto vars:     Size  Location     Type
 11084 ;;		None
 11085 ;; Return value:  Size  Location     Type
 11086 ;;                  1    wreg      unsigned char 
 11087 ;; Registers used:
 11088 ;;		wreg
 11089 ;; Tracked objects:
 11090 ;;		On entry : F/0
 11091 ;;		On exit  : F/0
 11092 ;;		Unchanged: F/0
 11093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11094 ;;      Params:         0       0       0       0       0       0       0
 11095 ;;      Locals:         0       0       0       0       0       0       0
 11096 ;;      Temps:          0       0       0       0       0       0       0
 11097 ;;      Totals:         0       0       0       0       0       0       0
 11098 ;;Total ram usage:        0 bytes
 11099 ;; Hardware stack levels used:    1
 11100 ;; Hardware stack levels required when called:    2
 11101 ;; This function calls:
 11102 ;;		Nothing
 11103 ;; This function is called by:
 11104 ;;		_vscp_readStdReg
 11105 ;; This function uses a non-reentrant model
 11106 ;;
 11107                           
 11108                           	psect	text33
 11109  004250                     __ptext33:
 11110                           	opt stack 0
 11111  004250                     _vscp_getBootLoaderAlgorithm:
 11112                           	opt stack 26
 11113                           
 11114                           ; BSR set to: 0
 11115                           
 11116                           ; BSR set to: 0
 11117                           ;main.c: 2316: return 0x01;
 11118                           
 11119                           ; BSR set to: 0
 11120                           ;incstack = 0
 11121                           ;incstack = 0
 11122  004250  0C01               	retlw	1
 11123  004252                     __end_of_vscp_getBootLoaderAlgorithm:
 11124                           	opt stack 0
 11125                           tblptru	equ	0xFF8
 11126                           prodh	equ	0xFF4
 11127                           prodl	equ	0xFF3
 11128                           postinc0	equ	0xFEE
 11129                           wreg	equ	0xFE8
 11130                           indf2	equ	0xFDF
 11131                           postinc2	equ	0xFDE
 11132                           postdec2	equ	0xFDD
 11133                           fsr2h	equ	0xFDA
 11134                           fsr2l	equ	0xFD9
 11135                           status	equ	0xFD8
 11136                           
 11137 ;; *************** function _vscp_getManufacturerId *****************
 11138 ;; Defined at:
 11139 ;;		line 2306 in file "../main.c"
 11140 ;; Parameters:    Size  Location     Type
 11141 ;;  idx             1    wreg     unsigned char 
 11142 ;; Auto vars:     Size  Location     Type
 11143 ;;  idx             1   10[COMRAM] unsigned char 
 11144 ;; Return value:  Size  Location     Type
 11145 ;;                  1    wreg      unsigned char 
 11146 ;; Registers used:
 11147 ;;		wreg, status,2, status,0, cstack
 11148 ;; Tracked objects:
 11149 ;;		On entry : 0/0
 11150 ;;		On exit  : 0/0
 11151 ;;		Unchanged: 0/0
 11152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11153 ;;      Params:         0       0       0       0       0       0       0
 11154 ;;      Locals:         1       0       0       0       0       0       0
 11155 ;;      Temps:          0       0       0       0       0       0       0
 11156 ;;      Totals:         1       0       0       0       0       0       0
 11157 ;;Total ram usage:        1 bytes
 11158 ;; Hardware stack levels used:    1
 11159 ;; Hardware stack levels required when called:    3
 11160 ;; This function calls:
 11161 ;;		_readEEPROM
 11162 ;; This function is called by:
 11163 ;;		_vscp_readStdReg
 11164 ;;		_vscp_writeStdReg
 11165 ;; This function uses a non-reentrant model
 11166 ;;
 11167                           
 11168                           	psect	text34
 11169  00415A                     __ptext34:
 11170                           	opt stack 0
 11171  00415A                     _vscp_getManufacturerId:
 11172                           	opt stack 25
 11173                           
 11174                           ; BSR set to: 0
 11175                           ;incstack = 0
 11176                           ;incstack = 0
 11177                           ;vscp_getManufacturerId@idx stored from wreg
 11178  00415A  CFE8 F00B          	movff	wreg,vscp_getManufacturerId@idx
 11179                           
 11180                           ;main.c: 2307: return readEEPROM( 0x0B + idx );
 11181  00415E  0E0B               	movlw	11
 11182  004160  240B               	addwf	vscp_getManufacturerId@idx,w,c
 11183  004162  6E08               	movwf	?_readEEPROM,c
 11184  004164  6A09               	clrf	?_readEEPROM+1,c
 11185  004166  0E00               	movlw	0
 11186  004168  2209               	addwfc	?_readEEPROM+1,f,c
 11187  00416A  EFEF  F020         	goto	_readEEPROM	;wreg free
 11188  00416E                     __end_of_vscp_getManufacturerId:
 11189                           	opt stack 0
 11190                           tblptru	equ	0xFF8
 11191                           prodh	equ	0xFF4
 11192                           prodl	equ	0xFF3
 11193                           postinc0	equ	0xFEE
 11194                           wreg	equ	0xFE8
 11195                           indf2	equ	0xFDF
 11196                           postinc2	equ	0xFDE
 11197                           postdec2	equ	0xFDD
 11198                           fsr2h	equ	0xFDA
 11199                           fsr2l	equ	0xFD9
 11200                           status	equ	0xFD8
 11201                           
 11202 ;; *************** function _vscp_getUserID *****************
 11203 ;; Defined at:
 11204 ;;		line 2286 in file "../main.c"
 11205 ;; Parameters:    Size  Location     Type
 11206 ;;  idx             1    wreg     unsigned char 
 11207 ;; Auto vars:     Size  Location     Type
 11208 ;;  idx             1   10[COMRAM] unsigned char 
 11209 ;; Return value:  Size  Location     Type
 11210 ;;                  1    wreg      unsigned char 
 11211 ;; Registers used:
 11212 ;;		wreg, status,2, status,0, cstack
 11213 ;; Tracked objects:
 11214 ;;		On entry : 0/0
 11215 ;;		On exit  : 0/0
 11216 ;;		Unchanged: 0/0
 11217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11218 ;;      Params:         0       0       0       0       0       0       0
 11219 ;;      Locals:         1       0       0       0       0       0       0
 11220 ;;      Temps:          0       0       0       0       0       0       0
 11221 ;;      Totals:         1       0       0       0       0       0       0
 11222 ;;Total ram usage:        1 bytes
 11223 ;; Hardware stack levels used:    1
 11224 ;; Hardware stack levels required when called:    3
 11225 ;; This function calls:
 11226 ;;		_readEEPROM
 11227 ;; This function is called by:
 11228 ;;		_vscp_readStdReg
 11229 ;;		_vscp_writeStdReg
 11230 ;; This function uses a non-reentrant model
 11231 ;;
 11232                           
 11233                           	psect	text35
 11234  00416E                     __ptext35:
 11235                           	opt stack 0
 11236  00416E                     _vscp_getUserID:
 11237                           	opt stack 25
 11238                           
 11239                           ;incstack = 0
 11240                           ;incstack = 0
 11241                           ;vscp_getUserID@idx stored from wreg
 11242  00416E  CFE8 F00B          	movff	wreg,vscp_getUserID@idx
 11243                           
 11244                           ;main.c: 2287: return readEEPROM( 0x06 + idx );
 11245  004172  0E06               	movlw	6
 11246  004174  240B               	addwf	vscp_getUserID@idx,w,c
 11247  004176  6E08               	movwf	?_readEEPROM,c
 11248  004178  6A09               	clrf	?_readEEPROM+1,c
 11249  00417A  0E00               	movlw	0
 11250  00417C  2209               	addwfc	?_readEEPROM+1,f,c
 11251  00417E  EFEF  F020         	goto	_readEEPROM	;wreg free
 11252  004182                     __end_of_vscp_getUserID:
 11253                           	opt stack 0
 11254                           tblptru	equ	0xFF8
 11255                           prodh	equ	0xFF4
 11256                           prodl	equ	0xFF3
 11257                           postinc0	equ	0xFEE
 11258                           wreg	equ	0xFE8
 11259                           indf2	equ	0xFDF
 11260                           postinc2	equ	0xFDE
 11261                           postdec2	equ	0xFDD
 11262                           fsr2h	equ	0xFDA
 11263                           fsr2l	equ	0xFD9
 11264                           status	equ	0xFD8
 11265                           
 11266 ;; *************** function _vscp_getMDF_URL *****************
 11267 ;; Defined at:
 11268 ;;		line 2277 in file "../main.c"
 11269 ;; Parameters:    Size  Location     Type
 11270 ;;  idx             1    wreg     unsigned char 
 11271 ;; Auto vars:     Size  Location     Type
 11272 ;;  idx             1    8[COMRAM] unsigned char 
 11273 ;; Return value:  Size  Location     Type
 11274 ;;                  1    wreg      unsigned char 
 11275 ;; Registers used:
 11276 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11277 ;; Tracked objects:
 11278 ;;		On entry : F/0
 11279 ;;		On exit  : F/0
 11280 ;;		Unchanged: F/0
 11281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11282 ;;      Params:         0       0       0       0       0       0       0
 11283 ;;      Locals:         1       0       0       0       0       0       0
 11284 ;;      Temps:          1       0       0       0       0       0       0
 11285 ;;      Totals:         2       0       0       0       0       0       0
 11286 ;;Total ram usage:        2 bytes
 11287 ;; Hardware stack levels used:    1
 11288 ;; Hardware stack levels required when called:    2
 11289 ;; This function calls:
 11290 ;;		Nothing
 11291 ;; This function is called by:
 11292 ;;		_vscp_readStdReg
 11293 ;;		_vscp_handleProtocolEvent
 11294 ;; This function uses a non-reentrant model
 11295 ;;
 11296                           
 11297                           	psect	text36
 11298  004112                     __ptext36:
 11299                           	opt stack 0
 11300  004112                     _vscp_getMDF_URL:
 11301                           	opt stack 26
 11302                           
 11303                           ;incstack = 0
 11304                           ;incstack = 0
 11305                           ;vscp_getMDF_URL@idx stored from wreg
 11306  004112  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 11307                           
 11308                           ; BSR set to: 0
 11309                           ;main.c: 2278: return vscp_deviceURL[ idx ];
 11310  004116  5009               	movf	vscp_getMDF_URL@idx,w,c
 11311  004118  0FBA               	addlw	low _vscp_deviceURL
 11312  00411A  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 11313  00411C  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 11314  004120  0E08               	movlw	high __smallconst
 11315  004122  6EF7               	movwf	tblptrh,c
 11316  004124  0008               	tblrd		*
 11317  004126  50F5               	movf	tablat,w,c
 11318                           
 11319                           ; BSR set to: 0
 11320  004128  0012               	return	
 11321  00412A                     __end_of_vscp_getMDF_URL:
 11322                           	opt stack 0
 11323                           tblptru	equ	0xFF8
 11324                           tblptrh	equ	0xFF7
 11325                           tblptrl	equ	0xFF6
 11326                           tablat	equ	0xFF5
 11327                           prodh	equ	0xFF4
 11328                           prodl	equ	0xFF3
 11329                           postinc0	equ	0xFEE
 11330                           wreg	equ	0xFE8
 11331                           indf2	equ	0xFDF
 11332                           postinc2	equ	0xFDE
 11333                           postdec2	equ	0xFDD
 11334                           fsr2h	equ	0xFDA
 11335                           fsr2l	equ	0xFD9
 11336                           status	equ	0xFD8
 11337                           
 11338 ;; *************** function _vscp_getGUID *****************
 11339 ;; Defined at:
 11340 ;;		line 2265 in file "../main.c"
 11341 ;; Parameters:    Size  Location     Type
 11342 ;;  idx             1    wreg     unsigned char 
 11343 ;; Auto vars:     Size  Location     Type
 11344 ;;  idx             1   10[COMRAM] unsigned char 
 11345 ;; Return value:  Size  Location     Type
 11346 ;;                  1    wreg      unsigned char 
 11347 ;; Registers used:
 11348 ;;		wreg, status,2, status,0, cstack
 11349 ;; Tracked objects:
 11350 ;;		On entry : 0/0
 11351 ;;		On exit  : 0/0
 11352 ;;		Unchanged: 0/0
 11353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11354 ;;      Params:         0       0       0       0       0       0       0
 11355 ;;      Locals:         1       0       0       0       0       0       0
 11356 ;;      Temps:          0       0       0       0       0       0       0
 11357 ;;      Totals:         1       0       0       0       0       0       0
 11358 ;;Total ram usage:        1 bytes
 11359 ;; Hardware stack levels used:    1
 11360 ;; Hardware stack levels required when called:    3
 11361 ;; This function calls:
 11362 ;;		_readEEPROM
 11363 ;; This function is called by:
 11364 ;;		_vscp_readStdReg
 11365 ;;		_vscp_writeStdReg
 11366 ;;		_vscp_handleProtocolEvent
 11367 ;; This function uses a non-reentrant model
 11368 ;;
 11369                           
 11370                           	psect	text37
 11371  004182                     __ptext37:
 11372                           	opt stack 0
 11373  004182                     _vscp_getGUID:
 11374                           	opt stack 25
 11375                           
 11376                           ; BSR set to: 0
 11377                           ;incstack = 0
 11378                           ;incstack = 0
 11379                           ;vscp_getGUID@idx stored from wreg
 11380  004182  CFE8 F00B          	movff	wreg,vscp_getGUID@idx
 11381                           
 11382                           ;main.c: 2266: return readEEPROM( 0x13 + idx );
 11383  004186  0E13               	movlw	19
 11384  004188  240B               	addwf	vscp_getGUID@idx,w,c
 11385  00418A  6E08               	movwf	?_readEEPROM,c
 11386  00418C  6A09               	clrf	?_readEEPROM+1,c
 11387  00418E  0E00               	movlw	0
 11388  004190  2209               	addwfc	?_readEEPROM+1,f,c
 11389  004192  EFEF  F020         	goto	_readEEPROM	;wreg free
 11390  004196                     __end_of_vscp_getGUID:
 11391                           	opt stack 0
 11392                           tblptru	equ	0xFF8
 11393                           tblptrh	equ	0xFF7
 11394                           tblptrl	equ	0xFF6
 11395                           tablat	equ	0xFF5
 11396                           prodh	equ	0xFF4
 11397                           prodl	equ	0xFF3
 11398                           postinc0	equ	0xFEE
 11399                           wreg	equ	0xFE8
 11400                           indf2	equ	0xFDF
 11401                           postinc2	equ	0xFDE
 11402                           postdec2	equ	0xFDD
 11403                           fsr2h	equ	0xFDA
 11404                           fsr2l	equ	0xFD9
 11405                           status	equ	0xFD8
 11406                           
 11407 ;; *************** function _vscp_getSubMinorVersion *****************
 11408 ;; Defined at:
 11409 ;;		line 2254 in file "../main.c"
 11410 ;; Parameters:    Size  Location     Type
 11411 ;;		None
 11412 ;; Auto vars:     Size  Location     Type
 11413 ;;		None
 11414 ;; Return value:  Size  Location     Type
 11415 ;;                  1    wreg      unsigned char 
 11416 ;; Registers used:
 11417 ;;		wreg
 11418 ;; Tracked objects:
 11419 ;;		On entry : F/0
 11420 ;;		On exit  : F/0
 11421 ;;		Unchanged: F/0
 11422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11423 ;;      Params:         0       0       0       0       0       0       0
 11424 ;;      Locals:         0       0       0       0       0       0       0
 11425 ;;      Temps:          0       0       0       0       0       0       0
 11426 ;;      Totals:         0       0       0       0       0       0       0
 11427 ;;Total ram usage:        0 bytes
 11428 ;; Hardware stack levels used:    1
 11429 ;; Hardware stack levels required when called:    2
 11430 ;; This function calls:
 11431 ;;		Nothing
 11432 ;; This function is called by:
 11433 ;;		_vscp_readStdReg
 11434 ;; This function uses a non-reentrant model
 11435 ;;
 11436                           
 11437                           	psect	text38
 11438  004252                     __ptext38:
 11439                           	opt stack 0
 11440  004252                     _vscp_getSubMinorVersion:
 11441                           	opt stack 26
 11442                           
 11443                           ; BSR set to: 0
 11444                           
 11445                           ; BSR set to: 0
 11446                           ;main.c: 2255: return 0;
 11447                           
 11448                           ;incstack = 0
 11449                           ;incstack = 0
 11450  004252  0C00               	retlw	0
 11451  004254                     __end_of_vscp_getSubMinorVersion:
 11452                           	opt stack 0
 11453                           tblptru	equ	0xFF8
 11454                           tblptrh	equ	0xFF7
 11455                           tblptrl	equ	0xFF6
 11456                           tablat	equ	0xFF5
 11457                           prodh	equ	0xFF4
 11458                           prodl	equ	0xFF3
 11459                           postinc0	equ	0xFEE
 11460                           wreg	equ	0xFE8
 11461                           indf2	equ	0xFDF
 11462                           postinc2	equ	0xFDE
 11463                           postdec2	equ	0xFDD
 11464                           fsr2h	equ	0xFDA
 11465                           fsr2l	equ	0xFD9
 11466                           status	equ	0xFD8
 11467                           
 11468 ;; *************** function _vscp_getMinorVersion *****************
 11469 ;; Defined at:
 11470 ;;		line 2245 in file "../main.c"
 11471 ;; Parameters:    Size  Location     Type
 11472 ;;		None
 11473 ;; Auto vars:     Size  Location     Type
 11474 ;;		None
 11475 ;; Return value:  Size  Location     Type
 11476 ;;                  1    wreg      unsigned char 
 11477 ;; Registers used:
 11478 ;;		wreg
 11479 ;; Tracked objects:
 11480 ;;		On entry : F/0
 11481 ;;		On exit  : F/0
 11482 ;;		Unchanged: F/0
 11483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11484 ;;      Params:         0       0       0       0       0       0       0
 11485 ;;      Locals:         0       0       0       0       0       0       0
 11486 ;;      Temps:          0       0       0       0       0       0       0
 11487 ;;      Totals:         0       0       0       0       0       0       0
 11488 ;;Total ram usage:        0 bytes
 11489 ;; Hardware stack levels used:    1
 11490 ;; Hardware stack levels required when called:    2
 11491 ;; This function calls:
 11492 ;;		Nothing
 11493 ;; This function is called by:
 11494 ;;		_vscp_readStdReg
 11495 ;; This function uses a non-reentrant model
 11496 ;;
 11497                           
 11498                           	psect	text39
 11499  004254                     __ptext39:
 11500                           	opt stack 0
 11501  004254                     _vscp_getMinorVersion:
 11502                           	opt stack 26
 11503                           
 11504                           ; BSR set to: 0
 11505                           
 11506                           ; BSR set to: 0
 11507                           ;main.c: 2246: return 1;
 11508                           
 11509                           ; BSR set to: 0
 11510                           ;incstack = 0
 11511                           ;incstack = 0
 11512  004254  0C01               	retlw	1
 11513  004256                     __end_of_vscp_getMinorVersion:
 11514                           	opt stack 0
 11515                           tblptru	equ	0xFF8
 11516                           tblptrh	equ	0xFF7
 11517                           tblptrl	equ	0xFF6
 11518                           tablat	equ	0xFF5
 11519                           prodh	equ	0xFF4
 11520                           prodl	equ	0xFF3
 11521                           postinc0	equ	0xFEE
 11522                           wreg	equ	0xFE8
 11523                           indf2	equ	0xFDF
 11524                           postinc2	equ	0xFDE
 11525                           postdec2	equ	0xFDD
 11526                           fsr2h	equ	0xFDA
 11527                           fsr2l	equ	0xFD9
 11528                           status	equ	0xFD8
 11529                           
 11530 ;; *************** function _vscp_getMajorVersion *****************
 11531 ;; Defined at:
 11532 ;;		line 2236 in file "../main.c"
 11533 ;; Parameters:    Size  Location     Type
 11534 ;;		None
 11535 ;; Auto vars:     Size  Location     Type
 11536 ;;		None
 11537 ;; Return value:  Size  Location     Type
 11538 ;;                  1    wreg      unsigned char 
 11539 ;; Registers used:
 11540 ;;		wreg
 11541 ;; Tracked objects:
 11542 ;;		On entry : F/0
 11543 ;;		On exit  : F/0
 11544 ;;		Unchanged: F/0
 11545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11546 ;;      Params:         0       0       0       0       0       0       0
 11547 ;;      Locals:         0       0       0       0       0       0       0
 11548 ;;      Temps:          0       0       0       0       0       0       0
 11549 ;;      Totals:         0       0       0       0       0       0       0
 11550 ;;Total ram usage:        0 bytes
 11551 ;; Hardware stack levels used:    1
 11552 ;; Hardware stack levels required when called:    2
 11553 ;; This function calls:
 11554 ;;		Nothing
 11555 ;; This function is called by:
 11556 ;;		_vscp_readStdReg
 11557 ;; This function uses a non-reentrant model
 11558 ;;
 11559                           
 11560                           	psect	text40
 11561  004256                     __ptext40:
 11562                           	opt stack 0
 11563  004256                     _vscp_getMajorVersion:
 11564                           	opt stack 26
 11565                           
 11566                           ; BSR set to: 0
 11567                           
 11568                           ; BSR set to: 0
 11569                           ;main.c: 2237: return 1;
 11570                           
 11571                           ; BSR set to: 0
 11572                           ;incstack = 0
 11573                           ;incstack = 0
 11574  004256  0C01               	retlw	1
 11575  004258                     __end_of_vscp_getMajorVersion:
 11576                           	opt stack 0
 11577                           tblptru	equ	0xFF8
 11578                           tblptrh	equ	0xFF7
 11579                           tblptrl	equ	0xFF6
 11580                           tablat	equ	0xFF5
 11581                           prodh	equ	0xFF4
 11582                           prodl	equ	0xFF3
 11583                           postinc0	equ	0xFEE
 11584                           wreg	equ	0xFE8
 11585                           indf2	equ	0xFDF
 11586                           postinc2	equ	0xFDE
 11587                           postdec2	equ	0xFDD
 11588                           fsr2h	equ	0xFDA
 11589                           fsr2l	equ	0xFD9
 11590                           status	equ	0xFD8
 11591                           
 11592 ;; *************** function _vscp_newNodeOnline *****************
 11593 ;; Defined at:
 11594 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 11595 ;; Parameters:    Size  Location     Type
 11596 ;;		None
 11597 ;; Auto vars:     Size  Location     Type
 11598 ;;		None
 11599 ;; Return value:  Size  Location     Type
 11600 ;;		None               void
 11601 ;; Registers used:
 11602 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11603 ;; Tracked objects:
 11604 ;;		On entry : F/0
 11605 ;;		On exit  : F/0
 11606 ;;		Unchanged: 0/0
 11607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11608 ;;      Params:         0       0       0       0       0       0       0
 11609 ;;      Locals:         0       0       0       0       0       0       0
 11610 ;;      Temps:          1       0       0       0       0       0       0
 11611 ;;      Totals:         1       0       0       0       0       0       0
 11612 ;;Total ram usage:        1 bytes
 11613 ;; Hardware stack levels used:    1
 11614 ;; Hardware stack levels required when called:    7
 11615 ;; This function calls:
 11616 ;;		_vscp_sendEvent
 11617 ;; This function is called by:
 11618 ;;		_vscp_handleProtocolEvent
 11619 ;; This function uses a non-reentrant model
 11620 ;;
 11621                           
 11622                           	psect	text41
 11623  003EC6                     __ptext41:
 11624                           	opt stack 0
 11625  003EC6                     _vscp_newNodeOnline:
 11626                           	opt stack 22
 11627                           
 11628                           ; BSR set to: 0
 11629                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 11630                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11631                           
 11632                           ; BSR set to: 0
 11633                           ;incstack = 0
 11634                           ;incstack = 0
 11635  003EC6  C096  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 11636  003ECA  0E0F               	movlw	15
 11637  003ECC  164C               	andwf	??_vscp_newNodeOnline,f,c
 11638  003ECE  044C               	decf	??_vscp_newNodeOnline,w,c
 11639  003ED0  E10E               	bnz	l1098
 11640                           
 11641                           ; BSR set to: 0
 11642  003ED2  5191               	movf	_vscp_nickname& (0+255),w,b
 11643  003ED4  EE20  F09C         	lfsr	2,_vscp_imsg+6
 11644  003ED8  62DF               	cpfseq	indf2,c
 11645  003EDA  D009               	goto	l1098
 11646                           
 11647                           ; BSR set to: 0
 11648                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 11649  003EDC  0E80               	movlw	128
 11650  003EDE  6FA4               	movwf	_vscp_omsg& (0+255),b
 11651                           
 11652                           ; BSR set to: 0
 11653                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 11654  003EE0  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 11655                           
 11656                           ; BSR set to: 0
 11657                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 11658  003EE2  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 11659  003EE4  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 11660                           
 11661                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 11662  003EE6  0E03               	movlw	3
 11663  003EE8  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 11664                           
 11665                           ; BSR set to: 0
 11666                           ;vscp_firmware.c: 514: vscp_sendEvent();
 11667  003EEA  ECB4  F01F         	call	_vscp_sendEvent	;wreg free
 11668  003EEE                     l1098:
 11669                           
 11670                           ; BSR set to: 0
 11671  003EEE  0012               	return	
 11672  003EF0                     __end_of_vscp_newNodeOnline:
 11673                           	opt stack 0
 11674                           tblptru	equ	0xFF8
 11675                           tblptrh	equ	0xFF7
 11676                           tblptrl	equ	0xFF6
 11677                           tablat	equ	0xFF5
 11678                           prodh	equ	0xFF4
 11679                           prodl	equ	0xFF3
 11680                           postinc0	equ	0xFEE
 11681                           wreg	equ	0xFE8
 11682                           indf2	equ	0xFDF
 11683                           postinc2	equ	0xFDE
 11684                           postdec2	equ	0xFDD
 11685                           fsr2h	equ	0xFDA
 11686                           fsr2l	equ	0xFD9
 11687                           status	equ	0xFD8
 11688                           
 11689 ;; *************** function _vscp_handleDropNickname *****************
 11690 ;; Defined at:
 11691 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 11692 ;; Parameters:    Size  Location     Type
 11693 ;;		None
 11694 ;; Auto vars:     Size  Location     Type
 11695 ;;  bytes           1   11[COMRAM] unsigned char 
 11696 ;; Return value:  Size  Location     Type
 11697 ;;		None               void
 11698 ;; Registers used:
 11699 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11700 ;; Tracked objects:
 11701 ;;		On entry : F/0
 11702 ;;		On exit  : F/0
 11703 ;;		Unchanged: 0/0
 11704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11705 ;;      Params:         0       0       0       0       0       0       0
 11706 ;;      Locals:         1       0       0       0       0       0       0
 11707 ;;      Temps:          0       0       0       0       0       0       0
 11708 ;;      Totals:         1       0       0       0       0       0       0
 11709 ;;Total ram usage:        1 bytes
 11710 ;; Hardware stack levels used:    1
 11711 ;; Hardware stack levels required when called:    5
 11712 ;; This function calls:
 11713 ;;		_vscp_init
 11714 ;;		_vscp_writeNicknamePermanent
 11715 ;; This function is called by:
 11716 ;;		_vscp_handleProtocolEvent
 11717 ;; This function uses a non-reentrant model
 11718 ;;
 11719                           
 11720                           	psect	text42
 11721  003E6A                     __ptext42:
 11722                           	opt stack 0
 11723  003E6A                     _vscp_handleDropNickname:
 11724                           	opt stack 24
 11725                           
 11726                           ; BSR set to: 0
 11727                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 11728                           
 11729                           ; BSR set to: 0
 11730                           ;incstack = 0
 11731                           ;incstack = 0
 11732  003E6A  5196               	movf	_vscp_imsg& (0+255),w,b
 11733  003E6C  0B0F               	andlw	15
 11734  003E6E  6E0C               	movwf	vscp_handleDropNickname@bytes,c
 11735                           
 11736                           ; BSR set to: 0
 11737                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11738  003E70  500C               	movf	vscp_handleDropNickname@bytes,w,c
 11739  003E72  E012               	bz	l1094
 11740                           
 11741                           ; BSR set to: 0
 11742  003E74  5191               	movf	_vscp_nickname& (0+255),w,b
 11743  003E76  EE20  F09C         	lfsr	2,_vscp_imsg+6
 11744  003E7A  62DF               	cpfseq	indf2,c
 11745  003E7C  D00D               	goto	l1094
 11746                           
 11747                           ; BSR set to: 0
 11748                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 11749  003E7E  040C               	decf	vscp_handleDropNickname@bytes,w,c
 11750  003E80  E005               	bz	l1093
 11751                           
 11752                           ; BSR set to: 0
 11753  003E82  0E01               	movlw	1
 11754  003E84  640C               	cpfsgt	vscp_handleDropNickname@bytes,c
 11755  003E86  D008               	goto	l1094
 11756                           
 11757                           ; BSR set to: 0
 11758  003E88  679D               	tstfsz	(_vscp_imsg+7)& (0+255),b
 11759  003E8A  D006               	goto	l1094
 11760  003E8C                     l1093:
 11761                           
 11762                           ; BSR set to: 0
 11763                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 11764  003E8C  6991               	setf	_vscp_nickname& (0+255),b
 11765                           
 11766                           ; BSR set to: 0
 11767                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 11768  003E8E  0EFF               	movlw	255
 11769  003E90  ECDD  F020         	call	_vscp_writeNicknamePermanent
 11770                           
 11771                           ;vscp_firmware.c: 481: vscp_init();
 11772  003E94  ECB5  F01E         	call	_vscp_init	;wreg free
 11773  003E98                     l1094:
 11774                           
 11775                           ; BSR set to: 0
 11776  003E98  0012               	return	
 11777  003E9A                     __end_of_vscp_handleDropNickname:
 11778                           	opt stack 0
 11779                           tblptru	equ	0xFF8
 11780                           tblptrh	equ	0xFF7
 11781                           tblptrl	equ	0xFF6
 11782                           tablat	equ	0xFF5
 11783                           prodh	equ	0xFF4
 11784                           prodl	equ	0xFF3
 11785                           postinc0	equ	0xFEE
 11786                           wreg	equ	0xFE8
 11787                           indf2	equ	0xFDF
 11788                           postinc2	equ	0xFDE
 11789                           postdec2	equ	0xFDD
 11790                           fsr2h	equ	0xFDA
 11791                           fsr2l	equ	0xFD9
 11792                           status	equ	0xFD8
 11793                           
 11794 ;; *************** function _vscp_init *****************
 11795 ;; Defined at:
 11796 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 11797 ;; Parameters:    Size  Location     Type
 11798 ;;		None
 11799 ;; Auto vars:     Size  Location     Type
 11800 ;;		None
 11801 ;; Return value:  Size  Location     Type
 11802 ;;		None               void
 11803 ;; Registers used:
 11804 ;;		wreg, status,2, cstack
 11805 ;; Tracked objects:
 11806 ;;		On entry : 0/0
 11807 ;;		On exit  : F/0
 11808 ;;		Unchanged: 0/0
 11809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11810 ;;      Params:         0       0       0       0       0       0       0
 11811 ;;      Locals:         0       0       0       0       0       0       0
 11812 ;;      Temps:          0       0       0       0       0       0       0
 11813 ;;      Totals:         0       0       0       0       0       0       0
 11814 ;;Total ram usage:        0 bytes
 11815 ;; Hardware stack levels used:    1
 11816 ;; Hardware stack levels required when called:    4
 11817 ;; This function calls:
 11818 ;;		_vscp_readNicknamePermanent
 11819 ;; This function is called by:
 11820 ;;		_main
 11821 ;;		_vscp_handleDropNickname
 11822 ;;		_vscp_handleProtocolEvent
 11823 ;; This function uses a non-reentrant model
 11824 ;;
 11825                           
 11826                           	psect	text43
 11827  003D6A                     __ptext43:
 11828                           	opt stack 0
 11829  003D6A                     _vscp_init:
 11830                           	opt stack 24
 11831                           
 11832                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 11833                           
 11834                           ; BSR set to: 0
 11835                           ;incstack = 0
 11836                           ;incstack = 0
 11837  003D6A  0E02               	movlw	2
 11838  003D6C  6E56               	movwf	_vscp_initledfunc,c
 11839                           
 11840                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 11841  003D6E  EC15  F021         	call	_vscp_readNicknamePermanent	;wreg free
 11842  003D72  0100               	movlb	0	; () banked
 11843  003D74  6F91               	movwf	_vscp_nickname& (0+255),b
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 11847  003D76  6791               	tstfsz	_vscp_nickname& (0+255),b
 11848  003D78  D001               	goto	l1035
 11849                           
 11850                           ; BSR set to: 0
 11851  003D7A  6991               	setf	_vscp_nickname& (0+255),b
 11852  003D7C                     l1035:
 11853                           
 11854                           ; BSR set to: 0
 11855                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 11856  003D7C  6B96               	clrf	_vscp_imsg& (0+255),b
 11857                           
 11858                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 11859  003D7E  6B97               	clrf	(_vscp_imsg+1)& (0+255),b
 11860                           
 11861                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 11862  003D80  6B98               	clrf	(_vscp_imsg+2)& (0+255),b
 11863  003D82  6B99               	clrf	(_vscp_imsg+3)& (0+255),b
 11864                           
 11865                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 11866  003D84  6B9A               	clrf	(_vscp_imsg+4)& (0+255),b
 11867                           
 11868                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 11869  003D86  6BA4               	clrf	_vscp_omsg& (0+255),b
 11870                           
 11871                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 11872  003D88  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 11873                           
 11874                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 11875  003D8A  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 11876  003D8C  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 11877                           
 11878                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 11879  003D8E  6BA8               	clrf	(_vscp_omsg+4)& (0+255),b
 11880                           
 11881                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 11882  003D90  6B8C               	clrf	_vscp_alarmstatus& (0+255),b
 11883                           
 11884                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 11885  003D92  6A57               	clrf	_vscp_probe_address,c
 11886                           
 11887                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 11888  003D94  6B92               	clrf	_vscp_node_state& (0+255),b
 11889                           
 11890                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 11891  003D96  6B93               	clrf	_vscp_node_substate& (0+255),b
 11892                           
 11893                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 11894  003D98  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 11895                           
 11896                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 11897  003D9A  6A52               	clrf	_vscp_page_select,c
 11898  003D9C  6A53               	clrf	_vscp_page_select+1,c
 11899                           
 11900                           ;vscp_firmware.c: 153: vscp_timer = 0;
 11901  003D9E  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 11902  003DA0  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 11903                           
 11904                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 11905  003DA2  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
 11906  003DA4  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 11907                           
 11908                           ;vscp_firmware.c: 155: vscp_second = 0;
 11909  003DA6  6B95               	clrf	_vscp_second& (0+255),b
 11910                           
 11911                           ;vscp_firmware.c: 156: vscp_minute = 0;
 11912  003DA8  6B90               	clrf	_vscp_minute& (0+255),b
 11913                           
 11914                           ;vscp_firmware.c: 157: vscp_hour = 0;
 11915  003DAA  6B8E               	clrf	_vscp_hour& (0+255),b
 11916                           
 11917                           ; BSR set to: 0
 11918  003DAC  0012               	return	
 11919  003DAE                     __end_of_vscp_init:
 11920                           	opt stack 0
 11921                           tblptru	equ	0xFF8
 11922                           tblptrh	equ	0xFF7
 11923                           tblptrl	equ	0xFF6
 11924                           tablat	equ	0xFF5
 11925                           prodh	equ	0xFF4
 11926                           prodl	equ	0xFF3
 11927                           postinc0	equ	0xFEE
 11928                           wreg	equ	0xFE8
 11929                           indf2	equ	0xFDF
 11930                           postinc2	equ	0xFDE
 11931                           postdec2	equ	0xFDD
 11932                           fsr2h	equ	0xFDA
 11933                           fsr2l	equ	0xFD9
 11934                           status	equ	0xFD8
 11935                           
 11936 ;; *************** function _vscp_readNicknamePermanent *****************
 11937 ;; Defined at:
 11938 ;;		line 849 in file "../main.c"
 11939 ;; Parameters:    Size  Location     Type
 11940 ;;		None
 11941 ;; Auto vars:     Size  Location     Type
 11942 ;;		None
 11943 ;; Return value:  Size  Location     Type
 11944 ;;                  1    wreg      unsigned char 
 11945 ;; Registers used:
 11946 ;;		wreg, status,2, cstack
 11947 ;; Tracked objects:
 11948 ;;		On entry : 0/0
 11949 ;;		On exit  : 0/0
 11950 ;;		Unchanged: 0/0
 11951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11952 ;;      Params:         0       0       0       0       0       0       0
 11953 ;;      Locals:         0       0       0       0       0       0       0
 11954 ;;      Temps:          0       0       0       0       0       0       0
 11955 ;;      Totals:         0       0       0       0       0       0       0
 11956 ;;Total ram usage:        0 bytes
 11957 ;; Hardware stack levels used:    1
 11958 ;; Hardware stack levels required when called:    3
 11959 ;; This function calls:
 11960 ;;		_readEEPROM
 11961 ;; This function is called by:
 11962 ;;		_vscp_init
 11963 ;; This function uses a non-reentrant model
 11964 ;;
 11965                           
 11966                           	psect	text44
 11967  00422A                     __ptext44:
 11968                           	opt stack 0
 11969  00422A                     _vscp_readNicknamePermanent:
 11970                           	opt stack 24
 11971                           
 11972                           ;main.c: 850: return readEEPROM( 0x01 );
 11973                           
 11974                           ; BSR set to: 0
 11975                           ;incstack = 0
 11976                           ;incstack = 0
 11977  00422A  6A09               	clrf	?_readEEPROM+1,c
 11978  00422C  0E01               	movlw	1
 11979  00422E  6E08               	movwf	?_readEEPROM,c
 11980  004230  EFEF  F020         	goto	_readEEPROM	;wreg free
 11981  004234                     __end_of_vscp_readNicknamePermanent:
 11982                           	opt stack 0
 11983                           tblptru	equ	0xFF8
 11984                           tblptrh	equ	0xFF7
 11985                           tblptrl	equ	0xFF6
 11986                           tablat	equ	0xFF5
 11987                           prodh	equ	0xFF4
 11988                           prodl	equ	0xFF3
 11989                           postinc0	equ	0xFEE
 11990                           wreg	equ	0xFE8
 11991                           indf2	equ	0xFDF
 11992                           postinc2	equ	0xFDE
 11993                           postdec2	equ	0xFDD
 11994                           fsr2h	equ	0xFDA
 11995                           fsr2l	equ	0xFD9
 11996                           status	equ	0xFD8
 11997                           
 11998 ;; *************** function _vscp_handleSetNickname *****************
 11999 ;; Defined at:
 12000 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 12001 ;; Parameters:    Size  Location     Type
 12002 ;;		None
 12003 ;; Auto vars:     Size  Location     Type
 12004 ;;		None
 12005 ;; Return value:  Size  Location     Type
 12006 ;;		None               void
 12007 ;; Registers used:
 12008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12009 ;; Tracked objects:
 12010 ;;		On entry : F/0
 12011 ;;		On exit  : 0/0
 12012 ;;		Unchanged: 0/0
 12013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12014 ;;      Params:         0       0       0       0       0       0       0
 12015 ;;      Locals:         0       0       0       0       0       0       0
 12016 ;;      Temps:          0       0       0       0       0       0       0
 12017 ;;      Totals:         0       0       0       0       0       0       0
 12018 ;;Total ram usage:        0 bytes
 12019 ;; Hardware stack levels used:    1
 12020 ;; Hardware stack levels required when called:    4
 12021 ;; This function calls:
 12022 ;;		_vscp_writeNicknamePermanent
 12023 ;;		_vscp_setSegmentCRC
 12024 ;; This function is called by:
 12025 ;;		_vscp_handleProtocolEvent
 12026 ;; This function uses a non-reentrant model
 12027 ;;
 12028                           
 12029                           	psect	text45
 12030  003FB4                     __ptext45:
 12031                           	opt stack 0
 12032  003FB4                     _vscp_handleSetNickname:
 12033                           	opt stack 25
 12034                           
 12035                           ; BSR set to: 0
 12036                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 12037                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12038                           
 12039                           ;incstack = 0
 12040                           ;incstack = 0
 12041  003FB4  5196               	movf	_vscp_imsg& (0+255),w,b
 12042  003FB6  0B0F               	andlw	15
 12043  003FB8  0A02               	xorlw	2
 12044  003FBA  E10D               	bnz	l1087
 12045                           
 12046                           ; BSR set to: 0
 12047  003FBC  5191               	movf	_vscp_nickname& (0+255),w,b
 12048  003FBE  EE20  F09C         	lfsr	2,_vscp_imsg+6
 12049  003FC2  62DF               	cpfseq	indf2,c
 12050  003FC4  D008               	goto	l1087
 12051                           
 12052                           ; BSR set to: 0
 12053                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 12054  003FC6  C09D  F091         	movff	_vscp_imsg+7,_vscp_nickname
 12055                           
 12056                           ; BSR set to: 0
 12057                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 12058  003FCA  5191               	movf	_vscp_nickname& (0+255),w,b
 12059  003FCC  ECDD  F020         	call	_vscp_writeNicknamePermanent
 12060                           
 12061                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 12062  003FD0  0E40               	movlw	64
 12063  003FD2  ECD4  F020         	call	_vscp_setSegmentCRC
 12064  003FD6                     l1087:
 12065  003FD6  0012               	return	
 12066  003FD8                     __end_of_vscp_handleSetNickname:
 12067                           	opt stack 0
 12068                           tblptru	equ	0xFF8
 12069                           tblptrh	equ	0xFF7
 12070                           tblptrl	equ	0xFF6
 12071                           tablat	equ	0xFF5
 12072                           prodh	equ	0xFF4
 12073                           prodl	equ	0xFF3
 12074                           postinc0	equ	0xFEE
 12075                           wreg	equ	0xFE8
 12076                           indf2	equ	0xFDF
 12077                           postinc2	equ	0xFDE
 12078                           postdec2	equ	0xFDD
 12079                           fsr2h	equ	0xFDA
 12080                           fsr2l	equ	0xFD9
 12081                           status	equ	0xFD8
 12082                           
 12083 ;; *************** function _vscp_handleHeartbeat *****************
 12084 ;; Defined at:
 12085 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 12086 ;; Parameters:    Size  Location     Type
 12087 ;;		None
 12088 ;; Auto vars:     Size  Location     Type
 12089 ;;		None
 12090 ;; Return value:  Size  Location     Type
 12091 ;;		None               void
 12092 ;; Registers used:
 12093 ;;		wreg, status,2, status,0, cstack
 12094 ;; Tracked objects:
 12095 ;;		On entry : F/0
 12096 ;;		On exit  : 0/0
 12097 ;;		Unchanged: 0/0
 12098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12099 ;;      Params:         0       0       0       0       0       0       0
 12100 ;;      Locals:         0       0       0       0       0       0       0
 12101 ;;      Temps:          0       0       0       0       0       0       0
 12102 ;;      Totals:         0       0       0       0       0       0       0
 12103 ;;Total ram usage:        0 bytes
 12104 ;; Hardware stack levels used:    1
 12105 ;; Hardware stack levels required when called:    4
 12106 ;; This function calls:
 12107 ;;		_vscp_writeNicknamePermanent
 12108 ;;		_vscp_getSegmentCRC
 12109 ;;		_vscp_setSegmentCRC
 12110 ;; This function is called by:
 12111 ;;		_vscp_handleProtocolEvent
 12112 ;; This function uses a non-reentrant model
 12113 ;;
 12114                           
 12115                           	psect	text46
 12116  003DEE                     __ptext46:
 12117                           	opt stack 0
 12118  003DEE                     _vscp_handleHeartbeat:
 12119                           	opt stack 25
 12120                           
 12121                           ; BSR set to: 0
 12122                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 12123                           
 12124                           ;incstack = 0
 12125                           ;incstack = 0
 12126  003DEE  EC1A  F021         	call	_vscp_getSegmentCRC	;wreg free
 12127  003DF2  0900               	iorlw	0
 12128  003DF4  E116               	bnz	l8971
 12129                           
 12130                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 12131                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 12132  003DF6  0100               	movlb	0	; () banked
 12133  003DF8  5196               	movf	_vscp_imsg& (0+255),w,b
 12134  003DFA  0B0F               	andlw	15
 12135  003DFC  0A05               	xorlw	5
 12136  003DFE  E115               	bnz	l1083
 12137                           
 12138                           ; BSR set to: 0
 12139  003E00  EC1A  F021         	call	_vscp_getSegmentCRC	;wreg free
 12140  003E04  0100               	movlb	0	; () banked
 12141  003E06  199C               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 12142  003E08  E010               	bz	l1083
 12143                           
 12144                           ; BSR set to: 0
 12145                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12146  003E0A  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12147  003E0C  ECD4  F020         	call	_vscp_setSegmentCRC
 12148                           
 12149                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 12150  003E10  0100               	movlb	0	; () banked
 12151  003E12  6991               	setf	_vscp_nickname& (0+255),b
 12152                           
 12153                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 12154  003E14  0EFF               	movlw	255
 12155  003E16  ECDD  F020         	call	_vscp_writeNicknamePermanent
 12156                           
 12157                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 12158  003E1A  0E01               	movlw	1
 12159  003E1C  0100               	movlb	0	; () banked
 12160  003E1E  6F92               	movwf	_vscp_node_state& (0+255),b
 12161  003E20  D004               	goto	l1083
 12162  003E22                     l8971:
 12163                           
 12164                           ;vscp_firmware.c: 411: else {
 12165                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12166  003E22  0100               	movlb	0	; () banked
 12167  003E24  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12168  003E26  ECD4  F020         	call	_vscp_setSegmentCRC
 12169  003E2A                     l1083:
 12170  003E2A  0012               	return	
 12171  003E2C                     __end_of_vscp_handleHeartbeat:
 12172                           	opt stack 0
 12173                           tblptru	equ	0xFF8
 12174                           tblptrh	equ	0xFF7
 12175                           tblptrl	equ	0xFF6
 12176                           tablat	equ	0xFF5
 12177                           prodh	equ	0xFF4
 12178                           prodl	equ	0xFF3
 12179                           postinc0	equ	0xFEE
 12180                           wreg	equ	0xFE8
 12181                           indf2	equ	0xFDF
 12182                           postinc2	equ	0xFDE
 12183                           postdec2	equ	0xFDD
 12184                           fsr2h	equ	0xFDA
 12185                           fsr2l	equ	0xFD9
 12186                           status	equ	0xFD8
 12187                           
 12188 ;; *************** function _vscp_getMatrixInfo *****************
 12189 ;; Defined at:
 12190 ;;		line 2446 in file "../main.c"
 12191 ;; Parameters:    Size  Location     Type
 12192 ;;  pData           1    wreg     PTR unsigned char 
 12193 ;;		 -> vscp_omsg(13), 
 12194 ;; Auto vars:     Size  Location     Type
 12195 ;;  pData           1    0[COMRAM] PTR unsigned char 
 12196 ;;		 -> vscp_omsg(13), 
 12197 ;;  i               1    7[COMRAM] unsigned char 
 12198 ;; Return value:  Size  Location     Type
 12199 ;;		None               void
 12200 ;; Registers used:
 12201 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12202 ;; Tracked objects:
 12203 ;;		On entry : F/0
 12204 ;;		On exit  : F/0
 12205 ;;		Unchanged: 0/0
 12206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12207 ;;      Params:         0       0       0       0       0       0       0
 12208 ;;      Locals:         1       0       0       0       0       0       0
 12209 ;;      Temps:          0       0       0       0       0       0       0
 12210 ;;      Totals:         1       0       0       0       0       0       0
 12211 ;;Total ram usage:        1 bytes
 12212 ;; Hardware stack levels used:    1
 12213 ;; Hardware stack levels required when called:    2
 12214 ;; This function calls:
 12215 ;;		Nothing
 12216 ;; This function is called by:
 12217 ;;		_vscp_handleProtocolEvent
 12218 ;; This function uses a non-reentrant model
 12219 ;;
 12220                           
 12221                           	psect	text47
 12222  004084                     __ptext47:
 12223                           	opt stack 0
 12224  004084                     _vscp_getMatrixInfo:
 12225                           	opt stack 27
 12226                           
 12227                           ; BSR set to: 0
 12228                           ;main.c: 2447: uint8_t i;
 12229                           ;main.c: 2449: vscp_omsg.data[ 0 ] = 7;
 12230                           
 12231                           ;incstack = 0
 12232                           ;incstack = 0
 12233  004084  0E07               	movlw	7
 12234  004086  6FA9               	movwf	(_vscp_omsg+5)& (0+255),b
 12235                           
 12236                           ;main.c: 2450: vscp_omsg.data[ 1 ] = 72;
 12237  004088  0E48               	movlw	72
 12238  00408A  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
 12239                           
 12240                           ;main.c: 2453: for ( i = 2; i < 8; i++ ) {
 12241  00408C  0E02               	movlw	2
 12242  00408E  6E08               	movwf	vscp_getMatrixInfo@i,c
 12243  004090                     l6455:
 12244                           
 12245                           ; BSR set to: 0
 12246                           ;main.c: 2454: vscp_omsg.data[ i ] = 0;
 12247  004090  5008               	movf	vscp_getMatrixInfo@i,w,c
 12248  004092  0FA9               	addlw	low (_vscp_omsg+5)
 12249  004094  6ED9               	movwf	fsr2l,c
 12250  004096  6ADA               	clrf	fsr2h,c
 12251  004098  6ADF               	clrf	indf2,c
 12252                           
 12253                           ; BSR set to: 0
 12254  00409A  2A08               	incf	vscp_getMatrixInfo@i,f,c
 12255                           
 12256                           ; BSR set to: 0
 12257  00409C  0E07               	movlw	7
 12258  00409E  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 12259  0040A0  D7F7               	goto	l6455
 12260                           
 12261                           ; BSR set to: 0
 12262  0040A2  0C07               	retlw	7
 12263  0040A4                     __end_of_vscp_getMatrixInfo:
 12264                           	opt stack 0
 12265                           tblptru	equ	0xFF8
 12266                           tblptrh	equ	0xFF7
 12267                           tblptrl	equ	0xFF6
 12268                           tablat	equ	0xFF5
 12269                           prodh	equ	0xFF4
 12270                           prodl	equ	0xFF3
 12271                           postinc0	equ	0xFEE
 12272                           wreg	equ	0xFE8
 12273                           indf2	equ	0xFDF
 12274                           postinc2	equ	0xFDE
 12275                           postdec2	equ	0xFDD
 12276                           fsr2h	equ	0xFDA
 12277                           fsr2l	equ	0xFD9
 12278                           status	equ	0xFD8
 12279                           
 12280 ;; *************** function _vscp_goBootloaderMode *****************
 12281 ;; Defined at:
 12282 ;;		line 2430 in file "../main.c"
 12283 ;; Parameters:    Size  Location     Type
 12284 ;;  algorithm       1    wreg     unsigned char 
 12285 ;; Auto vars:     Size  Location     Type
 12286 ;;  algorithm       1   10[COMRAM] unsigned char 
 12287 ;; Return value:  Size  Location     Type
 12288 ;;		None               void
 12289 ;; Registers used:
 12290 ;;		wreg, status,2, status,0, cstack
 12291 ;; Tracked objects:
 12292 ;;		On entry : F/0
 12293 ;;		On exit  : 0/0
 12294 ;;		Unchanged: 0/0
 12295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12296 ;;      Params:         0       0       0       0       0       0       0
 12297 ;;      Locals:         1       0       0       0       0       0       0
 12298 ;;      Temps:          0       0       0       0       0       0       0
 12299 ;;      Totals:         1       0       0       0       0       0       0
 12300 ;;Total ram usage:        1 bytes
 12301 ;; Hardware stack levels used:    1
 12302 ;; Hardware stack levels required when called:    3
 12303 ;; This function calls:
 12304 ;;		_writeEEPROM
 12305 ;; This function is called by:
 12306 ;;		_vscp_handleProtocolEvent
 12307 ;; This function uses a non-reentrant model
 12308 ;;
 12309                           
 12310                           	psect	text48
 12311  00412A                     __ptext48:
 12312                           	opt stack 0
 12313  00412A                     _vscp_goBootloaderMode:
 12314                           	opt stack 26
 12315                           
 12316                           ; BSR set to: 0
 12317                           ;incstack = 0
 12318                           ;incstack = 0
 12319                           ;vscp_goBootloaderMode@algorithm stored from wreg
 12320  00412A  CFE8 F00B          	movff	wreg,vscp_goBootloaderMode@algorithm
 12321                           
 12322                           ; BSR set to: 0
 12323                           ;main.c: 2431: if ( 0x01 != algorithm ) return;
 12324  00412E  040B               	decf	vscp_goBootloaderMode@algorithm,w,c
 12325  004130  E107               	bnz	l625
 12326                           
 12327                           ; BSR set to: 0
 12328                           ;main.c: 2435: writeEEPROM(0x00, 0xff);
 12329  004132  6A09               	clrf	?_writeEEPROM+1,c
 12330  004134  6A08               	clrf	?_writeEEPROM,c
 12331  004136  0EFF               	movlw	255
 12332  004138  680A               	setf	?_writeEEPROM+2,c
 12333  00413A  ECC7  F01F         	call	_writeEEPROM	;wreg free
 12334  00413E  00FF               	reset		;# 
 12335  004140                     l625:
 12336  004140  0012               	return	
 12337  004142                     __end_of_vscp_goBootloaderMode:
 12338                           	opt stack 0
 12339                           tblptru	equ	0xFF8
 12340                           tblptrh	equ	0xFF7
 12341                           tblptrl	equ	0xFF6
 12342                           tablat	equ	0xFF5
 12343                           prodh	equ	0xFF4
 12344                           prodl	equ	0xFF3
 12345                           postinc0	equ	0xFEE
 12346                           wreg	equ	0xFE8
 12347                           indf2	equ	0xFDF
 12348                           postinc2	equ	0xFDE
 12349                           postdec2	equ	0xFDD
 12350                           fsr2h	equ	0xFDA
 12351                           fsr2l	equ	0xFD9
 12352                           status	equ	0xFD8
 12353                           
 12354 ;; *************** function _vscp_handleProbeState *****************
 12355 ;; Defined at:
 12356 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 12357 ;; Parameters:    Size  Location     Type
 12358 ;;		None
 12359 ;; Auto vars:     Size  Location     Type
 12360 ;;		None
 12361 ;; Return value:  Size  Location     Type
 12362 ;;		None               void
 12363 ;; Registers used:
 12364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12365 ;; Tracked objects:
 12366 ;;		On entry : 0/0
 12367 ;;		On exit  : F/0
 12368 ;;		Unchanged: 0/0
 12369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12370 ;;      Params:         0       0       0       0       0       0       0
 12371 ;;      Locals:         0       0       0       0       0       0       0
 12372 ;;      Temps:          0       0       0       0       0       0       0
 12373 ;;      Totals:         0       0       0       0       0       0       0
 12374 ;;Total ram usage:        0 bytes
 12375 ;; Hardware stack levels used:    1
 12376 ;; Hardware stack levels required when called:    8
 12377 ;; This function calls:
 12378 ;;		_vscp_goActiveState
 12379 ;;		_vscp_writeNicknamePermanent
 12380 ;;		_vscp_sendEvent
 12381 ;;		_vscp_setSegmentCRC
 12382 ;; This function is called by:
 12383 ;;		_main
 12384 ;; This function uses a non-reentrant model
 12385 ;;
 12386                           
 12387                           	psect	text49
 12388  00389A                     __ptext49:
 12389                           	opt stack 0
 12390  00389A                     _vscp_handleProbeState:
 12391                           	opt stack 22
 12392                           
 12393                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 12394                           
 12395                           ;incstack = 0
 12396                           ;incstack = 0
 12397  00389A  D053               	goto	l7393
 12398  00389C                     l7323:
 12399                           
 12400                           ; BSR set to: 0
 12401                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 12402  00389C  2857               	incf	_vscp_probe_address,w,c
 12403  00389E  E010               	bz	l7339
 12404                           
 12405                           ; BSR set to: 0
 12406                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 12407  0038A0  0E81               	movlw	129
 12408  0038A2  6FA4               	movwf	_vscp_omsg& (0+255),b
 12409                           
 12410                           ; BSR set to: 0
 12411                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 12412  0038A4  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12413                           
 12414                           ; BSR set to: 0
 12415                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 12416  0038A6  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12417  0038A8  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12418                           
 12419                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 12420  0038AA  0E02               	movlw	2
 12421  0038AC  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12422                           
 12423                           ; BSR set to: 0
 12424                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 12425  0038AE  C057  F0A9         	movff	_vscp_probe_address,_vscp_omsg+5
 12426                           
 12427                           ; BSR set to: 0
 12428                           ;vscp_firmware.c: 216: vscp_sendEvent();
 12429  0038B2  ECB4  F01F         	call	_vscp_sendEvent	;wreg free
 12430                           
 12431                           ; BSR set to: 0
 12432                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 12433  0038B6  0E01               	movlw	1
 12434  0038B8  6F93               	movwf	_vscp_node_substate& (0+255),b
 12435  0038BA                     l7337:
 12436                           
 12437                           ; BSR set to: 0
 12438                           ;vscp_firmware.c: 219: vscp_timer = 0;
 12439  0038BA  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12440  0038BC  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12441                           
 12442                           ;vscp_firmware.c: 221: }
 12443  0038BE  D048               	goto	l1050
 12444  0038C0                     l7339:
 12445                           
 12446                           ; BSR set to: 0
 12447                           ;vscp_firmware.c: 222: else {
 12448                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 12449  0038C0  0E04               	movlw	4
 12450  0038C2  6F92               	movwf	_vscp_node_state& (0+255),b
 12451                           
 12452                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 12453  0038C4  0E81               	movlw	129
 12454  0038C6  6FA4               	movwf	_vscp_omsg& (0+255),b
 12455                           
 12456                           ; BSR set to: 0
 12457                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 12458  0038C8  69A9               	setf	(_vscp_omsg+5)& (0+255),b
 12459                           
 12460                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 12461  0038CA  0E07               	movlw	7
 12462  0038CC  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
 12463                           
 12464                           ; BSR set to: 0
 12465                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 12466  0038CE  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12467  0038D0  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12468                           
 12469                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 12470  0038D2  0E03               	movlw	3
 12471  0038D4  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12472                           
 12473                           ; BSR set to: 0
 12474                           ;vscp_firmware.c: 235: vscp_sendEvent();
 12475  0038D6  ECB4  F01F         	call	_vscp_sendEvent	;wreg free
 12476  0038DA  D03A               	goto	l1050
 12477  0038DC                     l1051:
 12478                           
 12479                           ; BSR set to: 0
 12480                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 12481  0038DC  AF96               	btfss	_vscp_imsg& (0+255),7,b
 12482  0038DE  D00F               	goto	l7363
 12483                           
 12484                           ; BSR set to: 0
 12485                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 12486                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 12487  0038E0  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
 12488  0038E2  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 12489  0038E4  E135               	bnz	l1050
 12490                           
 12491                           ; BSR set to: 0
 12492  0038E6  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
 12493  0038E8  0A03               	xorlw	3
 12494  0038EA  E132               	bnz	l1050
 12495                           
 12496                           ; BSR set to: 0
 12497                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 12498  0038EC  6657               	tstfsz	_vscp_probe_address,c
 12499  0038EE  D003               	goto	l7357
 12500                           
 12501                           ; BSR set to: 0
 12502                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 12503  0038F0  0E02               	movlw	2
 12504  0038F2  6F92               	movwf	_vscp_node_state& (0+255),b
 12505  0038F4  D7E2               	goto	l7337
 12506  0038F6                     l7357:
 12507                           
 12508                           ; BSR set to: 0
 12509                           ;vscp_firmware.c: 257: else {
 12510                           ;vscp_firmware.c: 260: vscp_probe_address++;
 12511  0038F6  2A57               	incf	_vscp_probe_address,f,c
 12512                           
 12513                           ; BSR set to: 0
 12514                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 12515  0038F8  6B93               	clrf	_vscp_node_substate& (0+255),b
 12516  0038FA                     l7361:
 12517                           
 12518                           ; BSR set to: 0
 12519                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 12520  0038FA  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12521  0038FC  D029               	goto	l1050
 12522  0038FE                     l7363:
 12523                           
 12524                           ; BSR set to: 0
 12525                           ;vscp_firmware.c: 267: else {
 12526                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 12527  0038FE  0EE9               	movlw	233
 12528  003900  5D86               	subwf	_vscp_timer& (0+255),w,b	;volatile
 12529  003902  0E03               	movlw	3
 12530  003904  5987               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 12531  003906  E324               	bnc	l1050
 12532                           
 12533                           ; BSR set to: 0
 12534                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 12535  003908  2B94               	incf	_vscp_probe_cnt& (0+255),f,b
 12536                           
 12537                           ; BSR set to: 0
 12538                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 12539  00390A  0E02               	movlw	2
 12540  00390C  6594               	cpfsgt	_vscp_probe_cnt& (0+255),b
 12541  00390E  D017               	goto	l1058
 12542                           
 12543                           ; BSR set to: 0
 12544                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 12545  003910  6657               	tstfsz	_vscp_probe_address,c
 12546  003912  D005               	goto	l1059
 12547                           
 12548                           ; BSR set to: 0
 12549                           ;vscp_firmware.c: 279: vscp_probe_address++;
 12550  003914  2A57               	incf	_vscp_probe_address,f,c
 12551                           
 12552                           ; BSR set to: 0
 12553                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 12554  003916  6B93               	clrf	_vscp_node_substate& (0+255),b
 12555                           
 12556                           ; BSR set to: 0
 12557                           ;vscp_firmware.c: 281: vscp_timer = 0;
 12558  003918  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12559  00391A  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12560  00391C  D7EE               	goto	l7361
 12561  00391E                     l1059:
 12562                           
 12563                           ; BSR set to: 0
 12564                           ;vscp_firmware.c: 285: else {
 12565                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 12566  00391E  C057  F091         	movff	_vscp_probe_address,_vscp_nickname
 12567                           
 12568                           ; BSR set to: 0
 12569                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 12570  003922  0E03               	movlw	3
 12571  003924  6F92               	movwf	_vscp_node_state& (0+255),b
 12572                           
 12573                           ; BSR set to: 0
 12574                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 12575  003926  6B93               	clrf	_vscp_node_substate& (0+255),b
 12576                           
 12577                           ; BSR set to: 0
 12578                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 12579  003928  5191               	movf	_vscp_nickname& (0+255),w,b
 12580  00392A  ECDD  F020         	call	_vscp_writeNicknamePermanent
 12581                           
 12582                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 12583  00392E  0E40               	movlw	64
 12584  003930  ECD4  F020         	call	_vscp_setSegmentCRC
 12585                           
 12586                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 12587  003934  0100               	movlb	0	; () banked
 12588  003936  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12589                           
 12590                           ; BSR set to: 0
 12591                           ;vscp_firmware.c: 296: vscp_goActiveState();
 12592  003938  EC52  F020         	call	_vscp_goActiveState	;wreg free
 12593  00393C  D009               	goto	l1050
 12594  00393E                     l1058:
 12595                           
 12596                           ; BSR set to: 0
 12597                           ;vscp_firmware.c: 300: else {
 12598                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 12599  00393E  6B93               	clrf	_vscp_node_substate& (0+255),b
 12600  003940  D007               	goto	l1050
 12601  003942                     l7393:
 12602  003942  0100               	movlb	0	; () banked
 12603  003944  5193               	movf	_vscp_node_substate& (0+255),w,b
 12604                           
 12605                           ; Switch size 1, requested type "speed"
 12606                           ; Number of cases is 3, Range of values is 0 to 2
 12607                           ; switch strategies available:
 12608                           ; Name         Instructions Cycles
 12609                           ; simple_byte           10     6 (average)
 12610                           ;	Chosen strategy is simple_byte
 12611  003946  E0AA               	bz	l7323
 12612  003948  0A01               	xorlw	1	; case 1
 12613  00394A  E0C8               	bz	l1051
 12614  00394C  0A03               	xorlw	3	; case 2
 12615  00394E  E1F7               	bnz	l1058
 12616  003950                     l1050:
 12617                           
 12618                           ; BSR set to: 0
 12619                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 12620  003950  6B96               	clrf	_vscp_imsg& (0+255),b
 12621                           
 12622                           ; BSR set to: 0
 12623  003952  0012               	return	
 12624  003954                     __end_of_vscp_handleProbeState:
 12625                           	opt stack 0
 12626                           tblptru	equ	0xFF8
 12627                           tblptrh	equ	0xFF7
 12628                           tblptrl	equ	0xFF6
 12629                           tablat	equ	0xFF5
 12630                           prodh	equ	0xFF4
 12631                           prodl	equ	0xFF3
 12632                           postinc0	equ	0xFEE
 12633                           wreg	equ	0xFE8
 12634                           indf2	equ	0xFDF
 12635                           postinc2	equ	0xFDE
 12636                           postdec2	equ	0xFDD
 12637                           fsr2h	equ	0xFDA
 12638                           fsr2l	equ	0xFD9
 12639                           status	equ	0xFD8
 12640                           
 12641 ;; *************** function _vscp_goActiveState *****************
 12642 ;; Defined at:
 12643 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 12644 ;; Parameters:    Size  Location     Type
 12645 ;;		None
 12646 ;; Auto vars:     Size  Location     Type
 12647 ;;		None
 12648 ;; Return value:  Size  Location     Type
 12649 ;;		None               void
 12650 ;; Registers used:
 12651 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12652 ;; Tracked objects:
 12653 ;;		On entry : 0/0
 12654 ;;		On exit  : F/0
 12655 ;;		Unchanged: 0/0
 12656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12657 ;;      Params:         0       0       0       0       0       0       0
 12658 ;;      Locals:         0       0       0       0       0       0       0
 12659 ;;      Temps:          0       0       0       0       0       0       0
 12660 ;;      Totals:         0       0       0       0       0       0       0
 12661 ;;Total ram usage:        0 bytes
 12662 ;; Hardware stack levels used:    1
 12663 ;; Hardware stack levels required when called:    7
 12664 ;; This function calls:
 12665 ;;		_vscp_sendEvent
 12666 ;; This function is called by:
 12667 ;;		_main
 12668 ;;		_vscp_handleProbeState
 12669 ;; This function uses a non-reentrant model
 12670 ;;
 12671                           
 12672                           	psect	text50
 12673  0040A4                     __ptext50:
 12674                           	opt stack 0
 12675  0040A4                     _vscp_goActiveState:
 12676                           	opt stack 22
 12677                           
 12678                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 12679                           
 12680                           ; BSR set to: 0
 12681                           ;incstack = 0
 12682                           ;incstack = 0
 12683  0040A4  0E81               	movlw	129
 12684  0040A6  0100               	movlb	0	; () banked
 12685  0040A8  6FA4               	movwf	_vscp_omsg& (0+255),b
 12686                           
 12687                           ; BSR set to: 0
 12688                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 12689  0040AA  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12690                           
 12691                           ; BSR set to: 0
 12692                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 12693  0040AC  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12694  0040AE  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12695                           
 12696                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 12697  0040B0  0E02               	movlw	2
 12698  0040B2  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12699                           
 12700                           ; BSR set to: 0
 12701                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 12702  0040B4  C091  F0A9         	movff	_vscp_nickname,_vscp_omsg+5
 12703                           
 12704                           ; BSR set to: 0
 12705                           ;vscp_firmware.c: 366: vscp_sendEvent();
 12706  0040B8  ECB4  F01F         	call	_vscp_sendEvent	;wreg free
 12707                           
 12708                           ; BSR set to: 0
 12709                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 12710  0040BC  0E01               	movlw	1
 12711  0040BE  6E56               	movwf	_vscp_initledfunc,c
 12712                           
 12713                           ; BSR set to: 0
 12714  0040C0  0C01               	retlw	1
 12715  0040C2                     __end_of_vscp_goActiveState:
 12716                           	opt stack 0
 12717                           tblptru	equ	0xFF8
 12718                           tblptrh	equ	0xFF7
 12719                           tblptrl	equ	0xFF6
 12720                           tablat	equ	0xFF5
 12721                           prodh	equ	0xFF4
 12722                           prodl	equ	0xFF3
 12723                           postinc0	equ	0xFEE
 12724                           wreg	equ	0xFE8
 12725                           indf2	equ	0xFDF
 12726                           postinc2	equ	0xFDE
 12727                           postdec2	equ	0xFDD
 12728                           fsr2h	equ	0xFDA
 12729                           fsr2l	equ	0xFD9
 12730                           status	equ	0xFD8
 12731                           
 12732 ;; *************** function _vscp_sendEvent *****************
 12733 ;; Defined at:
 12734 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 12735 ;; Parameters:    Size  Location     Type
 12736 ;;		None
 12737 ;; Auto vars:     Size  Location     Type
 12738 ;;  rv              1    0        unsigned char 
 12739 ;; Return value:  Size  Location     Type
 12740 ;;                  1    wreg      unsigned char 
 12741 ;; Registers used:
 12742 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12743 ;; Tracked objects:
 12744 ;;		On entry : F/0
 12745 ;;		On exit  : F/0
 12746 ;;		Unchanged: 0/0
 12747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12748 ;;      Params:         0       0       0       0       0       0       0
 12749 ;;      Locals:         1       0       0       0       0       0       0
 12750 ;;      Temps:          0       0       0       0       0       0       0
 12751 ;;      Totals:         1       0       0       0       0       0       0
 12752 ;;Total ram usage:        1 bytes
 12753 ;; Hardware stack levels used:    1
 12754 ;; Hardware stack levels required when called:    6
 12755 ;; This function calls:
 12756 ;;		_sendVSCPFrame
 12757 ;; This function is called by:
 12758 ;;		_vscp_handleProbeState
 12759 ;;		_vscp_goActiveState
 12760 ;;		_vscp_sendHeartBeat
 12761 ;;		_vscp_newNodeOnline
 12762 ;;		_vscp_handleProtocolEvent
 12763 ;; This function uses a non-reentrant model
 12764 ;;
 12765                           
 12766                           	psect	text51
 12767  003F68                     __ptext51:
 12768                           	opt stack 0
 12769  003F68                     _vscp_sendEvent:
 12770                           	opt stack 22
 12771                           
 12772                           ; BSR set to: 0
 12773                           
 12774                           ; BSR set to: 0
 12775                           ;incstack = 0
 12776                           ;incstack = 0
 12777  003F68  C0A6  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 12778  003F6C  C0A7  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 12779  003F70  C0A8  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 12780  003F74  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 12781  003F78  C0A5  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 12782  003F7C  51A4               	movf	_vscp_omsg& (0+255),w,b
 12783  003F7E  0B0F               	andlw	15
 12784  003F80  6E44               	movwf	?_sendVSCPFrame+5,c
 12785  003F82  0E00               	movlw	high (_vscp_omsg+5)
 12786  003F84  6E46               	movwf	?_sendVSCPFrame+7,c
 12787  003F86  0EA9               	movlw	low (_vscp_omsg+5)
 12788  003F88  6E45               	movwf	?_sendVSCPFrame+6,c
 12789  003F8A  EFAA  F01C         	goto	_sendVSCPFrame	;wreg free
 12790  003F8E                     __end_of_vscp_sendEvent:
 12791                           	opt stack 0
 12792                           tblptru	equ	0xFF8
 12793                           tblptrh	equ	0xFF7
 12794                           tblptrl	equ	0xFF6
 12795                           tablat	equ	0xFF5
 12796                           prodh	equ	0xFF4
 12797                           prodl	equ	0xFF3
 12798                           postinc0	equ	0xFEE
 12799                           wreg	equ	0xFE8
 12800                           indf2	equ	0xFDF
 12801                           postinc2	equ	0xFDE
 12802                           postdec2	equ	0xFDD
 12803                           fsr2h	equ	0xFDA
 12804                           fsr2l	equ	0xFD9
 12805                           status	equ	0xFD8
 12806                           
 12807 ;; *************** function _sendVSCPFrame *****************
 12808 ;; Defined at:
 12809 ;;		line 2505 in file "../main.c"
 12810 ;; Parameters:    Size  Location     Type
 12811 ;;  vscpclass       2   62[COMRAM] unsigned short 
 12812 ;;  vscptype        1   64[COMRAM] unsigned char 
 12813 ;;  nodeid          1   65[COMRAM] unsigned char 
 12814 ;;  priority        1   66[COMRAM] unsigned char 
 12815 ;;  size            1   67[COMRAM] unsigned char 
 12816 ;;  pData           2   68[COMRAM] PTR unsigned char 
 12817 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 12818 ;; Auto vars:     Size  Location     Type
 12819 ;;  id              4   70[COMRAM] unsigned long 
 12820 ;; Return value:  Size  Location     Type
 12821 ;;                  1    wreg      unsigned char 
 12822 ;; Registers used:
 12823 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12824 ;; Tracked objects:
 12825 ;;		On entry : F/0
 12826 ;;		On exit  : F/0
 12827 ;;		Unchanged: 0/0
 12828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12829 ;;      Params:         8       0       0       0       0       0       0
 12830 ;;      Locals:         4       0       0       0       0       0       0
 12831 ;;      Temps:          0      20       0       0       0       0       0
 12832 ;;      Totals:        12      20       0       0       0       0       0
 12833 ;;Total ram usage:       32 bytes
 12834 ;; Hardware stack levels used:    1
 12835 ;; Hardware stack levels required when called:    5
 12836 ;; This function calls:
 12837 ;;		_sendCANFrame
 12838 ;; This function is called by:
 12839 ;;		_SendInformationEvent
 12840 ;;		_vscp_sendEvent
 12841 ;; This function uses a non-reentrant model
 12842 ;;
 12843                           
 12844                           	psect	text52
 12845  003954                     __ptext52:
 12846                           	opt stack 0
 12847  003954                     _sendVSCPFrame:
 12848                           	opt stack 23
 12849                           
 12850                           ; BSR set to: 0
 12851                           ;main.c: 2506: uint32_t id = ( (uint32_t)priority << 26 ) |
 12852                           ;main.c: 2507: ( (uint32_t)vscpclass << 16 ) |
 12853                           ;main.c: 2508: ( (uint32_t)vscptype << 8 ) |
 12854                           ;main.c: 2509: nodeid;
 12855                           
 12856                           ; BSR set to: 0
 12857                           ;incstack = 0
 12858                           ;incstack = 0
 12859  003954  C041  F0B1         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 12860  003958  6BB2               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 12861  00395A  6BB3               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 12862  00395C  6BB4               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 12863  00395E  C0B3  F0B4         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 12864  003962  C0B2  F0B3         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 12865  003966  C0B1  F0B2         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 12866  00396A  6BB1               	clrf	??_sendVSCPFrame& (0+255),b
 12867  00396C  503F               	movf	sendVSCPFrame@vscpclass,w,c
 12868  00396E  6FB5               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 12869  003970  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 12870  003972  6FB6               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 12871  003974  6BB7               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 12872  003976  6BB8               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 12873  003978  C0B6  F0B8         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 12874  00397C  C0B5  F0B7         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 12875  003980  6BB6               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 12876  003982  6BB5               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 12877  003984  C043  F0B9         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 12878  003988  6BBA               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 12879  00398A  6BBB               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 12880  00398C  6BBC               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 12881  00398E  0E1A               	movlw	26
 12882  003990                     u10065:
 12883  003990  90D8               	bcf	status,0,c
 12884  003992  37B9               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 12885  003994  37BA               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 12886  003996  37BB               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 12887  003998  37BC               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 12888  00399A  2EE8               	decfsz	wreg,f,c
 12889  00399C  D7F9               	goto	u10065
 12890  00399E  51B5               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 12891  0039A0  11B9               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 12892  0039A2  6FBD               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 12893  0039A4  51B6               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 12894  0039A6  11BA               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 12895  0039A8  6FBE               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 12896  0039AA  51B7               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 12897  0039AC  11BB               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 12898  0039AE  6FBF               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 12899  0039B0  51B8               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 12900  0039B2  11BC               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 12901  0039B4  6FC0               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 12902  0039B6  51B1               	movf	??_sendVSCPFrame& (0+255),w,b
 12903  0039B8  11BD               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 12904  0039BA  6FC1               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 12905  0039BC  51B2               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 12906  0039BE  11BE               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 12907  0039C0  6FC2               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 12908  0039C2  51B3               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 12909  0039C4  11BF               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 12910  0039C6  6FC3               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 12911  0039C8  51B4               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 12912  0039CA  11C0               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 12913  0039CC  6FC4               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 12914  0039CE  5042               	movf	sendVSCPFrame@nodeid,w,c
 12915  0039D0  11C1               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 12916  0039D2  6E47               	movwf	sendVSCPFrame@id,c
 12917  0039D4  51C2               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 12918  0039D6  6E48               	movwf	sendVSCPFrame@id+1,c
 12919  0039D8  51C3               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 12920  0039DA  6E49               	movwf	sendVSCPFrame@id+2,c
 12921  0039DC  51C4               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 12922  0039DE  6E4A               	movwf	sendVSCPFrame@id+3,c
 12923                           
 12924                           ; BSR set to: 0
 12925                           ;main.c: 2511: if ( !sendCANFrame( id, size, pData ) ) {
 12926  0039E0  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 12927  0039E4  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 12928  0039E8  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 12929  0039EC  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 12930  0039F0  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 12931  0039F4  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 12932  0039F8  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 12933  0039FC  ECD7  F01E         	call	_sendCANFrame	;wreg free
 12934  003A00  0900               	iorlw	0
 12935                           
 12936                           ; BSR set to: 0
 12937                           ;main.c: 2512: return 0;
 12938  003A02  0E00               	movlw	0
 12939  003A04  A4D8               	btfss	status,2,c
 12940                           
 12941                           ; BSR set to: 0
 12942                           ;main.c: 2513: }
 12943                           ;main.c: 2515: return 1;
 12944  003A06  0E01               	movlw	1
 12945                           
 12946                           ; BSR set to: 0
 12947  003A08  0012               	return	
 12948  003A0A                     __end_of_sendVSCPFrame:
 12949                           	opt stack 0
 12950                           tblptru	equ	0xFF8
 12951                           tblptrh	equ	0xFF7
 12952                           tblptrl	equ	0xFF6
 12953                           tablat	equ	0xFF5
 12954                           prodh	equ	0xFF4
 12955                           prodl	equ	0xFF3
 12956                           postinc0	equ	0xFEE
 12957                           wreg	equ	0xFE8
 12958                           indf2	equ	0xFDF
 12959                           postinc2	equ	0xFDE
 12960                           postdec2	equ	0xFDD
 12961                           fsr2h	equ	0xFDA
 12962                           fsr2l	equ	0xFD9
 12963                           status	equ	0xFD8
 12964                           
 12965 ;; *************** function _sendCANFrame *****************
 12966 ;; Defined at:
 12967 ;;		line 2550 in file "../main.c"
 12968 ;; Parameters:    Size  Location     Type
 12969 ;;  id              4   54[COMRAM] unsigned long 
 12970 ;;  dlc             1   58[COMRAM] unsigned char 
 12971 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 12972 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 12973 ;; Auto vars:     Size  Location     Type
 12974 ;;  rv              1   61[COMRAM] unsigned char 
 12975 ;; Return value:  Size  Location     Type
 12976 ;;                  1    wreg      unsigned char 
 12977 ;; Registers used:
 12978 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12979 ;; Tracked objects:
 12980 ;;		On entry : F/0
 12981 ;;		On exit  : F/0
 12982 ;;		Unchanged: 0/0
 12983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12984 ;;      Params:         7       0       0       0       0       0       0
 12985 ;;      Locals:         1       0       0       0       0       0       0
 12986 ;;      Temps:          0       0       0       0       0       0       0
 12987 ;;      Totals:         8       0       0       0       0       0       0
 12988 ;;Total ram usage:        8 bytes
 12989 ;; Hardware stack levels used:    1
 12990 ;; Hardware stack levels required when called:    4
 12991 ;; This function calls:
 12992 ;;		_ECANSendMessage
 12993 ;; This function is called by:
 12994 ;;		_sendVSCPFrame
 12995 ;; This function uses a non-reentrant model
 12996 ;;
 12997                           
 12998                           	psect	text53
 12999  003DAE                     __ptext53:
 13000                           	opt stack 0
 13001  003DAE                     _sendCANFrame:
 13002                           	opt stack 23
 13003                           
 13004                           ; BSR set to: 0
 13005                           ;main.c: 2551: uint8_t rv = 0;
 13006                           
 13007                           ; BSR set to: 0
 13008                           ;incstack = 0
 13009                           ;incstack = 0
 13010  003DAE  6A3E               	clrf	sendCANFrame@rv,c
 13011                           
 13012                           ;main.c: 2552: sendTimer = 0;
 13013  003DB0  6A55               	clrf	_sendTimer,c
 13014                           
 13015                           ;main.c: 2554: while ( sendTimer < 1 ) {
 13016  003DB2  D017               	goto	l8843
 13017  003DB4                     l8839:
 13018                           
 13019                           ;main.c: 2555: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 13020  003DB4  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 13021  003DB8  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 13022  003DBC  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 13023  003DC0  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 13024  003DC4  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 13025  003DC8  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 13026  003DCC  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 13027  003DD0  0E20               	movlw	32
 13028  003DD2  6E19               	movwf	?_ECANSendMessage+7,c
 13029  003DD4  EC51  F017         	call	_ECANSendMessage	;wreg free
 13030  003DD8  0900               	iorlw	0
 13031  003DDA  E003               	bz	l8843
 13032                           
 13033                           ;main.c: 2556: rv = 1;
 13034  003DDC  0E01               	movlw	1
 13035  003DDE  6E3E               	movwf	sendCANFrame@rv,c
 13036                           
 13037                           ;main.c: 2557: break;
 13038  003DE0  D002               	goto	l656
 13039  003DE2                     l8843:
 13040  003DE2  5055               	movf	_sendTimer,w,c
 13041  003DE4  E0E7               	bz	l8839
 13042  003DE6                     l656:
 13043                           
 13044                           ;main.c: 2558: }
 13045                           ;main.c: 2559: }
 13046                           ;main.c: 2561: vscp_omsg.flags = 0;
 13047  003DE6  0100               	movlb	0	; () banked
 13048  003DE8  6BA4               	clrf	_vscp_omsg& (0+255),b
 13049                           
 13050                           ; BSR set to: 0
 13051                           ;main.c: 2563: return rv;
 13052  003DEA  503E               	movf	sendCANFrame@rv,w,c
 13053                           
 13054                           ; BSR set to: 0
 13055  003DEC  0012               	return	
 13056  003DEE                     __end_of_sendCANFrame:
 13057                           	opt stack 0
 13058                           tblptru	equ	0xFF8
 13059                           tblptrh	equ	0xFF7
 13060                           tblptrl	equ	0xFF6
 13061                           tablat	equ	0xFF5
 13062                           prodh	equ	0xFF4
 13063                           prodl	equ	0xFF3
 13064                           postinc0	equ	0xFEE
 13065                           wreg	equ	0xFE8
 13066                           indf2	equ	0xFDF
 13067                           postinc2	equ	0xFDE
 13068                           postdec2	equ	0xFDD
 13069                           fsr2h	equ	0xFDA
 13070                           fsr2l	equ	0xFD9
 13071                           status	equ	0xFD8
 13072                           
 13073 ;; *************** function _ECANSendMessage *****************
 13074 ;; Defined at:
 13075 ;;		line 617 in file "../ECAN.c"
 13076 ;; Parameters:    Size  Location     Type
 13077 ;;  id              4   17[COMRAM] unsigned long 
 13078 ;;  data            2   21[COMRAM] PTR unsigned char 
 13079 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13080 ;;  dataLen         1   23[COMRAM] unsigned char 
 13081 ;;  msgFlags        1   24[COMRAM] enum E16306
 13082 ;; Auto vars:     Size  Location     Type
 13083 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 13084 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13085 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13086 ;;		 -> B0CON(1), 
 13087 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 13088 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13089 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13090 ;;		 -> B0CON(1), 
 13091 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 13092 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13093 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13094 ;;		 -> B0CON(1), 
 13095 ;;  i               1   51[COMRAM] unsigned char 
 13096 ;;  temp            1   50[COMRAM] unsigned char 
 13097 ;;  tempBSEL0       1   47[COMRAM] struct .
 13098 ;;  j               1   46[COMRAM] unsigned char 
 13099 ;;  buffers         1   45[COMRAM] unsigned char 
 13100 ;;  mode            1   44[COMRAM] unsigned char 
 13101 ;; Return value:  Size  Location     Type
 13102 ;;                  1    wreg      enum E15660
 13103 ;; Registers used:
 13104 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13105 ;; Tracked objects:
 13106 ;;		On entry : 0/0
 13107 ;;		On exit  : 0/0
 13108 ;;		Unchanged: 0/0
 13109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13110 ;;      Params:         8       0       0       0       0       0       0
 13111 ;;      Locals:        28       0       0       0       0       0       0
 13112 ;;      Temps:          1       0       0       0       0       0       0
 13113 ;;      Totals:        37       0       0       0       0       0       0
 13114 ;;Total ram usage:       37 bytes
 13115 ;; Hardware stack levels used:    1
 13116 ;; Hardware stack levels required when called:    3
 13117 ;; This function calls:
 13118 ;;		__CANIDToRegs
 13119 ;; This function is called by:
 13120 ;;		_sendCANFrame
 13121 ;; This function uses a non-reentrant model
 13122 ;;
 13123                           
 13124                           	psect	text54
 13125  002EA2                     __ptext54:
 13126                           	opt stack 0
 13127  002EA2                     _ECANSendMessage:
 13128                           	opt stack 23
 13129                           
 13130                           ;ECAN.c: 619: BYTE mode;
 13131                           ;ECAN.c: 620: BYTE buffers;
 13132                           ;ECAN.c: 628: BYTE i,j;
 13133                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 13134                           ;ECAN.c: 630: BYTE* pb[9];
 13135                           ;ECAN.c: 631: BYTE temp;
 13136                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 13137                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 13138                           
 13139                           ; BSR set to: 0
 13140                           ;incstack = 0
 13141                           ;incstack = 0
 13142  002EA2  0E0F               	movlw	15	;volatile
 13143  002EA4  6E1C               	movwf	ECANSendMessage@pb+1,c
 13144  002EA6  0E40               	movlw	64	;volatile
 13145  002EA8  6E1B               	movwf	ECANSendMessage@pb,c
 13146                           
 13147                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 13148  002EAA  0E0F               	movlw	15	;volatile
 13149  002EAC  6E1E               	movwf	ECANSendMessage@pb+3,c
 13150  002EAE  0E30               	movlw	48	;volatile
 13151  002EB0  6E1D               	movwf	ECANSendMessage@pb+2,c
 13152                           
 13153                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 13154  002EB2  0E0F               	movlw	15	;volatile
 13155  002EB4  6E20               	movwf	ECANSendMessage@pb+5,c
 13156  002EB6  0E20               	movlw	32	;volatile
 13157  002EB8  6E1F               	movwf	ECANSendMessage@pb+4,c
 13158                           
 13159                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 13160  002EBA  0E0E               	movlw	14	;volatile
 13161  002EBC  6E22               	movwf	ECANSendMessage@pb+7,c
 13162  002EBE  0E20               	movlw	32	;volatile
 13163  002EC0  6E21               	movwf	ECANSendMessage@pb+6,c
 13164                           
 13165                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 13166  002EC2  0E0E               	movlw	14	;volatile
 13167  002EC4  6E24               	movwf	ECANSendMessage@pb+9,c
 13168  002EC6  0E30               	movlw	48	;volatile
 13169  002EC8  6E23               	movwf	ECANSendMessage@pb+8,c
 13170                           
 13171                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 13172  002ECA  0E0E               	movlw	14	;volatile
 13173  002ECC  6E26               	movwf	ECANSendMessage@pb+11,c
 13174  002ECE  0E40               	movlw	64	;volatile
 13175  002ED0  6E25               	movwf	ECANSendMessage@pb+10,c
 13176                           
 13177                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 13178  002ED2  0E0E               	movlw	14	;volatile
 13179  002ED4  6E28               	movwf	ECANSendMessage@pb+13,c
 13180  002ED6  0E50               	movlw	80	;volatile
 13181  002ED8  6E27               	movwf	ECANSendMessage@pb+12,c
 13182                           
 13183                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 13184  002EDA  0E0E               	movlw	14	;volatile
 13185  002EDC  6E2A               	movwf	ECANSendMessage@pb+15,c
 13186  002EDE  0E60               	movlw	96	;volatile
 13187  002EE0  6E29               	movwf	ECANSendMessage@pb+14,c
 13188                           
 13189                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 13190  002EE2  0E0E               	movlw	14	;volatile
 13191  002EE4  6E2C               	movwf	ECANSendMessage@pb+17,c
 13192  002EE6  0E70               	movlw	112	;volatile
 13193  002EE8  6E2B               	movwf	ECANSendMessage@pb+16,c
 13194                           
 13195                           ; BSR set to: 14
 13196                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 13197  002EEA  5077               	movf	3959,w,c	;volatile
 13198  002EEC  0BC0               	andlw	192
 13199  002EEE  6E2D               	movwf	ECANSendMessage@mode,c
 13200                           
 13201                           ; BSR set to: 14
 13202                           ;ECAN.c: 660: if ( mode == 0x00 )
 13203  002EF0  662D               	tstfsz	ECANSendMessage@mode,c
 13204  002EF2  D002               	goto	l8857
 13205                           
 13206                           ; BSR set to: 14
 13207                           ;ECAN.c: 661: buffers = 2;
 13208  002EF4  0E02               	movlw	2
 13209  002EF6  D001               	goto	L39
 13210  002EF8                     l8857:
 13211                           
 13212                           ; BSR set to: 14
 13213                           ;ECAN.c: 662: else
 13214                           ;ECAN.c: 663: buffers = 8;
 13215  002EF8  0E08               	movlw	8
 13216  002EFA                     L39:
 13217  002EFA  6E2E               	movwf	ECANSendMessage@buffers,c
 13218                           
 13219                           ; BSR set to: 14
 13220                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 13221  002EFC  010D               	movlb	13	; () banked
 13222  002EFE  90D8               	bcf	status,0,c
 13223  002F00  31F8               	rrcf	248,w,b	;volatile
 13224  002F02  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 13225                           
 13226                           ; BSR set to: 13
 13227                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 13228  002F04  6A34               	clrf	ECANSendMessage@i,c
 13229  002F06  D07D               	goto	l8917
 13230  002F08                     l8863:
 13231                           
 13232                           ;ECAN.c: 688: {
 13233                           ;ECAN.c: 693: ptr = pb[i];
 13234  002F08  5034               	movf	ECANSendMessage@i,w,c
 13235  002F0A  0D02               	mullw	2
 13236  002F0C  50F3               	movf	prodl,w,c
 13237  002F0E  0F1B               	addlw	low ECANSendMessage@pb
 13238  002F10  6ED9               	movwf	fsr2l,c
 13239  002F12  6ADA               	clrf	fsr2h,c
 13240  002F14  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 13241  002F18  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 13242                           
 13243                           ;ECAN.c: 694: tempPtr = ptr;
 13244  002F1C  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 13245  002F20  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 13246                           
 13247                           ;ECAN.c: 702: if ( i > 2 )
 13248  002F24  0E02               	movlw	2
 13249  002F26  6434               	cpfsgt	ECANSendMessage@i,c
 13250  002F28  D004               	goto	l8875
 13251                           
 13252                           ;ECAN.c: 703: {
 13253                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 13254  002F2A  90D8               	bcf	status,0,c
 13255  002F2C  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 13256                           
 13257                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 13258  002F2E  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 13259  002F30  D067               	goto	l8915
 13260  002F32                     l8875:
 13261                           
 13262                           ;ECAN.c: 714: }
 13263                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 13264  002F32  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13265  002F36  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13266  002F3A  50DF               	movf	indf2,w,c
 13267  002F3C  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13268  002F3E  B61A               	btfsc	??_ECANSendMessage,3,c
 13269  002F40  D05F               	goto	l8915
 13270                           
 13271                           ;ECAN.c: 721: {
 13272                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 13273  002F42  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13274  002F46  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13275  002F4A  0EFC               	movlw	252
 13276  002F4C  16DF               	andwf	indf2,f,c
 13277                           
 13278                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 13279  002F4E  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 13280  002F52  0E03               	movlw	3
 13281  002F54  161A               	andwf	??_ECANSendMessage,f,c
 13282  002F56  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13283  002F5A  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13284  002F5E  501A               	movf	??_ECANSendMessage,w,c
 13285  002F60  12DF               	iorwf	indf2,f,c
 13286                           
 13287                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 13288  002F62  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 13289  002F64  D004               	goto	l848
 13290                           
 13291                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 13292  002F66  5018               	movf	ECANSendMessage@dataLen,w,c
 13293  002F68  0940               	iorlw	64
 13294  002F6A  6E33               	movwf	ECANSendMessage@temp,c
 13295  002F6C  D002               	goto	l8885
 13296  002F6E                     l848:
 13297                           
 13298                           ;ECAN.c: 729: else
 13299                           ;ECAN.c: 730: temp = dataLen;
 13300  002F6E  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 13301  002F72                     l8885:
 13302                           
 13303                           ;ECAN.c: 732: *(ptr+5) = temp;
 13304  002F72  EE20 F005          	lfsr	2,5
 13305  002F76  5035               	movf	ECANSendMessage@ptr,w,c
 13306  002F78  26D9               	addwf	fsr2l,f,c
 13307  002F7A  5036               	movf	ECANSendMessage@ptr+1,w,c
 13308  002F7C  22DA               	addwfc	fsr2h,f,c
 13309  002F7E  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 13310                           
 13311                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 13312  002F82  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 13313  002F84  D003               	goto	l850
 13314                           
 13315                           ;ECAN.c: 736: temp = 1;
 13316  002F86  0E01               	movlw	1
 13317  002F88  6E33               	movwf	ECANSendMessage@temp,c
 13318  002F8A  D001               	goto	l8891
 13319  002F8C                     l850:
 13320                           
 13321                           ;ECAN.c: 738: else
 13322                           ;ECAN.c: 739: temp = 0;
 13323  002F8C  6A33               	clrf	ECANSendMessage@temp,c
 13324  002F8E                     l8891:
 13325                           
 13326                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 13327  002F8E  2835               	incf	ECANSendMessage@ptr,w,c
 13328  002F90  6E08               	movwf	?__CANIDToRegs,c
 13329  002F92  0E00               	movlw	0
 13330  002F94  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 13331  002F96  6E09               	movwf	?__CANIDToRegs+1,c
 13332  002F98  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 13333  002F9C  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 13334  002FA0  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 13335  002FA4  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 13336  002FA8  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 13337  002FAC  ECB8  F018         	call	__CANIDToRegs	;wreg free
 13338                           
 13339                           ;ECAN.c: 745: ptr += 6;
 13340  002FB0  0E06               	movlw	6
 13341  002FB2  2635               	addwf	ECANSendMessage@ptr,f,c
 13342  002FB4  0E00               	movlw	0
 13343  002FB6  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 13344                           
 13345                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 13346  002FB8  6A2F               	clrf	ECANSendMessage@j,c
 13347  002FBA  D00F               	goto	l8905
 13348  002FBC                     l8897:
 13349                           
 13350                           ;ECAN.c: 748: *ptr++ = *data++;
 13351  002FBC  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 13352  002FC0  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 13353  002FC4  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 13354  002FC8  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 13355  002FCC  CFDF FFE7          	movff	indf2,indf1
 13356  002FD0  4A16               	infsnz	ECANSendMessage@data,f,c
 13357  002FD2  2A17               	incf	ECANSendMessage@data+1,f,c
 13358  002FD4  4A35               	infsnz	ECANSendMessage@ptr,f,c
 13359  002FD6  2A36               	incf	ECANSendMessage@ptr+1,f,c
 13360  002FD8  2A2F               	incf	ECANSendMessage@j,f,c
 13361  002FDA                     l8905:
 13362  002FDA  5018               	movf	ECANSendMessage@dataLen,w,c
 13363  002FDC  5C2F               	subwf	ECANSendMessage@j,w,c
 13364  002FDE  E3EE               	bnc	l8897
 13365                           
 13366                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 13367  002FE0  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13368  002FE4  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13369  002FE8  50DF               	movf	indf2,w,c
 13370  002FEA  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13371  002FEC  B41A               	btfsc	??_ECANSendMessage,2,c
 13372  002FEE  D006               	goto	l8911
 13373                           
 13374                           ;ECAN.c: 753: *tempPtr |= 0x08;
 13375  002FF0  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13376  002FF4  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13377  002FF8  0E00               	movlw	0
 13378  002FFA  86DB               	bsf	plusw2,3,c
 13379  002FFC                     l8911:
 13380                           
 13381                           ;ECAN.c: 755: return TRUE;
 13382  002FFC  0E01               	movlw	1
 13383  002FFE  D005               	goto	l856
 13384  003000                     l8915:
 13385  003000  2A34               	incf	ECANSendMessage@i,f,c
 13386  003002                     l8917:
 13387  003002  502E               	movf	ECANSendMessage@buffers,w,c
 13388  003004  5C34               	subwf	ECANSendMessage@i,w,c
 13389  003006  E380               	bnc	l8863
 13390                           
 13391                           ;ECAN.c: 756: }
 13392                           ;ECAN.c: 757: }
 13393                           ;ECAN.c: 760: return FALSE;
 13394  003008  0E00               	movlw	0
 13395  00300A                     l856:
 13396  00300A  0012               	return	
 13397  00300C                     __end_of_ECANSendMessage:
 13398                           	opt stack 0
 13399                           tblptru	equ	0xFF8
 13400                           tblptrh	equ	0xFF7
 13401                           tblptrl	equ	0xFF6
 13402                           tablat	equ	0xFF5
 13403                           prodh	equ	0xFF4
 13404                           prodl	equ	0xFF3
 13405                           postinc0	equ	0xFEE
 13406                           wreg	equ	0xFE8
 13407                           indf1	equ	0xFE7
 13408                           fsr1h	equ	0xFE2
 13409                           fsr1l	equ	0xFE1
 13410                           indf2	equ	0xFDF
 13411                           postinc2	equ	0xFDE
 13412                           postdec2	equ	0xFDD
 13413                           plusw2	equ	0xFDB
 13414                           fsr2h	equ	0xFDA
 13415                           fsr2l	equ	0xFD9
 13416                           status	equ	0xFD8
 13417                           
 13418 ;; *************** function __CANIDToRegs *****************
 13419 ;; Defined at:
 13420 ;;		line 1099 in file "../ECAN.c"
 13421 ;; Parameters:    Size  Location     Type
 13422 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 13423 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13424 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13425 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
 13426 ;;  val             4    9[COMRAM] unsigned long 
 13427 ;;  type            1   13[COMRAM] unsigned char 
 13428 ;; Auto vars:     Size  Location     Type
 13429 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 13430 ;;		 -> _CANIDToRegs@val(4), 
 13431 ;; Return value:  Size  Location     Type
 13432 ;;		None               void
 13433 ;; Registers used:
 13434 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13435 ;; Tracked objects:
 13436 ;;		On entry : 0/F
 13437 ;;		On exit  : 0/0
 13438 ;;		Unchanged: 0/0
 13439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13440 ;;      Params:         7       0       0       0       0       0       0
 13441 ;;      Locals:         1       0       0       0       0       0       0
 13442 ;;      Temps:          2       0       0       0       0       0       0
 13443 ;;      Totals:        10       0       0       0       0       0       0
 13444 ;;Total ram usage:       10 bytes
 13445 ;; Hardware stack levels used:    1
 13446 ;; Hardware stack levels required when called:    2
 13447 ;; This function calls:
 13448 ;;		Nothing
 13449 ;; This function is called by:
 13450 ;;		_calculateSetFilterMask
 13451 ;;		_ECANSendMessage
 13452 ;; This function uses a non-reentrant model
 13453 ;;
 13454                           
 13455                           	psect	text55
 13456  003170                     __ptext55:
 13457                           	opt stack 0
 13458  003170                     __CANIDToRegs:
 13459                           	opt stack 23
 13460                           
 13461                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 13462                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 13463                           
 13464                           ;incstack = 0
 13465                           ;incstack = 0
 13466  003170  0E0A               	movlw	low __CANIDToRegs@val
 13467  003172  6E11               	movwf	__CANIDToRegs@Value,c
 13468                           
 13469                           ;ECAN.c: 1104: if ( type == 0 )
 13470  003174  660E               	tstfsz	__CANIDToRegs@type,c
 13471  003176  D037               	goto	l8933
 13472                           
 13473                           ;ECAN.c: 1105: {
 13474                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 13475  003178  5011               	movf	__CANIDToRegs@Value,w,c
 13476  00317A  6ED9               	movwf	fsr2l,c
 13477  00317C  6ADA               	clrf	fsr2h,c
 13478  00317E  50DF               	movf	indf2,w,c
 13479  003180  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13480  003182  90D8               	bcf	status,0,c
 13481  003184  320F               	rrcf	??__CANIDToRegs,f,c
 13482  003186  90D8               	bcf	status,0,c
 13483  003188  320F               	rrcf	??__CANIDToRegs,f,c
 13484  00318A  90D8               	bcf	status,0,c
 13485  00318C  300F               	rrcf	??__CANIDToRegs,w,c
 13486  00318E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13487  003192  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13488  003196  6EDF               	movwf	indf2,c
 13489                           
 13490                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 13491  003198  5011               	movf	__CANIDToRegs@Value,w,c
 13492  00319A  6ED9               	movwf	fsr2l,c
 13493  00319C  6ADA               	clrf	fsr2h,c
 13494  00319E  2AD9               	incf	fsr2l,f,c
 13495  0031A0  6ADA               	clrf	fsr2h,c
 13496  0031A2  50DF               	movf	indf2,w,c
 13497  0031A4  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13498  0031A6  0E05               	movlw	5
 13499  0031A8  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13500  0031AA                     u10735:
 13501  0031AA  90D8               	bcf	status,0,c
 13502  0031AC  360F               	rlcf	??__CANIDToRegs,f,c
 13503  0031AE  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13504  0031B0  D7FC               	goto	u10735
 13505  0031B2  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13506  0031B6  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13507  0031BA  500F               	movf	??__CANIDToRegs,w,c
 13508  0031BC  12DF               	iorwf	indf2,f,c
 13509                           
 13510                           ;ECAN.c: 1109: ptr++;
 13511  0031BE  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13512  0031C0  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13513                           
 13514                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 13515  0031C2  5011               	movf	__CANIDToRegs@Value,w,c
 13516  0031C4  6ED9               	movwf	fsr2l,c
 13517  0031C6  6ADA               	clrf	fsr2h,c
 13518  0031C8  50DF               	movf	indf2,w,c
 13519  0031CA  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13520  0031CC  0E05               	movlw	5
 13521  0031CE  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13522  0031D0                     u10745:
 13523  0031D0  90D8               	bcf	status,0,c
 13524  0031D2  360F               	rlcf	??__CANIDToRegs,f,c
 13525  0031D4  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13526  0031D6  D7FC               	goto	u10745
 13527  0031D8  500F               	movf	??__CANIDToRegs,w,c
 13528  0031DA  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13529  0031DE  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13530  0031E2  6EDF               	movwf	indf2,c
 13531                           
 13532                           ;ECAN.c: 1111: }
 13533  0031E4  D06C               	goto	l910
 13534  0031E6                     l8933:
 13535                           
 13536                           ;ECAN.c: 1112: else
 13537                           ;ECAN.c: 1113: {
 13538                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 13539  0031E6  5011               	movf	__CANIDToRegs@Value,w,c
 13540  0031E8  6ED9               	movwf	fsr2l,c
 13541  0031EA  6ADA               	clrf	fsr2h,c
 13542  0031EC  0E02               	movlw	2
 13543  0031EE  26D9               	addwf	fsr2l,f,c
 13544  0031F0  6ADA               	clrf	fsr2h,c
 13545  0031F2  50DF               	movf	indf2,w,c
 13546  0031F4  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13547  0031F6  0E05               	movlw	5
 13548  0031F8  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13549  0031FA                     u10755:
 13550  0031FA  90D8               	bcf	status,0,c
 13551  0031FC  320F               	rrcf	??__CANIDToRegs,f,c
 13552  0031FE  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13553  003200  D7FC               	goto	u10755
 13554  003202  500F               	movf	??__CANIDToRegs,w,c
 13555  003204  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13556  003208  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13557  00320C  6EDF               	movwf	indf2,c
 13558                           
 13559                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 13560  00320E  5011               	movf	__CANIDToRegs@Value,w,c
 13561  003210  6ED9               	movwf	fsr2l,c
 13562  003212  6ADA               	clrf	fsr2h,c
 13563  003214  0E03               	movlw	3
 13564  003216  26D9               	addwf	fsr2l,f,c
 13565  003218  6ADA               	clrf	fsr2h,c
 13566  00321A  50DF               	movf	indf2,w,c
 13567  00321C  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13568  00321E  90D8               	bcf	status,0,c
 13569  003220  360F               	rlcf	??__CANIDToRegs,f,c
 13570  003222  90D8               	bcf	status,0,c
 13571  003224  360F               	rlcf	??__CANIDToRegs,f,c
 13572  003226  90D8               	bcf	status,0,c
 13573  003228  360F               	rlcf	??__CANIDToRegs,f,c
 13574  00322A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13575  00322E  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13576  003232  500F               	movf	??__CANIDToRegs,w,c
 13577  003234  12DF               	iorwf	indf2,f,c
 13578                           
 13579                           ;ECAN.c: 1117: ptr++;
 13580  003236  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13581  003238  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13582                           
 13583                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 13584  00323A  5011               	movf	__CANIDToRegs@Value,w,c
 13585  00323C  6ED9               	movwf	fsr2l,c
 13586  00323E  6ADA               	clrf	fsr2h,c
 13587  003240  0E02               	movlw	2
 13588  003242  26D9               	addwf	fsr2l,f,c
 13589  003244  6ADA               	clrf	fsr2h,c
 13590  003246  50DF               	movf	indf2,w,c
 13591  003248  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13592  00324A  90D8               	bcf	status,0,c
 13593  00324C  360F               	rlcf	??__CANIDToRegs,f,c
 13594  00324E  90D8               	bcf	status,0,c
 13595  003250  360F               	rlcf	??__CANIDToRegs,f,c
 13596  003252  90D8               	bcf	status,0,c
 13597  003254  340F               	rlcf	??__CANIDToRegs,w,c
 13598  003256  0BE0               	andlw	224
 13599  003258  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13600  00325C  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13601  003260  6EDF               	movwf	indf2,c
 13602                           
 13603                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 13604  003262  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13605  003266  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13606  00326A  0E00               	movlw	0
 13607  00326C  86DB               	bsf	plusw2,3,c
 13608                           
 13609                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 13610  00326E  5011               	movf	__CANIDToRegs@Value,w,c
 13611  003270  6ED9               	movwf	fsr2l,c
 13612  003272  6ADA               	clrf	fsr2h,c
 13613  003274  0E02               	movlw	2
 13614  003276  26D9               	addwf	fsr2l,f,c
 13615  003278  6ADA               	clrf	fsr2h,c
 13616  00327A  50DF               	movf	indf2,w,c
 13617  00327C  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13618  00327E  0E03               	movlw	3
 13619  003280  160F               	andwf	??__CANIDToRegs,f,c
 13620  003282  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13621  003286  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13622  00328A  500F               	movf	??__CANIDToRegs,w,c
 13623  00328C  12DF               	iorwf	indf2,f,c
 13624                           
 13625                           ;ECAN.c: 1122: ptr++;
 13626  00328E  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13627  003290  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13628                           
 13629                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 13630  003292  5011               	movf	__CANIDToRegs@Value,w,c
 13631  003294  6ED9               	movwf	fsr2l,c
 13632  003296  6ADA               	clrf	fsr2h,c
 13633  003298  2AD9               	incf	fsr2l,f,c
 13634  00329A  6ADA               	clrf	fsr2h,c
 13635  00329C  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13636  0032A0  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13637  0032A4  CFDF FFE7          	movff	indf2,indf1
 13638                           
 13639                           ;ECAN.c: 1124: ptr++;
 13640  0032A8  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13641  0032AA  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13642                           
 13643                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 13644  0032AC  5011               	movf	__CANIDToRegs@Value,w,c
 13645  0032AE  6ED9               	movwf	fsr2l,c
 13646  0032B0  6ADA               	clrf	fsr2h,c
 13647  0032B2  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13648  0032B6  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13649  0032BA  CFDF FFE7          	movff	indf2,indf1
 13650  0032BE                     l910:
 13651  0032BE  0012               	return	
 13652  0032C0                     __end_of__CANIDToRegs:
 13653                           	opt stack 0
 13654                           tblptru	equ	0xFF8
 13655                           tblptrh	equ	0xFF7
 13656                           tblptrl	equ	0xFF6
 13657                           tablat	equ	0xFF5
 13658                           prodh	equ	0xFF4
 13659                           prodl	equ	0xFF3
 13660                           postinc0	equ	0xFEE
 13661                           wreg	equ	0xFE8
 13662                           indf1	equ	0xFE7
 13663                           fsr1h	equ	0xFE2
 13664                           fsr1l	equ	0xFE1
 13665                           indf2	equ	0xFDF
 13666                           postinc2	equ	0xFDE
 13667                           postdec2	equ	0xFDD
 13668                           plusw2	equ	0xFDB
 13669                           fsr2h	equ	0xFDA
 13670                           fsr2l	equ	0xFD9
 13671                           status	equ	0xFD8
 13672                           
 13673 ;; *************** function _vscp_getEvent *****************
 13674 ;; Defined at:
 13675 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 13676 ;; Parameters:    Size  Location     Type
 13677 ;;		None
 13678 ;; Auto vars:     Size  Location     Type
 13679 ;;  rv              1   43[COMRAM] unsigned char 
 13680 ;; Return value:  Size  Location     Type
 13681 ;;                  1    wreg      unsigned char 
 13682 ;; Registers used:
 13683 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13684 ;; Tracked objects:
 13685 ;;		On entry : F/0
 13686 ;;		On exit  : 0/0
 13687 ;;		Unchanged: 0/0
 13688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13689 ;;      Params:         0       0       0       0       0       0       0
 13690 ;;      Locals:         1       0       0       0       0       0       0
 13691 ;;      Temps:          0       0       0       0       0       0       0
 13692 ;;      Totals:         1       0       0       0       0       0       0
 13693 ;;Total ram usage:        1 bytes
 13694 ;; Hardware stack levels used:    1
 13695 ;; Hardware stack levels required when called:    6
 13696 ;; This function calls:
 13697 ;;		_getVSCPFrame
 13698 ;; This function is called by:
 13699 ;;		_main
 13700 ;; This function uses a non-reentrant model
 13701 ;;
 13702                           
 13703                           	psect	text56
 13704  003EF0                     __ptext56:
 13705                           	opt stack 0
 13706  003EF0                     _vscp_getEvent:
 13707                           	opt stack 24
 13708                           
 13709                           ; BSR set to: 0
 13710                           ;vscp_firmware.c: 1309: int8_t rv;
 13711                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 13712                           
 13713                           ;incstack = 0
 13714                           ;incstack = 0
 13715  003EF0  BF96               	btfsc	_vscp_imsg& (0+255),7,b
 13716  003EF2  D012               	goto	l1283
 13717                           
 13718                           ; BSR set to: 0
 13719                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
 13720                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 13721                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 13722                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 13723                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 13724                           ;vscp_firmware.c: 1323: vscp_imsg.data))) {
 13725  003EF4  0E9A               	movlw	low (_vscp_imsg+4)
 13726  003EF6  6E1E               	movwf	?_getVSCPFrame,c
 13727  003EF8  0E9B               	movlw	low (_vscp_imsg+5)
 13728  003EFA  6E1F               	movwf	?_getVSCPFrame+1,c
 13729  003EFC  0E97               	movlw	low (_vscp_imsg+1)
 13730  003EFE  6E20               	movwf	?_getVSCPFrame+2,c
 13731  003F00  0E96               	movlw	low _vscp_imsg
 13732  003F02  6E21               	movwf	?_getVSCPFrame+3,c
 13733  003F04  0E9C               	movlw	low (_vscp_imsg+6)
 13734  003F06  6E22               	movwf	?_getVSCPFrame+4,c
 13735  003F08  0E98               	movlw	(_vscp_imsg+2)& (0+255)
 13736  003F0A  ECAB  F01D         	call	_getVSCPFrame
 13737  003F0E  6E2C               	movwf	vscp_getEvent@rv,c
 13738  003F10  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 13739  003F12  E002               	bz	l1283
 13740                           
 13741                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 13742  003F14  0100               	movlb	0	; () banked
 13743  003F16  8F96               	bsf	_vscp_imsg& (0+255),7,b
 13744  003F18                     l1283:
 13745  003F18  0012               	return	
 13746  003F1A                     __end_of_vscp_getEvent:
 13747                           	opt stack 0
 13748                           tblptru	equ	0xFF8
 13749                           tblptrh	equ	0xFF7
 13750                           tblptrl	equ	0xFF6
 13751                           tablat	equ	0xFF5
 13752                           prodh	equ	0xFF4
 13753                           prodl	equ	0xFF3
 13754                           postinc0	equ	0xFEE
 13755                           wreg	equ	0xFE8
 13756                           indf1	equ	0xFE7
 13757                           fsr1h	equ	0xFE2
 13758                           fsr1l	equ	0xFE1
 13759                           indf2	equ	0xFDF
 13760                           postinc2	equ	0xFDE
 13761                           postdec2	equ	0xFDD
 13762                           plusw2	equ	0xFDB
 13763                           fsr2h	equ	0xFDA
 13764                           fsr2l	equ	0xFD9
 13765                           status	equ	0xFD8
 13766                           
 13767 ;; *************** function _getVSCPFrame *****************
 13768 ;; Defined at:
 13769 ;;		line 2529 in file "../main.c"
 13770 ;; Parameters:    Size  Location     Type
 13771 ;;  pvscpclass      1    wreg     PTR unsigned short 
 13772 ;;		 -> vscp_imsg(14), 
 13773 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 13774 ;;		 -> vscp_imsg(14), 
 13775 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 13776 ;;		 -> vscp_imsg(14), 
 13777 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 13778 ;;		 -> vscp_imsg(14), 
 13779 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 13780 ;;		 -> vscp_imsg(14), 
 13781 ;;  pData           1   33[COMRAM] PTR unsigned char 
 13782 ;;		 -> vscp_imsg(14), 
 13783 ;; Auto vars:     Size  Location     Type
 13784 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 13785 ;;		 -> vscp_imsg(14), 
 13786 ;;  id              4   39[COMRAM] unsigned long 
 13787 ;; Return value:  Size  Location     Type
 13788 ;;                  1    wreg      unsigned char 
 13789 ;; Registers used:
 13790 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13791 ;; Tracked objects:
 13792 ;;		On entry : F/0
 13793 ;;		On exit  : 0/0
 13794 ;;		Unchanged: 0/0
 13795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13796 ;;      Params:         5       0       0       0       0       0       0
 13797 ;;      Locals:         5       0       0       0       0       0       0
 13798 ;;      Temps:          4       0       0       0       0       0       0
 13799 ;;      Totals:        14       0       0       0       0       0       0
 13800 ;;Total ram usage:       14 bytes
 13801 ;; Hardware stack levels used:    1
 13802 ;; Hardware stack levels required when called:    5
 13803 ;; This function calls:
 13804 ;;		_getCANFrame
 13805 ;; This function is called by:
 13806 ;;		_vscp_getEvent
 13807 ;; This function uses a non-reentrant model
 13808 ;;
 13809                           
 13810                           	psect	text57
 13811  003B56                     __ptext57:
 13812                           	opt stack 0
 13813  003B56                     _getVSCPFrame:
 13814                           	opt stack 24
 13815                           
 13816                           ;incstack = 0
 13817                           ;incstack = 0
 13818                           ;getVSCPFrame@pvscpclass stored from wreg
 13819  003B56  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 13820                           
 13821                           ; BSR set to: 0
 13822                           ;main.c: 2530: uint32_t id;
 13823                           ;main.c: 2532: if ( !getCANFrame(&id, pSize, pData) ) {
 13824  003B5A  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 13825  003B5E  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 13826  003B62  0E28               	movlw	getVSCPFrame@id& (0+255)
 13827  003B64  EC4D  F01F         	call	_getCANFrame
 13828  003B68  0900               	iorlw	0
 13829  003B6A  E102               	bnz	l6491
 13830                           
 13831                           ;main.c: 2533: return 0;
 13832  003B6C  0E00               	movlw	0
 13833  003B6E  D02E               	goto	l650
 13834  003B70                     l6491:
 13835                           
 13836                           ;main.c: 2534: }
 13837                           ;main.c: 2536: *pNodeId = id & 0x0ff;
 13838  003B70  501F               	movf	getVSCPFrame@pNodeId,w,c
 13839  003B72  6ED9               	movwf	fsr2l,c
 13840  003B74  6ADA               	clrf	fsr2h,c
 13841  003B76  C028  FFDF         	movff	getVSCPFrame@id,indf2
 13842                           
 13843                           ;main.c: 2537: *pvscptype = (id >> 8) & 0xff;
 13844  003B7A  501E               	movf	getVSCPFrame@pvscptype,w,c
 13845  003B7C  6ED9               	movwf	fsr2l,c
 13846  003B7E  6ADA               	clrf	fsr2h,c
 13847  003B80  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 13848                           
 13849                           ;main.c: 2538: *pvscpclass = (id >> 16) & 0x1ff;
 13850  003B84  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 13851  003B86  6E23               	movwf	??_getVSCPFrame& (0+255),c
 13852  003B88  0E01               	movlw	1
 13853  003B8A  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 13854  003B8C  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 13855  003B8E  5027               	movf	getVSCPFrame@pvscpclass,w,c
 13856  003B90  6ED9               	movwf	fsr2l,c
 13857  003B92  6ADA               	clrf	fsr2h,c
 13858  003B94  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 13859  003B98  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 13860                           
 13861                           ;main.c: 2539: *pPriority = (uint16_t) (0x07 & (id >> 26));
 13862  003B9C  5020               	movf	getVSCPFrame@pPriority,w,c
 13863  003B9E  6ED9               	movwf	fsr2l,c
 13864  003BA0  6ADA               	clrf	fsr2h,c
 13865  003BA2  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 13866  003BA6  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 13867  003BAA  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 13868  003BAE  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 13869  003BB2  0E1B               	movlw	27
 13870  003BB4  D005               	goto	u6780
 13871  003BB6                     u6785:
 13872  003BB6  90D8               	bcf	status,0,c
 13873  003BB8  3226               	rrcf	??_getVSCPFrame+3,f,c
 13874  003BBA  3225               	rrcf	??_getVSCPFrame+2,f,c
 13875  003BBC  3224               	rrcf	??_getVSCPFrame+1,f,c
 13876  003BBE  3223               	rrcf	??_getVSCPFrame,f,c
 13877  003BC0                     u6780:
 13878  003BC0  2EE8               	decfsz	wreg,f,c
 13879  003BC2  D7F9               	goto	u6785
 13880  003BC4  5023               	movf	??_getVSCPFrame,w,c
 13881  003BC6  0B07               	andlw	7
 13882  003BC8  6EDF               	movwf	indf2,c
 13883                           
 13884                           ;main.c: 2541: return 1;
 13885  003BCA  0E01               	movlw	1
 13886  003BCC                     l650:
 13887  003BCC  0012               	return	
 13888  003BCE                     __end_of_getVSCPFrame:
 13889                           	opt stack 0
 13890                           tblptru	equ	0xFF8
 13891                           tblptrh	equ	0xFF7
 13892                           tblptrl	equ	0xFF6
 13893                           tablat	equ	0xFF5
 13894                           prodh	equ	0xFF4
 13895                           prodl	equ	0xFF3
 13896                           postinc0	equ	0xFEE
 13897                           wreg	equ	0xFE8
 13898                           indf1	equ	0xFE7
 13899                           fsr1h	equ	0xFE2
 13900                           fsr1l	equ	0xFE1
 13901                           indf2	equ	0xFDF
 13902                           postinc2	equ	0xFDE
 13903                           postdec2	equ	0xFDD
 13904                           plusw2	equ	0xFDB
 13905                           fsr2h	equ	0xFDA
 13906                           fsr2l	equ	0xFD9
 13907                           status	equ	0xFD8
 13908                           
 13909 ;; *************** function _getCANFrame *****************
 13910 ;; Defined at:
 13911 ;;		line 2571 in file "../main.c"
 13912 ;; Parameters:    Size  Location     Type
 13913 ;;  pid             1    wreg     PTR unsigned long 
 13914 ;;		 -> getVSCPFrame@id(4), 
 13915 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 13916 ;;		 -> vscp_imsg(14), 
 13917 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 13918 ;;		 -> vscp_imsg(14), 
 13919 ;; Auto vars:     Size  Location     Type
 13920 ;;  pid             1   27[COMRAM] PTR unsigned long 
 13921 ;;		 -> getVSCPFrame@id(4), 
 13922 ;;  flags           1   28[COMRAM] enum E16349
 13923 ;; Return value:  Size  Location     Type
 13924 ;;                  1    wreg      unsigned char 
 13925 ;; Registers used:
 13926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13927 ;; Tracked objects:
 13928 ;;		On entry : F/0
 13929 ;;		On exit  : 0/0
 13930 ;;		Unchanged: 0/0
 13931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13932 ;;      Params:         2       0       0       0       0       0       0
 13933 ;;      Locals:         2       0       0       0       0       0       0
 13934 ;;      Temps:          0       0       0       0       0       0       0
 13935 ;;      Totals:         4       0       0       0       0       0       0
 13936 ;;Total ram usage:        4 bytes
 13937 ;; Hardware stack levels used:    1
 13938 ;; Hardware stack levels required when called:    4
 13939 ;; This function calls:
 13940 ;;		_ECANReceiveMessage
 13941 ;; This function is called by:
 13942 ;;		_getVSCPFrame
 13943 ;; This function uses a non-reentrant model
 13944 ;;
 13945                           
 13946                           	psect	text58
 13947  003E9A                     __ptext58:
 13948                           	opt stack 0
 13949  003E9A                     _getCANFrame:
 13950                           	opt stack 24
 13951                           
 13952                           ;incstack = 0
 13953                           ;incstack = 0
 13954                           ;getCANFrame@pid stored from wreg
 13955  003E9A  CFE8 F01C          	movff	wreg,getCANFrame@pid
 13956                           
 13957                           ; BSR set to: 0
 13958                           ;main.c: 2572: ECAN_RX_MSG_FLAGS flags;
 13959                           ;main.c: 2576: if (vscp_imsg.flags & 0x80) return 0;
 13960  003E9E  AF96               	btfss	_vscp_imsg& (0+255),7,b
 13961  003EA0  D002               	goto	l6507
 13962  003EA2                     l6503:
 13963  003EA2  0E00               	movlw	0
 13964  003EA4  D00F               	goto	l661
 13965  003EA6                     l6507:
 13966                           
 13967                           ; BSR set to: 0
 13968                           ;main.c: 2578: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 13969  003EA6  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 13970  003EAA  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 13971  003EAE  0E1D               	movlw	low getCANFrame@flags
 13972  003EB0  6E11               	movwf	?_ECANReceiveMessage+2,c
 13973  003EB2  501C               	movf	getCANFrame@pid,w,c
 13974  003EB4  EC8B  F014         	call	_ECANReceiveMessage
 13975  003EB8  0900               	iorlw	0
 13976  003EBA  E0F3               	bz	l6503
 13977                           
 13978                           ;main.c: 2581: if (flags & ECAN_RX_RTR_FRAME) return 0;
 13979  003EBC  AC1D               	btfss	getCANFrame@flags,6,c
 13980                           
 13981                           ;main.c: 2584: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 13982  003EBE  AA1D               	btfss	getCANFrame@flags,5,c
 13983  003EC0  D7F0               	goto	l6503
 13984                           
 13985                           ;main.c: 2586: return 1;
 13986  003EC2  0E01               	movlw	1
 13987  003EC4                     l661:
 13988  003EC4  0012               	return	
 13989  003EC6                     __end_of_getCANFrame:
 13990                           	opt stack 0
 13991                           tblptru	equ	0xFF8
 13992                           tblptrh	equ	0xFF7
 13993                           tblptrl	equ	0xFF6
 13994                           tablat	equ	0xFF5
 13995                           prodh	equ	0xFF4
 13996                           prodl	equ	0xFF3
 13997                           postinc0	equ	0xFEE
 13998                           wreg	equ	0xFE8
 13999                           indf1	equ	0xFE7
 14000                           fsr1h	equ	0xFE2
 14001                           fsr1l	equ	0xFE1
 14002                           indf2	equ	0xFDF
 14003                           postinc2	equ	0xFDE
 14004                           postdec2	equ	0xFDD
 14005                           plusw2	equ	0xFDB
 14006                           fsr2h	equ	0xFDA
 14007                           fsr2l	equ	0xFD9
 14008                           status	equ	0xFD8
 14009                           
 14010 ;; *************** function _ECANReceiveMessage *****************
 14011 ;; Defined at:
 14012 ;;		line 803 in file "../ECAN.c"
 14013 ;; Parameters:    Size  Location     Type
 14014 ;;  id              1    wreg     PTR unsigned long 
 14015 ;;		 -> getVSCPFrame@id(4), 
 14016 ;;  data            1   14[COMRAM] PTR unsigned char 
 14017 ;;		 -> vscp_imsg(14), 
 14018 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 14019 ;;		 -> vscp_imsg(14), 
 14020 ;;  msgFlags        1   16[COMRAM] PTR enum E16324
 14021 ;;		 -> getCANFrame@flags(1), 
 14022 ;; Auto vars:     Size  Location     Type
 14023 ;;  id              1   19[COMRAM] PTR unsigned long 
 14024 ;;		 -> getVSCPFrame@id(4), 
 14025 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 14026 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14027 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14028 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 14029 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14030 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14031 ;;  temp            1   22[COMRAM] struct .
 14032 ;;  mode            1   21[COMRAM] unsigned char 
 14033 ;;  i               1   20[COMRAM] unsigned char 
 14034 ;; Return value:  Size  Location     Type
 14035 ;;                  1    wreg      enum E15660
 14036 ;; Registers used:
 14037 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14038 ;; Tracked objects:
 14039 ;;		On entry : F/0
 14040 ;;		On exit  : 0/0
 14041 ;;		Unchanged: 0/0
 14042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14043 ;;      Params:         3       0       0       0       0       0       0
 14044 ;;      Locals:         8       0       0       0       0       0       0
 14045 ;;      Temps:          0       0       0       0       0       0       0
 14046 ;;      Totals:        11       0       0       0       0       0       0
 14047 ;;Total ram usage:       11 bytes
 14048 ;; Hardware stack levels used:    1
 14049 ;; Hardware stack levels required when called:    3
 14050 ;; This function calls:
 14051 ;;		__ECANPointBuffer
 14052 ;;		__RegsToCANID
 14053 ;; This function is called by:
 14054 ;;		_getCANFrame
 14055 ;; This function uses a non-reentrant model
 14056 ;;
 14057                           
 14058                           	psect	text59
 14059  002916                     __ptext59:
 14060                           	opt stack 0
 14061  002916                     _ECANReceiveMessage:
 14062                           	opt stack 24
 14063                           
 14064                           ;incstack = 0
 14065                           ;incstack = 0
 14066                           ;ECANReceiveMessage@id stored from wreg
 14067  002916  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 14068                           
 14069                           ; BSR set to: 0
 14070                           ;ECAN.c: 805: BYTE mode;
 14071                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 14072                           ;ECAN.c: 809: char i;
 14073                           ;ECAN.c: 810: BYTE_VAL temp;
 14074                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 14075  00291A  6A54               	clrf	__ECANRxFilterHitInfo,c
 14076                           
 14077                           ; BSR set to: 0
 14078                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 14079  00291C  5077               	movf	3959,w,c	;volatile
 14080  00291E  0BC0               	andlw	192
 14081  002920  6E16               	movwf	ECANReceiveMessage@mode,c
 14082                           
 14083                           ; BSR set to: 0
 14084                           ;ECAN.c: 816: if ( mode == 0x00 )
 14085  002922  6616               	tstfsz	ECANReceiveMessage@mode,c
 14086  002924  D032               	goto	l6639
 14087                           
 14088                           ; BSR set to: 0
 14089                           ;ECAN.c: 822: {
 14090                           ;ECAN.c: 824: if ( RXB0FUL )
 14091  002926  AE60               	btfss	3936,7,c	;volatile
 14092  002928  D012               	goto	l861
 14093                           
 14094                           ; BSR set to: 0
 14095                           ;ECAN.c: 825: {
 14096                           ;ECAN.c: 827: RXB0IF = 0;
 14097  00292A  90A4               	bcf	4004,0,c	;volatile
 14098                           
 14099                           ;ECAN.c: 830: if ( RXB0OVFL )
 14100  00292C  AE74               	btfss	3956,7,c	;volatile
 14101  00292E  D006               	goto	l6615
 14102                           
 14103                           ; BSR set to: 0
 14104                           ;ECAN.c: 831: {
 14105                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 14106  002930  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14107  002932  6ED9               	movwf	fsr2l,c
 14108  002934  6ADA               	clrf	fsr2h,c
 14109  002936  0E00               	movlw	0
 14110  002938  86DB               	bsf	plusw2,3,c
 14111                           
 14112                           ; BSR set to: 0
 14113                           ;ECAN.c: 833: RXB0OVFL = 0;
 14114  00293A  9E74               	bcf	3956,7,c	;volatile
 14115  00293C                     l6615:
 14116                           
 14117                           ; BSR set to: 0
 14118                           ;ECAN.c: 834: }
 14119                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 14120  00293C  A060               	btfss	3936,0,c	;volatile
 14121  00293E  D002               	bra	u6955
 14122  002940  8054               	bsf	__ECANRxFilterHitInfo,0,c
 14123  002942  D001               	bra	u6957
 14124  002944                     u6955:
 14125  002944  9054               	bcf	__ECANRxFilterHitInfo,0,c
 14126  002946                     u6957:
 14127                           
 14128                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 14129  002946  0E0F               	movlw	15	;volatile
 14130  002948  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14131  00294A  0E60               	movlw	96	;volatile
 14132  00294C  D01A               	goto	L40
 14133  00294E                     l861:
 14134                           
 14135                           ; BSR set to: 0
 14136                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 14137  00294E  010F               	movlb	15	; () banked
 14138  002950  AF50               	btfss	80,7,b	;volatile
 14139  002952  D019               	goto	l6633
 14140                           
 14141                           ; BSR set to: 15
 14142                           ;ECAN.c: 842: {
 14143                           ;ECAN.c: 844: RXB1IF = 0;
 14144  002954  92A4               	bcf	4004,1,c	;volatile
 14145                           
 14146                           ;ECAN.c: 847: if ( RXB1OVFL )
 14147  002956  AC74               	btfss	3956,6,c	;volatile
 14148  002958  D006               	goto	l6625
 14149                           
 14150                           ; BSR set to: 15
 14151                           ;ECAN.c: 848: {
 14152                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 14153  00295A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14154  00295C  6ED9               	movwf	fsr2l,c
 14155  00295E  6ADA               	clrf	fsr2h,c
 14156  002960  0E00               	movlw	0
 14157  002962  86DB               	bsf	plusw2,3,c
 14158                           
 14159                           ; BSR set to: 15
 14160                           ;ECAN.c: 850: RXB1OVFL = 0;
 14161  002964  9C74               	bcf	3956,6,c	;volatile
 14162  002966                     l6625:
 14163                           
 14164                           ; BSR set to: 15
 14165                           ;ECAN.c: 851: }
 14166                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 14167  002966  5150               	movf	80,w,b	;volatile
 14168  002968  0B07               	andlw	7
 14169  00296A  6E54               	movwf	__ECANRxFilterHitInfo,c
 14170                           
 14171                           ; BSR set to: 15
 14172                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 14173  00296C  0E02               	movlw	2
 14174  00296E  6054               	cpfslt	__ECANRxFilterHitInfo,c
 14175  002970  D005               	goto	l6631
 14176                           
 14177                           ; BSR set to: 15
 14178                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 14179  002972  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14180  002974  6ED9               	movwf	fsr2l,c
 14181  002976  6ADA               	clrf	fsr2h,c
 14182  002978  0E00               	movlw	0
 14183  00297A  8EDB               	bsf	plusw2,7,c
 14184  00297C                     l6631:
 14185                           
 14186                           ; BSR set to: 15
 14187                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 14188  00297C  0E0F               	movlw	15	;volatile
 14189  00297E  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14190  002980  0E50               	movlw	80	;volatile
 14191  002982                     L40:
 14192  002982  6E18               	movwf	ECANReceiveMessage@ptr,c
 14193                           
 14194                           ;ECAN.c: 860: }
 14195  002984  D065               	goto	l6693
 14196  002986                     l6633:
 14197                           
 14198                           ;ECAN.c: 861: else
 14199                           ;ECAN.c: 862: return FALSE;
 14200  002986  0E00               	movlw	0
 14201  002988  D0CC               	goto	l868
 14202  00298A                     l6639:
 14203                           
 14204                           ; BSR set to: 0
 14205                           ;ECAN.c: 869: else if ( mode == 0x40 )
 14206  00298A  5016               	movf	ECANReceiveMessage@mode,w,c
 14207  00298C  0A40               	xorlw	64
 14208  00298E  E146               	bnz	l871
 14209                           
 14210                           ; BSR set to: 0
 14211                           ;ECAN.c: 875: {
 14212                           ;ECAN.c: 876: if ( RXB0FUL )
 14213  002990  AE60               	btfss	3936,7,c	;volatile
 14214  002992  D004               	goto	l872
 14215                           
 14216                           ; BSR set to: 0
 14217                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 14218  002994  0E0F               	movlw	15	;volatile
 14219  002996  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14220  002998  0E60               	movlw	96	;volatile
 14221  00299A  D03E               	goto	L47
 14222  00299C                     l872:
 14223                           
 14224                           ; BSR set to: 0
 14225                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 14226  00299C  010F               	movlb	15	; () banked
 14227  00299E  AF50               	btfss	80,7,b	;volatile
 14228  0029A0  D004               	goto	l874
 14229                           
 14230                           ; BSR set to: 15
 14231                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 14232  0029A2  0E0F               	movlw	15	;volatile
 14233  0029A4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14234  0029A6  0E50               	movlw	80	;volatile
 14235  0029A8  D037               	goto	L47
 14236  0029AA                     l874:
 14237                           
 14238                           ; BSR set to: 15
 14239                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 14240  0029AA  010D               	movlb	13
 14241  0029AC  B5F8               	btfsc	248,2,b	;volatile
 14242  0029AE  D007               	goto	l876
 14243  0029B0  010E               	movlb	14
 14244  0029B2  AF20               	btfss	32,7,b	;volatile
 14245  0029B4  D004               	goto	l876
 14246                           
 14247                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 14248  0029B6  0E0E               	movlw	14	;volatile
 14249  0029B8  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14250  0029BA  0E20               	movlw	32	;volatile
 14251  0029BC  D02D               	goto	L47
 14252  0029BE                     l876:
 14253                           
 14254                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 14255  0029BE  010D               	movlb	13
 14256  0029C0  B7F8               	btfsc	248,3,b	;volatile
 14257  0029C2  D007               	goto	l878
 14258  0029C4  010E               	movlb	14
 14259  0029C6  AF30               	btfss	48,7,b	;volatile
 14260  0029C8  D004               	goto	l878
 14261                           
 14262                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 14263  0029CA  0E0E               	movlw	14	;volatile
 14264  0029CC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14265  0029CE  0E30               	movlw	48	;volatile
 14266  0029D0  D023               	goto	L47
 14267  0029D2                     l878:
 14268                           
 14269                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 14270  0029D2  010D               	movlb	13
 14271  0029D4  B9F8               	btfsc	248,4,b	;volatile
 14272  0029D6  D007               	goto	l880
 14273  0029D8  010E               	movlb	14
 14274  0029DA  AF40               	btfss	64,7,b	;volatile
 14275  0029DC  D004               	goto	l880
 14276                           
 14277                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 14278  0029DE  0E0E               	movlw	14	;volatile
 14279  0029E0  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14280  0029E2  0E40               	movlw	64	;volatile
 14281  0029E4  D019               	goto	L47
 14282  0029E6                     l880:
 14283                           
 14284                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 14285  0029E6  010D               	movlb	13
 14286  0029E8  BBF8               	btfsc	248,5,b	;volatile
 14287  0029EA  D005               	goto	l882
 14288  0029EC  010E               	movlb	14
 14289  0029EE  AF50               	btfss	80,7,b	;volatile
 14290  0029F0  D002               	goto	l882
 14291                           
 14292                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 14293  0029F2  0E0E               	movlw	14	;volatile
 14294  0029F4  D7D7               	goto	L48
 14295  0029F6                     l882:
 14296                           
 14297                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 14298  0029F6  010D               	movlb	13
 14299  0029F8  BDF8               	btfsc	248,6,b	;volatile
 14300  0029FA  D005               	goto	l884
 14301  0029FC  010E               	movlb	14
 14302  0029FE  AF60               	btfss	96,7,b	;volatile
 14303  002A00  D002               	goto	l884
 14304                           
 14305                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 14306  002A02  0E0E               	movlw	14	;volatile
 14307  002A04  D7C8               	goto	L49
 14308  002A06                     l884:
 14309                           
 14310                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 14311  002A06  010D               	movlb	13
 14312  002A08  BFF8               	btfsc	248,7,b	;volatile
 14313  002A0A  D7BD               	goto	l6633
 14314  002A0C  010E               	movlb	14
 14315  002A0E  AF70               	btfss	112,7,b	;volatile
 14316  002A10  D7BA               	goto	l6633
 14317                           
 14318                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 14319  002A12  0E0E               	movlw	14	;volatile
 14320  002A14  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14321  002A16  0E70               	movlw	112	;volatile
 14322  002A18                     L47:
 14323  002A18  6E18               	movwf	ECANReceiveMessage@ptr,c
 14324  002A1A  D00A               	goto	l6683
 14325  002A1C                     l871:
 14326                           
 14327                           ; BSR set to: 0
 14328                           ;ECAN.c: 910: else
 14329                           ;ECAN.c: 915: {
 14330                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 14331  002A1C  AE74               	btfss	3956,7,c	;volatile
 14332  002A1E  D7B3               	goto	l6633
 14333                           
 14334                           ; BSR set to: 0
 14335                           ;ECAN.c: 917: {
 14336                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 14337  002A20  506F               	movf	3951,w,c	;volatile
 14338  002A22  0B07               	andlw	7
 14339  002A24  ECE7  F01D         	call	__ECANPointBuffer
 14340  002A28  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 14341  002A2C  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 14342  002A30                     l6683:
 14343                           
 14344                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 14345  002A30  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14346  002A34  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14347  002A38  50DF               	movf	indf2,w,c
 14348  002A3A  0B1F               	andlw	31
 14349  002A3C  6E54               	movwf	__ECANRxFilterHitInfo,c
 14350                           
 14351                           ;ECAN.c: 932: RXB1IF = 0;
 14352  002A3E  92A4               	bcf	4004,1,c	;volatile
 14353                           
 14354                           ;ECAN.c: 934: if ( RXB1OVFL )
 14355  002A40  AC74               	btfss	3956,6,c	;volatile
 14356  002A42  D006               	goto	l6693
 14357                           
 14358                           ;ECAN.c: 935: {
 14359                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 14360  002A44  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14361  002A46  6ED9               	movwf	fsr2l,c
 14362  002A48  6ADA               	clrf	fsr2h,c
 14363  002A4A  0E00               	movlw	0
 14364  002A4C  86DB               	bsf	plusw2,3,c
 14365                           
 14366                           ;ECAN.c: 937: RXB1OVFL = 0;
 14367  002A4E  9C74               	bcf	3956,6,c	;volatile
 14368  002A50                     l6693:
 14369                           
 14370                           ;ECAN.c: 942: savedPtr = ptr;
 14371  002A50  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 14372  002A54  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 14373                           
 14374                           ;ECAN.c: 943: *msgFlags = 0;
 14375  002A58  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14376  002A5A  6ED9               	movwf	fsr2l,c
 14377  002A5C  6ADA               	clrf	fsr2h,c
 14378  002A5E  6ADF               	clrf	indf2,c
 14379                           
 14380                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 14381  002A60  EE20 F005          	lfsr	2,5
 14382  002A64  5018               	movf	ECANReceiveMessage@ptr,w,c
 14383  002A66  26D9               	addwf	fsr2l,f,c
 14384  002A68  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14385  002A6A  22DA               	addwfc	fsr2h,f,c
 14386  002A6C  50DF               	movf	indf2,w,c
 14387  002A6E  6E17               	movwf	ECANReceiveMessage@temp,c
 14388                           
 14389                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 14390  002A70  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14391  002A72  6ED9               	movwf	fsr2l,c
 14392  002A74  6ADA               	clrf	fsr2h,c
 14393  002A76  5017               	movf	ECANReceiveMessage@temp,w,c
 14394  002A78  0B0F               	andlw	15
 14395  002A7A  6EDF               	movwf	indf2,c
 14396                           
 14397                           ;ECAN.c: 950: if ( temp.bits.b6 )
 14398  002A7C  AC17               	btfss	ECANReceiveMessage@temp,6,c
 14399  002A7E  D005               	goto	l892
 14400                           
 14401                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 14402  002A80  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14403  002A82  6ED9               	movwf	fsr2l,c
 14404  002A84  6ADA               	clrf	fsr2h,c
 14405  002A86  0E00               	movlw	0
 14406  002A88  8CDB               	bsf	plusw2,6,c
 14407  002A8A                     l892:
 14408                           
 14409                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 14410  002A8A  EE20 F002          	lfsr	2,2
 14411  002A8E  5018               	movf	ECANReceiveMessage@ptr,w,c
 14412  002A90  26D9               	addwf	fsr2l,f,c
 14413  002A92  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14414  002A94  22DA               	addwfc	fsr2h,f,c
 14415  002A96  50DF               	movf	indf2,w,c
 14416  002A98  6E17               	movwf	ECANReceiveMessage@temp,c
 14417                           
 14418                           ;ECAN.c: 955: if ( temp.bits.b3 )
 14419  002A9A  A617               	btfss	ECANReceiveMessage@temp,3,c
 14420  002A9C  D008               	goto	l893
 14421                           
 14422                           ;ECAN.c: 956: {
 14423                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 14424  002A9E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14425  002AA0  6ED9               	movwf	fsr2l,c
 14426  002AA2  6ADA               	clrf	fsr2h,c
 14427  002AA4  0E00               	movlw	0
 14428  002AA6  8ADB               	bsf	plusw2,5,c
 14429                           
 14430                           ;ECAN.c: 958: temp.Val = 1;
 14431  002AA8  0E01               	movlw	1
 14432  002AAA  6E17               	movwf	ECANReceiveMessage@temp,c
 14433                           
 14434                           ;ECAN.c: 959: }
 14435  002AAC  D001               	goto	l6711
 14436  002AAE                     l893:
 14437                           
 14438                           ;ECAN.c: 960: else
 14439                           ;ECAN.c: 961: temp.Val = 0;
 14440  002AAE  6A17               	clrf	ECANReceiveMessage@temp,c
 14441  002AB0                     l6711:
 14442                           
 14443                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 14444  002AB0  2818               	incf	ECANReceiveMessage@ptr,w,c
 14445  002AB2  6E08               	movwf	?__RegsToCANID,c
 14446  002AB4  0E00               	movlw	0
 14447  002AB6  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 14448  002AB8  6E09               	movwf	?__RegsToCANID+1,c
 14449  002ABA  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 14450  002ABE  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 14451  002AC2  EC06  F018         	call	__RegsToCANID	;wreg free
 14452                           
 14453                           ;ECAN.c: 966: ptr += 6;
 14454  002AC6  0E06               	movlw	6
 14455  002AC8  2618               	addwf	ECANReceiveMessage@ptr,f,c
 14456  002ACA  0E00               	movlw	0
 14457  002ACC  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 14458                           
 14459                           ;ECAN.c: 967: temp.Val = *dataLen;
 14460  002ACE  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14461  002AD0  6ED9               	movwf	fsr2l,c
 14462  002AD2  6ADA               	clrf	fsr2h,c
 14463  002AD4  50DF               	movf	indf2,w,c
 14464  002AD6  6E17               	movwf	ECANReceiveMessage@temp,c
 14465                           
 14466                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 14467  002AD8  6A15               	clrf	ECANReceiveMessage@i,c
 14468  002ADA  D00D               	goto	l6727
 14469  002ADC                     l6719:
 14470                           
 14471                           ;ECAN.c: 969: *data++ = *ptr++;
 14472  002ADC  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14473  002AE0  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14474  002AE4  500F               	movf	ECANReceiveMessage@data,w,c
 14475  002AE6  6EE1               	movwf	fsr1l,c
 14476  002AE8  6AE2               	clrf	fsr1h,c
 14477  002AEA  CFDF FFE7          	movff	indf2,indf1
 14478  002AEE  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 14479  002AF0  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 14480  002AF2  2A0F               	incf	ECANReceiveMessage@data,f,c
 14481  002AF4  2A15               	incf	ECANReceiveMessage@i,f,c
 14482  002AF6                     l6727:
 14483  002AF6  5017               	movf	ECANReceiveMessage@temp,w,c
 14484  002AF8  5C15               	subwf	ECANReceiveMessage@i,w,c
 14485  002AFA  E3F0               	bnc	l6719
 14486                           
 14487                           ;ECAN.c: 972: if ( IRXIF )
 14488  002AFC  AEA4               	btfss	4004,7,c	;volatile
 14489  002AFE  D006               	goto	l6733
 14490                           
 14491                           ;ECAN.c: 973: {
 14492                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 14493  002B00  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14494  002B02  6ED9               	movwf	fsr2l,c
 14495  002B04  6ADA               	clrf	fsr2h,c
 14496  002B06  0E00               	movlw	0
 14497  002B08  88DB               	bsf	plusw2,4,c
 14498                           
 14499                           ;ECAN.c: 975: IRXIF = 0;
 14500  002B0A  9EA4               	bcf	4004,7,c	;volatile
 14501  002B0C                     l6733:
 14502                           
 14503                           ;ECAN.c: 976: }
 14504                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 14505  002B0C  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 14506  002B10  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 14507  002B14  0E7F               	movlw	127
 14508  002B16  16DF               	andwf	indf2,f,c
 14509                           
 14510                           ;ECAN.c: 983: if ( mode == 0x80 )
 14511  002B18  5016               	movf	ECANReceiveMessage@mode,w,c
 14512  002B1A  0A80               	xorlw	128
 14513  002B1C  B4D8               	btfsc	status,2,c
 14514                           
 14515                           ;ECAN.c: 984: FIFOEMPTY = 0;
 14516  002B1E  9E74               	bcf	3956,7,c	;volatile
 14517                           
 14518                           ;ECAN.c: 990: return TRUE;
 14519  002B20  0E01               	movlw	1
 14520  002B22                     l868:
 14521  002B22  0012               	return	
 14522  002B24                     __end_of_ECANReceiveMessage:
 14523                           	opt stack 0
 14524                           tblptru	equ	0xFF8
 14525                           tblptrh	equ	0xFF7
 14526                           tblptrl	equ	0xFF6
 14527                           tablat	equ	0xFF5
 14528                           prodh	equ	0xFF4
 14529                           prodl	equ	0xFF3
 14530                           postinc0	equ	0xFEE
 14531                           wreg	equ	0xFE8
 14532                           indf1	equ	0xFE7
 14533                           fsr1h	equ	0xFE2
 14534                           fsr1l	equ	0xFE1
 14535                           indf2	equ	0xFDF
 14536                           postinc2	equ	0xFDE
 14537                           postdec2	equ	0xFDD
 14538                           plusw2	equ	0xFDB
 14539                           fsr2h	equ	0xFDA
 14540                           fsr2l	equ	0xFD9
 14541                           status	equ	0xFD8
 14542                           
 14543 ;; *************** function __RegsToCANID *****************
 14544 ;; Defined at:
 14545 ;;		line 1156 in file "../ECAN.c"
 14546 ;; Parameters:    Size  Location     Type
 14547 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 14548 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14549 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14550 ;;  val             1    9[COMRAM] PTR unsigned long 
 14551 ;;		 -> getVSCPFrame@id(4), 
 14552 ;;  type            1   10[COMRAM] unsigned char 
 14553 ;; Auto vars:     Size  Location     Type
 14554 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 14555 ;;		 -> getVSCPFrame@id(4), 
 14556 ;; Return value:  Size  Location     Type
 14557 ;;		None               void
 14558 ;; Registers used:
 14559 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14560 ;; Tracked objects:
 14561 ;;		On entry : 0/0
 14562 ;;		On exit  : 0/0
 14563 ;;		Unchanged: 0/0
 14564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14565 ;;      Params:         4       0       0       0       0       0       0
 14566 ;;      Locals:         1       0       0       0       0       0       0
 14567 ;;      Temps:          2       0       0       0       0       0       0
 14568 ;;      Totals:         7       0       0       0       0       0       0
 14569 ;;Total ram usage:        7 bytes
 14570 ;; Hardware stack levels used:    1
 14571 ;; Hardware stack levels required when called:    2
 14572 ;; This function calls:
 14573 ;;		Nothing
 14574 ;; This function is called by:
 14575 ;;		_ECANReceiveMessage
 14576 ;; This function uses a non-reentrant model
 14577 ;;
 14578                           
 14579                           	psect	text60
 14580  00300C                     __ptext60:
 14581                           	opt stack 0
 14582  00300C                     __RegsToCANID:
 14583                           	opt stack 24
 14584                           
 14585                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 14586                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 14587                           
 14588                           ;incstack = 0
 14589                           ;incstack = 0
 14590  00300C  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 14591                           
 14592                           ;ECAN.c: 1161: if ( type == 0 )
 14593  003010  660B               	tstfsz	__RegsToCANID@type,c
 14594  003012  D046               	goto	l6807
 14595                           
 14596                           ;ECAN.c: 1162: {
 14597                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 14598  003014  500E               	movf	__RegsToCANID@Value,w,c
 14599  003016  6ED9               	movwf	fsr2l,c
 14600  003018  6ADA               	clrf	fsr2h,c
 14601  00301A  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14602  00301E  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14603  003022  50E7               	movf	indf1,w,c
 14604  003024  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14605  003026  90D8               	bcf	status,0,c
 14606  003028  360C               	rlcf	??__RegsToCANID,f,c
 14607  00302A  90D8               	bcf	status,0,c
 14608  00302C  360C               	rlcf	??__RegsToCANID,f,c
 14609  00302E  90D8               	bcf	status,0,c
 14610  003030  340C               	rlcf	??__RegsToCANID,w,c
 14611  003032  6EDF               	movwf	indf2,c
 14612                           
 14613                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 14614  003034  500E               	movf	__RegsToCANID@Value,w,c
 14615  003036  6ED9               	movwf	fsr2l,c
 14616  003038  6ADA               	clrf	fsr2h,c
 14617  00303A  2AD9               	incf	fsr2l,f,c
 14618  00303C  6ADA               	clrf	fsr2h,c
 14619  00303E  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14620  003042  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14621  003046  50E7               	movf	indf1,w,c
 14622  003048  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14623  00304A  0E05               	movlw	5
 14624  00304C  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14625  00304E                     u7275:
 14626  00304E  90D8               	bcf	status,0,c
 14627  003050  320C               	rrcf	??__RegsToCANID,f,c
 14628  003052  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14629  003054  D7FC               	goto	u7275
 14630  003056  500C               	movf	??__RegsToCANID,w,c
 14631  003058  6EDF               	movwf	indf2,c
 14632                           
 14633                           ;ECAN.c: 1166: ptr++;
 14634  00305A  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14635  00305C  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14636                           
 14637                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 14638  00305E  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14639  003062  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14640  003066  50DF               	movf	indf2,w,c
 14641  003068  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14642  00306A  0E05               	movlw	5
 14643  00306C  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14644  00306E                     u7285:
 14645  00306E  90D8               	bcf	status,0,c
 14646  003070  320C               	rrcf	??__RegsToCANID,f,c
 14647  003072  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14648  003074  D7FC               	goto	u7285
 14649  003076  500E               	movf	__RegsToCANID@Value,w,c
 14650  003078  6ED9               	movwf	fsr2l,c
 14651  00307A  6ADA               	clrf	fsr2h,c
 14652  00307C  500C               	movf	??__RegsToCANID,w,c
 14653  00307E  12DF               	iorwf	indf2,f,c
 14654                           
 14655                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 14656  003080  500E               	movf	__RegsToCANID@Value,w,c
 14657  003082  6ED9               	movwf	fsr2l,c
 14658  003084  6ADA               	clrf	fsr2h,c
 14659  003086  0E02               	movlw	2
 14660  003088  26D9               	addwf	fsr2l,f,c
 14661  00308A  6ADA               	clrf	fsr2h,c
 14662  00308C  6ADF               	clrf	indf2,c
 14663                           
 14664                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 14665  00308E  500E               	movf	__RegsToCANID@Value,w,c
 14666  003090  6ED9               	movwf	fsr2l,c
 14667  003092  6ADA               	clrf	fsr2h,c
 14668  003094  0E03               	movlw	3
 14669  003096  26D9               	addwf	fsr2l,f,c
 14670  003098  6ADA               	clrf	fsr2h,c
 14671  00309A  0E00               	movlw	0
 14672  00309C  6EDF               	movwf	indf2,c
 14673                           
 14674                           ;ECAN.c: 1170: }
 14675  00309E  D067               	goto	l915
 14676  0030A0                     l6807:
 14677                           
 14678                           ;ECAN.c: 1171: else
 14679                           ;ECAN.c: 1172: {
 14680                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 14681  0030A0  500E               	movf	__RegsToCANID@Value,w,c
 14682  0030A2  6ED9               	movwf	fsr2l,c
 14683  0030A4  6ADA               	clrf	fsr2h,c
 14684  0030A6  0E02               	movlw	2
 14685  0030A8  26D9               	addwf	fsr2l,f,c
 14686  0030AA  6ADA               	clrf	fsr2h,c
 14687  0030AC  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14688  0030B0  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14689  0030B4  50E7               	movf	indf1,w,c
 14690  0030B6  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14691  0030B8  0E05               	movlw	5
 14692  0030BA  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14693  0030BC                     u7295:
 14694  0030BC  90D8               	bcf	status,0,c
 14695  0030BE  360C               	rlcf	??__RegsToCANID,f,c
 14696  0030C0  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14697  0030C2  D7FC               	goto	u7295
 14698  0030C4  500C               	movf	??__RegsToCANID,w,c
 14699  0030C6  6EDF               	movwf	indf2,c
 14700                           
 14701                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 14702  0030C8  500E               	movf	__RegsToCANID@Value,w,c
 14703  0030CA  6ED9               	movwf	fsr2l,c
 14704  0030CC  6ADA               	clrf	fsr2h,c
 14705  0030CE  0E03               	movlw	3
 14706  0030D0  26D9               	addwf	fsr2l,f,c
 14707  0030D2  6ADA               	clrf	fsr2h,c
 14708  0030D4  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14709  0030D8  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14710  0030DC  50E7               	movf	indf1,w,c
 14711  0030DE  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14712  0030E0  90D8               	bcf	status,0,c
 14713  0030E2  320C               	rrcf	??__RegsToCANID,f,c
 14714  0030E4  90D8               	bcf	status,0,c
 14715  0030E6  320C               	rrcf	??__RegsToCANID,f,c
 14716  0030E8  90D8               	bcf	status,0,c
 14717  0030EA  300C               	rrcf	??__RegsToCANID,w,c
 14718  0030EC  6EDF               	movwf	indf2,c
 14719                           
 14720                           ;ECAN.c: 1176: ptr++;
 14721  0030EE  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14722  0030F0  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14723                           
 14724                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 14725  0030F2  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14726  0030F6  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14727  0030FA  50DF               	movf	indf2,w,c
 14728  0030FC  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14729  0030FE  0E03               	movlw	3
 14730  003100  160C               	andwf	??__RegsToCANID,f,c
 14731  003102  500E               	movf	__RegsToCANID@Value,w,c
 14732  003104  6ED9               	movwf	fsr2l,c
 14733  003106  6ADA               	clrf	fsr2h,c
 14734  003108  0E02               	movlw	2
 14735  00310A  26D9               	addwf	fsr2l,f,c
 14736  00310C  6ADA               	clrf	fsr2h,c
 14737  00310E  500C               	movf	??__RegsToCANID,w,c
 14738  003110  12DF               	iorwf	indf2,f,c
 14739                           
 14740                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 14741  003112  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14742  003116  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14743  00311A  50DF               	movf	indf2,w,c
 14744  00311C  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14745  00311E  90D8               	bcf	status,0,c
 14746  003120  320C               	rrcf	??__RegsToCANID,f,c
 14747  003122  90D8               	bcf	status,0,c
 14748  003124  320C               	rrcf	??__RegsToCANID,f,c
 14749  003126  90D8               	bcf	status,0,c
 14750  003128  320C               	rrcf	??__RegsToCANID,f,c
 14751  00312A  0E1C               	movlw	28
 14752  00312C  160C               	andwf	??__RegsToCANID,f,c
 14753  00312E  500E               	movf	__RegsToCANID@Value,w,c
 14754  003130  6ED9               	movwf	fsr2l,c
 14755  003132  6ADA               	clrf	fsr2h,c
 14756  003134  0E02               	movlw	2
 14757  003136  26D9               	addwf	fsr2l,f,c
 14758  003138  6ADA               	clrf	fsr2h,c
 14759  00313A  500C               	movf	??__RegsToCANID,w,c
 14760  00313C  12DF               	iorwf	indf2,f,c
 14761                           
 14762                           ;ECAN.c: 1180: ptr++;
 14763  00313E  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14764  003140  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14765                           
 14766                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 14767  003142  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14768  003146  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14769  00314A  500E               	movf	__RegsToCANID@Value,w,c
 14770  00314C  6EE1               	movwf	fsr1l,c
 14771  00314E  6AE2               	clrf	fsr1h,c
 14772  003150  2AE1               	incf	fsr1l,f,c
 14773  003152  6AE2               	clrf	fsr1h,c
 14774  003154  CFDF FFE7          	movff	indf2,indf1
 14775                           
 14776                           ;ECAN.c: 1182: ptr++;
 14777  003158  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14778  00315A  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14779                           
 14780                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 14781  00315C  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14782  003160  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14783  003164  500E               	movf	__RegsToCANID@Value,w,c
 14784  003166  6EE1               	movwf	fsr1l,c
 14785  003168  6AE2               	clrf	fsr1h,c
 14786  00316A  CFDF FFE7          	movff	indf2,indf1
 14787  00316E                     l915:
 14788  00316E  0012               	return	
 14789  003170                     __end_of__RegsToCANID:
 14790                           	opt stack 0
 14791                           tblptru	equ	0xFF8
 14792                           tblptrh	equ	0xFF7
 14793                           tblptrl	equ	0xFF6
 14794                           tablat	equ	0xFF5
 14795                           prodh	equ	0xFF4
 14796                           prodl	equ	0xFF3
 14797                           postinc0	equ	0xFEE
 14798                           wreg	equ	0xFE8
 14799                           indf1	equ	0xFE7
 14800                           fsr1h	equ	0xFE2
 14801                           fsr1l	equ	0xFE1
 14802                           indf2	equ	0xFDF
 14803                           postinc2	equ	0xFDE
 14804                           postdec2	equ	0xFDD
 14805                           plusw2	equ	0xFDB
 14806                           fsr2h	equ	0xFDA
 14807                           fsr2l	equ	0xFD9
 14808                           status	equ	0xFD8
 14809                           
 14810 ;; *************** function __ECANPointBuffer *****************
 14811 ;; Defined at:
 14812 ;;		line 1207 in file "../ECAN.c"
 14813 ;; Parameters:    Size  Location     Type
 14814 ;;  b               1    wreg     unsigned char 
 14815 ;; Auto vars:     Size  Location     Type
 14816 ;;  b               1   10[COMRAM] unsigned char 
 14817 ;;  pt              2   11[COMRAM] PTR unsigned char 
 14818 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14819 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14820 ;; Return value:  Size  Location     Type
 14821 ;;                  2    7[COMRAM] PTR unsigned char 
 14822 ;; Registers used:
 14823 ;;		wreg, status,2, status,0
 14824 ;; Tracked objects:
 14825 ;;		On entry : F/0
 14826 ;;		On exit  : 0/0
 14827 ;;		Unchanged: 0/0
 14828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14829 ;;      Params:         3       0       0       0       0       0       0
 14830 ;;      Locals:         3       0       0       0       0       0       0
 14831 ;;      Temps:          0       0       0       0       0       0       0
 14832 ;;      Totals:         6       0       0       0       0       0       0
 14833 ;;Total ram usage:        6 bytes
 14834 ;; Hardware stack levels used:    1
 14835 ;; Hardware stack levels required when called:    2
 14836 ;; This function calls:
 14837 ;;		Nothing
 14838 ;; This function is called by:
 14839 ;;		_ECANReceiveMessage
 14840 ;; This function uses a non-reentrant model
 14841 ;;
 14842                           
 14843                           	psect	text61
 14844  003BCE                     __ptext61:
 14845                           	opt stack 0
 14846  003BCE                     __ECANPointBuffer:
 14847                           	opt stack 24
 14848                           
 14849                           ;incstack = 0
 14850                           ;incstack = 0
 14851                           ;__ECANPointBuffer@b stored from wreg
 14852  003BCE  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 14853                           
 14854                           ; BSR set to: 0
 14855                           ;ECAN.c: 1208: BYTE* pt;
 14856                           ;ECAN.c: 1210: switch(b)
 14857  003BD2  D024               	goto	l6793
 14858  003BD4                     l6775:
 14859                           
 14860                           ; BSR set to: 0
 14861                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 14862  003BD4  0E0F               	movlw	15	;volatile
 14863  003BD6  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14864  003BD8  0E60               	movlw	96	;volatile
 14865  003BDA  D01E               	goto	L56
 14866  003BDC                     l6777:
 14867                           
 14868                           ; BSR set to: 0
 14869                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 14870  003BDC  010F               	movlb	15	; () banked
 14871  003BDE  0E0F               	movlw	15	;volatile
 14872  003BE0  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14873  003BE2  0E50               	movlw	80	;volatile
 14874  003BE4  D019               	goto	L56
 14875  003BE6                     l6779:
 14876                           
 14877                           ; BSR set to: 0
 14878                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 14879  003BE6  010E               	movlb	14	; () banked
 14880  003BE8  0E0E               	movlw	14	;volatile
 14881  003BEA  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14882  003BEC  0E20               	movlw	32	;volatile
 14883  003BEE  D014               	goto	L56
 14884  003BF0                     l6781:
 14885                           
 14886                           ; BSR set to: 0
 14887                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 14888  003BF0  010E               	movlb	14	; () banked
 14889  003BF2  0E0E               	movlw	14	;volatile
 14890  003BF4  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14891  003BF6  0E30               	movlw	48	;volatile
 14892  003BF8  D00F               	goto	L56
 14893  003BFA                     l6783:
 14894                           
 14895                           ; BSR set to: 0
 14896                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 14897  003BFA  010E               	movlb	14	; () banked
 14898  003BFC  0E0E               	movlw	14	;volatile
 14899  003BFE  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14900  003C00  0E40               	movlw	64	;volatile
 14901  003C02  D00A               	goto	L56
 14902  003C04                     l6785:
 14903                           
 14904                           ; BSR set to: 0
 14905                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 14906  003C04  010E               	movlb	14	; () banked
 14907  003C06  0E0E               	movlw	14	;volatile
 14908  003C08  D7EB               	goto	L57
 14909  003C0A                     l6787:
 14910                           
 14911                           ; BSR set to: 0
 14912                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 14913  003C0A  010E               	movlb	14	; () banked
 14914  003C0C  0E0E               	movlw	14	;volatile
 14915  003C0E  D7E3               	goto	L58
 14916  003C10                     l6789:
 14917                           
 14918                           ; BSR set to: 0
 14919                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 14920  003C10  010E               	movlb	14	; () banked
 14921  003C12  0E0E               	movlw	14	;volatile
 14922  003C14  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14923  003C16  0E70               	movlw	112	;volatile
 14924  003C18                     L56:
 14925  003C18  6E0C               	movwf	__ECANPointBuffer@pt,c
 14926                           
 14927                           ;ECAN.c: 1235: break;
 14928  003C1A  D00F               	goto	l920
 14929  003C1C                     l6793:
 14930                           
 14931                           ; BSR set to: 0
 14932  003C1C  500B               	movf	__ECANPointBuffer@b,w,c
 14933                           
 14934                           ; Switch size 1, requested type "speed"
 14935                           ; Number of cases is 7, Range of values is 0 to 6
 14936                           ; switch strategies available:
 14937                           ; Name         Instructions Cycles
 14938                           ; simple_byte           22    12 (average)
 14939                           ;	Chosen strategy is simple_byte
 14940  003C1E  E0DA               	bz	l6775
 14941  003C20  0A01               	xorlw	1	; case 1
 14942  003C22  E0DC               	bz	l6777
 14943  003C24  0A03               	xorlw	3	; case 2
 14944  003C26  E0DF               	bz	l6779
 14945  003C28  0A01               	xorlw	1	; case 3
 14946  003C2A  E0E2               	bz	l6781
 14947  003C2C  0A07               	xorlw	7	; case 4
 14948  003C2E  E0E5               	bz	l6783
 14949  003C30  0A01               	xorlw	1	; case 5
 14950  003C32  E0E8               	bz	l6785
 14951  003C34  0A03               	xorlw	3	; case 6
 14952  003C36  E0E9               	bz	l6787
 14953  003C38  D7EB               	goto	l6789
 14954  003C3A                     l920:
 14955                           
 14956                           ;ECAN.c: 1237: return (pt);
 14957  003C3A  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 14958  003C3E  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 14959  003C42  0012               	return	
 14960  003C44                     __end_of__ECANPointBuffer:
 14961                           	opt stack 0
 14962                           tblptru	equ	0xFF8
 14963                           tblptrh	equ	0xFF7
 14964                           tblptrl	equ	0xFF6
 14965                           tablat	equ	0xFF5
 14966                           prodh	equ	0xFF4
 14967                           prodl	equ	0xFF3
 14968                           postinc0	equ	0xFEE
 14969                           wreg	equ	0xFE8
 14970                           indf1	equ	0xFE7
 14971                           fsr1h	equ	0xFE2
 14972                           fsr1l	equ	0xFE1
 14973                           indf2	equ	0xFDF
 14974                           postinc2	equ	0xFDE
 14975                           postdec2	equ	0xFDD
 14976                           plusw2	equ	0xFDB
 14977                           fsr2h	equ	0xFDA
 14978                           fsr2l	equ	0xFD9
 14979                           status	equ	0xFD8
 14980                           
 14981 ;; *************** function _vscp_check_pstorage *****************
 14982 ;; Defined at:
 14983 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 14984 ;; Parameters:    Size  Location     Type
 14985 ;;		None
 14986 ;; Auto vars:     Size  Location     Type
 14987 ;;		None
 14988 ;; Return value:  Size  Location     Type
 14989 ;;                  1    wreg      unsigned char 
 14990 ;; Registers used:
 14991 ;;		wreg, status,2, status,0, cstack
 14992 ;; Tracked objects:
 14993 ;;		On entry : 0/0
 14994 ;;		On exit  : 0/0
 14995 ;;		Unchanged: 0/0
 14996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14997 ;;      Params:         0       0       0       0       0       0       0
 14998 ;;      Locals:         0       0       0       0       0       0       0
 14999 ;;      Temps:          0       0       0       0       0       0       0
 15000 ;;      Totals:         0       0       0       0       0       0       0
 15001 ;;Total ram usage:        0 bytes
 15002 ;; Hardware stack levels used:    1
 15003 ;; Hardware stack levels required when called:    4
 15004 ;; This function calls:
 15005 ;;		_vscp_writeNicknamePermanent
 15006 ;;		_vscp_getSegmentCRC
 15007 ;;		_vscp_setSegmentCRC
 15008 ;;		_vscp_setControlByte
 15009 ;; This function is called by:
 15010 ;;		_main
 15011 ;; This function uses a non-reentrant model
 15012 ;;
 15013                           
 15014                           	psect	text62
 15015  003FD8                     __ptext62:
 15016                           	opt stack 0
 15017  003FD8                     _vscp_check_pstorage:
 15018                           	opt stack 26
 15019                           
 15020                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 15021                           
 15022                           ;incstack = 0
 15023                           ;incstack = 0
 15024  003FD8  EC1A  F021         	call	_vscp_getSegmentCRC	;wreg free
 15025  003FDC  0BC0               	andlw	192
 15026  003FDE  0A40               	xorlw	64
 15027  003FE0  E102               	bnz	l7265
 15028                           
 15029                           ;vscp_firmware.c: 172: return !0;
 15030  003FE2  0E01               	movlw	1
 15031  003FE4  D00A               	goto	l1040
 15032  003FE6                     l7265:
 15033                           
 15034                           ;vscp_firmware.c: 173: }
 15035                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 15036  003FE6  0EFF               	movlw	255
 15037  003FE8  ECDD  F020         	call	_vscp_writeNicknamePermanent
 15038                           
 15039                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 15040  003FEC  0E00               	movlw	0
 15041  003FEE  ECD4  F020         	call	_vscp_setSegmentCRC
 15042                           
 15043                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 15044  003FF2  0EA0               	movlw	160
 15045  003FF4  ECCB  F020         	call	_vscp_setControlByte
 15046                           
 15047                           ;vscp_firmware.c: 185: return 0;
 15048  003FF8  0E00               	movlw	0
 15049  003FFA                     l1040:
 15050  003FFA  0012               	return	
 15051  003FFC                     __end_of_vscp_check_pstorage:
 15052                           	opt stack 0
 15053                           tblptru	equ	0xFF8
 15054                           tblptrh	equ	0xFF7
 15055                           tblptrl	equ	0xFF6
 15056                           tablat	equ	0xFF5
 15057                           prodh	equ	0xFF4
 15058                           prodl	equ	0xFF3
 15059                           postinc0	equ	0xFEE
 15060                           wreg	equ	0xFE8
 15061                           indf1	equ	0xFE7
 15062                           fsr1h	equ	0xFE2
 15063                           fsr1l	equ	0xFE1
 15064                           indf2	equ	0xFDF
 15065                           postinc2	equ	0xFDE
 15066                           postdec2	equ	0xFDD
 15067                           plusw2	equ	0xFDB
 15068                           fsr2h	equ	0xFDA
 15069                           fsr2l	equ	0xFD9
 15070                           status	equ	0xFD8
 15071                           
 15072 ;; *************** function _vscp_setControlByte *****************
 15073 ;; Defined at:
 15074 ;;		line 2370 in file "../main.c"
 15075 ;; Parameters:    Size  Location     Type
 15076 ;;  ctrl            1    wreg     unsigned char 
 15077 ;; Auto vars:     Size  Location     Type
 15078 ;;  ctrl            1   10[COMRAM] unsigned char 
 15079 ;; Return value:  Size  Location     Type
 15080 ;;		None               void
 15081 ;; Registers used:
 15082 ;;		wreg, status,2, cstack
 15083 ;; Tracked objects:
 15084 ;;		On entry : 0/0
 15085 ;;		On exit  : 0/0
 15086 ;;		Unchanged: 0/0
 15087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15088 ;;      Params:         0       0       0       0       0       0       0
 15089 ;;      Locals:         1       0       0       0       0       0       0
 15090 ;;      Temps:          0       0       0       0       0       0       0
 15091 ;;      Totals:         1       0       0       0       0       0       0
 15092 ;;Total ram usage:        1 bytes
 15093 ;; Hardware stack levels used:    1
 15094 ;; Hardware stack levels required when called:    3
 15095 ;; This function calls:
 15096 ;;		_writeEEPROM
 15097 ;; This function is called by:
 15098 ;;		_vscp_check_pstorage
 15099 ;; This function uses a non-reentrant model
 15100 ;;
 15101                           
 15102                           	psect	text63
 15103  004196                     __ptext63:
 15104                           	opt stack 0
 15105  004196                     _vscp_setControlByte:
 15106                           	opt stack 26
 15107                           
 15108                           ;incstack = 0
 15109                           ;incstack = 0
 15110                           ;vscp_setControlByte@ctrl stored from wreg
 15111  004196  CFE8 F00B          	movff	wreg,vscp_setControlByte@ctrl
 15112                           
 15113                           ;main.c: 2371: writeEEPROM(0x03, ctrl);
 15114  00419A  6A09               	clrf	?_writeEEPROM+1,c
 15115  00419C  0E03               	movlw	3
 15116  00419E  6E08               	movwf	?_writeEEPROM,c
 15117  0041A0  C00B  F00A         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 15118  0041A4  EFC7  F01F         	goto	_writeEEPROM	;wreg free
 15119  0041A8                     __end_of_vscp_setControlByte:
 15120                           	opt stack 0
 15121                           tblptru	equ	0xFF8
 15122                           tblptrh	equ	0xFF7
 15123                           tblptrl	equ	0xFF6
 15124                           tablat	equ	0xFF5
 15125                           prodh	equ	0xFF4
 15126                           prodl	equ	0xFF3
 15127                           postinc0	equ	0xFEE
 15128                           wreg	equ	0xFE8
 15129                           indf1	equ	0xFE7
 15130                           fsr1h	equ	0xFE2
 15131                           fsr1l	equ	0xFE1
 15132                           indf2	equ	0xFDF
 15133                           postinc2	equ	0xFDE
 15134                           postdec2	equ	0xFDD
 15135                           plusw2	equ	0xFDB
 15136                           fsr2h	equ	0xFDA
 15137                           fsr2l	equ	0xFD9
 15138                           status	equ	0xFD8
 15139                           
 15140 ;; *************** function _vscp_setSegmentCRC *****************
 15141 ;; Defined at:
 15142 ;;		line 2361 in file "../main.c"
 15143 ;; Parameters:    Size  Location     Type
 15144 ;;  crc             1    wreg     unsigned char 
 15145 ;; Auto vars:     Size  Location     Type
 15146 ;;  crc             1   10[COMRAM] unsigned char 
 15147 ;; Return value:  Size  Location     Type
 15148 ;;		None               void
 15149 ;; Registers used:
 15150 ;;		wreg, status,2, cstack
 15151 ;; Tracked objects:
 15152 ;;		On entry : 0/0
 15153 ;;		On exit  : 0/0
 15154 ;;		Unchanged: 0/0
 15155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15156 ;;      Params:         0       0       0       0       0       0       0
 15157 ;;      Locals:         1       0       0       0       0       0       0
 15158 ;;      Temps:          0       0       0       0       0       0       0
 15159 ;;      Totals:         1       0       0       0       0       0       0
 15160 ;;Total ram usage:        1 bytes
 15161 ;; Hardware stack levels used:    1
 15162 ;; Hardware stack levels required when called:    3
 15163 ;; This function calls:
 15164 ;;		_writeEEPROM
 15165 ;; This function is called by:
 15166 ;;		_vscp_check_pstorage
 15167 ;;		_vscp_handleProbeState
 15168 ;;		_vscp_handleHeartbeat
 15169 ;;		_vscp_handleSetNickname
 15170 ;; This function uses a non-reentrant model
 15171 ;;
 15172                           
 15173                           	psect	text64
 15174  0041A8                     __ptext64:
 15175                           	opt stack 0
 15176  0041A8                     _vscp_setSegmentCRC:
 15177                           	opt stack 25
 15178                           
 15179                           ;incstack = 0
 15180                           ;incstack = 0
 15181                           ;vscp_setSegmentCRC@crc stored from wreg
 15182  0041A8  CFE8 F00B          	movff	wreg,vscp_setSegmentCRC@crc
 15183                           
 15184                           ;main.c: 2362: writeEEPROM( 0x02, crc );
 15185  0041AC  6A09               	clrf	?_writeEEPROM+1,c
 15186  0041AE  0E02               	movlw	2
 15187  0041B0  6E08               	movwf	?_writeEEPROM,c
 15188  0041B2  C00B  F00A         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 15189  0041B6  EFC7  F01F         	goto	_writeEEPROM	;wreg free
 15190  0041BA                     __end_of_vscp_setSegmentCRC:
 15191                           	opt stack 0
 15192                           tblptru	equ	0xFF8
 15193                           tblptrh	equ	0xFF7
 15194                           tblptrl	equ	0xFF6
 15195                           tablat	equ	0xFF5
 15196                           prodh	equ	0xFF4
 15197                           prodl	equ	0xFF3
 15198                           postinc0	equ	0xFEE
 15199                           wreg	equ	0xFE8
 15200                           indf1	equ	0xFE7
 15201                           fsr1h	equ	0xFE2
 15202                           fsr1l	equ	0xFE1
 15203                           indf2	equ	0xFDF
 15204                           postinc2	equ	0xFDE
 15205                           postdec2	equ	0xFDD
 15206                           plusw2	equ	0xFDB
 15207                           fsr2h	equ	0xFDA
 15208                           fsr2l	equ	0xFD9
 15209                           status	equ	0xFD8
 15210                           
 15211 ;; *************** function _vscp_getSegmentCRC *****************
 15212 ;; Defined at:
 15213 ;;		line 2352 in file "../main.c"
 15214 ;; Parameters:    Size  Location     Type
 15215 ;;		None
 15216 ;; Auto vars:     Size  Location     Type
 15217 ;;		None
 15218 ;; Return value:  Size  Location     Type
 15219 ;;                  1    wreg      unsigned char 
 15220 ;; Registers used:
 15221 ;;		wreg, status,2, cstack
 15222 ;; Tracked objects:
 15223 ;;		On entry : 0/0
 15224 ;;		On exit  : 0/0
 15225 ;;		Unchanged: 0/0
 15226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15227 ;;      Params:         0       0       0       0       0       0       0
 15228 ;;      Locals:         0       0       0       0       0       0       0
 15229 ;;      Temps:          0       0       0       0       0       0       0
 15230 ;;      Totals:         0       0       0       0       0       0       0
 15231 ;;Total ram usage:        0 bytes
 15232 ;; Hardware stack levels used:    1
 15233 ;; Hardware stack levels required when called:    3
 15234 ;; This function calls:
 15235 ;;		_readEEPROM
 15236 ;; This function is called by:
 15237 ;;		_vscp_check_pstorage
 15238 ;;		_vscp_handleHeartbeat
 15239 ;; This function uses a non-reentrant model
 15240 ;;
 15241                           
 15242                           	psect	text65
 15243  004234                     __ptext65:
 15244                           	opt stack 0
 15245  004234                     _vscp_getSegmentCRC:
 15246                           	opt stack 25
 15247                           
 15248                           ;main.c: 2353: return readEEPROM( 0x02 );
 15249                           
 15250                           ;incstack = 0
 15251                           ;incstack = 0
 15252  004234  6A09               	clrf	?_readEEPROM+1,c
 15253  004236  0E02               	movlw	2
 15254  004238  6E08               	movwf	?_readEEPROM,c
 15255  00423A  EFEF  F020         	goto	_readEEPROM	;wreg free
 15256  00423E                     __end_of_vscp_getSegmentCRC:
 15257                           	opt stack 0
 15258                           tblptru	equ	0xFF8
 15259                           tblptrh	equ	0xFF7
 15260                           tblptrl	equ	0xFF6
 15261                           tablat	equ	0xFF5
 15262                           prodh	equ	0xFF4
 15263                           prodl	equ	0xFF3
 15264                           postinc0	equ	0xFEE
 15265                           wreg	equ	0xFE8
 15266                           indf1	equ	0xFE7
 15267                           fsr1h	equ	0xFE2
 15268                           fsr1l	equ	0xFE1
 15269                           indf2	equ	0xFDF
 15270                           postinc2	equ	0xFDE
 15271                           postdec2	equ	0xFDD
 15272                           plusw2	equ	0xFDB
 15273                           fsr2h	equ	0xFDA
 15274                           fsr2l	equ	0xFD9
 15275                           status	equ	0xFD8
 15276                           
 15277 ;; *************** function _vscp_writeNicknamePermanent *****************
 15278 ;; Defined at:
 15279 ;;		line 858 in file "../main.c"
 15280 ;; Parameters:    Size  Location     Type
 15281 ;;  nickname        1    wreg     unsigned char 
 15282 ;; Auto vars:     Size  Location     Type
 15283 ;;  nickname        1   10[COMRAM] unsigned char 
 15284 ;; Return value:  Size  Location     Type
 15285 ;;		None               void
 15286 ;; Registers used:
 15287 ;;		wreg, status,2, cstack
 15288 ;; Tracked objects:
 15289 ;;		On entry : 0/0
 15290 ;;		On exit  : 0/0
 15291 ;;		Unchanged: 0/0
 15292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15293 ;;      Params:         0       0       0       0       0       0       0
 15294 ;;      Locals:         1       0       0       0       0       0       0
 15295 ;;      Temps:          0       0       0       0       0       0       0
 15296 ;;      Totals:         1       0       0       0       0       0       0
 15297 ;;Total ram usage:        1 bytes
 15298 ;; Hardware stack levels used:    1
 15299 ;; Hardware stack levels required when called:    3
 15300 ;; This function calls:
 15301 ;;		_writeEEPROM
 15302 ;; This function is called by:
 15303 ;;		_vscp_check_pstorage
 15304 ;;		_vscp_handleProbeState
 15305 ;;		_vscp_handleHeartbeat
 15306 ;;		_vscp_handleSetNickname
 15307 ;;		_vscp_handleDropNickname
 15308 ;; This function uses a non-reentrant model
 15309 ;;
 15310                           
 15311                           	psect	text66
 15312  0041BA                     __ptext66:
 15313                           	opt stack 0
 15314  0041BA                     _vscp_writeNicknamePermanent:
 15315                           	opt stack 25
 15316                           
 15317                           ;incstack = 0
 15318                           ;incstack = 0
 15319                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 15320  0041BA  CFE8 F00B          	movff	wreg,vscp_writeNicknamePermanent@nickname
 15321                           
 15322                           ;main.c: 859: writeEEPROM( 0x01, nickname );
 15323  0041BE  6A09               	clrf	?_writeEEPROM+1,c
 15324  0041C0  0E01               	movlw	1
 15325  0041C2  6E08               	movwf	?_writeEEPROM,c
 15326  0041C4  C00B  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 15327  0041C8  EFC7  F01F         	goto	_writeEEPROM	;wreg free
 15328  0041CC                     __end_of_vscp_writeNicknamePermanent:
 15329                           	opt stack 0
 15330                           tblptru	equ	0xFF8
 15331                           tblptrh	equ	0xFF7
 15332                           tblptrl	equ	0xFF6
 15333                           tablat	equ	0xFF5
 15334                           prodh	equ	0xFF4
 15335                           prodl	equ	0xFF3
 15336                           postinc0	equ	0xFEE
 15337                           wreg	equ	0xFE8
 15338                           indf1	equ	0xFE7
 15339                           fsr1h	equ	0xFE2
 15340                           fsr1l	equ	0xFE1
 15341                           indf2	equ	0xFDF
 15342                           postinc2	equ	0xFDE
 15343                           postdec2	equ	0xFDD
 15344                           plusw2	equ	0xFDB
 15345                           fsr2h	equ	0xFDA
 15346                           fsr2l	equ	0xFD9
 15347                           status	equ	0xFD8
 15348                           
 15349 ;; *************** function _writeEEPROM *****************
 15350 ;; Defined at:
 15351 ;;		line 23 in file "../../vscp_firmware/pic/common/eeprom.c"
 15352 ;; Parameters:    Size  Location     Type
 15353 ;;  address         2    7[COMRAM] unsigned short 
 15354 ;;  data            1    9[COMRAM] unsigned char 
 15355 ;; Auto vars:     Size  Location     Type
 15356 ;;		None
 15357 ;; Return value:  Size  Location     Type
 15358 ;;		None               void
 15359 ;; Registers used:
 15360 ;;		wreg, status,2
 15361 ;; Tracked objects:
 15362 ;;		On entry : 0/0
 15363 ;;		On exit  : 0/0
 15364 ;;		Unchanged: 0/0
 15365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15366 ;;      Params:         3       0       0       0       0       0       0
 15367 ;;      Locals:         0       0       0       0       0       0       0
 15368 ;;      Temps:          0       0       0       0       0       0       0
 15369 ;;      Totals:         3       0       0       0       0       0       0
 15370 ;;Total ram usage:        3 bytes
 15371 ;; Hardware stack levels used:    1
 15372 ;; Hardware stack levels required when called:    2
 15373 ;; This function calls:
 15374 ;;		Nothing
 15375 ;; This function is called by:
 15376 ;;		_main
 15377 ;;		_init_app_eeprom
 15378 ;;		_vscp_setGUID
 15379 ;;		_vscp_setManufacturerId
 15380 ;;		_vscp_writeNicknamePermanent
 15381 ;;		_vscp_writeAppReg
 15382 ;;		_doActionDisable
 15383 ;;		_vscp_setUserID
 15384 ;;		_vscp_setSegmentCRC
 15385 ;;		_vscp_setControlByte
 15386 ;;		_vscp_goBootloaderMode
 15387 ;; This function uses a non-reentrant model
 15388 ;;
 15389                           
 15390                           	psect	text67
 15391  003F8E                     __ptext67:
 15392                           	opt stack 0
 15393  003F8E                     _writeEEPROM:
 15394                           	opt stack 26
 15395                           
 15396                           ;eeprom.c: 29: EEADR = address & 0xff;
 15397                           
 15398                           ;incstack = 0
 15399                           ;incstack = 0
 15400  003F8E  C008  FFA9         	movff	writeEEPROM@address,4009	;volatile
 15401                           
 15402                           ;eeprom.c: 30: EEDATA = data;
 15403  003F92  C00A  FFA8         	movff	writeEEPROM@data,4008	;volatile
 15404                           
 15405                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 15406  003F96  9EA6               	bcf	4006,7,c	;volatile
 15407                           
 15408                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 15409  003F98  9CA6               	bcf	4006,6,c	;volatile
 15410                           
 15411                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 15412  003F9A  84A6               	bsf	4006,2,c	;volatile
 15413                           
 15414                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 15415  003F9C  9EF2               	bcf	intcon,7,c	;volatile
 15416                           
 15417                           ;eeprom.c: 37: EECON2 = 0x55;
 15418  003F9E  0E55               	movlw	85
 15419  003FA0  6EA7               	movwf	4007,c	;volatile
 15420                           
 15421                           ;eeprom.c: 38: EECON2 = 0xaa;
 15422  003FA2  0EAA               	movlw	170
 15423  003FA4  6EA7               	movwf	4007,c	;volatile
 15424                           
 15425                           ;eeprom.c: 39: EECON1bits.WR = 1;
 15426  003FA6  82A6               	bsf	4006,1,c	;volatile
 15427                           
 15428                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 15429  003FA8  8EF2               	bsf	intcon,7,c	;volatile
 15430  003FAA                     l1299:
 15431  003FAA  A8A1               	btfss	4001,4,c	;volatile
 15432  003FAC  D7FE               	goto	l1299
 15433                           
 15434                           ;eeprom.c: 47: PIR2bits.EEIF = 0;
 15435  003FAE  98A1               	bcf	4001,4,c	;volatile
 15436                           
 15437                           ;eeprom.c: 49: EECON1bits.WREN = 0;
 15438  003FB0  94A6               	bcf	4006,2,c	;volatile
 15439  003FB2  0012               	return	
 15440  003FB4                     __end_of_writeEEPROM:
 15441                           	opt stack 0
 15442                           tblptru	equ	0xFF8
 15443                           tblptrh	equ	0xFF7
 15444                           tblptrl	equ	0xFF6
 15445                           tablat	equ	0xFF5
 15446                           prodh	equ	0xFF4
 15447                           prodl	equ	0xFF3
 15448                           intcon	equ	0xFF2
 15449                           postinc0	equ	0xFEE
 15450                           wreg	equ	0xFE8
 15451                           indf1	equ	0xFE7
 15452                           fsr1h	equ	0xFE2
 15453                           fsr1l	equ	0xFE1
 15454                           indf2	equ	0xFDF
 15455                           postinc2	equ	0xFDE
 15456                           postdec2	equ	0xFDD
 15457                           plusw2	equ	0xFDB
 15458                           fsr2h	equ	0xFDA
 15459                           fsr2l	equ	0xFD9
 15460                           status	equ	0xFD8
 15461                           
 15462 ;; *************** function _init *****************
 15463 ;; Defined at:
 15464 ;;		line 320 in file "../main.c"
 15465 ;; Parameters:    Size  Location     Type
 15466 ;;		None
 15467 ;; Auto vars:     Size  Location     Type
 15468 ;;		None
 15469 ;; Return value:  Size  Location     Type
 15470 ;;		None               void
 15471 ;; Registers used:
 15472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15473 ;; Tracked objects:
 15474 ;;		On entry : 0/0
 15475 ;;		On exit  : 0/0
 15476 ;;		Unchanged: 0/0
 15477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15478 ;;      Params:         0       0       0       0       0       0       0
 15479 ;;      Locals:         0       0       0       0       0       0       0
 15480 ;;      Temps:          0       0       0       0       0       0       0
 15481 ;;      Totals:         0       0       0       0       0       0       0
 15482 ;;Total ram usage:        0 bytes
 15483 ;; Hardware stack levels used:    1
 15484 ;; Hardware stack levels required when called:    4
 15485 ;; This function calls:
 15486 ;;		_WriteTimer0
 15487 ;;		_init_app_ram
 15488 ;;		_OpenTimer0
 15489 ;;		_ECANInitialize
 15490 ;; This function is called by:
 15491 ;;		_main
 15492 ;; This function uses a non-reentrant model
 15493 ;;
 15494                           
 15495                           	psect	text68
 15496  003E2C                     __ptext68:
 15497                           	opt stack 0
 15498  003E2C                     _init:
 15499                           	opt stack 26
 15500                           
 15501                           ;main.c: 325: init_app_ram();
 15502                           
 15503                           ;incstack = 0
 15504                           ;incstack = 0
 15505  003E2C  ECF0  F019         	call	_init_app_ram	;wreg free
 15506                           
 15507                           ;main.c: 336: TRISA = 0x00;
 15508  003E30  6A92               	clrf	3986,c	;volatile
 15509                           
 15510                           ;main.c: 337: PORTA = 0x00;
 15511  003E32  6A80               	clrf	3968,c	;volatile
 15512                           
 15513                           ;main.c: 349: TRISB = 0b00001000;
 15514  003E34  0E08               	movlw	8
 15515  003E36  6E93               	movwf	3987,c	;volatile
 15516                           
 15517                           ;main.c: 350: PORTB = 0x00;
 15518  003E38  6A81               	clrf	3969,c	;volatile
 15519                           
 15520                           ;main.c: 360: TRISC = 0b00000001;
 15521  003E3A  0E01               	movlw	1
 15522  003E3C  6E94               	movwf	3988,c	;volatile
 15523                           
 15524                           ;main.c: 361: PORTC = 0x00;
 15525  003E3E  6A82               	clrf	3970,c	;volatile
 15526                           
 15527                           ;main.c: 387: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 15528  003E40  0E92               	movlw	146
 15529  003E42  EC61  F020         	call	_OpenTimer0
 15530                           
 15531                           ;main.c: 388: WriteTimer0( 0xfb1d );
 15532  003E46  0EFB               	movlw	251
 15533  003E48  6E09               	movwf	?_WriteTimer0+1,c
 15534  003E4A  0E1D               	movlw	29
 15535  003E4C  6E08               	movwf	?_WriteTimer0,c
 15536  003E4E  ECE6  F020         	call	_WriteTimer0	;wreg free
 15537                           
 15538                           ;main.c: 391: LATBbits.LATB4 = 0;
 15539  003E52  988A               	bcf	3978,4,c	;volatile
 15540                           
 15541                           ;main.c: 392: LATBbits.LATB1 = 0;
 15542  003E54  928A               	bcf	3978,1,c	;volatile
 15543                           
 15544                           ;main.c: 393: LATBbits.LATB0 = 0;
 15545  003E56  908A               	bcf	3978,0,c	;volatile
 15546                           
 15547                           ;main.c: 394: LATCbits.LATC7 = 0;
 15548  003E58  9E8B               	bcf	3979,7,c	;volatile
 15549                           
 15550                           ;main.c: 395: LATCbits.LATC6 = 0;
 15551  003E5A  9C8B               	bcf	3979,6,c	;volatile
 15552                           
 15553                           ;main.c: 396: LATCbits.LATC5 = 0;
 15554  003E5C  9A8B               	bcf	3979,5,c	;volatile
 15555                           
 15556                           ;main.c: 397: LATCbits.LATC4 = 0;
 15557  003E5E  988B               	bcf	3979,4,c	;volatile
 15558                           
 15559                           ;main.c: 400: ECANInitialize();
 15560  003E60  EC60  F01D         	call	_ECANInitialize	;wreg free
 15561                           
 15562                           ;main.c: 421: INTCONbits.PEIE = 1;
 15563  003E64  8CF2               	bsf	intcon,6,c	;volatile
 15564                           
 15565                           ;main.c: 424: INTCONbits.GIE = 1;
 15566  003E66  8EF2               	bsf	intcon,7,c	;volatile
 15567  003E68  0012               	return	
 15568  003E6A                     __end_of_init:
 15569                           	opt stack 0
 15570                           tblptru	equ	0xFF8
 15571                           tblptrh	equ	0xFF7
 15572                           tblptrl	equ	0xFF6
 15573                           tablat	equ	0xFF5
 15574                           prodh	equ	0xFF4
 15575                           prodl	equ	0xFF3
 15576                           intcon	equ	0xFF2
 15577                           postinc0	equ	0xFEE
 15578                           wreg	equ	0xFE8
 15579                           indf1	equ	0xFE7
 15580                           fsr1h	equ	0xFE2
 15581                           fsr1l	equ	0xFE1
 15582                           indf2	equ	0xFDF
 15583                           postinc2	equ	0xFDE
 15584                           postdec2	equ	0xFDD
 15585                           plusw2	equ	0xFDB
 15586                           fsr2h	equ	0xFDA
 15587                           fsr2l	equ	0xFD9
 15588                           status	equ	0xFD8
 15589                           
 15590 ;; *************** function _ECANInitialize *****************
 15591 ;; Defined at:
 15592 ;;		line 168 in file "../ECAN.c"
 15593 ;; Parameters:    Size  Location     Type
 15594 ;;		None
 15595 ;; Auto vars:     Size  Location     Type
 15596 ;;		None
 15597 ;; Return value:  Size  Location     Type
 15598 ;;		None               void
 15599 ;; Registers used:
 15600 ;;		wreg, status,2, status,0, cstack
 15601 ;; Tracked objects:
 15602 ;;		On entry : 0/0
 15603 ;;		On exit  : 0/0
 15604 ;;		Unchanged: 0/0
 15605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15606 ;;      Params:         0       0       0       0       0       0       0
 15607 ;;      Locals:         0       0       0       0       0       0       0
 15608 ;;      Temps:          0       0       0       0       0       0       0
 15609 ;;      Totals:         0       0       0       0       0       0       0
 15610 ;;Total ram usage:        0 bytes
 15611 ;; Hardware stack levels used:    1
 15612 ;; Hardware stack levels required when called:    3
 15613 ;; This function calls:
 15614 ;;		_ECANSetOperationMode
 15615 ;; This function is called by:
 15616 ;;		_init
 15617 ;; This function uses a non-reentrant model
 15618 ;;
 15619                           
 15620                           	psect	text69
 15621  003AC0                     __ptext69:
 15622                           	opt stack 0
 15623  003AC0                     _ECANInitialize:
 15624                           	opt stack 26
 15625                           
 15626                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 15627                           
 15628                           ;incstack = 0
 15629                           ;incstack = 0
 15630  003AC0  0E80               	movlw	128
 15631  003AC2  ECA1  F020         	call	_ECANSetOperationMode
 15632                           
 15633                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 15634  003AC6  0E09               	movlw	9
 15635  003AC8  6E70               	movwf	3952,c	;volatile
 15636                           
 15637                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 15638  003ACA  0EFC               	movlw	252
 15639  003ACC  6E71               	movwf	3953,c	;volatile
 15640                           
 15641                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 15642                           ;ECAN.c: 181: (0 << 6) |
 15643                           ;ECAN.c: 182: (2-1);
 15644  003ACE  0E01               	movlw	1
 15645  003AD0  6E72               	movwf	3954,c	;volatile
 15646                           
 15647                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 15648  003AD2  0E20               	movlw	32
 15649  003AD4  6E73               	movwf	3955,c	;volatile
 15650                           
 15651                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 15652  003AD6  8E77               	bsf	3959,7,c	;volatile
 15653                           
 15654                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 15655  003AD8  9C77               	bcf	3959,6,c	;volatile
 15656                           
 15657                           ;ECAN.c: 205: RXB0CON = 0;
 15658  003ADA  6A60               	clrf	3936,c	;volatile
 15659                           
 15660                           ;ECAN.c: 211: RXB1CON = 0;
 15661  003ADC  010F               	movlb	15	; () banked
 15662  003ADE  6B50               	clrf	80,b	;volatile
 15663                           
 15664                           ; BSR set to: 15
 15665                           ;ECAN.c: 221: B0CON = 0;
 15666  003AE0  010E               	movlb	14	; () banked
 15667  003AE2  6B20               	clrf	32,b	;volatile
 15668                           
 15669                           ; BSR set to: 14
 15670                           ;ECAN.c: 231: B1CON = 0;
 15671  003AE4  6B30               	clrf	48,b	;volatile
 15672                           
 15673                           ; BSR set to: 14
 15674                           ;ECAN.c: 241: B2CON = 0;
 15675  003AE6  6B40               	clrf	64,b	;volatile
 15676                           
 15677                           ; BSR set to: 14
 15678                           ;ECAN.c: 254: B3CON = 0 << 2;
 15679  003AE8  6B50               	clrf	80,b	;volatile
 15680                           
 15681                           ; BSR set to: 14
 15682                           ;ECAN.c: 264: B4CON = 0 << 2;
 15683  003AEA  6B60               	clrf	96,b	;volatile
 15684                           
 15685                           ; BSR set to: 14
 15686                           ;ECAN.c: 274: B5CON = 0 << 2;
 15687  003AEC  6B70               	clrf	112,b	;volatile
 15688                           
 15689                           ; BSR set to: 14
 15690                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 15691  003AEE  0EE0               	movlw	224
 15692  003AF0  010D               	movlb	13	; () banked
 15693  003AF2  6FF8               	movwf	248,b	;volatile
 15694                           
 15695                           ; BSR set to: 13
 15696                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 15697  003AF4  010F               	movlb	15	; () banked
 15698  003AF6  6B00               	clrf	0,b	;volatile
 15699                           
 15700                           ; BSR set to: 15
 15701  003AF8  0E08               	movlw	8
 15702  003AFA  6F01               	movwf	1,b	;volatile
 15703                           
 15704                           ; BSR set to: 15
 15705  003AFC  6B02               	clrf	2,b	;volatile
 15706                           
 15707                           ; BSR set to: 15
 15708  003AFE  6B03               	clrf	3,b	;volatile
 15709                           
 15710                           ; BSR set to: 15
 15711                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 15712  003B00  6B04               	clrf	4,b	;volatile
 15713                           
 15714                           ; BSR set to: 15
 15715  003B02  0EE8               	movlw	232
 15716  003B04  6F05               	movwf	5,b	;volatile
 15717                           
 15718                           ; BSR set to: 15
 15719  003B06  0E1A               	movlw	26
 15720  003B08  6F06               	movwf	6,b	;volatile
 15721                           
 15722                           ; BSR set to: 15
 15723  003B0A  6B07               	clrf	7,b	;volatile
 15724                           
 15725                           ; BSR set to: 15
 15726                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 15727  003B0C  0E03               	movlw	3
 15728  003B0E  010D               	movlb	13	; () banked
 15729  003B10  6FD4               	movwf	212,b	;volatile
 15730                           
 15731                           ; BSR set to: 13
 15732                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 15733  003B12  6BD5               	clrf	213,b	;volatile
 15734                           
 15735                           ; BSR set to: 13
 15736                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 15737  003B14  6BE0               	clrf	224,b	;volatile
 15738                           
 15739                           ; BSR set to: 13
 15740                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 15741  003B16  0E11               	movlw	17
 15742  003B18  6FE1               	movwf	225,b	;volatile
 15743                           
 15744                           ; BSR set to: 13
 15745                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 15746  003B1A  6FE2               	movwf	226,b	;volatile
 15747                           
 15748                           ; BSR set to: 13
 15749                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 15750  003B1C  6BE3               	clrf	227,b	;volatile
 15751                           
 15752                           ; BSR set to: 13
 15753                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 15754  003B1E  6BE4               	clrf	228,b	;volatile
 15755                           
 15756                           ; BSR set to: 13
 15757                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 15758  003B20  6BE5               	clrf	229,b	;volatile
 15759                           
 15760                           ; BSR set to: 13
 15761                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 15762  003B22  6BE6               	clrf	230,b	;volatile
 15763                           
 15764                           ; BSR set to: 13
 15765                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 15766  003B24  6BE7               	clrf	231,b	;volatile
 15767                           
 15768                           ; BSR set to: 13
 15769                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 15770  003B26  0E54               	movlw	84
 15771  003B28  6FF0               	movwf	240,b	;volatile
 15772                           
 15773                           ; BSR set to: 13
 15774                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 15775  003B2A  0E05               	movlw	5
 15776  003B2C  6FF1               	movwf	241,b	;volatile
 15777                           
 15778                           ; BSR set to: 13
 15779                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15780  003B2E  6BF2               	clrf	242,b	;volatile
 15781                           
 15782                           ; BSR set to: 13
 15783                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15784  003B30  6BF2               	clrf	242,b	;volatile
 15785                           
 15786                           ; BSR set to: 13
 15787                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 15788  003B32  0E0F               	movlw	15
 15789  003B34  010F               	movlb	15	; () banked
 15790  003B36  6F18               	movwf	24,b	;volatile
 15791                           
 15792                           ; BSR set to: 15
 15793  003B38  0EE0               	movlw	224
 15794  003B3A  6F19               	movwf	25,b	;volatile
 15795                           
 15796                           ; BSR set to: 15
 15797  003B3C  6B1A               	clrf	26,b	;volatile
 15798                           
 15799                           ; BSR set to: 15
 15800  003B3E  6B1B               	clrf	27,b	;volatile
 15801                           
 15802                           ; BSR set to: 15
 15803                           ;ECAN.c: 482: RXM0EXIDM = 1;
 15804  003B40  8719               	bsf	25,3,b	;volatile
 15805                           
 15806                           ; BSR set to: 15
 15807                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 15808  003B42  0E0F               	movlw	15
 15809  003B44  6F1C               	movwf	28,b	;volatile
 15810                           
 15811                           ; BSR set to: 15
 15812  003B46  0EE0               	movlw	224
 15813  003B48  6F1D               	movwf	29,b	;volatile
 15814                           
 15815                           ; BSR set to: 15
 15816  003B4A  691E               	setf	30,b	;volatile
 15817                           
 15818                           ; BSR set to: 15
 15819  003B4C  6B1F               	clrf	31,b	;volatile
 15820                           
 15821                           ; BSR set to: 15
 15822                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 15823  003B4E  871D               	bsf	29,3,b	;volatile
 15824                           
 15825                           ; BSR set to: 15
 15826                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 15827  003B50  0E00               	movlw	0
 15828  003B52  EFA1  F020         	goto	_ECANSetOperationMode
 15829  003B56                     __end_of_ECANInitialize:
 15830                           	opt stack 0
 15831                           tblptru	equ	0xFF8
 15832                           tblptrh	equ	0xFF7
 15833                           tblptrl	equ	0xFF6
 15834                           tablat	equ	0xFF5
 15835                           prodh	equ	0xFF4
 15836                           prodl	equ	0xFF3
 15837                           intcon	equ	0xFF2
 15838                           postinc0	equ	0xFEE
 15839                           wreg	equ	0xFE8
 15840                           indf1	equ	0xFE7
 15841                           fsr1h	equ	0xFE2
 15842                           fsr1l	equ	0xFE1
 15843                           indf2	equ	0xFDF
 15844                           postinc2	equ	0xFDE
 15845                           postdec2	equ	0xFDD
 15846                           plusw2	equ	0xFDB
 15847                           fsr2h	equ	0xFDA
 15848                           fsr2l	equ	0xFD9
 15849                           status	equ	0xFD8
 15850                           
 15851 ;; *************** function _ECANSetOperationMode *****************
 15852 ;; Defined at:
 15853 ;;		line 1012 in file "../ECAN.c"
 15854 ;; Parameters:    Size  Location     Type
 15855 ;;  mode            1    wreg     enum E16337
 15856 ;; Auto vars:     Size  Location     Type
 15857 ;;  mode            1    7[COMRAM] enum E16337
 15858 ;; Return value:  Size  Location     Type
 15859 ;;		None               void
 15860 ;; Registers used:
 15861 ;;		wreg, status,2, status,0
 15862 ;; Tracked objects:
 15863 ;;		On entry : 0/0
 15864 ;;		On exit  : 0/0
 15865 ;;		Unchanged: 0/0
 15866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15867 ;;      Params:         0       0       0       0       0       0       0
 15868 ;;      Locals:         1       0       0       0       0       0       0
 15869 ;;      Temps:          0       0       0       0       0       0       0
 15870 ;;      Totals:         1       0       0       0       0       0       0
 15871 ;;Total ram usage:        1 bytes
 15872 ;; Hardware stack levels used:    1
 15873 ;; Hardware stack levels required when called:    2
 15874 ;; This function calls:
 15875 ;;		Nothing
 15876 ;; This function is called by:
 15877 ;;		_calculateSetFilterMask
 15878 ;;		_ECANInitialize
 15879 ;; This function uses a non-reentrant model
 15880 ;;
 15881                           
 15882                           	psect	text70
 15883  004142                     __ptext70:
 15884                           	opt stack 0
 15885  004142                     _ECANSetOperationMode:
 15886                           	opt stack 24
 15887                           
 15888                           ;incstack = 0
 15889                           ;incstack = 0
 15890                           ;ECANSetOperationMode@mode stored from wreg
 15891  004142  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 15892                           
 15893                           ;ECAN.c: 1013: CANCON &= 0x1F;
 15894  004146  0E1F               	movlw	31
 15895  004148  166F               	andwf	3951,f,c	;volatile
 15896                           
 15897                           ;ECAN.c: 1014: CANCON |= mode;
 15898  00414A  5008               	movf	ECANSetOperationMode@mode,w,c
 15899  00414C  126F               	iorwf	3951,f,c	;volatile
 15900  00414E                     l6745:
 15901  00414E  506F               	movf	3951,w,c	;volatile
 15902  004150  0BE0               	andlw	224
 15903  004152  1808               	xorwf	ECANSetOperationMode@mode,w,c
 15904  004154  B4D8               	btfsc	status,2,c
 15905  004156  0012               	return	
 15906  004158  D7FA               	goto	l6745
 15907  00415A                     __end_of_ECANSetOperationMode:
 15908                           	opt stack 0
 15909                           tblptru	equ	0xFF8
 15910                           tblptrh	equ	0xFF7
 15911                           tblptrl	equ	0xFF6
 15912                           tablat	equ	0xFF5
 15913                           prodh	equ	0xFF4
 15914                           prodl	equ	0xFF3
 15915                           intcon	equ	0xFF2
 15916                           postinc0	equ	0xFEE
 15917                           wreg	equ	0xFE8
 15918                           indf1	equ	0xFE7
 15919                           fsr1h	equ	0xFE2
 15920                           fsr1l	equ	0xFE1
 15921                           indf2	equ	0xFDF
 15922                           postinc2	equ	0xFDE
 15923                           postdec2	equ	0xFDD
 15924                           plusw2	equ	0xFDB
 15925                           fsr2h	equ	0xFDA
 15926                           fsr2l	equ	0xFD9
 15927                           status	equ	0xFD8
 15928                           
 15929 ;; *************** function _OpenTimer0 *****************
 15930 ;; Defined at:
 15931 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 15932 ;; Parameters:    Size  Location     Type
 15933 ;;  config          1    wreg     unsigned char 
 15934 ;; Auto vars:     Size  Location     Type
 15935 ;;  config          1    7[COMRAM] unsigned char 
 15936 ;; Return value:  Size  Location     Type
 15937 ;;		None               void
 15938 ;; Registers used:
 15939 ;;		wreg, status,2, status,0
 15940 ;; Tracked objects:
 15941 ;;		On entry : 0/0
 15942 ;;		On exit  : 0/0
 15943 ;;		Unchanged: 0/0
 15944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15945 ;;      Params:         0       0       0       0       0       0       0
 15946 ;;      Locals:         1       0       0       0       0       0       0
 15947 ;;      Temps:          0       0       0       0       0       0       0
 15948 ;;      Totals:         1       0       0       0       0       0       0
 15949 ;;Total ram usage:        1 bytes
 15950 ;; Hardware stack levels used:    1
 15951 ;; Hardware stack levels required when called:    2
 15952 ;; This function calls:
 15953 ;;		Nothing
 15954 ;; This function is called by:
 15955 ;;		_init
 15956 ;; This function uses a non-reentrant model
 15957 ;;
 15958                           
 15959                           	psect	text71
 15960  0040C2                     __ptext71:
 15961                           	opt stack 0
 15962  0040C2                     _OpenTimer0:
 15963                           	opt stack 27
 15964                           
 15965                           ;incstack = 0
 15966                           ;incstack = 0
 15967                           ;OpenTimer0@config stored from wreg
 15968  0040C2  CFE8 F008          	movff	wreg,OpenTimer0@config
 15969  0040C6  5008               	movf	OpenTimer0@config,w,c
 15970  0040C8  0B7F               	andlw	127
 15971  0040CA  6ED5               	movwf	4053,c	;volatile
 15972  0040CC  6AD7               	clrf	4055,c	;volatile
 15973  0040CE  6AD6               	clrf	4054,c	;volatile
 15974  0040D0  94F2               	bcf	intcon,2,c	;volatile
 15975  0040D2  AE08               	btfss	OpenTimer0@config,7,c
 15976  0040D4  D002               	goto	l1318
 15977  0040D6  8AF2               	bsf	intcon,5,c	;volatile
 15978  0040D8  D001               	goto	l1319
 15979  0040DA                     l1318:
 15980  0040DA  9AF2               	bcf	intcon,5,c	;volatile
 15981  0040DC                     l1319:
 15982  0040DC  8ED5               	bsf	4053,7,c	;volatile
 15983  0040DE  0012               	return	
 15984  0040E0                     __end_of_OpenTimer0:
 15985                           	opt stack 0
 15986                           tblptru	equ	0xFF8
 15987                           tblptrh	equ	0xFF7
 15988                           tblptrl	equ	0xFF6
 15989                           tablat	equ	0xFF5
 15990                           prodh	equ	0xFF4
 15991                           prodl	equ	0xFF3
 15992                           intcon	equ	0xFF2
 15993                           postinc0	equ	0xFEE
 15994                           wreg	equ	0xFE8
 15995                           indf1	equ	0xFE7
 15996                           fsr1h	equ	0xFE2
 15997                           fsr1l	equ	0xFE1
 15998                           indf2	equ	0xFDF
 15999                           postinc2	equ	0xFDE
 16000                           postdec2	equ	0xFDD
 16001                           plusw2	equ	0xFDB
 16002                           fsr2h	equ	0xFDA
 16003                           fsr2l	equ	0xFD9
 16004                           status	equ	0xFD8
 16005                           
 16006 ;; *************** function _init_app_ram *****************
 16007 ;; Defined at:
 16008 ;;		line 434 in file "../main.c"
 16009 ;; Parameters:    Size  Location     Type
 16010 ;;		None
 16011 ;; Auto vars:     Size  Location     Type
 16012 ;;  i               1   12[COMRAM] unsigned char 
 16013 ;; Return value:  Size  Location     Type
 16014 ;;		None               void
 16015 ;; Registers used:
 16016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16017 ;; Tracked objects:
 16018 ;;		On entry : 0/0
 16019 ;;		On exit  : 0/0
 16020 ;;		Unchanged: 0/0
 16021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16022 ;;      Params:         0       0       0       0       0       0       0
 16023 ;;      Locals:         1       0       0       0       0       0       0
 16024 ;;      Temps:          2       0       0       0       0       0       0
 16025 ;;      Totals:         3       0       0       0       0       0       0
 16026 ;;Total ram usage:        3 bytes
 16027 ;; Hardware stack levels used:    1
 16028 ;; Hardware stack levels required when called:    3
 16029 ;; This function calls:
 16030 ;;		_readEEPROM
 16031 ;; This function is called by:
 16032 ;;		_main
 16033 ;;		_init
 16034 ;;		_vscp_restoreDefaults
 16035 ;; This function uses a non-reentrant model
 16036 ;;
 16037                           
 16038                           	psect	text72
 16039  0033E0                     __ptext72:
 16040                           	opt stack 0
 16041  0033E0                     _init_app_ram:
 16042                           	opt stack 24
 16043                           
 16044                           ;main.c: 435: uint8_t i;
 16045                           ;main.c: 437: measurement_clock = 0;
 16046                           
 16047                           ;incstack = 0
 16048                           ;incstack = 0
 16049  0033E0  0100               	movlb	0	; () banked
 16050  0033E2  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
 16051  0033E4  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 16052  0033E6  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 16053  0033E8  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 16054                           
 16055                           ;main.c: 439: seconds = 0;
 16056  0033EA  6B8B               	clrf	_seconds& (0+255),b
 16057                           
 16058                           ;main.c: 440: minutes = 0;
 16059  0033EC  6B89               	clrf	_minutes& (0+255),b
 16060                           
 16061                           ;main.c: 441: hours = 0;
 16062  0033EE  6B88               	clrf	_hours& (0+255),b
 16063                           
 16064                           ;main.c: 443: relay_pulse_flags = 0;
 16065  0033F0  6B8A               	clrf	_relay_pulse_flags& (0+255),b
 16066                           
 16067                           ;main.c: 446: for ( i = 0; i < 8; i++ ) {
 16068  0033F2  6A0D               	clrf	init_app_ram@i,c
 16069  0033F4                     l7277:
 16070                           
 16071                           ; BSR set to: 0
 16072                           ;main.c: 447: relay_pulse_timer[ i ] = 0;
 16073  0033F4  500D               	movf	init_app_ram@i,w,c
 16074  0033F6  0D02               	mullw	2
 16075  0033F8  50F3               	movf	prodl,w,c
 16076  0033FA  0F70               	addlw	low _relay_pulse_timer
 16077  0033FC  6ED9               	movwf	fsr2l,c
 16078  0033FE  6ADA               	clrf	fsr2h,c
 16079  003400  6ADE               	clrf	postinc2,c
 16080  003402  6ADD               	clrf	postdec2,c
 16081                           
 16082                           ;main.c: 448: relay_protection_timer[ i ] = 0;
 16083  003404  500D               	movf	init_app_ram@i,w,c
 16084  003406  0D02               	mullw	2
 16085  003408  50F3               	movf	prodl,w,c
 16086  00340A  0F60               	addlw	low _relay_protection_timer
 16087  00340C  6ED9               	movwf	fsr2l,c
 16088  00340E  6ADA               	clrf	fsr2h,c
 16089  003410  6ADE               	clrf	postinc2,c
 16090  003412  6ADD               	clrf	postdec2,c
 16091                           
 16092                           ; BSR set to: 0
 16093  003414  2A0D               	incf	init_app_ram@i,f,c
 16094                           
 16095                           ; BSR set to: 0
 16096  003416  0E07               	movlw	7
 16097  003418  640D               	cpfsgt	init_app_ram@i,c
 16098  00341A  D7EC               	goto	l7277
 16099                           
 16100                           ; BSR set to: 0
 16101                           ;main.c: 449: }
 16102                           ;main.c: 451: for ( i=0; i<7; i++ ) {
 16103  00341C  6A0D               	clrf	init_app_ram@i,c
 16104  00341E                     l7287:
 16105                           
 16106                           ;main.c: 454: if ( readEEPROM( 0x43 + 10 + i ) &
 16107                           ;main.c: 455: 0x01 ) {
 16108  00341E  0E4D               	movlw	77
 16109  003420  240D               	addwf	init_app_ram@i,w,c
 16110  003422  6E08               	movwf	?_readEEPROM,c
 16111  003424  6A09               	clrf	?_readEEPROM+1,c
 16112  003426  0E00               	movlw	0
 16113  003428  2209               	addwfc	?_readEEPROM+1,f,c
 16114  00342A  ECEF  F020         	call	_readEEPROM	;wreg free
 16115  00342E  6E0B               	movwf	??_init_app_ram& (0+255),c
 16116  003430  A00B               	btfss	??_init_app_ram,0,c
 16117  003432  D02D               	goto	l7293
 16118                           
 16119                           ;main.c: 457: relay_pulse_flags |= (1<<i);
 16120  003434  C00D  F00B         	movff	init_app_ram@i,??_init_app_ram
 16121  003438  0E01               	movlw	1
 16122  00343A  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16123  00343C  2A0B               	incf	??_init_app_ram,f,c
 16124  00343E  D002               	goto	u8074
 16125  003440                     u8075:
 16126  003440  90D8               	bcf	status,0,c
 16127  003442  360C               	rlcf	??_init_app_ram+1,f,c
 16128  003444                     u8074:
 16129  003444  2E0B               	decfsz	??_init_app_ram,f,c
 16130  003446  D7FC               	goto	u8075
 16131  003448  500C               	movf	??_init_app_ram+1,w,c
 16132  00344A  0100               	movlb	0	; () banked
 16133  00344C  138A               	iorwf	_relay_pulse_flags& (0+255),f,b
 16134                           
 16135                           ; BSR set to: 0
 16136                           ;main.c: 458: relay_pulse_timer[ i ] =
 16137                           ;main.c: 459: readEEPROM( 0x43 + 18 + i ) * 256 +
 16138                           ;main.c: 460: readEEPROM( 0x43 + 19 + i );
 16139  00344E  0E55               	movlw	85
 16140  003450  240D               	addwf	init_app_ram@i,w,c
 16141  003452  6E08               	movwf	?_readEEPROM,c
 16142  003454  6A09               	clrf	?_readEEPROM+1,c
 16143  003456  0E00               	movlw	0
 16144  003458  2209               	addwfc	?_readEEPROM+1,f,c
 16145  00345A  ECEF  F020         	call	_readEEPROM	;wreg free
 16146  00345E  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16147  003460  6A0B               	clrf	??_init_app_ram& (0+255),c
 16148  003462  0E56               	movlw	86
 16149  003464  240D               	addwf	init_app_ram@i,w,c
 16150  003466  6E08               	movwf	?_readEEPROM,c
 16151  003468  6A09               	clrf	?_readEEPROM+1,c
 16152  00346A  0E00               	movlw	0
 16153  00346C  2209               	addwfc	?_readEEPROM+1,f,c
 16154  00346E  ECEF  F020         	call	_readEEPROM	;wreg free
 16155  003472  260B               	addwf	??_init_app_ram,f,c
 16156  003474  0E00               	movlw	0
 16157  003476  220C               	addwfc	??_init_app_ram+1,f,c
 16158  003478  500D               	movf	init_app_ram@i,w,c
 16159  00347A  0D02               	mullw	2
 16160  00347C  50F3               	movf	prodl,w,c
 16161  00347E  0100               	movlb	0	; () banked
 16162  003480  0F70               	addlw	low _relay_pulse_timer
 16163  003482  6ED9               	movwf	fsr2l,c
 16164  003484  6ADA               	clrf	fsr2h,c
 16165  003486  C00B  FFDE         	movff	??_init_app_ram,postinc2
 16166  00348A  C00C  FFDD         	movff	??_init_app_ram+1,postdec2
 16167  00348E                     l7293:
 16168                           
 16169                           ;main.c: 461: }
 16170                           ;main.c: 464: if ( readEEPROM(0x43 + 15 + i ) & 0x04) {
 16171  00348E  0E52               	movlw	82
 16172  003490  240D               	addwf	init_app_ram@i,w,c
 16173  003492  6E08               	movwf	?_readEEPROM,c
 16174  003494  6A09               	clrf	?_readEEPROM+1,c
 16175  003496  0E00               	movlw	0
 16176  003498  2209               	addwfc	?_readEEPROM+1,f,c
 16177  00349A  ECEF  F020         	call	_readEEPROM	;wreg free
 16178  00349E  6E0B               	movwf	??_init_app_ram& (0+255),c
 16179  0034A0  A40B               	btfss	??_init_app_ram,2,c
 16180  0034A2  D020               	goto	l7297
 16181                           
 16182                           ;main.c: 465: relay_protection_timer[ i ] =
 16183                           ;main.c: 466: readEEPROM(0x43 + 44 + i ) * 256 +
 16184                           ;main.c: 467: readEEPROM(0x43 + 45 + i );
 16185  0034A4  0E6F               	movlw	111
 16186  0034A6  240D               	addwf	init_app_ram@i,w,c
 16187  0034A8  6E08               	movwf	?_readEEPROM,c
 16188  0034AA  6A09               	clrf	?_readEEPROM+1,c
 16189  0034AC  0E00               	movlw	0
 16190  0034AE  2209               	addwfc	?_readEEPROM+1,f,c
 16191  0034B0  ECEF  F020         	call	_readEEPROM	;wreg free
 16192  0034B4  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16193  0034B6  6A0B               	clrf	??_init_app_ram& (0+255),c
 16194  0034B8  0E70               	movlw	112
 16195  0034BA  240D               	addwf	init_app_ram@i,w,c
 16196  0034BC  6E08               	movwf	?_readEEPROM,c
 16197  0034BE  6A09               	clrf	?_readEEPROM+1,c
 16198  0034C0  0E00               	movlw	0
 16199  0034C2  2209               	addwfc	?_readEEPROM+1,f,c
 16200  0034C4  ECEF  F020         	call	_readEEPROM	;wreg free
 16201  0034C8  260B               	addwf	??_init_app_ram,f,c
 16202  0034CA  0E00               	movlw	0
 16203  0034CC  220C               	addwfc	??_init_app_ram+1,f,c
 16204  0034CE  500D               	movf	init_app_ram@i,w,c
 16205  0034D0  0D02               	mullw	2
 16206  0034D2  50F3               	movf	prodl,w,c
 16207  0034D4  0100               	movlb	0	; () banked
 16208  0034D6  0F60               	addlw	low _relay_protection_timer
 16209  0034D8  6ED9               	movwf	fsr2l,c
 16210  0034DA  6ADA               	clrf	fsr2h,c
 16211  0034DC  C00B  FFDE         	movff	??_init_app_ram,postinc2
 16212  0034E0  C00C  FFDD         	movff	??_init_app_ram+1,postdec2
 16213  0034E4                     l7297:
 16214  0034E4  2A0D               	incf	init_app_ram@i,f,c
 16215  0034E6  0E06               	movlw	6
 16216  0034E8  640D               	cpfsgt	init_app_ram@i,c
 16217  0034EA  D799               	goto	l7287
 16218  0034EC  0C06               	retlw	6
 16219  0034EE                     __end_of_init_app_ram:
 16220                           	opt stack 0
 16221                           tblptru	equ	0xFF8
 16222                           tblptrh	equ	0xFF7
 16223                           tblptrl	equ	0xFF6
 16224                           tablat	equ	0xFF5
 16225                           prodh	equ	0xFF4
 16226                           prodl	equ	0xFF3
 16227                           intcon	equ	0xFF2
 16228                           postinc0	equ	0xFEE
 16229                           wreg	equ	0xFE8
 16230                           indf1	equ	0xFE7
 16231                           fsr1h	equ	0xFE2
 16232                           fsr1l	equ	0xFE1
 16233                           indf2	equ	0xFDF
 16234                           postinc2	equ	0xFDE
 16235                           postdec2	equ	0xFDD
 16236                           plusw2	equ	0xFDB
 16237                           fsr2h	equ	0xFDA
 16238                           fsr2l	equ	0xFD9
 16239                           status	equ	0xFD8
 16240                           
 16241 ;; *************** function _WriteTimer0 *****************
 16242 ;; Defined at:
 16243 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16244 ;; Parameters:    Size  Location     Type
 16245 ;;  timer0          2    7[COMRAM] unsigned int 
 16246 ;; Auto vars:     Size  Location     Type
 16247 ;;  timer           2    9[COMRAM] struct Timers
 16248 ;; Return value:  Size  Location     Type
 16249 ;;		None               void
 16250 ;; Registers used:
 16251 ;;		None
 16252 ;; Tracked objects:
 16253 ;;		On entry : 0/0
 16254 ;;		On exit  : 0/0
 16255 ;;		Unchanged: 0/0
 16256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16257 ;;      Params:         2       0       0       0       0       0       0
 16258 ;;      Locals:         2       0       0       0       0       0       0
 16259 ;;      Temps:          0       0       0       0       0       0       0
 16260 ;;      Totals:         4       0       0       0       0       0       0
 16261 ;;Total ram usage:        4 bytes
 16262 ;; Hardware stack levels used:    1
 16263 ;; Hardware stack levels required when called:    2
 16264 ;; This function calls:
 16265 ;;		Nothing
 16266 ;; This function is called by:
 16267 ;;		_init
 16268 ;; This function uses a non-reentrant model
 16269 ;;
 16270                           
 16271                           	psect	text73
 16272  0041CC                     __ptext73:
 16273                           	opt stack 0
 16274  0041CC                     _WriteTimer0:
 16275                           	opt stack 27
 16276                           
 16277                           ;incstack = 0
 16278                           ;incstack = 0
 16279  0041CC  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 16280  0041D0  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 16281  0041D4  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 16282  0041D8  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 16283  0041DC  0012               	return	
 16284  0041DE                     __end_of_WriteTimer0:
 16285                           	opt stack 0
 16286                           tblptru	equ	0xFF8
 16287                           tblptrh	equ	0xFF7
 16288                           tblptrl	equ	0xFF6
 16289                           tablat	equ	0xFF5
 16290                           prodh	equ	0xFF4
 16291                           prodl	equ	0xFF3
 16292                           intcon	equ	0xFF2
 16293                           postinc0	equ	0xFEE
 16294                           wreg	equ	0xFE8
 16295                           indf1	equ	0xFE7
 16296                           fsr1h	equ	0xFE2
 16297                           fsr1l	equ	0xFE1
 16298                           indf2	equ	0xFDF
 16299                           postinc2	equ	0xFDE
 16300                           postdec2	equ	0xFDD
 16301                           plusw2	equ	0xFDB
 16302                           fsr2h	equ	0xFDA
 16303                           fsr2l	equ	0xFD9
 16304                           status	equ	0xFD8
 16305                           
 16306 ;; *************** function _vscp_readAppReg *****************
 16307 ;; Defined at:
 16308 ;;		line 898 in file "../main.c"
 16309 ;; Parameters:    Size  Location     Type
 16310 ;;  reg             1    wreg     unsigned char 
 16311 ;; Auto vars:     Size  Location     Type
 16312 ;;  reg             1   11[COMRAM] unsigned char 
 16313 ;;  rv              1   10[COMRAM] unsigned char 
 16314 ;; Return value:  Size  Location     Type
 16315 ;;                  1    wreg      unsigned char 
 16316 ;; Registers used:
 16317 ;;		wreg, status,2, status,0, cstack
 16318 ;; Tracked objects:
 16319 ;;		On entry : F/0
 16320 ;;		On exit  : 0/0
 16321 ;;		Unchanged: 0/0
 16322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16323 ;;      Params:         0       0       0       0       0       0       0
 16324 ;;      Locals:         2       0       0       0       0       0       0
 16325 ;;      Temps:          0       0       0       0       0       0       0
 16326 ;;      Totals:         2       0       0       0       0       0       0
 16327 ;;Total ram usage:        2 bytes
 16328 ;; Hardware stack levels used:    1
 16329 ;; Hardware stack levels required when called:    3
 16330 ;; This function calls:
 16331 ;;		_readEEPROM
 16332 ;; This function is called by:
 16333 ;;		_vscp_readRegister
 16334 ;;		_vscp_handleProtocolEvent
 16335 ;; This function uses a non-reentrant model
 16336 ;;
 16337                           
 16338                           	psect	text74
 16339  003A0A                     __ptext74:
 16340                           	opt stack 0
 16341  003A0A                     _vscp_readAppReg:
 16342                           	opt stack 25
 16343                           
 16344                           ;incstack = 0
 16345                           ;incstack = 0
 16346                           ;vscp_readAppReg@reg stored from wreg
 16347  003A0A  CFE8 F00C          	movff	wreg,vscp_readAppReg@reg
 16348                           
 16349                           ; BSR set to: 0
 16350                           ;main.c: 899: uint8_t rv;
 16351                           ;main.c: 901: rv = 0x00;
 16352  003A0E  6A0B               	clrf	vscp_readAppReg@rv,c
 16353                           
 16354                           ; BSR set to: 0
 16355                           ;main.c: 904: if ( reg == 0x00 ) {
 16356  003A10  660C               	tstfsz	vscp_readAppReg@reg,c
 16357  003A12  D006               	goto	l8079
 16358                           
 16359                           ; BSR set to: 0
 16360                           ;main.c: 905: rv = readEEPROM(0x43 + 0);
 16361  003A14  6A09               	clrf	?_readEEPROM+1,c
 16362  003A16  0E43               	movlw	67
 16363  003A18  6E08               	movwf	?_readEEPROM,c
 16364  003A1A  ECEF  F020         	call	_readEEPROM	;wreg free
 16365  003A1E  D04D               	goto	L61
 16366  003A20                     l8079:
 16367                           
 16368                           ; BSR set to: 0
 16369                           ;main.c: 908: else if ( reg == 0x01 ) {
 16370  003A20  040C               	decf	vscp_readAppReg@reg,w,c
 16371  003A22  E106               	bnz	l8083
 16372                           
 16373                           ; BSR set to: 0
 16374                           ;main.c: 909: rv = readEEPROM(0x43 + 1);
 16375  003A24  6A09               	clrf	?_readEEPROM+1,c
 16376  003A26  0E44               	movlw	68
 16377  003A28  6E08               	movwf	?_readEEPROM,c
 16378  003A2A  ECEF  F020         	call	_readEEPROM	;wreg free
 16379  003A2E  D045               	goto	L61
 16380  003A30                     l8083:
 16381                           
 16382                           ; BSR set to: 0
 16383                           ;main.c: 911: else if ( (reg >= 2) && (reg < 10) ) {
 16384  003A30  0E01               	movlw	1
 16385  003A32  640C               	cpfsgt	vscp_readAppReg@reg,c
 16386  003A34  D034               	goto	l8107
 16387                           
 16388                           ; BSR set to: 0
 16389  003A36  0E0A               	movlw	10
 16390  003A38  600C               	cpfslt	vscp_readAppReg@reg,c
 16391  003A3A  D031               	goto	l8107
 16392  003A3C  D01E               	goto	l8105
 16393  003A3E                     l8089:
 16394                           
 16395                           ; BSR set to: 0
 16396                           ;main.c: 917: rv = LATBbits.LATB4;
 16397  003A3E  0E00               	movlw	0
 16398  003A40  B88A               	btfsc	3978,4,c	;volatile
 16399  003A42  0E01               	movlw	1
 16400  003A44  D03A               	goto	L61
 16401  003A46                     l8091:
 16402                           
 16403                           ; BSR set to: 0
 16404                           ;main.c: 922: rv = LATBbits.LATB1;
 16405  003A46  0E00               	movlw	0
 16406  003A48  B28A               	btfsc	3978,1,c	;volatile
 16407  003A4A  0E01               	movlw	1
 16408  003A4C  D036               	goto	L61
 16409  003A4E                     l8093:
 16410                           
 16411                           ; BSR set to: 0
 16412                           ;main.c: 927: rv = LATBbits.LATB0;
 16413  003A4E  0E00               	movlw	0
 16414  003A50  B08A               	btfsc	3978,0,c	;volatile
 16415  003A52  0E01               	movlw	1
 16416  003A54  D032               	goto	L61
 16417  003A56                     l8095:
 16418                           
 16419                           ; BSR set to: 0
 16420                           ;main.c: 932: rv = LATCbits.LATC7;
 16421  003A56  0E00               	movlw	0
 16422  003A58  BE8B               	btfsc	3979,7,c	;volatile
 16423  003A5A  0E01               	movlw	1
 16424  003A5C  D02E               	goto	L61
 16425  003A5E                     l8097:
 16426                           
 16427                           ; BSR set to: 0
 16428                           ;main.c: 937: rv = LATCbits.LATC6;
 16429  003A5E  0E00               	movlw	0
 16430  003A60  BC8B               	btfsc	3979,6,c	;volatile
 16431  003A62  0E01               	movlw	1
 16432  003A64  D02A               	goto	L61
 16433  003A66                     l8099:
 16434                           
 16435                           ; BSR set to: 0
 16436                           ;main.c: 942: rv = LATCbits.LATC5;
 16437  003A66  0E00               	movlw	0
 16438  003A68  BA8B               	btfsc	3979,5,c	;volatile
 16439  003A6A  0E01               	movlw	1
 16440  003A6C  D026               	goto	L61
 16441  003A6E                     l8101:
 16442                           
 16443                           ; BSR set to: 0
 16444                           ;main.c: 947: rv = LATCbits.LATC4;
 16445  003A6E  0E00               	movlw	0
 16446  003A70  B88B               	btfsc	3979,4,c	;volatile
 16447  003A72  0E01               	movlw	1
 16448  003A74  D022               	goto	L61
 16449  003A76                     l290:
 16450                           
 16451                           ; BSR set to: 0
 16452                           ;main.c: 952: rv = 0;
 16453  003A76  6A0B               	clrf	vscp_readAppReg@rv,c
 16454                           
 16455                           ;main.c: 953: break;
 16456  003A78  D021               	goto	l8113
 16457  003A7A                     l8105:
 16458                           
 16459                           ; BSR set to: 0
 16460  003A7A  500C               	movf	vscp_readAppReg@reg,w,c
 16461                           
 16462                           ; Switch size 1, requested type "speed"
 16463                           ; Number of cases is 8, Range of values is 2 to 9
 16464                           ; switch strategies available:
 16465                           ; Name         Instructions Cycles
 16466                           ; simple_byte           25    13 (average)
 16467                           ;	Chosen strategy is simple_byte
 16468  003A7C  0A02               	xorlw	2	; case 2
 16469  003A7E  E0DF               	bz	l8089
 16470  003A80  0A01               	xorlw	1	; case 3
 16471  003A82  E0E1               	bz	l8091
 16472  003A84  0A07               	xorlw	7	; case 4
 16473  003A86  E0E3               	bz	l8093
 16474  003A88  0A01               	xorlw	1	; case 5
 16475  003A8A  E0E5               	bz	l8095
 16476  003A8C  0A03               	xorlw	3	; case 6
 16477  003A8E  E0E7               	bz	l8097
 16478  003A90  0A01               	xorlw	1	; case 7
 16479  003A92  E0E9               	bz	l8099
 16480  003A94  0A0F               	xorlw	15	; case 8
 16481  003A96  E0EB               	bz	l8101
 16482  003A98  0A01               	xorlw	1	; case 9
 16483  003A9A  E0ED               	bz	l290
 16484  003A9C  D00F               	goto	l8113
 16485  003A9E                     l8107:
 16486                           
 16487                           ; BSR set to: 0
 16488                           ;main.c: 957: else if ( ( reg >= 10 ) &&
 16489                           ;main.c: 958: (reg < (72 + 7 * 8 ) ) ) {
 16490  003A9E  0E09               	movlw	9
 16491  003AA0  640C               	cpfsgt	vscp_readAppReg@reg,c
 16492  003AA2  D00C               	goto	l8113
 16493                           
 16494                           ; BSR set to: 0
 16495  003AA4  0E80               	movlw	128
 16496  003AA6  600C               	cpfslt	vscp_readAppReg@reg,c
 16497  003AA8  D009               	goto	l8113
 16498                           
 16499                           ; BSR set to: 0
 16500                           ;main.c: 959: rv = readEEPROM( 0x43 + reg );
 16501  003AAA  0E43               	movlw	67
 16502  003AAC  240C               	addwf	vscp_readAppReg@reg,w,c
 16503  003AAE  6E08               	movwf	?_readEEPROM,c
 16504  003AB0  6A09               	clrf	?_readEEPROM+1,c
 16505  003AB2  0E00               	movlw	0
 16506  003AB4  2209               	addwfc	?_readEEPROM+1,f,c
 16507  003AB6  ECEF  F020         	call	_readEEPROM	;wreg free
 16508  003ABA                     L61:
 16509  003ABA  6E0B               	movwf	vscp_readAppReg@rv,c
 16510  003ABC                     l8113:
 16511                           
 16512                           ;main.c: 960: }
 16513                           ;main.c: 962: return rv;
 16514  003ABC  500B               	movf	vscp_readAppReg@rv,w,c
 16515  003ABE  0012               	return	
 16516  003AC0                     __end_of_vscp_readAppReg:
 16517                           	opt stack 0
 16518                           tblptru	equ	0xFF8
 16519                           tblptrh	equ	0xFF7
 16520                           tblptrl	equ	0xFF6
 16521                           tablat	equ	0xFF5
 16522                           prodh	equ	0xFF4
 16523                           prodl	equ	0xFF3
 16524                           intcon	equ	0xFF2
 16525                           postinc0	equ	0xFEE
 16526                           wreg	equ	0xFE8
 16527                           indf1	equ	0xFE7
 16528                           fsr1h	equ	0xFE2
 16529                           fsr1l	equ	0xFE1
 16530                           indf2	equ	0xFDF
 16531                           postinc2	equ	0xFDE
 16532                           postdec2	equ	0xFDD
 16533                           plusw2	equ	0xFDB
 16534                           fsr2h	equ	0xFDA
 16535                           fsr2l	equ	0xFD9
 16536                           status	equ	0xFD8
 16537                           
 16538 ;; *************** function _readEEPROM *****************
 16539 ;; Defined at:
 16540 ;;		line 92 in file "../../vscp_firmware/pic/common/eeprom.c"
 16541 ;; Parameters:    Size  Location     Type
 16542 ;;  address         2    7[COMRAM] unsigned short 
 16543 ;; Auto vars:     Size  Location     Type
 16544 ;;  data            1    9[COMRAM] unsigned char 
 16545 ;; Return value:  Size  Location     Type
 16546 ;;                  1    wreg      unsigned char 
 16547 ;; Registers used:
 16548 ;;		wreg, status,2
 16549 ;; Tracked objects:
 16550 ;;		On entry : 0/0
 16551 ;;		On exit  : 0/0
 16552 ;;		Unchanged: 0/0
 16553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16554 ;;      Params:         2       0       0       0       0       0       0
 16555 ;;      Locals:         1       0       0       0       0       0       0
 16556 ;;      Temps:          0       0       0       0       0       0       0
 16557 ;;      Totals:         3       0       0       0       0       0       0
 16558 ;;Total ram usage:        3 bytes
 16559 ;; Hardware stack levels used:    1
 16560 ;; Hardware stack levels required when called:    2
 16561 ;; This function calls:
 16562 ;;		Nothing
 16563 ;; This function is called by:
 16564 ;;		_init_app_ram
 16565 ;;		_doApplicationOneSecondWork
 16566 ;;		_vscp_readNicknamePermanent
 16567 ;;		_vscp_getZone
 16568 ;;		_vscp_getSubzone
 16569 ;;		_vscp_readAppReg
 16570 ;;		_vscp_writeAppReg
 16571 ;;		_SendInformationEvent
 16572 ;;		_doDM
 16573 ;;		_doActionOn
 16574 ;;		_doActionOff
 16575 ;;		_doActionPulse
 16576 ;;		_doActionStatus
 16577 ;;		_doActionDisable
 16578 ;;		_doActionToggle
 16579 ;;		_vscp_getGUID
 16580 ;;		_vscp_getUserID
 16581 ;;		_vscp_getManufacturerId
 16582 ;;		_vscp_getSegmentCRC
 16583 ;;		_calculateSetFilterMask
 16584 ;; This function uses a non-reentrant model
 16585 ;;
 16586                           
 16587                           	psect	text75
 16588  0041DE                     __ptext75:
 16589                           	opt stack 0
 16590  0041DE                     _readEEPROM:
 16591                           	opt stack 26
 16592                           
 16593                           ;eeprom.c: 93: uint8_t data;
 16594                           ;eeprom.c: 98: EEADR = address & 0xff;
 16595                           
 16596                           ;incstack = 0
 16597                           ;incstack = 0
 16598  0041DE  C008  FFA9         	movff	readEEPROM@address,4009	;volatile
 16599                           
 16600                           ;eeprom.c: 99: EECON1bits.EEPGD= 0;
 16601  0041E2  9EA6               	bcf	4006,7,c	;volatile
 16602                           
 16603                           ;eeprom.c: 100: EECON1bits.CFGS = 0;
 16604  0041E4  9CA6               	bcf	4006,6,c	;volatile
 16605                           
 16606                           ;eeprom.c: 101: EECON1bits.RD = 1;
 16607  0041E6  80A6               	bsf	4006,0,c	;volatile
 16608                           
 16609                           ;eeprom.c: 102: data = EEDATA;
 16610  0041E8  CFA8 F00A          	movff	4008,readEEPROM@data	;volatile
 16611                           
 16612                           ;eeprom.c: 104: return data;
 16613  0041EC  500A               	movf	readEEPROM@data,w,c
 16614  0041EE  0012               	return	
 16615  0041F0                     __end_of_readEEPROM:
 16616                           	opt stack 0
 16617                           tblptru	equ	0xFF8
 16618                           tblptrh	equ	0xFF7
 16619                           tblptrl	equ	0xFF6
 16620                           tablat	equ	0xFF5
 16621                           prodh	equ	0xFF4
 16622                           prodl	equ	0xFF3
 16623                           intcon	equ	0xFF2
 16624                           postinc0	equ	0xFEE
 16625                           wreg	equ	0xFE8
 16626                           indf1	equ	0xFE7
 16627                           fsr1h	equ	0xFE2
 16628                           fsr1l	equ	0xFE1
 16629                           indf2	equ	0xFDF
 16630                           postinc2	equ	0xFDE
 16631                           postdec2	equ	0xFDD
 16632                           plusw2	equ	0xFDB
 16633                           fsr2h	equ	0xFDA
 16634                           fsr2l	equ	0xFD9
 16635                           status	equ	0xFD8
 16636                           
 16637 ;; *************** function _interrupt_at_low_vector *****************
 16638 ;; Defined at:
 16639 ;;		line 134 in file "../main.c"
 16640 ;; Parameters:    Size  Location     Type
 16641 ;;		None
 16642 ;; Auto vars:     Size  Location     Type
 16643 ;;		None
 16644 ;; Return value:  Size  Location     Type
 16645 ;;		None               void
 16646 ;; Registers used:
 16647 ;;		wreg, status,2, status,0, cstack
 16648 ;; Tracked objects:
 16649 ;;		On entry : 0/0
 16650 ;;		On exit  : 0/0
 16651 ;;		Unchanged: 0/0
 16652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16653 ;;      Params:         0       0       0       0       0       0       0
 16654 ;;      Locals:         0       0       0       0       0       0       0
 16655 ;;      Temps:          3       0       0       0       0       0       0
 16656 ;;      Totals:         3       0       0       0       0       0       0
 16657 ;;Total ram usage:        3 bytes
 16658 ;; Hardware stack levels used:    1
 16659 ;; Hardware stack levels required when called:    1
 16660 ;; This function calls:
 16661 ;;		i1_WriteTimer0
 16662 ;; This function is called by:
 16663 ;;		Interrupt level 1
 16664 ;; This function uses a non-reentrant model
 16665 ;;
 16666                           
 16667                           	psect	intcodelo
 16668  000818                     __pintcodelo:
 16669                           	opt stack 0
 16670  000818                     _interrupt_at_low_vector:
 16671                           	opt stack 21
 16672                           
 16673                           ;incstack = 0
 16674  000818  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 16675  00081C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 16676  000820  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 16677  000824                     
 16678                           ;main.c: 136: if ( INTCONbits.TMR0IF ) {
 16679  000824  A4F2               	btfss	intcon,2,c	;volatile
 16680  000826  D001               	goto	i1u786_21
 16681  000828  D001               	goto	i1u786_20
 16682  00082A                     i1u786_21:
 16683  00082A  D03E               	goto	i1l145
 16684  00082C                     i1u786_20:
 16685  00082C                     
 16686                           ;main.c: 139: WriteTimer0(0xfb1d);
 16687  00082C  0EFB               	movlw	251
 16688  00082E  6E02               	movwf	?i1_WriteTimer0+1,c
 16689  000830  0E1D               	movlw	29
 16690  000832  6E01               	movwf	?i1_WriteTimer0,c
 16691  000834  ECF8  F020         	call	i1_WriteTimer0	;wreg free
 16692  000838                     
 16693                           ;main.c: 141: vscp_timer++;
 16694  000838  0100               	movlb	0	; () banked
 16695  00083A  4B86               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 16696  00083C  2B87               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 16697  00083E                     
 16698                           ; BSR set to: 0
 16699                           ;main.c: 142: vscp_configtimer++;
 16700  00083E  4B84               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 16701  000840  2B85               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 16702  000842                     
 16703                           ; BSR set to: 0
 16704                           ;main.c: 143: measurement_clock++;
 16705  000842  0E01               	movlw	1
 16706  000844  2780               	addwf	_measurement_clock& (0+255),f,b	;volatile
 16707  000846  0E00               	movlw	0
 16708  000848  2381               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 16709  00084A  0E00               	movlw	0
 16710  00084C  2382               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 16711  00084E  0E00               	movlw	0
 16712  000850  2383               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 16713  000852                     
 16714                           ; BSR set to: 0
 16715                           ;main.c: 146: if ( PORTCbits.RC0 ) {
 16716  000852  A082               	btfss	3970,0,c	;volatile
 16717  000854  D001               	goto	i1u787_21
 16718  000856  D001               	goto	i1u787_20
 16719  000858                     i1u787_21:
 16720  000858  D002               	goto	i1l7101
 16721  00085A                     i1u787_20:
 16722  00085A                     
 16723                           ; BSR set to: 0
 16724                           ;main.c: 147: vscp_initbtncnt = 0;
 16725  00085A  6B8F               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 16726                           
 16727                           ;main.c: 148: } else {
 16728  00085C  D001               	goto	i1l137
 16729  00085E                     i1l7101:
 16730                           
 16731                           ; BSR set to: 0
 16732                           ;main.c: 150: vscp_initbtncnt++;
 16733  00085E  2B8F               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 16734  000860                     i1l137:
 16735                           
 16736                           ; BSR set to: 0
 16737                           ;main.c: 151: }
 16738                           ;main.c: 154: vscp_statuscnt++;
 16739  000860  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 16740  000862                     
 16741                           ; BSR set to: 0
 16742                           ;main.c: 155: if ( ( 0x02 == vscp_initledfunc ) &&
 16743                           ;main.c: 156: ( vscp_statuscnt > 100 ) ) {
 16744  000862  5056               	movf	_vscp_initledfunc,w,c
 16745  000864  0A02               	xorlw	2
 16746  000866  A4D8               	btfss	status,2,c
 16747  000868  D001               	goto	i1u788_21
 16748  00086A  D001               	goto	i1u788_20
 16749  00086C                     i1u788_21:
 16750  00086C  D00E               	goto	i1l7111
 16751  00086E                     i1u788_20:
 16752  00086E                     
 16753                           ; BSR set to: 0
 16754  00086E  0E64               	movlw	100
 16755  000870  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 16756  000872  D001               	goto	i1u789_21
 16757  000874  D001               	goto	i1u789_20
 16758  000876                     i1u789_21:
 16759  000876  D009               	goto	i1l7111
 16760  000878                     i1u789_20:
 16761  000878                     
 16762                           ; BSR set to: 0
 16763                           ;main.c: 158: if ( PORTCbits.RC1 ) {
 16764  000878  A282               	btfss	3970,1,c	;volatile
 16765  00087A  D001               	goto	i1u790_21
 16766  00087C  D001               	goto	i1u790_20
 16767  00087E                     i1u790_21:
 16768  00087E  D002               	goto	i1l139
 16769  000880                     i1u790_20:
 16770  000880                     
 16771                           ; BSR set to: 0
 16772                           ;main.c: 159: PORTCbits.RC1 = 0;
 16773  000880  9282               	bcf	3970,1,c	;volatile
 16774                           
 16775                           ;main.c: 160: }
 16776  000882  D001               	goto	i1l140
 16777  000884                     i1l139:
 16778                           
 16779                           ; BSR set to: 0
 16780                           ;main.c: 161: else {
 16781                           ;main.c: 162: PORTCbits.RC1 = 1;
 16782  000884  8282               	bsf	3970,1,c	;volatile
 16783  000886                     i1l140:
 16784                           
 16785                           ; BSR set to: 0
 16786                           ;main.c: 163: }
 16787                           ;main.c: 165: vscp_statuscnt = 0;
 16788  000886  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16789                           
 16790                           ;main.c: 167: }
 16791  000888  D00E               	goto	i1l141
 16792  00088A                     i1l7111:
 16793                           
 16794                           ; BSR set to: 0
 16795                           ;main.c: 168: else if (0x01 == vscp_initledfunc) {
 16796  00088A  0456               	decf	_vscp_initledfunc,w,c
 16797  00088C  A4D8               	btfss	status,2,c
 16798  00088E  D001               	goto	i1u791_21
 16799  000890  D001               	goto	i1u791_20
 16800  000892                     i1u791_21:
 16801  000892  D003               	goto	i1l142
 16802  000894                     i1u791_20:
 16803  000894                     
 16804                           ; BSR set to: 0
 16805                           ;main.c: 169: PORTCbits.RC1 = 1;
 16806  000894  8282               	bsf	3970,1,c	;volatile
 16807                           
 16808                           ;main.c: 170: vscp_statuscnt = 0;
 16809  000896  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16810                           
 16811                           ;main.c: 171: }
 16812  000898  D006               	goto	i1l141
 16813  00089A                     i1l142:
 16814                           
 16815                           ; BSR set to: 0
 16816                           ;main.c: 172: else if (0x00 == vscp_initledfunc) {
 16817  00089A  6656               	tstfsz	_vscp_initledfunc,c
 16818  00089C  D001               	goto	i1u792_21
 16819  00089E  D001               	goto	i1u792_20
 16820  0008A0                     i1u792_21:
 16821  0008A0  D002               	goto	i1l141
 16822  0008A2                     i1u792_20:
 16823  0008A2                     
 16824                           ; BSR set to: 0
 16825                           ;main.c: 173: PORTCbits.RC1 = 0;
 16826  0008A2  9282               	bcf	3970,1,c	;volatile
 16827                           
 16828                           ;main.c: 174: vscp_statuscnt = 0;
 16829  0008A4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16830  0008A6                     i1l141:
 16831                           
 16832                           ; BSR set to: 0
 16833                           ;main.c: 175: }
 16834                           ;main.c: 177: INTCONbits.TMR0IF = 0;
 16835  0008A6  94F2               	bcf	intcon,2,c	;volatile
 16836  0008A8                     i1l145:
 16837  0008A8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 16838  0008AC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 16839  0008B0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 16840  0008B4  0010               	retfie	
 16841  0008B6                     __end_of_interrupt_at_low_vector:
 16842                           	opt stack 0
 16843                           tblptru	equ	0xFF8
 16844                           tblptrh	equ	0xFF7
 16845                           tblptrl	equ	0xFF6
 16846                           tablat	equ	0xFF5
 16847                           prodh	equ	0xFF4
 16848                           prodl	equ	0xFF3
 16849                           intcon	equ	0xFF2
 16850                           postinc0	equ	0xFEE
 16851                           wreg	equ	0xFE8
 16852                           indf1	equ	0xFE7
 16853                           fsr1h	equ	0xFE2
 16854                           fsr1l	equ	0xFE1
 16855                           bsr	equ	0xFE0
 16856                           indf2	equ	0xFDF
 16857                           postinc2	equ	0xFDE
 16858                           postdec2	equ	0xFDD
 16859                           plusw2	equ	0xFDB
 16860                           fsr2h	equ	0xFDA
 16861                           fsr2l	equ	0xFD9
 16862                           status	equ	0xFD8
 16863                           
 16864 ;; *************** function i1_WriteTimer0 *****************
 16865 ;; Defined at:
 16866 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16867 ;; Parameters:    Size  Location     Type
 16868 ;;  timer0          2    0[COMRAM] unsigned int 
 16869 ;; Auto vars:     Size  Location     Type
 16870 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 16871 ;; Return value:  Size  Location     Type
 16872 ;;		None               void
 16873 ;; Registers used:
 16874 ;;		None
 16875 ;; Tracked objects:
 16876 ;;		On entry : 0/0
 16877 ;;		On exit  : 0/0
 16878 ;;		Unchanged: 0/0
 16879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16880 ;;      Params:         2       0       0       0       0       0       0
 16881 ;;      Locals:         2       0       0       0       0       0       0
 16882 ;;      Temps:          0       0       0       0       0       0       0
 16883 ;;      Totals:         4       0       0       0       0       0       0
 16884 ;;Total ram usage:        4 bytes
 16885 ;; Hardware stack levels used:    1
 16886 ;; This function calls:
 16887 ;;		Nothing
 16888 ;; This function is called by:
 16889 ;;		_interrupt_at_low_vector
 16890 ;; This function uses a non-reentrant model
 16891 ;;
 16892                           
 16893                           	psect	text77
 16894  0041F0                     __ptext77:
 16895                           	opt stack 0
 16896  0041F0                     i1_WriteTimer0:
 16897                           	opt stack 21
 16898                           
 16899                           ;incstack = 0
 16900                           ;incstack = 0
 16901  0041F0  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 16902  0041F4  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 16903  0041F8  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 16904  0041FC  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 16905  004200  0012               	return	
 16906  004202                     __end_ofi1_WriteTimer0:
 16907                           	opt stack 0
 16908                           tblptru	equ	0xFF8
 16909                           tblptrh	equ	0xFF7
 16910                           tblptrl	equ	0xFF6
 16911                           tablat	equ	0xFF5
 16912                           prodh	equ	0xFF4
 16913                           prodl	equ	0xFF3
 16914                           intcon	equ	0xFF2
 16915                           postinc0	equ	0xFEE
 16916                           wreg	equ	0xFE8
 16917                           indf1	equ	0xFE7
 16918                           fsr1h	equ	0xFE2
 16919                           fsr1l	equ	0xFE1
 16920                           bsr	equ	0xFE0
 16921                           indf2	equ	0xFDF
 16922                           postinc2	equ	0xFDE
 16923                           postdec2	equ	0xFDD
 16924                           plusw2	equ	0xFDB
 16925                           fsr2h	equ	0xFDA
 16926                           fsr2l	equ	0xFD9
 16927                           status	equ	0xFD8
 16928                           tblptru	equ	0xFF8
 16929                           tblptrh	equ	0xFF7
 16930                           tblptrl	equ	0xFF6
 16931                           tablat	equ	0xFF5
 16932                           prodh	equ	0xFF4
 16933                           prodl	equ	0xFF3
 16934                           intcon	equ	0xFF2
 16935                           postinc0	equ	0xFEE
 16936                           wreg	equ	0xFE8
 16937                           indf1	equ	0xFE7
 16938                           fsr1h	equ	0xFE2
 16939                           fsr1l	equ	0xFE1
 16940                           bsr	equ	0xFE0
 16941                           indf2	equ	0xFDF
 16942                           postinc2	equ	0xFDE
 16943                           postdec2	equ	0xFDD
 16944                           plusw2	equ	0xFDB
 16945                           fsr2h	equ	0xFDA
 16946                           fsr2l	equ	0xFD9
 16947                           status	equ	0xFD8
 16948                           
 16949                           	psect	rparam
 16950  0000                     tblptru	equ	0xFF8
 16951                           tblptrh	equ	0xFF7
 16952                           tblptrl	equ	0xFF6
 16953                           tablat	equ	0xFF5
 16954                           prodh	equ	0xFF4
 16955                           prodl	equ	0xFF3
 16956                           intcon	equ	0xFF2
 16957                           postinc0	equ	0xFEE
 16958                           wreg	equ	0xFE8
 16959                           indf1	equ	0xFE7
 16960                           fsr1h	equ	0xFE2
 16961                           fsr1l	equ	0xFE1
 16962                           bsr	equ	0xFE0
 16963                           indf2	equ	0xFDF
 16964                           postinc2	equ	0xFDE
 16965                           postdec2	equ	0xFDD
 16966                           plusw2	equ	0xFDB
 16967                           fsr2h	equ	0xFDA
 16968                           fsr2l	equ	0xFD9
 16969                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     59     140
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionDisable->_writeEEPROM
    _doActionDisable->_readEEPROM
    _doActionStatus->_SendInformationEvent
    _doActionPulse->_readEEPROM
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeAppReg
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_SendInformationEvent
    _calculateSetFilterMask->__CANIDToRegs
    _SendInformationEvent->_sendVSCPFrame
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_readEEPROM
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   70463
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           6     6      0    7490
                                             27 BANK0      6     6      0
                         _readEEPROM
                        _doActionOff
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2438
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                17    17      0   15705
                                             28 BANK0     17    17      0
                         _readEEPROM
                        _doActionOff
                         _doActionOn
                      _doActionPulse
                     _doActionStatus
                    _doActionDisable
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       7     6      1    3454
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionDisable                                      6     5      1     397
                                             10 COMRAM     6     5      1
                        _writeEEPROM
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _doActionStatus                                       7     6      1    3412
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulse                                        7     6      1     353
                                             10 COMRAM     7     6      1
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           7     6      1    3196
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          6     5      1    3196
                                             80 COMRAM     1     0      1
                                             22 BANK0      5     5      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            27    27      0   34567
                                             32 BANK0     27    27      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   11300
                                             30 BANK0      2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    2191
                                             14 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     722
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     180
                                             10 COMRAM     4     4      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     9     8      1    8899
                                             80 COMRAM     1     0      1
                                             22 BANK0      8     8      0
                        _writeEEPROM
                         _readEEPROM
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (4) _calculateSetFilterMask                              50    50      0    1879
                                             17 COMRAM    50    50      0
                         _readEEPROM
               _ECANSetOperationMode
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _SendInformationEvent                                 8     6      2    2567
                                             74 COMRAM     6     6      0
                                             20 BANK0      2     0      2
                         _readEEPROM
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1909
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1436
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     227
                                             11 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     132
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     197
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4624
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     263
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _writeEEPROM                                          3     0      3      44
                                              7 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     700
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (5) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         3     3      0     542
                                             10 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     380
                                             10 COMRAM     2     2      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _init_app_ram
     _readEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _readEEPROM
       _calculateSetFilterMask (ARG)
         _readEEPROM
         _ECANSetOperationMode
         __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _SendInformationEvent
           _readEEPROM
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _readEEPROM
         _calculateSetFilterMask (ARG)
           _readEEPROM
           _ECANSetOperationMode
           __CANIDToRegs
       _vscp_writeStdReg
         _vscp_setGUID
           _writeEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_getGUID
           _readEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
             _readEEPROM
     _vscp_writeStdReg
       _vscp_setGUID
         _writeEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_getGUID
         _readEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
           _readEEPROM
     ___lbmod
   _doDM
     _readEEPROM
     _doActionOff
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulse
       _readEEPROM
     _doActionStatus
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionDisable
       _writeEEPROM
       _readEEPROM
     _doActionToggle
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _readEEPROM
     _doActionOff
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _SendInformationEvent
       _readEEPROM
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3B      8C       5       87.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E4       3        0.0%
DATA                 0      0      F0      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Wed Jun 17 11:21:05 2015

                      doActionToggle@val 00CA                  __end_of_vscp_readAppReg 3AC0  
                  __end_of_sendVSCPFrame 3A0A                              __CFG_CPB$ON 000000  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000B  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 2EA2  
                  doActionToggle@dmflags 00C9                              __CFG_LVP$ON 000000  
                            __CFG_WDT$ON 000000                                      l211 2512  
                                    l220 2536                                      l212 251A  
                                    l204 24F6                                      l221 253E  
                                    l205 24FE                                      l310 0A02  
                                    l214 251E                                      l223 2542  
                                    l215 2526                                      l320 0ACC  
                                    l304 09A8                                      l224 254C  
                                    l208 2506                                      l217 252A  
                                    l209 250E                                      l330 0B94  
                                    l226 2642                                      l218 2532  
                                    l234 26AA                                      l162 3776  
                                    l315 0A68                                      l251 4060  
                                    l411 23B8                                      l325 0B30  
                                    l149 3718                                      l158 375C  
                                    l335 0BF8                                      l247 4082  
                                    l415 20F8                                      l185 2040  
                                    l417 2112                       vscp_readStdReg@idx 0019  
                                    l290 3A76                                      l442 2704  
                                    l451 2804                                      l444 28E8  
                                    l453 2844                                      l445 2744  
                                    l517 35CC                                      l470 3834  
                                    l550 3336                                      l542 3312  
                                    l471 386C                                      l455 2884  
                                    l447 2784                                      l543 331A  
                                    l472 3838                                      l552 333A  
                                    l625 4140                                      l473 383C  
                                    l449 27C4                                      l561 335E  
                                    l553 3342                                      l650 3BCC  
                                    l474 3840                                      l562 3368  
                                    l546 3322                                      l395 125E  
                                    l475 3844                                      l491 2B7A  
                                    l555 3346                                      l547 332A  
                                    l476 3848                                      l564 33B2  
                                    l556 334E                                      l661 3EC4  
                                    l477 384C                                      l493 2BAA  
                                    l549 332E                                      l910 32BE  
                                    l494 2BDA                                      l558 3352  
                                    l495 2C0A                                      l559 335A  
                                    l920 3C3A                                      l656 3DE6  
                                    l496 2C3A                                      l497 2C6A  
                                    l850 2F8C                                      l498 2C9A  
                                    l915 316E                        doActionStatus@bOn 00CA  
                                    l861 294E                       vscp_readStdReg@reg 001C  
                                    l871 2A1C                                      l880 29E6  
                                    l872 299C                                      l856 300A  
                                    l848 2F6E                                      l882 29F6  
                                    l874 29AA                                      l892 2A8A  
                                    l884 2A06                                      l876 29BE  
                                    l868 2B22                                      l893 2AAE  
                                    l878 29D2           __size_of_vscp_handleProbeState 00BA  
                      doActionStatus@arg 0051                           getVSCPFrame@id 0028  
                      doActionStatus@val 00CB            __end_of_vscp_handleProbeState 3954  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                 _calculateSetFilterMask 18A6                                      wreg 000FE8  
            ?_doApplicationOneSecondWork 0001                                     l1111 40F8  
                                   l1040 3FFA                                     l1050 3950  
                                   l1051 38DC                                     l1035 3D7C  
                                   l1107 3D68                     __size_of_doActionOff 00BA  
                                   l1240 15E0                                     l1216 1450  
                                   l1241 15F4                                     l1058 393E  
                                   l1242 1636                                     l1059 391E  
                                   l1083 3E2A                                     l1251 1672  
                                   l1156 403E                                     l1093 3E8C  
                                   l1318 40DA                                     l1094 3E98  
                                   l1182 36FA                                     l1319 40DC  
                                   l1087 3FD6                                     l1098 3EEE  
                                   l1283 3F18                                     l1275 18A4  
                                   l1299 3FAA                      vscp_readStdReg@code 0011  
                                   l8101 3A6E                                     l6503 3EA2  
                                   l5631 406E                                     l7071 3F24  
              vscp_getManufacturerId@idx 000B                                     l8105 3A7A  
                                   l8113 3ABC                                     l8107 3A9E  
                                   l6507 3EA6                                     l7323 389C  
                                   l9101 2E8E                                     l9021 2D12  
                                   l5637 404C                                     l6711 2AB0  
                                   l6631 297C                                     l6615 293C  
                                   l6455 4090                                     l9007 40F2  
                                   l7079 3F3A                                     l7265 3FE6  
                                   l6625 2966                                     l6633 2986  
                                   l7361 38FA                                     l7337 38BA  
                                   l9041 2D4A                                     l9033 2D32  
                                   l9025 2D1C                                     l9105 2E9E  
                                   l9017 2D08                                     l4697 2042  
                                   l8091 3A46                                     l8083 3A30  
                                   l6491 3B70                                     l7363 38FE  
                                   l7339 38C0                                     l9051 2D70  
                                   l8093 3A4E                                     l7293 348E  
                                   l7277 33F4                                     l6733 2B0C  
                                   l7357 38F6                                     l9045 2D5A  
                                   l9037 2D3E                                     l9029 2D26  
                                   l9141 3660                                     l9301 12AC  
                                   l8095 3A56                                     l8079 3A20  
                                   l7287 341E                                     l6807 30A0  
                                   l6719 2ADC                                     l6727 2AF6  
                                   l6639 298A                                     l9071 2DAA  
                                   l9063 2D92                                     l9055 2D7C  
                                   l8503 1B44                                     l9151 3682  
                                   l9135 3644                                     l9223 3714  
                                   l8097 3A5E                                     l8089 3A3E  
                                   l7297 34E4                                     l6745 414E  
                                   l7393 3942                                     l8521 1BF0  
                                   l9153 3698                                     l9129 3624  
                                   l9321 12EA                                     l9241 374C  
                                   l9233 373A                                     l8099 3A66  
                                   l6683 2A30                                     l9075 2DB6  
                                   l9067 2D9E                                     l9059 2D88  
                                   l8507 1BD2                                     l8531 1CB6  
                                   l9243 3750                                     l6781 3BF0  
                                   l6693 2A50                                     l9085 2E18  
                                   l8525 1C84                                     l9173 36E0  
                                   l9165 36CC                                     l9149 367E  
                                   l9405 13E8                                     l7901 3D3E  
                                   l9253 3770                                     l9245 3756  
                                   l9237 3742                                     l6783 3BFA  
                                   l6775 3BD4                                     l9095 2E78  
                                   l8527 1C8C                                     l9183 36FC  
                                   l9415 141C                                     l9335 12F2  
                                   l9319 12E4                                     l7911 3D50  
                                   l9271 37BE                                     l6785 3C04  
                                   l6777 3BDC                                     l6793 3C1C  
                                   l9433 1482                                     l8633 2B62  
                                   l8625 2B2A                                     l9257 377A  
                                   l6787 3C0A                                     l6779 3BE6  
                                   l9611 16A2                                     l9443 14E0  
                                   l9427 1454                                     l9355 1318  
                                   l7907 3D48                                     l9283 37D2  
                                   l9259 3792                                     l6789 3C10  
                                   l9621 16C4                                     l9525 15D4  
                                   l9509 15B4                                     l9437 149A  
                                   l9429 1472                                     l9293 1294  
                                   l8911 2FFC                                     l8495 1B32  
                                   l8487 18B8                                     l9447 14F6  
                                   l9463 1526                                     l9295 129A  
                                   l8671 2CEA                                     l8743 3C7E  
                                   l8735 3C4A                                     l9287 37DA  
                                   l8905 2FDA                                     l9633 16EA  
                                   l9561 162A                                     l9553 161A  
                                   l9545 15FC                                     l9481 1578  
                                   l9465 1528                                     l9385 1380  
                                   l9369 1324                                     l9297 12A0  
                                   l9705 1842                                     l8745 3CA6  
                                   l9721 2094                                     l8915 3000  
                                   l8843 3DE2                                     l9571 1638  
                                   l9475 154C                                     l9467 1532  
                                   l9395 13B4                                     l9299 12A6  
                                   l8933 31E6                                     l8917 3002  
                                   l9661 176C                                     l9653 173E  
                                   l9629 16E6                                     l9557 1622  
                                   l9493 1594                                     l8669 2CCA  
                                   l8863 2F08                                     l8839 3DB4  
                                   l9671 178C                                     l9575 1652  
                                   l9903 387E                                     l9743 212C  
                                   l9807 245E                                     l8857 2EF8  
                                   l9657 1754                                     l9649 171E  
                                   l9809 24A0                                     l8891 2F8E  
                                   l8875 2F32                                     l8971 3E22  
                                   l9931 0950                                     l9923 0928  
                                   l9683 17E2                                     l9907 3890  
                                   l9771 232E                                     l9763 2280  
                                   l9755 220C                                     l9819 2500  
                                   l8885 2F72                                     l9597 167A  
                                   l9765 22BA                                     l9861 262E  
                                   l9951 09BE                                     l9943 097A  
                                   l9919 0908                                     l9679 17BA  
                                   l9759 2246                                     l9847 2550  
                                   l9871 2668                                     l8897 2FBC  
                                   l9769 22F4                                     l9777 2368  
                                   l9857 261C                                     l9849 256C  
                                   l9873 26A6                                     l9785 23BE  
                                   l9971 0A14                                     l9963 09E8  
                                   l9891 381A                                     l9883 37E6  
                                   l9779 23AE                                     l9867 2654  
                                   l9949 09B8                                     l9789 23C6  
                                   l9991 0A78                                     l9983 0A3C  
                                   l9899 3850              __size_of_vscp_getMatrixInfo 0020  
                         sendCANFrame@id 0037                                     u8074 3444  
                                   u8075 3440                                     u7275 304E  
                                   u7285 306E                                     u7295 30BC  
                                   u6780 3BC0                           sendCANFrame@rv 003E  
                                   u6785 3BB6                                     u6955 2944  
                                   u6957 2946                                     u9940 1B64  
                                   u9925 19A2                                     u9950 1B8C  
                                   u9945 1B5A                                     u9955 1B82  
                                   u9974 1BAC                                     u9975 1BA6  
                       ??_ECANInitialize 0009                vscp_setManufacturerId@idx 000C  
                                   _doDM 2088                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 3700  
                                   _init 3E2C                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                    __size_of_vscp_getZone 000A  
                    i1WriteTimer0@timer0 0001                         _vscp_writeAppReg 08DC  
                            _vscp_minute 0090                              _vscp_second 0095  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 08B6                     doActionPulse@dmflags 000F  
          __size_of_vscp_doOneSecondWork 004E                        vscp_getUserID@idx 000B  
                  __size_of_vscp_setGUID 0022                         _vscp_writeStdReg 35FA  
                        _doActionDisable 3C44                              _writeEEPROM 3F8E  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 3BCE              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 002C                                    l10011 0ADC  
                                  l10003 0AA0                                    l10031 0B40  
                                  l10023 0B04                                    l10201 1090  
                                  l10105 0D02                                    l10203 10BC  
                                  l10123 0D96                                    l10051 0BA4  
                                  l10043 0B68                                    l10133 0DF4  
                                  l10109 0D32                                    l10207 10E8  
                                  l10151 0E5E                                    l10119 0D90  
                                  l10063 0BCC                                    l10241 11DE  
                                  l10233 1176                                    l10209 1112  
                                  l10161 0EBC                                    l10137 0DFA  
                                  l10081 0C40                                    l10073 0C08  
                                  l10235 11AA                                    l10147 0E58  
                                  l10091 0C9E                                    l10075 0C32  
                                  l10251 1218                                    l10261 1248  
                                  l10229 114A                                    l10165 0EC2  
                                  l10181 0F26                                    l10325 28C4  
                                  l10333 290C                                    l10405 32FC  
                                  l10271 1286                                    l10191 0FB4  
                                  l10175 0F20                                    l10095 0CA4  
                                  l10183 0F50                                    l10351 352A  
                                  l10343 34F6                                    _B0CON 000E20  
                                  l10193 0FE0                                    l10329 28FA  
                                  l10281 26B2                                    l10361 3568  
                                  l10353 3540                                    l10409 331C  
                                  l10267 1272                                    l10195 100C  
                                  l10363 3572                                    l10355 354A  
                                  l10371 35A2                                    l10451 33C4  
                                  l10197 1038                                    l10189 0F88  
                                  l10365 357C                                    l10357 3554  
                                  l10445 339E                                    l10437 336C  
                                  l10199 1064                                    l10383 35DE  
                                  l10359 355E                                    l10439 3388  
                                  l10455 33D6                                    _B1CON 000E30  
                                  l10289 26EA                                    l10377 35B8  
                                  l10369 3586                                    ?_doDM 0001  
                                  l10467 4034                                    l10387 35F0  
                                  l10397 32C8                                    _B2CON 000E40  
                                  _B3CON 000E50                                    _B4CON 000E60  
          __size_of_SendInformationEvent 006C            __size_of_vscp_getMajorVersion 0002  
                                  _B5CON 000E70               __end_of_vscp_goActiveState 40C2  
          ??_vscp_writeNicknamePermanent 000B                       writeEEPROM@address 0008  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                            i1_WriteTimer0 41F0  
                                  _EEADR 000FA9                          __end_of___lbmod 3F42  
                _vscp_handleDropNickname 3E6A                                    _BSEL0 000DF8  
                                  u10004 1C26                                    u10005 1C22  
                                  u10014 1C3E                                    u10015 1C3A  
                                  u10034 1C5E                                    u10035 1C58  
                                  u10065 3990                                    u11050 2E0E  
                                  u10234 2B3A                                    u10235 2B36  
                                  u11055 2E04                                    u11080 2E70  
                                  _T0CON 000FD5                                    u13004 26C2  
                                  u11085 2E66                                    u13005 26BE  
                                  u10394 3C5A                                    u10395 3C56  
                                  u12174 243C                                    u10735 31AA  
                                  u12175 2438                                    u10745 31D0  
                                  u13154 3506                                    u12194 24B0  
                                  u10755 31FA                                    u13155 3502  
                                  u12195 24AC                                    u12364 37F6  
                                  u12365 37F2                                    u13254 32D8  
                                  u13255 32D4                                    i1l140 0886  
                                  i1l141 08A6                                    i1l142 089A  
                                  i1l137 0860                                    i1l145 08A8  
                                  i1l139 0884                          sendCANFrame@dlc 003B  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 4234               _vscp_readNicknamePermanent 422A  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                             _vscp_getGUID 4182  
                                  doDM@i 00DD                            __CFG_WRTD$OFF 000000  
                         __CFG_EBTRB$OFF 000000                             _vscp_getZone 420C  
                     vscp_writeAppReg@rv 00CD                                    _hours 0088  
              _vscp_getRegisterPagesUsed 424C                   __size_of_vscp_getEvent 002A  
                           _vscp_setGUID 4062                                    tablat 000FF5  
                _vscp_getSubMinorVersion 4252                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 3F68  
                   _ECANSetOperationMode 4142                          __initialization 3FFC  
                           __end_of_doDM 23BA                             __end_of_main 37E0  
                           __end_of_init 3E6A                         ?_vscp_readAppReg 0001  
                _interrupt_at_low_vector 0818                           doDM@class_mask 00D2  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00CD  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 000F                                   ??_main 0052  
                                 ??_init 000E            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 000B                 ??_vscp_setManufacturerId 000C  
               _vscp_handleProtocolEvent 128A                            __activetblptr 000002  
                      __RegsToCANID@type 000B               ECANReceiveMessage@msgFlags 0011  
          doApplicationOneSecondWork@bOn 00CF                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                 __size_of_doActionPulse 01D0               ECANReceiveMessage@savedPtr 0012  
                                 _CANCON 000F6F                                   _EEDATA 000FA8  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                        __CFG_BBSIZ$2048 000000                            doDM@type_mask 00D5  
                     vscp_writeStdReg@rv 0014                            ?_init_app_ram 0001  
                                 _MDSEL0 007BBE                                   _MDSEL1 007BBF  
                                 i1l7101 085E                                   i1l7111 088A  
                                 i1l7103 0862                                   i1l7113 0894  
                                 i1l7105 086E                                   i1l7115 08A2  
                                 i1l7107 0878                                   i1l7109 0880  
                             _OpenTimer0 40C2                                   i1l7091 0838  
                                 i1l7093 083E                                   i1l7095 0842  
                                 i1l7087 0824                                   i1l7097 0852  
                                 i1l7089 082C                                   i1l7099 085A  
                        _init_app_eeprom 1D12                                   _RXB0IF 007D20  
                                 _RXB1IF 007D21                  __end_of_doActionDisable 3CB0  
                         __CFG_WDTPS$128 000000                                   _RXF1EN 006EA1  
                 ECANReceiveMessage@data 000F                   ECANReceiveMessage@mode 0016  
                 ECANReceiveMessage@temp 0017                        getVSCPFrame@pData 0022  
                      getVSCPFrame@pSize 0021                       _vscp_newNodeOnline 3EC6  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0011  
 vscp_handleProtocolEvent@page_save_1290 00DA                           getCANFrame@pid 001C  
                         __CFG_STVREN$ON 000000                                ??___lbmod 0009  
                          _vscp_getEvent 3EF0                                   _doWork 424A  
                       OpenTimer0@config 0008                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 000C                      vscp_writeAppReg@bOn 00CC  
        calculateSetFilterMask@rowfilter 003E               calculateSetFilterMask@mask 0036  
                    vscp_writeAppReg@reg 00CE               __end_of_vscp_setSegmentCRC 41BA  
                    vscp_writeAppReg@val 0051                                   clear_0 4002  
                                 clear_1 400E                            ?_sendCANFrame 0037  
           vscp_handleProtocolEvent@byte 00E8                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 0091                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 000B  
              ??_vscp_getSubMinorVersion 0008     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 000B                     ??_vscp_newNodeOnline 004C  
                        ___lbmod@divisor 0008                          doActionToggle@i 00CC  
                             __accesstop 0060                  __end_of__initialization 4014  
                        ___lbmod@counter 000A            __size_of_vscp_getMinorVersion 0002  
                        doActionStatus@i 00CC                          writeEEPROM@data 000A  
                  __size_of_getVSCPFrame 0078                       _vscp_writeRegister 401E  
              ??_interrupt_at_low_vector 0005                  __size_of_vscp_sendEvent 0026  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                          _doActionPulse 2B24              __end_of_vscp_check_pstorage 3FFC  
                __size_of_vscp_setUserID 0018                          ??i1_WriteTimer0 0003  
                    ?_vscp_writeRegister 00CF                           ??_sendCANFrame 003E  
                             _doActionOn 26AC                  ?_calculateSetFilterMask 0001  
          calculateSetFilterMask@lastOID 0035               __end_of_vscp_getFamilyCode 422A  
                          ?__RegsToCANID 0008              __size_of_ECANReceiveMessage 020E  
                     sendVSCPFrame@pData 0045               __end_of_vscp_getFamilyType 4220  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 00CF  
        __size_of_vscp_setManufacturerId 0022                 __end_of_vscp_writeAppReg 128A  
                 getVSCPFrame@pvscpclass 0027                  __end_of_init_app_eeprom 2088  
            __end_of_vscp_setControlByte 41A8                 __end_of_vscp_writeStdReg 3700  
          calculateSetFilterMask@rowmask 0031                       __RegsToCANID@Value 000E  
                   ??_vscp_writeRegister 0052          __end_of_vscp_handleDropNickname 3E9A  
                           _getVSCPFrame 3B56                               __pbssBANK0 0060  
                            ?_OpenTimer0 0001               __end_of_vscp_getBufferSize 4250  
                       ?_doActionDisable 000B                    vscp_writeRegister@reg 00D0  
                 ??_ECANSetOperationMode 0008       __size_of_vscp_getRegisterPagesUsed 0002  
                           ?_writeEEPROM 0008                           ?_doActionPulse 000B  
        __end_of_vscp_getSubMinorVersion 4254                 ECANSetOperationMode@mode 0008  
                                _B0RXFUL 007107                                  _B1RXFUL 007187  
                   __ECANRxFilterHitInfo 0054                                  _B2RXFUL 007207  
                                _B3RXFUL 007287                                  _B4RXFUL 007307  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 000B  
                                _B5RXFUL 007387           __end_of_calculateSetFilterMask 1D12  
                __size_of_doActionToggle 0120                         WriteTimer0@timer 000A  
                __size_of_doActionStatus 010C                                  _ECANCON 000F77  
                          ??_WriteTimer0 000A                           ??__RegsToCANID 000C  
                  sendVSCPFrame@priority 0043                                  _BRGCON1 000F70  
                                _BRGCON2 000F71                                  _BRGCON3 000F72  
         SendInformationEvent@eventClass 00C5                      vscp_writeStdReg@reg 0015  
           __end_of_vscp_doOneSecondWork 3D6A              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0041                            ??_doActionOff 00C7  
        __end_of_interrupt_at_low_vector 08B6                 vscp_readStdReg@code_1263 0015  
                      sendCANFrame@pdata 003C                    _vscp_handleProbeState 389A  
                                _RXB0CON 000F60                                  _RXB1CON 000F50  
                                _RXB0FUL 007B07                         __ECANPointBuffer 3BCE  
             __end_of_vscp_getMatrixInfo 40A4                                  _TXB0CON 000F40  
                                _TXB1CON 000F30                                  _TXB2CON 000F20  
                                _RXFCON0 000DD4                                  _RXFCON1 000DD5  
                  doActionStatus@dmflags 00C9                       _vscp_goActiveState 40A4  
                 __size_of_sendVSCPFrame 00B6             __end_of_SendInformationEvent 3D1C  
           __end_of_vscp_getMajorVersion 4258                       __size_of_vscp_init 0044  
                SendInformationEvent@idx 0050                               _readEEPROM 41DE  
                 _vscp_getManufacturerId 415A                   _vscp_setManufacturerId 4040  
                        _ECANSendMessage 2EA2                      ?_vscp_goActiveState 0001  
                                __Hparam 0000                          ??_vscp_getEvent 002C  
                                __Lparam 0000                       _vscp_node_substate 0093  
             __end_of_vscp_getSegmentCRC 423E               ??_vscp_handleProtocolEvent 00D1  
                          ??_getCANFrame 001C                             doActionOff@i 00CB  
      __end_of_vscp_getRegisterPagesUsed 424E                 __size_of_vscp_getMDF_URL 0018  
                                ___lbmod 3F1A                          getCANFrame@pdlc 001A  
                vscp_writeAppReg@val_678 00CB                                _FIFOEMPTY 007BA7  
                        __size_of_doWork 0002                             __psmallconst 08BA  
                   __end_of_init_app_ram 34EE                       _vscp_sendHeartBeat 3F42  
                                __pcinit 3FFC                           _vscp_deviceURL 08BA  
                            ?_doActionOn 0051                                  __ramtop 0600  
                    __size_of_OpenTimer0 001E                                  __ptext0 3700  
                                __ptext1 424A                                  __ptext2 23BA  
                                __ptext3 3D1C                                  __ptext4 3F42  
                                __ptext5 4202                                  __ptext6 420C  
                                __ptext7 4246                                  __ptext8 2088  
                                __ptext9 32C0                           _vscp_getUserID 416E  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 004C  
                       doActionDisable@i 0010                    vscp_writeStdReg@value 000F  
                    ?_vscp_sendHeartBeat 00C5                 ??_vscp_handleSetNickname 000C  
                                _minutes 0089                                  _seconds 008B  
                    __end_of_WriteTimer0 41DE                         ?_init_app_eeprom 0001  
                      vscp_readAppReg@rv 000B                       vscp_getMDF_URL@idx 0009  
          vscp_handleProtocolEvent@bytes 00DE                     end_of_initialization 4014  
                    __end_of_doActionOff 389A             __end_of_vscp_handleHeartbeat 3E2C  
               __size_of_vscp_getSubzone 000A                            __Lmediumconst 0000  
                   __end_of_sendCANFrame 3DEE                vscp_handleProtocolEvent@i 00EA  
              vscp_handleProtocolEvent@j 00EB                vscp_handleProtocolEvent@k 00E5  
                        ??_doActionPulse 000C                   doActionDisable@dmflags 000E  
                   ??_vscp_sendHeartBeat 004C                           _vscp_sendEvent 3F68  
                      ECANSendMessage@id 0012                        ECANSendMessage@pb 001B  
                                postdec2 000FDD                  __size_of_ECANInitialize 0096  
                         _vscp_setUserID 40FA                                  postinc0 000FEE  
                                postinc2 000FDE                   __end_of_vscp_deviceURL 08DA  
    __end_of_vscp_writeNicknamePermanent 41CC              _vscp_writeNicknamePermanent 41BA  
                     __ECANPointBuffer@b 000B                            _sendVSCPFrame 3954  
                 __end_of_vscp_getUserID 4182             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0078CB                        __end_of_vscp_init 3DAE  
                         _vscp_probe_cnt 0094                                _PORTCbits 000F82  
                    __end_of_getCANFrame 3EC6            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                 __size_of_vscp_readAppReg 00B6  
                       ___lbmod@dividend 0009                         doActionPulse@arg 000B  
                         _vscp_statuscnt 0058                 __size_of_vscp_readStdReg 01AE  
                       doActionPulse@val 0010                       _vscp_setSegmentCRC 41A8  
                      readEEPROM@address 0008               vscp_handleProtocolEvent@cb 00E3  
                __end_of_ECANSendMessage 300C                        vscp_readStdReg@rv 001B  
                            ___lbmod@rem 000B                            ?__CANIDToRegs 0008  
                            doDM@dmflags 00DC                     __end_of__RegsToCANID 3170  
                            ?_readEEPROM 0008                      __size_of_doActionOn 026A  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 3F8E  
                             _vscp_error 4246                     _vscp_doOneSecondWork 3D1C  
                     i1WriteTimer0@timer 0003                               _vscp_timer 0086  
                 __end_of_vscp_setUserID 4112                   vscp_sendHeartBeat@zone 004C  
                         ?_sendVSCPFrame 003F              doApplicationOneSecondWork@i 00D1  
                         _doActionToggle 32C0                     __size_of_writeEEPROM 0026  
                         _doActionStatus 34EE                          ?_vscp_getUserID 0001  
                         __end_of_doWork 424C             __end_of_vscp_getMinorVersion 4256  
                            _WriteTimer0 41CC                     _SendInformationEvent 3CB0  
                   _vscp_getMajorVersion 4256                     ??_vscp_setSegmentCRC 000B  
                      ??_vscp_getMDF_URL 0008            ??_vscp_getBootLoaderAlgorithm 0008  
                      ?_vscp_writeAppReg 0051                      start_initialization 3FFC  
                            _doActionOff 37E0          __size_of_vscp_handleSetNickname 0024  
                     ??_vscp_writeAppReg 00C7                        ?_vscp_writeStdReg 000F  
                 _relay_protection_timer 0060                      __CFG_BOREN$BOACTIVE 000000  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 0008  
                     ??_vscp_writeStdReg 0010                       _vscp_getFamilyCode 4220  
                         ??__CANIDToRegs 000F                       _vscp_getFamilyType 4216  
                       doDM@class_filter 00D0                      sendVSCPFrame@nodeid 0042  
                      _vscp_readRegister 40E0                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 00E2                    ?_vscp_doOneSecondWork 0001  
                  ECANReceiveMessage@ptr 0018                      ?_vscp_getFamilyCode 0008  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 18A6  
                              _doDM$2150 00DA                                _doDM$2151 00DB  
                        ?_vscp_setUserID 000B                                _doDM$2146 00D6  
                              _doDM$2147 00D7                                _doDM$2148 00D8  
                              _doDM$2149 00D9                      ?_vscp_getFamilyType 0008  
                  __size_of_init_app_ram 010E                 ?_vscp_handleDropNickname 0001  
                 __end_of_doActionToggle 33E0                        ??_vscp_getSubzone 000B  
                 __end_of_doActionStatus 35FA                 __end_of__ECANPointBuffer 3C44  
                      __CANIDToRegs@type 000E                              _getCANFrame 3E9A  
                               ??_doWork 0008                       _vscp_getBufferSize 424E  
            vscp_handleProtocolEvent@len 00DF                           doActionOff@arg 0051  
            vscp_handleProtocolEvent@pos 00DD               __end_of_ECANReceiveMessage 2B24  
                         doActionOff@val 00CA                      ??_vscp_readRegister 001D  
         __size_of_vscp_goBootloaderMode 0018                    ?_SendInformationEvent 00C5  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 4202  
          __end_of_vscp_goBootloaderMode 4142                     _vscp_handleHeartbeat 3DEE  
                     __end_of_OpenTimer0 40E0      __size_of_doApplicationOneSecondWork 02F2  
                    ?_vscp_getBufferSize 0001                      __size_of_readEEPROM 0012  
                         doActionPulse@i 0011             __size_of_vscp_check_pstorage 0024  
                   ??_vscp_getFamilyCode 000C                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0052                     ??_vscp_getFamilyType 000C  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 00B1  
                       _vscp_alarmstatus 008C                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 0040                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 000B                            ?_vscp_setGUID 000B  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0012  
                      ??_vscp_readAppReg 000B                        sendVSCPFrame@size 0044  
              __end_of_vscp_readRegister 40FA                        _relay_pulse_flags 008A  
                           _init_app_ram 33E0                        _relay_pulse_timer 0070  
           __size_of_vscp_setControlByte 0012                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 000C                     ??_vscp_getBufferSize 0008  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 4084  
                 _vscp_handleSetNickname 3FB4            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 00B1                          ?_doActionToggle 0051  
                         _ECANInitialize 3AC0                          ?_doActionStatus 0051  
               __size_of_doActionDisable 006C                                 ?___lbmod 0008  
                    ?_vscp_getMatrixInfo 0001                  calculateSetFilterMask@i 0043  
                calculateSetFilterMask@j 0042                          vscp_getGUID@idx 000B  
                            __pintcodelo 0818                             ??_doActionOn 00C7  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1280 00E1  
                vscp_readStdReg@idx_1264 001A               vscp_setManufacturerId@data 000B  
                           _sendCANFrame 3DAE                              __smallconst 08BA  
                      WriteTimer0@timer0 0008                       _vscp_getSegmentCRC 4234  
                         ??_vscp_getGUID 000B                           ??_vscp_getZone 000B  
                            doActionOn@i 00CC           __end_of_vscp_getManufacturerId 416E  
         __end_of_vscp_setManufacturerId 4062                    __size_of__RegsToCANID 0164  
       vscp_handleProtocolEvent@pos_1279 00E0                          doDM@type_filter 00D4  
                         ??_vscp_setGUID 000C                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 0008                         _vscp_configtimer 0084  
                     doActionDisable@arg 000B                       doActionDisable@val 000F  
        SendInformationEvent@eventTypeId 00C6                   ??_vscp_doOneSecondWork 004D  
                 sendVSCPFrame@vscpclass 003F                                 _LATBbits 000F8A  
                   _vscp_getMinorVersion 4254                                 _LATCbits 000F8B  
                              _sendTimer 0055                       __end_of_doActionOn 2916  
                 __end_of_ECANInitialize 3B56                                 _PIR2bits 000FA1  
                               i1u790_20 0880                                 i1u790_21 087E  
                               i1u791_20 0894                                 i1u791_21 0892  
                               i1u792_20 08A2                                 i1u792_21 08A0  
                               i1u786_20 082C                                 i1u786_21 082A  
                               i1u787_20 085A                                 i1u787_21 0858  
                               i1u788_20 086E                                 i1u788_21 086C  
                               i1u789_20 0878                                 i1u789_21 0876  
                       ECANSendMessage@i 0034                         ECANSendMessage@j 002F  
                  __end_of_vscp_getEvent 3F1A                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 002C  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 000B                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                   ??_SendInformationEvent 004B  
                               _RXM1SIDH 000F1C                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000F1D               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000B  
                   __end_of__CANIDToRegs 32C0                             __RegsToCANID 300C  
                     _vscp_probe_address 0057                       doActionOff@dmflags 00C9  
            __size_of_vscp_goActiveState 001E                      getVSCPFrame@pNodeId 001F  
                              _vscp_init 3D6A                                _vscp_imsg 0096  
                              _vscp_hour 008E                                _vscp_omsg 00A4  
                       vscp_setGUID@data 000B        __size_of_vscp_handleProtocolEvent 061C  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
               SendInformationEvent@data 004D     __size_of_vscp_writeNicknamePermanent 0012  
     __end_of_doApplicationOneSecondWork 26AC               _doApplicationOneSecondWork 23BA  
                       _vscp_page_select 0052               __size_of_vscp_readRegister 001A  
                      _measurement_clock 0080                    ?_vscp_getMinorVersion 0001  
                           ??_readEEPROM 000A                 __size_of_init_app_eeprom 0376  
           __end_of_vscp_restoreDefaults 4246                               _EECON1bits 000FA6  
                        ?_ECANInitialize 0001                 ??_calculateSetFilterMask 0012  
                               __Hrparam 0000                     ECANReceiveMessage@id 0014  
            __size_of_vscp_sendHeartBeat 0026                         ??_vscp_getUserID 000B  
                        _vscp_getMDF_URL 4112                                 __Lrparam 0000  
                  __end_of_doActionPulse 2CF4                         __CANIDToRegs@val 000A  
                       __CANIDToRegs@ptr 0008                            doActionOn@arg 0051  
                          doActionOn@val 00CB                         _vscp_initledfunc 0056  
                       __size_of___lbmod 0028                   ??_vscp_handleHeartbeat 000C  
                       getCANFrame@flags 001D                             ?_WriteTimer0 0008  
                       getCANFrame@pdata 001B                        ??_doActionDisable 000C  
             vscp_writeAppReg@bInfoEvent 00CA                       __end_of_readEEPROM 41F0  
                             ?_vscp_init 0001                             ?_doActionOff 0051  
                               __ptext10 3C44                                 __ptext11 34EE  
                               __ptext20 1D12                                 __ptext12 2B24  
                               __ptext21 40FA                                 __ptext13 26AC  
                               __ptext30 4216                                 __ptext22 4040  
                               __ptext14 37E0                                 __ptext31 4220  
                               __ptext23 4062                                 __ptext15 128A  
                               __ptext40 4256                                 __ptext32 424E  
                               __ptext24 08DC                                 __ptext16 3F1A  
                               __ptext41 3EC6                                 __ptext33 4250  
                               __ptext25 18A6                                 __ptext17 401E  
                               __ptext50 40A4                                 __ptext42 3E6A  
                               __ptext34 415A                                 __ptext26 3CB0  
                               __ptext18 35FA                                 __ptext51 3F68  
                               __ptext43 3D6A                                 __ptext35 416E  
                               __ptext27 40E0                                 __ptext19 423E  
                               __ptext60 300C                                 __ptext52 3954  
                               __ptext44 422A                                 __ptext36 4112  
                               __ptext28 2CF4                                 __ptext61 3BCE  
                               __ptext53 3DAE                                 __ptext45 3FB4  
                               __ptext37 4182                                 __ptext29 424C  
                               __ptext70 4142                                 __ptext62 3FD8  
                               __ptext54 2EA2                                 __ptext46 3DEE  
                               __ptext38 4252                                 __ptext71 40C2  
                               __ptext63 4196                                 __ptext55 3170  
                               __ptext47 4084                                 __ptext39 4254  
                               __ptext72 33E0                                 __ptext64 41A8  
                               __ptext56 3EF0                                 __ptext48 412A  
                               __ptext73 41CC                                 __ptext65 4234  
                               __ptext57 3B56                                 __ptext49 389A  
                               __ptext74 3A0A                                 __ptext66 41BA  
                               __ptext58 3E9A                                 __ptext75 41DE  
                               __ptext67 3F8E                                 __ptext59 2916  
                               __ptext68 3E2C                                 __ptext77 41F0  
                               __ptext69 3AC0           vscp_goBootloaderMode@algorithm 000B  
              vscp_sendHeartBeat@subzone 00C5                            ?_getVSCPFrame 001E  
                       ??_vscp_sendEvent 004B                          _vscp_getSubzone 4202  
           calculateSetFilterMask@filter 003A                         ??_vscp_setUserID 000C  
                          __size_of_doDM 0332                            __size_of_main 00E0  
                          __size_of_init 003E                __size_of_vscp_writeAppReg 09AE  
                    _vscp_check_pstorage 3FD8                            init_app_ram@i 000D  
         vscp_handleProtocolEvent@i_1281 00E9           vscp_handleProtocolEvent@i_1278 00E7  
         vscp_handleProtocolEvent@i_1289 00E4                     __end_of_vscp_getGUID 4196  
                          ??_writeEEPROM 000B                __size_of_vscp_writeStdReg 0106  
                    ECANSendMessage@data 0016                 ECANSendMessage@tempBSEL0 0030  
                           ?_getCANFrame 001A                      ECANSendMessage@mode 002D  
                   __end_of_vscp_getZone 4216                      ECANSendMessage@temp 0033  
                      ?__ECANPointBuffer 0008                        doActionOn@dmflags 00CA  
                      vscp_setUserID@idx 000C                     __end_of_vscp_setGUID 4084  
                     vscp_readAppReg@reg 000C                       ??__ECANPointBuffer 000B  
         vscp_handleProtocolEvent@offset 00DC                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 000C                         init_app_eeprom@i 000D  
                       init_app_eeprom@j 000E                      _vscp_setControlByte 4196  
            __size_of_vscp_setSegmentCRC 0012                          _vscp_readAppReg 3A0A  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000B                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 008D                          _vscp_readStdReg 2CF4  
           vscp_handleDropNickname@bytes 000C               __end_of_vscp_newNodeOnline 3EF0  
                     _ECANReceiveMessage 2916                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 008F                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 412A  
                   ?_vscp_setControlByte 0001                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001                         ??_doActionToggle 00C7  
       __size_of_vscp_getSubMinorVersion 0002                         ??_doActionStatus 00C7  
                        _vscp_node_state 0092                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019                      vscp_getMatrixInfo@i 0008  
        __size_of_calculateSetFilterMask 046C                  vscp_setControlByte@ctrl 000B  
                     ECANSendMessage@ptr 0035                        ??_init_app_eeprom 000B  
                  __size_of__CANIDToRegs 0150                           readEEPROM@data 000A  
    __size_of_vscp_readNicknamePermanent 000A      __end_of_vscp_getBootLoaderAlgorithm 4252  
            _vscp_getBootLoaderAlgorithm 4250         __size_of_interrupt_at_low_vector 009E  
                 ECANSendMessage@dataLen 0018                      __end_of_writeEEPROM 3FB4  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 000C                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 412A             __end_of_ECANSetOperationMode 415A  
                   _vscp_restoreDefaults 423E              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000B                  __end_of_vscp_getSubzone 420C  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 4040                       __end_of_vscp_error 424A  
                 ECANSendMessage@tempPtr 0031           __end_of_vscp_handleSetNickname 3FD8  
     vscp_handleProtocolEvent@bytes_1286 00E6                    ??_vscp_setControlByte 000B  
                   vscp_readRegister@reg 001D             ??_doApplicationOneSecondWork 00CC  
                           __CANIDToRegs 3170                   __size_ofi1_WriteTimer0 0012  
      vscp_handleProtocolEvent@page_save 00D8              __size_of_vscp_getBufferSize 0002  
      doApplicationOneSecondWork@ctrlreg 00D0                 __size_of_ECANSendMessage 016A  
                      doActionToggle@bOn 00CB                        doActionToggle@arg 0051  
