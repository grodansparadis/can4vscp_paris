

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Nov 10 22:15:32 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	text76,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    89                           	psect	text78,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    92  0000                     
    93                           	psect	smallconst
    94  0008BC                     __psmallconst:
    95                           	opt stack 0
    96  0008BC                     _vscp_deviceURL:
    97                           	opt stack 0
    98  0008BC  77                 	db	119
    99  0008BD  77                 	db	119
   100  0008BE  77                 	db	119
   101  0008BF  2E                 	db	46
   102  0008C0  65                 	db	101
   103  0008C1  75                 	db	117
   104  0008C2  72                 	db	114
   105  0008C3  6F                 	db	111
   106  0008C4  73                 	db	115
   107  0008C5  6F                 	db	111
   108  0008C6  75                 	db	117
   109  0008C7  72                 	db	114
   110  0008C8  63                 	db	99
   111  0008C9  65                 	db	101
   112  0008CA  2E                 	db	46
   113  0008CB  73                 	db	115
   114  0008CC  65                 	db	101
   115  0008CD  2F                 	db	47
   116  0008CE  70                 	db	112
   117  0008CF  61                 	db	97
   118  0008D0  72                 	db	114
   119  0008D1  69                 	db	105
   120  0008D2  73                 	db	115
   121  0008D3  5F                 	db	95
   122  0008D4  30                 	db	48
   123  0008D5  31                 	db	49
   124  0008D6  30                 	db	48
   125  0008D7  2E                 	db	46
   126  0008D8  78                 	db	120
   127  0008D9  6D                 	db	109
   128  0008DA  6C                 	db	108
   129  0008DB  00                 	db	0
   130  0008DC                     __end_of_vscp_deviceURL:
   131                           	opt stack 0
   132  0000                     _BRGCON1	set	3952
   133  0000                     _BRGCON2	set	3953
   134  0000                     _BRGCON3	set	3954
   135  0000                     _BSEL0	set	3576
   136  0000                     _CANCON	set	3951
   137  0000                     _CIOCON	set	3955
   138  0000                     _ECANCON	set	3959
   139  0000                     _EEADR	set	4009
   140  0000                     _EECON1bits	set	4006
   141  0000                     _EECON2	set	4007
   142  0000                     _EEDATA	set	4008
   143  0000                     _INTCONbits	set	4082
   144  0000                     _LATBbits	set	3978
   145  0000                     _LATCbits	set	3979
   146  0000                     _MSEL0	set	3568
   147  0000                     _MSEL1	set	3569
   148  0000                     _MSEL2	set	3570
   149  0000                     _PORTA	set	3968
   150  0000                     _PORTB	set	3969
   151  0000                     _PORTC	set	3970
   152  0000                     _PORTCbits	set	3970
   153  0000                     _RXB1CONbits	set	3920
   154  0000                     _RXF0EIDH	set	3842
   155  0000                     _RXF0EIDL	set	3843
   156  0000                     _RXF0SIDH	set	3840
   157  0000                     _RXF0SIDL	set	3841
   158  0000                     _RXF1EIDH	set	3846
   159  0000                     _RXF1EIDL	set	3847
   160  0000                     _RXF1SIDH	set	3844
   161  0000                     _RXF1SIDL	set	3845
   162  0000                     _RXFBCON0	set	3552
   163  0000                     _RXFBCON1	set	3553
   164  0000                     _RXFBCON2	set	3554
   165  0000                     _RXFBCON3	set	3555
   166  0000                     _RXFBCON4	set	3556
   167  0000                     _RXFBCON5	set	3557
   168  0000                     _RXFBCON6	set	3558
   169  0000                     _RXFBCON7	set	3559
   170  0000                     _RXFCON0	set	3540
   171  0000                     _RXFCON1	set	3541
   172  0000                     _RXM0EIDH	set	3866
   173  0000                     _RXM0EIDL	set	3867
   174  0000                     _RXM0SIDH	set	3864
   175  0000                     _RXM0SIDL	set	3865
   176  0000                     _RXM1EIDH	set	3870
   177  0000                     _RXM1EIDL	set	3871
   178  0000                     _RXM1SIDH	set	3868
   179  0000                     _RXM1SIDL	set	3869
   180  0000                     _T0CON	set	4053
   181  0000                     _T0CONbits	set	4053
   182  0000                     _TMR0H	set	4055
   183  0000                     _TMR0L	set	4054
   184  0000                     _TRISA	set	3986
   185  0000                     _TRISB	set	3987
   186  0000                     _TRISC	set	3988
   187  0000                     _B0RXFUL	set	28935
   188  0000                     _B0TXEN	set	28610
   189  0000                     _B1RXFUL	set	29063
   190  0000                     _B1TXEN	set	28611
   191  0000                     _B2RXFUL	set	29191
   192  0000                     _B2TXEN	set	28612
   193  0000                     _B3RXFUL	set	29319
   194  0000                     _B3TXEN	set	28613
   195  0000                     _B4RXFUL	set	29447
   196  0000                     _B4TXEN	set	28614
   197  0000                     _B5RXFUL	set	29575
   198  0000                     _B5TXEN	set	28615
   199  0000                     _FIFOEMPTY	set	31655
   200  0000                     _IRXIF	set	32039
   201  0000                     _MDSEL0	set	31678
   202  0000                     _MDSEL1	set	31679
   203  0000                     _RXB0FILHIT0	set	31488
   204  0000                     _RXB0FUL	set	31495
   205  0000                     _RXB0IF	set	32032
   206  0000                     _RXB0OVFL	set	31655
   207  0000                     _RXB1IF	set	32033
   208  0000                     _RXB1OVFL	set	31654
   209  0000                     _RXM0EXIDM	set	30923
   210  0000                     _RXM1EXIDEN	set	30955
   211  0000                     _B0CON	set	3616
   212  0000                     _B1CON	set	3632
   213  0000                     _B2CON	set	3648
   214  0000                     _B3CON	set	3664
   215  0000                     _B4CON	set	3680
   216  0000                     _B5CON	set	3696
   217  0000                     _RXB0CON	set	3936
   218  0000                     _RXB1CON	set	3920
   219  0000                     _TXB0CON	set	3904
   220  0000                     _TXB1CON	set	3888
   221  0000                     _TXB2CON	set	3872
   222                           
   223                           ; #config settings
   224  0008DC  00                 	db	0	; dummy byte at the end
   225  0000                     
   226                           	psect	cinit
   227  003E64                     __pcinit:
   228                           	opt stack 0
   229  003E64                     start_initialization:
   230                           	opt stack 0
   231  003E64                     __initialization:
   232                           	opt stack 0
   233                           
   234                           ; Clear objects allocated to BANK0 (81 bytes)
   235  003E64  EE00  F060         	lfsr	0,__pbssBANK0
   236  003E68  0E51               	movlw	81
   237  003E6A                     clear_0:
   238  003E6A  6AEE               	clrf	postinc0,c
   239  003E6C  06E8               	decf	wreg,f,c
   240  003E6E  E1FD               	bnz	clear_0
   241                           
   242                           ; Clear objects allocated to COMRAM (7 bytes)
   243  003E70  EE00  F052         	lfsr	0,__pbssCOMRAM
   244  003E74  0E07               	movlw	7
   245  003E76                     clear_1:
   246  003E76  6AEE               	clrf	postinc0,c
   247  003E78  06E8               	decf	wreg,f,c
   248  003E7A  E1FD               	bnz	clear_1
   249  003E7C                     end_of_initialization:
   250                           	opt stack 0
   251  003E7C                     __end_of__initialization:
   252                           	opt stack 0
   253  003E7C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   254  003E7E  6EF8               	movwf	tblptru,c
   255  003E80  0100               	movlb	0
   256  003E82  EFD4  F01A         	goto	_main	;jump to C main() function
   257                           tblptru	equ	0xFF8
   258                           postinc0	equ	0xFEE
   259                           wreg	equ	0xFE8
   260                           
   261                           	psect	bssCOMRAM
   262  000052                     __pbssCOMRAM:
   263                           	opt stack 0
   264  000052                     _vscp_page_select:
   265                           	opt stack 0
   266  000052                     	ds	2
   267  000054                     __ECANRxFilterHitInfo:
   268                           	opt stack 0
   269  000054                     	ds	1
   270  000055                     _vscp_alarmstatus:
   271                           	opt stack 0
   272  000055                     	ds	1
   273  000056                     _vscp_initledfunc:
   274                           	opt stack 0
   275  000056                     	ds	1
   276  000057                     _vscp_probe_address:
   277                           	opt stack 0
   278  000057                     	ds	1
   279  000058                     _vscp_statuscnt:
   280                           	opt stack 0
   281  000058                     	ds	1
   282                           tblptru	equ	0xFF8
   283                           postinc0	equ	0xFEE
   284                           wreg	equ	0xFE8
   285                           
   286                           	psect	bssBANK0
   287  000060                     __pbssBANK0:
   288                           	opt stack 0
   289  000060                     _relay_protection_timer:
   290                           	opt stack 0
   291  000060                     	ds	16
   292  000070                     _relay_pulse_timer:
   293                           	opt stack 0
   294  000070                     	ds	16
   295  000080                     _measurement_clock:
   296                           	opt stack 0
   297  000080                     	ds	4
   298  000084                     _vscp_configtimer:
   299                           	opt stack 0
   300  000084                     	ds	2
   301  000086                     _vscp_timer:
   302                           	opt stack 0
   303  000086                     	ds	2
   304  000088                     _hours:
   305                           	opt stack 0
   306  000088                     	ds	1
   307  000089                     _minutes:
   308                           	opt stack 0
   309  000089                     	ds	1
   310  00008A                     _relay_pulse_flags:
   311                           	opt stack 0
   312  00008A                     	ds	1
   313  00008B                     _seconds:
   314                           	opt stack 0
   315  00008B                     	ds	1
   316  00008C                     _sendTimer:
   317                           	opt stack 0
   318  00008C                     	ds	1
   319  00008D                     _vscp_guid_reset:
   320                           	opt stack 0
   321  00008D                     	ds	1
   322  00008E                     _vscp_hour:
   323                           	opt stack 0
   324  00008E                     	ds	1
   325  00008F                     _vscp_initbtncnt:
   326                           	opt stack 0
   327  00008F                     	ds	1
   328  000090                     _vscp_minute:
   329                           	opt stack 0
   330  000090                     	ds	1
   331  000091                     _vscp_nickname:
   332                           	opt stack 0
   333  000091                     	ds	1
   334  000092                     _vscp_node_state:
   335                           	opt stack 0
   336  000092                     	ds	1
   337  000093                     _vscp_node_substate:
   338                           	opt stack 0
   339  000093                     	ds	1
   340  000094                     _vscp_probe_cnt:
   341                           	opt stack 0
   342  000094                     	ds	1
   343  000095                     _vscp_second:
   344                           	opt stack 0
   345  000095                     	ds	1
   346  000096                     _vscp_imsg:
   347                           	opt stack 0
   348  000096                     	ds	14
   349  0000A4                     _vscp_omsg:
   350                           	opt stack 0
   351  0000A4                     	ds	13
   352                           tblptru	equ	0xFF8
   353                           postinc0	equ	0xFEE
   354                           wreg	equ	0xFE8
   355                           
   356                           	psect	cstackBANK0
   357  0000B1                     __pcstackBANK0:
   358                           	opt stack 0
   359  0000B1                     ??_sendVSCPFrame:
   360                           
   361                           ; 0 bytes @ 0x0
   362  0000B1                     	ds	20
   363  0000C5                     ?_SendInformationEvent:
   364                           	opt stack 0
   365  0000C5                     ?_vscp_sendHeartBeat:
   366                           	opt stack 0
   367  0000C5                     SendInformationEvent@eventClass:
   368                           	opt stack 0
   369  0000C5                     vscp_sendHeartBeat@subzone:
   370                           	opt stack 0
   371                           
   372                           ; 1 bytes @ 0x14
   373  0000C5                     	ds	1
   374  0000C6                     SendInformationEvent@eventTypeId:
   375                           	opt stack 0
   376                           
   377                           ; 1 bytes @ 0x15
   378  0000C6                     	ds	1
   379  0000C7                     ??_doActionOff:
   380  0000C7                     ??_doActionOn:
   381  0000C7                     ??_doActionStatus:
   382  0000C7                     ??_doActionToggle:
   383  0000C7                     ??_vscp_writeAppReg:
   384                           
   385                           ; 0 bytes @ 0x16
   386  0000C7                     	ds	2
   387  0000C9                     doActionOff@dmflags:
   388                           	opt stack 0
   389  0000C9                     doActionStatus@dmflags:
   390                           	opt stack 0
   391  0000C9                     doActionToggle@dmflags:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x18
   395  0000C9                     	ds	1
   396  0000CA                     vscp_writeAppReg@bInfoEvent:
   397                           	opt stack 0
   398  0000CA                     doActionOn@dmflags:
   399                           	opt stack 0
   400  0000CA                     doActionOff@val:
   401                           	opt stack 0
   402  0000CA                     doActionStatus@bOn:
   403                           	opt stack 0
   404  0000CA                     doActionToggle@val:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0x19
   408  0000CA                     	ds	1
   409  0000CB                     vscp_writeAppReg@val_660:
   410                           	opt stack 0
   411  0000CB                     doActionOn@val:
   412                           	opt stack 0
   413  0000CB                     doActionOff@i:
   414                           	opt stack 0
   415  0000CB                     doActionStatus@val:
   416                           	opt stack 0
   417  0000CB                     doActionToggle@bOn:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0x1A
   421  0000CB                     	ds	1
   422  0000CC                     ??_doApplicationOneSecondWork:
   423  0000CC                     vscp_writeAppReg@rv:
   424                           	opt stack 0
   425  0000CC                     doActionOn@i:
   426                           	opt stack 0
   427  0000CC                     doActionStatus@i:
   428                           	opt stack 0
   429  0000CC                     doActionToggle@i:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x1B
   433  0000CC                     	ds	1
   434  0000CD                     ??_doDM:
   435  0000CD                     vscp_writeAppReg@bOn:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x1C
   439  0000CD                     	ds	1
   440  0000CE                     vscp_writeAppReg@reg:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x1D
   444  0000CE                     	ds	1
   445  0000CF                     ?_vscp_writeRegister:
   446                           	opt stack 0
   447  0000CF                     doApplicationOneSecondWork@bOn:
   448                           	opt stack 0
   449  0000CF                     vscp_writeRegister@value:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x1E
   453  0000CF                     	ds	1
   454  0000D0                     doApplicationOneSecondWork@ctrlreg:
   455                           	opt stack 0
   456  0000D0                     vscp_writeRegister@reg:
   457                           	opt stack 0
   458  0000D0                     doDM@class_filter:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x1F
   462  0000D0                     	ds	1
   463  0000D1                     ??_vscp_handleProtocolEvent:
   464  0000D1                     doApplicationOneSecondWork@i:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0x20
   468  0000D1                     	ds	1
   469  0000D2                     doDM@class_mask:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x21
   473  0000D2                     	ds	2
   474  0000D4                     doDM@type_filter:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x23
   478  0000D4                     	ds	1
   479  0000D5                     doDM@type_mask:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x24
   483  0000D5                     	ds	1
   484  0000D6                     _doDM$2133:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x25
   488  0000D6                     	ds	1
   489  0000D7                     _doDM$2134:
   490                           	opt stack 0
   491                           
   492                           ; 1 bytes @ 0x26
   493  0000D7                     	ds	1
   494  0000D8                     _doDM$2135:
   495                           	opt stack 0
   496  0000D8                     vscp_handleProtocolEvent@page_save:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x27
   500  0000D8                     	ds	1
   501  0000D9                     _doDM$2136:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x28
   505  0000D9                     	ds	1
   506  0000DA                     _doDM$2137:
   507                           	opt stack 0
   508  0000DA                     vscp_handleProtocolEvent@page_save_1275:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x29
   512  0000DA                     	ds	1
   513  0000DB                     _doDM$2138:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x2A
   517  0000DB                     	ds	1
   518  0000DC                     doDM@dmflags:
   519                           	opt stack 0
   520  0000DC                     vscp_handleProtocolEvent@offset:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x2B
   524  0000DC                     	ds	1
   525  0000DD                     doDM@i:
   526                           	opt stack 0
   527  0000DD                     vscp_handleProtocolEvent@pos:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0x2C
   531  0000DD                     	ds	1
   532  0000DE                     vscp_handleProtocolEvent@bytes:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x2D
   536  0000DE                     	ds	1
   537  0000DF                     vscp_handleProtocolEvent@len:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0x2E
   541  0000DF                     	ds	1
   542  0000E0                     vscp_handleProtocolEvent@pos_1264:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0x2F
   546  0000E0                     	ds	1
   547  0000E1                     vscp_handleProtocolEvent@len_1265:
   548                           	opt stack 0
   549                           
   550                           ; 1 bytes @ 0x30
   551  0000E1                     	ds	1
   552  0000E2                     vscp_handleProtocolEvent@bytes_this_time:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x31
   556  0000E2                     	ds	1
   557  0000E3                     vscp_handleProtocolEvent@cb:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x32
   561  0000E3                     	ds	1
   562  0000E4                     vscp_handleProtocolEvent@i_1274:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x33
   566  0000E4                     	ds	1
   567  0000E5                     vscp_handleProtocolEvent@k:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x34
   571  0000E5                     	ds	1
   572  0000E6                     vscp_handleProtocolEvent@i_1263:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x35
   576  0000E6                     	ds	1
   577  0000E7                     vscp_handleProtocolEvent@byte:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x36
   581  0000E7                     	ds	1
   582  0000E8                     vscp_handleProtocolEvent@bytes_1270:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x37
   586  0000E8                     	ds	2
   587  0000EA                     vscp_handleProtocolEvent@i_1266:
   588                           	opt stack 0
   589                           
   590                           ; 1 bytes @ 0x39
   591  0000EA                     	ds	1
   592  0000EB                     vscp_handleProtocolEvent@i:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x3A
   596  0000EB                     	ds	1
   597  0000EC                     vscp_handleProtocolEvent@j:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x3B
   601  0000EC                     	ds	1
   602                           tblptru	equ	0xFF8
   603                           postinc0	equ	0xFEE
   604                           wreg	equ	0xFE8
   605                           
   606                           	psect	cstackCOMRAM
   607  000001                     __pcstackCOMRAM:
   608                           	opt stack 0
   609  000001                     ?i1_WriteTimer0:
   610                           	opt stack 0
   611  000001                     i1WriteTimer0@timer0:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x0
   615  000001                     	ds	2
   616  000003                     i1WriteTimer0@timer:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x2
   620  000003                     	ds	2
   621  000005                     ??_interrupt_at_low_vector:
   622                           
   623                           ; 0 bytes @ 0x4
   624  000005                     	ds	3
   625  000008                     ?_WriteTimer0:
   626                           	opt stack 0
   627  000008                     ?_Write_b_eep:
   628                           	opt stack 0
   629  000008                     ?__CANIDToRegs:
   630                           	opt stack 0
   631  000008                     ?__RegsToCANID:
   632                           	opt stack 0
   633  000008                     ??_vscp_getMDF_URL:
   634  000008                     ?_Read_b_eep:
   635                           	opt stack 0
   636  000008                     ?___lbmod:
   637                           	opt stack 0
   638  000008                     ?__ECANPointBuffer:
   639                           	opt stack 0
   640  000008                     ?_vscp_getFamilyCode:
   641                           	opt stack 0
   642  000008                     ?_vscp_getFamilyType:
   643                           	opt stack 0
   644  000008                     vscp_getMatrixInfo@i:
   645                           	opt stack 0
   646  000008                     ECANSetOperationMode@mode:
   647                           	opt stack 0
   648  000008                     OpenTimer0@config:
   649                           	opt stack 0
   650  000008                     ___lbmod@divisor:
   651                           	opt stack 0
   652  000008                     __CANIDToRegs@ptr:
   653                           	opt stack 0
   654  000008                     __RegsToCANID@ptr:
   655                           	opt stack 0
   656  000008                     Read_b_eep@badd:
   657                           	opt stack 0
   658  000008                     Write_b_eep@badd:
   659                           	opt stack 0
   660  000008                     WriteTimer0@timer0:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x7
   664  000008                     	ds	1
   665  000009                     vscp_getMDF_URL@idx:
   666                           	opt stack 0
   667  000009                     ___lbmod@dividend:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x8
   671  000009                     	ds	1
   672  00000A                     ??_init_app_ram:
   673  00000A                     ?_doActionPulse:
   674                           	opt stack 0
   675  00000A                     vscp_readAppReg@rv:
   676                           	opt stack 0
   677  00000A                     doActionPulse@arg:
   678                           	opt stack 0
   679  00000A                     vscp_getGUID@idx:
   680                           	opt stack 0
   681  00000A                     vscp_getUserID@idx:
   682                           	opt stack 0
   683  00000A                     vscp_getManufacturerId@idx:
   684                           	opt stack 0
   685  00000A                     __RegsToCANID@val:
   686                           	opt stack 0
   687  00000A                     Write_b_eep@bdat:
   688                           	opt stack 0
   689  00000A                     ___lbmod@counter:
   690                           	opt stack 0
   691  00000A                     WriteTimer0@timer:
   692                           	opt stack 0
   693  00000A                     __CANIDToRegs@val:
   694                           	opt stack 0
   695                           
   696                           ; 4 bytes @ 0x9
   697  00000A                     	ds	1
   698  00000B                     ??_doActionPulse:
   699  00000B                     vscp_readAppReg@reg:
   700                           	opt stack 0
   701  00000B                     __RegsToCANID@type:
   702                           	opt stack 0
   703  00000B                     __ECANPointBuffer@b:
   704                           	opt stack 0
   705  00000B                     Write_b_eep@GIE_BIT_VAL:
   706                           	opt stack 0
   707  00000B                     ___lbmod@rem:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0xA
   711  00000B                     	ds	1
   712  00000C                     ??_init_app_eeprom:
   713  00000C                     ?_doActionDisable:
   714                           	opt stack 0
   715  00000C                     ??__RegsToCANID:
   716  00000C                     ??_vscp_readStdReg:
   717  00000C                     ?_vscp_setGUID:
   718                           	opt stack 0
   719  00000C                     ?_vscp_setManufacturerId:
   720                           	opt stack 0
   721  00000C                     ?_vscp_setUserID:
   722                           	opt stack 0
   723  00000C                     init_app_ram@i:
   724                           	opt stack 0
   725  00000C                     vscp_setGUID@data:
   726                           	opt stack 0
   727  00000C                     vscp_setManufacturerId@data:
   728                           	opt stack 0
   729  00000C                     vscp_writeNicknamePermanent@nickname:
   730                           	opt stack 0
   731  00000C                     doActionDisable@arg:
   732                           	opt stack 0
   733  00000C                     vscp_setUserID@data:
   734                           	opt stack 0
   735  00000C                     vscp_setSegmentCRC@crc:
   736                           	opt stack 0
   737  00000C                     vscp_setControlByte@ctrl:
   738                           	opt stack 0
   739  00000C                     vscp_goBootloaderMode@algorithm:
   740                           	opt stack 0
   741  00000C                     __ECANPointBuffer@pt:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0xB
   745  00000C                     	ds	1
   746  00000D                     ??_doActionDisable:
   747  00000D                     vscp_setGUID@idx:
   748                           	opt stack 0
   749  00000D                     vscp_setManufacturerId@idx:
   750                           	opt stack 0
   751  00000D                     vscp_setUserID@idx:
   752                           	opt stack 0
   753  00000D                     vscp_handleDropNickname@bytes:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0xC
   757  00000D                     	ds	1
   758  00000E                     init_app_eeprom@i:
   759                           	opt stack 0
   760  00000E                     doActionPulse@val:
   761                           	opt stack 0
   762  00000E                     __CANIDToRegs@type:
   763                           	opt stack 0
   764  00000E                     __RegsToCANID@Value:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0xD
   768  00000E                     	ds	1
   769  00000F                     ??__CANIDToRegs:
   770  00000F                     ?_ECANReceiveMessage:
   771                           	opt stack 0
   772  00000F                     init_app_eeprom@j:
   773                           	opt stack 0
   774  00000F                     doActionPulse@dmflags:
   775                           	opt stack 0
   776  00000F                     doActionDisable@val:
   777                           	opt stack 0
   778  00000F                     ECANReceiveMessage@data:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0xE
   782  00000F                     	ds	1
   783  000010                     ?_vscp_writeStdReg:
   784                           	opt stack 0
   785  000010                     doActionPulse@i:
   786                           	opt stack 0
   787  000010                     doActionDisable@dmflags:
   788                           	opt stack 0
   789  000010                     ECANReceiveMessage@dataLen:
   790                           	opt stack 0
   791  000010                     vscp_writeStdReg@value:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0xF
   795  000010                     	ds	1
   796  000011                     ??_vscp_writeStdReg:
   797  000011                     doActionDisable@i:
   798                           	opt stack 0
   799  000011                     ECANReceiveMessage@msgFlags:
   800                           	opt stack 0
   801  000011                     __CANIDToRegs@Value:
   802                           	opt stack 0
   803  000011                     vscp_readStdReg@code:
   804                           	opt stack 0
   805                           
   806                           ; 4 bytes @ 0x10
   807  000011                     	ds	1
   808  000012                     ?_ECANSendMessage:
   809                           	opt stack 0
   810  000012                     ECANReceiveMessage@savedPtr:
   811                           	opt stack 0
   812  000012                     ECANSendMessage@id:
   813                           	opt stack 0
   814                           
   815                           ; 4 bytes @ 0x11
   816  000012                     	ds	2
   817  000014                     ECANReceiveMessage@id:
   818                           	opt stack 0
   819                           
   820                           ; 1 bytes @ 0x13
   821  000014                     	ds	1
   822  000015                     ECANReceiveMessage@i:
   823                           	opt stack 0
   824  000015                     vscp_writeStdReg@rv:
   825                           	opt stack 0
   826  000015                     vscp_readStdReg@code_1248:
   827                           	opt stack 0
   828                           
   829                           ; 4 bytes @ 0x14
   830  000015                     	ds	1
   831  000016                     ECANReceiveMessage@mode:
   832                           	opt stack 0
   833  000016                     vscp_writeStdReg@reg:
   834                           	opt stack 0
   835  000016                     ECANSendMessage@data:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x15
   839  000016                     	ds	1
   840  000017                     ECANReceiveMessage@temp:
   841                           	opt stack 0
   842                           
   843                           ; 1 bytes @ 0x16
   844  000017                     	ds	1
   845  000018                     ECANSendMessage@dataLen:
   846                           	opt stack 0
   847  000018                     ECANReceiveMessage@ptr:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x17
   851  000018                     	ds	1
   852  000019                     ECANSendMessage@msgFlags:
   853                           	opt stack 0
   854  000019                     vscp_readStdReg@idx:
   855                           	opt stack 0
   856                           
   857                           ; 1 bytes @ 0x18
   858  000019                     	ds	1
   859  00001A                     ??_ECANSendMessage:
   860  00001A                     ?_getCANFrame:
   861                           	opt stack 0
   862  00001A                     getCANFrame@pdlc:
   863                           	opt stack 0
   864  00001A                     vscp_readStdReg@idx_1249:
   865                           	opt stack 0
   866                           
   867                           ; 1 bytes @ 0x19
   868  00001A                     	ds	1
   869  00001B                     getCANFrame@pdata:
   870                           	opt stack 0
   871  00001B                     vscp_readStdReg@rv:
   872                           	opt stack 0
   873  00001B                     ECANSendMessage@pb:
   874                           	opt stack 0
   875                           
   876                           ; 18 bytes @ 0x1A
   877  00001B                     	ds	1
   878  00001C                     getCANFrame@pid:
   879                           	opt stack 0
   880  00001C                     vscp_readStdReg@reg:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x1B
   884  00001C                     	ds	1
   885  00001D                     getCANFrame@flags:
   886                           	opt stack 0
   887  00001D                     vscp_readRegister@reg:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x1C
   891  00001D                     	ds	1
   892  00001E                     ?_getVSCPFrame:
   893                           	opt stack 0
   894  00001E                     getVSCPFrame@pvscptype:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x1D
   898  00001E                     	ds	1
   899  00001F                     getVSCPFrame@pNodeId:
   900                           	opt stack 0
   901                           
   902                           ; 1 bytes @ 0x1E
   903  00001F                     	ds	1
   904  000020                     getVSCPFrame@pPriority:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x1F
   908  000020                     	ds	1
   909  000021                     getVSCPFrame@pSize:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x20
   913  000021                     	ds	1
   914  000022                     getVSCPFrame@pData:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x21
   918  000022                     	ds	1
   919  000023                     ??_getVSCPFrame:
   920                           
   921                           ; 0 bytes @ 0x22
   922  000023                     	ds	4
   923  000027                     getVSCPFrame@pvscpclass:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x26
   927  000027                     	ds	1
   928  000028                     getVSCPFrame@id:
   929                           	opt stack 0
   930                           
   931                           ; 4 bytes @ 0x27
   932  000028                     	ds	4
   933  00002C                     vscp_getEvent@rv:
   934                           	opt stack 0
   935                           
   936                           ; 1 bytes @ 0x2B
   937  00002C                     	ds	1
   938  00002D                     ECANSendMessage@mode:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x2C
   942  00002D                     	ds	1
   943  00002E                     ECANSendMessage@buffers:
   944                           	opt stack 0
   945                           
   946                           ; 1 bytes @ 0x2D
   947  00002E                     	ds	1
   948  00002F                     ECANSendMessage@j:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x2E
   952  00002F                     	ds	1
   953  000030                     ECANSendMessage@tempBSEL0:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x2F
   957  000030                     	ds	1
   958  000031                     ECANSendMessage@tempPtr:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x30
   962  000031                     	ds	2
   963  000033                     ECANSendMessage@temp:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0x32
   967  000033                     	ds	1
   968  000034                     ECANSendMessage@i:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x33
   972  000034                     	ds	1
   973  000035                     ECANSendMessage@ptr:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x34
   977  000035                     	ds	2
   978  000037                     ?_sendCANFrame:
   979                           	opt stack 0
   980  000037                     sendCANFrame@id:
   981                           	opt stack 0
   982                           
   983                           ; 4 bytes @ 0x36
   984  000037                     	ds	4
   985  00003B                     sendCANFrame@dlc:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x3A
   989  00003B                     	ds	1
   990  00003C                     sendCANFrame@pdata:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x3B
   994  00003C                     	ds	2
   995  00003E                     
   996                           ; 0 bytes @ 0x3D
   997  00003E                     	ds	1
   998  00003F                     ?_sendVSCPFrame:
   999                           	opt stack 0
  1000  00003F                     sendVSCPFrame@vscpclass:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0x3E
  1004  00003F                     	ds	2
  1005  000041                     sendVSCPFrame@vscptype:
  1006                           	opt stack 0
  1007                           
  1008                           ; 1 bytes @ 0x40
  1009  000041                     	ds	1
  1010  000042                     sendVSCPFrame@nodeid:
  1011                           	opt stack 0
  1012                           
  1013                           ; 1 bytes @ 0x41
  1014  000042                     	ds	1
  1015  000043                     sendVSCPFrame@priority:
  1016                           	opt stack 0
  1017                           
  1018                           ; 1 bytes @ 0x42
  1019  000043                     	ds	1
  1020  000044                     sendVSCPFrame@size:
  1021                           	opt stack 0
  1022                           
  1023                           ; 1 bytes @ 0x43
  1024  000044                     	ds	1
  1025  000045                     sendVSCPFrame@pData:
  1026                           	opt stack 0
  1027                           
  1028                           ; 2 bytes @ 0x44
  1029  000045                     	ds	2
  1030  000047                     sendVSCPFrame@id:
  1031                           	opt stack 0
  1032                           
  1033                           ; 4 bytes @ 0x46
  1034  000047                     	ds	4
  1035  00004B                     ??_SendInformationEvent:
  1036  00004B                     
  1037                           ; 0 bytes @ 0x4A
  1038  00004B                     	ds	1
  1039  00004C                     ??_vscp_newNodeOnline:
  1040  00004C                     vscp_sendHeartBeat@zone:
  1041                           	opt stack 0
  1042                           
  1043                           ; 1 bytes @ 0x4B
  1044  00004C                     	ds	1
  1045  00004D                     ??_vscp_doOneSecondWork:
  1046  00004D                     SendInformationEvent@data:
  1047                           	opt stack 0
  1048                           
  1049                           ; 3 bytes @ 0x4C
  1050  00004D                     	ds	3
  1051  000050                     SendInformationEvent@idx:
  1052                           	opt stack 0
  1053                           
  1054                           ; 1 bytes @ 0x4F
  1055  000050                     	ds	1
  1056  000051                     ?_doActionOff:
  1057                           	opt stack 0
  1058  000051                     ?_doActionOn:
  1059                           	opt stack 0
  1060  000051                     ?_doActionStatus:
  1061                           	opt stack 0
  1062  000051                     ?_doActionToggle:
  1063                           	opt stack 0
  1064  000051                     ?_vscp_writeAppReg:
  1065                           	opt stack 0
  1066  000051                     vscp_writeAppReg@val:
  1067                           	opt stack 0
  1068  000051                     doActionOn@arg:
  1069                           	opt stack 0
  1070  000051                     doActionOff@arg:
  1071                           	opt stack 0
  1072  000051                     doActionStatus@arg:
  1073                           	opt stack 0
  1074  000051                     doActionToggle@arg:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x50
  1078  000051                     	ds	1
  1079  000052                     tblptru	equ	0xFF8
  1080                           postinc0	equ	0xFEE
  1081                           wreg	equ	0xFE8
  1082                           
  1083                           ; 0 bytes @ 0x51
  1084 ;;
  1085 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1086 ;;
  1087 ;; *************** function _main *****************
  1088 ;; Defined at:
  1089 ;;		line 188 in file "../main.c"
  1090 ;; Parameters:    Size  Location     Type
  1091 ;;		None
  1092 ;; Auto vars:     Size  Location     Type
  1093 ;;		None
  1094 ;; Return value:  Size  Location     Type
  1095 ;;		None               void
  1096 ;; Registers used:
  1097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1098 ;; Tracked objects:
  1099 ;;		On entry : 0/0
  1100 ;;		On exit  : F/0
  1101 ;;		Unchanged: 0/0
  1102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1103 ;;      Params:         0       0       0       0       0       0       0
  1104 ;;      Locals:         0       0       0       0       0       0       0
  1105 ;;      Temps:          0       0       0       0       0       0       0
  1106 ;;      Totals:         0       0       0       0       0       0       0
  1107 ;;Total ram usage:        0 bytes
  1108 ;; Hardware stack levels required when called:   10
  1109 ;; This function calls:
  1110 ;;		_init
  1111 ;;		_vscp_check_pstorage
  1112 ;;		_init_app_eeprom
  1113 ;;		_init_app_ram
  1114 ;;		_vscp_init
  1115 ;;		_Busy_eep
  1116 ;;		_Write_b_eep
  1117 ;;		_vscp_getEvent
  1118 ;;		_vscp_goActiveState
  1119 ;;		_vscp_handleProbeState
  1120 ;;		_vscp_handleProtocolEvent
  1121 ;;		_doDM
  1122 ;;		_vscp_error
  1123 ;;		_vscp_doOneSecondWork
  1124 ;;		_doApplicationOneSecondWork
  1125 ;;		_doWork
  1126 ;; This function is called by:
  1127 ;;		Startup code after reset
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130                           
  1131                           	psect	text0
  1132  0035A8                     __ptext0:
  1133                           	opt stack 0
  1134  0035A8                     _main:
  1135                           	opt stack 21
  1136                           
  1137                           ;main.c: 189: init();
  1138                           
  1139                           ;incstack = 0
  1140                           ;incstack = 0
  1141  0035A8  EC05  F01E         	call	_init	;wreg free
  1142                           
  1143                           ;main.c: 193: if ( !vscp_check_pstorage() ) {
  1144  0035AC  EC20  F01F         	call	_vscp_check_pstorage	;wreg free
  1145  0035B0  0900               	iorlw	0
  1146  0035B2  E104               	bnz	l9578
  1147                           
  1148                           ;main.c: 196: init_app_eeprom();
  1149  0035B4  ECAB  F00C         	call	_init_app_eeprom	;wreg free
  1150                           
  1151                           ;main.c: 197: init_app_ram();
  1152  0035B8  EC56  F019         	call	_init_app_ram	;wreg free
  1153  0035BC                     l9578:
  1154                           
  1155                           ;main.c: 200: }
  1156                           ;main.c: 202: vscp_init();
  1157  0035BC  ECC4  F01D         	call	_vscp_init	;wreg free
  1158  0035C0                     l141:
  1159                           
  1160                           ; BSR set to: 0
  1161  0035C0  0004               	clrwdt		;# 
  1162                           
  1163                           ;main.c: 208: if ( ( vscp_initbtncnt > 250 ) &&
  1164                           ;main.c: 209: ( 0x01 != vscp_node_state ) ) {
  1165  0035C2  0EFA               	movlw	250
  1166  0035C4  0100               	movlb	0	; () banked
  1167  0035C6  658F               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1168  0035C8  D00E               	goto	l9592
  1169                           
  1170                           ; BSR set to: 0
  1171  0035CA  0592               	decf	_vscp_node_state& (0+255),w,b
  1172  0035CC  E00C               	bz	l9592
  1173                           
  1174                           ; BSR set to: 0
  1175                           ;main.c: 212: vscp_nickname = 0xff;
  1176  0035CE  6991               	setf	_vscp_nickname& (0+255),b
  1177                           
  1178                           ; BSR set to: 0
  1179                           ;main.c: 213: (Busy_eep(), Write_b_eep(0x01,0xff));
  1180  0035D0  EC3F  F020         	call	_Busy_eep	;wreg free
  1181  0035D4  6A09               	clrf	?_Write_b_eep+1,c
  1182  0035D6  0E01               	movlw	1
  1183  0035D8  6E08               	movwf	?_Write_b_eep,c
  1184  0035DA  0EFF               	movlw	255
  1185  0035DC  680A               	setf	?_Write_b_eep+2,c
  1186  0035DE  EC24  F01E         	call	_Write_b_eep	;wreg free
  1187                           
  1188                           ;main.c: 214: vscp_init();
  1189  0035E2  ECC4  F01D         	call	_vscp_init	;wreg free
  1190  0035E6                     l9592:
  1191                           
  1192                           ; BSR set to: 0
  1193                           ;main.c: 216: }
  1194                           ;main.c: 219: vscp_imsg.flags = 0;
  1195  0035E6  6B96               	clrf	_vscp_imsg& (0+255),b
  1196                           
  1197                           ; BSR set to: 0
  1198                           ;main.c: 220: vscp_getEvent();
  1199  0035E8  EC99  F01E         	call	_vscp_getEvent	;wreg free
  1200                           
  1201                           ;main.c: 222: switch ( vscp_node_state ) {
  1202  0035EC  D01C               	goto	l9616
  1203  0035EE                     l9596:
  1204                           
  1205                           ; BSR set to: 0
  1206                           ;main.c: 227: if (0xff == vscp_nickname) {
  1207  0035EE  2991               	incf	_vscp_nickname& (0+255),w,b
  1208  0035F0  E103               	bnz	l9600
  1209                           
  1210                           ; BSR set to: 0
  1211                           ;main.c: 229: vscp_node_state = 0x01;
  1212  0035F2  0E01               	movlw	1
  1213  0035F4  6F92               	movwf	_vscp_node_state& (0+255),b
  1214                           
  1215                           ;main.c: 230: } else {
  1216  0035F6  D023               	goto	l9618
  1217  0035F8                     l9600:
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;main.c: 232: vscp_node_state = 0x03;
  1221  0035F8  0E03               	movlw	3
  1222  0035FA  6F92               	movwf	_vscp_node_state& (0+255),b
  1223  0035FC                     l9602:
  1224                           
  1225                           ; BSR set to: 0
  1226                           ;main.c: 233: vscp_goActiveState();
  1227  0035FC  EC64  F01F         	call	_vscp_goActiveState	;wreg free
  1228  003600  D01E               	goto	l9618
  1229  003602                     l9604:
  1230                           
  1231                           ; BSR set to: 0
  1232                           ;main.c: 238: vscp_handleProbeState();
  1233  003602  EC45  F01B         	call	_vscp_handleProbeState	;wreg free
  1234                           
  1235                           ;main.c: 239: break;
  1236  003606  D01B               	goto	l9618
  1237  003608                     l150:
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;main.c: 248: if (vscp_imsg.flags & 0x80) {
  1241  003608  AF96               	btfss	_vscp_imsg& (0+255),7,b
  1242  00360A  D019               	goto	l9618
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;main.c: 250: if ( 0 == vscp_imsg.vscp_class ) {
  1246  00360C  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  1247  00360E  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1248  003610  B4D8               	btfsc	status,2,c
  1249                           
  1250                           ; BSR set to: 0
  1251                           ;main.c: 253: vscp_handleProtocolEvent();
  1252  003612  EC8C  F009         	call	_vscp_handleProtocolEvent	;wreg free
  1253                           
  1254                           ;main.c: 255: }
  1255                           ;main.c: 257: doDM();
  1256  003616  ECDD  F00E         	call	_doDM	;wreg free
  1257  00361A  D011               	goto	l9618
  1258  00361C                     l9612:
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;main.c: 263: vscp_error();
  1262  00361C  EC42  F020         	call	_vscp_error	;wreg free
  1263                           
  1264                           ;main.c: 264: break;
  1265  003620  D00E               	goto	l9618
  1266  003622                     l154:
  1267                           
  1268                           ; BSR set to: 0
  1269                           ;main.c: 267: vscp_node_state = 0x00;
  1270  003622  6B92               	clrf	_vscp_node_state& (0+255),b
  1271                           
  1272                           ;main.c: 268: break;
  1273  003624  D00C               	goto	l9618
  1274  003626                     l9616:
  1275  003626  0100               	movlb	0	; () banked
  1276  003628  5192               	movf	_vscp_node_state& (0+255),w,b
  1277                           
  1278                           ; Switch size 1, requested type "speed"
  1279                           ; Number of cases is 5, Range of values is 0 to 4
  1280                           ; switch strategies available:
  1281                           ; Name         Instructions Cycles
  1282                           ; simple_byte           16     9 (average)
  1283                           ;	Chosen strategy is simple_byte
  1284  00362A  E0E1               	bz	l9596
  1285  00362C  0A01               	xorlw	1	; case 1
  1286  00362E  E0E9               	bz	l9604
  1287  003630  0A03               	xorlw	3	; case 2
  1288  003632  E0E4               	bz	l9602
  1289  003634  0A01               	xorlw	1	; case 3
  1290  003636  E0E8               	bz	l150
  1291  003638  0A07               	xorlw	7	; case 4
  1292  00363A  E0F0               	bz	l9612
  1293  00363C  D7F2               	goto	l154
  1294  00363E                     l9618:
  1295                           
  1296                           ;main.c: 273: if ( measurement_clock > 1000 ) {
  1297  00363E  0EE9               	movlw	233
  1298  003640  0100               	movlb	0	; () banked
  1299  003642  5D80               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1300  003644  0E03               	movlw	3
  1301  003646  5981               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1302  003648  0E00               	movlw	0
  1303  00364A  5982               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1304  00364C  0E00               	movlw	0
  1305  00364E  5983               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1306  003650  E30B               	bnc	l9628
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;main.c: 275: measurement_clock = 0;
  1310  003652  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
  1311  003654  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1312  003656  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1313  003658  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;main.c: 278: vscp_doOneSecondWork();
  1317  00365A  EC9D  F01D         	call	_vscp_doOneSecondWork	;wreg free
  1318                           
  1319                           ; BSR set to: 0
  1320                           ;main.c: 282: if ( 0x03 == vscp_node_state ) {
  1321  00365E  5192               	movf	_vscp_node_state& (0+255),w,b
  1322  003660  0A03               	xorlw	3
  1323  003662  B4D8               	btfsc	status,2,c
  1324                           
  1325                           ; BSR set to: 0
  1326                           ;main.c: 285: doApplicationOneSecondWork();
  1327  003664  EC5C  F010         	call	_doApplicationOneSecondWork	;wreg free
  1328  003668                     l9628:
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;main.c: 287: }
  1332                           ;main.c: 289: }
  1333                           ;main.c: 292: if ( seconds > 59 ) {
  1334  003668  0E3B               	movlw	59
  1335  00366A  658B               	cpfsgt	_seconds& (0+255),b
  1336  00366C  D00B               	goto	l9644
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;main.c: 294: seconds = 0;
  1340  00366E  6B8B               	clrf	_seconds& (0+255),b
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;main.c: 295: minutes++;
  1344  003670  2B89               	incf	_minutes& (0+255),f,b
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;main.c: 297: if ( minutes > 59 ) {
  1348  003672  0E3B               	movlw	59
  1349  003674  6589               	cpfsgt	_minutes& (0+255),b
  1350  003676  D002               	goto	l9640
  1351                           
  1352                           ; BSR set to: 0
  1353                           ;main.c: 298: minutes = 0;
  1354  003678  6B89               	clrf	_minutes& (0+255),b
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;main.c: 299: hours++;
  1358  00367A  2B88               	incf	_hours& (0+255),f,b
  1359  00367C                     l9640:
  1360                           
  1361                           ; BSR set to: 0
  1362                           ;main.c: 300: }
  1363                           ;main.c: 302: if ( hours > 23 ) hours = 0;
  1364  00367C  0E17               	movlw	23
  1365  00367E  6588               	cpfsgt	_hours& (0+255),b
  1366  003680  D001               	goto	l9644
  1367                           
  1368                           ; BSR set to: 0
  1369  003682  6B88               	clrf	_hours& (0+255),b
  1370  003684                     l9644:
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;main.c: 304: }
  1374                           ;main.c: 306: doWork();
  1375  003684  EC44  F020         	call	_doWork	;wreg free
  1376  003688  D79B               	goto	l141
  1377  00368A                     __end_of_main:
  1378                           	opt stack 0
  1379                           tblptru	equ	0xFF8
  1380                           postinc0	equ	0xFEE
  1381                           wreg	equ	0xFE8
  1382                           status	equ	0xFD8
  1383                           
  1384 ;; *************** function _doWork *****************
  1385 ;; Defined at:
  1386 ;;		line 885 in file "../main.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;		None
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;		None
  1391 ;; Return value:  Size  Location     Type
  1392 ;;		None               void
  1393 ;; Registers used:
  1394 ;;		wreg, status,2, status,0
  1395 ;; Tracked objects:
  1396 ;;		On entry : F/0
  1397 ;;		On exit  : F/0
  1398 ;;		Unchanged: F/0
  1399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1400 ;;      Params:         0       0       0       0       0       0       0
  1401 ;;      Locals:         0       0       0       0       0       0       0
  1402 ;;      Temps:          0       0       0       0       0       0       0
  1403 ;;      Totals:         0       0       0       0       0       0       0
  1404 ;;Total ram usage:        0 bytes
  1405 ;; Hardware stack levels used:    1
  1406 ;; Hardware stack levels required when called:    2
  1407 ;; This function calls:
  1408 ;;		Nothing
  1409 ;; This function is called by:
  1410 ;;		_main
  1411 ;; This function uses a non-reentrant model
  1412 ;;
  1413                           
  1414                           	psect	text1
  1415  004088                     __ptext1:
  1416                           	opt stack 0
  1417  004088                     _doWork:
  1418                           	opt stack 28
  1419                           
  1420                           ; BSR set to: 0
  1421                           
  1422                           ; BSR set to: 0
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;incstack = 0
  1426                           ;incstack = 0
  1427  004088  0012               	return	
  1428  00408A                     __end_of_doWork:
  1429                           	opt stack 0
  1430                           tblptru	equ	0xFF8
  1431                           postinc0	equ	0xFEE
  1432                           wreg	equ	0xFE8
  1433                           status	equ	0xFD8
  1434                           
  1435 ;; *************** function _doApplicationOneSecondWork *****************
  1436 ;; Defined at:
  1437 ;;		line 590 in file "../main.c"
  1438 ;; Parameters:    Size  Location     Type
  1439 ;;		None
  1440 ;; Auto vars:     Size  Location     Type
  1441 ;;  i               1   32[BANK0 ] unsigned char 
  1442 ;;  ctrlreg         1   31[BANK0 ] unsigned char 
  1443 ;;  bOn             1   30[BANK0 ] enum E15660
  1444 ;; Return value:  Size  Location     Type
  1445 ;;		None               void
  1446 ;; Registers used:
  1447 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1448 ;; Tracked objects:
  1449 ;;		On entry : F/0
  1450 ;;		On exit  : F/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1453 ;;      Params:         0       0       0       0       0       0       0
  1454 ;;      Locals:         0       3       0       0       0       0       0
  1455 ;;      Temps:          0       3       0       0       0       0       0
  1456 ;;      Totals:         0       6       0       0       0       0       0
  1457 ;;Total ram usage:        6 bytes
  1458 ;; Hardware stack levels used:    1
  1459 ;; Hardware stack levels required when called:    8
  1460 ;; This function calls:
  1461 ;;		_Read_b_eep
  1462 ;;		_doActionOff
  1463 ;;		_SendInformationEvent
  1464 ;; This function is called by:
  1465 ;;		_main
  1466 ;; This function uses a non-reentrant model
  1467 ;;
  1468                           
  1469                           	psect	text2
  1470  0020B8                     __ptext2:
  1471                           	opt stack 0
  1472  0020B8                     _doApplicationOneSecondWork:
  1473                           	opt stack 22
  1474                           
  1475                           ; BSR set to: 0
  1476                           ;main.c: 592: uint8_t i;
  1477                           ;main.c: 593: uint8_t ctrlreg;
  1478                           ;main.c: 594: BOOL bOn = 0;
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;incstack = 0
  1482                           ;incstack = 0
  1483  0020B8  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1484                           
  1485                           ;main.c: 596: for ( i = 0; i < 8; i++ ) {
  1486  0020BA  6BD1               	clrf	doApplicationOneSecondWork@i& (0+255),b
  1487  0020BC                     l10136:
  1488                           
  1489                           ; BSR set to: 0
  1490  0020BC  0E07               	movlw	7
  1491  0020BE  65D1               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  1492  0020C0  D001               	goto	l10140
  1493  0020C2  D172               	goto	l226
  1494  0020C4                     l10140:
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;main.c: 599: ctrlreg = Read_b_eep(0x43 + 10 + i);
  1498  0020C4  0E4D               	movlw	77
  1499  0020C6  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1500  0020C8  6E08               	movwf	?_Read_b_eep,c
  1501  0020CA  6A09               	clrf	?_Read_b_eep+1,c
  1502  0020CC  0E00               	movlw	0
  1503  0020CE  2209               	addwfc	?_Read_b_eep+1,f,c
  1504  0020D0  EC0B  F020         	call	_Read_b_eep	;wreg free
  1505  0020D4  0100               	movlb	0	; () banked
  1506  0020D6  6FD0               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;main.c: 602: if ( !( ctrlreg & 0x80 ) ) continue;
  1510  0020D8  AFD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  1511  0020DA  D164               	goto	l10224
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;main.c: 606: if ( relay_protection_timer[ i ] ) {
  1515                           
  1516                           ; BSR set to: 0
  1517  0020DC  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1518  0020DE  0D02               	mullw	2
  1519  0020E0  50F3               	movf	prodl,w,c
  1520  0020E2  0F60               	addlw	low _relay_protection_timer
  1521  0020E4  6ED9               	movwf	fsr2l,c
  1522  0020E6  6ADA               	clrf	fsr2h,c
  1523  0020E8  50DE               	movf	postinc2,w,c
  1524  0020EA  10DD               	iorwf	postdec2,w,c
  1525  0020EC  E037               	bz	l10158
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;main.c: 608: relay_protection_timer[ i ]--;
  1529  0020EE  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1530  0020F0  0D02               	mullw	2
  1531  0020F2  50F3               	movf	prodl,w,c
  1532  0020F4  0F60               	addlw	low _relay_protection_timer
  1533  0020F6  6ED9               	movwf	fsr2l,c
  1534  0020F8  6ADA               	clrf	fsr2h,c
  1535  0020FA  06DE               	decf	postinc2,f,c
  1536  0020FC  0E00               	movlw	0
  1537  0020FE  5ADD               	subwfb	postdec2,f,c
  1538                           
  1539                           ;main.c: 611: if ( !relay_protection_timer[ i ] &&
  1540                           ;main.c: 612: ( Read_b_eep(0x43 + 10 + i) &
  1541                           ;main.c: 613: 0x04 ) ) {
  1542  002100  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1543  002102  0D02               	mullw	2
  1544  002104  50F3               	movf	prodl,w,c
  1545  002106  0F60               	addlw	low _relay_protection_timer
  1546  002108  6ED9               	movwf	fsr2l,c
  1547  00210A  6ADA               	clrf	fsr2h,c
  1548  00210C  50DE               	movf	postinc2,w,c
  1549  00210E  10DD               	iorwf	postdec2,w,c
  1550  002110  E146               	bnz	l10160
  1551                           
  1552                           ; BSR set to: 0
  1553  002112  0E4D               	movlw	77
  1554  002114  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1555  002116  6E08               	movwf	?_Read_b_eep,c
  1556  002118  6A09               	clrf	?_Read_b_eep+1,c
  1557  00211A  0E00               	movlw	0
  1558  00211C  2209               	addwfc	?_Read_b_eep+1,f,c
  1559  00211E  EC0B  F020         	call	_Read_b_eep	;wreg free
  1560  002122  0100               	movlb	0	; () banked
  1561  002124  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1562  002126  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1563  002128  D03A               	goto	l10160
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;main.c: 616: doActionOff( 0, (1 << i) );
  1567  00212A  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1568  00212E  0E01               	movlw	1
  1569  002130  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1570  002132  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1571  002134  D002               	goto	u11894
  1572  002136                     u11895:
  1573  002136  90D8               	bcf	status,0,c
  1574  002138  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1575  00213A                     u11894:
  1576  00213A  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1577  00213C  D7FC               	goto	u11895
  1578  00213E  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1579  002140  6E51               	movwf	?_doActionOff,c
  1580  002142  0E00               	movlw	0
  1581  002144  EC60  F01A         	call	_doActionOff
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;main.c: 619: if ( ctrlreg & 0x02 ) {
  1585  002148  A3D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  1586  00214A  D029               	goto	l10160
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;main.c: 620: SendInformationEvent( i, 1,
  1590                           ;main.c: 621: 2 );
  1591  00214C  0E01               	movlw	1
  1592  00214E  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1593  002150  0E02               	movlw	2
  1594  002152  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1595  002154  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1596  002156  EC67  F01D         	call	_SendInformationEvent
  1597  00215A  D021               	goto	l10160
  1598  00215C                     l10158:
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;main.c: 626: else {
  1602                           ;main.c: 628: relay_protection_timer[ i ] =
  1603                           ;main.c: 629: Read_b_eep(0x43 + 34 + i) * 256 +
  1604                           ;main.c: 630: Read_b_eep(0x43 + 35 + i);
  1605  00215C  0E65               	movlw	101
  1606  00215E  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1607  002160  6E08               	movwf	?_Read_b_eep,c
  1608  002162  6A09               	clrf	?_Read_b_eep+1,c
  1609  002164  0E00               	movlw	0
  1610  002166  2209               	addwfc	?_Read_b_eep+1,f,c
  1611  002168  EC0B  F020         	call	_Read_b_eep	;wreg free
  1612  00216C  0100               	movlb	0	; () banked
  1613  00216E  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1614  002170  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1615  002172  0E66               	movlw	102
  1616  002174  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1617  002176  6E08               	movwf	?_Read_b_eep,c
  1618  002178  6A09               	clrf	?_Read_b_eep+1,c
  1619  00217A  0E00               	movlw	0
  1620  00217C  2209               	addwfc	?_Read_b_eep+1,f,c
  1621  00217E  EC0B  F020         	call	_Read_b_eep	;wreg free
  1622  002182  0100               	movlb	0	; () banked
  1623  002184  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1624  002186  0E00               	movlw	0
  1625  002188  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1626  00218A  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1627  00218C  0D02               	mullw	2
  1628  00218E  50F3               	movf	prodl,w,c
  1629  002190  0F60               	addlw	low _relay_protection_timer
  1630  002192  6ED9               	movwf	fsr2l,c
  1631  002194  6ADA               	clrf	fsr2h,c
  1632  002196  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1633  00219A  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1634  00219E                     l10160:
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;main.c: 631: }
  1638                           ;main.c: 634: if ( relay_pulse_flags & (1 << i) ) {
  1639  00219E  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1640  0021A2  0E01               	movlw	1
  1641  0021A4  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1642  0021A6  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1643  0021A8  D002               	goto	u11914
  1644  0021AA                     u11915:
  1645  0021AA  90D8               	bcf	status,0,c
  1646  0021AC  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1647  0021AE                     u11914:
  1648  0021AE  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1649  0021B0  D7FC               	goto	u11915
  1650  0021B2  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1651  0021B4  158A               	andwf	_relay_pulse_flags& (0+255),w,b
  1652  0021B6  E101 D0F5          	bz	l10224
  1653                           
  1654                           ; BSR set to: 0
  1655                           ;main.c: 636: if ( relay_pulse_timer[ i ] ) {
  1656  0021BA  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1657  0021BC  0D02               	mullw	2
  1658  0021BE  50F3               	movf	prodl,w,c
  1659  0021C0  0F70               	addlw	low _relay_pulse_timer
  1660  0021C2  6ED9               	movwf	fsr2l,c
  1661  0021C4  6ADA               	clrf	fsr2h,c
  1662  0021C6  50DE               	movf	postinc2,w,c
  1663  0021C8  10DD               	iorwf	postdec2,w,c
  1664  0021CA  E101 D0CC          	bz	l10222
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;main.c: 638: relay_pulse_timer[ i ]--;
  1668  0021CE  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1669  0021D0  0D02               	mullw	2
  1670  0021D2  50F3               	movf	prodl,w,c
  1671  0021D4  0F70               	addlw	low _relay_pulse_timer
  1672  0021D6  6ED9               	movwf	fsr2l,c
  1673  0021D8  6ADA               	clrf	fsr2h,c
  1674  0021DA  06DE               	decf	postinc2,f,c
  1675  0021DC  0E00               	movlw	0
  1676  0021DE  5ADD               	subwfb	postdec2,f,c
  1677                           
  1678                           ;main.c: 641: if ( !relay_pulse_timer[ i ] ) {
  1679  0021E0  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1680  0021E2  0D02               	mullw	2
  1681  0021E4  50F3               	movf	prodl,w,c
  1682  0021E6  0F70               	addlw	low _relay_pulse_timer
  1683  0021E8  6ED9               	movwf	fsr2l,c
  1684  0021EA  6ADA               	clrf	fsr2h,c
  1685  0021EC  50DE               	movf	postinc2,w,c
  1686  0021EE  10DD               	iorwf	postdec2,w,c
  1687  0021F0  E02E               	bz	l10198
  1688  0021F2  D0D8               	goto	l10224
  1689  0021F4                     l196:
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;main.c: 646: if ( LATBbits.LATB4 ) {
  1693  0021F4  A88A               	btfss	3978,4,c	;volatile
  1694  0021F6  D002               	goto	l197
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;main.c: 647: LATBbits.LATB4 = 0;
  1698  0021F8  988A               	bcf	3978,4,c	;volatile
  1699  0021FA  D025               	goto	L6
  1700  0021FC                     l197:
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;main.c: 650: LATBbits.LATB4 = 1;
  1704  0021FC  888A               	bsf	3978,4,c	;volatile
  1705  0021FE                     l10170:
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;main.c: 651: bOn = 1;
  1709  0021FE  0E01               	movlw	1
  1710  002200  6FCF               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  1711  002202  D033               	goto	l10200
  1712  002204                     l200:
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;main.c: 656: if ( LATBbits.LATB1 ) {
  1716  002204  A28A               	btfss	3978,1,c	;volatile
  1717  002206  D002               	goto	l201
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;main.c: 657: LATBbits.LATB1 = 0;
  1721  002208  928A               	bcf	3978,1,c	;volatile
  1722  00220A  D01D               	goto	L6
  1723  00220C                     l201:
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;main.c: 660: LATBbits.LATB1 = 1;
  1727  00220C  828A               	bsf	3978,1,c	;volatile
  1728  00220E  D7F7               	goto	l10170
  1729  002210                     l203:
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;main.c: 666: if ( LATBbits.LATB0 ) {
  1733  002210  A08A               	btfss	3978,0,c	;volatile
  1734  002212  D002               	goto	l204
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;main.c: 667: LATBbits.LATB0 = 0;
  1738  002214  908A               	bcf	3978,0,c	;volatile
  1739  002216  D017               	goto	L6
  1740  002218                     l204:
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;main.c: 670: LATBbits.LATB0 = 1;
  1744  002218  808A               	bsf	3978,0,c	;volatile
  1745  00221A  D7F1               	goto	l10170
  1746  00221C                     l206:
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;main.c: 676: if ( LATCbits.LATC7 ) {
  1750  00221C  AE8B               	btfss	3979,7,c	;volatile
  1751  00221E  D002               	goto	l207
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;main.c: 677: LATCbits.LATC7 = 0;
  1755  002220  9E8B               	bcf	3979,7,c	;volatile
  1756  002222  D011               	goto	L6
  1757  002224                     l207:
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;main.c: 680: LATCbits.LATC7 = 1;
  1761  002224  8E8B               	bsf	3979,7,c	;volatile
  1762  002226  D7EB               	goto	l10170
  1763  002228                     l209:
  1764                           
  1765                           ; BSR set to: 0
  1766                           ;main.c: 686: if ( LATCbits.LATC6 ) {
  1767  002228  AC8B               	btfss	3979,6,c	;volatile
  1768  00222A  D002               	goto	l210
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;main.c: 687: LATCbits.LATC6 = 0;
  1772  00222C  9C8B               	bcf	3979,6,c	;volatile
  1773  00222E  D00B               	goto	L6
  1774  002230                     l210:
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;main.c: 690: LATCbits.LATC6 = 1;
  1778  002230  8C8B               	bsf	3979,6,c	;volatile
  1779  002232  D7E5               	goto	l10170
  1780  002234                     l212:
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;main.c: 696: if ( LATCbits.LATC5 ) {
  1784  002234  AA8B               	btfss	3979,5,c	;volatile
  1785  002236  D002               	goto	l213
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;main.c: 697: LATCbits.LATC5 = 0;
  1789  002238  9A8B               	bcf	3979,5,c	;volatile
  1790  00223A  D005               	goto	L6
  1791  00223C                     l213:
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;main.c: 700: LATCbits.LATC5 = 1;
  1795  00223C  8A8B               	bsf	3979,5,c	;volatile
  1796  00223E  D7DF               	goto	l10170
  1797  002240                     l215:
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;main.c: 706: if ( LATCbits.LATC4 ) {
  1801  002240  A88B               	btfss	3979,4,c	;volatile
  1802  002242  D003               	goto	l216
  1803                           
  1804                           ; BSR set to: 0
  1805                           ;main.c: 707: LATCbits.LATC4 = 0;
  1806  002244  988B               	bcf	3979,4,c	;volatile
  1807  002246                     L6:
  1808                           
  1809                           ;main.c: 708: bOn = 0;
  1810  002246  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1811                           
  1812                           ;main.c: 709: } else {
  1813  002248  D010               	goto	l10200
  1814  00224A                     l216:
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;main.c: 710: LATCbits.LATC4 = 1;
  1818  00224A  888B               	bsf	3979,4,c	;volatile
  1819  00224C  D7D8               	goto	l10170
  1820  00224E                     l10198:
  1821                           
  1822                           ; BSR set to: 0
  1823  00224E  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1824                           
  1825                           ; Switch size 1, requested type "speed"
  1826                           ; Number of cases is 7, Range of values is 0 to 6
  1827                           ; switch strategies available:
  1828                           ; Name         Instructions Cycles
  1829                           ; simple_byte           22    12 (average)
  1830                           ;	Chosen strategy is simple_byte
  1831  002250  E0D1               	bz	l196
  1832  002252  0A01               	xorlw	1	; case 1
  1833  002254  E0D7               	bz	l200
  1834  002256  0A03               	xorlw	3	; case 2
  1835  002258  E0DB               	bz	l203
  1836  00225A  0A01               	xorlw	1	; case 3
  1837  00225C  E0DF               	bz	l206
  1838  00225E  0A07               	xorlw	7	; case 4
  1839  002260  E0E3               	bz	l209
  1840  002262  0A01               	xorlw	1	; case 5
  1841  002264  E0E7               	bz	l212
  1842  002266  0A03               	xorlw	3	; case 6
  1843  002268  E0EB               	bz	l215
  1844  00226A                     l10200:
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;main.c: 718: relay_pulse_timer[ i ] =
  1848                           ;main.c: 719: Read_b_eep(0x43 + 18 + 2*i) * 256 +
  1849                           ;main.c: 721: Read_b_eep(0x43 + 19 + 2*i);
  1850  00226A  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1851  00226C  0D02               	mullw	2
  1852  00226E  0E55               	movlw	85
  1853  002270  24F3               	addwf	prodl,w,c
  1854  002272  6E08               	movwf	?_Read_b_eep,c
  1855  002274  0E00               	movlw	0
  1856  002276  20F4               	addwfc	prodh,w,c
  1857  002278  6E09               	movwf	?_Read_b_eep+1,c
  1858  00227A  EC0B  F020         	call	_Read_b_eep	;wreg free
  1859  00227E  0100               	movlb	0	; () banked
  1860  002280  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1861  002282  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1862  002284  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1863  002286  0D02               	mullw	2
  1864  002288  0E56               	movlw	86
  1865  00228A  24F3               	addwf	prodl,w,c
  1866  00228C  6E08               	movwf	?_Read_b_eep,c
  1867  00228E  0E00               	movlw	0
  1868  002290  20F4               	addwfc	prodh,w,c
  1869  002292  6E09               	movwf	?_Read_b_eep+1,c
  1870  002294  EC0B  F020         	call	_Read_b_eep	;wreg free
  1871  002298  0100               	movlb	0	; () banked
  1872  00229A  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1873  00229C  0E00               	movlw	0
  1874  00229E  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1875  0022A0  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1876  0022A2  0D02               	mullw	2
  1877  0022A4  50F3               	movf	prodl,w,c
  1878  0022A6  0F70               	addlw	low _relay_pulse_timer
  1879  0022A8  6ED9               	movwf	fsr2l,c
  1880  0022AA  6ADA               	clrf	fsr2h,c
  1881  0022AC  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1882  0022B0  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1883                           
  1884                           ; BSR set to: 0
  1885                           ;main.c: 724: if ( bOn ) {
  1886  0022B4  51CF               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  1887  0022B6  E044               	bz	l218
  1888                           
  1889                           ; BSR set to: 0
  1890                           ;main.c: 727: if ( Read_b_eep(0x43 + 10 + i) & 0x04 ) {
  1891  0022B8  0E4D               	movlw	77
  1892  0022BA  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1893  0022BC  6E08               	movwf	?_Read_b_eep,c
  1894  0022BE  6A09               	clrf	?_Read_b_eep+1,c
  1895  0022C0  0E00               	movlw	0
  1896  0022C2  2209               	addwfc	?_Read_b_eep+1,f,c
  1897  0022C4  EC0B  F020         	call	_Read_b_eep	;wreg free
  1898  0022C8  0100               	movlb	0	; () banked
  1899  0022CA  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1900  0022CC  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1901  0022CE  D025               	goto	l10208
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;main.c: 728: relay_protection_timer[ i ] =
  1905                           ;main.c: 729: Read_b_eep(0x43 + 34 + 2*i) * 256 +
  1906                           ;main.c: 730: Read_b_eep(0x43 + 35 + 2*i);
  1907  0022D0  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1908  0022D2  0D02               	mullw	2
  1909  0022D4  0E65               	movlw	101
  1910  0022D6  24F3               	addwf	prodl,w,c
  1911  0022D8  6E08               	movwf	?_Read_b_eep,c
  1912  0022DA  0E00               	movlw	0
  1913  0022DC  20F4               	addwfc	prodh,w,c
  1914  0022DE  6E09               	movwf	?_Read_b_eep+1,c
  1915  0022E0  EC0B  F020         	call	_Read_b_eep	;wreg free
  1916  0022E4  0100               	movlb	0	; () banked
  1917  0022E6  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1918  0022E8  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1919  0022EA  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1920  0022EC  0D02               	mullw	2
  1921  0022EE  0E66               	movlw	102
  1922  0022F0  24F3               	addwf	prodl,w,c
  1923  0022F2  6E08               	movwf	?_Read_b_eep,c
  1924  0022F4  0E00               	movlw	0
  1925  0022F6  20F4               	addwfc	prodh,w,c
  1926  0022F8  6E09               	movwf	?_Read_b_eep+1,c
  1927  0022FA  EC0B  F020         	call	_Read_b_eep	;wreg free
  1928  0022FE  0100               	movlb	0	; () banked
  1929  002300  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1930  002302  0E00               	movlw	0
  1931  002304  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1932  002306  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1933  002308  0D02               	mullw	2
  1934  00230A  50F3               	movf	prodl,w,c
  1935  00230C  0F60               	addlw	low _relay_protection_timer
  1936  00230E  6ED9               	movwf	fsr2l,c
  1937  002310  6ADA               	clrf	fsr2h,c
  1938  002312  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1939  002316  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1940  00231A                     l10208:
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;main.c: 731: }
  1944                           ;main.c: 733: if ( ctrlreg & 0x08 ) {
  1945  00231A  A7D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  1946  00231C  D007               	goto	l10212
  1947                           
  1948                           ; BSR set to: 0
  1949                           ;main.c: 734: SendInformationEvent( i, 20,
  1950                           ;main.c: 735: 3 );
  1951  00231E  0E14               	movlw	20
  1952  002320  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1953  002322  0E03               	movlw	3
  1954  002324  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1955  002326  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1956  002328  EC67  F01D         	call	_SendInformationEvent
  1957  00232C                     l10212:
  1958                           
  1959                           ; BSR set to: 0
  1960                           ;main.c: 736: }
  1961                           ;main.c: 738: if ( ctrlreg & 0x20 ) {
  1962  00232C  ABD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  1963  00232E  D03A               	goto	l10224
  1964                           
  1965                           ; BSR set to: 0
  1966                           ;main.c: 739: SendInformationEvent( i, 20,
  1967                           ;main.c: 740: 25 );
  1968  002330  0E14               	movlw	20
  1969  002332  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1970  002334  0E19               	movlw	25
  1971  002336  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1972  002338  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1973  00233A  EC67  F01D         	call	_SendInformationEvent
  1974  00233E  D032               	goto	l10224
  1975  002340                     l218:
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;main.c: 745: if ( ctrlreg & 0x10 ) {
  1979  002340  A9D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  1980  002342  D007               	goto	l10218
  1981                           
  1982                           ; BSR set to: 0
  1983                           ;main.c: 746: SendInformationEvent( i, 20,
  1984                           ;main.c: 747: 4 );
  1985  002344  0E14               	movlw	20
  1986  002346  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1987  002348  0E04               	movlw	4
  1988  00234A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1989  00234C  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1990  00234E  EC67  F01D         	call	_SendInformationEvent
  1991  002352                     l10218:
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;main.c: 748: }
  1995                           ;main.c: 750: if (ctrlreg & 0x40) {
  1996  002352  ADD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),6,b
  1997  002354  D027               	goto	l10224
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;main.c: 751: SendInformationEvent( i, 20,
  2001                           ;main.c: 752: 24 );
  2002  002356  0E14               	movlw	20
  2003  002358  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2004  00235A  0E18               	movlw	24
  2005  00235C  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2006  00235E  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2007  002360  EC67  F01D         	call	_SendInformationEvent
  2008  002364  D01F               	goto	l10224
  2009  002366                     l10222:
  2010                           
  2011                           ; BSR set to: 0
  2012                           ;main.c: 759: else {
  2013                           ;main.c: 761: relay_pulse_timer[ 0 ] =
  2014                           ;main.c: 762: Read_b_eep(0x43 + 18 + 2*i) * 256 +
  2015                           ;main.c: 763: Read_b_eep(0x43 + 19 + 2*i);
  2016  002366  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2017  002368  0D02               	mullw	2
  2018  00236A  0E56               	movlw	86
  2019  00236C  24F3               	addwf	prodl,w,c
  2020  00236E  6E08               	movwf	?_Read_b_eep,c
  2021  002370  0E00               	movlw	0
  2022  002372  20F4               	addwfc	prodh,w,c
  2023  002374  6E09               	movwf	?_Read_b_eep+1,c
  2024  002376  EC0B  F020         	call	_Read_b_eep	;wreg free
  2025  00237A  0100               	movlb	0	; () banked
  2026  00237C  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2027  00237E  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2028  002380  0D02               	mullw	2
  2029  002382  0E55               	movlw	85
  2030  002384  24F3               	addwf	prodl,w,c
  2031  002386  6E08               	movwf	?_Read_b_eep,c
  2032  002388  0E00               	movlw	0
  2033  00238A  20F4               	addwfc	prodh,w,c
  2034  00238C  6E09               	movwf	?_Read_b_eep+1,c
  2035  00238E  EC0B  F020         	call	_Read_b_eep	;wreg free
  2036  002392  0100               	movlb	0	; () banked
  2037  002394  6FCE               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2038  002396  6BCD               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2039  002398  51CC               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2040  00239A  25CD               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2041  00239C  6F70               	movwf	_relay_pulse_timer& (0+255),b
  2042  00239E  0E00               	movlw	0
  2043  0023A0  21CE               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2044  0023A2  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  2045  0023A4                     l10224:
  2046                           
  2047                           ; BSR set to: 0
  2048  0023A4  2BD1               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  2049  0023A6  D68A               	goto	l10136
  2050  0023A8                     l226:
  2051                           
  2052                           ; BSR set to: 0
  2053  0023A8  0012               	return	
  2054  0023AA                     __end_of_doApplicationOneSecondWork:
  2055                           	opt stack 0
  2056                           tblptru	equ	0xFF8
  2057                           prodh	equ	0xFF4
  2058                           prodl	equ	0xFF3
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           postinc2	equ	0xFDE
  2062                           postdec2	equ	0xFDD
  2063                           fsr2h	equ	0xFDA
  2064                           fsr2l	equ	0xFD9
  2065                           status	equ	0xFD8
  2066                           
  2067 ;; *************** function _vscp_doOneSecondWork *****************
  2068 ;; Defined at:
  2069 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;		None               void
  2076 ;; Registers used:
  2077 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : F/0
  2080 ;;		On exit  : F/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2083 ;;      Params:         0       0       0       0       0       0       0
  2084 ;;      Locals:         0       0       0       0       0       0       0
  2085 ;;      Temps:          1       0       0       0       0       0       0
  2086 ;;      Totals:         1       0       0       0       0       0       0
  2087 ;;Total ram usage:        1 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; Hardware stack levels required when called:    8
  2090 ;; This function calls:
  2091 ;;		_vscp_getZone
  2092 ;;		_vscp_getSubzone
  2093 ;;		_vscp_sendHeartBeat
  2094 ;; This function is called by:
  2095 ;;		_main
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           	psect	text3
  2100  003B3A                     __ptext3:
  2101                           	opt stack 0
  2102  003B3A                     _vscp_doOneSecondWork:
  2103                           	opt stack 22
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;vscp_firmware.c: 526: ++vscp_second;
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;incstack = 0
  2110                           ;incstack = 0
  2111  003B3A  2B95               	incf	_vscp_second& (0+255),f,b
  2112                           
  2113                           ; BSR set to: 0
  2114                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  2115  003B3C  0E3B               	movlw	59
  2116  003B3E  6595               	cpfsgt	_vscp_second& (0+255),b
  2117  003B40  D00D               	goto	l8202
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;vscp_firmware.c: 529: vscp_second = 0;
  2121  003B42  6B95               	clrf	_vscp_second& (0+255),b
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;vscp_firmware.c: 530: vscp_minute++;
  2125  003B44  2B90               	incf	_vscp_minute& (0+255),f,b
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  2129  003B46  5192               	movf	_vscp_node_state& (0+255),w,b
  2130  003B48  0A03               	xorlw	3
  2131  003B4A  E108               	bnz	l8202
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  2135                           ;vscp_firmware.c: 535: vscp_getSubzone());
  2136  003B4C  EC1D  F020         	call	_vscp_getSubzone	;wreg free
  2137  003B50  0100               	movlb	0	; () banked
  2138  003B52  6FC5               	movwf	?_vscp_sendHeartBeat& (0+255),b
  2139  003B54  EC22  F020         	call	_vscp_getZone	;wreg free
  2140  003B58  ECC2  F01E         	call	_vscp_sendHeartBeat
  2141  003B5C                     l8202:
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;vscp_firmware.c: 536: }
  2145                           ;vscp_firmware.c: 537: }
  2146                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  2147  003B5C  0E3B               	movlw	59
  2148  003B5E  6590               	cpfsgt	_vscp_minute& (0+255),b
  2149  003B60  D002               	goto	l8208
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;vscp_firmware.c: 540: vscp_minute = 0;
  2153  003B62  6B90               	clrf	_vscp_minute& (0+255),b
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;vscp_firmware.c: 541: vscp_hour++;
  2157  003B64  2B8E               	incf	_vscp_hour& (0+255),f,b
  2158  003B66                     l8208:
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;vscp_firmware.c: 542: }
  2162                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  2163  003B66  0E17               	movlw	23
  2164  003B68  658E               	cpfsgt	_vscp_hour& (0+255),b
  2165  003B6A  D001               	goto	l8212
  2166                           
  2167                           ; BSR set to: 0
  2168  003B6C  6B8E               	clrf	_vscp_hour& (0+255),b
  2169  003B6E                     l8212:
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  2173  003B6E  5192               	movf	_vscp_node_state& (0+255),w,b
  2174  003B70  0A03               	xorlw	3
  2175  003B72  E109               	bnz	l1099
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  2179  003B74  2B8D               	incf	_vscp_guid_reset& (0+255),f,b
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  2183  003B76  C08D  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  2184  003B7A  0E0F               	movlw	15
  2185  003B7C  164D               	andwf	??_vscp_doOneSecondWork,f,c
  2186  003B7E  0E02               	movlw	2
  2187  003B80  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  2188  003B82  B0D8               	btfsc	status,0,c
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  2192  003B84  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  2193  003B86                     l1099:
  2194                           
  2195                           ; BSR set to: 0
  2196  003B86  0012               	return	
  2197  003B88                     __end_of_vscp_doOneSecondWork:
  2198                           	opt stack 0
  2199                           tblptru	equ	0xFF8
  2200                           prodh	equ	0xFF4
  2201                           prodl	equ	0xFF3
  2202                           postinc0	equ	0xFEE
  2203                           wreg	equ	0xFE8
  2204                           postinc2	equ	0xFDE
  2205                           postdec2	equ	0xFDD
  2206                           fsr2h	equ	0xFDA
  2207                           fsr2l	equ	0xFD9
  2208                           status	equ	0xFD8
  2209                           
  2210 ;; *************** function _vscp_sendHeartBeat *****************
  2211 ;; Defined at:
  2212 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;  zone            1    wreg     unsigned char 
  2215 ;;  subzone         1   20[BANK0 ] unsigned char 
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;  zone            1   75[COMRAM] unsigned char 
  2218 ;; Return value:  Size  Location     Type
  2219 ;;		None               void
  2220 ;; Registers used:
  2221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : F/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2227 ;;      Params:         0       1       0       0       0       0       0
  2228 ;;      Locals:         1       0       0       0       0       0       0
  2229 ;;      Temps:          0       0       0       0       0       0       0
  2230 ;;      Totals:         1       1       0       0       0       0       0
  2231 ;;Total ram usage:        2 bytes
  2232 ;; Hardware stack levels used:    1
  2233 ;; Hardware stack levels required when called:    7
  2234 ;; This function calls:
  2235 ;;		_vscp_sendEvent
  2236 ;; This function is called by:
  2237 ;;		_vscp_doOneSecondWork
  2238 ;; This function uses a non-reentrant model
  2239 ;;
  2240                           
  2241                           	psect	text4
  2242  003D84                     __ptext4:
  2243                           	opt stack 0
  2244  003D84                     _vscp_sendHeartBeat:
  2245                           	opt stack 22
  2246                           
  2247                           ; BSR set to: 0
  2248                           ;incstack = 0
  2249                           ;incstack = 0
  2250                           ;vscp_sendHeartBeat@zone stored from wreg
  2251  003D84  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  2252                           
  2253                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  2254  003D88  0E83               	movlw	131
  2255  003D8A  0100               	movlb	0	; () banked
  2256  003D8C  6FA4               	movwf	_vscp_omsg& (0+255),b
  2257                           
  2258                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  2259  003D8E  0E07               	movlw	7
  2260  003D90  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  2261                           
  2262                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  2263  003D92  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  2264  003D94  0E14               	movlw	20
  2265  003D96  6FA6               	movwf	(_vscp_omsg+2)& (0+255),b
  2266                           
  2267                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  2268  003D98  0E09               	movlw	9
  2269  003D9A  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  2273  003D9C  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  2277  003D9E  C04C  F0AA         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  2281  003DA2  C0C5  F0AB         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;vscp_firmware.c: 388: vscp_sendEvent();
  2285  003DA6  EFFB  F01E         	goto	_vscp_sendEvent	;wreg free
  2286  003DAA                     __end_of_vscp_sendHeartBeat:
  2287                           	opt stack 0
  2288                           tblptru	equ	0xFF8
  2289                           prodh	equ	0xFF4
  2290                           prodl	equ	0xFF3
  2291                           postinc0	equ	0xFEE
  2292                           wreg	equ	0xFE8
  2293                           postinc2	equ	0xFDE
  2294                           postdec2	equ	0xFDD
  2295                           fsr2h	equ	0xFDA
  2296                           fsr2l	equ	0xFD9
  2297                           status	equ	0xFD8
  2298                           
  2299 ;; *************** function _vscp_getSubzone *****************
  2300 ;; Defined at:
  2301 ;;		line 874 in file "../main.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;		None
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;		None
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      unsigned char 
  2308 ;; Registers used:
  2309 ;;		wreg, status,2, cstack
  2310 ;; Tracked objects:
  2311 ;;		On entry : F/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2315 ;;      Params:         0       0       0       0       0       0       0
  2316 ;;      Locals:         0       0       0       0       0       0       0
  2317 ;;      Temps:          0       0       0       0       0       0       0
  2318 ;;      Totals:         0       0       0       0       0       0       0
  2319 ;;Total ram usage:        0 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; Hardware stack levels required when called:    3
  2322 ;; This function calls:
  2323 ;;		_Read_b_eep
  2324 ;; This function is called by:
  2325 ;;		_vscp_doOneSecondWork
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	text5
  2330  00403A                     __ptext5:
  2331                           	opt stack 0
  2332  00403A                     _vscp_getSubzone:
  2333                           	opt stack 26
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;main.c: 875: return Read_b_eep(0x43 + 1);
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;incstack = 0
  2340                           ;incstack = 0
  2341  00403A  6A09               	clrf	?_Read_b_eep+1,c
  2342  00403C  0E44               	movlw	68
  2343  00403E  6E08               	movwf	?_Read_b_eep,c
  2344  004040  EF0B  F020         	goto	_Read_b_eep	;wreg free
  2345  004044                     __end_of_vscp_getSubzone:
  2346                           	opt stack 0
  2347                           tblptru	equ	0xFF8
  2348                           prodh	equ	0xFF4
  2349                           prodl	equ	0xFF3
  2350                           postinc0	equ	0xFEE
  2351                           wreg	equ	0xFE8
  2352                           postinc2	equ	0xFDE
  2353                           postdec2	equ	0xFDD
  2354                           fsr2h	equ	0xFDA
  2355                           fsr2l	equ	0xFD9
  2356                           status	equ	0xFD8
  2357                           
  2358 ;; *************** function _vscp_getZone *****************
  2359 ;; Defined at:
  2360 ;;		line 865 in file "../main.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;		None
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;		None
  2365 ;; Return value:  Size  Location     Type
  2366 ;;                  1    wreg      unsigned char 
  2367 ;; Registers used:
  2368 ;;		wreg, status,2, cstack
  2369 ;; Tracked objects:
  2370 ;;		On entry : F/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2374 ;;      Params:         0       0       0       0       0       0       0
  2375 ;;      Locals:         0       0       0       0       0       0       0
  2376 ;;      Temps:          0       0       0       0       0       0       0
  2377 ;;      Totals:         0       0       0       0       0       0       0
  2378 ;;Total ram usage:        0 bytes
  2379 ;; Hardware stack levels used:    1
  2380 ;; Hardware stack levels required when called:    3
  2381 ;; This function calls:
  2382 ;;		_Read_b_eep
  2383 ;; This function is called by:
  2384 ;;		_vscp_doOneSecondWork
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text6
  2389  004044                     __ptext6:
  2390                           	opt stack 0
  2391  004044                     _vscp_getZone:
  2392                           	opt stack 26
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;main.c: 866: return Read_b_eep(0x43 + 0);
  2396                           
  2397                           ;incstack = 0
  2398                           ;incstack = 0
  2399  004044  6A09               	clrf	?_Read_b_eep+1,c
  2400  004046  0E43               	movlw	67
  2401  004048  6E08               	movwf	?_Read_b_eep,c
  2402  00404A  EF0B  F020         	goto	_Read_b_eep	;wreg free
  2403  00404E                     __end_of_vscp_getZone:
  2404                           	opt stack 0
  2405                           tblptru	equ	0xFF8
  2406                           prodh	equ	0xFF4
  2407                           prodl	equ	0xFF3
  2408                           postinc0	equ	0xFEE
  2409                           wreg	equ	0xFE8
  2410                           postinc2	equ	0xFDE
  2411                           postdec2	equ	0xFDD
  2412                           fsr2h	equ	0xFDA
  2413                           fsr2l	equ	0xFD9
  2414                           status	equ	0xFD8
  2415                           
  2416 ;; *************** function _vscp_error *****************
  2417 ;; Defined at:
  2418 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;		None
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;		None
  2423 ;; Return value:  Size  Location     Type
  2424 ;;		None               void
  2425 ;; Registers used:
  2426 ;;		None
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2432 ;;      Params:         0       0       0       0       0       0       0
  2433 ;;      Locals:         0       0       0       0       0       0       0
  2434 ;;      Temps:          0       0       0       0       0       0       0
  2435 ;;      Totals:         0       0       0       0       0       0       0
  2436 ;;Total ram usage:        0 bytes
  2437 ;; Hardware stack levels used:    1
  2438 ;; Hardware stack levels required when called:    2
  2439 ;; This function calls:
  2440 ;;		Nothing
  2441 ;; This function is called by:
  2442 ;;		_main
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           	psect	text7
  2447  004084                     __ptext7:
  2448                           	opt stack 0
  2449  004084                     _vscp_error:
  2450                           	opt stack 28
  2451                           
  2452                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  2453                           
  2454                           ;incstack = 0
  2455                           ;incstack = 0
  2456  004084  6A56               	clrf	_vscp_initledfunc,c
  2457  004086  0012               	return	
  2458  004088                     __end_of_vscp_error:
  2459                           	opt stack 0
  2460                           tblptru	equ	0xFF8
  2461                           prodh	equ	0xFF4
  2462                           prodl	equ	0xFF3
  2463                           postinc0	equ	0xFEE
  2464                           wreg	equ	0xFE8
  2465                           postinc2	equ	0xFDE
  2466                           postdec2	equ	0xFDD
  2467                           fsr2h	equ	0xFDA
  2468                           fsr2l	equ	0xFD9
  2469                           status	equ	0xFD8
  2470                           
  2471 ;; *************** function _doDM *****************
  2472 ;; Defined at:
  2473 ;;		line 1630 in file "../main.c"
  2474 ;; Parameters:    Size  Location     Type
  2475 ;;		None
  2476 ;; Auto vars:     Size  Location     Type
  2477 ;;  class_mask      2   33[BANK0 ] unsigned short 
  2478 ;;  class_filter    2   31[BANK0 ] unsigned short 
  2479 ;;  i               1   44[BANK0 ] unsigned char 
  2480 ;;  dmflags         1   43[BANK0 ] unsigned char 
  2481 ;;  type_mask       1   36[BANK0 ] unsigned char 
  2482 ;;  type_filter     1   35[BANK0 ] unsigned char 
  2483 ;; Return value:  Size  Location     Type
  2484 ;;		None               void
  2485 ;; Registers used:
  2486 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2487 ;; Tracked objects:
  2488 ;;		On entry : 0/0
  2489 ;;		On exit  : F/0
  2490 ;;		Unchanged: 0/0
  2491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2492 ;;      Params:         0       0       0       0       0       0       0
  2493 ;;      Locals:         0      14       0       0       0       0       0
  2494 ;;      Temps:          0       3       0       0       0       0       0
  2495 ;;      Totals:         0      17       0       0       0       0       0
  2496 ;;Total ram usage:       17 bytes
  2497 ;; Hardware stack levels used:    1
  2498 ;; Hardware stack levels required when called:    8
  2499 ;; This function calls:
  2500 ;;		_Read_b_eep
  2501 ;;		_doActionOff
  2502 ;;		_doActionOn
  2503 ;;		_doActionPulse
  2504 ;;		_doActionStatus
  2505 ;;		_doActionDisable
  2506 ;;		_doActionToggle
  2507 ;; This function is called by:
  2508 ;;		_main
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text8
  2513  001DBA                     __ptext8:
  2514                           	opt stack 0
  2515  001DBA                     _doDM:
  2516                           	opt stack 22
  2517                           
  2518                           ;main.c: 1631: unsigned char i;
  2519                           ;main.c: 1632: unsigned char dmflags;
  2520                           ;main.c: 1633: unsigned short class_filter;
  2521                           ;main.c: 1634: unsigned short class_mask;
  2522                           ;main.c: 1635: unsigned char type_filter;
  2523                           ;main.c: 1636: unsigned char type_mask;
  2524                           ;main.c: 1639: if ( 0 == vscp_imsg.vscp_class ) return;
  2525                           
  2526                           ;incstack = 0
  2527                           ;incstack = 0
  2528  001DBA  0100               	movlb	0	; () banked
  2529  001DBC  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  2530  001DBE  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2531  001DC0  E101 D179          	bz	l410
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;main.c: 1641: for (i = 0; i < 7; i++) {
  2535  001DC4  6BDD               	clrf	doDM@i& (0+255),b
  2536  001DC6                     l10084:
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;main.c: 1644: dmflags = Read_b_eep(0x43 + 72 + 1 + (8 * i));
  2540  001DC6  51DD               	movf	doDM@i& (0+255),w,b
  2541  001DC8  6FCD               	movwf	??_doDM& (0+255),b
  2542  001DCA  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2543  001DCC  90D8               	bcf	status,0,c
  2544  001DCE  37CD               	rlcf	??_doDM& (0+255),f,b
  2545  001DD0  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2546  001DD2  90D8               	bcf	status,0,c
  2547  001DD4  37CD               	rlcf	??_doDM& (0+255),f,b
  2548  001DD6  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2549  001DD8  90D8               	bcf	status,0,c
  2550  001DDA  37CD               	rlcf	??_doDM& (0+255),f,b
  2551  001DDC  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2552  001DDE  0E8C               	movlw	140
  2553  001DE0  25CD               	addwf	??_doDM& (0+255),w,b
  2554  001DE2  6E08               	movwf	?_Read_b_eep,c
  2555  001DE4  0E00               	movlw	0
  2556  001DE6  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2557  001DE8  6E09               	movwf	?_Read_b_eep+1,c
  2558  001DEA  EC0B  F020         	call	_Read_b_eep	;wreg free
  2559  001DEE  0100               	movlb	0	; () banked
  2560  001DF0  6FDC               	movwf	doDM@dmflags& (0+255),b
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;main.c: 1647: if ( dmflags & 0x80 ) {
  2564  001DF2  AFDC               	btfss	doDM@dmflags& (0+255),7,b
  2565  001DF4  D15B               	goto	l10130
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;main.c: 1650: if ( ( dmflags & 0x40 ) &&
  2569                           ;main.c: 1651: ( vscp_imsg.oaddr != Read_b_eep(0x43 + 72 + (8 * i)) ) ) {
  2570  001DF6  ADDC               	btfss	doDM@dmflags& (0+255),6,b
  2571  001DF8  D018               	goto	l10094
  2572                           
  2573                           ; BSR set to: 0
  2574  001DFA  51DD               	movf	doDM@i& (0+255),w,b
  2575  001DFC  6FCD               	movwf	??_doDM& (0+255),b
  2576  001DFE  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2577  001E00  90D8               	bcf	status,0,c
  2578  001E02  37CD               	rlcf	??_doDM& (0+255),f,b
  2579  001E04  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2580  001E06  90D8               	bcf	status,0,c
  2581  001E08  37CD               	rlcf	??_doDM& (0+255),f,b
  2582  001E0A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2583  001E0C  90D8               	bcf	status,0,c
  2584  001E0E  37CD               	rlcf	??_doDM& (0+255),f,b
  2585  001E10  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2586  001E12  0E8B               	movlw	139
  2587  001E14  25CD               	addwf	??_doDM& (0+255),w,b
  2588  001E16  6E08               	movwf	?_Read_b_eep,c
  2589  001E18  0E00               	movlw	0
  2590  001E1A  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2591  001E1C  6E09               	movwf	?_Read_b_eep+1,c
  2592  001E1E  EC0B  F020         	call	_Read_b_eep	;wreg free
  2593  001E22  0100               	movlb	0	; () banked
  2594  001E24  199B               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2595  001E26  E001 D141          	bnz	l10130
  2596  001E2A                     l10094:
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;main.c: 1653: }
  2600                           ;main.c: 1677: class_filter = ( dmflags & 0x01)*256 +
  2601                           ;main.c: 1678: Read_b_eep(0x43 + 72 + (8 * i) + 3);
  2602  001E2A  51DD               	movf	doDM@i& (0+255),w,b
  2603  001E2C  0D08               	mullw	8
  2604  001E2E  0E8E               	movlw	142
  2605  001E30  24F3               	addwf	prodl,w,c
  2606  001E32  6E08               	movwf	?_Read_b_eep,c
  2607  001E34  0E00               	movlw	0
  2608  001E36  20F4               	addwfc	prodh,w,c
  2609  001E38  6E09               	movwf	?_Read_b_eep+1,c
  2610  001E3A  EC0B  F020         	call	_Read_b_eep	;wreg free
  2611  001E3E  0100               	movlb	0	; () banked
  2612  001E40  6FCD               	movwf	??_doDM& (0+255),b
  2613  001E42  51DC               	movf	doDM@dmflags& (0+255),w,b
  2614  001E44  0B01               	andlw	1
  2615  001E46  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2616  001E48  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2617  001E4A  51CD               	movf	??_doDM& (0+255),w,b
  2618  001E4C  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2619  001E4E  6FD0               	movwf	doDM@class_filter& (0+255),b
  2620  001E50  0E00               	movlw	0
  2621  001E52  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2622  001E54  6FD1               	movwf	(doDM@class_filter+1)& (0+255),b
  2623                           
  2624                           ;main.c: 1682: class_mask = ( dmflags & 0x02)*256 +
  2625                           ;main.c: 1683: Read_b_eep(0x43 + 72 + (8 * i) + 2);
  2626  001E56  51DD               	movf	doDM@i& (0+255),w,b
  2627  001E58  0D08               	mullw	8
  2628  001E5A  0E8D               	movlw	141
  2629  001E5C  24F3               	addwf	prodl,w,c
  2630  001E5E  6E08               	movwf	?_Read_b_eep,c
  2631  001E60  0E00               	movlw	0
  2632  001E62  20F4               	addwfc	prodh,w,c
  2633  001E64  6E09               	movwf	?_Read_b_eep+1,c
  2634  001E66  EC0B  F020         	call	_Read_b_eep	;wreg free
  2635  001E6A  0100               	movlb	0	; () banked
  2636  001E6C  6FCD               	movwf	??_doDM& (0+255),b
  2637  001E6E  51DC               	movf	doDM@dmflags& (0+255),w,b
  2638  001E70  0B02               	andlw	2
  2639  001E72  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2640  001E74  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2641  001E76  51CD               	movf	??_doDM& (0+255),w,b
  2642  001E78  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2643  001E7A  6FD2               	movwf	doDM@class_mask& (0+255),b
  2644  001E7C  0E00               	movlw	0
  2645  001E7E  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2646  001E80  6FD3               	movwf	(doDM@class_mask+1)& (0+255),b
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;main.c: 1687: type_filter = Read_b_eep(0x43 + 72 + (8 * i) + 5);
  2650  001E82  51DD               	movf	doDM@i& (0+255),w,b
  2651  001E84  6FCD               	movwf	??_doDM& (0+255),b
  2652  001E86  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2653  001E88  90D8               	bcf	status,0,c
  2654  001E8A  37CD               	rlcf	??_doDM& (0+255),f,b
  2655  001E8C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2656  001E8E  90D8               	bcf	status,0,c
  2657  001E90  37CD               	rlcf	??_doDM& (0+255),f,b
  2658  001E92  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2659  001E94  90D8               	bcf	status,0,c
  2660  001E96  37CD               	rlcf	??_doDM& (0+255),f,b
  2661  001E98  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2662  001E9A  0E90               	movlw	144
  2663  001E9C  25CD               	addwf	??_doDM& (0+255),w,b
  2664  001E9E  6E08               	movwf	?_Read_b_eep,c
  2665  001EA0  0E00               	movlw	0
  2666  001EA2  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2667  001EA4  6E09               	movwf	?_Read_b_eep+1,c
  2668  001EA6  EC0B  F020         	call	_Read_b_eep	;wreg free
  2669  001EAA  0100               	movlb	0	; () banked
  2670  001EAC  6FD4               	movwf	doDM@type_filter& (0+255),b
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;main.c: 1691: type_mask = Read_b_eep(0x43 + 72 + (8 * i) + 4);
  2674  001EAE  51DD               	movf	doDM@i& (0+255),w,b
  2675  001EB0  6FCD               	movwf	??_doDM& (0+255),b
  2676  001EB2  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2677  001EB4  90D8               	bcf	status,0,c
  2678  001EB6  37CD               	rlcf	??_doDM& (0+255),f,b
  2679  001EB8  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2680  001EBA  90D8               	bcf	status,0,c
  2681  001EBC  37CD               	rlcf	??_doDM& (0+255),f,b
  2682  001EBE  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2683  001EC0  90D8               	bcf	status,0,c
  2684  001EC2  37CD               	rlcf	??_doDM& (0+255),f,b
  2685  001EC4  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2686  001EC6  0E8F               	movlw	143
  2687  001EC8  25CD               	addwf	??_doDM& (0+255),w,b
  2688  001ECA  6E08               	movwf	?_Read_b_eep,c
  2689  001ECC  0E00               	movlw	0
  2690  001ECE  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2691  001ED0  6E09               	movwf	?_Read_b_eep+1,c
  2692  001ED2  EC0B  F020         	call	_Read_b_eep	;wreg free
  2693  001ED6  0100               	movlb	0	; () banked
  2694  001ED8  6FD5               	movwf	doDM@type_mask& (0+255),b
  2695                           
  2696                           ; BSR set to: 0
  2697                           ;main.c: 1696: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2698                           ;main.c: 1697: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2699  001EDA  EE20  F098         	lfsr	2,_vscp_imsg+2
  2700  001EDE  CFDE F0CD          	movff	postinc2,??_doDM
  2701  001EE2  CFDD F0CE          	movff	postdec2,??_doDM+1
  2702  001EE6  51D0               	movf	doDM@class_filter& (0+255),w,b
  2703  001EE8  1BCD               	xorwf	??_doDM& (0+255),f,b
  2704  001EEA  51D1               	movf	(doDM@class_filter+1)& (0+255),w,b
  2705  001EEC  1BCE               	xorwf	(??_doDM+1)& (0+255),f,b
  2706  001EEE  51D2               	movf	doDM@class_mask& (0+255),w,b
  2707  001EF0  17CD               	andwf	??_doDM& (0+255),f,b
  2708  001EF2  51D3               	movf	(doDM@class_mask+1)& (0+255),w,b
  2709  001EF4  17CE               	andwf	(??_doDM+1)& (0+255),f,b
  2710  001EF6  51CE               	movf	(??_doDM+1)& (0+255),w,b
  2711  001EF8  11CD               	iorwf	??_doDM& (0+255),w,b
  2712  001EFA  E001 D0D7          	bnz	l10130
  2713                           
  2714                           ; BSR set to: 0
  2715  001EFE  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  2716  001F00  19D4               	xorwf	doDM@type_filter& (0+255),w,b
  2717  001F02  15D5               	andwf	doDM@type_mask& (0+255),w,b
  2718  001F04  E101 D0AF          	bz	l10128
  2719  001F08  D0D1               	goto	l10130
  2720  001F0A                     l10106:
  2721                           
  2722                           ;main.c: 1703: doActionOn( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2723  001F0A  0100               	movlb	0	; () banked
  2724  001F0C  51DD               	movf	doDM@i& (0+255),w,b
  2725  001F0E  6FCD               	movwf	??_doDM& (0+255),b
  2726  001F10  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2727  001F12  90D8               	bcf	status,0,c
  2728  001F14  37CD               	rlcf	??_doDM& (0+255),f,b
  2729  001F16  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2730  001F18  90D8               	bcf	status,0,c
  2731  001F1A  37CD               	rlcf	??_doDM& (0+255),f,b
  2732  001F1C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2733  001F1E  90D8               	bcf	status,0,c
  2734  001F20  37CD               	rlcf	??_doDM& (0+255),f,b
  2735  001F22  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2736  001F24  0E92               	movlw	146
  2737  001F26  25CD               	addwf	??_doDM& (0+255),w,b
  2738  001F28  6E08               	movwf	?_Read_b_eep,c
  2739  001F2A  0E00               	movlw	0
  2740  001F2C  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2741  001F2E  6E09               	movwf	?_Read_b_eep+1,c
  2742  001F30  EC0B  F020         	call	_Read_b_eep	;wreg free
  2743  001F34  0100               	movlb	0	; () banked
  2744  001F36  6FD6               	movwf	_doDM$2133& (0+255),b
  2745                           
  2746                           ; BSR set to: 0
  2747                           ;main.c: 1703: doActionOn( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2748  001F38  C0D6  F051         	movff	_doDM$2133,?_doActionOn
  2749  001F3C  51DC               	movf	doDM@dmflags& (0+255),w,b
  2750  001F3E  ECD5  F011         	call	_doActionOn
  2751                           
  2752                           ;main.c: 1704: break;
  2753  001F42  D0B4               	goto	l10130
  2754  001F44                     l10110:
  2755                           
  2756                           ;main.c: 1707: doActionOff( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2757  001F44  0100               	movlb	0	; () banked
  2758  001F46  51DD               	movf	doDM@i& (0+255),w,b
  2759  001F48  6FCD               	movwf	??_doDM& (0+255),b
  2760  001F4A  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2761  001F4C  90D8               	bcf	status,0,c
  2762  001F4E  37CD               	rlcf	??_doDM& (0+255),f,b
  2763  001F50  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2764  001F52  90D8               	bcf	status,0,c
  2765  001F54  37CD               	rlcf	??_doDM& (0+255),f,b
  2766  001F56  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2767  001F58  90D8               	bcf	status,0,c
  2768  001F5A  37CD               	rlcf	??_doDM& (0+255),f,b
  2769  001F5C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2770  001F5E  0E92               	movlw	146
  2771  001F60  25CD               	addwf	??_doDM& (0+255),w,b
  2772  001F62  6E08               	movwf	?_Read_b_eep,c
  2773  001F64  0E00               	movlw	0
  2774  001F66  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2775  001F68  6E09               	movwf	?_Read_b_eep+1,c
  2776  001F6A  EC0B  F020         	call	_Read_b_eep	;wreg free
  2777  001F6E  0100               	movlb	0	; () banked
  2778  001F70  6FD7               	movwf	_doDM$2134& (0+255),b
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;main.c: 1707: doActionOff( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2782  001F72  C0D7  F051         	movff	_doDM$2134,?_doActionOff
  2783  001F76  51DC               	movf	doDM@dmflags& (0+255),w,b
  2784  001F78  EC60  F01A         	call	_doActionOff
  2785                           
  2786                           ;main.c: 1708: break;
  2787  001F7C  D097               	goto	l10130
  2788  001F7E                     l10114:
  2789                           
  2790                           ;main.c: 1711: doActionPulse( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2791  001F7E  0100               	movlb	0	; () banked
  2792  001F80  51DD               	movf	doDM@i& (0+255),w,b
  2793  001F82  6FCD               	movwf	??_doDM& (0+255),b
  2794  001F84  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2795  001F86  90D8               	bcf	status,0,c
  2796  001F88  37CD               	rlcf	??_doDM& (0+255),f,b
  2797  001F8A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2798  001F8C  90D8               	bcf	status,0,c
  2799  001F8E  37CD               	rlcf	??_doDM& (0+255),f,b
  2800  001F90  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2801  001F92  90D8               	bcf	status,0,c
  2802  001F94  37CD               	rlcf	??_doDM& (0+255),f,b
  2803  001F96  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2804  001F98  0E92               	movlw	146
  2805  001F9A  25CD               	addwf	??_doDM& (0+255),w,b
  2806  001F9C  6E08               	movwf	?_Read_b_eep,c
  2807  001F9E  0E00               	movlw	0
  2808  001FA0  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2809  001FA2  6E09               	movwf	?_Read_b_eep+1,c
  2810  001FA4  EC0B  F020         	call	_Read_b_eep	;wreg free
  2811  001FA8  0100               	movlb	0	; () banked
  2812  001FAA  6FD8               	movwf	_doDM$2135& (0+255),b
  2813                           
  2814                           ;main.c: 1711: doActionPulse( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2815  001FAC  C0D8  F00A         	movff	_doDM$2135,?_doActionPulse
  2816  001FB0  51DC               	movf	doDM@dmflags& (0+255),w,b
  2817  001FB2  EC29  F014         	call	_doActionPulse
  2818                           
  2819                           ;main.c: 1712: break;
  2820  001FB6  D07A               	goto	l10130
  2821  001FB8                     l10116:
  2822                           
  2823                           ;main.c: 1715: doActionStatus( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2824  001FB8  0100               	movlb	0	; () banked
  2825  001FBA  51DD               	movf	doDM@i& (0+255),w,b
  2826  001FBC  6FCD               	movwf	??_doDM& (0+255),b
  2827  001FBE  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2828  001FC0  90D8               	bcf	status,0,c
  2829  001FC2  37CD               	rlcf	??_doDM& (0+255),f,b
  2830  001FC4  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2831  001FC6  90D8               	bcf	status,0,c
  2832  001FC8  37CD               	rlcf	??_doDM& (0+255),f,b
  2833  001FCA  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2834  001FCC  90D8               	bcf	status,0,c
  2835  001FCE  37CD               	rlcf	??_doDM& (0+255),f,b
  2836  001FD0  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2837  001FD2  0E92               	movlw	146
  2838  001FD4  25CD               	addwf	??_doDM& (0+255),w,b
  2839  001FD6  6E08               	movwf	?_Read_b_eep,c
  2840  001FD8  0E00               	movlw	0
  2841  001FDA  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2842  001FDC  6E09               	movwf	?_Read_b_eep+1,c
  2843  001FDE  EC0B  F020         	call	_Read_b_eep	;wreg free
  2844  001FE2  0100               	movlb	0	; () banked
  2845  001FE4  6FD9               	movwf	_doDM$2136& (0+255),b
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;main.c: 1715: doActionStatus( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2849  001FE6  C0D9  F051         	movff	_doDM$2136,?_doActionStatus
  2850  001FEA  51DC               	movf	doDM@dmflags& (0+255),w,b
  2851  001FEC  ECB8  F018         	call	_doActionStatus
  2852                           
  2853                           ;main.c: 1716: break;
  2854  001FF0  D05D               	goto	l10130
  2855  001FF2                     l10120:
  2856                           
  2857                           ;main.c: 1719: doActionDisable( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2858  001FF2  0100               	movlb	0	; () banked
  2859  001FF4  51DD               	movf	doDM@i& (0+255),w,b
  2860  001FF6  6FCD               	movwf	??_doDM& (0+255),b
  2861  001FF8  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2862  001FFA  90D8               	bcf	status,0,c
  2863  001FFC  37CD               	rlcf	??_doDM& (0+255),f,b
  2864  001FFE  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2865  002000  90D8               	bcf	status,0,c
  2866  002002  37CD               	rlcf	??_doDM& (0+255),f,b
  2867  002004  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2868  002006  90D8               	bcf	status,0,c
  2869  002008  37CD               	rlcf	??_doDM& (0+255),f,b
  2870  00200A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2871  00200C  0E92               	movlw	146
  2872  00200E  25CD               	addwf	??_doDM& (0+255),w,b
  2873  002010  6E08               	movwf	?_Read_b_eep,c
  2874  002012  0E00               	movlw	0
  2875  002014  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2876  002016  6E09               	movwf	?_Read_b_eep+1,c
  2877  002018  EC0B  F020         	call	_Read_b_eep	;wreg free
  2878  00201C  0100               	movlb	0	; () banked
  2879  00201E  6FDA               	movwf	_doDM$2137& (0+255),b
  2880                           
  2881                           ;main.c: 1719: doActionDisable( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2882  002020  C0DA  F00C         	movff	_doDM$2137,?_doActionDisable
  2883  002024  51DC               	movf	doDM@dmflags& (0+255),w,b
  2884  002026  EC58  F01C         	call	_doActionDisable
  2885                           
  2886                           ;main.c: 1720: break;
  2887  00202A  D040               	goto	l10130
  2888  00202C                     l10122:
  2889                           
  2890                           ;main.c: 1723: doActionToggle( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2891  00202C  0100               	movlb	0	; () banked
  2892  00202E  51DD               	movf	doDM@i& (0+255),w,b
  2893  002030  6FCD               	movwf	??_doDM& (0+255),b
  2894  002032  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2895  002034  90D8               	bcf	status,0,c
  2896  002036  37CD               	rlcf	??_doDM& (0+255),f,b
  2897  002038  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2898  00203A  90D8               	bcf	status,0,c
  2899  00203C  37CD               	rlcf	??_doDM& (0+255),f,b
  2900  00203E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2901  002040  90D8               	bcf	status,0,c
  2902  002042  37CD               	rlcf	??_doDM& (0+255),f,b
  2903  002044  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2904  002046  0E92               	movlw	146
  2905  002048  25CD               	addwf	??_doDM& (0+255),w,b
  2906  00204A  6E08               	movwf	?_Read_b_eep,c
  2907  00204C  0E00               	movlw	0
  2908  00204E  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2909  002050  6E09               	movwf	?_Read_b_eep+1,c
  2910  002052  EC0B  F020         	call	_Read_b_eep	;wreg free
  2911  002056  0100               	movlb	0	; () banked
  2912  002058  6FDB               	movwf	_doDM$2138& (0+255),b
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;main.c: 1723: doActionToggle( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2916  00205A  C0DB  F051         	movff	_doDM$2138,?_doActionToggle
  2917  00205E  51DC               	movf	doDM@dmflags& (0+255),w,b
  2918  002060  EC67  F017         	call	_doActionToggle
  2919                           
  2920                           ;main.c: 1724: break;
  2921  002064  D023               	goto	l10130
  2922  002066                     l10128:
  2923                           
  2924                           ; BSR set to: 0
  2925  002066  51DD               	movf	doDM@i& (0+255),w,b
  2926  002068  6FCD               	movwf	??_doDM& (0+255),b
  2927  00206A  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2928  00206C  90D8               	bcf	status,0,c
  2929  00206E  37CD               	rlcf	??_doDM& (0+255),f,b
  2930  002070  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2931  002072  90D8               	bcf	status,0,c
  2932  002074  37CD               	rlcf	??_doDM& (0+255),f,b
  2933  002076  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2934  002078  90D8               	bcf	status,0,c
  2935  00207A  37CD               	rlcf	??_doDM& (0+255),f,b
  2936  00207C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2937  00207E  0E91               	movlw	145
  2938  002080  25CD               	addwf	??_doDM& (0+255),w,b
  2939  002082  6E08               	movwf	?_Read_b_eep,c
  2940  002084  0E00               	movlw	0
  2941  002086  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2942  002088  6E09               	movwf	?_Read_b_eep+1,c
  2943  00208A  EC0B  F020         	call	_Read_b_eep	;wreg free
  2944                           
  2945                           ; Switch size 1, requested type "speed"
  2946                           ; Number of cases is 6, Range of values is 1 to 16
  2947                           ; switch strategies available:
  2948                           ; Name         Instructions Cycles
  2949                           ; simple_byte           19    10 (average)
  2950                           ;	Chosen strategy is simple_byte
  2951  00208E  0A01               	xorlw	1	; case 1
  2952  002090  E101 D73B          	bz	l10106
  2953  002094  0A03               	xorlw	3	; case 2
  2954  002096  E101 D755          	bz	l10110
  2955  00209A  0A01               	xorlw	1	; case 3
  2956  00209C  E101 D76F          	bz	l10114
  2957  0020A0  0A07               	xorlw	7	; case 4
  2958  0020A2  E0C4               	bz	l10122
  2959  0020A4  0A0E               	xorlw	14	; case 10
  2960  0020A6  E088               	bz	l10116
  2961  0020A8  0A1A               	xorlw	26	; case 16
  2962  0020AA  E0A3               	bz	l10120
  2963  0020AC                     l10130:
  2964  0020AC  0100               	movlb	0	; () banked
  2965  0020AE  2BDD               	incf	doDM@i& (0+255),f,b
  2966                           
  2967                           ; BSR set to: 0
  2968  0020B0  0E06               	movlw	6
  2969  0020B2  65DD               	cpfsgt	doDM@i& (0+255),b
  2970  0020B4  D688               	goto	l10084
  2971  0020B6                     l410:
  2972                           
  2973                           ; BSR set to: 0
  2974  0020B6  0012               	return	
  2975  0020B8                     __end_of_doDM:
  2976                           	opt stack 0
  2977                           tblptru	equ	0xFF8
  2978                           prodh	equ	0xFF4
  2979                           prodl	equ	0xFF3
  2980                           postinc0	equ	0xFEE
  2981                           wreg	equ	0xFE8
  2982                           postinc2	equ	0xFDE
  2983                           postdec2	equ	0xFDD
  2984                           fsr2h	equ	0xFDA
  2985                           fsr2l	equ	0xFD9
  2986                           status	equ	0xFD8
  2987                           
  2988 ;; *************** function _doActionToggle *****************
  2989 ;; Defined at:
  2990 ;;		line 2170 in file "../main.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;  dmflags         1    wreg     unsigned char 
  2993 ;;  arg             1   80[COMRAM] unsigned char 
  2994 ;; Auto vars:     Size  Location     Type
  2995 ;;  dmflags         1   24[BANK0 ] unsigned char 
  2996 ;;  i               1   27[BANK0 ] unsigned char 
  2997 ;;  bOn             1   26[BANK0 ] enum E15660
  2998 ;;  val             1   25[BANK0 ] unsigned char 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;		None               void
  3001 ;; Registers used:
  3002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3003 ;; Tracked objects:
  3004 ;;		On entry : F/0
  3005 ;;		On exit  : F/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3008 ;;      Params:         1       0       0       0       0       0       0
  3009 ;;      Locals:         0       4       0       0       0       0       0
  3010 ;;      Temps:          0       2       0       0       0       0       0
  3011 ;;      Totals:         1       6       0       0       0       0       0
  3012 ;;Total ram usage:        7 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    7
  3015 ;; This function calls:
  3016 ;;		_Read_b_eep
  3017 ;;		_SendInformationEvent
  3018 ;; This function is called by:
  3019 ;;		_doDM
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           	psect	text9
  3024  002ECE                     __ptext9:
  3025                           	opt stack 0
  3026  002ECE                     _doActionToggle:
  3027                           	opt stack 22
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;incstack = 0
  3031                           ;incstack = 0
  3032                           ;doActionToggle@dmflags stored from wreg
  3033  002ECE  CFE8 F0C9          	movff	wreg,doActionToggle@dmflags
  3034                           
  3035                           ; BSR set to: 0
  3036                           ;main.c: 2172: unsigned char i;
  3037                           ;main.c: 2173: unsigned char val;
  3038                           ;main.c: 2174: BOOL bOn = 0;
  3039  002ED2  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3040                           
  3041                           ;main.c: 2176: for ( i = 0; i < 8; i++ ) {
  3042  002ED4  6BCC               	clrf	doActionToggle@i& (0+255),b
  3043  002ED6                     l10850:
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;main.c: 2179: if ( !( arg & (1 << i) ) ) continue;
  3047  002ED6  C0CC  F0C7         	movff	doActionToggle@i,??_doActionToggle
  3048  002EDA  0E01               	movlw	1
  3049  002EDC  6FC8               	movwf	(??_doActionToggle+1)& (0+255),b
  3050  002EDE  2BC7               	incf	??_doActionToggle& (0+255),f,b
  3051  002EE0  D002               	goto	u13034
  3052  002EE2                     u13035:
  3053  002EE2  90D8               	bcf	status,0,c
  3054  002EE4  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3055  002EE6                     u13034:
  3056  002EE6  2FC7               	decfsz	??_doActionToggle& (0+255),f,b
  3057  002EE8  D7FC               	goto	u13035
  3058  002EEA  51C8               	movf	(??_doActionToggle+1)& (0+255),w,b
  3059  002EEC  1451               	andwf	doActionToggle@arg,w,c
  3060  002EEE  E101 D092          	bz	l10912
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;main.c: 2182: if ( dmflags & 0x10 ) {
  3064  002EF2  A9C9               	btfss	doActionToggle@dmflags& (0+255),4,b
  3065  002EF4  D011               	goto	l542
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;main.c: 2183: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3069  002EF6  90D8               	bcf	status,0,c
  3070  002EF8  35CC               	rlcf	doActionToggle@i& (0+255),w,b
  3071  002EFA  6FC7               	movwf	??_doActionToggle& (0+255),b
  3072  002EFC  6BC8               	clrf	(??_doActionToggle+1)& (0+255),b
  3073  002EFE  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3074  002F00  0E75               	movlw	117
  3075  002F02  25C7               	addwf	??_doActionToggle& (0+255),w,b
  3076  002F04  6E08               	movwf	?_Read_b_eep,c
  3077  002F06  0E00               	movlw	0
  3078  002F08  21C8               	addwfc	(??_doActionToggle+1)& (0+255),w,b
  3079  002F0A  6E09               	movwf	?_Read_b_eep+1,c
  3080  002F0C  EC0B  F020         	call	_Read_b_eep	;wreg free
  3081  002F10  0100               	movlb	0	; () banked
  3082  002F12  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3083  002F14  E001 D07F          	bnz	l10912
  3084  002F18                     l542:
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;main.c: 2186: }
  3088                           ;main.c: 2187: }
  3089                           ;main.c: 2190: if ( dmflags & 0x08 ) {
  3090  002F18  A7C9               	btfss	doActionToggle@dmflags& (0+255),3,b
  3091  002F1A  D010               	goto	l10862
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;main.c: 2191: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3095  002F1C  90D8               	bcf	status,0,c
  3096  002F1E  35CC               	rlcf	doActionToggle@i& (0+255),w,b
  3097  002F20  6FC7               	movwf	??_doActionToggle& (0+255),b
  3098  002F22  6BC8               	clrf	(??_doActionToggle+1)& (0+255),b
  3099  002F24  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3100  002F26  0E76               	movlw	118
  3101  002F28  25C7               	addwf	??_doActionToggle& (0+255),w,b
  3102  002F2A  6E08               	movwf	?_Read_b_eep,c
  3103  002F2C  0E00               	movlw	0
  3104  002F2E  21C8               	addwfc	(??_doActionToggle+1)& (0+255),w,b
  3105  002F30  6E09               	movwf	?_Read_b_eep+1,c
  3106  002F32  EC0B  F020         	call	_Read_b_eep	;wreg free
  3107  002F36  0100               	movlb	0	; () banked
  3108  002F38  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3109  002F3A  E16D               	bnz	l10912
  3110  002F3C                     l10862:
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;main.c: 2194: }
  3114                           ;main.c: 2195: }
  3115                           ;main.c: 2197: val = Read_b_eep(0x43 + 10 + i);
  3116  002F3C  0E4D               	movlw	77
  3117  002F3E  25CC               	addwf	doActionToggle@i& (0+255),w,b
  3118  002F40  6E08               	movwf	?_Read_b_eep,c
  3119  002F42  6A09               	clrf	?_Read_b_eep+1,c
  3120  002F44  0E00               	movlw	0
  3121  002F46  2209               	addwfc	?_Read_b_eep+1,f,c
  3122  002F48  EC0B  F020         	call	_Read_b_eep	;wreg free
  3123  002F4C  0100               	movlb	0	; () banked
  3124  002F4E  6FCA               	movwf	doActionToggle@val& (0+255),b
  3125                           
  3126                           ;main.c: 2199: switch ( i ) {
  3127  002F50  D02D               	goto	l10894
  3128  002F52                     l547:
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;main.c: 2202: if ( LATBbits.LATB4 ) {
  3132  002F52  A88A               	btfss	3978,4,c	;volatile
  3133  002F54  D002               	goto	l548
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;main.c: 2203: LATBbits.LATB4 = 0;
  3137  002F56  988A               	bcf	3978,4,c	;volatile
  3138  002F58  D025               	goto	L12
  3139  002F5A                     l548:
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;main.c: 2206: LATBbits.LATB4 = 1;
  3143  002F5A  888A               	bsf	3978,4,c	;volatile
  3144  002F5C                     l10866:
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;main.c: 2207: bOn = 1;
  3148  002F5C  0E01               	movlw	1
  3149  002F5E  6FCB               	movwf	doActionToggle@bOn& (0+255),b
  3150  002F60  D033               	goto	l10896
  3151  002F62                     l551:
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;main.c: 2212: if ( LATBbits.LATB1 ) {
  3155  002F62  A28A               	btfss	3978,1,c	;volatile
  3156  002F64  D002               	goto	l552
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;main.c: 2213: LATBbits.LATB1 = 0;
  3160  002F66  928A               	bcf	3978,1,c	;volatile
  3161  002F68  D01D               	goto	L12
  3162  002F6A                     l552:
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;main.c: 2216: LATBbits.LATB1 = 1;
  3166  002F6A  828A               	bsf	3978,1,c	;volatile
  3167  002F6C  D7F7               	goto	l10866
  3168  002F6E                     l554:
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;main.c: 2222: if ( LATBbits.LATB0 ) {
  3172  002F6E  A08A               	btfss	3978,0,c	;volatile
  3173  002F70  D002               	goto	l555
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;main.c: 2223: LATBbits.LATB0 = 0;
  3177  002F72  908A               	bcf	3978,0,c	;volatile
  3178  002F74  D017               	goto	L12
  3179  002F76                     l555:
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;main.c: 2226: LATBbits.LATB0 = 1;
  3183  002F76  808A               	bsf	3978,0,c	;volatile
  3184  002F78  D7F1               	goto	l10866
  3185  002F7A                     l557:
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;main.c: 2232: if ( LATCbits.LATC7 ) {
  3189  002F7A  AE8B               	btfss	3979,7,c	;volatile
  3190  002F7C  D002               	goto	l558
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;main.c: 2233: LATCbits.LATC7 = 0;
  3194  002F7E  9E8B               	bcf	3979,7,c	;volatile
  3195  002F80  D011               	goto	L12
  3196  002F82                     l558:
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;main.c: 2236: LATCbits.LATC7 = 1;
  3200  002F82  8E8B               	bsf	3979,7,c	;volatile
  3201  002F84  D7EB               	goto	l10866
  3202  002F86                     l560:
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;main.c: 2242: if ( LATCbits.LATC6 ) {
  3206  002F86  AC8B               	btfss	3979,6,c	;volatile
  3207  002F88  D002               	goto	l561
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;main.c: 2243: LATCbits.LATC6 = 0;
  3211  002F8A  9C8B               	bcf	3979,6,c	;volatile
  3212  002F8C  D00B               	goto	L12
  3213  002F8E                     l561:
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;main.c: 2246: LATCbits.LATC6 = 1;
  3217  002F8E  8C8B               	bsf	3979,6,c	;volatile
  3218  002F90  D7E5               	goto	l10866
  3219  002F92                     l563:
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;main.c: 2252: if ( LATCbits.LATC5 ) {
  3223  002F92  AA8B               	btfss	3979,5,c	;volatile
  3224  002F94  D002               	goto	l564
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;main.c: 2253: LATCbits.LATC5 = 0;
  3228  002F96  9A8B               	bcf	3979,5,c	;volatile
  3229  002F98  D005               	goto	L12
  3230  002F9A                     l564:
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;main.c: 2256: LATCbits.LATC5 = 1;
  3234  002F9A  8A8B               	bsf	3979,5,c	;volatile
  3235  002F9C  D7DF               	goto	l10866
  3236  002F9E                     l566:
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;main.c: 2262: if ( LATCbits.LATC4 ) {
  3240  002F9E  A88B               	btfss	3979,4,c	;volatile
  3241  002FA0  D003               	goto	l567
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;main.c: 2263: LATCbits.LATC4 = 0;
  3245  002FA2  988B               	bcf	3979,4,c	;volatile
  3246  002FA4                     L12:
  3247                           
  3248                           ;main.c: 2264: bOn = 0;
  3249  002FA4  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3250                           
  3251                           ;main.c: 2265: } else {
  3252  002FA6  D010               	goto	l10896
  3253  002FA8                     l567:
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;main.c: 2266: LATCbits.LATC4 = 1;
  3257  002FA8  888B               	bsf	3979,4,c	;volatile
  3258  002FAA  D7D8               	goto	l10866
  3259  002FAC                     l10894:
  3260                           
  3261                           ; BSR set to: 0
  3262  002FAC  51CC               	movf	doActionToggle@i& (0+255),w,b
  3263                           
  3264                           ; Switch size 1, requested type "speed"
  3265                           ; Number of cases is 7, Range of values is 0 to 6
  3266                           ; switch strategies available:
  3267                           ; Name         Instructions Cycles
  3268                           ; simple_byte           22    12 (average)
  3269                           ;	Chosen strategy is simple_byte
  3270  002FAE  E0D1               	bz	l547
  3271  002FB0  0A01               	xorlw	1	; case 1
  3272  002FB2  E0D7               	bz	l551
  3273  002FB4  0A03               	xorlw	3	; case 2
  3274  002FB6  E0DB               	bz	l554
  3275  002FB8  0A01               	xorlw	1	; case 3
  3276  002FBA  E0DF               	bz	l557
  3277  002FBC  0A07               	xorlw	7	; case 4
  3278  002FBE  E0E3               	bz	l560
  3279  002FC0  0A01               	xorlw	1	; case 5
  3280  002FC2  E0E7               	bz	l563
  3281  002FC4  0A03               	xorlw	3	; case 6
  3282  002FC6  E0EB               	bz	l566
  3283  002FC8                     l10896:
  3284                           
  3285                           ; BSR set to: 0
  3286                           ;main.c: 2273: if ( bOn ) {
  3287  002FC8  51CB               	movf	doActionToggle@bOn& (0+255),w,b
  3288  002FCA  E013               	bz	l569
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;main.c: 2276: if ( val & 0x08 ) {
  3292  002FCC  A7CA               	btfss	doActionToggle@val& (0+255),3,b
  3293  002FCE  D007               	goto	l10902
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;main.c: 2277: SendInformationEvent( i, 20, 3 );
  3297  002FD0  0E14               	movlw	20
  3298  002FD2  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3299  002FD4  0E03               	movlw	3
  3300  002FD6  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3301  002FD8  51CC               	movf	doActionToggle@i& (0+255),w,b
  3302  002FDA  EC67  F01D         	call	_SendInformationEvent
  3303  002FDE                     l10902:
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;main.c: 2278: }
  3307                           ;main.c: 2281: if ( val & 0x20 ) {
  3308  002FDE  ABCA               	btfss	doActionToggle@val& (0+255),5,b
  3309  002FE0  D01A               	goto	l10912
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;main.c: 2282: SendInformationEvent( i, 20, 25 );
  3313  002FE2  0E14               	movlw	20
  3314  002FE4  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3315  002FE6  0E19               	movlw	25
  3316  002FE8  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3317  002FEA  51CC               	movf	doActionToggle@i& (0+255),w,b
  3318  002FEC  EC67  F01D         	call	_SendInformationEvent
  3319  002FF0  D012               	goto	l10912
  3320  002FF2                     l569:
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;main.c: 2286: else {
  3324                           ;main.c: 2289: if ( val & 0x10 ) {
  3325  002FF2  A9CA               	btfss	doActionToggle@val& (0+255),4,b
  3326  002FF4  D007               	goto	l10908
  3327                           
  3328                           ; BSR set to: 0
  3329                           ;main.c: 2290: SendInformationEvent( i, 20, 4 );
  3330  002FF6  0E14               	movlw	20
  3331  002FF8  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3332  002FFA  0E04               	movlw	4
  3333  002FFC  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3334  002FFE  51CC               	movf	doActionToggle@i& (0+255),w,b
  3335  003000  EC67  F01D         	call	_SendInformationEvent
  3336  003004                     l10908:
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;main.c: 2291: }
  3340                           ;main.c: 2294: if (val & 0x40 ) {
  3341  003004  ADCA               	btfss	doActionToggle@val& (0+255),6,b
  3342  003006  D007               	goto	l10912
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;main.c: 2295: SendInformationEvent( i, 20, 24 );
  3346  003008  0E14               	movlw	20
  3347  00300A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3348  00300C  0E18               	movlw	24
  3349  00300E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3350  003010  51CC               	movf	doActionToggle@i& (0+255),w,b
  3351  003012  EC67  F01D         	call	_SendInformationEvent
  3352  003016                     l10912:
  3353                           
  3354                           ; BSR set to: 0
  3355  003016  2BCC               	incf	doActionToggle@i& (0+255),f,b
  3356                           
  3357                           ; BSR set to: 0
  3358  003018  0E07               	movlw	7
  3359  00301A  65CC               	cpfsgt	doActionToggle@i& (0+255),b
  3360  00301C  D75C               	goto	l10850
  3361                           
  3362                           ; BSR set to: 0
  3363  00301E  0C07               	retlw	7
  3364  003020                     __end_of_doActionToggle:
  3365                           	opt stack 0
  3366                           tblptru	equ	0xFF8
  3367                           prodh	equ	0xFF4
  3368                           prodl	equ	0xFF3
  3369                           postinc0	equ	0xFEE
  3370                           wreg	equ	0xFE8
  3371                           postinc2	equ	0xFDE
  3372                           postdec2	equ	0xFDD
  3373                           fsr2h	equ	0xFDA
  3374                           fsr2l	equ	0xFD9
  3375                           status	equ	0xFD8
  3376                           
  3377 ;; *************** function _doActionDisable *****************
  3378 ;; Defined at:
  3379 ;;		line 2133 in file "../main.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;  dmflags         1    wreg     unsigned char 
  3382 ;;  arg             1   11[COMRAM] unsigned char 
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;  dmflags         1   15[COMRAM] unsigned char 
  3385 ;;  i               1   16[COMRAM] unsigned char 
  3386 ;;  val             1   14[COMRAM] unsigned char 
  3387 ;; Return value:  Size  Location     Type
  3388 ;;		None               void
  3389 ;; Registers used:
  3390 ;;		wreg, status,2, status,0, cstack
  3391 ;; Tracked objects:
  3392 ;;		On entry : F/0
  3393 ;;		On exit  : 0/0
  3394 ;;		Unchanged: 0/0
  3395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3396 ;;      Params:         1       0       0       0       0       0       0
  3397 ;;      Locals:         3       0       0       0       0       0       0
  3398 ;;      Temps:          2       0       0       0       0       0       0
  3399 ;;      Totals:         6       0       0       0       0       0       0
  3400 ;;Total ram usage:        6 bytes
  3401 ;; Hardware stack levels used:    1
  3402 ;; Hardware stack levels required when called:    3
  3403 ;; This function calls:
  3404 ;;		_Busy_eep
  3405 ;;		_Write_b_eep
  3406 ;;		_Read_b_eep
  3407 ;; This function is called by:
  3408 ;;		_doDM
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           	psect	text10
  3413  0038B0                     __ptext10:
  3414                           	opt stack 0
  3415  0038B0                     _doActionDisable:
  3416                           	opt stack 26
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;incstack = 0
  3420                           ;incstack = 0
  3421                           ;doActionDisable@dmflags stored from wreg
  3422  0038B0  CFE8 F010          	movff	wreg,doActionDisable@dmflags
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;main.c: 2135: unsigned char i;
  3426                           ;main.c: 2136: unsigned char val;
  3427                           ;main.c: 2138: for ( i = 0; i < 8; i++ ) {
  3428  0038B4  6A11               	clrf	doActionDisable@i,c
  3429  0038B6                     l9080:
  3430                           
  3431                           ;main.c: 2141: if ( !( arg & (1 << i) ) ) continue;
  3432  0038B6  C011  F00D         	movff	doActionDisable@i,??_doActionDisable
  3433  0038BA  0E01               	movlw	1
  3434  0038BC  6E0E               	movwf	(??_doActionDisable+1)& (0+255),c
  3435  0038BE  2A0D               	incf	??_doActionDisable,f,c
  3436  0038C0  D002               	goto	u10134
  3437  0038C2                     u10135:
  3438  0038C2  90D8               	bcf	status,0,c
  3439  0038C4  360E               	rlcf	??_doActionDisable+1,f,c
  3440  0038C6                     u10134:
  3441  0038C6  2E0D               	decfsz	??_doActionDisable,f,c
  3442  0038C8  D7FC               	goto	u10135
  3443  0038CA  500E               	movf	??_doActionDisable+1,w,c
  3444  0038CC  140C               	andwf	doActionDisable@arg,w,c
  3445  0038CE  E03A               	bz	l9098
  3446                           
  3447                           ;main.c: 2144: if ( dmflags & 0x10 ) {
  3448  0038D0  A810               	btfss	doActionDisable@dmflags,4,c
  3449  0038D2  D010               	goto	l531
  3450                           
  3451                           ;main.c: 2145: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3452  0038D4  90D8               	bcf	status,0,c
  3453  0038D6  3411               	rlcf	doActionDisable@i,w,c
  3454  0038D8  6E0D               	movwf	??_doActionDisable& (0+255),c
  3455  0038DA  6A0E               	clrf	(??_doActionDisable+1)& (0+255),c
  3456  0038DC  360E               	rlcf	(??_doActionDisable+1)& (0+255),f,c
  3457  0038DE  0E75               	movlw	117
  3458  0038E0  240D               	addwf	??_doActionDisable,w,c
  3459  0038E2  6E08               	movwf	?_Read_b_eep,c
  3460  0038E4  0E00               	movlw	0
  3461  0038E6  200E               	addwfc	??_doActionDisable+1,w,c
  3462  0038E8  6E09               	movwf	?_Read_b_eep+1,c
  3463  0038EA  EC0B  F020         	call	_Read_b_eep	;wreg free
  3464  0038EE  0100               	movlb	0	; () banked
  3465  0038F0  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3466  0038F2  E128               	bnz	l9098
  3467  0038F4                     l531:
  3468                           
  3469                           ;main.c: 2148: }
  3470                           ;main.c: 2149: }
  3471                           ;main.c: 2152: if ( dmflags & 0x08 ) {
  3472  0038F4  A610               	btfss	doActionDisable@dmflags,3,c
  3473  0038F6  D010               	goto	l9092
  3474                           
  3475                           ;main.c: 2153: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3476  0038F8  90D8               	bcf	status,0,c
  3477  0038FA  3411               	rlcf	doActionDisable@i,w,c
  3478  0038FC  6E0D               	movwf	??_doActionDisable& (0+255),c
  3479  0038FE  6A0E               	clrf	(??_doActionDisable+1)& (0+255),c
  3480  003900  360E               	rlcf	(??_doActionDisable+1)& (0+255),f,c
  3481  003902  0E76               	movlw	118
  3482  003904  240D               	addwf	??_doActionDisable,w,c
  3483  003906  6E08               	movwf	?_Read_b_eep,c
  3484  003908  0E00               	movlw	0
  3485  00390A  200E               	addwfc	??_doActionDisable+1,w,c
  3486  00390C  6E09               	movwf	?_Read_b_eep+1,c
  3487  00390E  EC0B  F020         	call	_Read_b_eep	;wreg free
  3488  003912  0100               	movlb	0	; () banked
  3489  003914  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3490  003916  E116               	bnz	l9098
  3491  003918                     l9092:
  3492                           
  3493                           ;main.c: 2156: }
  3494                           ;main.c: 2157: }
  3495                           ;main.c: 2159: val = Read_b_eep(0x43 + 10 + i);
  3496  003918  0E4D               	movlw	77
  3497  00391A  2411               	addwf	doActionDisable@i,w,c
  3498  00391C  6E08               	movwf	?_Read_b_eep,c
  3499  00391E  6A09               	clrf	?_Read_b_eep+1,c
  3500  003920  0E00               	movlw	0
  3501  003922  2209               	addwfc	?_Read_b_eep+1,f,c
  3502  003924  EC0B  F020         	call	_Read_b_eep	;wreg free
  3503  003928  6E0F               	movwf	doActionDisable@val,c
  3504                           
  3505                           ;main.c: 2160: (Busy_eep(), Write_b_eep(0x43 + 10 + i,val & ~0x80));
  3506  00392A  EC3F  F020         	call	_Busy_eep	;wreg free
  3507  00392E  0E4D               	movlw	77
  3508  003930  2411               	addwf	doActionDisable@i,w,c
  3509  003932  6E08               	movwf	?_Write_b_eep,c
  3510  003934  6A09               	clrf	?_Write_b_eep+1,c
  3511  003936  0E00               	movlw	0
  3512  003938  2209               	addwfc	?_Write_b_eep+1,f,c
  3513  00393A  500F               	movf	doActionDisable@val,w,c
  3514  00393C  0B7F               	andlw	127
  3515  00393E  6E0A               	movwf	?_Write_b_eep+2,c
  3516  003940  EC24  F01E         	call	_Write_b_eep	;wreg free
  3517  003944                     l9098:
  3518  003944  2A11               	incf	doActionDisable@i,f,c
  3519  003946  0E07               	movlw	7
  3520  003948  6411               	cpfsgt	doActionDisable@i,c
  3521  00394A  D7B5               	goto	l9080
  3522  00394C  0C07               	retlw	7
  3523  00394E                     __end_of_doActionDisable:
  3524                           	opt stack 0
  3525                           tblptru	equ	0xFF8
  3526                           prodh	equ	0xFF4
  3527                           prodl	equ	0xFF3
  3528                           postinc0	equ	0xFEE
  3529                           wreg	equ	0xFE8
  3530                           postinc2	equ	0xFDE
  3531                           postdec2	equ	0xFDD
  3532                           fsr2h	equ	0xFDA
  3533                           fsr2l	equ	0xFD9
  3534                           status	equ	0xFD8
  3535                           
  3536 ;; *************** function _doActionStatus *****************
  3537 ;; Defined at:
  3538 ;;		line 2037 in file "../main.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;  dmflags         1    wreg     unsigned char 
  3541 ;;  arg             1   80[COMRAM] unsigned char 
  3542 ;; Auto vars:     Size  Location     Type
  3543 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3544 ;;  i               1   27[BANK0 ] unsigned char 
  3545 ;;  val             1   26[BANK0 ] unsigned char 
  3546 ;;  bOn             1   25[BANK0 ] enum E15660
  3547 ;; Return value:  Size  Location     Type
  3548 ;;		None               void
  3549 ;; Registers used:
  3550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3551 ;; Tracked objects:
  3552 ;;		On entry : F/0
  3553 ;;		On exit  : F/0
  3554 ;;		Unchanged: 0/0
  3555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3556 ;;      Params:         1       0       0       0       0       0       0
  3557 ;;      Locals:         0       4       0       0       0       0       0
  3558 ;;      Temps:          0       2       0       0       0       0       0
  3559 ;;      Totals:         1       6       0       0       0       0       0
  3560 ;;Total ram usage:        7 bytes
  3561 ;; Hardware stack levels used:    1
  3562 ;; Hardware stack levels required when called:    7
  3563 ;; This function calls:
  3564 ;;		_Read_b_eep
  3565 ;;		_SendInformationEvent
  3566 ;; This function is called by:
  3567 ;;		_doDM
  3568 ;; This function uses a non-reentrant model
  3569 ;;
  3570                           
  3571                           	psect	text11
  3572  003170                     __ptext11:
  3573                           	opt stack 0
  3574  003170                     _doActionStatus:
  3575                           	opt stack 22
  3576                           
  3577                           ;incstack = 0
  3578                           ;incstack = 0
  3579                           ;doActionStatus@dmflags stored from wreg
  3580  003170  CFE8 F0C9          	movff	wreg,doActionStatus@dmflags
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;main.c: 2039: unsigned char i;
  3584                           ;main.c: 2040: unsigned char val;
  3585                           ;main.c: 2041: BOOL bOn = 0;
  3586  003174  6BCA               	clrf	doActionStatus@bOn& (0+255),b
  3587                           
  3588                           ;main.c: 2043: for (i = 0; i < 8; i++) {
  3589  003176  6BCC               	clrf	doActionStatus@i& (0+255),b
  3590  003178                     l10792:
  3591                           
  3592                           ; BSR set to: 0
  3593                           ;main.c: 2046: if (!(arg & (1 << i))) continue;
  3594  003178  C0CC  F0C7         	movff	doActionStatus@i,??_doActionStatus
  3595  00317C  0E01               	movlw	1
  3596  00317E  6FC8               	movwf	(??_doActionStatus+1)& (0+255),b
  3597  003180  2BC7               	incf	??_doActionStatus& (0+255),f,b
  3598  003182  D002               	goto	u12914
  3599  003184                     u12915:
  3600  003184  90D8               	bcf	status,0,c
  3601  003186  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3602  003188                     u12914:
  3603  003188  2FC7               	decfsz	??_doActionStatus& (0+255),f,b
  3604  00318A  D7FC               	goto	u12915
  3605  00318C  51C8               	movf	(??_doActionStatus+1)& (0+255),w,b
  3606  00318E  1451               	andwf	doActionStatus@arg,w,c
  3607  003190  E101 D087          	bz	l10840
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;main.c: 2049: if ( dmflags & 0x10 ) {
  3611  003194  A9C9               	btfss	doActionStatus@dmflags& (0+255),4,b
  3612  003196  D010               	goto	l505
  3613                           
  3614                           ; BSR set to: 0
  3615                           ;main.c: 2050: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3616  003198  90D8               	bcf	status,0,c
  3617  00319A  35CC               	rlcf	doActionStatus@i& (0+255),w,b
  3618  00319C  6FC7               	movwf	??_doActionStatus& (0+255),b
  3619  00319E  6BC8               	clrf	(??_doActionStatus+1)& (0+255),b
  3620  0031A0  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3621  0031A2  0E75               	movlw	117
  3622  0031A4  25C7               	addwf	??_doActionStatus& (0+255),w,b
  3623  0031A6  6E08               	movwf	?_Read_b_eep,c
  3624  0031A8  0E00               	movlw	0
  3625  0031AA  21C8               	addwfc	(??_doActionStatus+1)& (0+255),w,b
  3626  0031AC  6E09               	movwf	?_Read_b_eep+1,c
  3627  0031AE  EC0B  F020         	call	_Read_b_eep	;wreg free
  3628  0031B2  0100               	movlb	0	; () banked
  3629  0031B4  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3630  0031B6  E175               	bnz	l10840
  3631  0031B8                     l505:
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;main.c: 2053: }
  3635                           ;main.c: 2054: }
  3636                           ;main.c: 2057: if ( dmflags & 0x08 ) {
  3637  0031B8  A7C9               	btfss	doActionStatus@dmflags& (0+255),3,b
  3638  0031BA  D010               	goto	l10804
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;main.c: 2058: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3642  0031BC  90D8               	bcf	status,0,c
  3643  0031BE  35CC               	rlcf	doActionStatus@i& (0+255),w,b
  3644  0031C0  6FC7               	movwf	??_doActionStatus& (0+255),b
  3645  0031C2  6BC8               	clrf	(??_doActionStatus+1)& (0+255),b
  3646  0031C4  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3647  0031C6  0E76               	movlw	118
  3648  0031C8  25C7               	addwf	??_doActionStatus& (0+255),w,b
  3649  0031CA  6E08               	movwf	?_Read_b_eep,c
  3650  0031CC  0E00               	movlw	0
  3651  0031CE  21C8               	addwfc	(??_doActionStatus+1)& (0+255),w,b
  3652  0031D0  6E09               	movwf	?_Read_b_eep+1,c
  3653  0031D2  EC0B  F020         	call	_Read_b_eep	;wreg free
  3654  0031D6  0100               	movlb	0	; () banked
  3655  0031D8  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3656  0031DA  E163               	bnz	l10840
  3657  0031DC                     l10804:
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;main.c: 2061: }
  3661                           ;main.c: 2062: }
  3662                           ;main.c: 2064: val = Read_b_eep(0x43 + 10 + i);
  3663  0031DC  0E4D               	movlw	77
  3664  0031DE  25CC               	addwf	doActionStatus@i& (0+255),w,b
  3665  0031E0  6E08               	movwf	?_Read_b_eep,c
  3666  0031E2  6A09               	clrf	?_Read_b_eep+1,c
  3667  0031E4  0E00               	movlw	0
  3668  0031E6  2209               	addwfc	?_Read_b_eep+1,f,c
  3669  0031E8  EC0B  F020         	call	_Read_b_eep	;wreg free
  3670  0031EC  0100               	movlb	0	; () banked
  3671  0031EE  6FCB               	movwf	doActionStatus@val& (0+255),b
  3672                           
  3673                           ;main.c: 2066: switch (i) {
  3674  0031F0  D023               	goto	l10822
  3675  0031F2                     l10806:
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;main.c: 2069: bOn = LATBbits.LATB4;
  3679  0031F2  0E00               	movlw	0
  3680  0031F4  B88A               	btfsc	3978,4,c	;volatile
  3681  0031F6  0E01               	movlw	1
  3682  0031F8  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3683                           
  3684                           ;main.c: 2070: break;
  3685  0031FA  D02C               	goto	l10824
  3686  0031FC                     l10808:
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;main.c: 2073: bOn = LATBbits.LATB1;
  3690  0031FC  0E00               	movlw	0
  3691  0031FE  B28A               	btfsc	3978,1,c	;volatile
  3692  003200  0E01               	movlw	1
  3693  003202  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3694                           
  3695                           ;main.c: 2074: break;
  3696  003204  D027               	goto	l10824
  3697  003206                     l10810:
  3698                           
  3699                           ; BSR set to: 0
  3700                           ;main.c: 2077: bOn = LATBbits.LATB0;
  3701  003206  0E00               	movlw	0
  3702  003208  B08A               	btfsc	3978,0,c	;volatile
  3703  00320A  0E01               	movlw	1
  3704  00320C  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3705                           
  3706                           ;main.c: 2078: break;
  3707  00320E  D022               	goto	l10824
  3708  003210                     l10812:
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;main.c: 2081: bOn = LATCbits.LATC7;
  3712  003210  0E00               	movlw	0
  3713  003212  BE8B               	btfsc	3979,7,c	;volatile
  3714  003214  0E01               	movlw	1
  3715  003216  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3716                           
  3717                           ;main.c: 2082: break;
  3718  003218  D01D               	goto	l10824
  3719  00321A                     l10814:
  3720                           
  3721                           ; BSR set to: 0
  3722                           ;main.c: 2085: bOn = LATCbits.LATC6;
  3723  00321A  0E00               	movlw	0
  3724  00321C  BC8B               	btfsc	3979,6,c	;volatile
  3725  00321E  0E01               	movlw	1
  3726  003220  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3727                           
  3728                           ;main.c: 2086: break;
  3729  003222  D018               	goto	l10824
  3730  003224                     l10816:
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;main.c: 2089: bOn = LATCbits.LATC5;
  3734  003224  0E00               	movlw	0
  3735  003226  BA8B               	btfsc	3979,5,c	;volatile
  3736  003228  0E01               	movlw	1
  3737  00322A  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3738                           
  3739                           ;main.c: 2090: break;
  3740  00322C  D013               	goto	l10824
  3741  00322E                     l10818:
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;main.c: 2093: bOn = LATCbits.LATC4;
  3745  00322E  0E00               	movlw	0
  3746  003230  B88B               	btfsc	3979,4,c	;volatile
  3747  003232  0E01               	movlw	1
  3748  003234  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3749                           
  3750                           ;main.c: 2094: break;
  3751  003236  D00E               	goto	l10824
  3752  003238                     l10822:
  3753                           
  3754                           ; BSR set to: 0
  3755  003238  51CC               	movf	doActionStatus@i& (0+255),w,b
  3756                           
  3757                           ; Switch size 1, requested type "speed"
  3758                           ; Number of cases is 7, Range of values is 0 to 6
  3759                           ; switch strategies available:
  3760                           ; Name         Instructions Cycles
  3761                           ; simple_byte           22    12 (average)
  3762                           ;	Chosen strategy is simple_byte
  3763  00323A  E0DB               	bz	l10806
  3764  00323C  0A01               	xorlw	1	; case 1
  3765  00323E  E0DE               	bz	l10808
  3766  003240  0A03               	xorlw	3	; case 2
  3767  003242  E0E1               	bz	l10810
  3768  003244  0A01               	xorlw	1	; case 3
  3769  003246  E0E4               	bz	l10812
  3770  003248  0A07               	xorlw	7	; case 4
  3771  00324A  E0E7               	bz	l10814
  3772  00324C  0A01               	xorlw	1	; case 5
  3773  00324E  E0EA               	bz	l10816
  3774  003250  0A03               	xorlw	3	; case 6
  3775  003252  E0ED               	bz	l10818
  3776  003254                     l10824:
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;main.c: 2098: if (bOn) {
  3780  003254  51CA               	movf	doActionStatus@bOn& (0+255),w,b
  3781  003256  E013               	bz	l518
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;main.c: 2101: if ( val & 0x10 ) {
  3785  003258  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3786  00325A  D007               	goto	l10830
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;main.c: 2102: SendInformationEvent( i, 20, 4 );
  3790  00325C  0E14               	movlw	20
  3791  00325E  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3792  003260  0E04               	movlw	4
  3793  003262  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3794  003264  51CC               	movf	doActionStatus@i& (0+255),w,b
  3795  003266  EC67  F01D         	call	_SendInformationEvent
  3796  00326A                     l10830:
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;main.c: 2103: }
  3800                           ;main.c: 2106: if ( val & 0x40 ) {
  3801  00326A  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3802  00326C  D01A               	goto	l10840
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;main.c: 2107: SendInformationEvent( i, 20, 24 );
  3806  00326E  0E14               	movlw	20
  3807  003270  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3808  003272  0E18               	movlw	24
  3809  003274  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3810  003276  51CC               	movf	doActionStatus@i& (0+255),w,b
  3811  003278  EC67  F01D         	call	_SendInformationEvent
  3812  00327C  D012               	goto	l10840
  3813  00327E                     l518:
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;main.c: 2111: else {
  3817                           ;main.c: 2114: if ( val & 0x10 ) {
  3818  00327E  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3819  003280  D007               	goto	l10836
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;main.c: 2115: SendInformationEvent( i, 20, 4 );
  3823  003282  0E14               	movlw	20
  3824  003284  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3825  003286  0E04               	movlw	4
  3826  003288  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3827  00328A  51CC               	movf	doActionStatus@i& (0+255),w,b
  3828  00328C  EC67  F01D         	call	_SendInformationEvent
  3829  003290                     l10836:
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;main.c: 2116: }
  3833                           ;main.c: 2119: if ( val & 0x40 ) {
  3834  003290  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3835  003292  D007               	goto	l10840
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;main.c: 2120: SendInformationEvent( i, 20, 24 );
  3839  003294  0E14               	movlw	20
  3840  003296  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3841  003298  0E18               	movlw	24
  3842  00329A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3843  00329C  51CC               	movf	doActionStatus@i& (0+255),w,b
  3844  00329E  EC67  F01D         	call	_SendInformationEvent
  3845  0032A2                     l10840:
  3846                           
  3847                           ; BSR set to: 0
  3848  0032A2  2BCC               	incf	doActionStatus@i& (0+255),f,b
  3849                           
  3850                           ; BSR set to: 0
  3851  0032A4  0E07               	movlw	7
  3852  0032A6  65CC               	cpfsgt	doActionStatus@i& (0+255),b
  3853  0032A8  D767               	goto	l10792
  3854                           
  3855                           ; BSR set to: 0
  3856  0032AA  0C07               	retlw	7
  3857  0032AC                     __end_of_doActionStatus:
  3858                           	opt stack 0
  3859                           tblptru	equ	0xFF8
  3860                           prodh	equ	0xFF4
  3861                           prodl	equ	0xFF3
  3862                           postinc0	equ	0xFEE
  3863                           wreg	equ	0xFE8
  3864                           postinc2	equ	0xFDE
  3865                           postdec2	equ	0xFDD
  3866                           fsr2h	equ	0xFDA
  3867                           fsr2l	equ	0xFD9
  3868                           status	equ	0xFD8
  3869                           
  3870 ;; *************** function _doActionPulse *****************
  3871 ;; Defined at:
  3872 ;;		line 1939 in file "../main.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;  dmflags         1    wreg     unsigned char 
  3875 ;;  arg             1    9[COMRAM] unsigned char 
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;  dmflags         1   14[COMRAM] unsigned char 
  3878 ;;  i               1   15[COMRAM] unsigned char 
  3879 ;;  val             1   13[COMRAM] unsigned char 
  3880 ;; Return value:  Size  Location     Type
  3881 ;;		None               void
  3882 ;; Registers used:
  3883 ;;		wreg, status,2, status,0, cstack
  3884 ;; Tracked objects:
  3885 ;;		On entry : F/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3889 ;;      Params:         1       0       0       0       0       0       0
  3890 ;;      Locals:         3       0       0       0       0       0       0
  3891 ;;      Temps:          3       0       0       0       0       0       0
  3892 ;;      Totals:         7       0       0       0       0       0       0
  3893 ;;Total ram usage:        7 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; Hardware stack levels required when called:    3
  3896 ;; This function calls:
  3897 ;;		_Read_b_eep
  3898 ;; This function is called by:
  3899 ;;		_doDM
  3900 ;; This function uses a non-reentrant model
  3901 ;;
  3902                           
  3903                           	psect	text12
  3904  002852                     __ptext12:
  3905                           	opt stack 0
  3906  002852                     _doActionPulse:
  3907                           	opt stack 26
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;incstack = 0
  3911                           ;incstack = 0
  3912                           ;doActionPulse@dmflags stored from wreg
  3913  002852  CFE8 F00F          	movff	wreg,doActionPulse@dmflags
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;main.c: 1941: unsigned char i;
  3917                           ;main.c: 1942: unsigned char val;
  3918                           ;main.c: 1944: for ( i = 0; i < 8; i++ ) {
  3919  002856  6A10               	clrf	doActionPulse@i,c
  3920  002858                     l8962:
  3921                           
  3922                           ;main.c: 1947: if ( !( arg & ( 1 << i ) ) ) continue;
  3923  002858  C010  F00B         	movff	doActionPulse@i,??_doActionPulse
  3924  00285C  0E01               	movlw	1
  3925  00285E  6E0C               	movwf	(??_doActionPulse+1)& (0+255),c
  3926  002860  2A0B               	incf	??_doActionPulse,f,c
  3927  002862  D002               	goto	u9934
  3928  002864                     u9935:
  3929  002864  90D8               	bcf	status,0,c
  3930  002866  360C               	rlcf	??_doActionPulse+1,f,c
  3931  002868                     u9934:
  3932  002868  2E0B               	decfsz	??_doActionPulse,f,c
  3933  00286A  D7FC               	goto	u9935
  3934  00286C  500C               	movf	??_doActionPulse+1,w,c
  3935  00286E  140A               	andwf	doActionPulse@arg,w,c
  3936  002870  E101 D0EA          	bz	l9012
  3937                           
  3938                           ;main.c: 1950: if ( dmflags & 0x10 ) {
  3939  002874  A80F               	btfss	doActionPulse@dmflags,4,c
  3940  002876  D011               	goto	l484
  3941                           
  3942                           ;main.c: 1951: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3943  002878  90D8               	bcf	status,0,c
  3944  00287A  3410               	rlcf	doActionPulse@i,w,c
  3945  00287C  6E0B               	movwf	??_doActionPulse& (0+255),c
  3946  00287E  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  3947  002880  360C               	rlcf	(??_doActionPulse+1)& (0+255),f,c
  3948  002882  0E75               	movlw	117
  3949  002884  240B               	addwf	??_doActionPulse,w,c
  3950  002886  6E08               	movwf	?_Read_b_eep,c
  3951  002888  0E00               	movlw	0
  3952  00288A  200C               	addwfc	??_doActionPulse+1,w,c
  3953  00288C  6E09               	movwf	?_Read_b_eep+1,c
  3954  00288E  EC0B  F020         	call	_Read_b_eep	;wreg free
  3955  002892  0100               	movlb	0	; () banked
  3956  002894  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3957  002896  E001 D0D7          	bnz	l9012
  3958  00289A                     l484:
  3959                           
  3960                           ;main.c: 1954: }
  3961                           ;main.c: 1955: }
  3962                           ;main.c: 1958: if ( dmflags & 0x08 ) {
  3963  00289A  A60F               	btfss	doActionPulse@dmflags,3,c
  3964  00289C  D011               	goto	l8974
  3965                           
  3966                           ;main.c: 1959: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3967  00289E  90D8               	bcf	status,0,c
  3968  0028A0  3410               	rlcf	doActionPulse@i,w,c
  3969  0028A2  6E0B               	movwf	??_doActionPulse& (0+255),c
  3970  0028A4  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  3971  0028A6  360C               	rlcf	(??_doActionPulse+1)& (0+255),f,c
  3972  0028A8  0E76               	movlw	118
  3973  0028AA  240B               	addwf	??_doActionPulse,w,c
  3974  0028AC  6E08               	movwf	?_Read_b_eep,c
  3975  0028AE  0E00               	movlw	0
  3976  0028B0  200C               	addwfc	??_doActionPulse+1,w,c
  3977  0028B2  6E09               	movwf	?_Read_b_eep+1,c
  3978  0028B4  EC0B  F020         	call	_Read_b_eep	;wreg free
  3979  0028B8  0100               	movlb	0	; () banked
  3980  0028BA  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3981  0028BC  E001 D0C4          	bnz	l9012
  3982  0028C0                     l8974:
  3983                           
  3984                           ;main.c: 1962: }
  3985                           ;main.c: 1963: }
  3986                           ;main.c: 1965: val = Read_b_eep(0x43 + 10 + i);
  3987  0028C0  0E4D               	movlw	77
  3988  0028C2  2410               	addwf	doActionPulse@i,w,c
  3989  0028C4  6E08               	movwf	?_Read_b_eep,c
  3990  0028C6  6A09               	clrf	?_Read_b_eep+1,c
  3991  0028C8  0E00               	movlw	0
  3992  0028CA  2209               	addwfc	?_Read_b_eep+1,f,c
  3993  0028CC  EC0B  F020         	call	_Read_b_eep	;wreg free
  3994  0028D0  6E0E               	movwf	doActionPulse@val,c
  3995                           
  3996                           ;main.c: 1968: if ( !( val & 0x80 ) ) continue;
  3997  0028D2  AE0E               	btfss	doActionPulse@val,7,c
  3998  0028D4  D0B9               	goto	l9012
  3999  0028D6  D0A8               	goto	l9010
  4000  0028D8                     l490:
  4001                           
  4002                           ;main.c: 1973: LATBbits.LATB4 = 0;
  4003  0028D8  988A               	bcf	3978,4,c	;volatile
  4004                           
  4005                           ;main.c: 1974: relay_pulse_flags |= 0x01;
  4006  0028DA  0100               	movlb	0	; () banked
  4007  0028DC  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;main.c: 1975: relay_pulse_timer[ 0 ] =
  4011                           ;main.c: 1976: Read_b_eep(0x43 + 18) * 256 +
  4012                           ;main.c: 1977: Read_b_eep(0x43 + 19);
  4013  0028DE  6A09               	clrf	?_Read_b_eep+1,c
  4014  0028E0  0E56               	movlw	86
  4015  0028E2  6E08               	movwf	?_Read_b_eep,c
  4016  0028E4  EC0B  F020         	call	_Read_b_eep	;wreg free
  4017  0028E8  6E0B               	movwf	??_doActionPulse& (0+255),c
  4018  0028EA  6A09               	clrf	?_Read_b_eep+1,c
  4019  0028EC  0E55               	movlw	85
  4020  0028EE  6E08               	movwf	?_Read_b_eep,c
  4021  0028F0  EC0B  F020         	call	_Read_b_eep	;wreg free
  4022  0028F4  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4023  0028F6  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4024  0028F8  500B               	movf	??_doActionPulse,w,c
  4025  0028FA  240C               	addwf	??_doActionPulse+1,w,c
  4026  0028FC  0100               	movlb	0	; () banked
  4027  0028FE  6F70               	movwf	_relay_pulse_timer& (0+255),b
  4028  002900  0E00               	movlw	0
  4029  002902  200D               	addwfc	??_doActionPulse+2,w,c
  4030  002904  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  4031                           
  4032                           ;main.c: 1978: break;
  4033  002906  D0A0               	goto	l9012
  4034  002908                     l492:
  4035                           
  4036                           ;main.c: 1981: LATBbits.LATB1 = 0;
  4037  002908  928A               	bcf	3978,1,c	;volatile
  4038                           
  4039                           ;main.c: 1982: relay_pulse_flags |= 0x02;
  4040  00290A  0100               	movlb	0	; () banked
  4041  00290C  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  4042                           
  4043                           ; BSR set to: 0
  4044                           ;main.c: 1983: relay_pulse_timer[ 1 ] =
  4045                           ;main.c: 1984: Read_b_eep(0x43 + 20) * 256 +
  4046                           ;main.c: 1985: Read_b_eep(0x43 + 21);
  4047  00290E  6A09               	clrf	?_Read_b_eep+1,c
  4048  002910  0E58               	movlw	88
  4049  002912  6E08               	movwf	?_Read_b_eep,c
  4050  002914  EC0B  F020         	call	_Read_b_eep	;wreg free
  4051  002918  6E0B               	movwf	??_doActionPulse& (0+255),c
  4052  00291A  6A09               	clrf	?_Read_b_eep+1,c
  4053  00291C  0E57               	movlw	87
  4054  00291E  6E08               	movwf	?_Read_b_eep,c
  4055  002920  EC0B  F020         	call	_Read_b_eep	;wreg free
  4056  002924  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4057  002926  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4058  002928  500B               	movf	??_doActionPulse,w,c
  4059  00292A  240C               	addwf	??_doActionPulse+1,w,c
  4060  00292C  0100               	movlb	0	; () banked
  4061  00292E  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  4062  002930  0E00               	movlw	0
  4063  002932  200D               	addwfc	??_doActionPulse+2,w,c
  4064  002934  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  4065                           
  4066                           ;main.c: 1986: break;
  4067  002936  D088               	goto	l9012
  4068  002938                     l493:
  4069                           
  4070                           ;main.c: 1989: LATBbits.LATB0 = 0;
  4071  002938  908A               	bcf	3978,0,c	;volatile
  4072                           
  4073                           ;main.c: 1990: relay_pulse_flags |= 0x04;
  4074  00293A  0100               	movlb	0	; () banked
  4075  00293C  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  4076                           
  4077                           ; BSR set to: 0
  4078                           ;main.c: 1991: relay_pulse_timer[ 2 ] =
  4079                           ;main.c: 1992: Read_b_eep(0x43 + 22) * 256 +
  4080                           ;main.c: 1993: Read_b_eep(0x43 + 23);
  4081  00293E  6A09               	clrf	?_Read_b_eep+1,c
  4082  002940  0E5A               	movlw	90
  4083  002942  6E08               	movwf	?_Read_b_eep,c
  4084  002944  EC0B  F020         	call	_Read_b_eep	;wreg free
  4085  002948  6E0B               	movwf	??_doActionPulse& (0+255),c
  4086  00294A  6A09               	clrf	?_Read_b_eep+1,c
  4087  00294C  0E59               	movlw	89
  4088  00294E  6E08               	movwf	?_Read_b_eep,c
  4089  002950  EC0B  F020         	call	_Read_b_eep	;wreg free
  4090  002954  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4091  002956  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4092  002958  500B               	movf	??_doActionPulse,w,c
  4093  00295A  240C               	addwf	??_doActionPulse+1,w,c
  4094  00295C  0100               	movlb	0	; () banked
  4095  00295E  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  4096  002960  0E00               	movlw	0
  4097  002962  200D               	addwfc	??_doActionPulse+2,w,c
  4098  002964  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  4099                           
  4100                           ;main.c: 1994: break;
  4101  002966  D070               	goto	l9012
  4102  002968                     l494:
  4103                           
  4104                           ;main.c: 1997: LATCbits.LATC7 = 0;
  4105  002968  9E8B               	bcf	3979,7,c	;volatile
  4106                           
  4107                           ;main.c: 1998: relay_pulse_flags |= 0x08;
  4108  00296A  0100               	movlb	0	; () banked
  4109  00296C  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;main.c: 1999: relay_pulse_timer[ 3 ] =
  4113                           ;main.c: 2000: Read_b_eep(0x43 + 24) * 256 +
  4114                           ;main.c: 2001: Read_b_eep(0x43 + 25);
  4115  00296E  6A09               	clrf	?_Read_b_eep+1,c
  4116  002970  0E5C               	movlw	92
  4117  002972  6E08               	movwf	?_Read_b_eep,c
  4118  002974  EC0B  F020         	call	_Read_b_eep	;wreg free
  4119  002978  6E0B               	movwf	??_doActionPulse& (0+255),c
  4120  00297A  6A09               	clrf	?_Read_b_eep+1,c
  4121  00297C  0E5B               	movlw	91
  4122  00297E  6E08               	movwf	?_Read_b_eep,c
  4123  002980  EC0B  F020         	call	_Read_b_eep	;wreg free
  4124  002984  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4125  002986  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4126  002988  500B               	movf	??_doActionPulse,w,c
  4127  00298A  240C               	addwf	??_doActionPulse+1,w,c
  4128  00298C  0100               	movlb	0	; () banked
  4129  00298E  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  4130  002990  0E00               	movlw	0
  4131  002992  200D               	addwfc	??_doActionPulse+2,w,c
  4132  002994  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  4133                           
  4134                           ;main.c: 2002: break;
  4135  002996  D058               	goto	l9012
  4136  002998                     l495:
  4137                           
  4138                           ;main.c: 2005: LATCbits.LATC6 = 0;
  4139  002998  9C8B               	bcf	3979,6,c	;volatile
  4140                           
  4141                           ;main.c: 2006: relay_pulse_flags |= 0x10;
  4142  00299A  0100               	movlb	0	; () banked
  4143  00299C  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;main.c: 2007: relay_pulse_timer[ 4 ] =
  4147                           ;main.c: 2008: Read_b_eep(0x43 + 26) * 256 +
  4148                           ;main.c: 2009: Read_b_eep(0x43 + 27);
  4149  00299E  6A09               	clrf	?_Read_b_eep+1,c
  4150  0029A0  0E5E               	movlw	94
  4151  0029A2  6E08               	movwf	?_Read_b_eep,c
  4152  0029A4  EC0B  F020         	call	_Read_b_eep	;wreg free
  4153  0029A8  6E0B               	movwf	??_doActionPulse& (0+255),c
  4154  0029AA  6A09               	clrf	?_Read_b_eep+1,c
  4155  0029AC  0E5D               	movlw	93
  4156  0029AE  6E08               	movwf	?_Read_b_eep,c
  4157  0029B0  EC0B  F020         	call	_Read_b_eep	;wreg free
  4158  0029B4  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4159  0029B6  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4160  0029B8  500B               	movf	??_doActionPulse,w,c
  4161  0029BA  240C               	addwf	??_doActionPulse+1,w,c
  4162  0029BC  0100               	movlb	0	; () banked
  4163  0029BE  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  4164  0029C0  0E00               	movlw	0
  4165  0029C2  200D               	addwfc	??_doActionPulse+2,w,c
  4166  0029C4  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  4167                           
  4168                           ;main.c: 2010: break;
  4169  0029C6  D040               	goto	l9012
  4170  0029C8                     l496:
  4171                           
  4172                           ;main.c: 2013: LATCbits.LATC5 = 0;
  4173  0029C8  9A8B               	bcf	3979,5,c	;volatile
  4174                           
  4175                           ;main.c: 2014: relay_pulse_flags |= 0x20;
  4176  0029CA  0100               	movlb	0	; () banked
  4177  0029CC  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;main.c: 2015: relay_pulse_timer[ 5 ] =
  4181                           ;main.c: 2016: Read_b_eep(0x43 + 28) * 256 +
  4182                           ;main.c: 2017: Read_b_eep(0x43 + 29);
  4183  0029CE  6A09               	clrf	?_Read_b_eep+1,c
  4184  0029D0  0E60               	movlw	96
  4185  0029D2  6E08               	movwf	?_Read_b_eep,c
  4186  0029D4  EC0B  F020         	call	_Read_b_eep	;wreg free
  4187  0029D8  6E0B               	movwf	??_doActionPulse& (0+255),c
  4188  0029DA  6A09               	clrf	?_Read_b_eep+1,c
  4189  0029DC  0E5F               	movlw	95
  4190  0029DE  6E08               	movwf	?_Read_b_eep,c
  4191  0029E0  EC0B  F020         	call	_Read_b_eep	;wreg free
  4192  0029E4  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4193  0029E6  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4194  0029E8  500B               	movf	??_doActionPulse,w,c
  4195  0029EA  240C               	addwf	??_doActionPulse+1,w,c
  4196  0029EC  0100               	movlb	0	; () banked
  4197  0029EE  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  4198  0029F0  0E00               	movlw	0
  4199  0029F2  200D               	addwfc	??_doActionPulse+2,w,c
  4200  0029F4  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  4201                           
  4202                           ;main.c: 2018: break;
  4203  0029F6  D028               	goto	l9012
  4204  0029F8                     l497:
  4205                           
  4206                           ;main.c: 2021: LATCbits.LATC4 = 0;
  4207  0029F8  988B               	bcf	3979,4,c	;volatile
  4208                           
  4209                           ;main.c: 2022: relay_pulse_flags |= 0x40;
  4210  0029FA  0100               	movlb	0	; () banked
  4211  0029FC  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;main.c: 2023: relay_pulse_timer[ 6 ] =
  4215                           ;main.c: 2024: Read_b_eep(0x43 + 30) * 256 +
  4216                           ;main.c: 2025: Read_b_eep(0x43 + 31);
  4217  0029FE  6A09               	clrf	?_Read_b_eep+1,c
  4218  002A00  0E62               	movlw	98
  4219  002A02  6E08               	movwf	?_Read_b_eep,c
  4220  002A04  EC0B  F020         	call	_Read_b_eep	;wreg free
  4221  002A08  6E0B               	movwf	??_doActionPulse& (0+255),c
  4222  002A0A  6A09               	clrf	?_Read_b_eep+1,c
  4223  002A0C  0E61               	movlw	97
  4224  002A0E  6E08               	movwf	?_Read_b_eep,c
  4225  002A10  EC0B  F020         	call	_Read_b_eep	;wreg free
  4226  002A14  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4227  002A16  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4228  002A18  500B               	movf	??_doActionPulse,w,c
  4229  002A1A  240C               	addwf	??_doActionPulse+1,w,c
  4230  002A1C  0100               	movlb	0	; () banked
  4231  002A1E  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  4232  002A20  0E00               	movlw	0
  4233  002A22  200D               	addwfc	??_doActionPulse+2,w,c
  4234  002A24  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  4235                           
  4236                           ;main.c: 2026: break;
  4237  002A26  D010               	goto	l9012
  4238  002A28                     l9010:
  4239  002A28  5010               	movf	doActionPulse@i,w,c
  4240                           
  4241                           ; Switch size 1, requested type "speed"
  4242                           ; Number of cases is 7, Range of values is 0 to 6
  4243                           ; switch strategies available:
  4244                           ; Name         Instructions Cycles
  4245                           ; simple_byte           22    12 (average)
  4246                           ;	Chosen strategy is simple_byte
  4247  002A2A  E101 D755          	bz	l490
  4248  002A2E  0A01               	xorlw	1	; case 1
  4249  002A30  E101 D76A          	bz	l492
  4250  002A34  0A03               	xorlw	3	; case 2
  4251  002A36  E080               	bz	l493
  4252  002A38  0A01               	xorlw	1	; case 3
  4253  002A3A  E096               	bz	l494
  4254  002A3C  0A07               	xorlw	7	; case 4
  4255  002A3E  E0AC               	bz	l495
  4256  002A40  0A01               	xorlw	1	; case 5
  4257  002A42  E0C2               	bz	l496
  4258  002A44  0A03               	xorlw	3	; case 6
  4259  002A46  E0D8               	bz	l497
  4260  002A48                     l9012:
  4261  002A48  2A10               	incf	doActionPulse@i,f,c
  4262  002A4A  0E07               	movlw	7
  4263  002A4C  6410               	cpfsgt	doActionPulse@i,c
  4264  002A4E  D704               	goto	l8962
  4265  002A50  0C07               	retlw	7
  4266  002A52                     __end_of_doActionPulse:
  4267                           	opt stack 0
  4268                           tblptru	equ	0xFF8
  4269                           prodh	equ	0xFF4
  4270                           prodl	equ	0xFF3
  4271                           postinc0	equ	0xFEE
  4272                           wreg	equ	0xFE8
  4273                           postinc2	equ	0xFDE
  4274                           postdec2	equ	0xFDD
  4275                           fsr2h	equ	0xFDA
  4276                           fsr2l	equ	0xFD9
  4277                           status	equ	0xFD8
  4278                           
  4279 ;; *************** function _doActionOn *****************
  4280 ;; Defined at:
  4281 ;;		line 1737 in file "../main.c"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;  dmflags         1    wreg     unsigned char 
  4284 ;;  arg             1   80[COMRAM] unsigned char 
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;  dmflags         1   25[BANK0 ] unsigned char 
  4287 ;;  i               1   27[BANK0 ] unsigned char 
  4288 ;;  val             1   26[BANK0 ] unsigned char 
  4289 ;; Return value:  Size  Location     Type
  4290 ;;		None               void
  4291 ;; Registers used:
  4292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4293 ;; Tracked objects:
  4294 ;;		On entry : F/0
  4295 ;;		On exit  : F/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4298 ;;      Params:         1       0       0       0       0       0       0
  4299 ;;      Locals:         0       3       0       0       0       0       0
  4300 ;;      Temps:          0       3       0       0       0       0       0
  4301 ;;      Totals:         1       6       0       0       0       0       0
  4302 ;;Total ram usage:        7 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    7
  4305 ;; This function calls:
  4306 ;;		_Read_b_eep
  4307 ;;		_SendInformationEvent
  4308 ;; This function is called by:
  4309 ;;		_doDM
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313                           	psect	text13
  4314  0023AA                     __ptext13:
  4315                           	opt stack 0
  4316  0023AA                     _doActionOn:
  4317                           	opt stack 22
  4318                           
  4319                           ;incstack = 0
  4320                           ;incstack = 0
  4321                           ;doActionOn@dmflags stored from wreg
  4322  0023AA  CFE8 F0CA          	movff	wreg,doActionOn@dmflags
  4323                           
  4324                           ; BSR set to: 0
  4325                           ;main.c: 1739: unsigned char i;
  4326                           ;main.c: 1740: unsigned char val;
  4327                           ;main.c: 1742: for (i = 0; i < 8; i++) {
  4328  0023AE  6BCC               	clrf	doActionOn@i& (0+255),b
  4329  0023B0                     l10726:
  4330                           
  4331                           ; BSR set to: 0
  4332                           ;main.c: 1745: if ( !( arg & ( 1 << i ) ) ) continue;
  4333  0023B0  C0CC  F0C7         	movff	doActionOn@i,??_doActionOn
  4334  0023B4  0E01               	movlw	1
  4335  0023B6  6FC8               	movwf	(??_doActionOn+1)& (0+255),b
  4336  0023B8  2BC7               	incf	??_doActionOn& (0+255),f,b
  4337  0023BA  D002               	goto	u12744
  4338  0023BC                     u12745:
  4339  0023BC  90D8               	bcf	status,0,c
  4340  0023BE  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4341  0023C0                     u12744:
  4342  0023C0  2FC7               	decfsz	??_doActionOn& (0+255),f,b
  4343  0023C2  D7FC               	goto	u12745
  4344  0023C4  51C8               	movf	(??_doActionOn+1)& (0+255),w,b
  4345  0023C6  1451               	andwf	doActionOn@arg,w,c
  4346  0023C8  E101 D137          	bz	l10782
  4347                           
  4348                           ; BSR set to: 0
  4349                           ;main.c: 1748: if ( dmflags & 0x10 ) {
  4350  0023CC  A9CA               	btfss	doActionOn@dmflags& (0+255),4,b
  4351  0023CE  D011               	goto	l431
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;main.c: 1749: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  4355  0023D0  90D8               	bcf	status,0,c
  4356  0023D2  35CC               	rlcf	doActionOn@i& (0+255),w,b
  4357  0023D4  6FC7               	movwf	??_doActionOn& (0+255),b
  4358  0023D6  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4359  0023D8  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4360  0023DA  0E75               	movlw	117
  4361  0023DC  25C7               	addwf	??_doActionOn& (0+255),w,b
  4362  0023DE  6E08               	movwf	?_Read_b_eep,c
  4363  0023E0  0E00               	movlw	0
  4364  0023E2  21C8               	addwfc	(??_doActionOn+1)& (0+255),w,b
  4365  0023E4  6E09               	movwf	?_Read_b_eep+1,c
  4366  0023E6  EC0B  F020         	call	_Read_b_eep	;wreg free
  4367  0023EA  0100               	movlb	0	; () banked
  4368  0023EC  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4369  0023EE  E001 D124          	bnz	l10782
  4370  0023F2                     l431:
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;main.c: 1752: }
  4374                           ;main.c: 1753: }
  4375                           ;main.c: 1756: if ( dmflags & 0x08 ) {
  4376  0023F2  A7CA               	btfss	doActionOn@dmflags& (0+255),3,b
  4377  0023F4  D011               	goto	l10738
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;main.c: 1757: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  4381  0023F6  90D8               	bcf	status,0,c
  4382  0023F8  35CC               	rlcf	doActionOn@i& (0+255),w,b
  4383  0023FA  6FC7               	movwf	??_doActionOn& (0+255),b
  4384  0023FC  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4385  0023FE  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4386  002400  0E76               	movlw	118
  4387  002402  25C7               	addwf	??_doActionOn& (0+255),w,b
  4388  002404  6E08               	movwf	?_Read_b_eep,c
  4389  002406  0E00               	movlw	0
  4390  002408  21C8               	addwfc	(??_doActionOn+1)& (0+255),w,b
  4391  00240A  6E09               	movwf	?_Read_b_eep+1,c
  4392  00240C  EC0B  F020         	call	_Read_b_eep	;wreg free
  4393  002410  0100               	movlb	0	; () banked
  4394  002412  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4395  002414  E001 D111          	bnz	l10782
  4396  002418                     l10738:
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;main.c: 1760: }
  4400                           ;main.c: 1761: }
  4401                           ;main.c: 1763: val = Read_b_eep(0x43 + 10 + i);
  4402  002418  0E4D               	movlw	77
  4403  00241A  25CC               	addwf	doActionOn@i& (0+255),w,b
  4404  00241C  6E08               	movwf	?_Read_b_eep,c
  4405  00241E  6A09               	clrf	?_Read_b_eep+1,c
  4406  002420  0E00               	movlw	0
  4407  002422  2209               	addwfc	?_Read_b_eep+1,f,c
  4408  002424  EC0B  F020         	call	_Read_b_eep	;wreg free
  4409  002428  0100               	movlb	0	; () banked
  4410  00242A  6FCB               	movwf	doActionOn@val& (0+255),b
  4411                           
  4412                           ; BSR set to: 0
  4413                           ;main.c: 1766: if ( !( val & 0x80 ) ) continue;
  4414  00242C  AFCB               	btfss	doActionOn@val& (0+255),7,b
  4415  00242E  D105               	goto	l10782
  4416  002430  D0E0               	goto	l10774
  4417  002432                     l437:
  4418                           
  4419                           ; BSR set to: 0
  4420                           ;main.c: 1771: LATBbits.LATB4 = 1;
  4421  002432  888A               	bsf	3978,4,c	;volatile
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;main.c: 1773: if (Read_b_eep(0x43 + 10) & 0x04 ) {
  4425  002434  6A09               	clrf	?_Read_b_eep+1,c
  4426  002436  0E4D               	movlw	77
  4427  002438  6E08               	movwf	?_Read_b_eep,c
  4428  00243A  EC0B  F020         	call	_Read_b_eep	;wreg free
  4429  00243E  0100               	movlb	0	; () banked
  4430  002440  6FC7               	movwf	??_doActionOn& (0+255),b
  4431  002442  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4432  002444  D0E8               	goto	l439
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;main.c: 1774: relay_protection_timer[ 0 ] =
  4436                           ;main.c: 1775: Read_b_eep(0x43 + 34) * 256 +
  4437                           ;main.c: 1776: Read_b_eep(0x43 + 35);
  4438  002446  6A09               	clrf	?_Read_b_eep+1,c
  4439  002448  0E66               	movlw	102
  4440  00244A  6E08               	movwf	?_Read_b_eep,c
  4441  00244C  EC0B  F020         	call	_Read_b_eep	;wreg free
  4442  002450  0100               	movlb	0	; () banked
  4443  002452  6FC7               	movwf	??_doActionOn& (0+255),b
  4444  002454  6A09               	clrf	?_Read_b_eep+1,c
  4445  002456  0E65               	movlw	101
  4446  002458  6E08               	movwf	?_Read_b_eep,c
  4447  00245A  EC0B  F020         	call	_Read_b_eep	;wreg free
  4448  00245E  0100               	movlb	0	; () banked
  4449  002460  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4450  002462  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4451  002464  51C7               	movf	??_doActionOn& (0+255),w,b
  4452  002466  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4453  002468  6F60               	movwf	_relay_protection_timer& (0+255),b
  4454  00246A  0E00               	movlw	0
  4455  00246C  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4456  00246E  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  4457  002470  D0D2               	goto	l439
  4458  002472                     l440:
  4459                           
  4460                           ; BSR set to: 0
  4461                           ;main.c: 1781: LATBbits.LATB1 = 1;
  4462  002472  828A               	bsf	3978,1,c	;volatile
  4463                           
  4464                           ; BSR set to: 0
  4465                           ;main.c: 1783: if (Read_b_eep(0x43 + 11) & 0x04 ) {
  4466  002474  6A09               	clrf	?_Read_b_eep+1,c
  4467  002476  0E4E               	movlw	78
  4468  002478  6E08               	movwf	?_Read_b_eep,c
  4469  00247A  EC0B  F020         	call	_Read_b_eep	;wreg free
  4470  00247E  0100               	movlb	0	; () banked
  4471  002480  6FC7               	movwf	??_doActionOn& (0+255),b
  4472  002482  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4473  002484  D0C8               	goto	l439
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;main.c: 1784: relay_protection_timer[ 1 ] =
  4477                           ;main.c: 1785: Read_b_eep(0x43 + 36) * 256 +
  4478                           ;main.c: 1786: Read_b_eep(0x43 + 37);
  4479  002486  6A09               	clrf	?_Read_b_eep+1,c
  4480  002488  0E68               	movlw	104
  4481  00248A  6E08               	movwf	?_Read_b_eep,c
  4482  00248C  EC0B  F020         	call	_Read_b_eep	;wreg free
  4483  002490  0100               	movlb	0	; () banked
  4484  002492  6FC7               	movwf	??_doActionOn& (0+255),b
  4485  002494  6A09               	clrf	?_Read_b_eep+1,c
  4486  002496  0E67               	movlw	103
  4487  002498  6E08               	movwf	?_Read_b_eep,c
  4488  00249A  EC0B  F020         	call	_Read_b_eep	;wreg free
  4489  00249E  0100               	movlb	0	; () banked
  4490  0024A0  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4491  0024A2  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4492  0024A4  51C7               	movf	??_doActionOn& (0+255),w,b
  4493  0024A6  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4494  0024A8  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  4495  0024AA  0E00               	movlw	0
  4496  0024AC  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4497  0024AE  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  4498  0024B0  D0B2               	goto	l439
  4499  0024B2                     l442:
  4500                           
  4501                           ; BSR set to: 0
  4502                           ;main.c: 1791: LATBbits.LATB0 = 1;
  4503  0024B2  808A               	bsf	3978,0,c	;volatile
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;main.c: 1793: if (Read_b_eep(0x43 + 12) & 0x04 ) {
  4507  0024B4  6A09               	clrf	?_Read_b_eep+1,c
  4508  0024B6  0E4F               	movlw	79
  4509  0024B8  6E08               	movwf	?_Read_b_eep,c
  4510  0024BA  EC0B  F020         	call	_Read_b_eep	;wreg free
  4511  0024BE  0100               	movlb	0	; () banked
  4512  0024C0  6FC7               	movwf	??_doActionOn& (0+255),b
  4513  0024C2  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4514  0024C4  D0A8               	goto	l439
  4515                           
  4516                           ; BSR set to: 0
  4517                           ;main.c: 1794: relay_protection_timer[ 2 ] =
  4518                           ;main.c: 1795: Read_b_eep(0x43 + 38) * 256 +
  4519                           ;main.c: 1796: Read_b_eep(0x43 + 39);
  4520  0024C6  6A09               	clrf	?_Read_b_eep+1,c
  4521  0024C8  0E6A               	movlw	106
  4522  0024CA  6E08               	movwf	?_Read_b_eep,c
  4523  0024CC  EC0B  F020         	call	_Read_b_eep	;wreg free
  4524  0024D0  0100               	movlb	0	; () banked
  4525  0024D2  6FC7               	movwf	??_doActionOn& (0+255),b
  4526  0024D4  6A09               	clrf	?_Read_b_eep+1,c
  4527  0024D6  0E69               	movlw	105
  4528  0024D8  6E08               	movwf	?_Read_b_eep,c
  4529  0024DA  EC0B  F020         	call	_Read_b_eep	;wreg free
  4530  0024DE  0100               	movlb	0	; () banked
  4531  0024E0  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4532  0024E2  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4533  0024E4  51C7               	movf	??_doActionOn& (0+255),w,b
  4534  0024E6  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4535  0024E8  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  4536  0024EA  0E00               	movlw	0
  4537  0024EC  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4538  0024EE  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  4539  0024F0  D092               	goto	l439
  4540  0024F2                     l444:
  4541                           
  4542                           ; BSR set to: 0
  4543                           ;main.c: 1801: LATCbits.LATC7 = 1;
  4544  0024F2  8E8B               	bsf	3979,7,c	;volatile
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;main.c: 1803: if ( Read_b_eep(0x43 + 13) & 0x04 ) {
  4548  0024F4  6A09               	clrf	?_Read_b_eep+1,c
  4549  0024F6  0E50               	movlw	80
  4550  0024F8  6E08               	movwf	?_Read_b_eep,c
  4551  0024FA  EC0B  F020         	call	_Read_b_eep	;wreg free
  4552  0024FE  0100               	movlb	0	; () banked
  4553  002500  6FC7               	movwf	??_doActionOn& (0+255),b
  4554  002502  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4555  002504  D088               	goto	l439
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;main.c: 1804: relay_protection_timer[ 3 ] =
  4559                           ;main.c: 1805: Read_b_eep(0x43 + 40) * 256 +
  4560                           ;main.c: 1806: Read_b_eep(0x43 + 41);
  4561  002506  6A09               	clrf	?_Read_b_eep+1,c
  4562  002508  0E6C               	movlw	108
  4563  00250A  6E08               	movwf	?_Read_b_eep,c
  4564  00250C  EC0B  F020         	call	_Read_b_eep	;wreg free
  4565  002510  0100               	movlb	0	; () banked
  4566  002512  6FC7               	movwf	??_doActionOn& (0+255),b
  4567  002514  6A09               	clrf	?_Read_b_eep+1,c
  4568  002516  0E6B               	movlw	107
  4569  002518  6E08               	movwf	?_Read_b_eep,c
  4570  00251A  EC0B  F020         	call	_Read_b_eep	;wreg free
  4571  00251E  0100               	movlb	0	; () banked
  4572  002520  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4573  002522  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4574  002524  51C7               	movf	??_doActionOn& (0+255),w,b
  4575  002526  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4576  002528  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  4577  00252A  0E00               	movlw	0
  4578  00252C  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4579  00252E  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  4580  002530  D072               	goto	l439
  4581  002532                     l446:
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;main.c: 1811: LATCbits.LATC6 = 1;
  4585  002532  8C8B               	bsf	3979,6,c	;volatile
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;main.c: 1813: if (Read_b_eep(0x43 + 14) & 0x04 ) {
  4589  002534  6A09               	clrf	?_Read_b_eep+1,c
  4590  002536  0E51               	movlw	81
  4591  002538  6E08               	movwf	?_Read_b_eep,c
  4592  00253A  EC0B  F020         	call	_Read_b_eep	;wreg free
  4593  00253E  0100               	movlb	0	; () banked
  4594  002540  6FC7               	movwf	??_doActionOn& (0+255),b
  4595  002542  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4596  002544  D068               	goto	l439
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;main.c: 1814: relay_protection_timer[ 4 ] =
  4600                           ;main.c: 1815: Read_b_eep(0x43 + 42) * 256 +
  4601                           ;main.c: 1816: Read_b_eep(0x43 + 43);
  4602  002546  6A09               	clrf	?_Read_b_eep+1,c
  4603  002548  0E6E               	movlw	110
  4604  00254A  6E08               	movwf	?_Read_b_eep,c
  4605  00254C  EC0B  F020         	call	_Read_b_eep	;wreg free
  4606  002550  0100               	movlb	0	; () banked
  4607  002552  6FC7               	movwf	??_doActionOn& (0+255),b
  4608  002554  6A09               	clrf	?_Read_b_eep+1,c
  4609  002556  0E6D               	movlw	109
  4610  002558  6E08               	movwf	?_Read_b_eep,c
  4611  00255A  EC0B  F020         	call	_Read_b_eep	;wreg free
  4612  00255E  0100               	movlb	0	; () banked
  4613  002560  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4614  002562  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4615  002564  51C7               	movf	??_doActionOn& (0+255),w,b
  4616  002566  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4617  002568  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  4618  00256A  0E00               	movlw	0
  4619  00256C  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4620  00256E  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  4621  002570  D052               	goto	l439
  4622  002572                     l448:
  4623                           
  4624                           ; BSR set to: 0
  4625                           ;main.c: 1821: LATCbits.LATC5 = 1;
  4626  002572  8A8B               	bsf	3979,5,c	;volatile
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;main.c: 1823: if (Read_b_eep(0x43 + 15) & 0x04) {
  4630  002574  6A09               	clrf	?_Read_b_eep+1,c
  4631  002576  0E52               	movlw	82
  4632  002578  6E08               	movwf	?_Read_b_eep,c
  4633  00257A  EC0B  F020         	call	_Read_b_eep	;wreg free
  4634  00257E  0100               	movlb	0	; () banked
  4635  002580  6FC7               	movwf	??_doActionOn& (0+255),b
  4636  002582  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4637  002584  D048               	goto	l439
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;main.c: 1824: relay_protection_timer[ 5 ] =
  4641                           ;main.c: 1825: Read_b_eep(0x43 + 44) * 256 +
  4642                           ;main.c: 1826: Read_b_eep(0x43 + 45);
  4643  002586  6A09               	clrf	?_Read_b_eep+1,c
  4644  002588  0E70               	movlw	112
  4645  00258A  6E08               	movwf	?_Read_b_eep,c
  4646  00258C  EC0B  F020         	call	_Read_b_eep	;wreg free
  4647  002590  0100               	movlb	0	; () banked
  4648  002592  6FC7               	movwf	??_doActionOn& (0+255),b
  4649  002594  6A09               	clrf	?_Read_b_eep+1,c
  4650  002596  0E6F               	movlw	111
  4651  002598  6E08               	movwf	?_Read_b_eep,c
  4652  00259A  EC0B  F020         	call	_Read_b_eep	;wreg free
  4653  00259E  0100               	movlb	0	; () banked
  4654  0025A0  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4655  0025A2  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4656  0025A4  51C7               	movf	??_doActionOn& (0+255),w,b
  4657  0025A6  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4658  0025A8  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  4659  0025AA  0E00               	movlw	0
  4660  0025AC  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4661  0025AE  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  4662  0025B0  D032               	goto	l439
  4663  0025B2                     l450:
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;main.c: 1831: LATCbits.LATC4 = 1;
  4667  0025B2  888B               	bsf	3979,4,c	;volatile
  4668                           
  4669                           ; BSR set to: 0
  4670                           ;main.c: 1833: if ( Read_b_eep(0x43 + 16) & 0x04) {
  4671  0025B4  6A09               	clrf	?_Read_b_eep+1,c
  4672  0025B6  0E53               	movlw	83
  4673  0025B8  6E08               	movwf	?_Read_b_eep,c
  4674  0025BA  EC0B  F020         	call	_Read_b_eep	;wreg free
  4675  0025BE  0100               	movlb	0	; () banked
  4676  0025C0  6FC7               	movwf	??_doActionOn& (0+255),b
  4677  0025C2  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4678  0025C4  D028               	goto	l439
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;main.c: 1834: relay_protection_timer[ 6 ] =
  4682                           ;main.c: 1835: Read_b_eep(0x43 + 46) * 256 +
  4683                           ;main.c: 1836: Read_b_eep(0x43 + 47);
  4684  0025C6  6A09               	clrf	?_Read_b_eep+1,c
  4685  0025C8  0E72               	movlw	114
  4686  0025CA  6E08               	movwf	?_Read_b_eep,c
  4687  0025CC  EC0B  F020         	call	_Read_b_eep	;wreg free
  4688  0025D0  0100               	movlb	0	; () banked
  4689  0025D2  6FC7               	movwf	??_doActionOn& (0+255),b
  4690  0025D4  6A09               	clrf	?_Read_b_eep+1,c
  4691  0025D6  0E71               	movlw	113
  4692  0025D8  6E08               	movwf	?_Read_b_eep,c
  4693  0025DA  EC0B  F020         	call	_Read_b_eep	;wreg free
  4694  0025DE  0100               	movlb	0	; () banked
  4695  0025E0  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4696  0025E2  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4697  0025E4  51C7               	movf	??_doActionOn& (0+255),w,b
  4698  0025E6  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4699  0025E8  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  4700  0025EA  0E00               	movlw	0
  4701  0025EC  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4702  0025EE  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  4703  0025F0  D012               	goto	l439
  4704  0025F2                     l10774:
  4705                           
  4706                           ; BSR set to: 0
  4707  0025F2  51CC               	movf	doActionOn@i& (0+255),w,b
  4708                           
  4709                           ; Switch size 1, requested type "speed"
  4710                           ; Number of cases is 7, Range of values is 0 to 6
  4711                           ; switch strategies available:
  4712                           ; Name         Instructions Cycles
  4713                           ; simple_byte           22    12 (average)
  4714                           ;	Chosen strategy is simple_byte
  4715  0025F4  E101 D71D          	bz	l437
  4716  0025F8  0A01               	xorlw	1	; case 1
  4717  0025FA  E101 D73A          	bz	l440
  4718  0025FE  0A03               	xorlw	3	; case 2
  4719  002600  E101 D757          	bz	l442
  4720  002604  0A01               	xorlw	1	; case 3
  4721  002606  E101 D774          	bz	l444
  4722  00260A  0A07               	xorlw	7	; case 4
  4723  00260C  E092               	bz	l446
  4724  00260E  0A01               	xorlw	1	; case 5
  4725  002610  E0B0               	bz	l448
  4726  002612  0A03               	xorlw	3	; case 6
  4727  002614  E0CE               	bz	l450
  4728  002616                     l439:
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;main.c: 1843: if ( val & 0x08 ) {
  4732  002616  A7CB               	btfss	doActionOn@val& (0+255),3,b
  4733  002618  D007               	goto	l10778
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;main.c: 1844: SendInformationEvent( i, 20, 3 );
  4737  00261A  0E14               	movlw	20
  4738  00261C  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4739  00261E  0E03               	movlw	3
  4740  002620  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4741  002622  51CC               	movf	doActionOn@i& (0+255),w,b
  4742  002624  EC67  F01D         	call	_SendInformationEvent
  4743  002628                     l10778:
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;main.c: 1845: }
  4747                           ;main.c: 1848: if ( val & 0x20 ) {
  4748  002628  ABCB               	btfss	doActionOn@val& (0+255),5,b
  4749  00262A  D007               	goto	l10782
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;main.c: 1849: SendInformationEvent( i, 20, 25 );
  4753  00262C  0E14               	movlw	20
  4754  00262E  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4755  002630  0E19               	movlw	25
  4756  002632  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4757  002634  51CC               	movf	doActionOn@i& (0+255),w,b
  4758  002636  EC67  F01D         	call	_SendInformationEvent
  4759  00263A                     l10782:
  4760                           
  4761                           ; BSR set to: 0
  4762  00263A  2BCC               	incf	doActionOn@i& (0+255),f,b
  4763                           
  4764                           ; BSR set to: 0
  4765  00263C  0E07               	movlw	7
  4766  00263E  65CC               	cpfsgt	doActionOn@i& (0+255),b
  4767  002640  D6B7               	goto	l10726
  4768                           
  4769                           ; BSR set to: 0
  4770  002642  0C07               	retlw	7
  4771  002644                     __end_of_doActionOn:
  4772                           	opt stack 0
  4773                           tblptru	equ	0xFF8
  4774                           prodh	equ	0xFF4
  4775                           prodl	equ	0xFF3
  4776                           postinc0	equ	0xFEE
  4777                           wreg	equ	0xFE8
  4778                           postinc2	equ	0xFDE
  4779                           postdec2	equ	0xFDD
  4780                           fsr2h	equ	0xFDA
  4781                           fsr2l	equ	0xFD9
  4782                           status	equ	0xFD8
  4783                           
  4784 ;; *************** function _doActionOff *****************
  4785 ;; Defined at:
  4786 ;;		line 1859 in file "../main.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;  dmflags         1    wreg     unsigned char 
  4789 ;;  arg             1   80[COMRAM] unsigned char 
  4790 ;; Auto vars:     Size  Location     Type
  4791 ;;  dmflags         1   24[BANK0 ] unsigned char 
  4792 ;;  i               1   26[BANK0 ] unsigned char 
  4793 ;;  val             1   25[BANK0 ] unsigned char 
  4794 ;; Return value:  Size  Location     Type
  4795 ;;		None               void
  4796 ;; Registers used:
  4797 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4798 ;; Tracked objects:
  4799 ;;		On entry : F/0
  4800 ;;		On exit  : F/0
  4801 ;;		Unchanged: 0/0
  4802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4803 ;;      Params:         1       0       0       0       0       0       0
  4804 ;;      Locals:         0       3       0       0       0       0       0
  4805 ;;      Temps:          0       2       0       0       0       0       0
  4806 ;;      Totals:         1       5       0       0       0       0       0
  4807 ;;Total ram usage:        6 bytes
  4808 ;; Hardware stack levels used:    1
  4809 ;; Hardware stack levels required when called:    7
  4810 ;; This function calls:
  4811 ;;		_Read_b_eep
  4812 ;;		_SendInformationEvent
  4813 ;; This function is called by:
  4814 ;;		_doApplicationOneSecondWork
  4815 ;;		_doDM
  4816 ;; This function uses a non-reentrant model
  4817 ;;
  4818                           
  4819                           	psect	text14
  4820  0034C0                     __ptext14:
  4821                           	opt stack 0
  4822  0034C0                     _doActionOff:
  4823                           	opt stack 22
  4824                           
  4825                           ; BSR set to: 0
  4826                           ;incstack = 0
  4827                           ;incstack = 0
  4828                           ;doActionOff@dmflags stored from wreg
  4829  0034C0  CFE8 F0C9          	movff	wreg,doActionOff@dmflags
  4830                           
  4831                           ; BSR set to: 0
  4832                           ;main.c: 1861: unsigned char i;
  4833                           ;main.c: 1862: unsigned char val;
  4834                           ;main.c: 1864: for ( i = 0; i < 8; i++ ) {
  4835  0034C4  6BCB               	clrf	doActionOff@i& (0+255),b
  4836  0034C6                     l10234:
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;main.c: 1867: if ( !( arg & ( 1 << i ) ) ) continue;
  4840  0034C6  C0CB  F0C7         	movff	doActionOff@i,??_doActionOff
  4841  0034CA  0E01               	movlw	1
  4842  0034CC  6FC8               	movwf	(??_doActionOff+1)& (0+255),b
  4843  0034CE  2BC7               	incf	??_doActionOff& (0+255),f,b
  4844  0034D0  D002               	goto	u12084
  4845  0034D2                     u12085:
  4846  0034D2  90D8               	bcf	status,0,c
  4847  0034D4  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4848  0034D6                     u12084:
  4849  0034D6  2FC7               	decfsz	??_doActionOff& (0+255),f,b
  4850  0034D8  D7FC               	goto	u12085
  4851  0034DA  51C8               	movf	(??_doActionOff+1)& (0+255),w,b
  4852  0034DC  1451               	andwf	doActionOff@arg,w,c
  4853  0034DE  E05F               	bz	l10262
  4854                           
  4855                           ; BSR set to: 0
  4856                           ;main.c: 1870: if ( dmflags & 0x10 ) {
  4857  0034E0  A9C9               	btfss	doActionOff@dmflags& (0+255),4,b
  4858  0034E2  D010               	goto	l461
  4859                           
  4860                           ; BSR set to: 0
  4861                           ;main.c: 1871: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  4862  0034E4  90D8               	bcf	status,0,c
  4863  0034E6  35CB               	rlcf	doActionOff@i& (0+255),w,b
  4864  0034E8  6FC7               	movwf	??_doActionOff& (0+255),b
  4865  0034EA  6BC8               	clrf	(??_doActionOff+1)& (0+255),b
  4866  0034EC  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4867  0034EE  0E75               	movlw	117
  4868  0034F0  25C7               	addwf	??_doActionOff& (0+255),w,b
  4869  0034F2  6E08               	movwf	?_Read_b_eep,c
  4870  0034F4  0E00               	movlw	0
  4871  0034F6  21C8               	addwfc	(??_doActionOff+1)& (0+255),w,b
  4872  0034F8  6E09               	movwf	?_Read_b_eep+1,c
  4873  0034FA  EC0B  F020         	call	_Read_b_eep	;wreg free
  4874  0034FE  0100               	movlb	0	; () banked
  4875  003500  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4876  003502  E14D               	bnz	l10262
  4877  003504                     l461:
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;main.c: 1874: }
  4881                           ;main.c: 1875: }
  4882                           ;main.c: 1878: if ( dmflags & 0x08 ) {
  4883  003504  A7C9               	btfss	doActionOff@dmflags& (0+255),3,b
  4884  003506  D010               	goto	l10246
  4885                           
  4886                           ; BSR set to: 0
  4887                           ;main.c: 1879: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  4888  003508  90D8               	bcf	status,0,c
  4889  00350A  35CB               	rlcf	doActionOff@i& (0+255),w,b
  4890  00350C  6FC7               	movwf	??_doActionOff& (0+255),b
  4891  00350E  6BC8               	clrf	(??_doActionOff+1)& (0+255),b
  4892  003510  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4893  003512  0E76               	movlw	118
  4894  003514  25C7               	addwf	??_doActionOff& (0+255),w,b
  4895  003516  6E08               	movwf	?_Read_b_eep,c
  4896  003518  0E00               	movlw	0
  4897  00351A  21C8               	addwfc	(??_doActionOff+1)& (0+255),w,b
  4898  00351C  6E09               	movwf	?_Read_b_eep+1,c
  4899  00351E  EC0B  F020         	call	_Read_b_eep	;wreg free
  4900  003522  0100               	movlb	0	; () banked
  4901  003524  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4902  003526  E13B               	bnz	l10262
  4903  003528                     l10246:
  4904                           
  4905                           ; BSR set to: 0
  4906                           ;main.c: 1882: }
  4907                           ;main.c: 1883: }
  4908                           ;main.c: 1885: val = Read_b_eep(0x43 + 10 + i);
  4909  003528  0E4D               	movlw	77
  4910  00352A  25CB               	addwf	doActionOff@i& (0+255),w,b
  4911  00352C  6E08               	movwf	?_Read_b_eep,c
  4912  00352E  6A09               	clrf	?_Read_b_eep+1,c
  4913  003530  0E00               	movlw	0
  4914  003532  2209               	addwfc	?_Read_b_eep+1,f,c
  4915  003534  EC0B  F020         	call	_Read_b_eep	;wreg free
  4916  003538  0100               	movlb	0	; () banked
  4917  00353A  6FCA               	movwf	doActionOff@val& (0+255),b
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;main.c: 1888: if ( !( val & 0x80 ) ) continue;
  4921  00353C  AFCA               	btfss	doActionOff@val& (0+255),7,b
  4922  00353E  D02F               	goto	l10262
  4923  003540  D00E               	goto	l10254
  4924  003542                     l467:
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;main.c: 1893: LATBbits.LATB4 = 0;
  4928  003542  988A               	bcf	3978,4,c	;volatile
  4929                           
  4930                           ;main.c: 1894: break;
  4931  003544  D01A               	goto	l468
  4932  003546                     l469:
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;main.c: 1897: LATBbits.LATB1 = 0;
  4936  003546  928A               	bcf	3978,1,c	;volatile
  4937                           
  4938                           ;main.c: 1898: break;
  4939  003548  D018               	goto	l468
  4940  00354A                     l470:
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;main.c: 1901: LATBbits.LATB0 = 0;
  4944  00354A  908A               	bcf	3978,0,c	;volatile
  4945                           
  4946                           ;main.c: 1902: break;
  4947  00354C  D016               	goto	l468
  4948  00354E                     l471:
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;main.c: 1905: LATCbits.LATC7 = 0;
  4952  00354E  9E8B               	bcf	3979,7,c	;volatile
  4953                           
  4954                           ;main.c: 1906: break;
  4955  003550  D014               	goto	l468
  4956  003552                     l472:
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;main.c: 1909: LATCbits.LATC6 = 0;
  4960  003552  9C8B               	bcf	3979,6,c	;volatile
  4961                           
  4962                           ;main.c: 1910: break;
  4963  003554  D012               	goto	l468
  4964  003556                     l473:
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;main.c: 1913: LATCbits.LATC5 = 0;
  4968  003556  9A8B               	bcf	3979,5,c	;volatile
  4969                           
  4970                           ;main.c: 1914: break;
  4971  003558  D010               	goto	l468
  4972  00355A                     l474:
  4973                           
  4974                           ; BSR set to: 0
  4975                           ;main.c: 1917: LATCbits.LATC4 = 0;
  4976  00355A  988B               	bcf	3979,4,c	;volatile
  4977                           
  4978                           ;main.c: 1918: break;
  4979  00355C  D00E               	goto	l468
  4980  00355E                     l10254:
  4981                           
  4982                           ; BSR set to: 0
  4983  00355E  51CB               	movf	doActionOff@i& (0+255),w,b
  4984                           
  4985                           ; Switch size 1, requested type "speed"
  4986                           ; Number of cases is 7, Range of values is 0 to 6
  4987                           ; switch strategies available:
  4988                           ; Name         Instructions Cycles
  4989                           ; simple_byte           22    12 (average)
  4990                           ;	Chosen strategy is simple_byte
  4991  003560  E0F0               	bz	l467
  4992  003562  0A01               	xorlw	1	; case 1
  4993  003564  E0F0               	bz	l469
  4994  003566  0A03               	xorlw	3	; case 2
  4995  003568  E0F0               	bz	l470
  4996  00356A  0A01               	xorlw	1	; case 3
  4997  00356C  E0F0               	bz	l471
  4998  00356E  0A07               	xorlw	7	; case 4
  4999  003570  E0F0               	bz	l472
  5000  003572  0A01               	xorlw	1	; case 5
  5001  003574  E0F0               	bz	l473
  5002  003576  0A03               	xorlw	3	; case 6
  5003  003578  E0F0               	bz	l474
  5004  00357A                     l468:
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;main.c: 1923: if ( val & 0x10 ) {
  5008  00357A  A9CA               	btfss	doActionOff@val& (0+255),4,b
  5009  00357C  D007               	goto	l10258
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;main.c: 1924: SendInformationEvent( i, 20, 4 );
  5013  00357E  0E14               	movlw	20
  5014  003580  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  5015  003582  0E04               	movlw	4
  5016  003584  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5017  003586  51CB               	movf	doActionOff@i& (0+255),w,b
  5018  003588  EC67  F01D         	call	_SendInformationEvent
  5019  00358C                     l10258:
  5020                           
  5021                           ; BSR set to: 0
  5022                           ;main.c: 1925: }
  5023                           ;main.c: 1928: if ( val & 0x40 ) {
  5024  00358C  ADCA               	btfss	doActionOff@val& (0+255),6,b
  5025  00358E  D007               	goto	l10262
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;main.c: 1929: SendInformationEvent( i, 20, 24 );
  5029  003590  0E14               	movlw	20
  5030  003592  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  5031  003594  0E18               	movlw	24
  5032  003596  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5033  003598  51CB               	movf	doActionOff@i& (0+255),w,b
  5034  00359A  EC67  F01D         	call	_SendInformationEvent
  5035  00359E                     l10262:
  5036                           
  5037                           ; BSR set to: 0
  5038  00359E  2BCB               	incf	doActionOff@i& (0+255),f,b
  5039                           
  5040                           ; BSR set to: 0
  5041  0035A0  0E07               	movlw	7
  5042  0035A2  65CB               	cpfsgt	doActionOff@i& (0+255),b
  5043  0035A4  D790               	goto	l10234
  5044                           
  5045                           ; BSR set to: 0
  5046  0035A6  0C07               	retlw	7
  5047  0035A8                     __end_of_doActionOff:
  5048                           	opt stack 0
  5049                           tblptru	equ	0xFF8
  5050                           prodh	equ	0xFF4
  5051                           prodl	equ	0xFF3
  5052                           postinc0	equ	0xFEE
  5053                           wreg	equ	0xFE8
  5054                           postinc2	equ	0xFDE
  5055                           postdec2	equ	0xFDD
  5056                           fsr2h	equ	0xFDA
  5057                           fsr2l	equ	0xFD9
  5058                           status	equ	0xFD8
  5059                           
  5060 ;; *************** function _vscp_handleProtocolEvent *****************
  5061 ;; Defined at:
  5062 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;		None
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;  bytes           1   45[BANK0 ] unsigned char 
  5067 ;;  page_save       2   41[BANK0 ] unsigned short 
  5068 ;;  i               1   51[BANK0 ] unsigned char 
  5069 ;;  bytes           2   55[BANK0 ] unsigned short 
  5070 ;;  page_save       2   39[BANK0 ] unsigned short 
  5071 ;;  byte            1   54[BANK0 ] unsigned char 
  5072 ;;  cb              1   50[BANK0 ] unsigned char 
  5073 ;;  bytes_this_t    1   49[BANK0 ] unsigned char 
  5074 ;;  j               1   59[BANK0 ] unsigned char 
  5075 ;;  i               1   57[BANK0 ] unsigned char 
  5076 ;;  k               1   52[BANK0 ] unsigned char 
  5077 ;;  i               1   53[BANK0 ] unsigned char 
  5078 ;;  len             1   48[BANK0 ] unsigned char 
  5079 ;;  pos             1   47[BANK0 ] unsigned char 
  5080 ;;  i               1   58[BANK0 ] unsigned char 
  5081 ;;  len             1   46[BANK0 ] unsigned char 
  5082 ;;  pos             1   44[BANK0 ] unsigned char 
  5083 ;;  offset          1   43[BANK0 ] unsigned char 
  5084 ;; Return value:  Size  Location     Type
  5085 ;;		None               void
  5086 ;; Registers used:
  5087 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5088 ;; Tracked objects:
  5089 ;;		On entry : F/0
  5090 ;;		On exit  : 0/0
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5093 ;;      Params:         0       0       0       0       0       0       0
  5094 ;;      Locals:         0      21       0       0       0       0       0
  5095 ;;      Temps:          0       7       0       0       0       0       0
  5096 ;;      Totals:         0      28       0       0       0       0       0
  5097 ;;Total ram usage:       28 bytes
  5098 ;; Hardware stack levels used:    1
  5099 ;; Hardware stack levels required when called:    9
  5100 ;; This function calls:
  5101 ;;		_vscp_init
  5102 ;;		_vscp_readAppReg
  5103 ;;		_vscp_writeAppReg
  5104 ;;		_vscp_sendEvent
  5105 ;;		_vscp_getGUID
  5106 ;;		_vscp_getMDF_URL
  5107 ;;		_vscp_goBootloaderMode
  5108 ;;		_vscp_getMatrixInfo
  5109 ;;		_vscp_handleHeartbeat
  5110 ;;		_vscp_handleSetNickname
  5111 ;;		_vscp_handleDropNickname
  5112 ;;		_vscp_newNodeOnline
  5113 ;;		_vscp_readRegister
  5114 ;;		_vscp_readStdReg
  5115 ;;		_vscp_writeRegister
  5116 ;;		_vscp_writeStdReg
  5117 ;;		___lbmod
  5118 ;; This function is called by:
  5119 ;;		_main
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           	psect	text15
  5124  001318                     __ptext15:
  5125                           	opt stack 0
  5126  001318                     _vscp_handleProtocolEvent:
  5127                           	opt stack 21
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;incstack = 0
  5134                           ;incstack = 0
  5135  001318  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  5136  00131A  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  5137  00131C  E101 D2E9          	bz	l10068
  5138  001320  D319               	goto	l1268
  5139  001322                     l9650:
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  5143  001322  ECE6  F01D         	call	_vscp_handleHeartbeat	;wreg free
  5144                           
  5145                           ;vscp_firmware.c: 807: break;
  5146  001326  D316               	goto	l1268
  5147  001328                     l9652:
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  5151  001328  EC84  F01E         	call	_vscp_newNodeOnline	;wreg free
  5152                           
  5153                           ;vscp_firmware.c: 812: break;
  5154  00132C  D313               	goto	l1268
  5155  00132E                     l9654:
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  5159  00132E  EC0E  F01F         	call	_vscp_handleSetNickname	;wreg free
  5160                           
  5161                           ;vscp_firmware.c: 817: break;
  5162  001332  D310               	goto	l1268
  5163  001334                     l9656:
  5164                           
  5165                           ; BSR set to: 0
  5166                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  5167  001334  EC3E  F01E         	call	_vscp_handleDropNickname	;wreg free
  5168                           
  5169                           ;vscp_firmware.c: 822: break;
  5170  001338  D30D               	goto	l1268
  5171  00133A                     l9658:
  5172                           
  5173                           ; BSR set to: 0
  5174                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  5175                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5176  00133A  5196               	movf	_vscp_imsg& (0+255),w,b
  5177  00133C  0B0F               	andlw	15
  5178  00133E  0A02               	xorlw	2
  5179  001340  E001 D308          	bnz	l1268
  5180                           
  5181                           ; BSR set to: 0
  5182  001344  5191               	movf	_vscp_nickname& (0+255),w,b
  5183  001346  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5184  00134A  62DF               	cpfseq	indf2,c
  5185  00134C  D303               	goto	l1268
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  5189  00134E  0E80               	movlw	128
  5190  001350  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5191  001352  D012               	goto	l9678
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  5195  001354  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5196  001356  ECFD  F01B         	call	_vscp_readAppReg
  5197  00135A                     L13:
  5198  00135A  0100               	movlb	0	; () banked
  5199  00135C                     L14:
  5200  00135C  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
  5201                           
  5202                           ; BSR set to: 0
  5203                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  5204  00135E  C09D  F0A9         	movff	_vscp_imsg+7,_vscp_omsg+5
  5205                           
  5206                           ; BSR set to: 0
  5207                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  5208  001362  0E03               	movlw	3
  5209  001364  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  5213  001366  0E82               	movlw	130
  5214  001368  6FA4               	movwf	_vscp_omsg& (0+255),b
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  5218  00136A  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5219  00136C  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5220                           
  5221                           ; BSR set to: 0
  5222                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  5223  00136E  0E0A               	movlw	10
  5224  001370  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5225  001372                     l9676:
  5226                           
  5227                           ; BSR set to: 0
  5228                           ;vscp_firmware.c: 843: vscp_sendEvent();
  5229  001372  ECFB  F01E         	call	_vscp_sendEvent	;wreg free
  5230                           
  5231                           ;vscp_firmware.c: 844: }
  5232  001376  D2EE               	goto	l1268
  5233  001378                     l9678:
  5234                           
  5235                           ; BSR set to: 0
  5236                           ;vscp_firmware.c: 845: else {
  5237                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  5238                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  5239  001378  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5240  00137A  EC29  F015         	call	_vscp_readStdReg
  5241  00137E  D7ED               	goto	L13
  5242  001380                     l9692:
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  5246                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5247  001380  5196               	movf	_vscp_imsg& (0+255),w,b
  5248  001382  0B0F               	andlw	15
  5249  001384  0A03               	xorlw	3
  5250  001386  E001 D2E5          	bnz	l1268
  5251                           
  5252                           ; BSR set to: 0
  5253  00138A  5191               	movf	_vscp_nickname& (0+255),w,b
  5254  00138C  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5255  001390  62DF               	cpfseq	indf2,c
  5256  001392  D2E0               	goto	l1268
  5257                           
  5258                           ; BSR set to: 0
  5259                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  5260  001394  0E80               	movlw	128
  5261  001396  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5262  001398  D006               	goto	l9712
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  5266                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5267  00139A  C09E  F051         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  5268  00139E  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5269  0013A0  EC6F  F004         	call	_vscp_writeAppReg
  5270  0013A4  D7DB               	goto	L14
  5271  0013A6                     l9712:
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;vscp_firmware.c: 888: else {
  5275                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  5276                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5277  0013A6  C09E  F010         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  5278  0013AA  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5279  0013AC  ECDD  F019         	call	_vscp_writeStdReg
  5280  0013B0  D7D4               	goto	L13
  5281  0013B2                     l9726:
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  5285                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  5286                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  5287                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  5288                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  5289                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  5290                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  5291  0013B2  5191               	movf	_vscp_nickname& (0+255),w,b
  5292  0013B4  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5293  0013B8  62DF               	cpfseq	indf2,c
  5294  0013BA  D2CC               	goto	l1268
  5295                           
  5296                           ; BSR set to: 0
  5297  0013BC  0E00               	movlw	0
  5298  0013BE  ECF8  F01F         	call	_vscp_getGUID
  5299  0013C2  0100               	movlb	0	; () banked
  5300  0013C4  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5301  0013C6  E001 D2C5          	bnz	l1268
  5302                           
  5303                           ; BSR set to: 0
  5304  0013CA  0E03               	movlw	3
  5305  0013CC  ECF8  F01F         	call	_vscp_getGUID
  5306  0013D0  0100               	movlb	0	; () banked
  5307  0013D2  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5308  0013D4  E001 D2BE          	bnz	l1268
  5309                           
  5310                           ; BSR set to: 0
  5311  0013D8  0E05               	movlw	5
  5312  0013DA  ECF8  F01F         	call	_vscp_getGUID
  5313  0013DE  0100               	movlb	0	; () banked
  5314  0013E0  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5315  0013E2  E001 D2B7          	bnz	l1268
  5316                           
  5317                           ; BSR set to: 0
  5318  0013E6  0E07               	movlw	7
  5319  0013E8  ECF8  F01F         	call	_vscp_getGUID
  5320  0013EC  0100               	movlb	0	; () banked
  5321  0013EE  19A1               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  5322  0013F0  E001 D2B0          	bnz	l1268
  5323                           
  5324                           ; BSR set to: 0
  5325  0013F4  5053               	movf	_vscp_page_select+1,w,c
  5326  0013F6  19A2               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  5327  0013F8  E001 D2AC          	bnz	l1268
  5328                           
  5329                           ; BSR set to: 0
  5330  0013FC  5052               	movf	_vscp_page_select,w,c
  5331  0013FE  EE20  F0A3         	lfsr	2,_vscp_imsg+13
  5332  001402  62DF               	cpfseq	indf2,c
  5333  001404  D2A7               	goto	l1268
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  5337  001406  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5338  001408  EC90  F01F         	call	_vscp_goBootloaderMode
  5339  00140C  D2A3               	goto	l1268
  5340  00140E                     l9742:
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  5344                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  5345                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  5346                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  5347  00140E  0E00               	movlw	0
  5348  001410  ECF8  F01F         	call	_vscp_getGUID
  5349  001414  0100               	movlb	0	; () banked
  5350  001416  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5351  001418  E173               	bnz	l9786
  5352                           
  5353                           ; BSR set to: 0
  5354  00141A  0E01               	movlw	1
  5355  00141C  ECF8  F01F         	call	_vscp_getGUID
  5356  001420  0100               	movlb	0	; () banked
  5357  001422  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5358  001424  E16D               	bnz	l9786
  5359                           
  5360                           ; BSR set to: 0
  5361  001426  0E02               	movlw	2
  5362  001428  ECF8  F01F         	call	_vscp_getGUID
  5363  00142C  0100               	movlb	0	; () banked
  5364  00142E  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5365  001430  E167               	bnz	l9786
  5366                           
  5367                           ; BSR set to: 0
  5368  001432  0E03               	movlw	3
  5369  001434  ECF8  F01F         	call	_vscp_getGUID
  5370  001438  0100               	movlb	0	; () banked
  5371  00143A  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5372  00143C  E161               	bnz	l9786
  5373                           
  5374                           ; BSR set to: 0
  5375                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  5376  00143E  898D               	bsf	_vscp_guid_reset& (0+255),4,b
  5377  001440  D05F               	goto	l9786
  5378  001442                     l9752:
  5379                           
  5380                           ; BSR set to: 0
  5381                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  5382                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  5383                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  5384                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  5385  001442  0E04               	movlw	4
  5386  001444  ECF8  F01F         	call	_vscp_getGUID
  5387  001448  0100               	movlb	0	; () banked
  5388  00144A  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5389  00144C  E159               	bnz	l9786
  5390                           
  5391                           ; BSR set to: 0
  5392  00144E  0E05               	movlw	5
  5393  001450  ECF8  F01F         	call	_vscp_getGUID
  5394  001454  0100               	movlb	0	; () banked
  5395  001456  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5396  001458  E153               	bnz	l9786
  5397                           
  5398                           ; BSR set to: 0
  5399  00145A  0E06               	movlw	6
  5400  00145C  ECF8  F01F         	call	_vscp_getGUID
  5401  001460  0100               	movlb	0	; () banked
  5402  001462  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5403  001464  E14D               	bnz	l9786
  5404                           
  5405                           ; BSR set to: 0
  5406  001466  0E07               	movlw	7
  5407  001468  ECF8  F01F         	call	_vscp_getGUID
  5408  00146C  0100               	movlb	0	; () banked
  5409  00146E  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5410  001470  E147               	bnz	l9786
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  5414  001472  8B8D               	bsf	_vscp_guid_reset& (0+255),5,b
  5415  001474  D045               	goto	l9786
  5416  001476                     l9762:
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  5420                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  5421                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  5422                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  5423  001476  0E08               	movlw	8
  5424  001478  ECF8  F01F         	call	_vscp_getGUID
  5425  00147C  0100               	movlb	0	; () banked
  5426  00147E  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5427  001480  E13F               	bnz	l9786
  5428                           
  5429                           ; BSR set to: 0
  5430  001482  0E09               	movlw	9
  5431  001484  ECF8  F01F         	call	_vscp_getGUID
  5432  001488  0100               	movlb	0	; () banked
  5433  00148A  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5434  00148C  E139               	bnz	l9786
  5435                           
  5436                           ; BSR set to: 0
  5437  00148E  0E0A               	movlw	10
  5438  001490  ECF8  F01F         	call	_vscp_getGUID
  5439  001494  0100               	movlb	0	; () banked
  5440  001496  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5441  001498  E133               	bnz	l9786
  5442                           
  5443                           ; BSR set to: 0
  5444  00149A  0E0B               	movlw	11
  5445  00149C  ECF8  F01F         	call	_vscp_getGUID
  5446  0014A0  0100               	movlb	0	; () banked
  5447  0014A2  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5448  0014A4  E12D               	bnz	l9786
  5449                           
  5450                           ; BSR set to: 0
  5451                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  5452  0014A6  8D8D               	bsf	_vscp_guid_reset& (0+255),6,b
  5453  0014A8  D02B               	goto	l9786
  5454  0014AA                     l9772:
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  5458                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  5459                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  5460                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  5461  0014AA  0E0C               	movlw	12
  5462  0014AC  ECF8  F01F         	call	_vscp_getGUID
  5463  0014B0  0100               	movlb	0	; () banked
  5464  0014B2  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5465  0014B4  E125               	bnz	l9786
  5466                           
  5467                           ; BSR set to: 0
  5468  0014B6  0E0D               	movlw	13
  5469  0014B8  ECF8  F01F         	call	_vscp_getGUID
  5470  0014BC  0100               	movlb	0	; () banked
  5471  0014BE  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5472  0014C0  E11F               	bnz	l9786
  5473                           
  5474                           ; BSR set to: 0
  5475  0014C2  0E0E               	movlw	14
  5476  0014C4  ECF8  F01F         	call	_vscp_getGUID
  5477  0014C8  0100               	movlb	0	; () banked
  5478  0014CA  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5479  0014CC  E119               	bnz	l9786
  5480                           
  5481                           ; BSR set to: 0
  5482  0014CE  0E0F               	movlw	15
  5483  0014D0  ECF8  F01F         	call	_vscp_getGUID
  5484  0014D4  0100               	movlb	0	; () banked
  5485  0014D6  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5486  0014D8  E113               	bnz	l9786
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  5490  0014DA  8F8D               	bsf	_vscp_guid_reset& (0+255),7,b
  5491  0014DC  D011               	goto	l9786
  5492  0014DE                     l1208:
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  5496  0014DE  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  5497                           
  5498                           ;vscp_firmware.c: 965: break;
  5499  0014E0  D00F               	goto	l9786
  5500  0014E2                     l9784:
  5501                           
  5502                           ; BSR set to: 0
  5503  0014E2  399C               	swapf	(_vscp_imsg+6)& (0+255),w,b
  5504  0014E4  0B0F               	andlw	15
  5505  0014E6  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5506  0014E8  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5507                           
  5508                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5509                           ; Switch size 1, requested type "speed"
  5510                           ; Number of cases is 1, Range of values is 0 to 0
  5511                           ; switch strategies available:
  5512                           ; Name         Instructions Cycles
  5513                           ; simple_byte            4     3 (average)
  5514                           ;	Chosen strategy is simple_byte
  5515  0014EA  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5516  0014EC  E1F8               	bnz	l1208
  5517                           
  5518                           ; BSR set to: 0
  5519                           ; Switch size 1, requested type "speed"
  5520                           ; Number of cases is 4, Range of values is 0 to 3
  5521                           ; switch strategies available:
  5522                           ; Name         Instructions Cycles
  5523                           ; simple_byte           13     7 (average)
  5524                           ;	Chosen strategy is simple_byte
  5525  0014EE  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5526  0014F0  E08E               	bz	l9742
  5527  0014F2  0A01               	xorlw	1	; case 1
  5528  0014F4  E0A6               	bz	l9752
  5529  0014F6  0A03               	xorlw	3	; case 2
  5530  0014F8  E0BE               	bz	l9762
  5531  0014FA  0A01               	xorlw	1	; case 3
  5532  0014FC  E0D6               	bz	l9772
  5533  0014FE  D7EF               	goto	l1208
  5534  001500                     l9786:
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  5538  001500  518D               	movf	_vscp_guid_reset& (0+255),w,b
  5539  001502  0BF0               	andlw	240
  5540  001504  0AF0               	xorlw	240
  5541  001506  E001 D225          	bnz	l1268
  5542                           
  5543                           ; BSR set to: 0
  5544                           ;vscp_firmware.c: 970: vscp_init();
  5545  00150A  ECC4  F01D         	call	_vscp_init	;wreg free
  5546  00150E  D222               	goto	l1268
  5547  001510                     l9790:
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5551  001510  5191               	movf	_vscp_nickname& (0+255),w,b
  5552  001512  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5553  001516  62DF               	cpfseq	indf2,c
  5554  001518  D21D               	goto	l1268
  5555                           
  5556                           ; BSR set to: 0
  5557                           ;vscp_firmware.c: 978: uint8_t i;
  5558                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  5559  00151A  6BDD               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  5560                           
  5561                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  5562  00151C  C09D  F0DC         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  5563                           
  5564                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  5565  001520  C09E  F0DF         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  5566                           
  5567                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  5568  001524  6BEB               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  5569  001526  D047               	goto	l9822
  5570  001528                     l9794:
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  5574  001528  0E07               	movlw	7
  5575  00152A  6E08               	movwf	?___lbmod,c
  5576  00152C  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5577  00152E  ECAE  F01E         	call	___lbmod
  5578  001532  0100               	movlb	0	; () banked
  5579  001534  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5580  001536  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5581  001538  0FAA               	addlw	low (_vscp_omsg+6)
  5582  00153A  6ED9               	movwf	fsr2l,c
  5583  00153C  6ADA               	clrf	fsr2h,c
  5584  00153E  51DC               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  5585  001540  25EB               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5586  001542  EC9E  F01F         	call	_vscp_readRegister
  5587  001546  6EDF               	movwf	indf2,c
  5588                           
  5589                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  5590  001548  0E07               	movlw	7
  5591  00154A  6E08               	movwf	?___lbmod,c
  5592  00154C  0100               	movlb	0	; () banked
  5593  00154E  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5594  001550  ECAE  F01E         	call	___lbmod
  5595  001554  0A06               	xorlw	6
  5596  001556  E00B               	bz	l9800
  5597  001558  0EFF               	movlw	255
  5598  00155A  0100               	movlb	0	; () banked
  5599  00155C  25DF               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  5600  00155E  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5601  001560  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5602  001562  0EFF               	movlw	255
  5603  001564  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  5604  001566  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5605  001568  19D1               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5606  00156A  11D2               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5607  00156C  E123               	bnz	l9820
  5608  00156E                     l9800:
  5609                           
  5610                           ;vscp_firmware.c: 988: uint8_t bytes;
  5611                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  5612  00156E  0E07               	movlw	7
  5613  001570  6E08               	movwf	?___lbmod,c
  5614  001572  0100               	movlb	0	; () banked
  5615  001574  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5616  001576  ECAE  F01E         	call	___lbmod
  5617  00157A  0A06               	xorlw	6
  5618  00157C  E103               	bnz	l9804
  5619                           
  5620                           ;vscp_firmware.c: 991: bytes = 7;
  5621  00157E  0E07               	movlw	7
  5622  001580  0100               	movlb	0	; () banked
  5623  001582  D009               	goto	L15
  5624  001584                     l9804:
  5625                           
  5626                           ;vscp_firmware.c: 993: else {
  5627                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  5628  001584  0E07               	movlw	7
  5629  001586  6E08               	movwf	?___lbmod,c
  5630  001588  0100               	movlb	0	; () banked
  5631  00158A  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5632  00158C  ECAE  F01E         	call	___lbmod
  5633  001590  0100               	movlb	0	; () banked
  5634  001592  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5635  001594  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5636  001596                     L15:
  5637  001596  6FDE               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  5638                           
  5639                           ; BSR set to: 0
  5640                           ;vscp_firmware.c: 995: }
  5641                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  5642  001598  51DE               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  5643  00159A  0F81               	addlw	129
  5644  00159C  6FA4               	movwf	_vscp_omsg& (0+255),b
  5645                           
  5646                           ; BSR set to: 0
  5647                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  5648  00159E  0E07               	movlw	7
  5649  0015A0  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  5653  0015A2  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5654  0015A4  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5655                           
  5656                           ; BSR set to: 0
  5657                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  5658  0015A6  0E1A               	movlw	26
  5659  0015A8  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  5663  0015AA  C0DD  F0A9         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  5664                           
  5665                           ; BSR set to: 0
  5666                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  5667  0015AE  ECFB  F01E         	call	_vscp_sendEvent	;wreg free
  5668                           
  5669                           ; BSR set to: 0
  5670                           ;vscp_firmware.c: 1005: pos++;
  5671  0015B2  2BDD               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  5672  0015B4                     l9820:
  5673                           
  5674                           ; BSR set to: 0
  5675  0015B4  2BEB               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  5676  0015B6                     l9822:
  5677                           
  5678                           ; BSR set to: 0
  5679  0015B6  51DF               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  5680  0015B8  5DEB               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5681  0015BA  E301 D1CB          	bc	l1268
  5682  0015BE  D7B4               	goto	l9794
  5683  0015C0                     l9824:
  5684                           
  5685                           ; BSR set to: 0
  5686                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5687  0015C0  5191               	movf	_vscp_nickname& (0+255),w,b
  5688  0015C2  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5689  0015C6  62DF               	cpfseq	indf2,c
  5690  0015C8  D1C5               	goto	l1268
  5691                           
  5692                           ; BSR set to: 0
  5693                           ;vscp_firmware.c: 1014: uint8_t i;
  5694                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  5695  0015CA  C09D  F0E0         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1264
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  5699  0015CE  5196               	movf	_vscp_imsg& (0+255),w,b
  5700  0015D0  0FFE               	addlw	254
  5701  0015D2  0B07               	andlw	7
  5702  0015D4  6FE1               	movwf	vscp_handleProtocolEvent@len_1265& (0+255),b
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  5706  0015D6  6BE6               	clrf	vscp_handleProtocolEvent@i_1263& (0+255),b
  5707  0015D8  D016               	goto	l9838
  5708  0015DA                     l9832:
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  5712  0015DA  51E6               	movf	vscp_handleProtocolEvent@i_1263& (0+255),w,b
  5713  0015DC  0F9E               	addlw	low (_vscp_imsg+8)
  5714  0015DE  6ED9               	movwf	fsr2l,c
  5715  0015E0  6ADA               	clrf	fsr2h,c
  5716  0015E2  50DF               	movf	indf2,w,c
  5717  0015E4  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  5718  0015E6  51E0               	movf	vscp_handleProtocolEvent@pos_1264& (0+255),w,b
  5719  0015E8  25E6               	addwf	vscp_handleProtocolEvent@i_1263& (0+255),w,b
  5720  0015EA  EC43  F01F         	call	_vscp_writeRegister
  5721                           
  5722                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  5723  0015EE  0100               	movlb	0	; () banked
  5724  0015F0  51E6               	movf	vscp_handleProtocolEvent@i_1263& (0+255),w,b
  5725  0015F2  0FAA               	addlw	low (_vscp_omsg+6)
  5726  0015F4  6ED9               	movwf	fsr2l,c
  5727  0015F6  6ADA               	clrf	fsr2h,c
  5728  0015F8  51E0               	movf	vscp_handleProtocolEvent@pos_1264& (0+255),w,b
  5729  0015FA  25E6               	addwf	vscp_handleProtocolEvent@i_1263& (0+255),w,b
  5730  0015FC  EC9E  F01F         	call	_vscp_readRegister
  5731  001600  6EDF               	movwf	indf2,c
  5732  001602  0100               	movlb	0	; () banked
  5733  001604  2BE6               	incf	vscp_handleProtocolEvent@i_1263& (0+255),f,b
  5734  001606                     l9838:
  5735                           
  5736                           ; BSR set to: 0
  5737  001606  51E1               	movf	vscp_handleProtocolEvent@len_1265& (0+255),w,b
  5738  001608  5DE6               	subwf	vscp_handleProtocolEvent@i_1263& (0+255),w,b
  5739  00160A  E3E7               	bnc	l9832
  5740                           
  5741                           ; BSR set to: 0
  5742                           ;vscp_firmware.c: 1022: }
  5743                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  5744  00160C  0E07               	movlw	7
  5745  00160E  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  5749  001610  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5750  001612  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5751                           
  5752                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  5753  001614  0E1A               	movlw	26
  5754  001616  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5755                           
  5756                           ; BSR set to: 0
  5757                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  5758  001618  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  5759                           
  5760                           ; BSR set to: 0
  5761                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  5762  00161A  51E1               	movf	vscp_handleProtocolEvent@len_1265& (0+255),w,b
  5763  00161C  0F81               	addlw	129
  5764  00161E  6FA4               	movwf	_vscp_omsg& (0+255),b
  5765  001620  D6A8               	goto	l9676
  5766  001622                     l9850:
  5767                           
  5768                           ; BSR set to: 0
  5769                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5770  001622  5191               	movf	_vscp_nickname& (0+255),w,b
  5771  001624  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5772  001628  62DF               	cpfseq	indf2,c
  5773  00162A  D194               	goto	l1268
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5777                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  5778                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  5779  00162C  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5780  00162E  ECFD  F01B         	call	_vscp_readAppReg
  5781  001632  0100               	movlb	0	; () banked
  5782  001634  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5783  001636  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5784  001638  6E51               	movwf	?_vscp_writeAppReg,c
  5785  00163A  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5786  00163C  EC6F  F004         	call	_vscp_writeAppReg
  5787  001640  D68D               	goto	L14
  5788  001642                     l9866:
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5792  001642  5191               	movf	_vscp_nickname& (0+255),w,b
  5793  001644  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5794  001648  62DF               	cpfseq	indf2,c
  5795  00164A  D184               	goto	l1268
  5796                           
  5797                           ; BSR set to: 0
  5798                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5799                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  5800                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  5801  00164C  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5802  00164E  ECFD  F01B         	call	_vscp_readAppReg
  5803  001652  0100               	movlb	0	; () banked
  5804  001654  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5805  001656  05D1               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  5806  001658  6E51               	movwf	?_vscp_writeAppReg,c
  5807  00165A  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5808  00165C  EC6F  F004         	call	_vscp_writeAppReg
  5809  001660  D67D               	goto	L14
  5810  001662                     l9882:
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  5814                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  5815  001662  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
  5816  001664  1991               	xorwf	_vscp_nickname& (0+255),w,b
  5817  001666  E003               	bz	l1232
  5818                           
  5819                           ; BSR set to: 0
  5820  001668  299C               	incf	(_vscp_imsg+6)& (0+255),w,b
  5821  00166A  E001 D173          	bnz	l1268
  5822  00166E                     l1232:
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  5826  00166E  6BE5               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  5827                           
  5828                           ; BSR set to: 0
  5829                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  5830  001670  0E03               	movlw	3
  5831  001672  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5832                           
  5833                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  5834  001674  0E88               	movlw	136
  5835  001676  6FA4               	movwf	_vscp_omsg& (0+255),b
  5836                           
  5837                           ; BSR set to: 0
  5838                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  5839  001678  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5840  00167A  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5841                           
  5842                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  5843  00167C  0E20               	movlw	32
  5844  00167E  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  5848  001680  6BEA               	clrf	vscp_handleProtocolEvent@i_1266& (0+255),b
  5849  001682                     l1233:
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;vscp_firmware.c: 1091: {
  5853                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  5854  001682  C0EA  F0A9         	movff	vscp_handleProtocolEvent@i_1266,_vscp_omsg+5
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  5858  001686  0E01               	movlw	1
  5859  001688  6FEC               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  5860  00168A                     l9902:
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  5864  00168A  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5865  00168C  0FA9               	addlw	low (_vscp_omsg+5)
  5866  00168E  6ED9               	movwf	fsr2l,c
  5867  001690  6ADA               	clrf	fsr2h,c
  5868  001692  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5869  001694  080F               	sublw	15
  5870  001696  ECF8  F01F         	call	_vscp_getGUID
  5871  00169A  6EDF               	movwf	indf2,c
  5872  00169C  0100               	movlb	0	; () banked
  5873  00169E  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5874                           
  5875                           ; BSR set to: 0
  5876                           ;vscp_firmware.c: 1096: if (k > 16)
  5877  0016A0  0E10               	movlw	16
  5878  0016A2  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5879  0016A4  D001               	goto	l9910
  5880  0016A6  D004               	goto	l9914
  5881  0016A8                     l9910:
  5882                           
  5883                           ; BSR set to: 0
  5884  0016A8  2BEC               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5885                           
  5886                           ; BSR set to: 0
  5887  0016AA  0E07               	movlw	7
  5888  0016AC  65EC               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5889  0016AE  D7ED               	goto	l9902
  5890  0016B0                     l9914:
  5891                           
  5892                           ; BSR set to: 0
  5893                           ;vscp_firmware.c: 1098: }
  5894                           ;vscp_firmware.c: 1100: if (k > 16)
  5895  0016B0  0E10               	movlw	16
  5896  0016B2  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5897  0016B4  D001               	goto	l9918
  5898  0016B6  D006               	goto	l1234
  5899  0016B8                     l9918:
  5900                           
  5901                           ; BSR set to: 0
  5902                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  5903  0016B8  ECFB  F01E         	call	_vscp_sendEvent	;wreg free
  5904                           
  5905                           ; BSR set to: 0
  5906  0016BC  2BEA               	incf	vscp_handleProtocolEvent@i_1266& (0+255),f,b
  5907                           
  5908                           ; BSR set to: 0
  5909  0016BE  0E02               	movlw	2
  5910  0016C0  65EA               	cpfsgt	vscp_handleProtocolEvent@i_1266& (0+255),b
  5911  0016C2  D7DF               	goto	l1233
  5912  0016C4                     l1234:
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;vscp_firmware.c: 1104: }
  5916                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  5917  0016C4  6BEC               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  5918  0016C6                     l9928:
  5919                           
  5920                           ; BSR set to: 0
  5921                           ;vscp_firmware.c: 1107: {
  5922                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  5923  0016C6  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5924  0016C8  ECAB  F01F         	call	_vscp_getMDF_URL
  5925  0016CC  0900               	iorlw	0
  5926  0016CE  E008               	bz	l9932
  5927                           
  5928                           ; BSR set to: 0
  5929                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  5930  0016D0  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5931  0016D2  0FAC               	addlw	low (_vscp_omsg+8)
  5932  0016D4  6ED9               	movwf	fsr2l,c
  5933  0016D6  6ADA               	clrf	fsr2h,c
  5934  0016D8  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5935  0016DA  ECAB  F01F         	call	_vscp_getMDF_URL
  5936  0016DE  D005               	goto	L16
  5937  0016E0                     l9932:
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;vscp_firmware.c: 1110: else
  5941                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  5942  0016E0  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5943  0016E2  0FAC               	addlw	low (_vscp_omsg+8)
  5944  0016E4  6ED9               	movwf	fsr2l,c
  5945  0016E6  6ADA               	clrf	fsr2h,c
  5946  0016E8  0E00               	movlw	0
  5947  0016EA                     L16:
  5948  0016EA  6EDF               	movwf	indf2,c
  5949                           
  5950                           ; BSR set to: 0
  5951  0016EC  2BEC               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5952                           
  5953                           ; BSR set to: 0
  5954  0016EE  0E04               	movlw	4
  5955  0016F0  65EC               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5956  0016F2  D7E9               	goto	l9928
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;vscp_firmware.c: 1112: }
  5960                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  5961  0016F4  ECFB  F01E         	call	_vscp_sendEvent	;wreg free
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;vscp_firmware.c: 1116: k = 5;
  5965  0016F8  0E05               	movlw	5
  5966  0016FA  6FE5               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  5967                           
  5968                           ; BSR set to: 0
  5969                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  5970  0016FC  0E03               	movlw	3
  5971  0016FE  6FEA               	movwf	vscp_handleProtocolEvent@i_1266& (0+255),b
  5972  001700                     l1243:
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;vscp_firmware.c: 1118: {
  5976                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  5977  001700  C0EA  F0A9         	movff	vscp_handleProtocolEvent@i_1266,_vscp_omsg+5
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  5981  001704  0E01               	movlw	1
  5982  001706  6FEC               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  5983  001708                     l9954:
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  5987  001708  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5988  00170A  0FA9               	addlw	low (_vscp_omsg+5)
  5989  00170C  6ED9               	movwf	fsr2l,c
  5990  00170E  6ADA               	clrf	fsr2h,c
  5991  001710  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5992  001712  ECAB  F01F         	call	_vscp_getMDF_URL
  5993  001716  6EDF               	movwf	indf2,c
  5994                           
  5995                           ; BSR set to: 0
  5996  001718  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5997                           
  5998                           ; BSR set to: 0
  5999  00171A  2BEC               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  6000                           
  6001                           ; BSR set to: 0
  6002  00171C  0E07               	movlw	7
  6003  00171E  65EC               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  6004  001720  D7F3               	goto	l9954
  6005                           
  6006                           ; BSR set to: 0
  6007                           ;vscp_firmware.c: 1123: }
  6008                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  6009  001722  ECFB  F01E         	call	_vscp_sendEvent	;wreg free
  6010                           
  6011                           ; BSR set to: 0
  6012  001726  2BEA               	incf	vscp_handleProtocolEvent@i_1266& (0+255),f,b
  6013                           
  6014                           ; BSR set to: 0
  6015  001728  0E06               	movlw	6
  6016  00172A  65EA               	cpfsgt	vscp_handleProtocolEvent@i_1266& (0+255),b
  6017  00172C  D7E9               	goto	l1243
  6018  00172E  D112               	goto	l1268
  6019  001730                     l9968:
  6020                           
  6021                           ; BSR set to: 0
  6022                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  6023  001730  5191               	movf	_vscp_nickname& (0+255),w,b
  6024  001732  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6025  001736  62DF               	cpfseq	indf2,c
  6026  001738  D10D               	goto	l1268
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  6030  00173A  0E03               	movlw	3
  6031  00173C  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6032                           
  6033                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  6034  00173E  0E87               	movlw	135
  6035  001740  6FA4               	movwf	_vscp_omsg& (0+255),b
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  6039  001742  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6040  001744  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6041                           
  6042                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  6043  001746  0E22               	movlw	34
  6044  001748  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6045                           
  6046                           ; BSR set to: 0
  6047                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  6048  00174A  0EA9               	movlw	(_vscp_omsg+5)& (0+255)
  6049  00174C  EC54  F01F         	call	_vscp_getMatrixInfo
  6050  001750  D610               	goto	l9676
  6051  001752                     l9978:
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  6055  001752  5191               	movf	_vscp_nickname& (0+255),w,b
  6056  001754  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6057  001758  62DF               	cpfseq	indf2,c
  6058  00175A  D0FC               	goto	l1268
  6059                           
  6060                           ; BSR set to: 0
  6061                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  6062  00175C  6BE7               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  6066                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  6067  00175E  C096  F0D1         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  6068  001762  0E0F               	movlw	15
  6069  001764  17D1               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6070  001766  0E04               	movlw	4
  6071  001768  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6072  00176A  E312               	bnc	l9994
  6073                           
  6074                           ; BSR set to: 0
  6075                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  6076  00176C  C0A0  F0E8         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1270
  6077  001770  6BE9               	clrf	(vscp_handleProtocolEvent@bytes_1270+1)& (0+255),b
  6078                           
  6079                           ; BSR set to: 0
  6080                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  6081  001772  51E9               	movf	(vscp_handleProtocolEvent@bytes_1270+1)& (0+255),w,b
  6082  001774  11E8               	iorwf	vscp_handleProtocolEvent@bytes_1270& (0+255),w,b
  6083  001776  E103               	bnz	l9990
  6084                           
  6085                           ; BSR set to: 0
  6086  001778  0E01               	movlw	1
  6087  00177A  6FE9               	movwf	(vscp_handleProtocolEvent@bytes_1270+1)& (0+255),b
  6088  00177C  6BE8               	clrf	vscp_handleProtocolEvent@bytes_1270& (0+255),b
  6089  00177E                     l9990:
  6090                           
  6091                           ; BSR set to: 0
  6092                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  6093  00177E  0E01               	movlw	1
  6094  001780  5DE8               	subwf	vscp_handleProtocolEvent@bytes_1270& (0+255),w,b
  6095  001782  0E01               	movlw	1
  6096  001784  59E9               	subwfb	(vscp_handleProtocolEvent@bytes_1270+1)& (0+255),w,b
  6097  001786  E307               	bnc	l9996
  6098                           
  6099                           ; BSR set to: 0
  6100  001788  0E01               	movlw	1
  6101  00178A  6FE9               	movwf	(vscp_handleProtocolEvent@bytes_1270+1)& (0+255),b
  6102  00178C  0E00               	movlw	0
  6103  00178E  D002               	goto	L18
  6104  001790                     l9994:
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;vscp_firmware.c: 1173: else {
  6108                           ;vscp_firmware.c: 1174: bytes = 1;
  6109  001790  6BE9               	clrf	(vscp_handleProtocolEvent@bytes_1270+1)& (0+255),b
  6110  001792  0E01               	movlw	1
  6111  001794                     L18:
  6112  001794  6FE8               	movwf	vscp_handleProtocolEvent@bytes_1270& (0+255),b
  6113  001796                     l9996:
  6114                           
  6115                           ; BSR set to: 0
  6116                           ;vscp_firmware.c: 1175: }
  6117                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  6118  001796  C052  F0D8         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  6119  00179A  C053  F0D9         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  6123  00179E  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  6124  0017A0  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6125  0017A4  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6126  0017A6  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6127  0017AA  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6128  0017AC  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6129  0017AE  6E52               	movwf	_vscp_page_select,c
  6130  0017B0  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6131  0017B2  6E53               	movwf	_vscp_page_select+1,c
  6132                           
  6133                           ; BSR set to: 0
  6134                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  6135  0017B4  0E07               	movlw	7
  6136  0017B6  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  6140  0017B8  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6141  0017BA  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  6145  0017BC  0E27               	movlw	39
  6146  0017BE  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6147                           
  6148                           ; BSR set to: 0
  6149                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  6150  0017C0  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6151                           
  6152                           ; BSR set to: 0
  6153                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  6154  0017C2  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  6158  0017C6  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6159  0017CA                     l10012:
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  6163  0017CA  51E7               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6164  0017CC  5DE8               	subwf	vscp_handleProtocolEvent@bytes_1270& (0+255),w,b
  6165  0017CE  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6166  0017D0  0E00               	movlw	0
  6167  0017D2  59E9               	subwfb	(vscp_handleProtocolEvent@bytes_1270+1)& (0+255),w,b
  6168  0017D4  6FD2               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6169  0017D6  0E04               	movlw	4
  6170  0017D8  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6171  0017DA  0E00               	movlw	0
  6172  0017DC  59D2               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6173  0017DE  E302               	bnc	l10016
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  6177  0017E0  0E04               	movlw	4
  6178  0017E2  D002               	goto	L19
  6179  0017E4                     l10016:
  6180                           
  6181                           ; BSR set to: 0
  6182                           ;vscp_firmware.c: 1198: else {
  6183                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  6184  0017E4  51E7               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6185  0017E6  5DE8               	subwf	vscp_handleProtocolEvent@bytes_1270& (0+255),w,b
  6186  0017E8                     L19:
  6187  0017E8  6FE2               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;vscp_firmware.c: 1200: }
  6191                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  6192  0017EA  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6193  0017EC  0F84               	addlw	132
  6194  0017EE  6FA4               	movwf	_vscp_omsg& (0+255),b
  6195                           
  6196                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  6197                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  6198  0017F0  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6199  0017F2  25E7               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6200  0017F4  6FAC               	movwf	(_vscp_omsg+8)& (0+255),b
  6201                           
  6202                           ; BSR set to: 0
  6203                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  6204  0017F6  6BE3               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  6205  0017F8  D00C               	goto	l10024
  6206  0017FA                     l10020:
  6207                           
  6208                           ; BSR set to: 0
  6209                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  6210                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  6211  0017FA  51E3               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6212  0017FC  0FAD               	addlw	low (_vscp_omsg+9)
  6213  0017FE  6ED9               	movwf	fsr2l,c
  6214  001800  6ADA               	clrf	fsr2h,c
  6215  001802  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6216  001804  25E7               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6217  001806  25E3               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6218  001808  EC9E  F01F         	call	_vscp_readRegister
  6219  00180C  6EDF               	movwf	indf2,c
  6220  00180E  0100               	movlb	0	; () banked
  6221  001810  2BE3               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  6222  001812                     l10024:
  6223                           
  6224                           ; BSR set to: 0
  6225  001812  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6226  001814  5DE3               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6227  001816  E3F1               	bnc	l10020
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;vscp_firmware.c: 1211: }
  6231                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  6232  001818  ECFB  F01E         	call	_vscp_sendEvent	;wreg free
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  6236  00181C  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6237  00181E  27E7               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  6241  001820  2BA9               	incf	(_vscp_omsg+5)& (0+255),f,b
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  6245  001822  51E7               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6246  001824  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6247  001826  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6248  001828  51E8               	movf	vscp_handleProtocolEvent@bytes_1270& (0+255),w,b
  6249  00182A  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6250  00182C  51E9               	movf	(vscp_handleProtocolEvent@bytes_1270+1)& (0+255),w,b
  6251  00182E  59D2               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6252  001830  E3CC               	bnc	l10012
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  6256  001832  C0D8  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  6257  001836  C0D9  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  6258  00183A  D08C               	goto	l1268
  6259  00183C                     l10034:
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  6263  00183C  5191               	movf	_vscp_nickname& (0+255),w,b
  6264  00183E  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6265  001842  62DF               	cpfseq	indf2,c
  6266  001844  D087               	goto	l1268
  6267                           
  6268                           ; BSR set to: 0
  6269                           ;vscp_firmware.c: 1234: uint8_t i;
  6270                           ;vscp_firmware.c: 1235: uint16_t page_save;
  6271                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  6272  001846  C052  F0DA         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1275
  6273  00184A  C053  F0DB         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1275+1
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  6277  00184E  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  6278  001850  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6279  001854  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6280  001856  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6281  00185A  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6282  00185C  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6283  00185E  6E52               	movwf	_vscp_page_select,c
  6284  001860  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6285  001862  6E53               	movwf	_vscp_page_select+1,c
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  6289  001864  C09F  F0E4         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1274
  6290                           
  6291                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  6292                           ;vscp_firmware.c: 1248: i++) {
  6293  001868  D014               	goto	l10046
  6294  00186A                     l10042:
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  6298                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  6299  00186A  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6300  00186C  08A0               	sublw	low (_vscp_imsg+10)
  6301  00186E  25E4               	addwf	vscp_handleProtocolEvent@i_1274& (0+255),w,b
  6302  001870  6ED9               	movwf	fsr2l,c
  6303  001872  6ADA               	clrf	fsr2h,c
  6304  001874  50DF               	movf	indf2,w,c
  6305  001876  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  6306  001878  51E4               	movf	vscp_handleProtocolEvent@i_1274& (0+255),w,b
  6307  00187A  EC43  F01F         	call	_vscp_writeRegister
  6308  00187E  0100               	movlb	0	; () banked
  6309  001880  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6310  001882  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6311  001884  08AD               	sublw	low (_vscp_omsg+9)
  6312  001886  25E4               	addwf	vscp_handleProtocolEvent@i_1274& (0+255),w,b
  6313  001888  6ED9               	movwf	fsr2l,c
  6314  00188A  6ADA               	clrf	fsr2h,c
  6315  00188C  C0D1  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  6316                           
  6317                           ; BSR set to: 0
  6318  001890  2BE4               	incf	vscp_handleProtocolEvent@i_1274& (0+255),f,b
  6319  001892                     l10046:
  6320                           
  6321                           ; BSR set to: 0
  6322  001892  5196               	movf	_vscp_imsg& (0+255),w,b
  6323  001894  0B0F               	andlw	15
  6324  001896  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6325  001898  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6326  00189A  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6327  00189C  27D1               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6328  00189E  0E00               	movlw	0
  6329  0018A0  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6330  0018A2  0EFC               	movlw	252
  6331  0018A4  25D1               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6332  0018A6  6FD3               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  6333  0018A8  0EFF               	movlw	255
  6334  0018AA  21D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6335  0018AC  6FD4               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  6336  0018AE  51E4               	movf	vscp_handleProtocolEvent@i_1274& (0+255),w,b
  6337  0018B0  6FD5               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  6338  0018B2  6BD6               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  6339  0018B4  51D6               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  6340  0018B6  0A80               	xorlw	128
  6341  0018B8  6FD7               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  6342  0018BA  51D3               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  6343  0018BC  5DD5               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  6344  0018BE  51D4               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  6345  0018C0  0A80               	xorlw	128
  6346  0018C2  59D7               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  6347  0018C4  E3D2               	bnc	l10042
  6348                           
  6349                           ; BSR set to: 0
  6350                           ;vscp_firmware.c: 1251: }
  6351                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  6352  0018C6  C0DA  F052         	movff	vscp_handleProtocolEvent@page_save_1275,_vscp_page_select
  6353  0018CA  C0DB  F053         	movff	vscp_handleProtocolEvent@page_save_1275+1,_vscp_page_select+1
  6354                           
  6355                           ; BSR set to: 0
  6356                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  6357  0018CE  0E07               	movlw	7
  6358  0018D0  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  6362  0018D2  5196               	movf	_vscp_imsg& (0+255),w,b
  6363  0018D4  0B0F               	andlw	15
  6364  0018D6  0F80               	addlw	128
  6365  0018D8  6FA4               	movwf	_vscp_omsg& (0+255),b
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  6369  0018DA  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6370  0018DC  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6371                           
  6372                           ; BSR set to: 0
  6373                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  6374  0018DE  0E27               	movlw	39
  6375  0018E0  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6376                           
  6377                           ; BSR set to: 0
  6378                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  6379  0018E2  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  6383  0018E4  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6384                           
  6385                           ; BSR set to: 0
  6386                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  6387  0018E8  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6388                           
  6389                           ; BSR set to: 0
  6390                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  6391  0018EC  C09F  F0AC         	movff	_vscp_imsg+9,_vscp_omsg+8
  6392  0018F0  D540               	goto	l9676
  6393  0018F2                     l10068:
  6394                           
  6395                           ; BSR set to: 0
  6396  0018F2  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  6397                           
  6398                           ; Switch size 1, requested type "speed"
  6399                           ; Number of cases is 16, Range of values is 1 to 38
  6400                           ; switch strategies available:
  6401                           ; Name         Instructions Cycles
  6402                           ; simple_byte           49    25 (average)
  6403                           ;	Chosen strategy is simple_byte
  6404  0018F4  0A01               	xorlw	1	; case 1
  6405  0018F6  E101 D514          	bz	l9650
  6406  0018FA  0A03               	xorlw	3	; case 2
  6407  0018FC  E101 D514          	bz	l9652
  6408  001900  0A04               	xorlw	4	; case 6
  6409  001902  E101 D514          	bz	l9654
  6410  001906  0A0E               	xorlw	14	; case 8
  6411  001908  E101 D514          	bz	l9656
  6412  00190C  0A01               	xorlw	1	; case 9
  6413  00190E  E101 D514          	bz	l9658
  6414  001912  0A02               	xorlw	2	; case 11
  6415  001914  E101 D534          	bz	l9692
  6416  001918  0A07               	xorlw	7	; case 12
  6417  00191A  E101 D54A          	bz	l9726
  6418  00191E  0A1B               	xorlw	27	; case 23
  6419  001920  E101 D5DF          	bz	l9784
  6420  001924  0A0F               	xorlw	15	; case 24
  6421  001926  E101 D5F3          	bz	l9790
  6422  00192A  0A01               	xorlw	1	; case 25
  6423  00192C  E101 D648          	bz	l9824
  6424  001930  0A04               	xorlw	4	; case 29
  6425  001932  E101 D676          	bz	l9850
  6426  001936  0A03               	xorlw	3	; case 30
  6427  001938  E101 D683          	bz	l9866
  6428  00193C  0A01               	xorlw	1	; case 31
  6429  00193E  E101 D690          	bz	l9882
  6430  001942  0A3E               	xorlw	62	; case 33
  6431  001944  E101 D6F4          	bz	l9968
  6432  001948  0A04               	xorlw	4	; case 37
  6433  00194A  E101 D702          	bz	l9978
  6434  00194E  0A03               	xorlw	3	; case 38
  6435  001950  E101 D774          	bz	l10034
  6436  001954                     l1268:
  6437  001954  0012               	return	
  6438  001956                     __end_of_vscp_handleProtocolEvent:
  6439                           	opt stack 0
  6440                           tblptru	equ	0xFF8
  6441                           prodh	equ	0xFF4
  6442                           prodl	equ	0xFF3
  6443                           postinc0	equ	0xFEE
  6444                           wreg	equ	0xFE8
  6445                           indf2	equ	0xFDF
  6446                           postinc2	equ	0xFDE
  6447                           postdec2	equ	0xFDD
  6448                           fsr2h	equ	0xFDA
  6449                           fsr2l	equ	0xFD9
  6450                           status	equ	0xFD8
  6451                           
  6452 ;; *************** function ___lbmod *****************
  6453 ;; Defined at:
  6454 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  6455 ;; Parameters:    Size  Location     Type
  6456 ;;  dividend        1    wreg     unsigned char 
  6457 ;;  divisor         1    7[COMRAM] unsigned char 
  6458 ;; Auto vars:     Size  Location     Type
  6459 ;;  dividend        1    8[COMRAM] unsigned char 
  6460 ;;  rem             1   10[COMRAM] unsigned char 
  6461 ;;  counter         1    9[COMRAM] unsigned char 
  6462 ;; Return value:  Size  Location     Type
  6463 ;;                  1    wreg      unsigned char 
  6464 ;; Registers used:
  6465 ;;		wreg, status,2, status,0
  6466 ;; Tracked objects:
  6467 ;;		On entry : F/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6471 ;;      Params:         1       0       0       0       0       0       0
  6472 ;;      Locals:         3       0       0       0       0       0       0
  6473 ;;      Temps:          0       0       0       0       0       0       0
  6474 ;;      Totals:         4       0       0       0       0       0       0
  6475 ;;Total ram usage:        4 bytes
  6476 ;; Hardware stack levels used:    1
  6477 ;; Hardware stack levels required when called:    2
  6478 ;; This function calls:
  6479 ;;		Nothing
  6480 ;; This function is called by:
  6481 ;;		_vscp_handleProtocolEvent
  6482 ;; This function uses a non-reentrant model
  6483 ;;
  6484                           
  6485                           	psect	text16
  6486  003D5C                     __ptext16:
  6487                           	opt stack 0
  6488  003D5C                     ___lbmod:
  6489                           	opt stack 27
  6490                           
  6491                           ;incstack = 0
  6492                           ;incstack = 0
  6493                           ;___lbmod@dividend stored from wreg
  6494  003D5C  CFE8 F009          	movff	wreg,___lbmod@dividend
  6495                           
  6496                           ; BSR set to: 0
  6497  003D60  0E08               	movlw	8
  6498  003D62  6E0A               	movwf	___lbmod@counter,c
  6499                           
  6500                           ; BSR set to: 0
  6501  003D64  6A0B               	clrf	___lbmod@rem,c
  6502  003D66                     l7374:
  6503  003D66  90D8               	bcf	status,0,c
  6504  003D68  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  6505  003D6A  340B               	rlcf	___lbmod@rem& (0+255),w,c
  6506  003D6C  6E0B               	movwf	___lbmod@rem,c
  6507  003D6E  90D8               	bcf	status,0,c
  6508  003D70  3609               	rlcf	___lbmod@dividend,f,c
  6509  003D72  5008               	movf	___lbmod@divisor,w,c
  6510  003D74  5C0B               	subwf	___lbmod@rem,w,c
  6511  003D76  E302               	bnc	l7382
  6512  003D78  5008               	movf	___lbmod@divisor,w,c
  6513  003D7A  5E0B               	subwf	___lbmod@rem,f,c
  6514  003D7C                     l7382:
  6515  003D7C  2E0A               	decfsz	___lbmod@counter,f,c
  6516  003D7E  D7F3               	goto	l7374
  6517  003D80  500B               	movf	___lbmod@rem,w,c
  6518  003D82  0012               	return	
  6519  003D84                     __end_of___lbmod:
  6520                           	opt stack 0
  6521                           tblptru	equ	0xFF8
  6522                           prodh	equ	0xFF4
  6523                           prodl	equ	0xFF3
  6524                           postinc0	equ	0xFEE
  6525                           wreg	equ	0xFE8
  6526                           indf2	equ	0xFDF
  6527                           postinc2	equ	0xFDE
  6528                           postdec2	equ	0xFDD
  6529                           fsr2h	equ	0xFDA
  6530                           fsr2l	equ	0xFD9
  6531                           status	equ	0xFD8
  6532                           
  6533 ;; *************** function _vscp_writeRegister *****************
  6534 ;; Defined at:
  6535 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;  reg             1    wreg     unsigned char 
  6538 ;;  value           1   30[BANK0 ] unsigned char 
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;  reg             1   31[BANK0 ] unsigned char 
  6541 ;; Return value:  Size  Location     Type
  6542 ;;                  1    wreg      unsigned char 
  6543 ;; Registers used:
  6544 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6545 ;; Tracked objects:
  6546 ;;		On entry : F/0
  6547 ;;		On exit  : 0/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6550 ;;      Params:         0       1       0       0       0       0       0
  6551 ;;      Locals:         0       1       0       0       0       0       0
  6552 ;;      Temps:          0       0       0       0       0       0       0
  6553 ;;      Totals:         0       2       0       0       0       0       0
  6554 ;;Total ram usage:        2 bytes
  6555 ;; Hardware stack levels used:    1
  6556 ;; Hardware stack levels required when called:    8
  6557 ;; This function calls:
  6558 ;;		_vscp_writeAppReg
  6559 ;;		_vscp_writeStdReg
  6560 ;; This function is called by:
  6561 ;;		_vscp_handleProtocolEvent
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           	psect	text17
  6566  003E86                     __ptext17:
  6567                           	opt stack 0
  6568  003E86                     _vscp_writeRegister:
  6569                           	opt stack 21
  6570                           
  6571                           ;incstack = 0
  6572                           ;incstack = 0
  6573                           ;vscp_writeRegister@reg stored from wreg
  6574  003E86  CFE8 F0D0          	movff	wreg,vscp_writeRegister@reg
  6575                           
  6576                           ; BSR set to: 0
  6577                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  6578  003E8A  0E7F               	movlw	127
  6579  003E8C  65D0               	cpfsgt	vscp_writeRegister@reg& (0+255),b
  6580  003E8E  D006               	goto	l10924
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  6584  003E90  C0CF  F010         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  6585  003E94  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6586  003E96  ECDD  F019         	call	_vscp_writeStdReg
  6587  003E9A  D005               	goto	l1148
  6588  003E9C                     l10924:
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;vscp_firmware.c: 705: else {
  6592                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  6593  003E9C  C0CF  F051         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  6594  003EA0  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6595  003EA2  EC6F  F004         	call	_vscp_writeAppReg
  6596  003EA6                     l1148:
  6597  003EA6  0012               	return	
  6598  003EA8                     __end_of_vscp_writeRegister:
  6599                           	opt stack 0
  6600                           tblptru	equ	0xFF8
  6601                           prodh	equ	0xFF4
  6602                           prodl	equ	0xFF3
  6603                           postinc0	equ	0xFEE
  6604                           wreg	equ	0xFE8
  6605                           indf2	equ	0xFDF
  6606                           postinc2	equ	0xFDE
  6607                           postdec2	equ	0xFDD
  6608                           fsr2h	equ	0xFDA
  6609                           fsr2l	equ	0xFD9
  6610                           status	equ	0xFD8
  6611                           
  6612 ;; *************** function _vscp_writeStdReg *****************
  6613 ;; Defined at:
  6614 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;  reg             1    wreg     unsigned char 
  6617 ;;  value           1   15[COMRAM] unsigned char 
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;  reg             1   21[COMRAM] unsigned char 
  6620 ;;  rv              1   20[COMRAM] unsigned char 
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  1    wreg      unsigned char 
  6623 ;; Registers used:
  6624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6625 ;; Tracked objects:
  6626 ;;		On entry : F/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6630 ;;      Params:         1       0       0       0       0       0       0
  6631 ;;      Locals:         2       0       0       0       0       0       0
  6632 ;;      Temps:          4       0       0       0       0       0       0
  6633 ;;      Totals:         7       0       0       0       0       0       0
  6634 ;;Total ram usage:        7 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    5
  6637 ;; This function calls:
  6638 ;;		_vscp_setGUID
  6639 ;;		_vscp_setManufacturerId
  6640 ;;		_vscp_getGUID
  6641 ;;		_vscp_getUserID
  6642 ;;		_vscp_setUserID
  6643 ;;		_vscp_getManufacturerId
  6644 ;;		_vscp_restoreDefaults
  6645 ;; This function is called by:
  6646 ;;		_vscp_writeRegister
  6647 ;;		_vscp_handleProtocolEvent
  6648 ;; This function uses a non-reentrant model
  6649 ;;
  6650                           
  6651                           	psect	text18
  6652  0033BA                     __ptext18:
  6653                           	opt stack 0
  6654  0033BA                     _vscp_writeStdReg:
  6655                           	opt stack 24
  6656                           
  6657                           ;incstack = 0
  6658                           ;incstack = 0
  6659                           ;vscp_writeStdReg@reg stored from wreg
  6660  0033BA  CFE8 F016          	movff	wreg,vscp_writeStdReg@reg
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  6664  0033BE  1C10               	comf	vscp_writeStdReg@value,w,c
  6665  0033C0  6E15               	movwf	vscp_writeStdReg@rv,c
  6666                           
  6667                           ; BSR set to: 0
  6668                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  6669                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  6670  0033C2  0E83               	movlw	131
  6671  0033C4  6416               	cpfsgt	vscp_writeStdReg@reg,c
  6672  0033C6  D00E               	goto	l9484
  6673                           
  6674                           ; BSR set to: 0
  6675  0033C8  0E89               	movlw	137
  6676  0033CA  6016               	cpfslt	vscp_writeStdReg@reg,c
  6677  0033CC  D00B               	goto	l9484
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  6681  0033CE  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  6682  0033D2  5016               	movf	vscp_writeStdReg@reg,w,c
  6683  0033D4  0F7C               	addlw	124
  6684  0033D6  EC82  F01F         	call	_vscp_setUserID
  6685                           
  6686                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  6687  0033DA  5016               	movf	vscp_writeStdReg@reg,w,c
  6688  0033DC  0F7C               	addlw	124
  6689  0033DE  ECEE  F01F         	call	_vscp_getUserID
  6690  0033E2  D069               	goto	L25
  6691  0033E4                     l9484:
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  6695  0033E4  5016               	movf	vscp_writeStdReg@reg,w,c
  6696  0033E6  0A92               	xorlw	146
  6697  0033E8  E10D               	bnz	l9490
  6698                           
  6699                           ; BSR set to: 0
  6700                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  6701  0033EA  5010               	movf	vscp_writeStdReg@value,w,c
  6702  0033EC  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6703  0033EE  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  6704  0033F0  5052               	movf	_vscp_page_select,w,c
  6705  0033F2  6E13               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  6706  0033F4  6A14               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  6707  0033F6  1011               	iorwf	??_vscp_writeStdReg,w,c
  6708  0033F8  6E52               	movwf	_vscp_page_select,c
  6709  0033FA  5012               	movf	??_vscp_writeStdReg+1,w,c
  6710  0033FC  1014               	iorwf	??_vscp_writeStdReg+3,w,c
  6711  0033FE  6E53               	movwf	_vscp_page_select+1,c
  6712                           
  6713                           ; BSR set to: 0
  6714                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  6715  003400  5053               	movf	_vscp_page_select+1,w,c
  6716  003402  D059               	goto	L25
  6717  003404                     l9490:
  6718                           
  6719                           ; BSR set to: 0
  6720                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  6721  003404  5016               	movf	vscp_writeStdReg@reg,w,c
  6722  003406  0A93               	xorlw	147
  6723  003408  E10B               	bnz	l9496
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  6727  00340A  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  6728  00340C  5053               	movf	_vscp_page_select+1,w,c
  6729  00340E  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6730  003410  5010               	movf	vscp_writeStdReg@value,w,c
  6731  003412  1011               	iorwf	??_vscp_writeStdReg,w,c
  6732  003414  6E52               	movwf	_vscp_page_select,c
  6733  003416  5012               	movf	??_vscp_writeStdReg+1,w,c
  6734  003418  6E53               	movwf	_vscp_page_select+1,c
  6735                           
  6736                           ; BSR set to: 0
  6737                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  6738  00341A  C052  F015         	movff	_vscp_page_select,vscp_writeStdReg@rv
  6739                           
  6740                           ;vscp_firmware.c: 737: }
  6741  00341E  D04E               	goto	l9538
  6742  003420                     l9496:
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  6746  003420  0E88               	movlw	136
  6747  003422  6416               	cpfsgt	vscp_writeStdReg@reg,c
  6748  003424  D019               	goto	l9508
  6749                           
  6750                           ; BSR set to: 0
  6751  003426  0E91               	movlw	145
  6752  003428  6016               	cpfslt	vscp_writeStdReg@reg,c
  6753  00342A  D016               	goto	l9508
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6757                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  6758  00342C  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6759  003430  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6760  003434  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6761  003436  2812               	incf	??_vscp_writeStdReg+1,w,c
  6762  003438  E102               	bnz	l9504
  6763                           
  6764                           ; BSR set to: 0
  6765  00343A  2852               	incf	_vscp_page_select,w,c
  6766  00343C  E002               	bz	l9506
  6767  00343E                     l9504:
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;vscp_firmware.c: 747: rv = ~value;
  6771  00343E  1C10               	comf	vscp_writeStdReg@value,w,c
  6772  003440  D03A               	goto	L25
  6773  003442                     l9506:
  6774                           
  6775                           ; BSR set to: 0
  6776                           ;vscp_firmware.c: 749: else {
  6777                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  6778  003442  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  6779  003446  5016               	movf	vscp_writeStdReg@reg,w,c
  6780  003448  0F77               	addlw	119
  6781  00344A  ECD5  F01E         	call	_vscp_setManufacturerId
  6782                           
  6783                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  6784  00344E  5016               	movf	vscp_writeStdReg@reg,w,c
  6785  003450  0F77               	addlw	119
  6786  003452  ECE4  F01F         	call	_vscp_getManufacturerId
  6787  003456  D02F               	goto	L25
  6788  003458                     l9508:
  6789                           
  6790                           ; BSR set to: 0
  6791                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  6792  003458  0ECF               	movlw	207
  6793  00345A  6416               	cpfsgt	vscp_writeStdReg@reg,c
  6794  00345C  D017               	goto	l9520
  6795                           
  6796                           ; BSR set to: 0
  6797  00345E  0EE0               	movlw	224
  6798  003460  6016               	cpfslt	vscp_writeStdReg@reg,c
  6799  003462  D014               	goto	l9520
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6803                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  6804  003464  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6805  003468  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6806  00346C  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6807  00346E  2812               	incf	??_vscp_writeStdReg+1,w,c
  6808  003470  E1E6               	bnz	l9504
  6809                           
  6810                           ; BSR set to: 0
  6811  003472  2852               	incf	_vscp_page_select,w,c
  6812  003474  E1E4               	bnz	l9504
  6813                           
  6814                           ; BSR set to: 0
  6815                           ;vscp_firmware.c: 762: else {
  6816                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  6817  003476  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  6818  00347A  5016               	movf	vscp_writeStdReg@reg,w,c
  6819  00347C  0F30               	addlw	48
  6820  00347E  ECE8  F01E         	call	_vscp_setGUID
  6821                           
  6822                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  6823  003482  5016               	movf	vscp_writeStdReg@reg,w,c
  6824  003484  0F30               	addlw	48
  6825  003486  ECF8  F01F         	call	_vscp_getGUID
  6826  00348A  D015               	goto	L25
  6827  00348C                     l9520:
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  6831  00348C  5016               	movf	vscp_writeStdReg@reg,w,c
  6832  00348E  0AA2               	xorlw	162
  6833  003490  E1D6               	bnz	l9504
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  6837  003492  5010               	movf	vscp_writeStdReg@value,w,c
  6838  003494  0A55               	xorlw	85
  6839  003496  E104               	bnz	l9528
  6840                           
  6841                           ; BSR set to: 0
  6842                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  6843  003498  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
  6844  00349A  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;vscp_firmware.c: 771: rv = 0x55;
  6848  00349C  0E55               	movlw	85
  6849  00349E  D00B               	goto	L25
  6850  0034A0                     l9528:
  6851                           
  6852                           ; BSR set to: 0
  6853                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  6854  0034A0  5010               	movf	vscp_writeStdReg@value,w,c
  6855  0034A2  0AAA               	xorlw	170
  6856  0034A4  E10B               	bnz	l9538
  6857                           
  6858                           ; BSR set to: 0
  6859                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  6860  0034A6  0EE8               	movlw	232
  6861  0034A8  5D84               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  6862  0034AA  0E03               	movlw	3
  6863  0034AC  5985               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  6864  0034AE  E205               	bc	l1174
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  6868  0034B0  EC3B  F020         	call	_vscp_restoreDefaults	;wreg free
  6869                           
  6870                           ;vscp_firmware.c: 776: rv = 0xaa;
  6871  0034B4  0EAA               	movlw	170
  6872  0034B6                     L25:
  6873  0034B6  6E15               	movwf	vscp_writeStdReg@rv,c
  6874                           
  6875                           ;vscp_firmware.c: 777: }
  6876  0034B8  D001               	goto	l9538
  6877  0034BA                     l1174:
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;vscp_firmware.c: 778: else {
  6881                           ;vscp_firmware.c: 779: rv = 0;
  6882  0034BA  6A15               	clrf	vscp_writeStdReg@rv,c
  6883  0034BC                     l9538:
  6884                           
  6885                           ;vscp_firmware.c: 787: }
  6886                           ;vscp_firmware.c: 789: return rv;
  6887  0034BC  5015               	movf	vscp_writeStdReg@rv,w,c
  6888  0034BE  0012               	return	
  6889  0034C0                     __end_of_vscp_writeStdReg:
  6890                           	opt stack 0
  6891                           tblptru	equ	0xFF8
  6892                           prodh	equ	0xFF4
  6893                           prodl	equ	0xFF3
  6894                           postinc0	equ	0xFEE
  6895                           wreg	equ	0xFE8
  6896                           indf2	equ	0xFDF
  6897                           postinc2	equ	0xFDE
  6898                           postdec2	equ	0xFDD
  6899                           fsr2h	equ	0xFDA
  6900                           fsr2l	equ	0xFD9
  6901                           status	equ	0xFD8
  6902                           
  6903 ;; *************** function _vscp_restoreDefaults *****************
  6904 ;; Defined at:
  6905 ;;		line 2560 in file "../main.c"
  6906 ;; Parameters:    Size  Location     Type
  6907 ;;		None
  6908 ;; Auto vars:     Size  Location     Type
  6909 ;;		None
  6910 ;; Return value:  Size  Location     Type
  6911 ;;		None               void
  6912 ;; Registers used:
  6913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6914 ;; Tracked objects:
  6915 ;;		On entry : F/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6919 ;;      Params:         0       0       0       0       0       0       0
  6920 ;;      Locals:         0       0       0       0       0       0       0
  6921 ;;      Temps:          0       0       0       0       0       0       0
  6922 ;;      Totals:         0       0       0       0       0       0       0
  6923 ;;Total ram usage:        0 bytes
  6924 ;; Hardware stack levels used:    1
  6925 ;; Hardware stack levels required when called:    4
  6926 ;; This function calls:
  6927 ;;		_init_app_eeprom
  6928 ;;		_init_app_ram
  6929 ;; This function is called by:
  6930 ;;		_vscp_writeStdReg
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933                           
  6934                           	psect	text19
  6935  004076                     __ptext19:
  6936                           	opt stack 0
  6937  004076                     _vscp_restoreDefaults:
  6938                           	opt stack 24
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;main.c: 2561: init_app_eeprom();
  6942                           
  6943                           ;incstack = 0
  6944                           ;incstack = 0
  6945  004076  ECAB  F00C         	call	_init_app_eeprom	;wreg free
  6946                           
  6947                           ;main.c: 2562: init_app_ram();
  6948  00407A  EF56  F019         	goto	_init_app_ram	;wreg free
  6949  00407E                     __end_of_vscp_restoreDefaults:
  6950                           	opt stack 0
  6951                           tblptru	equ	0xFF8
  6952                           prodh	equ	0xFF4
  6953                           prodl	equ	0xFF3
  6954                           postinc0	equ	0xFEE
  6955                           wreg	equ	0xFE8
  6956                           indf2	equ	0xFDF
  6957                           postinc2	equ	0xFDE
  6958                           postdec2	equ	0xFDD
  6959                           fsr2h	equ	0xFDA
  6960                           fsr2l	equ	0xFD9
  6961                           status	equ	0xFD8
  6962                           
  6963 ;; *************** function _init_app_eeprom *****************
  6964 ;; Defined at:
  6965 ;;		line 476 in file "../main.c"
  6966 ;; Parameters:    Size  Location     Type
  6967 ;;		None
  6968 ;; Auto vars:     Size  Location     Type
  6969 ;;  j               1   14[COMRAM] unsigned char 
  6970 ;;  i               1   13[COMRAM] unsigned char 
  6971 ;; Return value:  Size  Location     Type
  6972 ;;		None               void
  6973 ;; Registers used:
  6974 ;;		wreg, status,2, status,0, cstack
  6975 ;; Tracked objects:
  6976 ;;		On entry : 0/0
  6977 ;;		On exit  : 0/0
  6978 ;;		Unchanged: 0/0
  6979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6980 ;;      Params:         0       0       0       0       0       0       0
  6981 ;;      Locals:         2       0       0       0       0       0       0
  6982 ;;      Temps:          2       0       0       0       0       0       0
  6983 ;;      Totals:         4       0       0       0       0       0       0
  6984 ;;Total ram usage:        4 bytes
  6985 ;; Hardware stack levels used:    1
  6986 ;; Hardware stack levels required when called:    3
  6987 ;; This function calls:
  6988 ;;		_Busy_eep
  6989 ;;		_Write_b_eep
  6990 ;;		_calculateSetFilterMask
  6991 ;; This function is called by:
  6992 ;;		_main
  6993 ;;		_vscp_restoreDefaults
  6994 ;; This function uses a non-reentrant model
  6995 ;;
  6996                           
  6997                           	psect	text20
  6998  001956                     __ptext20:
  6999                           	opt stack 0
  7000  001956                     _init_app_eeprom:
  7001                           	opt stack 24
  7002                           
  7003                           ;main.c: 477: unsigned char i, j;
  7004                           ;main.c: 479: (Busy_eep(), Write_b_eep(0x43 + 0,0));
  7005                           
  7006                           ;incstack = 0
  7007                           ;incstack = 0
  7008  001956  EC3F  F020         	call	_Busy_eep	;wreg free
  7009  00195A  6A09               	clrf	?_Write_b_eep+1,c
  7010  00195C  0E43               	movlw	67
  7011  00195E  6E08               	movwf	?_Write_b_eep,c
  7012  001960  0E00               	movlw	0
  7013  001962  6A0A               	clrf	?_Write_b_eep+2,c
  7014  001964  EC24  F01E         	call	_Write_b_eep	;wreg free
  7015                           
  7016                           ;main.c: 480: (Busy_eep(), Write_b_eep(0x43 + 1,0));
  7017  001968  EC3F  F020         	call	_Busy_eep	;wreg free
  7018  00196C  6A09               	clrf	?_Write_b_eep+1,c
  7019  00196E  0E44               	movlw	68
  7020  001970  6E08               	movwf	?_Write_b_eep,c
  7021  001972  0E00               	movlw	0
  7022  001974  6A0A               	clrf	?_Write_b_eep+2,c
  7023  001976  EC24  F01E         	call	_Write_b_eep	;wreg free
  7024                           
  7025                           ;main.c: 482: (Busy_eep(), Write_b_eep(0x43 + 10,0x08 | 0x10 | 0x80));
  7026  00197A  EC3F  F020         	call	_Busy_eep	;wreg free
  7027  00197E  6A09               	clrf	?_Write_b_eep+1,c
  7028  001980  0E4D               	movlw	77
  7029  001982  6E08               	movwf	?_Write_b_eep,c
  7030  001984  0E98               	movlw	152
  7031  001986  6E0A               	movwf	?_Write_b_eep+2,c
  7032  001988  EC24  F01E         	call	_Write_b_eep	;wreg free
  7033                           
  7034                           ;main.c: 487: (Busy_eep(), Write_b_eep(0x43 + 11,0x08 | 0x10 | 0x80));
  7035  00198C  EC3F  F020         	call	_Busy_eep	;wreg free
  7036  001990  6A09               	clrf	?_Write_b_eep+1,c
  7037  001992  0E4E               	movlw	78
  7038  001994  6E08               	movwf	?_Write_b_eep,c
  7039  001996  0E98               	movlw	152
  7040  001998  6E0A               	movwf	?_Write_b_eep+2,c
  7041  00199A  EC24  F01E         	call	_Write_b_eep	;wreg free
  7042                           
  7043                           ;main.c: 492: (Busy_eep(), Write_b_eep(0x43 + 12,0x08 | 0x10 | 0x80));
  7044  00199E  EC3F  F020         	call	_Busy_eep	;wreg free
  7045  0019A2  6A09               	clrf	?_Write_b_eep+1,c
  7046  0019A4  0E4F               	movlw	79
  7047  0019A6  6E08               	movwf	?_Write_b_eep,c
  7048  0019A8  0E98               	movlw	152
  7049  0019AA  6E0A               	movwf	?_Write_b_eep+2,c
  7050  0019AC  EC24  F01E         	call	_Write_b_eep	;wreg free
  7051                           
  7052                           ;main.c: 497: (Busy_eep(), Write_b_eep(0x43 + 13,0x08 | 0x10 | 0x80));
  7053  0019B0  EC3F  F020         	call	_Busy_eep	;wreg free
  7054  0019B4  6A09               	clrf	?_Write_b_eep+1,c
  7055  0019B6  0E50               	movlw	80
  7056  0019B8  6E08               	movwf	?_Write_b_eep,c
  7057  0019BA  0E98               	movlw	152
  7058  0019BC  6E0A               	movwf	?_Write_b_eep+2,c
  7059  0019BE  EC24  F01E         	call	_Write_b_eep	;wreg free
  7060                           
  7061                           ;main.c: 502: (Busy_eep(), Write_b_eep(0x43 + 14,0x08 | 0x10 | 0x80));
  7062  0019C2  EC3F  F020         	call	_Busy_eep	;wreg free
  7063  0019C6  6A09               	clrf	?_Write_b_eep+1,c
  7064  0019C8  0E51               	movlw	81
  7065  0019CA  6E08               	movwf	?_Write_b_eep,c
  7066  0019CC  0E98               	movlw	152
  7067  0019CE  6E0A               	movwf	?_Write_b_eep+2,c
  7068  0019D0  EC24  F01E         	call	_Write_b_eep	;wreg free
  7069                           
  7070                           ;main.c: 507: (Busy_eep(), Write_b_eep(0x43 + 15,0x08 | 0x10 | 0x80));
  7071  0019D4  EC3F  F020         	call	_Busy_eep	;wreg free
  7072  0019D8  6A09               	clrf	?_Write_b_eep+1,c
  7073  0019DA  0E52               	movlw	82
  7074  0019DC  6E08               	movwf	?_Write_b_eep,c
  7075  0019DE  0E98               	movlw	152
  7076  0019E0  6E0A               	movwf	?_Write_b_eep+2,c
  7077  0019E2  EC24  F01E         	call	_Write_b_eep	;wreg free
  7078                           
  7079                           ;main.c: 512: (Busy_eep(), Write_b_eep(0x43 + 16,0x08 | 0x10 | 0x80));
  7080  0019E6  EC3F  F020         	call	_Busy_eep	;wreg free
  7081  0019EA  6A09               	clrf	?_Write_b_eep+1,c
  7082  0019EC  0E53               	movlw	83
  7083  0019EE  6E08               	movwf	?_Write_b_eep,c
  7084  0019F0  0E98               	movlw	152
  7085  0019F2  6E0A               	movwf	?_Write_b_eep+2,c
  7086  0019F4  EC24  F01E         	call	_Write_b_eep	;wreg free
  7087                           
  7088                           ;main.c: 517: (Busy_eep(), Write_b_eep(0x43 + 17,0x08 | 0x10 | 0x80));
  7089  0019F8  EC3F  F020         	call	_Busy_eep	;wreg free
  7090  0019FC  6A09               	clrf	?_Write_b_eep+1,c
  7091  0019FE  0E54               	movlw	84
  7092  001A00  6E08               	movwf	?_Write_b_eep,c
  7093  001A02  0E98               	movlw	152
  7094  001A04  6E0A               	movwf	?_Write_b_eep+2,c
  7095  001A06  EC24  F01E         	call	_Write_b_eep	;wreg free
  7096                           
  7097                           ;main.c: 522: (Busy_eep(), Write_b_eep(0x43 + 18,0));
  7098  001A0A  EC3F  F020         	call	_Busy_eep	;wreg free
  7099  001A0E  6A09               	clrf	?_Write_b_eep+1,c
  7100  001A10  0E55               	movlw	85
  7101  001A12  6E08               	movwf	?_Write_b_eep,c
  7102  001A14  0E00               	movlw	0
  7103  001A16  6A0A               	clrf	?_Write_b_eep+2,c
  7104  001A18  EC24  F01E         	call	_Write_b_eep	;wreg free
  7105                           
  7106                           ;main.c: 523: (Busy_eep(), Write_b_eep(0x43 + 19,0));
  7107  001A1C  EC3F  F020         	call	_Busy_eep	;wreg free
  7108  001A20  6A09               	clrf	?_Write_b_eep+1,c
  7109  001A22  0E56               	movlw	86
  7110  001A24  6E08               	movwf	?_Write_b_eep,c
  7111  001A26  0E00               	movlw	0
  7112  001A28  6A0A               	clrf	?_Write_b_eep+2,c
  7113  001A2A  EC24  F01E         	call	_Write_b_eep	;wreg free
  7114                           
  7115                           ;main.c: 524: (Busy_eep(), Write_b_eep(0x43 + 20,0));
  7116  001A2E  EC3F  F020         	call	_Busy_eep	;wreg free
  7117  001A32  6A09               	clrf	?_Write_b_eep+1,c
  7118  001A34  0E57               	movlw	87
  7119  001A36  6E08               	movwf	?_Write_b_eep,c
  7120  001A38  0E00               	movlw	0
  7121  001A3A  6A0A               	clrf	?_Write_b_eep+2,c
  7122  001A3C  EC24  F01E         	call	_Write_b_eep	;wreg free
  7123                           
  7124                           ;main.c: 525: (Busy_eep(), Write_b_eep(0x43 + 21,0));
  7125  001A40  EC3F  F020         	call	_Busy_eep	;wreg free
  7126  001A44  6A09               	clrf	?_Write_b_eep+1,c
  7127  001A46  0E58               	movlw	88
  7128  001A48  6E08               	movwf	?_Write_b_eep,c
  7129  001A4A  0E00               	movlw	0
  7130  001A4C  6A0A               	clrf	?_Write_b_eep+2,c
  7131  001A4E  EC24  F01E         	call	_Write_b_eep	;wreg free
  7132                           
  7133                           ;main.c: 526: (Busy_eep(), Write_b_eep(0x43 + 22,0));
  7134  001A52  EC3F  F020         	call	_Busy_eep	;wreg free
  7135  001A56  6A09               	clrf	?_Write_b_eep+1,c
  7136  001A58  0E59               	movlw	89
  7137  001A5A  6E08               	movwf	?_Write_b_eep,c
  7138  001A5C  0E00               	movlw	0
  7139  001A5E  6A0A               	clrf	?_Write_b_eep+2,c
  7140  001A60  EC24  F01E         	call	_Write_b_eep	;wreg free
  7141                           
  7142                           ;main.c: 527: (Busy_eep(), Write_b_eep(0x43 + 23,0));
  7143  001A64  EC3F  F020         	call	_Busy_eep	;wreg free
  7144  001A68  6A09               	clrf	?_Write_b_eep+1,c
  7145  001A6A  0E5A               	movlw	90
  7146  001A6C  6E08               	movwf	?_Write_b_eep,c
  7147  001A6E  0E00               	movlw	0
  7148  001A70  6A0A               	clrf	?_Write_b_eep+2,c
  7149  001A72  EC24  F01E         	call	_Write_b_eep	;wreg free
  7150                           
  7151                           ;main.c: 528: (Busy_eep(), Write_b_eep(0x43 + 24,0));
  7152  001A76  EC3F  F020         	call	_Busy_eep	;wreg free
  7153  001A7A  6A09               	clrf	?_Write_b_eep+1,c
  7154  001A7C  0E5B               	movlw	91
  7155  001A7E  6E08               	movwf	?_Write_b_eep,c
  7156  001A80  0E00               	movlw	0
  7157  001A82  6A0A               	clrf	?_Write_b_eep+2,c
  7158  001A84  EC24  F01E         	call	_Write_b_eep	;wreg free
  7159                           
  7160                           ;main.c: 529: (Busy_eep(), Write_b_eep(0x43 + 25,0));
  7161  001A88  EC3F  F020         	call	_Busy_eep	;wreg free
  7162  001A8C  6A09               	clrf	?_Write_b_eep+1,c
  7163  001A8E  0E5C               	movlw	92
  7164  001A90  6E08               	movwf	?_Write_b_eep,c
  7165  001A92  0E00               	movlw	0
  7166  001A94  6A0A               	clrf	?_Write_b_eep+2,c
  7167  001A96  EC24  F01E         	call	_Write_b_eep	;wreg free
  7168                           
  7169                           ;main.c: 530: (Busy_eep(), Write_b_eep(0x43 + 26,0));
  7170  001A9A  EC3F  F020         	call	_Busy_eep	;wreg free
  7171  001A9E  6A09               	clrf	?_Write_b_eep+1,c
  7172  001AA0  0E5D               	movlw	93
  7173  001AA2  6E08               	movwf	?_Write_b_eep,c
  7174  001AA4  0E00               	movlw	0
  7175  001AA6  6A0A               	clrf	?_Write_b_eep+2,c
  7176  001AA8  EC24  F01E         	call	_Write_b_eep	;wreg free
  7177                           
  7178                           ;main.c: 531: (Busy_eep(), Write_b_eep(0x43 + 27,0));
  7179  001AAC  EC3F  F020         	call	_Busy_eep	;wreg free
  7180  001AB0  6A09               	clrf	?_Write_b_eep+1,c
  7181  001AB2  0E5E               	movlw	94
  7182  001AB4  6E08               	movwf	?_Write_b_eep,c
  7183  001AB6  0E00               	movlw	0
  7184  001AB8  6A0A               	clrf	?_Write_b_eep+2,c
  7185  001ABA  EC24  F01E         	call	_Write_b_eep	;wreg free
  7186                           
  7187                           ;main.c: 532: (Busy_eep(), Write_b_eep(0x43 + 28,0));
  7188  001ABE  EC3F  F020         	call	_Busy_eep	;wreg free
  7189  001AC2  6A09               	clrf	?_Write_b_eep+1,c
  7190  001AC4  0E5F               	movlw	95
  7191  001AC6  6E08               	movwf	?_Write_b_eep,c
  7192  001AC8  0E00               	movlw	0
  7193  001ACA  6A0A               	clrf	?_Write_b_eep+2,c
  7194  001ACC  EC24  F01E         	call	_Write_b_eep	;wreg free
  7195                           
  7196                           ;main.c: 533: (Busy_eep(), Write_b_eep(0x43 + 29,0));
  7197  001AD0  EC3F  F020         	call	_Busy_eep	;wreg free
  7198  001AD4  6A09               	clrf	?_Write_b_eep+1,c
  7199  001AD6  0E60               	movlw	96
  7200  001AD8  6E08               	movwf	?_Write_b_eep,c
  7201  001ADA  0E00               	movlw	0
  7202  001ADC  6A0A               	clrf	?_Write_b_eep+2,c
  7203  001ADE  EC24  F01E         	call	_Write_b_eep	;wreg free
  7204                           
  7205                           ;main.c: 534: (Busy_eep(), Write_b_eep(0x43 + 30,0));
  7206  001AE2  EC3F  F020         	call	_Busy_eep	;wreg free
  7207  001AE6  6A09               	clrf	?_Write_b_eep+1,c
  7208  001AE8  0E61               	movlw	97
  7209  001AEA  6E08               	movwf	?_Write_b_eep,c
  7210  001AEC  0E00               	movlw	0
  7211  001AEE  6A0A               	clrf	?_Write_b_eep+2,c
  7212  001AF0  EC24  F01E         	call	_Write_b_eep	;wreg free
  7213                           
  7214                           ;main.c: 535: (Busy_eep(), Write_b_eep(0x43 + 31,0));
  7215  001AF4  EC3F  F020         	call	_Busy_eep	;wreg free
  7216  001AF8  6A09               	clrf	?_Write_b_eep+1,c
  7217  001AFA  0E62               	movlw	98
  7218  001AFC  6E08               	movwf	?_Write_b_eep,c
  7219  001AFE  0E00               	movlw	0
  7220  001B00  6A0A               	clrf	?_Write_b_eep+2,c
  7221  001B02  EC24  F01E         	call	_Write_b_eep	;wreg free
  7222                           
  7223                           ;main.c: 536: (Busy_eep(), Write_b_eep(0x43 + 32,0));
  7224  001B06  EC3F  F020         	call	_Busy_eep	;wreg free
  7225  001B0A  6A09               	clrf	?_Write_b_eep+1,c
  7226  001B0C  0E63               	movlw	99
  7227  001B0E  6E08               	movwf	?_Write_b_eep,c
  7228  001B10  0E00               	movlw	0
  7229  001B12  6A0A               	clrf	?_Write_b_eep+2,c
  7230  001B14  EC24  F01E         	call	_Write_b_eep	;wreg free
  7231                           
  7232                           ;main.c: 537: (Busy_eep(), Write_b_eep(0x43 + 33,0));
  7233  001B18  EC3F  F020         	call	_Busy_eep	;wreg free
  7234  001B1C  6A09               	clrf	?_Write_b_eep+1,c
  7235  001B1E  0E64               	movlw	100
  7236  001B20  6E08               	movwf	?_Write_b_eep,c
  7237  001B22  0E00               	movlw	0
  7238  001B24  6A0A               	clrf	?_Write_b_eep+2,c
  7239  001B26  EC24  F01E         	call	_Write_b_eep	;wreg free
  7240                           
  7241                           ;main.c: 539: (Busy_eep(), Write_b_eep(0x43 + 34,0));
  7242  001B2A  EC3F  F020         	call	_Busy_eep	;wreg free
  7243  001B2E  6A09               	clrf	?_Write_b_eep+1,c
  7244  001B30  0E65               	movlw	101
  7245  001B32  6E08               	movwf	?_Write_b_eep,c
  7246  001B34  0E00               	movlw	0
  7247  001B36  6A0A               	clrf	?_Write_b_eep+2,c
  7248  001B38  EC24  F01E         	call	_Write_b_eep	;wreg free
  7249                           
  7250                           ;main.c: 540: (Busy_eep(), Write_b_eep(0x43 + 35,0));
  7251  001B3C  EC3F  F020         	call	_Busy_eep	;wreg free
  7252  001B40  6A09               	clrf	?_Write_b_eep+1,c
  7253  001B42  0E66               	movlw	102
  7254  001B44  6E08               	movwf	?_Write_b_eep,c
  7255  001B46  0E00               	movlw	0
  7256  001B48  6A0A               	clrf	?_Write_b_eep+2,c
  7257  001B4A  EC24  F01E         	call	_Write_b_eep	;wreg free
  7258                           
  7259                           ;main.c: 541: (Busy_eep(), Write_b_eep(0x43 + 36,0));
  7260  001B4E  EC3F  F020         	call	_Busy_eep	;wreg free
  7261  001B52  6A09               	clrf	?_Write_b_eep+1,c
  7262  001B54  0E67               	movlw	103
  7263  001B56  6E08               	movwf	?_Write_b_eep,c
  7264  001B58  0E00               	movlw	0
  7265  001B5A  6A0A               	clrf	?_Write_b_eep+2,c
  7266  001B5C  EC24  F01E         	call	_Write_b_eep	;wreg free
  7267                           
  7268                           ;main.c: 542: (Busy_eep(), Write_b_eep(0x43 + 37,0));
  7269  001B60  EC3F  F020         	call	_Busy_eep	;wreg free
  7270  001B64  6A09               	clrf	?_Write_b_eep+1,c
  7271  001B66  0E68               	movlw	104
  7272  001B68  6E08               	movwf	?_Write_b_eep,c
  7273  001B6A  0E00               	movlw	0
  7274  001B6C  6A0A               	clrf	?_Write_b_eep+2,c
  7275  001B6E  EC24  F01E         	call	_Write_b_eep	;wreg free
  7276                           
  7277                           ;main.c: 543: (Busy_eep(), Write_b_eep(0x43 + 38,0));
  7278  001B72  EC3F  F020         	call	_Busy_eep	;wreg free
  7279  001B76  6A09               	clrf	?_Write_b_eep+1,c
  7280  001B78  0E69               	movlw	105
  7281  001B7A  6E08               	movwf	?_Write_b_eep,c
  7282  001B7C  0E00               	movlw	0
  7283  001B7E  6A0A               	clrf	?_Write_b_eep+2,c
  7284  001B80  EC24  F01E         	call	_Write_b_eep	;wreg free
  7285                           
  7286                           ;main.c: 544: (Busy_eep(), Write_b_eep(0x43 + 39,0));
  7287  001B84  EC3F  F020         	call	_Busy_eep	;wreg free
  7288  001B88  6A09               	clrf	?_Write_b_eep+1,c
  7289  001B8A  0E6A               	movlw	106
  7290  001B8C  6E08               	movwf	?_Write_b_eep,c
  7291  001B8E  0E00               	movlw	0
  7292  001B90  6A0A               	clrf	?_Write_b_eep+2,c
  7293  001B92  EC24  F01E         	call	_Write_b_eep	;wreg free
  7294                           
  7295                           ;main.c: 545: (Busy_eep(), Write_b_eep(0x43 + 40,0));
  7296  001B96  EC3F  F020         	call	_Busy_eep	;wreg free
  7297  001B9A  6A09               	clrf	?_Write_b_eep+1,c
  7298  001B9C  0E6B               	movlw	107
  7299  001B9E  6E08               	movwf	?_Write_b_eep,c
  7300  001BA0  0E00               	movlw	0
  7301  001BA2  6A0A               	clrf	?_Write_b_eep+2,c
  7302  001BA4  EC24  F01E         	call	_Write_b_eep	;wreg free
  7303                           
  7304                           ;main.c: 546: (Busy_eep(), Write_b_eep(0x43 + 41,0));
  7305  001BA8  EC3F  F020         	call	_Busy_eep	;wreg free
  7306  001BAC  6A09               	clrf	?_Write_b_eep+1,c
  7307  001BAE  0E6C               	movlw	108
  7308  001BB0  6E08               	movwf	?_Write_b_eep,c
  7309  001BB2  0E00               	movlw	0
  7310  001BB4  6A0A               	clrf	?_Write_b_eep+2,c
  7311  001BB6  EC24  F01E         	call	_Write_b_eep	;wreg free
  7312                           
  7313                           ;main.c: 547: (Busy_eep(), Write_b_eep(0x43 + 42,0));
  7314  001BBA  EC3F  F020         	call	_Busy_eep	;wreg free
  7315  001BBE  6A09               	clrf	?_Write_b_eep+1,c
  7316  001BC0  0E6D               	movlw	109
  7317  001BC2  6E08               	movwf	?_Write_b_eep,c
  7318  001BC4  0E00               	movlw	0
  7319  001BC6  6A0A               	clrf	?_Write_b_eep+2,c
  7320  001BC8  EC24  F01E         	call	_Write_b_eep	;wreg free
  7321                           
  7322                           ;main.c: 548: (Busy_eep(), Write_b_eep(0x43 + 43,0));
  7323  001BCC  EC3F  F020         	call	_Busy_eep	;wreg free
  7324  001BD0  6A09               	clrf	?_Write_b_eep+1,c
  7325  001BD2  0E6E               	movlw	110
  7326  001BD4  6E08               	movwf	?_Write_b_eep,c
  7327  001BD6  0E00               	movlw	0
  7328  001BD8  6A0A               	clrf	?_Write_b_eep+2,c
  7329  001BDA  EC24  F01E         	call	_Write_b_eep	;wreg free
  7330                           
  7331                           ;main.c: 549: (Busy_eep(), Write_b_eep(0x43 + 44,0));
  7332  001BDE  EC3F  F020         	call	_Busy_eep	;wreg free
  7333  001BE2  6A09               	clrf	?_Write_b_eep+1,c
  7334  001BE4  0E6F               	movlw	111
  7335  001BE6  6E08               	movwf	?_Write_b_eep,c
  7336  001BE8  0E00               	movlw	0
  7337  001BEA  6A0A               	clrf	?_Write_b_eep+2,c
  7338  001BEC  EC24  F01E         	call	_Write_b_eep	;wreg free
  7339                           
  7340                           ;main.c: 550: (Busy_eep(), Write_b_eep(0x43 + 45,0));
  7341  001BF0  EC3F  F020         	call	_Busy_eep	;wreg free
  7342  001BF4  6A09               	clrf	?_Write_b_eep+1,c
  7343  001BF6  0E70               	movlw	112
  7344  001BF8  6E08               	movwf	?_Write_b_eep,c
  7345  001BFA  0E00               	movlw	0
  7346  001BFC  6A0A               	clrf	?_Write_b_eep+2,c
  7347  001BFE  EC24  F01E         	call	_Write_b_eep	;wreg free
  7348                           
  7349                           ;main.c: 551: (Busy_eep(), Write_b_eep(0x43 + 46,0));
  7350  001C02  EC3F  F020         	call	_Busy_eep	;wreg free
  7351  001C06  6A09               	clrf	?_Write_b_eep+1,c
  7352  001C08  0E71               	movlw	113
  7353  001C0A  6E08               	movwf	?_Write_b_eep,c
  7354  001C0C  0E00               	movlw	0
  7355  001C0E  6A0A               	clrf	?_Write_b_eep+2,c
  7356  001C10  EC24  F01E         	call	_Write_b_eep	;wreg free
  7357                           
  7358                           ;main.c: 552: (Busy_eep(), Write_b_eep(0x43 + 47,0));
  7359  001C14  EC3F  F020         	call	_Busy_eep	;wreg free
  7360  001C18  6A09               	clrf	?_Write_b_eep+1,c
  7361  001C1A  0E72               	movlw	114
  7362  001C1C  6E08               	movwf	?_Write_b_eep,c
  7363  001C1E  0E00               	movlw	0
  7364  001C20  6A0A               	clrf	?_Write_b_eep+2,c
  7365  001C22  EC24  F01E         	call	_Write_b_eep	;wreg free
  7366                           
  7367                           ;main.c: 553: (Busy_eep(), Write_b_eep(0x43 + 48,0));
  7368  001C26  EC3F  F020         	call	_Busy_eep	;wreg free
  7369  001C2A  6A09               	clrf	?_Write_b_eep+1,c
  7370  001C2C  0E73               	movlw	115
  7371  001C2E  6E08               	movwf	?_Write_b_eep,c
  7372  001C30  0E00               	movlw	0
  7373  001C32  6A0A               	clrf	?_Write_b_eep+2,c
  7374  001C34  EC24  F01E         	call	_Write_b_eep	;wreg free
  7375                           
  7376                           ;main.c: 554: (Busy_eep(), Write_b_eep(0x43 + 49,0));
  7377  001C38  EC3F  F020         	call	_Busy_eep	;wreg free
  7378  001C3C  6A09               	clrf	?_Write_b_eep+1,c
  7379  001C3E  0E74               	movlw	116
  7380  001C40  6E08               	movwf	?_Write_b_eep,c
  7381  001C42  0E00               	movlw	0
  7382  001C44  6A0A               	clrf	?_Write_b_eep+2,c
  7383  001C46  EC24  F01E         	call	_Write_b_eep	;wreg free
  7384                           
  7385                           ;main.c: 556: (Busy_eep(), Write_b_eep(0x43 + 50,0));
  7386  001C4A  EC3F  F020         	call	_Busy_eep	;wreg free
  7387  001C4E  6A09               	clrf	?_Write_b_eep+1,c
  7388  001C50  0E75               	movlw	117
  7389  001C52  6E08               	movwf	?_Write_b_eep,c
  7390  001C54  0E00               	movlw	0
  7391  001C56  6A0A               	clrf	?_Write_b_eep+2,c
  7392  001C58  EC24  F01E         	call	_Write_b_eep	;wreg free
  7393                           
  7394                           ;main.c: 557: (Busy_eep(), Write_b_eep(0x43 + 51,0));
  7395  001C5C  EC3F  F020         	call	_Busy_eep	;wreg free
  7396  001C60  6A09               	clrf	?_Write_b_eep+1,c
  7397  001C62  0E76               	movlw	118
  7398  001C64  6E08               	movwf	?_Write_b_eep,c
  7399  001C66  0E00               	movlw	0
  7400  001C68  6A0A               	clrf	?_Write_b_eep+2,c
  7401  001C6A  EC24  F01E         	call	_Write_b_eep	;wreg free
  7402                           
  7403                           ;main.c: 558: (Busy_eep(), Write_b_eep(0x43 + 52,0));
  7404  001C6E  EC3F  F020         	call	_Busy_eep	;wreg free
  7405  001C72  6A09               	clrf	?_Write_b_eep+1,c
  7406  001C74  0E77               	movlw	119
  7407  001C76  6E08               	movwf	?_Write_b_eep,c
  7408  001C78  0E00               	movlw	0
  7409  001C7A  6A0A               	clrf	?_Write_b_eep+2,c
  7410  001C7C  EC24  F01E         	call	_Write_b_eep	;wreg free
  7411                           
  7412                           ;main.c: 559: (Busy_eep(), Write_b_eep(0x43 + 53,0));
  7413  001C80  EC3F  F020         	call	_Busy_eep	;wreg free
  7414  001C84  6A09               	clrf	?_Write_b_eep+1,c
  7415  001C86  0E78               	movlw	120
  7416  001C88  6E08               	movwf	?_Write_b_eep,c
  7417  001C8A  0E00               	movlw	0
  7418  001C8C  6A0A               	clrf	?_Write_b_eep+2,c
  7419  001C8E  EC24  F01E         	call	_Write_b_eep	;wreg free
  7420                           
  7421                           ;main.c: 560: (Busy_eep(), Write_b_eep(0x43 + 54,0));
  7422  001C92  EC3F  F020         	call	_Busy_eep	;wreg free
  7423  001C96  6A09               	clrf	?_Write_b_eep+1,c
  7424  001C98  0E79               	movlw	121
  7425  001C9A  6E08               	movwf	?_Write_b_eep,c
  7426  001C9C  0E00               	movlw	0
  7427  001C9E  6A0A               	clrf	?_Write_b_eep+2,c
  7428  001CA0  EC24  F01E         	call	_Write_b_eep	;wreg free
  7429                           
  7430                           ;main.c: 561: (Busy_eep(), Write_b_eep(0x43 + 55,0));
  7431  001CA4  EC3F  F020         	call	_Busy_eep	;wreg free
  7432  001CA8  6A09               	clrf	?_Write_b_eep+1,c
  7433  001CAA  0E7A               	movlw	122
  7434  001CAC  6E08               	movwf	?_Write_b_eep,c
  7435  001CAE  0E00               	movlw	0
  7436  001CB0  6A0A               	clrf	?_Write_b_eep+2,c
  7437  001CB2  EC24  F01E         	call	_Write_b_eep	;wreg free
  7438                           
  7439                           ;main.c: 562: (Busy_eep(), Write_b_eep(0x43 + 56,0));
  7440  001CB6  EC3F  F020         	call	_Busy_eep	;wreg free
  7441  001CBA  6A09               	clrf	?_Write_b_eep+1,c
  7442  001CBC  0E7B               	movlw	123
  7443  001CBE  6E08               	movwf	?_Write_b_eep,c
  7444  001CC0  0E00               	movlw	0
  7445  001CC2  6A0A               	clrf	?_Write_b_eep+2,c
  7446  001CC4  EC24  F01E         	call	_Write_b_eep	;wreg free
  7447                           
  7448                           ;main.c: 563: (Busy_eep(), Write_b_eep(0x43 + 57,0));
  7449  001CC8  EC3F  F020         	call	_Busy_eep	;wreg free
  7450  001CCC  6A09               	clrf	?_Write_b_eep+1,c
  7451  001CCE  0E7C               	movlw	124
  7452  001CD0  6E08               	movwf	?_Write_b_eep,c
  7453  001CD2  0E00               	movlw	0
  7454  001CD4  6A0A               	clrf	?_Write_b_eep+2,c
  7455  001CD6  EC24  F01E         	call	_Write_b_eep	;wreg free
  7456                           
  7457                           ;main.c: 564: (Busy_eep(), Write_b_eep(0x43 + 58,0));
  7458  001CDA  EC3F  F020         	call	_Busy_eep	;wreg free
  7459  001CDE  6A09               	clrf	?_Write_b_eep+1,c
  7460  001CE0  0E7D               	movlw	125
  7461  001CE2  6E08               	movwf	?_Write_b_eep,c
  7462  001CE4  0E00               	movlw	0
  7463  001CE6  6A0A               	clrf	?_Write_b_eep+2,c
  7464  001CE8  EC24  F01E         	call	_Write_b_eep	;wreg free
  7465                           
  7466                           ;main.c: 565: (Busy_eep(), Write_b_eep(0x43 + 59,0));
  7467  001CEC  EC3F  F020         	call	_Busy_eep	;wreg free
  7468  001CF0  6A09               	clrf	?_Write_b_eep+1,c
  7469  001CF2  0E7E               	movlw	126
  7470  001CF4  6E08               	movwf	?_Write_b_eep,c
  7471  001CF6  0E00               	movlw	0
  7472  001CF8  6A0A               	clrf	?_Write_b_eep+2,c
  7473  001CFA  EC24  F01E         	call	_Write_b_eep	;wreg free
  7474                           
  7475                           ;main.c: 566: (Busy_eep(), Write_b_eep(0x43 + 60,0));
  7476  001CFE  EC3F  F020         	call	_Busy_eep	;wreg free
  7477  001D02  6A09               	clrf	?_Write_b_eep+1,c
  7478  001D04  0E7F               	movlw	127
  7479  001D06  6E08               	movwf	?_Write_b_eep,c
  7480  001D08  0E00               	movlw	0
  7481  001D0A  6A0A               	clrf	?_Write_b_eep+2,c
  7482  001D0C  EC24  F01E         	call	_Write_b_eep	;wreg free
  7483                           
  7484                           ;main.c: 567: (Busy_eep(), Write_b_eep(0x43 + 61,0));
  7485  001D10  EC3F  F020         	call	_Busy_eep	;wreg free
  7486  001D14  6A09               	clrf	?_Write_b_eep+1,c
  7487  001D16  0E80               	movlw	128
  7488  001D18  6E08               	movwf	?_Write_b_eep,c
  7489  001D1A  0E00               	movlw	0
  7490  001D1C  6A0A               	clrf	?_Write_b_eep+2,c
  7491  001D1E  EC24  F01E         	call	_Write_b_eep	;wreg free
  7492                           
  7493                           ;main.c: 568: (Busy_eep(), Write_b_eep(0x43 + 62,0));
  7494  001D22  EC3F  F020         	call	_Busy_eep	;wreg free
  7495  001D26  6A09               	clrf	?_Write_b_eep+1,c
  7496  001D28  0E81               	movlw	129
  7497  001D2A  6E08               	movwf	?_Write_b_eep,c
  7498  001D2C  0E00               	movlw	0
  7499  001D2E  6A0A               	clrf	?_Write_b_eep+2,c
  7500  001D30  EC24  F01E         	call	_Write_b_eep	;wreg free
  7501                           
  7502                           ;main.c: 569: (Busy_eep(), Write_b_eep(0x43 + 63,0));
  7503  001D34  EC3F  F020         	call	_Busy_eep	;wreg free
  7504  001D38  6A09               	clrf	?_Write_b_eep+1,c
  7505  001D3A  0E82               	movlw	130
  7506  001D3C  6E08               	movwf	?_Write_b_eep,c
  7507  001D3E  0E00               	movlw	0
  7508  001D40  6A0A               	clrf	?_Write_b_eep+2,c
  7509  001D42  EC24  F01E         	call	_Write_b_eep	;wreg free
  7510                           
  7511                           ;main.c: 570: (Busy_eep(), Write_b_eep(0x43 + 64,0));
  7512  001D46  EC3F  F020         	call	_Busy_eep	;wreg free
  7513  001D4A  6A09               	clrf	?_Write_b_eep+1,c
  7514  001D4C  0E83               	movlw	131
  7515  001D4E  6E08               	movwf	?_Write_b_eep,c
  7516  001D50  0E00               	movlw	0
  7517  001D52  6A0A               	clrf	?_Write_b_eep+2,c
  7518  001D54  EC24  F01E         	call	_Write_b_eep	;wreg free
  7519                           
  7520                           ;main.c: 571: (Busy_eep(), Write_b_eep(0x43 + 65,0));
  7521  001D58  EC3F  F020         	call	_Busy_eep	;wreg free
  7522  001D5C  6A09               	clrf	?_Write_b_eep+1,c
  7523  001D5E  0E84               	movlw	132
  7524  001D60  6E08               	movwf	?_Write_b_eep,c
  7525  001D62  0E00               	movlw	0
  7526  001D64  6A0A               	clrf	?_Write_b_eep+2,c
  7527  001D66  EC24  F01E         	call	_Write_b_eep	;wreg free
  7528                           
  7529                           ;main.c: 575: for ( i = 0; i < 7; i++ ) {
  7530  001D6A  6A0E               	clrf	init_app_eeprom@i,c
  7531  001D6C                     l177:
  7532                           
  7533                           ;main.c: 576: for ( j = 0; j < 8; j++ ) {
  7534  001D6C  6A0F               	clrf	init_app_eeprom@j,c
  7535  001D6E                     l4930:
  7536                           
  7537                           ;main.c: 577: (Busy_eep(), Write_b_eep(0x43 + 72 + i * 8 + j,0));
  7538  001D6E  EC3F  F020         	call	_Busy_eep	;wreg free
  7539  001D72  500F               	movf	init_app_eeprom@j,w,c
  7540  001D74  C00E  F00C         	movff	init_app_eeprom@i,??_init_app_eeprom
  7541  001D78  6A0D               	clrf	(??_init_app_eeprom+1)& (0+255),c
  7542  001D7A  90D8               	bcf	status,0,c
  7543  001D7C  360C               	rlcf	??_init_app_eeprom,f,c
  7544  001D7E  360D               	rlcf	??_init_app_eeprom+1,f,c
  7545  001D80  90D8               	bcf	status,0,c
  7546  001D82  360C               	rlcf	??_init_app_eeprom,f,c
  7547  001D84  360D               	rlcf	??_init_app_eeprom+1,f,c
  7548  001D86  90D8               	bcf	status,0,c
  7549  001D88  360C               	rlcf	??_init_app_eeprom,f,c
  7550  001D8A  360D               	rlcf	??_init_app_eeprom+1,f,c
  7551  001D8C  260C               	addwf	??_init_app_eeprom,f,c
  7552  001D8E  0E00               	movlw	0
  7553  001D90  220D               	addwfc	??_init_app_eeprom+1,f,c
  7554  001D92  0E8B               	movlw	139
  7555  001D94  240C               	addwf	??_init_app_eeprom,w,c
  7556  001D96  6E08               	movwf	?_Write_b_eep,c
  7557  001D98  0E00               	movlw	0
  7558  001D9A  200D               	addwfc	??_init_app_eeprom+1,w,c
  7559  001D9C  6E09               	movwf	?_Write_b_eep+1,c
  7560  001D9E  0E00               	movlw	0
  7561  001DA0  6A0A               	clrf	?_Write_b_eep+2,c
  7562  001DA2  EC24  F01E         	call	_Write_b_eep	;wreg free
  7563  001DA6  2A0F               	incf	init_app_eeprom@j,f,c
  7564  001DA8  0E07               	movlw	7
  7565  001DAA  640F               	cpfsgt	init_app_eeprom@j,c
  7566  001DAC  D7E0               	goto	l4930
  7567  001DAE  2A0E               	incf	init_app_eeprom@i,f,c
  7568  001DB0  0E06               	movlw	6
  7569  001DB2  640E               	cpfsgt	init_app_eeprom@i,c
  7570  001DB4  D7DB               	goto	l177
  7571                           
  7572                           ;main.c: 578: }
  7573                           ;main.c: 579: }
  7574                           ;main.c: 582: calculateSetFilterMask();
  7575  001DB6  EF45  F020         	goto	_calculateSetFilterMask	;wreg free
  7576  001DBA                     __end_of_init_app_eeprom:
  7577                           	opt stack 0
  7578                           tblptru	equ	0xFF8
  7579                           prodh	equ	0xFF4
  7580                           prodl	equ	0xFF3
  7581                           postinc0	equ	0xFEE
  7582                           wreg	equ	0xFE8
  7583                           indf2	equ	0xFDF
  7584                           postinc2	equ	0xFDE
  7585                           postdec2	equ	0xFDD
  7586                           fsr2h	equ	0xFDA
  7587                           fsr2l	equ	0xFD9
  7588                           status	equ	0xFD8
  7589                           
  7590 ;; *************** function _vscp_setUserID *****************
  7591 ;; Defined at:
  7592 ;;		line 2375 in file "../main.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;  idx             1    wreg     unsigned char 
  7595 ;;  data            1   11[COMRAM] unsigned char 
  7596 ;; Auto vars:     Size  Location     Type
  7597 ;;  idx             1   12[COMRAM] unsigned char 
  7598 ;; Return value:  Size  Location     Type
  7599 ;;		None               void
  7600 ;; Registers used:
  7601 ;;		wreg, status,2, status,0, cstack
  7602 ;; Tracked objects:
  7603 ;;		On entry : F/0
  7604 ;;		On exit  : 0/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7607 ;;      Params:         1       0       0       0       0       0       0
  7608 ;;      Locals:         1       0       0       0       0       0       0
  7609 ;;      Temps:          0       0       0       0       0       0       0
  7610 ;;      Totals:         2       0       0       0       0       0       0
  7611 ;;Total ram usage:        2 bytes
  7612 ;; Hardware stack levels used:    1
  7613 ;; Hardware stack levels required when called:    3
  7614 ;; This function calls:
  7615 ;;		_Busy_eep
  7616 ;;		_Write_b_eep
  7617 ;; This function is called by:
  7618 ;;		_vscp_writeStdReg
  7619 ;; This function uses a non-reentrant model
  7620 ;;
  7621                           
  7622                           	psect	text21
  7623  003F04                     __ptext21:
  7624                           	opt stack 0
  7625  003F04                     _vscp_setUserID:
  7626                           	opt stack 25
  7627                           
  7628                           ;incstack = 0
  7629                           ;incstack = 0
  7630                           ;vscp_setUserID@idx stored from wreg
  7631  003F04  CFE8 F00D          	movff	wreg,vscp_setUserID@idx
  7632                           
  7633                           ; BSR set to: 0
  7634                           ;main.c: 2376: (Busy_eep(), Write_b_eep(idx + 0x06,data));
  7635  003F08  EC3F  F020         	call	_Busy_eep	;wreg free
  7636  003F0C  0E06               	movlw	6
  7637  003F0E  240D               	addwf	vscp_setUserID@idx,w,c
  7638  003F10  6E08               	movwf	?_Write_b_eep,c
  7639  003F12  6A09               	clrf	?_Write_b_eep+1,c
  7640  003F14  0E00               	movlw	0
  7641  003F16  2209               	addwfc	?_Write_b_eep+1,f,c
  7642  003F18  C00C  F00A         	movff	vscp_setUserID@data,?_Write_b_eep+2
  7643  003F1C  EF24  F01E         	goto	_Write_b_eep	;wreg free
  7644  003F20                     __end_of_vscp_setUserID:
  7645                           	opt stack 0
  7646                           tblptru	equ	0xFF8
  7647                           prodh	equ	0xFF4
  7648                           prodl	equ	0xFF3
  7649                           postinc0	equ	0xFEE
  7650                           wreg	equ	0xFE8
  7651                           indf2	equ	0xFDF
  7652                           postinc2	equ	0xFDE
  7653                           postdec2	equ	0xFDD
  7654                           fsr2h	equ	0xFDA
  7655                           fsr2l	equ	0xFD9
  7656                           status	equ	0xFD8
  7657                           
  7658 ;; *************** function _vscp_setManufacturerId *****************
  7659 ;; Defined at:
  7660 ;;		line 818 in file "../main.c"
  7661 ;; Parameters:    Size  Location     Type
  7662 ;;  idx             1    wreg     unsigned char 
  7663 ;;  data            1   11[COMRAM] unsigned char 
  7664 ;; Auto vars:     Size  Location     Type
  7665 ;;  idx             1   12[COMRAM] unsigned char 
  7666 ;; Return value:  Size  Location     Type
  7667 ;;		None               void
  7668 ;; Registers used:
  7669 ;;		wreg, status,2, status,0, cstack
  7670 ;; Tracked objects:
  7671 ;;		On entry : F/0
  7672 ;;		On exit  : 0/0
  7673 ;;		Unchanged: 0/0
  7674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7675 ;;      Params:         1       0       0       0       0       0       0
  7676 ;;      Locals:         1       0       0       0       0       0       0
  7677 ;;      Temps:          0       0       0       0       0       0       0
  7678 ;;      Totals:         2       0       0       0       0       0       0
  7679 ;;Total ram usage:        2 bytes
  7680 ;; Hardware stack levels used:    1
  7681 ;; Hardware stack levels required when called:    3
  7682 ;; This function calls:
  7683 ;;		_Busy_eep
  7684 ;;		_Write_b_eep
  7685 ;; This function is called by:
  7686 ;;		_vscp_writeStdReg
  7687 ;; This function uses a non-reentrant model
  7688 ;;
  7689                           
  7690                           	psect	text22
  7691  003DAA                     __ptext22:
  7692                           	opt stack 0
  7693  003DAA                     _vscp_setManufacturerId:
  7694                           	opt stack 25
  7695                           
  7696                           ;incstack = 0
  7697                           ;incstack = 0
  7698                           ;vscp_setManufacturerId@idx stored from wreg
  7699  003DAA  CFE8 F00D          	movff	wreg,vscp_setManufacturerId@idx
  7700                           
  7701                           ; BSR set to: 0
  7702                           ;main.c: 819: if ( idx>7 ) return;
  7703  003DAE  0E07               	movlw	7
  7704  003DB0  640D               	cpfsgt	vscp_setManufacturerId@idx,c
  7705  003DB2  D001               	goto	l5878
  7706  003DB4  D00C               	goto	l243
  7707  003DB6                     l5878:
  7708                           
  7709                           ; BSR set to: 0
  7710                           ;main.c: 820: (Busy_eep(), Write_b_eep(0x0B + idx,data));
  7711  003DB6  EC3F  F020         	call	_Busy_eep	;wreg free
  7712  003DBA  0E0B               	movlw	11
  7713  003DBC  240D               	addwf	vscp_setManufacturerId@idx,w,c
  7714  003DBE  6E08               	movwf	?_Write_b_eep,c
  7715  003DC0  6A09               	clrf	?_Write_b_eep+1,c
  7716  003DC2  0E00               	movlw	0
  7717  003DC4  2209               	addwfc	?_Write_b_eep+1,f,c
  7718  003DC6  C00C  F00A         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  7719  003DCA  EC24  F01E         	call	_Write_b_eep	;wreg free
  7720  003DCE                     l243:
  7721  003DCE  0012               	return	
  7722  003DD0                     __end_of_vscp_setManufacturerId:
  7723                           	opt stack 0
  7724                           tblptru	equ	0xFF8
  7725                           prodh	equ	0xFF4
  7726                           prodl	equ	0xFF3
  7727                           postinc0	equ	0xFEE
  7728                           wreg	equ	0xFE8
  7729                           indf2	equ	0xFDF
  7730                           postinc2	equ	0xFDE
  7731                           postdec2	equ	0xFDD
  7732                           fsr2h	equ	0xFDA
  7733                           fsr2l	equ	0xFD9
  7734                           status	equ	0xFD8
  7735                           
  7736 ;; *************** function _vscp_setGUID *****************
  7737 ;; Defined at:
  7738 ;;		line 806 in file "../main.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;  idx             1    wreg     unsigned char 
  7741 ;;  data            1   11[COMRAM] unsigned char 
  7742 ;; Auto vars:     Size  Location     Type
  7743 ;;  idx             1   12[COMRAM] unsigned char 
  7744 ;; Return value:  Size  Location     Type
  7745 ;;		None               void
  7746 ;; Registers used:
  7747 ;;		wreg, status,2, status,0, cstack
  7748 ;; Tracked objects:
  7749 ;;		On entry : F/0
  7750 ;;		On exit  : 0/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7753 ;;      Params:         1       0       0       0       0       0       0
  7754 ;;      Locals:         1       0       0       0       0       0       0
  7755 ;;      Temps:          0       0       0       0       0       0       0
  7756 ;;      Totals:         2       0       0       0       0       0       0
  7757 ;;Total ram usage:        2 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; Hardware stack levels required when called:    3
  7760 ;; This function calls:
  7761 ;;		_Busy_eep
  7762 ;;		_Write_b_eep
  7763 ;; This function is called by:
  7764 ;;		_vscp_writeStdReg
  7765 ;; This function uses a non-reentrant model
  7766 ;;
  7767                           
  7768                           	psect	text23
  7769  003DD0                     __ptext23:
  7770                           	opt stack 0
  7771  003DD0                     _vscp_setGUID:
  7772                           	opt stack 25
  7773                           
  7774                           ;incstack = 0
  7775                           ;incstack = 0
  7776                           ;vscp_setGUID@idx stored from wreg
  7777  003DD0  CFE8 F00D          	movff	wreg,vscp_setGUID@idx
  7778                           
  7779                           ; BSR set to: 0
  7780                           ;main.c: 807: if ( idx>15 ) return;
  7781  003DD4  0E0F               	movlw	15
  7782  003DD6  640D               	cpfsgt	vscp_setGUID@idx,c
  7783  003DD8  D001               	goto	l5870
  7784  003DDA  D00C               	goto	l239
  7785  003DDC                     l5870:
  7786                           
  7787                           ; BSR set to: 0
  7788                           ;main.c: 808: (Busy_eep(), Write_b_eep(0x13 + idx,data));
  7789  003DDC  EC3F  F020         	call	_Busy_eep	;wreg free
  7790  003DE0  0E13               	movlw	19
  7791  003DE2  240D               	addwf	vscp_setGUID@idx,w,c
  7792  003DE4  6E08               	movwf	?_Write_b_eep,c
  7793  003DE6  6A09               	clrf	?_Write_b_eep+1,c
  7794  003DE8  0E00               	movlw	0
  7795  003DEA  2209               	addwfc	?_Write_b_eep+1,f,c
  7796  003DEC  C00C  F00A         	movff	vscp_setGUID@data,?_Write_b_eep+2
  7797  003DF0  EC24  F01E         	call	_Write_b_eep	;wreg free
  7798  003DF4                     l239:
  7799  003DF4  0012               	return	
  7800  003DF6                     __end_of_vscp_setGUID:
  7801                           	opt stack 0
  7802                           tblptru	equ	0xFF8
  7803                           prodh	equ	0xFF4
  7804                           prodl	equ	0xFF3
  7805                           postinc0	equ	0xFEE
  7806                           wreg	equ	0xFE8
  7807                           indf2	equ	0xFDF
  7808                           postinc2	equ	0xFDE
  7809                           postdec2	equ	0xFDD
  7810                           fsr2h	equ	0xFDA
  7811                           fsr2l	equ	0xFD9
  7812                           status	equ	0xFD8
  7813                           
  7814 ;; *************** function _vscp_writeAppReg *****************
  7815 ;; Defined at:
  7816 ;;		line 970 in file "../main.c"
  7817 ;; Parameters:    Size  Location     Type
  7818 ;;  reg             1    wreg     unsigned char 
  7819 ;;  val             1   80[COMRAM] unsigned char 
  7820 ;; Auto vars:     Size  Location     Type
  7821 ;;  reg             1   29[BANK0 ] unsigned char 
  7822 ;;  val             1   26[BANK0 ] unsigned char 
  7823 ;;  bOn             1   28[BANK0 ] enum E15660
  7824 ;;  rv              1   27[BANK0 ] unsigned char 
  7825 ;;  bInfoEvent      1   25[BANK0 ] enum E15660
  7826 ;; Return value:  Size  Location     Type
  7827 ;;                  1    wreg      unsigned char 
  7828 ;; Registers used:
  7829 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7830 ;; Tracked objects:
  7831 ;;		On entry : F/0
  7832 ;;		On exit  : F/0
  7833 ;;		Unchanged: 0/0
  7834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7835 ;;      Params:         1       0       0       0       0       0       0
  7836 ;;      Locals:         0       5       0       0       0       0       0
  7837 ;;      Temps:          0       3       0       0       0       0       0
  7838 ;;      Totals:         1       8       0       0       0       0       0
  7839 ;;Total ram usage:        9 bytes
  7840 ;; Hardware stack levels used:    1
  7841 ;; Hardware stack levels required when called:    7
  7842 ;; This function calls:
  7843 ;;		_Busy_eep
  7844 ;;		_Write_b_eep
  7845 ;;		_Read_b_eep
  7846 ;;		_calculateSetFilterMask
  7847 ;;		_SendInformationEvent
  7848 ;; This function is called by:
  7849 ;;		_vscp_writeRegister
  7850 ;;		_vscp_handleProtocolEvent
  7851 ;; This function uses a non-reentrant model
  7852 ;;
  7853                           
  7854                           	psect	text24
  7855  0008DE                     __ptext24:
  7856                           	opt stack 0
  7857  0008DE                     _vscp_writeAppReg:
  7858                           	opt stack 21
  7859                           
  7860                           ;incstack = 0
  7861                           ;incstack = 0
  7862                           ;vscp_writeAppReg@reg stored from wreg
  7863  0008DE  CFE8 F0CE          	movff	wreg,vscp_writeAppReg@reg
  7864                           
  7865                           ; BSR set to: 0
  7866                           ;main.c: 971: uint8_t rv;
  7867                           ;main.c: 972: BOOL bInfoEvent = 0;
  7868  0008E2  6BCA               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7869                           
  7870                           ;main.c: 973: BOOL bOn = 0;
  7871  0008E4  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  7872                           
  7873                           ; BSR set to: 0
  7874                           ;main.c: 975: rv = ~val;
  7875  0008E6  1C51               	comf	vscp_writeAppReg@val,w,c
  7876  0008E8  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  7877                           
  7878                           ; BSR set to: 0
  7879                           ;main.c: 978: if ( reg == 0 ) {
  7880  0008EA  67CE               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  7881  0008EC  D010               	goto	l10278
  7882                           
  7883                           ; BSR set to: 0
  7884                           ;main.c: 979: (Busy_eep(), Write_b_eep(0x43 + 0,val));
  7885  0008EE  EC3F  F020         	call	_Busy_eep	;wreg free
  7886  0008F2  6A09               	clrf	?_Write_b_eep+1,c
  7887  0008F4  0E43               	movlw	67
  7888  0008F6  6E08               	movwf	?_Write_b_eep,c
  7889  0008F8  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  7890  0008FC  EC24  F01E         	call	_Write_b_eep	;wreg free
  7891                           
  7892                           ;main.c: 980: rv = Read_b_eep(0x43 + 0);
  7893  000900  6A09               	clrf	?_Read_b_eep+1,c
  7894  000902  0E43               	movlw	67
  7895  000904  6E08               	movwf	?_Read_b_eep,c
  7896  000906  EC0B  F020         	call	_Read_b_eep	;wreg free
  7897  00090A  EF51  F009         	goto	L26
  7898  00090E                     l10278:
  7899                           
  7900                           ; BSR set to: 0
  7901                           ;main.c: 982: else if ( reg == 1 ) {
  7902  00090E  05CE               	decf	vscp_writeAppReg@reg& (0+255),w,b
  7903  000910  E110               	bnz	l10286
  7904                           
  7905                           ; BSR set to: 0
  7906                           ;main.c: 984: (Busy_eep(), Write_b_eep(0x43 + 1,val));
  7907  000912  EC3F  F020         	call	_Busy_eep	;wreg free
  7908  000916  6A09               	clrf	?_Write_b_eep+1,c
  7909  000918  0E44               	movlw	68
  7910  00091A  6E08               	movwf	?_Write_b_eep,c
  7911  00091C  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  7912  000920  EC24  F01E         	call	_Write_b_eep	;wreg free
  7913                           
  7914                           ;main.c: 985: rv = Read_b_eep(0x43 + 1);
  7915  000924  6A09               	clrf	?_Read_b_eep+1,c
  7916  000926  0E44               	movlw	68
  7917  000928  6E08               	movwf	?_Read_b_eep,c
  7918  00092A  EC0B  F020         	call	_Read_b_eep	;wreg free
  7919  00092E  EF51  F009         	goto	L26
  7920  000932                     l10286:
  7921                           
  7922                           ; BSR set to: 0
  7923                           ;main.c: 988: else if ( (reg >= 2) && (reg <= 9) ) {
  7924  000932  0E01               	movlw	1
  7925  000934  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  7926  000936  D185               	goto	l10438
  7927                           
  7928                           ; BSR set to: 0
  7929  000938  0E0A               	movlw	10
  7930  00093A  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  7931  00093C  D182               	goto	l10438
  7932                           
  7933                           ; BSR set to: 0
  7934                           ;main.c: 990: if ( Read_b_eep(0x43 + 10 + reg - 2) &
  7935                           ;main.c: 992: 0x80 ) {
  7936  00093E  0E4B               	movlw	75
  7937  000940  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  7938  000942  6E08               	movwf	?_Read_b_eep,c
  7939  000944  6A09               	clrf	?_Read_b_eep+1,c
  7940  000946  0E00               	movlw	0
  7941  000948  2209               	addwfc	?_Read_b_eep+1,f,c
  7942  00094A  EC0B  F020         	call	_Read_b_eep	;wreg free
  7943  00094E  0100               	movlb	0	; () banked
  7944  000950  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  7945  000952  BFC7               	btfsc	??_vscp_writeAppReg& (0+255),7,b
  7946  000954  D161               	goto	l10436
  7947  000956  EF53  F009         	goto	l10696
  7948  00095A                     l10294:
  7949                           
  7950                           ; BSR set to: 0
  7951                           ;main.c: 999: bInfoEvent = 1;
  7952  00095A  0E01               	movlw	1
  7953  00095C  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7954                           
  7955                           ; BSR set to: 0
  7956                           ;main.c: 1001: if ( 1 == val ) {
  7957  00095E  0451               	decf	vscp_writeAppReg@val,w,c
  7958  000960  E128               	bnz	l296
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;main.c: 1003: LATBbits.LATB4 = 1;
  7962  000962  888A               	bsf	3978,4,c	;volatile
  7963                           
  7964                           ; BSR set to: 0
  7965                           ;main.c: 1004: rv = LATBbits.LATB4;
  7966  000964  0E00               	movlw	0
  7967  000966  B88A               	btfsc	3978,4,c	;volatile
  7968  000968  0E01               	movlw	1
  7969  00096A  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  7970                           
  7971                           ; BSR set to: 0
  7972                           ;main.c: 1005: bOn = 1;
  7973  00096C  0E01               	movlw	1
  7974  00096E  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;main.c: 1008: if ( Read_b_eep(0x43 + 10) & 0x04 ) {
  7978  000970  6A09               	clrf	?_Read_b_eep+1,c
  7979  000972  0E4D               	movlw	77
  7980  000974  6E08               	movwf	?_Read_b_eep,c
  7981  000976  EC0B  F020         	call	_Read_b_eep	;wreg free
  7982  00097A  0100               	movlb	0	; () banked
  7983  00097C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  7984  00097E  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  7985  000980  EF53  F009         	goto	l10696
  7986  000984                     l10306:
  7987                           
  7988                           ; BSR set to: 0
  7989                           ;main.c: 1009: relay_protection_timer[ 0 ] =
  7990                           ;main.c: 1010: Read_b_eep(0x43 + 34) * 256 +
  7991                           ;main.c: 1011: Read_b_eep(0x43 + 35);
  7992  000984  6A09               	clrf	?_Read_b_eep+1,c
  7993  000986  0E66               	movlw	102
  7994  000988  6E08               	movwf	?_Read_b_eep,c
  7995  00098A  EC0B  F020         	call	_Read_b_eep	;wreg free
  7996  00098E  0100               	movlb	0	; () banked
  7997  000990  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  7998  000992  6A09               	clrf	?_Read_b_eep+1,c
  7999  000994  0E65               	movlw	101
  8000  000996  6E08               	movwf	?_Read_b_eep,c
  8001  000998  EC0B  F020         	call	_Read_b_eep	;wreg free
  8002  00099C  0100               	movlb	0	; () banked
  8003  00099E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8004  0009A0  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8005  0009A2  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8006  0009A4  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8007  0009A6  6F60               	movwf	_relay_protection_timer& (0+255),b
  8008  0009A8  0E00               	movlw	0
  8009  0009AA  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8010  0009AC  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  8011  0009AE  EF53  F009         	goto	l10696
  8012  0009B2                     l296:
  8013                           
  8014                           ; BSR set to: 0
  8015                           ;main.c: 1015: else if (0 == val) {
  8016  0009B2  6651               	tstfsz	vscp_writeAppReg@val,c
  8017  0009B4  EF53  F009         	goto	l10696
  8018                           
  8019                           ; BSR set to: 0
  8020                           ;main.c: 1016: LATBbits.LATB4 = 0;
  8021  0009B8  988A               	bcf	3978,4,c	;volatile
  8022                           
  8023                           ; BSR set to: 0
  8024                           ;main.c: 1017: rv = LATBbits.LATB4;
  8025  0009BA  0E00               	movlw	0
  8026  0009BC  B88A               	btfsc	3978,4,c	;volatile
  8027  0009BE  0E01               	movlw	1
  8028  0009C0  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8029  0009C2                     l10312:
  8030                           
  8031                           ; BSR set to: 0
  8032                           ;main.c: 1018: bOn = 0;
  8033  0009C2  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8034  0009C4  EF53  F009         	goto	l10696
  8035  0009C8                     l10314:
  8036                           
  8037                           ; BSR set to: 0
  8038                           ;main.c: 1025: bInfoEvent = 1;
  8039  0009C8  0E01               	movlw	1
  8040  0009CA  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8041                           
  8042                           ; BSR set to: 0
  8043                           ;main.c: 1027: if (1 == val) {
  8044  0009CC  0451               	decf	vscp_writeAppReg@val,w,c
  8045  0009CE  E11E               	bnz	l302
  8046                           
  8047                           ; BSR set to: 0
  8048                           ;main.c: 1029: LATBbits.LATB1 = 1;
  8049  0009D0  828A               	bsf	3978,1,c	;volatile
  8050                           
  8051                           ; BSR set to: 0
  8052                           ;main.c: 1030: rv = LATBbits.LATB1;
  8053  0009D2  0E00               	movlw	0
  8054  0009D4  B28A               	btfsc	3978,1,c	;volatile
  8055  0009D6  0E01               	movlw	1
  8056  0009D8  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8057                           
  8058                           ; BSR set to: 0
  8059                           ;main.c: 1031: bOn = 1;
  8060  0009DA  0E01               	movlw	1
  8061  0009DC  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;main.c: 1033: if (Read_b_eep(0x43 + 11) & 0x04) {
  8065  0009DE  6A09               	clrf	?_Read_b_eep+1,c
  8066  0009E0  0E4E               	movlw	78
  8067  0009E2  6E08               	movwf	?_Read_b_eep,c
  8068  0009E4  EC0B  F020         	call	_Read_b_eep	;wreg free
  8069  0009E8  0100               	movlb	0	; () banked
  8070  0009EA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8071  0009EC  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8072  0009EE  EF53  F009         	goto	l10696
  8073  0009F2                     l10326:
  8074                           
  8075                           ; BSR set to: 0
  8076                           ;main.c: 1034: relay_protection_timer[ 1 ] =
  8077                           ;main.c: 1035: Read_b_eep(0x43 + 36) * 256 +
  8078                           ;main.c: 1036: Read_b_eep(0x43 + 37);
  8079  0009F2  6A09               	clrf	?_Read_b_eep+1,c
  8080  0009F4  0E68               	movlw	104
  8081  0009F6  6E08               	movwf	?_Read_b_eep,c
  8082  0009F8  EC0B  F020         	call	_Read_b_eep	;wreg free
  8083  0009FC  0100               	movlb	0	; () banked
  8084  0009FE  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8085  000A00  6A09               	clrf	?_Read_b_eep+1,c
  8086  000A02  0E67               	movlw	103
  8087  000A04  6E08               	movwf	?_Read_b_eep,c
  8088  000A06  EC0B  F020         	call	_Read_b_eep	;wreg free
  8089  000A0A  D19F               	goto	L27
  8090  000A0C                     l302:
  8091                           
  8092                           ; BSR set to: 0
  8093                           ;main.c: 1040: else if (0 == val) {
  8094  000A0C  6651               	tstfsz	vscp_writeAppReg@val,c
  8095  000A0E  EF53  F009         	goto	l10696
  8096                           
  8097                           ; BSR set to: 0
  8098                           ;main.c: 1041: LATBbits.LATB1 = 0;
  8099  000A12  928A               	bcf	3978,1,c	;volatile
  8100                           
  8101                           ; BSR set to: 0
  8102                           ;main.c: 1042: rv = LATBbits.LATB1;
  8103  000A14  0E00               	movlw	0
  8104  000A16  B28A               	btfsc	3978,1,c	;volatile
  8105  000A18  0E01               	movlw	1
  8106  000A1A  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8107  000A1C  D7D2               	goto	l10312
  8108  000A1E                     l10334:
  8109                           
  8110                           ; BSR set to: 0
  8111                           ;main.c: 1050: bInfoEvent = 1;
  8112  000A1E  0E01               	movlw	1
  8113  000A20  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8114                           
  8115                           ; BSR set to: 0
  8116                           ;main.c: 1052: if (1 == val) {
  8117  000A22  0451               	decf	vscp_writeAppReg@val,w,c
  8118  000A24  E128               	bnz	l307
  8119                           
  8120                           ; BSR set to: 0
  8121                           ;main.c: 1054: LATBbits.LATB0 = 1;
  8122  000A26  808A               	bsf	3978,0,c	;volatile
  8123                           
  8124                           ; BSR set to: 0
  8125                           ;main.c: 1055: rv = LATBbits.LATB0;
  8126  000A28  0E00               	movlw	0
  8127  000A2A  B08A               	btfsc	3978,0,c	;volatile
  8128  000A2C  0E01               	movlw	1
  8129  000A2E  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8130                           
  8131                           ; BSR set to: 0
  8132                           ;main.c: 1056: bOn = 1;
  8133  000A30  0E01               	movlw	1
  8134  000A32  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8135                           
  8136                           ; BSR set to: 0
  8137                           ;main.c: 1058: if ( Read_b_eep(0x43 + 12) & 0x04) {
  8138  000A34  6A09               	clrf	?_Read_b_eep+1,c
  8139  000A36  0E4F               	movlw	79
  8140  000A38  6E08               	movwf	?_Read_b_eep,c
  8141  000A3A  EC0B  F020         	call	_Read_b_eep	;wreg free
  8142  000A3E  0100               	movlb	0	; () banked
  8143  000A40  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8144  000A42  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8145  000A44  EF53  F009         	goto	l10696
  8146  000A48                     l10346:
  8147                           
  8148                           ; BSR set to: 0
  8149                           ;main.c: 1059: relay_protection_timer[ 2 ] =
  8150                           ;main.c: 1060: Read_b_eep(0x43 + 38) * 256 +
  8151                           ;main.c: 1061: Read_b_eep(0x43 + 39);
  8152  000A48  6A09               	clrf	?_Read_b_eep+1,c
  8153  000A4A  0E6A               	movlw	106
  8154  000A4C  6E08               	movwf	?_Read_b_eep,c
  8155  000A4E  EC0B  F020         	call	_Read_b_eep	;wreg free
  8156  000A52  0100               	movlb	0	; () banked
  8157  000A54  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8158  000A56  6A09               	clrf	?_Read_b_eep+1,c
  8159  000A58  0E69               	movlw	105
  8160  000A5A  6E08               	movwf	?_Read_b_eep,c
  8161  000A5C  EC0B  F020         	call	_Read_b_eep	;wreg free
  8162  000A60  0100               	movlb	0	; () banked
  8163  000A62  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8164  000A64  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8165  000A66  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8166  000A68  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8167  000A6A  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  8168  000A6C  0E00               	movlw	0
  8169  000A6E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8170  000A70  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  8171  000A72  EF53  F009         	goto	l10696
  8172  000A76                     l307:
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;main.c: 1065: else if (0 == val) {
  8176  000A76  6651               	tstfsz	vscp_writeAppReg@val,c
  8177  000A78  EF53  F009         	goto	l10696
  8178                           
  8179                           ; BSR set to: 0
  8180                           ;main.c: 1066: LATBbits.LATB0 = 0;
  8181  000A7C  908A               	bcf	3978,0,c	;volatile
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;main.c: 1067: rv = LATBbits.LATB0;
  8185  000A7E  0E00               	movlw	0
  8186  000A80  B08A               	btfsc	3978,0,c	;volatile
  8187  000A82  0E01               	movlw	1
  8188  000A84  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8189  000A86  D79D               	goto	l10312
  8190  000A88                     l10354:
  8191                           
  8192                           ; BSR set to: 0
  8193                           ;main.c: 1076: bInfoEvent = 1;
  8194  000A88  0E01               	movlw	1
  8195  000A8A  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8196                           
  8197                           ; BSR set to: 0
  8198                           ;main.c: 1078: if (1 == val) {
  8199  000A8C  0451               	decf	vscp_writeAppReg@val,w,c
  8200  000A8E  E126               	bnz	l312
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;main.c: 1080: LATCbits.LATC7 = 1;
  8204  000A90  8E8B               	bsf	3979,7,c	;volatile
  8205                           
  8206                           ; BSR set to: 0
  8207                           ;main.c: 1081: rv = LATCbits.LATC7;
  8208  000A92  0E00               	movlw	0
  8209  000A94  BE8B               	btfsc	3979,7,c	;volatile
  8210  000A96  0E01               	movlw	1
  8211  000A98  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8212                           
  8213                           ; BSR set to: 0
  8214                           ;main.c: 1082: bOn = 1;
  8215  000A9A  0E01               	movlw	1
  8216  000A9C  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8217                           
  8218                           ; BSR set to: 0
  8219                           ;main.c: 1084: if (Read_b_eep(0x43 + 13) & 0x04) {
  8220  000A9E  6A09               	clrf	?_Read_b_eep+1,c
  8221  000AA0  0E50               	movlw	80
  8222  000AA2  6E08               	movwf	?_Read_b_eep,c
  8223  000AA4  EC0B  F020         	call	_Read_b_eep	;wreg free
  8224  000AA8  0100               	movlb	0	; () banked
  8225  000AAA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8226  000AAC  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8227  000AAE  D3FB               	goto	l10696
  8228  000AB0                     l10366:
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;main.c: 1085: relay_protection_timer[ 3 ] =
  8232                           ;main.c: 1086: Read_b_eep(0x43 + 40) * 256 +
  8233                           ;main.c: 1087: Read_b_eep(0x43 + 41);
  8234  000AB0  6A09               	clrf	?_Read_b_eep+1,c
  8235  000AB2  0E6C               	movlw	108
  8236  000AB4  6E08               	movwf	?_Read_b_eep,c
  8237  000AB6  EC0B  F020         	call	_Read_b_eep	;wreg free
  8238  000ABA  0100               	movlb	0	; () banked
  8239  000ABC  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8240  000ABE  6A09               	clrf	?_Read_b_eep+1,c
  8241  000AC0  0E6B               	movlw	107
  8242  000AC2  6E08               	movwf	?_Read_b_eep,c
  8243  000AC4  EC0B  F020         	call	_Read_b_eep	;wreg free
  8244  000AC8  0100               	movlb	0	; () banked
  8245  000ACA  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8246  000ACC  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8247  000ACE  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8248  000AD0  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8249  000AD2  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  8250  000AD4  0E00               	movlw	0
  8251  000AD6  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8252  000AD8  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  8253  000ADA  D3E5               	goto	l10696
  8254  000ADC                     l312:
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;main.c: 1091: else if (0 == val) {
  8258  000ADC  6651               	tstfsz	vscp_writeAppReg@val,c
  8259  000ADE  D3E3               	goto	l10696
  8260                           
  8261                           ; BSR set to: 0
  8262                           ;main.c: 1092: LATCbits.LATC7 = 0;
  8263  000AE0  9E8B               	bcf	3979,7,c	;volatile
  8264                           
  8265                           ; BSR set to: 0
  8266                           ;main.c: 1093: rv = LATCbits.LATC7;
  8267  000AE2  0E00               	movlw	0
  8268  000AE4  BE8B               	btfsc	3979,7,c	;volatile
  8269  000AE6  0E01               	movlw	1
  8270  000AE8  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8271  000AEA  D76B               	goto	l10312
  8272  000AEC                     l10374:
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;main.c: 1102: bInfoEvent = 1;
  8276  000AEC  0E01               	movlw	1
  8277  000AEE  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8278                           
  8279                           ; BSR set to: 0
  8280                           ;main.c: 1104: if (1 == val) {
  8281  000AF0  0451               	decf	vscp_writeAppReg@val,w,c
  8282  000AF2  E126               	bnz	l317
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;main.c: 1106: LATCbits.LATC6 = 1;
  8286  000AF4  8C8B               	bsf	3979,6,c	;volatile
  8287                           
  8288                           ; BSR set to: 0
  8289                           ;main.c: 1107: rv = LATCbits.LATC6;
  8290  000AF6  0E00               	movlw	0
  8291  000AF8  BC8B               	btfsc	3979,6,c	;volatile
  8292  000AFA  0E01               	movlw	1
  8293  000AFC  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8294                           
  8295                           ; BSR set to: 0
  8296                           ;main.c: 1108: bOn = 1;
  8297  000AFE  0E01               	movlw	1
  8298  000B00  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8299                           
  8300                           ; BSR set to: 0
  8301                           ;main.c: 1110: if (Read_b_eep(0x43 + 14) & 0x04) {
  8302  000B02  6A09               	clrf	?_Read_b_eep+1,c
  8303  000B04  0E51               	movlw	81
  8304  000B06  6E08               	movwf	?_Read_b_eep,c
  8305  000B08  EC0B  F020         	call	_Read_b_eep	;wreg free
  8306  000B0C  0100               	movlb	0	; () banked
  8307  000B0E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8308  000B10  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8309  000B12  D3C9               	goto	l10696
  8310  000B14                     l10386:
  8311                           
  8312                           ; BSR set to: 0
  8313                           ;main.c: 1111: relay_protection_timer[ 4 ] =
  8314                           ;main.c: 1112: Read_b_eep(0x43 + 42) * 256 +
  8315                           ;main.c: 1113: Read_b_eep(0x43 + 43);
  8316  000B14  6A09               	clrf	?_Read_b_eep+1,c
  8317  000B16  0E6E               	movlw	110
  8318  000B18  6E08               	movwf	?_Read_b_eep,c
  8319  000B1A  EC0B  F020         	call	_Read_b_eep	;wreg free
  8320  000B1E  0100               	movlb	0	; () banked
  8321  000B20  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8322  000B22  6A09               	clrf	?_Read_b_eep+1,c
  8323  000B24  0E6D               	movlw	109
  8324  000B26  6E08               	movwf	?_Read_b_eep,c
  8325  000B28  EC0B  F020         	call	_Read_b_eep	;wreg free
  8326  000B2C  0100               	movlb	0	; () banked
  8327  000B2E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8328  000B30  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8329  000B32  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8330  000B34  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8331  000B36  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  8332  000B38  0E00               	movlw	0
  8333  000B3A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8334  000B3C  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  8335  000B3E  D3B3               	goto	l10696
  8336  000B40                     l317:
  8337                           
  8338                           ; BSR set to: 0
  8339                           ;main.c: 1117: else if (0 == val) {
  8340  000B40  6651               	tstfsz	vscp_writeAppReg@val,c
  8341  000B42  D3B1               	goto	l10696
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;main.c: 1118: LATCbits.LATC6 = 0;
  8345  000B44  9C8B               	bcf	3979,6,c	;volatile
  8346                           
  8347                           ; BSR set to: 0
  8348                           ;main.c: 1119: rv = LATCbits.LATC6;
  8349  000B46  0E00               	movlw	0
  8350  000B48  BC8B               	btfsc	3979,6,c	;volatile
  8351  000B4A  0E01               	movlw	1
  8352  000B4C  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8353  000B4E  D739               	goto	l10312
  8354  000B50                     l10394:
  8355                           
  8356                           ; BSR set to: 0
  8357                           ;main.c: 1128: bInfoEvent = 1;
  8358  000B50  0E01               	movlw	1
  8359  000B52  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;main.c: 1130: if (1 == val) {
  8363  000B54  0451               	decf	vscp_writeAppReg@val,w,c
  8364  000B56  E126               	bnz	l322
  8365                           
  8366                           ; BSR set to: 0
  8367                           ;main.c: 1132: LATCbits.LATC5 = 1;
  8368  000B58  8A8B               	bsf	3979,5,c	;volatile
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;main.c: 1133: rv = LATCbits.LATC5;
  8372  000B5A  0E00               	movlw	0
  8373  000B5C  BA8B               	btfsc	3979,5,c	;volatile
  8374  000B5E  0E01               	movlw	1
  8375  000B60  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8376                           
  8377                           ; BSR set to: 0
  8378                           ;main.c: 1134: bOn = 1;
  8379  000B62  0E01               	movlw	1
  8380  000B64  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8381                           
  8382                           ; BSR set to: 0
  8383                           ;main.c: 1136: if (Read_b_eep(0x43 + 15) & 0x04) {
  8384  000B66  6A09               	clrf	?_Read_b_eep+1,c
  8385  000B68  0E52               	movlw	82
  8386  000B6A  6E08               	movwf	?_Read_b_eep,c
  8387  000B6C  EC0B  F020         	call	_Read_b_eep	;wreg free
  8388  000B70  0100               	movlb	0	; () banked
  8389  000B72  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8390  000B74  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8391  000B76  D397               	goto	l10696
  8392  000B78                     l10406:
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;main.c: 1137: relay_protection_timer[ 5 ] =
  8396                           ;main.c: 1138: Read_b_eep(0x43 + 44) * 256 +
  8397                           ;main.c: 1139: Read_b_eep(0x43 + 45);
  8398  000B78  6A09               	clrf	?_Read_b_eep+1,c
  8399  000B7A  0E70               	movlw	112
  8400  000B7C  6E08               	movwf	?_Read_b_eep,c
  8401  000B7E  EC0B  F020         	call	_Read_b_eep	;wreg free
  8402  000B82  0100               	movlb	0	; () banked
  8403  000B84  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8404  000B86  6A09               	clrf	?_Read_b_eep+1,c
  8405  000B88  0E6F               	movlw	111
  8406  000B8A  6E08               	movwf	?_Read_b_eep,c
  8407  000B8C  EC0B  F020         	call	_Read_b_eep	;wreg free
  8408  000B90  0100               	movlb	0	; () banked
  8409  000B92  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8410  000B94  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8411  000B96  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8412  000B98  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8413  000B9A  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  8414  000B9C  0E00               	movlw	0
  8415  000B9E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8416  000BA0  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  8417  000BA2  D381               	goto	l10696
  8418  000BA4                     l322:
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;main.c: 1143: else if (0 == val) {
  8422  000BA4  6651               	tstfsz	vscp_writeAppReg@val,c
  8423  000BA6  D37F               	goto	l10696
  8424                           
  8425                           ; BSR set to: 0
  8426                           ;main.c: 1144: LATCbits.LATC5 = 0;
  8427  000BA8  9A8B               	bcf	3979,5,c	;volatile
  8428                           
  8429                           ; BSR set to: 0
  8430                           ;main.c: 1145: rv = LATCbits.LATC5;
  8431  000BAA  0E00               	movlw	0
  8432  000BAC  BA8B               	btfsc	3979,5,c	;volatile
  8433  000BAE  0E01               	movlw	1
  8434  000BB0  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8435  000BB2  D707               	goto	l10312
  8436  000BB4                     l10414:
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;main.c: 1153: bInfoEvent = 1;
  8440  000BB4  0E01               	movlw	1
  8441  000BB6  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8442                           
  8443                           ; BSR set to: 0
  8444                           ;main.c: 1155: if (1 == val) {
  8445  000BB8  0451               	decf	vscp_writeAppReg@val,w,c
  8446  000BBA  E126               	bnz	l327
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;main.c: 1157: LATCbits.LATC4 = 1;
  8450  000BBC  888B               	bsf	3979,4,c	;volatile
  8451                           
  8452                           ; BSR set to: 0
  8453                           ;main.c: 1158: rv = LATCbits.LATC4;
  8454  000BBE  0E00               	movlw	0
  8455  000BC0  B88B               	btfsc	3979,4,c	;volatile
  8456  000BC2  0E01               	movlw	1
  8457  000BC4  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;main.c: 1159: bOn = 1;
  8461  000BC6  0E01               	movlw	1
  8462  000BC8  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8463                           
  8464                           ; BSR set to: 0
  8465                           ;main.c: 1161: if (Read_b_eep(0x43 + 16) & 0x04) {
  8466  000BCA  6A09               	clrf	?_Read_b_eep+1,c
  8467  000BCC  0E53               	movlw	83
  8468  000BCE  6E08               	movwf	?_Read_b_eep,c
  8469  000BD0  EC0B  F020         	call	_Read_b_eep	;wreg free
  8470  000BD4  0100               	movlb	0	; () banked
  8471  000BD6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8472  000BD8  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8473  000BDA  D365               	goto	l10696
  8474  000BDC                     l10426:
  8475                           
  8476                           ; BSR set to: 0
  8477                           ;main.c: 1162: relay_protection_timer[ 6 ] =
  8478                           ;main.c: 1163: Read_b_eep(0x43 + 46) * 256 +
  8479                           ;main.c: 1164: Read_b_eep(0x43 + 47);
  8480  000BDC  6A09               	clrf	?_Read_b_eep+1,c
  8481  000BDE  0E72               	movlw	114
  8482  000BE0  6E08               	movwf	?_Read_b_eep,c
  8483  000BE2  EC0B  F020         	call	_Read_b_eep	;wreg free
  8484  000BE6  0100               	movlb	0	; () banked
  8485  000BE8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8486  000BEA  6A09               	clrf	?_Read_b_eep+1,c
  8487  000BEC  0E71               	movlw	113
  8488  000BEE  6E08               	movwf	?_Read_b_eep,c
  8489  000BF0  EC0B  F020         	call	_Read_b_eep	;wreg free
  8490  000BF4  0100               	movlb	0	; () banked
  8491  000BF6  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8492  000BF8  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8493  000BFA  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8494  000BFC  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8495  000BFE  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  8496  000C00  0E00               	movlw	0
  8497  000C02  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8498  000C04  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  8499  000C06  D34F               	goto	l10696
  8500  000C08                     l327:
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;main.c: 1168: else if (0 == val) {
  8504  000C08  6651               	tstfsz	vscp_writeAppReg@val,c
  8505  000C0A  D34D               	goto	l10696
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;main.c: 1169: LATCbits.LATC4 = 0;
  8509  000C0C  988B               	bcf	3979,4,c	;volatile
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;main.c: 1170: rv = LATCbits.LATC4;
  8513  000C0E  0E00               	movlw	0
  8514  000C10  B88B               	btfsc	3979,4,c	;volatile
  8515  000C12  0E01               	movlw	1
  8516  000C14  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8517  000C16  D6D5               	goto	l10312
  8518  000C18                     l10436:
  8519                           
  8520                           ; BSR set to: 0
  8521  000C18  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8522                           
  8523                           ; Switch size 1, requested type "speed"
  8524                           ; Number of cases is 7, Range of values is 2 to 8
  8525                           ; switch strategies available:
  8526                           ; Name         Instructions Cycles
  8527                           ; simple_byte           22    12 (average)
  8528                           ;	Chosen strategy is simple_byte
  8529  000C1A  0A02               	xorlw	2	; case 2
  8530  000C1C  E101 D69D          	bz	l10294
  8531  000C20  0A01               	xorlw	1	; case 3
  8532  000C22  E101 D6D1          	bz	l10314
  8533  000C26  0A07               	xorlw	7	; case 4
  8534  000C28  E101 D6F9          	bz	l10334
  8535  000C2C  0A01               	xorlw	1	; case 5
  8536  000C2E  E101 D72B          	bz	l10354
  8537  000C32  0A03               	xorlw	3	; case 6
  8538  000C34  E101 D75A          	bz	l10374
  8539  000C38  0A01               	xorlw	1	; case 7
  8540  000C3A  E08A               	bz	l10394
  8541  000C3C  0A0F               	xorlw	15	; case 8
  8542  000C3E  E0BA               	bz	l10414
  8543                           
  8544                           ; BSR set to: 0
  8545                           ;main.c: 1176: }
  8546                           ;main.c: 1177: }
  8547  000C40  D332               	goto	l10696
  8548  000C42                     l10438:
  8549                           
  8550                           ; BSR set to: 0
  8551                           ;main.c: 1180: else if ( (reg >= 10 ) &&
  8552                           ;main.c: 1181: (reg <= 17) ) {
  8553  000C42  0E09               	movlw	9
  8554  000C44  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8555  000C46  D1BE               	goto	l10616
  8556                           
  8557                           ; BSR set to: 0
  8558  000C48  0E12               	movlw	18
  8559  000C4A  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8560  000C4C  D1BB               	goto	l10616
  8561  000C4E  D1A4               	goto	l10614
  8562  000C50                     l10444:
  8563                           
  8564                           ; BSR set to: 0
  8565                           ;main.c: 1187: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8566  000C50  EC3F  F020         	call	_Busy_eep	;wreg free
  8567  000C54  0E43               	movlw	67
  8568  000C56  0100               	movlb	0	; () banked
  8569  000C58  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8570  000C5A  6E08               	movwf	?_Write_b_eep,c
  8571  000C5C  6A09               	clrf	?_Write_b_eep+1,c
  8572  000C5E  0E00               	movlw	0
  8573  000C60  2209               	addwfc	?_Write_b_eep+1,f,c
  8574  000C62  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8575  000C66  EC24  F01E         	call	_Write_b_eep	;wreg free
  8576                           
  8577                           ;main.c: 1188: rv = Read_b_eep(0x43 + reg);
  8578  000C6A  0E43               	movlw	67
  8579  000C6C  0100               	movlb	0	; () banked
  8580  000C6E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8581  000C70  6E08               	movwf	?_Read_b_eep,c
  8582  000C72  6A09               	clrf	?_Read_b_eep+1,c
  8583  000C74  0E00               	movlw	0
  8584  000C76  2209               	addwfc	?_Read_b_eep+1,f,c
  8585  000C78  EC0B  F020         	call	_Read_b_eep	;wreg free
  8586  000C7C  0100               	movlb	0	; () banked
  8587  000C7E  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8588                           
  8589                           ; BSR set to: 0
  8590                           ;main.c: 1190: if ( val & 0x01 ) {
  8591  000C80  A051               	btfss	vscp_writeAppReg@val,0,c
  8592  000C82  D019               	goto	l10458
  8593                           
  8594                           ; BSR set to: 0
  8595                           ;main.c: 1192: LATBbits.LATB4 = 0;
  8596  000C84  988A               	bcf	3978,4,c	;volatile
  8597                           
  8598                           ;main.c: 1193: bOn = 0;
  8599  000C86  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8600                           
  8601                           ; BSR set to: 0
  8602                           ;main.c: 1195: relay_pulse_flags |= 0x01;
  8603  000C88  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;main.c: 1196: relay_pulse_timer[ 0 ] =
  8607                           ;main.c: 1197: Read_b_eep(0x43 + 18) * 256 +
  8608                           ;main.c: 1198: Read_b_eep(0x43 + 19);
  8609  000C8A  6A09               	clrf	?_Read_b_eep+1,c
  8610  000C8C  0E56               	movlw	86
  8611  000C8E  6E08               	movwf	?_Read_b_eep,c
  8612  000C90  EC0B  F020         	call	_Read_b_eep	;wreg free
  8613  000C94  0100               	movlb	0	; () banked
  8614  000C96  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8615  000C98  6A09               	clrf	?_Read_b_eep+1,c
  8616  000C9A  0E55               	movlw	85
  8617  000C9C  6E08               	movwf	?_Read_b_eep,c
  8618  000C9E  EC0B  F020         	call	_Read_b_eep	;wreg free
  8619  000CA2  0100               	movlb	0	; () banked
  8620  000CA4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8621  000CA6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8622  000CA8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8623  000CAA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8624  000CAC  6F70               	movwf	_relay_pulse_timer& (0+255),b
  8625  000CAE  0E00               	movlw	0
  8626  000CB0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8627  000CB2  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  8628                           
  8629                           ;main.c: 1199: }
  8630  000CB4  D003               	goto	l10464
  8631  000CB6                     l10458:
  8632                           
  8633                           ; BSR set to: 0
  8634                           ;main.c: 1200: else {
  8635                           ;main.c: 1201: relay_pulse_flags &= 0b11111110;
  8636  000CB6  918A               	bcf	_relay_pulse_flags& (0+255),0,b
  8637                           
  8638                           ; BSR set to: 0
  8639                           ;main.c: 1202: LATBbits.LATB4 = 0;
  8640  000CB8  988A               	bcf	3978,4,c	;volatile
  8641                           
  8642                           ; BSR set to: 0
  8643                           ;main.c: 1203: bOn = 0;
  8644  000CBA  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8645  000CBC                     l10464:
  8646                           
  8647                           ; BSR set to: 0
  8648                           ;main.c: 1204: }
  8649                           ;main.c: 1206: if ( val & 0x04 ) {
  8650  000CBC  B451               	btfsc	vscp_writeAppReg@val,2,c
  8651  000CBE  D662               	goto	l10306
  8652  000CC0  D2F2               	goto	l10696
  8653  000CC2                     l10468:
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;main.c: 1215: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8657  000CC2  EC3F  F020         	call	_Busy_eep	;wreg free
  8658  000CC6  0E43               	movlw	67
  8659  000CC8  0100               	movlb	0	; () banked
  8660  000CCA  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8661  000CCC  6E08               	movwf	?_Write_b_eep,c
  8662  000CCE  6A09               	clrf	?_Write_b_eep+1,c
  8663  000CD0  0E00               	movlw	0
  8664  000CD2  2209               	addwfc	?_Write_b_eep+1,f,c
  8665  000CD4  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8666  000CD8  EC24  F01E         	call	_Write_b_eep	;wreg free
  8667                           
  8668                           ;main.c: 1216: rv = Read_b_eep(0x43 + reg);
  8669  000CDC  0E43               	movlw	67
  8670  000CDE  0100               	movlb	0	; () banked
  8671  000CE0  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8672  000CE2  6E08               	movwf	?_Read_b_eep,c
  8673  000CE4  6A09               	clrf	?_Read_b_eep+1,c
  8674  000CE6  0E00               	movlw	0
  8675  000CE8  2209               	addwfc	?_Read_b_eep+1,f,c
  8676  000CEA  EC0B  F020         	call	_Read_b_eep	;wreg free
  8677  000CEE  0100               	movlb	0	; () banked
  8678  000CF0  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8679                           
  8680                           ; BSR set to: 0
  8681                           ;main.c: 1218: if ( val & 0x01 ) {
  8682  000CF2  A051               	btfss	vscp_writeAppReg@val,0,c
  8683  000CF4  D019               	goto	l10482
  8684                           
  8685                           ; BSR set to: 0
  8686                           ;main.c: 1220: LATBbits.LATB1 = 0;
  8687  000CF6  928A               	bcf	3978,1,c	;volatile
  8688                           
  8689                           ;main.c: 1221: bOn = 0;
  8690  000CF8  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8691                           
  8692                           ; BSR set to: 0
  8693                           ;main.c: 1223: relay_pulse_flags |= 0x02;
  8694  000CFA  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  8695                           
  8696                           ; BSR set to: 0
  8697                           ;main.c: 1224: relay_pulse_timer[ 1 ] =
  8698                           ;main.c: 1225: Read_b_eep(0x43 + 18) * 256 +
  8699                           ;main.c: 1226: Read_b_eep(0x43 + 19);
  8700  000CFC  6A09               	clrf	?_Read_b_eep+1,c
  8701  000CFE  0E56               	movlw	86
  8702  000D00  6E08               	movwf	?_Read_b_eep,c
  8703  000D02  EC0B  F020         	call	_Read_b_eep	;wreg free
  8704  000D06  0100               	movlb	0	; () banked
  8705  000D08  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8706  000D0A  6A09               	clrf	?_Read_b_eep+1,c
  8707  000D0C  0E55               	movlw	85
  8708  000D0E  6E08               	movwf	?_Read_b_eep,c
  8709  000D10  EC0B  F020         	call	_Read_b_eep	;wreg free
  8710  000D14  0100               	movlb	0	; () banked
  8711  000D16  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8712  000D18  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8713  000D1A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8714  000D1C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8715  000D1E  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  8716  000D20  0E00               	movlw	0
  8717  000D22  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8718  000D24  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  8719                           
  8720                           ;main.c: 1227: }
  8721  000D26  D003               	goto	l10488
  8722  000D28                     l10482:
  8723                           
  8724                           ; BSR set to: 0
  8725                           ;main.c: 1228: else {
  8726                           ;main.c: 1229: relay_pulse_flags &= 0b11111101;
  8727  000D28  938A               	bcf	_relay_pulse_flags& (0+255),1,b
  8728                           
  8729                           ; BSR set to: 0
  8730                           ;main.c: 1230: LATBbits.LATB1 = 0;
  8731  000D2A  928A               	bcf	3978,1,c	;volatile
  8732                           
  8733                           ; BSR set to: 0
  8734                           ;main.c: 1231: bOn = 0;
  8735  000D2C  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8736  000D2E                     l10488:
  8737                           
  8738                           ; BSR set to: 0
  8739                           ;main.c: 1232: }
  8740                           ;main.c: 1234: if ( val & 0x04 ) {
  8741  000D2E  A451               	btfss	vscp_writeAppReg@val,2,c
  8742  000D30  D2BA               	goto	l10696
  8743                           
  8744                           ; BSR set to: 0
  8745                           ;main.c: 1235: relay_protection_timer[ 1 ] =
  8746                           ;main.c: 1236: Read_b_eep(0x43 + 34) * 256 +
  8747                           ;main.c: 1237: Read_b_eep(0x43 + 35);
  8748  000D32  6A09               	clrf	?_Read_b_eep+1,c
  8749  000D34  0E66               	movlw	102
  8750  000D36  6E08               	movwf	?_Read_b_eep,c
  8751  000D38  EC0B  F020         	call	_Read_b_eep	;wreg free
  8752  000D3C  0100               	movlb	0	; () banked
  8753  000D3E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8754  000D40  6A09               	clrf	?_Read_b_eep+1,c
  8755  000D42  0E65               	movlw	101
  8756  000D44  6E08               	movwf	?_Read_b_eep,c
  8757  000D46  EC0B  F020         	call	_Read_b_eep	;wreg free
  8758  000D4A                     L27:
  8759  000D4A  0100               	movlb	0	; () banked
  8760  000D4C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8761  000D4E  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8762  000D50  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8763  000D52  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8764  000D54  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  8765  000D56  0E00               	movlw	0
  8766  000D58  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8767  000D5A  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  8768  000D5C  D2A4               	goto	l10696
  8769  000D5E                     l10492:
  8770                           
  8771                           ; BSR set to: 0
  8772                           ;main.c: 1243: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8773  000D5E  EC3F  F020         	call	_Busy_eep	;wreg free
  8774  000D62  0E43               	movlw	67
  8775  000D64  0100               	movlb	0	; () banked
  8776  000D66  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8777  000D68  6E08               	movwf	?_Write_b_eep,c
  8778  000D6A  6A09               	clrf	?_Write_b_eep+1,c
  8779  000D6C  0E00               	movlw	0
  8780  000D6E  2209               	addwfc	?_Write_b_eep+1,f,c
  8781  000D70  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8782  000D74  EC24  F01E         	call	_Write_b_eep	;wreg free
  8783                           
  8784                           ;main.c: 1244: rv = Read_b_eep(0x43 + reg);
  8785  000D78  0E43               	movlw	67
  8786  000D7A  0100               	movlb	0	; () banked
  8787  000D7C  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8788  000D7E  6E08               	movwf	?_Read_b_eep,c
  8789  000D80  6A09               	clrf	?_Read_b_eep+1,c
  8790  000D82  0E00               	movlw	0
  8791  000D84  2209               	addwfc	?_Read_b_eep+1,f,c
  8792  000D86  EC0B  F020         	call	_Read_b_eep	;wreg free
  8793  000D8A  0100               	movlb	0	; () banked
  8794  000D8C  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8795                           
  8796                           ; BSR set to: 0
  8797                           ;main.c: 1246: if ( val & 0x01 ) {
  8798  000D8E  A051               	btfss	vscp_writeAppReg@val,0,c
  8799  000D90  D019               	goto	l10506
  8800                           
  8801                           ; BSR set to: 0
  8802                           ;main.c: 1248: LATBbits.LATB0 = 0;
  8803  000D92  908A               	bcf	3978,0,c	;volatile
  8804                           
  8805                           ;main.c: 1249: bOn = 0;
  8806  000D94  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8807                           
  8808                           ; BSR set to: 0
  8809                           ;main.c: 1251: relay_pulse_flags |= 0x04;
  8810  000D96  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  8811                           
  8812                           ; BSR set to: 0
  8813                           ;main.c: 1252: relay_pulse_timer[ 2 ] =
  8814                           ;main.c: 1253: Read_b_eep(0x43 + 22) * 256 +
  8815                           ;main.c: 1254: Read_b_eep(0x43 + 23);
  8816  000D98  6A09               	clrf	?_Read_b_eep+1,c
  8817  000D9A  0E5A               	movlw	90
  8818  000D9C  6E08               	movwf	?_Read_b_eep,c
  8819  000D9E  EC0B  F020         	call	_Read_b_eep	;wreg free
  8820  000DA2  0100               	movlb	0	; () banked
  8821  000DA4  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8822  000DA6  6A09               	clrf	?_Read_b_eep+1,c
  8823  000DA8  0E59               	movlw	89
  8824  000DAA  6E08               	movwf	?_Read_b_eep,c
  8825  000DAC  EC0B  F020         	call	_Read_b_eep	;wreg free
  8826  000DB0  0100               	movlb	0	; () banked
  8827  000DB2  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8828  000DB4  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8829  000DB6  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8830  000DB8  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8831  000DBA  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  8832  000DBC  0E00               	movlw	0
  8833  000DBE  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8834  000DC0  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  8835                           
  8836                           ;main.c: 1255: }
  8837  000DC2  D003               	goto	l10512
  8838  000DC4                     l10506:
  8839                           
  8840                           ; BSR set to: 0
  8841                           ;main.c: 1256: else {
  8842                           ;main.c: 1257: relay_pulse_flags &= 0b11111011;
  8843  000DC4  958A               	bcf	_relay_pulse_flags& (0+255),2,b
  8844                           
  8845                           ; BSR set to: 0
  8846                           ;main.c: 1258: LATBbits.LATB0 = 0;
  8847  000DC6  908A               	bcf	3978,0,c	;volatile
  8848                           
  8849                           ; BSR set to: 0
  8850                           ;main.c: 1259: bOn = 0;
  8851  000DC8  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8852  000DCA                     l10512:
  8853                           
  8854                           ; BSR set to: 0
  8855                           ;main.c: 1260: }
  8856                           ;main.c: 1262: if ( val & 0x04 ) {
  8857  000DCA  B451               	btfsc	vscp_writeAppReg@val,2,c
  8858  000DCC  D63D               	goto	l10346
  8859  000DCE  D26B               	goto	l10696
  8860  000DD0                     l10516:
  8861                           
  8862                           ; BSR set to: 0
  8863                           ;main.c: 1271: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8864  000DD0  EC3F  F020         	call	_Busy_eep	;wreg free
  8865  000DD4  0E43               	movlw	67
  8866  000DD6  0100               	movlb	0	; () banked
  8867  000DD8  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8868  000DDA  6E08               	movwf	?_Write_b_eep,c
  8869  000DDC  6A09               	clrf	?_Write_b_eep+1,c
  8870  000DDE  0E00               	movlw	0
  8871  000DE0  2209               	addwfc	?_Write_b_eep+1,f,c
  8872  000DE2  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8873  000DE6  EC24  F01E         	call	_Write_b_eep	;wreg free
  8874                           
  8875                           ;main.c: 1272: rv = Read_b_eep(0x43 + reg);
  8876  000DEA  0E43               	movlw	67
  8877  000DEC  0100               	movlb	0	; () banked
  8878  000DEE  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8879  000DF0  6E08               	movwf	?_Read_b_eep,c
  8880  000DF2  6A09               	clrf	?_Read_b_eep+1,c
  8881  000DF4  0E00               	movlw	0
  8882  000DF6  2209               	addwfc	?_Read_b_eep+1,f,c
  8883  000DF8  EC0B  F020         	call	_Read_b_eep	;wreg free
  8884  000DFC  0100               	movlb	0	; () banked
  8885  000DFE  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8886                           
  8887                           ; BSR set to: 0
  8888                           ;main.c: 1274: if ( val & 0x01 ) {
  8889  000E00  A051               	btfss	vscp_writeAppReg@val,0,c
  8890  000E02  D019               	goto	l10530
  8891                           
  8892                           ; BSR set to: 0
  8893                           ;main.c: 1276: LATCbits.LATC7 = 0;
  8894  000E04  9E8B               	bcf	3979,7,c	;volatile
  8895                           
  8896                           ;main.c: 1277: bOn = 0;
  8897  000E06  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8898                           
  8899                           ; BSR set to: 0
  8900                           ;main.c: 1279: relay_pulse_flags |= 0x08;
  8901  000E08  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  8902                           
  8903                           ; BSR set to: 0
  8904                           ;main.c: 1280: relay_pulse_timer[ 3 ] =
  8905                           ;main.c: 1281: Read_b_eep(0x43 + 24) * 256 +
  8906                           ;main.c: 1282: Read_b_eep(0x43 + 25);
  8907  000E0A  6A09               	clrf	?_Read_b_eep+1,c
  8908  000E0C  0E5C               	movlw	92
  8909  000E0E  6E08               	movwf	?_Read_b_eep,c
  8910  000E10  EC0B  F020         	call	_Read_b_eep	;wreg free
  8911  000E14  0100               	movlb	0	; () banked
  8912  000E16  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8913  000E18  6A09               	clrf	?_Read_b_eep+1,c
  8914  000E1A  0E5B               	movlw	91
  8915  000E1C  6E08               	movwf	?_Read_b_eep,c
  8916  000E1E  EC0B  F020         	call	_Read_b_eep	;wreg free
  8917  000E22  0100               	movlb	0	; () banked
  8918  000E24  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8919  000E26  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8920  000E28  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8921  000E2A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8922  000E2C  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  8923  000E2E  0E00               	movlw	0
  8924  000E30  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8925  000E32  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  8926                           
  8927                           ;main.c: 1283: }
  8928  000E34  D003               	goto	l10536
  8929  000E36                     l10530:
  8930                           
  8931                           ; BSR set to: 0
  8932                           ;main.c: 1284: else {
  8933                           ;main.c: 1285: relay_pulse_flags &= 0b11110111;
  8934  000E36  978A               	bcf	_relay_pulse_flags& (0+255),3,b
  8935                           
  8936                           ; BSR set to: 0
  8937                           ;main.c: 1286: LATCbits.LATC7 = 0;
  8938  000E38  9E8B               	bcf	3979,7,c	;volatile
  8939                           
  8940                           ; BSR set to: 0
  8941                           ;main.c: 1287: bOn = 0;
  8942  000E3A  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8943  000E3C                     l10536:
  8944                           
  8945                           ; BSR set to: 0
  8946                           ;main.c: 1288: }
  8947                           ;main.c: 1290: if ( val & 0x04 ) {
  8948  000E3C  B451               	btfsc	vscp_writeAppReg@val,2,c
  8949  000E3E  D638               	goto	l10366
  8950  000E40  D232               	goto	l10696
  8951  000E42                     l10540:
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;main.c: 1299: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8955  000E42  EC3F  F020         	call	_Busy_eep	;wreg free
  8956  000E46  0E43               	movlw	67
  8957  000E48  0100               	movlb	0	; () banked
  8958  000E4A  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8959  000E4C  6E08               	movwf	?_Write_b_eep,c
  8960  000E4E  6A09               	clrf	?_Write_b_eep+1,c
  8961  000E50  0E00               	movlw	0
  8962  000E52  2209               	addwfc	?_Write_b_eep+1,f,c
  8963  000E54  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8964  000E58  EC24  F01E         	call	_Write_b_eep	;wreg free
  8965                           
  8966                           ;main.c: 1300: rv = Read_b_eep(0x43 + reg);
  8967  000E5C  0E43               	movlw	67
  8968  000E5E  0100               	movlb	0	; () banked
  8969  000E60  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8970  000E62  6E08               	movwf	?_Read_b_eep,c
  8971  000E64  6A09               	clrf	?_Read_b_eep+1,c
  8972  000E66  0E00               	movlw	0
  8973  000E68  2209               	addwfc	?_Read_b_eep+1,f,c
  8974  000E6A  EC0B  F020         	call	_Read_b_eep	;wreg free
  8975  000E6E  0100               	movlb	0	; () banked
  8976  000E70  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8977                           
  8978                           ; BSR set to: 0
  8979                           ;main.c: 1302: if ( val & 0x01 ) {
  8980  000E72  A051               	btfss	vscp_writeAppReg@val,0,c
  8981  000E74  D019               	goto	l10554
  8982                           
  8983                           ; BSR set to: 0
  8984                           ;main.c: 1304: LATCbits.LATC6 = 0;
  8985  000E76  9C8B               	bcf	3979,6,c	;volatile
  8986                           
  8987                           ;main.c: 1305: bOn = 0;
  8988  000E78  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8989                           
  8990                           ; BSR set to: 0
  8991                           ;main.c: 1307: relay_pulse_flags |= 0x10;
  8992  000E7A  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  8993                           
  8994                           ; BSR set to: 0
  8995                           ;main.c: 1308: relay_pulse_timer[ 4 ] =
  8996                           ;main.c: 1309: Read_b_eep(0x43 + 26) * 256 +
  8997                           ;main.c: 1310: Read_b_eep(0x43 + 27);
  8998  000E7C  6A09               	clrf	?_Read_b_eep+1,c
  8999  000E7E  0E5E               	movlw	94
  9000  000E80  6E08               	movwf	?_Read_b_eep,c
  9001  000E82  EC0B  F020         	call	_Read_b_eep	;wreg free
  9002  000E86  0100               	movlb	0	; () banked
  9003  000E88  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9004  000E8A  6A09               	clrf	?_Read_b_eep+1,c
  9005  000E8C  0E5D               	movlw	93
  9006  000E8E  6E08               	movwf	?_Read_b_eep,c
  9007  000E90  EC0B  F020         	call	_Read_b_eep	;wreg free
  9008  000E94  0100               	movlb	0	; () banked
  9009  000E96  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9010  000E98  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9011  000E9A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9012  000E9C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9013  000E9E  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9014  000EA0  0E00               	movlw	0
  9015  000EA2  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9016  000EA4  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9017                           
  9018                           ;main.c: 1311: }
  9019  000EA6  D003               	goto	l10560
  9020  000EA8                     l10554:
  9021                           
  9022                           ; BSR set to: 0
  9023                           ;main.c: 1312: else {
  9024                           ;main.c: 1313: relay_pulse_flags &= 0b11101111;
  9025  000EA8  998A               	bcf	_relay_pulse_flags& (0+255),4,b
  9026                           
  9027                           ; BSR set to: 0
  9028                           ;main.c: 1314: LATCbits.LATC6 = 0;
  9029  000EAA  9C8B               	bcf	3979,6,c	;volatile
  9030                           
  9031                           ; BSR set to: 0
  9032                           ;main.c: 1315: bOn = 0;
  9033  000EAC  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9034  000EAE                     l10560:
  9035                           
  9036                           ; BSR set to: 0
  9037                           ;main.c: 1316: }
  9038                           ;main.c: 1318: if ( val & 0x04 ) {
  9039  000EAE  B451               	btfsc	vscp_writeAppReg@val,2,c
  9040  000EB0  D631               	goto	l10386
  9041  000EB2  D1F9               	goto	l10696
  9042  000EB4                     l10564:
  9043                           
  9044                           ; BSR set to: 0
  9045                           ;main.c: 1327: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9046  000EB4  EC3F  F020         	call	_Busy_eep	;wreg free
  9047  000EB8  0E43               	movlw	67
  9048  000EBA  0100               	movlb	0	; () banked
  9049  000EBC  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9050  000EBE  6E08               	movwf	?_Write_b_eep,c
  9051  000EC0  6A09               	clrf	?_Write_b_eep+1,c
  9052  000EC2  0E00               	movlw	0
  9053  000EC4  2209               	addwfc	?_Write_b_eep+1,f,c
  9054  000EC6  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9055  000ECA  EC24  F01E         	call	_Write_b_eep	;wreg free
  9056                           
  9057                           ;main.c: 1328: rv = Read_b_eep(0x43 + reg);
  9058  000ECE  0E43               	movlw	67
  9059  000ED0  0100               	movlb	0	; () banked
  9060  000ED2  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9061  000ED4  6E08               	movwf	?_Read_b_eep,c
  9062  000ED6  6A09               	clrf	?_Read_b_eep+1,c
  9063  000ED8  0E00               	movlw	0
  9064  000EDA  2209               	addwfc	?_Read_b_eep+1,f,c
  9065  000EDC  EC0B  F020         	call	_Read_b_eep	;wreg free
  9066  000EE0  0100               	movlb	0	; () banked
  9067  000EE2  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9068                           
  9069                           ; BSR set to: 0
  9070                           ;main.c: 1330: if ( val & 0x01 ) {
  9071  000EE4  A051               	btfss	vscp_writeAppReg@val,0,c
  9072  000EE6  D019               	goto	l10578
  9073                           
  9074                           ; BSR set to: 0
  9075                           ;main.c: 1332: LATCbits.LATC5 = 0;
  9076  000EE8  9A8B               	bcf	3979,5,c	;volatile
  9077                           
  9078                           ;main.c: 1333: bOn = 0;
  9079  000EEA  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9080                           
  9081                           ; BSR set to: 0
  9082                           ;main.c: 1335: relay_pulse_flags |= 0x20;
  9083  000EEC  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  9084                           
  9085                           ; BSR set to: 0
  9086                           ;main.c: 1336: relay_pulse_timer[ 5 ] =
  9087                           ;main.c: 1337: Read_b_eep(0x43 + 28) * 256 +
  9088                           ;main.c: 1338: Read_b_eep(0x43 + 29);
  9089  000EEE  6A09               	clrf	?_Read_b_eep+1,c
  9090  000EF0  0E60               	movlw	96
  9091  000EF2  6E08               	movwf	?_Read_b_eep,c
  9092  000EF4  EC0B  F020         	call	_Read_b_eep	;wreg free
  9093  000EF8  0100               	movlb	0	; () banked
  9094  000EFA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9095  000EFC  6A09               	clrf	?_Read_b_eep+1,c
  9096  000EFE  0E5F               	movlw	95
  9097  000F00  6E08               	movwf	?_Read_b_eep,c
  9098  000F02  EC0B  F020         	call	_Read_b_eep	;wreg free
  9099  000F06  0100               	movlb	0	; () banked
  9100  000F08  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9101  000F0A  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9102  000F0C  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9103  000F0E  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9104  000F10  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9105  000F12  0E00               	movlw	0
  9106  000F14  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9107  000F16  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9108                           
  9109                           ;main.c: 1339: }
  9110  000F18  D003               	goto	l10584
  9111  000F1A                     l10578:
  9112                           
  9113                           ; BSR set to: 0
  9114                           ;main.c: 1340: else {
  9115                           ;main.c: 1341: relay_pulse_flags &= 0b11011111;
  9116  000F1A  9B8A               	bcf	_relay_pulse_flags& (0+255),5,b
  9117                           
  9118                           ; BSR set to: 0
  9119                           ;main.c: 1342: LATCbits.LATC5 = 0;
  9120  000F1C  9A8B               	bcf	3979,5,c	;volatile
  9121                           
  9122                           ; BSR set to: 0
  9123                           ;main.c: 1343: bOn = 0;
  9124  000F1E  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9125  000F20                     l10584:
  9126                           
  9127                           ; BSR set to: 0
  9128                           ;main.c: 1344: }
  9129                           ;main.c: 1346: if ( val & 0x04 ) {
  9130  000F20  B451               	btfsc	vscp_writeAppReg@val,2,c
  9131  000F22  D62A               	goto	l10406
  9132  000F24  D1C0               	goto	l10696
  9133  000F26                     l10588:
  9134                           
  9135                           ; BSR set to: 0
  9136                           ;main.c: 1355: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9137  000F26  EC3F  F020         	call	_Busy_eep	;wreg free
  9138  000F2A  0E43               	movlw	67
  9139  000F2C  0100               	movlb	0	; () banked
  9140  000F2E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9141  000F30  6E08               	movwf	?_Write_b_eep,c
  9142  000F32  6A09               	clrf	?_Write_b_eep+1,c
  9143  000F34  0E00               	movlw	0
  9144  000F36  2209               	addwfc	?_Write_b_eep+1,f,c
  9145  000F38  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9146  000F3C  EC24  F01E         	call	_Write_b_eep	;wreg free
  9147                           
  9148                           ;main.c: 1356: rv = Read_b_eep(0x43 + reg);
  9149  000F40  0E43               	movlw	67
  9150  000F42  0100               	movlb	0	; () banked
  9151  000F44  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9152  000F46  6E08               	movwf	?_Read_b_eep,c
  9153  000F48  6A09               	clrf	?_Read_b_eep+1,c
  9154  000F4A  0E00               	movlw	0
  9155  000F4C  2209               	addwfc	?_Read_b_eep+1,f,c
  9156  000F4E  EC0B  F020         	call	_Read_b_eep	;wreg free
  9157  000F52  0100               	movlb	0	; () banked
  9158  000F54  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9159                           
  9160                           ; BSR set to: 0
  9161                           ;main.c: 1358: if ( val & 0x01 ) {
  9162  000F56  A051               	btfss	vscp_writeAppReg@val,0,c
  9163  000F58  D019               	goto	l10602
  9164                           
  9165                           ; BSR set to: 0
  9166                           ;main.c: 1360: LATCbits.LATC4 = 0;
  9167  000F5A  988B               	bcf	3979,4,c	;volatile
  9168                           
  9169                           ;main.c: 1361: bOn = 0;
  9170  000F5C  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;main.c: 1363: relay_pulse_flags |= 0x40;
  9174  000F5E  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  9175                           
  9176                           ; BSR set to: 0
  9177                           ;main.c: 1364: relay_pulse_timer[ 6 ] =
  9178                           ;main.c: 1365: Read_b_eep(0x43 + 30) * 256 +
  9179                           ;main.c: 1366: Read_b_eep(0x43 + 31);
  9180  000F60  6A09               	clrf	?_Read_b_eep+1,c
  9181  000F62  0E62               	movlw	98
  9182  000F64  6E08               	movwf	?_Read_b_eep,c
  9183  000F66  EC0B  F020         	call	_Read_b_eep	;wreg free
  9184  000F6A  0100               	movlb	0	; () banked
  9185  000F6C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9186  000F6E  6A09               	clrf	?_Read_b_eep+1,c
  9187  000F70  0E61               	movlw	97
  9188  000F72  6E08               	movwf	?_Read_b_eep,c
  9189  000F74  EC0B  F020         	call	_Read_b_eep	;wreg free
  9190  000F78  0100               	movlb	0	; () banked
  9191  000F7A  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9192  000F7C  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9193  000F7E  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9194  000F80  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9195  000F82  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9196  000F84  0E00               	movlw	0
  9197  000F86  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9198  000F88  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9199                           
  9200                           ;main.c: 1367: }
  9201  000F8A  D003               	goto	l10608
  9202  000F8C                     l10602:
  9203                           
  9204                           ; BSR set to: 0
  9205                           ;main.c: 1368: else {
  9206                           ;main.c: 1369: relay_pulse_flags &= 0b10111111;
  9207  000F8C  9D8A               	bcf	_relay_pulse_flags& (0+255),6,b
  9208                           
  9209                           ; BSR set to: 0
  9210                           ;main.c: 1370: LATCbits.LATC7 = 0;
  9211  000F8E  9E8B               	bcf	3979,7,c	;volatile
  9212                           
  9213                           ; BSR set to: 0
  9214                           ;main.c: 1371: bOn = 0;
  9215  000F90  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9216  000F92                     l10608:
  9217                           
  9218                           ; BSR set to: 0
  9219                           ;main.c: 1372: }
  9220                           ;main.c: 1374: if ( val & 0x04 ) {
  9221  000F92  B451               	btfsc	vscp_writeAppReg@val,2,c
  9222  000F94  D623               	goto	l10426
  9223  000F96  D187               	goto	l10696
  9224  000F98                     l10614:
  9225                           
  9226                           ; BSR set to: 0
  9227  000F98  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9228                           
  9229                           ; Switch size 1, requested type "speed"
  9230                           ; Number of cases is 7, Range of values is 10 to 16
  9231                           ; switch strategies available:
  9232                           ; Name         Instructions Cycles
  9233                           ; simple_byte           22    12 (average)
  9234                           ;	Chosen strategy is simple_byte
  9235  000F9A  0A0A               	xorlw	10	; case 10
  9236  000F9C  E101 D658          	bz	l10444
  9237  000FA0  0A01               	xorlw	1	; case 11
  9238  000FA2  E101 D68E          	bz	l10468
  9239  000FA6  0A07               	xorlw	7	; case 12
  9240  000FA8  E101 D6D9          	bz	l10492
  9241  000FAC  0A01               	xorlw	1	; case 13
  9242  000FAE  E101 D70F          	bz	l10516
  9243  000FB2  0A03               	xorlw	3	; case 14
  9244  000FB4  E101 D745          	bz	l10540
  9245  000FB8  0A01               	xorlw	1	; case 15
  9246  000FBA  E101 D77B          	bz	l10564
  9247  000FBE  0A1F               	xorlw	31	; case 16
  9248  000FC0  E0B2               	bz	l10588
  9249  000FC2  D171               	goto	l10696
  9250  000FC4                     l10616:
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;main.c: 1385: else if ( (reg >= 18 ) &&
  9254                           ;main.c: 1386: (reg <= 33 ) ) {
  9255  000FC4  0E11               	movlw	17
  9256  000FC6  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9257  000FC8  D0E1               	goto	l10646
  9258                           
  9259                           ; BSR set to: 0
  9260  000FCA  0E22               	movlw	34
  9261  000FCC  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9262  000FCE  D0DE               	goto	l10646
  9263                           
  9264                           ; BSR set to: 0
  9265                           ;main.c: 1389: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9266  000FD0  EC3F  F020         	call	_Busy_eep	;wreg free
  9267  000FD4  0E43               	movlw	67
  9268  000FD6  0100               	movlb	0	; () banked
  9269  000FD8  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9270  000FDA  6E08               	movwf	?_Write_b_eep,c
  9271  000FDC  6A09               	clrf	?_Write_b_eep+1,c
  9272  000FDE  0E00               	movlw	0
  9273  000FE0  2209               	addwfc	?_Write_b_eep+1,f,c
  9274  000FE2  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9275  000FE6  EC24  F01E         	call	_Write_b_eep	;wreg free
  9276                           
  9277                           ;main.c: 1390: rv = Read_b_eep(0x43 + reg);
  9278  000FEA  0E43               	movlw	67
  9279  000FEC  0100               	movlb	0	; () banked
  9280  000FEE  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9281  000FF0  6E08               	movwf	?_Read_b_eep,c
  9282  000FF2  6A09               	clrf	?_Read_b_eep+1,c
  9283  000FF4  0E00               	movlw	0
  9284  000FF6  2209               	addwfc	?_Read_b_eep+1,f,c
  9285  000FF8  EC0B  F020         	call	_Read_b_eep	;wreg free
  9286  000FFC  0100               	movlb	0	; () banked
  9287  000FFE  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9288                           
  9289                           ;main.c: 1394: switch ( reg ) {
  9290  001000  D0B0               	goto	l10644
  9291  001002                     l10626:
  9292                           
  9293                           ; BSR set to: 0
  9294                           ;main.c: 1397: relay_pulse_timer[ 0 ] =
  9295                           ;main.c: 1398: Read_b_eep(0x43 + 18) * 256 +
  9296                           ;main.c: 1399: Read_b_eep(0x43 + 19);
  9297  001002  6A09               	clrf	?_Read_b_eep+1,c
  9298  001004  0E56               	movlw	86
  9299  001006  6E08               	movwf	?_Read_b_eep,c
  9300  001008  EC0B  F020         	call	_Read_b_eep	;wreg free
  9301  00100C  0100               	movlb	0	; () banked
  9302  00100E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9303  001010  6A09               	clrf	?_Read_b_eep+1,c
  9304  001012  0E55               	movlw	85
  9305  001014  6E08               	movwf	?_Read_b_eep,c
  9306  001016  EC0B  F020         	call	_Read_b_eep	;wreg free
  9307  00101A  0100               	movlb	0	; () banked
  9308  00101C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9309  00101E  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9310  001020  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9311  001022  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9312  001024  6F70               	movwf	_relay_pulse_timer& (0+255),b
  9313  001026  0E00               	movlw	0
  9314  001028  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9315  00102A  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  9316                           
  9317                           ;main.c: 1400: break;
  9318  00102C  D13C               	goto	l10696
  9319  00102E                     l10628:
  9320                           
  9321                           ; BSR set to: 0
  9322                           ;main.c: 1403: relay_pulse_timer[ 1 ] =
  9323                           ;main.c: 1404: Read_b_eep(0x43 + 20) * 256 +
  9324                           ;main.c: 1405: Read_b_eep(0x43 + 21);
  9325  00102E  6A09               	clrf	?_Read_b_eep+1,c
  9326  001030  0E58               	movlw	88
  9327  001032  6E08               	movwf	?_Read_b_eep,c
  9328  001034  EC0B  F020         	call	_Read_b_eep	;wreg free
  9329  001038  0100               	movlb	0	; () banked
  9330  00103A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9331  00103C  6A09               	clrf	?_Read_b_eep+1,c
  9332  00103E  0E57               	movlw	87
  9333  001040  6E08               	movwf	?_Read_b_eep,c
  9334  001042  EC0B  F020         	call	_Read_b_eep	;wreg free
  9335  001046  0100               	movlb	0	; () banked
  9336  001048  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9337  00104A  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9338  00104C  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9339  00104E  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9340  001050  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  9341  001052  0E00               	movlw	0
  9342  001054  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9343  001056  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  9344                           
  9345                           ;main.c: 1406: break;
  9346  001058  D126               	goto	l10696
  9347  00105A                     l10630:
  9348                           
  9349                           ; BSR set to: 0
  9350                           ;main.c: 1409: relay_pulse_timer[ 2 ] =
  9351                           ;main.c: 1410: Read_b_eep(0x43 + 22) * 256 +
  9352                           ;main.c: 1411: Read_b_eep(0x43 + 23);
  9353  00105A  6A09               	clrf	?_Read_b_eep+1,c
  9354  00105C  0E5A               	movlw	90
  9355  00105E  6E08               	movwf	?_Read_b_eep,c
  9356  001060  EC0B  F020         	call	_Read_b_eep	;wreg free
  9357  001064  0100               	movlb	0	; () banked
  9358  001066  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9359  001068  6A09               	clrf	?_Read_b_eep+1,c
  9360  00106A  0E59               	movlw	89
  9361  00106C  6E08               	movwf	?_Read_b_eep,c
  9362  00106E  EC0B  F020         	call	_Read_b_eep	;wreg free
  9363  001072  0100               	movlb	0	; () banked
  9364  001074  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9365  001076  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9366  001078  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9367  00107A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9368  00107C  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  9369  00107E  0E00               	movlw	0
  9370  001080  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9371  001082  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  9372                           
  9373                           ;main.c: 1412: break;
  9374  001084  D110               	goto	l10696
  9375  001086                     l10632:
  9376                           
  9377                           ; BSR set to: 0
  9378                           ;main.c: 1415: relay_pulse_timer[ 3 ] =
  9379                           ;main.c: 1416: Read_b_eep(0x43 + 24) * 256 +
  9380                           ;main.c: 1417: Read_b_eep(0x43 + 25);
  9381  001086  6A09               	clrf	?_Read_b_eep+1,c
  9382  001088  0E5C               	movlw	92
  9383  00108A  6E08               	movwf	?_Read_b_eep,c
  9384  00108C  EC0B  F020         	call	_Read_b_eep	;wreg free
  9385  001090  0100               	movlb	0	; () banked
  9386  001092  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9387  001094  6A09               	clrf	?_Read_b_eep+1,c
  9388  001096  0E5B               	movlw	91
  9389  001098  6E08               	movwf	?_Read_b_eep,c
  9390  00109A  EC0B  F020         	call	_Read_b_eep	;wreg free
  9391  00109E  0100               	movlb	0	; () banked
  9392  0010A0  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9393  0010A2  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9394  0010A4  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9395  0010A6  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9396  0010A8  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  9397  0010AA  0E00               	movlw	0
  9398  0010AC  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9399  0010AE  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  9400                           
  9401                           ;main.c: 1418: break;
  9402  0010B0  D0FA               	goto	l10696
  9403  0010B2                     l10634:
  9404                           
  9405                           ; BSR set to: 0
  9406                           ;main.c: 1421: relay_pulse_timer[ 4 ] =
  9407                           ;main.c: 1422: Read_b_eep(0x43 + 26) * 256 +
  9408                           ;main.c: 1423: Read_b_eep(0x43 + 27);
  9409  0010B2  6A09               	clrf	?_Read_b_eep+1,c
  9410  0010B4  0E5E               	movlw	94
  9411  0010B6  6E08               	movwf	?_Read_b_eep,c
  9412  0010B8  EC0B  F020         	call	_Read_b_eep	;wreg free
  9413  0010BC  0100               	movlb	0	; () banked
  9414  0010BE  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9415  0010C0  6A09               	clrf	?_Read_b_eep+1,c
  9416  0010C2  0E5D               	movlw	93
  9417  0010C4  6E08               	movwf	?_Read_b_eep,c
  9418  0010C6  EC0B  F020         	call	_Read_b_eep	;wreg free
  9419  0010CA  0100               	movlb	0	; () banked
  9420  0010CC  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9421  0010CE  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9422  0010D0  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9423  0010D2  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9424  0010D4  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9425  0010D6  0E00               	movlw	0
  9426  0010D8  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9427  0010DA  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9428                           
  9429                           ;main.c: 1424: break;
  9430  0010DC  D0E4               	goto	l10696
  9431  0010DE                     l10636:
  9432                           
  9433                           ; BSR set to: 0
  9434                           ;main.c: 1427: relay_pulse_timer[ 5 ] =
  9435                           ;main.c: 1428: Read_b_eep(0x43 + 28) * 256 +
  9436                           ;main.c: 1429: Read_b_eep(0x43 + 29);
  9437  0010DE  6A09               	clrf	?_Read_b_eep+1,c
  9438  0010E0  0E60               	movlw	96
  9439  0010E2  6E08               	movwf	?_Read_b_eep,c
  9440  0010E4  EC0B  F020         	call	_Read_b_eep	;wreg free
  9441  0010E8  0100               	movlb	0	; () banked
  9442  0010EA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9443  0010EC  6A09               	clrf	?_Read_b_eep+1,c
  9444  0010EE  0E5F               	movlw	95
  9445  0010F0  6E08               	movwf	?_Read_b_eep,c
  9446  0010F2  EC0B  F020         	call	_Read_b_eep	;wreg free
  9447  0010F6  0100               	movlb	0	; () banked
  9448  0010F8  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9449  0010FA  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9450  0010FC  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9451  0010FE  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9452  001100  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9453  001102  0E00               	movlw	0
  9454  001104  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9455  001106  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9456                           
  9457                           ;main.c: 1430: break;
  9458  001108  D0CE               	goto	l10696
  9459  00110A                     l10638:
  9460                           
  9461                           ; BSR set to: 0
  9462                           ;main.c: 1433: relay_pulse_timer[ 6 ] =
  9463                           ;main.c: 1434: Read_b_eep(0x43 + 30) * 256 +
  9464                           ;main.c: 1435: Read_b_eep(0x43 + 31);
  9465  00110A  6A09               	clrf	?_Read_b_eep+1,c
  9466  00110C  0E62               	movlw	98
  9467  00110E  6E08               	movwf	?_Read_b_eep,c
  9468  001110  EC0B  F020         	call	_Read_b_eep	;wreg free
  9469  001114  0100               	movlb	0	; () banked
  9470  001116  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9471  001118  6A09               	clrf	?_Read_b_eep+1,c
  9472  00111A  0E61               	movlw	97
  9473  00111C  6E08               	movwf	?_Read_b_eep,c
  9474  00111E  EC0B  F020         	call	_Read_b_eep	;wreg free
  9475  001122  0100               	movlb	0	; () banked
  9476  001124  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9477  001126  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9478  001128  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9479  00112A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9480  00112C  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9481  00112E  0E00               	movlw	0
  9482  001130  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9483  001132  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9484                           
  9485                           ;main.c: 1436: break;
  9486  001134  D0B8               	goto	l10696
  9487  001136                     l10640:
  9488                           
  9489                           ; BSR set to: 0
  9490                           ;main.c: 1439: relay_pulse_timer[ 7 ] =
  9491                           ;main.c: 1440: Read_b_eep(0x43 + 32) * 256 +
  9492                           ;main.c: 1441: Read_b_eep(0x43 + 33);
  9493  001136  6A09               	clrf	?_Read_b_eep+1,c
  9494  001138  0E64               	movlw	100
  9495  00113A  6E08               	movwf	?_Read_b_eep,c
  9496  00113C  EC0B  F020         	call	_Read_b_eep	;wreg free
  9497  001140  0100               	movlb	0	; () banked
  9498  001142  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9499  001144  6A09               	clrf	?_Read_b_eep+1,c
  9500  001146  0E63               	movlw	99
  9501  001148  6E08               	movwf	?_Read_b_eep,c
  9502  00114A  EC0B  F020         	call	_Read_b_eep	;wreg free
  9503  00114E  0100               	movlb	0	; () banked
  9504  001150  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9505  001152  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9506  001154  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9507  001156  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9508  001158  6F7E               	movwf	(_relay_pulse_timer+14)& (0+255),b
  9509  00115A  0E00               	movlw	0
  9510  00115C  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9511  00115E  6F7F               	movwf	(_relay_pulse_timer+15)& (0+255),b
  9512                           
  9513                           ;main.c: 1442: break;
  9514  001160  D0A2               	goto	l10696
  9515  001162                     l10644:
  9516                           
  9517                           ; BSR set to: 0
  9518  001162  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9519                           
  9520                           ; Switch size 1, requested type "speed"
  9521                           ; Number of cases is 8, Range of values is 19 to 33
  9522                           ; switch strategies available:
  9523                           ; Name         Instructions Cycles
  9524                           ; simple_byte           25    13 (average)
  9525                           ;	Chosen strategy is simple_byte
  9526  001164  0A13               	xorlw	19	; case 19
  9527  001166  E101 D74C          	bz	l10626
  9528  00116A  0A06               	xorlw	6	; case 21
  9529  00116C  E101 D75F          	bz	l10628
  9530  001170  0A02               	xorlw	2	; case 23
  9531  001172  E101 D772          	bz	l10630
  9532  001176  0A0E               	xorlw	14	; case 25
  9533  001178  E086               	bz	l10632
  9534  00117A  0A02               	xorlw	2	; case 27
  9535  00117C  E09A               	bz	l10634
  9536  00117E  0A06               	xorlw	6	; case 29
  9537  001180  E0AE               	bz	l10636
  9538  001182  0A02               	xorlw	2	; case 31
  9539  001184  E0C2               	bz	l10638
  9540  001186  0A3E               	xorlw	62	; case 33
  9541  001188  E0D6               	bz	l10640
  9542  00118A  D08D               	goto	l10696
  9543  00118C                     l10646:
  9544                           
  9545                           ; BSR set to: 0
  9546                           ;main.c: 1450: else if ( ( reg >= 34 ) &&
  9547                           ;main.c: 1451: ( reg <= 49 ) ) {
  9548  00118C  0E21               	movlw	33
  9549  00118E  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9550  001190  D04D               	goto	l10676
  9551                           
  9552                           ; BSR set to: 0
  9553  001192  0E32               	movlw	50
  9554  001194  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9555  001196  D04A               	goto	l10676
  9556                           
  9557                           ; BSR set to: 0
  9558                           ;main.c: 1454: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9559  001198  EC3F  F020         	call	_Busy_eep	;wreg free
  9560  00119C  0E43               	movlw	67
  9561  00119E  0100               	movlb	0	; () banked
  9562  0011A0  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9563  0011A2  6E08               	movwf	?_Write_b_eep,c
  9564  0011A4  6A09               	clrf	?_Write_b_eep+1,c
  9565  0011A6  0E00               	movlw	0
  9566  0011A8  2209               	addwfc	?_Write_b_eep+1,f,c
  9567  0011AA  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9568  0011AE  EC24  F01E         	call	_Write_b_eep	;wreg free
  9569                           
  9570                           ;main.c: 1455: rv = Read_b_eep(0x43 + reg);
  9571  0011B2  0E43               	movlw	67
  9572  0011B4  0100               	movlb	0	; () banked
  9573  0011B6  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9574  0011B8  6E08               	movwf	?_Read_b_eep,c
  9575  0011BA  6A09               	clrf	?_Read_b_eep+1,c
  9576  0011BC  0E00               	movlw	0
  9577  0011BE  2209               	addwfc	?_Read_b_eep+1,f,c
  9578  0011C0  EC0B  F020         	call	_Read_b_eep	;wreg free
  9579  0011C4  0100               	movlb	0	; () banked
  9580  0011C6  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9581                           
  9582                           ;main.c: 1457: switch ( reg ) {
  9583  0011C8  D016               	goto	l10674
  9584  0011CA                     l10670:
  9585                           
  9586                           ; BSR set to: 0
  9587                           ;main.c: 1502: relay_protection_timer[ 7 ] =
  9588                           ;main.c: 1503: Read_b_eep(0x43 + 48) * 256 +
  9589                           ;main.c: 1504: Read_b_eep(0x43 + 49);
  9590  0011CA  6A09               	clrf	?_Read_b_eep+1,c
  9591  0011CC  0E74               	movlw	116
  9592  0011CE  6E08               	movwf	?_Read_b_eep,c
  9593  0011D0  EC0B  F020         	call	_Read_b_eep	;wreg free
  9594  0011D4  0100               	movlb	0	; () banked
  9595  0011D6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9596  0011D8  6A09               	clrf	?_Read_b_eep+1,c
  9597  0011DA  0E73               	movlw	115
  9598  0011DC  6E08               	movwf	?_Read_b_eep,c
  9599  0011DE  EC0B  F020         	call	_Read_b_eep	;wreg free
  9600  0011E2  0100               	movlb	0	; () banked
  9601  0011E4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9602  0011E6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9603  0011E8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9604  0011EA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9605  0011EC  6F6E               	movwf	(_relay_protection_timer+14)& (0+255),b
  9606  0011EE  0E00               	movlw	0
  9607  0011F0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9608  0011F2  6F6F               	movwf	(_relay_protection_timer+15)& (0+255),b
  9609                           
  9610                           ;main.c: 1505: break;
  9611  0011F4  D058               	goto	l10696
  9612  0011F6                     l10674:
  9613                           
  9614                           ; BSR set to: 0
  9615  0011F6  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9616                           
  9617                           ; Switch size 1, requested type "speed"
  9618                           ; Number of cases is 8, Range of values is 35 to 49
  9619                           ; switch strategies available:
  9620                           ; Name         Instructions Cycles
  9621                           ; simple_byte           25    13 (average)
  9622                           ;	Chosen strategy is simple_byte
  9623  0011F8  0A23               	xorlw	35	; case 35
  9624  0011FA  E102 EFC2  F004    	bz	l10306
  9625  001200  0A06               	xorlw	6	; case 37
  9626  001202  E102 EFF9  F004    	bz	l10326
  9627  001208  0A02               	xorlw	2	; case 39
  9628  00120A  E101 D41D          	bz	l10346
  9629  00120E  0A0E               	xorlw	14	; case 41
  9630  001210  E101 D44E          	bz	l10366
  9631  001214  0A02               	xorlw	2	; case 43
  9632  001216  E101 D47D          	bz	l10386
  9633  00121A  0A06               	xorlw	6	; case 45
  9634  00121C  E101 D4AC          	bz	l10406
  9635  001220  0A02               	xorlw	2	; case 47
  9636  001222  E101 D4DB          	bz	l10426
  9637  001226  0A1E               	xorlw	30	; case 49
  9638  001228  E0D0               	bz	l10670
  9639  00122A  D03D               	goto	l10696
  9640  00122C                     l10676:
  9641                           
  9642                           ; BSR set to: 0
  9643                           ;main.c: 1513: else if ( (reg >= 50 ) && (reg <= 65) ) {
  9644  00122C  0E31               	movlw	49
  9645  00122E  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9646  001230  D01A               	goto	l10686
  9647                           
  9648                           ; BSR set to: 0
  9649  001232  0E42               	movlw	66
  9650  001234  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9651  001236  D017               	goto	l10686
  9652                           
  9653                           ; BSR set to: 0
  9654                           ;main.c: 1516: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9655  001238  EC3F  F020         	call	_Busy_eep	;wreg free
  9656  00123C  0E43               	movlw	67
  9657  00123E  0100               	movlb	0	; () banked
  9658  001240  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9659  001242  6E08               	movwf	?_Write_b_eep,c
  9660  001244  6A09               	clrf	?_Write_b_eep+1,c
  9661  001246  0E00               	movlw	0
  9662  001248  2209               	addwfc	?_Write_b_eep+1,f,c
  9663  00124A  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9664  00124E  EC24  F01E         	call	_Write_b_eep	;wreg free
  9665                           
  9666                           ;main.c: 1517: rv = Read_b_eep(0x43 + reg);
  9667  001252  0E43               	movlw	67
  9668  001254  0100               	movlb	0	; () banked
  9669  001256  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9670  001258  6E08               	movwf	?_Read_b_eep,c
  9671  00125A  6A09               	clrf	?_Read_b_eep+1,c
  9672  00125C  0E00               	movlw	0
  9673  00125E  2209               	addwfc	?_Read_b_eep+1,f,c
  9674  001260  EC0B  F020         	call	_Read_b_eep	;wreg free
  9675  001264  D01E               	goto	L26
  9676  001266                     l10686:
  9677                           
  9678                           ; BSR set to: 0
  9679                           ;main.c: 1520: else if ( (reg >= 72) &&
  9680                           ;main.c: 1521: (reg < (72 + 7 * 8)) ) {
  9681  001266  0E47               	movlw	71
  9682  001268  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9683  00126A  D01D               	goto	l10696
  9684                           
  9685                           ; BSR set to: 0
  9686  00126C  0E80               	movlw	128
  9687  00126E  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9688  001270  D01A               	goto	l10696
  9689                           
  9690                           ; BSR set to: 0
  9691                           ;main.c: 1522: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9692  001272  EC3F  F020         	call	_Busy_eep	;wreg free
  9693  001276  0E43               	movlw	67
  9694  001278  0100               	movlb	0	; () banked
  9695  00127A  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9696  00127C  6E08               	movwf	?_Write_b_eep,c
  9697  00127E  6A09               	clrf	?_Write_b_eep+1,c
  9698  001280  0E00               	movlw	0
  9699  001282  2209               	addwfc	?_Write_b_eep+1,f,c
  9700  001284  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9701  001288  EC24  F01E         	call	_Write_b_eep	;wreg free
  9702                           
  9703                           ;main.c: 1523: calculateSetFilterMask();
  9704  00128C  EC45  F020         	call	_calculateSetFilterMask	;wreg free
  9705                           
  9706                           ;main.c: 1524: rv = Read_b_eep(0x43 + reg);
  9707  001290  0E43               	movlw	67
  9708  001292  0100               	movlb	0	; () banked
  9709  001294  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9710  001296  6E08               	movwf	?_Read_b_eep,c
  9711  001298  6A09               	clrf	?_Read_b_eep+1,c
  9712  00129A  0E00               	movlw	0
  9713  00129C  2209               	addwfc	?_Read_b_eep+1,f,c
  9714  00129E  EC0B  F020         	call	_Read_b_eep	;wreg free
  9715  0012A2                     L26:
  9716  0012A2  0100               	movlb	0	; () banked
  9717  0012A4  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9718  0012A6                     l10696:
  9719                           
  9720                           ; BSR set to: 0
  9721                           ;main.c: 1525: }
  9722                           ;main.c: 1531: if ( bInfoEvent ) {
  9723  0012A6  51CA               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
  9724  0012A8  E035               	bz	l10716
  9725                           
  9726                           ; BSR set to: 0
  9727                           ;main.c: 1533: unsigned char val;
  9728                           ;main.c: 1534: val = Read_b_eep(0x43 + 10 + (reg - 2));
  9729  0012AA  0E4B               	movlw	75
  9730  0012AC  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9731  0012AE  6E08               	movwf	?_Read_b_eep,c
  9732  0012B0  6A09               	clrf	?_Read_b_eep+1,c
  9733  0012B2  0E00               	movlw	0
  9734  0012B4  2209               	addwfc	?_Read_b_eep+1,f,c
  9735  0012B6  EC0B  F020         	call	_Read_b_eep	;wreg free
  9736  0012BA  0100               	movlb	0	; () banked
  9737  0012BC  6FCB               	movwf	vscp_writeAppReg@val_660& (0+255),b
  9738                           
  9739                           ; BSR set to: 0
  9740                           ;main.c: 1537: if ( bOn ) {
  9741  0012BE  51CD               	movf	vscp_writeAppReg@bOn& (0+255),w,b
  9742  0012C0  E015               	bz	l394
  9743                           
  9744                           ; BSR set to: 0
  9745                           ;main.c: 1539: if ( val & 0x08 ) {
  9746  0012C2  A7CB               	btfss	vscp_writeAppReg@val_660& (0+255),3,b
  9747  0012C4  D008               	goto	l10706
  9748                           
  9749                           ; BSR set to: 0
  9750                           ;main.c: 1540: SendInformationEvent( reg - 2,
  9751                           ;main.c: 1541: 20,
  9752                           ;main.c: 1542: 3 );
  9753  0012C6  0E14               	movlw	20
  9754  0012C8  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9755  0012CA  0E03               	movlw	3
  9756  0012CC  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9757  0012CE  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9758  0012D0  0FFE               	addlw	254
  9759  0012D2  EC67  F01D         	call	_SendInformationEvent
  9760  0012D6                     l10706:
  9761                           
  9762                           ; BSR set to: 0
  9763                           ;main.c: 1543: }
  9764                           ;main.c: 1545: if ( val & 0x20 ) {
  9765  0012D6  ABCB               	btfss	vscp_writeAppReg@val_660& (0+255),5,b
  9766  0012D8  D01D               	goto	l10716
  9767                           
  9768                           ; BSR set to: 0
  9769                           ;main.c: 1546: SendInformationEvent( reg - 2,
  9770                           ;main.c: 1547: 20,
  9771                           ;main.c: 1548: 25 );
  9772  0012DA  0E14               	movlw	20
  9773  0012DC  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9774  0012DE  0E19               	movlw	25
  9775  0012E0  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9776  0012E2  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9777  0012E4  0FFE               	addlw	254
  9778  0012E6  EC67  F01D         	call	_SendInformationEvent
  9779  0012EA  D014               	goto	l10716
  9780  0012EC                     l394:
  9781                           
  9782                           ; BSR set to: 0
  9783                           ;main.c: 1552: else {
  9784                           ;main.c: 1554: if ( val & 0x10 ) {
  9785  0012EC  A9CB               	btfss	vscp_writeAppReg@val_660& (0+255),4,b
  9786  0012EE  D008               	goto	l10712
  9787                           
  9788                           ; BSR set to: 0
  9789                           ;main.c: 1555: SendInformationEvent( reg - 2,
  9790                           ;main.c: 1556: 20,
  9791                           ;main.c: 1557: 4 );
  9792  0012F0  0E14               	movlw	20
  9793  0012F2  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9794  0012F4  0E04               	movlw	4
  9795  0012F6  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9796  0012F8  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9797  0012FA  0FFE               	addlw	254
  9798  0012FC  EC67  F01D         	call	_SendInformationEvent
  9799  001300                     l10712:
  9800                           
  9801                           ; BSR set to: 0
  9802                           ;main.c: 1558: }
  9803                           ;main.c: 1560: if ( val & 0x40 ) {
  9804  001300  ADCB               	btfss	vscp_writeAppReg@val_660& (0+255),6,b
  9805  001302  D008               	goto	l10716
  9806                           
  9807                           ; BSR set to: 0
  9808                           ;main.c: 1561: SendInformationEvent( reg - 2,
  9809                           ;main.c: 1562: 20,
  9810                           ;main.c: 1563: 24 );
  9811  001304  0E14               	movlw	20
  9812  001306  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9813  001308  0E18               	movlw	24
  9814  00130A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9815  00130C  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9816  00130E  0FFE               	addlw	254
  9817  001310  EC67  F01D         	call	_SendInformationEvent
  9818  001314                     l10716:
  9819                           
  9820                           ; BSR set to: 0
  9821                           ;main.c: 1564: }
  9822                           ;main.c: 1565: }
  9823                           ;main.c: 1566: }
  9824                           ;main.c: 1568: return rv;
  9825  001314  51CC               	movf	vscp_writeAppReg@rv& (0+255),w,b
  9826                           
  9827                           ; BSR set to: 0
  9828  001316  0012               	return	
  9829  001318                     __end_of_vscp_writeAppReg:
  9830                           	opt stack 0
  9831                           tblptru	equ	0xFF8
  9832                           prodh	equ	0xFF4
  9833                           prodl	equ	0xFF3
  9834                           postinc0	equ	0xFEE
  9835                           wreg	equ	0xFE8
  9836                           indf2	equ	0xFDF
  9837                           postinc2	equ	0xFDE
  9838                           postdec2	equ	0xFDD
  9839                           fsr2h	equ	0xFDA
  9840                           fsr2l	equ	0xFD9
  9841                           status	equ	0xFD8
  9842                           
  9843 ;; *************** function _SendInformationEvent *****************
  9844 ;; Defined at:
  9845 ;;		line 1598 in file "../main.c"
  9846 ;; Parameters:    Size  Location     Type
  9847 ;;  idx             1    wreg     unsigned char 
  9848 ;;  eventClass      1   20[BANK0 ] unsigned char 
  9849 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
  9850 ;; Auto vars:     Size  Location     Type
  9851 ;;  idx             1   79[COMRAM] unsigned char 
  9852 ;;  data            3   76[COMRAM] unsigned char [3]
  9853 ;; Return value:  Size  Location     Type
  9854 ;;		None               void
  9855 ;; Registers used:
  9856 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9857 ;; Tracked objects:
  9858 ;;		On entry : F/0
  9859 ;;		On exit  : F/0
  9860 ;;		Unchanged: 0/0
  9861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9862 ;;      Params:         0       2       0       0       0       0       0
  9863 ;;      Locals:         4       0       0       0       0       0       0
  9864 ;;      Temps:          2       0       0       0       0       0       0
  9865 ;;      Totals:         6       2       0       0       0       0       0
  9866 ;;Total ram usage:        8 bytes
  9867 ;; Hardware stack levels used:    1
  9868 ;; Hardware stack levels required when called:    6
  9869 ;; This function calls:
  9870 ;;		_Read_b_eep
  9871 ;;		_sendVSCPFrame
  9872 ;; This function is called by:
  9873 ;;		_doApplicationOneSecondWork
  9874 ;;		_vscp_writeAppReg
  9875 ;;		_doActionOn
  9876 ;;		_doActionOff
  9877 ;;		_doActionStatus
  9878 ;;		_doActionToggle
  9879 ;; This function uses a non-reentrant model
  9880 ;;
  9881                           
  9882                           	psect	text25
  9883  003ACE                     __ptext25:
  9884                           	opt stack 0
  9885  003ACE                     _SendInformationEvent:
  9886                           	opt stack 23
  9887                           
  9888                           ; BSR set to: 0
  9889                           ;incstack = 0
  9890                           ;incstack = 0
  9891                           ;SendInformationEvent@idx stored from wreg
  9892  003ACE  CFE8 F050          	movff	wreg,SendInformationEvent@idx
  9893                           
  9894                           ; BSR set to: 0
  9895                           ;main.c: 1599: uint8_t data[3];
  9896                           ;main.c: 1612: data[ 0 ] = idx;
  9897  003AD2  C050  F04D         	movff	SendInformationEvent@idx,SendInformationEvent@data
  9898                           
  9899                           ; BSR set to: 0
  9900                           ;main.c: 1613: data[ 1 ] = Read_b_eep(0x43 + 50 + 2*idx);
  9901  003AD6  90D8               	bcf	status,0,c
  9902  003AD8  3450               	rlcf	SendInformationEvent@idx,w,c
  9903  003ADA  6E4B               	movwf	??_SendInformationEvent& (0+255),c
  9904  003ADC  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
  9905  003ADE  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
  9906  003AE0  0E75               	movlw	117
  9907  003AE2  244B               	addwf	??_SendInformationEvent,w,c
  9908  003AE4  6E08               	movwf	?_Read_b_eep,c
  9909  003AE6  0E00               	movlw	0
  9910  003AE8  204C               	addwfc	??_SendInformationEvent+1,w,c
  9911  003AEA  6E09               	movwf	?_Read_b_eep+1,c
  9912  003AEC  EC0B  F020         	call	_Read_b_eep	;wreg free
  9913  003AF0  6E4E               	movwf	SendInformationEvent@data+1,c
  9914                           
  9915                           ;main.c: 1614: data[ 2 ] = Read_b_eep(0x43 + 51 + 2*idx);
  9916  003AF2  90D8               	bcf	status,0,c
  9917  003AF4  3450               	rlcf	SendInformationEvent@idx,w,c
  9918  003AF6  6E4B               	movwf	??_SendInformationEvent& (0+255),c
  9919  003AF8  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
  9920  003AFA  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
  9921  003AFC  0E76               	movlw	118
  9922  003AFE  244B               	addwf	??_SendInformationEvent,w,c
  9923  003B00  6E08               	movwf	?_Read_b_eep,c
  9924  003B02  0E00               	movlw	0
  9925  003B04  204C               	addwfc	??_SendInformationEvent+1,w,c
  9926  003B06  6E09               	movwf	?_Read_b_eep+1,c
  9927  003B08  EC0B  F020         	call	_Read_b_eep	;wreg free
  9928  003B0C  6E4F               	movwf	SendInformationEvent@data+2,c
  9929                           
  9930                           ;main.c: 1615: sendVSCPFrame( eventClass,
  9931                           ;main.c: 1616: eventTypeId,
  9932                           ;main.c: 1617: vscp_nickname,
  9933                           ;main.c: 1618: 0x03,
  9934                           ;main.c: 1619: 3,
  9935                           ;main.c: 1620: data );
  9936  003B0E  0100               	movlb	0	; () banked
  9937  003B10  C0C5  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
  9938  003B14  6A40               	clrf	?_sendVSCPFrame+1,c
  9939  003B16  C0C6  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
  9940  003B1A  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  9941  003B1E  0E03               	movlw	3
  9942  003B20  6E43               	movwf	?_sendVSCPFrame+4,c
  9943  003B22  6E44               	movwf	?_sendVSCPFrame+5,c
  9944  003B24  0E4D               	movlw	low SendInformationEvent@data
  9945  003B26  6E45               	movwf	?_sendVSCPFrame+6,c
  9946  003B28  0E00               	movlw	high SendInformationEvent@data
  9947  003B2A  6E46               	movwf	?_sendVSCPFrame+7,c
  9948  003B2C  0E0F               	movlw	15
  9949  003B2E  6E46               	movwf	?_sendVSCPFrame+7,c
  9950  003B30  0E5F               	movlw	__accesstop+-1
  9951  003B32  6445               	cpfsgt	?_sendVSCPFrame+6,c
  9952  003B34  6A46               	clrf	?_sendVSCPFrame+7,c
  9953  003B36  EFA2  F01B         	goto	_sendVSCPFrame	;wreg free
  9954  003B3A                     __end_of_SendInformationEvent:
  9955                           	opt stack 0
  9956                           tblptru	equ	0xFF8
  9957                           prodh	equ	0xFF4
  9958                           prodl	equ	0xFF3
  9959                           postinc0	equ	0xFEE
  9960                           wreg	equ	0xFE8
  9961                           indf2	equ	0xFDF
  9962                           postinc2	equ	0xFDE
  9963                           postdec2	equ	0xFDD
  9964                           fsr2h	equ	0xFDA
  9965                           fsr2l	equ	0xFD9
  9966                           status	equ	0xFD8
  9967                           
  9968 ;; *************** function _calculateSetFilterMask *****************
  9969 ;; Defined at:
  9970 ;;		line 2681 in file "../main.c"
  9971 ;; Parameters:    Size  Location     Type
  9972 ;;		None
  9973 ;; Auto vars:     Size  Location     Type
  9974 ;;		None
  9975 ;; Return value:  Size  Location     Type
  9976 ;;		None               void
  9977 ;; Registers used:
  9978 ;;		None
  9979 ;; Tracked objects:
  9980 ;;		On entry : 0/0
  9981 ;;		On exit  : 0/0
  9982 ;;		Unchanged: 0/0
  9983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9984 ;;      Params:         0       0       0       0       0       0       0
  9985 ;;      Locals:         0       0       0       0       0       0       0
  9986 ;;      Temps:          0       0       0       0       0       0       0
  9987 ;;      Totals:         0       0       0       0       0       0       0
  9988 ;;Total ram usage:        0 bytes
  9989 ;; Hardware stack levels used:    1
  9990 ;; Hardware stack levels required when called:    2
  9991 ;; This function calls:
  9992 ;;		Nothing
  9993 ;; This function is called by:
  9994 ;;		_init_app_eeprom
  9995 ;;		_vscp_writeAppReg
  9996 ;; This function uses a non-reentrant model
  9997 ;;
  9998                           
  9999                           	psect	text26
 10000  00408A                     __ptext26:
 10001                           	opt stack 0
 10002  00408A                     _calculateSetFilterMask:
 10003                           	opt stack 24
 10004                           
 10005                           ; BSR set to: 0
 10006                           ;incstack = 0
 10007                           ;incstack = 0
 10008  00408A  0012               	return	
 10009  00408C                     __end_of_calculateSetFilterMask:
 10010                           	opt stack 0
 10011                           tblptru	equ	0xFF8
 10012                           prodh	equ	0xFF4
 10013                           prodl	equ	0xFF3
 10014                           postinc0	equ	0xFEE
 10015                           wreg	equ	0xFE8
 10016                           indf2	equ	0xFDF
 10017                           postinc2	equ	0xFDE
 10018                           postdec2	equ	0xFDD
 10019                           fsr2h	equ	0xFDA
 10020                           fsr2l	equ	0xFD9
 10021                           status	equ	0xFD8
 10022                           
 10023 ;; *************** function _vscp_readRegister *****************
 10024 ;; Defined at:
 10025 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 10026 ;; Parameters:    Size  Location     Type
 10027 ;;  reg             1    wreg     unsigned char 
 10028 ;; Auto vars:     Size  Location     Type
 10029 ;;  reg             1   28[COMRAM] unsigned char 
 10030 ;; Return value:  Size  Location     Type
 10031 ;;                  1    wreg      unsigned char 
 10032 ;; Registers used:
 10033 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10034 ;; Tracked objects:
 10035 ;;		On entry : F/0
 10036 ;;		On exit  : 0/0
 10037 ;;		Unchanged: 0/0
 10038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10039 ;;      Params:         0       0       0       0       0       0       0
 10040 ;;      Locals:         1       0       0       0       0       0       0
 10041 ;;      Temps:          0       0       0       0       0       0       0
 10042 ;;      Totals:         1       0       0       0       0       0       0
 10043 ;;Total ram usage:        1 bytes
 10044 ;; Hardware stack levels used:    1
 10045 ;; Hardware stack levels required when called:    5
 10046 ;; This function calls:
 10047 ;;		_vscp_readAppReg
 10048 ;;		_vscp_readStdReg
 10049 ;; This function is called by:
 10050 ;;		_vscp_handleProtocolEvent
 10051 ;; This function uses a non-reentrant model
 10052 ;;
 10053                           
 10054                           	psect	text27
 10055  003F3C                     __ptext27:
 10056                           	opt stack 0
 10057  003F3C                     _vscp_readRegister:
 10058                           	opt stack 24
 10059                           
 10060                           ;incstack = 0
 10061                           ;incstack = 0
 10062                           ;vscp_readRegister@reg stored from wreg
 10063  003F3C  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
 10064                           
 10065                           ; BSR set to: 0
 10066                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 10067  003F40  0E7F               	movlw	127
 10068  003F42  641D               	cpfsgt	vscp_readRegister@reg,c
 10069  003F44  D004               	goto	l9362
 10070                           
 10071                           ; BSR set to: 0
 10072                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 10073  003F46  501D               	movf	vscp_readRegister@reg,w,c
 10074  003F48  EC29  F015         	call	_vscp_readStdReg
 10075  003F4C  D003               	goto	l1103
 10076  003F4E                     l9362:
 10077                           
 10078                           ; BSR set to: 0
 10079                           ;vscp_firmware.c: 565: else {
 10080                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 10081  003F4E  501D               	movf	vscp_readRegister@reg,w,c
 10082  003F50  ECFD  F01B         	call	_vscp_readAppReg
 10083  003F54                     l1103:
 10084  003F54  0012               	return	
 10085  003F56                     __end_of_vscp_readRegister:
 10086                           	opt stack 0
 10087                           tblptru	equ	0xFF8
 10088                           prodh	equ	0xFF4
 10089                           prodl	equ	0xFF3
 10090                           postinc0	equ	0xFEE
 10091                           wreg	equ	0xFE8
 10092                           indf2	equ	0xFDF
 10093                           postinc2	equ	0xFDE
 10094                           postdec2	equ	0xFDD
 10095                           fsr2h	equ	0xFDA
 10096                           fsr2l	equ	0xFD9
 10097                           status	equ	0xFD8
 10098                           
 10099 ;; *************** function _vscp_readStdReg *****************
 10100 ;; Defined at:
 10101 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 10102 ;; Parameters:    Size  Location     Type
 10103 ;;  reg             1    wreg     unsigned char 
 10104 ;; Auto vars:     Size  Location     Type
 10105 ;;  reg             1   27[COMRAM] unsigned char 
 10106 ;;  code            4   20[COMRAM] unsigned long 
 10107 ;;  idx             1   25[COMRAM] unsigned char 
 10108 ;;  code            4   16[COMRAM] unsigned long 
 10109 ;;  idx             1   24[COMRAM] unsigned char 
 10110 ;;  rv              1   26[COMRAM] unsigned char 
 10111 ;; Return value:  Size  Location     Type
 10112 ;;                  1    wreg      unsigned char 
 10113 ;; Registers used:
 10114 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10115 ;; Tracked objects:
 10116 ;;		On entry : F/0
 10117 ;;		On exit  : 0/0
 10118 ;;		Unchanged: 0/0
 10119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10120 ;;      Params:         0       0       0       0       0       0       0
 10121 ;;      Locals:        12       0       0       0       0       0       0
 10122 ;;      Temps:          5       0       0       0       0       0       0
 10123 ;;      Totals:        17       0       0       0       0       0       0
 10124 ;;Total ram usage:       17 bytes
 10125 ;; Hardware stack levels used:    1
 10126 ;; Hardware stack levels required when called:    4
 10127 ;; This function calls:
 10128 ;;		_vscp_getMajorVersion
 10129 ;;		_vscp_getMinorVersion
 10130 ;;		_vscp_getSubMinorVersion
 10131 ;;		_vscp_getGUID
 10132 ;;		_vscp_getMDF_URL
 10133 ;;		_vscp_getUserID
 10134 ;;		_vscp_getManufacturerId
 10135 ;;		_vscp_getBootLoaderAlgorithm
 10136 ;;		_vscp_getBufferSize
 10137 ;;		_vscp_getFamilyCode
 10138 ;;		_vscp_getFamilyType
 10139 ;;		_vscp_getRegisterPagesUsed
 10140 ;; This function is called by:
 10141 ;;		_vscp_readRegister
 10142 ;;		_vscp_handleProtocolEvent
 10143 ;; This function uses a non-reentrant model
 10144 ;;
 10145                           
 10146                           	psect	text28
 10147  002A52                     __ptext28:
 10148                           	opt stack 0
 10149  002A52                     _vscp_readStdReg:
 10150                           	opt stack 25
 10151                           
 10152                           ;incstack = 0
 10153                           ;incstack = 0
 10154                           ;vscp_readStdReg@reg stored from wreg
 10155  002A52  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
 10156                           
 10157                           ; BSR set to: 0
 10158                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 10159  002A56  6A1B               	clrf	vscp_readStdReg@rv,c
 10160                           
 10161                           ; BSR set to: 0
 10162                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 10163  002A58  501C               	movf	vscp_readStdReg@reg,w,c
 10164  002A5A  0A80               	xorlw	128
 10165  002A5C  E104               	bnz	l9372
 10166                           
 10167                           ; BSR set to: 0
 10168                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 10169  002A5E  C055  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 10170                           
 10171                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 10172  002A62  6A55               	clrf	_vscp_alarmstatus,c
 10173                           
 10174                           ;vscp_firmware.c: 584: }
 10175  002A64  D0CB               	goto	l9460
 10176  002A66                     l9372:
 10177                           
 10178                           ; BSR set to: 0
 10179                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 10180  002A66  501C               	movf	vscp_readStdReg@reg,w,c
 10181  002A68  0A81               	xorlw	129
 10182  002A6A  E102               	bnz	l9376
 10183                           
 10184                           ; BSR set to: 0
 10185                           ;vscp_firmware.c: 588: rv = 1;
 10186  002A6C  0E01               	movlw	1
 10187  002A6E  D081               	goto	L38
 10188  002A70                     l9376:
 10189                           
 10190                           ; BSR set to: 0
 10191                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 10192  002A70  501C               	movf	vscp_readStdReg@reg,w,c
 10193  002A72  0A82               	xorlw	130
 10194  002A74  E102               	bnz	l9380
 10195                           
 10196                           ; BSR set to: 0
 10197                           ;vscp_firmware.c: 594: rv = 5;
 10198  002A76  0E05               	movlw	5
 10199  002A78  D07C               	goto	L38
 10200  002A7A                     l9380:
 10201                           
 10202                           ; BSR set to: 0
 10203                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 10204  002A7A  501C               	movf	vscp_readStdReg@reg,w,c
 10205  002A7C  0A83               	xorlw	131
 10206  002A7E  E102               	bnz	l9384
 10207                           
 10208                           ; BSR set to: 0
 10209                           ;vscp_firmware.c: 600: rv = 0;
 10210  002A80  6A1B               	clrf	vscp_readStdReg@rv,c
 10211                           
 10212                           ;vscp_firmware.c: 602: }
 10213  002A82  D0BC               	goto	l9460
 10214  002A84                     l9384:
 10215                           
 10216                           ; BSR set to: 0
 10217                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 10218  002A84  501C               	movf	vscp_readStdReg@reg,w,c
 10219  002A86  0A94               	xorlw	148
 10220  002A88  E103               	bnz	l9388
 10221                           
 10222                           ; BSR set to: 0
 10223                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 10224  002A8A  EC4B  F020         	call	_vscp_getMajorVersion	;wreg free
 10225  002A8E  D071               	goto	L38
 10226  002A90                     l9388:
 10227                           
 10228                           ; BSR set to: 0
 10229                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 10230  002A90  501C               	movf	vscp_readStdReg@reg,w,c
 10231  002A92  0A95               	xorlw	149
 10232  002A94  E103               	bnz	l9392
 10233                           
 10234                           ; BSR set to: 0
 10235                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 10236  002A96  EC4A  F020         	call	_vscp_getMinorVersion	;wreg free
 10237  002A9A  D06B               	goto	L38
 10238  002A9C                     l9392:
 10239                           
 10240                           ; BSR set to: 0
 10241                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 10242  002A9C  501C               	movf	vscp_readStdReg@reg,w,c
 10243  002A9E  0A96               	xorlw	150
 10244  002AA0  E103               	bnz	l9396
 10245                           
 10246                           ; BSR set to: 0
 10247                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 10248  002AA2  EC49  F020         	call	_vscp_getSubMinorVersion	;wreg free
 10249  002AA6  D065               	goto	L38
 10250  002AA8                     l9396:
 10251                           
 10252                           ; BSR set to: 0
 10253                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 10254  002AA8  0E89               	movlw	137
 10255  002AAA  601C               	cpfslt	vscp_readStdReg@reg,c
 10256  002AAC  D005               	goto	l9400
 10257                           
 10258                           ; BSR set to: 0
 10259                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 10260  002AAE  501C               	movf	vscp_readStdReg@reg,w,c
 10261  002AB0  0F7C               	addlw	124
 10262  002AB2  ECEE  F01F         	call	_vscp_getUserID
 10263  002AB6  D05D               	goto	L38
 10264  002AB8                     l9400:
 10265                           
 10266                           ; BSR set to: 0
 10267                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 10268                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 10269  002AB8  0E88               	movlw	136
 10270  002ABA  641C               	cpfsgt	vscp_readStdReg@reg,c
 10271  002ABC  D008               	goto	l9406
 10272                           
 10273                           ; BSR set to: 0
 10274  002ABE  0E91               	movlw	145
 10275  002AC0  601C               	cpfslt	vscp_readStdReg@reg,c
 10276  002AC2  D005               	goto	l9406
 10277                           
 10278                           ; BSR set to: 0
 10279                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 10280  002AC4  501C               	movf	vscp_readStdReg@reg,w,c
 10281  002AC6  0F77               	addlw	119
 10282  002AC8  ECE4  F01F         	call	_vscp_getManufacturerId
 10283  002ACC  D052               	goto	L38
 10284  002ACE                     l9406:
 10285                           
 10286                           ; BSR set to: 0
 10287                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 10288  002ACE  501C               	movf	vscp_readStdReg@reg,w,c
 10289  002AD0  0A91               	xorlw	145
 10290  002AD2  E103               	bnz	l9410
 10291                           
 10292                           ; BSR set to: 0
 10293                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 10294  002AD4  C091  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
 10295                           
 10296                           ;vscp_firmware.c: 639: }
 10297  002AD8  D091               	goto	l9460
 10298  002ADA                     l9410:
 10299                           
 10300                           ; BSR set to: 0
 10301                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 10302  002ADA  501C               	movf	vscp_readStdReg@reg,w,c
 10303  002ADC  0A93               	xorlw	147
 10304  002ADE  E103               	bnz	l9414
 10305                           
 10306                           ; BSR set to: 0
 10307                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 10308  002AE0  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
 10309                           
 10310                           ;vscp_firmware.c: 645: }
 10311  002AE4  D08B               	goto	l9460
 10312  002AE6                     l9414:
 10313                           
 10314                           ; BSR set to: 0
 10315                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 10316  002AE6  501C               	movf	vscp_readStdReg@reg,w,c
 10317  002AE8  0A92               	xorlw	146
 10318  002AEA  E102               	bnz	l9418
 10319                           
 10320                           ; BSR set to: 0
 10321                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 10322  002AEC  5053               	movf	_vscp_page_select+1,w,c
 10323  002AEE  D041               	goto	L38
 10324  002AF0                     l9418:
 10325                           
 10326                           ; BSR set to: 0
 10327                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 10328  002AF0  501C               	movf	vscp_readStdReg@reg,w,c
 10329  002AF2  0A97               	xorlw	151
 10330  002AF4  E103               	bnz	l9422
 10331                           
 10332                           ; BSR set to: 0
 10333                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 10334  002AF6  EC48  F020         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 10335  002AFA  D03B               	goto	L38
 10336  002AFC                     l9422:
 10337                           
 10338                           ; BSR set to: 0
 10339                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 10340  002AFC  501C               	movf	vscp_readStdReg@reg,w,c
 10341  002AFE  0A98               	xorlw	152
 10342  002B00  E103               	bnz	l9426
 10343                           
 10344                           ; BSR set to: 0
 10345                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 10346  002B02  EC47  F020         	call	_vscp_getBufferSize	;wreg free
 10347  002B06  D035               	goto	L38
 10348  002B08                     l9426:
 10349                           
 10350                           ; BSR set to: 0
 10351                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 10352  002B08  501C               	movf	vscp_readStdReg@reg,w,c
 10353  002B0A  0A99               	xorlw	153
 10354  002B0C  E103               	bnz	l9430
 10355                           
 10356                           ; BSR set to: 0
 10357                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 10358  002B0E  EC46  F020         	call	_vscp_getRegisterPagesUsed	;wreg free
 10359  002B12  D02F               	goto	L38
 10360  002B14                     l9430:
 10361                           
 10362                           ; BSR set to: 0
 10363                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 10364                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 10365  002B14  0E99               	movlw	153
 10366  002B16  641C               	cpfsgt	vscp_readStdReg@reg,c
 10367  002B18  D02E               	goto	l9440
 10368                           
 10369                           ; BSR set to: 0
 10370  002B1A  0E9E               	movlw	158
 10371  002B1C  601C               	cpfslt	vscp_readStdReg@reg,c
 10372  002B1E  D02B               	goto	l9440
 10373                           
 10374                           ; BSR set to: 0
 10375                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 10376  002B20  EC2C  F020         	call	_vscp_getFamilyCode	;wreg free
 10377  002B24  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 10378  002B28  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 10379  002B2C  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 10380  002B30  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 10381                           
 10382                           ; BSR set to: 0
 10383                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 10384  002B34  501C               	movf	vscp_readStdReg@reg,w,c
 10385  002B36  0F66               	addlw	102
 10386  002B38  6E19               	movwf	vscp_readStdReg@idx,c
 10387                           
 10388                           ; BSR set to: 0
 10389                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 10390  002B3A  5019               	movf	vscp_readStdReg@idx,w,c
 10391  002B3C  0803               	sublw	3
 10392  002B3E  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 10393  002B40  90D8               	bcf	status,0,c
 10394  002B42  360C               	rlcf	??_vscp_readStdReg,f,c
 10395  002B44  90D8               	bcf	status,0,c
 10396  002B46  360C               	rlcf	??_vscp_readStdReg,f,c
 10397  002B48  90D8               	bcf	status,0,c
 10398  002B4A  360C               	rlcf	??_vscp_readStdReg,f,c
 10399  002B4C  500C               	movf	??_vscp_readStdReg,w,c
 10400  002B4E  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 10401  002B52  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 10402  002B56  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 10403  002B5A  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 10404  002B5E  2AE8               	incf	wreg,f,c
 10405  002B60  D005               	goto	u10820
 10406  002B62                     u10825:
 10407  002B62  90D8               	bcf	status,0,c
 10408  002B64  3210               	rrcf	??_vscp_readStdReg+4,f,c
 10409  002B66  320F               	rrcf	??_vscp_readStdReg+3,f,c
 10410  002B68  320E               	rrcf	??_vscp_readStdReg+2,f,c
 10411  002B6A  320D               	rrcf	??_vscp_readStdReg+1,f,c
 10412  002B6C                     u10820:
 10413  002B6C  2EE8               	decfsz	wreg,f,c
 10414  002B6E  D7F9               	goto	u10825
 10415  002B70  D030               	goto	L39
 10416  002B72                     L38:
 10417  002B72  6E1B               	movwf	vscp_readStdReg@rv,c
 10418                           
 10419                           ;vscp_firmware.c: 671: }
 10420  002B74  D043               	goto	l9460
 10421  002B76                     l9440:
 10422                           
 10423                           ; BSR set to: 0
 10424                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 10425                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 10426  002B76  0E9D               	movlw	157
 10427  002B78  641C               	cpfsgt	vscp_readStdReg@reg,c
 10428  002B7A  D02D               	goto	l9450
 10429                           
 10430                           ; BSR set to: 0
 10431  002B7C  0EA2               	movlw	162
 10432  002B7E  601C               	cpfslt	vscp_readStdReg@reg,c
 10433  002B80  D02A               	goto	l9450
 10434                           
 10435                           ; BSR set to: 0
 10436                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 10437  002B82  EC27  F020         	call	_vscp_getFamilyType	;wreg free
 10438  002B86  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1248+3
 10439  002B8A  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1248+2
 10440  002B8E  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1248+1
 10441  002B92  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1248
 10442                           
 10443                           ; BSR set to: 0
 10444                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 10445  002B96  501C               	movf	vscp_readStdReg@reg,w,c
 10446  002B98  0F62               	addlw	98
 10447  002B9A  6E1A               	movwf	vscp_readStdReg@idx_1249,c
 10448                           
 10449                           ; BSR set to: 0
 10450                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 10451  002B9C  501A               	movf	vscp_readStdReg@idx_1249,w,c
 10452  002B9E  0803               	sublw	3
 10453  002BA0  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 10454  002BA2  90D8               	bcf	status,0,c
 10455  002BA4  360C               	rlcf	??_vscp_readStdReg,f,c
 10456  002BA6  90D8               	bcf	status,0,c
 10457  002BA8  360C               	rlcf	??_vscp_readStdReg,f,c
 10458  002BAA  90D8               	bcf	status,0,c
 10459  002BAC  360C               	rlcf	??_vscp_readStdReg,f,c
 10460  002BAE  500C               	movf	??_vscp_readStdReg,w,c
 10461  002BB0  C015  F00D         	movff	vscp_readStdReg@code_1248,??_vscp_readStdReg+1
 10462  002BB4  C016  F00E         	movff	vscp_readStdReg@code_1248+1,??_vscp_readStdReg+2
 10463  002BB8  C017  F00F         	movff	vscp_readStdReg@code_1248+2,??_vscp_readStdReg+3
 10464  002BBC  C018  F010         	movff	vscp_readStdReg@code_1248+3,??_vscp_readStdReg+4
 10465  002BC0  2AE8               	incf	wreg,f,c
 10466  002BC2  D005               	goto	u10850
 10467  002BC4                     u10855:
 10468  002BC4  90D8               	bcf	status,0,c
 10469  002BC6  3210               	rrcf	??_vscp_readStdReg+4,f,c
 10470  002BC8  320F               	rrcf	??_vscp_readStdReg+3,f,c
 10471  002BCA  320E               	rrcf	??_vscp_readStdReg+2,f,c
 10472  002BCC  320D               	rrcf	??_vscp_readStdReg+1,f,c
 10473  002BCE                     u10850:
 10474  002BCE  2EE8               	decfsz	wreg,f,c
 10475  002BD0  D7F9               	goto	u10855
 10476  002BD2                     L39:
 10477  002BD2  500D               	movf	??_vscp_readStdReg+1,w,c
 10478  002BD4  D7CE               	goto	L38
 10479  002BD6                     l9450:
 10480                           
 10481                           ; BSR set to: 0
 10482                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 10483                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 10484  002BD6  0ECF               	movlw	207
 10485  002BD8  641C               	cpfsgt	vscp_readStdReg@reg,c
 10486  002BDA  D008               	goto	l9456
 10487                           
 10488                           ; BSR set to: 0
 10489  002BDC  0EE0               	movlw	224
 10490  002BDE  601C               	cpfslt	vscp_readStdReg@reg,c
 10491  002BE0  D005               	goto	l9456
 10492                           
 10493                           ; BSR set to: 0
 10494                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 10495  002BE2  501C               	movf	vscp_readStdReg@reg,w,c
 10496  002BE4  0F30               	addlw	48
 10497  002BE6  ECF8  F01F         	call	_vscp_getGUID
 10498  002BEA  D7C3               	goto	L38
 10499  002BEC                     l9456:
 10500                           
 10501                           ; BSR set to: 0
 10502                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 10503  002BEC  0EDF               	movlw	223
 10504  002BEE  641C               	cpfsgt	vscp_readStdReg@reg,c
 10505  002BF0  D005               	goto	l9460
 10506                           
 10507                           ; BSR set to: 0
 10508                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 10509  002BF2  501C               	movf	vscp_readStdReg@reg,w,c
 10510  002BF4  0F20               	addlw	32
 10511  002BF6  ECAB  F01F         	call	_vscp_getMDF_URL
 10512  002BFA  D7BB               	goto	L38
 10513  002BFC                     l9460:
 10514                           
 10515                           ;vscp_firmware.c: 691: }
 10516                           ;vscp_firmware.c: 693: return rv;
 10517  002BFC  501B               	movf	vscp_readStdReg@rv,w,c
 10518  002BFE  0012               	return	
 10519  002C00                     __end_of_vscp_readStdReg:
 10520                           	opt stack 0
 10521                           tblptru	equ	0xFF8
 10522                           prodh	equ	0xFF4
 10523                           prodl	equ	0xFF3
 10524                           postinc0	equ	0xFEE
 10525                           wreg	equ	0xFE8
 10526                           indf2	equ	0xFDF
 10527                           postinc2	equ	0xFDE
 10528                           postdec2	equ	0xFDD
 10529                           fsr2h	equ	0xFDA
 10530                           fsr2l	equ	0xFD9
 10531                           status	equ	0xFD8
 10532                           
 10533 ;; *************** function _vscp_getRegisterPagesUsed *****************
 10534 ;; Defined at:
 10535 ;;		line 2571 in file "../main.c"
 10536 ;; Parameters:    Size  Location     Type
 10537 ;;		None
 10538 ;; Auto vars:     Size  Location     Type
 10539 ;;		None
 10540 ;; Return value:  Size  Location     Type
 10541 ;;                  1    wreg      unsigned char 
 10542 ;; Registers used:
 10543 ;;		wreg
 10544 ;; Tracked objects:
 10545 ;;		On entry : F/0
 10546 ;;		On exit  : F/0
 10547 ;;		Unchanged: F/0
 10548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10549 ;;      Params:         0       0       0       0       0       0       0
 10550 ;;      Locals:         0       0       0       0       0       0       0
 10551 ;;      Temps:          0       0       0       0       0       0       0
 10552 ;;      Totals:         0       0       0       0       0       0       0
 10553 ;;Total ram usage:        0 bytes
 10554 ;; Hardware stack levels used:    1
 10555 ;; Hardware stack levels required when called:    2
 10556 ;; This function calls:
 10557 ;;		Nothing
 10558 ;; This function is called by:
 10559 ;;		_vscp_readStdReg
 10560 ;; This function uses a non-reentrant model
 10561 ;;
 10562                           
 10563                           	psect	text29
 10564  00408C                     __ptext29:
 10565                           	opt stack 0
 10566  00408C                     _vscp_getRegisterPagesUsed:
 10567                           	opt stack 26
 10568                           
 10569                           ; BSR set to: 0
 10570                           
 10571                           ; BSR set to: 0
 10572                           ;main.c: 2572: return 1;
 10573                           
 10574                           ;incstack = 0
 10575                           ;incstack = 0
 10576  00408C  0C01               	retlw	1
 10577  00408E                     __end_of_vscp_getRegisterPagesUsed:
 10578                           	opt stack 0
 10579                           tblptru	equ	0xFF8
 10580                           prodh	equ	0xFF4
 10581                           prodl	equ	0xFF3
 10582                           postinc0	equ	0xFEE
 10583                           wreg	equ	0xFE8
 10584                           indf2	equ	0xFDF
 10585                           postinc2	equ	0xFDE
 10586                           postdec2	equ	0xFDD
 10587                           fsr2h	equ	0xFDA
 10588                           fsr2l	equ	0xFD9
 10589                           status	equ	0xFD8
 10590                           
 10591 ;; *************** function _vscp_getFamilyType *****************
 10592 ;; Defined at:
 10593 ;;		line 2552 in file "../main.c"
 10594 ;; Parameters:    Size  Location     Type
 10595 ;;		None
 10596 ;; Auto vars:     Size  Location     Type
 10597 ;;		None
 10598 ;; Return value:  Size  Location     Type
 10599 ;;                  4    7[COMRAM] unsigned long 
 10600 ;; Registers used:
 10601 ;;		None
 10602 ;; Tracked objects:
 10603 ;;		On entry : F/0
 10604 ;;		On exit  : F/0
 10605 ;;		Unchanged: F/0
 10606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10607 ;;      Params:         4       0       0       0       0       0       0
 10608 ;;      Locals:         0       0       0       0       0       0       0
 10609 ;;      Temps:          0       0       0       0       0       0       0
 10610 ;;      Totals:         4       0       0       0       0       0       0
 10611 ;;Total ram usage:        4 bytes
 10612 ;; Hardware stack levels used:    1
 10613 ;; Hardware stack levels required when called:    2
 10614 ;; This function calls:
 10615 ;;		Nothing
 10616 ;; This function is called by:
 10617 ;;		_vscp_readStdReg
 10618 ;; This function uses a non-reentrant model
 10619 ;;
 10620                           
 10621                           	psect	text30
 10622  00404E                     __ptext30:
 10623                           	opt stack 0
 10624  00404E                     _vscp_getFamilyType:
 10625                           	opt stack 26
 10626                           
 10627                           ; BSR set to: 0
 10628                           ;main.c: 2553: return 0;
 10629                           
 10630                           ; BSR set to: 0
 10631                           ;incstack = 0
 10632                           ;incstack = 0
 10633  00404E  6A08               	clrf	?_vscp_getFamilyType,c
 10634  004050  6A09               	clrf	?_vscp_getFamilyType+1,c
 10635  004052  6A0A               	clrf	?_vscp_getFamilyType+2,c
 10636  004054  6A0B               	clrf	?_vscp_getFamilyType+3,c
 10637                           
 10638                           ; BSR set to: 0
 10639  004056  0012               	return	
 10640  004058                     __end_of_vscp_getFamilyType:
 10641                           	opt stack 0
 10642                           tblptru	equ	0xFF8
 10643                           prodh	equ	0xFF4
 10644                           prodl	equ	0xFF3
 10645                           postinc0	equ	0xFEE
 10646                           wreg	equ	0xFE8
 10647                           indf2	equ	0xFDF
 10648                           postinc2	equ	0xFDE
 10649                           postdec2	equ	0xFDD
 10650                           fsr2h	equ	0xFDA
 10651                           fsr2l	equ	0xFD9
 10652                           status	equ	0xFD8
 10653                           
 10654 ;; *************** function _vscp_getFamilyCode *****************
 10655 ;; Defined at:
 10656 ;;		line 2543 in file "../main.c"
 10657 ;; Parameters:    Size  Location     Type
 10658 ;;		None
 10659 ;; Auto vars:     Size  Location     Type
 10660 ;;		None
 10661 ;; Return value:  Size  Location     Type
 10662 ;;                  4    7[COMRAM] unsigned long 
 10663 ;; Registers used:
 10664 ;;		None
 10665 ;; Tracked objects:
 10666 ;;		On entry : F/0
 10667 ;;		On exit  : F/0
 10668 ;;		Unchanged: F/0
 10669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10670 ;;      Params:         4       0       0       0       0       0       0
 10671 ;;      Locals:         0       0       0       0       0       0       0
 10672 ;;      Temps:          0       0       0       0       0       0       0
 10673 ;;      Totals:         4       0       0       0       0       0       0
 10674 ;;Total ram usage:        4 bytes
 10675 ;; Hardware stack levels used:    1
 10676 ;; Hardware stack levels required when called:    2
 10677 ;; This function calls:
 10678 ;;		Nothing
 10679 ;; This function is called by:
 10680 ;;		_vscp_readStdReg
 10681 ;; This function uses a non-reentrant model
 10682 ;;
 10683                           
 10684                           	psect	text31
 10685  004058                     __ptext31:
 10686                           	opt stack 0
 10687  004058                     _vscp_getFamilyCode:
 10688                           	opt stack 26
 10689                           
 10690                           ; BSR set to: 0
 10691                           ;main.c: 2544: return 0L;
 10692                           
 10693                           ; BSR set to: 0
 10694                           ;incstack = 0
 10695                           ;incstack = 0
 10696  004058  6A08               	clrf	?_vscp_getFamilyCode,c
 10697  00405A  6A09               	clrf	?_vscp_getFamilyCode+1,c
 10698  00405C  6A0A               	clrf	?_vscp_getFamilyCode+2,c
 10699  00405E  6A0B               	clrf	?_vscp_getFamilyCode+3,c
 10700                           
 10701                           ; BSR set to: 0
 10702  004060  0012               	return	
 10703  004062                     __end_of_vscp_getFamilyCode:
 10704                           	opt stack 0
 10705                           tblptru	equ	0xFF8
 10706                           prodh	equ	0xFF4
 10707                           prodl	equ	0xFF3
 10708                           postinc0	equ	0xFEE
 10709                           wreg	equ	0xFE8
 10710                           indf2	equ	0xFDF
 10711                           postinc2	equ	0xFDE
 10712                           postdec2	equ	0xFDD
 10713                           fsr2h	equ	0xFDA
 10714                           fsr2l	equ	0xFD9
 10715                           status	equ	0xFD8
 10716                           
 10717 ;; *************** function _vscp_getBufferSize *****************
 10718 ;; Defined at:
 10719 ;;		line 2404 in file "../main.c"
 10720 ;; Parameters:    Size  Location     Type
 10721 ;;		None
 10722 ;; Auto vars:     Size  Location     Type
 10723 ;;		None
 10724 ;; Return value:  Size  Location     Type
 10725 ;;                  1    wreg      unsigned char 
 10726 ;; Registers used:
 10727 ;;		wreg
 10728 ;; Tracked objects:
 10729 ;;		On entry : F/0
 10730 ;;		On exit  : F/0
 10731 ;;		Unchanged: F/0
 10732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10733 ;;      Params:         0       0       0       0       0       0       0
 10734 ;;      Locals:         0       0       0       0       0       0       0
 10735 ;;      Temps:          0       0       0       0       0       0       0
 10736 ;;      Totals:         0       0       0       0       0       0       0
 10737 ;;Total ram usage:        0 bytes
 10738 ;; Hardware stack levels used:    1
 10739 ;; Hardware stack levels required when called:    2
 10740 ;; This function calls:
 10741 ;;		Nothing
 10742 ;; This function is called by:
 10743 ;;		_vscp_readStdReg
 10744 ;; This function uses a non-reentrant model
 10745 ;;
 10746                           
 10747                           	psect	text32
 10748  00408E                     __ptext32:
 10749                           	opt stack 0
 10750  00408E                     _vscp_getBufferSize:
 10751                           	opt stack 26
 10752                           
 10753                           ; BSR set to: 0
 10754                           
 10755                           ; BSR set to: 0
 10756                           ;main.c: 2405: return 8;
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;incstack = 0
 10760                           ;incstack = 0
 10761  00408E  0C08               	retlw	8
 10762  004090                     __end_of_vscp_getBufferSize:
 10763                           	opt stack 0
 10764                           tblptru	equ	0xFF8
 10765                           prodh	equ	0xFF4
 10766                           prodl	equ	0xFF3
 10767                           postinc0	equ	0xFEE
 10768                           wreg	equ	0xFE8
 10769                           indf2	equ	0xFDF
 10770                           postinc2	equ	0xFDE
 10771                           postdec2	equ	0xFDD
 10772                           fsr2h	equ	0xFDA
 10773                           fsr2l	equ	0xFD9
 10774                           status	equ	0xFD8
 10775                           
 10776 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 10777 ;; Defined at:
 10778 ;;		line 2395 in file "../main.c"
 10779 ;; Parameters:    Size  Location     Type
 10780 ;;		None
 10781 ;; Auto vars:     Size  Location     Type
 10782 ;;		None
 10783 ;; Return value:  Size  Location     Type
 10784 ;;                  1    wreg      unsigned char 
 10785 ;; Registers used:
 10786 ;;		wreg
 10787 ;; Tracked objects:
 10788 ;;		On entry : F/0
 10789 ;;		On exit  : F/0
 10790 ;;		Unchanged: F/0
 10791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10792 ;;      Params:         0       0       0       0       0       0       0
 10793 ;;      Locals:         0       0       0       0       0       0       0
 10794 ;;      Temps:          0       0       0       0       0       0       0
 10795 ;;      Totals:         0       0       0       0       0       0       0
 10796 ;;Total ram usage:        0 bytes
 10797 ;; Hardware stack levels used:    1
 10798 ;; Hardware stack levels required when called:    2
 10799 ;; This function calls:
 10800 ;;		Nothing
 10801 ;; This function is called by:
 10802 ;;		_vscp_readStdReg
 10803 ;; This function uses a non-reentrant model
 10804 ;;
 10805                           
 10806                           	psect	text33
 10807  004090                     __ptext33:
 10808                           	opt stack 0
 10809  004090                     _vscp_getBootLoaderAlgorithm:
 10810                           	opt stack 26
 10811                           
 10812                           ; BSR set to: 0
 10813                           
 10814                           ; BSR set to: 0
 10815                           ;main.c: 2396: return 0x01;
 10816                           
 10817                           ; BSR set to: 0
 10818                           ;incstack = 0
 10819                           ;incstack = 0
 10820  004090  0C01               	retlw	1
 10821  004092                     __end_of_vscp_getBootLoaderAlgorithm:
 10822                           	opt stack 0
 10823                           tblptru	equ	0xFF8
 10824                           prodh	equ	0xFF4
 10825                           prodl	equ	0xFF3
 10826                           postinc0	equ	0xFEE
 10827                           wreg	equ	0xFE8
 10828                           indf2	equ	0xFDF
 10829                           postinc2	equ	0xFDE
 10830                           postdec2	equ	0xFDD
 10831                           fsr2h	equ	0xFDA
 10832                           fsr2l	equ	0xFD9
 10833                           status	equ	0xFD8
 10834                           
 10835 ;; *************** function _vscp_getManufacturerId *****************
 10836 ;; Defined at:
 10837 ;;		line 2386 in file "../main.c"
 10838 ;; Parameters:    Size  Location     Type
 10839 ;;  idx             1    wreg     unsigned char 
 10840 ;; Auto vars:     Size  Location     Type
 10841 ;;  idx             1    9[COMRAM] unsigned char 
 10842 ;; Return value:  Size  Location     Type
 10843 ;;                  1    wreg      unsigned char 
 10844 ;; Registers used:
 10845 ;;		wreg, status,2, status,0, cstack
 10846 ;; Tracked objects:
 10847 ;;		On entry : 0/0
 10848 ;;		On exit  : 0/0
 10849 ;;		Unchanged: 0/0
 10850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10851 ;;      Params:         0       0       0       0       0       0       0
 10852 ;;      Locals:         1       0       0       0       0       0       0
 10853 ;;      Temps:          0       0       0       0       0       0       0
 10854 ;;      Totals:         1       0       0       0       0       0       0
 10855 ;;Total ram usage:        1 bytes
 10856 ;; Hardware stack levels used:    1
 10857 ;; Hardware stack levels required when called:    3
 10858 ;; This function calls:
 10859 ;;		_Read_b_eep
 10860 ;; This function is called by:
 10861 ;;		_vscp_readStdReg
 10862 ;;		_vscp_writeStdReg
 10863 ;; This function uses a non-reentrant model
 10864 ;;
 10865                           
 10866                           	psect	text34
 10867  003FC8                     __ptext34:
 10868                           	opt stack 0
 10869  003FC8                     _vscp_getManufacturerId:
 10870                           	opt stack 25
 10871                           
 10872                           ; BSR set to: 0
 10873                           ;incstack = 0
 10874                           ;incstack = 0
 10875                           ;vscp_getManufacturerId@idx stored from wreg
 10876  003FC8  CFE8 F00A          	movff	wreg,vscp_getManufacturerId@idx
 10877                           
 10878                           ;main.c: 2387: return Read_b_eep(0x0B + idx);
 10879  003FCC  0E0B               	movlw	11
 10880  003FCE  240A               	addwf	vscp_getManufacturerId@idx,w,c
 10881  003FD0  6E08               	movwf	?_Read_b_eep,c
 10882  003FD2  6A09               	clrf	?_Read_b_eep+1,c
 10883  003FD4  0E00               	movlw	0
 10884  003FD6  2209               	addwfc	?_Read_b_eep+1,f,c
 10885  003FD8  EF0B  F020         	goto	_Read_b_eep	;wreg free
 10886  003FDC                     __end_of_vscp_getManufacturerId:
 10887                           	opt stack 0
 10888                           tblptru	equ	0xFF8
 10889                           prodh	equ	0xFF4
 10890                           prodl	equ	0xFF3
 10891                           postinc0	equ	0xFEE
 10892                           wreg	equ	0xFE8
 10893                           indf2	equ	0xFDF
 10894                           postinc2	equ	0xFDE
 10895                           postdec2	equ	0xFDD
 10896                           fsr2h	equ	0xFDA
 10897                           fsr2l	equ	0xFD9
 10898                           status	equ	0xFD8
 10899                           
 10900 ;; *************** function _vscp_getUserID *****************
 10901 ;; Defined at:
 10902 ;;		line 2366 in file "../main.c"
 10903 ;; Parameters:    Size  Location     Type
 10904 ;;  idx             1    wreg     unsigned char 
 10905 ;; Auto vars:     Size  Location     Type
 10906 ;;  idx             1    9[COMRAM] unsigned char 
 10907 ;; Return value:  Size  Location     Type
 10908 ;;                  1    wreg      unsigned char 
 10909 ;; Registers used:
 10910 ;;		wreg, status,2, status,0, cstack
 10911 ;; Tracked objects:
 10912 ;;		On entry : 0/0
 10913 ;;		On exit  : 0/0
 10914 ;;		Unchanged: 0/0
 10915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10916 ;;      Params:         0       0       0       0       0       0       0
 10917 ;;      Locals:         1       0       0       0       0       0       0
 10918 ;;      Temps:          0       0       0       0       0       0       0
 10919 ;;      Totals:         1       0       0       0       0       0       0
 10920 ;;Total ram usage:        1 bytes
 10921 ;; Hardware stack levels used:    1
 10922 ;; Hardware stack levels required when called:    3
 10923 ;; This function calls:
 10924 ;;		_Read_b_eep
 10925 ;; This function is called by:
 10926 ;;		_vscp_readStdReg
 10927 ;;		_vscp_writeStdReg
 10928 ;; This function uses a non-reentrant model
 10929 ;;
 10930                           
 10931                           	psect	text35
 10932  003FDC                     __ptext35:
 10933                           	opt stack 0
 10934  003FDC                     _vscp_getUserID:
 10935                           	opt stack 25
 10936                           
 10937                           ;incstack = 0
 10938                           ;incstack = 0
 10939                           ;vscp_getUserID@idx stored from wreg
 10940  003FDC  CFE8 F00A          	movff	wreg,vscp_getUserID@idx
 10941                           
 10942                           ;main.c: 2367: return Read_b_eep(0x06 + idx);
 10943  003FE0  0E06               	movlw	6
 10944  003FE2  240A               	addwf	vscp_getUserID@idx,w,c
 10945  003FE4  6E08               	movwf	?_Read_b_eep,c
 10946  003FE6  6A09               	clrf	?_Read_b_eep+1,c
 10947  003FE8  0E00               	movlw	0
 10948  003FEA  2209               	addwfc	?_Read_b_eep+1,f,c
 10949  003FEC  EF0B  F020         	goto	_Read_b_eep	;wreg free
 10950  003FF0                     __end_of_vscp_getUserID:
 10951                           	opt stack 0
 10952                           tblptru	equ	0xFF8
 10953                           prodh	equ	0xFF4
 10954                           prodl	equ	0xFF3
 10955                           postinc0	equ	0xFEE
 10956                           wreg	equ	0xFE8
 10957                           indf2	equ	0xFDF
 10958                           postinc2	equ	0xFDE
 10959                           postdec2	equ	0xFDD
 10960                           fsr2h	equ	0xFDA
 10961                           fsr2l	equ	0xFD9
 10962                           status	equ	0xFD8
 10963                           
 10964 ;; *************** function _vscp_getMDF_URL *****************
 10965 ;; Defined at:
 10966 ;;		line 2357 in file "../main.c"
 10967 ;; Parameters:    Size  Location     Type
 10968 ;;  idx             1    wreg     unsigned char 
 10969 ;; Auto vars:     Size  Location     Type
 10970 ;;  idx             1    8[COMRAM] unsigned char 
 10971 ;; Return value:  Size  Location     Type
 10972 ;;                  1    wreg      unsigned char 
 10973 ;; Registers used:
 10974 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 10975 ;; Tracked objects:
 10976 ;;		On entry : F/0
 10977 ;;		On exit  : F/0
 10978 ;;		Unchanged: F/0
 10979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10980 ;;      Params:         0       0       0       0       0       0       0
 10981 ;;      Locals:         1       0       0       0       0       0       0
 10982 ;;      Temps:          1       0       0       0       0       0       0
 10983 ;;      Totals:         2       0       0       0       0       0       0
 10984 ;;Total ram usage:        2 bytes
 10985 ;; Hardware stack levels used:    1
 10986 ;; Hardware stack levels required when called:    2
 10987 ;; This function calls:
 10988 ;;		Nothing
 10989 ;; This function is called by:
 10990 ;;		_vscp_readStdReg
 10991 ;;		_vscp_handleProtocolEvent
 10992 ;; This function uses a non-reentrant model
 10993 ;;
 10994                           
 10995                           	psect	text36
 10996  003F56                     __ptext36:
 10997                           	opt stack 0
 10998  003F56                     _vscp_getMDF_URL:
 10999                           	opt stack 26
 11000                           
 11001                           ;incstack = 0
 11002                           ;incstack = 0
 11003                           ;vscp_getMDF_URL@idx stored from wreg
 11004  003F56  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 11005                           
 11006                           ; BSR set to: 0
 11007                           ;main.c: 2358: return vscp_deviceURL[ idx ];
 11008  003F5A  5009               	movf	vscp_getMDF_URL@idx,w,c
 11009  003F5C  0FBC               	addlw	low _vscp_deviceURL
 11010  003F5E  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 11011  003F60  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 11012  003F64  0E08               	movlw	high __smallconst
 11013  003F66  6EF7               	movwf	tblptrh,c
 11014  003F68  0008               	tblrd		*
 11015  003F6A  50F5               	movf	tablat,w,c
 11016                           
 11017                           ; BSR set to: 0
 11018  003F6C  0012               	return	
 11019  003F6E                     __end_of_vscp_getMDF_URL:
 11020                           	opt stack 0
 11021                           tblptru	equ	0xFF8
 11022                           tblptrh	equ	0xFF7
 11023                           tblptrl	equ	0xFF6
 11024                           tablat	equ	0xFF5
 11025                           prodh	equ	0xFF4
 11026                           prodl	equ	0xFF3
 11027                           postinc0	equ	0xFEE
 11028                           wreg	equ	0xFE8
 11029                           indf2	equ	0xFDF
 11030                           postinc2	equ	0xFDE
 11031                           postdec2	equ	0xFDD
 11032                           fsr2h	equ	0xFDA
 11033                           fsr2l	equ	0xFD9
 11034                           status	equ	0xFD8
 11035                           
 11036 ;; *************** function _vscp_getGUID *****************
 11037 ;; Defined at:
 11038 ;;		line 2345 in file "../main.c"
 11039 ;; Parameters:    Size  Location     Type
 11040 ;;  idx             1    wreg     unsigned char 
 11041 ;; Auto vars:     Size  Location     Type
 11042 ;;  idx             1    9[COMRAM] unsigned char 
 11043 ;; Return value:  Size  Location     Type
 11044 ;;                  1    wreg      unsigned char 
 11045 ;; Registers used:
 11046 ;;		wreg, status,2, status,0, cstack
 11047 ;; Tracked objects:
 11048 ;;		On entry : 0/0
 11049 ;;		On exit  : 0/0
 11050 ;;		Unchanged: 0/0
 11051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11052 ;;      Params:         0       0       0       0       0       0       0
 11053 ;;      Locals:         1       0       0       0       0       0       0
 11054 ;;      Temps:          0       0       0       0       0       0       0
 11055 ;;      Totals:         1       0       0       0       0       0       0
 11056 ;;Total ram usage:        1 bytes
 11057 ;; Hardware stack levels used:    1
 11058 ;; Hardware stack levels required when called:    3
 11059 ;; This function calls:
 11060 ;;		_Read_b_eep
 11061 ;; This function is called by:
 11062 ;;		_vscp_readStdReg
 11063 ;;		_vscp_writeStdReg
 11064 ;;		_vscp_handleProtocolEvent
 11065 ;; This function uses a non-reentrant model
 11066 ;;
 11067                           
 11068                           	psect	text37
 11069  003FF0                     __ptext37:
 11070                           	opt stack 0
 11071  003FF0                     _vscp_getGUID:
 11072                           	opt stack 25
 11073                           
 11074                           ; BSR set to: 0
 11075                           ;incstack = 0
 11076                           ;incstack = 0
 11077                           ;vscp_getGUID@idx stored from wreg
 11078  003FF0  CFE8 F00A          	movff	wreg,vscp_getGUID@idx
 11079                           
 11080                           ;main.c: 2346: return Read_b_eep(0x13 + idx);
 11081  003FF4  0E13               	movlw	19
 11082  003FF6  240A               	addwf	vscp_getGUID@idx,w,c
 11083  003FF8  6E08               	movwf	?_Read_b_eep,c
 11084  003FFA  6A09               	clrf	?_Read_b_eep+1,c
 11085  003FFC  0E00               	movlw	0
 11086  003FFE  2209               	addwfc	?_Read_b_eep+1,f,c
 11087  004000  EF0B  F020         	goto	_Read_b_eep	;wreg free
 11088  004004                     __end_of_vscp_getGUID:
 11089                           	opt stack 0
 11090                           tblptru	equ	0xFF8
 11091                           tblptrh	equ	0xFF7
 11092                           tblptrl	equ	0xFF6
 11093                           tablat	equ	0xFF5
 11094                           prodh	equ	0xFF4
 11095                           prodl	equ	0xFF3
 11096                           postinc0	equ	0xFEE
 11097                           wreg	equ	0xFE8
 11098                           indf2	equ	0xFDF
 11099                           postinc2	equ	0xFDE
 11100                           postdec2	equ	0xFDD
 11101                           fsr2h	equ	0xFDA
 11102                           fsr2l	equ	0xFD9
 11103                           status	equ	0xFD8
 11104                           
 11105 ;; *************** function _vscp_getSubMinorVersion *****************
 11106 ;; Defined at:
 11107 ;;		line 2334 in file "../main.c"
 11108 ;; Parameters:    Size  Location     Type
 11109 ;;		None
 11110 ;; Auto vars:     Size  Location     Type
 11111 ;;		None
 11112 ;; Return value:  Size  Location     Type
 11113 ;;                  1    wreg      unsigned char 
 11114 ;; Registers used:
 11115 ;;		wreg
 11116 ;; Tracked objects:
 11117 ;;		On entry : F/0
 11118 ;;		On exit  : F/0
 11119 ;;		Unchanged: F/0
 11120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11121 ;;      Params:         0       0       0       0       0       0       0
 11122 ;;      Locals:         0       0       0       0       0       0       0
 11123 ;;      Temps:          0       0       0       0       0       0       0
 11124 ;;      Totals:         0       0       0       0       0       0       0
 11125 ;;Total ram usage:        0 bytes
 11126 ;; Hardware stack levels used:    1
 11127 ;; Hardware stack levels required when called:    2
 11128 ;; This function calls:
 11129 ;;		Nothing
 11130 ;; This function is called by:
 11131 ;;		_vscp_readStdReg
 11132 ;; This function uses a non-reentrant model
 11133 ;;
 11134                           
 11135                           	psect	text38
 11136  004092                     __ptext38:
 11137                           	opt stack 0
 11138  004092                     _vscp_getSubMinorVersion:
 11139                           	opt stack 26
 11140                           
 11141                           ; BSR set to: 0
 11142                           
 11143                           ; BSR set to: 0
 11144                           ;main.c: 2335: return 2;
 11145                           
 11146                           ;incstack = 0
 11147                           ;incstack = 0
 11148  004092  0C02               	retlw	2
 11149  004094                     __end_of_vscp_getSubMinorVersion:
 11150                           	opt stack 0
 11151                           tblptru	equ	0xFF8
 11152                           tblptrh	equ	0xFF7
 11153                           tblptrl	equ	0xFF6
 11154                           tablat	equ	0xFF5
 11155                           prodh	equ	0xFF4
 11156                           prodl	equ	0xFF3
 11157                           postinc0	equ	0xFEE
 11158                           wreg	equ	0xFE8
 11159                           indf2	equ	0xFDF
 11160                           postinc2	equ	0xFDE
 11161                           postdec2	equ	0xFDD
 11162                           fsr2h	equ	0xFDA
 11163                           fsr2l	equ	0xFD9
 11164                           status	equ	0xFD8
 11165                           
 11166 ;; *************** function _vscp_getMinorVersion *****************
 11167 ;; Defined at:
 11168 ;;		line 2325 in file "../main.c"
 11169 ;; Parameters:    Size  Location     Type
 11170 ;;		None
 11171 ;; Auto vars:     Size  Location     Type
 11172 ;;		None
 11173 ;; Return value:  Size  Location     Type
 11174 ;;                  1    wreg      unsigned char 
 11175 ;; Registers used:
 11176 ;;		wreg
 11177 ;; Tracked objects:
 11178 ;;		On entry : F/0
 11179 ;;		On exit  : F/0
 11180 ;;		Unchanged: F/0
 11181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11182 ;;      Params:         0       0       0       0       0       0       0
 11183 ;;      Locals:         0       0       0       0       0       0       0
 11184 ;;      Temps:          0       0       0       0       0       0       0
 11185 ;;      Totals:         0       0       0       0       0       0       0
 11186 ;;Total ram usage:        0 bytes
 11187 ;; Hardware stack levels used:    1
 11188 ;; Hardware stack levels required when called:    2
 11189 ;; This function calls:
 11190 ;;		Nothing
 11191 ;; This function is called by:
 11192 ;;		_vscp_readStdReg
 11193 ;; This function uses a non-reentrant model
 11194 ;;
 11195                           
 11196                           	psect	text39
 11197  004094                     __ptext39:
 11198                           	opt stack 0
 11199  004094                     _vscp_getMinorVersion:
 11200                           	opt stack 26
 11201                           
 11202                           ; BSR set to: 0
 11203                           
 11204                           ; BSR set to: 0
 11205                           ;main.c: 2326: return 1;
 11206                           
 11207                           ; BSR set to: 0
 11208                           ;incstack = 0
 11209                           ;incstack = 0
 11210  004094  0C01               	retlw	1
 11211  004096                     __end_of_vscp_getMinorVersion:
 11212                           	opt stack 0
 11213                           tblptru	equ	0xFF8
 11214                           tblptrh	equ	0xFF7
 11215                           tblptrl	equ	0xFF6
 11216                           tablat	equ	0xFF5
 11217                           prodh	equ	0xFF4
 11218                           prodl	equ	0xFF3
 11219                           postinc0	equ	0xFEE
 11220                           wreg	equ	0xFE8
 11221                           indf2	equ	0xFDF
 11222                           postinc2	equ	0xFDE
 11223                           postdec2	equ	0xFDD
 11224                           fsr2h	equ	0xFDA
 11225                           fsr2l	equ	0xFD9
 11226                           status	equ	0xFD8
 11227                           
 11228 ;; *************** function _vscp_getMajorVersion *****************
 11229 ;; Defined at:
 11230 ;;		line 2316 in file "../main.c"
 11231 ;; Parameters:    Size  Location     Type
 11232 ;;		None
 11233 ;; Auto vars:     Size  Location     Type
 11234 ;;		None
 11235 ;; Return value:  Size  Location     Type
 11236 ;;                  1    wreg      unsigned char 
 11237 ;; Registers used:
 11238 ;;		wreg
 11239 ;; Tracked objects:
 11240 ;;		On entry : F/0
 11241 ;;		On exit  : F/0
 11242 ;;		Unchanged: F/0
 11243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11244 ;;      Params:         0       0       0       0       0       0       0
 11245 ;;      Locals:         0       0       0       0       0       0       0
 11246 ;;      Temps:          0       0       0       0       0       0       0
 11247 ;;      Totals:         0       0       0       0       0       0       0
 11248 ;;Total ram usage:        0 bytes
 11249 ;; Hardware stack levels used:    1
 11250 ;; Hardware stack levels required when called:    2
 11251 ;; This function calls:
 11252 ;;		Nothing
 11253 ;; This function is called by:
 11254 ;;		_vscp_readStdReg
 11255 ;; This function uses a non-reentrant model
 11256 ;;
 11257                           
 11258                           	psect	text40
 11259  004096                     __ptext40:
 11260                           	opt stack 0
 11261  004096                     _vscp_getMajorVersion:
 11262                           	opt stack 26
 11263                           
 11264                           ; BSR set to: 0
 11265                           
 11266                           ; BSR set to: 0
 11267                           ;main.c: 2317: return 1;
 11268                           
 11269                           ; BSR set to: 0
 11270                           ;incstack = 0
 11271                           ;incstack = 0
 11272  004096  0C01               	retlw	1
 11273  004098                     __end_of_vscp_getMajorVersion:
 11274                           	opt stack 0
 11275                           tblptru	equ	0xFF8
 11276                           tblptrh	equ	0xFF7
 11277                           tblptrl	equ	0xFF6
 11278                           tablat	equ	0xFF5
 11279                           prodh	equ	0xFF4
 11280                           prodl	equ	0xFF3
 11281                           postinc0	equ	0xFEE
 11282                           wreg	equ	0xFE8
 11283                           indf2	equ	0xFDF
 11284                           postinc2	equ	0xFDE
 11285                           postdec2	equ	0xFDD
 11286                           fsr2h	equ	0xFDA
 11287                           fsr2l	equ	0xFD9
 11288                           status	equ	0xFD8
 11289                           
 11290 ;; *************** function _vscp_newNodeOnline *****************
 11291 ;; Defined at:
 11292 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 11293 ;; Parameters:    Size  Location     Type
 11294 ;;		None
 11295 ;; Auto vars:     Size  Location     Type
 11296 ;;		None
 11297 ;; Return value:  Size  Location     Type
 11298 ;;		None               void
 11299 ;; Registers used:
 11300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11301 ;; Tracked objects:
 11302 ;;		On entry : F/0
 11303 ;;		On exit  : F/0
 11304 ;;		Unchanged: 0/0
 11305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11306 ;;      Params:         0       0       0       0       0       0       0
 11307 ;;      Locals:         0       0       0       0       0       0       0
 11308 ;;      Temps:          1       0       0       0       0       0       0
 11309 ;;      Totals:         1       0       0       0       0       0       0
 11310 ;;Total ram usage:        1 bytes
 11311 ;; Hardware stack levels used:    1
 11312 ;; Hardware stack levels required when called:    7
 11313 ;; This function calls:
 11314 ;;		_vscp_sendEvent
 11315 ;; This function is called by:
 11316 ;;		_vscp_handleProtocolEvent
 11317 ;; This function uses a non-reentrant model
 11318 ;;
 11319                           
 11320                           	psect	text41
 11321  003D08                     __ptext41:
 11322                           	opt stack 0
 11323  003D08                     _vscp_newNodeOnline:
 11324                           	opt stack 22
 11325                           
 11326                           ; BSR set to: 0
 11327                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 11328                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11329                           
 11330                           ; BSR set to: 0
 11331                           ;incstack = 0
 11332                           ;incstack = 0
 11333  003D08  C096  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 11334  003D0C  0E0F               	movlw	15
 11335  003D0E  164C               	andwf	??_vscp_newNodeOnline,f,c
 11336  003D10  044C               	decf	??_vscp_newNodeOnline,w,c
 11337  003D12  E10E               	bnz	l1090
 11338                           
 11339                           ; BSR set to: 0
 11340  003D14  5191               	movf	_vscp_nickname& (0+255),w,b
 11341  003D16  EE20  F09C         	lfsr	2,_vscp_imsg+6
 11342  003D1A  62DF               	cpfseq	indf2,c
 11343  003D1C  D009               	goto	l1090
 11344                           
 11345                           ; BSR set to: 0
 11346                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 11347  003D1E  0E80               	movlw	128
 11348  003D20  6FA4               	movwf	_vscp_omsg& (0+255),b
 11349                           
 11350                           ; BSR set to: 0
 11351                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 11352  003D22  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 11353                           
 11354                           ; BSR set to: 0
 11355                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 11356  003D24  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 11357  003D26  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 11358                           
 11359                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 11360  003D28  0E03               	movlw	3
 11361  003D2A  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 11362                           
 11363                           ; BSR set to: 0
 11364                           ;vscp_firmware.c: 514: vscp_sendEvent();
 11365  003D2C  ECFB  F01E         	call	_vscp_sendEvent	;wreg free
 11366  003D30                     l1090:
 11367                           
 11368                           ; BSR set to: 0
 11369  003D30  0012               	return	
 11370  003D32                     __end_of_vscp_newNodeOnline:
 11371                           	opt stack 0
 11372                           tblptru	equ	0xFF8
 11373                           tblptrh	equ	0xFF7
 11374                           tblptrl	equ	0xFF6
 11375                           tablat	equ	0xFF5
 11376                           prodh	equ	0xFF4
 11377                           prodl	equ	0xFF3
 11378                           postinc0	equ	0xFEE
 11379                           wreg	equ	0xFE8
 11380                           indf2	equ	0xFDF
 11381                           postinc2	equ	0xFDE
 11382                           postdec2	equ	0xFDD
 11383                           fsr2h	equ	0xFDA
 11384                           fsr2l	equ	0xFD9
 11385                           status	equ	0xFD8
 11386                           
 11387 ;; *************** function _vscp_handleDropNickname *****************
 11388 ;; Defined at:
 11389 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 11390 ;; Parameters:    Size  Location     Type
 11391 ;;		None
 11392 ;; Auto vars:     Size  Location     Type
 11393 ;;  bytes           1   12[COMRAM] unsigned char 
 11394 ;; Return value:  Size  Location     Type
 11395 ;;		None               void
 11396 ;; Registers used:
 11397 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11398 ;; Tracked objects:
 11399 ;;		On entry : F/0
 11400 ;;		On exit  : F/0
 11401 ;;		Unchanged: 0/0
 11402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11403 ;;      Params:         0       0       0       0       0       0       0
 11404 ;;      Locals:         1       0       0       0       0       0       0
 11405 ;;      Temps:          0       0       0       0       0       0       0
 11406 ;;      Totals:         1       0       0       0       0       0       0
 11407 ;;Total ram usage:        1 bytes
 11408 ;; Hardware stack levels used:    1
 11409 ;; Hardware stack levels required when called:    5
 11410 ;; This function calls:
 11411 ;;		_vscp_init
 11412 ;;		_vscp_writeNicknamePermanent
 11413 ;; This function is called by:
 11414 ;;		_vscp_handleProtocolEvent
 11415 ;; This function uses a non-reentrant model
 11416 ;;
 11417                           
 11418                           	psect	text42
 11419  003C7C                     __ptext42:
 11420                           	opt stack 0
 11421  003C7C                     _vscp_handleDropNickname:
 11422                           	opt stack 24
 11423                           
 11424                           ; BSR set to: 0
 11425                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 11426                           
 11427                           ; BSR set to: 0
 11428                           ;incstack = 0
 11429                           ;incstack = 0
 11430  003C7C  5196               	movf	_vscp_imsg& (0+255),w,b
 11431  003C7E  0B0F               	andlw	15
 11432  003C80  6E0D               	movwf	vscp_handleDropNickname@bytes,c
 11433                           
 11434                           ; BSR set to: 0
 11435                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11436  003C82  500D               	movf	vscp_handleDropNickname@bytes,w,c
 11437  003C84  E012               	bz	l1086
 11438                           
 11439                           ; BSR set to: 0
 11440  003C86  5191               	movf	_vscp_nickname& (0+255),w,b
 11441  003C88  EE20  F09C         	lfsr	2,_vscp_imsg+6
 11442  003C8C  62DF               	cpfseq	indf2,c
 11443  003C8E  D00D               	goto	l1086
 11444                           
 11445                           ; BSR set to: 0
 11446                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 11447  003C90  040D               	decf	vscp_handleDropNickname@bytes,w,c
 11448  003C92  E005               	bz	l1085
 11449                           
 11450                           ; BSR set to: 0
 11451  003C94  0E01               	movlw	1
 11452  003C96  640D               	cpfsgt	vscp_handleDropNickname@bytes,c
 11453  003C98  D008               	goto	l1086
 11454                           
 11455                           ; BSR set to: 0
 11456  003C9A  679D               	tstfsz	(_vscp_imsg+7)& (0+255),b
 11457  003C9C  D006               	goto	l1086
 11458  003C9E                     l1085:
 11459                           
 11460                           ; BSR set to: 0
 11461                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 11462  003C9E  6991               	setf	_vscp_nickname& (0+255),b
 11463                           
 11464                           ; BSR set to: 0
 11465                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 11466  003CA0  0EFF               	movlw	255
 11467  003CA2  ECD9  F01F         	call	_vscp_writeNicknamePermanent
 11468                           
 11469                           ;vscp_firmware.c: 481: vscp_init();
 11470  003CA6  ECC4  F01D         	call	_vscp_init	;wreg free
 11471  003CAA                     l1086:
 11472                           
 11473                           ; BSR set to: 0
 11474  003CAA  0012               	return	
 11475  003CAC                     __end_of_vscp_handleDropNickname:
 11476                           	opt stack 0
 11477                           tblptru	equ	0xFF8
 11478                           tblptrh	equ	0xFF7
 11479                           tblptrl	equ	0xFF6
 11480                           tablat	equ	0xFF5
 11481                           prodh	equ	0xFF4
 11482                           prodl	equ	0xFF3
 11483                           postinc0	equ	0xFEE
 11484                           wreg	equ	0xFE8
 11485                           indf2	equ	0xFDF
 11486                           postinc2	equ	0xFDE
 11487                           postdec2	equ	0xFDD
 11488                           fsr2h	equ	0xFDA
 11489                           fsr2l	equ	0xFD9
 11490                           status	equ	0xFD8
 11491                           
 11492 ;; *************** function _vscp_init *****************
 11493 ;; Defined at:
 11494 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 11495 ;; Parameters:    Size  Location     Type
 11496 ;;		None
 11497 ;; Auto vars:     Size  Location     Type
 11498 ;;		None
 11499 ;; Return value:  Size  Location     Type
 11500 ;;		None               void
 11501 ;; Registers used:
 11502 ;;		wreg, status,2, cstack
 11503 ;; Tracked objects:
 11504 ;;		On entry : 0/0
 11505 ;;		On exit  : F/0
 11506 ;;		Unchanged: 0/0
 11507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11508 ;;      Params:         0       0       0       0       0       0       0
 11509 ;;      Locals:         0       0       0       0       0       0       0
 11510 ;;      Temps:          0       0       0       0       0       0       0
 11511 ;;      Totals:         0       0       0       0       0       0       0
 11512 ;;Total ram usage:        0 bytes
 11513 ;; Hardware stack levels used:    1
 11514 ;; Hardware stack levels required when called:    4
 11515 ;; This function calls:
 11516 ;;		_vscp_readNicknamePermanent
 11517 ;; This function is called by:
 11518 ;;		_main
 11519 ;;		_vscp_handleDropNickname
 11520 ;;		_vscp_handleProtocolEvent
 11521 ;; This function uses a non-reentrant model
 11522 ;;
 11523                           
 11524                           	psect	text43
 11525  003B88                     __ptext43:
 11526                           	opt stack 0
 11527  003B88                     _vscp_init:
 11528                           	opt stack 24
 11529                           
 11530                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 11531                           
 11532                           ; BSR set to: 0
 11533                           ;incstack = 0
 11534                           ;incstack = 0
 11535  003B88  0E02               	movlw	2
 11536  003B8A  6E56               	movwf	_vscp_initledfunc,c
 11537                           
 11538                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 11539  003B8C  EC31  F020         	call	_vscp_readNicknamePermanent	;wreg free
 11540  003B90  0100               	movlb	0	; () banked
 11541  003B92  6F91               	movwf	_vscp_nickname& (0+255),b
 11542                           
 11543                           ; BSR set to: 0
 11544                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 11545  003B94  6791               	tstfsz	_vscp_nickname& (0+255),b
 11546  003B96  D001               	goto	l1027
 11547                           
 11548                           ; BSR set to: 0
 11549  003B98  6991               	setf	_vscp_nickname& (0+255),b
 11550  003B9A                     l1027:
 11551                           
 11552                           ; BSR set to: 0
 11553                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 11554  003B9A  6B96               	clrf	_vscp_imsg& (0+255),b
 11555                           
 11556                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 11557  003B9C  6B97               	clrf	(_vscp_imsg+1)& (0+255),b
 11558                           
 11559                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 11560  003B9E  6B98               	clrf	(_vscp_imsg+2)& (0+255),b
 11561  003BA0  6B99               	clrf	(_vscp_imsg+3)& (0+255),b
 11562                           
 11563                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 11564  003BA2  6B9A               	clrf	(_vscp_imsg+4)& (0+255),b
 11565                           
 11566                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 11567  003BA4  6BA4               	clrf	_vscp_omsg& (0+255),b
 11568                           
 11569                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 11570  003BA6  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 11571                           
 11572                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 11573  003BA8  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 11574  003BAA  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 11575                           
 11576                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 11577  003BAC  6BA8               	clrf	(_vscp_omsg+4)& (0+255),b
 11578                           
 11579                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 11580  003BAE  6A55               	clrf	_vscp_alarmstatus,c
 11581                           
 11582                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 11583  003BB0  6A57               	clrf	_vscp_probe_address,c
 11584                           
 11585                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 11586  003BB2  6B92               	clrf	_vscp_node_state& (0+255),b
 11587                           
 11588                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 11589  003BB4  6B93               	clrf	_vscp_node_substate& (0+255),b
 11590                           
 11591                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 11592  003BB6  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 11593                           
 11594                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 11595  003BB8  6A52               	clrf	_vscp_page_select,c
 11596  003BBA  6A53               	clrf	_vscp_page_select+1,c
 11597                           
 11598                           ;vscp_firmware.c: 153: vscp_timer = 0;
 11599  003BBC  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 11600  003BBE  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 11601                           
 11602                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 11603  003BC0  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
 11604  003BC2  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 11605                           
 11606                           ;vscp_firmware.c: 155: vscp_second = 0;
 11607  003BC4  6B95               	clrf	_vscp_second& (0+255),b
 11608                           
 11609                           ;vscp_firmware.c: 156: vscp_minute = 0;
 11610  003BC6  6B90               	clrf	_vscp_minute& (0+255),b
 11611                           
 11612                           ;vscp_firmware.c: 157: vscp_hour = 0;
 11613  003BC8  6B8E               	clrf	_vscp_hour& (0+255),b
 11614                           
 11615                           ; BSR set to: 0
 11616  003BCA  0012               	return	
 11617  003BCC                     __end_of_vscp_init:
 11618                           	opt stack 0
 11619                           tblptru	equ	0xFF8
 11620                           tblptrh	equ	0xFF7
 11621                           tblptrl	equ	0xFF6
 11622                           tablat	equ	0xFF5
 11623                           prodh	equ	0xFF4
 11624                           prodl	equ	0xFF3
 11625                           postinc0	equ	0xFEE
 11626                           wreg	equ	0xFE8
 11627                           indf2	equ	0xFDF
 11628                           postinc2	equ	0xFDE
 11629                           postdec2	equ	0xFDD
 11630                           fsr2h	equ	0xFDA
 11631                           fsr2l	equ	0xFD9
 11632                           status	equ	0xFD8
 11633                           
 11634 ;; *************** function _vscp_readNicknamePermanent *****************
 11635 ;; Defined at:
 11636 ;;		line 847 in file "../main.c"
 11637 ;; Parameters:    Size  Location     Type
 11638 ;;		None
 11639 ;; Auto vars:     Size  Location     Type
 11640 ;;		None
 11641 ;; Return value:  Size  Location     Type
 11642 ;;                  1    wreg      unsigned char 
 11643 ;; Registers used:
 11644 ;;		wreg, status,2, cstack
 11645 ;; Tracked objects:
 11646 ;;		On entry : 0/0
 11647 ;;		On exit  : 0/0
 11648 ;;		Unchanged: 0/0
 11649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11650 ;;      Params:         0       0       0       0       0       0       0
 11651 ;;      Locals:         0       0       0       0       0       0       0
 11652 ;;      Temps:          0       0       0       0       0       0       0
 11653 ;;      Totals:         0       0       0       0       0       0       0
 11654 ;;Total ram usage:        0 bytes
 11655 ;; Hardware stack levels used:    1
 11656 ;; Hardware stack levels required when called:    3
 11657 ;; This function calls:
 11658 ;;		_Read_b_eep
 11659 ;; This function is called by:
 11660 ;;		_vscp_init
 11661 ;; This function uses a non-reentrant model
 11662 ;;
 11663                           
 11664                           	psect	text44
 11665  004062                     __ptext44:
 11666                           	opt stack 0
 11667  004062                     _vscp_readNicknamePermanent:
 11668                           	opt stack 24
 11669                           
 11670                           ;main.c: 848: return Read_b_eep(0x01);
 11671                           
 11672                           ; BSR set to: 0
 11673                           ;incstack = 0
 11674                           ;incstack = 0
 11675  004062  6A09               	clrf	?_Read_b_eep+1,c
 11676  004064  0E01               	movlw	1
 11677  004066  6E08               	movwf	?_Read_b_eep,c
 11678  004068  EF0B  F020         	goto	_Read_b_eep	;wreg free
 11679  00406C                     __end_of_vscp_readNicknamePermanent:
 11680                           	opt stack 0
 11681                           tblptru	equ	0xFF8
 11682                           tblptrh	equ	0xFF7
 11683                           tblptrl	equ	0xFF6
 11684                           tablat	equ	0xFF5
 11685                           prodh	equ	0xFF4
 11686                           prodl	equ	0xFF3
 11687                           postinc0	equ	0xFEE
 11688                           wreg	equ	0xFE8
 11689                           indf2	equ	0xFDF
 11690                           postinc2	equ	0xFDE
 11691                           postdec2	equ	0xFDD
 11692                           fsr2h	equ	0xFDA
 11693                           fsr2l	equ	0xFD9
 11694                           status	equ	0xFD8
 11695                           
 11696 ;; *************** function _vscp_handleSetNickname *****************
 11697 ;; Defined at:
 11698 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 11699 ;; Parameters:    Size  Location     Type
 11700 ;;		None
 11701 ;; Auto vars:     Size  Location     Type
 11702 ;;		None
 11703 ;; Return value:  Size  Location     Type
 11704 ;;		None               void
 11705 ;; Registers used:
 11706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11707 ;; Tracked objects:
 11708 ;;		On entry : F/0
 11709 ;;		On exit  : 0/0
 11710 ;;		Unchanged: 0/0
 11711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11712 ;;      Params:         0       0       0       0       0       0       0
 11713 ;;      Locals:         0       0       0       0       0       0       0
 11714 ;;      Temps:          0       0       0       0       0       0       0
 11715 ;;      Totals:         0       0       0       0       0       0       0
 11716 ;;Total ram usage:        0 bytes
 11717 ;; Hardware stack levels used:    1
 11718 ;; Hardware stack levels required when called:    4
 11719 ;; This function calls:
 11720 ;;		_vscp_writeNicknamePermanent
 11721 ;;		_vscp_setSegmentCRC
 11722 ;; This function is called by:
 11723 ;;		_vscp_handleProtocolEvent
 11724 ;; This function uses a non-reentrant model
 11725 ;;
 11726                           
 11727                           	psect	text45
 11728  003E1C                     __ptext45:
 11729                           	opt stack 0
 11730  003E1C                     _vscp_handleSetNickname:
 11731                           	opt stack 25
 11732                           
 11733                           ; BSR set to: 0
 11734                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 11735                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11736                           
 11737                           ;incstack = 0
 11738                           ;incstack = 0
 11739  003E1C  5196               	movf	_vscp_imsg& (0+255),w,b
 11740  003E1E  0B0F               	andlw	15
 11741  003E20  0A02               	xorlw	2
 11742  003E22  E10D               	bnz	l1079
 11743                           
 11744                           ; BSR set to: 0
 11745  003E24  5191               	movf	_vscp_nickname& (0+255),w,b
 11746  003E26  EE20  F09C         	lfsr	2,_vscp_imsg+6
 11747  003E2A  62DF               	cpfseq	indf2,c
 11748  003E2C  D008               	goto	l1079
 11749                           
 11750                           ; BSR set to: 0
 11751                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 11752  003E2E  C09D  F091         	movff	_vscp_imsg+7,_vscp_nickname
 11753                           
 11754                           ; BSR set to: 0
 11755                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 11756  003E32  5191               	movf	_vscp_nickname& (0+255),w,b
 11757  003E34  ECD9  F01F         	call	_vscp_writeNicknamePermanent
 11758                           
 11759                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 11760  003E38  0E40               	movlw	64
 11761  003E3A  ECCE  F01F         	call	_vscp_setSegmentCRC
 11762  003E3E                     l1079:
 11763  003E3E  0012               	return	
 11764  003E40                     __end_of_vscp_handleSetNickname:
 11765                           	opt stack 0
 11766                           tblptru	equ	0xFF8
 11767                           tblptrh	equ	0xFF7
 11768                           tblptrl	equ	0xFF6
 11769                           tablat	equ	0xFF5
 11770                           prodh	equ	0xFF4
 11771                           prodl	equ	0xFF3
 11772                           postinc0	equ	0xFEE
 11773                           wreg	equ	0xFE8
 11774                           indf2	equ	0xFDF
 11775                           postinc2	equ	0xFDE
 11776                           postdec2	equ	0xFDD
 11777                           fsr2h	equ	0xFDA
 11778                           fsr2l	equ	0xFD9
 11779                           status	equ	0xFD8
 11780                           
 11781 ;; *************** function _vscp_handleHeartbeat *****************
 11782 ;; Defined at:
 11783 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 11784 ;; Parameters:    Size  Location     Type
 11785 ;;		None
 11786 ;; Auto vars:     Size  Location     Type
 11787 ;;		None
 11788 ;; Return value:  Size  Location     Type
 11789 ;;		None               void
 11790 ;; Registers used:
 11791 ;;		wreg, status,2, status,0, cstack
 11792 ;; Tracked objects:
 11793 ;;		On entry : F/0
 11794 ;;		On exit  : 0/0
 11795 ;;		Unchanged: 0/0
 11796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11797 ;;      Params:         0       0       0       0       0       0       0
 11798 ;;      Locals:         0       0       0       0       0       0       0
 11799 ;;      Temps:          0       0       0       0       0       0       0
 11800 ;;      Totals:         0       0       0       0       0       0       0
 11801 ;;Total ram usage:        0 bytes
 11802 ;; Hardware stack levels used:    1
 11803 ;; Hardware stack levels required when called:    4
 11804 ;; This function calls:
 11805 ;;		_vscp_writeNicknamePermanent
 11806 ;;		_vscp_getSegmentCRC
 11807 ;;		_vscp_setSegmentCRC
 11808 ;; This function is called by:
 11809 ;;		_vscp_handleProtocolEvent
 11810 ;; This function uses a non-reentrant model
 11811 ;;
 11812                           
 11813                           	psect	text46
 11814  003BCC                     __ptext46:
 11815                           	opt stack 0
 11816  003BCC                     _vscp_handleHeartbeat:
 11817                           	opt stack 25
 11818                           
 11819                           ; BSR set to: 0
 11820                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 11821                           
 11822                           ;incstack = 0
 11823                           ;incstack = 0
 11824  003BCC  EC36  F020         	call	_vscp_getSegmentCRC	;wreg free
 11825  003BD0  0900               	iorlw	0
 11826  003BD2  E116               	bnz	l9326
 11827                           
 11828                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 11829                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 11830  003BD4  0100               	movlb	0	; () banked
 11831  003BD6  5196               	movf	_vscp_imsg& (0+255),w,b
 11832  003BD8  0B0F               	andlw	15
 11833  003BDA  0A05               	xorlw	5
 11834  003BDC  E115               	bnz	l1075
 11835                           
 11836                           ; BSR set to: 0
 11837  003BDE  EC36  F020         	call	_vscp_getSegmentCRC	;wreg free
 11838  003BE2  0100               	movlb	0	; () banked
 11839  003BE4  199C               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 11840  003BE6  E010               	bz	l1075
 11841                           
 11842                           ; BSR set to: 0
 11843                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 11844  003BE8  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 11845  003BEA  ECCE  F01F         	call	_vscp_setSegmentCRC
 11846                           
 11847                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 11848  003BEE  0100               	movlb	0	; () banked
 11849  003BF0  6991               	setf	_vscp_nickname& (0+255),b
 11850                           
 11851                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 11852  003BF2  0EFF               	movlw	255
 11853  003BF4  ECD9  F01F         	call	_vscp_writeNicknamePermanent
 11854                           
 11855                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 11856  003BF8  0E01               	movlw	1
 11857  003BFA  0100               	movlb	0	; () banked
 11858  003BFC  6F92               	movwf	_vscp_node_state& (0+255),b
 11859  003BFE  D004               	goto	l1075
 11860  003C00                     l9326:
 11861                           
 11862                           ;vscp_firmware.c: 411: else {
 11863                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 11864  003C00  0100               	movlb	0	; () banked
 11865  003C02  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 11866  003C04  ECCE  F01F         	call	_vscp_setSegmentCRC
 11867  003C08                     l1075:
 11868  003C08  0012               	return	
 11869  003C0A                     __end_of_vscp_handleHeartbeat:
 11870                           	opt stack 0
 11871                           tblptru	equ	0xFF8
 11872                           tblptrh	equ	0xFF7
 11873                           tblptrl	equ	0xFF6
 11874                           tablat	equ	0xFF5
 11875                           prodh	equ	0xFF4
 11876                           prodl	equ	0xFF3
 11877                           postinc0	equ	0xFEE
 11878                           wreg	equ	0xFE8
 11879                           indf2	equ	0xFDF
 11880                           postinc2	equ	0xFDE
 11881                           postdec2	equ	0xFDD
 11882                           fsr2h	equ	0xFDA
 11883                           fsr2l	equ	0xFD9
 11884                           status	equ	0xFD8
 11885                           
 11886 ;; *************** function _vscp_getMatrixInfo *****************
 11887 ;; Defined at:
 11888 ;;		line 2526 in file "../main.c"
 11889 ;; Parameters:    Size  Location     Type
 11890 ;;  pData           1    wreg     PTR unsigned char 
 11891 ;;		 -> vscp_omsg(13), 
 11892 ;; Auto vars:     Size  Location     Type
 11893 ;;  pData           1    0[COMRAM] PTR unsigned char 
 11894 ;;		 -> vscp_omsg(13), 
 11895 ;;  i               1    7[COMRAM] unsigned char 
 11896 ;; Return value:  Size  Location     Type
 11897 ;;		None               void
 11898 ;; Registers used:
 11899 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11900 ;; Tracked objects:
 11901 ;;		On entry : F/0
 11902 ;;		On exit  : F/0
 11903 ;;		Unchanged: 0/0
 11904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11905 ;;      Params:         0       0       0       0       0       0       0
 11906 ;;      Locals:         1       0       0       0       0       0       0
 11907 ;;      Temps:          0       0       0       0       0       0       0
 11908 ;;      Totals:         1       0       0       0       0       0       0
 11909 ;;Total ram usage:        1 bytes
 11910 ;; Hardware stack levels used:    1
 11911 ;; Hardware stack levels required when called:    2
 11912 ;; This function calls:
 11913 ;;		Nothing
 11914 ;; This function is called by:
 11915 ;;		_vscp_handleProtocolEvent
 11916 ;; This function uses a non-reentrant model
 11917 ;;
 11918                           
 11919                           	psect	text47
 11920  003EA8                     __ptext47:
 11921                           	opt stack 0
 11922  003EA8                     _vscp_getMatrixInfo:
 11923                           	opt stack 27
 11924                           
 11925                           ; BSR set to: 0
 11926                           ;main.c: 2527: uint8_t i;
 11927                           ;main.c: 2529: vscp_omsg.data[ 0 ] = 7;
 11928                           
 11929                           ;incstack = 0
 11930                           ;incstack = 0
 11931  003EA8  0E07               	movlw	7
 11932  003EAA  6FA9               	movwf	(_vscp_omsg+5)& (0+255),b
 11933                           
 11934                           ;main.c: 2530: vscp_omsg.data[ 1 ] = 72;
 11935  003EAC  0E48               	movlw	72
 11936  003EAE  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
 11937                           
 11938                           ;main.c: 2533: for ( i = 2; i < 8; i++ ) {
 11939  003EB0  0E02               	movlw	2
 11940  003EB2  6E08               	movwf	vscp_getMatrixInfo@i,c
 11941  003EB4                     l6760:
 11942                           
 11943                           ; BSR set to: 0
 11944                           ;main.c: 2534: vscp_omsg.data[ i ] = 0;
 11945  003EB4  5008               	movf	vscp_getMatrixInfo@i,w,c
 11946  003EB6  0FA9               	addlw	low (_vscp_omsg+5)
 11947  003EB8  6ED9               	movwf	fsr2l,c
 11948  003EBA  6ADA               	clrf	fsr2h,c
 11949  003EBC  6ADF               	clrf	indf2,c
 11950                           
 11951                           ; BSR set to: 0
 11952  003EBE  2A08               	incf	vscp_getMatrixInfo@i,f,c
 11953                           
 11954                           ; BSR set to: 0
 11955  003EC0  0E07               	movlw	7
 11956  003EC2  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 11957  003EC4  D7F7               	goto	l6760
 11958                           
 11959                           ; BSR set to: 0
 11960  003EC6  0C07               	retlw	7
 11961  003EC8                     __end_of_vscp_getMatrixInfo:
 11962                           	opt stack 0
 11963                           tblptru	equ	0xFF8
 11964                           tblptrh	equ	0xFF7
 11965                           tblptrl	equ	0xFF6
 11966                           tablat	equ	0xFF5
 11967                           prodh	equ	0xFF4
 11968                           prodl	equ	0xFF3
 11969                           postinc0	equ	0xFEE
 11970                           wreg	equ	0xFE8
 11971                           indf2	equ	0xFDF
 11972                           postinc2	equ	0xFDE
 11973                           postdec2	equ	0xFDD
 11974                           fsr2h	equ	0xFDA
 11975                           fsr2l	equ	0xFD9
 11976                           status	equ	0xFD8
 11977                           
 11978 ;; *************** function _vscp_goBootloaderMode *****************
 11979 ;; Defined at:
 11980 ;;		line 2510 in file "../main.c"
 11981 ;; Parameters:    Size  Location     Type
 11982 ;;  algorithm       1    wreg     unsigned char 
 11983 ;; Auto vars:     Size  Location     Type
 11984 ;;  algorithm       1   11[COMRAM] unsigned char 
 11985 ;; Return value:  Size  Location     Type
 11986 ;;		None               void
 11987 ;; Registers used:
 11988 ;;		wreg, status,2, status,0, cstack
 11989 ;; Tracked objects:
 11990 ;;		On entry : F/0
 11991 ;;		On exit  : 0/0
 11992 ;;		Unchanged: 0/0
 11993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11994 ;;      Params:         0       0       0       0       0       0       0
 11995 ;;      Locals:         1       0       0       0       0       0       0
 11996 ;;      Temps:          0       0       0       0       0       0       0
 11997 ;;      Totals:         1       0       0       0       0       0       0
 11998 ;;Total ram usage:        1 bytes
 11999 ;; Hardware stack levels used:    1
 12000 ;; Hardware stack levels required when called:    3
 12001 ;; This function calls:
 12002 ;;		_Busy_eep
 12003 ;;		_Write_b_eep
 12004 ;; This function is called by:
 12005 ;;		_vscp_handleProtocolEvent
 12006 ;; This function uses a non-reentrant model
 12007 ;;
 12008                           
 12009                           	psect	text48
 12010  003F20                     __ptext48:
 12011                           	opt stack 0
 12012  003F20                     _vscp_goBootloaderMode:
 12013                           	opt stack 26
 12014                           
 12015                           ; BSR set to: 0
 12016                           ;incstack = 0
 12017                           ;incstack = 0
 12018                           ;vscp_goBootloaderMode@algorithm stored from wreg
 12019  003F20  CFE8 F00C          	movff	wreg,vscp_goBootloaderMode@algorithm
 12020                           
 12021                           ; BSR set to: 0
 12022                           ;main.c: 2511: if ( 0x01 != algorithm ) return;
 12023  003F24  040C               	decf	vscp_goBootloaderMode@algorithm,w,c
 12024  003F26  E109               	bnz	l630
 12025                           
 12026                           ; BSR set to: 0
 12027                           ;main.c: 2515: (Busy_eep(), Write_b_eep(0x00,0xff));
 12028  003F28  EC3F  F020         	call	_Busy_eep	;wreg free
 12029  003F2C  6A09               	clrf	?_Write_b_eep+1,c
 12030  003F2E  6A08               	clrf	?_Write_b_eep,c
 12031  003F30  0EFF               	movlw	255
 12032  003F32  680A               	setf	?_Write_b_eep+2,c
 12033  003F34  EC24  F01E         	call	_Write_b_eep	;wreg free
 12034  003F38  00FF               	reset		;# 
 12035  003F3A                     l630:
 12036  003F3A  0012               	return	
 12037  003F3C                     __end_of_vscp_goBootloaderMode:
 12038                           	opt stack 0
 12039                           tblptru	equ	0xFF8
 12040                           tblptrh	equ	0xFF7
 12041                           tblptrl	equ	0xFF6
 12042                           tablat	equ	0xFF5
 12043                           prodh	equ	0xFF4
 12044                           prodl	equ	0xFF3
 12045                           postinc0	equ	0xFEE
 12046                           wreg	equ	0xFE8
 12047                           indf2	equ	0xFDF
 12048                           postinc2	equ	0xFDE
 12049                           postdec2	equ	0xFDD
 12050                           fsr2h	equ	0xFDA
 12051                           fsr2l	equ	0xFD9
 12052                           status	equ	0xFD8
 12053                           
 12054 ;; *************** function _vscp_handleProbeState *****************
 12055 ;; Defined at:
 12056 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 12057 ;; Parameters:    Size  Location     Type
 12058 ;;		None
 12059 ;; Auto vars:     Size  Location     Type
 12060 ;;		None
 12061 ;; Return value:  Size  Location     Type
 12062 ;;		None               void
 12063 ;; Registers used:
 12064 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12065 ;; Tracked objects:
 12066 ;;		On entry : 0/0
 12067 ;;		On exit  : F/0
 12068 ;;		Unchanged: 0/0
 12069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12070 ;;      Params:         0       0       0       0       0       0       0
 12071 ;;      Locals:         0       0       0       0       0       0       0
 12072 ;;      Temps:          0       0       0       0       0       0       0
 12073 ;;      Totals:         0       0       0       0       0       0       0
 12074 ;;Total ram usage:        0 bytes
 12075 ;; Hardware stack levels used:    1
 12076 ;; Hardware stack levels required when called:    8
 12077 ;; This function calls:
 12078 ;;		_vscp_goActiveState
 12079 ;;		_vscp_writeNicknamePermanent
 12080 ;;		_vscp_sendEvent
 12081 ;;		_vscp_setSegmentCRC
 12082 ;; This function is called by:
 12083 ;;		_main
 12084 ;; This function uses a non-reentrant model
 12085 ;;
 12086                           
 12087                           	psect	text49
 12088  00368A                     __ptext49:
 12089                           	opt stack 0
 12090  00368A                     _vscp_handleProbeState:
 12091                           	opt stack 22
 12092                           
 12093                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 12094                           
 12095                           ;incstack = 0
 12096                           ;incstack = 0
 12097  00368A  D053               	goto	l7700
 12098  00368C                     l7630:
 12099                           
 12100                           ; BSR set to: 0
 12101                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 12102  00368C  2857               	incf	_vscp_probe_address,w,c
 12103  00368E  E010               	bz	l7646
 12104                           
 12105                           ; BSR set to: 0
 12106                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 12107  003690  0E81               	movlw	129
 12108  003692  6FA4               	movwf	_vscp_omsg& (0+255),b
 12109                           
 12110                           ; BSR set to: 0
 12111                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 12112  003694  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12113                           
 12114                           ; BSR set to: 0
 12115                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 12116  003696  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12117  003698  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12118                           
 12119                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 12120  00369A  0E02               	movlw	2
 12121  00369C  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12122                           
 12123                           ; BSR set to: 0
 12124                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 12125  00369E  C057  F0A9         	movff	_vscp_probe_address,_vscp_omsg+5
 12126                           
 12127                           ; BSR set to: 0
 12128                           ;vscp_firmware.c: 216: vscp_sendEvent();
 12129  0036A2  ECFB  F01E         	call	_vscp_sendEvent	;wreg free
 12130                           
 12131                           ; BSR set to: 0
 12132                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 12133  0036A6  0E01               	movlw	1
 12134  0036A8  6F93               	movwf	_vscp_node_substate& (0+255),b
 12135  0036AA                     l7644:
 12136                           
 12137                           ; BSR set to: 0
 12138                           ;vscp_firmware.c: 219: vscp_timer = 0;
 12139  0036AA  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12140  0036AC  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12141                           
 12142                           ;vscp_firmware.c: 221: }
 12143  0036AE  D048               	goto	l1042
 12144  0036B0                     l7646:
 12145                           
 12146                           ; BSR set to: 0
 12147                           ;vscp_firmware.c: 222: else {
 12148                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 12149  0036B0  0E04               	movlw	4
 12150  0036B2  6F92               	movwf	_vscp_node_state& (0+255),b
 12151                           
 12152                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 12153  0036B4  0E81               	movlw	129
 12154  0036B6  6FA4               	movwf	_vscp_omsg& (0+255),b
 12155                           
 12156                           ; BSR set to: 0
 12157                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 12158  0036B8  69A9               	setf	(_vscp_omsg+5)& (0+255),b
 12159                           
 12160                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 12161  0036BA  0E07               	movlw	7
 12162  0036BC  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
 12163                           
 12164                           ; BSR set to: 0
 12165                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 12166  0036BE  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12167  0036C0  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12168                           
 12169                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 12170  0036C2  0E03               	movlw	3
 12171  0036C4  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12172                           
 12173                           ; BSR set to: 0
 12174                           ;vscp_firmware.c: 235: vscp_sendEvent();
 12175  0036C6  ECFB  F01E         	call	_vscp_sendEvent	;wreg free
 12176  0036CA  D03A               	goto	l1042
 12177  0036CC                     l1043:
 12178                           
 12179                           ; BSR set to: 0
 12180                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 12181  0036CC  AF96               	btfss	_vscp_imsg& (0+255),7,b
 12182  0036CE  D00F               	goto	l7670
 12183                           
 12184                           ; BSR set to: 0
 12185                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 12186                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 12187  0036D0  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
 12188  0036D2  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 12189  0036D4  E135               	bnz	l1042
 12190                           
 12191                           ; BSR set to: 0
 12192  0036D6  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
 12193  0036D8  0A03               	xorlw	3
 12194  0036DA  E132               	bnz	l1042
 12195                           
 12196                           ; BSR set to: 0
 12197                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 12198  0036DC  6657               	tstfsz	_vscp_probe_address,c
 12199  0036DE  D003               	goto	l7664
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 12203  0036E0  0E02               	movlw	2
 12204  0036E2  6F92               	movwf	_vscp_node_state& (0+255),b
 12205  0036E4  D7E2               	goto	l7644
 12206  0036E6                     l7664:
 12207                           
 12208                           ; BSR set to: 0
 12209                           ;vscp_firmware.c: 257: else {
 12210                           ;vscp_firmware.c: 260: vscp_probe_address++;
 12211  0036E6  2A57               	incf	_vscp_probe_address,f,c
 12212                           
 12213                           ; BSR set to: 0
 12214                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 12215  0036E8  6B93               	clrf	_vscp_node_substate& (0+255),b
 12216  0036EA                     l7668:
 12217                           
 12218                           ; BSR set to: 0
 12219                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 12220  0036EA  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12221  0036EC  D029               	goto	l1042
 12222  0036EE                     l7670:
 12223                           
 12224                           ; BSR set to: 0
 12225                           ;vscp_firmware.c: 267: else {
 12226                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 12227  0036EE  0EE9               	movlw	233
 12228  0036F0  5D86               	subwf	_vscp_timer& (0+255),w,b	;volatile
 12229  0036F2  0E03               	movlw	3
 12230  0036F4  5987               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 12231  0036F6  E324               	bnc	l1042
 12232                           
 12233                           ; BSR set to: 0
 12234                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 12235  0036F8  2B94               	incf	_vscp_probe_cnt& (0+255),f,b
 12236                           
 12237                           ; BSR set to: 0
 12238                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 12239  0036FA  0E02               	movlw	2
 12240  0036FC  6594               	cpfsgt	_vscp_probe_cnt& (0+255),b
 12241  0036FE  D017               	goto	l1050
 12242                           
 12243                           ; BSR set to: 0
 12244                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 12245  003700  6657               	tstfsz	_vscp_probe_address,c
 12246  003702  D005               	goto	l1051
 12247                           
 12248                           ; BSR set to: 0
 12249                           ;vscp_firmware.c: 279: vscp_probe_address++;
 12250  003704  2A57               	incf	_vscp_probe_address,f,c
 12251                           
 12252                           ; BSR set to: 0
 12253                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 12254  003706  6B93               	clrf	_vscp_node_substate& (0+255),b
 12255                           
 12256                           ; BSR set to: 0
 12257                           ;vscp_firmware.c: 281: vscp_timer = 0;
 12258  003708  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12259  00370A  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12260  00370C  D7EE               	goto	l7668
 12261  00370E                     l1051:
 12262                           
 12263                           ; BSR set to: 0
 12264                           ;vscp_firmware.c: 285: else {
 12265                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 12266  00370E  C057  F091         	movff	_vscp_probe_address,_vscp_nickname
 12267                           
 12268                           ; BSR set to: 0
 12269                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 12270  003712  0E03               	movlw	3
 12271  003714  6F92               	movwf	_vscp_node_state& (0+255),b
 12272                           
 12273                           ; BSR set to: 0
 12274                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 12275  003716  6B93               	clrf	_vscp_node_substate& (0+255),b
 12276                           
 12277                           ; BSR set to: 0
 12278                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 12279  003718  5191               	movf	_vscp_nickname& (0+255),w,b
 12280  00371A  ECD9  F01F         	call	_vscp_writeNicknamePermanent
 12281                           
 12282                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 12283  00371E  0E40               	movlw	64
 12284  003720  ECCE  F01F         	call	_vscp_setSegmentCRC
 12285                           
 12286                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 12287  003724  0100               	movlb	0	; () banked
 12288  003726  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12289                           
 12290                           ; BSR set to: 0
 12291                           ;vscp_firmware.c: 296: vscp_goActiveState();
 12292  003728  EC64  F01F         	call	_vscp_goActiveState	;wreg free
 12293  00372C  D009               	goto	l1042
 12294  00372E                     l1050:
 12295                           
 12296                           ; BSR set to: 0
 12297                           ;vscp_firmware.c: 300: else {
 12298                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 12299  00372E  6B93               	clrf	_vscp_node_substate& (0+255),b
 12300  003730  D007               	goto	l1042
 12301  003732                     l7700:
 12302  003732  0100               	movlb	0	; () banked
 12303  003734  5193               	movf	_vscp_node_substate& (0+255),w,b
 12304                           
 12305                           ; Switch size 1, requested type "speed"
 12306                           ; Number of cases is 3, Range of values is 0 to 2
 12307                           ; switch strategies available:
 12308                           ; Name         Instructions Cycles
 12309                           ; simple_byte           10     6 (average)
 12310                           ;	Chosen strategy is simple_byte
 12311  003736  E0AA               	bz	l7630
 12312  003738  0A01               	xorlw	1	; case 1
 12313  00373A  E0C8               	bz	l1043
 12314  00373C  0A03               	xorlw	3	; case 2
 12315  00373E  E1F7               	bnz	l1050
 12316  003740                     l1042:
 12317                           
 12318                           ; BSR set to: 0
 12319                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 12320  003740  6B96               	clrf	_vscp_imsg& (0+255),b
 12321                           
 12322                           ; BSR set to: 0
 12323  003742  0012               	return	
 12324  003744                     __end_of_vscp_handleProbeState:
 12325                           	opt stack 0
 12326                           tblptru	equ	0xFF8
 12327                           tblptrh	equ	0xFF7
 12328                           tblptrl	equ	0xFF6
 12329                           tablat	equ	0xFF5
 12330                           prodh	equ	0xFF4
 12331                           prodl	equ	0xFF3
 12332                           postinc0	equ	0xFEE
 12333                           wreg	equ	0xFE8
 12334                           indf2	equ	0xFDF
 12335                           postinc2	equ	0xFDE
 12336                           postdec2	equ	0xFDD
 12337                           fsr2h	equ	0xFDA
 12338                           fsr2l	equ	0xFD9
 12339                           status	equ	0xFD8
 12340                           
 12341 ;; *************** function _vscp_goActiveState *****************
 12342 ;; Defined at:
 12343 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 12344 ;; Parameters:    Size  Location     Type
 12345 ;;		None
 12346 ;; Auto vars:     Size  Location     Type
 12347 ;;		None
 12348 ;; Return value:  Size  Location     Type
 12349 ;;		None               void
 12350 ;; Registers used:
 12351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12352 ;; Tracked objects:
 12353 ;;		On entry : 0/0
 12354 ;;		On exit  : F/0
 12355 ;;		Unchanged: 0/0
 12356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12357 ;;      Params:         0       0       0       0       0       0       0
 12358 ;;      Locals:         0       0       0       0       0       0       0
 12359 ;;      Temps:          0       0       0       0       0       0       0
 12360 ;;      Totals:         0       0       0       0       0       0       0
 12361 ;;Total ram usage:        0 bytes
 12362 ;; Hardware stack levels used:    1
 12363 ;; Hardware stack levels required when called:    7
 12364 ;; This function calls:
 12365 ;;		_vscp_sendEvent
 12366 ;; This function is called by:
 12367 ;;		_main
 12368 ;;		_vscp_handleProbeState
 12369 ;; This function uses a non-reentrant model
 12370 ;;
 12371                           
 12372                           	psect	text50
 12373  003EC8                     __ptext50:
 12374                           	opt stack 0
 12375  003EC8                     _vscp_goActiveState:
 12376                           	opt stack 22
 12377                           
 12378                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 12379                           
 12380                           ; BSR set to: 0
 12381                           ;incstack = 0
 12382                           ;incstack = 0
 12383  003EC8  0E81               	movlw	129
 12384  003ECA  0100               	movlb	0	; () banked
 12385  003ECC  6FA4               	movwf	_vscp_omsg& (0+255),b
 12386                           
 12387                           ; BSR set to: 0
 12388                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 12389  003ECE  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12390                           
 12391                           ; BSR set to: 0
 12392                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 12393  003ED0  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12394  003ED2  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12395                           
 12396                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 12397  003ED4  0E02               	movlw	2
 12398  003ED6  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12399                           
 12400                           ; BSR set to: 0
 12401                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 12402  003ED8  C091  F0A9         	movff	_vscp_nickname,_vscp_omsg+5
 12403                           
 12404                           ; BSR set to: 0
 12405                           ;vscp_firmware.c: 366: vscp_sendEvent();
 12406  003EDC  ECFB  F01E         	call	_vscp_sendEvent	;wreg free
 12407                           
 12408                           ; BSR set to: 0
 12409                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 12410  003EE0  0E01               	movlw	1
 12411  003EE2  6E56               	movwf	_vscp_initledfunc,c
 12412                           
 12413                           ; BSR set to: 0
 12414  003EE4  0C01               	retlw	1
 12415  003EE6                     __end_of_vscp_goActiveState:
 12416                           	opt stack 0
 12417                           tblptru	equ	0xFF8
 12418                           tblptrh	equ	0xFF7
 12419                           tblptrl	equ	0xFF6
 12420                           tablat	equ	0xFF5
 12421                           prodh	equ	0xFF4
 12422                           prodl	equ	0xFF3
 12423                           postinc0	equ	0xFEE
 12424                           wreg	equ	0xFE8
 12425                           indf2	equ	0xFDF
 12426                           postinc2	equ	0xFDE
 12427                           postdec2	equ	0xFDD
 12428                           fsr2h	equ	0xFDA
 12429                           fsr2l	equ	0xFD9
 12430                           status	equ	0xFD8
 12431                           
 12432 ;; *************** function _vscp_sendEvent *****************
 12433 ;; Defined at:
 12434 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 12435 ;; Parameters:    Size  Location     Type
 12436 ;;		None
 12437 ;; Auto vars:     Size  Location     Type
 12438 ;;  rv              1    0        unsigned char 
 12439 ;; Return value:  Size  Location     Type
 12440 ;;                  1    wreg      unsigned char 
 12441 ;; Registers used:
 12442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12443 ;; Tracked objects:
 12444 ;;		On entry : F/0
 12445 ;;		On exit  : F/0
 12446 ;;		Unchanged: 0/0
 12447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12448 ;;      Params:         0       0       0       0       0       0       0
 12449 ;;      Locals:         1       0       0       0       0       0       0
 12450 ;;      Temps:          0       0       0       0       0       0       0
 12451 ;;      Totals:         1       0       0       0       0       0       0
 12452 ;;Total ram usage:        1 bytes
 12453 ;; Hardware stack levels used:    1
 12454 ;; Hardware stack levels required when called:    6
 12455 ;; This function calls:
 12456 ;;		_sendVSCPFrame
 12457 ;; This function is called by:
 12458 ;;		_vscp_handleProbeState
 12459 ;;		_vscp_goActiveState
 12460 ;;		_vscp_sendHeartBeat
 12461 ;;		_vscp_newNodeOnline
 12462 ;;		_vscp_handleProtocolEvent
 12463 ;; This function uses a non-reentrant model
 12464 ;;
 12465                           
 12466                           	psect	text51
 12467  003DF6                     __ptext51:
 12468                           	opt stack 0
 12469  003DF6                     _vscp_sendEvent:
 12470                           	opt stack 22
 12471                           
 12472                           ; BSR set to: 0
 12473                           
 12474                           ; BSR set to: 0
 12475                           ;incstack = 0
 12476                           ;incstack = 0
 12477  003DF6  C0A6  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 12478  003DFA  C0A7  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 12479  003DFE  C0A8  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 12480  003E02  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 12481  003E06  C0A5  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 12482  003E0A  51A4               	movf	_vscp_omsg& (0+255),w,b
 12483  003E0C  0B0F               	andlw	15
 12484  003E0E  6E44               	movwf	?_sendVSCPFrame+5,c
 12485  003E10  0E00               	movlw	high (_vscp_omsg+5)
 12486  003E12  6E46               	movwf	?_sendVSCPFrame+7,c
 12487  003E14  0EA9               	movlw	low (_vscp_omsg+5)
 12488  003E16  6E45               	movwf	?_sendVSCPFrame+6,c
 12489  003E18  EFA2  F01B         	goto	_sendVSCPFrame	;wreg free
 12490  003E1C                     __end_of_vscp_sendEvent:
 12491                           	opt stack 0
 12492                           tblptru	equ	0xFF8
 12493                           tblptrh	equ	0xFF7
 12494                           tblptrl	equ	0xFF6
 12495                           tablat	equ	0xFF5
 12496                           prodh	equ	0xFF4
 12497                           prodl	equ	0xFF3
 12498                           postinc0	equ	0xFEE
 12499                           wreg	equ	0xFE8
 12500                           indf2	equ	0xFDF
 12501                           postinc2	equ	0xFDE
 12502                           postdec2	equ	0xFDD
 12503                           fsr2h	equ	0xFDA
 12504                           fsr2l	equ	0xFD9
 12505                           status	equ	0xFD8
 12506                           
 12507 ;; *************** function _sendVSCPFrame *****************
 12508 ;; Defined at:
 12509 ;;		line 2585 in file "../main.c"
 12510 ;; Parameters:    Size  Location     Type
 12511 ;;  vscpclass       2   62[COMRAM] unsigned short 
 12512 ;;  vscptype        1   64[COMRAM] unsigned char 
 12513 ;;  nodeid          1   65[COMRAM] unsigned char 
 12514 ;;  priority        1   66[COMRAM] unsigned char 
 12515 ;;  size            1   67[COMRAM] unsigned char 
 12516 ;;  pData           2   68[COMRAM] PTR unsigned char 
 12517 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 12518 ;; Auto vars:     Size  Location     Type
 12519 ;;  id              4   70[COMRAM] unsigned long 
 12520 ;; Return value:  Size  Location     Type
 12521 ;;                  1    wreg      unsigned char 
 12522 ;; Registers used:
 12523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12524 ;; Tracked objects:
 12525 ;;		On entry : F/0
 12526 ;;		On exit  : F/0
 12527 ;;		Unchanged: 0/0
 12528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12529 ;;      Params:         8       0       0       0       0       0       0
 12530 ;;      Locals:         4       0       0       0       0       0       0
 12531 ;;      Temps:          0      20       0       0       0       0       0
 12532 ;;      Totals:        12      20       0       0       0       0       0
 12533 ;;Total ram usage:       32 bytes
 12534 ;; Hardware stack levels used:    1
 12535 ;; Hardware stack levels required when called:    5
 12536 ;; This function calls:
 12537 ;;		_sendCANFrame
 12538 ;; This function is called by:
 12539 ;;		_SendInformationEvent
 12540 ;;		_vscp_sendEvent
 12541 ;; This function uses a non-reentrant model
 12542 ;;
 12543                           
 12544                           	psect	text52
 12545  003744                     __ptext52:
 12546                           	opt stack 0
 12547  003744                     _sendVSCPFrame:
 12548                           	opt stack 23
 12549                           
 12550                           ; BSR set to: 0
 12551                           ;main.c: 2586: uint32_t id = ( (uint32_t)priority << 26 ) |
 12552                           ;main.c: 2587: ( (uint32_t)vscpclass << 16 ) |
 12553                           ;main.c: 2588: ( (uint32_t)vscptype << 8 ) |
 12554                           ;main.c: 2589: nodeid;
 12555                           
 12556                           ; BSR set to: 0
 12557                           ;incstack = 0
 12558                           ;incstack = 0
 12559  003744  C041  F0B1         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 12560  003748  6BB2               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 12561  00374A  6BB3               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 12562  00374C  6BB4               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 12563  00374E  C0B3  F0B4         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 12564  003752  C0B2  F0B3         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 12565  003756  C0B1  F0B2         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 12566  00375A  6BB1               	clrf	??_sendVSCPFrame& (0+255),b
 12567  00375C  503F               	movf	sendVSCPFrame@vscpclass,w,c
 12568  00375E  6FB5               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 12569  003760  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 12570  003762  6FB6               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 12571  003764  6BB7               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 12572  003766  6BB8               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 12573  003768  C0B6  F0B8         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 12574  00376C  C0B5  F0B7         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 12575  003770  6BB6               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 12576  003772  6BB5               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 12577  003774  C043  F0B9         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 12578  003778  6BBA               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 12579  00377A  6BBB               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 12580  00377C  6BBC               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 12581  00377E  0E1A               	movlw	26
 12582  003780                     u9745:
 12583  003780  90D8               	bcf	status,0,c
 12584  003782  37B9               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 12585  003784  37BA               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 12586  003786  37BB               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 12587  003788  37BC               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 12588  00378A  2EE8               	decfsz	wreg,f,c
 12589  00378C  D7F9               	goto	u9745
 12590  00378E  51B5               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 12591  003790  11B9               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 12592  003792  6FBD               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 12593  003794  51B6               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 12594  003796  11BA               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 12595  003798  6FBE               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 12596  00379A  51B7               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 12597  00379C  11BB               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 12598  00379E  6FBF               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 12599  0037A0  51B8               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 12600  0037A2  11BC               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 12601  0037A4  6FC0               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 12602  0037A6  51B1               	movf	??_sendVSCPFrame& (0+255),w,b
 12603  0037A8  11BD               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 12604  0037AA  6FC1               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 12605  0037AC  51B2               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 12606  0037AE  11BE               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 12607  0037B0  6FC2               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 12608  0037B2  51B3               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 12609  0037B4  11BF               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 12610  0037B6  6FC3               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 12611  0037B8  51B4               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 12612  0037BA  11C0               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 12613  0037BC  6FC4               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 12614  0037BE  5042               	movf	sendVSCPFrame@nodeid,w,c
 12615  0037C0  11C1               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 12616  0037C2  6E47               	movwf	sendVSCPFrame@id,c
 12617  0037C4  51C2               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 12618  0037C6  6E48               	movwf	sendVSCPFrame@id+1,c
 12619  0037C8  51C3               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 12620  0037CA  6E49               	movwf	sendVSCPFrame@id+2,c
 12621  0037CC  51C4               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 12622  0037CE  6E4A               	movwf	sendVSCPFrame@id+3,c
 12623                           
 12624                           ; BSR set to: 0
 12625                           ;main.c: 2591: if ( !sendCANFrame( id, size, pData ) ) {
 12626  0037D0  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 12627  0037D4  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 12628  0037D8  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 12629  0037DC  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 12630  0037E0  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 12631  0037E4  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 12632  0037E8  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 12633  0037EC  EC56  F01E         	call	_sendCANFrame	;wreg free
 12634  0037F0  0900               	iorlw	0
 12635                           
 12636                           ; BSR set to: 0
 12637                           ;main.c: 2592: return 0;
 12638  0037F2  0E00               	movlw	0
 12639  0037F4  A4D8               	btfss	status,2,c
 12640                           
 12641                           ; BSR set to: 0
 12642                           ;main.c: 2593: }
 12643                           ;main.c: 2595: return 1;
 12644  0037F6  0E01               	movlw	1
 12645                           
 12646                           ; BSR set to: 0
 12647  0037F8  0012               	return	
 12648  0037FA                     __end_of_sendVSCPFrame:
 12649                           	opt stack 0
 12650                           tblptru	equ	0xFF8
 12651                           tblptrh	equ	0xFF7
 12652                           tblptrl	equ	0xFF6
 12653                           tablat	equ	0xFF5
 12654                           prodh	equ	0xFF4
 12655                           prodl	equ	0xFF3
 12656                           postinc0	equ	0xFEE
 12657                           wreg	equ	0xFE8
 12658                           indf2	equ	0xFDF
 12659                           postinc2	equ	0xFDE
 12660                           postdec2	equ	0xFDD
 12661                           fsr2h	equ	0xFDA
 12662                           fsr2l	equ	0xFD9
 12663                           status	equ	0xFD8
 12664                           
 12665 ;; *************** function _sendCANFrame *****************
 12666 ;; Defined at:
 12667 ;;		line 2630 in file "../main.c"
 12668 ;; Parameters:    Size  Location     Type
 12669 ;;  id              4   54[COMRAM] unsigned long 
 12670 ;;  dlc             1   58[COMRAM] unsigned char 
 12671 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 12672 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 12673 ;; Auto vars:     Size  Location     Type
 12674 ;;  rv              1    0        unsigned char 
 12675 ;; Return value:  Size  Location     Type
 12676 ;;                  1    wreg      unsigned char 
 12677 ;; Registers used:
 12678 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12679 ;; Tracked objects:
 12680 ;;		On entry : F/0
 12681 ;;		On exit  : F/0
 12682 ;;		Unchanged: 0/0
 12683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12684 ;;      Params:         7       0       0       0       0       0       0
 12685 ;;      Locals:         1       0       0       0       0       0       0
 12686 ;;      Temps:          0       0       0       0       0       0       0
 12687 ;;      Totals:         8       0       0       0       0       0       0
 12688 ;;Total ram usage:        8 bytes
 12689 ;; Hardware stack levels used:    1
 12690 ;; Hardware stack levels required when called:    4
 12691 ;; This function calls:
 12692 ;;		_ECANSendMessage
 12693 ;; This function is called by:
 12694 ;;		_sendVSCPFrame
 12695 ;; This function uses a non-reentrant model
 12696 ;;
 12697                           
 12698                           	psect	text53
 12699  003CAC                     __ptext53:
 12700                           	opt stack 0
 12701  003CAC                     _sendCANFrame:
 12702                           	opt stack 23
 12703                           
 12704                           ; BSR set to: 0
 12705                           ;main.c: 2633: sendTimer = 0;
 12706                           
 12707                           ; BSR set to: 0
 12708                           ;incstack = 0
 12709                           ;incstack = 0
 12710  003CAC  6B8C               	clrf	_sendTimer& (0+255),b	;volatile
 12711  003CAE                     l9196:
 12712                           
 12713                           ;main.c: 2635: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 12714  003CAE  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 12715  003CB2  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 12716  003CB6  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 12717  003CBA  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 12718  003CBE  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 12719  003CC2  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 12720  003CC6  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 12721  003CCA  0E20               	movlw	32
 12722  003CCC  6E19               	movwf	?_ECANSendMessage+7,c
 12723  003CCE  EC00  F016         	call	_ECANSendMessage	;wreg free
 12724  003CD2  0900               	iorlw	0
 12725  003CD4  E0EC               	bz	l9196
 12726                           
 12727                           ;main.c: 2638: }
 12728                           ;main.c: 2639: }
 12729                           ;main.c: 2641: vscp_omsg.flags = 0;
 12730                           
 12731                           ;main.c: 2637: break;
 12732  003CD6  0100               	movlb	0	; () banked
 12733  003CD8  6BA4               	clrf	_vscp_omsg& (0+255),b
 12734                           
 12735                           ; BSR set to: 0
 12736                           
 12737                           ; BSR set to: 0
 12738                           ;main.c: 2643: return rv;
 12739  003CDA  0C01               	retlw	1
 12740  003CDC                     __end_of_sendCANFrame:
 12741                           	opt stack 0
 12742                           tblptru	equ	0xFF8
 12743                           tblptrh	equ	0xFF7
 12744                           tblptrl	equ	0xFF6
 12745                           tablat	equ	0xFF5
 12746                           prodh	equ	0xFF4
 12747                           prodl	equ	0xFF3
 12748                           postinc0	equ	0xFEE
 12749                           wreg	equ	0xFE8
 12750                           indf2	equ	0xFDF
 12751                           postinc2	equ	0xFDE
 12752                           postdec2	equ	0xFDD
 12753                           fsr2h	equ	0xFDA
 12754                           fsr2l	equ	0xFD9
 12755                           status	equ	0xFD8
 12756                           
 12757 ;; *************** function _ECANSendMessage *****************
 12758 ;; Defined at:
 12759 ;;		line 617 in file "../ECAN.c"
 12760 ;; Parameters:    Size  Location     Type
 12761 ;;  id              4   17[COMRAM] unsigned long 
 12762 ;;  data            2   21[COMRAM] PTR unsigned char 
 12763 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 12764 ;;  dataLen         1   23[COMRAM] unsigned char 
 12765 ;;  msgFlags        1   24[COMRAM] enum E16306
 12766 ;; Auto vars:     Size  Location     Type
 12767 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 12768 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 12769 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 12770 ;;		 -> B0CON(1), 
 12771 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 12772 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 12773 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 12774 ;;		 -> B0CON(1), 
 12775 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 12776 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 12777 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 12778 ;;		 -> B0CON(1), 
 12779 ;;  i               1   51[COMRAM] unsigned char 
 12780 ;;  temp            1   50[COMRAM] unsigned char 
 12781 ;;  tempBSEL0       1   47[COMRAM] struct .
 12782 ;;  j               1   46[COMRAM] unsigned char 
 12783 ;;  buffers         1   45[COMRAM] unsigned char 
 12784 ;;  mode            1   44[COMRAM] unsigned char 
 12785 ;; Return value:  Size  Location     Type
 12786 ;;                  1    wreg      enum E15660
 12787 ;; Registers used:
 12788 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12789 ;; Tracked objects:
 12790 ;;		On entry : 0/0
 12791 ;;		On exit  : 0/0
 12792 ;;		Unchanged: 0/0
 12793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12794 ;;      Params:         8       0       0       0       0       0       0
 12795 ;;      Locals:        28       0       0       0       0       0       0
 12796 ;;      Temps:          1       0       0       0       0       0       0
 12797 ;;      Totals:        37       0       0       0       0       0       0
 12798 ;;Total ram usage:       37 bytes
 12799 ;; Hardware stack levels used:    1
 12800 ;; Hardware stack levels required when called:    3
 12801 ;; This function calls:
 12802 ;;		__CANIDToRegs
 12803 ;; This function is called by:
 12804 ;;		_sendCANFrame
 12805 ;; This function uses a non-reentrant model
 12806 ;;
 12807                           
 12808                           	psect	text54
 12809  002C00                     __ptext54:
 12810                           	opt stack 0
 12811  002C00                     _ECANSendMessage:
 12812                           	opt stack 23
 12813                           
 12814                           ;ECAN.c: 619: BYTE mode;
 12815                           ;ECAN.c: 620: BYTE buffers;
 12816                           ;ECAN.c: 628: BYTE i,j;
 12817                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 12818                           ;ECAN.c: 630: BYTE* pb[9];
 12819                           ;ECAN.c: 631: BYTE temp;
 12820                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 12821                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 12822                           
 12823                           ; BSR set to: 0
 12824                           ;incstack = 0
 12825                           ;incstack = 0
 12826  002C00  0E0F               	movlw	15	;volatile
 12827  002C02  6E1C               	movwf	ECANSendMessage@pb+1,c
 12828  002C04  0E40               	movlw	64	;volatile
 12829  002C06  6E1B               	movwf	ECANSendMessage@pb,c
 12830                           
 12831                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 12832  002C08  0E0F               	movlw	15	;volatile
 12833  002C0A  6E1E               	movwf	ECANSendMessage@pb+3,c
 12834  002C0C  0E30               	movlw	48	;volatile
 12835  002C0E  6E1D               	movwf	ECANSendMessage@pb+2,c
 12836                           
 12837                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 12838  002C10  0E0F               	movlw	15	;volatile
 12839  002C12  6E20               	movwf	ECANSendMessage@pb+5,c
 12840  002C14  0E20               	movlw	32	;volatile
 12841  002C16  6E1F               	movwf	ECANSendMessage@pb+4,c
 12842                           
 12843                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 12844  002C18  0E0E               	movlw	14	;volatile
 12845  002C1A  6E22               	movwf	ECANSendMessage@pb+7,c
 12846  002C1C  0E20               	movlw	32	;volatile
 12847  002C1E  6E21               	movwf	ECANSendMessage@pb+6,c
 12848                           
 12849                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 12850  002C20  0E0E               	movlw	14	;volatile
 12851  002C22  6E24               	movwf	ECANSendMessage@pb+9,c
 12852  002C24  0E30               	movlw	48	;volatile
 12853  002C26  6E23               	movwf	ECANSendMessage@pb+8,c
 12854                           
 12855                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 12856  002C28  0E0E               	movlw	14	;volatile
 12857  002C2A  6E26               	movwf	ECANSendMessage@pb+11,c
 12858  002C2C  0E40               	movlw	64	;volatile
 12859  002C2E  6E25               	movwf	ECANSendMessage@pb+10,c
 12860                           
 12861                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 12862  002C30  0E0E               	movlw	14	;volatile
 12863  002C32  6E28               	movwf	ECANSendMessage@pb+13,c
 12864  002C34  0E50               	movlw	80	;volatile
 12865  002C36  6E27               	movwf	ECANSendMessage@pb+12,c
 12866                           
 12867                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 12868  002C38  0E0E               	movlw	14	;volatile
 12869  002C3A  6E2A               	movwf	ECANSendMessage@pb+15,c
 12870  002C3C  0E60               	movlw	96	;volatile
 12871  002C3E  6E29               	movwf	ECANSendMessage@pb+14,c
 12872                           
 12873                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 12874  002C40  0E0E               	movlw	14	;volatile
 12875  002C42  6E2C               	movwf	ECANSendMessage@pb+17,c
 12876  002C44  0E70               	movlw	112	;volatile
 12877  002C46  6E2B               	movwf	ECANSendMessage@pb+16,c
 12878                           
 12879                           ; BSR set to: 14
 12880                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 12881  002C48  5077               	movf	3959,w,c	;volatile
 12882  002C4A  0BC0               	andlw	192
 12883  002C4C  6E2D               	movwf	ECANSendMessage@mode,c
 12884                           
 12885                           ; BSR set to: 14
 12886                           ;ECAN.c: 660: if ( mode == 0x00 )
 12887  002C4E  662D               	tstfsz	ECANSendMessage@mode,c
 12888  002C50  D002               	goto	l9212
 12889                           
 12890                           ; BSR set to: 14
 12891                           ;ECAN.c: 661: buffers = 2;
 12892  002C52  0E02               	movlw	2
 12893  002C54  D001               	goto	L40
 12894  002C56                     l9212:
 12895                           
 12896                           ; BSR set to: 14
 12897                           ;ECAN.c: 662: else
 12898                           ;ECAN.c: 663: buffers = 8;
 12899  002C56  0E08               	movlw	8
 12900  002C58                     L40:
 12901  002C58  6E2E               	movwf	ECANSendMessage@buffers,c
 12902                           
 12903                           ; BSR set to: 14
 12904                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 12905  002C5A  010D               	movlb	13	; () banked
 12906  002C5C  90D8               	bcf	status,0,c
 12907  002C5E  31F8               	rrcf	248,w,b	;volatile
 12908  002C60  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 12909                           
 12910                           ; BSR set to: 13
 12911                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 12912  002C62  6A34               	clrf	ECANSendMessage@i,c
 12913  002C64  D07D               	goto	l9272
 12914  002C66                     l9218:
 12915                           
 12916                           ;ECAN.c: 688: {
 12917                           ;ECAN.c: 693: ptr = pb[i];
 12918  002C66  5034               	movf	ECANSendMessage@i,w,c
 12919  002C68  0D02               	mullw	2
 12920  002C6A  50F3               	movf	prodl,w,c
 12921  002C6C  0F1B               	addlw	low ECANSendMessage@pb
 12922  002C6E  6ED9               	movwf	fsr2l,c
 12923  002C70  6ADA               	clrf	fsr2h,c
 12924  002C72  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 12925  002C76  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 12926                           
 12927                           ;ECAN.c: 694: tempPtr = ptr;
 12928  002C7A  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 12929  002C7E  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 12930                           
 12931                           ;ECAN.c: 702: if ( i > 2 )
 12932  002C82  0E02               	movlw	2
 12933  002C84  6434               	cpfsgt	ECANSendMessage@i,c
 12934  002C86  D004               	goto	l9230
 12935                           
 12936                           ;ECAN.c: 703: {
 12937                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 12938  002C88  90D8               	bcf	status,0,c
 12939  002C8A  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 12940                           
 12941                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 12942  002C8C  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 12943  002C8E  D067               	goto	l9270
 12944  002C90                     l9230:
 12945                           
 12946                           ;ECAN.c: 714: }
 12947                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 12948  002C90  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 12949  002C94  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 12950  002C98  50DF               	movf	indf2,w,c
 12951  002C9A  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 12952  002C9C  B61A               	btfsc	??_ECANSendMessage,3,c
 12953  002C9E  D05F               	goto	l9270
 12954                           
 12955                           ;ECAN.c: 721: {
 12956                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 12957  002CA0  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 12958  002CA4  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 12959  002CA8  0EFC               	movlw	252
 12960  002CAA  16DF               	andwf	indf2,f,c
 12961                           
 12962                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 12963  002CAC  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 12964  002CB0  0E03               	movlw	3
 12965  002CB2  161A               	andwf	??_ECANSendMessage,f,c
 12966  002CB4  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 12967  002CB8  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 12968  002CBC  501A               	movf	??_ECANSendMessage,w,c
 12969  002CBE  12DF               	iorwf	indf2,f,c
 12970                           
 12971                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 12972  002CC0  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 12973  002CC2  D004               	goto	l840
 12974                           
 12975                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 12976  002CC4  5018               	movf	ECANSendMessage@dataLen,w,c
 12977  002CC6  0940               	iorlw	64
 12978  002CC8  6E33               	movwf	ECANSendMessage@temp,c
 12979  002CCA  D002               	goto	l9240
 12980  002CCC                     l840:
 12981                           
 12982                           ;ECAN.c: 729: else
 12983                           ;ECAN.c: 730: temp = dataLen;
 12984  002CCC  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 12985  002CD0                     l9240:
 12986                           
 12987                           ;ECAN.c: 732: *(ptr+5) = temp;
 12988  002CD0  EE20 F005          	lfsr	2,5
 12989  002CD4  5035               	movf	ECANSendMessage@ptr,w,c
 12990  002CD6  26D9               	addwf	fsr2l,f,c
 12991  002CD8  5036               	movf	ECANSendMessage@ptr+1,w,c
 12992  002CDA  22DA               	addwfc	fsr2h,f,c
 12993  002CDC  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 12994                           
 12995                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 12996  002CE0  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 12997  002CE2  D003               	goto	l842
 12998                           
 12999                           ;ECAN.c: 736: temp = 1;
 13000  002CE4  0E01               	movlw	1
 13001  002CE6  6E33               	movwf	ECANSendMessage@temp,c
 13002  002CE8  D001               	goto	l9246
 13003  002CEA                     l842:
 13004                           
 13005                           ;ECAN.c: 738: else
 13006                           ;ECAN.c: 739: temp = 0;
 13007  002CEA  6A33               	clrf	ECANSendMessage@temp,c
 13008  002CEC                     l9246:
 13009                           
 13010                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 13011  002CEC  2835               	incf	ECANSendMessage@ptr,w,c
 13012  002CEE  6E08               	movwf	?__CANIDToRegs,c
 13013  002CF0  0E00               	movlw	0
 13014  002CF2  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 13015  002CF4  6E09               	movwf	?__CANIDToRegs+1,c
 13016  002CF6  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 13017  002CFA  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 13018  002CFE  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 13019  002D02  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 13020  002D06  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 13021  002D0A  EC10  F018         	call	__CANIDToRegs	;wreg free
 13022                           
 13023                           ;ECAN.c: 745: ptr += 6;
 13024  002D0E  0E06               	movlw	6
 13025  002D10  2635               	addwf	ECANSendMessage@ptr,f,c
 13026  002D12  0E00               	movlw	0
 13027  002D14  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 13028                           
 13029                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 13030  002D16  6A2F               	clrf	ECANSendMessage@j,c
 13031  002D18  D00F               	goto	l9260
 13032  002D1A                     l9252:
 13033                           
 13034                           ;ECAN.c: 748: *ptr++ = *data++;
 13035  002D1A  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 13036  002D1E  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 13037  002D22  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 13038  002D26  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 13039  002D2A  CFDF FFE7          	movff	indf2,indf1
 13040  002D2E  4A16               	infsnz	ECANSendMessage@data,f,c
 13041  002D30  2A17               	incf	ECANSendMessage@data+1,f,c
 13042  002D32  4A35               	infsnz	ECANSendMessage@ptr,f,c
 13043  002D34  2A36               	incf	ECANSendMessage@ptr+1,f,c
 13044  002D36  2A2F               	incf	ECANSendMessage@j,f,c
 13045  002D38                     l9260:
 13046  002D38  5018               	movf	ECANSendMessage@dataLen,w,c
 13047  002D3A  5C2F               	subwf	ECANSendMessage@j,w,c
 13048  002D3C  E3EE               	bnc	l9252
 13049                           
 13050                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 13051  002D3E  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13052  002D42  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13053  002D46  50DF               	movf	indf2,w,c
 13054  002D48  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13055  002D4A  B41A               	btfsc	??_ECANSendMessage,2,c
 13056  002D4C  D006               	goto	l9266
 13057                           
 13058                           ;ECAN.c: 753: *tempPtr |= 0x08;
 13059  002D4E  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13060  002D52  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13061  002D56  0E00               	movlw	0
 13062  002D58  86DB               	bsf	plusw2,3,c
 13063  002D5A                     l9266:
 13064                           
 13065                           ;ECAN.c: 755: return TRUE;
 13066  002D5A  0E01               	movlw	1
 13067  002D5C  D005               	goto	l848
 13068  002D5E                     l9270:
 13069  002D5E  2A34               	incf	ECANSendMessage@i,f,c
 13070  002D60                     l9272:
 13071  002D60  502E               	movf	ECANSendMessage@buffers,w,c
 13072  002D62  5C34               	subwf	ECANSendMessage@i,w,c
 13073  002D64  E380               	bnc	l9218
 13074                           
 13075                           ;ECAN.c: 756: }
 13076                           ;ECAN.c: 757: }
 13077                           ;ECAN.c: 760: return FALSE;
 13078  002D66  0E00               	movlw	0
 13079  002D68                     l848:
 13080  002D68  0012               	return	
 13081  002D6A                     __end_of_ECANSendMessage:
 13082                           	opt stack 0
 13083                           tblptru	equ	0xFF8
 13084                           tblptrh	equ	0xFF7
 13085                           tblptrl	equ	0xFF6
 13086                           tablat	equ	0xFF5
 13087                           prodh	equ	0xFF4
 13088                           prodl	equ	0xFF3
 13089                           postinc0	equ	0xFEE
 13090                           wreg	equ	0xFE8
 13091                           indf1	equ	0xFE7
 13092                           fsr1h	equ	0xFE2
 13093                           fsr1l	equ	0xFE1
 13094                           indf2	equ	0xFDF
 13095                           postinc2	equ	0xFDE
 13096                           postdec2	equ	0xFDD
 13097                           plusw2	equ	0xFDB
 13098                           fsr2h	equ	0xFDA
 13099                           fsr2l	equ	0xFD9
 13100                           status	equ	0xFD8
 13101                           
 13102 ;; *************** function __CANIDToRegs *****************
 13103 ;; Defined at:
 13104 ;;		line 1099 in file "../ECAN.c"
 13105 ;; Parameters:    Size  Location     Type
 13106 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 13107 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13108 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13109 ;;		 -> B0CON(1), 
 13110 ;;  val             4    9[COMRAM] unsigned long 
 13111 ;;  type            1   13[COMRAM] unsigned char 
 13112 ;; Auto vars:     Size  Location     Type
 13113 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 13114 ;;		 -> _CANIDToRegs@val(4), 
 13115 ;; Return value:  Size  Location     Type
 13116 ;;		None               void
 13117 ;; Registers used:
 13118 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13119 ;; Tracked objects:
 13120 ;;		On entry : 0/D
 13121 ;;		On exit  : 0/0
 13122 ;;		Unchanged: 0/0
 13123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13124 ;;      Params:         7       0       0       0       0       0       0
 13125 ;;      Locals:         1       0       0       0       0       0       0
 13126 ;;      Temps:          2       0       0       0       0       0       0
 13127 ;;      Totals:        10       0       0       0       0       0       0
 13128 ;;Total ram usage:       10 bytes
 13129 ;; Hardware stack levels used:    1
 13130 ;; Hardware stack levels required when called:    2
 13131 ;; This function calls:
 13132 ;;		Nothing
 13133 ;; This function is called by:
 13134 ;;		_ECANSendMessage
 13135 ;; This function uses a non-reentrant model
 13136 ;;
 13137                           
 13138                           	psect	text55
 13139  003020                     __ptext55:
 13140                           	opt stack 0
 13141  003020                     __CANIDToRegs:
 13142                           	opt stack 23
 13143                           
 13144                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 13145                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 13146                           
 13147                           ;incstack = 0
 13148                           ;incstack = 0
 13149  003020  0E0A               	movlw	low __CANIDToRegs@val
 13150  003022  6E11               	movwf	__CANIDToRegs@Value,c
 13151                           
 13152                           ;ECAN.c: 1104: if ( type == 0 )
 13153  003024  660E               	tstfsz	__CANIDToRegs@type,c
 13154  003026  D037               	goto	l9288
 13155                           
 13156                           ;ECAN.c: 1105: {
 13157                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 13158  003028  5011               	movf	__CANIDToRegs@Value,w,c
 13159  00302A  6ED9               	movwf	fsr2l,c
 13160  00302C  6ADA               	clrf	fsr2h,c
 13161  00302E  50DF               	movf	indf2,w,c
 13162  003030  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13163  003032  90D8               	bcf	status,0,c
 13164  003034  320F               	rrcf	??__CANIDToRegs,f,c
 13165  003036  90D8               	bcf	status,0,c
 13166  003038  320F               	rrcf	??__CANIDToRegs,f,c
 13167  00303A  90D8               	bcf	status,0,c
 13168  00303C  300F               	rrcf	??__CANIDToRegs,w,c
 13169  00303E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13170  003042  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13171  003046  6EDF               	movwf	indf2,c
 13172                           
 13173                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 13174  003048  5011               	movf	__CANIDToRegs@Value,w,c
 13175  00304A  6ED9               	movwf	fsr2l,c
 13176  00304C  6ADA               	clrf	fsr2h,c
 13177  00304E  2AD9               	incf	fsr2l,f,c
 13178  003050  6ADA               	clrf	fsr2h,c
 13179  003052  50DF               	movf	indf2,w,c
 13180  003054  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13181  003056  0E05               	movlw	5
 13182  003058  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13183  00305A                     u10505:
 13184  00305A  90D8               	bcf	status,0,c
 13185  00305C  360F               	rlcf	??__CANIDToRegs,f,c
 13186  00305E  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13187  003060  D7FC               	goto	u10505
 13188  003062  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13189  003066  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13190  00306A  500F               	movf	??__CANIDToRegs,w,c
 13191  00306C  12DF               	iorwf	indf2,f,c
 13192                           
 13193                           ;ECAN.c: 1109: ptr++;
 13194  00306E  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13195  003070  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13196                           
 13197                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 13198  003072  5011               	movf	__CANIDToRegs@Value,w,c
 13199  003074  6ED9               	movwf	fsr2l,c
 13200  003076  6ADA               	clrf	fsr2h,c
 13201  003078  50DF               	movf	indf2,w,c
 13202  00307A  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13203  00307C  0E05               	movlw	5
 13204  00307E  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13205  003080                     u10515:
 13206  003080  90D8               	bcf	status,0,c
 13207  003082  360F               	rlcf	??__CANIDToRegs,f,c
 13208  003084  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13209  003086  D7FC               	goto	u10515
 13210  003088  500F               	movf	??__CANIDToRegs,w,c
 13211  00308A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13212  00308E  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13213  003092  6EDF               	movwf	indf2,c
 13214                           
 13215                           ;ECAN.c: 1111: }
 13216  003094  D06C               	goto	l902
 13217  003096                     l9288:
 13218                           
 13219                           ;ECAN.c: 1112: else
 13220                           ;ECAN.c: 1113: {
 13221                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 13222  003096  5011               	movf	__CANIDToRegs@Value,w,c
 13223  003098  6ED9               	movwf	fsr2l,c
 13224  00309A  6ADA               	clrf	fsr2h,c
 13225  00309C  0E02               	movlw	2
 13226  00309E  26D9               	addwf	fsr2l,f,c
 13227  0030A0  6ADA               	clrf	fsr2h,c
 13228  0030A2  50DF               	movf	indf2,w,c
 13229  0030A4  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13230  0030A6  0E05               	movlw	5
 13231  0030A8  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13232  0030AA                     u10525:
 13233  0030AA  90D8               	bcf	status,0,c
 13234  0030AC  320F               	rrcf	??__CANIDToRegs,f,c
 13235  0030AE  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13236  0030B0  D7FC               	goto	u10525
 13237  0030B2  500F               	movf	??__CANIDToRegs,w,c
 13238  0030B4  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13239  0030B8  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13240  0030BC  6EDF               	movwf	indf2,c
 13241                           
 13242                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 13243  0030BE  5011               	movf	__CANIDToRegs@Value,w,c
 13244  0030C0  6ED9               	movwf	fsr2l,c
 13245  0030C2  6ADA               	clrf	fsr2h,c
 13246  0030C4  0E03               	movlw	3
 13247  0030C6  26D9               	addwf	fsr2l,f,c
 13248  0030C8  6ADA               	clrf	fsr2h,c
 13249  0030CA  50DF               	movf	indf2,w,c
 13250  0030CC  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13251  0030CE  90D8               	bcf	status,0,c
 13252  0030D0  360F               	rlcf	??__CANIDToRegs,f,c
 13253  0030D2  90D8               	bcf	status,0,c
 13254  0030D4  360F               	rlcf	??__CANIDToRegs,f,c
 13255  0030D6  90D8               	bcf	status,0,c
 13256  0030D8  360F               	rlcf	??__CANIDToRegs,f,c
 13257  0030DA  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13258  0030DE  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13259  0030E2  500F               	movf	??__CANIDToRegs,w,c
 13260  0030E4  12DF               	iorwf	indf2,f,c
 13261                           
 13262                           ;ECAN.c: 1117: ptr++;
 13263  0030E6  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13264  0030E8  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13265                           
 13266                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 13267  0030EA  5011               	movf	__CANIDToRegs@Value,w,c
 13268  0030EC  6ED9               	movwf	fsr2l,c
 13269  0030EE  6ADA               	clrf	fsr2h,c
 13270  0030F0  0E02               	movlw	2
 13271  0030F2  26D9               	addwf	fsr2l,f,c
 13272  0030F4  6ADA               	clrf	fsr2h,c
 13273  0030F6  50DF               	movf	indf2,w,c
 13274  0030F8  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13275  0030FA  90D8               	bcf	status,0,c
 13276  0030FC  360F               	rlcf	??__CANIDToRegs,f,c
 13277  0030FE  90D8               	bcf	status,0,c
 13278  003100  360F               	rlcf	??__CANIDToRegs,f,c
 13279  003102  90D8               	bcf	status,0,c
 13280  003104  340F               	rlcf	??__CANIDToRegs,w,c
 13281  003106  0BE0               	andlw	224
 13282  003108  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13283  00310C  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13284  003110  6EDF               	movwf	indf2,c
 13285                           
 13286                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 13287  003112  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13288  003116  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13289  00311A  0E00               	movlw	0
 13290  00311C  86DB               	bsf	plusw2,3,c
 13291                           
 13292                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 13293  00311E  5011               	movf	__CANIDToRegs@Value,w,c
 13294  003120  6ED9               	movwf	fsr2l,c
 13295  003122  6ADA               	clrf	fsr2h,c
 13296  003124  0E02               	movlw	2
 13297  003126  26D9               	addwf	fsr2l,f,c
 13298  003128  6ADA               	clrf	fsr2h,c
 13299  00312A  50DF               	movf	indf2,w,c
 13300  00312C  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13301  00312E  0E03               	movlw	3
 13302  003130  160F               	andwf	??__CANIDToRegs,f,c
 13303  003132  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13304  003136  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13305  00313A  500F               	movf	??__CANIDToRegs,w,c
 13306  00313C  12DF               	iorwf	indf2,f,c
 13307                           
 13308                           ;ECAN.c: 1122: ptr++;
 13309  00313E  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13310  003140  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13311                           
 13312                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 13313  003142  5011               	movf	__CANIDToRegs@Value,w,c
 13314  003144  6ED9               	movwf	fsr2l,c
 13315  003146  6ADA               	clrf	fsr2h,c
 13316  003148  2AD9               	incf	fsr2l,f,c
 13317  00314A  6ADA               	clrf	fsr2h,c
 13318  00314C  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13319  003150  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13320  003154  CFDF FFE7          	movff	indf2,indf1
 13321                           
 13322                           ;ECAN.c: 1124: ptr++;
 13323  003158  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13324  00315A  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13325                           
 13326                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 13327  00315C  5011               	movf	__CANIDToRegs@Value,w,c
 13328  00315E  6ED9               	movwf	fsr2l,c
 13329  003160  6ADA               	clrf	fsr2h,c
 13330  003162  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13331  003166  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13332  00316A  CFDF FFE7          	movff	indf2,indf1
 13333  00316E                     l902:
 13334  00316E  0012               	return	
 13335  003170                     __end_of__CANIDToRegs:
 13336                           	opt stack 0
 13337                           tblptru	equ	0xFF8
 13338                           tblptrh	equ	0xFF7
 13339                           tblptrl	equ	0xFF6
 13340                           tablat	equ	0xFF5
 13341                           prodh	equ	0xFF4
 13342                           prodl	equ	0xFF3
 13343                           postinc0	equ	0xFEE
 13344                           wreg	equ	0xFE8
 13345                           indf1	equ	0xFE7
 13346                           fsr1h	equ	0xFE2
 13347                           fsr1l	equ	0xFE1
 13348                           indf2	equ	0xFDF
 13349                           postinc2	equ	0xFDE
 13350                           postdec2	equ	0xFDD
 13351                           plusw2	equ	0xFDB
 13352                           fsr2h	equ	0xFDA
 13353                           fsr2l	equ	0xFD9
 13354                           status	equ	0xFD8
 13355                           
 13356 ;; *************** function _vscp_getEvent *****************
 13357 ;; Defined at:
 13358 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 13359 ;; Parameters:    Size  Location     Type
 13360 ;;		None
 13361 ;; Auto vars:     Size  Location     Type
 13362 ;;  rv              1   43[COMRAM] unsigned char 
 13363 ;; Return value:  Size  Location     Type
 13364 ;;                  1    wreg      unsigned char 
 13365 ;; Registers used:
 13366 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13367 ;; Tracked objects:
 13368 ;;		On entry : F/0
 13369 ;;		On exit  : 0/0
 13370 ;;		Unchanged: 0/0
 13371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13372 ;;      Params:         0       0       0       0       0       0       0
 13373 ;;      Locals:         1       0       0       0       0       0       0
 13374 ;;      Temps:          0       0       0       0       0       0       0
 13375 ;;      Totals:         1       0       0       0       0       0       0
 13376 ;;Total ram usage:        1 bytes
 13377 ;; Hardware stack levels used:    1
 13378 ;; Hardware stack levels required when called:    6
 13379 ;; This function calls:
 13380 ;;		_getVSCPFrame
 13381 ;; This function is called by:
 13382 ;;		_main
 13383 ;; This function uses a non-reentrant model
 13384 ;;
 13385                           
 13386                           	psect	text56
 13387  003D32                     __ptext56:
 13388                           	opt stack 0
 13389  003D32                     _vscp_getEvent:
 13390                           	opt stack 24
 13391                           
 13392                           ; BSR set to: 0
 13393                           ;vscp_firmware.c: 1309: int8_t rv;
 13394                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 13395                           
 13396                           ;incstack = 0
 13397                           ;incstack = 0
 13398  003D32  BF96               	btfsc	_vscp_imsg& (0+255),7,b
 13399  003D34  D012               	goto	l1276
 13400                           
 13401                           ; BSR set to: 0
 13402                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 13403                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 13404                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 13405                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 13406                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 13407                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 13408  003D36  0E9A               	movlw	low (_vscp_imsg+4)
 13409  003D38  6E1E               	movwf	?_getVSCPFrame,c
 13410  003D3A  0E9B               	movlw	low (_vscp_imsg+5)
 13411  003D3C  6E1F               	movwf	?_getVSCPFrame+1,c
 13412  003D3E  0E97               	movlw	low (_vscp_imsg+1)
 13413  003D40  6E20               	movwf	?_getVSCPFrame+2,c
 13414  003D42  0E96               	movlw	low _vscp_imsg
 13415  003D44  6E21               	movwf	?_getVSCPFrame+3,c
 13416  003D46  0E9C               	movlw	low (_vscp_imsg+6)
 13417  003D48  6E22               	movwf	?_getVSCPFrame+4,c
 13418  003D4A  0E98               	movlw	(_vscp_imsg+2)& (0+255)
 13419  003D4C  ECF0  F01C         	call	_getVSCPFrame
 13420  003D50  6E2C               	movwf	vscp_getEvent@rv,c
 13421  003D52  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 13422  003D54  E002               	bz	l1276
 13423                           
 13424                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 13425  003D56  0100               	movlb	0	; () banked
 13426  003D58  8F96               	bsf	_vscp_imsg& (0+255),7,b
 13427  003D5A                     l1276:
 13428  003D5A  0012               	return	
 13429  003D5C                     __end_of_vscp_getEvent:
 13430                           	opt stack 0
 13431                           tblptru	equ	0xFF8
 13432                           tblptrh	equ	0xFF7
 13433                           tblptrl	equ	0xFF6
 13434                           tablat	equ	0xFF5
 13435                           prodh	equ	0xFF4
 13436                           prodl	equ	0xFF3
 13437                           postinc0	equ	0xFEE
 13438                           wreg	equ	0xFE8
 13439                           indf1	equ	0xFE7
 13440                           fsr1h	equ	0xFE2
 13441                           fsr1l	equ	0xFE1
 13442                           indf2	equ	0xFDF
 13443                           postinc2	equ	0xFDE
 13444                           postdec2	equ	0xFDD
 13445                           plusw2	equ	0xFDB
 13446                           fsr2h	equ	0xFDA
 13447                           fsr2l	equ	0xFD9
 13448                           status	equ	0xFD8
 13449                           
 13450 ;; *************** function _getVSCPFrame *****************
 13451 ;; Defined at:
 13452 ;;		line 2609 in file "../main.c"
 13453 ;; Parameters:    Size  Location     Type
 13454 ;;  pvscpclass      1    wreg     PTR unsigned short 
 13455 ;;		 -> vscp_imsg(14), 
 13456 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 13457 ;;		 -> vscp_imsg(14), 
 13458 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 13459 ;;		 -> vscp_imsg(14), 
 13460 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 13461 ;;		 -> vscp_imsg(14), 
 13462 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 13463 ;;		 -> vscp_imsg(14), 
 13464 ;;  pData           1   33[COMRAM] PTR unsigned char 
 13465 ;;		 -> vscp_imsg(14), 
 13466 ;; Auto vars:     Size  Location     Type
 13467 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 13468 ;;		 -> vscp_imsg(14), 
 13469 ;;  id              4   39[COMRAM] unsigned long 
 13470 ;; Return value:  Size  Location     Type
 13471 ;;                  1    wreg      unsigned char 
 13472 ;; Registers used:
 13473 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13474 ;; Tracked objects:
 13475 ;;		On entry : F/0
 13476 ;;		On exit  : 0/0
 13477 ;;		Unchanged: 0/0
 13478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13479 ;;      Params:         5       0       0       0       0       0       0
 13480 ;;      Locals:         5       0       0       0       0       0       0
 13481 ;;      Temps:          4       0       0       0       0       0       0
 13482 ;;      Totals:        14       0       0       0       0       0       0
 13483 ;;Total ram usage:       14 bytes
 13484 ;; Hardware stack levels used:    1
 13485 ;; Hardware stack levels required when called:    5
 13486 ;; This function calls:
 13487 ;;		_getCANFrame
 13488 ;; This function is called by:
 13489 ;;		_vscp_getEvent
 13490 ;; This function uses a non-reentrant model
 13491 ;;
 13492                           
 13493                           	psect	text57
 13494  0039E0                     __ptext57:
 13495                           	opt stack 0
 13496  0039E0                     _getVSCPFrame:
 13497                           	opt stack 24
 13498                           
 13499                           ;incstack = 0
 13500                           ;incstack = 0
 13501                           ;getVSCPFrame@pvscpclass stored from wreg
 13502  0039E0  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 13503                           
 13504                           ; BSR set to: 0
 13505                           ;main.c: 2610: uint32_t id;
 13506                           ;main.c: 2612: if ( !getCANFrame(&id, pSize, pData) ) {
 13507  0039E4  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 13508  0039E8  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 13509  0039EC  0E28               	movlw	getVSCPFrame@id& (0+255)
 13510  0039EE  EC6E  F01E         	call	_getCANFrame
 13511  0039F2  0900               	iorlw	0
 13512  0039F4  E102               	bnz	l6794
 13513                           
 13514                           ;main.c: 2613: return 0;
 13515  0039F6  0E00               	movlw	0
 13516  0039F8  D02E               	goto	l655
 13517  0039FA                     l6794:
 13518                           
 13519                           ;main.c: 2614: }
 13520                           ;main.c: 2616: *pNodeId = id & 0x0ff;
 13521  0039FA  501F               	movf	getVSCPFrame@pNodeId,w,c
 13522  0039FC  6ED9               	movwf	fsr2l,c
 13523  0039FE  6ADA               	clrf	fsr2h,c
 13524  003A00  C028  FFDF         	movff	getVSCPFrame@id,indf2
 13525                           
 13526                           ;main.c: 2617: *pvscptype = (id >> 8) & 0xff;
 13527  003A04  501E               	movf	getVSCPFrame@pvscptype,w,c
 13528  003A06  6ED9               	movwf	fsr2l,c
 13529  003A08  6ADA               	clrf	fsr2h,c
 13530  003A0A  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 13531                           
 13532                           ;main.c: 2618: *pvscpclass = (id >> 16) & 0x1ff;
 13533  003A0E  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 13534  003A10  6E23               	movwf	??_getVSCPFrame& (0+255),c
 13535  003A12  0E01               	movlw	1
 13536  003A14  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 13537  003A16  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 13538  003A18  5027               	movf	getVSCPFrame@pvscpclass,w,c
 13539  003A1A  6ED9               	movwf	fsr2l,c
 13540  003A1C  6ADA               	clrf	fsr2h,c
 13541  003A1E  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 13542  003A22  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 13543                           
 13544                           ;main.c: 2619: *pPriority = (uint16_t) (0x07 & (id >> 26));
 13545  003A26  5020               	movf	getVSCPFrame@pPriority,w,c
 13546  003A28  6ED9               	movwf	fsr2l,c
 13547  003A2A  6ADA               	clrf	fsr2h,c
 13548  003A2C  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 13549  003A30  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 13550  003A34  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 13551  003A38  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 13552  003A3C  0E1B               	movlw	27
 13553  003A3E  D005               	goto	u6640
 13554  003A40                     u6645:
 13555  003A40  90D8               	bcf	status,0,c
 13556  003A42  3226               	rrcf	??_getVSCPFrame+3,f,c
 13557  003A44  3225               	rrcf	??_getVSCPFrame+2,f,c
 13558  003A46  3224               	rrcf	??_getVSCPFrame+1,f,c
 13559  003A48  3223               	rrcf	??_getVSCPFrame,f,c
 13560  003A4A                     u6640:
 13561  003A4A  2EE8               	decfsz	wreg,f,c
 13562  003A4C  D7F9               	goto	u6645
 13563  003A4E  5023               	movf	??_getVSCPFrame,w,c
 13564  003A50  0B07               	andlw	7
 13565  003A52  6EDF               	movwf	indf2,c
 13566                           
 13567                           ;main.c: 2621: return 1;
 13568  003A54  0E01               	movlw	1
 13569  003A56                     l655:
 13570  003A56  0012               	return	
 13571  003A58                     __end_of_getVSCPFrame:
 13572                           	opt stack 0
 13573                           tblptru	equ	0xFF8
 13574                           tblptrh	equ	0xFF7
 13575                           tblptrl	equ	0xFF6
 13576                           tablat	equ	0xFF5
 13577                           prodh	equ	0xFF4
 13578                           prodl	equ	0xFF3
 13579                           postinc0	equ	0xFEE
 13580                           wreg	equ	0xFE8
 13581                           indf1	equ	0xFE7
 13582                           fsr1h	equ	0xFE2
 13583                           fsr1l	equ	0xFE1
 13584                           indf2	equ	0xFDF
 13585                           postinc2	equ	0xFDE
 13586                           postdec2	equ	0xFDD
 13587                           plusw2	equ	0xFDB
 13588                           fsr2h	equ	0xFDA
 13589                           fsr2l	equ	0xFD9
 13590                           status	equ	0xFD8
 13591                           
 13592 ;; *************** function _getCANFrame *****************
 13593 ;; Defined at:
 13594 ;;		line 2651 in file "../main.c"
 13595 ;; Parameters:    Size  Location     Type
 13596 ;;  pid             1    wreg     PTR unsigned long 
 13597 ;;		 -> getVSCPFrame@id(4), 
 13598 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 13599 ;;		 -> vscp_imsg(14), 
 13600 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 13601 ;;		 -> vscp_imsg(14), 
 13602 ;; Auto vars:     Size  Location     Type
 13603 ;;  pid             1   27[COMRAM] PTR unsigned long 
 13604 ;;		 -> getVSCPFrame@id(4), 
 13605 ;;  flags           1   28[COMRAM] enum E16332
 13606 ;; Return value:  Size  Location     Type
 13607 ;;                  1    wreg      unsigned char 
 13608 ;; Registers used:
 13609 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13610 ;; Tracked objects:
 13611 ;;		On entry : F/0
 13612 ;;		On exit  : 0/0
 13613 ;;		Unchanged: 0/0
 13614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13615 ;;      Params:         2       0       0       0       0       0       0
 13616 ;;      Locals:         2       0       0       0       0       0       0
 13617 ;;      Temps:          0       0       0       0       0       0       0
 13618 ;;      Totals:         4       0       0       0       0       0       0
 13619 ;;Total ram usage:        4 bytes
 13620 ;; Hardware stack levels used:    1
 13621 ;; Hardware stack levels required when called:    4
 13622 ;; This function calls:
 13623 ;;		_ECANReceiveMessage
 13624 ;; This function is called by:
 13625 ;;		_getVSCPFrame
 13626 ;; This function uses a non-reentrant model
 13627 ;;
 13628                           
 13629                           	psect	text58
 13630  003CDC                     __ptext58:
 13631                           	opt stack 0
 13632  003CDC                     _getCANFrame:
 13633                           	opt stack 24
 13634                           
 13635                           ;incstack = 0
 13636                           ;incstack = 0
 13637                           ;getCANFrame@pid stored from wreg
 13638  003CDC  CFE8 F01C          	movff	wreg,getCANFrame@pid
 13639                           
 13640                           ; BSR set to: 0
 13641                           ;main.c: 2652: ECAN_RX_MSG_FLAGS flags;
 13642                           ;main.c: 2656: if (vscp_imsg.flags & 0x80) return 0;
 13643  003CE0  AF96               	btfss	_vscp_imsg& (0+255),7,b
 13644  003CE2  D002               	goto	l6810
 13645  003CE4                     l6806:
 13646  003CE4  0E00               	movlw	0
 13647  003CE6  D00F               	goto	l666
 13648  003CE8                     l6810:
 13649                           
 13650                           ; BSR set to: 0
 13651                           ;main.c: 2658: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 13652  003CE8  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 13653  003CEC  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 13654  003CF0  0E1D               	movlw	low getCANFrame@flags
 13655  003CF2  6E11               	movwf	?_ECANReceiveMessage+2,c
 13656  003CF4  501C               	movf	getCANFrame@pid,w,c
 13657  003CF6  EC22  F013         	call	_ECANReceiveMessage
 13658  003CFA  0900               	iorlw	0
 13659  003CFC  E0F3               	bz	l6806
 13660                           
 13661                           ;main.c: 2661: if (flags & ECAN_RX_RTR_FRAME) return 0;
 13662  003CFE  AC1D               	btfss	getCANFrame@flags,6,c
 13663                           
 13664                           ;main.c: 2664: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 13665  003D00  AA1D               	btfss	getCANFrame@flags,5,c
 13666  003D02  D7F0               	goto	l6806
 13667                           
 13668                           ;main.c: 2666: return 1;
 13669  003D04  0E01               	movlw	1
 13670  003D06                     l666:
 13671  003D06  0012               	return	
 13672  003D08                     __end_of_getCANFrame:
 13673                           	opt stack 0
 13674                           tblptru	equ	0xFF8
 13675                           tblptrh	equ	0xFF7
 13676                           tblptrl	equ	0xFF6
 13677                           tablat	equ	0xFF5
 13678                           prodh	equ	0xFF4
 13679                           prodl	equ	0xFF3
 13680                           postinc0	equ	0xFEE
 13681                           wreg	equ	0xFE8
 13682                           indf1	equ	0xFE7
 13683                           fsr1h	equ	0xFE2
 13684                           fsr1l	equ	0xFE1
 13685                           indf2	equ	0xFDF
 13686                           postinc2	equ	0xFDE
 13687                           postdec2	equ	0xFDD
 13688                           plusw2	equ	0xFDB
 13689                           fsr2h	equ	0xFDA
 13690                           fsr2l	equ	0xFD9
 13691                           status	equ	0xFD8
 13692                           
 13693 ;; *************** function _ECANReceiveMessage *****************
 13694 ;; Defined at:
 13695 ;;		line 803 in file "../ECAN.c"
 13696 ;; Parameters:    Size  Location     Type
 13697 ;;  id              1    wreg     PTR unsigned long 
 13698 ;;		 -> getVSCPFrame@id(4), 
 13699 ;;  data            1   14[COMRAM] PTR unsigned char 
 13700 ;;		 -> vscp_imsg(14), 
 13701 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 13702 ;;		 -> vscp_imsg(14), 
 13703 ;;  msgFlags        1   16[COMRAM] PTR enum E16324
 13704 ;;		 -> getCANFrame@flags(1), 
 13705 ;; Auto vars:     Size  Location     Type
 13706 ;;  id              1   19[COMRAM] PTR unsigned long 
 13707 ;;		 -> getVSCPFrame@id(4), 
 13708 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 13709 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 13710 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 13711 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 13712 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 13713 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 13714 ;;  temp            1   22[COMRAM] struct .
 13715 ;;  mode            1   21[COMRAM] unsigned char 
 13716 ;;  i               1   20[COMRAM] unsigned char 
 13717 ;; Return value:  Size  Location     Type
 13718 ;;                  1    wreg      enum E15660
 13719 ;; Registers used:
 13720 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13721 ;; Tracked objects:
 13722 ;;		On entry : F/0
 13723 ;;		On exit  : 0/0
 13724 ;;		Unchanged: 0/0
 13725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13726 ;;      Params:         3       0       0       0       0       0       0
 13727 ;;      Locals:         8       0       0       0       0       0       0
 13728 ;;      Temps:          0       0       0       0       0       0       0
 13729 ;;      Totals:        11       0       0       0       0       0       0
 13730 ;;Total ram usage:       11 bytes
 13731 ;; Hardware stack levels used:    1
 13732 ;; Hardware stack levels required when called:    3
 13733 ;; This function calls:
 13734 ;;		__ECANPointBuffer
 13735 ;;		__RegsToCANID
 13736 ;; This function is called by:
 13737 ;;		_getCANFrame
 13738 ;; This function uses a non-reentrant model
 13739 ;;
 13740                           
 13741                           	psect	text59
 13742  002644                     __ptext59:
 13743                           	opt stack 0
 13744  002644                     _ECANReceiveMessage:
 13745                           	opt stack 24
 13746                           
 13747                           ;incstack = 0
 13748                           ;incstack = 0
 13749                           ;ECANReceiveMessage@id stored from wreg
 13750  002644  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 13751                           
 13752                           ; BSR set to: 0
 13753                           ;ECAN.c: 805: BYTE mode;
 13754                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 13755                           ;ECAN.c: 809: char i;
 13756                           ;ECAN.c: 810: BYTE_VAL temp;
 13757                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 13758  002648  6A54               	clrf	__ECANRxFilterHitInfo,c
 13759                           
 13760                           ; BSR set to: 0
 13761                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 13762  00264A  5077               	movf	3959,w,c	;volatile
 13763  00264C  0BC0               	andlw	192
 13764  00264E  6E16               	movwf	ECANReceiveMessage@mode,c
 13765                           
 13766                           ; BSR set to: 0
 13767                           ;ECAN.c: 816: if ( mode == 0x00 )
 13768  002650  6616               	tstfsz	ECANReceiveMessage@mode,c
 13769  002652  D032               	goto	l6942
 13770                           
 13771                           ; BSR set to: 0
 13772                           ;ECAN.c: 822: {
 13773                           ;ECAN.c: 824: if ( RXB0FUL )
 13774  002654  AE60               	btfss	3936,7,c	;volatile
 13775  002656  D012               	goto	l853
 13776                           
 13777                           ; BSR set to: 0
 13778                           ;ECAN.c: 825: {
 13779                           ;ECAN.c: 827: RXB0IF = 0;
 13780  002658  90A4               	bcf	4004,0,c	;volatile
 13781                           
 13782                           ;ECAN.c: 830: if ( RXB0OVFL )
 13783  00265A  AE74               	btfss	3956,7,c	;volatile
 13784  00265C  D006               	goto	l6918
 13785                           
 13786                           ; BSR set to: 0
 13787                           ;ECAN.c: 831: {
 13788                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 13789  00265E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 13790  002660  6ED9               	movwf	fsr2l,c
 13791  002662  6ADA               	clrf	fsr2h,c
 13792  002664  0E00               	movlw	0
 13793  002666  86DB               	bsf	plusw2,3,c
 13794                           
 13795                           ; BSR set to: 0
 13796                           ;ECAN.c: 833: RXB0OVFL = 0;
 13797  002668  9E74               	bcf	3956,7,c	;volatile
 13798  00266A                     l6918:
 13799                           
 13800                           ; BSR set to: 0
 13801                           ;ECAN.c: 834: }
 13802                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 13803  00266A  A060               	btfss	3936,0,c	;volatile
 13804  00266C  D002               	bra	u6815
 13805  00266E  8054               	bsf	__ECANRxFilterHitInfo,0,c
 13806  002670  D001               	bra	u6817
 13807  002672                     u6815:
 13808  002672  9054               	bcf	__ECANRxFilterHitInfo,0,c
 13809  002674                     u6817:
 13810                           
 13811                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 13812  002674  0E0F               	movlw	15	;volatile
 13813  002676  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 13814  002678  0E60               	movlw	96	;volatile
 13815  00267A  D01A               	goto	L41
 13816  00267C                     l853:
 13817                           
 13818                           ; BSR set to: 0
 13819                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 13820  00267C  010F               	movlb	15	; () banked
 13821  00267E  AF50               	btfss	80,7,b	;volatile
 13822  002680  D019               	goto	l6936
 13823                           
 13824                           ; BSR set to: 15
 13825                           ;ECAN.c: 842: {
 13826                           ;ECAN.c: 844: RXB1IF = 0;
 13827  002682  92A4               	bcf	4004,1,c	;volatile
 13828                           
 13829                           ;ECAN.c: 847: if ( RXB1OVFL )
 13830  002684  AC74               	btfss	3956,6,c	;volatile
 13831  002686  D006               	goto	l6928
 13832                           
 13833                           ; BSR set to: 15
 13834                           ;ECAN.c: 848: {
 13835                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 13836  002688  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 13837  00268A  6ED9               	movwf	fsr2l,c
 13838  00268C  6ADA               	clrf	fsr2h,c
 13839  00268E  0E00               	movlw	0
 13840  002690  86DB               	bsf	plusw2,3,c
 13841                           
 13842                           ; BSR set to: 15
 13843                           ;ECAN.c: 850: RXB1OVFL = 0;
 13844  002692  9C74               	bcf	3956,6,c	;volatile
 13845  002694                     l6928:
 13846                           
 13847                           ; BSR set to: 15
 13848                           ;ECAN.c: 851: }
 13849                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 13850  002694  5150               	movf	80,w,b	;volatile
 13851  002696  0B07               	andlw	7
 13852  002698  6E54               	movwf	__ECANRxFilterHitInfo,c
 13853                           
 13854                           ; BSR set to: 15
 13855                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 13856  00269A  0E02               	movlw	2
 13857  00269C  6054               	cpfslt	__ECANRxFilterHitInfo,c
 13858  00269E  D005               	goto	l6934
 13859                           
 13860                           ; BSR set to: 15
 13861                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 13862  0026A0  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 13863  0026A2  6ED9               	movwf	fsr2l,c
 13864  0026A4  6ADA               	clrf	fsr2h,c
 13865  0026A6  0E00               	movlw	0
 13866  0026A8  8EDB               	bsf	plusw2,7,c
 13867  0026AA                     l6934:
 13868                           
 13869                           ; BSR set to: 15
 13870                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 13871  0026AA  0E0F               	movlw	15	;volatile
 13872  0026AC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 13873  0026AE  0E50               	movlw	80	;volatile
 13874  0026B0                     L41:
 13875  0026B0  6E18               	movwf	ECANReceiveMessage@ptr,c
 13876                           
 13877                           ;ECAN.c: 860: }
 13878  0026B2  D065               	goto	l6996
 13879  0026B4                     l6936:
 13880                           
 13881                           ;ECAN.c: 861: else
 13882                           ;ECAN.c: 862: return FALSE;
 13883  0026B4  0E00               	movlw	0
 13884  0026B6  D0CC               	goto	l860
 13885  0026B8                     l6942:
 13886                           
 13887                           ; BSR set to: 0
 13888                           ;ECAN.c: 869: else if ( mode == 0x40 )
 13889  0026B8  5016               	movf	ECANReceiveMessage@mode,w,c
 13890  0026BA  0A40               	xorlw	64
 13891  0026BC  E146               	bnz	l863
 13892                           
 13893                           ; BSR set to: 0
 13894                           ;ECAN.c: 875: {
 13895                           ;ECAN.c: 876: if ( RXB0FUL )
 13896  0026BE  AE60               	btfss	3936,7,c	;volatile
 13897  0026C0  D004               	goto	l864
 13898                           
 13899                           ; BSR set to: 0
 13900                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 13901  0026C2  0E0F               	movlw	15	;volatile
 13902  0026C4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 13903  0026C6  0E60               	movlw	96	;volatile
 13904  0026C8  D03E               	goto	L48
 13905  0026CA                     l864:
 13906                           
 13907                           ; BSR set to: 0
 13908                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 13909  0026CA  010F               	movlb	15	; () banked
 13910  0026CC  AF50               	btfss	80,7,b	;volatile
 13911  0026CE  D004               	goto	l866
 13912                           
 13913                           ; BSR set to: 15
 13914                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 13915  0026D0  0E0F               	movlw	15	;volatile
 13916  0026D2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 13917  0026D4  0E50               	movlw	80	;volatile
 13918  0026D6  D037               	goto	L48
 13919  0026D8                     l866:
 13920                           
 13921                           ; BSR set to: 15
 13922                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 13923  0026D8  010D               	movlb	13
 13924  0026DA  B5F8               	btfsc	248,2,b	;volatile
 13925  0026DC  D007               	goto	l868
 13926  0026DE  010E               	movlb	14
 13927  0026E0  AF20               	btfss	32,7,b	;volatile
 13928  0026E2  D004               	goto	l868
 13929                           
 13930                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 13931  0026E4  0E0E               	movlw	14	;volatile
 13932  0026E6  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 13933  0026E8  0E20               	movlw	32	;volatile
 13934  0026EA  D02D               	goto	L48
 13935  0026EC                     l868:
 13936                           
 13937                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 13938  0026EC  010D               	movlb	13
 13939  0026EE  B7F8               	btfsc	248,3,b	;volatile
 13940  0026F0  D007               	goto	l870
 13941  0026F2  010E               	movlb	14
 13942  0026F4  AF30               	btfss	48,7,b	;volatile
 13943  0026F6  D004               	goto	l870
 13944                           
 13945                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 13946  0026F8  0E0E               	movlw	14	;volatile
 13947  0026FA  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 13948  0026FC  0E30               	movlw	48	;volatile
 13949  0026FE  D023               	goto	L48
 13950  002700                     l870:
 13951                           
 13952                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 13953  002700  010D               	movlb	13
 13954  002702  B9F8               	btfsc	248,4,b	;volatile
 13955  002704  D007               	goto	l872
 13956  002706  010E               	movlb	14
 13957  002708  AF40               	btfss	64,7,b	;volatile
 13958  00270A  D004               	goto	l872
 13959                           
 13960                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 13961  00270C  0E0E               	movlw	14	;volatile
 13962  00270E  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 13963  002710  0E40               	movlw	64	;volatile
 13964  002712  D019               	goto	L48
 13965  002714                     l872:
 13966                           
 13967                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 13968  002714  010D               	movlb	13
 13969  002716  BBF8               	btfsc	248,5,b	;volatile
 13970  002718  D005               	goto	l874
 13971  00271A  010E               	movlb	14
 13972  00271C  AF50               	btfss	80,7,b	;volatile
 13973  00271E  D002               	goto	l874
 13974                           
 13975                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 13976  002720  0E0E               	movlw	14	;volatile
 13977  002722  D7D7               	goto	L49
 13978  002724                     l874:
 13979                           
 13980                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 13981  002724  010D               	movlb	13
 13982  002726  BDF8               	btfsc	248,6,b	;volatile
 13983  002728  D005               	goto	l876
 13984  00272A  010E               	movlb	14
 13985  00272C  AF60               	btfss	96,7,b	;volatile
 13986  00272E  D002               	goto	l876
 13987                           
 13988                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 13989  002730  0E0E               	movlw	14	;volatile
 13990  002732  D7C8               	goto	L50
 13991  002734                     l876:
 13992                           
 13993                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 13994  002734  010D               	movlb	13
 13995  002736  BFF8               	btfsc	248,7,b	;volatile
 13996  002738  D7BD               	goto	l6936
 13997  00273A  010E               	movlb	14
 13998  00273C  AF70               	btfss	112,7,b	;volatile
 13999  00273E  D7BA               	goto	l6936
 14000                           
 14001                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 14002  002740  0E0E               	movlw	14	;volatile
 14003  002742  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14004  002744  0E70               	movlw	112	;volatile
 14005  002746                     L48:
 14006  002746  6E18               	movwf	ECANReceiveMessage@ptr,c
 14007  002748  D00A               	goto	l6986
 14008  00274A                     l863:
 14009                           
 14010                           ; BSR set to: 0
 14011                           ;ECAN.c: 910: else
 14012                           ;ECAN.c: 915: {
 14013                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 14014  00274A  AE74               	btfss	3956,7,c	;volatile
 14015  00274C  D7B3               	goto	l6936
 14016                           
 14017                           ; BSR set to: 0
 14018                           ;ECAN.c: 917: {
 14019                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 14020  00274E  506F               	movf	3951,w,c	;volatile
 14021  002750  0B07               	andlw	7
 14022  002752  EC2C  F01D         	call	__ECANPointBuffer
 14023  002756  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 14024  00275A  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 14025  00275E                     l6986:
 14026                           
 14027                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 14028  00275E  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14029  002762  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14030  002766  50DF               	movf	indf2,w,c
 14031  002768  0B1F               	andlw	31
 14032  00276A  6E54               	movwf	__ECANRxFilterHitInfo,c
 14033                           
 14034                           ;ECAN.c: 932: RXB1IF = 0;
 14035  00276C  92A4               	bcf	4004,1,c	;volatile
 14036                           
 14037                           ;ECAN.c: 934: if ( RXB1OVFL )
 14038  00276E  AC74               	btfss	3956,6,c	;volatile
 14039  002770  D006               	goto	l6996
 14040                           
 14041                           ;ECAN.c: 935: {
 14042                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 14043  002772  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14044  002774  6ED9               	movwf	fsr2l,c
 14045  002776  6ADA               	clrf	fsr2h,c
 14046  002778  0E00               	movlw	0
 14047  00277A  86DB               	bsf	plusw2,3,c
 14048                           
 14049                           ;ECAN.c: 937: RXB1OVFL = 0;
 14050  00277C  9C74               	bcf	3956,6,c	;volatile
 14051  00277E                     l6996:
 14052                           
 14053                           ;ECAN.c: 942: savedPtr = ptr;
 14054  00277E  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 14055  002782  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 14056                           
 14057                           ;ECAN.c: 943: *msgFlags = 0;
 14058  002786  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14059  002788  6ED9               	movwf	fsr2l,c
 14060  00278A  6ADA               	clrf	fsr2h,c
 14061  00278C  6ADF               	clrf	indf2,c
 14062                           
 14063                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 14064  00278E  EE20 F005          	lfsr	2,5
 14065  002792  5018               	movf	ECANReceiveMessage@ptr,w,c
 14066  002794  26D9               	addwf	fsr2l,f,c
 14067  002796  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14068  002798  22DA               	addwfc	fsr2h,f,c
 14069  00279A  50DF               	movf	indf2,w,c
 14070  00279C  6E17               	movwf	ECANReceiveMessage@temp,c
 14071                           
 14072                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 14073  00279E  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14074  0027A0  6ED9               	movwf	fsr2l,c
 14075  0027A2  6ADA               	clrf	fsr2h,c
 14076  0027A4  5017               	movf	ECANReceiveMessage@temp,w,c
 14077  0027A6  0B0F               	andlw	15
 14078  0027A8  6EDF               	movwf	indf2,c
 14079                           
 14080                           ;ECAN.c: 950: if ( temp.bits.b6 )
 14081  0027AA  AC17               	btfss	ECANReceiveMessage@temp,6,c
 14082  0027AC  D005               	goto	l884
 14083                           
 14084                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 14085  0027AE  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14086  0027B0  6ED9               	movwf	fsr2l,c
 14087  0027B2  6ADA               	clrf	fsr2h,c
 14088  0027B4  0E00               	movlw	0
 14089  0027B6  8CDB               	bsf	plusw2,6,c
 14090  0027B8                     l884:
 14091                           
 14092                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 14093  0027B8  EE20 F002          	lfsr	2,2
 14094  0027BC  5018               	movf	ECANReceiveMessage@ptr,w,c
 14095  0027BE  26D9               	addwf	fsr2l,f,c
 14096  0027C0  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14097  0027C2  22DA               	addwfc	fsr2h,f,c
 14098  0027C4  50DF               	movf	indf2,w,c
 14099  0027C6  6E17               	movwf	ECANReceiveMessage@temp,c
 14100                           
 14101                           ;ECAN.c: 955: if ( temp.bits.b3 )
 14102  0027C8  A617               	btfss	ECANReceiveMessage@temp,3,c
 14103  0027CA  D008               	goto	l885
 14104                           
 14105                           ;ECAN.c: 956: {
 14106                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 14107  0027CC  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14108  0027CE  6ED9               	movwf	fsr2l,c
 14109  0027D0  6ADA               	clrf	fsr2h,c
 14110  0027D2  0E00               	movlw	0
 14111  0027D4  8ADB               	bsf	plusw2,5,c
 14112                           
 14113                           ;ECAN.c: 958: temp.Val = 1;
 14114  0027D6  0E01               	movlw	1
 14115  0027D8  6E17               	movwf	ECANReceiveMessage@temp,c
 14116                           
 14117                           ;ECAN.c: 959: }
 14118  0027DA  D001               	goto	l7014
 14119  0027DC                     l885:
 14120                           
 14121                           ;ECAN.c: 960: else
 14122                           ;ECAN.c: 961: temp.Val = 0;
 14123  0027DC  6A17               	clrf	ECANReceiveMessage@temp,c
 14124  0027DE                     l7014:
 14125                           
 14126                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 14127  0027DE  2818               	incf	ECANReceiveMessage@ptr,w,c
 14128  0027E0  6E08               	movwf	?__RegsToCANID,c
 14129  0027E2  0E00               	movlw	0
 14130  0027E4  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 14131  0027E6  6E09               	movwf	?__RegsToCANID+1,c
 14132  0027E8  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 14133  0027EC  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 14134  0027F0  ECB5  F016         	call	__RegsToCANID	;wreg free
 14135                           
 14136                           ;ECAN.c: 966: ptr += 6;
 14137  0027F4  0E06               	movlw	6
 14138  0027F6  2618               	addwf	ECANReceiveMessage@ptr,f,c
 14139  0027F8  0E00               	movlw	0
 14140  0027FA  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 14141                           
 14142                           ;ECAN.c: 967: temp.Val = *dataLen;
 14143  0027FC  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14144  0027FE  6ED9               	movwf	fsr2l,c
 14145  002800  6ADA               	clrf	fsr2h,c
 14146  002802  50DF               	movf	indf2,w,c
 14147  002804  6E17               	movwf	ECANReceiveMessage@temp,c
 14148                           
 14149                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 14150  002806  6A15               	clrf	ECANReceiveMessage@i,c
 14151  002808  D00D               	goto	l7030
 14152  00280A                     l7022:
 14153                           
 14154                           ;ECAN.c: 969: *data++ = *ptr++;
 14155  00280A  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14156  00280E  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14157  002812  500F               	movf	ECANReceiveMessage@data,w,c
 14158  002814  6EE1               	movwf	fsr1l,c
 14159  002816  6AE2               	clrf	fsr1h,c
 14160  002818  CFDF FFE7          	movff	indf2,indf1
 14161  00281C  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 14162  00281E  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 14163  002820  2A0F               	incf	ECANReceiveMessage@data,f,c
 14164  002822  2A15               	incf	ECANReceiveMessage@i,f,c
 14165  002824                     l7030:
 14166  002824  5017               	movf	ECANReceiveMessage@temp,w,c
 14167  002826  5C15               	subwf	ECANReceiveMessage@i,w,c
 14168  002828  E3F0               	bnc	l7022
 14169                           
 14170                           ;ECAN.c: 972: if ( IRXIF )
 14171  00282A  AEA4               	btfss	4004,7,c	;volatile
 14172  00282C  D006               	goto	l7036
 14173                           
 14174                           ;ECAN.c: 973: {
 14175                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 14176  00282E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14177  002830  6ED9               	movwf	fsr2l,c
 14178  002832  6ADA               	clrf	fsr2h,c
 14179  002834  0E00               	movlw	0
 14180  002836  88DB               	bsf	plusw2,4,c
 14181                           
 14182                           ;ECAN.c: 975: IRXIF = 0;
 14183  002838  9EA4               	bcf	4004,7,c	;volatile
 14184  00283A                     l7036:
 14185                           
 14186                           ;ECAN.c: 976: }
 14187                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 14188  00283A  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 14189  00283E  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 14190  002842  0E7F               	movlw	127
 14191  002844  16DF               	andwf	indf2,f,c
 14192                           
 14193                           ;ECAN.c: 983: if ( mode == 0x80 )
 14194  002846  5016               	movf	ECANReceiveMessage@mode,w,c
 14195  002848  0A80               	xorlw	128
 14196  00284A  B4D8               	btfsc	status,2,c
 14197                           
 14198                           ;ECAN.c: 984: FIFOEMPTY = 0;
 14199  00284C  9E74               	bcf	3956,7,c	;volatile
 14200                           
 14201                           ;ECAN.c: 990: return TRUE;
 14202  00284E  0E01               	movlw	1
 14203  002850                     l860:
 14204  002850  0012               	return	
 14205  002852                     __end_of_ECANReceiveMessage:
 14206                           	opt stack 0
 14207                           tblptru	equ	0xFF8
 14208                           tblptrh	equ	0xFF7
 14209                           tblptrl	equ	0xFF6
 14210                           tablat	equ	0xFF5
 14211                           prodh	equ	0xFF4
 14212                           prodl	equ	0xFF3
 14213                           postinc0	equ	0xFEE
 14214                           wreg	equ	0xFE8
 14215                           indf1	equ	0xFE7
 14216                           fsr1h	equ	0xFE2
 14217                           fsr1l	equ	0xFE1
 14218                           indf2	equ	0xFDF
 14219                           postinc2	equ	0xFDE
 14220                           postdec2	equ	0xFDD
 14221                           plusw2	equ	0xFDB
 14222                           fsr2h	equ	0xFDA
 14223                           fsr2l	equ	0xFD9
 14224                           status	equ	0xFD8
 14225                           
 14226 ;; *************** function __RegsToCANID *****************
 14227 ;; Defined at:
 14228 ;;		line 1156 in file "../ECAN.c"
 14229 ;; Parameters:    Size  Location     Type
 14230 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 14231 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14232 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14233 ;;  val             1    9[COMRAM] PTR unsigned long 
 14234 ;;		 -> getVSCPFrame@id(4), 
 14235 ;;  type            1   10[COMRAM] unsigned char 
 14236 ;; Auto vars:     Size  Location     Type
 14237 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 14238 ;;		 -> getVSCPFrame@id(4), 
 14239 ;; Return value:  Size  Location     Type
 14240 ;;		None               void
 14241 ;; Registers used:
 14242 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14243 ;; Tracked objects:
 14244 ;;		On entry : 0/0
 14245 ;;		On exit  : 0/0
 14246 ;;		Unchanged: 0/0
 14247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14248 ;;      Params:         4       0       0       0       0       0       0
 14249 ;;      Locals:         1       0       0       0       0       0       0
 14250 ;;      Temps:          2       0       0       0       0       0       0
 14251 ;;      Totals:         7       0       0       0       0       0       0
 14252 ;;Total ram usage:        7 bytes
 14253 ;; Hardware stack levels used:    1
 14254 ;; Hardware stack levels required when called:    2
 14255 ;; This function calls:
 14256 ;;		Nothing
 14257 ;; This function is called by:
 14258 ;;		_ECANReceiveMessage
 14259 ;; This function uses a non-reentrant model
 14260 ;;
 14261                           
 14262                           	psect	text60
 14263  002D6A                     __ptext60:
 14264                           	opt stack 0
 14265  002D6A                     __RegsToCANID:
 14266                           	opt stack 24
 14267                           
 14268                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 14269                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 14270                           
 14271                           ;incstack = 0
 14272                           ;incstack = 0
 14273  002D6A  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 14274                           
 14275                           ;ECAN.c: 1161: if ( type == 0 )
 14276  002D6E  660B               	tstfsz	__RegsToCANID@type,c
 14277  002D70  D046               	goto	l7110
 14278                           
 14279                           ;ECAN.c: 1162: {
 14280                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 14281  002D72  500E               	movf	__RegsToCANID@Value,w,c
 14282  002D74  6ED9               	movwf	fsr2l,c
 14283  002D76  6ADA               	clrf	fsr2h,c
 14284  002D78  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14285  002D7C  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14286  002D80  50E7               	movf	indf1,w,c
 14287  002D82  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14288  002D84  90D8               	bcf	status,0,c
 14289  002D86  360C               	rlcf	??__RegsToCANID,f,c
 14290  002D88  90D8               	bcf	status,0,c
 14291  002D8A  360C               	rlcf	??__RegsToCANID,f,c
 14292  002D8C  90D8               	bcf	status,0,c
 14293  002D8E  340C               	rlcf	??__RegsToCANID,w,c
 14294  002D90  6EDF               	movwf	indf2,c
 14295                           
 14296                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 14297  002D92  500E               	movf	__RegsToCANID@Value,w,c
 14298  002D94  6ED9               	movwf	fsr2l,c
 14299  002D96  6ADA               	clrf	fsr2h,c
 14300  002D98  2AD9               	incf	fsr2l,f,c
 14301  002D9A  6ADA               	clrf	fsr2h,c
 14302  002D9C  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14303  002DA0  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14304  002DA4  50E7               	movf	indf1,w,c
 14305  002DA6  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14306  002DA8  0E05               	movlw	5
 14307  002DAA  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14308  002DAC                     u7135:
 14309  002DAC  90D8               	bcf	status,0,c
 14310  002DAE  320C               	rrcf	??__RegsToCANID,f,c
 14311  002DB0  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14312  002DB2  D7FC               	goto	u7135
 14313  002DB4  500C               	movf	??__RegsToCANID,w,c
 14314  002DB6  6EDF               	movwf	indf2,c
 14315                           
 14316                           ;ECAN.c: 1166: ptr++;
 14317  002DB8  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14318  002DBA  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14319                           
 14320                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 14321  002DBC  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14322  002DC0  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14323  002DC4  50DF               	movf	indf2,w,c
 14324  002DC6  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14325  002DC8  0E05               	movlw	5
 14326  002DCA  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14327  002DCC                     u7145:
 14328  002DCC  90D8               	bcf	status,0,c
 14329  002DCE  320C               	rrcf	??__RegsToCANID,f,c
 14330  002DD0  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14331  002DD2  D7FC               	goto	u7145
 14332  002DD4  500E               	movf	__RegsToCANID@Value,w,c
 14333  002DD6  6ED9               	movwf	fsr2l,c
 14334  002DD8  6ADA               	clrf	fsr2h,c
 14335  002DDA  500C               	movf	??__RegsToCANID,w,c
 14336  002DDC  12DF               	iorwf	indf2,f,c
 14337                           
 14338                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 14339  002DDE  500E               	movf	__RegsToCANID@Value,w,c
 14340  002DE0  6ED9               	movwf	fsr2l,c
 14341  002DE2  6ADA               	clrf	fsr2h,c
 14342  002DE4  0E02               	movlw	2
 14343  002DE6  26D9               	addwf	fsr2l,f,c
 14344  002DE8  6ADA               	clrf	fsr2h,c
 14345  002DEA  6ADF               	clrf	indf2,c
 14346                           
 14347                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 14348  002DEC  500E               	movf	__RegsToCANID@Value,w,c
 14349  002DEE  6ED9               	movwf	fsr2l,c
 14350  002DF0  6ADA               	clrf	fsr2h,c
 14351  002DF2  0E03               	movlw	3
 14352  002DF4  26D9               	addwf	fsr2l,f,c
 14353  002DF6  6ADA               	clrf	fsr2h,c
 14354  002DF8  0E00               	movlw	0
 14355  002DFA  6EDF               	movwf	indf2,c
 14356                           
 14357                           ;ECAN.c: 1170: }
 14358  002DFC  D067               	goto	l907
 14359  002DFE                     l7110:
 14360                           
 14361                           ;ECAN.c: 1171: else
 14362                           ;ECAN.c: 1172: {
 14363                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 14364  002DFE  500E               	movf	__RegsToCANID@Value,w,c
 14365  002E00  6ED9               	movwf	fsr2l,c
 14366  002E02  6ADA               	clrf	fsr2h,c
 14367  002E04  0E02               	movlw	2
 14368  002E06  26D9               	addwf	fsr2l,f,c
 14369  002E08  6ADA               	clrf	fsr2h,c
 14370  002E0A  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14371  002E0E  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14372  002E12  50E7               	movf	indf1,w,c
 14373  002E14  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14374  002E16  0E05               	movlw	5
 14375  002E18  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14376  002E1A                     u7155:
 14377  002E1A  90D8               	bcf	status,0,c
 14378  002E1C  360C               	rlcf	??__RegsToCANID,f,c
 14379  002E1E  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14380  002E20  D7FC               	goto	u7155
 14381  002E22  500C               	movf	??__RegsToCANID,w,c
 14382  002E24  6EDF               	movwf	indf2,c
 14383                           
 14384                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 14385  002E26  500E               	movf	__RegsToCANID@Value,w,c
 14386  002E28  6ED9               	movwf	fsr2l,c
 14387  002E2A  6ADA               	clrf	fsr2h,c
 14388  002E2C  0E03               	movlw	3
 14389  002E2E  26D9               	addwf	fsr2l,f,c
 14390  002E30  6ADA               	clrf	fsr2h,c
 14391  002E32  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14392  002E36  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14393  002E3A  50E7               	movf	indf1,w,c
 14394  002E3C  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14395  002E3E  90D8               	bcf	status,0,c
 14396  002E40  320C               	rrcf	??__RegsToCANID,f,c
 14397  002E42  90D8               	bcf	status,0,c
 14398  002E44  320C               	rrcf	??__RegsToCANID,f,c
 14399  002E46  90D8               	bcf	status,0,c
 14400  002E48  300C               	rrcf	??__RegsToCANID,w,c
 14401  002E4A  6EDF               	movwf	indf2,c
 14402                           
 14403                           ;ECAN.c: 1176: ptr++;
 14404  002E4C  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14405  002E4E  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14406                           
 14407                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 14408  002E50  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14409  002E54  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14410  002E58  50DF               	movf	indf2,w,c
 14411  002E5A  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14412  002E5C  0E03               	movlw	3
 14413  002E5E  160C               	andwf	??__RegsToCANID,f,c
 14414  002E60  500E               	movf	__RegsToCANID@Value,w,c
 14415  002E62  6ED9               	movwf	fsr2l,c
 14416  002E64  6ADA               	clrf	fsr2h,c
 14417  002E66  0E02               	movlw	2
 14418  002E68  26D9               	addwf	fsr2l,f,c
 14419  002E6A  6ADA               	clrf	fsr2h,c
 14420  002E6C  500C               	movf	??__RegsToCANID,w,c
 14421  002E6E  12DF               	iorwf	indf2,f,c
 14422                           
 14423                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 14424  002E70  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14425  002E74  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14426  002E78  50DF               	movf	indf2,w,c
 14427  002E7A  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14428  002E7C  90D8               	bcf	status,0,c
 14429  002E7E  320C               	rrcf	??__RegsToCANID,f,c
 14430  002E80  90D8               	bcf	status,0,c
 14431  002E82  320C               	rrcf	??__RegsToCANID,f,c
 14432  002E84  90D8               	bcf	status,0,c
 14433  002E86  320C               	rrcf	??__RegsToCANID,f,c
 14434  002E88  0E1C               	movlw	28
 14435  002E8A  160C               	andwf	??__RegsToCANID,f,c
 14436  002E8C  500E               	movf	__RegsToCANID@Value,w,c
 14437  002E8E  6ED9               	movwf	fsr2l,c
 14438  002E90  6ADA               	clrf	fsr2h,c
 14439  002E92  0E02               	movlw	2
 14440  002E94  26D9               	addwf	fsr2l,f,c
 14441  002E96  6ADA               	clrf	fsr2h,c
 14442  002E98  500C               	movf	??__RegsToCANID,w,c
 14443  002E9A  12DF               	iorwf	indf2,f,c
 14444                           
 14445                           ;ECAN.c: 1180: ptr++;
 14446  002E9C  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14447  002E9E  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14448                           
 14449                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 14450  002EA0  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14451  002EA4  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14452  002EA8  500E               	movf	__RegsToCANID@Value,w,c
 14453  002EAA  6EE1               	movwf	fsr1l,c
 14454  002EAC  6AE2               	clrf	fsr1h,c
 14455  002EAE  2AE1               	incf	fsr1l,f,c
 14456  002EB0  6AE2               	clrf	fsr1h,c
 14457  002EB2  CFDF FFE7          	movff	indf2,indf1
 14458                           
 14459                           ;ECAN.c: 1182: ptr++;
 14460  002EB6  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14461  002EB8  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14462                           
 14463                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 14464  002EBA  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14465  002EBE  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14466  002EC2  500E               	movf	__RegsToCANID@Value,w,c
 14467  002EC4  6EE1               	movwf	fsr1l,c
 14468  002EC6  6AE2               	clrf	fsr1h,c
 14469  002EC8  CFDF FFE7          	movff	indf2,indf1
 14470  002ECC                     l907:
 14471  002ECC  0012               	return	
 14472  002ECE                     __end_of__RegsToCANID:
 14473                           	opt stack 0
 14474                           tblptru	equ	0xFF8
 14475                           tblptrh	equ	0xFF7
 14476                           tblptrl	equ	0xFF6
 14477                           tablat	equ	0xFF5
 14478                           prodh	equ	0xFF4
 14479                           prodl	equ	0xFF3
 14480                           postinc0	equ	0xFEE
 14481                           wreg	equ	0xFE8
 14482                           indf1	equ	0xFE7
 14483                           fsr1h	equ	0xFE2
 14484                           fsr1l	equ	0xFE1
 14485                           indf2	equ	0xFDF
 14486                           postinc2	equ	0xFDE
 14487                           postdec2	equ	0xFDD
 14488                           plusw2	equ	0xFDB
 14489                           fsr2h	equ	0xFDA
 14490                           fsr2l	equ	0xFD9
 14491                           status	equ	0xFD8
 14492                           
 14493 ;; *************** function __ECANPointBuffer *****************
 14494 ;; Defined at:
 14495 ;;		line 1207 in file "../ECAN.c"
 14496 ;; Parameters:    Size  Location     Type
 14497 ;;  b               1    wreg     unsigned char 
 14498 ;; Auto vars:     Size  Location     Type
 14499 ;;  b               1   10[COMRAM] unsigned char 
 14500 ;;  pt              2   11[COMRAM] PTR unsigned char 
 14501 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14502 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14503 ;; Return value:  Size  Location     Type
 14504 ;;                  2    7[COMRAM] PTR unsigned char 
 14505 ;; Registers used:
 14506 ;;		wreg, status,2, status,0
 14507 ;; Tracked objects:
 14508 ;;		On entry : F/0
 14509 ;;		On exit  : 0/0
 14510 ;;		Unchanged: 0/0
 14511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14512 ;;      Params:         3       0       0       0       0       0       0
 14513 ;;      Locals:         3       0       0       0       0       0       0
 14514 ;;      Temps:          0       0       0       0       0       0       0
 14515 ;;      Totals:         6       0       0       0       0       0       0
 14516 ;;Total ram usage:        6 bytes
 14517 ;; Hardware stack levels used:    1
 14518 ;; Hardware stack levels required when called:    2
 14519 ;; This function calls:
 14520 ;;		Nothing
 14521 ;; This function is called by:
 14522 ;;		_ECANReceiveMessage
 14523 ;; This function uses a non-reentrant model
 14524 ;;
 14525                           
 14526                           	psect	text61
 14527  003A58                     __ptext61:
 14528                           	opt stack 0
 14529  003A58                     __ECANPointBuffer:
 14530                           	opt stack 24
 14531                           
 14532                           ;incstack = 0
 14533                           ;incstack = 0
 14534                           ;__ECANPointBuffer@b stored from wreg
 14535  003A58  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 14536                           
 14537                           ; BSR set to: 0
 14538                           ;ECAN.c: 1208: BYTE* pt;
 14539                           ;ECAN.c: 1210: switch(b)
 14540  003A5C  D024               	goto	l7096
 14541  003A5E                     l7078:
 14542                           
 14543                           ; BSR set to: 0
 14544                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 14545  003A5E  0E0F               	movlw	15	;volatile
 14546  003A60  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14547  003A62  0E60               	movlw	96	;volatile
 14548  003A64  D01E               	goto	L57
 14549  003A66                     l7080:
 14550                           
 14551                           ; BSR set to: 0
 14552                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 14553  003A66  010F               	movlb	15	; () banked
 14554  003A68  0E0F               	movlw	15	;volatile
 14555  003A6A  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14556  003A6C  0E50               	movlw	80	;volatile
 14557  003A6E  D019               	goto	L57
 14558  003A70                     l7082:
 14559                           
 14560                           ; BSR set to: 0
 14561                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 14562  003A70  010E               	movlb	14	; () banked
 14563  003A72  0E0E               	movlw	14	;volatile
 14564  003A74  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14565  003A76  0E20               	movlw	32	;volatile
 14566  003A78  D014               	goto	L57
 14567  003A7A                     l7084:
 14568                           
 14569                           ; BSR set to: 0
 14570                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 14571  003A7A  010E               	movlb	14	; () banked
 14572  003A7C  0E0E               	movlw	14	;volatile
 14573  003A7E  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14574  003A80  0E30               	movlw	48	;volatile
 14575  003A82  D00F               	goto	L57
 14576  003A84                     l7086:
 14577                           
 14578                           ; BSR set to: 0
 14579                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 14580  003A84  010E               	movlb	14	; () banked
 14581  003A86  0E0E               	movlw	14	;volatile
 14582  003A88  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14583  003A8A  0E40               	movlw	64	;volatile
 14584  003A8C  D00A               	goto	L57
 14585  003A8E                     l7088:
 14586                           
 14587                           ; BSR set to: 0
 14588                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 14589  003A8E  010E               	movlb	14	; () banked
 14590  003A90  0E0E               	movlw	14	;volatile
 14591  003A92  D7EB               	goto	L58
 14592  003A94                     l7090:
 14593                           
 14594                           ; BSR set to: 0
 14595                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 14596  003A94  010E               	movlb	14	; () banked
 14597  003A96  0E0E               	movlw	14	;volatile
 14598  003A98  D7E3               	goto	L59
 14599  003A9A                     l7092:
 14600                           
 14601                           ; BSR set to: 0
 14602                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 14603  003A9A  010E               	movlb	14	; () banked
 14604  003A9C  0E0E               	movlw	14	;volatile
 14605  003A9E  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14606  003AA0  0E70               	movlw	112	;volatile
 14607  003AA2                     L57:
 14608  003AA2  6E0C               	movwf	__ECANPointBuffer@pt,c
 14609                           
 14610                           ;ECAN.c: 1235: break;
 14611  003AA4  D00F               	goto	l912
 14612  003AA6                     l7096:
 14613                           
 14614                           ; BSR set to: 0
 14615  003AA6  500B               	movf	__ECANPointBuffer@b,w,c
 14616                           
 14617                           ; Switch size 1, requested type "speed"
 14618                           ; Number of cases is 7, Range of values is 0 to 6
 14619                           ; switch strategies available:
 14620                           ; Name         Instructions Cycles
 14621                           ; simple_byte           22    12 (average)
 14622                           ;	Chosen strategy is simple_byte
 14623  003AA8  E0DA               	bz	l7078
 14624  003AAA  0A01               	xorlw	1	; case 1
 14625  003AAC  E0DC               	bz	l7080
 14626  003AAE  0A03               	xorlw	3	; case 2
 14627  003AB0  E0DF               	bz	l7082
 14628  003AB2  0A01               	xorlw	1	; case 3
 14629  003AB4  E0E2               	bz	l7084
 14630  003AB6  0A07               	xorlw	7	; case 4
 14631  003AB8  E0E5               	bz	l7086
 14632  003ABA  0A01               	xorlw	1	; case 5
 14633  003ABC  E0E8               	bz	l7088
 14634  003ABE  0A03               	xorlw	3	; case 6
 14635  003AC0  E0E9               	bz	l7090
 14636  003AC2  D7EB               	goto	l7092
 14637  003AC4                     l912:
 14638                           
 14639                           ;ECAN.c: 1237: return (pt);
 14640  003AC4  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 14641  003AC8  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 14642  003ACC  0012               	return	
 14643  003ACE                     __end_of__ECANPointBuffer:
 14644                           	opt stack 0
 14645                           tblptru	equ	0xFF8
 14646                           tblptrh	equ	0xFF7
 14647                           tblptrl	equ	0xFF6
 14648                           tablat	equ	0xFF5
 14649                           prodh	equ	0xFF4
 14650                           prodl	equ	0xFF3
 14651                           postinc0	equ	0xFEE
 14652                           wreg	equ	0xFE8
 14653                           indf1	equ	0xFE7
 14654                           fsr1h	equ	0xFE2
 14655                           fsr1l	equ	0xFE1
 14656                           indf2	equ	0xFDF
 14657                           postinc2	equ	0xFDE
 14658                           postdec2	equ	0xFDD
 14659                           plusw2	equ	0xFDB
 14660                           fsr2h	equ	0xFDA
 14661                           fsr2l	equ	0xFD9
 14662                           status	equ	0xFD8
 14663                           
 14664 ;; *************** function _vscp_check_pstorage *****************
 14665 ;; Defined at:
 14666 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 14667 ;; Parameters:    Size  Location     Type
 14668 ;;		None
 14669 ;; Auto vars:     Size  Location     Type
 14670 ;;		None
 14671 ;; Return value:  Size  Location     Type
 14672 ;;                  1    wreg      unsigned char 
 14673 ;; Registers used:
 14674 ;;		wreg, status,2, status,0, cstack
 14675 ;; Tracked objects:
 14676 ;;		On entry : 0/0
 14677 ;;		On exit  : 0/0
 14678 ;;		Unchanged: 0/0
 14679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14680 ;;      Params:         0       0       0       0       0       0       0
 14681 ;;      Locals:         0       0       0       0       0       0       0
 14682 ;;      Temps:          0       0       0       0       0       0       0
 14683 ;;      Totals:         0       0       0       0       0       0       0
 14684 ;;Total ram usage:        0 bytes
 14685 ;; Hardware stack levels used:    1
 14686 ;; Hardware stack levels required when called:    4
 14687 ;; This function calls:
 14688 ;;		_vscp_writeNicknamePermanent
 14689 ;;		_vscp_getSegmentCRC
 14690 ;;		_vscp_setSegmentCRC
 14691 ;;		_vscp_setControlByte
 14692 ;; This function is called by:
 14693 ;;		_main
 14694 ;; This function uses a non-reentrant model
 14695 ;;
 14696                           
 14697                           	psect	text62
 14698  003E40                     __ptext62:
 14699                           	opt stack 0
 14700  003E40                     _vscp_check_pstorage:
 14701                           	opt stack 26
 14702                           
 14703                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 14704                           
 14705                           ;incstack = 0
 14706                           ;incstack = 0
 14707  003E40  EC36  F020         	call	_vscp_getSegmentCRC	;wreg free
 14708  003E44  0BC0               	andlw	192
 14709  003E46  0A40               	xorlw	64
 14710  003E48  E102               	bnz	l7572
 14711                           
 14712                           ;vscp_firmware.c: 172: return !0;
 14713  003E4A  0E01               	movlw	1
 14714  003E4C  D00A               	goto	l1032
 14715  003E4E                     l7572:
 14716                           
 14717                           ;vscp_firmware.c: 173: }
 14718                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 14719  003E4E  0EFF               	movlw	255
 14720  003E50  ECD9  F01F         	call	_vscp_writeNicknamePermanent
 14721                           
 14722                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 14723  003E54  0E00               	movlw	0
 14724  003E56  ECCE  F01F         	call	_vscp_setSegmentCRC
 14725                           
 14726                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 14727  003E5A  0EA0               	movlw	160
 14728  003E5C  ECC3  F01F         	call	_vscp_setControlByte
 14729                           
 14730                           ;vscp_firmware.c: 185: return 0;
 14731  003E60  0E00               	movlw	0
 14732  003E62                     l1032:
 14733  003E62  0012               	return	
 14734  003E64                     __end_of_vscp_check_pstorage:
 14735                           	opt stack 0
 14736                           tblptru	equ	0xFF8
 14737                           tblptrh	equ	0xFF7
 14738                           tblptrl	equ	0xFF6
 14739                           tablat	equ	0xFF5
 14740                           prodh	equ	0xFF4
 14741                           prodl	equ	0xFF3
 14742                           postinc0	equ	0xFEE
 14743                           wreg	equ	0xFE8
 14744                           indf1	equ	0xFE7
 14745                           fsr1h	equ	0xFE2
 14746                           fsr1l	equ	0xFE1
 14747                           indf2	equ	0xFDF
 14748                           postinc2	equ	0xFDE
 14749                           postdec2	equ	0xFDD
 14750                           plusw2	equ	0xFDB
 14751                           fsr2h	equ	0xFDA
 14752                           fsr2l	equ	0xFD9
 14753                           status	equ	0xFD8
 14754                           
 14755 ;; *************** function _vscp_setControlByte *****************
 14756 ;; Defined at:
 14757 ;;		line 2450 in file "../main.c"
 14758 ;; Parameters:    Size  Location     Type
 14759 ;;  ctrl            1    wreg     unsigned char 
 14760 ;; Auto vars:     Size  Location     Type
 14761 ;;  ctrl            1   11[COMRAM] unsigned char 
 14762 ;; Return value:  Size  Location     Type
 14763 ;;		None               void
 14764 ;; Registers used:
 14765 ;;		wreg, status,2, cstack
 14766 ;; Tracked objects:
 14767 ;;		On entry : 0/0
 14768 ;;		On exit  : 0/0
 14769 ;;		Unchanged: 0/0
 14770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14771 ;;      Params:         0       0       0       0       0       0       0
 14772 ;;      Locals:         1       0       0       0       0       0       0
 14773 ;;      Temps:          0       0       0       0       0       0       0
 14774 ;;      Totals:         1       0       0       0       0       0       0
 14775 ;;Total ram usage:        1 bytes
 14776 ;; Hardware stack levels used:    1
 14777 ;; Hardware stack levels required when called:    3
 14778 ;; This function calls:
 14779 ;;		_Busy_eep
 14780 ;;		_Write_b_eep
 14781 ;; This function is called by:
 14782 ;;		_vscp_check_pstorage
 14783 ;; This function uses a non-reentrant model
 14784 ;;
 14785                           
 14786                           	psect	text63
 14787  003F86                     __ptext63:
 14788                           	opt stack 0
 14789  003F86                     _vscp_setControlByte:
 14790                           	opt stack 26
 14791                           
 14792                           ;incstack = 0
 14793                           ;incstack = 0
 14794                           ;vscp_setControlByte@ctrl stored from wreg
 14795  003F86  CFE8 F00C          	movff	wreg,vscp_setControlByte@ctrl
 14796                           
 14797                           ;main.c: 2451: (Busy_eep(), Write_b_eep(0x03,ctrl));
 14798  003F8A  EC3F  F020         	call	_Busy_eep	;wreg free
 14799  003F8E  6A09               	clrf	?_Write_b_eep+1,c
 14800  003F90  0E03               	movlw	3
 14801  003F92  6E08               	movwf	?_Write_b_eep,c
 14802  003F94  C00C  F00A         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 14803  003F98  EF24  F01E         	goto	_Write_b_eep	;wreg free
 14804  003F9C                     __end_of_vscp_setControlByte:
 14805                           	opt stack 0
 14806                           tblptru	equ	0xFF8
 14807                           tblptrh	equ	0xFF7
 14808                           tblptrl	equ	0xFF6
 14809                           tablat	equ	0xFF5
 14810                           prodh	equ	0xFF4
 14811                           prodl	equ	0xFF3
 14812                           postinc0	equ	0xFEE
 14813                           wreg	equ	0xFE8
 14814                           indf1	equ	0xFE7
 14815                           fsr1h	equ	0xFE2
 14816                           fsr1l	equ	0xFE1
 14817                           indf2	equ	0xFDF
 14818                           postinc2	equ	0xFDE
 14819                           postdec2	equ	0xFDD
 14820                           plusw2	equ	0xFDB
 14821                           fsr2h	equ	0xFDA
 14822                           fsr2l	equ	0xFD9
 14823                           status	equ	0xFD8
 14824                           
 14825 ;; *************** function _vscp_setSegmentCRC *****************
 14826 ;; Defined at:
 14827 ;;		line 2441 in file "../main.c"
 14828 ;; Parameters:    Size  Location     Type
 14829 ;;  crc             1    wreg     unsigned char 
 14830 ;; Auto vars:     Size  Location     Type
 14831 ;;  crc             1   11[COMRAM] unsigned char 
 14832 ;; Return value:  Size  Location     Type
 14833 ;;		None               void
 14834 ;; Registers used:
 14835 ;;		wreg, status,2, cstack
 14836 ;; Tracked objects:
 14837 ;;		On entry : 0/0
 14838 ;;		On exit  : 0/0
 14839 ;;		Unchanged: 0/0
 14840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14841 ;;      Params:         0       0       0       0       0       0       0
 14842 ;;      Locals:         1       0       0       0       0       0       0
 14843 ;;      Temps:          0       0       0       0       0       0       0
 14844 ;;      Totals:         1       0       0       0       0       0       0
 14845 ;;Total ram usage:        1 bytes
 14846 ;; Hardware stack levels used:    1
 14847 ;; Hardware stack levels required when called:    3
 14848 ;; This function calls:
 14849 ;;		_Busy_eep
 14850 ;;		_Write_b_eep
 14851 ;; This function is called by:
 14852 ;;		_vscp_check_pstorage
 14853 ;;		_vscp_handleProbeState
 14854 ;;		_vscp_handleHeartbeat
 14855 ;;		_vscp_handleSetNickname
 14856 ;; This function uses a non-reentrant model
 14857 ;;
 14858                           
 14859                           	psect	text64
 14860  003F9C                     __ptext64:
 14861                           	opt stack 0
 14862  003F9C                     _vscp_setSegmentCRC:
 14863                           	opt stack 25
 14864                           
 14865                           ;incstack = 0
 14866                           ;incstack = 0
 14867                           ;vscp_setSegmentCRC@crc stored from wreg
 14868  003F9C  CFE8 F00C          	movff	wreg,vscp_setSegmentCRC@crc
 14869                           
 14870                           ;main.c: 2442: (Busy_eep(), Write_b_eep(0x02,crc));
 14871  003FA0  EC3F  F020         	call	_Busy_eep	;wreg free
 14872  003FA4  6A09               	clrf	?_Write_b_eep+1,c
 14873  003FA6  0E02               	movlw	2
 14874  003FA8  6E08               	movwf	?_Write_b_eep,c
 14875  003FAA  C00C  F00A         	movff	vscp_setSegmentCRC@crc,?_Write_b_eep+2
 14876  003FAE  EF24  F01E         	goto	_Write_b_eep	;wreg free
 14877  003FB2                     __end_of_vscp_setSegmentCRC:
 14878                           	opt stack 0
 14879                           tblptru	equ	0xFF8
 14880                           tblptrh	equ	0xFF7
 14881                           tblptrl	equ	0xFF6
 14882                           tablat	equ	0xFF5
 14883                           prodh	equ	0xFF4
 14884                           prodl	equ	0xFF3
 14885                           postinc0	equ	0xFEE
 14886                           wreg	equ	0xFE8
 14887                           indf1	equ	0xFE7
 14888                           fsr1h	equ	0xFE2
 14889                           fsr1l	equ	0xFE1
 14890                           indf2	equ	0xFDF
 14891                           postinc2	equ	0xFDE
 14892                           postdec2	equ	0xFDD
 14893                           plusw2	equ	0xFDB
 14894                           fsr2h	equ	0xFDA
 14895                           fsr2l	equ	0xFD9
 14896                           status	equ	0xFD8
 14897                           
 14898 ;; *************** function _vscp_getSegmentCRC *****************
 14899 ;; Defined at:
 14900 ;;		line 2432 in file "../main.c"
 14901 ;; Parameters:    Size  Location     Type
 14902 ;;		None
 14903 ;; Auto vars:     Size  Location     Type
 14904 ;;		None
 14905 ;; Return value:  Size  Location     Type
 14906 ;;                  1    wreg      unsigned char 
 14907 ;; Registers used:
 14908 ;;		wreg, status,2, cstack
 14909 ;; Tracked objects:
 14910 ;;		On entry : 0/0
 14911 ;;		On exit  : 0/0
 14912 ;;		Unchanged: 0/0
 14913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14914 ;;      Params:         0       0       0       0       0       0       0
 14915 ;;      Locals:         0       0       0       0       0       0       0
 14916 ;;      Temps:          0       0       0       0       0       0       0
 14917 ;;      Totals:         0       0       0       0       0       0       0
 14918 ;;Total ram usage:        0 bytes
 14919 ;; Hardware stack levels used:    1
 14920 ;; Hardware stack levels required when called:    3
 14921 ;; This function calls:
 14922 ;;		_Read_b_eep
 14923 ;; This function is called by:
 14924 ;;		_vscp_check_pstorage
 14925 ;;		_vscp_handleHeartbeat
 14926 ;; This function uses a non-reentrant model
 14927 ;;
 14928                           
 14929                           	psect	text65
 14930  00406C                     __ptext65:
 14931                           	opt stack 0
 14932  00406C                     _vscp_getSegmentCRC:
 14933                           	opt stack 25
 14934                           
 14935                           ;main.c: 2433: return Read_b_eep(0x02);
 14936                           
 14937                           ;incstack = 0
 14938                           ;incstack = 0
 14939  00406C  6A09               	clrf	?_Read_b_eep+1,c
 14940  00406E  0E02               	movlw	2
 14941  004070  6E08               	movwf	?_Read_b_eep,c
 14942  004072  EF0B  F020         	goto	_Read_b_eep	;wreg free
 14943  004076                     __end_of_vscp_getSegmentCRC:
 14944                           	opt stack 0
 14945                           tblptru	equ	0xFF8
 14946                           tblptrh	equ	0xFF7
 14947                           tblptrl	equ	0xFF6
 14948                           tablat	equ	0xFF5
 14949                           prodh	equ	0xFF4
 14950                           prodl	equ	0xFF3
 14951                           postinc0	equ	0xFEE
 14952                           wreg	equ	0xFE8
 14953                           indf1	equ	0xFE7
 14954                           fsr1h	equ	0xFE2
 14955                           fsr1l	equ	0xFE1
 14956                           indf2	equ	0xFDF
 14957                           postinc2	equ	0xFDE
 14958                           postdec2	equ	0xFDD
 14959                           plusw2	equ	0xFDB
 14960                           fsr2h	equ	0xFDA
 14961                           fsr2l	equ	0xFD9
 14962                           status	equ	0xFD8
 14963                           
 14964 ;; *************** function _vscp_writeNicknamePermanent *****************
 14965 ;; Defined at:
 14966 ;;		line 856 in file "../main.c"
 14967 ;; Parameters:    Size  Location     Type
 14968 ;;  nickname        1    wreg     unsigned char 
 14969 ;; Auto vars:     Size  Location     Type
 14970 ;;  nickname        1   11[COMRAM] unsigned char 
 14971 ;; Return value:  Size  Location     Type
 14972 ;;		None               void
 14973 ;; Registers used:
 14974 ;;		wreg, status,2, cstack
 14975 ;; Tracked objects:
 14976 ;;		On entry : 0/0
 14977 ;;		On exit  : 0/0
 14978 ;;		Unchanged: 0/0
 14979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14980 ;;      Params:         0       0       0       0       0       0       0
 14981 ;;      Locals:         1       0       0       0       0       0       0
 14982 ;;      Temps:          0       0       0       0       0       0       0
 14983 ;;      Totals:         1       0       0       0       0       0       0
 14984 ;;Total ram usage:        1 bytes
 14985 ;; Hardware stack levels used:    1
 14986 ;; Hardware stack levels required when called:    3
 14987 ;; This function calls:
 14988 ;;		_Busy_eep
 14989 ;;		_Write_b_eep
 14990 ;; This function is called by:
 14991 ;;		_vscp_check_pstorage
 14992 ;;		_vscp_handleProbeState
 14993 ;;		_vscp_handleHeartbeat
 14994 ;;		_vscp_handleSetNickname
 14995 ;;		_vscp_handleDropNickname
 14996 ;; This function uses a non-reentrant model
 14997 ;;
 14998                           
 14999                           	psect	text66
 15000  003FB2                     __ptext66:
 15001                           	opt stack 0
 15002  003FB2                     _vscp_writeNicknamePermanent:
 15003                           	opt stack 25
 15004                           
 15005                           ;incstack = 0
 15006                           ;incstack = 0
 15007                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 15008  003FB2  CFE8 F00C          	movff	wreg,vscp_writeNicknamePermanent@nickname
 15009                           
 15010                           ;main.c: 857: (Busy_eep(), Write_b_eep(0x01,nickname));
 15011  003FB6  EC3F  F020         	call	_Busy_eep	;wreg free
 15012  003FBA  6A09               	clrf	?_Write_b_eep+1,c
 15013  003FBC  0E01               	movlw	1
 15014  003FBE  6E08               	movwf	?_Write_b_eep,c
 15015  003FC0  C00C  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 15016  003FC4  EF24  F01E         	goto	_Write_b_eep	;wreg free
 15017  003FC8                     __end_of_vscp_writeNicknamePermanent:
 15018                           	opt stack 0
 15019                           tblptru	equ	0xFF8
 15020                           tblptrh	equ	0xFF7
 15021                           tblptrl	equ	0xFF6
 15022                           tablat	equ	0xFF5
 15023                           prodh	equ	0xFF4
 15024                           prodl	equ	0xFF3
 15025                           postinc0	equ	0xFEE
 15026                           wreg	equ	0xFE8
 15027                           indf1	equ	0xFE7
 15028                           fsr1h	equ	0xFE2
 15029                           fsr1l	equ	0xFE1
 15030                           indf2	equ	0xFDF
 15031                           postinc2	equ	0xFDE
 15032                           postdec2	equ	0xFDD
 15033                           plusw2	equ	0xFDB
 15034                           fsr2h	equ	0xFDA
 15035                           fsr2l	equ	0xFD9
 15036                           status	equ	0xFD8
 15037                           
 15038 ;; *************** function _Write_b_eep *****************
 15039 ;; Defined at:
 15040 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 15041 ;; Parameters:    Size  Location     Type
 15042 ;;  badd            2    7[COMRAM] unsigned int 
 15043 ;;  bdat            1    9[COMRAM] unsigned char 
 15044 ;; Auto vars:     Size  Location     Type
 15045 ;;  GIE_BIT_VAL     1   10[COMRAM] unsigned char 
 15046 ;; Return value:  Size  Location     Type
 15047 ;;		None               void
 15048 ;; Registers used:
 15049 ;;		wreg, status,2
 15050 ;; Tracked objects:
 15051 ;;		On entry : 0/0
 15052 ;;		On exit  : 0/0
 15053 ;;		Unchanged: 0/0
 15054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15055 ;;      Params:         3       0       0       0       0       0       0
 15056 ;;      Locals:         1       0       0       0       0       0       0
 15057 ;;      Temps:          0       0       0       0       0       0       0
 15058 ;;      Totals:         4       0       0       0       0       0       0
 15059 ;;Total ram usage:        4 bytes
 15060 ;; Hardware stack levels used:    1
 15061 ;; Hardware stack levels required when called:    2
 15062 ;; This function calls:
 15063 ;;		Nothing
 15064 ;; This function is called by:
 15065 ;;		_main
 15066 ;;		_init_app_eeprom
 15067 ;;		_vscp_setGUID
 15068 ;;		_vscp_setManufacturerId
 15069 ;;		_vscp_writeNicknamePermanent
 15070 ;;		_vscp_writeAppReg
 15071 ;;		_doActionDisable
 15072 ;;		_vscp_setUserID
 15073 ;;		_vscp_setSegmentCRC
 15074 ;;		_vscp_setControlByte
 15075 ;;		_vscp_goBootloaderMode
 15076 ;; This function uses a non-reentrant model
 15077 ;;
 15078                           
 15079                           	psect	text67
 15080  003C48                     __ptext67:
 15081                           	opt stack 0
 15082  003C48                     _Write_b_eep:
 15083                           	opt stack 26
 15084                           
 15085                           ;incstack = 0
 15086                           ;incstack = 0
 15087  003C48  C008  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 15088  003C4C  C00A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 15089  003C50  9EA6               	bcf	4006,7,c	;volatile
 15090  003C52  9CA6               	bcf	4006,6,c	;volatile
 15091  003C54  84A6               	bsf	4006,2,c	;volatile
 15092  003C56  0E00               	movlw	0
 15093  003C58  BEF2               	btfsc	intcon,7,c	;volatile
 15094  003C5A  0E01               	movlw	1
 15095  003C5C  6E0B               	movwf	Write_b_eep@GIE_BIT_VAL,c
 15096  003C5E  9EF2               	bcf	intcon,7,c	;volatile
 15097  003C60  0E55               	movlw	85
 15098  003C62  6EA7               	movwf	4007,c	;volatile
 15099  003C64  0EAA               	movlw	170
 15100  003C66  6EA7               	movwf	4007,c	;volatile
 15101  003C68  82A6               	bsf	4006,1,c	;volatile
 15102  003C6A                     l1307:
 15103  003C6A  B2A6               	btfsc	4006,1,c	;volatile
 15104  003C6C  D7FE               	goto	l1307
 15105  003C6E  B00B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 15106  003C70  D002               	bra	u4125
 15107  003C72  9EF2               	bcf	intcon,7,c	;volatile
 15108  003C74  D001               	bra	u4126
 15109  003C76                     u4125:
 15110  003C76  8EF2               	bsf	intcon,7,c	;volatile
 15111  003C78                     u4126:
 15112  003C78  94A6               	bcf	4006,2,c	;volatile
 15113  003C7A  0012               	return	
 15114  003C7C                     __end_of_Write_b_eep:
 15115                           	opt stack 0
 15116                           tblptru	equ	0xFF8
 15117                           tblptrh	equ	0xFF7
 15118                           tblptrl	equ	0xFF6
 15119                           tablat	equ	0xFF5
 15120                           prodh	equ	0xFF4
 15121                           prodl	equ	0xFF3
 15122                           intcon	equ	0xFF2
 15123                           postinc0	equ	0xFEE
 15124                           wreg	equ	0xFE8
 15125                           indf1	equ	0xFE7
 15126                           fsr1h	equ	0xFE2
 15127                           fsr1l	equ	0xFE1
 15128                           indf2	equ	0xFDF
 15129                           postinc2	equ	0xFDE
 15130                           postdec2	equ	0xFDD
 15131                           plusw2	equ	0xFDB
 15132                           fsr2h	equ	0xFDA
 15133                           fsr2l	equ	0xFD9
 15134                           status	equ	0xFD8
 15135                           
 15136 ;; *************** function _Busy_eep *****************
 15137 ;; Defined at:
 15138 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 15139 ;; Parameters:    Size  Location     Type
 15140 ;;		None
 15141 ;; Auto vars:     Size  Location     Type
 15142 ;;		None
 15143 ;; Return value:  Size  Location     Type
 15144 ;;		None               void
 15145 ;; Registers used:
 15146 ;;		None
 15147 ;; Tracked objects:
 15148 ;;		On entry : 0/0
 15149 ;;		On exit  : 0/0
 15150 ;;		Unchanged: 0/0
 15151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15152 ;;      Params:         0       0       0       0       0       0       0
 15153 ;;      Locals:         0       0       0       0       0       0       0
 15154 ;;      Temps:          0       0       0       0       0       0       0
 15155 ;;      Totals:         0       0       0       0       0       0       0
 15156 ;;Total ram usage:        0 bytes
 15157 ;; Hardware stack levels used:    1
 15158 ;; Hardware stack levels required when called:    2
 15159 ;; This function calls:
 15160 ;;		Nothing
 15161 ;; This function is called by:
 15162 ;;		_main
 15163 ;;		_init_app_eeprom
 15164 ;;		_vscp_setGUID
 15165 ;;		_vscp_setManufacturerId
 15166 ;;		_vscp_writeNicknamePermanent
 15167 ;;		_vscp_writeAppReg
 15168 ;;		_doActionDisable
 15169 ;;		_vscp_setUserID
 15170 ;;		_vscp_setSegmentCRC
 15171 ;;		_vscp_setControlByte
 15172 ;;		_vscp_goBootloaderMode
 15173 ;; This function uses a non-reentrant model
 15174 ;;
 15175                           
 15176                           	psect	text68
 15177  00407E                     __ptext68:
 15178                           	opt stack 0
 15179  00407E                     _Busy_eep:
 15180                           	opt stack 26
 15181  00407E                     l1282:
 15182  00407E  A2A6               	btfss	4006,1,c	;volatile
 15183  004080  0012               	return	
 15184  004082  D7FD               	goto	l1282
 15185  004084                     __end_of_Busy_eep:
 15186                           	opt stack 0
 15187                           tblptru	equ	0xFF8
 15188                           tblptrh	equ	0xFF7
 15189                           tblptrl	equ	0xFF6
 15190                           tablat	equ	0xFF5
 15191                           prodh	equ	0xFF4
 15192                           prodl	equ	0xFF3
 15193                           intcon	equ	0xFF2
 15194                           postinc0	equ	0xFEE
 15195                           wreg	equ	0xFE8
 15196                           indf1	equ	0xFE7
 15197                           fsr1h	equ	0xFE2
 15198                           fsr1l	equ	0xFE1
 15199                           indf2	equ	0xFDF
 15200                           postinc2	equ	0xFDE
 15201                           postdec2	equ	0xFDD
 15202                           plusw2	equ	0xFDB
 15203                           fsr2h	equ	0xFDA
 15204                           fsr2l	equ	0xFD9
 15205                           status	equ	0xFD8
 15206                           
 15207 ;; *************** function _init *****************
 15208 ;; Defined at:
 15209 ;;		line 316 in file "../main.c"
 15210 ;; Parameters:    Size  Location     Type
 15211 ;;		None
 15212 ;; Auto vars:     Size  Location     Type
 15213 ;;		None
 15214 ;; Return value:  Size  Location     Type
 15215 ;;		None               void
 15216 ;; Registers used:
 15217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15218 ;; Tracked objects:
 15219 ;;		On entry : 0/0
 15220 ;;		On exit  : 0/0
 15221 ;;		Unchanged: 0/0
 15222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15223 ;;      Params:         0       0       0       0       0       0       0
 15224 ;;      Locals:         0       0       0       0       0       0       0
 15225 ;;      Temps:          0       0       0       0       0       0       0
 15226 ;;      Totals:         0       0       0       0       0       0       0
 15227 ;;Total ram usage:        0 bytes
 15228 ;; Hardware stack levels used:    1
 15229 ;; Hardware stack levels required when called:    4
 15230 ;; This function calls:
 15231 ;;		_WriteTimer0
 15232 ;;		_init_app_ram
 15233 ;;		_OpenTimer0
 15234 ;;		_ECANInitialize
 15235 ;; This function is called by:
 15236 ;;		_main
 15237 ;; This function uses a non-reentrant model
 15238 ;;
 15239                           
 15240                           	psect	text69
 15241  003C0A                     __ptext69:
 15242                           	opt stack 0
 15243  003C0A                     _init:
 15244                           	opt stack 26
 15245                           
 15246                           ;main.c: 321: init_app_ram();
 15247                           
 15248                           ;incstack = 0
 15249                           ;incstack = 0
 15250  003C0A  EC56  F019         	call	_init_app_ram	;wreg free
 15251                           
 15252                           ;main.c: 332: TRISA = 0x00;
 15253  003C0E  6A92               	clrf	3986,c	;volatile
 15254                           
 15255                           ;main.c: 333: PORTA = 0x00;
 15256  003C10  6A80               	clrf	3968,c	;volatile
 15257                           
 15258                           ;main.c: 345: TRISB = 0b00001000;
 15259  003C12  0E08               	movlw	8
 15260  003C14  6E93               	movwf	3987,c	;volatile
 15261                           
 15262                           ;main.c: 346: PORTB = 0x00;
 15263  003C16  6A81               	clrf	3969,c	;volatile
 15264                           
 15265                           ;main.c: 356: TRISC = 0b00000001;
 15266  003C18  0E01               	movlw	1
 15267  003C1A  6E94               	movwf	3988,c	;volatile
 15268                           
 15269                           ;main.c: 357: PORTC = 0x00;
 15270  003C1C  6A82               	clrf	3970,c	;volatile
 15271                           
 15272                           ;main.c: 383: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 15273  003C1E  0E92               	movlw	146
 15274  003C20  EC73  F01F         	call	_OpenTimer0
 15275                           
 15276                           ;main.c: 384: WriteTimer0( 0xfb1d );
 15277  003C24  0EFB               	movlw	251
 15278  003C26  6E09               	movwf	?_WriteTimer0+1,c
 15279  003C28  0E1D               	movlw	29
 15280  003C2A  6E08               	movwf	?_WriteTimer0,c
 15281  003C2C  EC02  F020         	call	_WriteTimer0	;wreg free
 15282                           
 15283                           ;main.c: 387: LATBbits.LATB4 = 0;
 15284  003C30  988A               	bcf	3978,4,c	;volatile
 15285                           
 15286                           ;main.c: 388: LATBbits.LATB1 = 0;
 15287  003C32  928A               	bcf	3978,1,c	;volatile
 15288                           
 15289                           ;main.c: 389: LATBbits.LATB0 = 0;
 15290  003C34  908A               	bcf	3978,0,c	;volatile
 15291                           
 15292                           ;main.c: 390: LATCbits.LATC7 = 0;
 15293  003C36  9E8B               	bcf	3979,7,c	;volatile
 15294                           
 15295                           ;main.c: 391: LATCbits.LATC6 = 0;
 15296  003C38  9C8B               	bcf	3979,6,c	;volatile
 15297                           
 15298                           ;main.c: 392: LATCbits.LATC5 = 0;
 15299  003C3A  9A8B               	bcf	3979,5,c	;volatile
 15300                           
 15301                           ;main.c: 393: LATCbits.LATC4 = 0;
 15302  003C3C  988B               	bcf	3979,4,c	;volatile
 15303                           
 15304                           ;main.c: 396: ECANInitialize();
 15305  003C3E  ECA7  F01C         	call	_ECANInitialize	;wreg free
 15306                           
 15307                           ;main.c: 417: INTCONbits.PEIE = 1;
 15308  003C42  8CF2               	bsf	intcon,6,c	;volatile
 15309                           
 15310                           ;main.c: 420: INTCONbits.GIE = 1;
 15311  003C44  8EF2               	bsf	intcon,7,c	;volatile
 15312  003C46  0012               	return	
 15313  003C48                     __end_of_init:
 15314                           	opt stack 0
 15315                           tblptru	equ	0xFF8
 15316                           tblptrh	equ	0xFF7
 15317                           tblptrl	equ	0xFF6
 15318                           tablat	equ	0xFF5
 15319                           prodh	equ	0xFF4
 15320                           prodl	equ	0xFF3
 15321                           intcon	equ	0xFF2
 15322                           postinc0	equ	0xFEE
 15323                           wreg	equ	0xFE8
 15324                           indf1	equ	0xFE7
 15325                           fsr1h	equ	0xFE2
 15326                           fsr1l	equ	0xFE1
 15327                           indf2	equ	0xFDF
 15328                           postinc2	equ	0xFDE
 15329                           postdec2	equ	0xFDD
 15330                           plusw2	equ	0xFDB
 15331                           fsr2h	equ	0xFDA
 15332                           fsr2l	equ	0xFD9
 15333                           status	equ	0xFD8
 15334                           
 15335 ;; *************** function _ECANInitialize *****************
 15336 ;; Defined at:
 15337 ;;		line 168 in file "../ECAN.c"
 15338 ;; Parameters:    Size  Location     Type
 15339 ;;		None
 15340 ;; Auto vars:     Size  Location     Type
 15341 ;;		None
 15342 ;; Return value:  Size  Location     Type
 15343 ;;		None               void
 15344 ;; Registers used:
 15345 ;;		wreg, status,2, status,0, cstack
 15346 ;; Tracked objects:
 15347 ;;		On entry : 0/0
 15348 ;;		On exit  : 0/0
 15349 ;;		Unchanged: 0/0
 15350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15351 ;;      Params:         0       0       0       0       0       0       0
 15352 ;;      Locals:         0       0       0       0       0       0       0
 15353 ;;      Temps:          0       0       0       0       0       0       0
 15354 ;;      Totals:         0       0       0       0       0       0       0
 15355 ;;Total ram usage:        0 bytes
 15356 ;; Hardware stack levels used:    1
 15357 ;; Hardware stack levels required when called:    3
 15358 ;; This function calls:
 15359 ;;		_ECANSetOperationMode
 15360 ;; This function is called by:
 15361 ;;		_init
 15362 ;; This function uses a non-reentrant model
 15363 ;;
 15364                           
 15365                           	psect	text70
 15366  00394E                     __ptext70:
 15367                           	opt stack 0
 15368  00394E                     _ECANInitialize:
 15369                           	opt stack 26
 15370                           
 15371                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 15372                           
 15373                           ;incstack = 0
 15374                           ;incstack = 0
 15375  00394E  0E80               	movlw	128
 15376  003950  ECB7  F01F         	call	_ECANSetOperationMode
 15377                           
 15378                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 15379  003954  0E09               	movlw	9
 15380  003956  6E70               	movwf	3952,c	;volatile
 15381                           
 15382                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 15383  003958  0EFC               	movlw	252
 15384  00395A  6E71               	movwf	3953,c	;volatile
 15385                           
 15386                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 15387                           ;ECAN.c: 181: (0 << 6) |
 15388                           ;ECAN.c: 182: (2-1);
 15389  00395C  0E01               	movlw	1
 15390  00395E  6E72               	movwf	3954,c	;volatile
 15391                           
 15392                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 15393  003960  0E20               	movlw	32
 15394  003962  6E73               	movwf	3955,c	;volatile
 15395                           
 15396                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 15397  003964  8E77               	bsf	3959,7,c	;volatile
 15398                           
 15399                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 15400  003966  9C77               	bcf	3959,6,c	;volatile
 15401                           
 15402                           ;ECAN.c: 205: RXB0CON = 0;
 15403  003968  6A60               	clrf	3936,c	;volatile
 15404                           
 15405                           ;ECAN.c: 211: RXB1CON = 0;
 15406  00396A  010F               	movlb	15	; () banked
 15407  00396C  6B50               	clrf	80,b	;volatile
 15408                           
 15409                           ; BSR set to: 15
 15410                           ;ECAN.c: 221: B0CON = 0;
 15411  00396E  010E               	movlb	14	; () banked
 15412  003970  6B20               	clrf	32,b	;volatile
 15413                           
 15414                           ; BSR set to: 14
 15415                           ;ECAN.c: 231: B1CON = 0;
 15416  003972  6B30               	clrf	48,b	;volatile
 15417                           
 15418                           ; BSR set to: 14
 15419                           ;ECAN.c: 241: B2CON = 0;
 15420  003974  6B40               	clrf	64,b	;volatile
 15421                           
 15422                           ; BSR set to: 14
 15423                           ;ECAN.c: 254: B3CON = 0 << 2;
 15424  003976  6B50               	clrf	80,b	;volatile
 15425                           
 15426                           ; BSR set to: 14
 15427                           ;ECAN.c: 264: B4CON = 0 << 2;
 15428  003978  6B60               	clrf	96,b	;volatile
 15429                           
 15430                           ; BSR set to: 14
 15431                           ;ECAN.c: 274: B5CON = 0 << 2;
 15432  00397A  6B70               	clrf	112,b	;volatile
 15433                           
 15434                           ; BSR set to: 14
 15435                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 15436  00397C  0EE0               	movlw	224
 15437  00397E  010D               	movlb	13	; () banked
 15438  003980  6FF8               	movwf	248,b	;volatile
 15439                           
 15440                           ; BSR set to: 13
 15441                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 15442  003982  010F               	movlb	15	; () banked
 15443  003984  6B00               	clrf	0,b	;volatile
 15444                           
 15445                           ; BSR set to: 15
 15446  003986  0E08               	movlw	8
 15447  003988  6F01               	movwf	1,b	;volatile
 15448                           
 15449                           ; BSR set to: 15
 15450  00398A  6B02               	clrf	2,b	;volatile
 15451                           
 15452                           ; BSR set to: 15
 15453  00398C  6B03               	clrf	3,b	;volatile
 15454                           
 15455                           ; BSR set to: 15
 15456                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 15457  00398E  6B04               	clrf	4,b	;volatile
 15458                           
 15459                           ; BSR set to: 15
 15460  003990  0EE8               	movlw	232
 15461  003992  6F05               	movwf	5,b	;volatile
 15462                           
 15463                           ; BSR set to: 15
 15464  003994  0E1A               	movlw	26
 15465  003996  6F06               	movwf	6,b	;volatile
 15466                           
 15467                           ; BSR set to: 15
 15468  003998  6B07               	clrf	7,b	;volatile
 15469                           
 15470                           ; BSR set to: 15
 15471                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 15472  00399A  0E03               	movlw	3
 15473  00399C  010D               	movlb	13	; () banked
 15474  00399E  6FD4               	movwf	212,b	;volatile
 15475                           
 15476                           ; BSR set to: 13
 15477                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 15478  0039A0  6BD5               	clrf	213,b	;volatile
 15479                           
 15480                           ; BSR set to: 13
 15481                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 15482  0039A2  6BE0               	clrf	224,b	;volatile
 15483                           
 15484                           ; BSR set to: 13
 15485                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 15486  0039A4  0E11               	movlw	17
 15487  0039A6  6FE1               	movwf	225,b	;volatile
 15488                           
 15489                           ; BSR set to: 13
 15490                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 15491  0039A8  6FE2               	movwf	226,b	;volatile
 15492                           
 15493                           ; BSR set to: 13
 15494                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 15495  0039AA  6BE3               	clrf	227,b	;volatile
 15496                           
 15497                           ; BSR set to: 13
 15498                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 15499  0039AC  6BE4               	clrf	228,b	;volatile
 15500                           
 15501                           ; BSR set to: 13
 15502                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 15503  0039AE  6BE5               	clrf	229,b	;volatile
 15504                           
 15505                           ; BSR set to: 13
 15506                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 15507  0039B0  6BE6               	clrf	230,b	;volatile
 15508                           
 15509                           ; BSR set to: 13
 15510                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 15511  0039B2  6BE7               	clrf	231,b	;volatile
 15512                           
 15513                           ; BSR set to: 13
 15514                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 15515  0039B4  0E54               	movlw	84
 15516  0039B6  6FF0               	movwf	240,b	;volatile
 15517                           
 15518                           ; BSR set to: 13
 15519                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 15520  0039B8  0E05               	movlw	5
 15521  0039BA  6FF1               	movwf	241,b	;volatile
 15522                           
 15523                           ; BSR set to: 13
 15524                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15525  0039BC  6BF2               	clrf	242,b	;volatile
 15526                           
 15527                           ; BSR set to: 13
 15528                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15529  0039BE  6BF2               	clrf	242,b	;volatile
 15530                           
 15531                           ; BSR set to: 13
 15532                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 15533  0039C0  0E0F               	movlw	15
 15534  0039C2  010F               	movlb	15	; () banked
 15535  0039C4  6F18               	movwf	24,b	;volatile
 15536                           
 15537                           ; BSR set to: 15
 15538  0039C6  0EE0               	movlw	224
 15539  0039C8  6F19               	movwf	25,b	;volatile
 15540                           
 15541                           ; BSR set to: 15
 15542  0039CA  6B1A               	clrf	26,b	;volatile
 15543                           
 15544                           ; BSR set to: 15
 15545  0039CC  6B1B               	clrf	27,b	;volatile
 15546                           
 15547                           ; BSR set to: 15
 15548                           ;ECAN.c: 482: RXM0EXIDM = 1;
 15549  0039CE  8719               	bsf	25,3,b	;volatile
 15550                           
 15551                           ; BSR set to: 15
 15552                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 15553  0039D0  6B1C               	clrf	28,b	;volatile
 15554                           
 15555                           ; BSR set to: 15
 15556  0039D2  6B1D               	clrf	29,b	;volatile
 15557                           
 15558                           ; BSR set to: 15
 15559  0039D4  6B1E               	clrf	30,b	;volatile
 15560                           
 15561                           ; BSR set to: 15
 15562  0039D6  6B1F               	clrf	31,b	;volatile
 15563                           
 15564                           ; BSR set to: 15
 15565                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 15566  0039D8  871D               	bsf	29,3,b	;volatile
 15567                           
 15568                           ; BSR set to: 15
 15569                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 15570  0039DA  0E00               	movlw	0
 15571  0039DC  EFB7  F01F         	goto	_ECANSetOperationMode
 15572  0039E0                     __end_of_ECANInitialize:
 15573                           	opt stack 0
 15574                           tblptru	equ	0xFF8
 15575                           tblptrh	equ	0xFF7
 15576                           tblptrl	equ	0xFF6
 15577                           tablat	equ	0xFF5
 15578                           prodh	equ	0xFF4
 15579                           prodl	equ	0xFF3
 15580                           intcon	equ	0xFF2
 15581                           postinc0	equ	0xFEE
 15582                           wreg	equ	0xFE8
 15583                           indf1	equ	0xFE7
 15584                           fsr1h	equ	0xFE2
 15585                           fsr1l	equ	0xFE1
 15586                           indf2	equ	0xFDF
 15587                           postinc2	equ	0xFDE
 15588                           postdec2	equ	0xFDD
 15589                           plusw2	equ	0xFDB
 15590                           fsr2h	equ	0xFDA
 15591                           fsr2l	equ	0xFD9
 15592                           status	equ	0xFD8
 15593                           
 15594 ;; *************** function _ECANSetOperationMode *****************
 15595 ;; Defined at:
 15596 ;;		line 1012 in file "../ECAN.c"
 15597 ;; Parameters:    Size  Location     Type
 15598 ;;  mode            1    wreg     enum E16337
 15599 ;; Auto vars:     Size  Location     Type
 15600 ;;  mode            1    7[COMRAM] enum E16337
 15601 ;; Return value:  Size  Location     Type
 15602 ;;		None               void
 15603 ;; Registers used:
 15604 ;;		wreg, status,2, status,0
 15605 ;; Tracked objects:
 15606 ;;		On entry : 0/0
 15607 ;;		On exit  : 0/0
 15608 ;;		Unchanged: 0/0
 15609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15610 ;;      Params:         0       0       0       0       0       0       0
 15611 ;;      Locals:         1       0       0       0       0       0       0
 15612 ;;      Temps:          0       0       0       0       0       0       0
 15613 ;;      Totals:         1       0       0       0       0       0       0
 15614 ;;Total ram usage:        1 bytes
 15615 ;; Hardware stack levels used:    1
 15616 ;; Hardware stack levels required when called:    2
 15617 ;; This function calls:
 15618 ;;		Nothing
 15619 ;; This function is called by:
 15620 ;;		_ECANInitialize
 15621 ;; This function uses a non-reentrant model
 15622 ;;
 15623                           
 15624                           	psect	text71
 15625  003F6E                     __ptext71:
 15626                           	opt stack 0
 15627  003F6E                     _ECANSetOperationMode:
 15628                           	opt stack 26
 15629                           
 15630                           ;incstack = 0
 15631                           ;incstack = 0
 15632                           ;ECANSetOperationMode@mode stored from wreg
 15633  003F6E  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 15634                           
 15635                           ;ECAN.c: 1013: CANCON &= 0x1F;
 15636  003F72  0E1F               	movlw	31
 15637  003F74  166F               	andwf	3951,f,c	;volatile
 15638                           
 15639                           ;ECAN.c: 1014: CANCON |= mode;
 15640  003F76  5008               	movf	ECANSetOperationMode@mode,w,c
 15641  003F78  126F               	iorwf	3951,f,c	;volatile
 15642  003F7A                     l7048:
 15643  003F7A  506F               	movf	3951,w,c	;volatile
 15644  003F7C  0BE0               	andlw	224
 15645  003F7E  1808               	xorwf	ECANSetOperationMode@mode,w,c
 15646  003F80  B4D8               	btfsc	status,2,c
 15647  003F82  0012               	return	
 15648  003F84  D7FA               	goto	l7048
 15649  003F86                     __end_of_ECANSetOperationMode:
 15650                           	opt stack 0
 15651                           tblptru	equ	0xFF8
 15652                           tblptrh	equ	0xFF7
 15653                           tblptrl	equ	0xFF6
 15654                           tablat	equ	0xFF5
 15655                           prodh	equ	0xFF4
 15656                           prodl	equ	0xFF3
 15657                           intcon	equ	0xFF2
 15658                           postinc0	equ	0xFEE
 15659                           wreg	equ	0xFE8
 15660                           indf1	equ	0xFE7
 15661                           fsr1h	equ	0xFE2
 15662                           fsr1l	equ	0xFE1
 15663                           indf2	equ	0xFDF
 15664                           postinc2	equ	0xFDE
 15665                           postdec2	equ	0xFDD
 15666                           plusw2	equ	0xFDB
 15667                           fsr2h	equ	0xFDA
 15668                           fsr2l	equ	0xFD9
 15669                           status	equ	0xFD8
 15670                           
 15671 ;; *************** function _OpenTimer0 *****************
 15672 ;; Defined at:
 15673 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 15674 ;; Parameters:    Size  Location     Type
 15675 ;;  config          1    wreg     unsigned char 
 15676 ;; Auto vars:     Size  Location     Type
 15677 ;;  config          1    7[COMRAM] unsigned char 
 15678 ;; Return value:  Size  Location     Type
 15679 ;;		None               void
 15680 ;; Registers used:
 15681 ;;		wreg, status,2, status,0
 15682 ;; Tracked objects:
 15683 ;;		On entry : 0/0
 15684 ;;		On exit  : 0/0
 15685 ;;		Unchanged: 0/0
 15686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15687 ;;      Params:         0       0       0       0       0       0       0
 15688 ;;      Locals:         1       0       0       0       0       0       0
 15689 ;;      Temps:          0       0       0       0       0       0       0
 15690 ;;      Totals:         1       0       0       0       0       0       0
 15691 ;;Total ram usage:        1 bytes
 15692 ;; Hardware stack levels used:    1
 15693 ;; Hardware stack levels required when called:    2
 15694 ;; This function calls:
 15695 ;;		Nothing
 15696 ;; This function is called by:
 15697 ;;		_init
 15698 ;; This function uses a non-reentrant model
 15699 ;;
 15700                           
 15701                           	psect	text72
 15702  003EE6                     __ptext72:
 15703                           	opt stack 0
 15704  003EE6                     _OpenTimer0:
 15705                           	opt stack 27
 15706                           
 15707                           ;incstack = 0
 15708                           ;incstack = 0
 15709                           ;OpenTimer0@config stored from wreg
 15710  003EE6  CFE8 F008          	movff	wreg,OpenTimer0@config
 15711  003EEA  5008               	movf	OpenTimer0@config,w,c
 15712  003EEC  0B7F               	andlw	127
 15713  003EEE  6ED5               	movwf	4053,c	;volatile
 15714  003EF0  6AD7               	clrf	4055,c	;volatile
 15715  003EF2  6AD6               	clrf	4054,c	;volatile
 15716  003EF4  94F2               	bcf	intcon,2,c	;volatile
 15717  003EF6  AE08               	btfss	OpenTimer0@config,7,c
 15718  003EF8  D002               	goto	l1323
 15719  003EFA  8AF2               	bsf	intcon,5,c	;volatile
 15720  003EFC  D001               	goto	l1324
 15721  003EFE                     l1323:
 15722  003EFE  9AF2               	bcf	intcon,5,c	;volatile
 15723  003F00                     l1324:
 15724  003F00  8ED5               	bsf	4053,7,c	;volatile
 15725  003F02  0012               	return	
 15726  003F04                     __end_of_OpenTimer0:
 15727                           	opt stack 0
 15728                           tblptru	equ	0xFF8
 15729                           tblptrh	equ	0xFF7
 15730                           tblptrl	equ	0xFF6
 15731                           tablat	equ	0xFF5
 15732                           prodh	equ	0xFF4
 15733                           prodl	equ	0xFF3
 15734                           intcon	equ	0xFF2
 15735                           postinc0	equ	0xFEE
 15736                           wreg	equ	0xFE8
 15737                           indf1	equ	0xFE7
 15738                           fsr1h	equ	0xFE2
 15739                           fsr1l	equ	0xFE1
 15740                           indf2	equ	0xFDF
 15741                           postinc2	equ	0xFDE
 15742                           postdec2	equ	0xFDD
 15743                           plusw2	equ	0xFDB
 15744                           fsr2h	equ	0xFDA
 15745                           fsr2l	equ	0xFD9
 15746                           status	equ	0xFD8
 15747                           
 15748 ;; *************** function _init_app_ram *****************
 15749 ;; Defined at:
 15750 ;;		line 430 in file "../main.c"
 15751 ;; Parameters:    Size  Location     Type
 15752 ;;		None
 15753 ;; Auto vars:     Size  Location     Type
 15754 ;;  i               1   11[COMRAM] unsigned char 
 15755 ;; Return value:  Size  Location     Type
 15756 ;;		None               void
 15757 ;; Registers used:
 15758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15759 ;; Tracked objects:
 15760 ;;		On entry : 0/0
 15761 ;;		On exit  : 0/0
 15762 ;;		Unchanged: 0/0
 15763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15764 ;;      Params:         0       0       0       0       0       0       0
 15765 ;;      Locals:         1       0       0       0       0       0       0
 15766 ;;      Temps:          2       0       0       0       0       0       0
 15767 ;;      Totals:         3       0       0       0       0       0       0
 15768 ;;Total ram usage:        3 bytes
 15769 ;; Hardware stack levels used:    1
 15770 ;; Hardware stack levels required when called:    3
 15771 ;; This function calls:
 15772 ;;		_Read_b_eep
 15773 ;; This function is called by:
 15774 ;;		_main
 15775 ;;		_init
 15776 ;;		_vscp_restoreDefaults
 15777 ;; This function uses a non-reentrant model
 15778 ;;
 15779                           
 15780                           	psect	text73
 15781  0032AC                     __ptext73:
 15782                           	opt stack 0
 15783  0032AC                     _init_app_ram:
 15784                           	opt stack 24
 15785                           
 15786                           ;main.c: 431: uint8_t i;
 15787                           ;main.c: 433: measurement_clock = 0;
 15788                           
 15789                           ;incstack = 0
 15790                           ;incstack = 0
 15791  0032AC  0100               	movlb	0	; () banked
 15792  0032AE  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
 15793  0032B0  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 15794  0032B2  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 15795  0032B4  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 15796                           
 15797                           ;main.c: 435: seconds = 0;
 15798  0032B6  6B8B               	clrf	_seconds& (0+255),b
 15799                           
 15800                           ;main.c: 436: minutes = 0;
 15801  0032B8  6B89               	clrf	_minutes& (0+255),b
 15802                           
 15803                           ;main.c: 437: hours = 0;
 15804  0032BA  6B88               	clrf	_hours& (0+255),b
 15805                           
 15806                           ;main.c: 439: relay_pulse_flags = 0;
 15807  0032BC  6B8A               	clrf	_relay_pulse_flags& (0+255),b
 15808                           
 15809                           ;main.c: 442: for ( i = 0; i < 8; i++ ) {
 15810  0032BE  6A0C               	clrf	init_app_ram@i,c
 15811  0032C0                     l7584:
 15812                           
 15813                           ; BSR set to: 0
 15814                           ;main.c: 443: relay_pulse_timer[ i ] = 0;
 15815  0032C0  500C               	movf	init_app_ram@i,w,c
 15816  0032C2  0D02               	mullw	2
 15817  0032C4  50F3               	movf	prodl,w,c
 15818  0032C6  0F70               	addlw	low _relay_pulse_timer
 15819  0032C8  6ED9               	movwf	fsr2l,c
 15820  0032CA  6ADA               	clrf	fsr2h,c
 15821  0032CC  6ADE               	clrf	postinc2,c
 15822  0032CE  6ADD               	clrf	postdec2,c
 15823                           
 15824                           ;main.c: 444: relay_protection_timer[ i ] = 0;
 15825  0032D0  500C               	movf	init_app_ram@i,w,c
 15826  0032D2  0D02               	mullw	2
 15827  0032D4  50F3               	movf	prodl,w,c
 15828  0032D6  0F60               	addlw	low _relay_protection_timer
 15829  0032D8  6ED9               	movwf	fsr2l,c
 15830  0032DA  6ADA               	clrf	fsr2h,c
 15831  0032DC  6ADE               	clrf	postinc2,c
 15832  0032DE  6ADD               	clrf	postdec2,c
 15833                           
 15834                           ; BSR set to: 0
 15835  0032E0  2A0C               	incf	init_app_ram@i,f,c
 15836                           
 15837                           ; BSR set to: 0
 15838  0032E2  0E07               	movlw	7
 15839  0032E4  640C               	cpfsgt	init_app_ram@i,c
 15840  0032E6  D7EC               	goto	l7584
 15841                           
 15842                           ; BSR set to: 0
 15843                           ;main.c: 445: }
 15844                           ;main.c: 447: for ( i=0; i<7; i++ ) {
 15845  0032E8  6A0C               	clrf	init_app_ram@i,c
 15846  0032EA                     l7594:
 15847                           
 15848                           ;main.c: 450: if ( Read_b_eep(0x43 + 10 + i) &
 15849                           ;main.c: 451: 0x01 ) {
 15850  0032EA  0E4D               	movlw	77
 15851  0032EC  240C               	addwf	init_app_ram@i,w,c
 15852  0032EE  6E08               	movwf	?_Read_b_eep,c
 15853  0032F0  6A09               	clrf	?_Read_b_eep+1,c
 15854  0032F2  0E00               	movlw	0
 15855  0032F4  2209               	addwfc	?_Read_b_eep+1,f,c
 15856  0032F6  EC0B  F020         	call	_Read_b_eep	;wreg free
 15857  0032FA  6E0A               	movwf	??_init_app_ram& (0+255),c
 15858  0032FC  A00A               	btfss	??_init_app_ram,0,c
 15859  0032FE  D02D               	goto	l7600
 15860                           
 15861                           ;main.c: 453: relay_pulse_flags |= (1<<i);
 15862  003300  C00C  F00A         	movff	init_app_ram@i,??_init_app_ram
 15863  003304  0E01               	movlw	1
 15864  003306  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 15865  003308  2A0A               	incf	??_init_app_ram,f,c
 15866  00330A  D002               	goto	u7934
 15867  00330C                     u7935:
 15868  00330C  90D8               	bcf	status,0,c
 15869  00330E  360B               	rlcf	??_init_app_ram+1,f,c
 15870  003310                     u7934:
 15871  003310  2E0A               	decfsz	??_init_app_ram,f,c
 15872  003312  D7FC               	goto	u7935
 15873  003314  500B               	movf	??_init_app_ram+1,w,c
 15874  003316  0100               	movlb	0	; () banked
 15875  003318  138A               	iorwf	_relay_pulse_flags& (0+255),f,b
 15876                           
 15877                           ; BSR set to: 0
 15878                           ;main.c: 454: relay_pulse_timer[ i ] =
 15879                           ;main.c: 455: Read_b_eep(0x43 + 18 + i) * 256 +
 15880                           ;main.c: 456: Read_b_eep(0x43 + 19 + i);
 15881  00331A  0E55               	movlw	85
 15882  00331C  240C               	addwf	init_app_ram@i,w,c
 15883  00331E  6E08               	movwf	?_Read_b_eep,c
 15884  003320  6A09               	clrf	?_Read_b_eep+1,c
 15885  003322  0E00               	movlw	0
 15886  003324  2209               	addwfc	?_Read_b_eep+1,f,c
 15887  003326  EC0B  F020         	call	_Read_b_eep	;wreg free
 15888  00332A  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 15889  00332C  6A0A               	clrf	??_init_app_ram& (0+255),c
 15890  00332E  0E56               	movlw	86
 15891  003330  240C               	addwf	init_app_ram@i,w,c
 15892  003332  6E08               	movwf	?_Read_b_eep,c
 15893  003334  6A09               	clrf	?_Read_b_eep+1,c
 15894  003336  0E00               	movlw	0
 15895  003338  2209               	addwfc	?_Read_b_eep+1,f,c
 15896  00333A  EC0B  F020         	call	_Read_b_eep	;wreg free
 15897  00333E  260A               	addwf	??_init_app_ram,f,c
 15898  003340  0E00               	movlw	0
 15899  003342  220B               	addwfc	??_init_app_ram+1,f,c
 15900  003344  500C               	movf	init_app_ram@i,w,c
 15901  003346  0D02               	mullw	2
 15902  003348  50F3               	movf	prodl,w,c
 15903  00334A  0100               	movlb	0	; () banked
 15904  00334C  0F70               	addlw	low _relay_pulse_timer
 15905  00334E  6ED9               	movwf	fsr2l,c
 15906  003350  6ADA               	clrf	fsr2h,c
 15907  003352  C00A  FFDE         	movff	??_init_app_ram,postinc2
 15908  003356  C00B  FFDD         	movff	??_init_app_ram+1,postdec2
 15909  00335A                     l7600:
 15910                           
 15911                           ;main.c: 457: }
 15912                           ;main.c: 460: if ( Read_b_eep(0x43 + 15 + i) & 0x04) {
 15913  00335A  0E52               	movlw	82
 15914  00335C  240C               	addwf	init_app_ram@i,w,c
 15915  00335E  6E08               	movwf	?_Read_b_eep,c
 15916  003360  6A09               	clrf	?_Read_b_eep+1,c
 15917  003362  0E00               	movlw	0
 15918  003364  2209               	addwfc	?_Read_b_eep+1,f,c
 15919  003366  EC0B  F020         	call	_Read_b_eep	;wreg free
 15920  00336A  6E0A               	movwf	??_init_app_ram& (0+255),c
 15921  00336C  A40A               	btfss	??_init_app_ram,2,c
 15922  00336E  D020               	goto	l7604
 15923                           
 15924                           ;main.c: 461: relay_protection_timer[ i ] =
 15925                           ;main.c: 462: Read_b_eep(0x43 + 44 + i) * 256 +
 15926                           ;main.c: 463: Read_b_eep(0x43 + 45 + i);
 15927  003370  0E6F               	movlw	111
 15928  003372  240C               	addwf	init_app_ram@i,w,c
 15929  003374  6E08               	movwf	?_Read_b_eep,c
 15930  003376  6A09               	clrf	?_Read_b_eep+1,c
 15931  003378  0E00               	movlw	0
 15932  00337A  2209               	addwfc	?_Read_b_eep+1,f,c
 15933  00337C  EC0B  F020         	call	_Read_b_eep	;wreg free
 15934  003380  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 15935  003382  6A0A               	clrf	??_init_app_ram& (0+255),c
 15936  003384  0E70               	movlw	112
 15937  003386  240C               	addwf	init_app_ram@i,w,c
 15938  003388  6E08               	movwf	?_Read_b_eep,c
 15939  00338A  6A09               	clrf	?_Read_b_eep+1,c
 15940  00338C  0E00               	movlw	0
 15941  00338E  2209               	addwfc	?_Read_b_eep+1,f,c
 15942  003390  EC0B  F020         	call	_Read_b_eep	;wreg free
 15943  003394  260A               	addwf	??_init_app_ram,f,c
 15944  003396  0E00               	movlw	0
 15945  003398  220B               	addwfc	??_init_app_ram+1,f,c
 15946  00339A  500C               	movf	init_app_ram@i,w,c
 15947  00339C  0D02               	mullw	2
 15948  00339E  50F3               	movf	prodl,w,c
 15949  0033A0  0100               	movlb	0	; () banked
 15950  0033A2  0F60               	addlw	low _relay_protection_timer
 15951  0033A4  6ED9               	movwf	fsr2l,c
 15952  0033A6  6ADA               	clrf	fsr2h,c
 15953  0033A8  C00A  FFDE         	movff	??_init_app_ram,postinc2
 15954  0033AC  C00B  FFDD         	movff	??_init_app_ram+1,postdec2
 15955  0033B0                     l7604:
 15956  0033B0  2A0C               	incf	init_app_ram@i,f,c
 15957  0033B2  0E06               	movlw	6
 15958  0033B4  640C               	cpfsgt	init_app_ram@i,c
 15959  0033B6  D799               	goto	l7594
 15960  0033B8  0C06               	retlw	6
 15961  0033BA                     __end_of_init_app_ram:
 15962                           	opt stack 0
 15963                           tblptru	equ	0xFF8
 15964                           tblptrh	equ	0xFF7
 15965                           tblptrl	equ	0xFF6
 15966                           tablat	equ	0xFF5
 15967                           prodh	equ	0xFF4
 15968                           prodl	equ	0xFF3
 15969                           intcon	equ	0xFF2
 15970                           postinc0	equ	0xFEE
 15971                           wreg	equ	0xFE8
 15972                           indf1	equ	0xFE7
 15973                           fsr1h	equ	0xFE2
 15974                           fsr1l	equ	0xFE1
 15975                           indf2	equ	0xFDF
 15976                           postinc2	equ	0xFDE
 15977                           postdec2	equ	0xFDD
 15978                           plusw2	equ	0xFDB
 15979                           fsr2h	equ	0xFDA
 15980                           fsr2l	equ	0xFD9
 15981                           status	equ	0xFD8
 15982                           
 15983 ;; *************** function _WriteTimer0 *****************
 15984 ;; Defined at:
 15985 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 15986 ;; Parameters:    Size  Location     Type
 15987 ;;  timer0          2    7[COMRAM] unsigned int 
 15988 ;; Auto vars:     Size  Location     Type
 15989 ;;  timer           2    9[COMRAM] struct Timers
 15990 ;; Return value:  Size  Location     Type
 15991 ;;		None               void
 15992 ;; Registers used:
 15993 ;;		None
 15994 ;; Tracked objects:
 15995 ;;		On entry : 0/0
 15996 ;;		On exit  : 0/0
 15997 ;;		Unchanged: 0/0
 15998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15999 ;;      Params:         2       0       0       0       0       0       0
 16000 ;;      Locals:         2       0       0       0       0       0       0
 16001 ;;      Temps:          0       0       0       0       0       0       0
 16002 ;;      Totals:         4       0       0       0       0       0       0
 16003 ;;Total ram usage:        4 bytes
 16004 ;; Hardware stack levels used:    1
 16005 ;; Hardware stack levels required when called:    2
 16006 ;; This function calls:
 16007 ;;		Nothing
 16008 ;; This function is called by:
 16009 ;;		_init
 16010 ;; This function uses a non-reentrant model
 16011 ;;
 16012                           
 16013                           	psect	text74
 16014  004004                     __ptext74:
 16015                           	opt stack 0
 16016  004004                     _WriteTimer0:
 16017                           	opt stack 27
 16018                           
 16019                           ;incstack = 0
 16020                           ;incstack = 0
 16021  004004  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 16022  004008  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 16023  00400C  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 16024  004010  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 16025  004014  0012               	return	
 16026  004016                     __end_of_WriteTimer0:
 16027                           	opt stack 0
 16028                           tblptru	equ	0xFF8
 16029                           tblptrh	equ	0xFF7
 16030                           tblptrl	equ	0xFF6
 16031                           tablat	equ	0xFF5
 16032                           prodh	equ	0xFF4
 16033                           prodl	equ	0xFF3
 16034                           intcon	equ	0xFF2
 16035                           postinc0	equ	0xFEE
 16036                           wreg	equ	0xFE8
 16037                           indf1	equ	0xFE7
 16038                           fsr1h	equ	0xFE2
 16039                           fsr1l	equ	0xFE1
 16040                           indf2	equ	0xFDF
 16041                           postinc2	equ	0xFDE
 16042                           postdec2	equ	0xFDD
 16043                           plusw2	equ	0xFDB
 16044                           fsr2h	equ	0xFDA
 16045                           fsr2l	equ	0xFD9
 16046                           status	equ	0xFD8
 16047                           
 16048 ;; *************** function _Read_b_eep *****************
 16049 ;; Defined at:
 16050 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 16051 ;; Parameters:    Size  Location     Type
 16052 ;;  badd            2    7[COMRAM] unsigned int 
 16053 ;; Auto vars:     Size  Location     Type
 16054 ;;		None
 16055 ;; Return value:  Size  Location     Type
 16056 ;;                  1    wreg      unsigned char 
 16057 ;; Registers used:
 16058 ;;		wreg, status,2
 16059 ;; Tracked objects:
 16060 ;;		On entry : 0/0
 16061 ;;		On exit  : 0/0
 16062 ;;		Unchanged: 0/0
 16063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16064 ;;      Params:         2       0       0       0       0       0       0
 16065 ;;      Locals:         0       0       0       0       0       0       0
 16066 ;;      Temps:          0       0       0       0       0       0       0
 16067 ;;      Totals:         2       0       0       0       0       0       0
 16068 ;;Total ram usage:        2 bytes
 16069 ;; Hardware stack levels used:    1
 16070 ;; Hardware stack levels required when called:    2
 16071 ;; This function calls:
 16072 ;;		Nothing
 16073 ;; This function is called by:
 16074 ;;		_init_app_ram
 16075 ;;		_doApplicationOneSecondWork
 16076 ;;		_vscp_readNicknamePermanent
 16077 ;;		_vscp_getZone
 16078 ;;		_vscp_getSubzone
 16079 ;;		_vscp_readAppReg
 16080 ;;		_vscp_writeAppReg
 16081 ;;		_SendInformationEvent
 16082 ;;		_doDM
 16083 ;;		_doActionOn
 16084 ;;		_doActionOff
 16085 ;;		_doActionPulse
 16086 ;;		_doActionStatus
 16087 ;;		_doActionDisable
 16088 ;;		_doActionToggle
 16089 ;;		_vscp_getGUID
 16090 ;;		_vscp_getUserID
 16091 ;;		_vscp_getManufacturerId
 16092 ;;		_vscp_getSegmentCRC
 16093 ;; This function uses a non-reentrant model
 16094 ;;
 16095                           
 16096                           	psect	text75
 16097  004016                     __ptext75:
 16098                           	opt stack 0
 16099  004016                     _Read_b_eep:
 16100                           	opt stack 26
 16101                           
 16102                           ;incstack = 0
 16103                           ;incstack = 0
 16104  004016  C008  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 16105  00401A  9CA6               	bcf	4006,6,c	;volatile
 16106  00401C  9EA6               	bcf	4006,7,c	;volatile
 16107  00401E  80A6               	bsf	4006,0,c	;volatile
 16108  004020  F000               	nop		;# 
 16109  004022  F000               	nop		;# 
 16110  004024  50A8               	movf	4008,w,c	;volatile
 16111  004026  0012               	return	
 16112  004028                     __end_of_Read_b_eep:
 16113                           	opt stack 0
 16114                           tblptru	equ	0xFF8
 16115                           tblptrh	equ	0xFF7
 16116                           tblptrl	equ	0xFF6
 16117                           tablat	equ	0xFF5
 16118                           prodh	equ	0xFF4
 16119                           prodl	equ	0xFF3
 16120                           intcon	equ	0xFF2
 16121                           postinc0	equ	0xFEE
 16122                           wreg	equ	0xFE8
 16123                           indf1	equ	0xFE7
 16124                           fsr1h	equ	0xFE2
 16125                           fsr1l	equ	0xFE1
 16126                           indf2	equ	0xFDF
 16127                           postinc2	equ	0xFDE
 16128                           postdec2	equ	0xFDD
 16129                           plusw2	equ	0xFDB
 16130                           fsr2h	equ	0xFDA
 16131                           fsr2l	equ	0xFD9
 16132                           status	equ	0xFD8
 16133                           
 16134 ;; *************** function _vscp_readAppReg *****************
 16135 ;; Defined at:
 16136 ;;		line 896 in file "../main.c"
 16137 ;; Parameters:    Size  Location     Type
 16138 ;;  reg             1    wreg     unsigned char 
 16139 ;; Auto vars:     Size  Location     Type
 16140 ;;  reg             1   10[COMRAM] unsigned char 
 16141 ;;  rv              1    9[COMRAM] unsigned char 
 16142 ;; Return value:  Size  Location     Type
 16143 ;;                  1    wreg      unsigned char 
 16144 ;; Registers used:
 16145 ;;		wreg, status,2, status,0, cstack
 16146 ;; Tracked objects:
 16147 ;;		On entry : F/0
 16148 ;;		On exit  : 0/0
 16149 ;;		Unchanged: 0/0
 16150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16151 ;;      Params:         0       0       0       0       0       0       0
 16152 ;;      Locals:         2       0       0       0       0       0       0
 16153 ;;      Temps:          0       0       0       0       0       0       0
 16154 ;;      Totals:         2       0       0       0       0       0       0
 16155 ;;Total ram usage:        2 bytes
 16156 ;; Hardware stack levels used:    1
 16157 ;; Hardware stack levels required when called:    3
 16158 ;; This function calls:
 16159 ;;		_Read_b_eep
 16160 ;; This function is called by:
 16161 ;;		_vscp_readRegister
 16162 ;;		_vscp_handleProtocolEvent
 16163 ;; This function uses a non-reentrant model
 16164 ;;
 16165                           
 16166                           	psect	text76
 16167  0037FA                     __ptext76:
 16168                           	opt stack 0
 16169  0037FA                     _vscp_readAppReg:
 16170                           	opt stack 25
 16171                           
 16172                           ;incstack = 0
 16173                           ;incstack = 0
 16174                           ;vscp_readAppReg@reg stored from wreg
 16175  0037FA  CFE8 F00B          	movff	wreg,vscp_readAppReg@reg
 16176                           
 16177                           ; BSR set to: 0
 16178                           ;main.c: 897: uint8_t rv;
 16179                           ;main.c: 899: rv = 0x00;
 16180  0037FE  6A0A               	clrf	vscp_readAppReg@rv,c
 16181                           
 16182                           ; BSR set to: 0
 16183                           ;main.c: 902: if ( reg == 0x00 ) {
 16184  003800  660B               	tstfsz	vscp_readAppReg@reg,c
 16185  003802  D006               	goto	l8384
 16186                           
 16187                           ; BSR set to: 0
 16188                           ;main.c: 903: rv = Read_b_eep(0x43 + 0);
 16189  003804  6A09               	clrf	?_Read_b_eep+1,c
 16190  003806  0E43               	movlw	67
 16191  003808  6E08               	movwf	?_Read_b_eep,c
 16192  00380A  EC0B  F020         	call	_Read_b_eep	;wreg free
 16193  00380E  D04D               	goto	L62
 16194  003810                     l8384:
 16195                           
 16196                           ; BSR set to: 0
 16197                           ;main.c: 906: else if ( reg == 0x01 ) {
 16198  003810  040B               	decf	vscp_readAppReg@reg,w,c
 16199  003812  E106               	bnz	l8388
 16200                           
 16201                           ; BSR set to: 0
 16202                           ;main.c: 907: rv = Read_b_eep(0x43 + 1);
 16203  003814  6A09               	clrf	?_Read_b_eep+1,c
 16204  003816  0E44               	movlw	68
 16205  003818  6E08               	movwf	?_Read_b_eep,c
 16206  00381A  EC0B  F020         	call	_Read_b_eep	;wreg free
 16207  00381E  D045               	goto	L62
 16208  003820                     l8388:
 16209                           
 16210                           ; BSR set to: 0
 16211                           ;main.c: 909: else if ( (reg >= 2) && (reg < 10) ) {
 16212  003820  0E01               	movlw	1
 16213  003822  640B               	cpfsgt	vscp_readAppReg@reg,c
 16214  003824  D034               	goto	l8412
 16215                           
 16216                           ; BSR set to: 0
 16217  003826  0E0A               	movlw	10
 16218  003828  600B               	cpfslt	vscp_readAppReg@reg,c
 16219  00382A  D031               	goto	l8412
 16220  00382C  D01E               	goto	l8410
 16221  00382E                     l8394:
 16222                           
 16223                           ; BSR set to: 0
 16224                           ;main.c: 915: rv = LATBbits.LATB4;
 16225  00382E  0E00               	movlw	0
 16226  003830  B88A               	btfsc	3978,4,c	;volatile
 16227  003832  0E01               	movlw	1
 16228  003834  D03A               	goto	L62
 16229  003836                     l8396:
 16230                           
 16231                           ; BSR set to: 0
 16232                           ;main.c: 920: rv = LATBbits.LATB1;
 16233  003836  0E00               	movlw	0
 16234  003838  B28A               	btfsc	3978,1,c	;volatile
 16235  00383A  0E01               	movlw	1
 16236  00383C  D036               	goto	L62
 16237  00383E                     l8398:
 16238                           
 16239                           ; BSR set to: 0
 16240                           ;main.c: 925: rv = LATBbits.LATB0;
 16241  00383E  0E00               	movlw	0
 16242  003840  B08A               	btfsc	3978,0,c	;volatile
 16243  003842  0E01               	movlw	1
 16244  003844  D032               	goto	L62
 16245  003846                     l8400:
 16246                           
 16247                           ; BSR set to: 0
 16248                           ;main.c: 930: rv = LATCbits.LATC7;
 16249  003846  0E00               	movlw	0
 16250  003848  BE8B               	btfsc	3979,7,c	;volatile
 16251  00384A  0E01               	movlw	1
 16252  00384C  D02E               	goto	L62
 16253  00384E                     l8402:
 16254                           
 16255                           ; BSR set to: 0
 16256                           ;main.c: 935: rv = LATCbits.LATC6;
 16257  00384E  0E00               	movlw	0
 16258  003850  BC8B               	btfsc	3979,6,c	;volatile
 16259  003852  0E01               	movlw	1
 16260  003854  D02A               	goto	L62
 16261  003856                     l8404:
 16262                           
 16263                           ; BSR set to: 0
 16264                           ;main.c: 940: rv = LATCbits.LATC5;
 16265  003856  0E00               	movlw	0
 16266  003858  BA8B               	btfsc	3979,5,c	;volatile
 16267  00385A  0E01               	movlw	1
 16268  00385C  D026               	goto	L62
 16269  00385E                     l8406:
 16270                           
 16271                           ; BSR set to: 0
 16272                           ;main.c: 945: rv = LATCbits.LATC4;
 16273  00385E  0E00               	movlw	0
 16274  003860  B88B               	btfsc	3979,4,c	;volatile
 16275  003862  0E01               	movlw	1
 16276  003864  D022               	goto	L62
 16277  003866                     l282:
 16278                           
 16279                           ; BSR set to: 0
 16280                           ;main.c: 950: rv = 0;
 16281  003866  6A0A               	clrf	vscp_readAppReg@rv,c
 16282                           
 16283                           ;main.c: 951: break;
 16284  003868  D021               	goto	l8418
 16285  00386A                     l8410:
 16286                           
 16287                           ; BSR set to: 0
 16288  00386A  500B               	movf	vscp_readAppReg@reg,w,c
 16289                           
 16290                           ; Switch size 1, requested type "speed"
 16291                           ; Number of cases is 8, Range of values is 2 to 9
 16292                           ; switch strategies available:
 16293                           ; Name         Instructions Cycles
 16294                           ; simple_byte           25    13 (average)
 16295                           ;	Chosen strategy is simple_byte
 16296  00386C  0A02               	xorlw	2	; case 2
 16297  00386E  E0DF               	bz	l8394
 16298  003870  0A01               	xorlw	1	; case 3
 16299  003872  E0E1               	bz	l8396
 16300  003874  0A07               	xorlw	7	; case 4
 16301  003876  E0E3               	bz	l8398
 16302  003878  0A01               	xorlw	1	; case 5
 16303  00387A  E0E5               	bz	l8400
 16304  00387C  0A03               	xorlw	3	; case 6
 16305  00387E  E0E7               	bz	l8402
 16306  003880  0A01               	xorlw	1	; case 7
 16307  003882  E0E9               	bz	l8404
 16308  003884  0A0F               	xorlw	15	; case 8
 16309  003886  E0EB               	bz	l8406
 16310  003888  0A01               	xorlw	1	; case 9
 16311  00388A  E0ED               	bz	l282
 16312  00388C  D00F               	goto	l8418
 16313  00388E                     l8412:
 16314                           
 16315                           ; BSR set to: 0
 16316                           ;main.c: 956: else if ( ( reg >= 10 ) &&
 16317                           ;main.c: 957: (reg < (72 + 7 * 8 ) ) ) {
 16318  00388E  0E09               	movlw	9
 16319  003890  640B               	cpfsgt	vscp_readAppReg@reg,c
 16320  003892  D00C               	goto	l8418
 16321                           
 16322                           ; BSR set to: 0
 16323  003894  0E80               	movlw	128
 16324  003896  600B               	cpfslt	vscp_readAppReg@reg,c
 16325  003898  D009               	goto	l8418
 16326                           
 16327                           ; BSR set to: 0
 16328                           ;main.c: 958: rv = Read_b_eep(0x43 + reg);
 16329  00389A  0E43               	movlw	67
 16330  00389C  240B               	addwf	vscp_readAppReg@reg,w,c
 16331  00389E  6E08               	movwf	?_Read_b_eep,c
 16332  0038A0  6A09               	clrf	?_Read_b_eep+1,c
 16333  0038A2  0E00               	movlw	0
 16334  0038A4  2209               	addwfc	?_Read_b_eep+1,f,c
 16335  0038A6  EC0B  F020         	call	_Read_b_eep	;wreg free
 16336  0038AA                     L62:
 16337  0038AA  6E0A               	movwf	vscp_readAppReg@rv,c
 16338  0038AC                     l8418:
 16339                           
 16340                           ;main.c: 959: }
 16341                           ;main.c: 961: return rv;
 16342  0038AC  500A               	movf	vscp_readAppReg@rv,w,c
 16343  0038AE  0012               	return	
 16344  0038B0                     __end_of_vscp_readAppReg:
 16345                           	opt stack 0
 16346                           tblptru	equ	0xFF8
 16347                           tblptrh	equ	0xFF7
 16348                           tblptrl	equ	0xFF6
 16349                           tablat	equ	0xFF5
 16350                           prodh	equ	0xFF4
 16351                           prodl	equ	0xFF3
 16352                           intcon	equ	0xFF2
 16353                           postinc0	equ	0xFEE
 16354                           wreg	equ	0xFE8
 16355                           indf1	equ	0xFE7
 16356                           fsr1h	equ	0xFE2
 16357                           fsr1l	equ	0xFE1
 16358                           indf2	equ	0xFDF
 16359                           postinc2	equ	0xFDE
 16360                           postdec2	equ	0xFDD
 16361                           plusw2	equ	0xFDB
 16362                           fsr2h	equ	0xFDA
 16363                           fsr2l	equ	0xFD9
 16364                           status	equ	0xFD8
 16365                           
 16366 ;; *************** function _interrupt_at_low_vector *****************
 16367 ;; Defined at:
 16368 ;;		line 131 in file "../main.c"
 16369 ;; Parameters:    Size  Location     Type
 16370 ;;		None
 16371 ;; Auto vars:     Size  Location     Type
 16372 ;;		None
 16373 ;; Return value:  Size  Location     Type
 16374 ;;		None               void
 16375 ;; Registers used:
 16376 ;;		wreg, status,2, status,0, cstack
 16377 ;; Tracked objects:
 16378 ;;		On entry : 0/0
 16379 ;;		On exit  : 0/0
 16380 ;;		Unchanged: 0/0
 16381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16382 ;;      Params:         0       0       0       0       0       0       0
 16383 ;;      Locals:         0       0       0       0       0       0       0
 16384 ;;      Temps:          3       0       0       0       0       0       0
 16385 ;;      Totals:         3       0       0       0       0       0       0
 16386 ;;Total ram usage:        3 bytes
 16387 ;; Hardware stack levels used:    1
 16388 ;; Hardware stack levels required when called:    1
 16389 ;; This function calls:
 16390 ;;		i1_WriteTimer0
 16391 ;; This function is called by:
 16392 ;;		Interrupt level 1
 16393 ;; This function uses a non-reentrant model
 16394 ;;
 16395                           
 16396                           	psect	intcodelo
 16397  000818                     __pintcodelo:
 16398                           	opt stack 0
 16399  000818                     _interrupt_at_low_vector:
 16400                           	opt stack 21
 16401                           
 16402                           ;incstack = 0
 16403  000818  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 16404  00081C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 16405  000820  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 16406  000824                     
 16407                           ;main.c: 133: if ( INTCONbits.TMR0IF ) {
 16408  000824  A4F2               	btfss	intcon,2,c	;volatile
 16409  000826  D001               	goto	i1u772_21
 16410  000828  D001               	goto	i1u772_20
 16411  00082A                     i1u772_21:
 16412  00082A  D03F               	goto	i1l137
 16413  00082C                     i1u772_20:
 16414  00082C                     
 16415                           ;main.c: 136: WriteTimer0(0xfb1d);
 16416  00082C  0EFB               	movlw	251
 16417  00082E  6E02               	movwf	?i1_WriteTimer0+1,c
 16418  000830  0E1D               	movlw	29
 16419  000832  6E01               	movwf	?i1_WriteTimer0,c
 16420  000834  EC14  F020         	call	i1_WriteTimer0	;wreg free
 16421  000838                     
 16422                           ;main.c: 138: vscp_timer++;
 16423  000838  0100               	movlb	0	; () banked
 16424  00083A  4B86               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 16425  00083C  2B87               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 16426  00083E                     
 16427                           ; BSR set to: 0
 16428                           ;main.c: 139: vscp_configtimer++;
 16429  00083E  4B84               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 16430  000840  2B85               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 16431  000842                     
 16432                           ; BSR set to: 0
 16433                           ;main.c: 140: measurement_clock++;
 16434  000842  0E01               	movlw	1
 16435  000844  2780               	addwf	_measurement_clock& (0+255),f,b	;volatile
 16436  000846  0E00               	movlw	0
 16437  000848  2381               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 16438  00084A  0E00               	movlw	0
 16439  00084C  2382               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 16440  00084E  0E00               	movlw	0
 16441  000850  2383               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 16442  000852                     
 16443                           ; BSR set to: 0
 16444                           ;main.c: 141: sendTimer++;
 16445  000852  2B8C               	incf	_sendTimer& (0+255),f,b	;volatile
 16446  000854                     
 16447                           ; BSR set to: 0
 16448                           ;main.c: 144: if ( PORTCbits.RC0 ) {
 16449  000854  A082               	btfss	3970,0,c	;volatile
 16450  000856  D001               	goto	i1u773_21
 16451  000858  D001               	goto	i1u773_20
 16452  00085A                     i1u773_21:
 16453  00085A  D002               	goto	i1l7406
 16454  00085C                     i1u773_20:
 16455  00085C                     
 16456                           ; BSR set to: 0
 16457                           ;main.c: 145: vscp_initbtncnt = 0;
 16458  00085C  6B8F               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 16459                           
 16460                           ;main.c: 146: } else {
 16461  00085E  D001               	goto	i1l129
 16462  000860                     i1l7406:
 16463                           
 16464                           ; BSR set to: 0
 16465                           ;main.c: 148: vscp_initbtncnt++;
 16466  000860  2B8F               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 16467  000862                     i1l129:
 16468                           
 16469                           ; BSR set to: 0
 16470                           ;main.c: 149: }
 16471                           ;main.c: 152: vscp_statuscnt++;
 16472  000862  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 16473  000864                     
 16474                           ; BSR set to: 0
 16475                           ;main.c: 153: if ( ( 0x02 == vscp_initledfunc ) &&
 16476                           ;main.c: 154: ( vscp_statuscnt > 100 ) ) {
 16477  000864  5056               	movf	_vscp_initledfunc,w,c
 16478  000866  0A02               	xorlw	2
 16479  000868  A4D8               	btfss	status,2,c
 16480  00086A  D001               	goto	i1u774_21
 16481  00086C  D001               	goto	i1u774_20
 16482  00086E                     i1u774_21:
 16483  00086E  D00E               	goto	i1l7416
 16484  000870                     i1u774_20:
 16485  000870                     
 16486                           ; BSR set to: 0
 16487  000870  0E64               	movlw	100
 16488  000872  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 16489  000874  D001               	goto	i1u775_21
 16490  000876  D001               	goto	i1u775_20
 16491  000878                     i1u775_21:
 16492  000878  D009               	goto	i1l7416
 16493  00087A                     i1u775_20:
 16494  00087A                     
 16495                           ; BSR set to: 0
 16496                           ;main.c: 156: if ( PORTCbits.RC1 ) {
 16497  00087A  A282               	btfss	3970,1,c	;volatile
 16498  00087C  D001               	goto	i1u776_21
 16499  00087E  D001               	goto	i1u776_20
 16500  000880                     i1u776_21:
 16501  000880  D002               	goto	i1l131
 16502  000882                     i1u776_20:
 16503  000882                     
 16504                           ; BSR set to: 0
 16505                           ;main.c: 157: PORTCbits.RC1 = 0;
 16506  000882  9282               	bcf	3970,1,c	;volatile
 16507                           
 16508                           ;main.c: 158: }
 16509  000884  D001               	goto	i1l132
 16510  000886                     i1l131:
 16511                           
 16512                           ; BSR set to: 0
 16513                           ;main.c: 159: else {
 16514                           ;main.c: 160: PORTCbits.RC1 = 1;
 16515  000886  8282               	bsf	3970,1,c	;volatile
 16516  000888                     i1l132:
 16517                           
 16518                           ; BSR set to: 0
 16519                           ;main.c: 161: }
 16520                           ;main.c: 163: vscp_statuscnt = 0;
 16521  000888  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16522                           
 16523                           ;main.c: 165: }
 16524  00088A  D00E               	goto	i1l133
 16525  00088C                     i1l7416:
 16526                           
 16527                           ; BSR set to: 0
 16528                           ;main.c: 166: else if (0x01 == vscp_initledfunc) {
 16529  00088C  0456               	decf	_vscp_initledfunc,w,c
 16530  00088E  A4D8               	btfss	status,2,c
 16531  000890  D001               	goto	i1u777_21
 16532  000892  D001               	goto	i1u777_20
 16533  000894                     i1u777_21:
 16534  000894  D003               	goto	i1l134
 16535  000896                     i1u777_20:
 16536  000896                     
 16537                           ; BSR set to: 0
 16538                           ;main.c: 167: PORTCbits.RC1 = 1;
 16539  000896  8282               	bsf	3970,1,c	;volatile
 16540                           
 16541                           ;main.c: 168: vscp_statuscnt = 0;
 16542  000898  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16543                           
 16544                           ;main.c: 169: }
 16545  00089A  D006               	goto	i1l133
 16546  00089C                     i1l134:
 16547                           
 16548                           ; BSR set to: 0
 16549                           ;main.c: 170: else if (0x00 == vscp_initledfunc) {
 16550  00089C  6656               	tstfsz	_vscp_initledfunc,c
 16551  00089E  D001               	goto	i1u778_21
 16552  0008A0  D001               	goto	i1u778_20
 16553  0008A2                     i1u778_21:
 16554  0008A2  D002               	goto	i1l133
 16555  0008A4                     i1u778_20:
 16556  0008A4                     
 16557                           ; BSR set to: 0
 16558                           ;main.c: 171: PORTCbits.RC1 = 0;
 16559  0008A4  9282               	bcf	3970,1,c	;volatile
 16560                           
 16561                           ;main.c: 172: vscp_statuscnt = 0;
 16562  0008A6  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16563  0008A8                     i1l133:
 16564                           
 16565                           ; BSR set to: 0
 16566                           ;main.c: 173: }
 16567                           ;main.c: 175: INTCONbits.TMR0IF = 0;
 16568  0008A8  94F2               	bcf	intcon,2,c	;volatile
 16569  0008AA                     i1l137:
 16570  0008AA  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 16571  0008AE  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 16572  0008B2  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 16573  0008B6  0010               	retfie	
 16574  0008B8                     __end_of_interrupt_at_low_vector:
 16575                           	opt stack 0
 16576                           tblptru	equ	0xFF8
 16577                           tblptrh	equ	0xFF7
 16578                           tblptrl	equ	0xFF6
 16579                           tablat	equ	0xFF5
 16580                           prodh	equ	0xFF4
 16581                           prodl	equ	0xFF3
 16582                           intcon	equ	0xFF2
 16583                           postinc0	equ	0xFEE
 16584                           wreg	equ	0xFE8
 16585                           indf1	equ	0xFE7
 16586                           fsr1h	equ	0xFE2
 16587                           fsr1l	equ	0xFE1
 16588                           bsr	equ	0xFE0
 16589                           indf2	equ	0xFDF
 16590                           postinc2	equ	0xFDE
 16591                           postdec2	equ	0xFDD
 16592                           plusw2	equ	0xFDB
 16593                           fsr2h	equ	0xFDA
 16594                           fsr2l	equ	0xFD9
 16595                           status	equ	0xFD8
 16596                           
 16597 ;; *************** function i1_WriteTimer0 *****************
 16598 ;; Defined at:
 16599 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16600 ;; Parameters:    Size  Location     Type
 16601 ;;  timer0          2    0[COMRAM] unsigned int 
 16602 ;; Auto vars:     Size  Location     Type
 16603 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 16604 ;; Return value:  Size  Location     Type
 16605 ;;		None               void
 16606 ;; Registers used:
 16607 ;;		None
 16608 ;; Tracked objects:
 16609 ;;		On entry : 0/0
 16610 ;;		On exit  : 0/0
 16611 ;;		Unchanged: 0/0
 16612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16613 ;;      Params:         2       0       0       0       0       0       0
 16614 ;;      Locals:         2       0       0       0       0       0       0
 16615 ;;      Temps:          0       0       0       0       0       0       0
 16616 ;;      Totals:         4       0       0       0       0       0       0
 16617 ;;Total ram usage:        4 bytes
 16618 ;; Hardware stack levels used:    1
 16619 ;; This function calls:
 16620 ;;		Nothing
 16621 ;; This function is called by:
 16622 ;;		_interrupt_at_low_vector
 16623 ;; This function uses a non-reentrant model
 16624 ;;
 16625                           
 16626                           	psect	text78
 16627  004028                     __ptext78:
 16628                           	opt stack 0
 16629  004028                     i1_WriteTimer0:
 16630                           	opt stack 21
 16631                           
 16632                           ;incstack = 0
 16633                           ;incstack = 0
 16634  004028  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 16635  00402C  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 16636  004030  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 16637  004034  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 16638  004038  0012               	return	
 16639  00403A                     __end_ofi1_WriteTimer0:
 16640                           	opt stack 0
 16641                           tblptru	equ	0xFF8
 16642                           tblptrh	equ	0xFF7
 16643                           tblptrl	equ	0xFF6
 16644                           tablat	equ	0xFF5
 16645                           prodh	equ	0xFF4
 16646                           prodl	equ	0xFF3
 16647                           intcon	equ	0xFF2
 16648                           postinc0	equ	0xFEE
 16649                           wreg	equ	0xFE8
 16650                           indf1	equ	0xFE7
 16651                           fsr1h	equ	0xFE2
 16652                           fsr1l	equ	0xFE1
 16653                           bsr	equ	0xFE0
 16654                           indf2	equ	0xFDF
 16655                           postinc2	equ	0xFDE
 16656                           postdec2	equ	0xFDD
 16657                           plusw2	equ	0xFDB
 16658                           fsr2h	equ	0xFDA
 16659                           fsr2l	equ	0xFD9
 16660                           status	equ	0xFD8
 16661                           tblptru	equ	0xFF8
 16662                           tblptrh	equ	0xFF7
 16663                           tblptrl	equ	0xFF6
 16664                           tablat	equ	0xFF5
 16665                           prodh	equ	0xFF4
 16666                           prodl	equ	0xFF3
 16667                           intcon	equ	0xFF2
 16668                           postinc0	equ	0xFEE
 16669                           wreg	equ	0xFE8
 16670                           indf1	equ	0xFE7
 16671                           fsr1h	equ	0xFE2
 16672                           fsr1l	equ	0xFE1
 16673                           bsr	equ	0xFE0
 16674                           indf2	equ	0xFDF
 16675                           postinc2	equ	0xFDE
 16676                           postdec2	equ	0xFDD
 16677                           plusw2	equ	0xFDB
 16678                           fsr2h	equ	0xFDA
 16679                           fsr2l	equ	0xFD9
 16680                           status	equ	0xFD8
 16681                           
 16682                           	psect	rparam
 16683  0000                     tblptru	equ	0xFF8
 16684                           tblptrh	equ	0xFF7
 16685                           tblptrl	equ	0xFF6
 16686                           tablat	equ	0xFF5
 16687                           prodh	equ	0xFF4
 16688                           prodl	equ	0xFF3
 16689                           intcon	equ	0xFF2
 16690                           postinc0	equ	0xFEE
 16691                           wreg	equ	0xFE8
 16692                           indf1	equ	0xFE7
 16693                           fsr1h	equ	0xFE2
 16694                           fsr1l	equ	0xFE1
 16695                           bsr	equ	0xFE0
 16696                           indf2	equ	0xFDF
 16697                           postinc2	equ	0xFDE
 16698                           postdec2	equ	0xFDD
 16699                           plusw2	equ	0xFDB
 16700                           fsr2h	equ	0xFDA
 16701                           fsr2l	equ	0xFD9
 16702                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     60     141
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionDisable->_Write_b_eep
    _doActionStatus->_SendInformationEvent
    _doActionPulse->_Read_b_eep
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeAppReg
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _vscp_setUserID->_Write_b_eep
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_Read_b_eep
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_Write_b_eep
    _vscp_setSegmentCRC->_Write_b_eep
    _vscp_getSegmentCRC->_Read_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_Read_b_eep
    _vscp_readAppReg->_Read_b_eep

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   66343
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           6     6      0    7438
                                             27 BANK0      6     6      0
                         _Read_b_eep
                        _doActionOff
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2370
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                17    17      0   15731
                                             28 BANK0     17    17      0
                         _Read_b_eep
                        _doActionOff
                         _doActionOn
                      _doActionPulse
                     _doActionStatus
                    _doActionDisable
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       7     6      1    3470
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionDisable                                      6     5      1     449
                                             11 COMRAM     6     5      1
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _doActionStatus                                       7     6      1    3428
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulse                                        7     6      1     381
                                              9 COMRAM     7     6      1
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           7     6      1    3212
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          6     5      1    3212
                                             80 COMRAM     1     0      1
                                             22 BANK0      5     5      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   30509
                                             32 BANK0     28    28      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    9379
                                             30 BANK0      2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    2151
                                             15 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     712
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     204
                                             11 COMRAM     4     4      0
                           _Busy_eep
                        _Write_b_eep
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     112
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     9     8      1    7018
                                             80 COMRAM     1     0      1
                                             22 BANK0      8     8      0
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
             _calculateSetFilterMask
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (2) _SendInformationEvent                                 8     6      2    2533
                                             74 COMRAM     6     6      0
                                             20 BANK0      2     0      2
                         _Read_b_eep
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (5) _calculateSetFilterMask                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1773
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1334
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     217
                                             12 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      31
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     180
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     211
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4672
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     301
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _Write_b_eep                                          4     1      3      68
                                              7 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     666
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         3     3      0     508
                                              9 COMRAM     3     3      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     346
                                              9 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_getSegmentCRC
       _Read_b_eep
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
   _init_app_eeprom
     _Busy_eep
     _Write_b_eep
     _calculateSetFilterMask
   _init_app_ram
     _Read_b_eep
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
     _vscp_readAppReg
       _Read_b_eep
     _vscp_writeAppReg
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
       _calculateSetFilterMask
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _Read_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _Read_b_eep
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_getSegmentCRC
         _Read_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _Busy_eep
         _Write_b_eep
         _Read_b_eep
         _calculateSetFilterMask
         _SendInformationEvent
           _Read_b_eep
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _Read_b_eep
       _vscp_writeStdReg
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_getGUID
           _Read_b_eep
         _vscp_getUserID
           _Read_b_eep
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _Busy_eep
             _Write_b_eep
             _calculateSetFilterMask
           _init_app_ram
             _Read_b_eep
     _vscp_writeStdReg
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_getGUID
         _Read_b_eep
       _vscp_getUserID
         _Read_b_eep
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _Busy_eep
           _Write_b_eep
           _calculateSetFilterMask
         _init_app_ram
           _Read_b_eep
     ___lbmod
   _doDM
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulse
       _Read_b_eep
     _doActionStatus
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionDisable
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
     _doActionToggle
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
     _vscp_getSubzone
       _Read_b_eep
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _Read_b_eep
       _vscp_getSubzone (ARG)
         _Read_b_eep
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _SendInformationEvent
       _Read_b_eep
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      8D       5       88.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E5       3        0.0%
DATA                 0      0      F1      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Nov 10 22:15:32 2015

                      doActionToggle@val 00CA                  __end_of_vscp_readAppReg 38B0  
                  __end_of_sendVSCPFrame 37FA                              __CFG_CPB$ON 000000  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000C  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 2C00  
                  doActionToggle@dmflags 00C9                              __CFG_LVP$ON 000000  
                            __CFG_WDT$ON 000000                                      l200 2204  
                                    l201 220C                                      l210 2230  
                                    l203 2210                                      l212 2234  
                                    l204 2218                                      l213 223C  
                                    l141 35C0                                      l302 0A0C  
                                    l206 221C                                      l150 3608  
                                    l215 2240                                      l207 2224  
                                    l312 0ADC                                      l216 224A  
                                    l209 2228                                      l322 0BA4  
                                    l410 20B6                                      l218 2340  
                                    l226 23A8                                      l154 3622  
                                    l307 0A76                                      l243 3DCE  
                                    l317 0B40                                      l327 0C08  
                                    l239 3DF4                                      l431 23F2  
                                    l440 2472                                      l177 1D6C  
                                    l505 31B8                       vscp_readStdReg@idx 0019  
                                    l282 3866                                      l450 25B2  
                                    l442 24B2                                      l531 38F4  
                                    l444 24F2                                      l196 21F4  
                                    l461 3504                                      l437 2432  
                                    l197 21FC                                      l630 3F3A  
                                    l470 354A                                      l446 2532  
                                    l518 327E                                      l542 2F18  
                                    l471 354E                                      l439 2616  
                                    l551 2F62                                      l296 09B2  
                                    l472 3552                                      l448 2572  
                                    l560 2F86                                      l552 2F6A  
                                    l473 3556                                      l561 2F8E  
                                    l394 12EC                                      l474 355A  
                                    l490 28D8                                      l554 2F6E  
                                    l467 3542                                      l563 2F92  
                                    l555 2F76                                      l547 2F52  
                                    l468 357A                                      l492 2908  
                                    l484 289A                                      l564 2F9A  
                                    l548 2F5A                                      l469 3546  
                                    l493 2938                                      l557 2F7A  
                                    l902 316E                                      l494 2968  
                                    l566 2F9E                                      l558 2F82  
                                    l655 3A56                                      l495 2998  
                                    l567 2FA8                                      l912 3AC4  
                                    l840 2CCC                                      l496 29C8  
                                    l497 29F8                                      l569 2FF2  
                                    l666 3D06                                      l842 2CEA  
                                    l907 2ECC                        doActionStatus@bOn 00CA  
                                    l860 2850                                      l853 267C  
                                    l870 2700                       vscp_readStdReg@reg 001C  
                                    l863 274A                                      l872 2714  
                                    l864 26CA                                      l848 2D68  
                                    l874 2724                                      l866 26D8  
                                    l884 27B8                                      l876 2734  
                                    l868 26EC                                      l885 27DC  
         __size_of_vscp_handleProbeState 00BA                        doActionStatus@arg 0051  
                         getVSCPFrame@id 0028                        doActionStatus@val 00CB  
          __end_of_vscp_handleProbeState 3744                    ?_vscp_restoreDefaults 0001  
                   __size_of_WriteTimer0 0012                     __size_of_Write_b_eep 0034  
                 _calculateSetFilterMask 408A                                      wreg 000FE8  
            ?_doApplicationOneSecondWork 0001                                     l1103 3F54  
                                   l1032 3E62                                     l1050 372E  
                                   l1042 3740                                     l1051 370E  
                                   l1043 36CC                                     l1027 3B9A  
                   __size_of_doActionOff 00E8                                     l1232 166E  
                                   l1208 14DE                                     l1233 1682  
                                   l1090 3D30                                     l1234 16C4  
                                   l1323 3EFE                                     l1307 3C6A  
                                   l1075 3C08                                     l1243 1700  
                                   l1324 3F00                                     l1148 3EA6  
                                   l1085 3C9E                                     l1086 3CAA  
                                   l1174 34BA                                     l1079 3E3E  
                                   l1282 407E                                     l1099 3B86  
                                   l1276 3D5A                                     l1268 1954  
                    vscp_readStdReg@code 0011                                     l7110 2DFE  
                                   l7022 280A                                     l7030 2824  
                                   l7014 27DE                                     l7036 283A  
              vscp_getManufacturerId@idx 000A                                     l7048 3F7A  
                                   l7080 3A66                                     l7090 3A94  
                                   l7082 3A70                                     l4930 1D6E  
                                   l9010 2A28                                     l8202 3B5C  
                                   l7092 3A9A                                     l7084 3A7A  
                                   l9012 2A48                                     l8212 3B6E  
                                   l7086 3A84                                     l7078 3A5E  
                                   l8400 3846                                     l7600 335A  
                                   l7088 3A8E                                     l7096 3AA6  
                                   l8208 3B66                                     l8402 384E  
                                   l8410 386A                                     l6810 3CE8  
                                   l8404 3856                                     l8412 388E  
                                   l7604 33B0                                     l9212 2C56  
                                   l7700 3732                                     l8406 385E  
                                   l6806 3CE4                                     l9230 2C90  
                                   l7630 368C                                     l5870 3DDC  
                                   l7382 3D7C                                     l7374 3D66  
                                   l9240 2CD0                                     l6760 3EB4  
                                   l9400 2AB8                                     l9080 38B6  
                                   l8418 38AC                                     l9218 2C66  
                                   l9410 2ADA                                     l7572 3E4E  
                                   l9252 2D1A                                     l9260 2D38  
                                   l7644 36AA                                     l9092 3918  
                                   l6934 26AA                                     l6918 266A  
                                   l6942 26B8                                     l9246 2CEC  
                                   l9270 2D5E                                     l7670 36EE  
                                   l7646 36B0                                     l9326 3C00  
                                   l9430 2B14                                     l9422 2AFC  
                                   l9414 2AE6                                     l9406 2ACE  
                                   l5878 3DB6                                     l8384 3810  
                                   l7584 32C0                                     l6928 2694  
                                   l6936 26B4                                     l9272 2D60  
                                   l7664 36E6                                     l9440 2B76  
                                   l9520 348C                                     l9504 343E  
                                   l9600 35F8                                     l8394 382E  
                                   l7594 32EA                                     l6794 39FA  
                                   l9266 2D5A                                     l9450 2BD6  
                                   l9426 2B08                                     l9418 2AF0  
                                   l9362 3F4E                                     l9506 3442  
                                   l9098 3944                                     l9602 35FC  
                                   l8396 3836                                     l8388 3820  
                                   l9196 3CAE                                     l7668 36EA  
                                   l9380 2A7A                                     l9460 2BFC  
                                   l9372 2A66                                     l9508 3458  
                                   l9612 361C                                     l9604 3602  
                                   l8398 383E                                     l9288 3096  
                                   l9456 2BEC                                     l9392 2A9C  
                                   l9384 2A84                                     l9376 2A70  
                                   l9528 34A0                                     l9800 156E  
                                   l9712 13A6                                     l9640 367C  
                                   l9616 3626                                     l6986 275E  
                                   l9490 3404                                     l9538 34BC  
                                   l9650 1322                                     l9618 363E  
                                   l6996 277E                                     l9396 2AA8  
                                   l9388 2A90                                     l9484 33E4  
                                   l9804 1584                                     l9820 15B4  
                                   l9652 1328                                     l9644 3684  
                                   l9628 3668                                     l9910 16A8  
                                   l9902 168A                                     l9822 15B6  
                                   l9742 140E                                     l9726 13B2  
                                   l9654 132E                                     l9496 3420  
                                   l9832 15DA                                     l9824 15C0  
                                   l9752 1442                                     l9656 1334  
                                   l9592 35E6                                     l9914 16B0  
                                   l9850 1622                                     l9762 1476  
                                   l9658 133A                                     l8962 2858  
                                   l9578 35BC                                     l9932 16E0  
                                   l9772 14AA                                     l9692 1380  
                                   l9676 1372                                     l9596 35EE  
                                   l9918 16B8                                     l9838 1606  
                                   l9790 1510                                     l9678 1378  
                                   l8974 28C0                                     l9928 16C6  
                                   l9784 14E2                                     l9954 1708  
                                   l9882 1662                                     l9866 1642  
                                   l9794 1528                                     l9786 1500  
                                   l9990 177E                                     l9968 1730  
                                   l9994 1790                                     l9978 1752  
                                   l9996 1796                                     u4125 3C76  
                                   u4126 3C78              __size_of_vscp_getMatrixInfo 0020  
                         sendCANFrame@id 0037                                     u7135 2DAC  
                                   u7145 2DCC                                     u7155 2E1A  
                                   u6640 3A4A                                     u6645 3A40  
                                   u6815 2672                                     u6817 2674  
                                   u7934 3310                                     u7935 330C  
                                   u9745 3780                                     u9934 2868  
                                   u9935 2864                         ??_ECANInitialize 0009  
              vscp_setManufacturerId@idx 000D                                     _doDM 1DBA  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 35A8                                     _init 3C0A  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 08DE                              _vscp_minute 0090  
                            _vscp_second 0095                                     prodh 000FF4  
                                   prodl 000FF3                                     start 08B8  
                   doActionPulse@dmflags 000F            __size_of_vscp_doOneSecondWork 004E  
                      vscp_getUserID@idx 000A                    __size_of_vscp_setGUID 0026  
                       _vscp_writeStdReg 33BA                          _doActionDisable 38B0  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 3A58              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 002C                                    l10020 17FA  
                                  l10012 17CA                                    l10110 1F44  
                                  l10024 1812                                    l10016 17E4  
                                  l10120 1FF2                                    l10200 226A  
                                  l10042 186A                                    l10034 183C  
                                  l10122 202C                                    l10114 1F7E  
                                  l10106 1F0A                                    l10130 20AC  
                                  l10116 1FB8                                    l10212 232C  
                                  l10140 20C4                                    l10046 1892  
                                  l10222 2366                                    l10312 09C2  
                                  l10128 2066                                    l10208 231A  
                                  l10160 219E                                    l10224 23A4  
                                  l10136 20BC                                    l10314 09C8  
                                  l10306 0984                                    l10234 34C6  
                                  l10218 2352                                    l10170 21FE  
                                  l10068 18F2                                    l10084 1DC6  
                                  l10414 0BB4                                    l10406 0B78  
                                  l10334 0A1E                                    l10326 09F2  
                                  l10254 355E                                    l10246 3528  
                                  l10262 359E                                    l10094 1E2A  
                                  l10158 215C                                    l10512 0DCA  
                                  _B0CON 000E20                                    l10602 0F8C  
                                  l10530 0E36                                    l10506 0DC4  
                                  l10426 0BDC                                    l10354 0A88  
                                  l10346 0A48                                    l10258 358C  
                                  l10540 0E42                                    l10516 0DD0  
                                  l10444 0C50                                    l10436 0C18  
                                  l10630 105A                                    l10614 0F98  
                                  l10374 0AEC                                    l10366 0AB0  
                                  l10294 095A                                    l10438 0C42  
                                  l10286 0932                                    l10278 090E  
                                  l10198 224E                                    l10712 1300  
                                  l10640 1136                                    l10632 1086  
                                  l10608 0F92                                    l10560 0EAE  
                                  l10536 0E3C                                    l10464 0CBC  
                                  l10616 0FC4                                    _B1CON 000E30  
                                  ?_doDM 0001                                    l10706 12D6  
                                  l10634 10B2                                    l10626 1002  
                                  l10554 0EA8                                    l10482 0D28  
                                  l10458 0CB6                                    l10394 0B50  
                                  l10386 0B14                                    l10810 3206  
                                  l10716 1314                                    l10636 10DE  
                                  l10628 102E                                    l10644 1162  
                                  l10564 0EB4                                    l10492 0D5E  
                                  l10468 0CC2                                    l10812 3210  
                                  l10804 31DC                                    l10670 11CA  
                                  l10638 110A                                    l10646 118C  
                                  l10726 23B0                                    l10830 326A  
                                  l10814 321A                                    l10806 31F2  
                                  l10822 3238                                    l10902 2FDE  
                                  l10584 0F20                                    l10488 0D2E  
                                  l10816 3224                                    l10808 31FC  
                                  l10824 3254                                    l10840 32A2  
                                  l10912 3016                                    _B2CON 000E40  
                                  l10674 11F6                                    l10578 0F1A  
                                  l10738 2418                                    l10818 322E  
                                  l10850 2ED6                                    l10676 122C  
                                  l10588 0F26                                    l10924 3E9C  
                                  l10836 3290                                    l10908 3004  
                                  l10686 1266                                    l10774 25F2  
                                  l10782 263A                                    l10862 2F3C  
                                  l10696 12A6                                    l10792 3178  
                                  _B3CON 000E50                                    l10778 2628  
                                  l10866 2F5C                                    l10894 2FAC  
                                  l10896 2FC8                                    _B4CON 000E60  
          __size_of_SendInformationEvent 006C            __size_of_vscp_getMajorVersion 0002  
                                  _B5CON 000E70               __end_of_vscp_goActiveState 3EE6  
          ??_vscp_writeNicknamePermanent 000C                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                          i1_WriteTimer0 4028                                    _EEADR 000FA9  
                        __end_of___lbmod 3D84                  _vscp_handleDropNickname 3C7C  
                                  _BSEL0 000DF8                                    u10134 38C6  
                                  u10135 38C2                                    _T0CON 000FD5  
                                  u10505 305A                                    u10515 3080  
                                  u10525 30AA                                    u13034 2EE6  
                                  u13035 2EE2                                    u10820 2B6C  
                                  u12084 34D6                                    u12085 34D2  
                                  u10825 2B62                                    u10850 2BCE  
                                  u10855 2BC4                                    u11914 21AE  
                                  u11915 21AA                                    u12744 23C0  
                                  u12745 23BC                                    u12914 3188  
                                  u12915 3184                                    u11894 213A  
                                  u11895 2136                                    i1l131 0886  
                                  i1l132 0888                                    i1l133 08A8  
                                  i1l134 089C                                    i1l129 0862  
                                  i1l137 08AA                          sendCANFrame@dlc 003B  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 406C               _vscp_readNicknamePermanent 4062  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                             _vscp_getGUID 3FF0  
                                  doDM@i 00DD                            __CFG_WRTD$OFF 000000  
                         Read_b_eep@badd 0008                           __CFG_EBTRB$OFF 000000  
                 Write_b_eep@GIE_BIT_VAL 000B                             _vscp_getZone 4044  
                     vscp_writeAppReg@rv 00CC                                    _hours 0088  
              _vscp_getRegisterPagesUsed 408C                   __size_of_vscp_getEvent 002A  
                           _vscp_setGUID 3DD0                                    tablat 000FF5  
                _vscp_getSubMinorVersion 4092                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 3DAA  
                   _ECANSetOperationMode 3F6E                          __initialization 3E64  
                           __end_of_doDM 20B8                             __end_of_main 368A  
                           __end_of_init 3C48                         ?_vscp_readAppReg 0001  
                             _Read_b_eep 4016                  _interrupt_at_low_vector 0818  
                       __end_of_Busy_eep 4084                           doDM@class_mask 00D2  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00CD  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 0010                                   ??_main 0052  
                                 ??_init 000D            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 000A                 ??_vscp_setManufacturerId 000D  
               _vscp_handleProtocolEvent 1318                            __activetblptr 000002  
                      __RegsToCANID@type 000B               ECANReceiveMessage@msgFlags 0011  
          doApplicationOneSecondWork@bOn 00CF                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                 __size_of_doActionPulse 0200               ECANReceiveMessage@savedPtr 0012  
                                 _CANCON 000F6F                                   _EEDATA 000FA8  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                        __CFG_BBSIZ$2048 000000                            doDM@type_mask 00D5  
                     vscp_writeStdReg@rv 0015                            ?_init_app_ram 0001  
                                 _MDSEL0 007BBE                                   _MDSEL1 007BBF  
                                 i1l7400 0852                               _OpenTimer0 3EE6  
                                 i1l7410 0870                                   i1l7402 0854  
                                 i1l7420 08A4                                   i1l7412 087A  
                                 i1l7404 085C                                   i1l7414 0882  
                                 i1l7406 0860                                   i1l7416 088C  
                                 i1l7408 0864                                   i1l7418 0896  
                                 i1l7390 0824                                   i1l7392 082C  
                                 i1l7394 0838                                   i1l7396 083E  
                                 i1l7398 0842                          _init_app_eeprom 1956  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                __end_of_doActionDisable 394E                           __CFG_WDTPS$128 000000  
                 ECANReceiveMessage@data 000F                   ECANReceiveMessage@mode 0016  
                 ECANReceiveMessage@temp 0017                        getVSCPFrame@pData 0022  
                      getVSCPFrame@pSize 0021                       _vscp_newNodeOnline 3D08  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0011  
 vscp_handleProtocolEvent@page_save_1275 00DA                           getCANFrame@pid 001C  
                         __CFG_STVREN$ON 000000                                ??___lbmod 0009  
                          _vscp_getEvent 3D32                                   _doWork 4088  
                       OpenTimer0@config 0008                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 000D                      vscp_writeAppReg@bOn 00CD  
                    vscp_writeAppReg@reg 00CE               __end_of_vscp_setSegmentCRC 3FB2  
                    vscp_writeAppReg@val 0051                                   clear_0 3E6A  
                                 clear_1 3E76                            ?_sendCANFrame 0037  
           vscp_handleProtocolEvent@byte 00E7                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 0091                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 000C  
              ??_vscp_getSubMinorVersion 0008     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 000A                     ??_vscp_newNodeOnline 004C  
                        ___lbmod@divisor 0008                          doActionToggle@i 00CC  
                             __accesstop 0060                  __end_of__initialization 3E7C  
                        ___lbmod@counter 000A            __size_of_vscp_getMinorVersion 0002  
                        doActionStatus@i 00CC                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 3E86                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0026                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001                            _doActionPulse 2852  
            __end_of_vscp_check_pstorage 3E64                  __size_of_vscp_setUserID 001C  
                            ?_Read_b_eep 0008                          ??i1_WriteTimer0 0003  
                    ?_vscp_writeRegister 00CF                           ??_sendCANFrame 003E  
                             _doActionOn 23AA                  ?_calculateSetFilterMask 0001  
             __end_of_vscp_getFamilyCode 4062                            ?__RegsToCANID 0008  
            __size_of_ECANReceiveMessage 020E                       sendVSCPFrame@pData 0045  
             __end_of_vscp_getFamilyType 4058          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 00CF          __size_of_vscp_setManufacturerId 0026  
               __end_of_vscp_writeAppReg 1318                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 1DBA              __end_of_vscp_setControlByte 3F9C  
               __end_of_vscp_writeStdReg 34C0                       __RegsToCANID@Value 000E  
                   ??_vscp_writeRegister 0052          __end_of_vscp_handleDropNickname 3CAC  
                           _getVSCPFrame 39E0                               __pbssBANK0 0060  
                            ?_OpenTimer0 0001               __end_of_vscp_getBufferSize 4090  
                              ?_Busy_eep 0001                         ?_doActionDisable 000C  
                  vscp_writeRegister@reg 00D0                   ??_ECANSetOperationMode 0008  
     __size_of_vscp_getRegisterPagesUsed 0002                           ?_doActionPulse 000A  
        __end_of_vscp_getSubMinorVersion 4094                 ECANSetOperationMode@mode 0008  
                                _B0RXFUL 007107                                  _B1RXFUL 007187  
                   __ECANRxFilterHitInfo 0054                                  _B2RXFUL 007207  
                                _B3RXFUL 007287                                  _B4RXFUL 007307  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 000C  
                                _B5RXFUL 007387           __end_of_calculateSetFilterMask 408C  
                __size_of_doActionToggle 0152                         WriteTimer0@timer 000A  
                __size_of_doActionStatus 013C                                  _ECANCON 000F77  
                          ??_WriteTimer0 000A                           ??__RegsToCANID 000C  
                          ??_Write_b_eep 000B                    sendVSCPFrame@priority 0043  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72           SendInformationEvent@eventClass 00C5  
                    vscp_writeStdReg@reg 0016             __end_of_vscp_doOneSecondWork 3B88  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0041  
                          ??_doActionOff 00C7          __end_of_interrupt_at_low_vector 08B8  
               vscp_readStdReg@code_1248 0015                        sendCANFrame@pdata 003C  
                  _vscp_handleProbeState 368A                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 3A58               __end_of_vscp_getMatrixInfo 3EC8  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                    doActionStatus@dmflags 00C9  
                     _vscp_goActiveState 3EC8                   __size_of_sendVSCPFrame 00B6  
           __end_of_SendInformationEvent 3B3A             __end_of_vscp_getMajorVersion 4098  
                    __size_of_Read_b_eep 0012                       __size_of_vscp_init 0044  
                             ??_Busy_eep 0008                  SendInformationEvent@idx 0050  
                 _vscp_getManufacturerId 3FC8                   _vscp_setManufacturerId 3DAA  
                        _ECANSendMessage 2C00                      ?_vscp_goActiveState 0001  
                                __Hparam 0000                          ??_vscp_getEvent 002C  
                                __Lparam 0000                       _vscp_node_substate 0093  
             __end_of_vscp_getSegmentCRC 4076               ??_vscp_handleProtocolEvent 00D1  
                          ??_getCANFrame 001C                             doActionOff@i 00CB  
      __end_of_vscp_getRegisterPagesUsed 408E                 __size_of_vscp_getMDF_URL 0018  
                                ___lbmod 3D5C                          getCANFrame@pdlc 001A  
                vscp_writeAppReg@val_660 00CB                                _FIFOEMPTY 007BA7  
                        __size_of_doWork 0002                             __psmallconst 08BC  
                   __end_of_init_app_ram 33BA                       _vscp_sendHeartBeat 3D84  
                                __pcinit 3E64                           _vscp_deviceURL 08BC  
                            ?_doActionOn 0051                                  __ramtop 0600  
                    __size_of_OpenTimer0 001E                                  __ptext0 35A8  
                                __ptext1 4088                                  __ptext2 20B8  
                                __ptext3 3B3A                                  __ptext4 3D84  
                                __ptext5 403A                                  __ptext6 4044  
                                __ptext7 4084                                  __ptext8 1DBA  
                                __ptext9 2ECE                           _vscp_getUserID 3FDC  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 004C  
                       doActionDisable@i 0011                    vscp_writeStdReg@value 0010  
                    ?_vscp_sendHeartBeat 00C5                 ??_vscp_handleSetNickname 000D  
                                _minutes 0089                                  _seconds 008B  
                    __end_of_WriteTimer0 4016                         ?_init_app_eeprom 0001  
                    __end_of_Write_b_eep 3C7C                        vscp_readAppReg@rv 000A  
                     vscp_getMDF_URL@idx 0009            vscp_handleProtocolEvent@bytes 00DE  
                   end_of_initialization 3E7C                      __end_of_doActionOff 35A8  
           __end_of_vscp_handleHeartbeat 3C0A                 __size_of_vscp_getSubzone 000A  
                          __Lmediumconst 0000                     __end_of_sendCANFrame 3CDC  
              vscp_handleProtocolEvent@i 00EB                vscp_handleProtocolEvent@j 00EC  
              vscp_handleProtocolEvent@k 00E5                          ??_doActionPulse 000B  
                 doActionDisable@dmflags 0010                     ??_vscp_sendHeartBeat 004C  
                         _vscp_sendEvent 3DF6                        ECANSendMessage@id 0012  
                      ECANSendMessage@pb 001B                                  postdec2 000FDD  
                __size_of_ECANInitialize 0092                           _vscp_setUserID 3F04  
                                postinc0 000FEE                                  postinc2 000FDE  
                 __end_of_vscp_deviceURL 08DC      __end_of_vscp_writeNicknamePermanent 3FC8  
            _vscp_writeNicknamePermanent 3FB2                       __ECANPointBuffer@b 000B  
                          _sendVSCPFrame 3744                   __end_of_vscp_getUserID 3FF0  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0078CB  
                      __end_of_vscp_init 3BCC                           _vscp_probe_cnt 0094  
                              _PORTCbits 000F82                      __end_of_getCANFrame 3D08  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
               __size_of_vscp_readAppReg 00B6                         ___lbmod@dividend 0009  
                       doActionPulse@arg 000A                           _vscp_statuscnt 0058  
               __size_of_vscp_readStdReg 01AE                         doActionPulse@val 000E  
                     _vscp_setSegmentCRC 3F9C               vscp_handleProtocolEvent@cb 00E3  
                __end_of_ECANSendMessage 2D6A                        vscp_readStdReg@rv 001B  
                            ___lbmod@rem 000B                            ?__CANIDToRegs 0008  
                            doDM@dmflags 00DC                     __end_of__RegsToCANID 2ECE  
                    __size_of_doActionOn 029A                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 3E1C                               _vscp_error 4084  
                   _vscp_doOneSecondWork 3B3A                       i1WriteTimer0@timer 0003  
                             _vscp_timer 0086                   __end_of_vscp_setUserID 3F20  
                 vscp_sendHeartBeat@zone 004C                             ??_Read_b_eep 000A  
                         ?_sendVSCPFrame 003F              doApplicationOneSecondWork@i 00D1  
                         _doActionToggle 2ECE                           _doActionStatus 3170  
                        ?_vscp_getUserID 0001                           __end_of_doWork 408A  
           __end_of_vscp_getMinorVersion 4096                              _WriteTimer0 4004  
                   _SendInformationEvent 3ACE                     _vscp_getMajorVersion 4096  
                            _Write_b_eep 3C48                     ??_vscp_setSegmentCRC 000C  
                      ??_vscp_getMDF_URL 0008            ??_vscp_getBootLoaderAlgorithm 0008  
                      ?_vscp_writeAppReg 0051                      start_initialization 3E64  
                            _doActionOff 34C0          __size_of_vscp_handleSetNickname 0024  
                     ??_vscp_writeAppReg 00C7                        ?_vscp_writeStdReg 0010  
                 _relay_protection_timer 0060                      __CFG_BOREN$BOACTIVE 000000  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 0008  
                     ??_vscp_writeStdReg 0011                       _vscp_getFamilyCode 4058  
                         ??__CANIDToRegs 000F                       _vscp_getFamilyType 404E  
                       doDM@class_filter 00D0                       __end_of_Read_b_eep 4028  
                    sendVSCPFrame@nodeid 0042                        _vscp_readRegister 3F3C  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 00E2  
                  ?_vscp_doOneSecondWork 0001                        __size_of_Busy_eep 0006  
                  ECANReceiveMessage@ptr 0018                      ?_vscp_getFamilyCode 0008  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 1956  
                              _doDM$2133 00D6                                _doDM$2134 00D7  
                              _doDM$2135 00D8                                _doDM$2136 00D9  
                        ?_vscp_setUserID 000C                                _doDM$2137 00DA  
                              _doDM$2138 00DB                      ?_vscp_getFamilyType 0008  
                  __size_of_init_app_ram 010E                 ?_vscp_handleDropNickname 0001  
                 __end_of_doActionToggle 3020                        ??_vscp_getSubzone 000A  
                 __end_of_doActionStatus 32AC                 __end_of__ECANPointBuffer 3ACE  
                      __CANIDToRegs@type 000E                              _getCANFrame 3CDC  
                               ??_doWork 0008                       _vscp_getBufferSize 408E  
            vscp_handleProtocolEvent@len 00DF                           doActionOff@arg 0051  
            vscp_handleProtocolEvent@pos 00DD               __end_of_ECANReceiveMessage 2852  
                         doActionOff@val 00CA                      ??_vscp_readRegister 001D  
         __size_of_vscp_goBootloaderMode 001C                    ?_SendInformationEvent 00C5  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 403A  
          __end_of_vscp_goBootloaderMode 3F3C                     _vscp_handleHeartbeat 3BCC  
                     __end_of_OpenTimer0 3F04      __size_of_doApplicationOneSecondWork 02F2  
                    ?_vscp_getBufferSize 0001                           doActionPulse@i 0010  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 000C  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0052  
                   ??_vscp_getFamilyType 000C                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 00B1                         _vscp_alarmstatus 0055  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0030  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 000C  
                          ?_vscp_setGUID 000C              __size_of_vscp_writeRegister 0022  
                       ?_ECANSendMessage 0012                        ??_vscp_readAppReg 000A  
                      sendVSCPFrame@size 0044                __end_of_vscp_readRegister 3F56  
                      _relay_pulse_flags 008A                             _init_app_ram 32AC  
                      _relay_pulse_timer 0070             __size_of_vscp_setControlByte 0016  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 000C  
                   ??_vscp_getBufferSize 0008                              ?_vscp_error 0001  
                     _vscp_getMatrixInfo 3EA8                   _vscp_handleSetNickname 3E1C  
          __size_of_ECANSetOperationMode 0018                          ??_sendVSCPFrame 00B1  
                        ?_doActionToggle 0051                           _ECANInitialize 394E  
                        ?_doActionStatus 0051                 __size_of_doActionDisable 009E  
                               ?___lbmod 0008                      ?_vscp_getMatrixInfo 0001  
                        vscp_getGUID@idx 000A                              __pintcodelo 0818  
                           ??_doActionOn 00C7                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1265 00E1                  vscp_readStdReg@idx_1249 001A  
             vscp_setManufacturerId@data 000C                             _sendCANFrame 3CAC  
                            __smallconst 08BC                        WriteTimer0@timer0 0008  
                     _vscp_getSegmentCRC 406C                           ??_vscp_getGUID 000A  
                         ??_vscp_getZone 000A                              doActionOn@i 00CC  
         __end_of_vscp_getManufacturerId 3FDC           __end_of_vscp_setManufacturerId 3DD0  
                  __size_of__RegsToCANID 0164         vscp_handleProtocolEvent@pos_1264 00E0  
                        doDM@type_filter 00D4                           ??_vscp_setGUID 000D  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 0008  
                       _vscp_configtimer 0084                       doActionDisable@arg 000C  
                     doActionDisable@val 000F          SendInformationEvent@eventTypeId 00C6  
                 ??_vscp_doOneSecondWork 004D                   sendVSCPFrame@vscpclass 003F  
                               _LATBbits 000F8A                     _vscp_getMinorVersion 4094  
                               _LATCbits 000F8B                                _sendTimer 008C  
                     __end_of_doActionOn 2644                   __end_of_ECANInitialize 39E0  
                               i1u772_20 082C                                 i1u772_21 082A  
                               i1u773_20 085C                                 i1u773_21 085A  
                               i1u774_20 0870                                 i1u774_21 086E  
                               i1u775_20 087A                                 i1u775_21 0878  
                               i1u776_20 0882                                 i1u776_21 0880  
                               i1u777_20 0896                                 i1u777_21 0894  
                               i1u778_20 08A4                                 i1u778_21 08A2  
                       ECANSendMessage@i 0034                         ECANSendMessage@j 002F  
                  __end_of_vscp_getEvent 3D5C                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 002C  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 000A                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                   ??_SendInformationEvent 004B  
                               _RXM1SIDH 000F1C                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000F1D               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000C  
                   __end_of__CANIDToRegs 3170                             __RegsToCANID 2D6A  
                     _vscp_probe_address 0057                          Write_b_eep@badd 0008  
                        Write_b_eep@bdat 000A                       doActionOff@dmflags 00C9  
            __size_of_vscp_goActiveState 001E                      getVSCPFrame@pNodeId 001F  
                              _vscp_init 3B88                                _vscp_imsg 0096  
                              _vscp_hour 008E                                _vscp_omsg 00A4  
                       vscp_setGUID@data 000C        __size_of_vscp_handleProtocolEvent 063E  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
               SendInformationEvent@data 004D     __size_of_vscp_writeNicknamePermanent 0016  
     __end_of_doApplicationOneSecondWork 23AA               _doApplicationOneSecondWork 20B8  
                       _vscp_page_select 0052               __size_of_vscp_readRegister 001A  
                      _measurement_clock 0080                                 _Busy_eep 407E  
                  ?_vscp_getMinorVersion 0001                 __size_of_init_app_eeprom 0464  
           __end_of_vscp_restoreDefaults 407E                               _EECON1bits 000FA6  
                        ?_ECANInitialize 0001                 ??_calculateSetFilterMask 0008  
                               __Hrparam 0000                     ECANReceiveMessage@id 0014  
            __size_of_vscp_sendHeartBeat 0026                         ??_vscp_getUserID 000A  
                        _vscp_getMDF_URL 3F56                                 __Lrparam 0000  
                  __end_of_doActionPulse 2A52                         __CANIDToRegs@val 000A  
                       __CANIDToRegs@ptr 0008                            doActionOn@arg 0051  
                          doActionOn@val 00CB                         _vscp_initledfunc 0056  
                       __size_of___lbmod 0028                   ??_vscp_handleHeartbeat 000D  
                       getCANFrame@flags 001D                             ?_WriteTimer0 0008  
                       getCANFrame@pdata 001B                             ?_Write_b_eep 0008  
                      ??_doActionDisable 000D               vscp_writeAppReg@bInfoEvent 00CA  
                             ?_vscp_init 0001                             ?_doActionOff 0051  
                               __ptext10 38B0                                 __ptext11 3170  
                               __ptext20 1956                                 __ptext12 2852  
                               __ptext21 3F04                                 __ptext13 23AA  
                               __ptext30 404E                                 __ptext22 3DAA  
                               __ptext14 34C0                                 __ptext31 4058  
                               __ptext23 3DD0                                 __ptext15 1318  
                               __ptext40 4096                                 __ptext32 408E  
                               __ptext24 08DE                                 __ptext16 3D5C  
                               __ptext41 3D08                                 __ptext33 4090  
                               __ptext25 3ACE                                 __ptext17 3E86  
                               __ptext50 3EC8                                 __ptext42 3C7C  
                               __ptext34 3FC8                                 __ptext26 408A  
                               __ptext18 33BA                                 __ptext51 3DF6  
                               __ptext43 3B88                                 __ptext35 3FDC  
                               __ptext27 3F3C                                 __ptext19 4076  
                               __ptext60 2D6A                                 __ptext52 3744  
                               __ptext44 4062                                 __ptext36 3F56  
                               __ptext28 2A52                                 __ptext61 3A58  
                               __ptext53 3CAC                                 __ptext45 3E1C  
                               __ptext37 3FF0                                 __ptext29 408C  
                               __ptext70 394E                                 __ptext62 3E40  
                               __ptext54 2C00                                 __ptext46 3BCC  
                               __ptext38 4092                                 __ptext71 3F6E  
                               __ptext63 3F86                                 __ptext55 3020  
                               __ptext47 3EA8                                 __ptext39 4094  
                               __ptext72 3EE6                                 __ptext64 3F9C  
                               __ptext56 3D32                                 __ptext48 3F20  
                               __ptext73 32AC                                 __ptext65 406C  
                               __ptext57 39E0                                 __ptext49 368A  
                               __ptext74 4004                                 __ptext66 3FB2  
                               __ptext58 3CDC                                 __ptext75 4016  
                               __ptext67 3C48                                 __ptext59 2644  
                               __ptext76 37FA                                 __ptext68 407E  
                               __ptext69 3C0A                                 __ptext78 4028  
         vscp_goBootloaderMode@algorithm 000C                vscp_sendHeartBeat@subzone 00C5  
                          ?_getVSCPFrame 001E                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 403A                         ??_vscp_setUserID 000D  
                          __size_of_doDM 02FE                            __size_of_main 00E2  
                          __size_of_init 003E                __size_of_vscp_writeAppReg 0A3A  
                    _vscp_check_pstorage 3E40                            init_app_ram@i 000C  
         vscp_handleProtocolEvent@i_1263 00E6           vscp_handleProtocolEvent@i_1266 00EA  
         vscp_handleProtocolEvent@i_1274 00E4                     __end_of_vscp_getGUID 4004  
              __size_of_vscp_writeStdReg 0106                      ECANSendMessage@data 0016  
               ECANSendMessage@tempBSEL0 0030                             ?_getCANFrame 001A  
                    ECANSendMessage@mode 002D                     __end_of_vscp_getZone 404E  
                    ECANSendMessage@temp 0033                        ?__ECANPointBuffer 0008  
                      doActionOn@dmflags 00CA                        vscp_setUserID@idx 000D  
                   __end_of_vscp_setGUID 3DF6                       vscp_readAppReg@reg 000B  
                     ??__ECANPointBuffer 000B           vscp_handleProtocolEvent@offset 00DC  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 000D  
                       init_app_eeprom@i 000E                         init_app_eeprom@j 000F  
                    _vscp_setControlByte 3F86              __size_of_vscp_setSegmentCRC 0016  
                        _vscp_readAppReg 37FA                     ?_vscp_check_pstorage 0001  
                            _RXB1CONbits 000F50         __size_of_vscp_handleDropNickname 0030  
                             _INTCONbits 000FF2             ??_vscp_readNicknamePermanent 000A  
                    ECANReceiveMessage@i 0015                          _vscp_guid_reset 008D  
                        _vscp_readStdReg 2A52             vscp_handleDropNickname@bytes 000D  
             __end_of_vscp_newNodeOnline 3D32                       _ECANReceiveMessage 2644  
                         ??_getVSCPFrame 0023                          _vscp_initbtncnt 008F  
                        sendVSCPFrame@id 0047                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 0008                  vscp_getMatrixInfo@pData 0001  
                __end_of_vscp_getMDF_URL 3F6E                     ?_vscp_setControlByte 0001  
                    ?_ECANReceiveMessage 000F                  ?_vscp_handleSetNickname 0001  
                       ??_doActionToggle 00C7         __size_of_vscp_getSubMinorVersion 0002  
                       ??_doActionStatus 00C7                          _vscp_node_state 0092  
                           ??_vscp_error 0008                  ECANSendMessage@msgFlags 0019  
                    vscp_getMatrixInfo@i 0008          __size_of_calculateSetFilterMask 0002  
                vscp_setControlByte@ctrl 000C                       ECANSendMessage@ptr 0035  
                      ??_init_app_eeprom 000C                    __size_of__CANIDToRegs 0150  
    __size_of_vscp_readNicknamePermanent 000A      __end_of_vscp_getBootLoaderAlgorithm 4092  
            _vscp_getBootLoaderAlgorithm 4090         __size_of_interrupt_at_low_vector 00A0  
                 ECANSendMessage@dataLen 0018                      __ECANPointBuffer@pt 000C  
                   ??_ECANReceiveMessage 0012                    ??_vscp_check_pstorage 000D  
                 ECANSendMessage@buffers 002E                    _vscp_goBootloaderMode 3F20  
           __end_of_ECANSetOperationMode 3F86                     _vscp_restoreDefaults 4076  
            __size_of_vscp_getFamilyCode 000A                              ??_vscp_init 000A  
                __end_of_vscp_getSubzone 4044              __size_of_vscp_getFamilyType 000A  
                             _RXM1EXIDEN 0078EB               __end_of_vscp_writeRegister 3EA8  
                     __end_of_vscp_error 4088                   ECANSendMessage@tempPtr 0031  
         __end_of_vscp_handleSetNickname 3E40       vscp_handleProtocolEvent@bytes_1270 00E8  
                  ??_vscp_setControlByte 000C                     vscp_readRegister@reg 001D  
           ??_doApplicationOneSecondWork 00CC                             __CANIDToRegs 3020  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00D8  
            __size_of_vscp_getBufferSize 0002        doApplicationOneSecondWork@ctrlreg 00D0  
               __size_of_ECANSendMessage 016A                        doActionToggle@bOn 00CB  
                      doActionToggle@arg 0051  
