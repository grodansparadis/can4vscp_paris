

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Fri Nov 13 11:49:03 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	text76,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    89                           	psect	text78,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    92  0000                     
    93                           	psect	smallconst
    94  0008BC                     __psmallconst:
    95                           	opt stack 0
    96  0008BC                     _vscp_deviceURL:
    97                           	opt stack 0
    98  0008BC  77                 	db	119
    99  0008BD  77                 	db	119
   100  0008BE  77                 	db	119
   101  0008BF  2E                 	db	46
   102  0008C0  65                 	db	101
   103  0008C1  75                 	db	117
   104  0008C2  72                 	db	114
   105  0008C3  6F                 	db	111
   106  0008C4  73                 	db	115
   107  0008C5  6F                 	db	111
   108  0008C6  75                 	db	117
   109  0008C7  72                 	db	114
   110  0008C8  63                 	db	99
   111  0008C9  65                 	db	101
   112  0008CA  2E                 	db	46
   113  0008CB  73                 	db	115
   114  0008CC  65                 	db	101
   115  0008CD  2F                 	db	47
   116  0008CE  70                 	db	112
   117  0008CF  61                 	db	97
   118  0008D0  72                 	db	114
   119  0008D1  69                 	db	105
   120  0008D2  73                 	db	115
   121  0008D3  5F                 	db	95
   122  0008D4  30                 	db	48
   123  0008D5  31                 	db	49
   124  0008D6  30                 	db	48
   125  0008D7  2E                 	db	46
   126  0008D8  78                 	db	120
   127  0008D9  6D                 	db	109
   128  0008DA  6C                 	db	108
   129  0008DB  00                 	db	0
   130  0008DC                     __end_of_vscp_deviceURL:
   131                           	opt stack 0
   132  0000                     _BRGCON1	set	3952
   133  0000                     _BRGCON2	set	3953
   134  0000                     _BRGCON3	set	3954
   135  0000                     _BSEL0	set	3576
   136  0000                     _CANCON	set	3951
   137  0000                     _CIOCON	set	3955
   138  0000                     _ECANCON	set	3959
   139  0000                     _EEADR	set	4009
   140  0000                     _EECON1bits	set	4006
   141  0000                     _EECON2	set	4007
   142  0000                     _EEDATA	set	4008
   143  0000                     _INTCONbits	set	4082
   144  0000                     _LATBbits	set	3978
   145  0000                     _LATCbits	set	3979
   146  0000                     _MSEL0	set	3568
   147  0000                     _MSEL1	set	3569
   148  0000                     _MSEL2	set	3570
   149  0000                     _PORTA	set	3968
   150  0000                     _PORTB	set	3969
   151  0000                     _PORTC	set	3970
   152  0000                     _PORTCbits	set	3970
   153  0000                     _RXB1CONbits	set	3920
   154  0000                     _RXF0EIDH	set	3842
   155  0000                     _RXF0EIDL	set	3843
   156  0000                     _RXF0SIDH	set	3840
   157  0000                     _RXF0SIDL	set	3841
   158  0000                     _RXF1EIDH	set	3846
   159  0000                     _RXF1EIDL	set	3847
   160  0000                     _RXF1SIDL	set	3845
   161  0000                     _RXFBCON0	set	3552
   162  0000                     _RXFBCON1	set	3553
   163  0000                     _RXFBCON2	set	3554
   164  0000                     _RXFBCON3	set	3555
   165  0000                     _RXFBCON4	set	3556
   166  0000                     _RXFBCON5	set	3557
   167  0000                     _RXFBCON6	set	3558
   168  0000                     _RXFBCON7	set	3559
   169  0000                     _RXFCON0	set	3540
   170  0000                     _RXFCON1	set	3541
   171  0000                     _RXM0EIDH	set	3866
   172  0000                     _RXM0EIDL	set	3867
   173  0000                     _RXM0SIDH	set	3864
   174  0000                     _RXM0SIDL	set	3865
   175  0000                     _RXM1EIDH	set	3870
   176  0000                     _RXM1EIDL	set	3871
   177  0000                     _RXM1SIDL	set	3869
   178  0000                     _T0CON	set	4053
   179  0000                     _T0CONbits	set	4053
   180  0000                     _TMR0H	set	4055
   181  0000                     _TMR0L	set	4054
   182  0000                     _TRISA	set	3986
   183  0000                     _TRISB	set	3987
   184  0000                     _TRISC	set	3988
   185  0000                     _B0RXFUL	set	28935
   186  0000                     _B0TXEN	set	28610
   187  0000                     _B1RXFUL	set	29063
   188  0000                     _B1TXEN	set	28611
   189  0000                     _B2RXFUL	set	29191
   190  0000                     _B2TXEN	set	28612
   191  0000                     _B3RXFUL	set	29319
   192  0000                     _B3TXEN	set	28613
   193  0000                     _B4RXFUL	set	29447
   194  0000                     _B4TXEN	set	28614
   195  0000                     _B5RXFUL	set	29575
   196  0000                     _B5TXEN	set	28615
   197  0000                     _FIFOEMPTY	set	31655
   198  0000                     _IRXIF	set	32039
   199  0000                     _MDSEL0	set	31678
   200  0000                     _MDSEL1	set	31679
   201  0000                     _RXB0FILHIT0	set	31488
   202  0000                     _RXB0FUL	set	31495
   203  0000                     _RXB0IF	set	32032
   204  0000                     _RXB0OVFL	set	31655
   205  0000                     _RXB1IF	set	32033
   206  0000                     _RXB1OVFL	set	31654
   207  0000                     _RXF1EN	set	28321
   208  0000                     _RXM0EXIDM	set	30923
   209  0000                     _RXM1EXIDEN	set	30955
   210  0000                     _B0CON	set	3616
   211  0000                     _B1CON	set	3632
   212  0000                     _B2CON	set	3648
   213  0000                     _B3CON	set	3664
   214  0000                     _B4CON	set	3680
   215  0000                     _B5CON	set	3696
   216  0000                     _RXB0CON	set	3936
   217  0000                     _RXB1CON	set	3920
   218  0000                     _RXF1SIDH	set	3844
   219  0000                     _RXM1SIDH	set	3868
   220  0000                     _TXB0CON	set	3904
   221  0000                     _TXB1CON	set	3888
   222  0000                     _TXB2CON	set	3872
   223                           
   224                           ; #config settings
   225  0008DC  00                 	db	0	; dummy byte at the end
   226  0000                     
   227                           	psect	cinit
   228  0042C8                     __pcinit:
   229                           	opt stack 0
   230  0042C8                     start_initialization:
   231                           	opt stack 0
   232  0042C8                     __initialization:
   233                           	opt stack 0
   234                           
   235                           ; Clear objects allocated to BANK0 (81 bytes)
   236  0042C8  EE00  F060         	lfsr	0,__pbssBANK0
   237  0042CC  0E51               	movlw	81
   238  0042CE                     clear_0:
   239  0042CE  6AEE               	clrf	postinc0,c
   240  0042D0  06E8               	decf	wreg,f,c
   241  0042D2  E1FD               	bnz	clear_0
   242                           
   243                           ; Clear objects allocated to COMRAM (7 bytes)
   244  0042D4  EE00  F052         	lfsr	0,__pbssCOMRAM
   245  0042D8  0E07               	movlw	7
   246  0042DA                     clear_1:
   247  0042DA  6AEE               	clrf	postinc0,c
   248  0042DC  06E8               	decf	wreg,f,c
   249  0042DE  E1FD               	bnz	clear_1
   250  0042E0                     end_of_initialization:
   251                           	opt stack 0
   252  0042E0                     __end_of__initialization:
   253                           	opt stack 0
   254  0042E0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   255  0042E2  6EF8               	movwf	tblptru,c
   256  0042E4  0100               	movlb	0
   257  0042E6  EF02  F01D         	goto	_main	;jump to C main() function
   258                           tblptru	equ	0xFF8
   259                           postinc0	equ	0xFEE
   260                           wreg	equ	0xFE8
   261                           
   262                           	psect	bssCOMRAM
   263  000052                     __pbssCOMRAM:
   264                           	opt stack 0
   265  000052                     _vscp_page_select:
   266                           	opt stack 0
   267  000052                     	ds	2
   268  000054                     __ECANRxFilterHitInfo:
   269                           	opt stack 0
   270  000054                     	ds	1
   271  000055                     _vscp_alarmstatus:
   272                           	opt stack 0
   273  000055                     	ds	1
   274  000056                     _vscp_initledfunc:
   275                           	opt stack 0
   276  000056                     	ds	1
   277  000057                     _vscp_probe_address:
   278                           	opt stack 0
   279  000057                     	ds	1
   280  000058                     _vscp_statuscnt:
   281                           	opt stack 0
   282  000058                     	ds	1
   283                           tblptru	equ	0xFF8
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287                           	psect	bssBANK0
   288  000060                     __pbssBANK0:
   289                           	opt stack 0
   290  000060                     _relay_protection_timer:
   291                           	opt stack 0
   292  000060                     	ds	16
   293  000070                     _relay_pulse_timer:
   294                           	opt stack 0
   295  000070                     	ds	16
   296  000080                     _measurement_clock:
   297                           	opt stack 0
   298  000080                     	ds	4
   299  000084                     _vscp_configtimer:
   300                           	opt stack 0
   301  000084                     	ds	2
   302  000086                     _vscp_timer:
   303                           	opt stack 0
   304  000086                     	ds	2
   305  000088                     _hours:
   306                           	opt stack 0
   307  000088                     	ds	1
   308  000089                     _minutes:
   309                           	opt stack 0
   310  000089                     	ds	1
   311  00008A                     _relay_pulse_flags:
   312                           	opt stack 0
   313  00008A                     	ds	1
   314  00008B                     _seconds:
   315                           	opt stack 0
   316  00008B                     	ds	1
   317  00008C                     _sendTimer:
   318                           	opt stack 0
   319  00008C                     	ds	1
   320  00008D                     _vscp_guid_reset:
   321                           	opt stack 0
   322  00008D                     	ds	1
   323  00008E                     _vscp_hour:
   324                           	opt stack 0
   325  00008E                     	ds	1
   326  00008F                     _vscp_initbtncnt:
   327                           	opt stack 0
   328  00008F                     	ds	1
   329  000090                     _vscp_minute:
   330                           	opt stack 0
   331  000090                     	ds	1
   332  000091                     _vscp_nickname:
   333                           	opt stack 0
   334  000091                     	ds	1
   335  000092                     _vscp_node_state:
   336                           	opt stack 0
   337  000092                     	ds	1
   338  000093                     _vscp_node_substate:
   339                           	opt stack 0
   340  000093                     	ds	1
   341  000094                     _vscp_probe_cnt:
   342                           	opt stack 0
   343  000094                     	ds	1
   344  000095                     _vscp_second:
   345                           	opt stack 0
   346  000095                     	ds	1
   347  000096                     _vscp_imsg:
   348                           	opt stack 0
   349  000096                     	ds	14
   350  0000A4                     _vscp_omsg:
   351                           	opt stack 0
   352  0000A4                     	ds	13
   353                           tblptru	equ	0xFF8
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           
   357                           	psect	cstackBANK0
   358  0000B1                     __pcstackBANK0:
   359                           	opt stack 0
   360  0000B1                     ??_sendVSCPFrame:
   361                           
   362                           ; 0 bytes @ 0x0
   363  0000B1                     	ds	20
   364  0000C5                     ?_SendInformationEvent:
   365                           	opt stack 0
   366  0000C5                     ?_vscp_sendHeartBeat:
   367                           	opt stack 0
   368  0000C5                     SendInformationEvent@eventClass:
   369                           	opt stack 0
   370  0000C5                     vscp_sendHeartBeat@subzone:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x14
   374  0000C5                     	ds	1
   375  0000C6                     SendInformationEvent@eventTypeId:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x15
   379  0000C6                     	ds	1
   380  0000C7                     ??_doActionOff:
   381  0000C7                     ??_doActionOn:
   382  0000C7                     ??_doActionStatus:
   383  0000C7                     ??_doActionToggle:
   384  0000C7                     ??_vscp_writeAppReg:
   385                           
   386                           ; 0 bytes @ 0x16
   387  0000C7                     	ds	2
   388  0000C9                     doActionOff@dmflags:
   389                           	opt stack 0
   390  0000C9                     doActionStatus@dmflags:
   391                           	opt stack 0
   392  0000C9                     doActionToggle@dmflags:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x18
   396  0000C9                     	ds	1
   397  0000CA                     vscp_writeAppReg@bInfoEvent:
   398                           	opt stack 0
   399  0000CA                     doActionOn@dmflags:
   400                           	opt stack 0
   401  0000CA                     doActionOff@val:
   402                           	opt stack 0
   403  0000CA                     doActionStatus@bOn:
   404                           	opt stack 0
   405  0000CA                     doActionToggle@val:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x19
   409  0000CA                     	ds	1
   410  0000CB                     vscp_writeAppReg@val_682:
   411                           	opt stack 0
   412  0000CB                     doActionOn@val:
   413                           	opt stack 0
   414  0000CB                     doActionOff@i:
   415                           	opt stack 0
   416  0000CB                     doActionStatus@val:
   417                           	opt stack 0
   418  0000CB                     doActionToggle@bOn:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x1A
   422  0000CB                     	ds	1
   423  0000CC                     ??_doApplicationOneSecondWork:
   424  0000CC                     vscp_writeAppReg@rv:
   425                           	opt stack 0
   426  0000CC                     doActionOn@i:
   427                           	opt stack 0
   428  0000CC                     doActionStatus@i:
   429                           	opt stack 0
   430  0000CC                     doActionToggle@i:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x1B
   434  0000CC                     	ds	1
   435  0000CD                     ??_doDM:
   436  0000CD                     vscp_writeAppReg@bOn:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x1C
   440  0000CD                     	ds	1
   441  0000CE                     vscp_writeAppReg@reg:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x1D
   445  0000CE                     	ds	1
   446  0000CF                     ?_vscp_writeRegister:
   447                           	opt stack 0
   448  0000CF                     doApplicationOneSecondWork@bOn:
   449                           	opt stack 0
   450  0000CF                     vscp_writeRegister@value:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x1E
   454  0000CF                     	ds	1
   455  0000D0                     doApplicationOneSecondWork@ctrlreg:
   456                           	opt stack 0
   457  0000D0                     vscp_writeRegister@reg:
   458                           	opt stack 0
   459  0000D0                     doDM@class_filter:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x1F
   463  0000D0                     	ds	1
   464  0000D1                     ??_vscp_handleProtocolEvent:
   465  0000D1                     doApplicationOneSecondWork@i:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x20
   469  0000D1                     	ds	1
   470  0000D2                     doDM@class_mask:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x21
   474  0000D2                     	ds	2
   475  0000D4                     doDM@type_filter:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x23
   479  0000D4                     	ds	1
   480  0000D5                     doDM@type_mask:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x24
   484  0000D5                     	ds	1
   485  0000D6                     _doDM$2152:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x25
   489  0000D6                     	ds	1
   490  0000D7                     _doDM$2153:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0x26
   494  0000D7                     	ds	1
   495  0000D8                     _doDM$2154:
   496                           	opt stack 0
   497  0000D8                     vscp_handleProtocolEvent@page_save:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x27
   501  0000D8                     	ds	1
   502  0000D9                     _doDM$2155:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x28
   506  0000D9                     	ds	1
   507  0000DA                     _doDM$2156:
   508                           	opt stack 0
   509  0000DA                     vscp_handleProtocolEvent@page_save_1294:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x29
   513  0000DA                     	ds	1
   514  0000DB                     _doDM$2157:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x2A
   518  0000DB                     	ds	1
   519  0000DC                     doDM@dmflags:
   520                           	opt stack 0
   521  0000DC                     vscp_handleProtocolEvent@offset:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x2B
   525  0000DC                     	ds	1
   526  0000DD                     doDM@i:
   527                           	opt stack 0
   528  0000DD                     vscp_handleProtocolEvent@pos:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x2C
   532  0000DD                     	ds	1
   533  0000DE                     vscp_handleProtocolEvent@bytes:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x2D
   537  0000DE                     	ds	1
   538  0000DF                     vscp_handleProtocolEvent@len:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x2E
   542  0000DF                     	ds	1
   543  0000E0                     vscp_handleProtocolEvent@pos_1283:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x2F
   547  0000E0                     	ds	1
   548  0000E1                     vscp_handleProtocolEvent@len_1284:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x30
   552  0000E1                     	ds	1
   553  0000E2                     vscp_handleProtocolEvent@bytes_this_time:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x31
   557  0000E2                     	ds	1
   558  0000E3                     vscp_handleProtocolEvent@cb:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x32
   562  0000E3                     	ds	1
   563  0000E4                     vscp_handleProtocolEvent@i_1293:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x33
   567  0000E4                     	ds	1
   568  0000E5                     vscp_handleProtocolEvent@k:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x34
   572  0000E5                     	ds	1
   573  0000E6                     vscp_handleProtocolEvent@i_1282:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x35
   577  0000E6                     	ds	1
   578  0000E7                     vscp_handleProtocolEvent@byte:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x36
   582  0000E7                     	ds	1
   583  0000E8                     vscp_handleProtocolEvent@bytes_1289:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x37
   587  0000E8                     	ds	2
   588  0000EA                     vscp_handleProtocolEvent@i_1285:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x39
   592  0000EA                     	ds	1
   593  0000EB                     vscp_handleProtocolEvent@i:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x3A
   597  0000EB                     	ds	1
   598  0000EC                     vscp_handleProtocolEvent@j:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x3B
   602  0000EC                     	ds	1
   603                           tblptru	equ	0xFF8
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           
   607                           	psect	cstackCOMRAM
   608  000001                     __pcstackCOMRAM:
   609                           	opt stack 0
   610  000001                     ?i1_WriteTimer0:
   611                           	opt stack 0
   612  000001                     i1WriteTimer0@timer0:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x0
   616  000001                     	ds	2
   617  000003                     i1WriteTimer0@timer:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x2
   621  000003                     	ds	2
   622  000005                     ??_interrupt_at_low_vector:
   623                           
   624                           ; 0 bytes @ 0x4
   625  000005                     	ds	3
   626  000008                     ?_WriteTimer0:
   627                           	opt stack 0
   628  000008                     ?_Write_b_eep:
   629                           	opt stack 0
   630  000008                     ?__CANIDToRegs:
   631                           	opt stack 0
   632  000008                     ?__RegsToCANID:
   633                           	opt stack 0
   634  000008                     ??_vscp_getMDF_URL:
   635  000008                     ?_Read_b_eep:
   636                           	opt stack 0
   637  000008                     ?___lbmod:
   638                           	opt stack 0
   639  000008                     ?__ECANPointBuffer:
   640                           	opt stack 0
   641  000008                     ?_vscp_getFamilyCode:
   642                           	opt stack 0
   643  000008                     ?_vscp_getFamilyType:
   644                           	opt stack 0
   645  000008                     vscp_getMatrixInfo@i:
   646                           	opt stack 0
   647  000008                     ECANSetOperationMode@mode:
   648                           	opt stack 0
   649  000008                     OpenTimer0@config:
   650                           	opt stack 0
   651  000008                     ___lbmod@divisor:
   652                           	opt stack 0
   653  000008                     __CANIDToRegs@ptr:
   654                           	opt stack 0
   655  000008                     __RegsToCANID@ptr:
   656                           	opt stack 0
   657  000008                     Read_b_eep@badd:
   658                           	opt stack 0
   659  000008                     Write_b_eep@badd:
   660                           	opt stack 0
   661  000008                     WriteTimer0@timer0:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x7
   665  000008                     	ds	1
   666  000009                     vscp_getMDF_URL@idx:
   667                           	opt stack 0
   668  000009                     ___lbmod@dividend:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x8
   672  000009                     	ds	1
   673  00000A                     ??_init_app_ram:
   674  00000A                     ?_doActionPulse:
   675                           	opt stack 0
   676  00000A                     vscp_readAppReg@rv:
   677                           	opt stack 0
   678  00000A                     doActionPulse@arg:
   679                           	opt stack 0
   680  00000A                     vscp_getGUID@idx:
   681                           	opt stack 0
   682  00000A                     vscp_getUserID@idx:
   683                           	opt stack 0
   684  00000A                     vscp_getManufacturerId@idx:
   685                           	opt stack 0
   686  00000A                     __RegsToCANID@val:
   687                           	opt stack 0
   688  00000A                     Write_b_eep@bdat:
   689                           	opt stack 0
   690  00000A                     ___lbmod@counter:
   691                           	opt stack 0
   692  00000A                     WriteTimer0@timer:
   693                           	opt stack 0
   694  00000A                     __CANIDToRegs@val:
   695                           	opt stack 0
   696                           
   697                           ; 4 bytes @ 0x9
   698  00000A                     	ds	1
   699  00000B                     ??_doActionPulse:
   700  00000B                     vscp_readAppReg@reg:
   701                           	opt stack 0
   702  00000B                     __RegsToCANID@type:
   703                           	opt stack 0
   704  00000B                     __ECANPointBuffer@b:
   705                           	opt stack 0
   706  00000B                     Write_b_eep@GIE_BIT_VAL:
   707                           	opt stack 0
   708  00000B                     ___lbmod@rem:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0xA
   712  00000B                     	ds	1
   713  00000C                     ?_doActionDisable:
   714                           	opt stack 0
   715  00000C                     ??__RegsToCANID:
   716  00000C                     ??_vscp_readStdReg:
   717  00000C                     ?_vscp_setGUID:
   718                           	opt stack 0
   719  00000C                     ?_vscp_setManufacturerId:
   720                           	opt stack 0
   721  00000C                     ?_vscp_setUserID:
   722                           	opt stack 0
   723  00000C                     init_app_ram@i:
   724                           	opt stack 0
   725  00000C                     vscp_setGUID@data:
   726                           	opt stack 0
   727  00000C                     vscp_setManufacturerId@data:
   728                           	opt stack 0
   729  00000C                     vscp_writeNicknamePermanent@nickname:
   730                           	opt stack 0
   731  00000C                     doActionDisable@arg:
   732                           	opt stack 0
   733  00000C                     vscp_setUserID@data:
   734                           	opt stack 0
   735  00000C                     vscp_setSegmentCRC@crc:
   736                           	opt stack 0
   737  00000C                     vscp_setControlByte@ctrl:
   738                           	opt stack 0
   739  00000C                     vscp_goBootloaderMode@algorithm:
   740                           	opt stack 0
   741  00000C                     __ECANPointBuffer@pt:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0xB
   745  00000C                     	ds	1
   746  00000D                     ??_doActionDisable:
   747  00000D                     vscp_setGUID@idx:
   748                           	opt stack 0
   749  00000D                     vscp_setManufacturerId@idx:
   750                           	opt stack 0
   751  00000D                     vscp_setUserID@idx:
   752                           	opt stack 0
   753  00000D                     vscp_handleDropNickname@bytes:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0xC
   757  00000D                     	ds	1
   758  00000E                     doActionPulse@val:
   759                           	opt stack 0
   760  00000E                     __CANIDToRegs@type:
   761                           	opt stack 0
   762  00000E                     __RegsToCANID@Value:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0xD
   766  00000E                     	ds	1
   767  00000F                     ??__CANIDToRegs:
   768  00000F                     ?_ECANReceiveMessage:
   769                           	opt stack 0
   770  00000F                     doActionPulse@dmflags:
   771                           	opt stack 0
   772  00000F                     doActionDisable@val:
   773                           	opt stack 0
   774  00000F                     ECANReceiveMessage@data:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0xE
   778  00000F                     	ds	1
   779  000010                     doActionPulse@i:
   780                           	opt stack 0
   781  000010                     doActionDisable@dmflags:
   782                           	opt stack 0
   783  000010                     ECANReceiveMessage@dataLen:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0xF
   787  000010                     	ds	1
   788  000011                     doActionDisable@i:
   789                           	opt stack 0
   790  000011                     ECANReceiveMessage@msgFlags:
   791                           	opt stack 0
   792  000011                     __CANIDToRegs@Value:
   793                           	opt stack 0
   794  000011                     vscp_readStdReg@code:
   795                           	opt stack 0
   796                           
   797                           ; 4 bytes @ 0x10
   798  000011                     	ds	1
   799  000012                     ??_calculateSetFilterMask:
   800  000012                     ?_ECANSendMessage:
   801                           	opt stack 0
   802  000012                     ECANReceiveMessage@savedPtr:
   803                           	opt stack 0
   804  000012                     ECANSendMessage@id:
   805                           	opt stack 0
   806                           
   807                           ; 4 bytes @ 0x11
   808  000012                     	ds	2
   809  000014                     ECANReceiveMessage@id:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x13
   813  000014                     	ds	1
   814  000015                     ECANReceiveMessage@i:
   815                           	opt stack 0
   816  000015                     vscp_readStdReg@code_1267:
   817                           	opt stack 0
   818                           
   819                           ; 4 bytes @ 0x14
   820  000015                     	ds	1
   821  000016                     ECANReceiveMessage@mode:
   822                           	opt stack 0
   823  000016                     ECANSendMessage@data:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0x15
   827  000016                     	ds	1
   828  000017                     ECANReceiveMessage@temp:
   829                           	opt stack 0
   830                           
   831                           ; 1 bytes @ 0x16
   832  000017                     	ds	1
   833  000018                     ECANSendMessage@dataLen:
   834                           	opt stack 0
   835  000018                     ECANReceiveMessage@ptr:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x17
   839  000018                     	ds	1
   840  000019                     ECANSendMessage@msgFlags:
   841                           	opt stack 0
   842  000019                     vscp_readStdReg@idx:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x18
   846  000019                     	ds	1
   847  00001A                     ??_ECANSendMessage:
   848  00001A                     ?_getCANFrame:
   849                           	opt stack 0
   850  00001A                     getCANFrame@pdlc:
   851                           	opt stack 0
   852  00001A                     vscp_readStdReg@idx_1268:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x19
   856  00001A                     	ds	1
   857  00001B                     getCANFrame@pdata:
   858                           	opt stack 0
   859  00001B                     vscp_readStdReg@rv:
   860                           	opt stack 0
   861  00001B                     ECANSendMessage@pb:
   862                           	opt stack 0
   863                           
   864                           ; 18 bytes @ 0x1A
   865  00001B                     	ds	1
   866  00001C                     getCANFrame@pid:
   867                           	opt stack 0
   868  00001C                     vscp_readStdReg@reg:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x1B
   872  00001C                     	ds	1
   873  00001D                     getCANFrame@flags:
   874                           	opt stack 0
   875  00001D                     vscp_readRegister@reg:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x1C
   879  00001D                     	ds	1
   880  00001E                     ?_getVSCPFrame:
   881                           	opt stack 0
   882  00001E                     getVSCPFrame@pvscptype:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0x1D
   886  00001E                     	ds	1
   887  00001F                     getVSCPFrame@pNodeId:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x1E
   891  00001F                     	ds	1
   892  000020                     getVSCPFrame@pPriority:
   893                           	opt stack 0
   894                           
   895                           ; 1 bytes @ 0x1F
   896  000020                     	ds	1
   897  000021                     getVSCPFrame@pSize:
   898                           	opt stack 0
   899                           
   900                           ; 1 bytes @ 0x20
   901  000021                     	ds	1
   902  000022                     getVSCPFrame@pData:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x21
   906  000022                     	ds	1
   907  000023                     ??_getVSCPFrame:
   908                           
   909                           ; 0 bytes @ 0x22
   910  000023                     	ds	4
   911  000027                     getVSCPFrame@pvscpclass:
   912                           	opt stack 0
   913                           
   914                           ; 1 bytes @ 0x26
   915  000027                     	ds	1
   916  000028                     getVSCPFrame@id:
   917                           	opt stack 0
   918                           
   919                           ; 4 bytes @ 0x27
   920  000028                     	ds	4
   921  00002C                     vscp_getEvent@rv:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x2B
   925  00002C                     	ds	1
   926  00002D                     ECANSendMessage@mode:
   927                           	opt stack 0
   928                           
   929                           ; 1 bytes @ 0x2C
   930  00002D                     	ds	1
   931  00002E                     ECANSendMessage@buffers:
   932                           	opt stack 0
   933                           
   934                           ; 1 bytes @ 0x2D
   935  00002E                     	ds	1
   936  00002F                     ECANSendMessage@j:
   937                           	opt stack 0
   938                           
   939                           ; 1 bytes @ 0x2E
   940  00002F                     	ds	1
   941  000030                     ECANSendMessage@tempBSEL0:
   942                           	opt stack 0
   943                           
   944                           ; 1 bytes @ 0x2F
   945  000030                     	ds	1
   946  000031                     ECANSendMessage@tempPtr:
   947                           	opt stack 0
   948  000031                     calculateSetFilterMask@rowmask:
   949                           	opt stack 0
   950                           
   951                           ; 4 bytes @ 0x30
   952  000031                     	ds	2
   953  000033                     ECANSendMessage@temp:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x32
   957  000033                     	ds	1
   958  000034                     ECANSendMessage@i:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0x33
   962  000034                     	ds	1
   963  000035                     calculateSetFilterMask@lastOID:
   964                           	opt stack 0
   965  000035                     ECANSendMessage@ptr:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x34
   969  000035                     	ds	1
   970  000036                     calculateSetFilterMask@mask:
   971                           	opt stack 0
   972                           
   973                           ; 4 bytes @ 0x35
   974  000036                     	ds	1
   975  000037                     ?_sendCANFrame:
   976                           	opt stack 0
   977  000037                     sendCANFrame@id:
   978                           	opt stack 0
   979                           
   980                           ; 4 bytes @ 0x36
   981  000037                     	ds	3
   982  00003A                     calculateSetFilterMask@filter:
   983                           	opt stack 0
   984                           
   985                           ; 4 bytes @ 0x39
   986  00003A                     	ds	1
   987  00003B                     sendCANFrame@dlc:
   988                           	opt stack 0
   989                           
   990                           ; 1 bytes @ 0x3A
   991  00003B                     	ds	1
   992  00003C                     sendCANFrame@pdata:
   993                           	opt stack 0
   994                           
   995                           ; 2 bytes @ 0x3B
   996  00003C                     	ds	2
   997  00003E                     calculateSetFilterMask@rowfilter:
   998                           	opt stack 0
   999                           
  1000                           ; 4 bytes @ 0x3D
  1001  00003E                     	ds	1
  1002  00003F                     ?_sendVSCPFrame:
  1003                           	opt stack 0
  1004  00003F                     sendVSCPFrame@vscpclass:
  1005                           	opt stack 0
  1006                           
  1007                           ; 2 bytes @ 0x3E
  1008  00003F                     	ds	2
  1009  000041                     sendVSCPFrame@vscptype:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x40
  1013  000041                     	ds	1
  1014  000042                     sendVSCPFrame@nodeid:
  1015                           	opt stack 0
  1016  000042                     calculateSetFilterMask@j:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x41
  1020  000042                     	ds	1
  1021  000043                     sendVSCPFrame@priority:
  1022                           	opt stack 0
  1023  000043                     calculateSetFilterMask@i:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x42
  1027  000043                     	ds	1
  1028  000044                     ??_init_app_eeprom:
  1029  000044                     sendVSCPFrame@size:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x43
  1033  000044                     	ds	1
  1034  000045                     sendVSCPFrame@pData:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0x44
  1038  000045                     	ds	1
  1039  000046                     init_app_eeprom@i:
  1040                           	opt stack 0
  1041                           
  1042                           ; 1 bytes @ 0x45
  1043  000046                     	ds	1
  1044  000047                     init_app_eeprom@j:
  1045                           	opt stack 0
  1046  000047                     sendVSCPFrame@id:
  1047                           	opt stack 0
  1048                           
  1049                           ; 4 bytes @ 0x46
  1050  000047                     	ds	1
  1051  000048                     ?_vscp_writeStdReg:
  1052                           	opt stack 0
  1053  000048                     vscp_writeStdReg@value:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x47
  1057  000048                     	ds	1
  1058  000049                     ??_vscp_writeStdReg:
  1059                           
  1060                           ; 0 bytes @ 0x48
  1061  000049                     	ds	2
  1062  00004B                     ??_SendInformationEvent:
  1063  00004B                     
  1064                           ; 0 bytes @ 0x4A
  1065  00004B                     	ds	1
  1066  00004C                     ??_vscp_newNodeOnline:
  1067  00004C                     vscp_sendHeartBeat@zone:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x4B
  1071  00004C                     	ds	1
  1072  00004D                     ??_vscp_doOneSecondWork:
  1073  00004D                     vscp_writeStdReg@rv:
  1074                           	opt stack 0
  1075  00004D                     SendInformationEvent@data:
  1076                           	opt stack 0
  1077                           
  1078                           ; 3 bytes @ 0x4C
  1079  00004D                     	ds	1
  1080  00004E                     vscp_writeStdReg@reg:
  1081                           	opt stack 0
  1082                           
  1083                           ; 1 bytes @ 0x4D
  1084  00004E                     	ds	2
  1085  000050                     SendInformationEvent@idx:
  1086                           	opt stack 0
  1087                           
  1088                           ; 1 bytes @ 0x4F
  1089  000050                     	ds	1
  1090  000051                     ?_doActionOff:
  1091                           	opt stack 0
  1092  000051                     ?_doActionOn:
  1093                           	opt stack 0
  1094  000051                     ?_doActionStatus:
  1095                           	opt stack 0
  1096  000051                     ?_doActionToggle:
  1097                           	opt stack 0
  1098  000051                     ?_vscp_writeAppReg:
  1099                           	opt stack 0
  1100  000051                     vscp_writeAppReg@val:
  1101                           	opt stack 0
  1102  000051                     doActionOn@arg:
  1103                           	opt stack 0
  1104  000051                     doActionOff@arg:
  1105                           	opt stack 0
  1106  000051                     doActionStatus@arg:
  1107                           	opt stack 0
  1108  000051                     doActionToggle@arg:
  1109                           	opt stack 0
  1110                           
  1111                           ; 1 bytes @ 0x50
  1112  000051                     	ds	1
  1113  000052                     tblptru	equ	0xFF8
  1114                           postinc0	equ	0xFEE
  1115                           wreg	equ	0xFE8
  1116                           
  1117                           ; 0 bytes @ 0x51
  1118 ;;
  1119 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1120 ;;
  1121 ;; *************** function _main *****************
  1122 ;; Defined at:
  1123 ;;		line 188 in file "../main.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;		None
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;		None
  1128 ;; Return value:  Size  Location     Type
  1129 ;;		None               void
  1130 ;; Registers used:
  1131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : F/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1137 ;;      Params:         0       0       0       0       0       0       0
  1138 ;;      Locals:         0       0       0       0       0       0       0
  1139 ;;      Temps:          0       0       0       0       0       0       0
  1140 ;;      Totals:         0       0       0       0       0       0       0
  1141 ;;Total ram usage:        0 bytes
  1142 ;; Hardware stack levels required when called:   10
  1143 ;; This function calls:
  1144 ;;		_init
  1145 ;;		_vscp_check_pstorage
  1146 ;;		_init_app_eeprom
  1147 ;;		_init_app_ram
  1148 ;;		_calculateSetFilterMask
  1149 ;;		_vscp_init
  1150 ;;		_Busy_eep
  1151 ;;		_Write_b_eep
  1152 ;;		_vscp_getEvent
  1153 ;;		_vscp_goActiveState
  1154 ;;		_vscp_handleProbeState
  1155 ;;		_vscp_handleProtocolEvent
  1156 ;;		_doDM
  1157 ;;		_vscp_error
  1158 ;;		_vscp_doOneSecondWork
  1159 ;;		_doApplicationOneSecondWork
  1160 ;;		_doWork
  1161 ;; This function is called by:
  1162 ;;		Startup code after reset
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           	psect	text0
  1167  003A04                     __ptext0:
  1168                           	opt stack 0
  1169  003A04                     _main:
  1170                           	opt stack 21
  1171                           
  1172                           ;main.c: 189: init();
  1173                           
  1174                           ;incstack = 0
  1175                           ;incstack = 0
  1176  003A04  EC37  F020         	call	_init	;wreg free
  1177                           
  1178                           ;main.c: 193: if ( !vscp_check_pstorage() ) {
  1179  003A08  EC52  F021         	call	_vscp_check_pstorage	;wreg free
  1180  003A0C  0900               	iorlw	0
  1181  003A0E  E104               	bnz	l9969
  1182                           
  1183                           ;main.c: 196: init_app_eeprom();
  1184  003A10  ECD9  F00E         	call	_init_app_eeprom	;wreg free
  1185                           
  1186                           ;main.c: 197: init_app_ram();
  1187  003A14  EC84  F01B         	call	_init_app_ram	;wreg free
  1188  003A18                     l9969:
  1189                           
  1190                           ;main.c: 200: }
  1191                           ;main.c: 203: calculateSetFilterMask();
  1192  003A18  ECA3  F00C         	call	_calculateSetFilterMask	;wreg free
  1193                           
  1194                           ;main.c: 205: vscp_init();
  1195  003A1C  ECF6  F01F         	call	_vscp_init	;wreg free
  1196  003A20                     l151:
  1197                           
  1198                           ; BSR set to: 0
  1199  003A20  0004               	clrwdt		;# 
  1200                           
  1201                           ;main.c: 211: if ( ( vscp_initbtncnt > 250 ) &&
  1202                           ;main.c: 212: ( 0x01 != vscp_node_state ) ) {
  1203  003A22  0EFA               	movlw	250
  1204  003A24  0100               	movlb	0	; () banked
  1205  003A26  658F               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1206  003A28  D00E               	goto	l9985
  1207                           
  1208                           ; BSR set to: 0
  1209  003A2A  0592               	decf	_vscp_node_state& (0+255),w,b
  1210  003A2C  E00C               	bz	l9985
  1211                           
  1212                           ; BSR set to: 0
  1213                           ;main.c: 215: vscp_nickname = 0xff;
  1214  003A2E  6991               	setf	_vscp_nickname& (0+255),b
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;main.c: 216: (Busy_eep(), Write_b_eep(0x01,0xff));
  1218  003A30  EC71  F022         	call	_Busy_eep	;wreg free
  1219  003A34  6A09               	clrf	?_Write_b_eep+1,c
  1220  003A36  0E01               	movlw	1
  1221  003A38  6E08               	movwf	?_Write_b_eep,c
  1222  003A3A  0EFF               	movlw	255
  1223  003A3C  680A               	setf	?_Write_b_eep+2,c
  1224  003A3E  EC56  F020         	call	_Write_b_eep	;wreg free
  1225                           
  1226                           ;main.c: 217: vscp_init();
  1227  003A42  ECF6  F01F         	call	_vscp_init	;wreg free
  1228  003A46                     l9985:
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;main.c: 219: }
  1232                           ;main.c: 224: vscp_imsg.flags = 0;
  1233  003A46  6B96               	clrf	_vscp_imsg& (0+255),b
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;main.c: 225: vscp_getEvent();
  1237  003A48  ECCB  F020         	call	_vscp_getEvent	;wreg free
  1238                           
  1239                           ;main.c: 227: switch ( vscp_node_state ) {
  1240  003A4C  D01C               	goto	l10009
  1241  003A4E                     l9989:
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;main.c: 232: if (0xff == vscp_nickname) {
  1245  003A4E  2991               	incf	_vscp_nickname& (0+255),w,b
  1246  003A50  E103               	bnz	l9993
  1247                           
  1248                           ; BSR set to: 0
  1249                           ;main.c: 234: vscp_node_state = 0x01;
  1250  003A52  0E01               	movlw	1
  1251  003A54  6F92               	movwf	_vscp_node_state& (0+255),b
  1252                           
  1253                           ;main.c: 235: } else {
  1254  003A56  D023               	goto	l10011
  1255  003A58                     l9993:
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;main.c: 237: vscp_node_state = 0x03;
  1259  003A58  0E03               	movlw	3
  1260  003A5A  6F92               	movwf	_vscp_node_state& (0+255),b
  1261  003A5C                     l9995:
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;main.c: 238: vscp_goActiveState();
  1265  003A5C  EC96  F021         	call	_vscp_goActiveState	;wreg free
  1266  003A60  D01E               	goto	l10011
  1267  003A62                     l9997:
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;main.c: 243: vscp_handleProbeState();
  1271  003A62  EC75  F01D         	call	_vscp_handleProbeState	;wreg free
  1272                           
  1273                           ;main.c: 244: break;
  1274  003A66  D01B               	goto	l10011
  1275  003A68                     l160:
  1276                           
  1277                           ; BSR set to: 0
  1278                           ;main.c: 253: if (vscp_imsg.flags & 0x80) {
  1279  003A68  AF96               	btfss	_vscp_imsg& (0+255),7,b
  1280  003A6A  D019               	goto	l10011
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;main.c: 255: if ( 0 == vscp_imsg.vscp_class ) {
  1284  003A6C  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  1285  003A6E  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1286  003A70  B4D8               	btfsc	status,2,c
  1287                           
  1288                           ; BSR set to: 0
  1289                           ;main.c: 258: vscp_handleProtocolEvent();
  1290  003A72  EC84  F009         	call	_vscp_handleProtocolEvent	;wreg free
  1291                           
  1292                           ;main.c: 260: }
  1293                           ;main.c: 262: doDM();
  1294  003A76  EC0B  F011         	call	_doDM	;wreg free
  1295  003A7A  D011               	goto	l10011
  1296  003A7C                     l10005:
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;main.c: 268: vscp_error();
  1300  003A7C  EC74  F022         	call	_vscp_error	;wreg free
  1301                           
  1302                           ;main.c: 269: break;
  1303  003A80  D00E               	goto	l10011
  1304  003A82                     l164:
  1305                           
  1306                           ; BSR set to: 0
  1307                           ;main.c: 272: vscp_node_state = 0x00;
  1308  003A82  6B92               	clrf	_vscp_node_state& (0+255),b
  1309                           
  1310                           ;main.c: 273: break;
  1311  003A84  D00C               	goto	l10011
  1312  003A86                     l10009:
  1313  003A86  0100               	movlb	0	; () banked
  1314  003A88  5192               	movf	_vscp_node_state& (0+255),w,b
  1315                           
  1316                           ; Switch size 1, requested type "speed"
  1317                           ; Number of cases is 5, Range of values is 0 to 4
  1318                           ; switch strategies available:
  1319                           ; Name         Instructions Cycles
  1320                           ; simple_byte           16     9 (average)
  1321                           ;	Chosen strategy is simple_byte
  1322  003A8A  E0E1               	bz	l9989
  1323  003A8C  0A01               	xorlw	1	; case 1
  1324  003A8E  E0E9               	bz	l9997
  1325  003A90  0A03               	xorlw	3	; case 2
  1326  003A92  E0E4               	bz	l9995
  1327  003A94  0A01               	xorlw	1	; case 3
  1328  003A96  E0E8               	bz	l160
  1329  003A98  0A07               	xorlw	7	; case 4
  1330  003A9A  E0F0               	bz	l10005
  1331  003A9C  D7F2               	goto	l164
  1332  003A9E                     l10011:
  1333                           
  1334                           ;main.c: 278: if ( measurement_clock > 1000 ) {
  1335  003A9E  0EE9               	movlw	233
  1336  003AA0  0100               	movlb	0	; () banked
  1337  003AA2  5D80               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1338  003AA4  0E03               	movlw	3
  1339  003AA6  5981               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1340  003AA8  0E00               	movlw	0
  1341  003AAA  5982               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1342  003AAC  0E00               	movlw	0
  1343  003AAE  5983               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1344  003AB0  E30B               	bnc	l10021
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;main.c: 280: measurement_clock = 0;
  1348  003AB2  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
  1349  003AB4  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1350  003AB6  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1351  003AB8  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;main.c: 283: vscp_doOneSecondWork();
  1355  003ABA  ECCF  F01F         	call	_vscp_doOneSecondWork	;wreg free
  1356                           
  1357                           ; BSR set to: 0
  1358                           ;main.c: 287: if ( 0x03 == vscp_node_state ) {
  1359  003ABE  5192               	movf	_vscp_node_state& (0+255),w,b
  1360  003AC0  0A03               	xorlw	3
  1361  003AC2  B4D8               	btfsc	status,2,c
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;main.c: 290: doApplicationOneSecondWork();
  1365  003AC4  EC8A  F012         	call	_doApplicationOneSecondWork	;wreg free
  1366  003AC8                     l10021:
  1367                           
  1368                           ; BSR set to: 0
  1369                           ;main.c: 292: }
  1370                           ;main.c: 294: }
  1371                           ;main.c: 297: if ( seconds > 59 ) {
  1372  003AC8  0E3B               	movlw	59
  1373  003ACA  658B               	cpfsgt	_seconds& (0+255),b
  1374  003ACC  D00B               	goto	l10037
  1375                           
  1376                           ; BSR set to: 0
  1377                           ;main.c: 299: seconds = 0;
  1378  003ACE  6B8B               	clrf	_seconds& (0+255),b
  1379                           
  1380                           ; BSR set to: 0
  1381                           ;main.c: 300: minutes++;
  1382  003AD0  2B89               	incf	_minutes& (0+255),f,b
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;main.c: 302: if ( minutes > 59 ) {
  1386  003AD2  0E3B               	movlw	59
  1387  003AD4  6589               	cpfsgt	_minutes& (0+255),b
  1388  003AD6  D002               	goto	l10033
  1389                           
  1390                           ; BSR set to: 0
  1391                           ;main.c: 303: minutes = 0;
  1392  003AD8  6B89               	clrf	_minutes& (0+255),b
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;main.c: 304: hours++;
  1396  003ADA  2B88               	incf	_hours& (0+255),f,b
  1397  003ADC                     l10033:
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;main.c: 305: }
  1401                           ;main.c: 307: if ( hours > 23 ) hours = 0;
  1402  003ADC  0E17               	movlw	23
  1403  003ADE  6588               	cpfsgt	_hours& (0+255),b
  1404  003AE0  D001               	goto	l10037
  1405                           
  1406                           ; BSR set to: 0
  1407  003AE2  6B88               	clrf	_hours& (0+255),b
  1408  003AE4                     l10037:
  1409                           
  1410                           ; BSR set to: 0
  1411                           ;main.c: 309: }
  1412                           ;main.c: 311: doWork();
  1413  003AE4  EC76  F022         	call	_doWork	;wreg free
  1414  003AE8  D79B               	goto	l151
  1415  003AEA                     __end_of_main:
  1416                           	opt stack 0
  1417                           tblptru	equ	0xFF8
  1418                           postinc0	equ	0xFEE
  1419                           wreg	equ	0xFE8
  1420                           status	equ	0xFD8
  1421                           
  1422 ;; *************** function _doWork *****************
  1423 ;; Defined at:
  1424 ;;		line 890 in file "../main.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;		None
  1427 ;; Auto vars:     Size  Location     Type
  1428 ;;		None
  1429 ;; Return value:  Size  Location     Type
  1430 ;;		None               void
  1431 ;; Registers used:
  1432 ;;		wreg, status,2, status,0
  1433 ;; Tracked objects:
  1434 ;;		On entry : F/0
  1435 ;;		On exit  : F/0
  1436 ;;		Unchanged: F/0
  1437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1438 ;;      Params:         0       0       0       0       0       0       0
  1439 ;;      Locals:         0       0       0       0       0       0       0
  1440 ;;      Temps:          0       0       0       0       0       0       0
  1441 ;;      Totals:         0       0       0       0       0       0       0
  1442 ;;Total ram usage:        0 bytes
  1443 ;; Hardware stack levels used:    1
  1444 ;; Hardware stack levels required when called:    2
  1445 ;; This function calls:
  1446 ;;		Nothing
  1447 ;; This function is called by:
  1448 ;;		_main
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           	psect	text1
  1453  0044EC                     __ptext1:
  1454                           	opt stack 0
  1455  0044EC                     _doWork:
  1456                           	opt stack 28
  1457                           
  1458                           ; BSR set to: 0
  1459                           
  1460                           ; BSR set to: 0
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;incstack = 0
  1464                           ;incstack = 0
  1465  0044EC  0012               	return	
  1466  0044EE                     __end_of_doWork:
  1467                           	opt stack 0
  1468                           tblptru	equ	0xFF8
  1469                           postinc0	equ	0xFEE
  1470                           wreg	equ	0xFE8
  1471                           status	equ	0xFD8
  1472                           
  1473 ;; *************** function _doApplicationOneSecondWork *****************
  1474 ;; Defined at:
  1475 ;;		line 595 in file "../main.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;		None
  1478 ;; Auto vars:     Size  Location     Type
  1479 ;;  i               1   32[BANK0 ] unsigned char 
  1480 ;;  ctrlreg         1   31[BANK0 ] unsigned char 
  1481 ;;  bOn             1   30[BANK0 ] enum E15660
  1482 ;; Return value:  Size  Location     Type
  1483 ;;		None               void
  1484 ;; Registers used:
  1485 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1486 ;; Tracked objects:
  1487 ;;		On entry : F/0
  1488 ;;		On exit  : F/0
  1489 ;;		Unchanged: 0/0
  1490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1491 ;;      Params:         0       0       0       0       0       0       0
  1492 ;;      Locals:         0       3       0       0       0       0       0
  1493 ;;      Temps:          0       3       0       0       0       0       0
  1494 ;;      Totals:         0       6       0       0       0       0       0
  1495 ;;Total ram usage:        6 bytes
  1496 ;; Hardware stack levels used:    1
  1497 ;; Hardware stack levels required when called:    8
  1498 ;; This function calls:
  1499 ;;		_Read_b_eep
  1500 ;;		_doActionOff
  1501 ;;		_SendInformationEvent
  1502 ;; This function is called by:
  1503 ;;		_main
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           	psect	text2
  1508  002514                     __ptext2:
  1509                           	opt stack 0
  1510  002514                     _doApplicationOneSecondWork:
  1511                           	opt stack 22
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;main.c: 597: uint8_t i;
  1515                           ;main.c: 598: uint8_t ctrlreg;
  1516                           ;main.c: 599: BOOL bOn = 0;
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;incstack = 0
  1520                           ;incstack = 0
  1521  002514  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1522                           
  1523                           ;main.c: 601: for ( i = 0; i < 8; i++ ) {
  1524  002516  6BD1               	clrf	doApplicationOneSecondWork@i& (0+255),b
  1525  002518                     l10529:
  1526                           
  1527                           ; BSR set to: 0
  1528  002518  0E07               	movlw	7
  1529  00251A  65D1               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  1530  00251C  D001               	goto	l10533
  1531  00251E  D172               	goto	l236
  1532  002520                     l10533:
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;main.c: 604: ctrlreg = Read_b_eep(0x43 + 10 + i);
  1536  002520  0E4D               	movlw	77
  1537  002522  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1538  002524  6E08               	movwf	?_Read_b_eep,c
  1539  002526  6A09               	clrf	?_Read_b_eep+1,c
  1540  002528  0E00               	movlw	0
  1541  00252A  2209               	addwfc	?_Read_b_eep+1,f,c
  1542  00252C  EC3D  F022         	call	_Read_b_eep	;wreg free
  1543  002530  0100               	movlb	0	; () banked
  1544  002532  6FD0               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;main.c: 607: if ( !( ctrlreg & 0x80 ) ) continue;
  1548  002534  AFD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  1549  002536  D164               	goto	l10617
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;main.c: 611: if ( relay_protection_timer[ i ] ) {
  1553                           
  1554                           ; BSR set to: 0
  1555  002538  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1556  00253A  0D02               	mullw	2
  1557  00253C  50F3               	movf	prodl,w,c
  1558  00253E  0F60               	addlw	low _relay_protection_timer
  1559  002540  6ED9               	movwf	fsr2l,c
  1560  002542  6ADA               	clrf	fsr2h,c
  1561  002544  50DE               	movf	postinc2,w,c
  1562  002546  10DD               	iorwf	postdec2,w,c
  1563  002548  E037               	bz	l10551
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;main.c: 613: relay_protection_timer[ i ]--;
  1567  00254A  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1568  00254C  0D02               	mullw	2
  1569  00254E  50F3               	movf	prodl,w,c
  1570  002550  0F60               	addlw	low _relay_protection_timer
  1571  002552  6ED9               	movwf	fsr2l,c
  1572  002554  6ADA               	clrf	fsr2h,c
  1573  002556  06DE               	decf	postinc2,f,c
  1574  002558  0E00               	movlw	0
  1575  00255A  5ADD               	subwfb	postdec2,f,c
  1576                           
  1577                           ;main.c: 616: if ( !relay_protection_timer[ i ] &&
  1578                           ;main.c: 617: ( Read_b_eep(0x43 + 10 + i) &
  1579                           ;main.c: 618: 0x04 ) ) {
  1580  00255C  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1581  00255E  0D02               	mullw	2
  1582  002560  50F3               	movf	prodl,w,c
  1583  002562  0F60               	addlw	low _relay_protection_timer
  1584  002564  6ED9               	movwf	fsr2l,c
  1585  002566  6ADA               	clrf	fsr2h,c
  1586  002568  50DE               	movf	postinc2,w,c
  1587  00256A  10DD               	iorwf	postdec2,w,c
  1588  00256C  E146               	bnz	l10553
  1589                           
  1590                           ; BSR set to: 0
  1591  00256E  0E4D               	movlw	77
  1592  002570  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1593  002572  6E08               	movwf	?_Read_b_eep,c
  1594  002574  6A09               	clrf	?_Read_b_eep+1,c
  1595  002576  0E00               	movlw	0
  1596  002578  2209               	addwfc	?_Read_b_eep+1,f,c
  1597  00257A  EC3D  F022         	call	_Read_b_eep	;wreg free
  1598  00257E  0100               	movlb	0	; () banked
  1599  002580  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1600  002582  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1601  002584  D03A               	goto	l10553
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;main.c: 621: doActionOff( 0, (1 << i) );
  1605  002586  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1606  00258A  0E01               	movlw	1
  1607  00258C  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1608  00258E  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1609  002590  D002               	goto	u12364
  1610  002592                     u12365:
  1611  002592  90D8               	bcf	status,0,c
  1612  002594  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1613  002596                     u12364:
  1614  002596  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1615  002598  D7FC               	goto	u12365
  1616  00259A  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1617  00259C  6E51               	movwf	?_doActionOff,c
  1618  00259E  0E00               	movlw	0
  1619  0025A0  EC8E  F01C         	call	_doActionOff
  1620                           
  1621                           ; BSR set to: 0
  1622                           ;main.c: 624: if ( ctrlreg & 0x02 ) {
  1623  0025A4  A3D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  1624  0025A6  D029               	goto	l10553
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;main.c: 625: SendInformationEvent( i, 1,
  1628                           ;main.c: 626: 2 );
  1629  0025A8  0E01               	movlw	1
  1630  0025AA  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1631  0025AC  0E02               	movlw	2
  1632  0025AE  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1633  0025B0  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1634  0025B2  EC99  F01F         	call	_SendInformationEvent
  1635  0025B6  D021               	goto	l10553
  1636  0025B8                     l10551:
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;main.c: 631: else {
  1640                           ;main.c: 633: relay_protection_timer[ i ] =
  1641                           ;main.c: 634: Read_b_eep(0x43 + 34 + i) * 256 +
  1642                           ;main.c: 635: Read_b_eep(0x43 + 35 + i);
  1643  0025B8  0E65               	movlw	101
  1644  0025BA  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1645  0025BC  6E08               	movwf	?_Read_b_eep,c
  1646  0025BE  6A09               	clrf	?_Read_b_eep+1,c
  1647  0025C0  0E00               	movlw	0
  1648  0025C2  2209               	addwfc	?_Read_b_eep+1,f,c
  1649  0025C4  EC3D  F022         	call	_Read_b_eep	;wreg free
  1650  0025C8  0100               	movlb	0	; () banked
  1651  0025CA  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1652  0025CC  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1653  0025CE  0E66               	movlw	102
  1654  0025D0  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1655  0025D2  6E08               	movwf	?_Read_b_eep,c
  1656  0025D4  6A09               	clrf	?_Read_b_eep+1,c
  1657  0025D6  0E00               	movlw	0
  1658  0025D8  2209               	addwfc	?_Read_b_eep+1,f,c
  1659  0025DA  EC3D  F022         	call	_Read_b_eep	;wreg free
  1660  0025DE  0100               	movlb	0	; () banked
  1661  0025E0  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1662  0025E2  0E00               	movlw	0
  1663  0025E4  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1664  0025E6  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1665  0025E8  0D02               	mullw	2
  1666  0025EA  50F3               	movf	prodl,w,c
  1667  0025EC  0F60               	addlw	low _relay_protection_timer
  1668  0025EE  6ED9               	movwf	fsr2l,c
  1669  0025F0  6ADA               	clrf	fsr2h,c
  1670  0025F2  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1671  0025F6  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1672  0025FA                     l10553:
  1673                           
  1674                           ; BSR set to: 0
  1675                           ;main.c: 636: }
  1676                           ;main.c: 639: if ( relay_pulse_flags & (1 << i) ) {
  1677  0025FA  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1678  0025FE  0E01               	movlw	1
  1679  002600  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1680  002602  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1681  002604  D002               	goto	u12384
  1682  002606                     u12385:
  1683  002606  90D8               	bcf	status,0,c
  1684  002608  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1685  00260A                     u12384:
  1686  00260A  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1687  00260C  D7FC               	goto	u12385
  1688  00260E  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1689  002610  158A               	andwf	_relay_pulse_flags& (0+255),w,b
  1690  002612  E101 D0F5          	bz	l10617
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;main.c: 641: if ( relay_pulse_timer[ i ] ) {
  1694  002616  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1695  002618  0D02               	mullw	2
  1696  00261A  50F3               	movf	prodl,w,c
  1697  00261C  0F70               	addlw	low _relay_pulse_timer
  1698  00261E  6ED9               	movwf	fsr2l,c
  1699  002620  6ADA               	clrf	fsr2h,c
  1700  002622  50DE               	movf	postinc2,w,c
  1701  002624  10DD               	iorwf	postdec2,w,c
  1702  002626  E101 D0CC          	bz	l10615
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;main.c: 643: relay_pulse_timer[ i ]--;
  1706  00262A  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1707  00262C  0D02               	mullw	2
  1708  00262E  50F3               	movf	prodl,w,c
  1709  002630  0F70               	addlw	low _relay_pulse_timer
  1710  002632  6ED9               	movwf	fsr2l,c
  1711  002634  6ADA               	clrf	fsr2h,c
  1712  002636  06DE               	decf	postinc2,f,c
  1713  002638  0E00               	movlw	0
  1714  00263A  5ADD               	subwfb	postdec2,f,c
  1715                           
  1716                           ;main.c: 646: if ( !relay_pulse_timer[ i ] ) {
  1717  00263C  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1718  00263E  0D02               	mullw	2
  1719  002640  50F3               	movf	prodl,w,c
  1720  002642  0F70               	addlw	low _relay_pulse_timer
  1721  002644  6ED9               	movwf	fsr2l,c
  1722  002646  6ADA               	clrf	fsr2h,c
  1723  002648  50DE               	movf	postinc2,w,c
  1724  00264A  10DD               	iorwf	postdec2,w,c
  1725  00264C  E02E               	bz	l10591
  1726  00264E  D0D8               	goto	l10617
  1727  002650                     l206:
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;main.c: 651: if ( LATBbits.LATB4 ) {
  1731  002650  A88A               	btfss	3978,4,c	;volatile
  1732  002652  D002               	goto	l207
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;main.c: 652: LATBbits.LATB4 = 0;
  1736  002654  988A               	bcf	3978,4,c	;volatile
  1737  002656  D025               	goto	L6
  1738  002658                     l207:
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;main.c: 655: LATBbits.LATB4 = 1;
  1742  002658  888A               	bsf	3978,4,c	;volatile
  1743  00265A                     l10563:
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;main.c: 656: bOn = 1;
  1747  00265A  0E01               	movlw	1
  1748  00265C  6FCF               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  1749  00265E  D033               	goto	l10593
  1750  002660                     l210:
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;main.c: 661: if ( LATBbits.LATB1 ) {
  1754  002660  A28A               	btfss	3978,1,c	;volatile
  1755  002662  D002               	goto	l211
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;main.c: 662: LATBbits.LATB1 = 0;
  1759  002664  928A               	bcf	3978,1,c	;volatile
  1760  002666  D01D               	goto	L6
  1761  002668                     l211:
  1762                           
  1763                           ; BSR set to: 0
  1764                           ;main.c: 665: LATBbits.LATB1 = 1;
  1765  002668  828A               	bsf	3978,1,c	;volatile
  1766  00266A  D7F7               	goto	l10563
  1767  00266C                     l213:
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;main.c: 671: if ( LATBbits.LATB0 ) {
  1771  00266C  A08A               	btfss	3978,0,c	;volatile
  1772  00266E  D002               	goto	l214
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;main.c: 672: LATBbits.LATB0 = 0;
  1776  002670  908A               	bcf	3978,0,c	;volatile
  1777  002672  D017               	goto	L6
  1778  002674                     l214:
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;main.c: 675: LATBbits.LATB0 = 1;
  1782  002674  808A               	bsf	3978,0,c	;volatile
  1783  002676  D7F1               	goto	l10563
  1784  002678                     l216:
  1785                           
  1786                           ; BSR set to: 0
  1787                           ;main.c: 681: if ( LATCbits.LATC7 ) {
  1788  002678  AE8B               	btfss	3979,7,c	;volatile
  1789  00267A  D002               	goto	l217
  1790                           
  1791                           ; BSR set to: 0
  1792                           ;main.c: 682: LATCbits.LATC7 = 0;
  1793  00267C  9E8B               	bcf	3979,7,c	;volatile
  1794  00267E  D011               	goto	L6
  1795  002680                     l217:
  1796                           
  1797                           ; BSR set to: 0
  1798                           ;main.c: 685: LATCbits.LATC7 = 1;
  1799  002680  8E8B               	bsf	3979,7,c	;volatile
  1800  002682  D7EB               	goto	l10563
  1801  002684                     l219:
  1802                           
  1803                           ; BSR set to: 0
  1804                           ;main.c: 691: if ( LATCbits.LATC6 ) {
  1805  002684  AC8B               	btfss	3979,6,c	;volatile
  1806  002686  D002               	goto	l220
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;main.c: 692: LATCbits.LATC6 = 0;
  1810  002688  9C8B               	bcf	3979,6,c	;volatile
  1811  00268A  D00B               	goto	L6
  1812  00268C                     l220:
  1813                           
  1814                           ; BSR set to: 0
  1815                           ;main.c: 695: LATCbits.LATC6 = 1;
  1816  00268C  8C8B               	bsf	3979,6,c	;volatile
  1817  00268E  D7E5               	goto	l10563
  1818  002690                     l222:
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;main.c: 701: if ( LATCbits.LATC5 ) {
  1822  002690  AA8B               	btfss	3979,5,c	;volatile
  1823  002692  D002               	goto	l223
  1824                           
  1825                           ; BSR set to: 0
  1826                           ;main.c: 702: LATCbits.LATC5 = 0;
  1827  002694  9A8B               	bcf	3979,5,c	;volatile
  1828  002696  D005               	goto	L6
  1829  002698                     l223:
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;main.c: 705: LATCbits.LATC5 = 1;
  1833  002698  8A8B               	bsf	3979,5,c	;volatile
  1834  00269A  D7DF               	goto	l10563
  1835  00269C                     l225:
  1836                           
  1837                           ; BSR set to: 0
  1838                           ;main.c: 711: if ( LATCbits.LATC4 ) {
  1839  00269C  A88B               	btfss	3979,4,c	;volatile
  1840  00269E  D003               	goto	l226
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;main.c: 712: LATCbits.LATC4 = 0;
  1844  0026A0  988B               	bcf	3979,4,c	;volatile
  1845  0026A2                     L6:
  1846                           
  1847                           ;main.c: 713: bOn = 0;
  1848  0026A2  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1849                           
  1850                           ;main.c: 714: } else {
  1851  0026A4  D010               	goto	l10593
  1852  0026A6                     l226:
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;main.c: 715: LATCbits.LATC4 = 1;
  1856  0026A6  888B               	bsf	3979,4,c	;volatile
  1857  0026A8  D7D8               	goto	l10563
  1858  0026AA                     l10591:
  1859                           
  1860                           ; BSR set to: 0
  1861  0026AA  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1862                           
  1863                           ; Switch size 1, requested type "speed"
  1864                           ; Number of cases is 7, Range of values is 0 to 6
  1865                           ; switch strategies available:
  1866                           ; Name         Instructions Cycles
  1867                           ; simple_byte           22    12 (average)
  1868                           ;	Chosen strategy is simple_byte
  1869  0026AC  E0D1               	bz	l206
  1870  0026AE  0A01               	xorlw	1	; case 1
  1871  0026B0  E0D7               	bz	l210
  1872  0026B2  0A03               	xorlw	3	; case 2
  1873  0026B4  E0DB               	bz	l213
  1874  0026B6  0A01               	xorlw	1	; case 3
  1875  0026B8  E0DF               	bz	l216
  1876  0026BA  0A07               	xorlw	7	; case 4
  1877  0026BC  E0E3               	bz	l219
  1878  0026BE  0A01               	xorlw	1	; case 5
  1879  0026C0  E0E7               	bz	l222
  1880  0026C2  0A03               	xorlw	3	; case 6
  1881  0026C4  E0EB               	bz	l225
  1882  0026C6                     l10593:
  1883                           
  1884                           ; BSR set to: 0
  1885                           ;main.c: 723: relay_pulse_timer[ i ] =
  1886                           ;main.c: 724: Read_b_eep(0x43 + 18 + 2*i) * 256 +
  1887                           ;main.c: 726: Read_b_eep(0x43 + 19 + 2*i);
  1888  0026C6  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1889  0026C8  0D02               	mullw	2
  1890  0026CA  0E55               	movlw	85
  1891  0026CC  24F3               	addwf	prodl,w,c
  1892  0026CE  6E08               	movwf	?_Read_b_eep,c
  1893  0026D0  0E00               	movlw	0
  1894  0026D2  20F4               	addwfc	prodh,w,c
  1895  0026D4  6E09               	movwf	?_Read_b_eep+1,c
  1896  0026D6  EC3D  F022         	call	_Read_b_eep	;wreg free
  1897  0026DA  0100               	movlb	0	; () banked
  1898  0026DC  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1899  0026DE  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1900  0026E0  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1901  0026E2  0D02               	mullw	2
  1902  0026E4  0E56               	movlw	86
  1903  0026E6  24F3               	addwf	prodl,w,c
  1904  0026E8  6E08               	movwf	?_Read_b_eep,c
  1905  0026EA  0E00               	movlw	0
  1906  0026EC  20F4               	addwfc	prodh,w,c
  1907  0026EE  6E09               	movwf	?_Read_b_eep+1,c
  1908  0026F0  EC3D  F022         	call	_Read_b_eep	;wreg free
  1909  0026F4  0100               	movlb	0	; () banked
  1910  0026F6  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1911  0026F8  0E00               	movlw	0
  1912  0026FA  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1913  0026FC  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1914  0026FE  0D02               	mullw	2
  1915  002700  50F3               	movf	prodl,w,c
  1916  002702  0F70               	addlw	low _relay_pulse_timer
  1917  002704  6ED9               	movwf	fsr2l,c
  1918  002706  6ADA               	clrf	fsr2h,c
  1919  002708  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1920  00270C  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;main.c: 729: if ( bOn ) {
  1924  002710  51CF               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  1925  002712  E044               	bz	l228
  1926                           
  1927                           ; BSR set to: 0
  1928                           ;main.c: 732: if ( Read_b_eep(0x43 + 10 + i) & 0x04 ) {
  1929  002714  0E4D               	movlw	77
  1930  002716  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1931  002718  6E08               	movwf	?_Read_b_eep,c
  1932  00271A  6A09               	clrf	?_Read_b_eep+1,c
  1933  00271C  0E00               	movlw	0
  1934  00271E  2209               	addwfc	?_Read_b_eep+1,f,c
  1935  002720  EC3D  F022         	call	_Read_b_eep	;wreg free
  1936  002724  0100               	movlb	0	; () banked
  1937  002726  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1938  002728  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1939  00272A  D025               	goto	l10601
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;main.c: 733: relay_protection_timer[ i ] =
  1943                           ;main.c: 734: Read_b_eep(0x43 + 34 + 2*i) * 256 +
  1944                           ;main.c: 735: Read_b_eep(0x43 + 35 + 2*i);
  1945  00272C  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1946  00272E  0D02               	mullw	2
  1947  002730  0E65               	movlw	101
  1948  002732  24F3               	addwf	prodl,w,c
  1949  002734  6E08               	movwf	?_Read_b_eep,c
  1950  002736  0E00               	movlw	0
  1951  002738  20F4               	addwfc	prodh,w,c
  1952  00273A  6E09               	movwf	?_Read_b_eep+1,c
  1953  00273C  EC3D  F022         	call	_Read_b_eep	;wreg free
  1954  002740  0100               	movlb	0	; () banked
  1955  002742  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1956  002744  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1957  002746  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1958  002748  0D02               	mullw	2
  1959  00274A  0E66               	movlw	102
  1960  00274C  24F3               	addwf	prodl,w,c
  1961  00274E  6E08               	movwf	?_Read_b_eep,c
  1962  002750  0E00               	movlw	0
  1963  002752  20F4               	addwfc	prodh,w,c
  1964  002754  6E09               	movwf	?_Read_b_eep+1,c
  1965  002756  EC3D  F022         	call	_Read_b_eep	;wreg free
  1966  00275A  0100               	movlb	0	; () banked
  1967  00275C  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1968  00275E  0E00               	movlw	0
  1969  002760  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1970  002762  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1971  002764  0D02               	mullw	2
  1972  002766  50F3               	movf	prodl,w,c
  1973  002768  0F60               	addlw	low _relay_protection_timer
  1974  00276A  6ED9               	movwf	fsr2l,c
  1975  00276C  6ADA               	clrf	fsr2h,c
  1976  00276E  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1977  002772  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1978  002776                     l10601:
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;main.c: 736: }
  1982                           ;main.c: 738: if ( ctrlreg & 0x08 ) {
  1983  002776  A7D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  1984  002778  D007               	goto	l10605
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;main.c: 739: SendInformationEvent( i, 20,
  1988                           ;main.c: 740: 3 );
  1989  00277A  0E14               	movlw	20
  1990  00277C  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1991  00277E  0E03               	movlw	3
  1992  002780  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1993  002782  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1994  002784  EC99  F01F         	call	_SendInformationEvent
  1995  002788                     l10605:
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;main.c: 741: }
  1999                           ;main.c: 743: if ( ctrlreg & 0x20 ) {
  2000  002788  ABD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2001  00278A  D03A               	goto	l10617
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;main.c: 744: SendInformationEvent( i, 20,
  2005                           ;main.c: 745: 25 );
  2006  00278C  0E14               	movlw	20
  2007  00278E  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2008  002790  0E19               	movlw	25
  2009  002792  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2010  002794  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2011  002796  EC99  F01F         	call	_SendInformationEvent
  2012  00279A  D032               	goto	l10617
  2013  00279C                     l228:
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;main.c: 750: if ( ctrlreg & 0x10 ) {
  2017  00279C  A9D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2018  00279E  D007               	goto	l10611
  2019                           
  2020                           ; BSR set to: 0
  2021                           ;main.c: 751: SendInformationEvent( i, 20,
  2022                           ;main.c: 752: 4 );
  2023  0027A0  0E14               	movlw	20
  2024  0027A2  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2025  0027A4  0E04               	movlw	4
  2026  0027A6  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2027  0027A8  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2028  0027AA  EC99  F01F         	call	_SendInformationEvent
  2029  0027AE                     l10611:
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;main.c: 753: }
  2033                           ;main.c: 755: if (ctrlreg & 0x40) {
  2034  0027AE  ADD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),6,b
  2035  0027B0  D027               	goto	l10617
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;main.c: 756: SendInformationEvent( i, 20,
  2039                           ;main.c: 757: 24 );
  2040  0027B2  0E14               	movlw	20
  2041  0027B4  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2042  0027B6  0E18               	movlw	24
  2043  0027B8  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2044  0027BA  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2045  0027BC  EC99  F01F         	call	_SendInformationEvent
  2046  0027C0  D01F               	goto	l10617
  2047  0027C2                     l10615:
  2048                           
  2049                           ; BSR set to: 0
  2050                           ;main.c: 764: else {
  2051                           ;main.c: 766: relay_pulse_timer[ 0 ] =
  2052                           ;main.c: 767: Read_b_eep(0x43 + 18 + 2*i) * 256 +
  2053                           ;main.c: 768: Read_b_eep(0x43 + 19 + 2*i);
  2054  0027C2  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2055  0027C4  0D02               	mullw	2
  2056  0027C6  0E56               	movlw	86
  2057  0027C8  24F3               	addwf	prodl,w,c
  2058  0027CA  6E08               	movwf	?_Read_b_eep,c
  2059  0027CC  0E00               	movlw	0
  2060  0027CE  20F4               	addwfc	prodh,w,c
  2061  0027D0  6E09               	movwf	?_Read_b_eep+1,c
  2062  0027D2  EC3D  F022         	call	_Read_b_eep	;wreg free
  2063  0027D6  0100               	movlb	0	; () banked
  2064  0027D8  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2065  0027DA  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2066  0027DC  0D02               	mullw	2
  2067  0027DE  0E55               	movlw	85
  2068  0027E0  24F3               	addwf	prodl,w,c
  2069  0027E2  6E08               	movwf	?_Read_b_eep,c
  2070  0027E4  0E00               	movlw	0
  2071  0027E6  20F4               	addwfc	prodh,w,c
  2072  0027E8  6E09               	movwf	?_Read_b_eep+1,c
  2073  0027EA  EC3D  F022         	call	_Read_b_eep	;wreg free
  2074  0027EE  0100               	movlb	0	; () banked
  2075  0027F0  6FCE               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2076  0027F2  6BCD               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2077  0027F4  51CC               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2078  0027F6  25CD               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2079  0027F8  6F70               	movwf	_relay_pulse_timer& (0+255),b
  2080  0027FA  0E00               	movlw	0
  2081  0027FC  21CE               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2082  0027FE  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  2083  002800                     l10617:
  2084                           
  2085                           ; BSR set to: 0
  2086  002800  2BD1               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  2087  002802  D68A               	goto	l10529
  2088  002804                     l236:
  2089                           
  2090                           ; BSR set to: 0
  2091  002804  0012               	return	
  2092  002806                     __end_of_doApplicationOneSecondWork:
  2093                           	opt stack 0
  2094                           tblptru	equ	0xFF8
  2095                           prodh	equ	0xFF4
  2096                           prodl	equ	0xFF3
  2097                           postinc0	equ	0xFEE
  2098                           wreg	equ	0xFE8
  2099                           postinc2	equ	0xFDE
  2100                           postdec2	equ	0xFDD
  2101                           fsr2h	equ	0xFDA
  2102                           fsr2l	equ	0xFD9
  2103                           status	equ	0xFD8
  2104                           
  2105 ;; *************** function _vscp_doOneSecondWork *****************
  2106 ;; Defined at:
  2107 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;		None
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;		None
  2112 ;; Return value:  Size  Location     Type
  2113 ;;		None               void
  2114 ;; Registers used:
  2115 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : F/0
  2118 ;;		On exit  : F/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2121 ;;      Params:         0       0       0       0       0       0       0
  2122 ;;      Locals:         0       0       0       0       0       0       0
  2123 ;;      Temps:          1       0       0       0       0       0       0
  2124 ;;      Totals:         1       0       0       0       0       0       0
  2125 ;;Total ram usage:        1 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:    8
  2128 ;; This function calls:
  2129 ;;		_vscp_getZone
  2130 ;;		_vscp_getSubzone
  2131 ;;		_vscp_sendHeartBeat
  2132 ;; This function is called by:
  2133 ;;		_main
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           	psect	text3
  2138  003F9E                     __ptext3:
  2139                           	opt stack 0
  2140  003F9E                     _vscp_doOneSecondWork:
  2141                           	opt stack 22
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;vscp_firmware.c: 526: ++vscp_second;
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;incstack = 0
  2148                           ;incstack = 0
  2149  003F9E  2B95               	incf	_vscp_second& (0+255),f,b
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  2153  003FA0  0E3B               	movlw	59
  2154  003FA2  6595               	cpfsgt	_vscp_second& (0+255),b
  2155  003FA4  D00D               	goto	l8591
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;vscp_firmware.c: 529: vscp_second = 0;
  2159  003FA6  6B95               	clrf	_vscp_second& (0+255),b
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;vscp_firmware.c: 530: vscp_minute++;
  2163  003FA8  2B90               	incf	_vscp_minute& (0+255),f,b
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  2167  003FAA  5192               	movf	_vscp_node_state& (0+255),w,b
  2168  003FAC  0A03               	xorlw	3
  2169  003FAE  E108               	bnz	l8591
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  2173                           ;vscp_firmware.c: 535: vscp_getSubzone());
  2174  003FB0  EC4F  F022         	call	_vscp_getSubzone	;wreg free
  2175  003FB4  0100               	movlb	0	; () banked
  2176  003FB6  6FC5               	movwf	?_vscp_sendHeartBeat& (0+255),b
  2177  003FB8  EC54  F022         	call	_vscp_getZone	;wreg free
  2178  003FBC  ECF4  F020         	call	_vscp_sendHeartBeat
  2179  003FC0                     l8591:
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;vscp_firmware.c: 536: }
  2183                           ;vscp_firmware.c: 537: }
  2184                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  2185  003FC0  0E3B               	movlw	59
  2186  003FC2  6590               	cpfsgt	_vscp_minute& (0+255),b
  2187  003FC4  D002               	goto	l8597
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;vscp_firmware.c: 540: vscp_minute = 0;
  2191  003FC6  6B90               	clrf	_vscp_minute& (0+255),b
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;vscp_firmware.c: 541: vscp_hour++;
  2195  003FC8  2B8E               	incf	_vscp_hour& (0+255),f,b
  2196  003FCA                     l8597:
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;vscp_firmware.c: 542: }
  2200                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  2201  003FCA  0E17               	movlw	23
  2202  003FCC  658E               	cpfsgt	_vscp_hour& (0+255),b
  2203  003FCE  D001               	goto	l8601
  2204                           
  2205                           ; BSR set to: 0
  2206  003FD0  6B8E               	clrf	_vscp_hour& (0+255),b
  2207  003FD2                     l8601:
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  2211  003FD2  5192               	movf	_vscp_node_state& (0+255),w,b
  2212  003FD4  0A03               	xorlw	3
  2213  003FD6  E109               	bnz	l1122
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  2217  003FD8  2B8D               	incf	_vscp_guid_reset& (0+255),f,b
  2218                           
  2219                           ; BSR set to: 0
  2220                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  2221  003FDA  C08D  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  2222  003FDE  0E0F               	movlw	15
  2223  003FE0  164D               	andwf	??_vscp_doOneSecondWork,f,c
  2224  003FE2  0E02               	movlw	2
  2225  003FE4  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  2226  003FE6  B0D8               	btfsc	status,0,c
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  2230  003FE8  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  2231  003FEA                     l1122:
  2232                           
  2233                           ; BSR set to: 0
  2234  003FEA  0012               	return	
  2235  003FEC                     __end_of_vscp_doOneSecondWork:
  2236                           	opt stack 0
  2237                           tblptru	equ	0xFF8
  2238                           prodh	equ	0xFF4
  2239                           prodl	equ	0xFF3
  2240                           postinc0	equ	0xFEE
  2241                           wreg	equ	0xFE8
  2242                           postinc2	equ	0xFDE
  2243                           postdec2	equ	0xFDD
  2244                           fsr2h	equ	0xFDA
  2245                           fsr2l	equ	0xFD9
  2246                           status	equ	0xFD8
  2247                           
  2248 ;; *************** function _vscp_sendHeartBeat *****************
  2249 ;; Defined at:
  2250 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;  zone            1    wreg     unsigned char 
  2253 ;;  subzone         1   20[BANK0 ] unsigned char 
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;  zone            1   75[COMRAM] unsigned char 
  2256 ;; Return value:  Size  Location     Type
  2257 ;;		None               void
  2258 ;; Registers used:
  2259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : F/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2265 ;;      Params:         0       1       0       0       0       0       0
  2266 ;;      Locals:         1       0       0       0       0       0       0
  2267 ;;      Temps:          0       0       0       0       0       0       0
  2268 ;;      Totals:         1       1       0       0       0       0       0
  2269 ;;Total ram usage:        2 bytes
  2270 ;; Hardware stack levels used:    1
  2271 ;; Hardware stack levels required when called:    7
  2272 ;; This function calls:
  2273 ;;		_vscp_sendEvent
  2274 ;; This function is called by:
  2275 ;;		_vscp_doOneSecondWork
  2276 ;; This function uses a non-reentrant model
  2277 ;;
  2278                           
  2279                           	psect	text4
  2280  0041E8                     __ptext4:
  2281                           	opt stack 0
  2282  0041E8                     _vscp_sendHeartBeat:
  2283                           	opt stack 22
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;incstack = 0
  2287                           ;incstack = 0
  2288                           ;vscp_sendHeartBeat@zone stored from wreg
  2289  0041E8  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  2290                           
  2291                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  2292  0041EC  0E83               	movlw	131
  2293  0041EE  0100               	movlb	0	; () banked
  2294  0041F0  6FA4               	movwf	_vscp_omsg& (0+255),b
  2295                           
  2296                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  2297  0041F2  0E07               	movlw	7
  2298  0041F4  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  2299                           
  2300                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  2301  0041F6  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  2302  0041F8  0E14               	movlw	20
  2303  0041FA  6FA6               	movwf	(_vscp_omsg+2)& (0+255),b
  2304                           
  2305                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  2306  0041FC  0E09               	movlw	9
  2307  0041FE  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  2311  004200  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  2315  004202  C04C  F0AA         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  2319  004206  C0C5  F0AB         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;vscp_firmware.c: 388: vscp_sendEvent();
  2323  00420A  EF2D  F021         	goto	_vscp_sendEvent	;wreg free
  2324  00420E                     __end_of_vscp_sendHeartBeat:
  2325                           	opt stack 0
  2326                           tblptru	equ	0xFF8
  2327                           prodh	equ	0xFF4
  2328                           prodl	equ	0xFF3
  2329                           postinc0	equ	0xFEE
  2330                           wreg	equ	0xFE8
  2331                           postinc2	equ	0xFDE
  2332                           postdec2	equ	0xFDD
  2333                           fsr2h	equ	0xFDA
  2334                           fsr2l	equ	0xFD9
  2335                           status	equ	0xFD8
  2336                           
  2337 ;; *************** function _vscp_getSubzone *****************
  2338 ;; Defined at:
  2339 ;;		line 879 in file "../main.c"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;		None
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;		None
  2344 ;; Return value:  Size  Location     Type
  2345 ;;                  1    wreg      unsigned char 
  2346 ;; Registers used:
  2347 ;;		wreg, status,2, cstack
  2348 ;; Tracked objects:
  2349 ;;		On entry : F/0
  2350 ;;		On exit  : 0/0
  2351 ;;		Unchanged: 0/0
  2352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2353 ;;      Params:         0       0       0       0       0       0       0
  2354 ;;      Locals:         0       0       0       0       0       0       0
  2355 ;;      Temps:          0       0       0       0       0       0       0
  2356 ;;      Totals:         0       0       0       0       0       0       0
  2357 ;;Total ram usage:        0 bytes
  2358 ;; Hardware stack levels used:    1
  2359 ;; Hardware stack levels required when called:    3
  2360 ;; This function calls:
  2361 ;;		_Read_b_eep
  2362 ;; This function is called by:
  2363 ;;		_vscp_doOneSecondWork
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           	psect	text5
  2368  00449E                     __ptext5:
  2369                           	opt stack 0
  2370  00449E                     _vscp_getSubzone:
  2371                           	opt stack 26
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;main.c: 880: return Read_b_eep(0x43 + 1);
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;incstack = 0
  2378                           ;incstack = 0
  2379  00449E  6A09               	clrf	?_Read_b_eep+1,c
  2380  0044A0  0E44               	movlw	68
  2381  0044A2  6E08               	movwf	?_Read_b_eep,c
  2382  0044A4  EF3D  F022         	goto	_Read_b_eep	;wreg free
  2383  0044A8                     __end_of_vscp_getSubzone:
  2384                           	opt stack 0
  2385                           tblptru	equ	0xFF8
  2386                           prodh	equ	0xFF4
  2387                           prodl	equ	0xFF3
  2388                           postinc0	equ	0xFEE
  2389                           wreg	equ	0xFE8
  2390                           postinc2	equ	0xFDE
  2391                           postdec2	equ	0xFDD
  2392                           fsr2h	equ	0xFDA
  2393                           fsr2l	equ	0xFD9
  2394                           status	equ	0xFD8
  2395                           
  2396 ;; *************** function _vscp_getZone *****************
  2397 ;; Defined at:
  2398 ;;		line 870 in file "../main.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;		None
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;		None
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  1    wreg      unsigned char 
  2405 ;; Registers used:
  2406 ;;		wreg, status,2, cstack
  2407 ;; Tracked objects:
  2408 ;;		On entry : F/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2412 ;;      Params:         0       0       0       0       0       0       0
  2413 ;;      Locals:         0       0       0       0       0       0       0
  2414 ;;      Temps:          0       0       0       0       0       0       0
  2415 ;;      Totals:         0       0       0       0       0       0       0
  2416 ;;Total ram usage:        0 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; Hardware stack levels required when called:    3
  2419 ;; This function calls:
  2420 ;;		_Read_b_eep
  2421 ;; This function is called by:
  2422 ;;		_vscp_doOneSecondWork
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           	psect	text6
  2427  0044A8                     __ptext6:
  2428                           	opt stack 0
  2429  0044A8                     _vscp_getZone:
  2430                           	opt stack 26
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;main.c: 871: return Read_b_eep(0x43 + 0);
  2434                           
  2435                           ;incstack = 0
  2436                           ;incstack = 0
  2437  0044A8  6A09               	clrf	?_Read_b_eep+1,c
  2438  0044AA  0E43               	movlw	67
  2439  0044AC  6E08               	movwf	?_Read_b_eep,c
  2440  0044AE  EF3D  F022         	goto	_Read_b_eep	;wreg free
  2441  0044B2                     __end_of_vscp_getZone:
  2442                           	opt stack 0
  2443                           tblptru	equ	0xFF8
  2444                           prodh	equ	0xFF4
  2445                           prodl	equ	0xFF3
  2446                           postinc0	equ	0xFEE
  2447                           wreg	equ	0xFE8
  2448                           postinc2	equ	0xFDE
  2449                           postdec2	equ	0xFDD
  2450                           fsr2h	equ	0xFDA
  2451                           fsr2l	equ	0xFD9
  2452                           status	equ	0xFD8
  2453                           
  2454 ;; *************** function _vscp_error *****************
  2455 ;; Defined at:
  2456 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;		None
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;		None
  2461 ;; Return value:  Size  Location     Type
  2462 ;;		None               void
  2463 ;; Registers used:
  2464 ;;		None
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2470 ;;      Params:         0       0       0       0       0       0       0
  2471 ;;      Locals:         0       0       0       0       0       0       0
  2472 ;;      Temps:          0       0       0       0       0       0       0
  2473 ;;      Totals:         0       0       0       0       0       0       0
  2474 ;;Total ram usage:        0 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:    2
  2477 ;; This function calls:
  2478 ;;		Nothing
  2479 ;; This function is called by:
  2480 ;;		_main
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           	psect	text7
  2485  0044E8                     __ptext7:
  2486                           	opt stack 0
  2487  0044E8                     _vscp_error:
  2488                           	opt stack 28
  2489                           
  2490                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  2491                           
  2492                           ;incstack = 0
  2493                           ;incstack = 0
  2494  0044E8  6A56               	clrf	_vscp_initledfunc,c
  2495  0044EA  0012               	return	
  2496  0044EC                     __end_of_vscp_error:
  2497                           	opt stack 0
  2498                           tblptru	equ	0xFF8
  2499                           prodh	equ	0xFF4
  2500                           prodl	equ	0xFF3
  2501                           postinc0	equ	0xFEE
  2502                           wreg	equ	0xFE8
  2503                           postinc2	equ	0xFDE
  2504                           postdec2	equ	0xFDD
  2505                           fsr2h	equ	0xFDA
  2506                           fsr2l	equ	0xFD9
  2507                           status	equ	0xFD8
  2508                           
  2509 ;; *************** function _doDM *****************
  2510 ;; Defined at:
  2511 ;;		line 1635 in file "../main.c"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;		None
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;  class_mask      2   33[BANK0 ] unsigned short 
  2516 ;;  class_filter    2   31[BANK0 ] unsigned short 
  2517 ;;  i               1   44[BANK0 ] unsigned char 
  2518 ;;  dmflags         1   43[BANK0 ] unsigned char 
  2519 ;;  type_mask       1   36[BANK0 ] unsigned char 
  2520 ;;  type_filter     1   35[BANK0 ] unsigned char 
  2521 ;; Return value:  Size  Location     Type
  2522 ;;		None               void
  2523 ;; Registers used:
  2524 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2525 ;; Tracked objects:
  2526 ;;		On entry : 0/0
  2527 ;;		On exit  : F/0
  2528 ;;		Unchanged: 0/0
  2529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2530 ;;      Params:         0       0       0       0       0       0       0
  2531 ;;      Locals:         0      14       0       0       0       0       0
  2532 ;;      Temps:          0       3       0       0       0       0       0
  2533 ;;      Totals:         0      17       0       0       0       0       0
  2534 ;;Total ram usage:       17 bytes
  2535 ;; Hardware stack levels used:    1
  2536 ;; Hardware stack levels required when called:    8
  2537 ;; This function calls:
  2538 ;;		_Read_b_eep
  2539 ;;		_doActionOff
  2540 ;;		_doActionOn
  2541 ;;		_doActionPulse
  2542 ;;		_doActionStatus
  2543 ;;		_doActionDisable
  2544 ;;		_doActionToggle
  2545 ;; This function is called by:
  2546 ;;		_main
  2547 ;; This function uses a non-reentrant model
  2548 ;;
  2549                           
  2550                           	psect	text8
  2551  002216                     __ptext8:
  2552                           	opt stack 0
  2553  002216                     _doDM:
  2554                           	opt stack 22
  2555                           
  2556                           ;main.c: 1636: unsigned char i;
  2557                           ;main.c: 1637: unsigned char dmflags;
  2558                           ;main.c: 1638: unsigned short class_filter;
  2559                           ;main.c: 1639: unsigned short class_mask;
  2560                           ;main.c: 1640: unsigned char type_filter;
  2561                           ;main.c: 1641: unsigned char type_mask;
  2562                           ;main.c: 1644: if ( 0 == vscp_imsg.vscp_class ) return;
  2563                           
  2564                           ;incstack = 0
  2565                           ;incstack = 0
  2566  002216  0100               	movlb	0	; () banked
  2567  002218  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  2568  00221A  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2569  00221C  E101 D179          	bz	l420
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;main.c: 1646: for (i = 0; i < 7; i++) {
  2573  002220  6BDD               	clrf	doDM@i& (0+255),b
  2574  002222                     l10477:
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;main.c: 1649: dmflags = Read_b_eep(0x43 + 72 + 1 + (8 * i));
  2578  002222  51DD               	movf	doDM@i& (0+255),w,b
  2579  002224  6FCD               	movwf	??_doDM& (0+255),b
  2580  002226  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2581  002228  90D8               	bcf	status,0,c
  2582  00222A  37CD               	rlcf	??_doDM& (0+255),f,b
  2583  00222C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2584  00222E  90D8               	bcf	status,0,c
  2585  002230  37CD               	rlcf	??_doDM& (0+255),f,b
  2586  002232  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2587  002234  90D8               	bcf	status,0,c
  2588  002236  37CD               	rlcf	??_doDM& (0+255),f,b
  2589  002238  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2590  00223A  0E8C               	movlw	140
  2591  00223C  25CD               	addwf	??_doDM& (0+255),w,b
  2592  00223E  6E08               	movwf	?_Read_b_eep,c
  2593  002240  0E00               	movlw	0
  2594  002242  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2595  002244  6E09               	movwf	?_Read_b_eep+1,c
  2596  002246  EC3D  F022         	call	_Read_b_eep	;wreg free
  2597  00224A  0100               	movlb	0	; () banked
  2598  00224C  6FDC               	movwf	doDM@dmflags& (0+255),b
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;main.c: 1652: if ( dmflags & 0x80 ) {
  2602  00224E  AFDC               	btfss	doDM@dmflags& (0+255),7,b
  2603  002250  D15B               	goto	l10523
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;main.c: 1655: if ( ( dmflags & 0x40 ) &&
  2607                           ;main.c: 1656: ( vscp_imsg.oaddr != Read_b_eep(0x43 + 72 + (8 * i)) ) ) {
  2608  002252  ADDC               	btfss	doDM@dmflags& (0+255),6,b
  2609  002254  D018               	goto	l10487
  2610                           
  2611                           ; BSR set to: 0
  2612  002256  51DD               	movf	doDM@i& (0+255),w,b
  2613  002258  6FCD               	movwf	??_doDM& (0+255),b
  2614  00225A  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2615  00225C  90D8               	bcf	status,0,c
  2616  00225E  37CD               	rlcf	??_doDM& (0+255),f,b
  2617  002260  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2618  002262  90D8               	bcf	status,0,c
  2619  002264  37CD               	rlcf	??_doDM& (0+255),f,b
  2620  002266  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2621  002268  90D8               	bcf	status,0,c
  2622  00226A  37CD               	rlcf	??_doDM& (0+255),f,b
  2623  00226C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2624  00226E  0E8B               	movlw	139
  2625  002270  25CD               	addwf	??_doDM& (0+255),w,b
  2626  002272  6E08               	movwf	?_Read_b_eep,c
  2627  002274  0E00               	movlw	0
  2628  002276  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2629  002278  6E09               	movwf	?_Read_b_eep+1,c
  2630  00227A  EC3D  F022         	call	_Read_b_eep	;wreg free
  2631  00227E  0100               	movlb	0	; () banked
  2632  002280  199B               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2633  002282  E001 D141          	bnz	l10523
  2634  002286                     l10487:
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;main.c: 1658: }
  2638                           ;main.c: 1682: class_filter = ( dmflags & 0x01)*256 +
  2639                           ;main.c: 1683: Read_b_eep(0x43 + 72 + (8 * i) + 3);
  2640  002286  51DD               	movf	doDM@i& (0+255),w,b
  2641  002288  0D08               	mullw	8
  2642  00228A  0E8E               	movlw	142
  2643  00228C  24F3               	addwf	prodl,w,c
  2644  00228E  6E08               	movwf	?_Read_b_eep,c
  2645  002290  0E00               	movlw	0
  2646  002292  20F4               	addwfc	prodh,w,c
  2647  002294  6E09               	movwf	?_Read_b_eep+1,c
  2648  002296  EC3D  F022         	call	_Read_b_eep	;wreg free
  2649  00229A  0100               	movlb	0	; () banked
  2650  00229C  6FCD               	movwf	??_doDM& (0+255),b
  2651  00229E  51DC               	movf	doDM@dmflags& (0+255),w,b
  2652  0022A0  0B01               	andlw	1
  2653  0022A2  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2654  0022A4  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2655  0022A6  51CD               	movf	??_doDM& (0+255),w,b
  2656  0022A8  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2657  0022AA  6FD0               	movwf	doDM@class_filter& (0+255),b
  2658  0022AC  0E00               	movlw	0
  2659  0022AE  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2660  0022B0  6FD1               	movwf	(doDM@class_filter+1)& (0+255),b
  2661                           
  2662                           ;main.c: 1687: class_mask = ( dmflags & 0x02)*256 +
  2663                           ;main.c: 1688: Read_b_eep(0x43 + 72 + (8 * i) + 2);
  2664  0022B2  51DD               	movf	doDM@i& (0+255),w,b
  2665  0022B4  0D08               	mullw	8
  2666  0022B6  0E8D               	movlw	141
  2667  0022B8  24F3               	addwf	prodl,w,c
  2668  0022BA  6E08               	movwf	?_Read_b_eep,c
  2669  0022BC  0E00               	movlw	0
  2670  0022BE  20F4               	addwfc	prodh,w,c
  2671  0022C0  6E09               	movwf	?_Read_b_eep+1,c
  2672  0022C2  EC3D  F022         	call	_Read_b_eep	;wreg free
  2673  0022C6  0100               	movlb	0	; () banked
  2674  0022C8  6FCD               	movwf	??_doDM& (0+255),b
  2675  0022CA  51DC               	movf	doDM@dmflags& (0+255),w,b
  2676  0022CC  0B02               	andlw	2
  2677  0022CE  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2678  0022D0  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2679  0022D2  51CD               	movf	??_doDM& (0+255),w,b
  2680  0022D4  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2681  0022D6  6FD2               	movwf	doDM@class_mask& (0+255),b
  2682  0022D8  0E00               	movlw	0
  2683  0022DA  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2684  0022DC  6FD3               	movwf	(doDM@class_mask+1)& (0+255),b
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;main.c: 1692: type_filter = Read_b_eep(0x43 + 72 + (8 * i) + 5);
  2688  0022DE  51DD               	movf	doDM@i& (0+255),w,b
  2689  0022E0  6FCD               	movwf	??_doDM& (0+255),b
  2690  0022E2  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2691  0022E4  90D8               	bcf	status,0,c
  2692  0022E6  37CD               	rlcf	??_doDM& (0+255),f,b
  2693  0022E8  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2694  0022EA  90D8               	bcf	status,0,c
  2695  0022EC  37CD               	rlcf	??_doDM& (0+255),f,b
  2696  0022EE  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2697  0022F0  90D8               	bcf	status,0,c
  2698  0022F2  37CD               	rlcf	??_doDM& (0+255),f,b
  2699  0022F4  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2700  0022F6  0E90               	movlw	144
  2701  0022F8  25CD               	addwf	??_doDM& (0+255),w,b
  2702  0022FA  6E08               	movwf	?_Read_b_eep,c
  2703  0022FC  0E00               	movlw	0
  2704  0022FE  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2705  002300  6E09               	movwf	?_Read_b_eep+1,c
  2706  002302  EC3D  F022         	call	_Read_b_eep	;wreg free
  2707  002306  0100               	movlb	0	; () banked
  2708  002308  6FD4               	movwf	doDM@type_filter& (0+255),b
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;main.c: 1696: type_mask = Read_b_eep(0x43 + 72 + (8 * i) + 4);
  2712  00230A  51DD               	movf	doDM@i& (0+255),w,b
  2713  00230C  6FCD               	movwf	??_doDM& (0+255),b
  2714  00230E  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2715  002310  90D8               	bcf	status,0,c
  2716  002312  37CD               	rlcf	??_doDM& (0+255),f,b
  2717  002314  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2718  002316  90D8               	bcf	status,0,c
  2719  002318  37CD               	rlcf	??_doDM& (0+255),f,b
  2720  00231A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2721  00231C  90D8               	bcf	status,0,c
  2722  00231E  37CD               	rlcf	??_doDM& (0+255),f,b
  2723  002320  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2724  002322  0E8F               	movlw	143
  2725  002324  25CD               	addwf	??_doDM& (0+255),w,b
  2726  002326  6E08               	movwf	?_Read_b_eep,c
  2727  002328  0E00               	movlw	0
  2728  00232A  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2729  00232C  6E09               	movwf	?_Read_b_eep+1,c
  2730  00232E  EC3D  F022         	call	_Read_b_eep	;wreg free
  2731  002332  0100               	movlb	0	; () banked
  2732  002334  6FD5               	movwf	doDM@type_mask& (0+255),b
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;main.c: 1701: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2736                           ;main.c: 1702: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2737  002336  EE20  F098         	lfsr	2,_vscp_imsg+2
  2738  00233A  CFDE F0CD          	movff	postinc2,??_doDM
  2739  00233E  CFDD F0CE          	movff	postdec2,??_doDM+1
  2740  002342  51D0               	movf	doDM@class_filter& (0+255),w,b
  2741  002344  1BCD               	xorwf	??_doDM& (0+255),f,b
  2742  002346  51D1               	movf	(doDM@class_filter+1)& (0+255),w,b
  2743  002348  1BCE               	xorwf	(??_doDM+1)& (0+255),f,b
  2744  00234A  51D2               	movf	doDM@class_mask& (0+255),w,b
  2745  00234C  17CD               	andwf	??_doDM& (0+255),f,b
  2746  00234E  51D3               	movf	(doDM@class_mask+1)& (0+255),w,b
  2747  002350  17CE               	andwf	(??_doDM+1)& (0+255),f,b
  2748  002352  51CE               	movf	(??_doDM+1)& (0+255),w,b
  2749  002354  11CD               	iorwf	??_doDM& (0+255),w,b
  2750  002356  E001 D0D7          	bnz	l10523
  2751                           
  2752                           ; BSR set to: 0
  2753  00235A  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  2754  00235C  19D4               	xorwf	doDM@type_filter& (0+255),w,b
  2755  00235E  15D5               	andwf	doDM@type_mask& (0+255),w,b
  2756  002360  E101 D0AF          	bz	l10521
  2757  002364  D0D1               	goto	l10523
  2758  002366                     l10499:
  2759                           
  2760                           ;main.c: 1708: doActionOn( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2761  002366  0100               	movlb	0	; () banked
  2762  002368  51DD               	movf	doDM@i& (0+255),w,b
  2763  00236A  6FCD               	movwf	??_doDM& (0+255),b
  2764  00236C  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2765  00236E  90D8               	bcf	status,0,c
  2766  002370  37CD               	rlcf	??_doDM& (0+255),f,b
  2767  002372  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2768  002374  90D8               	bcf	status,0,c
  2769  002376  37CD               	rlcf	??_doDM& (0+255),f,b
  2770  002378  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2771  00237A  90D8               	bcf	status,0,c
  2772  00237C  37CD               	rlcf	??_doDM& (0+255),f,b
  2773  00237E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2774  002380  0E92               	movlw	146
  2775  002382  25CD               	addwf	??_doDM& (0+255),w,b
  2776  002384  6E08               	movwf	?_Read_b_eep,c
  2777  002386  0E00               	movlw	0
  2778  002388  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2779  00238A  6E09               	movwf	?_Read_b_eep+1,c
  2780  00238C  EC3D  F022         	call	_Read_b_eep	;wreg free
  2781  002390  0100               	movlb	0	; () banked
  2782  002392  6FD6               	movwf	_doDM$2152& (0+255),b
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;main.c: 1708: doActionOn( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2786  002394  C0D6  F051         	movff	_doDM$2152,?_doActionOn
  2787  002398  51DC               	movf	doDM@dmflags& (0+255),w,b
  2788  00239A  EC03  F014         	call	_doActionOn
  2789                           
  2790                           ;main.c: 1709: break;
  2791  00239E  D0B4               	goto	l10523
  2792  0023A0                     l10503:
  2793                           
  2794                           ;main.c: 1712: doActionOff( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2795  0023A0  0100               	movlb	0	; () banked
  2796  0023A2  51DD               	movf	doDM@i& (0+255),w,b
  2797  0023A4  6FCD               	movwf	??_doDM& (0+255),b
  2798  0023A6  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2799  0023A8  90D8               	bcf	status,0,c
  2800  0023AA  37CD               	rlcf	??_doDM& (0+255),f,b
  2801  0023AC  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2802  0023AE  90D8               	bcf	status,0,c
  2803  0023B0  37CD               	rlcf	??_doDM& (0+255),f,b
  2804  0023B2  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2805  0023B4  90D8               	bcf	status,0,c
  2806  0023B6  37CD               	rlcf	??_doDM& (0+255),f,b
  2807  0023B8  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2808  0023BA  0E92               	movlw	146
  2809  0023BC  25CD               	addwf	??_doDM& (0+255),w,b
  2810  0023BE  6E08               	movwf	?_Read_b_eep,c
  2811  0023C0  0E00               	movlw	0
  2812  0023C2  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2813  0023C4  6E09               	movwf	?_Read_b_eep+1,c
  2814  0023C6  EC3D  F022         	call	_Read_b_eep	;wreg free
  2815  0023CA  0100               	movlb	0	; () banked
  2816  0023CC  6FD7               	movwf	_doDM$2153& (0+255),b
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;main.c: 1712: doActionOff( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2820  0023CE  C0D7  F051         	movff	_doDM$2153,?_doActionOff
  2821  0023D2  51DC               	movf	doDM@dmflags& (0+255),w,b
  2822  0023D4  EC8E  F01C         	call	_doActionOff
  2823                           
  2824                           ;main.c: 1713: break;
  2825  0023D8  D097               	goto	l10523
  2826  0023DA                     l10507:
  2827                           
  2828                           ;main.c: 1716: doActionPulse( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2829  0023DA  0100               	movlb	0	; () banked
  2830  0023DC  51DD               	movf	doDM@i& (0+255),w,b
  2831  0023DE  6FCD               	movwf	??_doDM& (0+255),b
  2832  0023E0  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2833  0023E2  90D8               	bcf	status,0,c
  2834  0023E4  37CD               	rlcf	??_doDM& (0+255),f,b
  2835  0023E6  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2836  0023E8  90D8               	bcf	status,0,c
  2837  0023EA  37CD               	rlcf	??_doDM& (0+255),f,b
  2838  0023EC  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2839  0023EE  90D8               	bcf	status,0,c
  2840  0023F0  37CD               	rlcf	??_doDM& (0+255),f,b
  2841  0023F2  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2842  0023F4  0E92               	movlw	146
  2843  0023F6  25CD               	addwf	??_doDM& (0+255),w,b
  2844  0023F8  6E08               	movwf	?_Read_b_eep,c
  2845  0023FA  0E00               	movlw	0
  2846  0023FC  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2847  0023FE  6E09               	movwf	?_Read_b_eep+1,c
  2848  002400  EC3D  F022         	call	_Read_b_eep	;wreg free
  2849  002404  0100               	movlb	0	; () banked
  2850  002406  6FD8               	movwf	_doDM$2154& (0+255),b
  2851                           
  2852                           ;main.c: 1716: doActionPulse( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2853  002408  C0D8  F00A         	movff	_doDM$2154,?_doActionPulse
  2854  00240C  51DC               	movf	doDM@dmflags& (0+255),w,b
  2855  00240E  EC57  F016         	call	_doActionPulse
  2856                           
  2857                           ;main.c: 1717: break;
  2858  002412  D07A               	goto	l10523
  2859  002414                     l10509:
  2860                           
  2861                           ;main.c: 1720: doActionStatus( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2862  002414  0100               	movlb	0	; () banked
  2863  002416  51DD               	movf	doDM@i& (0+255),w,b
  2864  002418  6FCD               	movwf	??_doDM& (0+255),b
  2865  00241A  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2866  00241C  90D8               	bcf	status,0,c
  2867  00241E  37CD               	rlcf	??_doDM& (0+255),f,b
  2868  002420  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2869  002422  90D8               	bcf	status,0,c
  2870  002424  37CD               	rlcf	??_doDM& (0+255),f,b
  2871  002426  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2872  002428  90D8               	bcf	status,0,c
  2873  00242A  37CD               	rlcf	??_doDM& (0+255),f,b
  2874  00242C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2875  00242E  0E92               	movlw	146
  2876  002430  25CD               	addwf	??_doDM& (0+255),w,b
  2877  002432  6E08               	movwf	?_Read_b_eep,c
  2878  002434  0E00               	movlw	0
  2879  002436  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2880  002438  6E09               	movwf	?_Read_b_eep+1,c
  2881  00243A  EC3D  F022         	call	_Read_b_eep	;wreg free
  2882  00243E  0100               	movlb	0	; () banked
  2883  002440  6FD9               	movwf	_doDM$2155& (0+255),b
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;main.c: 1720: doActionStatus( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2887  002442  C0D9  F051         	movff	_doDM$2155,?_doActionStatus
  2888  002446  51DC               	movf	doDM@dmflags& (0+255),w,b
  2889  002448  ECE6  F01A         	call	_doActionStatus
  2890                           
  2891                           ;main.c: 1721: break;
  2892  00244C  D05D               	goto	l10523
  2893  00244E                     l10513:
  2894                           
  2895                           ;main.c: 1724: doActionDisable( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2896  00244E  0100               	movlb	0	; () banked
  2897  002450  51DD               	movf	doDM@i& (0+255),w,b
  2898  002452  6FCD               	movwf	??_doDM& (0+255),b
  2899  002454  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2900  002456  90D8               	bcf	status,0,c
  2901  002458  37CD               	rlcf	??_doDM& (0+255),f,b
  2902  00245A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2903  00245C  90D8               	bcf	status,0,c
  2904  00245E  37CD               	rlcf	??_doDM& (0+255),f,b
  2905  002460  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2906  002462  90D8               	bcf	status,0,c
  2907  002464  37CD               	rlcf	??_doDM& (0+255),f,b
  2908  002466  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2909  002468  0E92               	movlw	146
  2910  00246A  25CD               	addwf	??_doDM& (0+255),w,b
  2911  00246C  6E08               	movwf	?_Read_b_eep,c
  2912  00246E  0E00               	movlw	0
  2913  002470  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2914  002472  6E09               	movwf	?_Read_b_eep+1,c
  2915  002474  EC3D  F022         	call	_Read_b_eep	;wreg free
  2916  002478  0100               	movlb	0	; () banked
  2917  00247A  6FDA               	movwf	_doDM$2156& (0+255),b
  2918                           
  2919                           ;main.c: 1724: doActionDisable( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2920  00247C  C0DA  F00C         	movff	_doDM$2156,?_doActionDisable
  2921  002480  51DC               	movf	doDM@dmflags& (0+255),w,b
  2922  002482  EC88  F01E         	call	_doActionDisable
  2923                           
  2924                           ;main.c: 1725: break;
  2925  002486  D040               	goto	l10523
  2926  002488                     l10515:
  2927                           
  2928                           ;main.c: 1728: doActionToggle( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2929  002488  0100               	movlb	0	; () banked
  2930  00248A  51DD               	movf	doDM@i& (0+255),w,b
  2931  00248C  6FCD               	movwf	??_doDM& (0+255),b
  2932  00248E  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2933  002490  90D8               	bcf	status,0,c
  2934  002492  37CD               	rlcf	??_doDM& (0+255),f,b
  2935  002494  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2936  002496  90D8               	bcf	status,0,c
  2937  002498  37CD               	rlcf	??_doDM& (0+255),f,b
  2938  00249A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2939  00249C  90D8               	bcf	status,0,c
  2940  00249E  37CD               	rlcf	??_doDM& (0+255),f,b
  2941  0024A0  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2942  0024A2  0E92               	movlw	146
  2943  0024A4  25CD               	addwf	??_doDM& (0+255),w,b
  2944  0024A6  6E08               	movwf	?_Read_b_eep,c
  2945  0024A8  0E00               	movlw	0
  2946  0024AA  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2947  0024AC  6E09               	movwf	?_Read_b_eep+1,c
  2948  0024AE  EC3D  F022         	call	_Read_b_eep	;wreg free
  2949  0024B2  0100               	movlb	0	; () banked
  2950  0024B4  6FDB               	movwf	_doDM$2157& (0+255),b
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;main.c: 1728: doActionToggle( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2954  0024B6  C0DB  F051         	movff	_doDM$2157,?_doActionToggle
  2955  0024BA  51DC               	movf	doDM@dmflags& (0+255),w,b
  2956  0024BC  EC95  F019         	call	_doActionToggle
  2957                           
  2958                           ;main.c: 1729: break;
  2959  0024C0  D023               	goto	l10523
  2960  0024C2                     l10521:
  2961                           
  2962                           ; BSR set to: 0
  2963  0024C2  51DD               	movf	doDM@i& (0+255),w,b
  2964  0024C4  6FCD               	movwf	??_doDM& (0+255),b
  2965  0024C6  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2966  0024C8  90D8               	bcf	status,0,c
  2967  0024CA  37CD               	rlcf	??_doDM& (0+255),f,b
  2968  0024CC  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2969  0024CE  90D8               	bcf	status,0,c
  2970  0024D0  37CD               	rlcf	??_doDM& (0+255),f,b
  2971  0024D2  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2972  0024D4  90D8               	bcf	status,0,c
  2973  0024D6  37CD               	rlcf	??_doDM& (0+255),f,b
  2974  0024D8  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2975  0024DA  0E91               	movlw	145
  2976  0024DC  25CD               	addwf	??_doDM& (0+255),w,b
  2977  0024DE  6E08               	movwf	?_Read_b_eep,c
  2978  0024E0  0E00               	movlw	0
  2979  0024E2  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2980  0024E4  6E09               	movwf	?_Read_b_eep+1,c
  2981  0024E6  EC3D  F022         	call	_Read_b_eep	;wreg free
  2982                           
  2983                           ; Switch size 1, requested type "speed"
  2984                           ; Number of cases is 6, Range of values is 1 to 16
  2985                           ; switch strategies available:
  2986                           ; Name         Instructions Cycles
  2987                           ; simple_byte           19    10 (average)
  2988                           ;	Chosen strategy is simple_byte
  2989  0024EA  0A01               	xorlw	1	; case 1
  2990  0024EC  E101 D73B          	bz	l10499
  2991  0024F0  0A03               	xorlw	3	; case 2
  2992  0024F2  E101 D755          	bz	l10503
  2993  0024F6  0A01               	xorlw	1	; case 3
  2994  0024F8  E101 D76F          	bz	l10507
  2995  0024FC  0A07               	xorlw	7	; case 4
  2996  0024FE  E0C4               	bz	l10515
  2997  002500  0A0E               	xorlw	14	; case 10
  2998  002502  E088               	bz	l10509
  2999  002504  0A1A               	xorlw	26	; case 16
  3000  002506  E0A3               	bz	l10513
  3001  002508                     l10523:
  3002  002508  0100               	movlb	0	; () banked
  3003  00250A  2BDD               	incf	doDM@i& (0+255),f,b
  3004                           
  3005                           ; BSR set to: 0
  3006  00250C  0E06               	movlw	6
  3007  00250E  65DD               	cpfsgt	doDM@i& (0+255),b
  3008  002510  D688               	goto	l10477
  3009  002512                     l420:
  3010                           
  3011                           ; BSR set to: 0
  3012  002512  0012               	return	
  3013  002514                     __end_of_doDM:
  3014                           	opt stack 0
  3015                           tblptru	equ	0xFF8
  3016                           prodh	equ	0xFF4
  3017                           prodl	equ	0xFF3
  3018                           postinc0	equ	0xFEE
  3019                           wreg	equ	0xFE8
  3020                           postinc2	equ	0xFDE
  3021                           postdec2	equ	0xFDD
  3022                           fsr2h	equ	0xFDA
  3023                           fsr2l	equ	0xFD9
  3024                           status	equ	0xFD8
  3025                           
  3026 ;; *************** function _doActionToggle *****************
  3027 ;; Defined at:
  3028 ;;		line 2175 in file "../main.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;  dmflags         1    wreg     unsigned char 
  3031 ;;  arg             1   80[COMRAM] unsigned char 
  3032 ;; Auto vars:     Size  Location     Type
  3033 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3034 ;;  i               1   27[BANK0 ] unsigned char 
  3035 ;;  bOn             1   26[BANK0 ] enum E15660
  3036 ;;  val             1   25[BANK0 ] unsigned char 
  3037 ;; Return value:  Size  Location     Type
  3038 ;;		None               void
  3039 ;; Registers used:
  3040 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3041 ;; Tracked objects:
  3042 ;;		On entry : F/0
  3043 ;;		On exit  : F/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3046 ;;      Params:         1       0       0       0       0       0       0
  3047 ;;      Locals:         0       4       0       0       0       0       0
  3048 ;;      Temps:          0       2       0       0       0       0       0
  3049 ;;      Totals:         1       6       0       0       0       0       0
  3050 ;;Total ram usage:        7 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    7
  3053 ;; This function calls:
  3054 ;;		_Read_b_eep
  3055 ;;		_SendInformationEvent
  3056 ;; This function is called by:
  3057 ;;		_doDM
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text9
  3062  00332A                     __ptext9:
  3063                           	opt stack 0
  3064  00332A                     _doActionToggle:
  3065                           	opt stack 22
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;incstack = 0
  3069                           ;incstack = 0
  3070                           ;doActionToggle@dmflags stored from wreg
  3071  00332A  CFE8 F0C9          	movff	wreg,doActionToggle@dmflags
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;main.c: 2177: unsigned char i;
  3075                           ;main.c: 2178: unsigned char val;
  3076                           ;main.c: 2179: BOOL bOn = 0;
  3077  00332E  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3078                           
  3079                           ;main.c: 2181: for ( i = 0; i < 8; i++ ) {
  3080  003330  6BCC               	clrf	doActionToggle@i& (0+255),b
  3081  003332                     l11245:
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;main.c: 2184: if ( !( arg & (1 << i) ) ) continue;
  3085  003332  C0CC  F0C7         	movff	doActionToggle@i,??_doActionToggle
  3086  003336  0E01               	movlw	1
  3087  003338  6FC8               	movwf	(??_doActionToggle+1)& (0+255),b
  3088  00333A  2BC7               	incf	??_doActionToggle& (0+255),f,b
  3089  00333C  D002               	goto	u13504
  3090  00333E                     u13505:
  3091  00333E  90D8               	bcf	status,0,c
  3092  003340  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3093  003342                     u13504:
  3094  003342  2FC7               	decfsz	??_doActionToggle& (0+255),f,b
  3095  003344  D7FC               	goto	u13505
  3096  003346  51C8               	movf	(??_doActionToggle+1)& (0+255),w,b
  3097  003348  1451               	andwf	doActionToggle@arg,w,c
  3098  00334A  E101 D092          	bz	l11307
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;main.c: 2187: if ( dmflags & 0x10 ) {
  3102  00334E  A9C9               	btfss	doActionToggle@dmflags& (0+255),4,b
  3103  003350  D011               	goto	l552
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;main.c: 2188: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3107  003352  90D8               	bcf	status,0,c
  3108  003354  35CC               	rlcf	doActionToggle@i& (0+255),w,b
  3109  003356  6FC7               	movwf	??_doActionToggle& (0+255),b
  3110  003358  6BC8               	clrf	(??_doActionToggle+1)& (0+255),b
  3111  00335A  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3112  00335C  0E75               	movlw	117
  3113  00335E  25C7               	addwf	??_doActionToggle& (0+255),w,b
  3114  003360  6E08               	movwf	?_Read_b_eep,c
  3115  003362  0E00               	movlw	0
  3116  003364  21C8               	addwfc	(??_doActionToggle+1)& (0+255),w,b
  3117  003366  6E09               	movwf	?_Read_b_eep+1,c
  3118  003368  EC3D  F022         	call	_Read_b_eep	;wreg free
  3119  00336C  0100               	movlb	0	; () banked
  3120  00336E  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3121  003370  E001 D07F          	bnz	l11307
  3122  003374                     l552:
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;main.c: 2191: }
  3126                           ;main.c: 2192: }
  3127                           ;main.c: 2195: if ( dmflags & 0x08 ) {
  3128  003374  A7C9               	btfss	doActionToggle@dmflags& (0+255),3,b
  3129  003376  D010               	goto	l11257
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;main.c: 2196: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3133  003378  90D8               	bcf	status,0,c
  3134  00337A  35CC               	rlcf	doActionToggle@i& (0+255),w,b
  3135  00337C  6FC7               	movwf	??_doActionToggle& (0+255),b
  3136  00337E  6BC8               	clrf	(??_doActionToggle+1)& (0+255),b
  3137  003380  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3138  003382  0E76               	movlw	118
  3139  003384  25C7               	addwf	??_doActionToggle& (0+255),w,b
  3140  003386  6E08               	movwf	?_Read_b_eep,c
  3141  003388  0E00               	movlw	0
  3142  00338A  21C8               	addwfc	(??_doActionToggle+1)& (0+255),w,b
  3143  00338C  6E09               	movwf	?_Read_b_eep+1,c
  3144  00338E  EC3D  F022         	call	_Read_b_eep	;wreg free
  3145  003392  0100               	movlb	0	; () banked
  3146  003394  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3147  003396  E16D               	bnz	l11307
  3148  003398                     l11257:
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;main.c: 2199: }
  3152                           ;main.c: 2200: }
  3153                           ;main.c: 2202: val = Read_b_eep(0x43 + 10 + i);
  3154  003398  0E4D               	movlw	77
  3155  00339A  25CC               	addwf	doActionToggle@i& (0+255),w,b
  3156  00339C  6E08               	movwf	?_Read_b_eep,c
  3157  00339E  6A09               	clrf	?_Read_b_eep+1,c
  3158  0033A0  0E00               	movlw	0
  3159  0033A2  2209               	addwfc	?_Read_b_eep+1,f,c
  3160  0033A4  EC3D  F022         	call	_Read_b_eep	;wreg free
  3161  0033A8  0100               	movlb	0	; () banked
  3162  0033AA  6FCA               	movwf	doActionToggle@val& (0+255),b
  3163                           
  3164                           ;main.c: 2204: switch ( i ) {
  3165  0033AC  D02D               	goto	l11289
  3166  0033AE                     l557:
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;main.c: 2207: if ( LATBbits.LATB4 ) {
  3170  0033AE  A88A               	btfss	3978,4,c	;volatile
  3171  0033B0  D002               	goto	l558
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;main.c: 2208: LATBbits.LATB4 = 0;
  3175  0033B2  988A               	bcf	3978,4,c	;volatile
  3176  0033B4  D025               	goto	L12
  3177  0033B6                     l558:
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;main.c: 2211: LATBbits.LATB4 = 1;
  3181  0033B6  888A               	bsf	3978,4,c	;volatile
  3182  0033B8                     l11261:
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;main.c: 2212: bOn = 1;
  3186  0033B8  0E01               	movlw	1
  3187  0033BA  6FCB               	movwf	doActionToggle@bOn& (0+255),b
  3188  0033BC  D033               	goto	l11291
  3189  0033BE                     l561:
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;main.c: 2217: if ( LATBbits.LATB1 ) {
  3193  0033BE  A28A               	btfss	3978,1,c	;volatile
  3194  0033C0  D002               	goto	l562
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;main.c: 2218: LATBbits.LATB1 = 0;
  3198  0033C2  928A               	bcf	3978,1,c	;volatile
  3199  0033C4  D01D               	goto	L12
  3200  0033C6                     l562:
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;main.c: 2221: LATBbits.LATB1 = 1;
  3204  0033C6  828A               	bsf	3978,1,c	;volatile
  3205  0033C8  D7F7               	goto	l11261
  3206  0033CA                     l564:
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;main.c: 2227: if ( LATBbits.LATB0 ) {
  3210  0033CA  A08A               	btfss	3978,0,c	;volatile
  3211  0033CC  D002               	goto	l565
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;main.c: 2228: LATBbits.LATB0 = 0;
  3215  0033CE  908A               	bcf	3978,0,c	;volatile
  3216  0033D0  D017               	goto	L12
  3217  0033D2                     l565:
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;main.c: 2231: LATBbits.LATB0 = 1;
  3221  0033D2  808A               	bsf	3978,0,c	;volatile
  3222  0033D4  D7F1               	goto	l11261
  3223  0033D6                     l567:
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;main.c: 2237: if ( LATCbits.LATC7 ) {
  3227  0033D6  AE8B               	btfss	3979,7,c	;volatile
  3228  0033D8  D002               	goto	l568
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;main.c: 2238: LATCbits.LATC7 = 0;
  3232  0033DA  9E8B               	bcf	3979,7,c	;volatile
  3233  0033DC  D011               	goto	L12
  3234  0033DE                     l568:
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;main.c: 2241: LATCbits.LATC7 = 1;
  3238  0033DE  8E8B               	bsf	3979,7,c	;volatile
  3239  0033E0  D7EB               	goto	l11261
  3240  0033E2                     l570:
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;main.c: 2247: if ( LATCbits.LATC6 ) {
  3244  0033E2  AC8B               	btfss	3979,6,c	;volatile
  3245  0033E4  D002               	goto	l571
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;main.c: 2248: LATCbits.LATC6 = 0;
  3249  0033E6  9C8B               	bcf	3979,6,c	;volatile
  3250  0033E8  D00B               	goto	L12
  3251  0033EA                     l571:
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;main.c: 2251: LATCbits.LATC6 = 1;
  3255  0033EA  8C8B               	bsf	3979,6,c	;volatile
  3256  0033EC  D7E5               	goto	l11261
  3257  0033EE                     l573:
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;main.c: 2257: if ( LATCbits.LATC5 ) {
  3261  0033EE  AA8B               	btfss	3979,5,c	;volatile
  3262  0033F0  D002               	goto	l574
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;main.c: 2258: LATCbits.LATC5 = 0;
  3266  0033F2  9A8B               	bcf	3979,5,c	;volatile
  3267  0033F4  D005               	goto	L12
  3268  0033F6                     l574:
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;main.c: 2261: LATCbits.LATC5 = 1;
  3272  0033F6  8A8B               	bsf	3979,5,c	;volatile
  3273  0033F8  D7DF               	goto	l11261
  3274  0033FA                     l576:
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;main.c: 2267: if ( LATCbits.LATC4 ) {
  3278  0033FA  A88B               	btfss	3979,4,c	;volatile
  3279  0033FC  D003               	goto	l577
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;main.c: 2268: LATCbits.LATC4 = 0;
  3283  0033FE  988B               	bcf	3979,4,c	;volatile
  3284  003400                     L12:
  3285                           
  3286                           ;main.c: 2269: bOn = 0;
  3287  003400  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3288                           
  3289                           ;main.c: 2270: } else {
  3290  003402  D010               	goto	l11291
  3291  003404                     l577:
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;main.c: 2271: LATCbits.LATC4 = 1;
  3295  003404  888B               	bsf	3979,4,c	;volatile
  3296  003406  D7D8               	goto	l11261
  3297  003408                     l11289:
  3298                           
  3299                           ; BSR set to: 0
  3300  003408  51CC               	movf	doActionToggle@i& (0+255),w,b
  3301                           
  3302                           ; Switch size 1, requested type "speed"
  3303                           ; Number of cases is 7, Range of values is 0 to 6
  3304                           ; switch strategies available:
  3305                           ; Name         Instructions Cycles
  3306                           ; simple_byte           22    12 (average)
  3307                           ;	Chosen strategy is simple_byte
  3308  00340A  E0D1               	bz	l557
  3309  00340C  0A01               	xorlw	1	; case 1
  3310  00340E  E0D7               	bz	l561
  3311  003410  0A03               	xorlw	3	; case 2
  3312  003412  E0DB               	bz	l564
  3313  003414  0A01               	xorlw	1	; case 3
  3314  003416  E0DF               	bz	l567
  3315  003418  0A07               	xorlw	7	; case 4
  3316  00341A  E0E3               	bz	l570
  3317  00341C  0A01               	xorlw	1	; case 5
  3318  00341E  E0E7               	bz	l573
  3319  003420  0A03               	xorlw	3	; case 6
  3320  003422  E0EB               	bz	l576
  3321  003424                     l11291:
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;main.c: 2278: if ( bOn ) {
  3325  003424  51CB               	movf	doActionToggle@bOn& (0+255),w,b
  3326  003426  E013               	bz	l579
  3327                           
  3328                           ; BSR set to: 0
  3329                           ;main.c: 2281: if ( val & 0x08 ) {
  3330  003428  A7CA               	btfss	doActionToggle@val& (0+255),3,b
  3331  00342A  D007               	goto	l11297
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;main.c: 2282: SendInformationEvent( i, 20, 3 );
  3335  00342C  0E14               	movlw	20
  3336  00342E  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3337  003430  0E03               	movlw	3
  3338  003432  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3339  003434  51CC               	movf	doActionToggle@i& (0+255),w,b
  3340  003436  EC99  F01F         	call	_SendInformationEvent
  3341  00343A                     l11297:
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;main.c: 2283: }
  3345                           ;main.c: 2286: if ( val & 0x20 ) {
  3346  00343A  ABCA               	btfss	doActionToggle@val& (0+255),5,b
  3347  00343C  D01A               	goto	l11307
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;main.c: 2287: SendInformationEvent( i, 20, 25 );
  3351  00343E  0E14               	movlw	20
  3352  003440  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3353  003442  0E19               	movlw	25
  3354  003444  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3355  003446  51CC               	movf	doActionToggle@i& (0+255),w,b
  3356  003448  EC99  F01F         	call	_SendInformationEvent
  3357  00344C  D012               	goto	l11307
  3358  00344E                     l579:
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;main.c: 2291: else {
  3362                           ;main.c: 2294: if ( val & 0x10 ) {
  3363  00344E  A9CA               	btfss	doActionToggle@val& (0+255),4,b
  3364  003450  D007               	goto	l11303
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;main.c: 2295: SendInformationEvent( i, 20, 4 );
  3368  003452  0E14               	movlw	20
  3369  003454  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3370  003456  0E04               	movlw	4
  3371  003458  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3372  00345A  51CC               	movf	doActionToggle@i& (0+255),w,b
  3373  00345C  EC99  F01F         	call	_SendInformationEvent
  3374  003460                     l11303:
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;main.c: 2296: }
  3378                           ;main.c: 2299: if (val & 0x40 ) {
  3379  003460  ADCA               	btfss	doActionToggle@val& (0+255),6,b
  3380  003462  D007               	goto	l11307
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;main.c: 2300: SendInformationEvent( i, 20, 24 );
  3384  003464  0E14               	movlw	20
  3385  003466  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3386  003468  0E18               	movlw	24
  3387  00346A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3388  00346C  51CC               	movf	doActionToggle@i& (0+255),w,b
  3389  00346E  EC99  F01F         	call	_SendInformationEvent
  3390  003472                     l11307:
  3391                           
  3392                           ; BSR set to: 0
  3393  003472  2BCC               	incf	doActionToggle@i& (0+255),f,b
  3394                           
  3395                           ; BSR set to: 0
  3396  003474  0E07               	movlw	7
  3397  003476  65CC               	cpfsgt	doActionToggle@i& (0+255),b
  3398  003478  D75C               	goto	l11245
  3399                           
  3400                           ; BSR set to: 0
  3401  00347A  0C07               	retlw	7
  3402  00347C                     __end_of_doActionToggle:
  3403                           	opt stack 0
  3404                           tblptru	equ	0xFF8
  3405                           prodh	equ	0xFF4
  3406                           prodl	equ	0xFF3
  3407                           postinc0	equ	0xFEE
  3408                           wreg	equ	0xFE8
  3409                           postinc2	equ	0xFDE
  3410                           postdec2	equ	0xFDD
  3411                           fsr2h	equ	0xFDA
  3412                           fsr2l	equ	0xFD9
  3413                           status	equ	0xFD8
  3414                           
  3415 ;; *************** function _doActionDisable *****************
  3416 ;; Defined at:
  3417 ;;		line 2138 in file "../main.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;  dmflags         1    wreg     unsigned char 
  3420 ;;  arg             1   11[COMRAM] unsigned char 
  3421 ;; Auto vars:     Size  Location     Type
  3422 ;;  dmflags         1   15[COMRAM] unsigned char 
  3423 ;;  i               1   16[COMRAM] unsigned char 
  3424 ;;  val             1   14[COMRAM] unsigned char 
  3425 ;; Return value:  Size  Location     Type
  3426 ;;		None               void
  3427 ;; Registers used:
  3428 ;;		wreg, status,2, status,0, cstack
  3429 ;; Tracked objects:
  3430 ;;		On entry : F/0
  3431 ;;		On exit  : 0/0
  3432 ;;		Unchanged: 0/0
  3433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3434 ;;      Params:         1       0       0       0       0       0       0
  3435 ;;      Locals:         3       0       0       0       0       0       0
  3436 ;;      Temps:          2       0       0       0       0       0       0
  3437 ;;      Totals:         6       0       0       0       0       0       0
  3438 ;;Total ram usage:        6 bytes
  3439 ;; Hardware stack levels used:    1
  3440 ;; Hardware stack levels required when called:    3
  3441 ;; This function calls:
  3442 ;;		_Busy_eep
  3443 ;;		_Write_b_eep
  3444 ;;		_Read_b_eep
  3445 ;; This function is called by:
  3446 ;;		_doDM
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           	psect	text10
  3451  003D10                     __ptext10:
  3452                           	opt stack 0
  3453  003D10                     _doActionDisable:
  3454                           	opt stack 26
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;incstack = 0
  3458                           ;incstack = 0
  3459                           ;doActionDisable@dmflags stored from wreg
  3460  003D10  CFE8 F010          	movff	wreg,doActionDisable@dmflags
  3461                           
  3462                           ; BSR set to: 0
  3463                           ;main.c: 2140: unsigned char i;
  3464                           ;main.c: 2141: unsigned char val;
  3465                           ;main.c: 2143: for ( i = 0; i < 8; i++ ) {
  3466  003D14  6A11               	clrf	doActionDisable@i,c
  3467  003D16                     l9471:
  3468                           
  3469                           ;main.c: 2146: if ( !( arg & (1 << i) ) ) continue;
  3470  003D16  C011  F00D         	movff	doActionDisable@i,??_doActionDisable
  3471  003D1A  0E01               	movlw	1
  3472  003D1C  6E0E               	movwf	(??_doActionDisable+1)& (0+255),c
  3473  003D1E  2A0D               	incf	??_doActionDisable,f,c
  3474  003D20  D002               	goto	u10604
  3475  003D22                     u10605:
  3476  003D22  90D8               	bcf	status,0,c
  3477  003D24  360E               	rlcf	??_doActionDisable+1,f,c
  3478  003D26                     u10604:
  3479  003D26  2E0D               	decfsz	??_doActionDisable,f,c
  3480  003D28  D7FC               	goto	u10605
  3481  003D2A  500E               	movf	??_doActionDisable+1,w,c
  3482  003D2C  140C               	andwf	doActionDisable@arg,w,c
  3483  003D2E  E03A               	bz	l9489
  3484                           
  3485                           ;main.c: 2149: if ( dmflags & 0x10 ) {
  3486  003D30  A810               	btfss	doActionDisable@dmflags,4,c
  3487  003D32  D010               	goto	l541
  3488                           
  3489                           ;main.c: 2150: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3490  003D34  90D8               	bcf	status,0,c
  3491  003D36  3411               	rlcf	doActionDisable@i,w,c
  3492  003D38  6E0D               	movwf	??_doActionDisable& (0+255),c
  3493  003D3A  6A0E               	clrf	(??_doActionDisable+1)& (0+255),c
  3494  003D3C  360E               	rlcf	(??_doActionDisable+1)& (0+255),f,c
  3495  003D3E  0E75               	movlw	117
  3496  003D40  240D               	addwf	??_doActionDisable,w,c
  3497  003D42  6E08               	movwf	?_Read_b_eep,c
  3498  003D44  0E00               	movlw	0
  3499  003D46  200E               	addwfc	??_doActionDisable+1,w,c
  3500  003D48  6E09               	movwf	?_Read_b_eep+1,c
  3501  003D4A  EC3D  F022         	call	_Read_b_eep	;wreg free
  3502  003D4E  0100               	movlb	0	; () banked
  3503  003D50  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3504  003D52  E128               	bnz	l9489
  3505  003D54                     l541:
  3506                           
  3507                           ;main.c: 2153: }
  3508                           ;main.c: 2154: }
  3509                           ;main.c: 2157: if ( dmflags & 0x08 ) {
  3510  003D54  A610               	btfss	doActionDisable@dmflags,3,c
  3511  003D56  D010               	goto	l9483
  3512                           
  3513                           ;main.c: 2158: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3514  003D58  90D8               	bcf	status,0,c
  3515  003D5A  3411               	rlcf	doActionDisable@i,w,c
  3516  003D5C  6E0D               	movwf	??_doActionDisable& (0+255),c
  3517  003D5E  6A0E               	clrf	(??_doActionDisable+1)& (0+255),c
  3518  003D60  360E               	rlcf	(??_doActionDisable+1)& (0+255),f,c
  3519  003D62  0E76               	movlw	118
  3520  003D64  240D               	addwf	??_doActionDisable,w,c
  3521  003D66  6E08               	movwf	?_Read_b_eep,c
  3522  003D68  0E00               	movlw	0
  3523  003D6A  200E               	addwfc	??_doActionDisable+1,w,c
  3524  003D6C  6E09               	movwf	?_Read_b_eep+1,c
  3525  003D6E  EC3D  F022         	call	_Read_b_eep	;wreg free
  3526  003D72  0100               	movlb	0	; () banked
  3527  003D74  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3528  003D76  E116               	bnz	l9489
  3529  003D78                     l9483:
  3530                           
  3531                           ;main.c: 2161: }
  3532                           ;main.c: 2162: }
  3533                           ;main.c: 2164: val = Read_b_eep(0x43 + 10 + i);
  3534  003D78  0E4D               	movlw	77
  3535  003D7A  2411               	addwf	doActionDisable@i,w,c
  3536  003D7C  6E08               	movwf	?_Read_b_eep,c
  3537  003D7E  6A09               	clrf	?_Read_b_eep+1,c
  3538  003D80  0E00               	movlw	0
  3539  003D82  2209               	addwfc	?_Read_b_eep+1,f,c
  3540  003D84  EC3D  F022         	call	_Read_b_eep	;wreg free
  3541  003D88  6E0F               	movwf	doActionDisable@val,c
  3542                           
  3543                           ;main.c: 2165: (Busy_eep(), Write_b_eep(0x43 + 10 + i,val & ~0x80));
  3544  003D8A  EC71  F022         	call	_Busy_eep	;wreg free
  3545  003D8E  0E4D               	movlw	77
  3546  003D90  2411               	addwf	doActionDisable@i,w,c
  3547  003D92  6E08               	movwf	?_Write_b_eep,c
  3548  003D94  6A09               	clrf	?_Write_b_eep+1,c
  3549  003D96  0E00               	movlw	0
  3550  003D98  2209               	addwfc	?_Write_b_eep+1,f,c
  3551  003D9A  500F               	movf	doActionDisable@val,w,c
  3552  003D9C  0B7F               	andlw	127
  3553  003D9E  6E0A               	movwf	?_Write_b_eep+2,c
  3554  003DA0  EC56  F020         	call	_Write_b_eep	;wreg free
  3555  003DA4                     l9489:
  3556  003DA4  2A11               	incf	doActionDisable@i,f,c
  3557  003DA6  0E07               	movlw	7
  3558  003DA8  6411               	cpfsgt	doActionDisable@i,c
  3559  003DAA  D7B5               	goto	l9471
  3560  003DAC  0C07               	retlw	7
  3561  003DAE                     __end_of_doActionDisable:
  3562                           	opt stack 0
  3563                           tblptru	equ	0xFF8
  3564                           prodh	equ	0xFF4
  3565                           prodl	equ	0xFF3
  3566                           postinc0	equ	0xFEE
  3567                           wreg	equ	0xFE8
  3568                           postinc2	equ	0xFDE
  3569                           postdec2	equ	0xFDD
  3570                           fsr2h	equ	0xFDA
  3571                           fsr2l	equ	0xFD9
  3572                           status	equ	0xFD8
  3573                           
  3574 ;; *************** function _doActionStatus *****************
  3575 ;; Defined at:
  3576 ;;		line 2042 in file "../main.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;  dmflags         1    wreg     unsigned char 
  3579 ;;  arg             1   80[COMRAM] unsigned char 
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3582 ;;  i               1   27[BANK0 ] unsigned char 
  3583 ;;  val             1   26[BANK0 ] unsigned char 
  3584 ;;  bOn             1   25[BANK0 ] enum E15660
  3585 ;; Return value:  Size  Location     Type
  3586 ;;		None               void
  3587 ;; Registers used:
  3588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3589 ;; Tracked objects:
  3590 ;;		On entry : F/0
  3591 ;;		On exit  : F/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3594 ;;      Params:         1       0       0       0       0       0       0
  3595 ;;      Locals:         0       4       0       0       0       0       0
  3596 ;;      Temps:          0       2       0       0       0       0       0
  3597 ;;      Totals:         1       6       0       0       0       0       0
  3598 ;;Total ram usage:        7 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    7
  3601 ;; This function calls:
  3602 ;;		_Read_b_eep
  3603 ;;		_SendInformationEvent
  3604 ;; This function is called by:
  3605 ;;		_doDM
  3606 ;; This function uses a non-reentrant model
  3607 ;;
  3608                           
  3609                           	psect	text11
  3610  0035CC                     __ptext11:
  3611                           	opt stack 0
  3612  0035CC                     _doActionStatus:
  3613                           	opt stack 22
  3614                           
  3615                           ;incstack = 0
  3616                           ;incstack = 0
  3617                           ;doActionStatus@dmflags stored from wreg
  3618  0035CC  CFE8 F0C9          	movff	wreg,doActionStatus@dmflags
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;main.c: 2044: unsigned char i;
  3622                           ;main.c: 2045: unsigned char val;
  3623                           ;main.c: 2046: BOOL bOn = 0;
  3624  0035D0  6BCA               	clrf	doActionStatus@bOn& (0+255),b
  3625                           
  3626                           ;main.c: 2048: for (i = 0; i < 8; i++) {
  3627  0035D2  6BCC               	clrf	doActionStatus@i& (0+255),b
  3628  0035D4                     l11187:
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;main.c: 2051: if (!(arg & (1 << i))) continue;
  3632  0035D4  C0CC  F0C7         	movff	doActionStatus@i,??_doActionStatus
  3633  0035D8  0E01               	movlw	1
  3634  0035DA  6FC8               	movwf	(??_doActionStatus+1)& (0+255),b
  3635  0035DC  2BC7               	incf	??_doActionStatus& (0+255),f,b
  3636  0035DE  D002               	goto	u13384
  3637  0035E0                     u13385:
  3638  0035E0  90D8               	bcf	status,0,c
  3639  0035E2  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3640  0035E4                     u13384:
  3641  0035E4  2FC7               	decfsz	??_doActionStatus& (0+255),f,b
  3642  0035E6  D7FC               	goto	u13385
  3643  0035E8  51C8               	movf	(??_doActionStatus+1)& (0+255),w,b
  3644  0035EA  1451               	andwf	doActionStatus@arg,w,c
  3645  0035EC  E101 D087          	bz	l11235
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;main.c: 2054: if ( dmflags & 0x10 ) {
  3649  0035F0  A9C9               	btfss	doActionStatus@dmflags& (0+255),4,b
  3650  0035F2  D010               	goto	l515
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;main.c: 2055: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3654  0035F4  90D8               	bcf	status,0,c
  3655  0035F6  35CC               	rlcf	doActionStatus@i& (0+255),w,b
  3656  0035F8  6FC7               	movwf	??_doActionStatus& (0+255),b
  3657  0035FA  6BC8               	clrf	(??_doActionStatus+1)& (0+255),b
  3658  0035FC  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3659  0035FE  0E75               	movlw	117
  3660  003600  25C7               	addwf	??_doActionStatus& (0+255),w,b
  3661  003602  6E08               	movwf	?_Read_b_eep,c
  3662  003604  0E00               	movlw	0
  3663  003606  21C8               	addwfc	(??_doActionStatus+1)& (0+255),w,b
  3664  003608  6E09               	movwf	?_Read_b_eep+1,c
  3665  00360A  EC3D  F022         	call	_Read_b_eep	;wreg free
  3666  00360E  0100               	movlb	0	; () banked
  3667  003610  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3668  003612  E175               	bnz	l11235
  3669  003614                     l515:
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;main.c: 2058: }
  3673                           ;main.c: 2059: }
  3674                           ;main.c: 2062: if ( dmflags & 0x08 ) {
  3675  003614  A7C9               	btfss	doActionStatus@dmflags& (0+255),3,b
  3676  003616  D010               	goto	l11199
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;main.c: 2063: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3680  003618  90D8               	bcf	status,0,c
  3681  00361A  35CC               	rlcf	doActionStatus@i& (0+255),w,b
  3682  00361C  6FC7               	movwf	??_doActionStatus& (0+255),b
  3683  00361E  6BC8               	clrf	(??_doActionStatus+1)& (0+255),b
  3684  003620  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3685  003622  0E76               	movlw	118
  3686  003624  25C7               	addwf	??_doActionStatus& (0+255),w,b
  3687  003626  6E08               	movwf	?_Read_b_eep,c
  3688  003628  0E00               	movlw	0
  3689  00362A  21C8               	addwfc	(??_doActionStatus+1)& (0+255),w,b
  3690  00362C  6E09               	movwf	?_Read_b_eep+1,c
  3691  00362E  EC3D  F022         	call	_Read_b_eep	;wreg free
  3692  003632  0100               	movlb	0	; () banked
  3693  003634  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3694  003636  E163               	bnz	l11235
  3695  003638                     l11199:
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;main.c: 2066: }
  3699                           ;main.c: 2067: }
  3700                           ;main.c: 2069: val = Read_b_eep(0x43 + 10 + i);
  3701  003638  0E4D               	movlw	77
  3702  00363A  25CC               	addwf	doActionStatus@i& (0+255),w,b
  3703  00363C  6E08               	movwf	?_Read_b_eep,c
  3704  00363E  6A09               	clrf	?_Read_b_eep+1,c
  3705  003640  0E00               	movlw	0
  3706  003642  2209               	addwfc	?_Read_b_eep+1,f,c
  3707  003644  EC3D  F022         	call	_Read_b_eep	;wreg free
  3708  003648  0100               	movlb	0	; () banked
  3709  00364A  6FCB               	movwf	doActionStatus@val& (0+255),b
  3710                           
  3711                           ;main.c: 2071: switch (i) {
  3712  00364C  D023               	goto	l11217
  3713  00364E                     l11201:
  3714                           
  3715                           ; BSR set to: 0
  3716                           ;main.c: 2074: bOn = LATBbits.LATB4;
  3717  00364E  0E00               	movlw	0
  3718  003650  B88A               	btfsc	3978,4,c	;volatile
  3719  003652  0E01               	movlw	1
  3720  003654  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3721                           
  3722                           ;main.c: 2075: break;
  3723  003656  D02C               	goto	l11219
  3724  003658                     l11203:
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;main.c: 2078: bOn = LATBbits.LATB1;
  3728  003658  0E00               	movlw	0
  3729  00365A  B28A               	btfsc	3978,1,c	;volatile
  3730  00365C  0E01               	movlw	1
  3731  00365E  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3732                           
  3733                           ;main.c: 2079: break;
  3734  003660  D027               	goto	l11219
  3735  003662                     l11205:
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;main.c: 2082: bOn = LATBbits.LATB0;
  3739  003662  0E00               	movlw	0
  3740  003664  B08A               	btfsc	3978,0,c	;volatile
  3741  003666  0E01               	movlw	1
  3742  003668  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3743                           
  3744                           ;main.c: 2083: break;
  3745  00366A  D022               	goto	l11219
  3746  00366C                     l11207:
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;main.c: 2086: bOn = LATCbits.LATC7;
  3750  00366C  0E00               	movlw	0
  3751  00366E  BE8B               	btfsc	3979,7,c	;volatile
  3752  003670  0E01               	movlw	1
  3753  003672  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3754                           
  3755                           ;main.c: 2087: break;
  3756  003674  D01D               	goto	l11219
  3757  003676                     l11209:
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;main.c: 2090: bOn = LATCbits.LATC6;
  3761  003676  0E00               	movlw	0
  3762  003678  BC8B               	btfsc	3979,6,c	;volatile
  3763  00367A  0E01               	movlw	1
  3764  00367C  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3765                           
  3766                           ;main.c: 2091: break;
  3767  00367E  D018               	goto	l11219
  3768  003680                     l11211:
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;main.c: 2094: bOn = LATCbits.LATC5;
  3772  003680  0E00               	movlw	0
  3773  003682  BA8B               	btfsc	3979,5,c	;volatile
  3774  003684  0E01               	movlw	1
  3775  003686  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3776                           
  3777                           ;main.c: 2095: break;
  3778  003688  D013               	goto	l11219
  3779  00368A                     l11213:
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;main.c: 2098: bOn = LATCbits.LATC4;
  3783  00368A  0E00               	movlw	0
  3784  00368C  B88B               	btfsc	3979,4,c	;volatile
  3785  00368E  0E01               	movlw	1
  3786  003690  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3787                           
  3788                           ;main.c: 2099: break;
  3789  003692  D00E               	goto	l11219
  3790  003694                     l11217:
  3791                           
  3792                           ; BSR set to: 0
  3793  003694  51CC               	movf	doActionStatus@i& (0+255),w,b
  3794                           
  3795                           ; Switch size 1, requested type "speed"
  3796                           ; Number of cases is 7, Range of values is 0 to 6
  3797                           ; switch strategies available:
  3798                           ; Name         Instructions Cycles
  3799                           ; simple_byte           22    12 (average)
  3800                           ;	Chosen strategy is simple_byte
  3801  003696  E0DB               	bz	l11201
  3802  003698  0A01               	xorlw	1	; case 1
  3803  00369A  E0DE               	bz	l11203
  3804  00369C  0A03               	xorlw	3	; case 2
  3805  00369E  E0E1               	bz	l11205
  3806  0036A0  0A01               	xorlw	1	; case 3
  3807  0036A2  E0E4               	bz	l11207
  3808  0036A4  0A07               	xorlw	7	; case 4
  3809  0036A6  E0E7               	bz	l11209
  3810  0036A8  0A01               	xorlw	1	; case 5
  3811  0036AA  E0EA               	bz	l11211
  3812  0036AC  0A03               	xorlw	3	; case 6
  3813  0036AE  E0ED               	bz	l11213
  3814  0036B0                     l11219:
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;main.c: 2103: if (bOn) {
  3818  0036B0  51CA               	movf	doActionStatus@bOn& (0+255),w,b
  3819  0036B2  E013               	bz	l528
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;main.c: 2106: if ( val & 0x10 ) {
  3823  0036B4  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3824  0036B6  D007               	goto	l11225
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;main.c: 2107: SendInformationEvent( i, 20, 4 );
  3828  0036B8  0E14               	movlw	20
  3829  0036BA  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3830  0036BC  0E04               	movlw	4
  3831  0036BE  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3832  0036C0  51CC               	movf	doActionStatus@i& (0+255),w,b
  3833  0036C2  EC99  F01F         	call	_SendInformationEvent
  3834  0036C6                     l11225:
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;main.c: 2108: }
  3838                           ;main.c: 2111: if ( val & 0x40 ) {
  3839  0036C6  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3840  0036C8  D01A               	goto	l11235
  3841                           
  3842                           ; BSR set to: 0
  3843                           ;main.c: 2112: SendInformationEvent( i, 20, 24 );
  3844  0036CA  0E14               	movlw	20
  3845  0036CC  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3846  0036CE  0E18               	movlw	24
  3847  0036D0  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3848  0036D2  51CC               	movf	doActionStatus@i& (0+255),w,b
  3849  0036D4  EC99  F01F         	call	_SendInformationEvent
  3850  0036D8  D012               	goto	l11235
  3851  0036DA                     l528:
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;main.c: 2116: else {
  3855                           ;main.c: 2119: if ( val & 0x10 ) {
  3856  0036DA  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3857  0036DC  D007               	goto	l11231
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;main.c: 2120: SendInformationEvent( i, 20, 4 );
  3861  0036DE  0E14               	movlw	20
  3862  0036E0  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3863  0036E2  0E04               	movlw	4
  3864  0036E4  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3865  0036E6  51CC               	movf	doActionStatus@i& (0+255),w,b
  3866  0036E8  EC99  F01F         	call	_SendInformationEvent
  3867  0036EC                     l11231:
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;main.c: 2121: }
  3871                           ;main.c: 2124: if ( val & 0x40 ) {
  3872  0036EC  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3873  0036EE  D007               	goto	l11235
  3874                           
  3875                           ; BSR set to: 0
  3876                           ;main.c: 2125: SendInformationEvent( i, 20, 24 );
  3877  0036F0  0E14               	movlw	20
  3878  0036F2  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3879  0036F4  0E18               	movlw	24
  3880  0036F6  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3881  0036F8  51CC               	movf	doActionStatus@i& (0+255),w,b
  3882  0036FA  EC99  F01F         	call	_SendInformationEvent
  3883  0036FE                     l11235:
  3884                           
  3885                           ; BSR set to: 0
  3886  0036FE  2BCC               	incf	doActionStatus@i& (0+255),f,b
  3887                           
  3888                           ; BSR set to: 0
  3889  003700  0E07               	movlw	7
  3890  003702  65CC               	cpfsgt	doActionStatus@i& (0+255),b
  3891  003704  D767               	goto	l11187
  3892                           
  3893                           ; BSR set to: 0
  3894  003706  0C07               	retlw	7
  3895  003708                     __end_of_doActionStatus:
  3896                           	opt stack 0
  3897                           tblptru	equ	0xFF8
  3898                           prodh	equ	0xFF4
  3899                           prodl	equ	0xFF3
  3900                           postinc0	equ	0xFEE
  3901                           wreg	equ	0xFE8
  3902                           postinc2	equ	0xFDE
  3903                           postdec2	equ	0xFDD
  3904                           fsr2h	equ	0xFDA
  3905                           fsr2l	equ	0xFD9
  3906                           status	equ	0xFD8
  3907                           
  3908 ;; *************** function _doActionPulse *****************
  3909 ;; Defined at:
  3910 ;;		line 1944 in file "../main.c"
  3911 ;; Parameters:    Size  Location     Type
  3912 ;;  dmflags         1    wreg     unsigned char 
  3913 ;;  arg             1    9[COMRAM] unsigned char 
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;  dmflags         1   14[COMRAM] unsigned char 
  3916 ;;  i               1   15[COMRAM] unsigned char 
  3917 ;;  val             1   13[COMRAM] unsigned char 
  3918 ;; Return value:  Size  Location     Type
  3919 ;;		None               void
  3920 ;; Registers used:
  3921 ;;		wreg, status,2, status,0, cstack
  3922 ;; Tracked objects:
  3923 ;;		On entry : F/0
  3924 ;;		On exit  : 0/0
  3925 ;;		Unchanged: 0/0
  3926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3927 ;;      Params:         1       0       0       0       0       0       0
  3928 ;;      Locals:         3       0       0       0       0       0       0
  3929 ;;      Temps:          3       0       0       0       0       0       0
  3930 ;;      Totals:         7       0       0       0       0       0       0
  3931 ;;Total ram usage:        7 bytes
  3932 ;; Hardware stack levels used:    1
  3933 ;; Hardware stack levels required when called:    3
  3934 ;; This function calls:
  3935 ;;		_Read_b_eep
  3936 ;; This function is called by:
  3937 ;;		_doDM
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           	psect	text12
  3942  002CAE                     __ptext12:
  3943                           	opt stack 0
  3944  002CAE                     _doActionPulse:
  3945                           	opt stack 26
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;incstack = 0
  3949                           ;incstack = 0
  3950                           ;doActionPulse@dmflags stored from wreg
  3951  002CAE  CFE8 F00F          	movff	wreg,doActionPulse@dmflags
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;main.c: 1946: unsigned char i;
  3955                           ;main.c: 1947: unsigned char val;
  3956                           ;main.c: 1949: for ( i = 0; i < 8; i++ ) {
  3957  002CB2  6A10               	clrf	doActionPulse@i,c
  3958  002CB4                     l9353:
  3959                           
  3960                           ;main.c: 1952: if ( !( arg & ( 1 << i ) ) ) continue;
  3961  002CB4  C010  F00B         	movff	doActionPulse@i,??_doActionPulse
  3962  002CB8  0E01               	movlw	1
  3963  002CBA  6E0C               	movwf	(??_doActionPulse+1)& (0+255),c
  3964  002CBC  2A0B               	incf	??_doActionPulse,f,c
  3965  002CBE  D002               	goto	u10404
  3966  002CC0                     u10405:
  3967  002CC0  90D8               	bcf	status,0,c
  3968  002CC2  360C               	rlcf	??_doActionPulse+1,f,c
  3969  002CC4                     u10404:
  3970  002CC4  2E0B               	decfsz	??_doActionPulse,f,c
  3971  002CC6  D7FC               	goto	u10405
  3972  002CC8  500C               	movf	??_doActionPulse+1,w,c
  3973  002CCA  140A               	andwf	doActionPulse@arg,w,c
  3974  002CCC  E101 D0EA          	bz	l9403
  3975                           
  3976                           ;main.c: 1955: if ( dmflags & 0x10 ) {
  3977  002CD0  A80F               	btfss	doActionPulse@dmflags,4,c
  3978  002CD2  D011               	goto	l494
  3979                           
  3980                           ;main.c: 1956: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3981  002CD4  90D8               	bcf	status,0,c
  3982  002CD6  3410               	rlcf	doActionPulse@i,w,c
  3983  002CD8  6E0B               	movwf	??_doActionPulse& (0+255),c
  3984  002CDA  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  3985  002CDC  360C               	rlcf	(??_doActionPulse+1)& (0+255),f,c
  3986  002CDE  0E75               	movlw	117
  3987  002CE0  240B               	addwf	??_doActionPulse,w,c
  3988  002CE2  6E08               	movwf	?_Read_b_eep,c
  3989  002CE4  0E00               	movlw	0
  3990  002CE6  200C               	addwfc	??_doActionPulse+1,w,c
  3991  002CE8  6E09               	movwf	?_Read_b_eep+1,c
  3992  002CEA  EC3D  F022         	call	_Read_b_eep	;wreg free
  3993  002CEE  0100               	movlb	0	; () banked
  3994  002CF0  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3995  002CF2  E001 D0D7          	bnz	l9403
  3996  002CF6                     l494:
  3997                           
  3998                           ;main.c: 1959: }
  3999                           ;main.c: 1960: }
  4000                           ;main.c: 1963: if ( dmflags & 0x08 ) {
  4001  002CF6  A60F               	btfss	doActionPulse@dmflags,3,c
  4002  002CF8  D011               	goto	l9365
  4003                           
  4004                           ;main.c: 1964: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  4005  002CFA  90D8               	bcf	status,0,c
  4006  002CFC  3410               	rlcf	doActionPulse@i,w,c
  4007  002CFE  6E0B               	movwf	??_doActionPulse& (0+255),c
  4008  002D00  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4009  002D02  360C               	rlcf	(??_doActionPulse+1)& (0+255),f,c
  4010  002D04  0E76               	movlw	118
  4011  002D06  240B               	addwf	??_doActionPulse,w,c
  4012  002D08  6E08               	movwf	?_Read_b_eep,c
  4013  002D0A  0E00               	movlw	0
  4014  002D0C  200C               	addwfc	??_doActionPulse+1,w,c
  4015  002D0E  6E09               	movwf	?_Read_b_eep+1,c
  4016  002D10  EC3D  F022         	call	_Read_b_eep	;wreg free
  4017  002D14  0100               	movlb	0	; () banked
  4018  002D16  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4019  002D18  E001 D0C4          	bnz	l9403
  4020  002D1C                     l9365:
  4021                           
  4022                           ;main.c: 1967: }
  4023                           ;main.c: 1968: }
  4024                           ;main.c: 1970: val = Read_b_eep(0x43 + 10 + i);
  4025  002D1C  0E4D               	movlw	77
  4026  002D1E  2410               	addwf	doActionPulse@i,w,c
  4027  002D20  6E08               	movwf	?_Read_b_eep,c
  4028  002D22  6A09               	clrf	?_Read_b_eep+1,c
  4029  002D24  0E00               	movlw	0
  4030  002D26  2209               	addwfc	?_Read_b_eep+1,f,c
  4031  002D28  EC3D  F022         	call	_Read_b_eep	;wreg free
  4032  002D2C  6E0E               	movwf	doActionPulse@val,c
  4033                           
  4034                           ;main.c: 1973: if ( !( val & 0x80 ) ) continue;
  4035  002D2E  AE0E               	btfss	doActionPulse@val,7,c
  4036  002D30  D0B9               	goto	l9403
  4037  002D32  D0A8               	goto	l9401
  4038  002D34                     l500:
  4039                           
  4040                           ;main.c: 1978: LATBbits.LATB4 = 0;
  4041  002D34  988A               	bcf	3978,4,c	;volatile
  4042                           
  4043                           ;main.c: 1979: relay_pulse_flags |= 0x01;
  4044  002D36  0100               	movlb	0	; () banked
  4045  002D38  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  4046                           
  4047                           ; BSR set to: 0
  4048                           ;main.c: 1980: relay_pulse_timer[ 0 ] =
  4049                           ;main.c: 1981: Read_b_eep(0x43 + 18) * 256 +
  4050                           ;main.c: 1982: Read_b_eep(0x43 + 19);
  4051  002D3A  6A09               	clrf	?_Read_b_eep+1,c
  4052  002D3C  0E56               	movlw	86
  4053  002D3E  6E08               	movwf	?_Read_b_eep,c
  4054  002D40  EC3D  F022         	call	_Read_b_eep	;wreg free
  4055  002D44  6E0B               	movwf	??_doActionPulse& (0+255),c
  4056  002D46  6A09               	clrf	?_Read_b_eep+1,c
  4057  002D48  0E55               	movlw	85
  4058  002D4A  6E08               	movwf	?_Read_b_eep,c
  4059  002D4C  EC3D  F022         	call	_Read_b_eep	;wreg free
  4060  002D50  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4061  002D52  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4062  002D54  500B               	movf	??_doActionPulse,w,c
  4063  002D56  240C               	addwf	??_doActionPulse+1,w,c
  4064  002D58  0100               	movlb	0	; () banked
  4065  002D5A  6F70               	movwf	_relay_pulse_timer& (0+255),b
  4066  002D5C  0E00               	movlw	0
  4067  002D5E  200D               	addwfc	??_doActionPulse+2,w,c
  4068  002D60  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  4069                           
  4070                           ;main.c: 1983: break;
  4071  002D62  D0A0               	goto	l9403
  4072  002D64                     l502:
  4073                           
  4074                           ;main.c: 1986: LATBbits.LATB1 = 0;
  4075  002D64  928A               	bcf	3978,1,c	;volatile
  4076                           
  4077                           ;main.c: 1987: relay_pulse_flags |= 0x02;
  4078  002D66  0100               	movlb	0	; () banked
  4079  002D68  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  4080                           
  4081                           ; BSR set to: 0
  4082                           ;main.c: 1988: relay_pulse_timer[ 1 ] =
  4083                           ;main.c: 1989: Read_b_eep(0x43 + 20) * 256 +
  4084                           ;main.c: 1990: Read_b_eep(0x43 + 21);
  4085  002D6A  6A09               	clrf	?_Read_b_eep+1,c
  4086  002D6C  0E58               	movlw	88
  4087  002D6E  6E08               	movwf	?_Read_b_eep,c
  4088  002D70  EC3D  F022         	call	_Read_b_eep	;wreg free
  4089  002D74  6E0B               	movwf	??_doActionPulse& (0+255),c
  4090  002D76  6A09               	clrf	?_Read_b_eep+1,c
  4091  002D78  0E57               	movlw	87
  4092  002D7A  6E08               	movwf	?_Read_b_eep,c
  4093  002D7C  EC3D  F022         	call	_Read_b_eep	;wreg free
  4094  002D80  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4095  002D82  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4096  002D84  500B               	movf	??_doActionPulse,w,c
  4097  002D86  240C               	addwf	??_doActionPulse+1,w,c
  4098  002D88  0100               	movlb	0	; () banked
  4099  002D8A  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  4100  002D8C  0E00               	movlw	0
  4101  002D8E  200D               	addwfc	??_doActionPulse+2,w,c
  4102  002D90  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  4103                           
  4104                           ;main.c: 1991: break;
  4105  002D92  D088               	goto	l9403
  4106  002D94                     l503:
  4107                           
  4108                           ;main.c: 1994: LATBbits.LATB0 = 0;
  4109  002D94  908A               	bcf	3978,0,c	;volatile
  4110                           
  4111                           ;main.c: 1995: relay_pulse_flags |= 0x04;
  4112  002D96  0100               	movlb	0	; () banked
  4113  002D98  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;main.c: 1996: relay_pulse_timer[ 2 ] =
  4117                           ;main.c: 1997: Read_b_eep(0x43 + 22) * 256 +
  4118                           ;main.c: 1998: Read_b_eep(0x43 + 23);
  4119  002D9A  6A09               	clrf	?_Read_b_eep+1,c
  4120  002D9C  0E5A               	movlw	90
  4121  002D9E  6E08               	movwf	?_Read_b_eep,c
  4122  002DA0  EC3D  F022         	call	_Read_b_eep	;wreg free
  4123  002DA4  6E0B               	movwf	??_doActionPulse& (0+255),c
  4124  002DA6  6A09               	clrf	?_Read_b_eep+1,c
  4125  002DA8  0E59               	movlw	89
  4126  002DAA  6E08               	movwf	?_Read_b_eep,c
  4127  002DAC  EC3D  F022         	call	_Read_b_eep	;wreg free
  4128  002DB0  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4129  002DB2  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4130  002DB4  500B               	movf	??_doActionPulse,w,c
  4131  002DB6  240C               	addwf	??_doActionPulse+1,w,c
  4132  002DB8  0100               	movlb	0	; () banked
  4133  002DBA  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  4134  002DBC  0E00               	movlw	0
  4135  002DBE  200D               	addwfc	??_doActionPulse+2,w,c
  4136  002DC0  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  4137                           
  4138                           ;main.c: 1999: break;
  4139  002DC2  D070               	goto	l9403
  4140  002DC4                     l504:
  4141                           
  4142                           ;main.c: 2002: LATCbits.LATC7 = 0;
  4143  002DC4  9E8B               	bcf	3979,7,c	;volatile
  4144                           
  4145                           ;main.c: 2003: relay_pulse_flags |= 0x08;
  4146  002DC6  0100               	movlb	0	; () banked
  4147  002DC8  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;main.c: 2004: relay_pulse_timer[ 3 ] =
  4151                           ;main.c: 2005: Read_b_eep(0x43 + 24) * 256 +
  4152                           ;main.c: 2006: Read_b_eep(0x43 + 25);
  4153  002DCA  6A09               	clrf	?_Read_b_eep+1,c
  4154  002DCC  0E5C               	movlw	92
  4155  002DCE  6E08               	movwf	?_Read_b_eep,c
  4156  002DD0  EC3D  F022         	call	_Read_b_eep	;wreg free
  4157  002DD4  6E0B               	movwf	??_doActionPulse& (0+255),c
  4158  002DD6  6A09               	clrf	?_Read_b_eep+1,c
  4159  002DD8  0E5B               	movlw	91
  4160  002DDA  6E08               	movwf	?_Read_b_eep,c
  4161  002DDC  EC3D  F022         	call	_Read_b_eep	;wreg free
  4162  002DE0  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4163  002DE2  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4164  002DE4  500B               	movf	??_doActionPulse,w,c
  4165  002DE6  240C               	addwf	??_doActionPulse+1,w,c
  4166  002DE8  0100               	movlb	0	; () banked
  4167  002DEA  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  4168  002DEC  0E00               	movlw	0
  4169  002DEE  200D               	addwfc	??_doActionPulse+2,w,c
  4170  002DF0  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  4171                           
  4172                           ;main.c: 2007: break;
  4173  002DF2  D058               	goto	l9403
  4174  002DF4                     l505:
  4175                           
  4176                           ;main.c: 2010: LATCbits.LATC6 = 0;
  4177  002DF4  9C8B               	bcf	3979,6,c	;volatile
  4178                           
  4179                           ;main.c: 2011: relay_pulse_flags |= 0x10;
  4180  002DF6  0100               	movlb	0	; () banked
  4181  002DF8  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;main.c: 2012: relay_pulse_timer[ 4 ] =
  4185                           ;main.c: 2013: Read_b_eep(0x43 + 26) * 256 +
  4186                           ;main.c: 2014: Read_b_eep(0x43 + 27);
  4187  002DFA  6A09               	clrf	?_Read_b_eep+1,c
  4188  002DFC  0E5E               	movlw	94
  4189  002DFE  6E08               	movwf	?_Read_b_eep,c
  4190  002E00  EC3D  F022         	call	_Read_b_eep	;wreg free
  4191  002E04  6E0B               	movwf	??_doActionPulse& (0+255),c
  4192  002E06  6A09               	clrf	?_Read_b_eep+1,c
  4193  002E08  0E5D               	movlw	93
  4194  002E0A  6E08               	movwf	?_Read_b_eep,c
  4195  002E0C  EC3D  F022         	call	_Read_b_eep	;wreg free
  4196  002E10  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4197  002E12  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4198  002E14  500B               	movf	??_doActionPulse,w,c
  4199  002E16  240C               	addwf	??_doActionPulse+1,w,c
  4200  002E18  0100               	movlb	0	; () banked
  4201  002E1A  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  4202  002E1C  0E00               	movlw	0
  4203  002E1E  200D               	addwfc	??_doActionPulse+2,w,c
  4204  002E20  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  4205                           
  4206                           ;main.c: 2015: break;
  4207  002E22  D040               	goto	l9403
  4208  002E24                     l506:
  4209                           
  4210                           ;main.c: 2018: LATCbits.LATC5 = 0;
  4211  002E24  9A8B               	bcf	3979,5,c	;volatile
  4212                           
  4213                           ;main.c: 2019: relay_pulse_flags |= 0x20;
  4214  002E26  0100               	movlb	0	; () banked
  4215  002E28  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;main.c: 2020: relay_pulse_timer[ 5 ] =
  4219                           ;main.c: 2021: Read_b_eep(0x43 + 28) * 256 +
  4220                           ;main.c: 2022: Read_b_eep(0x43 + 29);
  4221  002E2A  6A09               	clrf	?_Read_b_eep+1,c
  4222  002E2C  0E60               	movlw	96
  4223  002E2E  6E08               	movwf	?_Read_b_eep,c
  4224  002E30  EC3D  F022         	call	_Read_b_eep	;wreg free
  4225  002E34  6E0B               	movwf	??_doActionPulse& (0+255),c
  4226  002E36  6A09               	clrf	?_Read_b_eep+1,c
  4227  002E38  0E5F               	movlw	95
  4228  002E3A  6E08               	movwf	?_Read_b_eep,c
  4229  002E3C  EC3D  F022         	call	_Read_b_eep	;wreg free
  4230  002E40  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4231  002E42  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4232  002E44  500B               	movf	??_doActionPulse,w,c
  4233  002E46  240C               	addwf	??_doActionPulse+1,w,c
  4234  002E48  0100               	movlb	0	; () banked
  4235  002E4A  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  4236  002E4C  0E00               	movlw	0
  4237  002E4E  200D               	addwfc	??_doActionPulse+2,w,c
  4238  002E50  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  4239                           
  4240                           ;main.c: 2023: break;
  4241  002E52  D028               	goto	l9403
  4242  002E54                     l507:
  4243                           
  4244                           ;main.c: 2026: LATCbits.LATC4 = 0;
  4245  002E54  988B               	bcf	3979,4,c	;volatile
  4246                           
  4247                           ;main.c: 2027: relay_pulse_flags |= 0x40;
  4248  002E56  0100               	movlb	0	; () banked
  4249  002E58  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  4250                           
  4251                           ; BSR set to: 0
  4252                           ;main.c: 2028: relay_pulse_timer[ 6 ] =
  4253                           ;main.c: 2029: Read_b_eep(0x43 + 30) * 256 +
  4254                           ;main.c: 2030: Read_b_eep(0x43 + 31);
  4255  002E5A  6A09               	clrf	?_Read_b_eep+1,c
  4256  002E5C  0E62               	movlw	98
  4257  002E5E  6E08               	movwf	?_Read_b_eep,c
  4258  002E60  EC3D  F022         	call	_Read_b_eep	;wreg free
  4259  002E64  6E0B               	movwf	??_doActionPulse& (0+255),c
  4260  002E66  6A09               	clrf	?_Read_b_eep+1,c
  4261  002E68  0E61               	movlw	97
  4262  002E6A  6E08               	movwf	?_Read_b_eep,c
  4263  002E6C  EC3D  F022         	call	_Read_b_eep	;wreg free
  4264  002E70  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4265  002E72  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4266  002E74  500B               	movf	??_doActionPulse,w,c
  4267  002E76  240C               	addwf	??_doActionPulse+1,w,c
  4268  002E78  0100               	movlb	0	; () banked
  4269  002E7A  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  4270  002E7C  0E00               	movlw	0
  4271  002E7E  200D               	addwfc	??_doActionPulse+2,w,c
  4272  002E80  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  4273                           
  4274                           ;main.c: 2031: break;
  4275  002E82  D010               	goto	l9403
  4276  002E84                     l9401:
  4277  002E84  5010               	movf	doActionPulse@i,w,c
  4278                           
  4279                           ; Switch size 1, requested type "speed"
  4280                           ; Number of cases is 7, Range of values is 0 to 6
  4281                           ; switch strategies available:
  4282                           ; Name         Instructions Cycles
  4283                           ; simple_byte           22    12 (average)
  4284                           ;	Chosen strategy is simple_byte
  4285  002E86  E101 D755          	bz	l500
  4286  002E8A  0A01               	xorlw	1	; case 1
  4287  002E8C  E101 D76A          	bz	l502
  4288  002E90  0A03               	xorlw	3	; case 2
  4289  002E92  E080               	bz	l503
  4290  002E94  0A01               	xorlw	1	; case 3
  4291  002E96  E096               	bz	l504
  4292  002E98  0A07               	xorlw	7	; case 4
  4293  002E9A  E0AC               	bz	l505
  4294  002E9C  0A01               	xorlw	1	; case 5
  4295  002E9E  E0C2               	bz	l506
  4296  002EA0  0A03               	xorlw	3	; case 6
  4297  002EA2  E0D8               	bz	l507
  4298  002EA4                     l9403:
  4299  002EA4  2A10               	incf	doActionPulse@i,f,c
  4300  002EA6  0E07               	movlw	7
  4301  002EA8  6410               	cpfsgt	doActionPulse@i,c
  4302  002EAA  D704               	goto	l9353
  4303  002EAC  0C07               	retlw	7
  4304  002EAE                     __end_of_doActionPulse:
  4305                           	opt stack 0
  4306                           tblptru	equ	0xFF8
  4307                           prodh	equ	0xFF4
  4308                           prodl	equ	0xFF3
  4309                           postinc0	equ	0xFEE
  4310                           wreg	equ	0xFE8
  4311                           postinc2	equ	0xFDE
  4312                           postdec2	equ	0xFDD
  4313                           fsr2h	equ	0xFDA
  4314                           fsr2l	equ	0xFD9
  4315                           status	equ	0xFD8
  4316                           
  4317 ;; *************** function _doActionOn *****************
  4318 ;; Defined at:
  4319 ;;		line 1742 in file "../main.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;  dmflags         1    wreg     unsigned char 
  4322 ;;  arg             1   80[COMRAM] unsigned char 
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;  dmflags         1   25[BANK0 ] unsigned char 
  4325 ;;  i               1   27[BANK0 ] unsigned char 
  4326 ;;  val             1   26[BANK0 ] unsigned char 
  4327 ;; Return value:  Size  Location     Type
  4328 ;;		None               void
  4329 ;; Registers used:
  4330 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4331 ;; Tracked objects:
  4332 ;;		On entry : F/0
  4333 ;;		On exit  : F/0
  4334 ;;		Unchanged: 0/0
  4335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4336 ;;      Params:         1       0       0       0       0       0       0
  4337 ;;      Locals:         0       3       0       0       0       0       0
  4338 ;;      Temps:          0       3       0       0       0       0       0
  4339 ;;      Totals:         1       6       0       0       0       0       0
  4340 ;;Total ram usage:        7 bytes
  4341 ;; Hardware stack levels used:    1
  4342 ;; Hardware stack levels required when called:    7
  4343 ;; This function calls:
  4344 ;;		_Read_b_eep
  4345 ;;		_SendInformationEvent
  4346 ;; This function is called by:
  4347 ;;		_doDM
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           	psect	text13
  4352  002806                     __ptext13:
  4353                           	opt stack 0
  4354  002806                     _doActionOn:
  4355                           	opt stack 22
  4356                           
  4357                           ;incstack = 0
  4358                           ;incstack = 0
  4359                           ;doActionOn@dmflags stored from wreg
  4360  002806  CFE8 F0CA          	movff	wreg,doActionOn@dmflags
  4361                           
  4362                           ; BSR set to: 0
  4363                           ;main.c: 1744: unsigned char i;
  4364                           ;main.c: 1745: unsigned char val;
  4365                           ;main.c: 1747: for (i = 0; i < 8; i++) {
  4366  00280A  6BCC               	clrf	doActionOn@i& (0+255),b
  4367  00280C                     l11121:
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;main.c: 1750: if ( !( arg & ( 1 << i ) ) ) continue;
  4371  00280C  C0CC  F0C7         	movff	doActionOn@i,??_doActionOn
  4372  002810  0E01               	movlw	1
  4373  002812  6FC8               	movwf	(??_doActionOn+1)& (0+255),b
  4374  002814  2BC7               	incf	??_doActionOn& (0+255),f,b
  4375  002816  D002               	goto	u13214
  4376  002818                     u13215:
  4377  002818  90D8               	bcf	status,0,c
  4378  00281A  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4379  00281C                     u13214:
  4380  00281C  2FC7               	decfsz	??_doActionOn& (0+255),f,b
  4381  00281E  D7FC               	goto	u13215
  4382  002820  51C8               	movf	(??_doActionOn+1)& (0+255),w,b
  4383  002822  1451               	andwf	doActionOn@arg,w,c
  4384  002824  E101 D137          	bz	l11177
  4385                           
  4386                           ; BSR set to: 0
  4387                           ;main.c: 1753: if ( dmflags & 0x10 ) {
  4388  002828  A9CA               	btfss	doActionOn@dmflags& (0+255),4,b
  4389  00282A  D011               	goto	l441
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;main.c: 1754: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  4393  00282C  90D8               	bcf	status,0,c
  4394  00282E  35CC               	rlcf	doActionOn@i& (0+255),w,b
  4395  002830  6FC7               	movwf	??_doActionOn& (0+255),b
  4396  002832  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4397  002834  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4398  002836  0E75               	movlw	117
  4399  002838  25C7               	addwf	??_doActionOn& (0+255),w,b
  4400  00283A  6E08               	movwf	?_Read_b_eep,c
  4401  00283C  0E00               	movlw	0
  4402  00283E  21C8               	addwfc	(??_doActionOn+1)& (0+255),w,b
  4403  002840  6E09               	movwf	?_Read_b_eep+1,c
  4404  002842  EC3D  F022         	call	_Read_b_eep	;wreg free
  4405  002846  0100               	movlb	0	; () banked
  4406  002848  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4407  00284A  E001 D124          	bnz	l11177
  4408  00284E                     l441:
  4409                           
  4410                           ; BSR set to: 0
  4411                           ;main.c: 1757: }
  4412                           ;main.c: 1758: }
  4413                           ;main.c: 1761: if ( dmflags & 0x08 ) {
  4414  00284E  A7CA               	btfss	doActionOn@dmflags& (0+255),3,b
  4415  002850  D011               	goto	l11133
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;main.c: 1762: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  4419  002852  90D8               	bcf	status,0,c
  4420  002854  35CC               	rlcf	doActionOn@i& (0+255),w,b
  4421  002856  6FC7               	movwf	??_doActionOn& (0+255),b
  4422  002858  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4423  00285A  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4424  00285C  0E76               	movlw	118
  4425  00285E  25C7               	addwf	??_doActionOn& (0+255),w,b
  4426  002860  6E08               	movwf	?_Read_b_eep,c
  4427  002862  0E00               	movlw	0
  4428  002864  21C8               	addwfc	(??_doActionOn+1)& (0+255),w,b
  4429  002866  6E09               	movwf	?_Read_b_eep+1,c
  4430  002868  EC3D  F022         	call	_Read_b_eep	;wreg free
  4431  00286C  0100               	movlb	0	; () banked
  4432  00286E  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4433  002870  E001 D111          	bnz	l11177
  4434  002874                     l11133:
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;main.c: 1765: }
  4438                           ;main.c: 1766: }
  4439                           ;main.c: 1768: val = Read_b_eep(0x43 + 10 + i);
  4440  002874  0E4D               	movlw	77
  4441  002876  25CC               	addwf	doActionOn@i& (0+255),w,b
  4442  002878  6E08               	movwf	?_Read_b_eep,c
  4443  00287A  6A09               	clrf	?_Read_b_eep+1,c
  4444  00287C  0E00               	movlw	0
  4445  00287E  2209               	addwfc	?_Read_b_eep+1,f,c
  4446  002880  EC3D  F022         	call	_Read_b_eep	;wreg free
  4447  002884  0100               	movlb	0	; () banked
  4448  002886  6FCB               	movwf	doActionOn@val& (0+255),b
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;main.c: 1771: if ( !( val & 0x80 ) ) continue;
  4452  002888  AFCB               	btfss	doActionOn@val& (0+255),7,b
  4453  00288A  D105               	goto	l11177
  4454  00288C  D0E0               	goto	l11169
  4455  00288E                     l447:
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;main.c: 1776: LATBbits.LATB4 = 1;
  4459  00288E  888A               	bsf	3978,4,c	;volatile
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;main.c: 1778: if (Read_b_eep(0x43 + 10) & 0x04 ) {
  4463  002890  6A09               	clrf	?_Read_b_eep+1,c
  4464  002892  0E4D               	movlw	77
  4465  002894  6E08               	movwf	?_Read_b_eep,c
  4466  002896  EC3D  F022         	call	_Read_b_eep	;wreg free
  4467  00289A  0100               	movlb	0	; () banked
  4468  00289C  6FC7               	movwf	??_doActionOn& (0+255),b
  4469  00289E  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4470  0028A0  D0E8               	goto	l449
  4471                           
  4472                           ; BSR set to: 0
  4473                           ;main.c: 1779: relay_protection_timer[ 0 ] =
  4474                           ;main.c: 1780: Read_b_eep(0x43 + 34) * 256 +
  4475                           ;main.c: 1781: Read_b_eep(0x43 + 35);
  4476  0028A2  6A09               	clrf	?_Read_b_eep+1,c
  4477  0028A4  0E66               	movlw	102
  4478  0028A6  6E08               	movwf	?_Read_b_eep,c
  4479  0028A8  EC3D  F022         	call	_Read_b_eep	;wreg free
  4480  0028AC  0100               	movlb	0	; () banked
  4481  0028AE  6FC7               	movwf	??_doActionOn& (0+255),b
  4482  0028B0  6A09               	clrf	?_Read_b_eep+1,c
  4483  0028B2  0E65               	movlw	101
  4484  0028B4  6E08               	movwf	?_Read_b_eep,c
  4485  0028B6  EC3D  F022         	call	_Read_b_eep	;wreg free
  4486  0028BA  0100               	movlb	0	; () banked
  4487  0028BC  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4488  0028BE  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4489  0028C0  51C7               	movf	??_doActionOn& (0+255),w,b
  4490  0028C2  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4491  0028C4  6F60               	movwf	_relay_protection_timer& (0+255),b
  4492  0028C6  0E00               	movlw	0
  4493  0028C8  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4494  0028CA  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  4495  0028CC  D0D2               	goto	l449
  4496  0028CE                     l450:
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;main.c: 1786: LATBbits.LATB1 = 1;
  4500  0028CE  828A               	bsf	3978,1,c	;volatile
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;main.c: 1788: if (Read_b_eep(0x43 + 11) & 0x04 ) {
  4504  0028D0  6A09               	clrf	?_Read_b_eep+1,c
  4505  0028D2  0E4E               	movlw	78
  4506  0028D4  6E08               	movwf	?_Read_b_eep,c
  4507  0028D6  EC3D  F022         	call	_Read_b_eep	;wreg free
  4508  0028DA  0100               	movlb	0	; () banked
  4509  0028DC  6FC7               	movwf	??_doActionOn& (0+255),b
  4510  0028DE  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4511  0028E0  D0C8               	goto	l449
  4512                           
  4513                           ; BSR set to: 0
  4514                           ;main.c: 1789: relay_protection_timer[ 1 ] =
  4515                           ;main.c: 1790: Read_b_eep(0x43 + 36) * 256 +
  4516                           ;main.c: 1791: Read_b_eep(0x43 + 37);
  4517  0028E2  6A09               	clrf	?_Read_b_eep+1,c
  4518  0028E4  0E68               	movlw	104
  4519  0028E6  6E08               	movwf	?_Read_b_eep,c
  4520  0028E8  EC3D  F022         	call	_Read_b_eep	;wreg free
  4521  0028EC  0100               	movlb	0	; () banked
  4522  0028EE  6FC7               	movwf	??_doActionOn& (0+255),b
  4523  0028F0  6A09               	clrf	?_Read_b_eep+1,c
  4524  0028F2  0E67               	movlw	103
  4525  0028F4  6E08               	movwf	?_Read_b_eep,c
  4526  0028F6  EC3D  F022         	call	_Read_b_eep	;wreg free
  4527  0028FA  0100               	movlb	0	; () banked
  4528  0028FC  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4529  0028FE  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4530  002900  51C7               	movf	??_doActionOn& (0+255),w,b
  4531  002902  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4532  002904  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  4533  002906  0E00               	movlw	0
  4534  002908  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4535  00290A  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  4536  00290C  D0B2               	goto	l449
  4537  00290E                     l452:
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;main.c: 1796: LATBbits.LATB0 = 1;
  4541  00290E  808A               	bsf	3978,0,c	;volatile
  4542                           
  4543                           ; BSR set to: 0
  4544                           ;main.c: 1798: if (Read_b_eep(0x43 + 12) & 0x04 ) {
  4545  002910  6A09               	clrf	?_Read_b_eep+1,c
  4546  002912  0E4F               	movlw	79
  4547  002914  6E08               	movwf	?_Read_b_eep,c
  4548  002916  EC3D  F022         	call	_Read_b_eep	;wreg free
  4549  00291A  0100               	movlb	0	; () banked
  4550  00291C  6FC7               	movwf	??_doActionOn& (0+255),b
  4551  00291E  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4552  002920  D0A8               	goto	l449
  4553                           
  4554                           ; BSR set to: 0
  4555                           ;main.c: 1799: relay_protection_timer[ 2 ] =
  4556                           ;main.c: 1800: Read_b_eep(0x43 + 38) * 256 +
  4557                           ;main.c: 1801: Read_b_eep(0x43 + 39);
  4558  002922  6A09               	clrf	?_Read_b_eep+1,c
  4559  002924  0E6A               	movlw	106
  4560  002926  6E08               	movwf	?_Read_b_eep,c
  4561  002928  EC3D  F022         	call	_Read_b_eep	;wreg free
  4562  00292C  0100               	movlb	0	; () banked
  4563  00292E  6FC7               	movwf	??_doActionOn& (0+255),b
  4564  002930  6A09               	clrf	?_Read_b_eep+1,c
  4565  002932  0E69               	movlw	105
  4566  002934  6E08               	movwf	?_Read_b_eep,c
  4567  002936  EC3D  F022         	call	_Read_b_eep	;wreg free
  4568  00293A  0100               	movlb	0	; () banked
  4569  00293C  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4570  00293E  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4571  002940  51C7               	movf	??_doActionOn& (0+255),w,b
  4572  002942  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4573  002944  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  4574  002946  0E00               	movlw	0
  4575  002948  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4576  00294A  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  4577  00294C  D092               	goto	l449
  4578  00294E                     l454:
  4579                           
  4580                           ; BSR set to: 0
  4581                           ;main.c: 1806: LATCbits.LATC7 = 1;
  4582  00294E  8E8B               	bsf	3979,7,c	;volatile
  4583                           
  4584                           ; BSR set to: 0
  4585                           ;main.c: 1808: if ( Read_b_eep(0x43 + 13) & 0x04 ) {
  4586  002950  6A09               	clrf	?_Read_b_eep+1,c
  4587  002952  0E50               	movlw	80
  4588  002954  6E08               	movwf	?_Read_b_eep,c
  4589  002956  EC3D  F022         	call	_Read_b_eep	;wreg free
  4590  00295A  0100               	movlb	0	; () banked
  4591  00295C  6FC7               	movwf	??_doActionOn& (0+255),b
  4592  00295E  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4593  002960  D088               	goto	l449
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;main.c: 1809: relay_protection_timer[ 3 ] =
  4597                           ;main.c: 1810: Read_b_eep(0x43 + 40) * 256 +
  4598                           ;main.c: 1811: Read_b_eep(0x43 + 41);
  4599  002962  6A09               	clrf	?_Read_b_eep+1,c
  4600  002964  0E6C               	movlw	108
  4601  002966  6E08               	movwf	?_Read_b_eep,c
  4602  002968  EC3D  F022         	call	_Read_b_eep	;wreg free
  4603  00296C  0100               	movlb	0	; () banked
  4604  00296E  6FC7               	movwf	??_doActionOn& (0+255),b
  4605  002970  6A09               	clrf	?_Read_b_eep+1,c
  4606  002972  0E6B               	movlw	107
  4607  002974  6E08               	movwf	?_Read_b_eep,c
  4608  002976  EC3D  F022         	call	_Read_b_eep	;wreg free
  4609  00297A  0100               	movlb	0	; () banked
  4610  00297C  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4611  00297E  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4612  002980  51C7               	movf	??_doActionOn& (0+255),w,b
  4613  002982  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4614  002984  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  4615  002986  0E00               	movlw	0
  4616  002988  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4617  00298A  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  4618  00298C  D072               	goto	l449
  4619  00298E                     l456:
  4620                           
  4621                           ; BSR set to: 0
  4622                           ;main.c: 1816: LATCbits.LATC6 = 1;
  4623  00298E  8C8B               	bsf	3979,6,c	;volatile
  4624                           
  4625                           ; BSR set to: 0
  4626                           ;main.c: 1818: if (Read_b_eep(0x43 + 14) & 0x04 ) {
  4627  002990  6A09               	clrf	?_Read_b_eep+1,c
  4628  002992  0E51               	movlw	81
  4629  002994  6E08               	movwf	?_Read_b_eep,c
  4630  002996  EC3D  F022         	call	_Read_b_eep	;wreg free
  4631  00299A  0100               	movlb	0	; () banked
  4632  00299C  6FC7               	movwf	??_doActionOn& (0+255),b
  4633  00299E  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4634  0029A0  D068               	goto	l449
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;main.c: 1819: relay_protection_timer[ 4 ] =
  4638                           ;main.c: 1820: Read_b_eep(0x43 + 42) * 256 +
  4639                           ;main.c: 1821: Read_b_eep(0x43 + 43);
  4640  0029A2  6A09               	clrf	?_Read_b_eep+1,c
  4641  0029A4  0E6E               	movlw	110
  4642  0029A6  6E08               	movwf	?_Read_b_eep,c
  4643  0029A8  EC3D  F022         	call	_Read_b_eep	;wreg free
  4644  0029AC  0100               	movlb	0	; () banked
  4645  0029AE  6FC7               	movwf	??_doActionOn& (0+255),b
  4646  0029B0  6A09               	clrf	?_Read_b_eep+1,c
  4647  0029B2  0E6D               	movlw	109
  4648  0029B4  6E08               	movwf	?_Read_b_eep,c
  4649  0029B6  EC3D  F022         	call	_Read_b_eep	;wreg free
  4650  0029BA  0100               	movlb	0	; () banked
  4651  0029BC  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4652  0029BE  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4653  0029C0  51C7               	movf	??_doActionOn& (0+255),w,b
  4654  0029C2  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4655  0029C4  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  4656  0029C6  0E00               	movlw	0
  4657  0029C8  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4658  0029CA  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  4659  0029CC  D052               	goto	l449
  4660  0029CE                     l458:
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;main.c: 1826: LATCbits.LATC5 = 1;
  4664  0029CE  8A8B               	bsf	3979,5,c	;volatile
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;main.c: 1828: if (Read_b_eep(0x43 + 15) & 0x04) {
  4668  0029D0  6A09               	clrf	?_Read_b_eep+1,c
  4669  0029D2  0E52               	movlw	82
  4670  0029D4  6E08               	movwf	?_Read_b_eep,c
  4671  0029D6  EC3D  F022         	call	_Read_b_eep	;wreg free
  4672  0029DA  0100               	movlb	0	; () banked
  4673  0029DC  6FC7               	movwf	??_doActionOn& (0+255),b
  4674  0029DE  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4675  0029E0  D048               	goto	l449
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;main.c: 1829: relay_protection_timer[ 5 ] =
  4679                           ;main.c: 1830: Read_b_eep(0x43 + 44) * 256 +
  4680                           ;main.c: 1831: Read_b_eep(0x43 + 45);
  4681  0029E2  6A09               	clrf	?_Read_b_eep+1,c
  4682  0029E4  0E70               	movlw	112
  4683  0029E6  6E08               	movwf	?_Read_b_eep,c
  4684  0029E8  EC3D  F022         	call	_Read_b_eep	;wreg free
  4685  0029EC  0100               	movlb	0	; () banked
  4686  0029EE  6FC7               	movwf	??_doActionOn& (0+255),b
  4687  0029F0  6A09               	clrf	?_Read_b_eep+1,c
  4688  0029F2  0E6F               	movlw	111
  4689  0029F4  6E08               	movwf	?_Read_b_eep,c
  4690  0029F6  EC3D  F022         	call	_Read_b_eep	;wreg free
  4691  0029FA  0100               	movlb	0	; () banked
  4692  0029FC  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4693  0029FE  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4694  002A00  51C7               	movf	??_doActionOn& (0+255),w,b
  4695  002A02  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4696  002A04  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  4697  002A06  0E00               	movlw	0
  4698  002A08  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4699  002A0A  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  4700  002A0C  D032               	goto	l449
  4701  002A0E                     l460:
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;main.c: 1836: LATCbits.LATC4 = 1;
  4705  002A0E  888B               	bsf	3979,4,c	;volatile
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;main.c: 1838: if ( Read_b_eep(0x43 + 16) & 0x04) {
  4709  002A10  6A09               	clrf	?_Read_b_eep+1,c
  4710  002A12  0E53               	movlw	83
  4711  002A14  6E08               	movwf	?_Read_b_eep,c
  4712  002A16  EC3D  F022         	call	_Read_b_eep	;wreg free
  4713  002A1A  0100               	movlb	0	; () banked
  4714  002A1C  6FC7               	movwf	??_doActionOn& (0+255),b
  4715  002A1E  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4716  002A20  D028               	goto	l449
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;main.c: 1839: relay_protection_timer[ 6 ] =
  4720                           ;main.c: 1840: Read_b_eep(0x43 + 46) * 256 +
  4721                           ;main.c: 1841: Read_b_eep(0x43 + 47);
  4722  002A22  6A09               	clrf	?_Read_b_eep+1,c
  4723  002A24  0E72               	movlw	114
  4724  002A26  6E08               	movwf	?_Read_b_eep,c
  4725  002A28  EC3D  F022         	call	_Read_b_eep	;wreg free
  4726  002A2C  0100               	movlb	0	; () banked
  4727  002A2E  6FC7               	movwf	??_doActionOn& (0+255),b
  4728  002A30  6A09               	clrf	?_Read_b_eep+1,c
  4729  002A32  0E71               	movlw	113
  4730  002A34  6E08               	movwf	?_Read_b_eep,c
  4731  002A36  EC3D  F022         	call	_Read_b_eep	;wreg free
  4732  002A3A  0100               	movlb	0	; () banked
  4733  002A3C  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4734  002A3E  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4735  002A40  51C7               	movf	??_doActionOn& (0+255),w,b
  4736  002A42  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4737  002A44  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  4738  002A46  0E00               	movlw	0
  4739  002A48  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4740  002A4A  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  4741  002A4C  D012               	goto	l449
  4742  002A4E                     l11169:
  4743                           
  4744                           ; BSR set to: 0
  4745  002A4E  51CC               	movf	doActionOn@i& (0+255),w,b
  4746                           
  4747                           ; Switch size 1, requested type "speed"
  4748                           ; Number of cases is 7, Range of values is 0 to 6
  4749                           ; switch strategies available:
  4750                           ; Name         Instructions Cycles
  4751                           ; simple_byte           22    12 (average)
  4752                           ;	Chosen strategy is simple_byte
  4753  002A50  E101 D71D          	bz	l447
  4754  002A54  0A01               	xorlw	1	; case 1
  4755  002A56  E101 D73A          	bz	l450
  4756  002A5A  0A03               	xorlw	3	; case 2
  4757  002A5C  E101 D757          	bz	l452
  4758  002A60  0A01               	xorlw	1	; case 3
  4759  002A62  E101 D774          	bz	l454
  4760  002A66  0A07               	xorlw	7	; case 4
  4761  002A68  E092               	bz	l456
  4762  002A6A  0A01               	xorlw	1	; case 5
  4763  002A6C  E0B0               	bz	l458
  4764  002A6E  0A03               	xorlw	3	; case 6
  4765  002A70  E0CE               	bz	l460
  4766  002A72                     l449:
  4767                           
  4768                           ; BSR set to: 0
  4769                           ;main.c: 1848: if ( val & 0x08 ) {
  4770  002A72  A7CB               	btfss	doActionOn@val& (0+255),3,b
  4771  002A74  D007               	goto	l11173
  4772                           
  4773                           ; BSR set to: 0
  4774                           ;main.c: 1849: SendInformationEvent( i, 20, 3 );
  4775  002A76  0E14               	movlw	20
  4776  002A78  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4777  002A7A  0E03               	movlw	3
  4778  002A7C  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4779  002A7E  51CC               	movf	doActionOn@i& (0+255),w,b
  4780  002A80  EC99  F01F         	call	_SendInformationEvent
  4781  002A84                     l11173:
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;main.c: 1850: }
  4785                           ;main.c: 1853: if ( val & 0x20 ) {
  4786  002A84  ABCB               	btfss	doActionOn@val& (0+255),5,b
  4787  002A86  D007               	goto	l11177
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;main.c: 1854: SendInformationEvent( i, 20, 25 );
  4791  002A88  0E14               	movlw	20
  4792  002A8A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4793  002A8C  0E19               	movlw	25
  4794  002A8E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4795  002A90  51CC               	movf	doActionOn@i& (0+255),w,b
  4796  002A92  EC99  F01F         	call	_SendInformationEvent
  4797  002A96                     l11177:
  4798                           
  4799                           ; BSR set to: 0
  4800  002A96  2BCC               	incf	doActionOn@i& (0+255),f,b
  4801                           
  4802                           ; BSR set to: 0
  4803  002A98  0E07               	movlw	7
  4804  002A9A  65CC               	cpfsgt	doActionOn@i& (0+255),b
  4805  002A9C  D6B7               	goto	l11121
  4806                           
  4807                           ; BSR set to: 0
  4808  002A9E  0C07               	retlw	7
  4809  002AA0                     __end_of_doActionOn:
  4810                           	opt stack 0
  4811                           tblptru	equ	0xFF8
  4812                           prodh	equ	0xFF4
  4813                           prodl	equ	0xFF3
  4814                           postinc0	equ	0xFEE
  4815                           wreg	equ	0xFE8
  4816                           postinc2	equ	0xFDE
  4817                           postdec2	equ	0xFDD
  4818                           fsr2h	equ	0xFDA
  4819                           fsr2l	equ	0xFD9
  4820                           status	equ	0xFD8
  4821                           
  4822 ;; *************** function _doActionOff *****************
  4823 ;; Defined at:
  4824 ;;		line 1864 in file "../main.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;  dmflags         1    wreg     unsigned char 
  4827 ;;  arg             1   80[COMRAM] unsigned char 
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;  dmflags         1   24[BANK0 ] unsigned char 
  4830 ;;  i               1   26[BANK0 ] unsigned char 
  4831 ;;  val             1   25[BANK0 ] unsigned char 
  4832 ;; Return value:  Size  Location     Type
  4833 ;;		None               void
  4834 ;; Registers used:
  4835 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4836 ;; Tracked objects:
  4837 ;;		On entry : F/0
  4838 ;;		On exit  : F/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4841 ;;      Params:         1       0       0       0       0       0       0
  4842 ;;      Locals:         0       3       0       0       0       0       0
  4843 ;;      Temps:          0       2       0       0       0       0       0
  4844 ;;      Totals:         1       5       0       0       0       0       0
  4845 ;;Total ram usage:        6 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:    7
  4848 ;; This function calls:
  4849 ;;		_Read_b_eep
  4850 ;;		_SendInformationEvent
  4851 ;; This function is called by:
  4852 ;;		_doApplicationOneSecondWork
  4853 ;;		_doDM
  4854 ;; This function uses a non-reentrant model
  4855 ;;
  4856                           
  4857                           	psect	text14
  4858  00391C                     __ptext14:
  4859                           	opt stack 0
  4860  00391C                     _doActionOff:
  4861                           	opt stack 22
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;incstack = 0
  4865                           ;incstack = 0
  4866                           ;doActionOff@dmflags stored from wreg
  4867  00391C  CFE8 F0C9          	movff	wreg,doActionOff@dmflags
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;main.c: 1866: unsigned char i;
  4871                           ;main.c: 1867: unsigned char val;
  4872                           ;main.c: 1869: for ( i = 0; i < 8; i++ ) {
  4873  003920  6BCB               	clrf	doActionOff@i& (0+255),b
  4874  003922                     l10627:
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;main.c: 1872: if ( !( arg & ( 1 << i ) ) ) continue;
  4878  003922  C0CB  F0C7         	movff	doActionOff@i,??_doActionOff
  4879  003926  0E01               	movlw	1
  4880  003928  6FC8               	movwf	(??_doActionOff+1)& (0+255),b
  4881  00392A  2BC7               	incf	??_doActionOff& (0+255),f,b
  4882  00392C  D002               	goto	u12554
  4883  00392E                     u12555:
  4884  00392E  90D8               	bcf	status,0,c
  4885  003930  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4886  003932                     u12554:
  4887  003932  2FC7               	decfsz	??_doActionOff& (0+255),f,b
  4888  003934  D7FC               	goto	u12555
  4889  003936  51C8               	movf	(??_doActionOff+1)& (0+255),w,b
  4890  003938  1451               	andwf	doActionOff@arg,w,c
  4891  00393A  E05F               	bz	l10655
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;main.c: 1875: if ( dmflags & 0x10 ) {
  4895  00393C  A9C9               	btfss	doActionOff@dmflags& (0+255),4,b
  4896  00393E  D010               	goto	l471
  4897                           
  4898                           ; BSR set to: 0
  4899                           ;main.c: 1876: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  4900  003940  90D8               	bcf	status,0,c
  4901  003942  35CB               	rlcf	doActionOff@i& (0+255),w,b
  4902  003944  6FC7               	movwf	??_doActionOff& (0+255),b
  4903  003946  6BC8               	clrf	(??_doActionOff+1)& (0+255),b
  4904  003948  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4905  00394A  0E75               	movlw	117
  4906  00394C  25C7               	addwf	??_doActionOff& (0+255),w,b
  4907  00394E  6E08               	movwf	?_Read_b_eep,c
  4908  003950  0E00               	movlw	0
  4909  003952  21C8               	addwfc	(??_doActionOff+1)& (0+255),w,b
  4910  003954  6E09               	movwf	?_Read_b_eep+1,c
  4911  003956  EC3D  F022         	call	_Read_b_eep	;wreg free
  4912  00395A  0100               	movlb	0	; () banked
  4913  00395C  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4914  00395E  E14D               	bnz	l10655
  4915  003960                     l471:
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;main.c: 1879: }
  4919                           ;main.c: 1880: }
  4920                           ;main.c: 1883: if ( dmflags & 0x08 ) {
  4921  003960  A7C9               	btfss	doActionOff@dmflags& (0+255),3,b
  4922  003962  D010               	goto	l10639
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;main.c: 1884: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  4926  003964  90D8               	bcf	status,0,c
  4927  003966  35CB               	rlcf	doActionOff@i& (0+255),w,b
  4928  003968  6FC7               	movwf	??_doActionOff& (0+255),b
  4929  00396A  6BC8               	clrf	(??_doActionOff+1)& (0+255),b
  4930  00396C  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4931  00396E  0E76               	movlw	118
  4932  003970  25C7               	addwf	??_doActionOff& (0+255),w,b
  4933  003972  6E08               	movwf	?_Read_b_eep,c
  4934  003974  0E00               	movlw	0
  4935  003976  21C8               	addwfc	(??_doActionOff+1)& (0+255),w,b
  4936  003978  6E09               	movwf	?_Read_b_eep+1,c
  4937  00397A  EC3D  F022         	call	_Read_b_eep	;wreg free
  4938  00397E  0100               	movlb	0	; () banked
  4939  003980  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4940  003982  E13B               	bnz	l10655
  4941  003984                     l10639:
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;main.c: 1887: }
  4945                           ;main.c: 1888: }
  4946                           ;main.c: 1890: val = Read_b_eep(0x43 + 10 + i);
  4947  003984  0E4D               	movlw	77
  4948  003986  25CB               	addwf	doActionOff@i& (0+255),w,b
  4949  003988  6E08               	movwf	?_Read_b_eep,c
  4950  00398A  6A09               	clrf	?_Read_b_eep+1,c
  4951  00398C  0E00               	movlw	0
  4952  00398E  2209               	addwfc	?_Read_b_eep+1,f,c
  4953  003990  EC3D  F022         	call	_Read_b_eep	;wreg free
  4954  003994  0100               	movlb	0	; () banked
  4955  003996  6FCA               	movwf	doActionOff@val& (0+255),b
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;main.c: 1893: if ( !( val & 0x80 ) ) continue;
  4959  003998  AFCA               	btfss	doActionOff@val& (0+255),7,b
  4960  00399A  D02F               	goto	l10655
  4961  00399C  D00E               	goto	l10647
  4962  00399E                     l477:
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;main.c: 1898: LATBbits.LATB4 = 0;
  4966  00399E  988A               	bcf	3978,4,c	;volatile
  4967                           
  4968                           ;main.c: 1899: break;
  4969  0039A0  D01A               	goto	l478
  4970  0039A2                     l479:
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;main.c: 1902: LATBbits.LATB1 = 0;
  4974  0039A2  928A               	bcf	3978,1,c	;volatile
  4975                           
  4976                           ;main.c: 1903: break;
  4977  0039A4  D018               	goto	l478
  4978  0039A6                     l480:
  4979                           
  4980                           ; BSR set to: 0
  4981                           ;main.c: 1906: LATBbits.LATB0 = 0;
  4982  0039A6  908A               	bcf	3978,0,c	;volatile
  4983                           
  4984                           ;main.c: 1907: break;
  4985  0039A8  D016               	goto	l478
  4986  0039AA                     l481:
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;main.c: 1910: LATCbits.LATC7 = 0;
  4990  0039AA  9E8B               	bcf	3979,7,c	;volatile
  4991                           
  4992                           ;main.c: 1911: break;
  4993  0039AC  D014               	goto	l478
  4994  0039AE                     l482:
  4995                           
  4996                           ; BSR set to: 0
  4997                           ;main.c: 1914: LATCbits.LATC6 = 0;
  4998  0039AE  9C8B               	bcf	3979,6,c	;volatile
  4999                           
  5000                           ;main.c: 1915: break;
  5001  0039B0  D012               	goto	l478
  5002  0039B2                     l483:
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;main.c: 1918: LATCbits.LATC5 = 0;
  5006  0039B2  9A8B               	bcf	3979,5,c	;volatile
  5007                           
  5008                           ;main.c: 1919: break;
  5009  0039B4  D010               	goto	l478
  5010  0039B6                     l484:
  5011                           
  5012                           ; BSR set to: 0
  5013                           ;main.c: 1922: LATCbits.LATC4 = 0;
  5014  0039B6  988B               	bcf	3979,4,c	;volatile
  5015                           
  5016                           ;main.c: 1923: break;
  5017  0039B8  D00E               	goto	l478
  5018  0039BA                     l10647:
  5019                           
  5020                           ; BSR set to: 0
  5021  0039BA  51CB               	movf	doActionOff@i& (0+255),w,b
  5022                           
  5023                           ; Switch size 1, requested type "speed"
  5024                           ; Number of cases is 7, Range of values is 0 to 6
  5025                           ; switch strategies available:
  5026                           ; Name         Instructions Cycles
  5027                           ; simple_byte           22    12 (average)
  5028                           ;	Chosen strategy is simple_byte
  5029  0039BC  E0F0               	bz	l477
  5030  0039BE  0A01               	xorlw	1	; case 1
  5031  0039C0  E0F0               	bz	l479
  5032  0039C2  0A03               	xorlw	3	; case 2
  5033  0039C4  E0F0               	bz	l480
  5034  0039C6  0A01               	xorlw	1	; case 3
  5035  0039C8  E0F0               	bz	l481
  5036  0039CA  0A07               	xorlw	7	; case 4
  5037  0039CC  E0F0               	bz	l482
  5038  0039CE  0A01               	xorlw	1	; case 5
  5039  0039D0  E0F0               	bz	l483
  5040  0039D2  0A03               	xorlw	3	; case 6
  5041  0039D4  E0F0               	bz	l484
  5042  0039D6                     l478:
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;main.c: 1928: if ( val & 0x10 ) {
  5046  0039D6  A9CA               	btfss	doActionOff@val& (0+255),4,b
  5047  0039D8  D007               	goto	l10651
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;main.c: 1929: SendInformationEvent( i, 20, 4 );
  5051  0039DA  0E14               	movlw	20
  5052  0039DC  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  5053  0039DE  0E04               	movlw	4
  5054  0039E0  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5055  0039E2  51CB               	movf	doActionOff@i& (0+255),w,b
  5056  0039E4  EC99  F01F         	call	_SendInformationEvent
  5057  0039E8                     l10651:
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;main.c: 1930: }
  5061                           ;main.c: 1933: if ( val & 0x40 ) {
  5062  0039E8  ADCA               	btfss	doActionOff@val& (0+255),6,b
  5063  0039EA  D007               	goto	l10655
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;main.c: 1934: SendInformationEvent( i, 20, 24 );
  5067  0039EC  0E14               	movlw	20
  5068  0039EE  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  5069  0039F0  0E18               	movlw	24
  5070  0039F2  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5071  0039F4  51CB               	movf	doActionOff@i& (0+255),w,b
  5072  0039F6  EC99  F01F         	call	_SendInformationEvent
  5073  0039FA                     l10655:
  5074                           
  5075                           ; BSR set to: 0
  5076  0039FA  2BCB               	incf	doActionOff@i& (0+255),f,b
  5077                           
  5078                           ; BSR set to: 0
  5079  0039FC  0E07               	movlw	7
  5080  0039FE  65CB               	cpfsgt	doActionOff@i& (0+255),b
  5081  003A00  D790               	goto	l10627
  5082                           
  5083                           ; BSR set to: 0
  5084  003A02  0C07               	retlw	7
  5085  003A04                     __end_of_doActionOff:
  5086                           	opt stack 0
  5087                           tblptru	equ	0xFF8
  5088                           prodh	equ	0xFF4
  5089                           prodl	equ	0xFF3
  5090                           postinc0	equ	0xFEE
  5091                           wreg	equ	0xFE8
  5092                           postinc2	equ	0xFDE
  5093                           postdec2	equ	0xFDD
  5094                           fsr2h	equ	0xFDA
  5095                           fsr2l	equ	0xFD9
  5096                           status	equ	0xFD8
  5097                           
  5098 ;; *************** function _vscp_handleProtocolEvent *****************
  5099 ;; Defined at:
  5100 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  5101 ;; Parameters:    Size  Location     Type
  5102 ;;		None
  5103 ;; Auto vars:     Size  Location     Type
  5104 ;;  bytes           1   45[BANK0 ] unsigned char 
  5105 ;;  page_save       2   41[BANK0 ] unsigned short 
  5106 ;;  i               1   51[BANK0 ] unsigned char 
  5107 ;;  bytes           2   55[BANK0 ] unsigned short 
  5108 ;;  page_save       2   39[BANK0 ] unsigned short 
  5109 ;;  byte            1   54[BANK0 ] unsigned char 
  5110 ;;  cb              1   50[BANK0 ] unsigned char 
  5111 ;;  bytes_this_t    1   49[BANK0 ] unsigned char 
  5112 ;;  j               1   59[BANK0 ] unsigned char 
  5113 ;;  i               1   57[BANK0 ] unsigned char 
  5114 ;;  k               1   52[BANK0 ] unsigned char 
  5115 ;;  i               1   53[BANK0 ] unsigned char 
  5116 ;;  len             1   48[BANK0 ] unsigned char 
  5117 ;;  pos             1   47[BANK0 ] unsigned char 
  5118 ;;  i               1   58[BANK0 ] unsigned char 
  5119 ;;  len             1   46[BANK0 ] unsigned char 
  5120 ;;  pos             1   44[BANK0 ] unsigned char 
  5121 ;;  offset          1   43[BANK0 ] unsigned char 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;		None               void
  5124 ;; Registers used:
  5125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5126 ;; Tracked objects:
  5127 ;;		On entry : F/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5131 ;;      Params:         0       0       0       0       0       0       0
  5132 ;;      Locals:         0      21       0       0       0       0       0
  5133 ;;      Temps:          0       7       0       0       0       0       0
  5134 ;;      Totals:         0      28       0       0       0       0       0
  5135 ;;Total ram usage:       28 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:    9
  5138 ;; This function calls:
  5139 ;;		_vscp_init
  5140 ;;		_vscp_readAppReg
  5141 ;;		_vscp_writeAppReg
  5142 ;;		_vscp_sendEvent
  5143 ;;		_vscp_getGUID
  5144 ;;		_vscp_getMDF_URL
  5145 ;;		_vscp_goBootloaderMode
  5146 ;;		_vscp_getMatrixInfo
  5147 ;;		_vscp_handleHeartbeat
  5148 ;;		_vscp_handleSetNickname
  5149 ;;		_vscp_handleDropNickname
  5150 ;;		_vscp_newNodeOnline
  5151 ;;		_vscp_readRegister
  5152 ;;		_vscp_readStdReg
  5153 ;;		_vscp_writeRegister
  5154 ;;		_vscp_writeStdReg
  5155 ;;		___lbmod
  5156 ;; This function is called by:
  5157 ;;		_main
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           	psect	text15
  5162  001308                     __ptext15:
  5163                           	opt stack 0
  5164  001308                     _vscp_handleProtocolEvent:
  5165                           	opt stack 21
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  5169                           
  5170                           ; BSR set to: 0
  5171                           ;incstack = 0
  5172                           ;incstack = 0
  5173  001308  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  5174  00130A  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  5175  00130C  E101 D2E9          	bz	l10461
  5176  001310  D319               	goto	l1291
  5177  001312                     l10043:
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  5181  001312  EC18  F020         	call	_vscp_handleHeartbeat	;wreg free
  5182                           
  5183                           ;vscp_firmware.c: 807: break;
  5184  001316  D316               	goto	l1291
  5185  001318                     l10045:
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  5189  001318  ECB6  F020         	call	_vscp_newNodeOnline	;wreg free
  5190                           
  5191                           ;vscp_firmware.c: 812: break;
  5192  00131C  D313               	goto	l1291
  5193  00131E                     l10047:
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  5197  00131E  EC40  F021         	call	_vscp_handleSetNickname	;wreg free
  5198                           
  5199                           ;vscp_firmware.c: 817: break;
  5200  001322  D310               	goto	l1291
  5201  001324                     l10049:
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  5205  001324  EC70  F020         	call	_vscp_handleDropNickname	;wreg free
  5206                           
  5207                           ;vscp_firmware.c: 822: break;
  5208  001328  D30D               	goto	l1291
  5209  00132A                     l10051:
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  5213                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5214  00132A  5196               	movf	_vscp_imsg& (0+255),w,b
  5215  00132C  0B0F               	andlw	15
  5216  00132E  0A02               	xorlw	2
  5217  001330  E001 D308          	bnz	l1291
  5218                           
  5219                           ; BSR set to: 0
  5220  001334  5191               	movf	_vscp_nickname& (0+255),w,b
  5221  001336  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5222  00133A  62DF               	cpfseq	indf2,c
  5223  00133C  D303               	goto	l1291
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  5227  00133E  0E80               	movlw	128
  5228  001340  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5229  001342  D012               	goto	l10071
  5230                           
  5231                           ; BSR set to: 0
  5232                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  5233  001344  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5234  001346  EC2D  F01E         	call	_vscp_readAppReg
  5235  00134A                     L13:
  5236  00134A  0100               	movlb	0	; () banked
  5237  00134C                     L14:
  5238  00134C  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
  5239                           
  5240                           ; BSR set to: 0
  5241                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  5242  00134E  C09D  F0A9         	movff	_vscp_imsg+7,_vscp_omsg+5
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  5246  001352  0E03               	movlw	3
  5247  001354  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5248                           
  5249                           ; BSR set to: 0
  5250                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  5251  001356  0E82               	movlw	130
  5252  001358  6FA4               	movwf	_vscp_omsg& (0+255),b
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  5256  00135A  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5257  00135C  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5258                           
  5259                           ; BSR set to: 0
  5260                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  5261  00135E  0E0A               	movlw	10
  5262  001360  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5263  001362                     l10069:
  5264                           
  5265                           ; BSR set to: 0
  5266                           ;vscp_firmware.c: 843: vscp_sendEvent();
  5267  001362  EC2D  F021         	call	_vscp_sendEvent	;wreg free
  5268                           
  5269                           ;vscp_firmware.c: 844: }
  5270  001366  D2EE               	goto	l1291
  5271  001368                     l10071:
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;vscp_firmware.c: 845: else {
  5275                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  5276                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  5277  001368  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5278  00136A  EC57  F017         	call	_vscp_readStdReg
  5279  00136E  D7ED               	goto	L13
  5280  001370                     l10085:
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  5284                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5285  001370  5196               	movf	_vscp_imsg& (0+255),w,b
  5286  001372  0B0F               	andlw	15
  5287  001374  0A03               	xorlw	3
  5288  001376  E001 D2E5          	bnz	l1291
  5289                           
  5290                           ; BSR set to: 0
  5291  00137A  5191               	movf	_vscp_nickname& (0+255),w,b
  5292  00137C  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5293  001380  62DF               	cpfseq	indf2,c
  5294  001382  D2E0               	goto	l1291
  5295                           
  5296                           ; BSR set to: 0
  5297                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  5298  001384  0E80               	movlw	128
  5299  001386  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5300  001388  D006               	goto	l10105
  5301                           
  5302                           ; BSR set to: 0
  5303                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  5304                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5305  00138A  C09E  F051         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  5306  00138E  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5307  001390  EC6F  F004         	call	_vscp_writeAppReg
  5308  001394  D7DB               	goto	L14
  5309  001396                     l10105:
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;vscp_firmware.c: 888: else {
  5313                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  5314                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5315  001396  C09E  F048         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  5316  00139A  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5317  00139C  EC0B  F01C         	call	_vscp_writeStdReg
  5318  0013A0  D7D4               	goto	L13
  5319  0013A2                     l10119:
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  5323                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  5324                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  5325                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  5326                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  5327                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  5328                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  5329  0013A2  5191               	movf	_vscp_nickname& (0+255),w,b
  5330  0013A4  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5331  0013A8  62DF               	cpfseq	indf2,c
  5332  0013AA  D2CC               	goto	l1291
  5333                           
  5334                           ; BSR set to: 0
  5335  0013AC  0E00               	movlw	0
  5336  0013AE  EC2A  F022         	call	_vscp_getGUID
  5337  0013B2  0100               	movlb	0	; () banked
  5338  0013B4  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5339  0013B6  E001 D2C5          	bnz	l1291
  5340                           
  5341                           ; BSR set to: 0
  5342  0013BA  0E03               	movlw	3
  5343  0013BC  EC2A  F022         	call	_vscp_getGUID
  5344  0013C0  0100               	movlb	0	; () banked
  5345  0013C2  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5346  0013C4  E001 D2BE          	bnz	l1291
  5347                           
  5348                           ; BSR set to: 0
  5349  0013C8  0E05               	movlw	5
  5350  0013CA  EC2A  F022         	call	_vscp_getGUID
  5351  0013CE  0100               	movlb	0	; () banked
  5352  0013D0  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5353  0013D2  E001 D2B7          	bnz	l1291
  5354                           
  5355                           ; BSR set to: 0
  5356  0013D6  0E07               	movlw	7
  5357  0013D8  EC2A  F022         	call	_vscp_getGUID
  5358  0013DC  0100               	movlb	0	; () banked
  5359  0013DE  19A1               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  5360  0013E0  E001 D2B0          	bnz	l1291
  5361                           
  5362                           ; BSR set to: 0
  5363  0013E4  5053               	movf	_vscp_page_select+1,w,c
  5364  0013E6  19A2               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  5365  0013E8  E001 D2AC          	bnz	l1291
  5366                           
  5367                           ; BSR set to: 0
  5368  0013EC  5052               	movf	_vscp_page_select,w,c
  5369  0013EE  EE20  F0A3         	lfsr	2,_vscp_imsg+13
  5370  0013F2  62DF               	cpfseq	indf2,c
  5371  0013F4  D2A7               	goto	l1291
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  5375  0013F6  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5376  0013F8  ECC2  F021         	call	_vscp_goBootloaderMode
  5377  0013FC  D2A3               	goto	l1291
  5378  0013FE                     l10135:
  5379                           
  5380                           ; BSR set to: 0
  5381                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  5382                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  5383                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  5384                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  5385  0013FE  0E00               	movlw	0
  5386  001400  EC2A  F022         	call	_vscp_getGUID
  5387  001404  0100               	movlb	0	; () banked
  5388  001406  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5389  001408  E173               	bnz	l10179
  5390                           
  5391                           ; BSR set to: 0
  5392  00140A  0E01               	movlw	1
  5393  00140C  EC2A  F022         	call	_vscp_getGUID
  5394  001410  0100               	movlb	0	; () banked
  5395  001412  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5396  001414  E16D               	bnz	l10179
  5397                           
  5398                           ; BSR set to: 0
  5399  001416  0E02               	movlw	2
  5400  001418  EC2A  F022         	call	_vscp_getGUID
  5401  00141C  0100               	movlb	0	; () banked
  5402  00141E  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5403  001420  E167               	bnz	l10179
  5404                           
  5405                           ; BSR set to: 0
  5406  001422  0E03               	movlw	3
  5407  001424  EC2A  F022         	call	_vscp_getGUID
  5408  001428  0100               	movlb	0	; () banked
  5409  00142A  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5410  00142C  E161               	bnz	l10179
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  5414  00142E  898D               	bsf	_vscp_guid_reset& (0+255),4,b
  5415  001430  D05F               	goto	l10179
  5416  001432                     l10145:
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  5420                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  5421                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  5422                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  5423  001432  0E04               	movlw	4
  5424  001434  EC2A  F022         	call	_vscp_getGUID
  5425  001438  0100               	movlb	0	; () banked
  5426  00143A  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5427  00143C  E159               	bnz	l10179
  5428                           
  5429                           ; BSR set to: 0
  5430  00143E  0E05               	movlw	5
  5431  001440  EC2A  F022         	call	_vscp_getGUID
  5432  001444  0100               	movlb	0	; () banked
  5433  001446  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5434  001448  E153               	bnz	l10179
  5435                           
  5436                           ; BSR set to: 0
  5437  00144A  0E06               	movlw	6
  5438  00144C  EC2A  F022         	call	_vscp_getGUID
  5439  001450  0100               	movlb	0	; () banked
  5440  001452  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5441  001454  E14D               	bnz	l10179
  5442                           
  5443                           ; BSR set to: 0
  5444  001456  0E07               	movlw	7
  5445  001458  EC2A  F022         	call	_vscp_getGUID
  5446  00145C  0100               	movlb	0	; () banked
  5447  00145E  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5448  001460  E147               	bnz	l10179
  5449                           
  5450                           ; BSR set to: 0
  5451                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  5452  001462  8B8D               	bsf	_vscp_guid_reset& (0+255),5,b
  5453  001464  D045               	goto	l10179
  5454  001466                     l10155:
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  5458                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  5459                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  5460                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  5461  001466  0E08               	movlw	8
  5462  001468  EC2A  F022         	call	_vscp_getGUID
  5463  00146C  0100               	movlb	0	; () banked
  5464  00146E  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5465  001470  E13F               	bnz	l10179
  5466                           
  5467                           ; BSR set to: 0
  5468  001472  0E09               	movlw	9
  5469  001474  EC2A  F022         	call	_vscp_getGUID
  5470  001478  0100               	movlb	0	; () banked
  5471  00147A  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5472  00147C  E139               	bnz	l10179
  5473                           
  5474                           ; BSR set to: 0
  5475  00147E  0E0A               	movlw	10
  5476  001480  EC2A  F022         	call	_vscp_getGUID
  5477  001484  0100               	movlb	0	; () banked
  5478  001486  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5479  001488  E133               	bnz	l10179
  5480                           
  5481                           ; BSR set to: 0
  5482  00148A  0E0B               	movlw	11
  5483  00148C  EC2A  F022         	call	_vscp_getGUID
  5484  001490  0100               	movlb	0	; () banked
  5485  001492  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5486  001494  E12D               	bnz	l10179
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  5490  001496  8D8D               	bsf	_vscp_guid_reset& (0+255),6,b
  5491  001498  D02B               	goto	l10179
  5492  00149A                     l10165:
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  5496                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  5497                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  5498                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  5499  00149A  0E0C               	movlw	12
  5500  00149C  EC2A  F022         	call	_vscp_getGUID
  5501  0014A0  0100               	movlb	0	; () banked
  5502  0014A2  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5503  0014A4  E125               	bnz	l10179
  5504                           
  5505                           ; BSR set to: 0
  5506  0014A6  0E0D               	movlw	13
  5507  0014A8  EC2A  F022         	call	_vscp_getGUID
  5508  0014AC  0100               	movlb	0	; () banked
  5509  0014AE  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5510  0014B0  E11F               	bnz	l10179
  5511                           
  5512                           ; BSR set to: 0
  5513  0014B2  0E0E               	movlw	14
  5514  0014B4  EC2A  F022         	call	_vscp_getGUID
  5515  0014B8  0100               	movlb	0	; () banked
  5516  0014BA  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5517  0014BC  E119               	bnz	l10179
  5518                           
  5519                           ; BSR set to: 0
  5520  0014BE  0E0F               	movlw	15
  5521  0014C0  EC2A  F022         	call	_vscp_getGUID
  5522  0014C4  0100               	movlb	0	; () banked
  5523  0014C6  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5524  0014C8  E113               	bnz	l10179
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  5528  0014CA  8F8D               	bsf	_vscp_guid_reset& (0+255),7,b
  5529  0014CC  D011               	goto	l10179
  5530  0014CE                     l1231:
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  5534  0014CE  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  5535                           
  5536                           ;vscp_firmware.c: 965: break;
  5537  0014D0  D00F               	goto	l10179
  5538  0014D2                     l10177:
  5539                           
  5540                           ; BSR set to: 0
  5541  0014D2  399C               	swapf	(_vscp_imsg+6)& (0+255),w,b
  5542  0014D4  0B0F               	andlw	15
  5543  0014D6  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5544  0014D8  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5545                           
  5546                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5547                           ; Switch size 1, requested type "speed"
  5548                           ; Number of cases is 1, Range of values is 0 to 0
  5549                           ; switch strategies available:
  5550                           ; Name         Instructions Cycles
  5551                           ; simple_byte            4     3 (average)
  5552                           ;	Chosen strategy is simple_byte
  5553  0014DA  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5554  0014DC  E1F8               	bnz	l1231
  5555                           
  5556                           ; BSR set to: 0
  5557                           ; Switch size 1, requested type "speed"
  5558                           ; Number of cases is 4, Range of values is 0 to 3
  5559                           ; switch strategies available:
  5560                           ; Name         Instructions Cycles
  5561                           ; simple_byte           13     7 (average)
  5562                           ;	Chosen strategy is simple_byte
  5563  0014DE  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5564  0014E0  E08E               	bz	l10135
  5565  0014E2  0A01               	xorlw	1	; case 1
  5566  0014E4  E0A6               	bz	l10145
  5567  0014E6  0A03               	xorlw	3	; case 2
  5568  0014E8  E0BE               	bz	l10155
  5569  0014EA  0A01               	xorlw	1	; case 3
  5570  0014EC  E0D6               	bz	l10165
  5571  0014EE  D7EF               	goto	l1231
  5572  0014F0                     l10179:
  5573                           
  5574                           ; BSR set to: 0
  5575                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  5576  0014F0  518D               	movf	_vscp_guid_reset& (0+255),w,b
  5577  0014F2  0BF0               	andlw	240
  5578  0014F4  0AF0               	xorlw	240
  5579  0014F6  E001 D225          	bnz	l1291
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;vscp_firmware.c: 970: vscp_init();
  5583  0014FA  ECF6  F01F         	call	_vscp_init	;wreg free
  5584  0014FE  D222               	goto	l1291
  5585  001500                     l10183:
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5589  001500  5191               	movf	_vscp_nickname& (0+255),w,b
  5590  001502  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5591  001506  62DF               	cpfseq	indf2,c
  5592  001508  D21D               	goto	l1291
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;vscp_firmware.c: 978: uint8_t i;
  5596                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  5597  00150A  6BDD               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  5598                           
  5599                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  5600  00150C  C09D  F0DC         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  5601                           
  5602                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  5603  001510  C09E  F0DF         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  5604                           
  5605                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  5606  001514  6BEB               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  5607  001516  D047               	goto	l10215
  5608  001518                     l10187:
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  5612  001518  0E07               	movlw	7
  5613  00151A  6E08               	movwf	?___lbmod,c
  5614  00151C  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5615  00151E  ECE0  F020         	call	___lbmod
  5616  001522  0100               	movlb	0	; () banked
  5617  001524  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5618  001526  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5619  001528  0FAA               	addlw	low (_vscp_omsg+6)
  5620  00152A  6ED9               	movwf	fsr2l,c
  5621  00152C  6ADA               	clrf	fsr2h,c
  5622  00152E  51DC               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  5623  001530  25EB               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5624  001532  ECD0  F021         	call	_vscp_readRegister
  5625  001536  6EDF               	movwf	indf2,c
  5626                           
  5627                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  5628  001538  0E07               	movlw	7
  5629  00153A  6E08               	movwf	?___lbmod,c
  5630  00153C  0100               	movlb	0	; () banked
  5631  00153E  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5632  001540  ECE0  F020         	call	___lbmod
  5633  001544  0A06               	xorlw	6
  5634  001546  E00B               	bz	l10193
  5635  001548  0EFF               	movlw	255
  5636  00154A  0100               	movlb	0	; () banked
  5637  00154C  25DF               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  5638  00154E  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5639  001550  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5640  001552  0EFF               	movlw	255
  5641  001554  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  5642  001556  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5643  001558  19D1               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5644  00155A  11D2               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5645  00155C  E123               	bnz	l10213
  5646  00155E                     l10193:
  5647                           
  5648                           ;vscp_firmware.c: 988: uint8_t bytes;
  5649                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  5650  00155E  0E07               	movlw	7
  5651  001560  6E08               	movwf	?___lbmod,c
  5652  001562  0100               	movlb	0	; () banked
  5653  001564  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5654  001566  ECE0  F020         	call	___lbmod
  5655  00156A  0A06               	xorlw	6
  5656  00156C  E103               	bnz	l10197
  5657                           
  5658                           ;vscp_firmware.c: 991: bytes = 7;
  5659  00156E  0E07               	movlw	7
  5660  001570  0100               	movlb	0	; () banked
  5661  001572  D009               	goto	L15
  5662  001574                     l10197:
  5663                           
  5664                           ;vscp_firmware.c: 993: else {
  5665                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  5666  001574  0E07               	movlw	7
  5667  001576  6E08               	movwf	?___lbmod,c
  5668  001578  0100               	movlb	0	; () banked
  5669  00157A  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5670  00157C  ECE0  F020         	call	___lbmod
  5671  001580  0100               	movlb	0	; () banked
  5672  001582  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5673  001584  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5674  001586                     L15:
  5675  001586  6FDE               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  5676                           
  5677                           ; BSR set to: 0
  5678                           ;vscp_firmware.c: 995: }
  5679                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  5680  001588  51DE               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  5681  00158A  0F81               	addlw	129
  5682  00158C  6FA4               	movwf	_vscp_omsg& (0+255),b
  5683                           
  5684                           ; BSR set to: 0
  5685                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  5686  00158E  0E07               	movlw	7
  5687  001590  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5688                           
  5689                           ; BSR set to: 0
  5690                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  5691  001592  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5692  001594  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5693                           
  5694                           ; BSR set to: 0
  5695                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  5696  001596  0E1A               	movlw	26
  5697  001598  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  5701  00159A  C0DD  F0A9         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  5705  00159E  EC2D  F021         	call	_vscp_sendEvent	;wreg free
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;vscp_firmware.c: 1005: pos++;
  5709  0015A2  2BDD               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  5710  0015A4                     l10213:
  5711                           
  5712                           ; BSR set to: 0
  5713  0015A4  2BEB               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  5714  0015A6                     l10215:
  5715                           
  5716                           ; BSR set to: 0
  5717  0015A6  51DF               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  5718  0015A8  5DEB               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5719  0015AA  E301 D1CB          	bc	l1291
  5720  0015AE  D7B4               	goto	l10187
  5721  0015B0                     l10217:
  5722                           
  5723                           ; BSR set to: 0
  5724                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5725  0015B0  5191               	movf	_vscp_nickname& (0+255),w,b
  5726  0015B2  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5727  0015B6  62DF               	cpfseq	indf2,c
  5728  0015B8  D1C5               	goto	l1291
  5729                           
  5730                           ; BSR set to: 0
  5731                           ;vscp_firmware.c: 1014: uint8_t i;
  5732                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  5733  0015BA  C09D  F0E0         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1283
  5734                           
  5735                           ; BSR set to: 0
  5736                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  5737  0015BE  5196               	movf	_vscp_imsg& (0+255),w,b
  5738  0015C0  0FFE               	addlw	254
  5739  0015C2  0B07               	andlw	7
  5740  0015C4  6FE1               	movwf	vscp_handleProtocolEvent@len_1284& (0+255),b
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  5744  0015C6  6BE6               	clrf	vscp_handleProtocolEvent@i_1282& (0+255),b
  5745  0015C8  D016               	goto	l10231
  5746  0015CA                     l10225:
  5747                           
  5748                           ; BSR set to: 0
  5749                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  5750  0015CA  51E6               	movf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5751  0015CC  0F9E               	addlw	low (_vscp_imsg+8)
  5752  0015CE  6ED9               	movwf	fsr2l,c
  5753  0015D0  6ADA               	clrf	fsr2h,c
  5754  0015D2  50DF               	movf	indf2,w,c
  5755  0015D4  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  5756  0015D6  51E0               	movf	vscp_handleProtocolEvent@pos_1283& (0+255),w,b
  5757  0015D8  25E6               	addwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5758  0015DA  EC75  F021         	call	_vscp_writeRegister
  5759                           
  5760                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  5761  0015DE  0100               	movlb	0	; () banked
  5762  0015E0  51E6               	movf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5763  0015E2  0FAA               	addlw	low (_vscp_omsg+6)
  5764  0015E4  6ED9               	movwf	fsr2l,c
  5765  0015E6  6ADA               	clrf	fsr2h,c
  5766  0015E8  51E0               	movf	vscp_handleProtocolEvent@pos_1283& (0+255),w,b
  5767  0015EA  25E6               	addwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5768  0015EC  ECD0  F021         	call	_vscp_readRegister
  5769  0015F0  6EDF               	movwf	indf2,c
  5770  0015F2  0100               	movlb	0	; () banked
  5771  0015F4  2BE6               	incf	vscp_handleProtocolEvent@i_1282& (0+255),f,b
  5772  0015F6                     l10231:
  5773                           
  5774                           ; BSR set to: 0
  5775  0015F6  51E1               	movf	vscp_handleProtocolEvent@len_1284& (0+255),w,b
  5776  0015F8  5DE6               	subwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5777  0015FA  E3E7               	bnc	l10225
  5778                           
  5779                           ; BSR set to: 0
  5780                           ;vscp_firmware.c: 1022: }
  5781                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  5782  0015FC  0E07               	movlw	7
  5783  0015FE  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5784                           
  5785                           ; BSR set to: 0
  5786                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  5787  001600  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5788  001602  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5789                           
  5790                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  5791  001604  0E1A               	movlw	26
  5792  001606  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  5796  001608  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  5800  00160A  51E1               	movf	vscp_handleProtocolEvent@len_1284& (0+255),w,b
  5801  00160C  0F81               	addlw	129
  5802  00160E  6FA4               	movwf	_vscp_omsg& (0+255),b
  5803  001610  D6A8               	goto	l10069
  5804  001612                     l10243:
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5808  001612  5191               	movf	_vscp_nickname& (0+255),w,b
  5809  001614  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5810  001618  62DF               	cpfseq	indf2,c
  5811  00161A  D194               	goto	l1291
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5815                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  5816                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  5817  00161C  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5818  00161E  EC2D  F01E         	call	_vscp_readAppReg
  5819  001622  0100               	movlb	0	; () banked
  5820  001624  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5821  001626  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5822  001628  6E51               	movwf	?_vscp_writeAppReg,c
  5823  00162A  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5824  00162C  EC6F  F004         	call	_vscp_writeAppReg
  5825  001630  D68D               	goto	L14
  5826  001632                     l10259:
  5827                           
  5828                           ; BSR set to: 0
  5829                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5830  001632  5191               	movf	_vscp_nickname& (0+255),w,b
  5831  001634  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5832  001638  62DF               	cpfseq	indf2,c
  5833  00163A  D184               	goto	l1291
  5834                           
  5835                           ; BSR set to: 0
  5836                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5837                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  5838                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  5839  00163C  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5840  00163E  EC2D  F01E         	call	_vscp_readAppReg
  5841  001642  0100               	movlb	0	; () banked
  5842  001644  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5843  001646  05D1               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  5844  001648  6E51               	movwf	?_vscp_writeAppReg,c
  5845  00164A  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5846  00164C  EC6F  F004         	call	_vscp_writeAppReg
  5847  001650  D67D               	goto	L14
  5848  001652                     l10275:
  5849                           
  5850                           ; BSR set to: 0
  5851                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  5852                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  5853  001652  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
  5854  001654  1991               	xorwf	_vscp_nickname& (0+255),w,b
  5855  001656  E003               	bz	l1255
  5856                           
  5857                           ; BSR set to: 0
  5858  001658  299C               	incf	(_vscp_imsg+6)& (0+255),w,b
  5859  00165A  E001 D173          	bnz	l1291
  5860  00165E                     l1255:
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  5864  00165E  6BE5               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  5865                           
  5866                           ; BSR set to: 0
  5867                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  5868  001660  0E03               	movlw	3
  5869  001662  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5870                           
  5871                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  5872  001664  0E88               	movlw	136
  5873  001666  6FA4               	movwf	_vscp_omsg& (0+255),b
  5874                           
  5875                           ; BSR set to: 0
  5876                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  5877  001668  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5878  00166A  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5879                           
  5880                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  5881  00166C  0E20               	movlw	32
  5882  00166E  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  5886  001670  6BEA               	clrf	vscp_handleProtocolEvent@i_1285& (0+255),b
  5887  001672                     l1256:
  5888                           
  5889                           ; BSR set to: 0
  5890                           ;vscp_firmware.c: 1091: {
  5891                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  5892  001672  C0EA  F0A9         	movff	vscp_handleProtocolEvent@i_1285,_vscp_omsg+5
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  5896  001676  0E01               	movlw	1
  5897  001678  6FEC               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  5898  00167A                     l10295:
  5899                           
  5900                           ; BSR set to: 0
  5901                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  5902  00167A  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5903  00167C  0FA9               	addlw	low (_vscp_omsg+5)
  5904  00167E  6ED9               	movwf	fsr2l,c
  5905  001680  6ADA               	clrf	fsr2h,c
  5906  001682  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5907  001684  080F               	sublw	15
  5908  001686  EC2A  F022         	call	_vscp_getGUID
  5909  00168A  6EDF               	movwf	indf2,c
  5910  00168C  0100               	movlb	0	; () banked
  5911  00168E  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;vscp_firmware.c: 1096: if (k > 16)
  5915  001690  0E10               	movlw	16
  5916  001692  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5917  001694  D001               	goto	l10303
  5918  001696  D004               	goto	l10307
  5919  001698                     l10303:
  5920                           
  5921                           ; BSR set to: 0
  5922  001698  2BEC               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5923                           
  5924                           ; BSR set to: 0
  5925  00169A  0E07               	movlw	7
  5926  00169C  65EC               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5927  00169E  D7ED               	goto	l10295
  5928  0016A0                     l10307:
  5929                           
  5930                           ; BSR set to: 0
  5931                           ;vscp_firmware.c: 1098: }
  5932                           ;vscp_firmware.c: 1100: if (k > 16)
  5933  0016A0  0E10               	movlw	16
  5934  0016A2  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5935  0016A4  D001               	goto	l10311
  5936  0016A6  D006               	goto	l1257
  5937  0016A8                     l10311:
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  5941  0016A8  EC2D  F021         	call	_vscp_sendEvent	;wreg free
  5942                           
  5943                           ; BSR set to: 0
  5944  0016AC  2BEA               	incf	vscp_handleProtocolEvent@i_1285& (0+255),f,b
  5945                           
  5946                           ; BSR set to: 0
  5947  0016AE  0E02               	movlw	2
  5948  0016B0  65EA               	cpfsgt	vscp_handleProtocolEvent@i_1285& (0+255),b
  5949  0016B2  D7DF               	goto	l1256
  5950  0016B4                     l1257:
  5951                           
  5952                           ; BSR set to: 0
  5953                           ;vscp_firmware.c: 1104: }
  5954                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  5955  0016B4  6BEC               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  5956  0016B6                     l10321:
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;vscp_firmware.c: 1107: {
  5960                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  5961  0016B6  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5962  0016B8  ECDD  F021         	call	_vscp_getMDF_URL
  5963  0016BC  0900               	iorlw	0
  5964  0016BE  E008               	bz	l10325
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  5968  0016C0  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5969  0016C2  0FAC               	addlw	low (_vscp_omsg+8)
  5970  0016C4  6ED9               	movwf	fsr2l,c
  5971  0016C6  6ADA               	clrf	fsr2h,c
  5972  0016C8  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5973  0016CA  ECDD  F021         	call	_vscp_getMDF_URL
  5974  0016CE  D005               	goto	L16
  5975  0016D0                     l10325:
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;vscp_firmware.c: 1110: else
  5979                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  5980  0016D0  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5981  0016D2  0FAC               	addlw	low (_vscp_omsg+8)
  5982  0016D4  6ED9               	movwf	fsr2l,c
  5983  0016D6  6ADA               	clrf	fsr2h,c
  5984  0016D8  0E00               	movlw	0
  5985  0016DA                     L16:
  5986  0016DA  6EDF               	movwf	indf2,c
  5987                           
  5988                           ; BSR set to: 0
  5989  0016DC  2BEC               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5990                           
  5991                           ; BSR set to: 0
  5992  0016DE  0E04               	movlw	4
  5993  0016E0  65EC               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5994  0016E2  D7E9               	goto	l10321
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;vscp_firmware.c: 1112: }
  5998                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  5999  0016E4  EC2D  F021         	call	_vscp_sendEvent	;wreg free
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;vscp_firmware.c: 1116: k = 5;
  6003  0016E8  0E05               	movlw	5
  6004  0016EA  6FE5               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  6005                           
  6006                           ; BSR set to: 0
  6007                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  6008  0016EC  0E03               	movlw	3
  6009  0016EE  6FEA               	movwf	vscp_handleProtocolEvent@i_1285& (0+255),b
  6010  0016F0                     l1266:
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;vscp_firmware.c: 1118: {
  6014                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  6015  0016F0  C0EA  F0A9         	movff	vscp_handleProtocolEvent@i_1285,_vscp_omsg+5
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  6019  0016F4  0E01               	movlw	1
  6020  0016F6  6FEC               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  6021  0016F8                     l10347:
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  6025  0016F8  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6026  0016FA  0FA9               	addlw	low (_vscp_omsg+5)
  6027  0016FC  6ED9               	movwf	fsr2l,c
  6028  0016FE  6ADA               	clrf	fsr2h,c
  6029  001700  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  6030  001702  ECDD  F021         	call	_vscp_getMDF_URL
  6031  001706  6EDF               	movwf	indf2,c
  6032                           
  6033                           ; BSR set to: 0
  6034  001708  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  6035                           
  6036                           ; BSR set to: 0
  6037  00170A  2BEC               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  6038                           
  6039                           ; BSR set to: 0
  6040  00170C  0E07               	movlw	7
  6041  00170E  65EC               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  6042  001710  D7F3               	goto	l10347
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;vscp_firmware.c: 1123: }
  6046                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  6047  001712  EC2D  F021         	call	_vscp_sendEvent	;wreg free
  6048                           
  6049                           ; BSR set to: 0
  6050  001716  2BEA               	incf	vscp_handleProtocolEvent@i_1285& (0+255),f,b
  6051                           
  6052                           ; BSR set to: 0
  6053  001718  0E06               	movlw	6
  6054  00171A  65EA               	cpfsgt	vscp_handleProtocolEvent@i_1285& (0+255),b
  6055  00171C  D7E9               	goto	l1266
  6056  00171E  D112               	goto	l1291
  6057  001720                     l10361:
  6058                           
  6059                           ; BSR set to: 0
  6060                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  6061  001720  5191               	movf	_vscp_nickname& (0+255),w,b
  6062  001722  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6063  001726  62DF               	cpfseq	indf2,c
  6064  001728  D10D               	goto	l1291
  6065                           
  6066                           ; BSR set to: 0
  6067                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  6068  00172A  0E03               	movlw	3
  6069  00172C  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6070                           
  6071                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  6072  00172E  0E87               	movlw	135
  6073  001730  6FA4               	movwf	_vscp_omsg& (0+255),b
  6074                           
  6075                           ; BSR set to: 0
  6076                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  6077  001732  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6078  001734  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6079                           
  6080                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  6081  001736  0E22               	movlw	34
  6082  001738  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  6086  00173A  0EA9               	movlw	(_vscp_omsg+5)& (0+255)
  6087  00173C  EC86  F021         	call	_vscp_getMatrixInfo
  6088  001740  D610               	goto	l10069
  6089  001742                     l10371:
  6090                           
  6091                           ; BSR set to: 0
  6092                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  6093  001742  5191               	movf	_vscp_nickname& (0+255),w,b
  6094  001744  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6095  001748  62DF               	cpfseq	indf2,c
  6096  00174A  D0FC               	goto	l1291
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  6100  00174C  6BE7               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  6104                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  6105  00174E  C096  F0D1         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  6106  001752  0E0F               	movlw	15
  6107  001754  17D1               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6108  001756  0E04               	movlw	4
  6109  001758  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6110  00175A  E312               	bnc	l10387
  6111                           
  6112                           ; BSR set to: 0
  6113                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  6114  00175C  C0A0  F0E8         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1289
  6115  001760  6BE9               	clrf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  6119  001762  51E9               	movf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6120  001764  11E8               	iorwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6121  001766  E103               	bnz	l10383
  6122                           
  6123                           ; BSR set to: 0
  6124  001768  0E01               	movlw	1
  6125  00176A  6FE9               	movwf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6126  00176C  6BE8               	clrf	vscp_handleProtocolEvent@bytes_1289& (0+255),b
  6127  00176E                     l10383:
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  6131  00176E  0E01               	movlw	1
  6132  001770  5DE8               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6133  001772  0E01               	movlw	1
  6134  001774  59E9               	subwfb	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6135  001776  E307               	bnc	l10389
  6136                           
  6137                           ; BSR set to: 0
  6138  001778  0E01               	movlw	1
  6139  00177A  6FE9               	movwf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6140  00177C  0E00               	movlw	0
  6141  00177E  D002               	goto	L18
  6142  001780                     l10387:
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;vscp_firmware.c: 1173: else {
  6146                           ;vscp_firmware.c: 1174: bytes = 1;
  6147  001780  6BE9               	clrf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6148  001782  0E01               	movlw	1
  6149  001784                     L18:
  6150  001784  6FE8               	movwf	vscp_handleProtocolEvent@bytes_1289& (0+255),b
  6151  001786                     l10389:
  6152                           
  6153                           ; BSR set to: 0
  6154                           ;vscp_firmware.c: 1175: }
  6155                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  6156  001786  C052  F0D8         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  6157  00178A  C053  F0D9         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  6161  00178E  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  6162  001790  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6163  001794  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6164  001796  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6165  00179A  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6166  00179C  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6167  00179E  6E52               	movwf	_vscp_page_select,c
  6168  0017A0  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6169  0017A2  6E53               	movwf	_vscp_page_select+1,c
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  6173  0017A4  0E07               	movlw	7
  6174  0017A6  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6175                           
  6176                           ; BSR set to: 0
  6177                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  6178  0017A8  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6179  0017AA  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6180                           
  6181                           ; BSR set to: 0
  6182                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  6183  0017AC  0E27               	movlw	39
  6184  0017AE  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6185                           
  6186                           ; BSR set to: 0
  6187                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  6188  0017B0  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6189                           
  6190                           ; BSR set to: 0
  6191                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  6192  0017B2  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  6196  0017B6  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6197  0017BA                     l10405:
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  6201  0017BA  51E7               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6202  0017BC  5DE8               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6203  0017BE  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6204  0017C0  0E00               	movlw	0
  6205  0017C2  59E9               	subwfb	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6206  0017C4  6FD2               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6207  0017C6  0E04               	movlw	4
  6208  0017C8  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6209  0017CA  0E00               	movlw	0
  6210  0017CC  59D2               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6211  0017CE  E302               	bnc	l10409
  6212                           
  6213                           ; BSR set to: 0
  6214                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  6215  0017D0  0E04               	movlw	4
  6216  0017D2  D002               	goto	L19
  6217  0017D4                     l10409:
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;vscp_firmware.c: 1198: else {
  6221                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  6222  0017D4  51E7               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6223  0017D6  5DE8               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6224  0017D8                     L19:
  6225  0017D8  6FE2               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;vscp_firmware.c: 1200: }
  6229                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  6230  0017DA  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6231  0017DC  0F84               	addlw	132
  6232  0017DE  6FA4               	movwf	_vscp_omsg& (0+255),b
  6233                           
  6234                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  6235                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  6236  0017E0  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6237  0017E2  25E7               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6238  0017E4  6FAC               	movwf	(_vscp_omsg+8)& (0+255),b
  6239                           
  6240                           ; BSR set to: 0
  6241                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  6242  0017E6  6BE3               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  6243  0017E8  D00C               	goto	l10417
  6244  0017EA                     l10413:
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  6248                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  6249  0017EA  51E3               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6250  0017EC  0FAD               	addlw	low (_vscp_omsg+9)
  6251  0017EE  6ED9               	movwf	fsr2l,c
  6252  0017F0  6ADA               	clrf	fsr2h,c
  6253  0017F2  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6254  0017F4  25E7               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6255  0017F6  25E3               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6256  0017F8  ECD0  F021         	call	_vscp_readRegister
  6257  0017FC  6EDF               	movwf	indf2,c
  6258  0017FE  0100               	movlb	0	; () banked
  6259  001800  2BE3               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  6260  001802                     l10417:
  6261                           
  6262                           ; BSR set to: 0
  6263  001802  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6264  001804  5DE3               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6265  001806  E3F1               	bnc	l10413
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;vscp_firmware.c: 1211: }
  6269                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  6270  001808  EC2D  F021         	call	_vscp_sendEvent	;wreg free
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  6274  00180C  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6275  00180E  27E7               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  6279  001810  2BA9               	incf	(_vscp_omsg+5)& (0+255),f,b
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  6283  001812  51E7               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6284  001814  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6285  001816  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6286  001818  51E8               	movf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6287  00181A  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6288  00181C  51E9               	movf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6289  00181E  59D2               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6290  001820  E3CC               	bnc	l10405
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  6294  001822  C0D8  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  6295  001826  C0D9  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  6296  00182A  D08C               	goto	l1291
  6297  00182C                     l10427:
  6298                           
  6299                           ; BSR set to: 0
  6300                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  6301  00182C  5191               	movf	_vscp_nickname& (0+255),w,b
  6302  00182E  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6303  001832  62DF               	cpfseq	indf2,c
  6304  001834  D087               	goto	l1291
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;vscp_firmware.c: 1234: uint8_t i;
  6308                           ;vscp_firmware.c: 1235: uint16_t page_save;
  6309                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  6310  001836  C052  F0DA         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1294
  6311  00183A  C053  F0DB         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1294+1
  6312                           
  6313                           ; BSR set to: 0
  6314                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  6315  00183E  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  6316  001840  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6317  001844  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6318  001846  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6319  00184A  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6320  00184C  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6321  00184E  6E52               	movwf	_vscp_page_select,c
  6322  001850  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6323  001852  6E53               	movwf	_vscp_page_select+1,c
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  6327  001854  C09F  F0E4         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1293
  6328                           
  6329                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  6330                           ;vscp_firmware.c: 1248: i++) {
  6331  001858  D014               	goto	l10439
  6332  00185A                     l10435:
  6333                           
  6334                           ; BSR set to: 0
  6335                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  6336                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  6337  00185A  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6338  00185C  08A0               	sublw	low (_vscp_imsg+10)
  6339  00185E  25E4               	addwf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6340  001860  6ED9               	movwf	fsr2l,c
  6341  001862  6ADA               	clrf	fsr2h,c
  6342  001864  50DF               	movf	indf2,w,c
  6343  001866  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  6344  001868  51E4               	movf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6345  00186A  EC75  F021         	call	_vscp_writeRegister
  6346  00186E  0100               	movlb	0	; () banked
  6347  001870  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6348  001872  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6349  001874  08AD               	sublw	low (_vscp_omsg+9)
  6350  001876  25E4               	addwf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6351  001878  6ED9               	movwf	fsr2l,c
  6352  00187A  6ADA               	clrf	fsr2h,c
  6353  00187C  C0D1  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  6354                           
  6355                           ; BSR set to: 0
  6356  001880  2BE4               	incf	vscp_handleProtocolEvent@i_1293& (0+255),f,b
  6357  001882                     l10439:
  6358                           
  6359                           ; BSR set to: 0
  6360  001882  5196               	movf	_vscp_imsg& (0+255),w,b
  6361  001884  0B0F               	andlw	15
  6362  001886  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6363  001888  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6364  00188A  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6365  00188C  27D1               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6366  00188E  0E00               	movlw	0
  6367  001890  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6368  001892  0EFC               	movlw	252
  6369  001894  25D1               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6370  001896  6FD3               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  6371  001898  0EFF               	movlw	255
  6372  00189A  21D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6373  00189C  6FD4               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  6374  00189E  51E4               	movf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6375  0018A0  6FD5               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  6376  0018A2  6BD6               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  6377  0018A4  51D6               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  6378  0018A6  0A80               	xorlw	128
  6379  0018A8  6FD7               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  6380  0018AA  51D3               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  6381  0018AC  5DD5               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  6382  0018AE  51D4               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  6383  0018B0  0A80               	xorlw	128
  6384  0018B2  59D7               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  6385  0018B4  E3D2               	bnc	l10435
  6386                           
  6387                           ; BSR set to: 0
  6388                           ;vscp_firmware.c: 1251: }
  6389                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  6390  0018B6  C0DA  F052         	movff	vscp_handleProtocolEvent@page_save_1294,_vscp_page_select
  6391  0018BA  C0DB  F053         	movff	vscp_handleProtocolEvent@page_save_1294+1,_vscp_page_select+1
  6392                           
  6393                           ; BSR set to: 0
  6394                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  6395  0018BE  0E07               	movlw	7
  6396  0018C0  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6397                           
  6398                           ; BSR set to: 0
  6399                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  6400  0018C2  5196               	movf	_vscp_imsg& (0+255),w,b
  6401  0018C4  0B0F               	andlw	15
  6402  0018C6  0F80               	addlw	128
  6403  0018C8  6FA4               	movwf	_vscp_omsg& (0+255),b
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  6407  0018CA  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6408  0018CC  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6409                           
  6410                           ; BSR set to: 0
  6411                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  6412  0018CE  0E27               	movlw	39
  6413  0018D0  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6414                           
  6415                           ; BSR set to: 0
  6416                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  6417  0018D2  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6418                           
  6419                           ; BSR set to: 0
  6420                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  6421  0018D4  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6422                           
  6423                           ; BSR set to: 0
  6424                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  6425  0018D8  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6426                           
  6427                           ; BSR set to: 0
  6428                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  6429  0018DC  C09F  F0AC         	movff	_vscp_imsg+9,_vscp_omsg+8
  6430  0018E0  D540               	goto	l10069
  6431  0018E2                     l10461:
  6432                           
  6433                           ; BSR set to: 0
  6434  0018E2  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  6435                           
  6436                           ; Switch size 1, requested type "speed"
  6437                           ; Number of cases is 16, Range of values is 1 to 38
  6438                           ; switch strategies available:
  6439                           ; Name         Instructions Cycles
  6440                           ; simple_byte           49    25 (average)
  6441                           ;	Chosen strategy is simple_byte
  6442  0018E4  0A01               	xorlw	1	; case 1
  6443  0018E6  E101 D514          	bz	l10043
  6444  0018EA  0A03               	xorlw	3	; case 2
  6445  0018EC  E101 D514          	bz	l10045
  6446  0018F0  0A04               	xorlw	4	; case 6
  6447  0018F2  E101 D514          	bz	l10047
  6448  0018F6  0A0E               	xorlw	14	; case 8
  6449  0018F8  E101 D514          	bz	l10049
  6450  0018FC  0A01               	xorlw	1	; case 9
  6451  0018FE  E101 D514          	bz	l10051
  6452  001902  0A02               	xorlw	2	; case 11
  6453  001904  E101 D534          	bz	l10085
  6454  001908  0A07               	xorlw	7	; case 12
  6455  00190A  E101 D54A          	bz	l10119
  6456  00190E  0A1B               	xorlw	27	; case 23
  6457  001910  E101 D5DF          	bz	l10177
  6458  001914  0A0F               	xorlw	15	; case 24
  6459  001916  E101 D5F3          	bz	l10183
  6460  00191A  0A01               	xorlw	1	; case 25
  6461  00191C  E101 D648          	bz	l10217
  6462  001920  0A04               	xorlw	4	; case 29
  6463  001922  E101 D676          	bz	l10243
  6464  001926  0A03               	xorlw	3	; case 30
  6465  001928  E101 D683          	bz	l10259
  6466  00192C  0A01               	xorlw	1	; case 31
  6467  00192E  E101 D690          	bz	l10275
  6468  001932  0A3E               	xorlw	62	; case 33
  6469  001934  E101 D6F4          	bz	l10361
  6470  001938  0A04               	xorlw	4	; case 37
  6471  00193A  E101 D702          	bz	l10371
  6472  00193E  0A03               	xorlw	3	; case 38
  6473  001940  E101 D774          	bz	l10427
  6474  001944                     l1291:
  6475  001944  0012               	return	
  6476  001946                     __end_of_vscp_handleProtocolEvent:
  6477                           	opt stack 0
  6478                           tblptru	equ	0xFF8
  6479                           prodh	equ	0xFF4
  6480                           prodl	equ	0xFF3
  6481                           postinc0	equ	0xFEE
  6482                           wreg	equ	0xFE8
  6483                           indf2	equ	0xFDF
  6484                           postinc2	equ	0xFDE
  6485                           postdec2	equ	0xFDD
  6486                           fsr2h	equ	0xFDA
  6487                           fsr2l	equ	0xFD9
  6488                           status	equ	0xFD8
  6489                           
  6490 ;; *************** function ___lbmod *****************
  6491 ;; Defined at:
  6492 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;  dividend        1    wreg     unsigned char 
  6495 ;;  divisor         1    7[COMRAM] unsigned char 
  6496 ;; Auto vars:     Size  Location     Type
  6497 ;;  dividend        1    8[COMRAM] unsigned char 
  6498 ;;  rem             1   10[COMRAM] unsigned char 
  6499 ;;  counter         1    9[COMRAM] unsigned char 
  6500 ;; Return value:  Size  Location     Type
  6501 ;;                  1    wreg      unsigned char 
  6502 ;; Registers used:
  6503 ;;		wreg, status,2, status,0
  6504 ;; Tracked objects:
  6505 ;;		On entry : F/0
  6506 ;;		On exit  : 0/0
  6507 ;;		Unchanged: 0/0
  6508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6509 ;;      Params:         1       0       0       0       0       0       0
  6510 ;;      Locals:         3       0       0       0       0       0       0
  6511 ;;      Temps:          0       0       0       0       0       0       0
  6512 ;;      Totals:         4       0       0       0       0       0       0
  6513 ;;Total ram usage:        4 bytes
  6514 ;; Hardware stack levels used:    1
  6515 ;; Hardware stack levels required when called:    2
  6516 ;; This function calls:
  6517 ;;		Nothing
  6518 ;; This function is called by:
  6519 ;;		_vscp_handleProtocolEvent
  6520 ;; This function uses a non-reentrant model
  6521 ;;
  6522                           
  6523                           	psect	text16
  6524  0041C0                     __ptext16:
  6525                           	opt stack 0
  6526  0041C0                     ___lbmod:
  6527                           	opt stack 27
  6528                           
  6529                           ;incstack = 0
  6530                           ;incstack = 0
  6531                           ;___lbmod@dividend stored from wreg
  6532  0041C0  CFE8 F009          	movff	wreg,___lbmod@dividend
  6533                           
  6534                           ; BSR set to: 0
  6535  0041C4  0E08               	movlw	8
  6536  0041C6  6E0A               	movwf	___lbmod@counter,c
  6537                           
  6538                           ; BSR set to: 0
  6539  0041C8  6A0B               	clrf	___lbmod@rem,c
  6540  0041CA                     l7521:
  6541  0041CA  90D8               	bcf	status,0,c
  6542  0041CC  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  6543  0041CE  340B               	rlcf	___lbmod@rem& (0+255),w,c
  6544  0041D0  6E0B               	movwf	___lbmod@rem,c
  6545  0041D2  90D8               	bcf	status,0,c
  6546  0041D4  3609               	rlcf	___lbmod@dividend,f,c
  6547  0041D6  5008               	movf	___lbmod@divisor,w,c
  6548  0041D8  5C0B               	subwf	___lbmod@rem,w,c
  6549  0041DA  E302               	bnc	l7529
  6550  0041DC  5008               	movf	___lbmod@divisor,w,c
  6551  0041DE  5E0B               	subwf	___lbmod@rem,f,c
  6552  0041E0                     l7529:
  6553  0041E0  2E0A               	decfsz	___lbmod@counter,f,c
  6554  0041E2  D7F3               	goto	l7521
  6555  0041E4  500B               	movf	___lbmod@rem,w,c
  6556  0041E6  0012               	return	
  6557  0041E8                     __end_of___lbmod:
  6558                           	opt stack 0
  6559                           tblptru	equ	0xFF8
  6560                           prodh	equ	0xFF4
  6561                           prodl	equ	0xFF3
  6562                           postinc0	equ	0xFEE
  6563                           wreg	equ	0xFE8
  6564                           indf2	equ	0xFDF
  6565                           postinc2	equ	0xFDE
  6566                           postdec2	equ	0xFDD
  6567                           fsr2h	equ	0xFDA
  6568                           fsr2l	equ	0xFD9
  6569                           status	equ	0xFD8
  6570                           
  6571 ;; *************** function _vscp_writeRegister *****************
  6572 ;; Defined at:
  6573 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  6574 ;; Parameters:    Size  Location     Type
  6575 ;;  reg             1    wreg     unsigned char 
  6576 ;;  value           1   30[BANK0 ] unsigned char 
  6577 ;; Auto vars:     Size  Location     Type
  6578 ;;  reg             1   31[BANK0 ] unsigned char 
  6579 ;; Return value:  Size  Location     Type
  6580 ;;                  1    wreg      unsigned char 
  6581 ;; Registers used:
  6582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6583 ;; Tracked objects:
  6584 ;;		On entry : F/0
  6585 ;;		On exit  : 0/0
  6586 ;;		Unchanged: 0/0
  6587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6588 ;;      Params:         0       1       0       0       0       0       0
  6589 ;;      Locals:         0       1       0       0       0       0       0
  6590 ;;      Temps:          0       0       0       0       0       0       0
  6591 ;;      Totals:         0       2       0       0       0       0       0
  6592 ;;Total ram usage:        2 bytes
  6593 ;; Hardware stack levels used:    1
  6594 ;; Hardware stack levels required when called:    8
  6595 ;; This function calls:
  6596 ;;		_vscp_writeAppReg
  6597 ;;		_vscp_writeStdReg
  6598 ;; This function is called by:
  6599 ;;		_vscp_handleProtocolEvent
  6600 ;; This function uses a non-reentrant model
  6601 ;;
  6602                           
  6603                           	psect	text17
  6604  0042EA                     __ptext17:
  6605                           	opt stack 0
  6606  0042EA                     _vscp_writeRegister:
  6607                           	opt stack 21
  6608                           
  6609                           ;incstack = 0
  6610                           ;incstack = 0
  6611                           ;vscp_writeRegister@reg stored from wreg
  6612  0042EA  CFE8 F0D0          	movff	wreg,vscp_writeRegister@reg
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  6616  0042EE  0E7F               	movlw	127
  6617  0042F0  65D0               	cpfsgt	vscp_writeRegister@reg& (0+255),b
  6618  0042F2  D006               	goto	l11319
  6619                           
  6620                           ; BSR set to: 0
  6621                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  6622  0042F4  C0CF  F048         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  6623  0042F8  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6624  0042FA  EC0B  F01C         	call	_vscp_writeStdReg
  6625  0042FE  D005               	goto	l1171
  6626  004300                     l11319:
  6627                           
  6628                           ; BSR set to: 0
  6629                           ;vscp_firmware.c: 705: else {
  6630                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  6631  004300  C0CF  F051         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  6632  004304  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6633  004306  EC6F  F004         	call	_vscp_writeAppReg
  6634  00430A                     l1171:
  6635  00430A  0012               	return	
  6636  00430C                     __end_of_vscp_writeRegister:
  6637                           	opt stack 0
  6638                           tblptru	equ	0xFF8
  6639                           prodh	equ	0xFF4
  6640                           prodl	equ	0xFF3
  6641                           postinc0	equ	0xFEE
  6642                           wreg	equ	0xFE8
  6643                           indf2	equ	0xFDF
  6644                           postinc2	equ	0xFDE
  6645                           postdec2	equ	0xFDD
  6646                           fsr2h	equ	0xFDA
  6647                           fsr2l	equ	0xFD9
  6648                           status	equ	0xFD8
  6649                           
  6650 ;; *************** function _vscp_writeStdReg *****************
  6651 ;; Defined at:
  6652 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;  reg             1    wreg     unsigned char 
  6655 ;;  value           1   71[COMRAM] unsigned char 
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;  reg             1   77[COMRAM] unsigned char 
  6658 ;;  rv              1   76[COMRAM] unsigned char 
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  1    wreg      unsigned char 
  6661 ;; Registers used:
  6662 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6663 ;; Tracked objects:
  6664 ;;		On entry : F/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6668 ;;      Params:         1       0       0       0       0       0       0
  6669 ;;      Locals:         2       0       0       0       0       0       0
  6670 ;;      Temps:          4       0       0       0       0       0       0
  6671 ;;      Totals:         7       0       0       0       0       0       0
  6672 ;;Total ram usage:        7 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:    6
  6675 ;; This function calls:
  6676 ;;		_vscp_setGUID
  6677 ;;		_vscp_setManufacturerId
  6678 ;;		_vscp_getGUID
  6679 ;;		_vscp_getUserID
  6680 ;;		_vscp_setUserID
  6681 ;;		_vscp_getManufacturerId
  6682 ;;		_vscp_restoreDefaults
  6683 ;; This function is called by:
  6684 ;;		_vscp_writeRegister
  6685 ;;		_vscp_handleProtocolEvent
  6686 ;; This function uses a non-reentrant model
  6687 ;;
  6688                           
  6689                           	psect	text18
  6690  003816                     __ptext18:
  6691                           	opt stack 0
  6692  003816                     _vscp_writeStdReg:
  6693                           	opt stack 23
  6694                           
  6695                           ;incstack = 0
  6696                           ;incstack = 0
  6697                           ;vscp_writeStdReg@reg stored from wreg
  6698  003816  CFE8 F04E          	movff	wreg,vscp_writeStdReg@reg
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  6702  00381A  1C48               	comf	vscp_writeStdReg@value,w,c
  6703  00381C  6E4D               	movwf	vscp_writeStdReg@rv,c
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  6707                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  6708  00381E  0E83               	movlw	131
  6709  003820  644E               	cpfsgt	vscp_writeStdReg@reg,c
  6710  003822  D00E               	goto	l9875
  6711                           
  6712                           ; BSR set to: 0
  6713  003824  0E89               	movlw	137
  6714  003826  604E               	cpfslt	vscp_writeStdReg@reg,c
  6715  003828  D00B               	goto	l9875
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  6719  00382A  C048  F00C         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  6720  00382E  504E               	movf	vscp_writeStdReg@reg,w,c
  6721  003830  0F7C               	addlw	124
  6722  003832  ECB4  F021         	call	_vscp_setUserID
  6723                           
  6724                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  6725  003836  504E               	movf	vscp_writeStdReg@reg,w,c
  6726  003838  0F7C               	addlw	124
  6727  00383A  EC20  F022         	call	_vscp_getUserID
  6728  00383E  D069               	goto	L25
  6729  003840                     l9875:
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  6733  003840  504E               	movf	vscp_writeStdReg@reg,w,c
  6734  003842  0A92               	xorlw	146
  6735  003844  E10D               	bnz	l9881
  6736                           
  6737                           ; BSR set to: 0
  6738                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  6739  003846  5048               	movf	vscp_writeStdReg@value,w,c
  6740  003848  6E4A               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6741  00384A  6A49               	clrf	??_vscp_writeStdReg& (0+255),c
  6742  00384C  5052               	movf	_vscp_page_select,w,c
  6743  00384E  6E4B               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  6744  003850  6A4C               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  6745  003852  1049               	iorwf	??_vscp_writeStdReg,w,c
  6746  003854  6E52               	movwf	_vscp_page_select,c
  6747  003856  504A               	movf	??_vscp_writeStdReg+1,w,c
  6748  003858  104C               	iorwf	??_vscp_writeStdReg+3,w,c
  6749  00385A  6E53               	movwf	_vscp_page_select+1,c
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  6753  00385C  5053               	movf	_vscp_page_select+1,w,c
  6754  00385E  D059               	goto	L25
  6755  003860                     l9881:
  6756                           
  6757                           ; BSR set to: 0
  6758                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  6759  003860  504E               	movf	vscp_writeStdReg@reg,w,c
  6760  003862  0A93               	xorlw	147
  6761  003864  E10B               	bnz	l9887
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  6765  003866  6A49               	clrf	??_vscp_writeStdReg& (0+255),c
  6766  003868  5053               	movf	_vscp_page_select+1,w,c
  6767  00386A  6E4A               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6768  00386C  5048               	movf	vscp_writeStdReg@value,w,c
  6769  00386E  1049               	iorwf	??_vscp_writeStdReg,w,c
  6770  003870  6E52               	movwf	_vscp_page_select,c
  6771  003872  504A               	movf	??_vscp_writeStdReg+1,w,c
  6772  003874  6E53               	movwf	_vscp_page_select+1,c
  6773                           
  6774                           ; BSR set to: 0
  6775                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  6776  003876  C052  F04D         	movff	_vscp_page_select,vscp_writeStdReg@rv
  6777                           
  6778                           ;vscp_firmware.c: 737: }
  6779  00387A  D04E               	goto	l9929
  6780  00387C                     l9887:
  6781                           
  6782                           ; BSR set to: 0
  6783                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  6784  00387C  0E88               	movlw	136
  6785  00387E  644E               	cpfsgt	vscp_writeStdReg@reg,c
  6786  003880  D019               	goto	l9899
  6787                           
  6788                           ; BSR set to: 0
  6789  003882  0E91               	movlw	145
  6790  003884  604E               	cpfslt	vscp_writeStdReg@reg,c
  6791  003886  D016               	goto	l9899
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6795                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  6796  003888  C053  F049         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6797  00388C  C049  F04A         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6798  003890  6A4B               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6799  003892  284A               	incf	??_vscp_writeStdReg+1,w,c
  6800  003894  E102               	bnz	l9895
  6801                           
  6802                           ; BSR set to: 0
  6803  003896  2852               	incf	_vscp_page_select,w,c
  6804  003898  E002               	bz	l9897
  6805  00389A                     l9895:
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;vscp_firmware.c: 747: rv = ~value;
  6809  00389A  1C48               	comf	vscp_writeStdReg@value,w,c
  6810  00389C  D03A               	goto	L25
  6811  00389E                     l9897:
  6812                           
  6813                           ; BSR set to: 0
  6814                           ;vscp_firmware.c: 749: else {
  6815                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  6816  00389E  C048  F00C         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  6817  0038A2  504E               	movf	vscp_writeStdReg@reg,w,c
  6818  0038A4  0F77               	addlw	119
  6819  0038A6  EC07  F021         	call	_vscp_setManufacturerId
  6820                           
  6821                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  6822  0038AA  504E               	movf	vscp_writeStdReg@reg,w,c
  6823  0038AC  0F77               	addlw	119
  6824  0038AE  EC16  F022         	call	_vscp_getManufacturerId
  6825  0038B2  D02F               	goto	L25
  6826  0038B4                     l9899:
  6827                           
  6828                           ; BSR set to: 0
  6829                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  6830  0038B4  0ECF               	movlw	207
  6831  0038B6  644E               	cpfsgt	vscp_writeStdReg@reg,c
  6832  0038B8  D017               	goto	l9911
  6833                           
  6834                           ; BSR set to: 0
  6835  0038BA  0EE0               	movlw	224
  6836  0038BC  604E               	cpfslt	vscp_writeStdReg@reg,c
  6837  0038BE  D014               	goto	l9911
  6838                           
  6839                           ; BSR set to: 0
  6840                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6841                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  6842  0038C0  C053  F049         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6843  0038C4  C049  F04A         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6844  0038C8  6A4B               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6845  0038CA  284A               	incf	??_vscp_writeStdReg+1,w,c
  6846  0038CC  E1E6               	bnz	l9895
  6847                           
  6848                           ; BSR set to: 0
  6849  0038CE  2852               	incf	_vscp_page_select,w,c
  6850  0038D0  E1E4               	bnz	l9895
  6851                           
  6852                           ; BSR set to: 0
  6853                           ;vscp_firmware.c: 762: else {
  6854                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  6855  0038D2  C048  F00C         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  6856  0038D6  504E               	movf	vscp_writeStdReg@reg,w,c
  6857  0038D8  0F30               	addlw	48
  6858  0038DA  EC1A  F021         	call	_vscp_setGUID
  6859                           
  6860                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  6861  0038DE  504E               	movf	vscp_writeStdReg@reg,w,c
  6862  0038E0  0F30               	addlw	48
  6863  0038E2  EC2A  F022         	call	_vscp_getGUID
  6864  0038E6  D015               	goto	L25
  6865  0038E8                     l9911:
  6866                           
  6867                           ; BSR set to: 0
  6868                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  6869  0038E8  504E               	movf	vscp_writeStdReg@reg,w,c
  6870  0038EA  0AA2               	xorlw	162
  6871  0038EC  E1D6               	bnz	l9895
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  6875  0038EE  5048               	movf	vscp_writeStdReg@value,w,c
  6876  0038F0  0A55               	xorlw	85
  6877  0038F2  E104               	bnz	l9919
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  6881  0038F4  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
  6882  0038F6  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;vscp_firmware.c: 771: rv = 0x55;
  6886  0038F8  0E55               	movlw	85
  6887  0038FA  D00B               	goto	L25
  6888  0038FC                     l9919:
  6889                           
  6890                           ; BSR set to: 0
  6891                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  6892  0038FC  5048               	movf	vscp_writeStdReg@value,w,c
  6893  0038FE  0AAA               	xorlw	170
  6894  003900  E10B               	bnz	l9929
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  6898  003902  0EE8               	movlw	232
  6899  003904  5D84               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  6900  003906  0E03               	movlw	3
  6901  003908  5985               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  6902  00390A  E205               	bc	l1197
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  6906  00390C  EC6D  F022         	call	_vscp_restoreDefaults	;wreg free
  6907                           
  6908                           ;vscp_firmware.c: 776: rv = 0xaa;
  6909  003910  0EAA               	movlw	170
  6910  003912                     L25:
  6911  003912  6E4D               	movwf	vscp_writeStdReg@rv,c
  6912                           
  6913                           ;vscp_firmware.c: 777: }
  6914  003914  D001               	goto	l9929
  6915  003916                     l1197:
  6916                           
  6917                           ; BSR set to: 0
  6918                           ;vscp_firmware.c: 778: else {
  6919                           ;vscp_firmware.c: 779: rv = 0;
  6920  003916  6A4D               	clrf	vscp_writeStdReg@rv,c
  6921  003918                     l9929:
  6922                           
  6923                           ;vscp_firmware.c: 787: }
  6924                           ;vscp_firmware.c: 789: return rv;
  6925  003918  504D               	movf	vscp_writeStdReg@rv,w,c
  6926  00391A  0012               	return	
  6927  00391C                     __end_of_vscp_writeStdReg:
  6928                           	opt stack 0
  6929                           tblptru	equ	0xFF8
  6930                           prodh	equ	0xFF4
  6931                           prodl	equ	0xFF3
  6932                           postinc0	equ	0xFEE
  6933                           wreg	equ	0xFE8
  6934                           indf2	equ	0xFDF
  6935                           postinc2	equ	0xFDE
  6936                           postdec2	equ	0xFDD
  6937                           fsr2h	equ	0xFDA
  6938                           fsr2l	equ	0xFD9
  6939                           status	equ	0xFD8
  6940                           
  6941 ;; *************** function _vscp_restoreDefaults *****************
  6942 ;; Defined at:
  6943 ;;		line 2565 in file "../main.c"
  6944 ;; Parameters:    Size  Location     Type
  6945 ;;		None
  6946 ;; Auto vars:     Size  Location     Type
  6947 ;;		None
  6948 ;; Return value:  Size  Location     Type
  6949 ;;		None               void
  6950 ;; Registers used:
  6951 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6952 ;; Tracked objects:
  6953 ;;		On entry : F/0
  6954 ;;		On exit  : 0/0
  6955 ;;		Unchanged: 0/0
  6956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6957 ;;      Params:         0       0       0       0       0       0       0
  6958 ;;      Locals:         0       0       0       0       0       0       0
  6959 ;;      Temps:          0       0       0       0       0       0       0
  6960 ;;      Totals:         0       0       0       0       0       0       0
  6961 ;;Total ram usage:        0 bytes
  6962 ;; Hardware stack levels used:    1
  6963 ;; Hardware stack levels required when called:    5
  6964 ;; This function calls:
  6965 ;;		_init_app_eeprom
  6966 ;;		_init_app_ram
  6967 ;; This function is called by:
  6968 ;;		_vscp_writeStdReg
  6969 ;; This function uses a non-reentrant model
  6970 ;;
  6971                           
  6972                           	psect	text19
  6973  0044DA                     __ptext19:
  6974                           	opt stack 0
  6975  0044DA                     _vscp_restoreDefaults:
  6976                           	opt stack 23
  6977                           
  6978                           ; BSR set to: 0
  6979                           ;main.c: 2566: init_app_eeprom();
  6980                           
  6981                           ;incstack = 0
  6982                           ;incstack = 0
  6983  0044DA  ECD9  F00E         	call	_init_app_eeprom	;wreg free
  6984                           
  6985                           ;main.c: 2567: init_app_ram();
  6986  0044DE  EF84  F01B         	goto	_init_app_ram	;wreg free
  6987  0044E2                     __end_of_vscp_restoreDefaults:
  6988                           	opt stack 0
  6989                           tblptru	equ	0xFF8
  6990                           prodh	equ	0xFF4
  6991                           prodl	equ	0xFF3
  6992                           postinc0	equ	0xFEE
  6993                           wreg	equ	0xFE8
  6994                           indf2	equ	0xFDF
  6995                           postinc2	equ	0xFDE
  6996                           postdec2	equ	0xFDD
  6997                           fsr2h	equ	0xFDA
  6998                           fsr2l	equ	0xFD9
  6999                           status	equ	0xFD8
  7000                           
  7001 ;; *************** function _init_app_eeprom *****************
  7002 ;; Defined at:
  7003 ;;		line 481 in file "../main.c"
  7004 ;; Parameters:    Size  Location     Type
  7005 ;;		None
  7006 ;; Auto vars:     Size  Location     Type
  7007 ;;  j               1   70[COMRAM] unsigned char 
  7008 ;;  i               1   69[COMRAM] unsigned char 
  7009 ;; Return value:  Size  Location     Type
  7010 ;;		None               void
  7011 ;; Registers used:
  7012 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7013 ;; Tracked objects:
  7014 ;;		On entry : 0/0
  7015 ;;		On exit  : 0/0
  7016 ;;		Unchanged: 0/0
  7017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7018 ;;      Params:         0       0       0       0       0       0       0
  7019 ;;      Locals:         2       0       0       0       0       0       0
  7020 ;;      Temps:          2       0       0       0       0       0       0
  7021 ;;      Totals:         4       0       0       0       0       0       0
  7022 ;;Total ram usage:        4 bytes
  7023 ;; Hardware stack levels used:    1
  7024 ;; Hardware stack levels required when called:    4
  7025 ;; This function calls:
  7026 ;;		_calculateSetFilterMask
  7027 ;;		_Busy_eep
  7028 ;;		_Write_b_eep
  7029 ;; This function is called by:
  7030 ;;		_main
  7031 ;;		_vscp_restoreDefaults
  7032 ;; This function uses a non-reentrant model
  7033 ;;
  7034                           
  7035                           	psect	text20
  7036  001DB2                     __ptext20:
  7037                           	opt stack 0
  7038  001DB2                     _init_app_eeprom:
  7039                           	opt stack 23
  7040                           
  7041                           ;main.c: 482: unsigned char i, j;
  7042                           ;main.c: 484: (Busy_eep(), Write_b_eep(0x43 + 0,0));
  7043                           
  7044                           ;incstack = 0
  7045                           ;incstack = 0
  7046  001DB2  EC71  F022         	call	_Busy_eep	;wreg free
  7047  001DB6  6A09               	clrf	?_Write_b_eep+1,c
  7048  001DB8  0E43               	movlw	67
  7049  001DBA  6E08               	movwf	?_Write_b_eep,c
  7050  001DBC  0E00               	movlw	0
  7051  001DBE  6A0A               	clrf	?_Write_b_eep+2,c
  7052  001DC0  EC56  F020         	call	_Write_b_eep	;wreg free
  7053                           
  7054                           ;main.c: 485: (Busy_eep(), Write_b_eep(0x43 + 1,0));
  7055  001DC4  EC71  F022         	call	_Busy_eep	;wreg free
  7056  001DC8  6A09               	clrf	?_Write_b_eep+1,c
  7057  001DCA  0E44               	movlw	68
  7058  001DCC  6E08               	movwf	?_Write_b_eep,c
  7059  001DCE  0E00               	movlw	0
  7060  001DD0  6A0A               	clrf	?_Write_b_eep+2,c
  7061  001DD2  EC56  F020         	call	_Write_b_eep	;wreg free
  7062                           
  7063                           ;main.c: 487: (Busy_eep(), Write_b_eep(0x43 + 10,0x08 | 0x10 | 0x80));
  7064  001DD6  EC71  F022         	call	_Busy_eep	;wreg free
  7065  001DDA  6A09               	clrf	?_Write_b_eep+1,c
  7066  001DDC  0E4D               	movlw	77
  7067  001DDE  6E08               	movwf	?_Write_b_eep,c
  7068  001DE0  0E98               	movlw	152
  7069  001DE2  6E0A               	movwf	?_Write_b_eep+2,c
  7070  001DE4  EC56  F020         	call	_Write_b_eep	;wreg free
  7071                           
  7072                           ;main.c: 492: (Busy_eep(), Write_b_eep(0x43 + 11,0x08 | 0x10 | 0x80));
  7073  001DE8  EC71  F022         	call	_Busy_eep	;wreg free
  7074  001DEC  6A09               	clrf	?_Write_b_eep+1,c
  7075  001DEE  0E4E               	movlw	78
  7076  001DF0  6E08               	movwf	?_Write_b_eep,c
  7077  001DF2  0E98               	movlw	152
  7078  001DF4  6E0A               	movwf	?_Write_b_eep+2,c
  7079  001DF6  EC56  F020         	call	_Write_b_eep	;wreg free
  7080                           
  7081                           ;main.c: 497: (Busy_eep(), Write_b_eep(0x43 + 12,0x08 | 0x10 | 0x80));
  7082  001DFA  EC71  F022         	call	_Busy_eep	;wreg free
  7083  001DFE  6A09               	clrf	?_Write_b_eep+1,c
  7084  001E00  0E4F               	movlw	79
  7085  001E02  6E08               	movwf	?_Write_b_eep,c
  7086  001E04  0E98               	movlw	152
  7087  001E06  6E0A               	movwf	?_Write_b_eep+2,c
  7088  001E08  EC56  F020         	call	_Write_b_eep	;wreg free
  7089                           
  7090                           ;main.c: 502: (Busy_eep(), Write_b_eep(0x43 + 13,0x08 | 0x10 | 0x80));
  7091  001E0C  EC71  F022         	call	_Busy_eep	;wreg free
  7092  001E10  6A09               	clrf	?_Write_b_eep+1,c
  7093  001E12  0E50               	movlw	80
  7094  001E14  6E08               	movwf	?_Write_b_eep,c
  7095  001E16  0E98               	movlw	152
  7096  001E18  6E0A               	movwf	?_Write_b_eep+2,c
  7097  001E1A  EC56  F020         	call	_Write_b_eep	;wreg free
  7098                           
  7099                           ;main.c: 507: (Busy_eep(), Write_b_eep(0x43 + 14,0x08 | 0x10 | 0x80));
  7100  001E1E  EC71  F022         	call	_Busy_eep	;wreg free
  7101  001E22  6A09               	clrf	?_Write_b_eep+1,c
  7102  001E24  0E51               	movlw	81
  7103  001E26  6E08               	movwf	?_Write_b_eep,c
  7104  001E28  0E98               	movlw	152
  7105  001E2A  6E0A               	movwf	?_Write_b_eep+2,c
  7106  001E2C  EC56  F020         	call	_Write_b_eep	;wreg free
  7107                           
  7108                           ;main.c: 512: (Busy_eep(), Write_b_eep(0x43 + 15,0x08 | 0x10 | 0x80));
  7109  001E30  EC71  F022         	call	_Busy_eep	;wreg free
  7110  001E34  6A09               	clrf	?_Write_b_eep+1,c
  7111  001E36  0E52               	movlw	82
  7112  001E38  6E08               	movwf	?_Write_b_eep,c
  7113  001E3A  0E98               	movlw	152
  7114  001E3C  6E0A               	movwf	?_Write_b_eep+2,c
  7115  001E3E  EC56  F020         	call	_Write_b_eep	;wreg free
  7116                           
  7117                           ;main.c: 517: (Busy_eep(), Write_b_eep(0x43 + 16,0x08 | 0x10 | 0x80));
  7118  001E42  EC71  F022         	call	_Busy_eep	;wreg free
  7119  001E46  6A09               	clrf	?_Write_b_eep+1,c
  7120  001E48  0E53               	movlw	83
  7121  001E4A  6E08               	movwf	?_Write_b_eep,c
  7122  001E4C  0E98               	movlw	152
  7123  001E4E  6E0A               	movwf	?_Write_b_eep+2,c
  7124  001E50  EC56  F020         	call	_Write_b_eep	;wreg free
  7125                           
  7126                           ;main.c: 522: (Busy_eep(), Write_b_eep(0x43 + 17,0x08 | 0x10 | 0x80));
  7127  001E54  EC71  F022         	call	_Busy_eep	;wreg free
  7128  001E58  6A09               	clrf	?_Write_b_eep+1,c
  7129  001E5A  0E54               	movlw	84
  7130  001E5C  6E08               	movwf	?_Write_b_eep,c
  7131  001E5E  0E98               	movlw	152
  7132  001E60  6E0A               	movwf	?_Write_b_eep+2,c
  7133  001E62  EC56  F020         	call	_Write_b_eep	;wreg free
  7134                           
  7135                           ;main.c: 527: (Busy_eep(), Write_b_eep(0x43 + 18,0));
  7136  001E66  EC71  F022         	call	_Busy_eep	;wreg free
  7137  001E6A  6A09               	clrf	?_Write_b_eep+1,c
  7138  001E6C  0E55               	movlw	85
  7139  001E6E  6E08               	movwf	?_Write_b_eep,c
  7140  001E70  0E00               	movlw	0
  7141  001E72  6A0A               	clrf	?_Write_b_eep+2,c
  7142  001E74  EC56  F020         	call	_Write_b_eep	;wreg free
  7143                           
  7144                           ;main.c: 528: (Busy_eep(), Write_b_eep(0x43 + 19,0));
  7145  001E78  EC71  F022         	call	_Busy_eep	;wreg free
  7146  001E7C  6A09               	clrf	?_Write_b_eep+1,c
  7147  001E7E  0E56               	movlw	86
  7148  001E80  6E08               	movwf	?_Write_b_eep,c
  7149  001E82  0E00               	movlw	0
  7150  001E84  6A0A               	clrf	?_Write_b_eep+2,c
  7151  001E86  EC56  F020         	call	_Write_b_eep	;wreg free
  7152                           
  7153                           ;main.c: 529: (Busy_eep(), Write_b_eep(0x43 + 20,0));
  7154  001E8A  EC71  F022         	call	_Busy_eep	;wreg free
  7155  001E8E  6A09               	clrf	?_Write_b_eep+1,c
  7156  001E90  0E57               	movlw	87
  7157  001E92  6E08               	movwf	?_Write_b_eep,c
  7158  001E94  0E00               	movlw	0
  7159  001E96  6A0A               	clrf	?_Write_b_eep+2,c
  7160  001E98  EC56  F020         	call	_Write_b_eep	;wreg free
  7161                           
  7162                           ;main.c: 530: (Busy_eep(), Write_b_eep(0x43 + 21,0));
  7163  001E9C  EC71  F022         	call	_Busy_eep	;wreg free
  7164  001EA0  6A09               	clrf	?_Write_b_eep+1,c
  7165  001EA2  0E58               	movlw	88
  7166  001EA4  6E08               	movwf	?_Write_b_eep,c
  7167  001EA6  0E00               	movlw	0
  7168  001EA8  6A0A               	clrf	?_Write_b_eep+2,c
  7169  001EAA  EC56  F020         	call	_Write_b_eep	;wreg free
  7170                           
  7171                           ;main.c: 531: (Busy_eep(), Write_b_eep(0x43 + 22,0));
  7172  001EAE  EC71  F022         	call	_Busy_eep	;wreg free
  7173  001EB2  6A09               	clrf	?_Write_b_eep+1,c
  7174  001EB4  0E59               	movlw	89
  7175  001EB6  6E08               	movwf	?_Write_b_eep,c
  7176  001EB8  0E00               	movlw	0
  7177  001EBA  6A0A               	clrf	?_Write_b_eep+2,c
  7178  001EBC  EC56  F020         	call	_Write_b_eep	;wreg free
  7179                           
  7180                           ;main.c: 532: (Busy_eep(), Write_b_eep(0x43 + 23,0));
  7181  001EC0  EC71  F022         	call	_Busy_eep	;wreg free
  7182  001EC4  6A09               	clrf	?_Write_b_eep+1,c
  7183  001EC6  0E5A               	movlw	90
  7184  001EC8  6E08               	movwf	?_Write_b_eep,c
  7185  001ECA  0E00               	movlw	0
  7186  001ECC  6A0A               	clrf	?_Write_b_eep+2,c
  7187  001ECE  EC56  F020         	call	_Write_b_eep	;wreg free
  7188                           
  7189                           ;main.c: 533: (Busy_eep(), Write_b_eep(0x43 + 24,0));
  7190  001ED2  EC71  F022         	call	_Busy_eep	;wreg free
  7191  001ED6  6A09               	clrf	?_Write_b_eep+1,c
  7192  001ED8  0E5B               	movlw	91
  7193  001EDA  6E08               	movwf	?_Write_b_eep,c
  7194  001EDC  0E00               	movlw	0
  7195  001EDE  6A0A               	clrf	?_Write_b_eep+2,c
  7196  001EE0  EC56  F020         	call	_Write_b_eep	;wreg free
  7197                           
  7198                           ;main.c: 534: (Busy_eep(), Write_b_eep(0x43 + 25,0));
  7199  001EE4  EC71  F022         	call	_Busy_eep	;wreg free
  7200  001EE8  6A09               	clrf	?_Write_b_eep+1,c
  7201  001EEA  0E5C               	movlw	92
  7202  001EEC  6E08               	movwf	?_Write_b_eep,c
  7203  001EEE  0E00               	movlw	0
  7204  001EF0  6A0A               	clrf	?_Write_b_eep+2,c
  7205  001EF2  EC56  F020         	call	_Write_b_eep	;wreg free
  7206                           
  7207                           ;main.c: 535: (Busy_eep(), Write_b_eep(0x43 + 26,0));
  7208  001EF6  EC71  F022         	call	_Busy_eep	;wreg free
  7209  001EFA  6A09               	clrf	?_Write_b_eep+1,c
  7210  001EFC  0E5D               	movlw	93
  7211  001EFE  6E08               	movwf	?_Write_b_eep,c
  7212  001F00  0E00               	movlw	0
  7213  001F02  6A0A               	clrf	?_Write_b_eep+2,c
  7214  001F04  EC56  F020         	call	_Write_b_eep	;wreg free
  7215                           
  7216                           ;main.c: 536: (Busy_eep(), Write_b_eep(0x43 + 27,0));
  7217  001F08  EC71  F022         	call	_Busy_eep	;wreg free
  7218  001F0C  6A09               	clrf	?_Write_b_eep+1,c
  7219  001F0E  0E5E               	movlw	94
  7220  001F10  6E08               	movwf	?_Write_b_eep,c
  7221  001F12  0E00               	movlw	0
  7222  001F14  6A0A               	clrf	?_Write_b_eep+2,c
  7223  001F16  EC56  F020         	call	_Write_b_eep	;wreg free
  7224                           
  7225                           ;main.c: 537: (Busy_eep(), Write_b_eep(0x43 + 28,0));
  7226  001F1A  EC71  F022         	call	_Busy_eep	;wreg free
  7227  001F1E  6A09               	clrf	?_Write_b_eep+1,c
  7228  001F20  0E5F               	movlw	95
  7229  001F22  6E08               	movwf	?_Write_b_eep,c
  7230  001F24  0E00               	movlw	0
  7231  001F26  6A0A               	clrf	?_Write_b_eep+2,c
  7232  001F28  EC56  F020         	call	_Write_b_eep	;wreg free
  7233                           
  7234                           ;main.c: 538: (Busy_eep(), Write_b_eep(0x43 + 29,0));
  7235  001F2C  EC71  F022         	call	_Busy_eep	;wreg free
  7236  001F30  6A09               	clrf	?_Write_b_eep+1,c
  7237  001F32  0E60               	movlw	96
  7238  001F34  6E08               	movwf	?_Write_b_eep,c
  7239  001F36  0E00               	movlw	0
  7240  001F38  6A0A               	clrf	?_Write_b_eep+2,c
  7241  001F3A  EC56  F020         	call	_Write_b_eep	;wreg free
  7242                           
  7243                           ;main.c: 539: (Busy_eep(), Write_b_eep(0x43 + 30,0));
  7244  001F3E  EC71  F022         	call	_Busy_eep	;wreg free
  7245  001F42  6A09               	clrf	?_Write_b_eep+1,c
  7246  001F44  0E61               	movlw	97
  7247  001F46  6E08               	movwf	?_Write_b_eep,c
  7248  001F48  0E00               	movlw	0
  7249  001F4A  6A0A               	clrf	?_Write_b_eep+2,c
  7250  001F4C  EC56  F020         	call	_Write_b_eep	;wreg free
  7251                           
  7252                           ;main.c: 540: (Busy_eep(), Write_b_eep(0x43 + 31,0));
  7253  001F50  EC71  F022         	call	_Busy_eep	;wreg free
  7254  001F54  6A09               	clrf	?_Write_b_eep+1,c
  7255  001F56  0E62               	movlw	98
  7256  001F58  6E08               	movwf	?_Write_b_eep,c
  7257  001F5A  0E00               	movlw	0
  7258  001F5C  6A0A               	clrf	?_Write_b_eep+2,c
  7259  001F5E  EC56  F020         	call	_Write_b_eep	;wreg free
  7260                           
  7261                           ;main.c: 541: (Busy_eep(), Write_b_eep(0x43 + 32,0));
  7262  001F62  EC71  F022         	call	_Busy_eep	;wreg free
  7263  001F66  6A09               	clrf	?_Write_b_eep+1,c
  7264  001F68  0E63               	movlw	99
  7265  001F6A  6E08               	movwf	?_Write_b_eep,c
  7266  001F6C  0E00               	movlw	0
  7267  001F6E  6A0A               	clrf	?_Write_b_eep+2,c
  7268  001F70  EC56  F020         	call	_Write_b_eep	;wreg free
  7269                           
  7270                           ;main.c: 542: (Busy_eep(), Write_b_eep(0x43 + 33,0));
  7271  001F74  EC71  F022         	call	_Busy_eep	;wreg free
  7272  001F78  6A09               	clrf	?_Write_b_eep+1,c
  7273  001F7A  0E64               	movlw	100
  7274  001F7C  6E08               	movwf	?_Write_b_eep,c
  7275  001F7E  0E00               	movlw	0
  7276  001F80  6A0A               	clrf	?_Write_b_eep+2,c
  7277  001F82  EC56  F020         	call	_Write_b_eep	;wreg free
  7278                           
  7279                           ;main.c: 544: (Busy_eep(), Write_b_eep(0x43 + 34,0));
  7280  001F86  EC71  F022         	call	_Busy_eep	;wreg free
  7281  001F8A  6A09               	clrf	?_Write_b_eep+1,c
  7282  001F8C  0E65               	movlw	101
  7283  001F8E  6E08               	movwf	?_Write_b_eep,c
  7284  001F90  0E00               	movlw	0
  7285  001F92  6A0A               	clrf	?_Write_b_eep+2,c
  7286  001F94  EC56  F020         	call	_Write_b_eep	;wreg free
  7287                           
  7288                           ;main.c: 545: (Busy_eep(), Write_b_eep(0x43 + 35,0));
  7289  001F98  EC71  F022         	call	_Busy_eep	;wreg free
  7290  001F9C  6A09               	clrf	?_Write_b_eep+1,c
  7291  001F9E  0E66               	movlw	102
  7292  001FA0  6E08               	movwf	?_Write_b_eep,c
  7293  001FA2  0E00               	movlw	0
  7294  001FA4  6A0A               	clrf	?_Write_b_eep+2,c
  7295  001FA6  EC56  F020         	call	_Write_b_eep	;wreg free
  7296                           
  7297                           ;main.c: 546: (Busy_eep(), Write_b_eep(0x43 + 36,0));
  7298  001FAA  EC71  F022         	call	_Busy_eep	;wreg free
  7299  001FAE  6A09               	clrf	?_Write_b_eep+1,c
  7300  001FB0  0E67               	movlw	103
  7301  001FB2  6E08               	movwf	?_Write_b_eep,c
  7302  001FB4  0E00               	movlw	0
  7303  001FB6  6A0A               	clrf	?_Write_b_eep+2,c
  7304  001FB8  EC56  F020         	call	_Write_b_eep	;wreg free
  7305                           
  7306                           ;main.c: 547: (Busy_eep(), Write_b_eep(0x43 + 37,0));
  7307  001FBC  EC71  F022         	call	_Busy_eep	;wreg free
  7308  001FC0  6A09               	clrf	?_Write_b_eep+1,c
  7309  001FC2  0E68               	movlw	104
  7310  001FC4  6E08               	movwf	?_Write_b_eep,c
  7311  001FC6  0E00               	movlw	0
  7312  001FC8  6A0A               	clrf	?_Write_b_eep+2,c
  7313  001FCA  EC56  F020         	call	_Write_b_eep	;wreg free
  7314                           
  7315                           ;main.c: 548: (Busy_eep(), Write_b_eep(0x43 + 38,0));
  7316  001FCE  EC71  F022         	call	_Busy_eep	;wreg free
  7317  001FD2  6A09               	clrf	?_Write_b_eep+1,c
  7318  001FD4  0E69               	movlw	105
  7319  001FD6  6E08               	movwf	?_Write_b_eep,c
  7320  001FD8  0E00               	movlw	0
  7321  001FDA  6A0A               	clrf	?_Write_b_eep+2,c
  7322  001FDC  EC56  F020         	call	_Write_b_eep	;wreg free
  7323                           
  7324                           ;main.c: 549: (Busy_eep(), Write_b_eep(0x43 + 39,0));
  7325  001FE0  EC71  F022         	call	_Busy_eep	;wreg free
  7326  001FE4  6A09               	clrf	?_Write_b_eep+1,c
  7327  001FE6  0E6A               	movlw	106
  7328  001FE8  6E08               	movwf	?_Write_b_eep,c
  7329  001FEA  0E00               	movlw	0
  7330  001FEC  6A0A               	clrf	?_Write_b_eep+2,c
  7331  001FEE  EC56  F020         	call	_Write_b_eep	;wreg free
  7332                           
  7333                           ;main.c: 550: (Busy_eep(), Write_b_eep(0x43 + 40,0));
  7334  001FF2  EC71  F022         	call	_Busy_eep	;wreg free
  7335  001FF6  6A09               	clrf	?_Write_b_eep+1,c
  7336  001FF8  0E6B               	movlw	107
  7337  001FFA  6E08               	movwf	?_Write_b_eep,c
  7338  001FFC  0E00               	movlw	0
  7339  001FFE  6A0A               	clrf	?_Write_b_eep+2,c
  7340  002000  EC56  F020         	call	_Write_b_eep	;wreg free
  7341                           
  7342                           ;main.c: 551: (Busy_eep(), Write_b_eep(0x43 + 41,0));
  7343  002004  EC71  F022         	call	_Busy_eep	;wreg free
  7344  002008  6A09               	clrf	?_Write_b_eep+1,c
  7345  00200A  0E6C               	movlw	108
  7346  00200C  6E08               	movwf	?_Write_b_eep,c
  7347  00200E  0E00               	movlw	0
  7348  002010  6A0A               	clrf	?_Write_b_eep+2,c
  7349  002012  EC56  F020         	call	_Write_b_eep	;wreg free
  7350                           
  7351                           ;main.c: 552: (Busy_eep(), Write_b_eep(0x43 + 42,0));
  7352  002016  EC71  F022         	call	_Busy_eep	;wreg free
  7353  00201A  6A09               	clrf	?_Write_b_eep+1,c
  7354  00201C  0E6D               	movlw	109
  7355  00201E  6E08               	movwf	?_Write_b_eep,c
  7356  002020  0E00               	movlw	0
  7357  002022  6A0A               	clrf	?_Write_b_eep+2,c
  7358  002024  EC56  F020         	call	_Write_b_eep	;wreg free
  7359                           
  7360                           ;main.c: 553: (Busy_eep(), Write_b_eep(0x43 + 43,0));
  7361  002028  EC71  F022         	call	_Busy_eep	;wreg free
  7362  00202C  6A09               	clrf	?_Write_b_eep+1,c
  7363  00202E  0E6E               	movlw	110
  7364  002030  6E08               	movwf	?_Write_b_eep,c
  7365  002032  0E00               	movlw	0
  7366  002034  6A0A               	clrf	?_Write_b_eep+2,c
  7367  002036  EC56  F020         	call	_Write_b_eep	;wreg free
  7368                           
  7369                           ;main.c: 554: (Busy_eep(), Write_b_eep(0x43 + 44,0));
  7370  00203A  EC71  F022         	call	_Busy_eep	;wreg free
  7371  00203E  6A09               	clrf	?_Write_b_eep+1,c
  7372  002040  0E6F               	movlw	111
  7373  002042  6E08               	movwf	?_Write_b_eep,c
  7374  002044  0E00               	movlw	0
  7375  002046  6A0A               	clrf	?_Write_b_eep+2,c
  7376  002048  EC56  F020         	call	_Write_b_eep	;wreg free
  7377                           
  7378                           ;main.c: 555: (Busy_eep(), Write_b_eep(0x43 + 45,0));
  7379  00204C  EC71  F022         	call	_Busy_eep	;wreg free
  7380  002050  6A09               	clrf	?_Write_b_eep+1,c
  7381  002052  0E70               	movlw	112
  7382  002054  6E08               	movwf	?_Write_b_eep,c
  7383  002056  0E00               	movlw	0
  7384  002058  6A0A               	clrf	?_Write_b_eep+2,c
  7385  00205A  EC56  F020         	call	_Write_b_eep	;wreg free
  7386                           
  7387                           ;main.c: 556: (Busy_eep(), Write_b_eep(0x43 + 46,0));
  7388  00205E  EC71  F022         	call	_Busy_eep	;wreg free
  7389  002062  6A09               	clrf	?_Write_b_eep+1,c
  7390  002064  0E71               	movlw	113
  7391  002066  6E08               	movwf	?_Write_b_eep,c
  7392  002068  0E00               	movlw	0
  7393  00206A  6A0A               	clrf	?_Write_b_eep+2,c
  7394  00206C  EC56  F020         	call	_Write_b_eep	;wreg free
  7395                           
  7396                           ;main.c: 557: (Busy_eep(), Write_b_eep(0x43 + 47,0));
  7397  002070  EC71  F022         	call	_Busy_eep	;wreg free
  7398  002074  6A09               	clrf	?_Write_b_eep+1,c
  7399  002076  0E72               	movlw	114
  7400  002078  6E08               	movwf	?_Write_b_eep,c
  7401  00207A  0E00               	movlw	0
  7402  00207C  6A0A               	clrf	?_Write_b_eep+2,c
  7403  00207E  EC56  F020         	call	_Write_b_eep	;wreg free
  7404                           
  7405                           ;main.c: 558: (Busy_eep(), Write_b_eep(0x43 + 48,0));
  7406  002082  EC71  F022         	call	_Busy_eep	;wreg free
  7407  002086  6A09               	clrf	?_Write_b_eep+1,c
  7408  002088  0E73               	movlw	115
  7409  00208A  6E08               	movwf	?_Write_b_eep,c
  7410  00208C  0E00               	movlw	0
  7411  00208E  6A0A               	clrf	?_Write_b_eep+2,c
  7412  002090  EC56  F020         	call	_Write_b_eep	;wreg free
  7413                           
  7414                           ;main.c: 559: (Busy_eep(), Write_b_eep(0x43 + 49,0));
  7415  002094  EC71  F022         	call	_Busy_eep	;wreg free
  7416  002098  6A09               	clrf	?_Write_b_eep+1,c
  7417  00209A  0E74               	movlw	116
  7418  00209C  6E08               	movwf	?_Write_b_eep,c
  7419  00209E  0E00               	movlw	0
  7420  0020A0  6A0A               	clrf	?_Write_b_eep+2,c
  7421  0020A2  EC56  F020         	call	_Write_b_eep	;wreg free
  7422                           
  7423                           ;main.c: 561: (Busy_eep(), Write_b_eep(0x43 + 50,0));
  7424  0020A6  EC71  F022         	call	_Busy_eep	;wreg free
  7425  0020AA  6A09               	clrf	?_Write_b_eep+1,c
  7426  0020AC  0E75               	movlw	117
  7427  0020AE  6E08               	movwf	?_Write_b_eep,c
  7428  0020B0  0E00               	movlw	0
  7429  0020B2  6A0A               	clrf	?_Write_b_eep+2,c
  7430  0020B4  EC56  F020         	call	_Write_b_eep	;wreg free
  7431                           
  7432                           ;main.c: 562: (Busy_eep(), Write_b_eep(0x43 + 51,0));
  7433  0020B8  EC71  F022         	call	_Busy_eep	;wreg free
  7434  0020BC  6A09               	clrf	?_Write_b_eep+1,c
  7435  0020BE  0E76               	movlw	118
  7436  0020C0  6E08               	movwf	?_Write_b_eep,c
  7437  0020C2  0E00               	movlw	0
  7438  0020C4  6A0A               	clrf	?_Write_b_eep+2,c
  7439  0020C6  EC56  F020         	call	_Write_b_eep	;wreg free
  7440                           
  7441                           ;main.c: 563: (Busy_eep(), Write_b_eep(0x43 + 52,0));
  7442  0020CA  EC71  F022         	call	_Busy_eep	;wreg free
  7443  0020CE  6A09               	clrf	?_Write_b_eep+1,c
  7444  0020D0  0E77               	movlw	119
  7445  0020D2  6E08               	movwf	?_Write_b_eep,c
  7446  0020D4  0E00               	movlw	0
  7447  0020D6  6A0A               	clrf	?_Write_b_eep+2,c
  7448  0020D8  EC56  F020         	call	_Write_b_eep	;wreg free
  7449                           
  7450                           ;main.c: 564: (Busy_eep(), Write_b_eep(0x43 + 53,0));
  7451  0020DC  EC71  F022         	call	_Busy_eep	;wreg free
  7452  0020E0  6A09               	clrf	?_Write_b_eep+1,c
  7453  0020E2  0E78               	movlw	120
  7454  0020E4  6E08               	movwf	?_Write_b_eep,c
  7455  0020E6  0E00               	movlw	0
  7456  0020E8  6A0A               	clrf	?_Write_b_eep+2,c
  7457  0020EA  EC56  F020         	call	_Write_b_eep	;wreg free
  7458                           
  7459                           ;main.c: 565: (Busy_eep(), Write_b_eep(0x43 + 54,0));
  7460  0020EE  EC71  F022         	call	_Busy_eep	;wreg free
  7461  0020F2  6A09               	clrf	?_Write_b_eep+1,c
  7462  0020F4  0E79               	movlw	121
  7463  0020F6  6E08               	movwf	?_Write_b_eep,c
  7464  0020F8  0E00               	movlw	0
  7465  0020FA  6A0A               	clrf	?_Write_b_eep+2,c
  7466  0020FC  EC56  F020         	call	_Write_b_eep	;wreg free
  7467                           
  7468                           ;main.c: 566: (Busy_eep(), Write_b_eep(0x43 + 55,0));
  7469  002100  EC71  F022         	call	_Busy_eep	;wreg free
  7470  002104  6A09               	clrf	?_Write_b_eep+1,c
  7471  002106  0E7A               	movlw	122
  7472  002108  6E08               	movwf	?_Write_b_eep,c
  7473  00210A  0E00               	movlw	0
  7474  00210C  6A0A               	clrf	?_Write_b_eep+2,c
  7475  00210E  EC56  F020         	call	_Write_b_eep	;wreg free
  7476                           
  7477                           ;main.c: 567: (Busy_eep(), Write_b_eep(0x43 + 56,0));
  7478  002112  EC71  F022         	call	_Busy_eep	;wreg free
  7479  002116  6A09               	clrf	?_Write_b_eep+1,c
  7480  002118  0E7B               	movlw	123
  7481  00211A  6E08               	movwf	?_Write_b_eep,c
  7482  00211C  0E00               	movlw	0
  7483  00211E  6A0A               	clrf	?_Write_b_eep+2,c
  7484  002120  EC56  F020         	call	_Write_b_eep	;wreg free
  7485                           
  7486                           ;main.c: 568: (Busy_eep(), Write_b_eep(0x43 + 57,0));
  7487  002124  EC71  F022         	call	_Busy_eep	;wreg free
  7488  002128  6A09               	clrf	?_Write_b_eep+1,c
  7489  00212A  0E7C               	movlw	124
  7490  00212C  6E08               	movwf	?_Write_b_eep,c
  7491  00212E  0E00               	movlw	0
  7492  002130  6A0A               	clrf	?_Write_b_eep+2,c
  7493  002132  EC56  F020         	call	_Write_b_eep	;wreg free
  7494                           
  7495                           ;main.c: 569: (Busy_eep(), Write_b_eep(0x43 + 58,0));
  7496  002136  EC71  F022         	call	_Busy_eep	;wreg free
  7497  00213A  6A09               	clrf	?_Write_b_eep+1,c
  7498  00213C  0E7D               	movlw	125
  7499  00213E  6E08               	movwf	?_Write_b_eep,c
  7500  002140  0E00               	movlw	0
  7501  002142  6A0A               	clrf	?_Write_b_eep+2,c
  7502  002144  EC56  F020         	call	_Write_b_eep	;wreg free
  7503                           
  7504                           ;main.c: 570: (Busy_eep(), Write_b_eep(0x43 + 59,0));
  7505  002148  EC71  F022         	call	_Busy_eep	;wreg free
  7506  00214C  6A09               	clrf	?_Write_b_eep+1,c
  7507  00214E  0E7E               	movlw	126
  7508  002150  6E08               	movwf	?_Write_b_eep,c
  7509  002152  0E00               	movlw	0
  7510  002154  6A0A               	clrf	?_Write_b_eep+2,c
  7511  002156  EC56  F020         	call	_Write_b_eep	;wreg free
  7512                           
  7513                           ;main.c: 571: (Busy_eep(), Write_b_eep(0x43 + 60,0));
  7514  00215A  EC71  F022         	call	_Busy_eep	;wreg free
  7515  00215E  6A09               	clrf	?_Write_b_eep+1,c
  7516  002160  0E7F               	movlw	127
  7517  002162  6E08               	movwf	?_Write_b_eep,c
  7518  002164  0E00               	movlw	0
  7519  002166  6A0A               	clrf	?_Write_b_eep+2,c
  7520  002168  EC56  F020         	call	_Write_b_eep	;wreg free
  7521                           
  7522                           ;main.c: 572: (Busy_eep(), Write_b_eep(0x43 + 61,0));
  7523  00216C  EC71  F022         	call	_Busy_eep	;wreg free
  7524  002170  6A09               	clrf	?_Write_b_eep+1,c
  7525  002172  0E80               	movlw	128
  7526  002174  6E08               	movwf	?_Write_b_eep,c
  7527  002176  0E00               	movlw	0
  7528  002178  6A0A               	clrf	?_Write_b_eep+2,c
  7529  00217A  EC56  F020         	call	_Write_b_eep	;wreg free
  7530                           
  7531                           ;main.c: 573: (Busy_eep(), Write_b_eep(0x43 + 62,0));
  7532  00217E  EC71  F022         	call	_Busy_eep	;wreg free
  7533  002182  6A09               	clrf	?_Write_b_eep+1,c
  7534  002184  0E81               	movlw	129
  7535  002186  6E08               	movwf	?_Write_b_eep,c
  7536  002188  0E00               	movlw	0
  7537  00218A  6A0A               	clrf	?_Write_b_eep+2,c
  7538  00218C  EC56  F020         	call	_Write_b_eep	;wreg free
  7539                           
  7540                           ;main.c: 574: (Busy_eep(), Write_b_eep(0x43 + 63,0));
  7541  002190  EC71  F022         	call	_Busy_eep	;wreg free
  7542  002194  6A09               	clrf	?_Write_b_eep+1,c
  7543  002196  0E82               	movlw	130
  7544  002198  6E08               	movwf	?_Write_b_eep,c
  7545  00219A  0E00               	movlw	0
  7546  00219C  6A0A               	clrf	?_Write_b_eep+2,c
  7547  00219E  EC56  F020         	call	_Write_b_eep	;wreg free
  7548                           
  7549                           ;main.c: 575: (Busy_eep(), Write_b_eep(0x43 + 64,0));
  7550  0021A2  EC71  F022         	call	_Busy_eep	;wreg free
  7551  0021A6  6A09               	clrf	?_Write_b_eep+1,c
  7552  0021A8  0E83               	movlw	131
  7553  0021AA  6E08               	movwf	?_Write_b_eep,c
  7554  0021AC  0E00               	movlw	0
  7555  0021AE  6A0A               	clrf	?_Write_b_eep+2,c
  7556  0021B0  EC56  F020         	call	_Write_b_eep	;wreg free
  7557                           
  7558                           ;main.c: 576: (Busy_eep(), Write_b_eep(0x43 + 65,0));
  7559  0021B4  EC71  F022         	call	_Busy_eep	;wreg free
  7560  0021B8  6A09               	clrf	?_Write_b_eep+1,c
  7561  0021BA  0E84               	movlw	132
  7562  0021BC  6E08               	movwf	?_Write_b_eep,c
  7563  0021BE  0E00               	movlw	0
  7564  0021C0  6A0A               	clrf	?_Write_b_eep+2,c
  7565  0021C2  EC56  F020         	call	_Write_b_eep	;wreg free
  7566                           
  7567                           ;main.c: 580: for ( i = 0; i < 7; i++ ) {
  7568  0021C6  6A46               	clrf	init_app_eeprom@i,c
  7569  0021C8                     l187:
  7570                           
  7571                           ;main.c: 581: for ( j = 0; j < 8; j++ ) {
  7572  0021C8  6A47               	clrf	init_app_eeprom@j,c
  7573  0021CA                     l7893:
  7574                           
  7575                           ;main.c: 582: (Busy_eep(), Write_b_eep(0x43 + 72 + i * 8 + j,0));
  7576  0021CA  EC71  F022         	call	_Busy_eep	;wreg free
  7577  0021CE  5047               	movf	init_app_eeprom@j,w,c
  7578  0021D0  C046  F044         	movff	init_app_eeprom@i,??_init_app_eeprom
  7579  0021D4  6A45               	clrf	(??_init_app_eeprom+1)& (0+255),c
  7580  0021D6  90D8               	bcf	status,0,c
  7581  0021D8  3644               	rlcf	??_init_app_eeprom,f,c
  7582  0021DA  3645               	rlcf	??_init_app_eeprom+1,f,c
  7583  0021DC  90D8               	bcf	status,0,c
  7584  0021DE  3644               	rlcf	??_init_app_eeprom,f,c
  7585  0021E0  3645               	rlcf	??_init_app_eeprom+1,f,c
  7586  0021E2  90D8               	bcf	status,0,c
  7587  0021E4  3644               	rlcf	??_init_app_eeprom,f,c
  7588  0021E6  3645               	rlcf	??_init_app_eeprom+1,f,c
  7589  0021E8  2644               	addwf	??_init_app_eeprom,f,c
  7590  0021EA  0E00               	movlw	0
  7591  0021EC  2245               	addwfc	??_init_app_eeprom+1,f,c
  7592  0021EE  0E8B               	movlw	139
  7593  0021F0  2444               	addwf	??_init_app_eeprom,w,c
  7594  0021F2  6E08               	movwf	?_Write_b_eep,c
  7595  0021F4  0E00               	movlw	0
  7596  0021F6  2045               	addwfc	??_init_app_eeprom+1,w,c
  7597  0021F8  6E09               	movwf	?_Write_b_eep+1,c
  7598  0021FA  0E00               	movlw	0
  7599  0021FC  6A0A               	clrf	?_Write_b_eep+2,c
  7600  0021FE  EC56  F020         	call	_Write_b_eep	;wreg free
  7601  002202  2A47               	incf	init_app_eeprom@j,f,c
  7602  002204  0E07               	movlw	7
  7603  002206  6447               	cpfsgt	init_app_eeprom@j,c
  7604  002208  D7E0               	goto	l7893
  7605  00220A  2A46               	incf	init_app_eeprom@i,f,c
  7606  00220C  0E06               	movlw	6
  7607  00220E  6446               	cpfsgt	init_app_eeprom@i,c
  7608  002210  D7DB               	goto	l187
  7609                           
  7610                           ;main.c: 583: }
  7611                           ;main.c: 584: }
  7612                           ;main.c: 587: calculateSetFilterMask();
  7613  002212  EFA3  F00C         	goto	_calculateSetFilterMask	;wreg free
  7614  002216                     __end_of_init_app_eeprom:
  7615                           	opt stack 0
  7616                           tblptru	equ	0xFF8
  7617                           prodh	equ	0xFF4
  7618                           prodl	equ	0xFF3
  7619                           postinc0	equ	0xFEE
  7620                           wreg	equ	0xFE8
  7621                           indf2	equ	0xFDF
  7622                           postinc2	equ	0xFDE
  7623                           postdec2	equ	0xFDD
  7624                           fsr2h	equ	0xFDA
  7625                           fsr2l	equ	0xFD9
  7626                           status	equ	0xFD8
  7627                           
  7628 ;; *************** function _vscp_setUserID *****************
  7629 ;; Defined at:
  7630 ;;		line 2380 in file "../main.c"
  7631 ;; Parameters:    Size  Location     Type
  7632 ;;  idx             1    wreg     unsigned char 
  7633 ;;  data            1   11[COMRAM] unsigned char 
  7634 ;; Auto vars:     Size  Location     Type
  7635 ;;  idx             1   12[COMRAM] unsigned char 
  7636 ;; Return value:  Size  Location     Type
  7637 ;;		None               void
  7638 ;; Registers used:
  7639 ;;		wreg, status,2, status,0, cstack
  7640 ;; Tracked objects:
  7641 ;;		On entry : F/0
  7642 ;;		On exit  : 0/0
  7643 ;;		Unchanged: 0/0
  7644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7645 ;;      Params:         1       0       0       0       0       0       0
  7646 ;;      Locals:         1       0       0       0       0       0       0
  7647 ;;      Temps:          0       0       0       0       0       0       0
  7648 ;;      Totals:         2       0       0       0       0       0       0
  7649 ;;Total ram usage:        2 bytes
  7650 ;; Hardware stack levels used:    1
  7651 ;; Hardware stack levels required when called:    3
  7652 ;; This function calls:
  7653 ;;		_Busy_eep
  7654 ;;		_Write_b_eep
  7655 ;; This function is called by:
  7656 ;;		_vscp_writeStdReg
  7657 ;; This function uses a non-reentrant model
  7658 ;;
  7659                           
  7660                           	psect	text21
  7661  004368                     __ptext21:
  7662                           	opt stack 0
  7663  004368                     _vscp_setUserID:
  7664                           	opt stack 25
  7665                           
  7666                           ;incstack = 0
  7667                           ;incstack = 0
  7668                           ;vscp_setUserID@idx stored from wreg
  7669  004368  CFE8 F00D          	movff	wreg,vscp_setUserID@idx
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;main.c: 2381: (Busy_eep(), Write_b_eep(idx + 0x06,data));
  7673  00436C  EC71  F022         	call	_Busy_eep	;wreg free
  7674  004370  0E06               	movlw	6
  7675  004372  240D               	addwf	vscp_setUserID@idx,w,c
  7676  004374  6E08               	movwf	?_Write_b_eep,c
  7677  004376  6A09               	clrf	?_Write_b_eep+1,c
  7678  004378  0E00               	movlw	0
  7679  00437A  2209               	addwfc	?_Write_b_eep+1,f,c
  7680  00437C  C00C  F00A         	movff	vscp_setUserID@data,?_Write_b_eep+2
  7681  004380  EF56  F020         	goto	_Write_b_eep	;wreg free
  7682  004384                     __end_of_vscp_setUserID:
  7683                           	opt stack 0
  7684                           tblptru	equ	0xFF8
  7685                           prodh	equ	0xFF4
  7686                           prodl	equ	0xFF3
  7687                           postinc0	equ	0xFEE
  7688                           wreg	equ	0xFE8
  7689                           indf2	equ	0xFDF
  7690                           postinc2	equ	0xFDE
  7691                           postdec2	equ	0xFDD
  7692                           fsr2h	equ	0xFDA
  7693                           fsr2l	equ	0xFD9
  7694                           status	equ	0xFD8
  7695                           
  7696 ;; *************** function _vscp_setManufacturerId *****************
  7697 ;; Defined at:
  7698 ;;		line 823 in file "../main.c"
  7699 ;; Parameters:    Size  Location     Type
  7700 ;;  idx             1    wreg     unsigned char 
  7701 ;;  data            1   11[COMRAM] unsigned char 
  7702 ;; Auto vars:     Size  Location     Type
  7703 ;;  idx             1   12[COMRAM] unsigned char 
  7704 ;; Return value:  Size  Location     Type
  7705 ;;		None               void
  7706 ;; Registers used:
  7707 ;;		wreg, status,2, status,0, cstack
  7708 ;; Tracked objects:
  7709 ;;		On entry : F/0
  7710 ;;		On exit  : 0/0
  7711 ;;		Unchanged: 0/0
  7712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7713 ;;      Params:         1       0       0       0       0       0       0
  7714 ;;      Locals:         1       0       0       0       0       0       0
  7715 ;;      Temps:          0       0       0       0       0       0       0
  7716 ;;      Totals:         2       0       0       0       0       0       0
  7717 ;;Total ram usage:        2 bytes
  7718 ;; Hardware stack levels used:    1
  7719 ;; Hardware stack levels required when called:    3
  7720 ;; This function calls:
  7721 ;;		_Busy_eep
  7722 ;;		_Write_b_eep
  7723 ;; This function is called by:
  7724 ;;		_vscp_writeStdReg
  7725 ;; This function uses a non-reentrant model
  7726 ;;
  7727                           
  7728                           	psect	text22
  7729  00420E                     __ptext22:
  7730                           	opt stack 0
  7731  00420E                     _vscp_setManufacturerId:
  7732                           	opt stack 25
  7733                           
  7734                           ;incstack = 0
  7735                           ;incstack = 0
  7736                           ;vscp_setManufacturerId@idx stored from wreg
  7737  00420E  CFE8 F00D          	movff	wreg,vscp_setManufacturerId@idx
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;main.c: 824: if ( idx>7 ) return;
  7741  004212  0E07               	movlw	7
  7742  004214  640D               	cpfsgt	vscp_setManufacturerId@idx,c
  7743  004216  D001               	goto	l6023
  7744  004218  D00C               	goto	l253
  7745  00421A                     l6023:
  7746                           
  7747                           ; BSR set to: 0
  7748                           ;main.c: 825: (Busy_eep(), Write_b_eep(0x0B + idx,data));
  7749  00421A  EC71  F022         	call	_Busy_eep	;wreg free
  7750  00421E  0E0B               	movlw	11
  7751  004220  240D               	addwf	vscp_setManufacturerId@idx,w,c
  7752  004222  6E08               	movwf	?_Write_b_eep,c
  7753  004224  6A09               	clrf	?_Write_b_eep+1,c
  7754  004226  0E00               	movlw	0
  7755  004228  2209               	addwfc	?_Write_b_eep+1,f,c
  7756  00422A  C00C  F00A         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  7757  00422E  EC56  F020         	call	_Write_b_eep	;wreg free
  7758  004232                     l253:
  7759  004232  0012               	return	
  7760  004234                     __end_of_vscp_setManufacturerId:
  7761                           	opt stack 0
  7762                           tblptru	equ	0xFF8
  7763                           prodh	equ	0xFF4
  7764                           prodl	equ	0xFF3
  7765                           postinc0	equ	0xFEE
  7766                           wreg	equ	0xFE8
  7767                           indf2	equ	0xFDF
  7768                           postinc2	equ	0xFDE
  7769                           postdec2	equ	0xFDD
  7770                           fsr2h	equ	0xFDA
  7771                           fsr2l	equ	0xFD9
  7772                           status	equ	0xFD8
  7773                           
  7774 ;; *************** function _vscp_setGUID *****************
  7775 ;; Defined at:
  7776 ;;		line 811 in file "../main.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;  idx             1    wreg     unsigned char 
  7779 ;;  data            1   11[COMRAM] unsigned char 
  7780 ;; Auto vars:     Size  Location     Type
  7781 ;;  idx             1   12[COMRAM] unsigned char 
  7782 ;; Return value:  Size  Location     Type
  7783 ;;		None               void
  7784 ;; Registers used:
  7785 ;;		wreg, status,2, status,0, cstack
  7786 ;; Tracked objects:
  7787 ;;		On entry : F/0
  7788 ;;		On exit  : 0/0
  7789 ;;		Unchanged: 0/0
  7790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7791 ;;      Params:         1       0       0       0       0       0       0
  7792 ;;      Locals:         1       0       0       0       0       0       0
  7793 ;;      Temps:          0       0       0       0       0       0       0
  7794 ;;      Totals:         2       0       0       0       0       0       0
  7795 ;;Total ram usage:        2 bytes
  7796 ;; Hardware stack levels used:    1
  7797 ;; Hardware stack levels required when called:    3
  7798 ;; This function calls:
  7799 ;;		_Busy_eep
  7800 ;;		_Write_b_eep
  7801 ;; This function is called by:
  7802 ;;		_vscp_writeStdReg
  7803 ;; This function uses a non-reentrant model
  7804 ;;
  7805                           
  7806                           	psect	text23
  7807  004234                     __ptext23:
  7808                           	opt stack 0
  7809  004234                     _vscp_setGUID:
  7810                           	opt stack 25
  7811                           
  7812                           ;incstack = 0
  7813                           ;incstack = 0
  7814                           ;vscp_setGUID@idx stored from wreg
  7815  004234  CFE8 F00D          	movff	wreg,vscp_setGUID@idx
  7816                           
  7817                           ; BSR set to: 0
  7818                           ;main.c: 812: if ( idx>15 ) return;
  7819  004238  0E0F               	movlw	15
  7820  00423A  640D               	cpfsgt	vscp_setGUID@idx,c
  7821  00423C  D001               	goto	l6015
  7822  00423E  D00C               	goto	l249
  7823  004240                     l6015:
  7824                           
  7825                           ; BSR set to: 0
  7826                           ;main.c: 813: (Busy_eep(), Write_b_eep(0x13 + idx,data));
  7827  004240  EC71  F022         	call	_Busy_eep	;wreg free
  7828  004244  0E13               	movlw	19
  7829  004246  240D               	addwf	vscp_setGUID@idx,w,c
  7830  004248  6E08               	movwf	?_Write_b_eep,c
  7831  00424A  6A09               	clrf	?_Write_b_eep+1,c
  7832  00424C  0E00               	movlw	0
  7833  00424E  2209               	addwfc	?_Write_b_eep+1,f,c
  7834  004250  C00C  F00A         	movff	vscp_setGUID@data,?_Write_b_eep+2
  7835  004254  EC56  F020         	call	_Write_b_eep	;wreg free
  7836  004258                     l249:
  7837  004258  0012               	return	
  7838  00425A                     __end_of_vscp_setGUID:
  7839                           	opt stack 0
  7840                           tblptru	equ	0xFF8
  7841                           prodh	equ	0xFF4
  7842                           prodl	equ	0xFF3
  7843                           postinc0	equ	0xFEE
  7844                           wreg	equ	0xFE8
  7845                           indf2	equ	0xFDF
  7846                           postinc2	equ	0xFDE
  7847                           postdec2	equ	0xFDD
  7848                           fsr2h	equ	0xFDA
  7849                           fsr2l	equ	0xFD9
  7850                           status	equ	0xFD8
  7851                           
  7852 ;; *************** function _vscp_writeAppReg *****************
  7853 ;; Defined at:
  7854 ;;		line 975 in file "../main.c"
  7855 ;; Parameters:    Size  Location     Type
  7856 ;;  reg             1    wreg     unsigned char 
  7857 ;;  val             1   80[COMRAM] unsigned char 
  7858 ;; Auto vars:     Size  Location     Type
  7859 ;;  reg             1   29[BANK0 ] unsigned char 
  7860 ;;  val             1   26[BANK0 ] unsigned char 
  7861 ;;  bOn             1   28[BANK0 ] enum E15660
  7862 ;;  rv              1   27[BANK0 ] unsigned char 
  7863 ;;  bInfoEvent      1   25[BANK0 ] enum E15660
  7864 ;; Return value:  Size  Location     Type
  7865 ;;                  1    wreg      unsigned char 
  7866 ;; Registers used:
  7867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7868 ;; Tracked objects:
  7869 ;;		On entry : F/0
  7870 ;;		On exit  : F/0
  7871 ;;		Unchanged: 0/0
  7872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7873 ;;      Params:         1       0       0       0       0       0       0
  7874 ;;      Locals:         0       5       0       0       0       0       0
  7875 ;;      Temps:          0       3       0       0       0       0       0
  7876 ;;      Totals:         1       8       0       0       0       0       0
  7877 ;;Total ram usage:        9 bytes
  7878 ;; Hardware stack levels used:    1
  7879 ;; Hardware stack levels required when called:    7
  7880 ;; This function calls:
  7881 ;;		_calculateSetFilterMask
  7882 ;;		_Busy_eep
  7883 ;;		_Write_b_eep
  7884 ;;		_Read_b_eep
  7885 ;;		_SendInformationEvent
  7886 ;; This function is called by:
  7887 ;;		_vscp_writeRegister
  7888 ;;		_vscp_handleProtocolEvent
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           	psect	text24
  7893  0008DE                     __ptext24:
  7894                           	opt stack 0
  7895  0008DE                     _vscp_writeAppReg:
  7896                           	opt stack 21
  7897                           
  7898                           ;incstack = 0
  7899                           ;incstack = 0
  7900                           ;vscp_writeAppReg@reg stored from wreg
  7901  0008DE  CFE8 F0CE          	movff	wreg,vscp_writeAppReg@reg
  7902                           
  7903                           ; BSR set to: 0
  7904                           ;main.c: 976: uint8_t rv;
  7905                           ;main.c: 977: BOOL bInfoEvent = 0;
  7906  0008E2  6BCA               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7907                           
  7908                           ;main.c: 978: BOOL bOn = 0;
  7909  0008E4  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  7910                           
  7911                           ; BSR set to: 0
  7912                           ;main.c: 980: rv = ~val;
  7913  0008E6  1C51               	comf	vscp_writeAppReg@val,w,c
  7914  0008E8  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  7915                           
  7916                           ; BSR set to: 0
  7917                           ;main.c: 983: if ( reg == 0 ) {
  7918  0008EA  67CE               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  7919  0008EC  D010               	goto	l10671
  7920                           
  7921                           ; BSR set to: 0
  7922                           ;main.c: 984: (Busy_eep(), Write_b_eep(0x43 + 0,val));
  7923  0008EE  EC71  F022         	call	_Busy_eep	;wreg free
  7924  0008F2  6A09               	clrf	?_Write_b_eep+1,c
  7925  0008F4  0E43               	movlw	67
  7926  0008F6  6E08               	movwf	?_Write_b_eep,c
  7927  0008F8  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  7928  0008FC  EC56  F020         	call	_Write_b_eep	;wreg free
  7929                           
  7930                           ;main.c: 985: rv = Read_b_eep(0x43 + 0);
  7931  000900  6A09               	clrf	?_Read_b_eep+1,c
  7932  000902  0E43               	movlw	67
  7933  000904  6E08               	movwf	?_Read_b_eep,c
  7934  000906  EC3D  F022         	call	_Read_b_eep	;wreg free
  7935  00090A  EF32  F009         	goto	L27
  7936  00090E                     l10671:
  7937                           
  7938                           ; BSR set to: 0
  7939                           ;main.c: 987: else if ( reg == 1 ) {
  7940  00090E  05CE               	decf	vscp_writeAppReg@reg& (0+255),w,b
  7941  000910  E110               	bnz	l10679
  7942                           
  7943                           ; BSR set to: 0
  7944                           ;main.c: 989: (Busy_eep(), Write_b_eep(0x43 + 1,val));
  7945  000912  EC71  F022         	call	_Busy_eep	;wreg free
  7946  000916  6A09               	clrf	?_Write_b_eep+1,c
  7947  000918  0E44               	movlw	68
  7948  00091A  6E08               	movwf	?_Write_b_eep,c
  7949  00091C  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  7950  000920  EC56  F020         	call	_Write_b_eep	;wreg free
  7951                           
  7952                           ;main.c: 990: rv = Read_b_eep(0x43 + 1);
  7953  000924  6A09               	clrf	?_Read_b_eep+1,c
  7954  000926  0E44               	movlw	68
  7955  000928  6E08               	movwf	?_Read_b_eep,c
  7956  00092A  EC3D  F022         	call	_Read_b_eep	;wreg free
  7957  00092E  EF32  F009         	goto	L27
  7958  000932                     l10679:
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;main.c: 993: else if ( (reg >= 2) && (reg <= 9) ) {
  7962  000932  0E01               	movlw	1
  7963  000934  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  7964  000936  D185               	goto	l10831
  7965                           
  7966                           ; BSR set to: 0
  7967  000938  0E0A               	movlw	10
  7968  00093A  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  7969  00093C  D182               	goto	l10831
  7970                           
  7971                           ; BSR set to: 0
  7972                           ;main.c: 995: if ( Read_b_eep(0x43 + 10 + reg - 2) &
  7973                           ;main.c: 997: 0x80 ) {
  7974  00093E  0E4B               	movlw	75
  7975  000940  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  7976  000942  6E08               	movwf	?_Read_b_eep,c
  7977  000944  6A09               	clrf	?_Read_b_eep+1,c
  7978  000946  0E00               	movlw	0
  7979  000948  2209               	addwfc	?_Read_b_eep+1,f,c
  7980  00094A  EC3D  F022         	call	_Read_b_eep	;wreg free
  7981  00094E  0100               	movlb	0	; () banked
  7982  000950  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  7983  000952  BFC7               	btfsc	??_vscp_writeAppReg& (0+255),7,b
  7984  000954  D161               	goto	l10829
  7985  000956  EF4B  F009         	goto	l11091
  7986  00095A                     l10687:
  7987                           
  7988                           ; BSR set to: 0
  7989                           ;main.c: 1004: bInfoEvent = 1;
  7990  00095A  0E01               	movlw	1
  7991  00095C  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7992                           
  7993                           ; BSR set to: 0
  7994                           ;main.c: 1006: if ( 1 == val ) {
  7995  00095E  0451               	decf	vscp_writeAppReg@val,w,c
  7996  000960  E128               	bnz	l306
  7997                           
  7998                           ; BSR set to: 0
  7999                           ;main.c: 1008: LATBbits.LATB4 = 1;
  8000  000962  888A               	bsf	3978,4,c	;volatile
  8001                           
  8002                           ; BSR set to: 0
  8003                           ;main.c: 1009: rv = LATBbits.LATB4;
  8004  000964  0E00               	movlw	0
  8005  000966  B88A               	btfsc	3978,4,c	;volatile
  8006  000968  0E01               	movlw	1
  8007  00096A  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8008                           
  8009                           ; BSR set to: 0
  8010                           ;main.c: 1010: bOn = 1;
  8011  00096C  0E01               	movlw	1
  8012  00096E  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8013                           
  8014                           ; BSR set to: 0
  8015                           ;main.c: 1013: if ( Read_b_eep(0x43 + 10) & 0x04 ) {
  8016  000970  6A09               	clrf	?_Read_b_eep+1,c
  8017  000972  0E4D               	movlw	77
  8018  000974  6E08               	movwf	?_Read_b_eep,c
  8019  000976  EC3D  F022         	call	_Read_b_eep	;wreg free
  8020  00097A  0100               	movlb	0	; () banked
  8021  00097C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8022  00097E  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8023  000980  EF4B  F009         	goto	l11091
  8024  000984                     l10699:
  8025                           
  8026                           ; BSR set to: 0
  8027                           ;main.c: 1014: relay_protection_timer[ 0 ] =
  8028                           ;main.c: 1015: Read_b_eep(0x43 + 34) * 256 +
  8029                           ;main.c: 1016: Read_b_eep(0x43 + 35);
  8030  000984  6A09               	clrf	?_Read_b_eep+1,c
  8031  000986  0E66               	movlw	102
  8032  000988  6E08               	movwf	?_Read_b_eep,c
  8033  00098A  EC3D  F022         	call	_Read_b_eep	;wreg free
  8034  00098E  0100               	movlb	0	; () banked
  8035  000990  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8036  000992  6A09               	clrf	?_Read_b_eep+1,c
  8037  000994  0E65               	movlw	101
  8038  000996  6E08               	movwf	?_Read_b_eep,c
  8039  000998  EC3D  F022         	call	_Read_b_eep	;wreg free
  8040  00099C  0100               	movlb	0	; () banked
  8041  00099E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8042  0009A0  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8043  0009A2  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8044  0009A4  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8045  0009A6  6F60               	movwf	_relay_protection_timer& (0+255),b
  8046  0009A8  0E00               	movlw	0
  8047  0009AA  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8048  0009AC  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  8049  0009AE  EF4B  F009         	goto	l11091
  8050  0009B2                     l306:
  8051                           
  8052                           ; BSR set to: 0
  8053                           ;main.c: 1020: else if (0 == val) {
  8054  0009B2  6651               	tstfsz	vscp_writeAppReg@val,c
  8055  0009B4  EF4B  F009         	goto	l11091
  8056                           
  8057                           ; BSR set to: 0
  8058                           ;main.c: 1021: LATBbits.LATB4 = 0;
  8059  0009B8  988A               	bcf	3978,4,c	;volatile
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;main.c: 1022: rv = LATBbits.LATB4;
  8063  0009BA  0E00               	movlw	0
  8064  0009BC  B88A               	btfsc	3978,4,c	;volatile
  8065  0009BE  0E01               	movlw	1
  8066  0009C0  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8067  0009C2                     l10705:
  8068                           
  8069                           ; BSR set to: 0
  8070                           ;main.c: 1023: bOn = 0;
  8071  0009C2  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8072  0009C4  EF4B  F009         	goto	l11091
  8073  0009C8                     l10707:
  8074                           
  8075                           ; BSR set to: 0
  8076                           ;main.c: 1030: bInfoEvent = 1;
  8077  0009C8  0E01               	movlw	1
  8078  0009CA  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;main.c: 1032: if (1 == val) {
  8082  0009CC  0451               	decf	vscp_writeAppReg@val,w,c
  8083  0009CE  E11E               	bnz	l312
  8084                           
  8085                           ; BSR set to: 0
  8086                           ;main.c: 1034: LATBbits.LATB1 = 1;
  8087  0009D0  828A               	bsf	3978,1,c	;volatile
  8088                           
  8089                           ; BSR set to: 0
  8090                           ;main.c: 1035: rv = LATBbits.LATB1;
  8091  0009D2  0E00               	movlw	0
  8092  0009D4  B28A               	btfsc	3978,1,c	;volatile
  8093  0009D6  0E01               	movlw	1
  8094  0009D8  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;main.c: 1036: bOn = 1;
  8098  0009DA  0E01               	movlw	1
  8099  0009DC  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8100                           
  8101                           ; BSR set to: 0
  8102                           ;main.c: 1038: if (Read_b_eep(0x43 + 11) & 0x04) {
  8103  0009DE  6A09               	clrf	?_Read_b_eep+1,c
  8104  0009E0  0E4E               	movlw	78
  8105  0009E2  6E08               	movwf	?_Read_b_eep,c
  8106  0009E4  EC3D  F022         	call	_Read_b_eep	;wreg free
  8107  0009E8  0100               	movlb	0	; () banked
  8108  0009EA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8109  0009EC  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8110  0009EE  EF4B  F009         	goto	l11091
  8111  0009F2                     l10719:
  8112                           
  8113                           ; BSR set to: 0
  8114                           ;main.c: 1039: relay_protection_timer[ 1 ] =
  8115                           ;main.c: 1040: Read_b_eep(0x43 + 36) * 256 +
  8116                           ;main.c: 1041: Read_b_eep(0x43 + 37);
  8117  0009F2  6A09               	clrf	?_Read_b_eep+1,c
  8118  0009F4  0E68               	movlw	104
  8119  0009F6  6E08               	movwf	?_Read_b_eep,c
  8120  0009F8  EC3D  F022         	call	_Read_b_eep	;wreg free
  8121  0009FC  0100               	movlb	0	; () banked
  8122  0009FE  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8123  000A00  6A09               	clrf	?_Read_b_eep+1,c
  8124  000A02  0E67               	movlw	103
  8125  000A04  6E08               	movwf	?_Read_b_eep,c
  8126  000A06  EC3D  F022         	call	_Read_b_eep	;wreg free
  8127  000A0A  D19F               	goto	L28
  8128  000A0C                     l312:
  8129                           
  8130                           ; BSR set to: 0
  8131                           ;main.c: 1045: else if (0 == val) {
  8132  000A0C  6651               	tstfsz	vscp_writeAppReg@val,c
  8133  000A0E  EF4B  F009         	goto	l11091
  8134                           
  8135                           ; BSR set to: 0
  8136                           ;main.c: 1046: LATBbits.LATB1 = 0;
  8137  000A12  928A               	bcf	3978,1,c	;volatile
  8138                           
  8139                           ; BSR set to: 0
  8140                           ;main.c: 1047: rv = LATBbits.LATB1;
  8141  000A14  0E00               	movlw	0
  8142  000A16  B28A               	btfsc	3978,1,c	;volatile
  8143  000A18  0E01               	movlw	1
  8144  000A1A  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8145  000A1C  D7D2               	goto	l10705
  8146  000A1E                     l10727:
  8147                           
  8148                           ; BSR set to: 0
  8149                           ;main.c: 1055: bInfoEvent = 1;
  8150  000A1E  0E01               	movlw	1
  8151  000A20  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8152                           
  8153                           ; BSR set to: 0
  8154                           ;main.c: 1057: if (1 == val) {
  8155  000A22  0451               	decf	vscp_writeAppReg@val,w,c
  8156  000A24  E128               	bnz	l317
  8157                           
  8158                           ; BSR set to: 0
  8159                           ;main.c: 1059: LATBbits.LATB0 = 1;
  8160  000A26  808A               	bsf	3978,0,c	;volatile
  8161                           
  8162                           ; BSR set to: 0
  8163                           ;main.c: 1060: rv = LATBbits.LATB0;
  8164  000A28  0E00               	movlw	0
  8165  000A2A  B08A               	btfsc	3978,0,c	;volatile
  8166  000A2C  0E01               	movlw	1
  8167  000A2E  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8168                           
  8169                           ; BSR set to: 0
  8170                           ;main.c: 1061: bOn = 1;
  8171  000A30  0E01               	movlw	1
  8172  000A32  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;main.c: 1063: if ( Read_b_eep(0x43 + 12) & 0x04) {
  8176  000A34  6A09               	clrf	?_Read_b_eep+1,c
  8177  000A36  0E4F               	movlw	79
  8178  000A38  6E08               	movwf	?_Read_b_eep,c
  8179  000A3A  EC3D  F022         	call	_Read_b_eep	;wreg free
  8180  000A3E  0100               	movlb	0	; () banked
  8181  000A40  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8182  000A42  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8183  000A44  EF4B  F009         	goto	l11091
  8184  000A48                     l10739:
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;main.c: 1064: relay_protection_timer[ 2 ] =
  8188                           ;main.c: 1065: Read_b_eep(0x43 + 38) * 256 +
  8189                           ;main.c: 1066: Read_b_eep(0x43 + 39);
  8190  000A48  6A09               	clrf	?_Read_b_eep+1,c
  8191  000A4A  0E6A               	movlw	106
  8192  000A4C  6E08               	movwf	?_Read_b_eep,c
  8193  000A4E  EC3D  F022         	call	_Read_b_eep	;wreg free
  8194  000A52  0100               	movlb	0	; () banked
  8195  000A54  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8196  000A56  6A09               	clrf	?_Read_b_eep+1,c
  8197  000A58  0E69               	movlw	105
  8198  000A5A  6E08               	movwf	?_Read_b_eep,c
  8199  000A5C  EC3D  F022         	call	_Read_b_eep	;wreg free
  8200  000A60  0100               	movlb	0	; () banked
  8201  000A62  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8202  000A64  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8203  000A66  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8204  000A68  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8205  000A6A  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  8206  000A6C  0E00               	movlw	0
  8207  000A6E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8208  000A70  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  8209  000A72  EF4B  F009         	goto	l11091
  8210  000A76                     l317:
  8211                           
  8212                           ; BSR set to: 0
  8213                           ;main.c: 1070: else if (0 == val) {
  8214  000A76  6651               	tstfsz	vscp_writeAppReg@val,c
  8215  000A78  EF4B  F009         	goto	l11091
  8216                           
  8217                           ; BSR set to: 0
  8218                           ;main.c: 1071: LATBbits.LATB0 = 0;
  8219  000A7C  908A               	bcf	3978,0,c	;volatile
  8220                           
  8221                           ; BSR set to: 0
  8222                           ;main.c: 1072: rv = LATBbits.LATB0;
  8223  000A7E  0E00               	movlw	0
  8224  000A80  B08A               	btfsc	3978,0,c	;volatile
  8225  000A82  0E01               	movlw	1
  8226  000A84  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8227  000A86  D79D               	goto	l10705
  8228  000A88                     l10747:
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;main.c: 1081: bInfoEvent = 1;
  8232  000A88  0E01               	movlw	1
  8233  000A8A  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8234                           
  8235                           ; BSR set to: 0
  8236                           ;main.c: 1083: if (1 == val) {
  8237  000A8C  0451               	decf	vscp_writeAppReg@val,w,c
  8238  000A8E  E126               	bnz	l322
  8239                           
  8240                           ; BSR set to: 0
  8241                           ;main.c: 1085: LATCbits.LATC7 = 1;
  8242  000A90  8E8B               	bsf	3979,7,c	;volatile
  8243                           
  8244                           ; BSR set to: 0
  8245                           ;main.c: 1086: rv = LATCbits.LATC7;
  8246  000A92  0E00               	movlw	0
  8247  000A94  BE8B               	btfsc	3979,7,c	;volatile
  8248  000A96  0E01               	movlw	1
  8249  000A98  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;main.c: 1087: bOn = 1;
  8253  000A9A  0E01               	movlw	1
  8254  000A9C  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;main.c: 1089: if (Read_b_eep(0x43 + 13) & 0x04) {
  8258  000A9E  6A09               	clrf	?_Read_b_eep+1,c
  8259  000AA0  0E50               	movlw	80
  8260  000AA2  6E08               	movwf	?_Read_b_eep,c
  8261  000AA4  EC3D  F022         	call	_Read_b_eep	;wreg free
  8262  000AA8  0100               	movlb	0	; () banked
  8263  000AAA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8264  000AAC  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8265  000AAE  D3F3               	goto	l11091
  8266  000AB0                     l10759:
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;main.c: 1090: relay_protection_timer[ 3 ] =
  8270                           ;main.c: 1091: Read_b_eep(0x43 + 40) * 256 +
  8271                           ;main.c: 1092: Read_b_eep(0x43 + 41);
  8272  000AB0  6A09               	clrf	?_Read_b_eep+1,c
  8273  000AB2  0E6C               	movlw	108
  8274  000AB4  6E08               	movwf	?_Read_b_eep,c
  8275  000AB6  EC3D  F022         	call	_Read_b_eep	;wreg free
  8276  000ABA  0100               	movlb	0	; () banked
  8277  000ABC  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8278  000ABE  6A09               	clrf	?_Read_b_eep+1,c
  8279  000AC0  0E6B               	movlw	107
  8280  000AC2  6E08               	movwf	?_Read_b_eep,c
  8281  000AC4  EC3D  F022         	call	_Read_b_eep	;wreg free
  8282  000AC8  0100               	movlb	0	; () banked
  8283  000ACA  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8284  000ACC  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8285  000ACE  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8286  000AD0  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8287  000AD2  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  8288  000AD4  0E00               	movlw	0
  8289  000AD6  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8290  000AD8  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  8291  000ADA  D3DD               	goto	l11091
  8292  000ADC                     l322:
  8293                           
  8294                           ; BSR set to: 0
  8295                           ;main.c: 1096: else if (0 == val) {
  8296  000ADC  6651               	tstfsz	vscp_writeAppReg@val,c
  8297  000ADE  D3DB               	goto	l11091
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;main.c: 1097: LATCbits.LATC7 = 0;
  8301  000AE0  9E8B               	bcf	3979,7,c	;volatile
  8302                           
  8303                           ; BSR set to: 0
  8304                           ;main.c: 1098: rv = LATCbits.LATC7;
  8305  000AE2  0E00               	movlw	0
  8306  000AE4  BE8B               	btfsc	3979,7,c	;volatile
  8307  000AE6  0E01               	movlw	1
  8308  000AE8  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8309  000AEA  D76B               	goto	l10705
  8310  000AEC                     l10767:
  8311                           
  8312                           ; BSR set to: 0
  8313                           ;main.c: 1107: bInfoEvent = 1;
  8314  000AEC  0E01               	movlw	1
  8315  000AEE  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;main.c: 1109: if (1 == val) {
  8319  000AF0  0451               	decf	vscp_writeAppReg@val,w,c
  8320  000AF2  E126               	bnz	l327
  8321                           
  8322                           ; BSR set to: 0
  8323                           ;main.c: 1111: LATCbits.LATC6 = 1;
  8324  000AF4  8C8B               	bsf	3979,6,c	;volatile
  8325                           
  8326                           ; BSR set to: 0
  8327                           ;main.c: 1112: rv = LATCbits.LATC6;
  8328  000AF6  0E00               	movlw	0
  8329  000AF8  BC8B               	btfsc	3979,6,c	;volatile
  8330  000AFA  0E01               	movlw	1
  8331  000AFC  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8332                           
  8333                           ; BSR set to: 0
  8334                           ;main.c: 1113: bOn = 1;
  8335  000AFE  0E01               	movlw	1
  8336  000B00  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8337                           
  8338                           ; BSR set to: 0
  8339                           ;main.c: 1115: if (Read_b_eep(0x43 + 14) & 0x04) {
  8340  000B02  6A09               	clrf	?_Read_b_eep+1,c
  8341  000B04  0E51               	movlw	81
  8342  000B06  6E08               	movwf	?_Read_b_eep,c
  8343  000B08  EC3D  F022         	call	_Read_b_eep	;wreg free
  8344  000B0C  0100               	movlb	0	; () banked
  8345  000B0E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8346  000B10  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8347  000B12  D3C1               	goto	l11091
  8348  000B14                     l10779:
  8349                           
  8350                           ; BSR set to: 0
  8351                           ;main.c: 1116: relay_protection_timer[ 4 ] =
  8352                           ;main.c: 1117: Read_b_eep(0x43 + 42) * 256 +
  8353                           ;main.c: 1118: Read_b_eep(0x43 + 43);
  8354  000B14  6A09               	clrf	?_Read_b_eep+1,c
  8355  000B16  0E6E               	movlw	110
  8356  000B18  6E08               	movwf	?_Read_b_eep,c
  8357  000B1A  EC3D  F022         	call	_Read_b_eep	;wreg free
  8358  000B1E  0100               	movlb	0	; () banked
  8359  000B20  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8360  000B22  6A09               	clrf	?_Read_b_eep+1,c
  8361  000B24  0E6D               	movlw	109
  8362  000B26  6E08               	movwf	?_Read_b_eep,c
  8363  000B28  EC3D  F022         	call	_Read_b_eep	;wreg free
  8364  000B2C  0100               	movlb	0	; () banked
  8365  000B2E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8366  000B30  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8367  000B32  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8368  000B34  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8369  000B36  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  8370  000B38  0E00               	movlw	0
  8371  000B3A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8372  000B3C  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  8373  000B3E  D3AB               	goto	l11091
  8374  000B40                     l327:
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;main.c: 1122: else if (0 == val) {
  8378  000B40  6651               	tstfsz	vscp_writeAppReg@val,c
  8379  000B42  D3A9               	goto	l11091
  8380                           
  8381                           ; BSR set to: 0
  8382                           ;main.c: 1123: LATCbits.LATC6 = 0;
  8383  000B44  9C8B               	bcf	3979,6,c	;volatile
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;main.c: 1124: rv = LATCbits.LATC6;
  8387  000B46  0E00               	movlw	0
  8388  000B48  BC8B               	btfsc	3979,6,c	;volatile
  8389  000B4A  0E01               	movlw	1
  8390  000B4C  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8391  000B4E  D739               	goto	l10705
  8392  000B50                     l10787:
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;main.c: 1133: bInfoEvent = 1;
  8396  000B50  0E01               	movlw	1
  8397  000B52  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;main.c: 1135: if (1 == val) {
  8401  000B54  0451               	decf	vscp_writeAppReg@val,w,c
  8402  000B56  E126               	bnz	l332
  8403                           
  8404                           ; BSR set to: 0
  8405                           ;main.c: 1137: LATCbits.LATC5 = 1;
  8406  000B58  8A8B               	bsf	3979,5,c	;volatile
  8407                           
  8408                           ; BSR set to: 0
  8409                           ;main.c: 1138: rv = LATCbits.LATC5;
  8410  000B5A  0E00               	movlw	0
  8411  000B5C  BA8B               	btfsc	3979,5,c	;volatile
  8412  000B5E  0E01               	movlw	1
  8413  000B60  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8414                           
  8415                           ; BSR set to: 0
  8416                           ;main.c: 1139: bOn = 1;
  8417  000B62  0E01               	movlw	1
  8418  000B64  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;main.c: 1141: if (Read_b_eep(0x43 + 15) & 0x04) {
  8422  000B66  6A09               	clrf	?_Read_b_eep+1,c
  8423  000B68  0E52               	movlw	82
  8424  000B6A  6E08               	movwf	?_Read_b_eep,c
  8425  000B6C  EC3D  F022         	call	_Read_b_eep	;wreg free
  8426  000B70  0100               	movlb	0	; () banked
  8427  000B72  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8428  000B74  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8429  000B76  D38F               	goto	l11091
  8430  000B78                     l10799:
  8431                           
  8432                           ; BSR set to: 0
  8433                           ;main.c: 1142: relay_protection_timer[ 5 ] =
  8434                           ;main.c: 1143: Read_b_eep(0x43 + 44) * 256 +
  8435                           ;main.c: 1144: Read_b_eep(0x43 + 45);
  8436  000B78  6A09               	clrf	?_Read_b_eep+1,c
  8437  000B7A  0E70               	movlw	112
  8438  000B7C  6E08               	movwf	?_Read_b_eep,c
  8439  000B7E  EC3D  F022         	call	_Read_b_eep	;wreg free
  8440  000B82  0100               	movlb	0	; () banked
  8441  000B84  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8442  000B86  6A09               	clrf	?_Read_b_eep+1,c
  8443  000B88  0E6F               	movlw	111
  8444  000B8A  6E08               	movwf	?_Read_b_eep,c
  8445  000B8C  EC3D  F022         	call	_Read_b_eep	;wreg free
  8446  000B90  0100               	movlb	0	; () banked
  8447  000B92  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8448  000B94  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8449  000B96  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8450  000B98  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8451  000B9A  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  8452  000B9C  0E00               	movlw	0
  8453  000B9E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8454  000BA0  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  8455  000BA2  D379               	goto	l11091
  8456  000BA4                     l332:
  8457                           
  8458                           ; BSR set to: 0
  8459                           ;main.c: 1148: else if (0 == val) {
  8460  000BA4  6651               	tstfsz	vscp_writeAppReg@val,c
  8461  000BA6  D377               	goto	l11091
  8462                           
  8463                           ; BSR set to: 0
  8464                           ;main.c: 1149: LATCbits.LATC5 = 0;
  8465  000BA8  9A8B               	bcf	3979,5,c	;volatile
  8466                           
  8467                           ; BSR set to: 0
  8468                           ;main.c: 1150: rv = LATCbits.LATC5;
  8469  000BAA  0E00               	movlw	0
  8470  000BAC  BA8B               	btfsc	3979,5,c	;volatile
  8471  000BAE  0E01               	movlw	1
  8472  000BB0  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8473  000BB2  D707               	goto	l10705
  8474  000BB4                     l10807:
  8475                           
  8476                           ; BSR set to: 0
  8477                           ;main.c: 1158: bInfoEvent = 1;
  8478  000BB4  0E01               	movlw	1
  8479  000BB6  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8480                           
  8481                           ; BSR set to: 0
  8482                           ;main.c: 1160: if (1 == val) {
  8483  000BB8  0451               	decf	vscp_writeAppReg@val,w,c
  8484  000BBA  E126               	bnz	l337
  8485                           
  8486                           ; BSR set to: 0
  8487                           ;main.c: 1162: LATCbits.LATC4 = 1;
  8488  000BBC  888B               	bsf	3979,4,c	;volatile
  8489                           
  8490                           ; BSR set to: 0
  8491                           ;main.c: 1163: rv = LATCbits.LATC4;
  8492  000BBE  0E00               	movlw	0
  8493  000BC0  B88B               	btfsc	3979,4,c	;volatile
  8494  000BC2  0E01               	movlw	1
  8495  000BC4  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8496                           
  8497                           ; BSR set to: 0
  8498                           ;main.c: 1164: bOn = 1;
  8499  000BC6  0E01               	movlw	1
  8500  000BC8  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;main.c: 1166: if (Read_b_eep(0x43 + 16) & 0x04) {
  8504  000BCA  6A09               	clrf	?_Read_b_eep+1,c
  8505  000BCC  0E53               	movlw	83
  8506  000BCE  6E08               	movwf	?_Read_b_eep,c
  8507  000BD0  EC3D  F022         	call	_Read_b_eep	;wreg free
  8508  000BD4  0100               	movlb	0	; () banked
  8509  000BD6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8510  000BD8  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8511  000BDA  D35D               	goto	l11091
  8512  000BDC                     l10819:
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;main.c: 1167: relay_protection_timer[ 6 ] =
  8516                           ;main.c: 1168: Read_b_eep(0x43 + 46) * 256 +
  8517                           ;main.c: 1169: Read_b_eep(0x43 + 47);
  8518  000BDC  6A09               	clrf	?_Read_b_eep+1,c
  8519  000BDE  0E72               	movlw	114
  8520  000BE0  6E08               	movwf	?_Read_b_eep,c
  8521  000BE2  EC3D  F022         	call	_Read_b_eep	;wreg free
  8522  000BE6  0100               	movlb	0	; () banked
  8523  000BE8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8524  000BEA  6A09               	clrf	?_Read_b_eep+1,c
  8525  000BEC  0E71               	movlw	113
  8526  000BEE  6E08               	movwf	?_Read_b_eep,c
  8527  000BF0  EC3D  F022         	call	_Read_b_eep	;wreg free
  8528  000BF4  0100               	movlb	0	; () banked
  8529  000BF6  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8530  000BF8  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8531  000BFA  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8532  000BFC  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8533  000BFE  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  8534  000C00  0E00               	movlw	0
  8535  000C02  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8536  000C04  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  8537  000C06  D347               	goto	l11091
  8538  000C08                     l337:
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;main.c: 1173: else if (0 == val) {
  8542  000C08  6651               	tstfsz	vscp_writeAppReg@val,c
  8543  000C0A  D345               	goto	l11091
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;main.c: 1174: LATCbits.LATC4 = 0;
  8547  000C0C  988B               	bcf	3979,4,c	;volatile
  8548                           
  8549                           ; BSR set to: 0
  8550                           ;main.c: 1175: rv = LATCbits.LATC4;
  8551  000C0E  0E00               	movlw	0
  8552  000C10  B88B               	btfsc	3979,4,c	;volatile
  8553  000C12  0E01               	movlw	1
  8554  000C14  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8555  000C16  D6D5               	goto	l10705
  8556  000C18                     l10829:
  8557                           
  8558                           ; BSR set to: 0
  8559  000C18  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8560                           
  8561                           ; Switch size 1, requested type "speed"
  8562                           ; Number of cases is 7, Range of values is 2 to 8
  8563                           ; switch strategies available:
  8564                           ; Name         Instructions Cycles
  8565                           ; simple_byte           22    12 (average)
  8566                           ;	Chosen strategy is simple_byte
  8567  000C1A  0A02               	xorlw	2	; case 2
  8568  000C1C  E101 D69D          	bz	l10687
  8569  000C20  0A01               	xorlw	1	; case 3
  8570  000C22  E101 D6D1          	bz	l10707
  8571  000C26  0A07               	xorlw	7	; case 4
  8572  000C28  E101 D6F9          	bz	l10727
  8573  000C2C  0A01               	xorlw	1	; case 5
  8574  000C2E  E101 D72B          	bz	l10747
  8575  000C32  0A03               	xorlw	3	; case 6
  8576  000C34  E101 D75A          	bz	l10767
  8577  000C38  0A01               	xorlw	1	; case 7
  8578  000C3A  E08A               	bz	l10787
  8579  000C3C  0A0F               	xorlw	15	; case 8
  8580  000C3E  E0BA               	bz	l10807
  8581                           
  8582                           ; BSR set to: 0
  8583                           ;main.c: 1181: }
  8584                           ;main.c: 1182: }
  8585  000C40  D32A               	goto	l11091
  8586  000C42                     l10831:
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;main.c: 1185: else if ( (reg >= 10 ) &&
  8590                           ;main.c: 1186: (reg <= 17) ) {
  8591  000C42  0E09               	movlw	9
  8592  000C44  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8593  000C46  D1BE               	goto	l11009
  8594                           
  8595                           ; BSR set to: 0
  8596  000C48  0E12               	movlw	18
  8597  000C4A  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8598  000C4C  D1BB               	goto	l11009
  8599  000C4E  D1A4               	goto	l11007
  8600  000C50                     l10837:
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;main.c: 1192: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8604  000C50  EC71  F022         	call	_Busy_eep	;wreg free
  8605  000C54  0E43               	movlw	67
  8606  000C56  0100               	movlb	0	; () banked
  8607  000C58  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8608  000C5A  6E08               	movwf	?_Write_b_eep,c
  8609  000C5C  6A09               	clrf	?_Write_b_eep+1,c
  8610  000C5E  0E00               	movlw	0
  8611  000C60  2209               	addwfc	?_Write_b_eep+1,f,c
  8612  000C62  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8613  000C66  EC56  F020         	call	_Write_b_eep	;wreg free
  8614                           
  8615                           ;main.c: 1193: rv = Read_b_eep(0x43 + reg);
  8616  000C6A  0E43               	movlw	67
  8617  000C6C  0100               	movlb	0	; () banked
  8618  000C6E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8619  000C70  6E08               	movwf	?_Read_b_eep,c
  8620  000C72  6A09               	clrf	?_Read_b_eep+1,c
  8621  000C74  0E00               	movlw	0
  8622  000C76  2209               	addwfc	?_Read_b_eep+1,f,c
  8623  000C78  EC3D  F022         	call	_Read_b_eep	;wreg free
  8624  000C7C  0100               	movlb	0	; () banked
  8625  000C7E  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8626                           
  8627                           ; BSR set to: 0
  8628                           ;main.c: 1195: if ( val & 0x01 ) {
  8629  000C80  A051               	btfss	vscp_writeAppReg@val,0,c
  8630  000C82  D019               	goto	l10851
  8631                           
  8632                           ; BSR set to: 0
  8633                           ;main.c: 1197: LATBbits.LATB4 = 0;
  8634  000C84  988A               	bcf	3978,4,c	;volatile
  8635                           
  8636                           ;main.c: 1198: bOn = 0;
  8637  000C86  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8638                           
  8639                           ; BSR set to: 0
  8640                           ;main.c: 1200: relay_pulse_flags |= 0x01;
  8641  000C88  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;main.c: 1201: relay_pulse_timer[ 0 ] =
  8645                           ;main.c: 1202: Read_b_eep(0x43 + 18) * 256 +
  8646                           ;main.c: 1203: Read_b_eep(0x43 + 19);
  8647  000C8A  6A09               	clrf	?_Read_b_eep+1,c
  8648  000C8C  0E56               	movlw	86
  8649  000C8E  6E08               	movwf	?_Read_b_eep,c
  8650  000C90  EC3D  F022         	call	_Read_b_eep	;wreg free
  8651  000C94  0100               	movlb	0	; () banked
  8652  000C96  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8653  000C98  6A09               	clrf	?_Read_b_eep+1,c
  8654  000C9A  0E55               	movlw	85
  8655  000C9C  6E08               	movwf	?_Read_b_eep,c
  8656  000C9E  EC3D  F022         	call	_Read_b_eep	;wreg free
  8657  000CA2  0100               	movlb	0	; () banked
  8658  000CA4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8659  000CA6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8660  000CA8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8661  000CAA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8662  000CAC  6F70               	movwf	_relay_pulse_timer& (0+255),b
  8663  000CAE  0E00               	movlw	0
  8664  000CB0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8665  000CB2  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  8666                           
  8667                           ;main.c: 1204: }
  8668  000CB4  D003               	goto	l10857
  8669  000CB6                     l10851:
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;main.c: 1205: else {
  8673                           ;main.c: 1206: relay_pulse_flags &= 0b11111110;
  8674  000CB6  918A               	bcf	_relay_pulse_flags& (0+255),0,b
  8675                           
  8676                           ; BSR set to: 0
  8677                           ;main.c: 1207: LATBbits.LATB4 = 0;
  8678  000CB8  988A               	bcf	3978,4,c	;volatile
  8679                           
  8680                           ; BSR set to: 0
  8681                           ;main.c: 1208: bOn = 0;
  8682  000CBA  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8683  000CBC                     l10857:
  8684                           
  8685                           ; BSR set to: 0
  8686                           ;main.c: 1209: }
  8687                           ;main.c: 1211: if ( val & 0x04 ) {
  8688  000CBC  B451               	btfsc	vscp_writeAppReg@val,2,c
  8689  000CBE  D662               	goto	l10699
  8690  000CC0  D2EA               	goto	l11091
  8691  000CC2                     l10861:
  8692                           
  8693                           ; BSR set to: 0
  8694                           ;main.c: 1220: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8695  000CC2  EC71  F022         	call	_Busy_eep	;wreg free
  8696  000CC6  0E43               	movlw	67
  8697  000CC8  0100               	movlb	0	; () banked
  8698  000CCA  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8699  000CCC  6E08               	movwf	?_Write_b_eep,c
  8700  000CCE  6A09               	clrf	?_Write_b_eep+1,c
  8701  000CD0  0E00               	movlw	0
  8702  000CD2  2209               	addwfc	?_Write_b_eep+1,f,c
  8703  000CD4  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8704  000CD8  EC56  F020         	call	_Write_b_eep	;wreg free
  8705                           
  8706                           ;main.c: 1221: rv = Read_b_eep(0x43 + reg);
  8707  000CDC  0E43               	movlw	67
  8708  000CDE  0100               	movlb	0	; () banked
  8709  000CE0  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8710  000CE2  6E08               	movwf	?_Read_b_eep,c
  8711  000CE4  6A09               	clrf	?_Read_b_eep+1,c
  8712  000CE6  0E00               	movlw	0
  8713  000CE8  2209               	addwfc	?_Read_b_eep+1,f,c
  8714  000CEA  EC3D  F022         	call	_Read_b_eep	;wreg free
  8715  000CEE  0100               	movlb	0	; () banked
  8716  000CF0  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8717                           
  8718                           ; BSR set to: 0
  8719                           ;main.c: 1223: if ( val & 0x01 ) {
  8720  000CF2  A051               	btfss	vscp_writeAppReg@val,0,c
  8721  000CF4  D019               	goto	l10875
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;main.c: 1225: LATBbits.LATB1 = 0;
  8725  000CF6  928A               	bcf	3978,1,c	;volatile
  8726                           
  8727                           ;main.c: 1226: bOn = 0;
  8728  000CF8  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8729                           
  8730                           ; BSR set to: 0
  8731                           ;main.c: 1228: relay_pulse_flags |= 0x02;
  8732  000CFA  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;main.c: 1229: relay_pulse_timer[ 1 ] =
  8736                           ;main.c: 1230: Read_b_eep(0x43 + 18) * 256 +
  8737                           ;main.c: 1231: Read_b_eep(0x43 + 19);
  8738  000CFC  6A09               	clrf	?_Read_b_eep+1,c
  8739  000CFE  0E56               	movlw	86
  8740  000D00  6E08               	movwf	?_Read_b_eep,c
  8741  000D02  EC3D  F022         	call	_Read_b_eep	;wreg free
  8742  000D06  0100               	movlb	0	; () banked
  8743  000D08  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8744  000D0A  6A09               	clrf	?_Read_b_eep+1,c
  8745  000D0C  0E55               	movlw	85
  8746  000D0E  6E08               	movwf	?_Read_b_eep,c
  8747  000D10  EC3D  F022         	call	_Read_b_eep	;wreg free
  8748  000D14  0100               	movlb	0	; () banked
  8749  000D16  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8750  000D18  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8751  000D1A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8752  000D1C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8753  000D1E  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  8754  000D20  0E00               	movlw	0
  8755  000D22  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8756  000D24  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  8757                           
  8758                           ;main.c: 1232: }
  8759  000D26  D003               	goto	l10881
  8760  000D28                     l10875:
  8761                           
  8762                           ; BSR set to: 0
  8763                           ;main.c: 1233: else {
  8764                           ;main.c: 1234: relay_pulse_flags &= 0b11111101;
  8765  000D28  938A               	bcf	_relay_pulse_flags& (0+255),1,b
  8766                           
  8767                           ; BSR set to: 0
  8768                           ;main.c: 1235: LATBbits.LATB1 = 0;
  8769  000D2A  928A               	bcf	3978,1,c	;volatile
  8770                           
  8771                           ; BSR set to: 0
  8772                           ;main.c: 1236: bOn = 0;
  8773  000D2C  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8774  000D2E                     l10881:
  8775                           
  8776                           ; BSR set to: 0
  8777                           ;main.c: 1237: }
  8778                           ;main.c: 1239: if ( val & 0x04 ) {
  8779  000D2E  A451               	btfss	vscp_writeAppReg@val,2,c
  8780  000D30  D2B2               	goto	l11091
  8781                           
  8782                           ; BSR set to: 0
  8783                           ;main.c: 1240: relay_protection_timer[ 1 ] =
  8784                           ;main.c: 1241: Read_b_eep(0x43 + 34) * 256 +
  8785                           ;main.c: 1242: Read_b_eep(0x43 + 35);
  8786  000D32  6A09               	clrf	?_Read_b_eep+1,c
  8787  000D34  0E66               	movlw	102
  8788  000D36  6E08               	movwf	?_Read_b_eep,c
  8789  000D38  EC3D  F022         	call	_Read_b_eep	;wreg free
  8790  000D3C  0100               	movlb	0	; () banked
  8791  000D3E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8792  000D40  6A09               	clrf	?_Read_b_eep+1,c
  8793  000D42  0E65               	movlw	101
  8794  000D44  6E08               	movwf	?_Read_b_eep,c
  8795  000D46  EC3D  F022         	call	_Read_b_eep	;wreg free
  8796  000D4A                     L28:
  8797  000D4A  0100               	movlb	0	; () banked
  8798  000D4C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8799  000D4E  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8800  000D50  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8801  000D52  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8802  000D54  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  8803  000D56  0E00               	movlw	0
  8804  000D58  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8805  000D5A  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  8806  000D5C  D29C               	goto	l11091
  8807  000D5E                     l10885:
  8808                           
  8809                           ; BSR set to: 0
  8810                           ;main.c: 1248: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8811  000D5E  EC71  F022         	call	_Busy_eep	;wreg free
  8812  000D62  0E43               	movlw	67
  8813  000D64  0100               	movlb	0	; () banked
  8814  000D66  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8815  000D68  6E08               	movwf	?_Write_b_eep,c
  8816  000D6A  6A09               	clrf	?_Write_b_eep+1,c
  8817  000D6C  0E00               	movlw	0
  8818  000D6E  2209               	addwfc	?_Write_b_eep+1,f,c
  8819  000D70  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8820  000D74  EC56  F020         	call	_Write_b_eep	;wreg free
  8821                           
  8822                           ;main.c: 1249: rv = Read_b_eep(0x43 + reg);
  8823  000D78  0E43               	movlw	67
  8824  000D7A  0100               	movlb	0	; () banked
  8825  000D7C  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8826  000D7E  6E08               	movwf	?_Read_b_eep,c
  8827  000D80  6A09               	clrf	?_Read_b_eep+1,c
  8828  000D82  0E00               	movlw	0
  8829  000D84  2209               	addwfc	?_Read_b_eep+1,f,c
  8830  000D86  EC3D  F022         	call	_Read_b_eep	;wreg free
  8831  000D8A  0100               	movlb	0	; () banked
  8832  000D8C  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8833                           
  8834                           ; BSR set to: 0
  8835                           ;main.c: 1251: if ( val & 0x01 ) {
  8836  000D8E  A051               	btfss	vscp_writeAppReg@val,0,c
  8837  000D90  D019               	goto	l10899
  8838                           
  8839                           ; BSR set to: 0
  8840                           ;main.c: 1253: LATBbits.LATB0 = 0;
  8841  000D92  908A               	bcf	3978,0,c	;volatile
  8842                           
  8843                           ;main.c: 1254: bOn = 0;
  8844  000D94  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8845                           
  8846                           ; BSR set to: 0
  8847                           ;main.c: 1256: relay_pulse_flags |= 0x04;
  8848  000D96  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;main.c: 1257: relay_pulse_timer[ 2 ] =
  8852                           ;main.c: 1258: Read_b_eep(0x43 + 22) * 256 +
  8853                           ;main.c: 1259: Read_b_eep(0x43 + 23);
  8854  000D98  6A09               	clrf	?_Read_b_eep+1,c
  8855  000D9A  0E5A               	movlw	90
  8856  000D9C  6E08               	movwf	?_Read_b_eep,c
  8857  000D9E  EC3D  F022         	call	_Read_b_eep	;wreg free
  8858  000DA2  0100               	movlb	0	; () banked
  8859  000DA4  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8860  000DA6  6A09               	clrf	?_Read_b_eep+1,c
  8861  000DA8  0E59               	movlw	89
  8862  000DAA  6E08               	movwf	?_Read_b_eep,c
  8863  000DAC  EC3D  F022         	call	_Read_b_eep	;wreg free
  8864  000DB0  0100               	movlb	0	; () banked
  8865  000DB2  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8866  000DB4  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8867  000DB6  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8868  000DB8  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8869  000DBA  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  8870  000DBC  0E00               	movlw	0
  8871  000DBE  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8872  000DC0  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  8873                           
  8874                           ;main.c: 1260: }
  8875  000DC2  D003               	goto	l10905
  8876  000DC4                     l10899:
  8877                           
  8878                           ; BSR set to: 0
  8879                           ;main.c: 1261: else {
  8880                           ;main.c: 1262: relay_pulse_flags &= 0b11111011;
  8881  000DC4  958A               	bcf	_relay_pulse_flags& (0+255),2,b
  8882                           
  8883                           ; BSR set to: 0
  8884                           ;main.c: 1263: LATBbits.LATB0 = 0;
  8885  000DC6  908A               	bcf	3978,0,c	;volatile
  8886                           
  8887                           ; BSR set to: 0
  8888                           ;main.c: 1264: bOn = 0;
  8889  000DC8  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8890  000DCA                     l10905:
  8891                           
  8892                           ; BSR set to: 0
  8893                           ;main.c: 1265: }
  8894                           ;main.c: 1267: if ( val & 0x04 ) {
  8895  000DCA  B451               	btfsc	vscp_writeAppReg@val,2,c
  8896  000DCC  D63D               	goto	l10739
  8897  000DCE  D263               	goto	l11091
  8898  000DD0                     l10909:
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;main.c: 1276: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8902  000DD0  EC71  F022         	call	_Busy_eep	;wreg free
  8903  000DD4  0E43               	movlw	67
  8904  000DD6  0100               	movlb	0	; () banked
  8905  000DD8  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8906  000DDA  6E08               	movwf	?_Write_b_eep,c
  8907  000DDC  6A09               	clrf	?_Write_b_eep+1,c
  8908  000DDE  0E00               	movlw	0
  8909  000DE0  2209               	addwfc	?_Write_b_eep+1,f,c
  8910  000DE2  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8911  000DE6  EC56  F020         	call	_Write_b_eep	;wreg free
  8912                           
  8913                           ;main.c: 1277: rv = Read_b_eep(0x43 + reg);
  8914  000DEA  0E43               	movlw	67
  8915  000DEC  0100               	movlb	0	; () banked
  8916  000DEE  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8917  000DF0  6E08               	movwf	?_Read_b_eep,c
  8918  000DF2  6A09               	clrf	?_Read_b_eep+1,c
  8919  000DF4  0E00               	movlw	0
  8920  000DF6  2209               	addwfc	?_Read_b_eep+1,f,c
  8921  000DF8  EC3D  F022         	call	_Read_b_eep	;wreg free
  8922  000DFC  0100               	movlb	0	; () banked
  8923  000DFE  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8924                           
  8925                           ; BSR set to: 0
  8926                           ;main.c: 1279: if ( val & 0x01 ) {
  8927  000E00  A051               	btfss	vscp_writeAppReg@val,0,c
  8928  000E02  D019               	goto	l10923
  8929                           
  8930                           ; BSR set to: 0
  8931                           ;main.c: 1281: LATCbits.LATC7 = 0;
  8932  000E04  9E8B               	bcf	3979,7,c	;volatile
  8933                           
  8934                           ;main.c: 1282: bOn = 0;
  8935  000E06  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8936                           
  8937                           ; BSR set to: 0
  8938                           ;main.c: 1284: relay_pulse_flags |= 0x08;
  8939  000E08  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  8940                           
  8941                           ; BSR set to: 0
  8942                           ;main.c: 1285: relay_pulse_timer[ 3 ] =
  8943                           ;main.c: 1286: Read_b_eep(0x43 + 24) * 256 +
  8944                           ;main.c: 1287: Read_b_eep(0x43 + 25);
  8945  000E0A  6A09               	clrf	?_Read_b_eep+1,c
  8946  000E0C  0E5C               	movlw	92
  8947  000E0E  6E08               	movwf	?_Read_b_eep,c
  8948  000E10  EC3D  F022         	call	_Read_b_eep	;wreg free
  8949  000E14  0100               	movlb	0	; () banked
  8950  000E16  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8951  000E18  6A09               	clrf	?_Read_b_eep+1,c
  8952  000E1A  0E5B               	movlw	91
  8953  000E1C  6E08               	movwf	?_Read_b_eep,c
  8954  000E1E  EC3D  F022         	call	_Read_b_eep	;wreg free
  8955  000E22  0100               	movlb	0	; () banked
  8956  000E24  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8957  000E26  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8958  000E28  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8959  000E2A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8960  000E2C  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  8961  000E2E  0E00               	movlw	0
  8962  000E30  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8963  000E32  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  8964                           
  8965                           ;main.c: 1288: }
  8966  000E34  D003               	goto	l10929
  8967  000E36                     l10923:
  8968                           
  8969                           ; BSR set to: 0
  8970                           ;main.c: 1289: else {
  8971                           ;main.c: 1290: relay_pulse_flags &= 0b11110111;
  8972  000E36  978A               	bcf	_relay_pulse_flags& (0+255),3,b
  8973                           
  8974                           ; BSR set to: 0
  8975                           ;main.c: 1291: LATCbits.LATC7 = 0;
  8976  000E38  9E8B               	bcf	3979,7,c	;volatile
  8977                           
  8978                           ; BSR set to: 0
  8979                           ;main.c: 1292: bOn = 0;
  8980  000E3A  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8981  000E3C                     l10929:
  8982                           
  8983                           ; BSR set to: 0
  8984                           ;main.c: 1293: }
  8985                           ;main.c: 1295: if ( val & 0x04 ) {
  8986  000E3C  B451               	btfsc	vscp_writeAppReg@val,2,c
  8987  000E3E  D638               	goto	l10759
  8988  000E40  D22A               	goto	l11091
  8989  000E42                     l10933:
  8990                           
  8991                           ; BSR set to: 0
  8992                           ;main.c: 1304: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8993  000E42  EC71  F022         	call	_Busy_eep	;wreg free
  8994  000E46  0E43               	movlw	67
  8995  000E48  0100               	movlb	0	; () banked
  8996  000E4A  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8997  000E4C  6E08               	movwf	?_Write_b_eep,c
  8998  000E4E  6A09               	clrf	?_Write_b_eep+1,c
  8999  000E50  0E00               	movlw	0
  9000  000E52  2209               	addwfc	?_Write_b_eep+1,f,c
  9001  000E54  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9002  000E58  EC56  F020         	call	_Write_b_eep	;wreg free
  9003                           
  9004                           ;main.c: 1305: rv = Read_b_eep(0x43 + reg);
  9005  000E5C  0E43               	movlw	67
  9006  000E5E  0100               	movlb	0	; () banked
  9007  000E60  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9008  000E62  6E08               	movwf	?_Read_b_eep,c
  9009  000E64  6A09               	clrf	?_Read_b_eep+1,c
  9010  000E66  0E00               	movlw	0
  9011  000E68  2209               	addwfc	?_Read_b_eep+1,f,c
  9012  000E6A  EC3D  F022         	call	_Read_b_eep	;wreg free
  9013  000E6E  0100               	movlb	0	; () banked
  9014  000E70  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9015                           
  9016                           ; BSR set to: 0
  9017                           ;main.c: 1307: if ( val & 0x01 ) {
  9018  000E72  A051               	btfss	vscp_writeAppReg@val,0,c
  9019  000E74  D019               	goto	l10947
  9020                           
  9021                           ; BSR set to: 0
  9022                           ;main.c: 1309: LATCbits.LATC6 = 0;
  9023  000E76  9C8B               	bcf	3979,6,c	;volatile
  9024                           
  9025                           ;main.c: 1310: bOn = 0;
  9026  000E78  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9027                           
  9028                           ; BSR set to: 0
  9029                           ;main.c: 1312: relay_pulse_flags |= 0x10;
  9030  000E7A  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  9031                           
  9032                           ; BSR set to: 0
  9033                           ;main.c: 1313: relay_pulse_timer[ 4 ] =
  9034                           ;main.c: 1314: Read_b_eep(0x43 + 26) * 256 +
  9035                           ;main.c: 1315: Read_b_eep(0x43 + 27);
  9036  000E7C  6A09               	clrf	?_Read_b_eep+1,c
  9037  000E7E  0E5E               	movlw	94
  9038  000E80  6E08               	movwf	?_Read_b_eep,c
  9039  000E82  EC3D  F022         	call	_Read_b_eep	;wreg free
  9040  000E86  0100               	movlb	0	; () banked
  9041  000E88  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9042  000E8A  6A09               	clrf	?_Read_b_eep+1,c
  9043  000E8C  0E5D               	movlw	93
  9044  000E8E  6E08               	movwf	?_Read_b_eep,c
  9045  000E90  EC3D  F022         	call	_Read_b_eep	;wreg free
  9046  000E94  0100               	movlb	0	; () banked
  9047  000E96  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9048  000E98  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9049  000E9A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9050  000E9C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9051  000E9E  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9052  000EA0  0E00               	movlw	0
  9053  000EA2  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9054  000EA4  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9055                           
  9056                           ;main.c: 1316: }
  9057  000EA6  D003               	goto	l10953
  9058  000EA8                     l10947:
  9059                           
  9060                           ; BSR set to: 0
  9061                           ;main.c: 1317: else {
  9062                           ;main.c: 1318: relay_pulse_flags &= 0b11101111;
  9063  000EA8  998A               	bcf	_relay_pulse_flags& (0+255),4,b
  9064                           
  9065                           ; BSR set to: 0
  9066                           ;main.c: 1319: LATCbits.LATC6 = 0;
  9067  000EAA  9C8B               	bcf	3979,6,c	;volatile
  9068                           
  9069                           ; BSR set to: 0
  9070                           ;main.c: 1320: bOn = 0;
  9071  000EAC  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9072  000EAE                     l10953:
  9073                           
  9074                           ; BSR set to: 0
  9075                           ;main.c: 1321: }
  9076                           ;main.c: 1323: if ( val & 0x04 ) {
  9077  000EAE  B451               	btfsc	vscp_writeAppReg@val,2,c
  9078  000EB0  D631               	goto	l10779
  9079  000EB2  D1F1               	goto	l11091
  9080  000EB4                     l10957:
  9081                           
  9082                           ; BSR set to: 0
  9083                           ;main.c: 1332: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9084  000EB4  EC71  F022         	call	_Busy_eep	;wreg free
  9085  000EB8  0E43               	movlw	67
  9086  000EBA  0100               	movlb	0	; () banked
  9087  000EBC  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9088  000EBE  6E08               	movwf	?_Write_b_eep,c
  9089  000EC0  6A09               	clrf	?_Write_b_eep+1,c
  9090  000EC2  0E00               	movlw	0
  9091  000EC4  2209               	addwfc	?_Write_b_eep+1,f,c
  9092  000EC6  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9093  000ECA  EC56  F020         	call	_Write_b_eep	;wreg free
  9094                           
  9095                           ;main.c: 1333: rv = Read_b_eep(0x43 + reg);
  9096  000ECE  0E43               	movlw	67
  9097  000ED0  0100               	movlb	0	; () banked
  9098  000ED2  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9099  000ED4  6E08               	movwf	?_Read_b_eep,c
  9100  000ED6  6A09               	clrf	?_Read_b_eep+1,c
  9101  000ED8  0E00               	movlw	0
  9102  000EDA  2209               	addwfc	?_Read_b_eep+1,f,c
  9103  000EDC  EC3D  F022         	call	_Read_b_eep	;wreg free
  9104  000EE0  0100               	movlb	0	; () banked
  9105  000EE2  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9106                           
  9107                           ; BSR set to: 0
  9108                           ;main.c: 1335: if ( val & 0x01 ) {
  9109  000EE4  A051               	btfss	vscp_writeAppReg@val,0,c
  9110  000EE6  D019               	goto	l10971
  9111                           
  9112                           ; BSR set to: 0
  9113                           ;main.c: 1337: LATCbits.LATC5 = 0;
  9114  000EE8  9A8B               	bcf	3979,5,c	;volatile
  9115                           
  9116                           ;main.c: 1338: bOn = 0;
  9117  000EEA  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9118                           
  9119                           ; BSR set to: 0
  9120                           ;main.c: 1340: relay_pulse_flags |= 0x20;
  9121  000EEC  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  9122                           
  9123                           ; BSR set to: 0
  9124                           ;main.c: 1341: relay_pulse_timer[ 5 ] =
  9125                           ;main.c: 1342: Read_b_eep(0x43 + 28) * 256 +
  9126                           ;main.c: 1343: Read_b_eep(0x43 + 29);
  9127  000EEE  6A09               	clrf	?_Read_b_eep+1,c
  9128  000EF0  0E60               	movlw	96
  9129  000EF2  6E08               	movwf	?_Read_b_eep,c
  9130  000EF4  EC3D  F022         	call	_Read_b_eep	;wreg free
  9131  000EF8  0100               	movlb	0	; () banked
  9132  000EFA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9133  000EFC  6A09               	clrf	?_Read_b_eep+1,c
  9134  000EFE  0E5F               	movlw	95
  9135  000F00  6E08               	movwf	?_Read_b_eep,c
  9136  000F02  EC3D  F022         	call	_Read_b_eep	;wreg free
  9137  000F06  0100               	movlb	0	; () banked
  9138  000F08  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9139  000F0A  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9140  000F0C  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9141  000F0E  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9142  000F10  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9143  000F12  0E00               	movlw	0
  9144  000F14  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9145  000F16  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9146                           
  9147                           ;main.c: 1344: }
  9148  000F18  D003               	goto	l10977
  9149  000F1A                     l10971:
  9150                           
  9151                           ; BSR set to: 0
  9152                           ;main.c: 1345: else {
  9153                           ;main.c: 1346: relay_pulse_flags &= 0b11011111;
  9154  000F1A  9B8A               	bcf	_relay_pulse_flags& (0+255),5,b
  9155                           
  9156                           ; BSR set to: 0
  9157                           ;main.c: 1347: LATCbits.LATC5 = 0;
  9158  000F1C  9A8B               	bcf	3979,5,c	;volatile
  9159                           
  9160                           ; BSR set to: 0
  9161                           ;main.c: 1348: bOn = 0;
  9162  000F1E  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9163  000F20                     l10977:
  9164                           
  9165                           ; BSR set to: 0
  9166                           ;main.c: 1349: }
  9167                           ;main.c: 1351: if ( val & 0x04 ) {
  9168  000F20  B451               	btfsc	vscp_writeAppReg@val,2,c
  9169  000F22  D62A               	goto	l10799
  9170  000F24  D1B8               	goto	l11091
  9171  000F26                     l10981:
  9172                           
  9173                           ; BSR set to: 0
  9174                           ;main.c: 1360: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9175  000F26  EC71  F022         	call	_Busy_eep	;wreg free
  9176  000F2A  0E43               	movlw	67
  9177  000F2C  0100               	movlb	0	; () banked
  9178  000F2E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9179  000F30  6E08               	movwf	?_Write_b_eep,c
  9180  000F32  6A09               	clrf	?_Write_b_eep+1,c
  9181  000F34  0E00               	movlw	0
  9182  000F36  2209               	addwfc	?_Write_b_eep+1,f,c
  9183  000F38  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9184  000F3C  EC56  F020         	call	_Write_b_eep	;wreg free
  9185                           
  9186                           ;main.c: 1361: rv = Read_b_eep(0x43 + reg);
  9187  000F40  0E43               	movlw	67
  9188  000F42  0100               	movlb	0	; () banked
  9189  000F44  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9190  000F46  6E08               	movwf	?_Read_b_eep,c
  9191  000F48  6A09               	clrf	?_Read_b_eep+1,c
  9192  000F4A  0E00               	movlw	0
  9193  000F4C  2209               	addwfc	?_Read_b_eep+1,f,c
  9194  000F4E  EC3D  F022         	call	_Read_b_eep	;wreg free
  9195  000F52  0100               	movlb	0	; () banked
  9196  000F54  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9197                           
  9198                           ; BSR set to: 0
  9199                           ;main.c: 1363: if ( val & 0x01 ) {
  9200  000F56  A051               	btfss	vscp_writeAppReg@val,0,c
  9201  000F58  D019               	goto	l10995
  9202                           
  9203                           ; BSR set to: 0
  9204                           ;main.c: 1365: LATCbits.LATC4 = 0;
  9205  000F5A  988B               	bcf	3979,4,c	;volatile
  9206                           
  9207                           ;main.c: 1366: bOn = 0;
  9208  000F5C  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9209                           
  9210                           ; BSR set to: 0
  9211                           ;main.c: 1368: relay_pulse_flags |= 0x40;
  9212  000F5E  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  9213                           
  9214                           ; BSR set to: 0
  9215                           ;main.c: 1369: relay_pulse_timer[ 6 ] =
  9216                           ;main.c: 1370: Read_b_eep(0x43 + 30) * 256 +
  9217                           ;main.c: 1371: Read_b_eep(0x43 + 31);
  9218  000F60  6A09               	clrf	?_Read_b_eep+1,c
  9219  000F62  0E62               	movlw	98
  9220  000F64  6E08               	movwf	?_Read_b_eep,c
  9221  000F66  EC3D  F022         	call	_Read_b_eep	;wreg free
  9222  000F6A  0100               	movlb	0	; () banked
  9223  000F6C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9224  000F6E  6A09               	clrf	?_Read_b_eep+1,c
  9225  000F70  0E61               	movlw	97
  9226  000F72  6E08               	movwf	?_Read_b_eep,c
  9227  000F74  EC3D  F022         	call	_Read_b_eep	;wreg free
  9228  000F78  0100               	movlb	0	; () banked
  9229  000F7A  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9230  000F7C  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9231  000F7E  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9232  000F80  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9233  000F82  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9234  000F84  0E00               	movlw	0
  9235  000F86  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9236  000F88  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9237                           
  9238                           ;main.c: 1372: }
  9239  000F8A  D003               	goto	l11001
  9240  000F8C                     l10995:
  9241                           
  9242                           ; BSR set to: 0
  9243                           ;main.c: 1373: else {
  9244                           ;main.c: 1374: relay_pulse_flags &= 0b10111111;
  9245  000F8C  9D8A               	bcf	_relay_pulse_flags& (0+255),6,b
  9246                           
  9247                           ; BSR set to: 0
  9248                           ;main.c: 1375: LATCbits.LATC7 = 0;
  9249  000F8E  9E8B               	bcf	3979,7,c	;volatile
  9250                           
  9251                           ; BSR set to: 0
  9252                           ;main.c: 1376: bOn = 0;
  9253  000F90  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9254  000F92                     l11001:
  9255                           
  9256                           ; BSR set to: 0
  9257                           ;main.c: 1377: }
  9258                           ;main.c: 1379: if ( val & 0x04 ) {
  9259  000F92  B451               	btfsc	vscp_writeAppReg@val,2,c
  9260  000F94  D623               	goto	l10819
  9261  000F96  D17F               	goto	l11091
  9262  000F98                     l11007:
  9263                           
  9264                           ; BSR set to: 0
  9265  000F98  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9266                           
  9267                           ; Switch size 1, requested type "speed"
  9268                           ; Number of cases is 7, Range of values is 10 to 16
  9269                           ; switch strategies available:
  9270                           ; Name         Instructions Cycles
  9271                           ; simple_byte           22    12 (average)
  9272                           ;	Chosen strategy is simple_byte
  9273  000F9A  0A0A               	xorlw	10	; case 10
  9274  000F9C  E101 D658          	bz	l10837
  9275  000FA0  0A01               	xorlw	1	; case 11
  9276  000FA2  E101 D68E          	bz	l10861
  9277  000FA6  0A07               	xorlw	7	; case 12
  9278  000FA8  E101 D6D9          	bz	l10885
  9279  000FAC  0A01               	xorlw	1	; case 13
  9280  000FAE  E101 D70F          	bz	l10909
  9281  000FB2  0A03               	xorlw	3	; case 14
  9282  000FB4  E101 D745          	bz	l10933
  9283  000FB8  0A01               	xorlw	1	; case 15
  9284  000FBA  E101 D77B          	bz	l10957
  9285  000FBE  0A1F               	xorlw	31	; case 16
  9286  000FC0  E0B2               	bz	l10981
  9287  000FC2  D169               	goto	l11091
  9288  000FC4                     l11009:
  9289                           
  9290                           ; BSR set to: 0
  9291                           ;main.c: 1390: else if ( (reg >= 18 ) &&
  9292                           ;main.c: 1391: (reg <= 33 ) ) {
  9293  000FC4  0E11               	movlw	17
  9294  000FC6  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9295  000FC8  D0E1               	goto	l11039
  9296                           
  9297                           ; BSR set to: 0
  9298  000FCA  0E22               	movlw	34
  9299  000FCC  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9300  000FCE  D0DE               	goto	l11039
  9301                           
  9302                           ; BSR set to: 0
  9303                           ;main.c: 1394: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9304  000FD0  EC71  F022         	call	_Busy_eep	;wreg free
  9305  000FD4  0E43               	movlw	67
  9306  000FD6  0100               	movlb	0	; () banked
  9307  000FD8  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9308  000FDA  6E08               	movwf	?_Write_b_eep,c
  9309  000FDC  6A09               	clrf	?_Write_b_eep+1,c
  9310  000FDE  0E00               	movlw	0
  9311  000FE0  2209               	addwfc	?_Write_b_eep+1,f,c
  9312  000FE2  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9313  000FE6  EC56  F020         	call	_Write_b_eep	;wreg free
  9314                           
  9315                           ;main.c: 1395: rv = Read_b_eep(0x43 + reg);
  9316  000FEA  0E43               	movlw	67
  9317  000FEC  0100               	movlb	0	; () banked
  9318  000FEE  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9319  000FF0  6E08               	movwf	?_Read_b_eep,c
  9320  000FF2  6A09               	clrf	?_Read_b_eep+1,c
  9321  000FF4  0E00               	movlw	0
  9322  000FF6  2209               	addwfc	?_Read_b_eep+1,f,c
  9323  000FF8  EC3D  F022         	call	_Read_b_eep	;wreg free
  9324  000FFC  0100               	movlb	0	; () banked
  9325  000FFE  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9326                           
  9327                           ;main.c: 1399: switch ( reg ) {
  9328  001000  D0B0               	goto	l11037
  9329  001002                     l11019:
  9330                           
  9331                           ; BSR set to: 0
  9332                           ;main.c: 1402: relay_pulse_timer[ 0 ] =
  9333                           ;main.c: 1403: Read_b_eep(0x43 + 18) * 256 +
  9334                           ;main.c: 1404: Read_b_eep(0x43 + 19);
  9335  001002  6A09               	clrf	?_Read_b_eep+1,c
  9336  001004  0E56               	movlw	86
  9337  001006  6E08               	movwf	?_Read_b_eep,c
  9338  001008  EC3D  F022         	call	_Read_b_eep	;wreg free
  9339  00100C  0100               	movlb	0	; () banked
  9340  00100E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9341  001010  6A09               	clrf	?_Read_b_eep+1,c
  9342  001012  0E55               	movlw	85
  9343  001014  6E08               	movwf	?_Read_b_eep,c
  9344  001016  EC3D  F022         	call	_Read_b_eep	;wreg free
  9345  00101A  0100               	movlb	0	; () banked
  9346  00101C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9347  00101E  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9348  001020  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9349  001022  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9350  001024  6F70               	movwf	_relay_pulse_timer& (0+255),b
  9351  001026  0E00               	movlw	0
  9352  001028  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9353  00102A  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  9354                           
  9355                           ;main.c: 1405: break;
  9356  00102C  D134               	goto	l11091
  9357  00102E                     l11021:
  9358                           
  9359                           ; BSR set to: 0
  9360                           ;main.c: 1408: relay_pulse_timer[ 1 ] =
  9361                           ;main.c: 1409: Read_b_eep(0x43 + 20) * 256 +
  9362                           ;main.c: 1410: Read_b_eep(0x43 + 21);
  9363  00102E  6A09               	clrf	?_Read_b_eep+1,c
  9364  001030  0E58               	movlw	88
  9365  001032  6E08               	movwf	?_Read_b_eep,c
  9366  001034  EC3D  F022         	call	_Read_b_eep	;wreg free
  9367  001038  0100               	movlb	0	; () banked
  9368  00103A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9369  00103C  6A09               	clrf	?_Read_b_eep+1,c
  9370  00103E  0E57               	movlw	87
  9371  001040  6E08               	movwf	?_Read_b_eep,c
  9372  001042  EC3D  F022         	call	_Read_b_eep	;wreg free
  9373  001046  0100               	movlb	0	; () banked
  9374  001048  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9375  00104A  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9376  00104C  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9377  00104E  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9378  001050  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  9379  001052  0E00               	movlw	0
  9380  001054  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9381  001056  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  9382                           
  9383                           ;main.c: 1411: break;
  9384  001058  D11E               	goto	l11091
  9385  00105A                     l11023:
  9386                           
  9387                           ; BSR set to: 0
  9388                           ;main.c: 1414: relay_pulse_timer[ 2 ] =
  9389                           ;main.c: 1415: Read_b_eep(0x43 + 22) * 256 +
  9390                           ;main.c: 1416: Read_b_eep(0x43 + 23);
  9391  00105A  6A09               	clrf	?_Read_b_eep+1,c
  9392  00105C  0E5A               	movlw	90
  9393  00105E  6E08               	movwf	?_Read_b_eep,c
  9394  001060  EC3D  F022         	call	_Read_b_eep	;wreg free
  9395  001064  0100               	movlb	0	; () banked
  9396  001066  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9397  001068  6A09               	clrf	?_Read_b_eep+1,c
  9398  00106A  0E59               	movlw	89
  9399  00106C  6E08               	movwf	?_Read_b_eep,c
  9400  00106E  EC3D  F022         	call	_Read_b_eep	;wreg free
  9401  001072  0100               	movlb	0	; () banked
  9402  001074  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9403  001076  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9404  001078  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9405  00107A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9406  00107C  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  9407  00107E  0E00               	movlw	0
  9408  001080  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9409  001082  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  9410                           
  9411                           ;main.c: 1417: break;
  9412  001084  D108               	goto	l11091
  9413  001086                     l11025:
  9414                           
  9415                           ; BSR set to: 0
  9416                           ;main.c: 1420: relay_pulse_timer[ 3 ] =
  9417                           ;main.c: 1421: Read_b_eep(0x43 + 24) * 256 +
  9418                           ;main.c: 1422: Read_b_eep(0x43 + 25);
  9419  001086  6A09               	clrf	?_Read_b_eep+1,c
  9420  001088  0E5C               	movlw	92
  9421  00108A  6E08               	movwf	?_Read_b_eep,c
  9422  00108C  EC3D  F022         	call	_Read_b_eep	;wreg free
  9423  001090  0100               	movlb	0	; () banked
  9424  001092  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9425  001094  6A09               	clrf	?_Read_b_eep+1,c
  9426  001096  0E5B               	movlw	91
  9427  001098  6E08               	movwf	?_Read_b_eep,c
  9428  00109A  EC3D  F022         	call	_Read_b_eep	;wreg free
  9429  00109E  0100               	movlb	0	; () banked
  9430  0010A0  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9431  0010A2  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9432  0010A4  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9433  0010A6  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9434  0010A8  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  9435  0010AA  0E00               	movlw	0
  9436  0010AC  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9437  0010AE  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  9438                           
  9439                           ;main.c: 1423: break;
  9440  0010B0  D0F2               	goto	l11091
  9441  0010B2                     l11027:
  9442                           
  9443                           ; BSR set to: 0
  9444                           ;main.c: 1426: relay_pulse_timer[ 4 ] =
  9445                           ;main.c: 1427: Read_b_eep(0x43 + 26) * 256 +
  9446                           ;main.c: 1428: Read_b_eep(0x43 + 27);
  9447  0010B2  6A09               	clrf	?_Read_b_eep+1,c
  9448  0010B4  0E5E               	movlw	94
  9449  0010B6  6E08               	movwf	?_Read_b_eep,c
  9450  0010B8  EC3D  F022         	call	_Read_b_eep	;wreg free
  9451  0010BC  0100               	movlb	0	; () banked
  9452  0010BE  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9453  0010C0  6A09               	clrf	?_Read_b_eep+1,c
  9454  0010C2  0E5D               	movlw	93
  9455  0010C4  6E08               	movwf	?_Read_b_eep,c
  9456  0010C6  EC3D  F022         	call	_Read_b_eep	;wreg free
  9457  0010CA  0100               	movlb	0	; () banked
  9458  0010CC  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9459  0010CE  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9460  0010D0  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9461  0010D2  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9462  0010D4  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9463  0010D6  0E00               	movlw	0
  9464  0010D8  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9465  0010DA  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9466                           
  9467                           ;main.c: 1429: break;
  9468  0010DC  D0DC               	goto	l11091
  9469  0010DE                     l11029:
  9470                           
  9471                           ; BSR set to: 0
  9472                           ;main.c: 1432: relay_pulse_timer[ 5 ] =
  9473                           ;main.c: 1433: Read_b_eep(0x43 + 28) * 256 +
  9474                           ;main.c: 1434: Read_b_eep(0x43 + 29);
  9475  0010DE  6A09               	clrf	?_Read_b_eep+1,c
  9476  0010E0  0E60               	movlw	96
  9477  0010E2  6E08               	movwf	?_Read_b_eep,c
  9478  0010E4  EC3D  F022         	call	_Read_b_eep	;wreg free
  9479  0010E8  0100               	movlb	0	; () banked
  9480  0010EA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9481  0010EC  6A09               	clrf	?_Read_b_eep+1,c
  9482  0010EE  0E5F               	movlw	95
  9483  0010F0  6E08               	movwf	?_Read_b_eep,c
  9484  0010F2  EC3D  F022         	call	_Read_b_eep	;wreg free
  9485  0010F6  0100               	movlb	0	; () banked
  9486  0010F8  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9487  0010FA  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9488  0010FC  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9489  0010FE  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9490  001100  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9491  001102  0E00               	movlw	0
  9492  001104  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9493  001106  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9494                           
  9495                           ;main.c: 1435: break;
  9496  001108  D0C6               	goto	l11091
  9497  00110A                     l11031:
  9498                           
  9499                           ; BSR set to: 0
  9500                           ;main.c: 1438: relay_pulse_timer[ 6 ] =
  9501                           ;main.c: 1439: Read_b_eep(0x43 + 30) * 256 +
  9502                           ;main.c: 1440: Read_b_eep(0x43 + 31);
  9503  00110A  6A09               	clrf	?_Read_b_eep+1,c
  9504  00110C  0E62               	movlw	98
  9505  00110E  6E08               	movwf	?_Read_b_eep,c
  9506  001110  EC3D  F022         	call	_Read_b_eep	;wreg free
  9507  001114  0100               	movlb	0	; () banked
  9508  001116  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9509  001118  6A09               	clrf	?_Read_b_eep+1,c
  9510  00111A  0E61               	movlw	97
  9511  00111C  6E08               	movwf	?_Read_b_eep,c
  9512  00111E  EC3D  F022         	call	_Read_b_eep	;wreg free
  9513  001122  0100               	movlb	0	; () banked
  9514  001124  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9515  001126  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9516  001128  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9517  00112A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9518  00112C  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9519  00112E  0E00               	movlw	0
  9520  001130  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9521  001132  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9522                           
  9523                           ;main.c: 1441: break;
  9524  001134  D0B0               	goto	l11091
  9525  001136                     l11033:
  9526                           
  9527                           ; BSR set to: 0
  9528                           ;main.c: 1444: relay_pulse_timer[ 7 ] =
  9529                           ;main.c: 1445: Read_b_eep(0x43 + 32) * 256 +
  9530                           ;main.c: 1446: Read_b_eep(0x43 + 33);
  9531  001136  6A09               	clrf	?_Read_b_eep+1,c
  9532  001138  0E64               	movlw	100
  9533  00113A  6E08               	movwf	?_Read_b_eep,c
  9534  00113C  EC3D  F022         	call	_Read_b_eep	;wreg free
  9535  001140  0100               	movlb	0	; () banked
  9536  001142  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9537  001144  6A09               	clrf	?_Read_b_eep+1,c
  9538  001146  0E63               	movlw	99
  9539  001148  6E08               	movwf	?_Read_b_eep,c
  9540  00114A  EC3D  F022         	call	_Read_b_eep	;wreg free
  9541  00114E  0100               	movlb	0	; () banked
  9542  001150  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9543  001152  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9544  001154  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9545  001156  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9546  001158  6F7E               	movwf	(_relay_pulse_timer+14)& (0+255),b
  9547  00115A  0E00               	movlw	0
  9548  00115C  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9549  00115E  6F7F               	movwf	(_relay_pulse_timer+15)& (0+255),b
  9550                           
  9551                           ;main.c: 1447: break;
  9552  001160  D09A               	goto	l11091
  9553  001162                     l11037:
  9554                           
  9555                           ; BSR set to: 0
  9556  001162  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9557                           
  9558                           ; Switch size 1, requested type "speed"
  9559                           ; Number of cases is 8, Range of values is 19 to 33
  9560                           ; switch strategies available:
  9561                           ; Name         Instructions Cycles
  9562                           ; simple_byte           25    13 (average)
  9563                           ;	Chosen strategy is simple_byte
  9564  001164  0A13               	xorlw	19	; case 19
  9565  001166  E101 D74C          	bz	l11019
  9566  00116A  0A06               	xorlw	6	; case 21
  9567  00116C  E101 D75F          	bz	l11021
  9568  001170  0A02               	xorlw	2	; case 23
  9569  001172  E101 D772          	bz	l11023
  9570  001176  0A0E               	xorlw	14	; case 25
  9571  001178  E086               	bz	l11025
  9572  00117A  0A02               	xorlw	2	; case 27
  9573  00117C  E09A               	bz	l11027
  9574  00117E  0A06               	xorlw	6	; case 29
  9575  001180  E0AE               	bz	l11029
  9576  001182  0A02               	xorlw	2	; case 31
  9577  001184  E0C2               	bz	l11031
  9578  001186  0A3E               	xorlw	62	; case 33
  9579  001188  E0D6               	bz	l11033
  9580  00118A  D085               	goto	l11091
  9581  00118C                     l11039:
  9582                           
  9583                           ; BSR set to: 0
  9584                           ;main.c: 1455: else if ( ( reg >= 34 ) &&
  9585                           ;main.c: 1456: ( reg <= 49 ) ) {
  9586  00118C  0E21               	movlw	33
  9587  00118E  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9588  001190  D04D               	goto	l11069
  9589                           
  9590                           ; BSR set to: 0
  9591  001192  0E32               	movlw	50
  9592  001194  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9593  001196  D04A               	goto	l11069
  9594                           
  9595                           ; BSR set to: 0
  9596                           ;main.c: 1459: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9597  001198  EC71  F022         	call	_Busy_eep	;wreg free
  9598  00119C  0E43               	movlw	67
  9599  00119E  0100               	movlb	0	; () banked
  9600  0011A0  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9601  0011A2  6E08               	movwf	?_Write_b_eep,c
  9602  0011A4  6A09               	clrf	?_Write_b_eep+1,c
  9603  0011A6  0E00               	movlw	0
  9604  0011A8  2209               	addwfc	?_Write_b_eep+1,f,c
  9605  0011AA  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9606  0011AE  EC56  F020         	call	_Write_b_eep	;wreg free
  9607                           
  9608                           ;main.c: 1460: rv = Read_b_eep(0x43 + reg);
  9609  0011B2  0E43               	movlw	67
  9610  0011B4  0100               	movlb	0	; () banked
  9611  0011B6  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9612  0011B8  6E08               	movwf	?_Read_b_eep,c
  9613  0011BA  6A09               	clrf	?_Read_b_eep+1,c
  9614  0011BC  0E00               	movlw	0
  9615  0011BE  2209               	addwfc	?_Read_b_eep+1,f,c
  9616  0011C0  EC3D  F022         	call	_Read_b_eep	;wreg free
  9617  0011C4  0100               	movlb	0	; () banked
  9618  0011C6  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9619                           
  9620                           ;main.c: 1462: switch ( reg ) {
  9621  0011C8  D016               	goto	l11067
  9622  0011CA                     l11063:
  9623                           
  9624                           ; BSR set to: 0
  9625                           ;main.c: 1507: relay_protection_timer[ 7 ] =
  9626                           ;main.c: 1508: Read_b_eep(0x43 + 48) * 256 +
  9627                           ;main.c: 1509: Read_b_eep(0x43 + 49);
  9628  0011CA  6A09               	clrf	?_Read_b_eep+1,c
  9629  0011CC  0E74               	movlw	116
  9630  0011CE  6E08               	movwf	?_Read_b_eep,c
  9631  0011D0  EC3D  F022         	call	_Read_b_eep	;wreg free
  9632  0011D4  0100               	movlb	0	; () banked
  9633  0011D6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9634  0011D8  6A09               	clrf	?_Read_b_eep+1,c
  9635  0011DA  0E73               	movlw	115
  9636  0011DC  6E08               	movwf	?_Read_b_eep,c
  9637  0011DE  EC3D  F022         	call	_Read_b_eep	;wreg free
  9638  0011E2  0100               	movlb	0	; () banked
  9639  0011E4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9640  0011E6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9641  0011E8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9642  0011EA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9643  0011EC  6F6E               	movwf	(_relay_protection_timer+14)& (0+255),b
  9644  0011EE  0E00               	movlw	0
  9645  0011F0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9646  0011F2  6F6F               	movwf	(_relay_protection_timer+15)& (0+255),b
  9647                           
  9648                           ;main.c: 1510: break;
  9649  0011F4  D050               	goto	l11091
  9650  0011F6                     l11067:
  9651                           
  9652                           ; BSR set to: 0
  9653  0011F6  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9654                           
  9655                           ; Switch size 1, requested type "speed"
  9656                           ; Number of cases is 8, Range of values is 35 to 49
  9657                           ; switch strategies available:
  9658                           ; Name         Instructions Cycles
  9659                           ; simple_byte           25    13 (average)
  9660                           ;	Chosen strategy is simple_byte
  9661  0011F8  0A23               	xorlw	35	; case 35
  9662  0011FA  E102 EFC2  F004    	bz	l10699
  9663  001200  0A06               	xorlw	6	; case 37
  9664  001202  E102 EFF9  F004    	bz	l10719
  9665  001208  0A02               	xorlw	2	; case 39
  9666  00120A  E101 D41D          	bz	l10739
  9667  00120E  0A0E               	xorlw	14	; case 41
  9668  001210  E101 D44E          	bz	l10759
  9669  001214  0A02               	xorlw	2	; case 43
  9670  001216  E101 D47D          	bz	l10779
  9671  00121A  0A06               	xorlw	6	; case 45
  9672  00121C  E101 D4AC          	bz	l10799
  9673  001220  0A02               	xorlw	2	; case 47
  9674  001222  E101 D4DB          	bz	l10819
  9675  001226  0A1E               	xorlw	30	; case 49
  9676  001228  E0D0               	bz	l11063
  9677  00122A  D035               	goto	l11091
  9678  00122C                     l11069:
  9679                           
  9680                           ; BSR set to: 0
  9681                           ;main.c: 1518: else if ( (reg >= 50 ) && (reg <= 65) ) {
  9682  00122C  0E31               	movlw	49
  9683  00122E  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9684  001230  D01C               	goto	l11079
  9685                           
  9686                           ; BSR set to: 0
  9687  001232  0E42               	movlw	66
  9688  001234  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9689  001236  D019               	goto	l11079
  9690                           
  9691                           ; BSR set to: 0
  9692                           ;main.c: 1521: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9693  001238  EC71  F022         	call	_Busy_eep	;wreg free
  9694  00123C  0E43               	movlw	67
  9695  00123E  0100               	movlb	0	; () banked
  9696  001240  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9697  001242  6E08               	movwf	?_Write_b_eep,c
  9698  001244  6A09               	clrf	?_Write_b_eep+1,c
  9699  001246  0E00               	movlw	0
  9700  001248  2209               	addwfc	?_Write_b_eep+1,f,c
  9701  00124A  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9702  00124E  EC56  F020         	call	_Write_b_eep	;wreg free
  9703  001252                     l11077:
  9704                           
  9705                           ;main.c: 1522: rv = Read_b_eep(0x43 + reg);
  9706  001252  0E43               	movlw	67
  9707  001254  0100               	movlb	0	; () banked
  9708  001256  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9709  001258  6E08               	movwf	?_Read_b_eep,c
  9710  00125A  6A09               	clrf	?_Read_b_eep+1,c
  9711  00125C  0E00               	movlw	0
  9712  00125E  2209               	addwfc	?_Read_b_eep+1,f,c
  9713  001260  EC3D  F022         	call	_Read_b_eep	;wreg free
  9714  001264                     L27:
  9715  001264  0100               	movlb	0	; () banked
  9716  001266  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9717                           
  9718                           ;main.c: 1524: }
  9719  001268  D016               	goto	l11091
  9720  00126A                     l11079:
  9721                           
  9722                           ; BSR set to: 0
  9723                           ;main.c: 1525: else if ( (reg >= 72) &&
  9724                           ;main.c: 1526: (reg < (72 + 7 * 8)) ) {
  9725  00126A  0E47               	movlw	71
  9726  00126C  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9727  00126E  D013               	goto	l11091
  9728                           
  9729                           ; BSR set to: 0
  9730  001270  0E80               	movlw	128
  9731  001272  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9732  001274  D010               	goto	l11091
  9733                           
  9734                           ; BSR set to: 0
  9735                           ;main.c: 1527: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9736  001276  EC71  F022         	call	_Busy_eep	;wreg free
  9737  00127A  0E43               	movlw	67
  9738  00127C  0100               	movlb	0	; () banked
  9739  00127E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9740  001280  6E08               	movwf	?_Write_b_eep,c
  9741  001282  6A09               	clrf	?_Write_b_eep+1,c
  9742  001284  0E00               	movlw	0
  9743  001286  2209               	addwfc	?_Write_b_eep+1,f,c
  9744  001288  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9745  00128C  EC56  F020         	call	_Write_b_eep	;wreg free
  9746                           
  9747                           ;main.c: 1528: calculateSetFilterMask();
  9748  001290  ECA3  F00C         	call	_calculateSetFilterMask	;wreg free
  9749  001294  D7DE               	goto	l11077
  9750  001296                     l11091:
  9751                           
  9752                           ; BSR set to: 0
  9753                           ;main.c: 1530: }
  9754                           ;main.c: 1536: if ( bInfoEvent ) {
  9755  001296  51CA               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
  9756  001298  E035               	bz	l11111
  9757                           
  9758                           ; BSR set to: 0
  9759                           ;main.c: 1538: unsigned char val;
  9760                           ;main.c: 1539: val = Read_b_eep(0x43 + 10 + (reg - 2));
  9761  00129A  0E4B               	movlw	75
  9762  00129C  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9763  00129E  6E08               	movwf	?_Read_b_eep,c
  9764  0012A0  6A09               	clrf	?_Read_b_eep+1,c
  9765  0012A2  0E00               	movlw	0
  9766  0012A4  2209               	addwfc	?_Read_b_eep+1,f,c
  9767  0012A6  EC3D  F022         	call	_Read_b_eep	;wreg free
  9768  0012AA  0100               	movlb	0	; () banked
  9769  0012AC  6FCB               	movwf	vscp_writeAppReg@val_682& (0+255),b
  9770                           
  9771                           ; BSR set to: 0
  9772                           ;main.c: 1542: if ( bOn ) {
  9773  0012AE  51CD               	movf	vscp_writeAppReg@bOn& (0+255),w,b
  9774  0012B0  E015               	bz	l404
  9775                           
  9776                           ; BSR set to: 0
  9777                           ;main.c: 1544: if ( val & 0x08 ) {
  9778  0012B2  A7CB               	btfss	vscp_writeAppReg@val_682& (0+255),3,b
  9779  0012B4  D008               	goto	l11101
  9780                           
  9781                           ; BSR set to: 0
  9782                           ;main.c: 1545: SendInformationEvent( reg - 2,
  9783                           ;main.c: 1546: 20,
  9784                           ;main.c: 1547: 3 );
  9785  0012B6  0E14               	movlw	20
  9786  0012B8  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9787  0012BA  0E03               	movlw	3
  9788  0012BC  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9789  0012BE  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9790  0012C0  0FFE               	addlw	254
  9791  0012C2  EC99  F01F         	call	_SendInformationEvent
  9792  0012C6                     l11101:
  9793                           
  9794                           ; BSR set to: 0
  9795                           ;main.c: 1548: }
  9796                           ;main.c: 1550: if ( val & 0x20 ) {
  9797  0012C6  ABCB               	btfss	vscp_writeAppReg@val_682& (0+255),5,b
  9798  0012C8  D01D               	goto	l11111
  9799                           
  9800                           ; BSR set to: 0
  9801                           ;main.c: 1551: SendInformationEvent( reg - 2,
  9802                           ;main.c: 1552: 20,
  9803                           ;main.c: 1553: 25 );
  9804  0012CA  0E14               	movlw	20
  9805  0012CC  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9806  0012CE  0E19               	movlw	25
  9807  0012D0  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9808  0012D2  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9809  0012D4  0FFE               	addlw	254
  9810  0012D6  EC99  F01F         	call	_SendInformationEvent
  9811  0012DA  D014               	goto	l11111
  9812  0012DC                     l404:
  9813                           
  9814                           ; BSR set to: 0
  9815                           ;main.c: 1557: else {
  9816                           ;main.c: 1559: if ( val & 0x10 ) {
  9817  0012DC  A9CB               	btfss	vscp_writeAppReg@val_682& (0+255),4,b
  9818  0012DE  D008               	goto	l11107
  9819                           
  9820                           ; BSR set to: 0
  9821                           ;main.c: 1560: SendInformationEvent( reg - 2,
  9822                           ;main.c: 1561: 20,
  9823                           ;main.c: 1562: 4 );
  9824  0012E0  0E14               	movlw	20
  9825  0012E2  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9826  0012E4  0E04               	movlw	4
  9827  0012E6  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9828  0012E8  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9829  0012EA  0FFE               	addlw	254
  9830  0012EC  EC99  F01F         	call	_SendInformationEvent
  9831  0012F0                     l11107:
  9832                           
  9833                           ; BSR set to: 0
  9834                           ;main.c: 1563: }
  9835                           ;main.c: 1565: if ( val & 0x40 ) {
  9836  0012F0  ADCB               	btfss	vscp_writeAppReg@val_682& (0+255),6,b
  9837  0012F2  D008               	goto	l11111
  9838                           
  9839                           ; BSR set to: 0
  9840                           ;main.c: 1566: SendInformationEvent( reg - 2,
  9841                           ;main.c: 1567: 20,
  9842                           ;main.c: 1568: 24 );
  9843  0012F4  0E14               	movlw	20
  9844  0012F6  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9845  0012F8  0E18               	movlw	24
  9846  0012FA  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9847  0012FC  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9848  0012FE  0FFE               	addlw	254
  9849  001300  EC99  F01F         	call	_SendInformationEvent
  9850  001304                     l11111:
  9851                           
  9852                           ; BSR set to: 0
  9853                           ;main.c: 1569: }
  9854                           ;main.c: 1570: }
  9855                           ;main.c: 1571: }
  9856                           ;main.c: 1573: return rv;
  9857  001304  51CC               	movf	vscp_writeAppReg@rv& (0+255),w,b
  9858                           
  9859                           ; BSR set to: 0
  9860  001306  0012               	return	
  9861  001308                     __end_of_vscp_writeAppReg:
  9862                           	opt stack 0
  9863                           tblptru	equ	0xFF8
  9864                           prodh	equ	0xFF4
  9865                           prodl	equ	0xFF3
  9866                           postinc0	equ	0xFEE
  9867                           wreg	equ	0xFE8
  9868                           indf2	equ	0xFDF
  9869                           postinc2	equ	0xFDE
  9870                           postdec2	equ	0xFDD
  9871                           fsr2h	equ	0xFDA
  9872                           fsr2l	equ	0xFD9
  9873                           status	equ	0xFD8
  9874                           
  9875 ;; *************** function _SendInformationEvent *****************
  9876 ;; Defined at:
  9877 ;;		line 1603 in file "../main.c"
  9878 ;; Parameters:    Size  Location     Type
  9879 ;;  idx             1    wreg     unsigned char 
  9880 ;;  eventClass      1   20[BANK0 ] unsigned char 
  9881 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
  9882 ;; Auto vars:     Size  Location     Type
  9883 ;;  idx             1   79[COMRAM] unsigned char 
  9884 ;;  data            3   76[COMRAM] unsigned char [3]
  9885 ;; Return value:  Size  Location     Type
  9886 ;;		None               void
  9887 ;; Registers used:
  9888 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9889 ;; Tracked objects:
  9890 ;;		On entry : F/0
  9891 ;;		On exit  : F/0
  9892 ;;		Unchanged: 0/0
  9893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9894 ;;      Params:         0       2       0       0       0       0       0
  9895 ;;      Locals:         4       0       0       0       0       0       0
  9896 ;;      Temps:          2       0       0       0       0       0       0
  9897 ;;      Totals:         6       2       0       0       0       0       0
  9898 ;;Total ram usage:        8 bytes
  9899 ;; Hardware stack levels used:    1
  9900 ;; Hardware stack levels required when called:    6
  9901 ;; This function calls:
  9902 ;;		_Read_b_eep
  9903 ;;		_sendVSCPFrame
  9904 ;; This function is called by:
  9905 ;;		_doApplicationOneSecondWork
  9906 ;;		_vscp_writeAppReg
  9907 ;;		_doActionOn
  9908 ;;		_doActionOff
  9909 ;;		_doActionStatus
  9910 ;;		_doActionToggle
  9911 ;; This function uses a non-reentrant model
  9912 ;;
  9913                           
  9914                           	psect	text25
  9915  003F32                     __ptext25:
  9916                           	opt stack 0
  9917  003F32                     _SendInformationEvent:
  9918                           	opt stack 23
  9919                           
  9920                           ; BSR set to: 0
  9921                           ;incstack = 0
  9922                           ;incstack = 0
  9923                           ;SendInformationEvent@idx stored from wreg
  9924  003F32  CFE8 F050          	movff	wreg,SendInformationEvent@idx
  9925                           
  9926                           ; BSR set to: 0
  9927                           ;main.c: 1604: uint8_t data[3];
  9928                           ;main.c: 1617: data[ 0 ] = idx;
  9929  003F36  C050  F04D         	movff	SendInformationEvent@idx,SendInformationEvent@data
  9930                           
  9931                           ; BSR set to: 0
  9932                           ;main.c: 1618: data[ 1 ] = Read_b_eep(0x43 + 50 + 2*idx);
  9933  003F3A  90D8               	bcf	status,0,c
  9934  003F3C  3450               	rlcf	SendInformationEvent@idx,w,c
  9935  003F3E  6E4B               	movwf	??_SendInformationEvent& (0+255),c
  9936  003F40  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
  9937  003F42  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
  9938  003F44  0E75               	movlw	117
  9939  003F46  244B               	addwf	??_SendInformationEvent,w,c
  9940  003F48  6E08               	movwf	?_Read_b_eep,c
  9941  003F4A  0E00               	movlw	0
  9942  003F4C  204C               	addwfc	??_SendInformationEvent+1,w,c
  9943  003F4E  6E09               	movwf	?_Read_b_eep+1,c
  9944  003F50  EC3D  F022         	call	_Read_b_eep	;wreg free
  9945  003F54  6E4E               	movwf	SendInformationEvent@data+1,c
  9946                           
  9947                           ;main.c: 1619: data[ 2 ] = Read_b_eep(0x43 + 51 + 2*idx);
  9948  003F56  90D8               	bcf	status,0,c
  9949  003F58  3450               	rlcf	SendInformationEvent@idx,w,c
  9950  003F5A  6E4B               	movwf	??_SendInformationEvent& (0+255),c
  9951  003F5C  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
  9952  003F5E  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
  9953  003F60  0E76               	movlw	118
  9954  003F62  244B               	addwf	??_SendInformationEvent,w,c
  9955  003F64  6E08               	movwf	?_Read_b_eep,c
  9956  003F66  0E00               	movlw	0
  9957  003F68  204C               	addwfc	??_SendInformationEvent+1,w,c
  9958  003F6A  6E09               	movwf	?_Read_b_eep+1,c
  9959  003F6C  EC3D  F022         	call	_Read_b_eep	;wreg free
  9960  003F70  6E4F               	movwf	SendInformationEvent@data+2,c
  9961                           
  9962                           ;main.c: 1620: sendVSCPFrame( eventClass,
  9963                           ;main.c: 1621: eventTypeId,
  9964                           ;main.c: 1622: vscp_nickname,
  9965                           ;main.c: 1623: 0x03,
  9966                           ;main.c: 1624: 3,
  9967                           ;main.c: 1625: data );
  9968  003F72  0100               	movlb	0	; () banked
  9969  003F74  C0C5  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
  9970  003F78  6A40               	clrf	?_sendVSCPFrame+1,c
  9971  003F7A  C0C6  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
  9972  003F7E  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  9973  003F82  0E03               	movlw	3
  9974  003F84  6E43               	movwf	?_sendVSCPFrame+4,c
  9975  003F86  6E44               	movwf	?_sendVSCPFrame+5,c
  9976  003F88  0E4D               	movlw	low SendInformationEvent@data
  9977  003F8A  6E45               	movwf	?_sendVSCPFrame+6,c
  9978  003F8C  0E00               	movlw	high SendInformationEvent@data
  9979  003F8E  6E46               	movwf	?_sendVSCPFrame+7,c
  9980  003F90  0E0F               	movlw	15
  9981  003F92  6E46               	movwf	?_sendVSCPFrame+7,c
  9982  003F94  0E5F               	movlw	__accesstop+-1
  9983  003F96  6445               	cpfsgt	?_sendVSCPFrame+6,c
  9984  003F98  6A46               	clrf	?_sendVSCPFrame+7,c
  9985  003F9A  EFD2  F01D         	goto	_sendVSCPFrame	;wreg free
  9986  003F9E                     __end_of_SendInformationEvent:
  9987                           	opt stack 0
  9988                           tblptru	equ	0xFF8
  9989                           prodh	equ	0xFF4
  9990                           prodl	equ	0xFF3
  9991                           postinc0	equ	0xFEE
  9992                           wreg	equ	0xFE8
  9993                           indf2	equ	0xFDF
  9994                           postinc2	equ	0xFDE
  9995                           postdec2	equ	0xFDD
  9996                           fsr2h	equ	0xFDA
  9997                           fsr2l	equ	0xFD9
  9998                           status	equ	0xFD8
  9999                           
 10000 ;; *************** function _calculateSetFilterMask *****************
 10001 ;; Defined at:
 10002 ;;		line 2686 in file "../main.c"
 10003 ;; Parameters:    Size  Location     Type
 10004 ;;		None
 10005 ;; Auto vars:     Size  Location     Type
 10006 ;;  rowfilter       4   61[COMRAM] unsigned long 
 10007 ;;  filter          4   57[COMRAM] unsigned long 
 10008 ;;  mask            4   53[COMRAM] unsigned long 
 10009 ;;  rowmask         4   48[COMRAM] unsigned long 
 10010 ;;  i               1   66[COMRAM] unsigned char 
 10011 ;;  j               1   65[COMRAM] unsigned char 
 10012 ;;  lastOID         1   52[COMRAM] unsigned char 
 10013 ;; Return value:  Size  Location     Type
 10014 ;;		None               void
 10015 ;; Registers used:
 10016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10017 ;; Tracked objects:
 10018 ;;		On entry : 0/0
 10019 ;;		On exit  : 0/0
 10020 ;;		Unchanged: 0/0
 10021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10022 ;;      Params:         0       0       0       0       0       0       0
 10023 ;;      Locals:        19       0       0       0       0       0       0
 10024 ;;      Temps:         31       0       0       0       0       0       0
 10025 ;;      Totals:        50       0       0       0       0       0       0
 10026 ;;Total ram usage:       50 bytes
 10027 ;; Hardware stack levels used:    1
 10028 ;; Hardware stack levels required when called:    3
 10029 ;; This function calls:
 10030 ;;		_Read_b_eep
 10031 ;;		_ECANSetOperationMode
 10032 ;;		__CANIDToRegs
 10033 ;; This function is called by:
 10034 ;;		_main
 10035 ;;		_init_app_eeprom
 10036 ;;		_vscp_writeAppReg
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           	psect	text26
 10041  001946                     __ptext26:
 10042                           	opt stack 0
 10043  001946                     _calculateSetFilterMask:
 10044                           	opt stack 23
 10045                           
 10046                           ;main.c: 2687: uint8_t i,j;
 10047                           ;main.c: 2688: uint8_t lastOID;
 10048                           ;main.c: 2689: uint32_t rowmask;
 10049                           ;main.c: 2690: uint32_t rowfilter;
 10050                           ;main.c: 2693: uint32_t mask = 0xffffffff;
 10051                           
 10052                           ; BSR set to: 0
 10053                           ;incstack = 0
 10054                           ;incstack = 0
 10055  001946  6836               	setf	calculateSetFilterMask@mask,c
 10056  001948  6837               	setf	calculateSetFilterMask@mask+1,c
 10057  00194A  6838               	setf	calculateSetFilterMask@mask+2,c
 10058  00194C  6839               	setf	calculateSetFilterMask@mask+3,c
 10059                           
 10060                           ;main.c: 2694: uint32_t filter = 0x00000000;
 10061  00194E  6A3A               	clrf	calculateSetFilterMask@filter,c
 10062  001950  6A3B               	clrf	calculateSetFilterMask@filter+1,c
 10063  001952  6A3C               	clrf	calculateSetFilterMask@filter+2,c
 10064  001954  6A3D               	clrf	calculateSetFilterMask@filter+3,c
 10065                           
 10066                           ;main.c: 2697: for ( i=0; i < 7; i++ ) {
 10067  001956  6A43               	clrf	calculateSetFilterMask@i,c
 10068  001958                     l7941:
 10069                           
 10070                           ;main.c: 2700: if ( Read_b_eep(0x43 + 8*i + 1) & 0x80 ) {
 10071  001958  5043               	movf	calculateSetFilterMask@i,w,c
 10072  00195A  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10073  00195C  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10074  00195E  90D8               	bcf	status,0,c
 10075  001960  3612               	rlcf	??_calculateSetFilterMask,f,c
 10076  001962  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10077  001964  90D8               	bcf	status,0,c
 10078  001966  3612               	rlcf	??_calculateSetFilterMask,f,c
 10079  001968  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10080  00196A  90D8               	bcf	status,0,c
 10081  00196C  3612               	rlcf	??_calculateSetFilterMask,f,c
 10082  00196E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10083  001970  0E44               	movlw	68
 10084  001972  2412               	addwf	??_calculateSetFilterMask,w,c
 10085  001974  6E08               	movwf	?_Read_b_eep,c
 10086  001976  0E00               	movlw	0
 10087  001978  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10088  00197A  6E09               	movwf	?_Read_b_eep+1,c
 10089  00197C  EC3D  F022         	call	_Read_b_eep	;wreg free
 10090  001980  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10091  001982  AE14               	btfss	??_calculateSetFilterMask+2,7,c
 10092  001984  D1E8               	goto	l7985
 10093                           
 10094                           ;main.c: 2709: rowmask =
 10095                           ;main.c: 2711: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 0x02 ) << 23 ) |
 10096                           ;main.c: 2713: ( (uint32_t)Read_b_eep(0x43 + 8*i + 2) << 16 ) |
 10097                           ;main.c: 2715: ( (uint32_t)Read_b_eep(0x43 + 8*i + 4) << 8 ) |
 10098                           ;main.c: 2719: 0xff;
 10099  001986  5043               	movf	calculateSetFilterMask@i,w,c
 10100  001988  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10101  00198A  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10102  00198C  90D8               	bcf	status,0,c
 10103  00198E  3612               	rlcf	??_calculateSetFilterMask,f,c
 10104  001990  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10105  001992  90D8               	bcf	status,0,c
 10106  001994  3612               	rlcf	??_calculateSetFilterMask,f,c
 10107  001996  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10108  001998  90D8               	bcf	status,0,c
 10109  00199A  3612               	rlcf	??_calculateSetFilterMask,f,c
 10110  00199C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10111  00199E  0E47               	movlw	71
 10112  0019A0  2412               	addwf	??_calculateSetFilterMask,w,c
 10113  0019A2  6E08               	movwf	?_Read_b_eep,c
 10114  0019A4  0E00               	movlw	0
 10115  0019A6  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10116  0019A8  6E09               	movwf	?_Read_b_eep+1,c
 10117  0019AA  EC3D  F022         	call	_Read_b_eep	;wreg free
 10118  0019AE  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10119  0019B0  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 10120  0019B4  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 10121  0019B6  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10122  0019B8  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 10123  0019BA  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 10124  0019BE  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 10125  0019C2  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 10126  0019C6  6A15               	clrf	??_calculateSetFilterMask+3,c
 10127  0019C8  5043               	movf	calculateSetFilterMask@i,w,c
 10128  0019CA  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 10129  0019CC  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 10130  0019CE  90D8               	bcf	status,0,c
 10131  0019D0  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10132  0019D2  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10133  0019D4  90D8               	bcf	status,0,c
 10134  0019D6  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10135  0019D8  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10136  0019DA  90D8               	bcf	status,0,c
 10137  0019DC  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10138  0019DE  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10139  0019E0  0E45               	movlw	69
 10140  0019E2  2419               	addwf	??_calculateSetFilterMask+7,w,c
 10141  0019E4  6E08               	movwf	?_Read_b_eep,c
 10142  0019E6  0E00               	movlw	0
 10143  0019E8  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 10144  0019EA  6E09               	movwf	?_Read_b_eep+1,c
 10145  0019EC  EC3D  F022         	call	_Read_b_eep	;wreg free
 10146  0019F0  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 10147  0019F2  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 10148  0019F6  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 10149  0019F8  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 10150  0019FA  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 10151  0019FC  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 10152  001A00  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 10153  001A04  6A1D               	clrf	??_calculateSetFilterMask+11,c
 10154  001A06  6A1C               	clrf	??_calculateSetFilterMask+10,c
 10155  001A08  5043               	movf	calculateSetFilterMask@i,w,c
 10156  001A0A  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 10157  001A0C  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 10158  001A0E  90D8               	bcf	status,0,c
 10159  001A10  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10160  001A12  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10161  001A14  90D8               	bcf	status,0,c
 10162  001A16  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10163  001A18  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10164  001A1A  90D8               	bcf	status,0,c
 10165  001A1C  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10166  001A1E  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10167  001A20  0E44               	movlw	68
 10168  001A22  2420               	addwf	??_calculateSetFilterMask+14,w,c
 10169  001A24  6E08               	movwf	?_Read_b_eep,c
 10170  001A26  0E00               	movlw	0
 10171  001A28  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 10172  001A2A  6E09               	movwf	?_Read_b_eep+1,c
 10173  001A2C  EC3D  F022         	call	_Read_b_eep	;wreg free
 10174  001A30  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 10175  001A32  0E02               	movlw	2
 10176  001A34  1622               	andwf	??_calculateSetFilterMask+16,f,c
 10177  001A36  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 10178  001A3A  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 10179  001A3C  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 10180  001A3E  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 10181  001A40  0E17               	movlw	23
 10182  001A42                     u8295:
 10183  001A42  90D8               	bcf	status,0,c
 10184  001A44  3623               	rlcf	??_calculateSetFilterMask+17,f,c
 10185  001A46  3624               	rlcf	??_calculateSetFilterMask+18,f,c
 10186  001A48  3625               	rlcf	??_calculateSetFilterMask+19,f,c
 10187  001A4A  3626               	rlcf	??_calculateSetFilterMask+20,f,c
 10188  001A4C  2EE8               	decfsz	wreg,f,c
 10189  001A4E  D7F9               	goto	u8295
 10190  001A50  501C               	movf	??_calculateSetFilterMask+10,w,c
 10191  001A52  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 10192  001A54  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 10193  001A56  501D               	movf	??_calculateSetFilterMask+11,w,c
 10194  001A58  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 10195  001A5A  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 10196  001A5C  501E               	movf	??_calculateSetFilterMask+12,w,c
 10197  001A5E  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 10198  001A60  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 10199  001A62  501F               	movf	??_calculateSetFilterMask+13,w,c
 10200  001A64  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 10201  001A66  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 10202  001A68  5015               	movf	??_calculateSetFilterMask+3,w,c
 10203  001A6A  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 10204  001A6C  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 10205  001A6E  5016               	movf	??_calculateSetFilterMask+4,w,c
 10206  001A70  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 10207  001A72  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 10208  001A74  5017               	movf	??_calculateSetFilterMask+5,w,c
 10209  001A76  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 10210  001A78  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 10211  001A7A  5018               	movf	??_calculateSetFilterMask+6,w,c
 10212  001A7C  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10213  001A7E  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10214  001A80  0EFF               	movlw	255
 10215  001A82  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10216  001A84  6E31               	movwf	calculateSetFilterMask@rowmask,c
 10217  001A86  502C               	movf	??_calculateSetFilterMask+26,w,c
 10218  001A88  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
 10219  001A8A  502D               	movf	??_calculateSetFilterMask+27,w,c
 10220  001A8C  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
 10221  001A8E  502E               	movf	??_calculateSetFilterMask+28,w,c
 10222  001A90  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
 10223                           
 10224                           ;main.c: 2725: rowfilter =
 10225                           ;main.c: 2727: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 0x01 ) << 24 ) |
 10226                           ;main.c: 2729: ( (uint32_t)Read_b_eep(0x43 + 8*i + 3) << 16 ) |
 10227                           ;main.c: 2731: ( (uint32_t)Read_b_eep(0x43 + 8*i + 5) << 8 ) |
 10228                           ;main.c: 2734: Read_b_eep(0x43 + 8*i);
 10229  001A92  5043               	movf	calculateSetFilterMask@i,w,c
 10230  001A94  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10231  001A96  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10232  001A98  90D8               	bcf	status,0,c
 10233  001A9A  3612               	rlcf	??_calculateSetFilterMask,f,c
 10234  001A9C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10235  001A9E  90D8               	bcf	status,0,c
 10236  001AA0  3612               	rlcf	??_calculateSetFilterMask,f,c
 10237  001AA2  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10238  001AA4  90D8               	bcf	status,0,c
 10239  001AA6  3612               	rlcf	??_calculateSetFilterMask,f,c
 10240  001AA8  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10241  001AAA  0E48               	movlw	72
 10242  001AAC  2412               	addwf	??_calculateSetFilterMask,w,c
 10243  001AAE  6E08               	movwf	?_Read_b_eep,c
 10244  001AB0  0E00               	movlw	0
 10245  001AB2  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10246  001AB4  6E09               	movwf	?_Read_b_eep+1,c
 10247  001AB6  EC3D  F022         	call	_Read_b_eep	;wreg free
 10248  001ABA  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10249  001ABC  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 10250  001AC0  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 10251  001AC2  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10252  001AC4  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 10253  001AC6  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 10254  001ACA  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 10255  001ACE  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 10256  001AD2  6A15               	clrf	??_calculateSetFilterMask+3,c
 10257  001AD4  5043               	movf	calculateSetFilterMask@i,w,c
 10258  001AD6  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 10259  001AD8  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 10260  001ADA  90D8               	bcf	status,0,c
 10261  001ADC  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10262  001ADE  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10263  001AE0  90D8               	bcf	status,0,c
 10264  001AE2  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10265  001AE4  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10266  001AE6  90D8               	bcf	status,0,c
 10267  001AE8  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10268  001AEA  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10269  001AEC  0E46               	movlw	70
 10270  001AEE  2419               	addwf	??_calculateSetFilterMask+7,w,c
 10271  001AF0  6E08               	movwf	?_Read_b_eep,c
 10272  001AF2  0E00               	movlw	0
 10273  001AF4  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 10274  001AF6  6E09               	movwf	?_Read_b_eep+1,c
 10275  001AF8  EC3D  F022         	call	_Read_b_eep	;wreg free
 10276  001AFC  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 10277  001AFE  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 10278  001B02  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 10279  001B04  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 10280  001B06  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 10281  001B08  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 10282  001B0C  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 10283  001B10  6A1D               	clrf	??_calculateSetFilterMask+11,c
 10284  001B12  6A1C               	clrf	??_calculateSetFilterMask+10,c
 10285  001B14  5043               	movf	calculateSetFilterMask@i,w,c
 10286  001B16  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 10287  001B18  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 10288  001B1A  90D8               	bcf	status,0,c
 10289  001B1C  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10290  001B1E  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10291  001B20  90D8               	bcf	status,0,c
 10292  001B22  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10293  001B24  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10294  001B26  90D8               	bcf	status,0,c
 10295  001B28  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10296  001B2A  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10297  001B2C  0E44               	movlw	68
 10298  001B2E  2420               	addwf	??_calculateSetFilterMask+14,w,c
 10299  001B30  6E08               	movwf	?_Read_b_eep,c
 10300  001B32  0E00               	movlw	0
 10301  001B34  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 10302  001B36  6E09               	movwf	?_Read_b_eep+1,c
 10303  001B38  EC3D  F022         	call	_Read_b_eep	;wreg free
 10304  001B3C  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 10305  001B3E  0E01               	movlw	1
 10306  001B40  1622               	andwf	??_calculateSetFilterMask+16,f,c
 10307  001B42  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 10308  001B46  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 10309  001B48  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 10310  001B4A  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 10311  001B4C  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
 10312  001B50  6A25               	clrf	??_calculateSetFilterMask+19,c
 10313  001B52  6A24               	clrf	??_calculateSetFilterMask+18,c
 10314  001B54  6A23               	clrf	??_calculateSetFilterMask+17,c
 10315  001B56  501C               	movf	??_calculateSetFilterMask+10,w,c
 10316  001B58  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 10317  001B5A  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 10318  001B5C  501D               	movf	??_calculateSetFilterMask+11,w,c
 10319  001B5E  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 10320  001B60  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 10321  001B62  501E               	movf	??_calculateSetFilterMask+12,w,c
 10322  001B64  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 10323  001B66  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 10324  001B68  501F               	movf	??_calculateSetFilterMask+13,w,c
 10325  001B6A  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 10326  001B6C  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 10327  001B6E  5015               	movf	??_calculateSetFilterMask+3,w,c
 10328  001B70  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 10329  001B72  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 10330  001B74  5016               	movf	??_calculateSetFilterMask+4,w,c
 10331  001B76  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 10332  001B78  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 10333  001B7A  5017               	movf	??_calculateSetFilterMask+5,w,c
 10334  001B7C  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 10335  001B7E  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 10336  001B80  5018               	movf	??_calculateSetFilterMask+6,w,c
 10337  001B82  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10338  001B84  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10339  001B86  5043               	movf	calculateSetFilterMask@i,w,c
 10340  001B88  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
 10341  001B8A  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
 10342  001B8C  90D8               	bcf	status,0,c
 10343  001B8E  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10344  001B90  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10345  001B92  90D8               	bcf	status,0,c
 10346  001B94  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10347  001B96  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10348  001B98  90D8               	bcf	status,0,c
 10349  001B9A  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10350  001B9C  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10351  001B9E  0E43               	movlw	67
 10352  001BA0  242F               	addwf	??_calculateSetFilterMask+29,w,c
 10353  001BA2  6E08               	movwf	?_Read_b_eep,c
 10354  001BA4  0E00               	movlw	0
 10355  001BA6  2030               	addwfc	??_calculateSetFilterMask+30,w,c
 10356  001BA8  6E09               	movwf	?_Read_b_eep+1,c
 10357  001BAA  EC3D  F022         	call	_Read_b_eep	;wreg free
 10358  001BAE  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10359  001BB0  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
 10360  001BB2  502C               	movf	??_calculateSetFilterMask+26,w,c
 10361  001BB4  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
 10362  001BB6  502D               	movf	??_calculateSetFilterMask+27,w,c
 10363  001BB8  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
 10364  001BBA  502E               	movf	??_calculateSetFilterMask+28,w,c
 10365  001BBC  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
 10366                           
 10367                           ;main.c: 2736: if ( 0 == i ) filter = rowfilter;
 10368  001BBE  6643               	tstfsz	calculateSetFilterMask@i,c
 10369  001BC0  D008               	goto	l7949
 10370  001BC2  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
 10371  001BC6  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
 10372  001BCA  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
 10373  001BCE  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
 10374  001BD2                     l7949:
 10375                           
 10376                           ;main.c: 2740: mask &= rowmask;
 10377  001BD2  5031               	movf	calculateSetFilterMask@rowmask,w,c
 10378  001BD4  1636               	andwf	calculateSetFilterMask@mask,f,c
 10379  001BD6  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
 10380  001BD8  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10381  001BDA  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
 10382  001BDC  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10383  001BDE  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
 10384  001BE0  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10385                           
 10386                           ;main.c: 2745: for ( j=0; j<32; j++ ) {
 10387  001BE2  6A42               	clrf	calculateSetFilterMask@j,c
 10388  001BE4                     l7957:
 10389                           
 10390                           ;main.c: 2747: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
 10391  001BE4  5042               	movf	calculateSetFilterMask@j,w,c
 10392  001BE6  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
 10393  001BEA  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
 10394  001BEE  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
 10395  001BF2  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
 10396  001BF6  2AE8               	incf	wreg,f,c
 10397  001BF8  D005               	goto	u8310
 10398  001BFA                     u8315:
 10399  001BFA  90D8               	bcf	status,0,c
 10400  001BFC  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10401  001BFE  3214               	rrcf	??_calculateSetFilterMask+2,f,c
 10402  001C00  3213               	rrcf	??_calculateSetFilterMask+1,f,c
 10403  001C02  3212               	rrcf	??_calculateSetFilterMask,f,c
 10404  001C04                     u8310:
 10405  001C04  2EE8               	decfsz	wreg,f,c
 10406  001C06  D7F9               	goto	u8315
 10407  001C08  0E01               	movlw	1
 10408  001C0A  1612               	andwf	??_calculateSetFilterMask,f,c
 10409  001C0C  5042               	movf	calculateSetFilterMask@j,w,c
 10410  001C0E  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
 10411  001C12  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
 10412  001C16  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
 10413  001C1A  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
 10414  001C1E  2AE8               	incf	wreg,f,c
 10415  001C20  D005               	goto	u8320
 10416  001C22                     u8325:
 10417  001C22  90D8               	bcf	status,0,c
 10418  001C24  3219               	rrcf	??_calculateSetFilterMask+7,f,c
 10419  001C26  3218               	rrcf	??_calculateSetFilterMask+6,f,c
 10420  001C28  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10421  001C2A  3216               	rrcf	??_calculateSetFilterMask+4,f,c
 10422  001C2C                     u8320:
 10423  001C2C  2EE8               	decfsz	wreg,f,c
 10424  001C2E  D7F9               	goto	u8325
 10425  001C30  5016               	movf	??_calculateSetFilterMask+4,w,c
 10426  001C32  0B01               	andlw	1
 10427  001C34  1812               	xorwf	??_calculateSetFilterMask,w,c
 10428  001C36  E01D               	bz	l7961
 10429                           
 10430                           ;main.c: 2748: mask &= ~(1<<j);
 10431  001C38  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
 10432  001C3C  0E01               	movlw	1
 10433  001C3E  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10434  001C40  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10435  001C42  2A12               	incf	??_calculateSetFilterMask,f,c
 10436  001C44  D003               	goto	u8344
 10437  001C46                     u8345:
 10438  001C46  90D8               	bcf	status,0,c
 10439  001C48  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10440  001C4A  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10441  001C4C                     u8344:
 10442  001C4C  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10443  001C4E  D7FB               	goto	u8345
 10444  001C50  1C13               	comf	??_calculateSetFilterMask+1,w,c
 10445  001C52  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10446  001C54  1C14               	comf	??_calculateSetFilterMask+2,w,c
 10447  001C56  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
 10448  001C58  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10449  001C5A  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10450  001C5C  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
 10451  001C5E  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
 10452  001C60  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10453  001C62  5015               	movf	??_calculateSetFilterMask+3,w,c
 10454  001C64  1636               	andwf	calculateSetFilterMask@mask,f,c
 10455  001C66  5016               	movf	??_calculateSetFilterMask+4,w,c
 10456  001C68  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10457  001C6A  5017               	movf	??_calculateSetFilterMask+5,w,c
 10458  001C6C  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10459  001C6E  5018               	movf	??_calculateSetFilterMask+6,w,c
 10460  001C70  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10461  001C72                     l7961:
 10462  001C72  2A42               	incf	calculateSetFilterMask@j,f,c
 10463  001C74  0E1F               	movlw	31
 10464  001C76  6442               	cpfsgt	calculateSetFilterMask@j,c
 10465  001C78  D7B5               	goto	l7957
 10466                           
 10467                           ;main.c: 2749: }
 10468                           ;main.c: 2750: }
 10469                           ;main.c: 2756: filter &= rowfilter;
 10470  001C7A  503E               	movf	calculateSetFilterMask@rowfilter,w,c
 10471  001C7C  163A               	andwf	calculateSetFilterMask@filter,f,c
 10472  001C7E  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
 10473  001C80  163B               	andwf	calculateSetFilterMask@filter+1,f,c
 10474  001C82  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
 10475  001C84  163C               	andwf	calculateSetFilterMask@filter+2,f,c
 10476  001C86  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
 10477  001C88  163D               	andwf	calculateSetFilterMask@filter+3,f,c
 10478                           
 10479                           ;main.c: 2764: }
 10480                           ;main.c: 2766: if ( i ) {
 10481                           
 10482                           ;main.c: 2759: if ( !Read_b_eep(0x43 + 8*i + 1) & 0x40 ) {
 10483  001C8A  5043               	movf	calculateSetFilterMask@i,w,c
 10484  001C8C  E04F               	bz	l7981
 10485                           
 10486                           ;main.c: 2769: for (j = 0; j < 8; j++) {
 10487  001C8E  6A42               	clrf	calculateSetFilterMask@j,c
 10488  001C90                     l7975:
 10489                           
 10490                           ;main.c: 2770: if ((lastOID >> i & 1)
 10491                           ;main.c: 2771: != (Read_b_eep(0x43 + 8*i) >> i & 1)) {
 10492  001C90  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10493  001C94  5043               	movf	calculateSetFilterMask@i,w,c
 10494  001C96  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10495  001C98  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10496  001C9A  90D8               	bcf	status,0,c
 10497  001C9C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10498  001C9E  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10499  001CA0  90D8               	bcf	status,0,c
 10500  001CA2  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10501  001CA4  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10502  001CA6  90D8               	bcf	status,0,c
 10503  001CA8  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10504  001CAA  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10505  001CAC  0E43               	movlw	67
 10506  001CAE  2413               	addwf	??_calculateSetFilterMask+1,w,c
 10507  001CB0  6E08               	movwf	?_Read_b_eep,c
 10508  001CB2  0E00               	movlw	0
 10509  001CB4  2014               	addwfc	??_calculateSetFilterMask+2,w,c
 10510  001CB6  6E09               	movwf	?_Read_b_eep+1,c
 10511  001CB8  EC3D  F022         	call	_Read_b_eep	;wreg free
 10512  001CBC  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10513  001CBE  2A12               	incf	??_calculateSetFilterMask,f,c
 10514  001CC0  D002               	goto	u8374
 10515  001CC2                     u8375:
 10516  001CC2  90D8               	bcf	status,0,c
 10517  001CC4  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10518  001CC6                     u8374:
 10519  001CC6  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10520  001CC8  D7FC               	goto	u8375
 10521  001CCA  0E01               	movlw	1
 10522  001CCC  1615               	andwf	??_calculateSetFilterMask+3,f,c
 10523  001CCE  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 10524  001CD2  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 10525  001CD6  2A16               	incf	??_calculateSetFilterMask+4,f,c
 10526  001CD8  D002               	goto	u8384
 10527  001CDA                     u8385:
 10528  001CDA  90D8               	bcf	status,0,c
 10529  001CDC  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10530  001CDE                     u8384:
 10531  001CDE  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 10532  001CE0  D7FC               	goto	u8385
 10533  001CE2  5017               	movf	??_calculateSetFilterMask+5,w,c
 10534  001CE4  0B01               	andlw	1
 10535  001CE6  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 10536  001CE8  E01D               	bz	l7979
 10537                           
 10538                           ;main.c: 2772: mask &= (1 << i);
 10539  001CEA  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10540  001CEE  0E01               	movlw	1
 10541  001CF0  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10542  001CF2  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10543  001CF4  2A12               	incf	??_calculateSetFilterMask,f,c
 10544  001CF6  D003               	goto	u8404
 10545  001CF8                     u8405:
 10546  001CF8  90D8               	bcf	status,0,c
 10547  001CFA  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10548  001CFC  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10549  001CFE                     u8404:
 10550  001CFE  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10551  001D00  D7FB               	goto	u8405
 10552  001D02  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 10553  001D06  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 10554  001D0A  0E00               	movlw	0
 10555  001D0C  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10556  001D0E  0EFF               	movlw	255
 10557  001D10  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 10558  001D12  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10559  001D14  5015               	movf	??_calculateSetFilterMask+3,w,c
 10560  001D16  1636               	andwf	calculateSetFilterMask@mask,f,c
 10561  001D18  5016               	movf	??_calculateSetFilterMask+4,w,c
 10562  001D1A  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10563  001D1C  5017               	movf	??_calculateSetFilterMask+5,w,c
 10564  001D1E  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10565  001D20  5018               	movf	??_calculateSetFilterMask+6,w,c
 10566  001D22  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10567  001D24                     l7979:
 10568  001D24  2A42               	incf	calculateSetFilterMask@j,f,c
 10569  001D26  0E07               	movlw	7
 10570  001D28  6442               	cpfsgt	calculateSetFilterMask@j,c
 10571  001D2A  D7B2               	goto	l7975
 10572  001D2C                     l7981:
 10573                           
 10574                           ;main.c: 2773: }
 10575                           ;main.c: 2774: }
 10576                           ;main.c: 2776: lastOID = Read_b_eep(0x43 + 8*i);
 10577  001D2C  5043               	movf	calculateSetFilterMask@i,w,c
 10578  001D2E  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10579  001D30  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10580  001D32  90D8               	bcf	status,0,c
 10581  001D34  3612               	rlcf	??_calculateSetFilterMask,f,c
 10582  001D36  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10583  001D38  90D8               	bcf	status,0,c
 10584  001D3A  3612               	rlcf	??_calculateSetFilterMask,f,c
 10585  001D3C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10586  001D3E  90D8               	bcf	status,0,c
 10587  001D40  3612               	rlcf	??_calculateSetFilterMask,f,c
 10588  001D42  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10589  001D44  0E43               	movlw	67
 10590  001D46  2412               	addwf	??_calculateSetFilterMask,w,c
 10591  001D48  6E08               	movwf	?_Read_b_eep,c
 10592  001D4A  0E00               	movlw	0
 10593  001D4C  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10594  001D4E  6E09               	movwf	?_Read_b_eep+1,c
 10595  001D50  EC3D  F022         	call	_Read_b_eep	;wreg free
 10596  001D54  6E35               	movwf	calculateSetFilterMask@lastOID,c
 10597  001D56                     l7985:
 10598  001D56  2A43               	incf	calculateSetFilterMask@i,f,c
 10599  001D58  0E06               	movlw	6
 10600  001D5A  6443               	cpfsgt	calculateSetFilterMask@i,c
 10601  001D5C  D5FD               	goto	l7941
 10602                           
 10603                           ;main.c: 2782: }
 10604                           ;main.c: 2784: }
 10605                           ;main.c: 2785: }
 10606                           ;main.c: 2788: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 10607  001D5E  0E80               	movlw	128
 10608  001D60  ECE9  F021         	call	_ECANSetOperationMode
 10609                           
 10610                           ;main.c: 2791: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 10611  001D64  010F               	movlb	15	; () banked
 10612  001D66  0E0F               	movlw	15	;volatile
 10613  001D68  6E09               	movwf	?__CANIDToRegs+1,c
 10614  001D6A  0E1C               	movlw	28	;volatile
 10615  001D6C  6E08               	movwf	?__CANIDToRegs,c
 10616  001D6E  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 10617  001D72  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 10618  001D76  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 10619  001D7A  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 10620  001D7E  0E01               	movlw	1
 10621  001D80  6E0E               	movwf	?__CANIDToRegs+6,c
 10622  001D82  EC3E  F01A         	call	__CANIDToRegs	;wreg free
 10623                           
 10624                           ;main.c: 2794: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 10625  001D86  010D               	movlb	13	; () banked
 10626  001D88  83D4               	bsf	212,1,b	;volatile
 10627                           
 10628                           ; BSR set to: 13
 10629  001D8A  010F               	movlb	15	; () banked
 10630  001D8C  0E0F               	movlw	15	;volatile
 10631  001D8E  6E09               	movwf	?__CANIDToRegs+1,c
 10632  001D90  0E04               	movlw	4	;volatile
 10633  001D92  6E08               	movwf	?__CANIDToRegs,c
 10634  001D94  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 10635  001D98  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 10636  001D9C  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 10637  001DA0  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 10638  001DA4  0E01               	movlw	1
 10639  001DA6  6E0E               	movwf	?__CANIDToRegs+6,c
 10640  001DA8  EC3E  F01A         	call	__CANIDToRegs	;wreg free
 10641                           
 10642                           ;main.c: 2797: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 10643  001DAC  0E00               	movlw	0
 10644  001DAE  EFE9  F021         	goto	_ECANSetOperationMode
 10645  001DB2                     __end_of_calculateSetFilterMask:
 10646                           	opt stack 0
 10647                           tblptru	equ	0xFF8
 10648                           prodh	equ	0xFF4
 10649                           prodl	equ	0xFF3
 10650                           postinc0	equ	0xFEE
 10651                           wreg	equ	0xFE8
 10652                           indf2	equ	0xFDF
 10653                           postinc2	equ	0xFDE
 10654                           postdec2	equ	0xFDD
 10655                           fsr2h	equ	0xFDA
 10656                           fsr2l	equ	0xFD9
 10657                           status	equ	0xFD8
 10658                           
 10659 ;; *************** function _vscp_readRegister *****************
 10660 ;; Defined at:
 10661 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 10662 ;; Parameters:    Size  Location     Type
 10663 ;;  reg             1    wreg     unsigned char 
 10664 ;; Auto vars:     Size  Location     Type
 10665 ;;  reg             1   28[COMRAM] unsigned char 
 10666 ;; Return value:  Size  Location     Type
 10667 ;;                  1    wreg      unsigned char 
 10668 ;; Registers used:
 10669 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10670 ;; Tracked objects:
 10671 ;;		On entry : F/0
 10672 ;;		On exit  : 0/0
 10673 ;;		Unchanged: 0/0
 10674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10675 ;;      Params:         0       0       0       0       0       0       0
 10676 ;;      Locals:         1       0       0       0       0       0       0
 10677 ;;      Temps:          0       0       0       0       0       0       0
 10678 ;;      Totals:         1       0       0       0       0       0       0
 10679 ;;Total ram usage:        1 bytes
 10680 ;; Hardware stack levels used:    1
 10681 ;; Hardware stack levels required when called:    5
 10682 ;; This function calls:
 10683 ;;		_vscp_readAppReg
 10684 ;;		_vscp_readStdReg
 10685 ;; This function is called by:
 10686 ;;		_vscp_handleProtocolEvent
 10687 ;; This function uses a non-reentrant model
 10688 ;;
 10689                           
 10690                           	psect	text27
 10691  0043A0                     __ptext27:
 10692                           	opt stack 0
 10693  0043A0                     _vscp_readRegister:
 10694                           	opt stack 24
 10695                           
 10696                           ;incstack = 0
 10697                           ;incstack = 0
 10698                           ;vscp_readRegister@reg stored from wreg
 10699  0043A0  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
 10700                           
 10701                           ; BSR set to: 0
 10702                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 10703  0043A4  0E7F               	movlw	127
 10704  0043A6  641D               	cpfsgt	vscp_readRegister@reg,c
 10705  0043A8  D004               	goto	l9753
 10706                           
 10707                           ; BSR set to: 0
 10708                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 10709  0043AA  501D               	movf	vscp_readRegister@reg,w,c
 10710  0043AC  EC57  F017         	call	_vscp_readStdReg
 10711  0043B0  D003               	goto	l1126
 10712  0043B2                     l9753:
 10713                           
 10714                           ; BSR set to: 0
 10715                           ;vscp_firmware.c: 565: else {
 10716                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 10717  0043B2  501D               	movf	vscp_readRegister@reg,w,c
 10718  0043B4  EC2D  F01E         	call	_vscp_readAppReg
 10719  0043B8                     l1126:
 10720  0043B8  0012               	return	
 10721  0043BA                     __end_of_vscp_readRegister:
 10722                           	opt stack 0
 10723                           tblptru	equ	0xFF8
 10724                           prodh	equ	0xFF4
 10725                           prodl	equ	0xFF3
 10726                           postinc0	equ	0xFEE
 10727                           wreg	equ	0xFE8
 10728                           indf2	equ	0xFDF
 10729                           postinc2	equ	0xFDE
 10730                           postdec2	equ	0xFDD
 10731                           fsr2h	equ	0xFDA
 10732                           fsr2l	equ	0xFD9
 10733                           status	equ	0xFD8
 10734                           
 10735 ;; *************** function _vscp_readStdReg *****************
 10736 ;; Defined at:
 10737 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 10738 ;; Parameters:    Size  Location     Type
 10739 ;;  reg             1    wreg     unsigned char 
 10740 ;; Auto vars:     Size  Location     Type
 10741 ;;  reg             1   27[COMRAM] unsigned char 
 10742 ;;  code            4   20[COMRAM] unsigned long 
 10743 ;;  idx             1   25[COMRAM] unsigned char 
 10744 ;;  code            4   16[COMRAM] unsigned long 
 10745 ;;  idx             1   24[COMRAM] unsigned char 
 10746 ;;  rv              1   26[COMRAM] unsigned char 
 10747 ;; Return value:  Size  Location     Type
 10748 ;;                  1    wreg      unsigned char 
 10749 ;; Registers used:
 10750 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10751 ;; Tracked objects:
 10752 ;;		On entry : F/0
 10753 ;;		On exit  : 0/0
 10754 ;;		Unchanged: 0/0
 10755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10756 ;;      Params:         0       0       0       0       0       0       0
 10757 ;;      Locals:        12       0       0       0       0       0       0
 10758 ;;      Temps:          5       0       0       0       0       0       0
 10759 ;;      Totals:        17       0       0       0       0       0       0
 10760 ;;Total ram usage:       17 bytes
 10761 ;; Hardware stack levels used:    1
 10762 ;; Hardware stack levels required when called:    4
 10763 ;; This function calls:
 10764 ;;		_vscp_getMajorVersion
 10765 ;;		_vscp_getMinorVersion
 10766 ;;		_vscp_getSubMinorVersion
 10767 ;;		_vscp_getGUID
 10768 ;;		_vscp_getMDF_URL
 10769 ;;		_vscp_getUserID
 10770 ;;		_vscp_getManufacturerId
 10771 ;;		_vscp_getBootLoaderAlgorithm
 10772 ;;		_vscp_getBufferSize
 10773 ;;		_vscp_getFamilyCode
 10774 ;;		_vscp_getFamilyType
 10775 ;;		_vscp_getRegisterPagesUsed
 10776 ;; This function is called by:
 10777 ;;		_vscp_readRegister
 10778 ;;		_vscp_handleProtocolEvent
 10779 ;; This function uses a non-reentrant model
 10780 ;;
 10781                           
 10782                           	psect	text28
 10783  002EAE                     __ptext28:
 10784                           	opt stack 0
 10785  002EAE                     _vscp_readStdReg:
 10786                           	opt stack 25
 10787                           
 10788                           ;incstack = 0
 10789                           ;incstack = 0
 10790                           ;vscp_readStdReg@reg stored from wreg
 10791  002EAE  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
 10792                           
 10793                           ; BSR set to: 0
 10794                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 10795  002EB2  6A1B               	clrf	vscp_readStdReg@rv,c
 10796                           
 10797                           ; BSR set to: 0
 10798                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 10799  002EB4  501C               	movf	vscp_readStdReg@reg,w,c
 10800  002EB6  0A80               	xorlw	128
 10801  002EB8  E104               	bnz	l9763
 10802                           
 10803                           ; BSR set to: 0
 10804                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 10805  002EBA  C055  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 10806                           
 10807                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 10808  002EBE  6A55               	clrf	_vscp_alarmstatus,c
 10809                           
 10810                           ;vscp_firmware.c: 584: }
 10811  002EC0  D0CB               	goto	l9851
 10812  002EC2                     l9763:
 10813                           
 10814                           ; BSR set to: 0
 10815                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 10816  002EC2  501C               	movf	vscp_readStdReg@reg,w,c
 10817  002EC4  0A81               	xorlw	129
 10818  002EC6  E102               	bnz	l9767
 10819                           
 10820                           ; BSR set to: 0
 10821                           ;vscp_firmware.c: 588: rv = 1;
 10822  002EC8  0E01               	movlw	1
 10823  002ECA  D081               	goto	L39
 10824  002ECC                     l9767:
 10825                           
 10826                           ; BSR set to: 0
 10827                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 10828  002ECC  501C               	movf	vscp_readStdReg@reg,w,c
 10829  002ECE  0A82               	xorlw	130
 10830  002ED0  E102               	bnz	l9771
 10831                           
 10832                           ; BSR set to: 0
 10833                           ;vscp_firmware.c: 594: rv = 5;
 10834  002ED2  0E05               	movlw	5
 10835  002ED4  D07C               	goto	L39
 10836  002ED6                     l9771:
 10837                           
 10838                           ; BSR set to: 0
 10839                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 10840  002ED6  501C               	movf	vscp_readStdReg@reg,w,c
 10841  002ED8  0A83               	xorlw	131
 10842  002EDA  E102               	bnz	l9775
 10843                           
 10844                           ; BSR set to: 0
 10845                           ;vscp_firmware.c: 600: rv = 0;
 10846  002EDC  6A1B               	clrf	vscp_readStdReg@rv,c
 10847                           
 10848                           ;vscp_firmware.c: 602: }
 10849  002EDE  D0BC               	goto	l9851
 10850  002EE0                     l9775:
 10851                           
 10852                           ; BSR set to: 0
 10853                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 10854  002EE0  501C               	movf	vscp_readStdReg@reg,w,c
 10855  002EE2  0A94               	xorlw	148
 10856  002EE4  E103               	bnz	l9779
 10857                           
 10858                           ; BSR set to: 0
 10859                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 10860  002EE6  EC7C  F022         	call	_vscp_getMajorVersion	;wreg free
 10861  002EEA  D071               	goto	L39
 10862  002EEC                     l9779:
 10863                           
 10864                           ; BSR set to: 0
 10865                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 10866  002EEC  501C               	movf	vscp_readStdReg@reg,w,c
 10867  002EEE  0A95               	xorlw	149
 10868  002EF0  E103               	bnz	l9783
 10869                           
 10870                           ; BSR set to: 0
 10871                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 10872  002EF2  EC7B  F022         	call	_vscp_getMinorVersion	;wreg free
 10873  002EF6  D06B               	goto	L39
 10874  002EF8                     l9783:
 10875                           
 10876                           ; BSR set to: 0
 10877                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 10878  002EF8  501C               	movf	vscp_readStdReg@reg,w,c
 10879  002EFA  0A96               	xorlw	150
 10880  002EFC  E103               	bnz	l9787
 10881                           
 10882                           ; BSR set to: 0
 10883                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 10884  002EFE  EC7A  F022         	call	_vscp_getSubMinorVersion	;wreg free
 10885  002F02  D065               	goto	L39
 10886  002F04                     l9787:
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 10890  002F04  0E89               	movlw	137
 10891  002F06  601C               	cpfslt	vscp_readStdReg@reg,c
 10892  002F08  D005               	goto	l9791
 10893                           
 10894                           ; BSR set to: 0
 10895                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 10896  002F0A  501C               	movf	vscp_readStdReg@reg,w,c
 10897  002F0C  0F7C               	addlw	124
 10898  002F0E  EC20  F022         	call	_vscp_getUserID
 10899  002F12  D05D               	goto	L39
 10900  002F14                     l9791:
 10901                           
 10902                           ; BSR set to: 0
 10903                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 10904                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 10905  002F14  0E88               	movlw	136
 10906  002F16  641C               	cpfsgt	vscp_readStdReg@reg,c
 10907  002F18  D008               	goto	l9797
 10908                           
 10909                           ; BSR set to: 0
 10910  002F1A  0E91               	movlw	145
 10911  002F1C  601C               	cpfslt	vscp_readStdReg@reg,c
 10912  002F1E  D005               	goto	l9797
 10913                           
 10914                           ; BSR set to: 0
 10915                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 10916  002F20  501C               	movf	vscp_readStdReg@reg,w,c
 10917  002F22  0F77               	addlw	119
 10918  002F24  EC16  F022         	call	_vscp_getManufacturerId
 10919  002F28  D052               	goto	L39
 10920  002F2A                     l9797:
 10921                           
 10922                           ; BSR set to: 0
 10923                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 10924  002F2A  501C               	movf	vscp_readStdReg@reg,w,c
 10925  002F2C  0A91               	xorlw	145
 10926  002F2E  E103               	bnz	l9801
 10927                           
 10928                           ; BSR set to: 0
 10929                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 10930  002F30  C091  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
 10931                           
 10932                           ;vscp_firmware.c: 639: }
 10933  002F34  D091               	goto	l9851
 10934  002F36                     l9801:
 10935                           
 10936                           ; BSR set to: 0
 10937                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 10938  002F36  501C               	movf	vscp_readStdReg@reg,w,c
 10939  002F38  0A93               	xorlw	147
 10940  002F3A  E103               	bnz	l9805
 10941                           
 10942                           ; BSR set to: 0
 10943                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 10944  002F3C  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
 10945                           
 10946                           ;vscp_firmware.c: 645: }
 10947  002F40  D08B               	goto	l9851
 10948  002F42                     l9805:
 10949                           
 10950                           ; BSR set to: 0
 10951                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 10952  002F42  501C               	movf	vscp_readStdReg@reg,w,c
 10953  002F44  0A92               	xorlw	146
 10954  002F46  E102               	bnz	l9809
 10955                           
 10956                           ; BSR set to: 0
 10957                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 10958  002F48  5053               	movf	_vscp_page_select+1,w,c
 10959  002F4A  D041               	goto	L39
 10960  002F4C                     l9809:
 10961                           
 10962                           ; BSR set to: 0
 10963                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 10964  002F4C  501C               	movf	vscp_readStdReg@reg,w,c
 10965  002F4E  0A97               	xorlw	151
 10966  002F50  E103               	bnz	l9813
 10967                           
 10968                           ; BSR set to: 0
 10969                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 10970  002F52  EC79  F022         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 10971  002F56  D03B               	goto	L39
 10972  002F58                     l9813:
 10973                           
 10974                           ; BSR set to: 0
 10975                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 10976  002F58  501C               	movf	vscp_readStdReg@reg,w,c
 10977  002F5A  0A98               	xorlw	152
 10978  002F5C  E103               	bnz	l9817
 10979                           
 10980                           ; BSR set to: 0
 10981                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 10982  002F5E  EC78  F022         	call	_vscp_getBufferSize	;wreg free
 10983  002F62  D035               	goto	L39
 10984  002F64                     l9817:
 10985                           
 10986                           ; BSR set to: 0
 10987                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 10988  002F64  501C               	movf	vscp_readStdReg@reg,w,c
 10989  002F66  0A99               	xorlw	153
 10990  002F68  E103               	bnz	l9821
 10991                           
 10992                           ; BSR set to: 0
 10993                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 10994  002F6A  EC77  F022         	call	_vscp_getRegisterPagesUsed	;wreg free
 10995  002F6E  D02F               	goto	L39
 10996  002F70                     l9821:
 10997                           
 10998                           ; BSR set to: 0
 10999                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 11000                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 11001  002F70  0E99               	movlw	153
 11002  002F72  641C               	cpfsgt	vscp_readStdReg@reg,c
 11003  002F74  D02E               	goto	l9831
 11004                           
 11005                           ; BSR set to: 0
 11006  002F76  0E9E               	movlw	158
 11007  002F78  601C               	cpfslt	vscp_readStdReg@reg,c
 11008  002F7A  D02B               	goto	l9831
 11009                           
 11010                           ; BSR set to: 0
 11011                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 11012  002F7C  EC5E  F022         	call	_vscp_getFamilyCode	;wreg free
 11013  002F80  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 11014  002F84  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 11015  002F88  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 11016  002F8C  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 11017                           
 11018                           ; BSR set to: 0
 11019                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 11020  002F90  501C               	movf	vscp_readStdReg@reg,w,c
 11021  002F92  0F66               	addlw	102
 11022  002F94  6E19               	movwf	vscp_readStdReg@idx,c
 11023                           
 11024                           ; BSR set to: 0
 11025                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 11026  002F96  5019               	movf	vscp_readStdReg@idx,w,c
 11027  002F98  0803               	sublw	3
 11028  002F9A  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 11029  002F9C  90D8               	bcf	status,0,c
 11030  002F9E  360C               	rlcf	??_vscp_readStdReg,f,c
 11031  002FA0  90D8               	bcf	status,0,c
 11032  002FA2  360C               	rlcf	??_vscp_readStdReg,f,c
 11033  002FA4  90D8               	bcf	status,0,c
 11034  002FA6  360C               	rlcf	??_vscp_readStdReg,f,c
 11035  002FA8  500C               	movf	??_vscp_readStdReg,w,c
 11036  002FAA  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 11037  002FAE  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 11038  002FB2  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 11039  002FB6  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 11040  002FBA  2AE8               	incf	wreg,f,c
 11041  002FBC  D005               	goto	u11290
 11042  002FBE                     u11295:
 11043  002FBE  90D8               	bcf	status,0,c
 11044  002FC0  3210               	rrcf	??_vscp_readStdReg+4,f,c
 11045  002FC2  320F               	rrcf	??_vscp_readStdReg+3,f,c
 11046  002FC4  320E               	rrcf	??_vscp_readStdReg+2,f,c
 11047  002FC6  320D               	rrcf	??_vscp_readStdReg+1,f,c
 11048  002FC8                     u11290:
 11049  002FC8  2EE8               	decfsz	wreg,f,c
 11050  002FCA  D7F9               	goto	u11295
 11051  002FCC  D030               	goto	L40
 11052  002FCE                     L39:
 11053  002FCE  6E1B               	movwf	vscp_readStdReg@rv,c
 11054                           
 11055                           ;vscp_firmware.c: 671: }
 11056  002FD0  D043               	goto	l9851
 11057  002FD2                     l9831:
 11058                           
 11059                           ; BSR set to: 0
 11060                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 11061                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 11062  002FD2  0E9D               	movlw	157
 11063  002FD4  641C               	cpfsgt	vscp_readStdReg@reg,c
 11064  002FD6  D02D               	goto	l9841
 11065                           
 11066                           ; BSR set to: 0
 11067  002FD8  0EA2               	movlw	162
 11068  002FDA  601C               	cpfslt	vscp_readStdReg@reg,c
 11069  002FDC  D02A               	goto	l9841
 11070                           
 11071                           ; BSR set to: 0
 11072                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 11073  002FDE  EC59  F022         	call	_vscp_getFamilyType	;wreg free
 11074  002FE2  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1267+3
 11075  002FE6  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1267+2
 11076  002FEA  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1267+1
 11077  002FEE  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1267
 11078                           
 11079                           ; BSR set to: 0
 11080                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 11081  002FF2  501C               	movf	vscp_readStdReg@reg,w,c
 11082  002FF4  0F62               	addlw	98
 11083  002FF6  6E1A               	movwf	vscp_readStdReg@idx_1268,c
 11084                           
 11085                           ; BSR set to: 0
 11086                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 11087  002FF8  501A               	movf	vscp_readStdReg@idx_1268,w,c
 11088  002FFA  0803               	sublw	3
 11089  002FFC  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 11090  002FFE  90D8               	bcf	status,0,c
 11091  003000  360C               	rlcf	??_vscp_readStdReg,f,c
 11092  003002  90D8               	bcf	status,0,c
 11093  003004  360C               	rlcf	??_vscp_readStdReg,f,c
 11094  003006  90D8               	bcf	status,0,c
 11095  003008  360C               	rlcf	??_vscp_readStdReg,f,c
 11096  00300A  500C               	movf	??_vscp_readStdReg,w,c
 11097  00300C  C015  F00D         	movff	vscp_readStdReg@code_1267,??_vscp_readStdReg+1
 11098  003010  C016  F00E         	movff	vscp_readStdReg@code_1267+1,??_vscp_readStdReg+2
 11099  003014  C017  F00F         	movff	vscp_readStdReg@code_1267+2,??_vscp_readStdReg+3
 11100  003018  C018  F010         	movff	vscp_readStdReg@code_1267+3,??_vscp_readStdReg+4
 11101  00301C  2AE8               	incf	wreg,f,c
 11102  00301E  D005               	goto	u11320
 11103  003020                     u11325:
 11104  003020  90D8               	bcf	status,0,c
 11105  003022  3210               	rrcf	??_vscp_readStdReg+4,f,c
 11106  003024  320F               	rrcf	??_vscp_readStdReg+3,f,c
 11107  003026  320E               	rrcf	??_vscp_readStdReg+2,f,c
 11108  003028  320D               	rrcf	??_vscp_readStdReg+1,f,c
 11109  00302A                     u11320:
 11110  00302A  2EE8               	decfsz	wreg,f,c
 11111  00302C  D7F9               	goto	u11325
 11112  00302E                     L40:
 11113  00302E  500D               	movf	??_vscp_readStdReg+1,w,c
 11114  003030  D7CE               	goto	L39
 11115  003032                     l9841:
 11116                           
 11117                           ; BSR set to: 0
 11118                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 11119                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 11120  003032  0ECF               	movlw	207
 11121  003034  641C               	cpfsgt	vscp_readStdReg@reg,c
 11122  003036  D008               	goto	l9847
 11123                           
 11124                           ; BSR set to: 0
 11125  003038  0EE0               	movlw	224
 11126  00303A  601C               	cpfslt	vscp_readStdReg@reg,c
 11127  00303C  D005               	goto	l9847
 11128                           
 11129                           ; BSR set to: 0
 11130                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 11131  00303E  501C               	movf	vscp_readStdReg@reg,w,c
 11132  003040  0F30               	addlw	48
 11133  003042  EC2A  F022         	call	_vscp_getGUID
 11134  003046  D7C3               	goto	L39
 11135  003048                     l9847:
 11136                           
 11137                           ; BSR set to: 0
 11138                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 11139  003048  0EDF               	movlw	223
 11140  00304A  641C               	cpfsgt	vscp_readStdReg@reg,c
 11141  00304C  D005               	goto	l9851
 11142                           
 11143                           ; BSR set to: 0
 11144                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 11145  00304E  501C               	movf	vscp_readStdReg@reg,w,c
 11146  003050  0F20               	addlw	32
 11147  003052  ECDD  F021         	call	_vscp_getMDF_URL
 11148  003056  D7BB               	goto	L39
 11149  003058                     l9851:
 11150                           
 11151                           ;vscp_firmware.c: 691: }
 11152                           ;vscp_firmware.c: 693: return rv;
 11153  003058  501B               	movf	vscp_readStdReg@rv,w,c
 11154  00305A  0012               	return	
 11155  00305C                     __end_of_vscp_readStdReg:
 11156                           	opt stack 0
 11157                           tblptru	equ	0xFF8
 11158                           prodh	equ	0xFF4
 11159                           prodl	equ	0xFF3
 11160                           postinc0	equ	0xFEE
 11161                           wreg	equ	0xFE8
 11162                           indf2	equ	0xFDF
 11163                           postinc2	equ	0xFDE
 11164                           postdec2	equ	0xFDD
 11165                           fsr2h	equ	0xFDA
 11166                           fsr2l	equ	0xFD9
 11167                           status	equ	0xFD8
 11168                           
 11169 ;; *************** function _vscp_getRegisterPagesUsed *****************
 11170 ;; Defined at:
 11171 ;;		line 2576 in file "../main.c"
 11172 ;; Parameters:    Size  Location     Type
 11173 ;;		None
 11174 ;; Auto vars:     Size  Location     Type
 11175 ;;		None
 11176 ;; Return value:  Size  Location     Type
 11177 ;;                  1    wreg      unsigned char 
 11178 ;; Registers used:
 11179 ;;		wreg
 11180 ;; Tracked objects:
 11181 ;;		On entry : F/0
 11182 ;;		On exit  : F/0
 11183 ;;		Unchanged: F/0
 11184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11185 ;;      Params:         0       0       0       0       0       0       0
 11186 ;;      Locals:         0       0       0       0       0       0       0
 11187 ;;      Temps:          0       0       0       0       0       0       0
 11188 ;;      Totals:         0       0       0       0       0       0       0
 11189 ;;Total ram usage:        0 bytes
 11190 ;; Hardware stack levels used:    1
 11191 ;; Hardware stack levels required when called:    2
 11192 ;; This function calls:
 11193 ;;		Nothing
 11194 ;; This function is called by:
 11195 ;;		_vscp_readStdReg
 11196 ;; This function uses a non-reentrant model
 11197 ;;
 11198                           
 11199                           	psect	text29
 11200  0044EE                     __ptext29:
 11201                           	opt stack 0
 11202  0044EE                     _vscp_getRegisterPagesUsed:
 11203                           	opt stack 26
 11204                           
 11205                           ; BSR set to: 0
 11206                           
 11207                           ; BSR set to: 0
 11208                           ;main.c: 2577: return 1;
 11209                           
 11210                           ;incstack = 0
 11211                           ;incstack = 0
 11212  0044EE  0C01               	retlw	1
 11213  0044F0                     __end_of_vscp_getRegisterPagesUsed:
 11214                           	opt stack 0
 11215                           tblptru	equ	0xFF8
 11216                           prodh	equ	0xFF4
 11217                           prodl	equ	0xFF3
 11218                           postinc0	equ	0xFEE
 11219                           wreg	equ	0xFE8
 11220                           indf2	equ	0xFDF
 11221                           postinc2	equ	0xFDE
 11222                           postdec2	equ	0xFDD
 11223                           fsr2h	equ	0xFDA
 11224                           fsr2l	equ	0xFD9
 11225                           status	equ	0xFD8
 11226                           
 11227 ;; *************** function _vscp_getFamilyType *****************
 11228 ;; Defined at:
 11229 ;;		line 2557 in file "../main.c"
 11230 ;; Parameters:    Size  Location     Type
 11231 ;;		None
 11232 ;; Auto vars:     Size  Location     Type
 11233 ;;		None
 11234 ;; Return value:  Size  Location     Type
 11235 ;;                  4    7[COMRAM] unsigned long 
 11236 ;; Registers used:
 11237 ;;		None
 11238 ;; Tracked objects:
 11239 ;;		On entry : F/0
 11240 ;;		On exit  : F/0
 11241 ;;		Unchanged: F/0
 11242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11243 ;;      Params:         4       0       0       0       0       0       0
 11244 ;;      Locals:         0       0       0       0       0       0       0
 11245 ;;      Temps:          0       0       0       0       0       0       0
 11246 ;;      Totals:         4       0       0       0       0       0       0
 11247 ;;Total ram usage:        4 bytes
 11248 ;; Hardware stack levels used:    1
 11249 ;; Hardware stack levels required when called:    2
 11250 ;; This function calls:
 11251 ;;		Nothing
 11252 ;; This function is called by:
 11253 ;;		_vscp_readStdReg
 11254 ;; This function uses a non-reentrant model
 11255 ;;
 11256                           
 11257                           	psect	text30
 11258  0044B2                     __ptext30:
 11259                           	opt stack 0
 11260  0044B2                     _vscp_getFamilyType:
 11261                           	opt stack 26
 11262                           
 11263                           ; BSR set to: 0
 11264                           ;main.c: 2558: return 0;
 11265                           
 11266                           ; BSR set to: 0
 11267                           ;incstack = 0
 11268                           ;incstack = 0
 11269  0044B2  6A08               	clrf	?_vscp_getFamilyType,c
 11270  0044B4  6A09               	clrf	?_vscp_getFamilyType+1,c
 11271  0044B6  6A0A               	clrf	?_vscp_getFamilyType+2,c
 11272  0044B8  6A0B               	clrf	?_vscp_getFamilyType+3,c
 11273                           
 11274                           ; BSR set to: 0
 11275  0044BA  0012               	return	
 11276  0044BC                     __end_of_vscp_getFamilyType:
 11277                           	opt stack 0
 11278                           tblptru	equ	0xFF8
 11279                           prodh	equ	0xFF4
 11280                           prodl	equ	0xFF3
 11281                           postinc0	equ	0xFEE
 11282                           wreg	equ	0xFE8
 11283                           indf2	equ	0xFDF
 11284                           postinc2	equ	0xFDE
 11285                           postdec2	equ	0xFDD
 11286                           fsr2h	equ	0xFDA
 11287                           fsr2l	equ	0xFD9
 11288                           status	equ	0xFD8
 11289                           
 11290 ;; *************** function _vscp_getFamilyCode *****************
 11291 ;; Defined at:
 11292 ;;		line 2548 in file "../main.c"
 11293 ;; Parameters:    Size  Location     Type
 11294 ;;		None
 11295 ;; Auto vars:     Size  Location     Type
 11296 ;;		None
 11297 ;; Return value:  Size  Location     Type
 11298 ;;                  4    7[COMRAM] unsigned long 
 11299 ;; Registers used:
 11300 ;;		None
 11301 ;; Tracked objects:
 11302 ;;		On entry : F/0
 11303 ;;		On exit  : F/0
 11304 ;;		Unchanged: F/0
 11305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11306 ;;      Params:         4       0       0       0       0       0       0
 11307 ;;      Locals:         0       0       0       0       0       0       0
 11308 ;;      Temps:          0       0       0       0       0       0       0
 11309 ;;      Totals:         4       0       0       0       0       0       0
 11310 ;;Total ram usage:        4 bytes
 11311 ;; Hardware stack levels used:    1
 11312 ;; Hardware stack levels required when called:    2
 11313 ;; This function calls:
 11314 ;;		Nothing
 11315 ;; This function is called by:
 11316 ;;		_vscp_readStdReg
 11317 ;; This function uses a non-reentrant model
 11318 ;;
 11319                           
 11320                           	psect	text31
 11321  0044BC                     __ptext31:
 11322                           	opt stack 0
 11323  0044BC                     _vscp_getFamilyCode:
 11324                           	opt stack 26
 11325                           
 11326                           ; BSR set to: 0
 11327                           ;main.c: 2549: return 0L;
 11328                           
 11329                           ; BSR set to: 0
 11330                           ;incstack = 0
 11331                           ;incstack = 0
 11332  0044BC  6A08               	clrf	?_vscp_getFamilyCode,c
 11333  0044BE  6A09               	clrf	?_vscp_getFamilyCode+1,c
 11334  0044C0  6A0A               	clrf	?_vscp_getFamilyCode+2,c
 11335  0044C2  6A0B               	clrf	?_vscp_getFamilyCode+3,c
 11336                           
 11337                           ; BSR set to: 0
 11338  0044C4  0012               	return	
 11339  0044C6                     __end_of_vscp_getFamilyCode:
 11340                           	opt stack 0
 11341                           tblptru	equ	0xFF8
 11342                           prodh	equ	0xFF4
 11343                           prodl	equ	0xFF3
 11344                           postinc0	equ	0xFEE
 11345                           wreg	equ	0xFE8
 11346                           indf2	equ	0xFDF
 11347                           postinc2	equ	0xFDE
 11348                           postdec2	equ	0xFDD
 11349                           fsr2h	equ	0xFDA
 11350                           fsr2l	equ	0xFD9
 11351                           status	equ	0xFD8
 11352                           
 11353 ;; *************** function _vscp_getBufferSize *****************
 11354 ;; Defined at:
 11355 ;;		line 2409 in file "../main.c"
 11356 ;; Parameters:    Size  Location     Type
 11357 ;;		None
 11358 ;; Auto vars:     Size  Location     Type
 11359 ;;		None
 11360 ;; Return value:  Size  Location     Type
 11361 ;;                  1    wreg      unsigned char 
 11362 ;; Registers used:
 11363 ;;		wreg
 11364 ;; Tracked objects:
 11365 ;;		On entry : F/0
 11366 ;;		On exit  : F/0
 11367 ;;		Unchanged: F/0
 11368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11369 ;;      Params:         0       0       0       0       0       0       0
 11370 ;;      Locals:         0       0       0       0       0       0       0
 11371 ;;      Temps:          0       0       0       0       0       0       0
 11372 ;;      Totals:         0       0       0       0       0       0       0
 11373 ;;Total ram usage:        0 bytes
 11374 ;; Hardware stack levels used:    1
 11375 ;; Hardware stack levels required when called:    2
 11376 ;; This function calls:
 11377 ;;		Nothing
 11378 ;; This function is called by:
 11379 ;;		_vscp_readStdReg
 11380 ;; This function uses a non-reentrant model
 11381 ;;
 11382                           
 11383                           	psect	text32
 11384  0044F0                     __ptext32:
 11385                           	opt stack 0
 11386  0044F0                     _vscp_getBufferSize:
 11387                           	opt stack 26
 11388                           
 11389                           ; BSR set to: 0
 11390                           
 11391                           ; BSR set to: 0
 11392                           ;main.c: 2410: return 8;
 11393                           
 11394                           ; BSR set to: 0
 11395                           ;incstack = 0
 11396                           ;incstack = 0
 11397  0044F0  0C08               	retlw	8
 11398  0044F2                     __end_of_vscp_getBufferSize:
 11399                           	opt stack 0
 11400                           tblptru	equ	0xFF8
 11401                           prodh	equ	0xFF4
 11402                           prodl	equ	0xFF3
 11403                           postinc0	equ	0xFEE
 11404                           wreg	equ	0xFE8
 11405                           indf2	equ	0xFDF
 11406                           postinc2	equ	0xFDE
 11407                           postdec2	equ	0xFDD
 11408                           fsr2h	equ	0xFDA
 11409                           fsr2l	equ	0xFD9
 11410                           status	equ	0xFD8
 11411                           
 11412 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 11413 ;; Defined at:
 11414 ;;		line 2400 in file "../main.c"
 11415 ;; Parameters:    Size  Location     Type
 11416 ;;		None
 11417 ;; Auto vars:     Size  Location     Type
 11418 ;;		None
 11419 ;; Return value:  Size  Location     Type
 11420 ;;                  1    wreg      unsigned char 
 11421 ;; Registers used:
 11422 ;;		wreg
 11423 ;; Tracked objects:
 11424 ;;		On entry : F/0
 11425 ;;		On exit  : F/0
 11426 ;;		Unchanged: F/0
 11427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11428 ;;      Params:         0       0       0       0       0       0       0
 11429 ;;      Locals:         0       0       0       0       0       0       0
 11430 ;;      Temps:          0       0       0       0       0       0       0
 11431 ;;      Totals:         0       0       0       0       0       0       0
 11432 ;;Total ram usage:        0 bytes
 11433 ;; Hardware stack levels used:    1
 11434 ;; Hardware stack levels required when called:    2
 11435 ;; This function calls:
 11436 ;;		Nothing
 11437 ;; This function is called by:
 11438 ;;		_vscp_readStdReg
 11439 ;; This function uses a non-reentrant model
 11440 ;;
 11441                           
 11442                           	psect	text33
 11443  0044F2                     __ptext33:
 11444                           	opt stack 0
 11445  0044F2                     _vscp_getBootLoaderAlgorithm:
 11446                           	opt stack 26
 11447                           
 11448                           ; BSR set to: 0
 11449                           
 11450                           ; BSR set to: 0
 11451                           ;main.c: 2401: return 0x01;
 11452                           
 11453                           ; BSR set to: 0
 11454                           ;incstack = 0
 11455                           ;incstack = 0
 11456  0044F2  0C01               	retlw	1
 11457  0044F4                     __end_of_vscp_getBootLoaderAlgorithm:
 11458                           	opt stack 0
 11459                           tblptru	equ	0xFF8
 11460                           prodh	equ	0xFF4
 11461                           prodl	equ	0xFF3
 11462                           postinc0	equ	0xFEE
 11463                           wreg	equ	0xFE8
 11464                           indf2	equ	0xFDF
 11465                           postinc2	equ	0xFDE
 11466                           postdec2	equ	0xFDD
 11467                           fsr2h	equ	0xFDA
 11468                           fsr2l	equ	0xFD9
 11469                           status	equ	0xFD8
 11470                           
 11471 ;; *************** function _vscp_getManufacturerId *****************
 11472 ;; Defined at:
 11473 ;;		line 2391 in file "../main.c"
 11474 ;; Parameters:    Size  Location     Type
 11475 ;;  idx             1    wreg     unsigned char 
 11476 ;; Auto vars:     Size  Location     Type
 11477 ;;  idx             1    9[COMRAM] unsigned char 
 11478 ;; Return value:  Size  Location     Type
 11479 ;;                  1    wreg      unsigned char 
 11480 ;; Registers used:
 11481 ;;		wreg, status,2, status,0, cstack
 11482 ;; Tracked objects:
 11483 ;;		On entry : 0/0
 11484 ;;		On exit  : 0/0
 11485 ;;		Unchanged: 0/0
 11486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11487 ;;      Params:         0       0       0       0       0       0       0
 11488 ;;      Locals:         1       0       0       0       0       0       0
 11489 ;;      Temps:          0       0       0       0       0       0       0
 11490 ;;      Totals:         1       0       0       0       0       0       0
 11491 ;;Total ram usage:        1 bytes
 11492 ;; Hardware stack levels used:    1
 11493 ;; Hardware stack levels required when called:    3
 11494 ;; This function calls:
 11495 ;;		_Read_b_eep
 11496 ;; This function is called by:
 11497 ;;		_vscp_readStdReg
 11498 ;;		_vscp_writeStdReg
 11499 ;; This function uses a non-reentrant model
 11500 ;;
 11501                           
 11502                           	psect	text34
 11503  00442C                     __ptext34:
 11504                           	opt stack 0
 11505  00442C                     _vscp_getManufacturerId:
 11506                           	opt stack 25
 11507                           
 11508                           ; BSR set to: 0
 11509                           ;incstack = 0
 11510                           ;incstack = 0
 11511                           ;vscp_getManufacturerId@idx stored from wreg
 11512  00442C  CFE8 F00A          	movff	wreg,vscp_getManufacturerId@idx
 11513                           
 11514                           ;main.c: 2392: return Read_b_eep(0x0B + idx);
 11515  004430  0E0B               	movlw	11
 11516  004432  240A               	addwf	vscp_getManufacturerId@idx,w,c
 11517  004434  6E08               	movwf	?_Read_b_eep,c
 11518  004436  6A09               	clrf	?_Read_b_eep+1,c
 11519  004438  0E00               	movlw	0
 11520  00443A  2209               	addwfc	?_Read_b_eep+1,f,c
 11521  00443C  EF3D  F022         	goto	_Read_b_eep	;wreg free
 11522  004440                     __end_of_vscp_getManufacturerId:
 11523                           	opt stack 0
 11524                           tblptru	equ	0xFF8
 11525                           prodh	equ	0xFF4
 11526                           prodl	equ	0xFF3
 11527                           postinc0	equ	0xFEE
 11528                           wreg	equ	0xFE8
 11529                           indf2	equ	0xFDF
 11530                           postinc2	equ	0xFDE
 11531                           postdec2	equ	0xFDD
 11532                           fsr2h	equ	0xFDA
 11533                           fsr2l	equ	0xFD9
 11534                           status	equ	0xFD8
 11535                           
 11536 ;; *************** function _vscp_getUserID *****************
 11537 ;; Defined at:
 11538 ;;		line 2371 in file "../main.c"
 11539 ;; Parameters:    Size  Location     Type
 11540 ;;  idx             1    wreg     unsigned char 
 11541 ;; Auto vars:     Size  Location     Type
 11542 ;;  idx             1    9[COMRAM] unsigned char 
 11543 ;; Return value:  Size  Location     Type
 11544 ;;                  1    wreg      unsigned char 
 11545 ;; Registers used:
 11546 ;;		wreg, status,2, status,0, cstack
 11547 ;; Tracked objects:
 11548 ;;		On entry : 0/0
 11549 ;;		On exit  : 0/0
 11550 ;;		Unchanged: 0/0
 11551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11552 ;;      Params:         0       0       0       0       0       0       0
 11553 ;;      Locals:         1       0       0       0       0       0       0
 11554 ;;      Temps:          0       0       0       0       0       0       0
 11555 ;;      Totals:         1       0       0       0       0       0       0
 11556 ;;Total ram usage:        1 bytes
 11557 ;; Hardware stack levels used:    1
 11558 ;; Hardware stack levels required when called:    3
 11559 ;; This function calls:
 11560 ;;		_Read_b_eep
 11561 ;; This function is called by:
 11562 ;;		_vscp_readStdReg
 11563 ;;		_vscp_writeStdReg
 11564 ;; This function uses a non-reentrant model
 11565 ;;
 11566                           
 11567                           	psect	text35
 11568  004440                     __ptext35:
 11569                           	opt stack 0
 11570  004440                     _vscp_getUserID:
 11571                           	opt stack 25
 11572                           
 11573                           ;incstack = 0
 11574                           ;incstack = 0
 11575                           ;vscp_getUserID@idx stored from wreg
 11576  004440  CFE8 F00A          	movff	wreg,vscp_getUserID@idx
 11577                           
 11578                           ;main.c: 2372: return Read_b_eep(0x06 + idx);
 11579  004444  0E06               	movlw	6
 11580  004446  240A               	addwf	vscp_getUserID@idx,w,c
 11581  004448  6E08               	movwf	?_Read_b_eep,c
 11582  00444A  6A09               	clrf	?_Read_b_eep+1,c
 11583  00444C  0E00               	movlw	0
 11584  00444E  2209               	addwfc	?_Read_b_eep+1,f,c
 11585  004450  EF3D  F022         	goto	_Read_b_eep	;wreg free
 11586  004454                     __end_of_vscp_getUserID:
 11587                           	opt stack 0
 11588                           tblptru	equ	0xFF8
 11589                           prodh	equ	0xFF4
 11590                           prodl	equ	0xFF3
 11591                           postinc0	equ	0xFEE
 11592                           wreg	equ	0xFE8
 11593                           indf2	equ	0xFDF
 11594                           postinc2	equ	0xFDE
 11595                           postdec2	equ	0xFDD
 11596                           fsr2h	equ	0xFDA
 11597                           fsr2l	equ	0xFD9
 11598                           status	equ	0xFD8
 11599                           
 11600 ;; *************** function _vscp_getMDF_URL *****************
 11601 ;; Defined at:
 11602 ;;		line 2362 in file "../main.c"
 11603 ;; Parameters:    Size  Location     Type
 11604 ;;  idx             1    wreg     unsigned char 
 11605 ;; Auto vars:     Size  Location     Type
 11606 ;;  idx             1    8[COMRAM] unsigned char 
 11607 ;; Return value:  Size  Location     Type
 11608 ;;                  1    wreg      unsigned char 
 11609 ;; Registers used:
 11610 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11611 ;; Tracked objects:
 11612 ;;		On entry : F/0
 11613 ;;		On exit  : F/0
 11614 ;;		Unchanged: F/0
 11615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11616 ;;      Params:         0       0       0       0       0       0       0
 11617 ;;      Locals:         1       0       0       0       0       0       0
 11618 ;;      Temps:          1       0       0       0       0       0       0
 11619 ;;      Totals:         2       0       0       0       0       0       0
 11620 ;;Total ram usage:        2 bytes
 11621 ;; Hardware stack levels used:    1
 11622 ;; Hardware stack levels required when called:    2
 11623 ;; This function calls:
 11624 ;;		Nothing
 11625 ;; This function is called by:
 11626 ;;		_vscp_readStdReg
 11627 ;;		_vscp_handleProtocolEvent
 11628 ;; This function uses a non-reentrant model
 11629 ;;
 11630                           
 11631                           	psect	text36
 11632  0043BA                     __ptext36:
 11633                           	opt stack 0
 11634  0043BA                     _vscp_getMDF_URL:
 11635                           	opt stack 26
 11636                           
 11637                           ;incstack = 0
 11638                           ;incstack = 0
 11639                           ;vscp_getMDF_URL@idx stored from wreg
 11640  0043BA  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 11641                           
 11642                           ; BSR set to: 0
 11643                           ;main.c: 2363: return vscp_deviceURL[ idx ];
 11644  0043BE  5009               	movf	vscp_getMDF_URL@idx,w,c
 11645  0043C0  0FBC               	addlw	low _vscp_deviceURL
 11646  0043C2  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 11647  0043C4  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 11648  0043C8  0E08               	movlw	high __smallconst
 11649  0043CA  6EF7               	movwf	tblptrh,c
 11650  0043CC  0008               	tblrd		*
 11651  0043CE  50F5               	movf	tablat,w,c
 11652                           
 11653                           ; BSR set to: 0
 11654  0043D0  0012               	return	
 11655  0043D2                     __end_of_vscp_getMDF_URL:
 11656                           	opt stack 0
 11657                           tblptru	equ	0xFF8
 11658                           tblptrh	equ	0xFF7
 11659                           tblptrl	equ	0xFF6
 11660                           tablat	equ	0xFF5
 11661                           prodh	equ	0xFF4
 11662                           prodl	equ	0xFF3
 11663                           postinc0	equ	0xFEE
 11664                           wreg	equ	0xFE8
 11665                           indf2	equ	0xFDF
 11666                           postinc2	equ	0xFDE
 11667                           postdec2	equ	0xFDD
 11668                           fsr2h	equ	0xFDA
 11669                           fsr2l	equ	0xFD9
 11670                           status	equ	0xFD8
 11671                           
 11672 ;; *************** function _vscp_getGUID *****************
 11673 ;; Defined at:
 11674 ;;		line 2350 in file "../main.c"
 11675 ;; Parameters:    Size  Location     Type
 11676 ;;  idx             1    wreg     unsigned char 
 11677 ;; Auto vars:     Size  Location     Type
 11678 ;;  idx             1    9[COMRAM] unsigned char 
 11679 ;; Return value:  Size  Location     Type
 11680 ;;                  1    wreg      unsigned char 
 11681 ;; Registers used:
 11682 ;;		wreg, status,2, status,0, cstack
 11683 ;; Tracked objects:
 11684 ;;		On entry : 0/0
 11685 ;;		On exit  : 0/0
 11686 ;;		Unchanged: 0/0
 11687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11688 ;;      Params:         0       0       0       0       0       0       0
 11689 ;;      Locals:         1       0       0       0       0       0       0
 11690 ;;      Temps:          0       0       0       0       0       0       0
 11691 ;;      Totals:         1       0       0       0       0       0       0
 11692 ;;Total ram usage:        1 bytes
 11693 ;; Hardware stack levels used:    1
 11694 ;; Hardware stack levels required when called:    3
 11695 ;; This function calls:
 11696 ;;		_Read_b_eep
 11697 ;; This function is called by:
 11698 ;;		_vscp_readStdReg
 11699 ;;		_vscp_writeStdReg
 11700 ;;		_vscp_handleProtocolEvent
 11701 ;; This function uses a non-reentrant model
 11702 ;;
 11703                           
 11704                           	psect	text37
 11705  004454                     __ptext37:
 11706                           	opt stack 0
 11707  004454                     _vscp_getGUID:
 11708                           	opt stack 25
 11709                           
 11710                           ; BSR set to: 0
 11711                           ;incstack = 0
 11712                           ;incstack = 0
 11713                           ;vscp_getGUID@idx stored from wreg
 11714  004454  CFE8 F00A          	movff	wreg,vscp_getGUID@idx
 11715                           
 11716                           ;main.c: 2351: return Read_b_eep(0x13 + idx);
 11717  004458  0E13               	movlw	19
 11718  00445A  240A               	addwf	vscp_getGUID@idx,w,c
 11719  00445C  6E08               	movwf	?_Read_b_eep,c
 11720  00445E  6A09               	clrf	?_Read_b_eep+1,c
 11721  004460  0E00               	movlw	0
 11722  004462  2209               	addwfc	?_Read_b_eep+1,f,c
 11723  004464  EF3D  F022         	goto	_Read_b_eep	;wreg free
 11724  004468                     __end_of_vscp_getGUID:
 11725                           	opt stack 0
 11726                           tblptru	equ	0xFF8
 11727                           tblptrh	equ	0xFF7
 11728                           tblptrl	equ	0xFF6
 11729                           tablat	equ	0xFF5
 11730                           prodh	equ	0xFF4
 11731                           prodl	equ	0xFF3
 11732                           postinc0	equ	0xFEE
 11733                           wreg	equ	0xFE8
 11734                           indf2	equ	0xFDF
 11735                           postinc2	equ	0xFDE
 11736                           postdec2	equ	0xFDD
 11737                           fsr2h	equ	0xFDA
 11738                           fsr2l	equ	0xFD9
 11739                           status	equ	0xFD8
 11740                           
 11741 ;; *************** function _vscp_getSubMinorVersion *****************
 11742 ;; Defined at:
 11743 ;;		line 2339 in file "../main.c"
 11744 ;; Parameters:    Size  Location     Type
 11745 ;;		None
 11746 ;; Auto vars:     Size  Location     Type
 11747 ;;		None
 11748 ;; Return value:  Size  Location     Type
 11749 ;;                  1    wreg      unsigned char 
 11750 ;; Registers used:
 11751 ;;		wreg
 11752 ;; Tracked objects:
 11753 ;;		On entry : F/0
 11754 ;;		On exit  : F/0
 11755 ;;		Unchanged: F/0
 11756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11757 ;;      Params:         0       0       0       0       0       0       0
 11758 ;;      Locals:         0       0       0       0       0       0       0
 11759 ;;      Temps:          0       0       0       0       0       0       0
 11760 ;;      Totals:         0       0       0       0       0       0       0
 11761 ;;Total ram usage:        0 bytes
 11762 ;; Hardware stack levels used:    1
 11763 ;; Hardware stack levels required when called:    2
 11764 ;; This function calls:
 11765 ;;		Nothing
 11766 ;; This function is called by:
 11767 ;;		_vscp_readStdReg
 11768 ;; This function uses a non-reentrant model
 11769 ;;
 11770                           
 11771                           	psect	text38
 11772  0044F4                     __ptext38:
 11773                           	opt stack 0
 11774  0044F4                     _vscp_getSubMinorVersion:
 11775                           	opt stack 26
 11776                           
 11777                           ; BSR set to: 0
 11778                           
 11779                           ; BSR set to: 0
 11780                           ;main.c: 2340: return 2;
 11781                           
 11782                           ;incstack = 0
 11783                           ;incstack = 0
 11784  0044F4  0C02               	retlw	2
 11785  0044F6                     __end_of_vscp_getSubMinorVersion:
 11786                           	opt stack 0
 11787                           tblptru	equ	0xFF8
 11788                           tblptrh	equ	0xFF7
 11789                           tblptrl	equ	0xFF6
 11790                           tablat	equ	0xFF5
 11791                           prodh	equ	0xFF4
 11792                           prodl	equ	0xFF3
 11793                           postinc0	equ	0xFEE
 11794                           wreg	equ	0xFE8
 11795                           indf2	equ	0xFDF
 11796                           postinc2	equ	0xFDE
 11797                           postdec2	equ	0xFDD
 11798                           fsr2h	equ	0xFDA
 11799                           fsr2l	equ	0xFD9
 11800                           status	equ	0xFD8
 11801                           
 11802 ;; *************** function _vscp_getMinorVersion *****************
 11803 ;; Defined at:
 11804 ;;		line 2330 in file "../main.c"
 11805 ;; Parameters:    Size  Location     Type
 11806 ;;		None
 11807 ;; Auto vars:     Size  Location     Type
 11808 ;;		None
 11809 ;; Return value:  Size  Location     Type
 11810 ;;                  1    wreg      unsigned char 
 11811 ;; Registers used:
 11812 ;;		wreg
 11813 ;; Tracked objects:
 11814 ;;		On entry : F/0
 11815 ;;		On exit  : F/0
 11816 ;;		Unchanged: F/0
 11817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11818 ;;      Params:         0       0       0       0       0       0       0
 11819 ;;      Locals:         0       0       0       0       0       0       0
 11820 ;;      Temps:          0       0       0       0       0       0       0
 11821 ;;      Totals:         0       0       0       0       0       0       0
 11822 ;;Total ram usage:        0 bytes
 11823 ;; Hardware stack levels used:    1
 11824 ;; Hardware stack levels required when called:    2
 11825 ;; This function calls:
 11826 ;;		Nothing
 11827 ;; This function is called by:
 11828 ;;		_vscp_readStdReg
 11829 ;; This function uses a non-reentrant model
 11830 ;;
 11831                           
 11832                           	psect	text39
 11833  0044F6                     __ptext39:
 11834                           	opt stack 0
 11835  0044F6                     _vscp_getMinorVersion:
 11836                           	opt stack 26
 11837                           
 11838                           ; BSR set to: 0
 11839                           
 11840                           ; BSR set to: 0
 11841                           ;main.c: 2331: return 1;
 11842                           
 11843                           ; BSR set to: 0
 11844                           ;incstack = 0
 11845                           ;incstack = 0
 11846  0044F6  0C01               	retlw	1
 11847  0044F8                     __end_of_vscp_getMinorVersion:
 11848                           	opt stack 0
 11849                           tblptru	equ	0xFF8
 11850                           tblptrh	equ	0xFF7
 11851                           tblptrl	equ	0xFF6
 11852                           tablat	equ	0xFF5
 11853                           prodh	equ	0xFF4
 11854                           prodl	equ	0xFF3
 11855                           postinc0	equ	0xFEE
 11856                           wreg	equ	0xFE8
 11857                           indf2	equ	0xFDF
 11858                           postinc2	equ	0xFDE
 11859                           postdec2	equ	0xFDD
 11860                           fsr2h	equ	0xFDA
 11861                           fsr2l	equ	0xFD9
 11862                           status	equ	0xFD8
 11863                           
 11864 ;; *************** function _vscp_getMajorVersion *****************
 11865 ;; Defined at:
 11866 ;;		line 2321 in file "../main.c"
 11867 ;; Parameters:    Size  Location     Type
 11868 ;;		None
 11869 ;; Auto vars:     Size  Location     Type
 11870 ;;		None
 11871 ;; Return value:  Size  Location     Type
 11872 ;;                  1    wreg      unsigned char 
 11873 ;; Registers used:
 11874 ;;		wreg
 11875 ;; Tracked objects:
 11876 ;;		On entry : F/0
 11877 ;;		On exit  : F/0
 11878 ;;		Unchanged: F/0
 11879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11880 ;;      Params:         0       0       0       0       0       0       0
 11881 ;;      Locals:         0       0       0       0       0       0       0
 11882 ;;      Temps:          0       0       0       0       0       0       0
 11883 ;;      Totals:         0       0       0       0       0       0       0
 11884 ;;Total ram usage:        0 bytes
 11885 ;; Hardware stack levels used:    1
 11886 ;; Hardware stack levels required when called:    2
 11887 ;; This function calls:
 11888 ;;		Nothing
 11889 ;; This function is called by:
 11890 ;;		_vscp_readStdReg
 11891 ;; This function uses a non-reentrant model
 11892 ;;
 11893                           
 11894                           	psect	text40
 11895  0044F8                     __ptext40:
 11896                           	opt stack 0
 11897  0044F8                     _vscp_getMajorVersion:
 11898                           	opt stack 26
 11899                           
 11900                           ; BSR set to: 0
 11901                           
 11902                           ; BSR set to: 0
 11903                           ;main.c: 2322: return 1;
 11904                           
 11905                           ; BSR set to: 0
 11906                           ;incstack = 0
 11907                           ;incstack = 0
 11908  0044F8  0C01               	retlw	1
 11909  0044FA                     __end_of_vscp_getMajorVersion:
 11910                           	opt stack 0
 11911                           tblptru	equ	0xFF8
 11912                           tblptrh	equ	0xFF7
 11913                           tblptrl	equ	0xFF6
 11914                           tablat	equ	0xFF5
 11915                           prodh	equ	0xFF4
 11916                           prodl	equ	0xFF3
 11917                           postinc0	equ	0xFEE
 11918                           wreg	equ	0xFE8
 11919                           indf2	equ	0xFDF
 11920                           postinc2	equ	0xFDE
 11921                           postdec2	equ	0xFDD
 11922                           fsr2h	equ	0xFDA
 11923                           fsr2l	equ	0xFD9
 11924                           status	equ	0xFD8
 11925                           
 11926 ;; *************** function _vscp_newNodeOnline *****************
 11927 ;; Defined at:
 11928 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 11929 ;; Parameters:    Size  Location     Type
 11930 ;;		None
 11931 ;; Auto vars:     Size  Location     Type
 11932 ;;		None
 11933 ;; Return value:  Size  Location     Type
 11934 ;;		None               void
 11935 ;; Registers used:
 11936 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11937 ;; Tracked objects:
 11938 ;;		On entry : F/0
 11939 ;;		On exit  : F/0
 11940 ;;		Unchanged: 0/0
 11941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11942 ;;      Params:         0       0       0       0       0       0       0
 11943 ;;      Locals:         0       0       0       0       0       0       0
 11944 ;;      Temps:          1       0       0       0       0       0       0
 11945 ;;      Totals:         1       0       0       0       0       0       0
 11946 ;;Total ram usage:        1 bytes
 11947 ;; Hardware stack levels used:    1
 11948 ;; Hardware stack levels required when called:    7
 11949 ;; This function calls:
 11950 ;;		_vscp_sendEvent
 11951 ;; This function is called by:
 11952 ;;		_vscp_handleProtocolEvent
 11953 ;; This function uses a non-reentrant model
 11954 ;;
 11955                           
 11956                           	psect	text41
 11957  00416C                     __ptext41:
 11958                           	opt stack 0
 11959  00416C                     _vscp_newNodeOnline:
 11960                           	opt stack 22
 11961                           
 11962                           ; BSR set to: 0
 11963                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 11964                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;incstack = 0
 11968                           ;incstack = 0
 11969  00416C  C096  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 11970  004170  0E0F               	movlw	15
 11971  004172  164C               	andwf	??_vscp_newNodeOnline,f,c
 11972  004174  044C               	decf	??_vscp_newNodeOnline,w,c
 11973  004176  E10E               	bnz	l1113
 11974                           
 11975                           ; BSR set to: 0
 11976  004178  5191               	movf	_vscp_nickname& (0+255),w,b
 11977  00417A  EE20  F09C         	lfsr	2,_vscp_imsg+6
 11978  00417E  62DF               	cpfseq	indf2,c
 11979  004180  D009               	goto	l1113
 11980                           
 11981                           ; BSR set to: 0
 11982                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 11983  004182  0E80               	movlw	128
 11984  004184  6FA4               	movwf	_vscp_omsg& (0+255),b
 11985                           
 11986                           ; BSR set to: 0
 11987                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 11988  004186  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 11989                           
 11990                           ; BSR set to: 0
 11991                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 11992  004188  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 11993  00418A  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 11994                           
 11995                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 11996  00418C  0E03               	movlw	3
 11997  00418E  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 11998                           
 11999                           ; BSR set to: 0
 12000                           ;vscp_firmware.c: 514: vscp_sendEvent();
 12001  004190  EC2D  F021         	call	_vscp_sendEvent	;wreg free
 12002  004194                     l1113:
 12003                           
 12004                           ; BSR set to: 0
 12005  004194  0012               	return	
 12006  004196                     __end_of_vscp_newNodeOnline:
 12007                           	opt stack 0
 12008                           tblptru	equ	0xFF8
 12009                           tblptrh	equ	0xFF7
 12010                           tblptrl	equ	0xFF6
 12011                           tablat	equ	0xFF5
 12012                           prodh	equ	0xFF4
 12013                           prodl	equ	0xFF3
 12014                           postinc0	equ	0xFEE
 12015                           wreg	equ	0xFE8
 12016                           indf2	equ	0xFDF
 12017                           postinc2	equ	0xFDE
 12018                           postdec2	equ	0xFDD
 12019                           fsr2h	equ	0xFDA
 12020                           fsr2l	equ	0xFD9
 12021                           status	equ	0xFD8
 12022                           
 12023 ;; *************** function _vscp_handleDropNickname *****************
 12024 ;; Defined at:
 12025 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 12026 ;; Parameters:    Size  Location     Type
 12027 ;;		None
 12028 ;; Auto vars:     Size  Location     Type
 12029 ;;  bytes           1   12[COMRAM] unsigned char 
 12030 ;; Return value:  Size  Location     Type
 12031 ;;		None               void
 12032 ;; Registers used:
 12033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12034 ;; Tracked objects:
 12035 ;;		On entry : F/0
 12036 ;;		On exit  : F/0
 12037 ;;		Unchanged: 0/0
 12038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12039 ;;      Params:         0       0       0       0       0       0       0
 12040 ;;      Locals:         1       0       0       0       0       0       0
 12041 ;;      Temps:          0       0       0       0       0       0       0
 12042 ;;      Totals:         1       0       0       0       0       0       0
 12043 ;;Total ram usage:        1 bytes
 12044 ;; Hardware stack levels used:    1
 12045 ;; Hardware stack levels required when called:    5
 12046 ;; This function calls:
 12047 ;;		_vscp_init
 12048 ;;		_vscp_writeNicknamePermanent
 12049 ;; This function is called by:
 12050 ;;		_vscp_handleProtocolEvent
 12051 ;; This function uses a non-reentrant model
 12052 ;;
 12053                           
 12054                           	psect	text42
 12055  0040E0                     __ptext42:
 12056                           	opt stack 0
 12057  0040E0                     _vscp_handleDropNickname:
 12058                           	opt stack 24
 12059                           
 12060                           ; BSR set to: 0
 12061                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 12062                           
 12063                           ; BSR set to: 0
 12064                           ;incstack = 0
 12065                           ;incstack = 0
 12066  0040E0  5196               	movf	_vscp_imsg& (0+255),w,b
 12067  0040E2  0B0F               	andlw	15
 12068  0040E4  6E0D               	movwf	vscp_handleDropNickname@bytes,c
 12069                           
 12070                           ; BSR set to: 0
 12071                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12072  0040E6  500D               	movf	vscp_handleDropNickname@bytes,w,c
 12073  0040E8  E012               	bz	l1109
 12074                           
 12075                           ; BSR set to: 0
 12076  0040EA  5191               	movf	_vscp_nickname& (0+255),w,b
 12077  0040EC  EE20  F09C         	lfsr	2,_vscp_imsg+6
 12078  0040F0  62DF               	cpfseq	indf2,c
 12079  0040F2  D00D               	goto	l1109
 12080                           
 12081                           ; BSR set to: 0
 12082                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 12083  0040F4  040D               	decf	vscp_handleDropNickname@bytes,w,c
 12084  0040F6  E005               	bz	l1108
 12085                           
 12086                           ; BSR set to: 0
 12087  0040F8  0E01               	movlw	1
 12088  0040FA  640D               	cpfsgt	vscp_handleDropNickname@bytes,c
 12089  0040FC  D008               	goto	l1109
 12090                           
 12091                           ; BSR set to: 0
 12092  0040FE  679D               	tstfsz	(_vscp_imsg+7)& (0+255),b
 12093  004100  D006               	goto	l1109
 12094  004102                     l1108:
 12095                           
 12096                           ; BSR set to: 0
 12097                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 12098  004102  6991               	setf	_vscp_nickname& (0+255),b
 12099                           
 12100                           ; BSR set to: 0
 12101                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 12102  004104  0EFF               	movlw	255
 12103  004106  EC0B  F022         	call	_vscp_writeNicknamePermanent
 12104                           
 12105                           ;vscp_firmware.c: 481: vscp_init();
 12106  00410A  ECF6  F01F         	call	_vscp_init	;wreg free
 12107  00410E                     l1109:
 12108                           
 12109                           ; BSR set to: 0
 12110  00410E  0012               	return	
 12111  004110                     __end_of_vscp_handleDropNickname:
 12112                           	opt stack 0
 12113                           tblptru	equ	0xFF8
 12114                           tblptrh	equ	0xFF7
 12115                           tblptrl	equ	0xFF6
 12116                           tablat	equ	0xFF5
 12117                           prodh	equ	0xFF4
 12118                           prodl	equ	0xFF3
 12119                           postinc0	equ	0xFEE
 12120                           wreg	equ	0xFE8
 12121                           indf2	equ	0xFDF
 12122                           postinc2	equ	0xFDE
 12123                           postdec2	equ	0xFDD
 12124                           fsr2h	equ	0xFDA
 12125                           fsr2l	equ	0xFD9
 12126                           status	equ	0xFD8
 12127                           
 12128 ;; *************** function _vscp_init *****************
 12129 ;; Defined at:
 12130 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 12131 ;; Parameters:    Size  Location     Type
 12132 ;;		None
 12133 ;; Auto vars:     Size  Location     Type
 12134 ;;		None
 12135 ;; Return value:  Size  Location     Type
 12136 ;;		None               void
 12137 ;; Registers used:
 12138 ;;		wreg, status,2, cstack
 12139 ;; Tracked objects:
 12140 ;;		On entry : 0/0
 12141 ;;		On exit  : F/0
 12142 ;;		Unchanged: 0/0
 12143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12144 ;;      Params:         0       0       0       0       0       0       0
 12145 ;;      Locals:         0       0       0       0       0       0       0
 12146 ;;      Temps:          0       0       0       0       0       0       0
 12147 ;;      Totals:         0       0       0       0       0       0       0
 12148 ;;Total ram usage:        0 bytes
 12149 ;; Hardware stack levels used:    1
 12150 ;; Hardware stack levels required when called:    4
 12151 ;; This function calls:
 12152 ;;		_vscp_readNicknamePermanent
 12153 ;; This function is called by:
 12154 ;;		_main
 12155 ;;		_vscp_handleDropNickname
 12156 ;;		_vscp_handleProtocolEvent
 12157 ;; This function uses a non-reentrant model
 12158 ;;
 12159                           
 12160                           	psect	text43
 12161  003FEC                     __ptext43:
 12162                           	opt stack 0
 12163  003FEC                     _vscp_init:
 12164                           	opt stack 24
 12165                           
 12166                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 12167                           
 12168                           ; BSR set to: 0
 12169                           ;incstack = 0
 12170                           ;incstack = 0
 12171  003FEC  0E02               	movlw	2
 12172  003FEE  6E56               	movwf	_vscp_initledfunc,c
 12173                           
 12174                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 12175  003FF0  EC63  F022         	call	_vscp_readNicknamePermanent	;wreg free
 12176  003FF4  0100               	movlb	0	; () banked
 12177  003FF6  6F91               	movwf	_vscp_nickname& (0+255),b
 12178                           
 12179                           ; BSR set to: 0
 12180                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 12181  003FF8  6791               	tstfsz	_vscp_nickname& (0+255),b
 12182  003FFA  D001               	goto	l1050
 12183                           
 12184                           ; BSR set to: 0
 12185  003FFC  6991               	setf	_vscp_nickname& (0+255),b
 12186  003FFE                     l1050:
 12187                           
 12188                           ; BSR set to: 0
 12189                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 12190  003FFE  6B96               	clrf	_vscp_imsg& (0+255),b
 12191                           
 12192                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 12193  004000  6B97               	clrf	(_vscp_imsg+1)& (0+255),b
 12194                           
 12195                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 12196  004002  6B98               	clrf	(_vscp_imsg+2)& (0+255),b
 12197  004004  6B99               	clrf	(_vscp_imsg+3)& (0+255),b
 12198                           
 12199                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 12200  004006  6B9A               	clrf	(_vscp_imsg+4)& (0+255),b
 12201                           
 12202                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 12203  004008  6BA4               	clrf	_vscp_omsg& (0+255),b
 12204                           
 12205                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 12206  00400A  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12207                           
 12208                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 12209  00400C  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12210  00400E  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12211                           
 12212                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 12213  004010  6BA8               	clrf	(_vscp_omsg+4)& (0+255),b
 12214                           
 12215                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 12216  004012  6A55               	clrf	_vscp_alarmstatus,c
 12217                           
 12218                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 12219  004014  6A57               	clrf	_vscp_probe_address,c
 12220                           
 12221                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 12222  004016  6B92               	clrf	_vscp_node_state& (0+255),b
 12223                           
 12224                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 12225  004018  6B93               	clrf	_vscp_node_substate& (0+255),b
 12226                           
 12227                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 12228  00401A  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12229                           
 12230                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 12231  00401C  6A52               	clrf	_vscp_page_select,c
 12232  00401E  6A53               	clrf	_vscp_page_select+1,c
 12233                           
 12234                           ;vscp_firmware.c: 153: vscp_timer = 0;
 12235  004020  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12236  004022  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12237                           
 12238                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 12239  004024  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
 12240  004026  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 12241                           
 12242                           ;vscp_firmware.c: 155: vscp_second = 0;
 12243  004028  6B95               	clrf	_vscp_second& (0+255),b
 12244                           
 12245                           ;vscp_firmware.c: 156: vscp_minute = 0;
 12246  00402A  6B90               	clrf	_vscp_minute& (0+255),b
 12247                           
 12248                           ;vscp_firmware.c: 157: vscp_hour = 0;
 12249  00402C  6B8E               	clrf	_vscp_hour& (0+255),b
 12250                           
 12251                           ; BSR set to: 0
 12252  00402E  0012               	return	
 12253  004030                     __end_of_vscp_init:
 12254                           	opt stack 0
 12255                           tblptru	equ	0xFF8
 12256                           tblptrh	equ	0xFF7
 12257                           tblptrl	equ	0xFF6
 12258                           tablat	equ	0xFF5
 12259                           prodh	equ	0xFF4
 12260                           prodl	equ	0xFF3
 12261                           postinc0	equ	0xFEE
 12262                           wreg	equ	0xFE8
 12263                           indf2	equ	0xFDF
 12264                           postinc2	equ	0xFDE
 12265                           postdec2	equ	0xFDD
 12266                           fsr2h	equ	0xFDA
 12267                           fsr2l	equ	0xFD9
 12268                           status	equ	0xFD8
 12269                           
 12270 ;; *************** function _vscp_readNicknamePermanent *****************
 12271 ;; Defined at:
 12272 ;;		line 852 in file "../main.c"
 12273 ;; Parameters:    Size  Location     Type
 12274 ;;		None
 12275 ;; Auto vars:     Size  Location     Type
 12276 ;;		None
 12277 ;; Return value:  Size  Location     Type
 12278 ;;                  1    wreg      unsigned char 
 12279 ;; Registers used:
 12280 ;;		wreg, status,2, cstack
 12281 ;; Tracked objects:
 12282 ;;		On entry : 0/0
 12283 ;;		On exit  : 0/0
 12284 ;;		Unchanged: 0/0
 12285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12286 ;;      Params:         0       0       0       0       0       0       0
 12287 ;;      Locals:         0       0       0       0       0       0       0
 12288 ;;      Temps:          0       0       0       0       0       0       0
 12289 ;;      Totals:         0       0       0       0       0       0       0
 12290 ;;Total ram usage:        0 bytes
 12291 ;; Hardware stack levels used:    1
 12292 ;; Hardware stack levels required when called:    3
 12293 ;; This function calls:
 12294 ;;		_Read_b_eep
 12295 ;; This function is called by:
 12296 ;;		_vscp_init
 12297 ;; This function uses a non-reentrant model
 12298 ;;
 12299                           
 12300                           	psect	text44
 12301  0044C6                     __ptext44:
 12302                           	opt stack 0
 12303  0044C6                     _vscp_readNicknamePermanent:
 12304                           	opt stack 24
 12305                           
 12306                           ;main.c: 853: return Read_b_eep(0x01);
 12307                           
 12308                           ; BSR set to: 0
 12309                           ;incstack = 0
 12310                           ;incstack = 0
 12311  0044C6  6A09               	clrf	?_Read_b_eep+1,c
 12312  0044C8  0E01               	movlw	1
 12313  0044CA  6E08               	movwf	?_Read_b_eep,c
 12314  0044CC  EF3D  F022         	goto	_Read_b_eep	;wreg free
 12315  0044D0                     __end_of_vscp_readNicknamePermanent:
 12316                           	opt stack 0
 12317                           tblptru	equ	0xFF8
 12318                           tblptrh	equ	0xFF7
 12319                           tblptrl	equ	0xFF6
 12320                           tablat	equ	0xFF5
 12321                           prodh	equ	0xFF4
 12322                           prodl	equ	0xFF3
 12323                           postinc0	equ	0xFEE
 12324                           wreg	equ	0xFE8
 12325                           indf2	equ	0xFDF
 12326                           postinc2	equ	0xFDE
 12327                           postdec2	equ	0xFDD
 12328                           fsr2h	equ	0xFDA
 12329                           fsr2l	equ	0xFD9
 12330                           status	equ	0xFD8
 12331                           
 12332 ;; *************** function _vscp_handleSetNickname *****************
 12333 ;; Defined at:
 12334 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 12335 ;; Parameters:    Size  Location     Type
 12336 ;;		None
 12337 ;; Auto vars:     Size  Location     Type
 12338 ;;		None
 12339 ;; Return value:  Size  Location     Type
 12340 ;;		None               void
 12341 ;; Registers used:
 12342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12343 ;; Tracked objects:
 12344 ;;		On entry : F/0
 12345 ;;		On exit  : 0/0
 12346 ;;		Unchanged: 0/0
 12347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12348 ;;      Params:         0       0       0       0       0       0       0
 12349 ;;      Locals:         0       0       0       0       0       0       0
 12350 ;;      Temps:          0       0       0       0       0       0       0
 12351 ;;      Totals:         0       0       0       0       0       0       0
 12352 ;;Total ram usage:        0 bytes
 12353 ;; Hardware stack levels used:    1
 12354 ;; Hardware stack levels required when called:    4
 12355 ;; This function calls:
 12356 ;;		_vscp_writeNicknamePermanent
 12357 ;;		_vscp_setSegmentCRC
 12358 ;; This function is called by:
 12359 ;;		_vscp_handleProtocolEvent
 12360 ;; This function uses a non-reentrant model
 12361 ;;
 12362                           
 12363                           	psect	text45
 12364  004280                     __ptext45:
 12365                           	opt stack 0
 12366  004280                     _vscp_handleSetNickname:
 12367                           	opt stack 25
 12368                           
 12369                           ; BSR set to: 0
 12370                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 12371                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12372                           
 12373                           ;incstack = 0
 12374                           ;incstack = 0
 12375  004280  5196               	movf	_vscp_imsg& (0+255),w,b
 12376  004282  0B0F               	andlw	15
 12377  004284  0A02               	xorlw	2
 12378  004286  E10D               	bnz	l1102
 12379                           
 12380                           ; BSR set to: 0
 12381  004288  5191               	movf	_vscp_nickname& (0+255),w,b
 12382  00428A  EE20  F09C         	lfsr	2,_vscp_imsg+6
 12383  00428E  62DF               	cpfseq	indf2,c
 12384  004290  D008               	goto	l1102
 12385                           
 12386                           ; BSR set to: 0
 12387                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 12388  004292  C09D  F091         	movff	_vscp_imsg+7,_vscp_nickname
 12389                           
 12390                           ; BSR set to: 0
 12391                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 12392  004296  5191               	movf	_vscp_nickname& (0+255),w,b
 12393  004298  EC0B  F022         	call	_vscp_writeNicknamePermanent
 12394                           
 12395                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 12396  00429C  0E40               	movlw	64
 12397  00429E  EC00  F022         	call	_vscp_setSegmentCRC
 12398  0042A2                     l1102:
 12399  0042A2  0012               	return	
 12400  0042A4                     __end_of_vscp_handleSetNickname:
 12401                           	opt stack 0
 12402                           tblptru	equ	0xFF8
 12403                           tblptrh	equ	0xFF7
 12404                           tblptrl	equ	0xFF6
 12405                           tablat	equ	0xFF5
 12406                           prodh	equ	0xFF4
 12407                           prodl	equ	0xFF3
 12408                           postinc0	equ	0xFEE
 12409                           wreg	equ	0xFE8
 12410                           indf2	equ	0xFDF
 12411                           postinc2	equ	0xFDE
 12412                           postdec2	equ	0xFDD
 12413                           fsr2h	equ	0xFDA
 12414                           fsr2l	equ	0xFD9
 12415                           status	equ	0xFD8
 12416                           
 12417 ;; *************** function _vscp_handleHeartbeat *****************
 12418 ;; Defined at:
 12419 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 12420 ;; Parameters:    Size  Location     Type
 12421 ;;		None
 12422 ;; Auto vars:     Size  Location     Type
 12423 ;;		None
 12424 ;; Return value:  Size  Location     Type
 12425 ;;		None               void
 12426 ;; Registers used:
 12427 ;;		wreg, status,2, status,0, cstack
 12428 ;; Tracked objects:
 12429 ;;		On entry : F/0
 12430 ;;		On exit  : 0/0
 12431 ;;		Unchanged: 0/0
 12432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12433 ;;      Params:         0       0       0       0       0       0       0
 12434 ;;      Locals:         0       0       0       0       0       0       0
 12435 ;;      Temps:          0       0       0       0       0       0       0
 12436 ;;      Totals:         0       0       0       0       0       0       0
 12437 ;;Total ram usage:        0 bytes
 12438 ;; Hardware stack levels used:    1
 12439 ;; Hardware stack levels required when called:    4
 12440 ;; This function calls:
 12441 ;;		_vscp_writeNicknamePermanent
 12442 ;;		_vscp_getSegmentCRC
 12443 ;;		_vscp_setSegmentCRC
 12444 ;; This function is called by:
 12445 ;;		_vscp_handleProtocolEvent
 12446 ;; This function uses a non-reentrant model
 12447 ;;
 12448                           
 12449                           	psect	text46
 12450  004030                     __ptext46:
 12451                           	opt stack 0
 12452  004030                     _vscp_handleHeartbeat:
 12453                           	opt stack 25
 12454                           
 12455                           ; BSR set to: 0
 12456                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 12457                           
 12458                           ;incstack = 0
 12459                           ;incstack = 0
 12460  004030  EC68  F022         	call	_vscp_getSegmentCRC	;wreg free
 12461  004034  0900               	iorlw	0
 12462  004036  E116               	bnz	l9717
 12463                           
 12464                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 12465                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 12466  004038  0100               	movlb	0	; () banked
 12467  00403A  5196               	movf	_vscp_imsg& (0+255),w,b
 12468  00403C  0B0F               	andlw	15
 12469  00403E  0A05               	xorlw	5
 12470  004040  E115               	bnz	l1098
 12471                           
 12472                           ; BSR set to: 0
 12473  004042  EC68  F022         	call	_vscp_getSegmentCRC	;wreg free
 12474  004046  0100               	movlb	0	; () banked
 12475  004048  199C               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 12476  00404A  E010               	bz	l1098
 12477                           
 12478                           ; BSR set to: 0
 12479                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12480  00404C  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12481  00404E  EC00  F022         	call	_vscp_setSegmentCRC
 12482                           
 12483                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 12484  004052  0100               	movlb	0	; () banked
 12485  004054  6991               	setf	_vscp_nickname& (0+255),b
 12486                           
 12487                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 12488  004056  0EFF               	movlw	255
 12489  004058  EC0B  F022         	call	_vscp_writeNicknamePermanent
 12490                           
 12491                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 12492  00405C  0E01               	movlw	1
 12493  00405E  0100               	movlb	0	; () banked
 12494  004060  6F92               	movwf	_vscp_node_state& (0+255),b
 12495  004062  D004               	goto	l1098
 12496  004064                     l9717:
 12497                           
 12498                           ;vscp_firmware.c: 411: else {
 12499                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12500  004064  0100               	movlb	0	; () banked
 12501  004066  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12502  004068  EC00  F022         	call	_vscp_setSegmentCRC
 12503  00406C                     l1098:
 12504  00406C  0012               	return	
 12505  00406E                     __end_of_vscp_handleHeartbeat:
 12506                           	opt stack 0
 12507                           tblptru	equ	0xFF8
 12508                           tblptrh	equ	0xFF7
 12509                           tblptrl	equ	0xFF6
 12510                           tablat	equ	0xFF5
 12511                           prodh	equ	0xFF4
 12512                           prodl	equ	0xFF3
 12513                           postinc0	equ	0xFEE
 12514                           wreg	equ	0xFE8
 12515                           indf2	equ	0xFDF
 12516                           postinc2	equ	0xFDE
 12517                           postdec2	equ	0xFDD
 12518                           fsr2h	equ	0xFDA
 12519                           fsr2l	equ	0xFD9
 12520                           status	equ	0xFD8
 12521                           
 12522 ;; *************** function _vscp_getMatrixInfo *****************
 12523 ;; Defined at:
 12524 ;;		line 2531 in file "../main.c"
 12525 ;; Parameters:    Size  Location     Type
 12526 ;;  pData           1    wreg     PTR unsigned char 
 12527 ;;		 -> vscp_omsg(13), 
 12528 ;; Auto vars:     Size  Location     Type
 12529 ;;  pData           1    0[COMRAM] PTR unsigned char 
 12530 ;;		 -> vscp_omsg(13), 
 12531 ;;  i               1    7[COMRAM] unsigned char 
 12532 ;; Return value:  Size  Location     Type
 12533 ;;		None               void
 12534 ;; Registers used:
 12535 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12536 ;; Tracked objects:
 12537 ;;		On entry : F/0
 12538 ;;		On exit  : F/0
 12539 ;;		Unchanged: 0/0
 12540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12541 ;;      Params:         0       0       0       0       0       0       0
 12542 ;;      Locals:         1       0       0       0       0       0       0
 12543 ;;      Temps:          0       0       0       0       0       0       0
 12544 ;;      Totals:         1       0       0       0       0       0       0
 12545 ;;Total ram usage:        1 bytes
 12546 ;; Hardware stack levels used:    1
 12547 ;; Hardware stack levels required when called:    2
 12548 ;; This function calls:
 12549 ;;		Nothing
 12550 ;; This function is called by:
 12551 ;;		_vscp_handleProtocolEvent
 12552 ;; This function uses a non-reentrant model
 12553 ;;
 12554                           
 12555                           	psect	text47
 12556  00430C                     __ptext47:
 12557                           	opt stack 0
 12558  00430C                     _vscp_getMatrixInfo:
 12559                           	opt stack 27
 12560                           
 12561                           ; BSR set to: 0
 12562                           ;main.c: 2532: uint8_t i;
 12563                           ;main.c: 2534: vscp_omsg.data[ 0 ] = 7;
 12564                           
 12565                           ;incstack = 0
 12566                           ;incstack = 0
 12567  00430C  0E07               	movlw	7
 12568  00430E  6FA9               	movwf	(_vscp_omsg+5)& (0+255),b
 12569                           
 12570                           ;main.c: 2535: vscp_omsg.data[ 1 ] = 72;
 12571  004310  0E48               	movlw	72
 12572  004312  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
 12573                           
 12574                           ;main.c: 2538: for ( i = 2; i < 8; i++ ) {
 12575  004314  0E02               	movlw	2
 12576  004316  6E08               	movwf	vscp_getMatrixInfo@i,c
 12577  004318                     l6907:
 12578                           
 12579                           ; BSR set to: 0
 12580                           ;main.c: 2539: vscp_omsg.data[ i ] = 0;
 12581  004318  5008               	movf	vscp_getMatrixInfo@i,w,c
 12582  00431A  0FA9               	addlw	low (_vscp_omsg+5)
 12583  00431C  6ED9               	movwf	fsr2l,c
 12584  00431E  6ADA               	clrf	fsr2h,c
 12585  004320  6ADF               	clrf	indf2,c
 12586                           
 12587                           ; BSR set to: 0
 12588  004322  2A08               	incf	vscp_getMatrixInfo@i,f,c
 12589                           
 12590                           ; BSR set to: 0
 12591  004324  0E07               	movlw	7
 12592  004326  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 12593  004328  D7F7               	goto	l6907
 12594                           
 12595                           ; BSR set to: 0
 12596  00432A  0C07               	retlw	7
 12597  00432C                     __end_of_vscp_getMatrixInfo:
 12598                           	opt stack 0
 12599                           tblptru	equ	0xFF8
 12600                           tblptrh	equ	0xFF7
 12601                           tblptrl	equ	0xFF6
 12602                           tablat	equ	0xFF5
 12603                           prodh	equ	0xFF4
 12604                           prodl	equ	0xFF3
 12605                           postinc0	equ	0xFEE
 12606                           wreg	equ	0xFE8
 12607                           indf2	equ	0xFDF
 12608                           postinc2	equ	0xFDE
 12609                           postdec2	equ	0xFDD
 12610                           fsr2h	equ	0xFDA
 12611                           fsr2l	equ	0xFD9
 12612                           status	equ	0xFD8
 12613                           
 12614 ;; *************** function _vscp_goBootloaderMode *****************
 12615 ;; Defined at:
 12616 ;;		line 2515 in file "../main.c"
 12617 ;; Parameters:    Size  Location     Type
 12618 ;;  algorithm       1    wreg     unsigned char 
 12619 ;; Auto vars:     Size  Location     Type
 12620 ;;  algorithm       1   11[COMRAM] unsigned char 
 12621 ;; Return value:  Size  Location     Type
 12622 ;;		None               void
 12623 ;; Registers used:
 12624 ;;		wreg, status,2, status,0, cstack
 12625 ;; Tracked objects:
 12626 ;;		On entry : F/0
 12627 ;;		On exit  : 0/0
 12628 ;;		Unchanged: 0/0
 12629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12630 ;;      Params:         0       0       0       0       0       0       0
 12631 ;;      Locals:         1       0       0       0       0       0       0
 12632 ;;      Temps:          0       0       0       0       0       0       0
 12633 ;;      Totals:         1       0       0       0       0       0       0
 12634 ;;Total ram usage:        1 bytes
 12635 ;; Hardware stack levels used:    1
 12636 ;; Hardware stack levels required when called:    3
 12637 ;; This function calls:
 12638 ;;		_Busy_eep
 12639 ;;		_Write_b_eep
 12640 ;; This function is called by:
 12641 ;;		_vscp_handleProtocolEvent
 12642 ;; This function uses a non-reentrant model
 12643 ;;
 12644                           
 12645                           	psect	text48
 12646  004384                     __ptext48:
 12647                           	opt stack 0
 12648  004384                     _vscp_goBootloaderMode:
 12649                           	opt stack 26
 12650                           
 12651                           ; BSR set to: 0
 12652                           ;incstack = 0
 12653                           ;incstack = 0
 12654                           ;vscp_goBootloaderMode@algorithm stored from wreg
 12655  004384  CFE8 F00C          	movff	wreg,vscp_goBootloaderMode@algorithm
 12656                           
 12657                           ; BSR set to: 0
 12658                           ;main.c: 2516: if ( 0x01 != algorithm ) return;
 12659  004388  040C               	decf	vscp_goBootloaderMode@algorithm,w,c
 12660  00438A  E109               	bnz	l640
 12661                           
 12662                           ; BSR set to: 0
 12663                           ;main.c: 2520: (Busy_eep(), Write_b_eep(0x00,0xff));
 12664  00438C  EC71  F022         	call	_Busy_eep	;wreg free
 12665  004390  6A09               	clrf	?_Write_b_eep+1,c
 12666  004392  6A08               	clrf	?_Write_b_eep,c
 12667  004394  0EFF               	movlw	255
 12668  004396  680A               	setf	?_Write_b_eep+2,c
 12669  004398  EC56  F020         	call	_Write_b_eep	;wreg free
 12670  00439C  00FF               	reset		;# 
 12671  00439E                     l640:
 12672  00439E  0012               	return	
 12673  0043A0                     __end_of_vscp_goBootloaderMode:
 12674                           	opt stack 0
 12675                           tblptru	equ	0xFF8
 12676                           tblptrh	equ	0xFF7
 12677                           tblptrl	equ	0xFF6
 12678                           tablat	equ	0xFF5
 12679                           prodh	equ	0xFF4
 12680                           prodl	equ	0xFF3
 12681                           postinc0	equ	0xFEE
 12682                           wreg	equ	0xFE8
 12683                           indf2	equ	0xFDF
 12684                           postinc2	equ	0xFDE
 12685                           postdec2	equ	0xFDD
 12686                           fsr2h	equ	0xFDA
 12687                           fsr2l	equ	0xFD9
 12688                           status	equ	0xFD8
 12689                           
 12690 ;; *************** function _vscp_handleProbeState *****************
 12691 ;; Defined at:
 12692 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 12693 ;; Parameters:    Size  Location     Type
 12694 ;;		None
 12695 ;; Auto vars:     Size  Location     Type
 12696 ;;		None
 12697 ;; Return value:  Size  Location     Type
 12698 ;;		None               void
 12699 ;; Registers used:
 12700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12701 ;; Tracked objects:
 12702 ;;		On entry : 0/0
 12703 ;;		On exit  : F/0
 12704 ;;		Unchanged: 0/0
 12705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12706 ;;      Params:         0       0       0       0       0       0       0
 12707 ;;      Locals:         0       0       0       0       0       0       0
 12708 ;;      Temps:          0       0       0       0       0       0       0
 12709 ;;      Totals:         0       0       0       0       0       0       0
 12710 ;;Total ram usage:        0 bytes
 12711 ;; Hardware stack levels used:    1
 12712 ;; Hardware stack levels required when called:    8
 12713 ;; This function calls:
 12714 ;;		_vscp_goActiveState
 12715 ;;		_vscp_writeNicknamePermanent
 12716 ;;		_vscp_sendEvent
 12717 ;;		_vscp_setSegmentCRC
 12718 ;; This function is called by:
 12719 ;;		_main
 12720 ;; This function uses a non-reentrant model
 12721 ;;
 12722                           
 12723                           	psect	text49
 12724  003AEA                     __ptext49:
 12725                           	opt stack 0
 12726  003AEA                     _vscp_handleProbeState:
 12727                           	opt stack 22
 12728                           
 12729                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 12730                           
 12731                           ;incstack = 0
 12732                           ;incstack = 0
 12733  003AEA  D053               	goto	l8089
 12734  003AEC                     l8019:
 12735                           
 12736                           ; BSR set to: 0
 12737                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 12738  003AEC  2857               	incf	_vscp_probe_address,w,c
 12739  003AEE  E010               	bz	l8035
 12740                           
 12741                           ; BSR set to: 0
 12742                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 12743  003AF0  0E81               	movlw	129
 12744  003AF2  6FA4               	movwf	_vscp_omsg& (0+255),b
 12745                           
 12746                           ; BSR set to: 0
 12747                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 12748  003AF4  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12749                           
 12750                           ; BSR set to: 0
 12751                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 12752  003AF6  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12753  003AF8  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12754                           
 12755                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 12756  003AFA  0E02               	movlw	2
 12757  003AFC  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12758                           
 12759                           ; BSR set to: 0
 12760                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 12761  003AFE  C057  F0A9         	movff	_vscp_probe_address,_vscp_omsg+5
 12762                           
 12763                           ; BSR set to: 0
 12764                           ;vscp_firmware.c: 216: vscp_sendEvent();
 12765  003B02  EC2D  F021         	call	_vscp_sendEvent	;wreg free
 12766                           
 12767                           ; BSR set to: 0
 12768                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 12769  003B06  0E01               	movlw	1
 12770  003B08  6F93               	movwf	_vscp_node_substate& (0+255),b
 12771  003B0A                     l8033:
 12772                           
 12773                           ; BSR set to: 0
 12774                           ;vscp_firmware.c: 219: vscp_timer = 0;
 12775  003B0A  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12776  003B0C  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12777                           
 12778                           ;vscp_firmware.c: 221: }
 12779  003B0E  D048               	goto	l1065
 12780  003B10                     l8035:
 12781                           
 12782                           ; BSR set to: 0
 12783                           ;vscp_firmware.c: 222: else {
 12784                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 12785  003B10  0E04               	movlw	4
 12786  003B12  6F92               	movwf	_vscp_node_state& (0+255),b
 12787                           
 12788                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 12789  003B14  0E81               	movlw	129
 12790  003B16  6FA4               	movwf	_vscp_omsg& (0+255),b
 12791                           
 12792                           ; BSR set to: 0
 12793                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 12794  003B18  69A9               	setf	(_vscp_omsg+5)& (0+255),b
 12795                           
 12796                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 12797  003B1A  0E07               	movlw	7
 12798  003B1C  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
 12799                           
 12800                           ; BSR set to: 0
 12801                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 12802  003B1E  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12803  003B20  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12804                           
 12805                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 12806  003B22  0E03               	movlw	3
 12807  003B24  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12808                           
 12809                           ; BSR set to: 0
 12810                           ;vscp_firmware.c: 235: vscp_sendEvent();
 12811  003B26  EC2D  F021         	call	_vscp_sendEvent	;wreg free
 12812  003B2A  D03A               	goto	l1065
 12813  003B2C                     l1066:
 12814                           
 12815                           ; BSR set to: 0
 12816                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 12817  003B2C  AF96               	btfss	_vscp_imsg& (0+255),7,b
 12818  003B2E  D00F               	goto	l8059
 12819                           
 12820                           ; BSR set to: 0
 12821                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 12822                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 12823  003B30  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
 12824  003B32  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 12825  003B34  E135               	bnz	l1065
 12826                           
 12827                           ; BSR set to: 0
 12828  003B36  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
 12829  003B38  0A03               	xorlw	3
 12830  003B3A  E132               	bnz	l1065
 12831                           
 12832                           ; BSR set to: 0
 12833                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 12834  003B3C  6657               	tstfsz	_vscp_probe_address,c
 12835  003B3E  D003               	goto	l8053
 12836                           
 12837                           ; BSR set to: 0
 12838                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 12839  003B40  0E02               	movlw	2
 12840  003B42  6F92               	movwf	_vscp_node_state& (0+255),b
 12841  003B44  D7E2               	goto	l8033
 12842  003B46                     l8053:
 12843                           
 12844                           ; BSR set to: 0
 12845                           ;vscp_firmware.c: 257: else {
 12846                           ;vscp_firmware.c: 260: vscp_probe_address++;
 12847  003B46  2A57               	incf	_vscp_probe_address,f,c
 12848                           
 12849                           ; BSR set to: 0
 12850                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 12851  003B48  6B93               	clrf	_vscp_node_substate& (0+255),b
 12852  003B4A                     l8057:
 12853                           
 12854                           ; BSR set to: 0
 12855                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 12856  003B4A  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12857  003B4C  D029               	goto	l1065
 12858  003B4E                     l8059:
 12859                           
 12860                           ; BSR set to: 0
 12861                           ;vscp_firmware.c: 267: else {
 12862                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 12863  003B4E  0EE9               	movlw	233
 12864  003B50  5D86               	subwf	_vscp_timer& (0+255),w,b	;volatile
 12865  003B52  0E03               	movlw	3
 12866  003B54  5987               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 12867  003B56  E324               	bnc	l1065
 12868                           
 12869                           ; BSR set to: 0
 12870                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 12871  003B58  2B94               	incf	_vscp_probe_cnt& (0+255),f,b
 12872                           
 12873                           ; BSR set to: 0
 12874                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 12875  003B5A  0E02               	movlw	2
 12876  003B5C  6594               	cpfsgt	_vscp_probe_cnt& (0+255),b
 12877  003B5E  D017               	goto	l1073
 12878                           
 12879                           ; BSR set to: 0
 12880                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 12881  003B60  6657               	tstfsz	_vscp_probe_address,c
 12882  003B62  D005               	goto	l1074
 12883                           
 12884                           ; BSR set to: 0
 12885                           ;vscp_firmware.c: 279: vscp_probe_address++;
 12886  003B64  2A57               	incf	_vscp_probe_address,f,c
 12887                           
 12888                           ; BSR set to: 0
 12889                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 12890  003B66  6B93               	clrf	_vscp_node_substate& (0+255),b
 12891                           
 12892                           ; BSR set to: 0
 12893                           ;vscp_firmware.c: 281: vscp_timer = 0;
 12894  003B68  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12895  003B6A  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12896  003B6C  D7EE               	goto	l8057
 12897  003B6E                     l1074:
 12898                           
 12899                           ; BSR set to: 0
 12900                           ;vscp_firmware.c: 285: else {
 12901                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 12902  003B6E  C057  F091         	movff	_vscp_probe_address,_vscp_nickname
 12903                           
 12904                           ; BSR set to: 0
 12905                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 12906  003B72  0E03               	movlw	3
 12907  003B74  6F92               	movwf	_vscp_node_state& (0+255),b
 12908                           
 12909                           ; BSR set to: 0
 12910                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 12911  003B76  6B93               	clrf	_vscp_node_substate& (0+255),b
 12912                           
 12913                           ; BSR set to: 0
 12914                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 12915  003B78  5191               	movf	_vscp_nickname& (0+255),w,b
 12916  003B7A  EC0B  F022         	call	_vscp_writeNicknamePermanent
 12917                           
 12918                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 12919  003B7E  0E40               	movlw	64
 12920  003B80  EC00  F022         	call	_vscp_setSegmentCRC
 12921                           
 12922                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 12923  003B84  0100               	movlb	0	; () banked
 12924  003B86  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12925                           
 12926                           ; BSR set to: 0
 12927                           ;vscp_firmware.c: 296: vscp_goActiveState();
 12928  003B88  EC96  F021         	call	_vscp_goActiveState	;wreg free
 12929  003B8C  D009               	goto	l1065
 12930  003B8E                     l1073:
 12931                           
 12932                           ; BSR set to: 0
 12933                           ;vscp_firmware.c: 300: else {
 12934                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 12935  003B8E  6B93               	clrf	_vscp_node_substate& (0+255),b
 12936  003B90  D007               	goto	l1065
 12937  003B92                     l8089:
 12938  003B92  0100               	movlb	0	; () banked
 12939  003B94  5193               	movf	_vscp_node_substate& (0+255),w,b
 12940                           
 12941                           ; Switch size 1, requested type "speed"
 12942                           ; Number of cases is 3, Range of values is 0 to 2
 12943                           ; switch strategies available:
 12944                           ; Name         Instructions Cycles
 12945                           ; simple_byte           10     6 (average)
 12946                           ;	Chosen strategy is simple_byte
 12947  003B96  E0AA               	bz	l8019
 12948  003B98  0A01               	xorlw	1	; case 1
 12949  003B9A  E0C8               	bz	l1066
 12950  003B9C  0A03               	xorlw	3	; case 2
 12951  003B9E  E1F7               	bnz	l1073
 12952  003BA0                     l1065:
 12953                           
 12954                           ; BSR set to: 0
 12955                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 12956  003BA0  6B96               	clrf	_vscp_imsg& (0+255),b
 12957                           
 12958                           ; BSR set to: 0
 12959  003BA2  0012               	return	
 12960  003BA4                     __end_of_vscp_handleProbeState:
 12961                           	opt stack 0
 12962                           tblptru	equ	0xFF8
 12963                           tblptrh	equ	0xFF7
 12964                           tblptrl	equ	0xFF6
 12965                           tablat	equ	0xFF5
 12966                           prodh	equ	0xFF4
 12967                           prodl	equ	0xFF3
 12968                           postinc0	equ	0xFEE
 12969                           wreg	equ	0xFE8
 12970                           indf2	equ	0xFDF
 12971                           postinc2	equ	0xFDE
 12972                           postdec2	equ	0xFDD
 12973                           fsr2h	equ	0xFDA
 12974                           fsr2l	equ	0xFD9
 12975                           status	equ	0xFD8
 12976                           
 12977 ;; *************** function _vscp_goActiveState *****************
 12978 ;; Defined at:
 12979 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 12980 ;; Parameters:    Size  Location     Type
 12981 ;;		None
 12982 ;; Auto vars:     Size  Location     Type
 12983 ;;		None
 12984 ;; Return value:  Size  Location     Type
 12985 ;;		None               void
 12986 ;; Registers used:
 12987 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12988 ;; Tracked objects:
 12989 ;;		On entry : 0/0
 12990 ;;		On exit  : F/0
 12991 ;;		Unchanged: 0/0
 12992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12993 ;;      Params:         0       0       0       0       0       0       0
 12994 ;;      Locals:         0       0       0       0       0       0       0
 12995 ;;      Temps:          0       0       0       0       0       0       0
 12996 ;;      Totals:         0       0       0       0       0       0       0
 12997 ;;Total ram usage:        0 bytes
 12998 ;; Hardware stack levels used:    1
 12999 ;; Hardware stack levels required when called:    7
 13000 ;; This function calls:
 13001 ;;		_vscp_sendEvent
 13002 ;; This function is called by:
 13003 ;;		_main
 13004 ;;		_vscp_handleProbeState
 13005 ;; This function uses a non-reentrant model
 13006 ;;
 13007                           
 13008                           	psect	text50
 13009  00432C                     __ptext50:
 13010                           	opt stack 0
 13011  00432C                     _vscp_goActiveState:
 13012                           	opt stack 22
 13013                           
 13014                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 13015                           
 13016                           ; BSR set to: 0
 13017                           ;incstack = 0
 13018                           ;incstack = 0
 13019  00432C  0E81               	movlw	129
 13020  00432E  0100               	movlb	0	; () banked
 13021  004330  6FA4               	movwf	_vscp_omsg& (0+255),b
 13022                           
 13023                           ; BSR set to: 0
 13024                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 13025  004332  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 13026                           
 13027                           ; BSR set to: 0
 13028                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 13029  004334  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 13030  004336  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 13031                           
 13032                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 13033  004338  0E02               	movlw	2
 13034  00433A  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 13035                           
 13036                           ; BSR set to: 0
 13037                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 13038  00433C  C091  F0A9         	movff	_vscp_nickname,_vscp_omsg+5
 13039                           
 13040                           ; BSR set to: 0
 13041                           ;vscp_firmware.c: 366: vscp_sendEvent();
 13042  004340  EC2D  F021         	call	_vscp_sendEvent	;wreg free
 13043                           
 13044                           ; BSR set to: 0
 13045                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 13046  004344  0E01               	movlw	1
 13047  004346  6E56               	movwf	_vscp_initledfunc,c
 13048                           
 13049                           ; BSR set to: 0
 13050  004348  0C01               	retlw	1
 13051  00434A                     __end_of_vscp_goActiveState:
 13052                           	opt stack 0
 13053                           tblptru	equ	0xFF8
 13054                           tblptrh	equ	0xFF7
 13055                           tblptrl	equ	0xFF6
 13056                           tablat	equ	0xFF5
 13057                           prodh	equ	0xFF4
 13058                           prodl	equ	0xFF3
 13059                           postinc0	equ	0xFEE
 13060                           wreg	equ	0xFE8
 13061                           indf2	equ	0xFDF
 13062                           postinc2	equ	0xFDE
 13063                           postdec2	equ	0xFDD
 13064                           fsr2h	equ	0xFDA
 13065                           fsr2l	equ	0xFD9
 13066                           status	equ	0xFD8
 13067                           
 13068 ;; *************** function _vscp_sendEvent *****************
 13069 ;; Defined at:
 13070 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 13071 ;; Parameters:    Size  Location     Type
 13072 ;;		None
 13073 ;; Auto vars:     Size  Location     Type
 13074 ;;  rv              1    0        unsigned char 
 13075 ;; Return value:  Size  Location     Type
 13076 ;;                  1    wreg      unsigned char 
 13077 ;; Registers used:
 13078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13079 ;; Tracked objects:
 13080 ;;		On entry : F/0
 13081 ;;		On exit  : F/0
 13082 ;;		Unchanged: 0/0
 13083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13084 ;;      Params:         0       0       0       0       0       0       0
 13085 ;;      Locals:         1       0       0       0       0       0       0
 13086 ;;      Temps:          0       0       0       0       0       0       0
 13087 ;;      Totals:         1       0       0       0       0       0       0
 13088 ;;Total ram usage:        1 bytes
 13089 ;; Hardware stack levels used:    1
 13090 ;; Hardware stack levels required when called:    6
 13091 ;; This function calls:
 13092 ;;		_sendVSCPFrame
 13093 ;; This function is called by:
 13094 ;;		_vscp_handleProbeState
 13095 ;;		_vscp_goActiveState
 13096 ;;		_vscp_sendHeartBeat
 13097 ;;		_vscp_newNodeOnline
 13098 ;;		_vscp_handleProtocolEvent
 13099 ;; This function uses a non-reentrant model
 13100 ;;
 13101                           
 13102                           	psect	text51
 13103  00425A                     __ptext51:
 13104                           	opt stack 0
 13105  00425A                     _vscp_sendEvent:
 13106                           	opt stack 22
 13107                           
 13108                           ; BSR set to: 0
 13109                           
 13110                           ; BSR set to: 0
 13111                           ;incstack = 0
 13112                           ;incstack = 0
 13113  00425A  C0A6  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 13114  00425E  C0A7  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 13115  004262  C0A8  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 13116  004266  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 13117  00426A  C0A5  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 13118  00426E  51A4               	movf	_vscp_omsg& (0+255),w,b
 13119  004270  0B0F               	andlw	15
 13120  004272  6E44               	movwf	?_sendVSCPFrame+5,c
 13121  004274  0E00               	movlw	high (_vscp_omsg+5)
 13122  004276  6E46               	movwf	?_sendVSCPFrame+7,c
 13123  004278  0EA9               	movlw	low (_vscp_omsg+5)
 13124  00427A  6E45               	movwf	?_sendVSCPFrame+6,c
 13125  00427C  EFD2  F01D         	goto	_sendVSCPFrame	;wreg free
 13126  004280                     __end_of_vscp_sendEvent:
 13127                           	opt stack 0
 13128                           tblptru	equ	0xFF8
 13129                           tblptrh	equ	0xFF7
 13130                           tblptrl	equ	0xFF6
 13131                           tablat	equ	0xFF5
 13132                           prodh	equ	0xFF4
 13133                           prodl	equ	0xFF3
 13134                           postinc0	equ	0xFEE
 13135                           wreg	equ	0xFE8
 13136                           indf2	equ	0xFDF
 13137                           postinc2	equ	0xFDE
 13138                           postdec2	equ	0xFDD
 13139                           fsr2h	equ	0xFDA
 13140                           fsr2l	equ	0xFD9
 13141                           status	equ	0xFD8
 13142                           
 13143 ;; *************** function _sendVSCPFrame *****************
 13144 ;; Defined at:
 13145 ;;		line 2590 in file "../main.c"
 13146 ;; Parameters:    Size  Location     Type
 13147 ;;  vscpclass       2   62[COMRAM] unsigned short 
 13148 ;;  vscptype        1   64[COMRAM] unsigned char 
 13149 ;;  nodeid          1   65[COMRAM] unsigned char 
 13150 ;;  priority        1   66[COMRAM] unsigned char 
 13151 ;;  size            1   67[COMRAM] unsigned char 
 13152 ;;  pData           2   68[COMRAM] PTR unsigned char 
 13153 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13154 ;; Auto vars:     Size  Location     Type
 13155 ;;  id              4   70[COMRAM] unsigned long 
 13156 ;; Return value:  Size  Location     Type
 13157 ;;                  1    wreg      unsigned char 
 13158 ;; Registers used:
 13159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13160 ;; Tracked objects:
 13161 ;;		On entry : F/0
 13162 ;;		On exit  : F/0
 13163 ;;		Unchanged: 0/0
 13164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13165 ;;      Params:         8       0       0       0       0       0       0
 13166 ;;      Locals:         4       0       0       0       0       0       0
 13167 ;;      Temps:          0      20       0       0       0       0       0
 13168 ;;      Totals:        12      20       0       0       0       0       0
 13169 ;;Total ram usage:       32 bytes
 13170 ;; Hardware stack levels used:    1
 13171 ;; Hardware stack levels required when called:    5
 13172 ;; This function calls:
 13173 ;;		_sendCANFrame
 13174 ;; This function is called by:
 13175 ;;		_SendInformationEvent
 13176 ;;		_vscp_sendEvent
 13177 ;; This function uses a non-reentrant model
 13178 ;;
 13179                           
 13180                           	psect	text52
 13181  003BA4                     __ptext52:
 13182                           	opt stack 0
 13183  003BA4                     _sendVSCPFrame:
 13184                           	opt stack 23
 13185                           
 13186                           ; BSR set to: 0
 13187                           ;main.c: 2591: uint32_t id = ( (uint32_t)priority << 26 ) |
 13188                           ;main.c: 2592: ( (uint32_t)vscpclass << 16 ) |
 13189                           ;main.c: 2593: ( (uint32_t)vscptype << 8 ) |
 13190                           ;main.c: 2594: nodeid;
 13191                           
 13192                           ; BSR set to: 0
 13193                           ;incstack = 0
 13194                           ;incstack = 0
 13195  003BA4  C041  F0B1         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 13196  003BA8  6BB2               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 13197  003BAA  6BB3               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 13198  003BAC  6BB4               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 13199  003BAE  C0B3  F0B4         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 13200  003BB2  C0B2  F0B3         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 13201  003BB6  C0B1  F0B2         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 13202  003BBA  6BB1               	clrf	??_sendVSCPFrame& (0+255),b
 13203  003BBC  503F               	movf	sendVSCPFrame@vscpclass,w,c
 13204  003BBE  6FB5               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 13205  003BC0  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 13206  003BC2  6FB6               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 13207  003BC4  6BB7               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 13208  003BC6  6BB8               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 13209  003BC8  C0B6  F0B8         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 13210  003BCC  C0B5  F0B7         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 13211  003BD0  6BB6               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 13212  003BD2  6BB5               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 13213  003BD4  C043  F0B9         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 13214  003BD8  6BBA               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 13215  003BDA  6BBB               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 13216  003BDC  6BBC               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 13217  003BDE  0E1A               	movlw	26
 13218  003BE0                     u10215:
 13219  003BE0  90D8               	bcf	status,0,c
 13220  003BE2  37B9               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 13221  003BE4  37BA               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 13222  003BE6  37BB               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 13223  003BE8  37BC               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 13224  003BEA  2EE8               	decfsz	wreg,f,c
 13225  003BEC  D7F9               	goto	u10215
 13226  003BEE  51B5               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 13227  003BF0  11B9               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 13228  003BF2  6FBD               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 13229  003BF4  51B6               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 13230  003BF6  11BA               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 13231  003BF8  6FBE               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 13232  003BFA  51B7               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 13233  003BFC  11BB               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 13234  003BFE  6FBF               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 13235  003C00  51B8               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 13236  003C02  11BC               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 13237  003C04  6FC0               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 13238  003C06  51B1               	movf	??_sendVSCPFrame& (0+255),w,b
 13239  003C08  11BD               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 13240  003C0A  6FC1               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 13241  003C0C  51B2               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 13242  003C0E  11BE               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 13243  003C10  6FC2               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 13244  003C12  51B3               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 13245  003C14  11BF               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 13246  003C16  6FC3               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 13247  003C18  51B4               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 13248  003C1A  11C0               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 13249  003C1C  6FC4               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 13250  003C1E  5042               	movf	sendVSCPFrame@nodeid,w,c
 13251  003C20  11C1               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 13252  003C22  6E47               	movwf	sendVSCPFrame@id,c
 13253  003C24  51C2               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 13254  003C26  6E48               	movwf	sendVSCPFrame@id+1,c
 13255  003C28  51C3               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 13256  003C2A  6E49               	movwf	sendVSCPFrame@id+2,c
 13257  003C2C  51C4               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 13258  003C2E  6E4A               	movwf	sendVSCPFrame@id+3,c
 13259                           
 13260                           ; BSR set to: 0
 13261                           ;main.c: 2596: if ( !sendCANFrame( id, size, pData ) ) {
 13262  003C30  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 13263  003C34  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 13264  003C38  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 13265  003C3C  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 13266  003C40  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 13267  003C44  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 13268  003C48  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 13269  003C4C  EC88  F020         	call	_sendCANFrame	;wreg free
 13270  003C50  0900               	iorlw	0
 13271                           
 13272                           ; BSR set to: 0
 13273                           ;main.c: 2597: return 0;
 13274  003C52  0E00               	movlw	0
 13275  003C54  A4D8               	btfss	status,2,c
 13276                           
 13277                           ; BSR set to: 0
 13278                           ;main.c: 2598: }
 13279                           ;main.c: 2600: return 1;
 13280  003C56  0E01               	movlw	1
 13281                           
 13282                           ; BSR set to: 0
 13283  003C58  0012               	return	
 13284  003C5A                     __end_of_sendVSCPFrame:
 13285                           	opt stack 0
 13286                           tblptru	equ	0xFF8
 13287                           tblptrh	equ	0xFF7
 13288                           tblptrl	equ	0xFF6
 13289                           tablat	equ	0xFF5
 13290                           prodh	equ	0xFF4
 13291                           prodl	equ	0xFF3
 13292                           postinc0	equ	0xFEE
 13293                           wreg	equ	0xFE8
 13294                           indf2	equ	0xFDF
 13295                           postinc2	equ	0xFDE
 13296                           postdec2	equ	0xFDD
 13297                           fsr2h	equ	0xFDA
 13298                           fsr2l	equ	0xFD9
 13299                           status	equ	0xFD8
 13300                           
 13301 ;; *************** function _sendCANFrame *****************
 13302 ;; Defined at:
 13303 ;;		line 2635 in file "../main.c"
 13304 ;; Parameters:    Size  Location     Type
 13305 ;;  id              4   54[COMRAM] unsigned long 
 13306 ;;  dlc             1   58[COMRAM] unsigned char 
 13307 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 13308 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13309 ;; Auto vars:     Size  Location     Type
 13310 ;;  rv              1    0        unsigned char 
 13311 ;; Return value:  Size  Location     Type
 13312 ;;                  1    wreg      unsigned char 
 13313 ;; Registers used:
 13314 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13315 ;; Tracked objects:
 13316 ;;		On entry : F/0
 13317 ;;		On exit  : F/0
 13318 ;;		Unchanged: 0/0
 13319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13320 ;;      Params:         7       0       0       0       0       0       0
 13321 ;;      Locals:         1       0       0       0       0       0       0
 13322 ;;      Temps:          0       0       0       0       0       0       0
 13323 ;;      Totals:         8       0       0       0       0       0       0
 13324 ;;Total ram usage:        8 bytes
 13325 ;; Hardware stack levels used:    1
 13326 ;; Hardware stack levels required when called:    4
 13327 ;; This function calls:
 13328 ;;		_ECANSendMessage
 13329 ;; This function is called by:
 13330 ;;		_sendVSCPFrame
 13331 ;; This function uses a non-reentrant model
 13332 ;;
 13333                           
 13334                           	psect	text53
 13335  004110                     __ptext53:
 13336                           	opt stack 0
 13337  004110                     _sendCANFrame:
 13338                           	opt stack 23
 13339                           
 13340                           ; BSR set to: 0
 13341                           ;main.c: 2638: sendTimer = 0;
 13342                           
 13343                           ; BSR set to: 0
 13344                           ;incstack = 0
 13345                           ;incstack = 0
 13346  004110  6B8C               	clrf	_sendTimer& (0+255),b	;volatile
 13347  004112                     l9587:
 13348                           
 13349                           ;main.c: 2640: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 13350  004112  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 13351  004116  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 13352  00411A  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 13353  00411E  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 13354  004122  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 13355  004126  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 13356  00412A  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 13357  00412E  0E20               	movlw	32
 13358  004130  6E19               	movwf	?_ECANSendMessage+7,c
 13359  004132  EC2E  F018         	call	_ECANSendMessage	;wreg free
 13360  004136  0900               	iorlw	0
 13361  004138  E0EC               	bz	l9587
 13362                           
 13363                           ;main.c: 2643: }
 13364                           ;main.c: 2644: }
 13365                           ;main.c: 2646: vscp_omsg.flags = 0;
 13366                           
 13367                           ;main.c: 2642: break;
 13368  00413A  0100               	movlb	0	; () banked
 13369  00413C  6BA4               	clrf	_vscp_omsg& (0+255),b
 13370                           
 13371                           ; BSR set to: 0
 13372                           
 13373                           ; BSR set to: 0
 13374                           ;main.c: 2648: return rv;
 13375  00413E  0C01               	retlw	1
 13376  004140                     __end_of_sendCANFrame:
 13377                           	opt stack 0
 13378                           tblptru	equ	0xFF8
 13379                           tblptrh	equ	0xFF7
 13380                           tblptrl	equ	0xFF6
 13381                           tablat	equ	0xFF5
 13382                           prodh	equ	0xFF4
 13383                           prodl	equ	0xFF3
 13384                           postinc0	equ	0xFEE
 13385                           wreg	equ	0xFE8
 13386                           indf2	equ	0xFDF
 13387                           postinc2	equ	0xFDE
 13388                           postdec2	equ	0xFDD
 13389                           fsr2h	equ	0xFDA
 13390                           fsr2l	equ	0xFD9
 13391                           status	equ	0xFD8
 13392                           
 13393 ;; *************** function _ECANSendMessage *****************
 13394 ;; Defined at:
 13395 ;;		line 617 in file "../ECAN.c"
 13396 ;; Parameters:    Size  Location     Type
 13397 ;;  id              4   17[COMRAM] unsigned long 
 13398 ;;  data            2   21[COMRAM] PTR unsigned char 
 13399 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13400 ;;  dataLen         1   23[COMRAM] unsigned char 
 13401 ;;  msgFlags        1   24[COMRAM] enum E16306
 13402 ;; Auto vars:     Size  Location     Type
 13403 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 13404 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13405 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13406 ;;		 -> B0CON(1), 
 13407 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 13408 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13409 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13410 ;;		 -> B0CON(1), 
 13411 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 13412 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13413 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13414 ;;		 -> B0CON(1), 
 13415 ;;  i               1   51[COMRAM] unsigned char 
 13416 ;;  temp            1   50[COMRAM] unsigned char 
 13417 ;;  tempBSEL0       1   47[COMRAM] struct .
 13418 ;;  j               1   46[COMRAM] unsigned char 
 13419 ;;  buffers         1   45[COMRAM] unsigned char 
 13420 ;;  mode            1   44[COMRAM] unsigned char 
 13421 ;; Return value:  Size  Location     Type
 13422 ;;                  1    wreg      enum E15660
 13423 ;; Registers used:
 13424 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13425 ;; Tracked objects:
 13426 ;;		On entry : 0/0
 13427 ;;		On exit  : 0/0
 13428 ;;		Unchanged: 0/0
 13429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13430 ;;      Params:         8       0       0       0       0       0       0
 13431 ;;      Locals:        28       0       0       0       0       0       0
 13432 ;;      Temps:          1       0       0       0       0       0       0
 13433 ;;      Totals:        37       0       0       0       0       0       0
 13434 ;;Total ram usage:       37 bytes
 13435 ;; Hardware stack levels used:    1
 13436 ;; Hardware stack levels required when called:    3
 13437 ;; This function calls:
 13438 ;;		__CANIDToRegs
 13439 ;; This function is called by:
 13440 ;;		_sendCANFrame
 13441 ;; This function uses a non-reentrant model
 13442 ;;
 13443                           
 13444                           	psect	text54
 13445  00305C                     __ptext54:
 13446                           	opt stack 0
 13447  00305C                     _ECANSendMessage:
 13448                           	opt stack 23
 13449                           
 13450                           ;ECAN.c: 619: BYTE mode;
 13451                           ;ECAN.c: 620: BYTE buffers;
 13452                           ;ECAN.c: 628: BYTE i,j;
 13453                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 13454                           ;ECAN.c: 630: BYTE* pb[9];
 13455                           ;ECAN.c: 631: BYTE temp;
 13456                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 13457                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 13458                           
 13459                           ; BSR set to: 0
 13460                           ;incstack = 0
 13461                           ;incstack = 0
 13462  00305C  0E0F               	movlw	15	;volatile
 13463  00305E  6E1C               	movwf	ECANSendMessage@pb+1,c
 13464  003060  0E40               	movlw	64	;volatile
 13465  003062  6E1B               	movwf	ECANSendMessage@pb,c
 13466                           
 13467                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 13468  003064  0E0F               	movlw	15	;volatile
 13469  003066  6E1E               	movwf	ECANSendMessage@pb+3,c
 13470  003068  0E30               	movlw	48	;volatile
 13471  00306A  6E1D               	movwf	ECANSendMessage@pb+2,c
 13472                           
 13473                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 13474  00306C  0E0F               	movlw	15	;volatile
 13475  00306E  6E20               	movwf	ECANSendMessage@pb+5,c
 13476  003070  0E20               	movlw	32	;volatile
 13477  003072  6E1F               	movwf	ECANSendMessage@pb+4,c
 13478                           
 13479                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 13480  003074  0E0E               	movlw	14	;volatile
 13481  003076  6E22               	movwf	ECANSendMessage@pb+7,c
 13482  003078  0E20               	movlw	32	;volatile
 13483  00307A  6E21               	movwf	ECANSendMessage@pb+6,c
 13484                           
 13485                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 13486  00307C  0E0E               	movlw	14	;volatile
 13487  00307E  6E24               	movwf	ECANSendMessage@pb+9,c
 13488  003080  0E30               	movlw	48	;volatile
 13489  003082  6E23               	movwf	ECANSendMessage@pb+8,c
 13490                           
 13491                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 13492  003084  0E0E               	movlw	14	;volatile
 13493  003086  6E26               	movwf	ECANSendMessage@pb+11,c
 13494  003088  0E40               	movlw	64	;volatile
 13495  00308A  6E25               	movwf	ECANSendMessage@pb+10,c
 13496                           
 13497                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 13498  00308C  0E0E               	movlw	14	;volatile
 13499  00308E  6E28               	movwf	ECANSendMessage@pb+13,c
 13500  003090  0E50               	movlw	80	;volatile
 13501  003092  6E27               	movwf	ECANSendMessage@pb+12,c
 13502                           
 13503                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 13504  003094  0E0E               	movlw	14	;volatile
 13505  003096  6E2A               	movwf	ECANSendMessage@pb+15,c
 13506  003098  0E60               	movlw	96	;volatile
 13507  00309A  6E29               	movwf	ECANSendMessage@pb+14,c
 13508                           
 13509                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 13510  00309C  0E0E               	movlw	14	;volatile
 13511  00309E  6E2C               	movwf	ECANSendMessage@pb+17,c
 13512  0030A0  0E70               	movlw	112	;volatile
 13513  0030A2  6E2B               	movwf	ECANSendMessage@pb+16,c
 13514                           
 13515                           ; BSR set to: 14
 13516                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 13517  0030A4  5077               	movf	3959,w,c	;volatile
 13518  0030A6  0BC0               	andlw	192
 13519  0030A8  6E2D               	movwf	ECANSendMessage@mode,c
 13520                           
 13521                           ; BSR set to: 14
 13522                           ;ECAN.c: 660: if ( mode == 0x00 )
 13523  0030AA  662D               	tstfsz	ECANSendMessage@mode,c
 13524  0030AC  D002               	goto	l9603
 13525                           
 13526                           ; BSR set to: 14
 13527                           ;ECAN.c: 661: buffers = 2;
 13528  0030AE  0E02               	movlw	2
 13529  0030B0  D001               	goto	L41
 13530  0030B2                     l9603:
 13531                           
 13532                           ; BSR set to: 14
 13533                           ;ECAN.c: 662: else
 13534                           ;ECAN.c: 663: buffers = 8;
 13535  0030B2  0E08               	movlw	8
 13536  0030B4                     L41:
 13537  0030B4  6E2E               	movwf	ECANSendMessage@buffers,c
 13538                           
 13539                           ; BSR set to: 14
 13540                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 13541  0030B6  010D               	movlb	13	; () banked
 13542  0030B8  90D8               	bcf	status,0,c
 13543  0030BA  31F8               	rrcf	248,w,b	;volatile
 13544  0030BC  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 13545                           
 13546                           ; BSR set to: 13
 13547                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 13548  0030BE  6A34               	clrf	ECANSendMessage@i,c
 13549  0030C0  D07D               	goto	l9663
 13550  0030C2                     l9609:
 13551                           
 13552                           ;ECAN.c: 688: {
 13553                           ;ECAN.c: 693: ptr = pb[i];
 13554  0030C2  5034               	movf	ECANSendMessage@i,w,c
 13555  0030C4  0D02               	mullw	2
 13556  0030C6  50F3               	movf	prodl,w,c
 13557  0030C8  0F1B               	addlw	low ECANSendMessage@pb
 13558  0030CA  6ED9               	movwf	fsr2l,c
 13559  0030CC  6ADA               	clrf	fsr2h,c
 13560  0030CE  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 13561  0030D2  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 13562                           
 13563                           ;ECAN.c: 694: tempPtr = ptr;
 13564  0030D6  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 13565  0030DA  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 13566                           
 13567                           ;ECAN.c: 702: if ( i > 2 )
 13568  0030DE  0E02               	movlw	2
 13569  0030E0  6434               	cpfsgt	ECANSendMessage@i,c
 13570  0030E2  D004               	goto	l9621
 13571                           
 13572                           ;ECAN.c: 703: {
 13573                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 13574  0030E4  90D8               	bcf	status,0,c
 13575  0030E6  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 13576                           
 13577                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 13578  0030E8  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 13579  0030EA  D067               	goto	l9661
 13580  0030EC                     l9621:
 13581                           
 13582                           ;ECAN.c: 714: }
 13583                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 13584  0030EC  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13585  0030F0  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13586  0030F4  50DF               	movf	indf2,w,c
 13587  0030F6  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13588  0030F8  B61A               	btfsc	??_ECANSendMessage,3,c
 13589  0030FA  D05F               	goto	l9661
 13590                           
 13591                           ;ECAN.c: 721: {
 13592                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 13593  0030FC  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13594  003100  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13595  003104  0EFC               	movlw	252
 13596  003106  16DF               	andwf	indf2,f,c
 13597                           
 13598                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 13599  003108  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 13600  00310C  0E03               	movlw	3
 13601  00310E  161A               	andwf	??_ECANSendMessage,f,c
 13602  003110  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13603  003114  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13604  003118  501A               	movf	??_ECANSendMessage,w,c
 13605  00311A  12DF               	iorwf	indf2,f,c
 13606                           
 13607                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 13608  00311C  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 13609  00311E  D004               	goto	l863
 13610                           
 13611                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 13612  003120  5018               	movf	ECANSendMessage@dataLen,w,c
 13613  003122  0940               	iorlw	64
 13614  003124  6E33               	movwf	ECANSendMessage@temp,c
 13615  003126  D002               	goto	l9631
 13616  003128                     l863:
 13617                           
 13618                           ;ECAN.c: 729: else
 13619                           ;ECAN.c: 730: temp = dataLen;
 13620  003128  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 13621  00312C                     l9631:
 13622                           
 13623                           ;ECAN.c: 732: *(ptr+5) = temp;
 13624  00312C  EE20 F005          	lfsr	2,5
 13625  003130  5035               	movf	ECANSendMessage@ptr,w,c
 13626  003132  26D9               	addwf	fsr2l,f,c
 13627  003134  5036               	movf	ECANSendMessage@ptr+1,w,c
 13628  003136  22DA               	addwfc	fsr2h,f,c
 13629  003138  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 13630                           
 13631                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 13632  00313C  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 13633  00313E  D003               	goto	l865
 13634                           
 13635                           ;ECAN.c: 736: temp = 1;
 13636  003140  0E01               	movlw	1
 13637  003142  6E33               	movwf	ECANSendMessage@temp,c
 13638  003144  D001               	goto	l9637
 13639  003146                     l865:
 13640                           
 13641                           ;ECAN.c: 738: else
 13642                           ;ECAN.c: 739: temp = 0;
 13643  003146  6A33               	clrf	ECANSendMessage@temp,c
 13644  003148                     l9637:
 13645                           
 13646                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 13647  003148  2835               	incf	ECANSendMessage@ptr,w,c
 13648  00314A  6E08               	movwf	?__CANIDToRegs,c
 13649  00314C  0E00               	movlw	0
 13650  00314E  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 13651  003150  6E09               	movwf	?__CANIDToRegs+1,c
 13652  003152  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 13653  003156  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 13654  00315A  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 13655  00315E  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 13656  003162  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 13657  003166  EC3E  F01A         	call	__CANIDToRegs	;wreg free
 13658                           
 13659                           ;ECAN.c: 745: ptr += 6;
 13660  00316A  0E06               	movlw	6
 13661  00316C  2635               	addwf	ECANSendMessage@ptr,f,c
 13662  00316E  0E00               	movlw	0
 13663  003170  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 13664                           
 13665                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 13666  003172  6A2F               	clrf	ECANSendMessage@j,c
 13667  003174  D00F               	goto	l9651
 13668  003176                     l9643:
 13669                           
 13670                           ;ECAN.c: 748: *ptr++ = *data++;
 13671  003176  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 13672  00317A  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 13673  00317E  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 13674  003182  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 13675  003186  CFDF FFE7          	movff	indf2,indf1
 13676  00318A  4A16               	infsnz	ECANSendMessage@data,f,c
 13677  00318C  2A17               	incf	ECANSendMessage@data+1,f,c
 13678  00318E  4A35               	infsnz	ECANSendMessage@ptr,f,c
 13679  003190  2A36               	incf	ECANSendMessage@ptr+1,f,c
 13680  003192  2A2F               	incf	ECANSendMessage@j,f,c
 13681  003194                     l9651:
 13682  003194  5018               	movf	ECANSendMessage@dataLen,w,c
 13683  003196  5C2F               	subwf	ECANSendMessage@j,w,c
 13684  003198  E3EE               	bnc	l9643
 13685                           
 13686                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 13687  00319A  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13688  00319E  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13689  0031A2  50DF               	movf	indf2,w,c
 13690  0031A4  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13691  0031A6  B41A               	btfsc	??_ECANSendMessage,2,c
 13692  0031A8  D006               	goto	l9657
 13693                           
 13694                           ;ECAN.c: 753: *tempPtr |= 0x08;
 13695  0031AA  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13696  0031AE  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13697  0031B2  0E00               	movlw	0
 13698  0031B4  86DB               	bsf	plusw2,3,c
 13699  0031B6                     l9657:
 13700                           
 13701                           ;ECAN.c: 755: return TRUE;
 13702  0031B6  0E01               	movlw	1
 13703  0031B8  D005               	goto	l871
 13704  0031BA                     l9661:
 13705  0031BA  2A34               	incf	ECANSendMessage@i,f,c
 13706  0031BC                     l9663:
 13707  0031BC  502E               	movf	ECANSendMessage@buffers,w,c
 13708  0031BE  5C34               	subwf	ECANSendMessage@i,w,c
 13709  0031C0  E380               	bnc	l9609
 13710                           
 13711                           ;ECAN.c: 756: }
 13712                           ;ECAN.c: 757: }
 13713                           ;ECAN.c: 760: return FALSE;
 13714  0031C2  0E00               	movlw	0
 13715  0031C4                     l871:
 13716  0031C4  0012               	return	
 13717  0031C6                     __end_of_ECANSendMessage:
 13718                           	opt stack 0
 13719                           tblptru	equ	0xFF8
 13720                           tblptrh	equ	0xFF7
 13721                           tblptrl	equ	0xFF6
 13722                           tablat	equ	0xFF5
 13723                           prodh	equ	0xFF4
 13724                           prodl	equ	0xFF3
 13725                           postinc0	equ	0xFEE
 13726                           wreg	equ	0xFE8
 13727                           indf1	equ	0xFE7
 13728                           fsr1h	equ	0xFE2
 13729                           fsr1l	equ	0xFE1
 13730                           indf2	equ	0xFDF
 13731                           postinc2	equ	0xFDE
 13732                           postdec2	equ	0xFDD
 13733                           plusw2	equ	0xFDB
 13734                           fsr2h	equ	0xFDA
 13735                           fsr2l	equ	0xFD9
 13736                           status	equ	0xFD8
 13737                           
 13738 ;; *************** function __CANIDToRegs *****************
 13739 ;; Defined at:
 13740 ;;		line 1099 in file "../ECAN.c"
 13741 ;; Parameters:    Size  Location     Type
 13742 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 13743 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13744 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13745 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
 13746 ;;  val             4    9[COMRAM] unsigned long 
 13747 ;;  type            1   13[COMRAM] unsigned char 
 13748 ;; Auto vars:     Size  Location     Type
 13749 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 13750 ;;		 -> _CANIDToRegs@val(4), 
 13751 ;; Return value:  Size  Location     Type
 13752 ;;		None               void
 13753 ;; Registers used:
 13754 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13755 ;; Tracked objects:
 13756 ;;		On entry : 0/F
 13757 ;;		On exit  : 0/0
 13758 ;;		Unchanged: 0/0
 13759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13760 ;;      Params:         7       0       0       0       0       0       0
 13761 ;;      Locals:         1       0       0       0       0       0       0
 13762 ;;      Temps:          2       0       0       0       0       0       0
 13763 ;;      Totals:        10       0       0       0       0       0       0
 13764 ;;Total ram usage:       10 bytes
 13765 ;; Hardware stack levels used:    1
 13766 ;; Hardware stack levels required when called:    2
 13767 ;; This function calls:
 13768 ;;		Nothing
 13769 ;; This function is called by:
 13770 ;;		_calculateSetFilterMask
 13771 ;;		_ECANSendMessage
 13772 ;; This function uses a non-reentrant model
 13773 ;;
 13774                           
 13775                           	psect	text55
 13776  00347C                     __ptext55:
 13777                           	opt stack 0
 13778  00347C                     __CANIDToRegs:
 13779                           	opt stack 23
 13780                           
 13781                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 13782                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 13783                           
 13784                           ;incstack = 0
 13785                           ;incstack = 0
 13786  00347C  0E0A               	movlw	low __CANIDToRegs@val
 13787  00347E  6E11               	movwf	__CANIDToRegs@Value,c
 13788                           
 13789                           ;ECAN.c: 1104: if ( type == 0 )
 13790  003480  660E               	tstfsz	__CANIDToRegs@type,c
 13791  003482  D037               	goto	l9679
 13792                           
 13793                           ;ECAN.c: 1105: {
 13794                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 13795  003484  5011               	movf	__CANIDToRegs@Value,w,c
 13796  003486  6ED9               	movwf	fsr2l,c
 13797  003488  6ADA               	clrf	fsr2h,c
 13798  00348A  50DF               	movf	indf2,w,c
 13799  00348C  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13800  00348E  90D8               	bcf	status,0,c
 13801  003490  320F               	rrcf	??__CANIDToRegs,f,c
 13802  003492  90D8               	bcf	status,0,c
 13803  003494  320F               	rrcf	??__CANIDToRegs,f,c
 13804  003496  90D8               	bcf	status,0,c
 13805  003498  300F               	rrcf	??__CANIDToRegs,w,c
 13806  00349A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13807  00349E  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13808  0034A2  6EDF               	movwf	indf2,c
 13809                           
 13810                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 13811  0034A4  5011               	movf	__CANIDToRegs@Value,w,c
 13812  0034A6  6ED9               	movwf	fsr2l,c
 13813  0034A8  6ADA               	clrf	fsr2h,c
 13814  0034AA  2AD9               	incf	fsr2l,f,c
 13815  0034AC  6ADA               	clrf	fsr2h,c
 13816  0034AE  50DF               	movf	indf2,w,c
 13817  0034B0  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13818  0034B2  0E05               	movlw	5
 13819  0034B4  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13820  0034B6                     u10975:
 13821  0034B6  90D8               	bcf	status,0,c
 13822  0034B8  360F               	rlcf	??__CANIDToRegs,f,c
 13823  0034BA  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13824  0034BC  D7FC               	goto	u10975
 13825  0034BE  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13826  0034C2  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13827  0034C6  500F               	movf	??__CANIDToRegs,w,c
 13828  0034C8  12DF               	iorwf	indf2,f,c
 13829                           
 13830                           ;ECAN.c: 1109: ptr++;
 13831  0034CA  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13832  0034CC  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13833                           
 13834                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 13835  0034CE  5011               	movf	__CANIDToRegs@Value,w,c
 13836  0034D0  6ED9               	movwf	fsr2l,c
 13837  0034D2  6ADA               	clrf	fsr2h,c
 13838  0034D4  50DF               	movf	indf2,w,c
 13839  0034D6  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13840  0034D8  0E05               	movlw	5
 13841  0034DA  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13842  0034DC                     u10985:
 13843  0034DC  90D8               	bcf	status,0,c
 13844  0034DE  360F               	rlcf	??__CANIDToRegs,f,c
 13845  0034E0  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13846  0034E2  D7FC               	goto	u10985
 13847  0034E4  500F               	movf	??__CANIDToRegs,w,c
 13848  0034E6  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13849  0034EA  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13850  0034EE  6EDF               	movwf	indf2,c
 13851                           
 13852                           ;ECAN.c: 1111: }
 13853  0034F0  D06C               	goto	l925
 13854  0034F2                     l9679:
 13855                           
 13856                           ;ECAN.c: 1112: else
 13857                           ;ECAN.c: 1113: {
 13858                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 13859  0034F2  5011               	movf	__CANIDToRegs@Value,w,c
 13860  0034F4  6ED9               	movwf	fsr2l,c
 13861  0034F6  6ADA               	clrf	fsr2h,c
 13862  0034F8  0E02               	movlw	2
 13863  0034FA  26D9               	addwf	fsr2l,f,c
 13864  0034FC  6ADA               	clrf	fsr2h,c
 13865  0034FE  50DF               	movf	indf2,w,c
 13866  003500  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13867  003502  0E05               	movlw	5
 13868  003504  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13869  003506                     u10995:
 13870  003506  90D8               	bcf	status,0,c
 13871  003508  320F               	rrcf	??__CANIDToRegs,f,c
 13872  00350A  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13873  00350C  D7FC               	goto	u10995
 13874  00350E  500F               	movf	??__CANIDToRegs,w,c
 13875  003510  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13876  003514  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13877  003518  6EDF               	movwf	indf2,c
 13878                           
 13879                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 13880  00351A  5011               	movf	__CANIDToRegs@Value,w,c
 13881  00351C  6ED9               	movwf	fsr2l,c
 13882  00351E  6ADA               	clrf	fsr2h,c
 13883  003520  0E03               	movlw	3
 13884  003522  26D9               	addwf	fsr2l,f,c
 13885  003524  6ADA               	clrf	fsr2h,c
 13886  003526  50DF               	movf	indf2,w,c
 13887  003528  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13888  00352A  90D8               	bcf	status,0,c
 13889  00352C  360F               	rlcf	??__CANIDToRegs,f,c
 13890  00352E  90D8               	bcf	status,0,c
 13891  003530  360F               	rlcf	??__CANIDToRegs,f,c
 13892  003532  90D8               	bcf	status,0,c
 13893  003534  360F               	rlcf	??__CANIDToRegs,f,c
 13894  003536  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13895  00353A  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13896  00353E  500F               	movf	??__CANIDToRegs,w,c
 13897  003540  12DF               	iorwf	indf2,f,c
 13898                           
 13899                           ;ECAN.c: 1117: ptr++;
 13900  003542  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13901  003544  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13902                           
 13903                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 13904  003546  5011               	movf	__CANIDToRegs@Value,w,c
 13905  003548  6ED9               	movwf	fsr2l,c
 13906  00354A  6ADA               	clrf	fsr2h,c
 13907  00354C  0E02               	movlw	2
 13908  00354E  26D9               	addwf	fsr2l,f,c
 13909  003550  6ADA               	clrf	fsr2h,c
 13910  003552  50DF               	movf	indf2,w,c
 13911  003554  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13912  003556  90D8               	bcf	status,0,c
 13913  003558  360F               	rlcf	??__CANIDToRegs,f,c
 13914  00355A  90D8               	bcf	status,0,c
 13915  00355C  360F               	rlcf	??__CANIDToRegs,f,c
 13916  00355E  90D8               	bcf	status,0,c
 13917  003560  340F               	rlcf	??__CANIDToRegs,w,c
 13918  003562  0BE0               	andlw	224
 13919  003564  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13920  003568  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13921  00356C  6EDF               	movwf	indf2,c
 13922                           
 13923                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 13924  00356E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13925  003572  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13926  003576  0E00               	movlw	0
 13927  003578  86DB               	bsf	plusw2,3,c
 13928                           
 13929                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 13930  00357A  5011               	movf	__CANIDToRegs@Value,w,c
 13931  00357C  6ED9               	movwf	fsr2l,c
 13932  00357E  6ADA               	clrf	fsr2h,c
 13933  003580  0E02               	movlw	2
 13934  003582  26D9               	addwf	fsr2l,f,c
 13935  003584  6ADA               	clrf	fsr2h,c
 13936  003586  50DF               	movf	indf2,w,c
 13937  003588  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13938  00358A  0E03               	movlw	3
 13939  00358C  160F               	andwf	??__CANIDToRegs,f,c
 13940  00358E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13941  003592  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13942  003596  500F               	movf	??__CANIDToRegs,w,c
 13943  003598  12DF               	iorwf	indf2,f,c
 13944                           
 13945                           ;ECAN.c: 1122: ptr++;
 13946  00359A  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13947  00359C  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13948                           
 13949                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 13950  00359E  5011               	movf	__CANIDToRegs@Value,w,c
 13951  0035A0  6ED9               	movwf	fsr2l,c
 13952  0035A2  6ADA               	clrf	fsr2h,c
 13953  0035A4  2AD9               	incf	fsr2l,f,c
 13954  0035A6  6ADA               	clrf	fsr2h,c
 13955  0035A8  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13956  0035AC  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13957  0035B0  CFDF FFE7          	movff	indf2,indf1
 13958                           
 13959                           ;ECAN.c: 1124: ptr++;
 13960  0035B4  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13961  0035B6  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13962                           
 13963                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 13964  0035B8  5011               	movf	__CANIDToRegs@Value,w,c
 13965  0035BA  6ED9               	movwf	fsr2l,c
 13966  0035BC  6ADA               	clrf	fsr2h,c
 13967  0035BE  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13968  0035C2  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13969  0035C6  CFDF FFE7          	movff	indf2,indf1
 13970  0035CA                     l925:
 13971  0035CA  0012               	return	
 13972  0035CC                     __end_of__CANIDToRegs:
 13973                           	opt stack 0
 13974                           tblptru	equ	0xFF8
 13975                           tblptrh	equ	0xFF7
 13976                           tblptrl	equ	0xFF6
 13977                           tablat	equ	0xFF5
 13978                           prodh	equ	0xFF4
 13979                           prodl	equ	0xFF3
 13980                           postinc0	equ	0xFEE
 13981                           wreg	equ	0xFE8
 13982                           indf1	equ	0xFE7
 13983                           fsr1h	equ	0xFE2
 13984                           fsr1l	equ	0xFE1
 13985                           indf2	equ	0xFDF
 13986                           postinc2	equ	0xFDE
 13987                           postdec2	equ	0xFDD
 13988                           plusw2	equ	0xFDB
 13989                           fsr2h	equ	0xFDA
 13990                           fsr2l	equ	0xFD9
 13991                           status	equ	0xFD8
 13992                           
 13993 ;; *************** function _vscp_getEvent *****************
 13994 ;; Defined at:
 13995 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 13996 ;; Parameters:    Size  Location     Type
 13997 ;;		None
 13998 ;; Auto vars:     Size  Location     Type
 13999 ;;  rv              1   43[COMRAM] unsigned char 
 14000 ;; Return value:  Size  Location     Type
 14001 ;;                  1    wreg      unsigned char 
 14002 ;; Registers used:
 14003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14004 ;; Tracked objects:
 14005 ;;		On entry : F/0
 14006 ;;		On exit  : 0/0
 14007 ;;		Unchanged: 0/0
 14008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14009 ;;      Params:         0       0       0       0       0       0       0
 14010 ;;      Locals:         1       0       0       0       0       0       0
 14011 ;;      Temps:          0       0       0       0       0       0       0
 14012 ;;      Totals:         1       0       0       0       0       0       0
 14013 ;;Total ram usage:        1 bytes
 14014 ;; Hardware stack levels used:    1
 14015 ;; Hardware stack levels required when called:    6
 14016 ;; This function calls:
 14017 ;;		_getVSCPFrame
 14018 ;; This function is called by:
 14019 ;;		_main
 14020 ;; This function uses a non-reentrant model
 14021 ;;
 14022                           
 14023                           	psect	text56
 14024  004196                     __ptext56:
 14025                           	opt stack 0
 14026  004196                     _vscp_getEvent:
 14027                           	opt stack 24
 14028                           
 14029                           ; BSR set to: 0
 14030                           ;vscp_firmware.c: 1309: int8_t rv;
 14031                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 14032                           
 14033                           ;incstack = 0
 14034                           ;incstack = 0
 14035  004196  BF96               	btfsc	_vscp_imsg& (0+255),7,b
 14036  004198  D012               	goto	l1299
 14037                           
 14038                           ; BSR set to: 0
 14039                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 14040                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 14041                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 14042                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 14043                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 14044                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 14045  00419A  0E9A               	movlw	low (_vscp_imsg+4)
 14046  00419C  6E1E               	movwf	?_getVSCPFrame,c
 14047  00419E  0E9B               	movlw	low (_vscp_imsg+5)
 14048  0041A0  6E1F               	movwf	?_getVSCPFrame+1,c
 14049  0041A2  0E97               	movlw	low (_vscp_imsg+1)
 14050  0041A4  6E20               	movwf	?_getVSCPFrame+2,c
 14051  0041A6  0E96               	movlw	low _vscp_imsg
 14052  0041A8  6E21               	movwf	?_getVSCPFrame+3,c
 14053  0041AA  0E9C               	movlw	low (_vscp_imsg+6)
 14054  0041AC  6E22               	movwf	?_getVSCPFrame+4,c
 14055  0041AE  0E98               	movlw	(_vscp_imsg+2)& (0+255)
 14056  0041B0  EC22  F01F         	call	_getVSCPFrame
 14057  0041B4  6E2C               	movwf	vscp_getEvent@rv,c
 14058  0041B6  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 14059  0041B8  E002               	bz	l1299
 14060                           
 14061                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 14062  0041BA  0100               	movlb	0	; () banked
 14063  0041BC  8F96               	bsf	_vscp_imsg& (0+255),7,b
 14064  0041BE                     l1299:
 14065  0041BE  0012               	return	
 14066  0041C0                     __end_of_vscp_getEvent:
 14067                           	opt stack 0
 14068                           tblptru	equ	0xFF8
 14069                           tblptrh	equ	0xFF7
 14070                           tblptrl	equ	0xFF6
 14071                           tablat	equ	0xFF5
 14072                           prodh	equ	0xFF4
 14073                           prodl	equ	0xFF3
 14074                           postinc0	equ	0xFEE
 14075                           wreg	equ	0xFE8
 14076                           indf1	equ	0xFE7
 14077                           fsr1h	equ	0xFE2
 14078                           fsr1l	equ	0xFE1
 14079                           indf2	equ	0xFDF
 14080                           postinc2	equ	0xFDE
 14081                           postdec2	equ	0xFDD
 14082                           plusw2	equ	0xFDB
 14083                           fsr2h	equ	0xFDA
 14084                           fsr2l	equ	0xFD9
 14085                           status	equ	0xFD8
 14086                           
 14087 ;; *************** function _getVSCPFrame *****************
 14088 ;; Defined at:
 14089 ;;		line 2614 in file "../main.c"
 14090 ;; Parameters:    Size  Location     Type
 14091 ;;  pvscpclass      1    wreg     PTR unsigned short 
 14092 ;;		 -> vscp_imsg(14), 
 14093 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 14094 ;;		 -> vscp_imsg(14), 
 14095 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 14096 ;;		 -> vscp_imsg(14), 
 14097 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 14098 ;;		 -> vscp_imsg(14), 
 14099 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 14100 ;;		 -> vscp_imsg(14), 
 14101 ;;  pData           1   33[COMRAM] PTR unsigned char 
 14102 ;;		 -> vscp_imsg(14), 
 14103 ;; Auto vars:     Size  Location     Type
 14104 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 14105 ;;		 -> vscp_imsg(14), 
 14106 ;;  id              4   39[COMRAM] unsigned long 
 14107 ;; Return value:  Size  Location     Type
 14108 ;;                  1    wreg      unsigned char 
 14109 ;; Registers used:
 14110 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14111 ;; Tracked objects:
 14112 ;;		On entry : F/0
 14113 ;;		On exit  : 0/0
 14114 ;;		Unchanged: 0/0
 14115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14116 ;;      Params:         5       0       0       0       0       0       0
 14117 ;;      Locals:         5       0       0       0       0       0       0
 14118 ;;      Temps:          4       0       0       0       0       0       0
 14119 ;;      Totals:        14       0       0       0       0       0       0
 14120 ;;Total ram usage:       14 bytes
 14121 ;; Hardware stack levels used:    1
 14122 ;; Hardware stack levels required when called:    5
 14123 ;; This function calls:
 14124 ;;		_getCANFrame
 14125 ;; This function is called by:
 14126 ;;		_vscp_getEvent
 14127 ;; This function uses a non-reentrant model
 14128 ;;
 14129                           
 14130                           	psect	text57
 14131  003E44                     __ptext57:
 14132                           	opt stack 0
 14133  003E44                     _getVSCPFrame:
 14134                           	opt stack 24
 14135                           
 14136                           ;incstack = 0
 14137                           ;incstack = 0
 14138                           ;getVSCPFrame@pvscpclass stored from wreg
 14139  003E44  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 14140                           
 14141                           ; BSR set to: 0
 14142                           ;main.c: 2615: uint32_t id;
 14143                           ;main.c: 2617: if ( !getCANFrame(&id, pSize, pData) ) {
 14144  003E48  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 14145  003E4C  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 14146  003E50  0E28               	movlw	getVSCPFrame@id& (0+255)
 14147  003E52  ECA0  F020         	call	_getCANFrame
 14148  003E56  0900               	iorlw	0
 14149  003E58  E102               	bnz	l6941
 14150                           
 14151                           ;main.c: 2618: return 0;
 14152  003E5A  0E00               	movlw	0
 14153  003E5C  D02E               	goto	l665
 14154  003E5E                     l6941:
 14155                           
 14156                           ;main.c: 2619: }
 14157                           ;main.c: 2621: *pNodeId = id & 0x0ff;
 14158  003E5E  501F               	movf	getVSCPFrame@pNodeId,w,c
 14159  003E60  6ED9               	movwf	fsr2l,c
 14160  003E62  6ADA               	clrf	fsr2h,c
 14161  003E64  C028  FFDF         	movff	getVSCPFrame@id,indf2
 14162                           
 14163                           ;main.c: 2622: *pvscptype = (id >> 8) & 0xff;
 14164  003E68  501E               	movf	getVSCPFrame@pvscptype,w,c
 14165  003E6A  6ED9               	movwf	fsr2l,c
 14166  003E6C  6ADA               	clrf	fsr2h,c
 14167  003E6E  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 14168                           
 14169                           ;main.c: 2623: *pvscpclass = (id >> 16) & 0x1ff;
 14170  003E72  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 14171  003E74  6E23               	movwf	??_getVSCPFrame& (0+255),c
 14172  003E76  0E01               	movlw	1
 14173  003E78  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 14174  003E7A  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 14175  003E7C  5027               	movf	getVSCPFrame@pvscpclass,w,c
 14176  003E7E  6ED9               	movwf	fsr2l,c
 14177  003E80  6ADA               	clrf	fsr2h,c
 14178  003E82  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 14179  003E86  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 14180                           
 14181                           ;main.c: 2624: *pPriority = (uint16_t) (0x07 & (id >> 26));
 14182  003E8A  5020               	movf	getVSCPFrame@pPriority,w,c
 14183  003E8C  6ED9               	movwf	fsr2l,c
 14184  003E8E  6ADA               	clrf	fsr2h,c
 14185  003E90  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 14186  003E94  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 14187  003E98  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 14188  003E9C  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 14189  003EA0  0E1B               	movlw	27
 14190  003EA2  D005               	goto	u6940
 14191  003EA4                     u6945:
 14192  003EA4  90D8               	bcf	status,0,c
 14193  003EA6  3226               	rrcf	??_getVSCPFrame+3,f,c
 14194  003EA8  3225               	rrcf	??_getVSCPFrame+2,f,c
 14195  003EAA  3224               	rrcf	??_getVSCPFrame+1,f,c
 14196  003EAC  3223               	rrcf	??_getVSCPFrame,f,c
 14197  003EAE                     u6940:
 14198  003EAE  2EE8               	decfsz	wreg,f,c
 14199  003EB0  D7F9               	goto	u6945
 14200  003EB2  5023               	movf	??_getVSCPFrame,w,c
 14201  003EB4  0B07               	andlw	7
 14202  003EB6  6EDF               	movwf	indf2,c
 14203                           
 14204                           ;main.c: 2626: return 1;
 14205  003EB8  0E01               	movlw	1
 14206  003EBA                     l665:
 14207  003EBA  0012               	return	
 14208  003EBC                     __end_of_getVSCPFrame:
 14209                           	opt stack 0
 14210                           tblptru	equ	0xFF8
 14211                           tblptrh	equ	0xFF7
 14212                           tblptrl	equ	0xFF6
 14213                           tablat	equ	0xFF5
 14214                           prodh	equ	0xFF4
 14215                           prodl	equ	0xFF3
 14216                           postinc0	equ	0xFEE
 14217                           wreg	equ	0xFE8
 14218                           indf1	equ	0xFE7
 14219                           fsr1h	equ	0xFE2
 14220                           fsr1l	equ	0xFE1
 14221                           indf2	equ	0xFDF
 14222                           postinc2	equ	0xFDE
 14223                           postdec2	equ	0xFDD
 14224                           plusw2	equ	0xFDB
 14225                           fsr2h	equ	0xFDA
 14226                           fsr2l	equ	0xFD9
 14227                           status	equ	0xFD8
 14228                           
 14229 ;; *************** function _getCANFrame *****************
 14230 ;; Defined at:
 14231 ;;		line 2656 in file "../main.c"
 14232 ;; Parameters:    Size  Location     Type
 14233 ;;  pid             1    wreg     PTR unsigned long 
 14234 ;;		 -> getVSCPFrame@id(4), 
 14235 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 14236 ;;		 -> vscp_imsg(14), 
 14237 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 14238 ;;		 -> vscp_imsg(14), 
 14239 ;; Auto vars:     Size  Location     Type
 14240 ;;  pid             1   27[COMRAM] PTR unsigned long 
 14241 ;;		 -> getVSCPFrame@id(4), 
 14242 ;;  flags           1   28[COMRAM] enum E16332
 14243 ;; Return value:  Size  Location     Type
 14244 ;;                  1    wreg      unsigned char 
 14245 ;; Registers used:
 14246 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14247 ;; Tracked objects:
 14248 ;;		On entry : F/0
 14249 ;;		On exit  : 0/0
 14250 ;;		Unchanged: 0/0
 14251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14252 ;;      Params:         2       0       0       0       0       0       0
 14253 ;;      Locals:         2       0       0       0       0       0       0
 14254 ;;      Temps:          0       0       0       0       0       0       0
 14255 ;;      Totals:         4       0       0       0       0       0       0
 14256 ;;Total ram usage:        4 bytes
 14257 ;; Hardware stack levels used:    1
 14258 ;; Hardware stack levels required when called:    4
 14259 ;; This function calls:
 14260 ;;		_ECANReceiveMessage
 14261 ;; This function is called by:
 14262 ;;		_getVSCPFrame
 14263 ;; This function uses a non-reentrant model
 14264 ;;
 14265                           
 14266                           	psect	text58
 14267  004140                     __ptext58:
 14268                           	opt stack 0
 14269  004140                     _getCANFrame:
 14270                           	opt stack 24
 14271                           
 14272                           ;incstack = 0
 14273                           ;incstack = 0
 14274                           ;getCANFrame@pid stored from wreg
 14275  004140  CFE8 F01C          	movff	wreg,getCANFrame@pid
 14276                           
 14277                           ; BSR set to: 0
 14278                           ;main.c: 2657: ECAN_RX_MSG_FLAGS flags;
 14279                           ;main.c: 2661: if (vscp_imsg.flags & 0x80) return 0;
 14280  004144  AF96               	btfss	_vscp_imsg& (0+255),7,b
 14281  004146  D002               	goto	l6957
 14282  004148                     l6953:
 14283  004148  0E00               	movlw	0
 14284  00414A  D00F               	goto	l676
 14285  00414C                     l6957:
 14286                           
 14287                           ; BSR set to: 0
 14288                           ;main.c: 2663: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 14289  00414C  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 14290  004150  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 14291  004154  0E1D               	movlw	low getCANFrame@flags
 14292  004156  6E11               	movwf	?_ECANReceiveMessage+2,c
 14293  004158  501C               	movf	getCANFrame@pid,w,c
 14294  00415A  EC50  F015         	call	_ECANReceiveMessage
 14295  00415E  0900               	iorlw	0
 14296  004160  E0F3               	bz	l6953
 14297                           
 14298                           ;main.c: 2666: if (flags & ECAN_RX_RTR_FRAME) return 0;
 14299  004162  AC1D               	btfss	getCANFrame@flags,6,c
 14300                           
 14301                           ;main.c: 2669: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 14302  004164  AA1D               	btfss	getCANFrame@flags,5,c
 14303  004166  D7F0               	goto	l6953
 14304                           
 14305                           ;main.c: 2671: return 1;
 14306  004168  0E01               	movlw	1
 14307  00416A                     l676:
 14308  00416A  0012               	return	
 14309  00416C                     __end_of_getCANFrame:
 14310                           	opt stack 0
 14311                           tblptru	equ	0xFF8
 14312                           tblptrh	equ	0xFF7
 14313                           tblptrl	equ	0xFF6
 14314                           tablat	equ	0xFF5
 14315                           prodh	equ	0xFF4
 14316                           prodl	equ	0xFF3
 14317                           postinc0	equ	0xFEE
 14318                           wreg	equ	0xFE8
 14319                           indf1	equ	0xFE7
 14320                           fsr1h	equ	0xFE2
 14321                           fsr1l	equ	0xFE1
 14322                           indf2	equ	0xFDF
 14323                           postinc2	equ	0xFDE
 14324                           postdec2	equ	0xFDD
 14325                           plusw2	equ	0xFDB
 14326                           fsr2h	equ	0xFDA
 14327                           fsr2l	equ	0xFD9
 14328                           status	equ	0xFD8
 14329                           
 14330 ;; *************** function _ECANReceiveMessage *****************
 14331 ;; Defined at:
 14332 ;;		line 803 in file "../ECAN.c"
 14333 ;; Parameters:    Size  Location     Type
 14334 ;;  id              1    wreg     PTR unsigned long 
 14335 ;;		 -> getVSCPFrame@id(4), 
 14336 ;;  data            1   14[COMRAM] PTR unsigned char 
 14337 ;;		 -> vscp_imsg(14), 
 14338 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 14339 ;;		 -> vscp_imsg(14), 
 14340 ;;  msgFlags        1   16[COMRAM] PTR enum E16324
 14341 ;;		 -> getCANFrame@flags(1), 
 14342 ;; Auto vars:     Size  Location     Type
 14343 ;;  id              1   19[COMRAM] PTR unsigned long 
 14344 ;;		 -> getVSCPFrame@id(4), 
 14345 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 14346 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14347 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14348 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 14349 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14350 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14351 ;;  temp            1   22[COMRAM] struct .
 14352 ;;  mode            1   21[COMRAM] unsigned char 
 14353 ;;  i               1   20[COMRAM] unsigned char 
 14354 ;; Return value:  Size  Location     Type
 14355 ;;                  1    wreg      enum E15660
 14356 ;; Registers used:
 14357 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14358 ;; Tracked objects:
 14359 ;;		On entry : F/0
 14360 ;;		On exit  : 0/0
 14361 ;;		Unchanged: 0/0
 14362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14363 ;;      Params:         3       0       0       0       0       0       0
 14364 ;;      Locals:         8       0       0       0       0       0       0
 14365 ;;      Temps:          0       0       0       0       0       0       0
 14366 ;;      Totals:        11       0       0       0       0       0       0
 14367 ;;Total ram usage:       11 bytes
 14368 ;; Hardware stack levels used:    1
 14369 ;; Hardware stack levels required when called:    3
 14370 ;; This function calls:
 14371 ;;		__ECANPointBuffer
 14372 ;;		__RegsToCANID
 14373 ;; This function is called by:
 14374 ;;		_getCANFrame
 14375 ;; This function uses a non-reentrant model
 14376 ;;
 14377                           
 14378                           	psect	text59
 14379  002AA0                     __ptext59:
 14380                           	opt stack 0
 14381  002AA0                     _ECANReceiveMessage:
 14382                           	opt stack 24
 14383                           
 14384                           ;incstack = 0
 14385                           ;incstack = 0
 14386                           ;ECANReceiveMessage@id stored from wreg
 14387  002AA0  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 14388                           
 14389                           ; BSR set to: 0
 14390                           ;ECAN.c: 805: BYTE mode;
 14391                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 14392                           ;ECAN.c: 809: char i;
 14393                           ;ECAN.c: 810: BYTE_VAL temp;
 14394                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 14395  002AA4  6A54               	clrf	__ECANRxFilterHitInfo,c
 14396                           
 14397                           ; BSR set to: 0
 14398                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 14399  002AA6  5077               	movf	3959,w,c	;volatile
 14400  002AA8  0BC0               	andlw	192
 14401  002AAA  6E16               	movwf	ECANReceiveMessage@mode,c
 14402                           
 14403                           ; BSR set to: 0
 14404                           ;ECAN.c: 816: if ( mode == 0x00 )
 14405  002AAC  6616               	tstfsz	ECANReceiveMessage@mode,c
 14406  002AAE  D032               	goto	l7089
 14407                           
 14408                           ; BSR set to: 0
 14409                           ;ECAN.c: 822: {
 14410                           ;ECAN.c: 824: if ( RXB0FUL )
 14411  002AB0  AE60               	btfss	3936,7,c	;volatile
 14412  002AB2  D012               	goto	l876
 14413                           
 14414                           ; BSR set to: 0
 14415                           ;ECAN.c: 825: {
 14416                           ;ECAN.c: 827: RXB0IF = 0;
 14417  002AB4  90A4               	bcf	4004,0,c	;volatile
 14418                           
 14419                           ;ECAN.c: 830: if ( RXB0OVFL )
 14420  002AB6  AE74               	btfss	3956,7,c	;volatile
 14421  002AB8  D006               	goto	l7065
 14422                           
 14423                           ; BSR set to: 0
 14424                           ;ECAN.c: 831: {
 14425                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 14426  002ABA  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14427  002ABC  6ED9               	movwf	fsr2l,c
 14428  002ABE  6ADA               	clrf	fsr2h,c
 14429  002AC0  0E00               	movlw	0
 14430  002AC2  86DB               	bsf	plusw2,3,c
 14431                           
 14432                           ; BSR set to: 0
 14433                           ;ECAN.c: 833: RXB0OVFL = 0;
 14434  002AC4  9E74               	bcf	3956,7,c	;volatile
 14435  002AC6                     l7065:
 14436                           
 14437                           ; BSR set to: 0
 14438                           ;ECAN.c: 834: }
 14439                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 14440  002AC6  A060               	btfss	3936,0,c	;volatile
 14441  002AC8  D002               	bra	u7115
 14442  002ACA  8054               	bsf	__ECANRxFilterHitInfo,0,c
 14443  002ACC  D001               	bra	u7117
 14444  002ACE                     u7115:
 14445  002ACE  9054               	bcf	__ECANRxFilterHitInfo,0,c
 14446  002AD0                     u7117:
 14447                           
 14448                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 14449  002AD0  0E0F               	movlw	15	;volatile
 14450  002AD2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14451  002AD4  0E60               	movlw	96	;volatile
 14452  002AD6  D01A               	goto	L42
 14453  002AD8                     l876:
 14454                           
 14455                           ; BSR set to: 0
 14456                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 14457  002AD8  010F               	movlb	15	; () banked
 14458  002ADA  AF50               	btfss	80,7,b	;volatile
 14459  002ADC  D019               	goto	l7083
 14460                           
 14461                           ; BSR set to: 15
 14462                           ;ECAN.c: 842: {
 14463                           ;ECAN.c: 844: RXB1IF = 0;
 14464  002ADE  92A4               	bcf	4004,1,c	;volatile
 14465                           
 14466                           ;ECAN.c: 847: if ( RXB1OVFL )
 14467  002AE0  AC74               	btfss	3956,6,c	;volatile
 14468  002AE2  D006               	goto	l7075
 14469                           
 14470                           ; BSR set to: 15
 14471                           ;ECAN.c: 848: {
 14472                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 14473  002AE4  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14474  002AE6  6ED9               	movwf	fsr2l,c
 14475  002AE8  6ADA               	clrf	fsr2h,c
 14476  002AEA  0E00               	movlw	0
 14477  002AEC  86DB               	bsf	plusw2,3,c
 14478                           
 14479                           ; BSR set to: 15
 14480                           ;ECAN.c: 850: RXB1OVFL = 0;
 14481  002AEE  9C74               	bcf	3956,6,c	;volatile
 14482  002AF0                     l7075:
 14483                           
 14484                           ; BSR set to: 15
 14485                           ;ECAN.c: 851: }
 14486                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 14487  002AF0  5150               	movf	80,w,b	;volatile
 14488  002AF2  0B07               	andlw	7
 14489  002AF4  6E54               	movwf	__ECANRxFilterHitInfo,c
 14490                           
 14491                           ; BSR set to: 15
 14492                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 14493  002AF6  0E02               	movlw	2
 14494  002AF8  6054               	cpfslt	__ECANRxFilterHitInfo,c
 14495  002AFA  D005               	goto	l7081
 14496                           
 14497                           ; BSR set to: 15
 14498                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 14499  002AFC  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14500  002AFE  6ED9               	movwf	fsr2l,c
 14501  002B00  6ADA               	clrf	fsr2h,c
 14502  002B02  0E00               	movlw	0
 14503  002B04  8EDB               	bsf	plusw2,7,c
 14504  002B06                     l7081:
 14505                           
 14506                           ; BSR set to: 15
 14507                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 14508  002B06  0E0F               	movlw	15	;volatile
 14509  002B08  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14510  002B0A  0E50               	movlw	80	;volatile
 14511  002B0C                     L42:
 14512  002B0C  6E18               	movwf	ECANReceiveMessage@ptr,c
 14513                           
 14514                           ;ECAN.c: 860: }
 14515  002B0E  D065               	goto	l7143
 14516  002B10                     l7083:
 14517                           
 14518                           ;ECAN.c: 861: else
 14519                           ;ECAN.c: 862: return FALSE;
 14520  002B10  0E00               	movlw	0
 14521  002B12  D0CC               	goto	l883
 14522  002B14                     l7089:
 14523                           
 14524                           ; BSR set to: 0
 14525                           ;ECAN.c: 869: else if ( mode == 0x40 )
 14526  002B14  5016               	movf	ECANReceiveMessage@mode,w,c
 14527  002B16  0A40               	xorlw	64
 14528  002B18  E146               	bnz	l886
 14529                           
 14530                           ; BSR set to: 0
 14531                           ;ECAN.c: 875: {
 14532                           ;ECAN.c: 876: if ( RXB0FUL )
 14533  002B1A  AE60               	btfss	3936,7,c	;volatile
 14534  002B1C  D004               	goto	l887
 14535                           
 14536                           ; BSR set to: 0
 14537                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 14538  002B1E  0E0F               	movlw	15	;volatile
 14539  002B20  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14540  002B22  0E60               	movlw	96	;volatile
 14541  002B24  D03E               	goto	L49
 14542  002B26                     l887:
 14543                           
 14544                           ; BSR set to: 0
 14545                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 14546  002B26  010F               	movlb	15	; () banked
 14547  002B28  AF50               	btfss	80,7,b	;volatile
 14548  002B2A  D004               	goto	l889
 14549                           
 14550                           ; BSR set to: 15
 14551                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 14552  002B2C  0E0F               	movlw	15	;volatile
 14553  002B2E  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14554  002B30  0E50               	movlw	80	;volatile
 14555  002B32  D037               	goto	L49
 14556  002B34                     l889:
 14557                           
 14558                           ; BSR set to: 15
 14559                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 14560  002B34  010D               	movlb	13
 14561  002B36  B5F8               	btfsc	248,2,b	;volatile
 14562  002B38  D007               	goto	l891
 14563  002B3A  010E               	movlb	14
 14564  002B3C  AF20               	btfss	32,7,b	;volatile
 14565  002B3E  D004               	goto	l891
 14566                           
 14567                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 14568  002B40  0E0E               	movlw	14	;volatile
 14569  002B42  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14570  002B44  0E20               	movlw	32	;volatile
 14571  002B46  D02D               	goto	L49
 14572  002B48                     l891:
 14573                           
 14574                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 14575  002B48  010D               	movlb	13
 14576  002B4A  B7F8               	btfsc	248,3,b	;volatile
 14577  002B4C  D007               	goto	l893
 14578  002B4E  010E               	movlb	14
 14579  002B50  AF30               	btfss	48,7,b	;volatile
 14580  002B52  D004               	goto	l893
 14581                           
 14582                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 14583  002B54  0E0E               	movlw	14	;volatile
 14584  002B56  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14585  002B58  0E30               	movlw	48	;volatile
 14586  002B5A  D023               	goto	L49
 14587  002B5C                     l893:
 14588                           
 14589                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 14590  002B5C  010D               	movlb	13
 14591  002B5E  B9F8               	btfsc	248,4,b	;volatile
 14592  002B60  D007               	goto	l895
 14593  002B62  010E               	movlb	14
 14594  002B64  AF40               	btfss	64,7,b	;volatile
 14595  002B66  D004               	goto	l895
 14596                           
 14597                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 14598  002B68  0E0E               	movlw	14	;volatile
 14599  002B6A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14600  002B6C  0E40               	movlw	64	;volatile
 14601  002B6E  D019               	goto	L49
 14602  002B70                     l895:
 14603                           
 14604                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 14605  002B70  010D               	movlb	13
 14606  002B72  BBF8               	btfsc	248,5,b	;volatile
 14607  002B74  D005               	goto	l897
 14608  002B76  010E               	movlb	14
 14609  002B78  AF50               	btfss	80,7,b	;volatile
 14610  002B7A  D002               	goto	l897
 14611                           
 14612                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 14613  002B7C  0E0E               	movlw	14	;volatile
 14614  002B7E  D7D7               	goto	L50
 14615  002B80                     l897:
 14616                           
 14617                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 14618  002B80  010D               	movlb	13
 14619  002B82  BDF8               	btfsc	248,6,b	;volatile
 14620  002B84  D005               	goto	l899
 14621  002B86  010E               	movlb	14
 14622  002B88  AF60               	btfss	96,7,b	;volatile
 14623  002B8A  D002               	goto	l899
 14624                           
 14625                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 14626  002B8C  0E0E               	movlw	14	;volatile
 14627  002B8E  D7C8               	goto	L51
 14628  002B90                     l899:
 14629                           
 14630                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 14631  002B90  010D               	movlb	13
 14632  002B92  BFF8               	btfsc	248,7,b	;volatile
 14633  002B94  D7BD               	goto	l7083
 14634  002B96  010E               	movlb	14
 14635  002B98  AF70               	btfss	112,7,b	;volatile
 14636  002B9A  D7BA               	goto	l7083
 14637                           
 14638                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 14639  002B9C  0E0E               	movlw	14	;volatile
 14640  002B9E  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14641  002BA0  0E70               	movlw	112	;volatile
 14642  002BA2                     L49:
 14643  002BA2  6E18               	movwf	ECANReceiveMessage@ptr,c
 14644  002BA4  D00A               	goto	l7133
 14645  002BA6                     l886:
 14646                           
 14647                           ; BSR set to: 0
 14648                           ;ECAN.c: 910: else
 14649                           ;ECAN.c: 915: {
 14650                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 14651  002BA6  AE74               	btfss	3956,7,c	;volatile
 14652  002BA8  D7B3               	goto	l7083
 14653                           
 14654                           ; BSR set to: 0
 14655                           ;ECAN.c: 917: {
 14656                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 14657  002BAA  506F               	movf	3951,w,c	;volatile
 14658  002BAC  0B07               	andlw	7
 14659  002BAE  EC5E  F01F         	call	__ECANPointBuffer
 14660  002BB2  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 14661  002BB6  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 14662  002BBA                     l7133:
 14663                           
 14664                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 14665  002BBA  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14666  002BBE  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14667  002BC2  50DF               	movf	indf2,w,c
 14668  002BC4  0B1F               	andlw	31
 14669  002BC6  6E54               	movwf	__ECANRxFilterHitInfo,c
 14670                           
 14671                           ;ECAN.c: 932: RXB1IF = 0;
 14672  002BC8  92A4               	bcf	4004,1,c	;volatile
 14673                           
 14674                           ;ECAN.c: 934: if ( RXB1OVFL )
 14675  002BCA  AC74               	btfss	3956,6,c	;volatile
 14676  002BCC  D006               	goto	l7143
 14677                           
 14678                           ;ECAN.c: 935: {
 14679                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 14680  002BCE  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14681  002BD0  6ED9               	movwf	fsr2l,c
 14682  002BD2  6ADA               	clrf	fsr2h,c
 14683  002BD4  0E00               	movlw	0
 14684  002BD6  86DB               	bsf	plusw2,3,c
 14685                           
 14686                           ;ECAN.c: 937: RXB1OVFL = 0;
 14687  002BD8  9C74               	bcf	3956,6,c	;volatile
 14688  002BDA                     l7143:
 14689                           
 14690                           ;ECAN.c: 942: savedPtr = ptr;
 14691  002BDA  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 14692  002BDE  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 14693                           
 14694                           ;ECAN.c: 943: *msgFlags = 0;
 14695  002BE2  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14696  002BE4  6ED9               	movwf	fsr2l,c
 14697  002BE6  6ADA               	clrf	fsr2h,c
 14698  002BE8  6ADF               	clrf	indf2,c
 14699                           
 14700                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 14701  002BEA  EE20 F005          	lfsr	2,5
 14702  002BEE  5018               	movf	ECANReceiveMessage@ptr,w,c
 14703  002BF0  26D9               	addwf	fsr2l,f,c
 14704  002BF2  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14705  002BF4  22DA               	addwfc	fsr2h,f,c
 14706  002BF6  50DF               	movf	indf2,w,c
 14707  002BF8  6E17               	movwf	ECANReceiveMessage@temp,c
 14708                           
 14709                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 14710  002BFA  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14711  002BFC  6ED9               	movwf	fsr2l,c
 14712  002BFE  6ADA               	clrf	fsr2h,c
 14713  002C00  5017               	movf	ECANReceiveMessage@temp,w,c
 14714  002C02  0B0F               	andlw	15
 14715  002C04  6EDF               	movwf	indf2,c
 14716                           
 14717                           ;ECAN.c: 950: if ( temp.bits.b6 )
 14718  002C06  AC17               	btfss	ECANReceiveMessage@temp,6,c
 14719  002C08  D005               	goto	l907
 14720                           
 14721                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 14722  002C0A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14723  002C0C  6ED9               	movwf	fsr2l,c
 14724  002C0E  6ADA               	clrf	fsr2h,c
 14725  002C10  0E00               	movlw	0
 14726  002C12  8CDB               	bsf	plusw2,6,c
 14727  002C14                     l907:
 14728                           
 14729                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 14730  002C14  EE20 F002          	lfsr	2,2
 14731  002C18  5018               	movf	ECANReceiveMessage@ptr,w,c
 14732  002C1A  26D9               	addwf	fsr2l,f,c
 14733  002C1C  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14734  002C1E  22DA               	addwfc	fsr2h,f,c
 14735  002C20  50DF               	movf	indf2,w,c
 14736  002C22  6E17               	movwf	ECANReceiveMessage@temp,c
 14737                           
 14738                           ;ECAN.c: 955: if ( temp.bits.b3 )
 14739  002C24  A617               	btfss	ECANReceiveMessage@temp,3,c
 14740  002C26  D008               	goto	l908
 14741                           
 14742                           ;ECAN.c: 956: {
 14743                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 14744  002C28  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14745  002C2A  6ED9               	movwf	fsr2l,c
 14746  002C2C  6ADA               	clrf	fsr2h,c
 14747  002C2E  0E00               	movlw	0
 14748  002C30  8ADB               	bsf	plusw2,5,c
 14749                           
 14750                           ;ECAN.c: 958: temp.Val = 1;
 14751  002C32  0E01               	movlw	1
 14752  002C34  6E17               	movwf	ECANReceiveMessage@temp,c
 14753                           
 14754                           ;ECAN.c: 959: }
 14755  002C36  D001               	goto	l7161
 14756  002C38                     l908:
 14757                           
 14758                           ;ECAN.c: 960: else
 14759                           ;ECAN.c: 961: temp.Val = 0;
 14760  002C38  6A17               	clrf	ECANReceiveMessage@temp,c
 14761  002C3A                     l7161:
 14762                           
 14763                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 14764  002C3A  2818               	incf	ECANReceiveMessage@ptr,w,c
 14765  002C3C  6E08               	movwf	?__RegsToCANID,c
 14766  002C3E  0E00               	movlw	0
 14767  002C40  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 14768  002C42  6E09               	movwf	?__RegsToCANID+1,c
 14769  002C44  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 14770  002C48  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 14771  002C4C  ECE3  F018         	call	__RegsToCANID	;wreg free
 14772                           
 14773                           ;ECAN.c: 966: ptr += 6;
 14774  002C50  0E06               	movlw	6
 14775  002C52  2618               	addwf	ECANReceiveMessage@ptr,f,c
 14776  002C54  0E00               	movlw	0
 14777  002C56  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 14778                           
 14779                           ;ECAN.c: 967: temp.Val = *dataLen;
 14780  002C58  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14781  002C5A  6ED9               	movwf	fsr2l,c
 14782  002C5C  6ADA               	clrf	fsr2h,c
 14783  002C5E  50DF               	movf	indf2,w,c
 14784  002C60  6E17               	movwf	ECANReceiveMessage@temp,c
 14785                           
 14786                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 14787  002C62  6A15               	clrf	ECANReceiveMessage@i,c
 14788  002C64  D00D               	goto	l7177
 14789  002C66                     l7169:
 14790                           
 14791                           ;ECAN.c: 969: *data++ = *ptr++;
 14792  002C66  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14793  002C6A  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14794  002C6E  500F               	movf	ECANReceiveMessage@data,w,c
 14795  002C70  6EE1               	movwf	fsr1l,c
 14796  002C72  6AE2               	clrf	fsr1h,c
 14797  002C74  CFDF FFE7          	movff	indf2,indf1
 14798  002C78  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 14799  002C7A  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 14800  002C7C  2A0F               	incf	ECANReceiveMessage@data,f,c
 14801  002C7E  2A15               	incf	ECANReceiveMessage@i,f,c
 14802  002C80                     l7177:
 14803  002C80  5017               	movf	ECANReceiveMessage@temp,w,c
 14804  002C82  5C15               	subwf	ECANReceiveMessage@i,w,c
 14805  002C84  E3F0               	bnc	l7169
 14806                           
 14807                           ;ECAN.c: 972: if ( IRXIF )
 14808  002C86  AEA4               	btfss	4004,7,c	;volatile
 14809  002C88  D006               	goto	l7183
 14810                           
 14811                           ;ECAN.c: 973: {
 14812                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 14813  002C8A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14814  002C8C  6ED9               	movwf	fsr2l,c
 14815  002C8E  6ADA               	clrf	fsr2h,c
 14816  002C90  0E00               	movlw	0
 14817  002C92  88DB               	bsf	plusw2,4,c
 14818                           
 14819                           ;ECAN.c: 975: IRXIF = 0;
 14820  002C94  9EA4               	bcf	4004,7,c	;volatile
 14821  002C96                     l7183:
 14822                           
 14823                           ;ECAN.c: 976: }
 14824                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 14825  002C96  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 14826  002C9A  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 14827  002C9E  0E7F               	movlw	127
 14828  002CA0  16DF               	andwf	indf2,f,c
 14829                           
 14830                           ;ECAN.c: 983: if ( mode == 0x80 )
 14831  002CA2  5016               	movf	ECANReceiveMessage@mode,w,c
 14832  002CA4  0A80               	xorlw	128
 14833  002CA6  B4D8               	btfsc	status,2,c
 14834                           
 14835                           ;ECAN.c: 984: FIFOEMPTY = 0;
 14836  002CA8  9E74               	bcf	3956,7,c	;volatile
 14837                           
 14838                           ;ECAN.c: 990: return TRUE;
 14839  002CAA  0E01               	movlw	1
 14840  002CAC                     l883:
 14841  002CAC  0012               	return	
 14842  002CAE                     __end_of_ECANReceiveMessage:
 14843                           	opt stack 0
 14844                           tblptru	equ	0xFF8
 14845                           tblptrh	equ	0xFF7
 14846                           tblptrl	equ	0xFF6
 14847                           tablat	equ	0xFF5
 14848                           prodh	equ	0xFF4
 14849                           prodl	equ	0xFF3
 14850                           postinc0	equ	0xFEE
 14851                           wreg	equ	0xFE8
 14852                           indf1	equ	0xFE7
 14853                           fsr1h	equ	0xFE2
 14854                           fsr1l	equ	0xFE1
 14855                           indf2	equ	0xFDF
 14856                           postinc2	equ	0xFDE
 14857                           postdec2	equ	0xFDD
 14858                           plusw2	equ	0xFDB
 14859                           fsr2h	equ	0xFDA
 14860                           fsr2l	equ	0xFD9
 14861                           status	equ	0xFD8
 14862                           
 14863 ;; *************** function __RegsToCANID *****************
 14864 ;; Defined at:
 14865 ;;		line 1156 in file "../ECAN.c"
 14866 ;; Parameters:    Size  Location     Type
 14867 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 14868 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14869 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14870 ;;  val             1    9[COMRAM] PTR unsigned long 
 14871 ;;		 -> getVSCPFrame@id(4), 
 14872 ;;  type            1   10[COMRAM] unsigned char 
 14873 ;; Auto vars:     Size  Location     Type
 14874 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 14875 ;;		 -> getVSCPFrame@id(4), 
 14876 ;; Return value:  Size  Location     Type
 14877 ;;		None               void
 14878 ;; Registers used:
 14879 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14880 ;; Tracked objects:
 14881 ;;		On entry : 0/0
 14882 ;;		On exit  : 0/0
 14883 ;;		Unchanged: 0/0
 14884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14885 ;;      Params:         4       0       0       0       0       0       0
 14886 ;;      Locals:         1       0       0       0       0       0       0
 14887 ;;      Temps:          2       0       0       0       0       0       0
 14888 ;;      Totals:         7       0       0       0       0       0       0
 14889 ;;Total ram usage:        7 bytes
 14890 ;; Hardware stack levels used:    1
 14891 ;; Hardware stack levels required when called:    2
 14892 ;; This function calls:
 14893 ;;		Nothing
 14894 ;; This function is called by:
 14895 ;;		_ECANReceiveMessage
 14896 ;; This function uses a non-reentrant model
 14897 ;;
 14898                           
 14899                           	psect	text60
 14900  0031C6                     __ptext60:
 14901                           	opt stack 0
 14902  0031C6                     __RegsToCANID:
 14903                           	opt stack 24
 14904                           
 14905                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 14906                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 14907                           
 14908                           ;incstack = 0
 14909                           ;incstack = 0
 14910  0031C6  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 14911                           
 14912                           ;ECAN.c: 1161: if ( type == 0 )
 14913  0031CA  660B               	tstfsz	__RegsToCANID@type,c
 14914  0031CC  D046               	goto	l7257
 14915                           
 14916                           ;ECAN.c: 1162: {
 14917                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 14918  0031CE  500E               	movf	__RegsToCANID@Value,w,c
 14919  0031D0  6ED9               	movwf	fsr2l,c
 14920  0031D2  6ADA               	clrf	fsr2h,c
 14921  0031D4  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14922  0031D8  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14923  0031DC  50E7               	movf	indf1,w,c
 14924  0031DE  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14925  0031E0  90D8               	bcf	status,0,c
 14926  0031E2  360C               	rlcf	??__RegsToCANID,f,c
 14927  0031E4  90D8               	bcf	status,0,c
 14928  0031E6  360C               	rlcf	??__RegsToCANID,f,c
 14929  0031E8  90D8               	bcf	status,0,c
 14930  0031EA  340C               	rlcf	??__RegsToCANID,w,c
 14931  0031EC  6EDF               	movwf	indf2,c
 14932                           
 14933                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 14934  0031EE  500E               	movf	__RegsToCANID@Value,w,c
 14935  0031F0  6ED9               	movwf	fsr2l,c
 14936  0031F2  6ADA               	clrf	fsr2h,c
 14937  0031F4  2AD9               	incf	fsr2l,f,c
 14938  0031F6  6ADA               	clrf	fsr2h,c
 14939  0031F8  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14940  0031FC  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14941  003200  50E7               	movf	indf1,w,c
 14942  003202  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14943  003204  0E05               	movlw	5
 14944  003206  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14945  003208                     u7435:
 14946  003208  90D8               	bcf	status,0,c
 14947  00320A  320C               	rrcf	??__RegsToCANID,f,c
 14948  00320C  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14949  00320E  D7FC               	goto	u7435
 14950  003210  500C               	movf	??__RegsToCANID,w,c
 14951  003212  6EDF               	movwf	indf2,c
 14952                           
 14953                           ;ECAN.c: 1166: ptr++;
 14954  003214  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14955  003216  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14956                           
 14957                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 14958  003218  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14959  00321C  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14960  003220  50DF               	movf	indf2,w,c
 14961  003222  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14962  003224  0E05               	movlw	5
 14963  003226  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14964  003228                     u7445:
 14965  003228  90D8               	bcf	status,0,c
 14966  00322A  320C               	rrcf	??__RegsToCANID,f,c
 14967  00322C  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14968  00322E  D7FC               	goto	u7445
 14969  003230  500E               	movf	__RegsToCANID@Value,w,c
 14970  003232  6ED9               	movwf	fsr2l,c
 14971  003234  6ADA               	clrf	fsr2h,c
 14972  003236  500C               	movf	??__RegsToCANID,w,c
 14973  003238  12DF               	iorwf	indf2,f,c
 14974                           
 14975                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 14976  00323A  500E               	movf	__RegsToCANID@Value,w,c
 14977  00323C  6ED9               	movwf	fsr2l,c
 14978  00323E  6ADA               	clrf	fsr2h,c
 14979  003240  0E02               	movlw	2
 14980  003242  26D9               	addwf	fsr2l,f,c
 14981  003244  6ADA               	clrf	fsr2h,c
 14982  003246  6ADF               	clrf	indf2,c
 14983                           
 14984                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 14985  003248  500E               	movf	__RegsToCANID@Value,w,c
 14986  00324A  6ED9               	movwf	fsr2l,c
 14987  00324C  6ADA               	clrf	fsr2h,c
 14988  00324E  0E03               	movlw	3
 14989  003250  26D9               	addwf	fsr2l,f,c
 14990  003252  6ADA               	clrf	fsr2h,c
 14991  003254  0E00               	movlw	0
 14992  003256  6EDF               	movwf	indf2,c
 14993                           
 14994                           ;ECAN.c: 1170: }
 14995  003258  D067               	goto	l930
 14996  00325A                     l7257:
 14997                           
 14998                           ;ECAN.c: 1171: else
 14999                           ;ECAN.c: 1172: {
 15000                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 15001  00325A  500E               	movf	__RegsToCANID@Value,w,c
 15002  00325C  6ED9               	movwf	fsr2l,c
 15003  00325E  6ADA               	clrf	fsr2h,c
 15004  003260  0E02               	movlw	2
 15005  003262  26D9               	addwf	fsr2l,f,c
 15006  003264  6ADA               	clrf	fsr2h,c
 15007  003266  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 15008  00326A  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 15009  00326E  50E7               	movf	indf1,w,c
 15010  003270  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15011  003272  0E05               	movlw	5
 15012  003274  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 15013  003276                     u7455:
 15014  003276  90D8               	bcf	status,0,c
 15015  003278  360C               	rlcf	??__RegsToCANID,f,c
 15016  00327A  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 15017  00327C  D7FC               	goto	u7455
 15018  00327E  500C               	movf	??__RegsToCANID,w,c
 15019  003280  6EDF               	movwf	indf2,c
 15020                           
 15021                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 15022  003282  500E               	movf	__RegsToCANID@Value,w,c
 15023  003284  6ED9               	movwf	fsr2l,c
 15024  003286  6ADA               	clrf	fsr2h,c
 15025  003288  0E03               	movlw	3
 15026  00328A  26D9               	addwf	fsr2l,f,c
 15027  00328C  6ADA               	clrf	fsr2h,c
 15028  00328E  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 15029  003292  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 15030  003296  50E7               	movf	indf1,w,c
 15031  003298  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15032  00329A  90D8               	bcf	status,0,c
 15033  00329C  320C               	rrcf	??__RegsToCANID,f,c
 15034  00329E  90D8               	bcf	status,0,c
 15035  0032A0  320C               	rrcf	??__RegsToCANID,f,c
 15036  0032A2  90D8               	bcf	status,0,c
 15037  0032A4  300C               	rrcf	??__RegsToCANID,w,c
 15038  0032A6  6EDF               	movwf	indf2,c
 15039                           
 15040                           ;ECAN.c: 1176: ptr++;
 15041  0032A8  4A08               	infsnz	__RegsToCANID@ptr,f,c
 15042  0032AA  2A09               	incf	__RegsToCANID@ptr+1,f,c
 15043                           
 15044                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 15045  0032AC  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15046  0032B0  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15047  0032B4  50DF               	movf	indf2,w,c
 15048  0032B6  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15049  0032B8  0E03               	movlw	3
 15050  0032BA  160C               	andwf	??__RegsToCANID,f,c
 15051  0032BC  500E               	movf	__RegsToCANID@Value,w,c
 15052  0032BE  6ED9               	movwf	fsr2l,c
 15053  0032C0  6ADA               	clrf	fsr2h,c
 15054  0032C2  0E02               	movlw	2
 15055  0032C4  26D9               	addwf	fsr2l,f,c
 15056  0032C6  6ADA               	clrf	fsr2h,c
 15057  0032C8  500C               	movf	??__RegsToCANID,w,c
 15058  0032CA  12DF               	iorwf	indf2,f,c
 15059                           
 15060                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 15061  0032CC  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15062  0032D0  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15063  0032D4  50DF               	movf	indf2,w,c
 15064  0032D6  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15065  0032D8  90D8               	bcf	status,0,c
 15066  0032DA  320C               	rrcf	??__RegsToCANID,f,c
 15067  0032DC  90D8               	bcf	status,0,c
 15068  0032DE  320C               	rrcf	??__RegsToCANID,f,c
 15069  0032E0  90D8               	bcf	status,0,c
 15070  0032E2  320C               	rrcf	??__RegsToCANID,f,c
 15071  0032E4  0E1C               	movlw	28
 15072  0032E6  160C               	andwf	??__RegsToCANID,f,c
 15073  0032E8  500E               	movf	__RegsToCANID@Value,w,c
 15074  0032EA  6ED9               	movwf	fsr2l,c
 15075  0032EC  6ADA               	clrf	fsr2h,c
 15076  0032EE  0E02               	movlw	2
 15077  0032F0  26D9               	addwf	fsr2l,f,c
 15078  0032F2  6ADA               	clrf	fsr2h,c
 15079  0032F4  500C               	movf	??__RegsToCANID,w,c
 15080  0032F6  12DF               	iorwf	indf2,f,c
 15081                           
 15082                           ;ECAN.c: 1180: ptr++;
 15083  0032F8  4A08               	infsnz	__RegsToCANID@ptr,f,c
 15084  0032FA  2A09               	incf	__RegsToCANID@ptr+1,f,c
 15085                           
 15086                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 15087  0032FC  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15088  003300  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15089  003304  500E               	movf	__RegsToCANID@Value,w,c
 15090  003306  6EE1               	movwf	fsr1l,c
 15091  003308  6AE2               	clrf	fsr1h,c
 15092  00330A  2AE1               	incf	fsr1l,f,c
 15093  00330C  6AE2               	clrf	fsr1h,c
 15094  00330E  CFDF FFE7          	movff	indf2,indf1
 15095                           
 15096                           ;ECAN.c: 1182: ptr++;
 15097  003312  4A08               	infsnz	__RegsToCANID@ptr,f,c
 15098  003314  2A09               	incf	__RegsToCANID@ptr+1,f,c
 15099                           
 15100                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 15101  003316  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15102  00331A  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15103  00331E  500E               	movf	__RegsToCANID@Value,w,c
 15104  003320  6EE1               	movwf	fsr1l,c
 15105  003322  6AE2               	clrf	fsr1h,c
 15106  003324  CFDF FFE7          	movff	indf2,indf1
 15107  003328                     l930:
 15108  003328  0012               	return	
 15109  00332A                     __end_of__RegsToCANID:
 15110                           	opt stack 0
 15111                           tblptru	equ	0xFF8
 15112                           tblptrh	equ	0xFF7
 15113                           tblptrl	equ	0xFF6
 15114                           tablat	equ	0xFF5
 15115                           prodh	equ	0xFF4
 15116                           prodl	equ	0xFF3
 15117                           postinc0	equ	0xFEE
 15118                           wreg	equ	0xFE8
 15119                           indf1	equ	0xFE7
 15120                           fsr1h	equ	0xFE2
 15121                           fsr1l	equ	0xFE1
 15122                           indf2	equ	0xFDF
 15123                           postinc2	equ	0xFDE
 15124                           postdec2	equ	0xFDD
 15125                           plusw2	equ	0xFDB
 15126                           fsr2h	equ	0xFDA
 15127                           fsr2l	equ	0xFD9
 15128                           status	equ	0xFD8
 15129                           
 15130 ;; *************** function __ECANPointBuffer *****************
 15131 ;; Defined at:
 15132 ;;		line 1207 in file "../ECAN.c"
 15133 ;; Parameters:    Size  Location     Type
 15134 ;;  b               1    wreg     unsigned char 
 15135 ;; Auto vars:     Size  Location     Type
 15136 ;;  b               1   10[COMRAM] unsigned char 
 15137 ;;  pt              2   11[COMRAM] PTR unsigned char 
 15138 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 15139 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 15140 ;; Return value:  Size  Location     Type
 15141 ;;                  2    7[COMRAM] PTR unsigned char 
 15142 ;; Registers used:
 15143 ;;		wreg, status,2, status,0
 15144 ;; Tracked objects:
 15145 ;;		On entry : F/0
 15146 ;;		On exit  : 0/0
 15147 ;;		Unchanged: 0/0
 15148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15149 ;;      Params:         3       0       0       0       0       0       0
 15150 ;;      Locals:         3       0       0       0       0       0       0
 15151 ;;      Temps:          0       0       0       0       0       0       0
 15152 ;;      Totals:         6       0       0       0       0       0       0
 15153 ;;Total ram usage:        6 bytes
 15154 ;; Hardware stack levels used:    1
 15155 ;; Hardware stack levels required when called:    2
 15156 ;; This function calls:
 15157 ;;		Nothing
 15158 ;; This function is called by:
 15159 ;;		_ECANReceiveMessage
 15160 ;; This function uses a non-reentrant model
 15161 ;;
 15162                           
 15163                           	psect	text61
 15164  003EBC                     __ptext61:
 15165                           	opt stack 0
 15166  003EBC                     __ECANPointBuffer:
 15167                           	opt stack 24
 15168                           
 15169                           ;incstack = 0
 15170                           ;incstack = 0
 15171                           ;__ECANPointBuffer@b stored from wreg
 15172  003EBC  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 15173                           
 15174                           ; BSR set to: 0
 15175                           ;ECAN.c: 1208: BYTE* pt;
 15176                           ;ECAN.c: 1210: switch(b)
 15177  003EC0  D024               	goto	l7243
 15178  003EC2                     l7225:
 15179                           
 15180                           ; BSR set to: 0
 15181                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 15182  003EC2  0E0F               	movlw	15	;volatile
 15183  003EC4  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15184  003EC6  0E60               	movlw	96	;volatile
 15185  003EC8  D01E               	goto	L58
 15186  003ECA                     l7227:
 15187                           
 15188                           ; BSR set to: 0
 15189                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 15190  003ECA  010F               	movlb	15	; () banked
 15191  003ECC  0E0F               	movlw	15	;volatile
 15192  003ECE  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15193  003ED0  0E50               	movlw	80	;volatile
 15194  003ED2  D019               	goto	L58
 15195  003ED4                     l7229:
 15196                           
 15197                           ; BSR set to: 0
 15198                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 15199  003ED4  010E               	movlb	14	; () banked
 15200  003ED6  0E0E               	movlw	14	;volatile
 15201  003ED8  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15202  003EDA  0E20               	movlw	32	;volatile
 15203  003EDC  D014               	goto	L58
 15204  003EDE                     l7231:
 15205                           
 15206                           ; BSR set to: 0
 15207                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 15208  003EDE  010E               	movlb	14	; () banked
 15209  003EE0  0E0E               	movlw	14	;volatile
 15210  003EE2  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15211  003EE4  0E30               	movlw	48	;volatile
 15212  003EE6  D00F               	goto	L58
 15213  003EE8                     l7233:
 15214                           
 15215                           ; BSR set to: 0
 15216                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 15217  003EE8  010E               	movlb	14	; () banked
 15218  003EEA  0E0E               	movlw	14	;volatile
 15219  003EEC  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15220  003EEE  0E40               	movlw	64	;volatile
 15221  003EF0  D00A               	goto	L58
 15222  003EF2                     l7235:
 15223                           
 15224                           ; BSR set to: 0
 15225                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 15226  003EF2  010E               	movlb	14	; () banked
 15227  003EF4  0E0E               	movlw	14	;volatile
 15228  003EF6  D7EB               	goto	L59
 15229  003EF8                     l7237:
 15230                           
 15231                           ; BSR set to: 0
 15232                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 15233  003EF8  010E               	movlb	14	; () banked
 15234  003EFA  0E0E               	movlw	14	;volatile
 15235  003EFC  D7E3               	goto	L60
 15236  003EFE                     l7239:
 15237                           
 15238                           ; BSR set to: 0
 15239                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 15240  003EFE  010E               	movlb	14	; () banked
 15241  003F00  0E0E               	movlw	14	;volatile
 15242  003F02  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15243  003F04  0E70               	movlw	112	;volatile
 15244  003F06                     L58:
 15245  003F06  6E0C               	movwf	__ECANPointBuffer@pt,c
 15246                           
 15247                           ;ECAN.c: 1235: break;
 15248  003F08  D00F               	goto	l935
 15249  003F0A                     l7243:
 15250                           
 15251                           ; BSR set to: 0
 15252  003F0A  500B               	movf	__ECANPointBuffer@b,w,c
 15253                           
 15254                           ; Switch size 1, requested type "speed"
 15255                           ; Number of cases is 7, Range of values is 0 to 6
 15256                           ; switch strategies available:
 15257                           ; Name         Instructions Cycles
 15258                           ; simple_byte           22    12 (average)
 15259                           ;	Chosen strategy is simple_byte
 15260  003F0C  E0DA               	bz	l7225
 15261  003F0E  0A01               	xorlw	1	; case 1
 15262  003F10  E0DC               	bz	l7227
 15263  003F12  0A03               	xorlw	3	; case 2
 15264  003F14  E0DF               	bz	l7229
 15265  003F16  0A01               	xorlw	1	; case 3
 15266  003F18  E0E2               	bz	l7231
 15267  003F1A  0A07               	xorlw	7	; case 4
 15268  003F1C  E0E5               	bz	l7233
 15269  003F1E  0A01               	xorlw	1	; case 5
 15270  003F20  E0E8               	bz	l7235
 15271  003F22  0A03               	xorlw	3	; case 6
 15272  003F24  E0E9               	bz	l7237
 15273  003F26  D7EB               	goto	l7239
 15274  003F28                     l935:
 15275                           
 15276                           ;ECAN.c: 1237: return (pt);
 15277  003F28  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 15278  003F2C  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 15279  003F30  0012               	return	
 15280  003F32                     __end_of__ECANPointBuffer:
 15281                           	opt stack 0
 15282                           tblptru	equ	0xFF8
 15283                           tblptrh	equ	0xFF7
 15284                           tblptrl	equ	0xFF6
 15285                           tablat	equ	0xFF5
 15286                           prodh	equ	0xFF4
 15287                           prodl	equ	0xFF3
 15288                           postinc0	equ	0xFEE
 15289                           wreg	equ	0xFE8
 15290                           indf1	equ	0xFE7
 15291                           fsr1h	equ	0xFE2
 15292                           fsr1l	equ	0xFE1
 15293                           indf2	equ	0xFDF
 15294                           postinc2	equ	0xFDE
 15295                           postdec2	equ	0xFDD
 15296                           plusw2	equ	0xFDB
 15297                           fsr2h	equ	0xFDA
 15298                           fsr2l	equ	0xFD9
 15299                           status	equ	0xFD8
 15300                           
 15301 ;; *************** function _vscp_check_pstorage *****************
 15302 ;; Defined at:
 15303 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 15304 ;; Parameters:    Size  Location     Type
 15305 ;;		None
 15306 ;; Auto vars:     Size  Location     Type
 15307 ;;		None
 15308 ;; Return value:  Size  Location     Type
 15309 ;;                  1    wreg      unsigned char 
 15310 ;; Registers used:
 15311 ;;		wreg, status,2, status,0, cstack
 15312 ;; Tracked objects:
 15313 ;;		On entry : 0/0
 15314 ;;		On exit  : 0/0
 15315 ;;		Unchanged: 0/0
 15316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15317 ;;      Params:         0       0       0       0       0       0       0
 15318 ;;      Locals:         0       0       0       0       0       0       0
 15319 ;;      Temps:          0       0       0       0       0       0       0
 15320 ;;      Totals:         0       0       0       0       0       0       0
 15321 ;;Total ram usage:        0 bytes
 15322 ;; Hardware stack levels used:    1
 15323 ;; Hardware stack levels required when called:    4
 15324 ;; This function calls:
 15325 ;;		_vscp_writeNicknamePermanent
 15326 ;;		_vscp_getSegmentCRC
 15327 ;;		_vscp_setSegmentCRC
 15328 ;;		_vscp_setControlByte
 15329 ;; This function is called by:
 15330 ;;		_main
 15331 ;; This function uses a non-reentrant model
 15332 ;;
 15333                           
 15334                           	psect	text62
 15335  0042A4                     __ptext62:
 15336                           	opt stack 0
 15337  0042A4                     _vscp_check_pstorage:
 15338                           	opt stack 26
 15339                           
 15340                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 15341                           
 15342                           ;incstack = 0
 15343                           ;incstack = 0
 15344  0042A4  EC68  F022         	call	_vscp_getSegmentCRC	;wreg free
 15345  0042A8  0BC0               	andlw	192
 15346  0042AA  0A40               	xorlw	64
 15347  0042AC  E102               	bnz	l7721
 15348                           
 15349                           ;vscp_firmware.c: 172: return !0;
 15350  0042AE  0E01               	movlw	1
 15351  0042B0  D00A               	goto	l1055
 15352  0042B2                     l7721:
 15353                           
 15354                           ;vscp_firmware.c: 173: }
 15355                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 15356  0042B2  0EFF               	movlw	255
 15357  0042B4  EC0B  F022         	call	_vscp_writeNicknamePermanent
 15358                           
 15359                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 15360  0042B8  0E00               	movlw	0
 15361  0042BA  EC00  F022         	call	_vscp_setSegmentCRC
 15362                           
 15363                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 15364  0042BE  0EA0               	movlw	160
 15365  0042C0  ECF5  F021         	call	_vscp_setControlByte
 15366                           
 15367                           ;vscp_firmware.c: 185: return 0;
 15368  0042C4  0E00               	movlw	0
 15369  0042C6                     l1055:
 15370  0042C6  0012               	return	
 15371  0042C8                     __end_of_vscp_check_pstorage:
 15372                           	opt stack 0
 15373                           tblptru	equ	0xFF8
 15374                           tblptrh	equ	0xFF7
 15375                           tblptrl	equ	0xFF6
 15376                           tablat	equ	0xFF5
 15377                           prodh	equ	0xFF4
 15378                           prodl	equ	0xFF3
 15379                           postinc0	equ	0xFEE
 15380                           wreg	equ	0xFE8
 15381                           indf1	equ	0xFE7
 15382                           fsr1h	equ	0xFE2
 15383                           fsr1l	equ	0xFE1
 15384                           indf2	equ	0xFDF
 15385                           postinc2	equ	0xFDE
 15386                           postdec2	equ	0xFDD
 15387                           plusw2	equ	0xFDB
 15388                           fsr2h	equ	0xFDA
 15389                           fsr2l	equ	0xFD9
 15390                           status	equ	0xFD8
 15391                           
 15392 ;; *************** function _vscp_setControlByte *****************
 15393 ;; Defined at:
 15394 ;;		line 2455 in file "../main.c"
 15395 ;; Parameters:    Size  Location     Type
 15396 ;;  ctrl            1    wreg     unsigned char 
 15397 ;; Auto vars:     Size  Location     Type
 15398 ;;  ctrl            1   11[COMRAM] unsigned char 
 15399 ;; Return value:  Size  Location     Type
 15400 ;;		None               void
 15401 ;; Registers used:
 15402 ;;		wreg, status,2, cstack
 15403 ;; Tracked objects:
 15404 ;;		On entry : 0/0
 15405 ;;		On exit  : 0/0
 15406 ;;		Unchanged: 0/0
 15407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15408 ;;      Params:         0       0       0       0       0       0       0
 15409 ;;      Locals:         1       0       0       0       0       0       0
 15410 ;;      Temps:          0       0       0       0       0       0       0
 15411 ;;      Totals:         1       0       0       0       0       0       0
 15412 ;;Total ram usage:        1 bytes
 15413 ;; Hardware stack levels used:    1
 15414 ;; Hardware stack levels required when called:    3
 15415 ;; This function calls:
 15416 ;;		_Busy_eep
 15417 ;;		_Write_b_eep
 15418 ;; This function is called by:
 15419 ;;		_vscp_check_pstorage
 15420 ;; This function uses a non-reentrant model
 15421 ;;
 15422                           
 15423                           	psect	text63
 15424  0043EA                     __ptext63:
 15425                           	opt stack 0
 15426  0043EA                     _vscp_setControlByte:
 15427                           	opt stack 26
 15428                           
 15429                           ;incstack = 0
 15430                           ;incstack = 0
 15431                           ;vscp_setControlByte@ctrl stored from wreg
 15432  0043EA  CFE8 F00C          	movff	wreg,vscp_setControlByte@ctrl
 15433                           
 15434                           ;main.c: 2456: (Busy_eep(), Write_b_eep(0x03,ctrl));
 15435  0043EE  EC71  F022         	call	_Busy_eep	;wreg free
 15436  0043F2  6A09               	clrf	?_Write_b_eep+1,c
 15437  0043F4  0E03               	movlw	3
 15438  0043F6  6E08               	movwf	?_Write_b_eep,c
 15439  0043F8  C00C  F00A         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 15440  0043FC  EF56  F020         	goto	_Write_b_eep	;wreg free
 15441  004400                     __end_of_vscp_setControlByte:
 15442                           	opt stack 0
 15443                           tblptru	equ	0xFF8
 15444                           tblptrh	equ	0xFF7
 15445                           tblptrl	equ	0xFF6
 15446                           tablat	equ	0xFF5
 15447                           prodh	equ	0xFF4
 15448                           prodl	equ	0xFF3
 15449                           postinc0	equ	0xFEE
 15450                           wreg	equ	0xFE8
 15451                           indf1	equ	0xFE7
 15452                           fsr1h	equ	0xFE2
 15453                           fsr1l	equ	0xFE1
 15454                           indf2	equ	0xFDF
 15455                           postinc2	equ	0xFDE
 15456                           postdec2	equ	0xFDD
 15457                           plusw2	equ	0xFDB
 15458                           fsr2h	equ	0xFDA
 15459                           fsr2l	equ	0xFD9
 15460                           status	equ	0xFD8
 15461                           
 15462 ;; *************** function _vscp_setSegmentCRC *****************
 15463 ;; Defined at:
 15464 ;;		line 2446 in file "../main.c"
 15465 ;; Parameters:    Size  Location     Type
 15466 ;;  crc             1    wreg     unsigned char 
 15467 ;; Auto vars:     Size  Location     Type
 15468 ;;  crc             1   11[COMRAM] unsigned char 
 15469 ;; Return value:  Size  Location     Type
 15470 ;;		None               void
 15471 ;; Registers used:
 15472 ;;		wreg, status,2, cstack
 15473 ;; Tracked objects:
 15474 ;;		On entry : 0/0
 15475 ;;		On exit  : 0/0
 15476 ;;		Unchanged: 0/0
 15477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15478 ;;      Params:         0       0       0       0       0       0       0
 15479 ;;      Locals:         1       0       0       0       0       0       0
 15480 ;;      Temps:          0       0       0       0       0       0       0
 15481 ;;      Totals:         1       0       0       0       0       0       0
 15482 ;;Total ram usage:        1 bytes
 15483 ;; Hardware stack levels used:    1
 15484 ;; Hardware stack levels required when called:    3
 15485 ;; This function calls:
 15486 ;;		_Busy_eep
 15487 ;;		_Write_b_eep
 15488 ;; This function is called by:
 15489 ;;		_vscp_check_pstorage
 15490 ;;		_vscp_handleProbeState
 15491 ;;		_vscp_handleHeartbeat
 15492 ;;		_vscp_handleSetNickname
 15493 ;; This function uses a non-reentrant model
 15494 ;;
 15495                           
 15496                           	psect	text64
 15497  004400                     __ptext64:
 15498                           	opt stack 0
 15499  004400                     _vscp_setSegmentCRC:
 15500                           	opt stack 25
 15501                           
 15502                           ;incstack = 0
 15503                           ;incstack = 0
 15504                           ;vscp_setSegmentCRC@crc stored from wreg
 15505  004400  CFE8 F00C          	movff	wreg,vscp_setSegmentCRC@crc
 15506                           
 15507                           ;main.c: 2447: (Busy_eep(), Write_b_eep(0x02,crc));
 15508  004404  EC71  F022         	call	_Busy_eep	;wreg free
 15509  004408  6A09               	clrf	?_Write_b_eep+1,c
 15510  00440A  0E02               	movlw	2
 15511  00440C  6E08               	movwf	?_Write_b_eep,c
 15512  00440E  C00C  F00A         	movff	vscp_setSegmentCRC@crc,?_Write_b_eep+2
 15513  004412  EF56  F020         	goto	_Write_b_eep	;wreg free
 15514  004416                     __end_of_vscp_setSegmentCRC:
 15515                           	opt stack 0
 15516                           tblptru	equ	0xFF8
 15517                           tblptrh	equ	0xFF7
 15518                           tblptrl	equ	0xFF6
 15519                           tablat	equ	0xFF5
 15520                           prodh	equ	0xFF4
 15521                           prodl	equ	0xFF3
 15522                           postinc0	equ	0xFEE
 15523                           wreg	equ	0xFE8
 15524                           indf1	equ	0xFE7
 15525                           fsr1h	equ	0xFE2
 15526                           fsr1l	equ	0xFE1
 15527                           indf2	equ	0xFDF
 15528                           postinc2	equ	0xFDE
 15529                           postdec2	equ	0xFDD
 15530                           plusw2	equ	0xFDB
 15531                           fsr2h	equ	0xFDA
 15532                           fsr2l	equ	0xFD9
 15533                           status	equ	0xFD8
 15534                           
 15535 ;; *************** function _vscp_getSegmentCRC *****************
 15536 ;; Defined at:
 15537 ;;		line 2437 in file "../main.c"
 15538 ;; Parameters:    Size  Location     Type
 15539 ;;		None
 15540 ;; Auto vars:     Size  Location     Type
 15541 ;;		None
 15542 ;; Return value:  Size  Location     Type
 15543 ;;                  1    wreg      unsigned char 
 15544 ;; Registers used:
 15545 ;;		wreg, status,2, cstack
 15546 ;; Tracked objects:
 15547 ;;		On entry : 0/0
 15548 ;;		On exit  : 0/0
 15549 ;;		Unchanged: 0/0
 15550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15551 ;;      Params:         0       0       0       0       0       0       0
 15552 ;;      Locals:         0       0       0       0       0       0       0
 15553 ;;      Temps:          0       0       0       0       0       0       0
 15554 ;;      Totals:         0       0       0       0       0       0       0
 15555 ;;Total ram usage:        0 bytes
 15556 ;; Hardware stack levels used:    1
 15557 ;; Hardware stack levels required when called:    3
 15558 ;; This function calls:
 15559 ;;		_Read_b_eep
 15560 ;; This function is called by:
 15561 ;;		_vscp_check_pstorage
 15562 ;;		_vscp_handleHeartbeat
 15563 ;; This function uses a non-reentrant model
 15564 ;;
 15565                           
 15566                           	psect	text65
 15567  0044D0                     __ptext65:
 15568                           	opt stack 0
 15569  0044D0                     _vscp_getSegmentCRC:
 15570                           	opt stack 25
 15571                           
 15572                           ;main.c: 2438: return Read_b_eep(0x02);
 15573                           
 15574                           ;incstack = 0
 15575                           ;incstack = 0
 15576  0044D0  6A09               	clrf	?_Read_b_eep+1,c
 15577  0044D2  0E02               	movlw	2
 15578  0044D4  6E08               	movwf	?_Read_b_eep,c
 15579  0044D6  EF3D  F022         	goto	_Read_b_eep	;wreg free
 15580  0044DA                     __end_of_vscp_getSegmentCRC:
 15581                           	opt stack 0
 15582                           tblptru	equ	0xFF8
 15583                           tblptrh	equ	0xFF7
 15584                           tblptrl	equ	0xFF6
 15585                           tablat	equ	0xFF5
 15586                           prodh	equ	0xFF4
 15587                           prodl	equ	0xFF3
 15588                           postinc0	equ	0xFEE
 15589                           wreg	equ	0xFE8
 15590                           indf1	equ	0xFE7
 15591                           fsr1h	equ	0xFE2
 15592                           fsr1l	equ	0xFE1
 15593                           indf2	equ	0xFDF
 15594                           postinc2	equ	0xFDE
 15595                           postdec2	equ	0xFDD
 15596                           plusw2	equ	0xFDB
 15597                           fsr2h	equ	0xFDA
 15598                           fsr2l	equ	0xFD9
 15599                           status	equ	0xFD8
 15600                           
 15601 ;; *************** function _vscp_writeNicknamePermanent *****************
 15602 ;; Defined at:
 15603 ;;		line 861 in file "../main.c"
 15604 ;; Parameters:    Size  Location     Type
 15605 ;;  nickname        1    wreg     unsigned char 
 15606 ;; Auto vars:     Size  Location     Type
 15607 ;;  nickname        1   11[COMRAM] unsigned char 
 15608 ;; Return value:  Size  Location     Type
 15609 ;;		None               void
 15610 ;; Registers used:
 15611 ;;		wreg, status,2, cstack
 15612 ;; Tracked objects:
 15613 ;;		On entry : 0/0
 15614 ;;		On exit  : 0/0
 15615 ;;		Unchanged: 0/0
 15616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15617 ;;      Params:         0       0       0       0       0       0       0
 15618 ;;      Locals:         1       0       0       0       0       0       0
 15619 ;;      Temps:          0       0       0       0       0       0       0
 15620 ;;      Totals:         1       0       0       0       0       0       0
 15621 ;;Total ram usage:        1 bytes
 15622 ;; Hardware stack levels used:    1
 15623 ;; Hardware stack levels required when called:    3
 15624 ;; This function calls:
 15625 ;;		_Busy_eep
 15626 ;;		_Write_b_eep
 15627 ;; This function is called by:
 15628 ;;		_vscp_check_pstorage
 15629 ;;		_vscp_handleProbeState
 15630 ;;		_vscp_handleHeartbeat
 15631 ;;		_vscp_handleSetNickname
 15632 ;;		_vscp_handleDropNickname
 15633 ;; This function uses a non-reentrant model
 15634 ;;
 15635                           
 15636                           	psect	text66
 15637  004416                     __ptext66:
 15638                           	opt stack 0
 15639  004416                     _vscp_writeNicknamePermanent:
 15640                           	opt stack 25
 15641                           
 15642                           ;incstack = 0
 15643                           ;incstack = 0
 15644                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 15645  004416  CFE8 F00C          	movff	wreg,vscp_writeNicknamePermanent@nickname
 15646                           
 15647                           ;main.c: 862: (Busy_eep(), Write_b_eep(0x01,nickname));
 15648  00441A  EC71  F022         	call	_Busy_eep	;wreg free
 15649  00441E  6A09               	clrf	?_Write_b_eep+1,c
 15650  004420  0E01               	movlw	1
 15651  004422  6E08               	movwf	?_Write_b_eep,c
 15652  004424  C00C  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 15653  004428  EF56  F020         	goto	_Write_b_eep	;wreg free
 15654  00442C                     __end_of_vscp_writeNicknamePermanent:
 15655                           	opt stack 0
 15656                           tblptru	equ	0xFF8
 15657                           tblptrh	equ	0xFF7
 15658                           tblptrl	equ	0xFF6
 15659                           tablat	equ	0xFF5
 15660                           prodh	equ	0xFF4
 15661                           prodl	equ	0xFF3
 15662                           postinc0	equ	0xFEE
 15663                           wreg	equ	0xFE8
 15664                           indf1	equ	0xFE7
 15665                           fsr1h	equ	0xFE2
 15666                           fsr1l	equ	0xFE1
 15667                           indf2	equ	0xFDF
 15668                           postinc2	equ	0xFDE
 15669                           postdec2	equ	0xFDD
 15670                           plusw2	equ	0xFDB
 15671                           fsr2h	equ	0xFDA
 15672                           fsr2l	equ	0xFD9
 15673                           status	equ	0xFD8
 15674                           
 15675 ;; *************** function _Write_b_eep *****************
 15676 ;; Defined at:
 15677 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 15678 ;; Parameters:    Size  Location     Type
 15679 ;;  badd            2    7[COMRAM] unsigned int 
 15680 ;;  bdat            1    9[COMRAM] unsigned char 
 15681 ;; Auto vars:     Size  Location     Type
 15682 ;;  GIE_BIT_VAL     1   10[COMRAM] unsigned char 
 15683 ;; Return value:  Size  Location     Type
 15684 ;;		None               void
 15685 ;; Registers used:
 15686 ;;		wreg, status,2
 15687 ;; Tracked objects:
 15688 ;;		On entry : 0/0
 15689 ;;		On exit  : 0/0
 15690 ;;		Unchanged: 0/0
 15691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15692 ;;      Params:         3       0       0       0       0       0       0
 15693 ;;      Locals:         1       0       0       0       0       0       0
 15694 ;;      Temps:          0       0       0       0       0       0       0
 15695 ;;      Totals:         4       0       0       0       0       0       0
 15696 ;;Total ram usage:        4 bytes
 15697 ;; Hardware stack levels used:    1
 15698 ;; Hardware stack levels required when called:    2
 15699 ;; This function calls:
 15700 ;;		Nothing
 15701 ;; This function is called by:
 15702 ;;		_main
 15703 ;;		_init_app_eeprom
 15704 ;;		_vscp_setGUID
 15705 ;;		_vscp_setManufacturerId
 15706 ;;		_vscp_writeNicknamePermanent
 15707 ;;		_vscp_writeAppReg
 15708 ;;		_doActionDisable
 15709 ;;		_vscp_setUserID
 15710 ;;		_vscp_setSegmentCRC
 15711 ;;		_vscp_setControlByte
 15712 ;;		_vscp_goBootloaderMode
 15713 ;; This function uses a non-reentrant model
 15714 ;;
 15715                           
 15716                           	psect	text67
 15717  0040AC                     __ptext67:
 15718                           	opt stack 0
 15719  0040AC                     _Write_b_eep:
 15720                           	opt stack 26
 15721                           
 15722                           ;incstack = 0
 15723                           ;incstack = 0
 15724  0040AC  C008  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 15725  0040B0  C00A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 15726  0040B4  9EA6               	bcf	4006,7,c	;volatile
 15727  0040B6  9CA6               	bcf	4006,6,c	;volatile
 15728  0040B8  84A6               	bsf	4006,2,c	;volatile
 15729  0040BA  0E00               	movlw	0
 15730  0040BC  BEF2               	btfsc	intcon,7,c	;volatile
 15731  0040BE  0E01               	movlw	1
 15732  0040C0  6E0B               	movwf	Write_b_eep@GIE_BIT_VAL,c
 15733  0040C2  9EF2               	bcf	intcon,7,c	;volatile
 15734  0040C4  0E55               	movlw	85
 15735  0040C6  6EA7               	movwf	4007,c	;volatile
 15736  0040C8  0EAA               	movlw	170
 15737  0040CA  6EA7               	movwf	4007,c	;volatile
 15738  0040CC  82A6               	bsf	4006,1,c	;volatile
 15739  0040CE                     l1330:
 15740  0040CE  B2A6               	btfsc	4006,1,c	;volatile
 15741  0040D0  D7FE               	goto	l1330
 15742  0040D2  B00B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 15743  0040D4  D002               	bra	u4425
 15744  0040D6  9EF2               	bcf	intcon,7,c	;volatile
 15745  0040D8  D001               	bra	u4426
 15746  0040DA                     u4425:
 15747  0040DA  8EF2               	bsf	intcon,7,c	;volatile
 15748  0040DC                     u4426:
 15749  0040DC  94A6               	bcf	4006,2,c	;volatile
 15750  0040DE  0012               	return	
 15751  0040E0                     __end_of_Write_b_eep:
 15752                           	opt stack 0
 15753                           tblptru	equ	0xFF8
 15754                           tblptrh	equ	0xFF7
 15755                           tblptrl	equ	0xFF6
 15756                           tablat	equ	0xFF5
 15757                           prodh	equ	0xFF4
 15758                           prodl	equ	0xFF3
 15759                           intcon	equ	0xFF2
 15760                           postinc0	equ	0xFEE
 15761                           wreg	equ	0xFE8
 15762                           indf1	equ	0xFE7
 15763                           fsr1h	equ	0xFE2
 15764                           fsr1l	equ	0xFE1
 15765                           indf2	equ	0xFDF
 15766                           postinc2	equ	0xFDE
 15767                           postdec2	equ	0xFDD
 15768                           plusw2	equ	0xFDB
 15769                           fsr2h	equ	0xFDA
 15770                           fsr2l	equ	0xFD9
 15771                           status	equ	0xFD8
 15772                           
 15773 ;; *************** function _Busy_eep *****************
 15774 ;; Defined at:
 15775 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 15776 ;; Parameters:    Size  Location     Type
 15777 ;;		None
 15778 ;; Auto vars:     Size  Location     Type
 15779 ;;		None
 15780 ;; Return value:  Size  Location     Type
 15781 ;;		None               void
 15782 ;; Registers used:
 15783 ;;		None
 15784 ;; Tracked objects:
 15785 ;;		On entry : 0/0
 15786 ;;		On exit  : 0/0
 15787 ;;		Unchanged: 0/0
 15788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15789 ;;      Params:         0       0       0       0       0       0       0
 15790 ;;      Locals:         0       0       0       0       0       0       0
 15791 ;;      Temps:          0       0       0       0       0       0       0
 15792 ;;      Totals:         0       0       0       0       0       0       0
 15793 ;;Total ram usage:        0 bytes
 15794 ;; Hardware stack levels used:    1
 15795 ;; Hardware stack levels required when called:    2
 15796 ;; This function calls:
 15797 ;;		Nothing
 15798 ;; This function is called by:
 15799 ;;		_main
 15800 ;;		_init_app_eeprom
 15801 ;;		_vscp_setGUID
 15802 ;;		_vscp_setManufacturerId
 15803 ;;		_vscp_writeNicknamePermanent
 15804 ;;		_vscp_writeAppReg
 15805 ;;		_doActionDisable
 15806 ;;		_vscp_setUserID
 15807 ;;		_vscp_setSegmentCRC
 15808 ;;		_vscp_setControlByte
 15809 ;;		_vscp_goBootloaderMode
 15810 ;; This function uses a non-reentrant model
 15811 ;;
 15812                           
 15813                           	psect	text68
 15814  0044E2                     __ptext68:
 15815                           	opt stack 0
 15816  0044E2                     _Busy_eep:
 15817                           	opt stack 26
 15818  0044E2                     l1305:
 15819  0044E2  A2A6               	btfss	4006,1,c	;volatile
 15820  0044E4  0012               	return	
 15821  0044E6  D7FD               	goto	l1305
 15822  0044E8                     __end_of_Busy_eep:
 15823                           	opt stack 0
 15824                           tblptru	equ	0xFF8
 15825                           tblptrh	equ	0xFF7
 15826                           tblptrl	equ	0xFF6
 15827                           tablat	equ	0xFF5
 15828                           prodh	equ	0xFF4
 15829                           prodl	equ	0xFF3
 15830                           intcon	equ	0xFF2
 15831                           postinc0	equ	0xFEE
 15832                           wreg	equ	0xFE8
 15833                           indf1	equ	0xFE7
 15834                           fsr1h	equ	0xFE2
 15835                           fsr1l	equ	0xFE1
 15836                           indf2	equ	0xFDF
 15837                           postinc2	equ	0xFDE
 15838                           postdec2	equ	0xFDD
 15839                           plusw2	equ	0xFDB
 15840                           fsr2h	equ	0xFDA
 15841                           fsr2l	equ	0xFD9
 15842                           status	equ	0xFD8
 15843                           
 15844 ;; *************** function _init *****************
 15845 ;; Defined at:
 15846 ;;		line 321 in file "../main.c"
 15847 ;; Parameters:    Size  Location     Type
 15848 ;;		None
 15849 ;; Auto vars:     Size  Location     Type
 15850 ;;		None
 15851 ;; Return value:  Size  Location     Type
 15852 ;;		None               void
 15853 ;; Registers used:
 15854 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15855 ;; Tracked objects:
 15856 ;;		On entry : 0/0
 15857 ;;		On exit  : 0/0
 15858 ;;		Unchanged: 0/0
 15859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15860 ;;      Params:         0       0       0       0       0       0       0
 15861 ;;      Locals:         0       0       0       0       0       0       0
 15862 ;;      Temps:          0       0       0       0       0       0       0
 15863 ;;      Totals:         0       0       0       0       0       0       0
 15864 ;;Total ram usage:        0 bytes
 15865 ;; Hardware stack levels used:    1
 15866 ;; Hardware stack levels required when called:    4
 15867 ;; This function calls:
 15868 ;;		_WriteTimer0
 15869 ;;		_init_app_ram
 15870 ;;		_OpenTimer0
 15871 ;;		_ECANInitialize
 15872 ;; This function is called by:
 15873 ;;		_main
 15874 ;; This function uses a non-reentrant model
 15875 ;;
 15876                           
 15877                           	psect	text69
 15878  00406E                     __ptext69:
 15879                           	opt stack 0
 15880  00406E                     _init:
 15881                           	opt stack 26
 15882                           
 15883                           ;main.c: 326: init_app_ram();
 15884                           
 15885                           ;incstack = 0
 15886                           ;incstack = 0
 15887  00406E  EC84  F01B         	call	_init_app_ram	;wreg free
 15888                           
 15889                           ;main.c: 337: TRISA = 0x00;
 15890  004072  6A92               	clrf	3986,c	;volatile
 15891                           
 15892                           ;main.c: 338: PORTA = 0x00;
 15893  004074  6A80               	clrf	3968,c	;volatile
 15894                           
 15895                           ;main.c: 350: TRISB = 0b00001000;
 15896  004076  0E08               	movlw	8
 15897  004078  6E93               	movwf	3987,c	;volatile
 15898                           
 15899                           ;main.c: 351: PORTB = 0x00;
 15900  00407A  6A81               	clrf	3969,c	;volatile
 15901                           
 15902                           ;main.c: 361: TRISC = 0b00000001;
 15903  00407C  0E01               	movlw	1
 15904  00407E  6E94               	movwf	3988,c	;volatile
 15905                           
 15906                           ;main.c: 362: PORTC = 0x00;
 15907  004080  6A82               	clrf	3970,c	;volatile
 15908                           
 15909                           ;main.c: 388: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 15910  004082  0E92               	movlw	146
 15911  004084  ECA5  F021         	call	_OpenTimer0
 15912                           
 15913                           ;main.c: 389: WriteTimer0( 0xfb1d );
 15914  004088  0EFB               	movlw	251
 15915  00408A  6E09               	movwf	?_WriteTimer0+1,c
 15916  00408C  0E1D               	movlw	29
 15917  00408E  6E08               	movwf	?_WriteTimer0,c
 15918  004090  EC34  F022         	call	_WriteTimer0	;wreg free
 15919                           
 15920                           ;main.c: 392: LATBbits.LATB4 = 0;
 15921  004094  988A               	bcf	3978,4,c	;volatile
 15922                           
 15923                           ;main.c: 393: LATBbits.LATB1 = 0;
 15924  004096  928A               	bcf	3978,1,c	;volatile
 15925                           
 15926                           ;main.c: 394: LATBbits.LATB0 = 0;
 15927  004098  908A               	bcf	3978,0,c	;volatile
 15928                           
 15929                           ;main.c: 395: LATCbits.LATC7 = 0;
 15930  00409A  9E8B               	bcf	3979,7,c	;volatile
 15931                           
 15932                           ;main.c: 396: LATCbits.LATC6 = 0;
 15933  00409C  9C8B               	bcf	3979,6,c	;volatile
 15934                           
 15935                           ;main.c: 397: LATCbits.LATC5 = 0;
 15936  00409E  9A8B               	bcf	3979,5,c	;volatile
 15937                           
 15938                           ;main.c: 398: LATCbits.LATC4 = 0;
 15939  0040A0  988B               	bcf	3979,4,c	;volatile
 15940                           
 15941                           ;main.c: 401: ECANInitialize();
 15942  0040A2  ECD7  F01E         	call	_ECANInitialize	;wreg free
 15943                           
 15944                           ;main.c: 422: INTCONbits.PEIE = 1;
 15945  0040A6  8CF2               	bsf	intcon,6,c	;volatile
 15946                           
 15947                           ;main.c: 425: INTCONbits.GIE = 1;
 15948  0040A8  8EF2               	bsf	intcon,7,c	;volatile
 15949  0040AA  0012               	return	
 15950  0040AC                     __end_of_init:
 15951                           	opt stack 0
 15952                           tblptru	equ	0xFF8
 15953                           tblptrh	equ	0xFF7
 15954                           tblptrl	equ	0xFF6
 15955                           tablat	equ	0xFF5
 15956                           prodh	equ	0xFF4
 15957                           prodl	equ	0xFF3
 15958                           intcon	equ	0xFF2
 15959                           postinc0	equ	0xFEE
 15960                           wreg	equ	0xFE8
 15961                           indf1	equ	0xFE7
 15962                           fsr1h	equ	0xFE2
 15963                           fsr1l	equ	0xFE1
 15964                           indf2	equ	0xFDF
 15965                           postinc2	equ	0xFDE
 15966                           postdec2	equ	0xFDD
 15967                           plusw2	equ	0xFDB
 15968                           fsr2h	equ	0xFDA
 15969                           fsr2l	equ	0xFD9
 15970                           status	equ	0xFD8
 15971                           
 15972 ;; *************** function _ECANInitialize *****************
 15973 ;; Defined at:
 15974 ;;		line 168 in file "../ECAN.c"
 15975 ;; Parameters:    Size  Location     Type
 15976 ;;		None
 15977 ;; Auto vars:     Size  Location     Type
 15978 ;;		None
 15979 ;; Return value:  Size  Location     Type
 15980 ;;		None               void
 15981 ;; Registers used:
 15982 ;;		wreg, status,2, status,0, cstack
 15983 ;; Tracked objects:
 15984 ;;		On entry : 0/0
 15985 ;;		On exit  : 0/0
 15986 ;;		Unchanged: 0/0
 15987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15988 ;;      Params:         0       0       0       0       0       0       0
 15989 ;;      Locals:         0       0       0       0       0       0       0
 15990 ;;      Temps:          0       0       0       0       0       0       0
 15991 ;;      Totals:         0       0       0       0       0       0       0
 15992 ;;Total ram usage:        0 bytes
 15993 ;; Hardware stack levels used:    1
 15994 ;; Hardware stack levels required when called:    3
 15995 ;; This function calls:
 15996 ;;		_ECANSetOperationMode
 15997 ;; This function is called by:
 15998 ;;		_init
 15999 ;; This function uses a non-reentrant model
 16000 ;;
 16001                           
 16002                           	psect	text70
 16003  003DAE                     __ptext70:
 16004                           	opt stack 0
 16005  003DAE                     _ECANInitialize:
 16006                           	opt stack 26
 16007                           
 16008                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 16009                           
 16010                           ;incstack = 0
 16011                           ;incstack = 0
 16012  003DAE  0E80               	movlw	128
 16013  003DB0  ECE9  F021         	call	_ECANSetOperationMode
 16014                           
 16015                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 16016  003DB4  0E09               	movlw	9
 16017  003DB6  6E70               	movwf	3952,c	;volatile
 16018                           
 16019                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 16020  003DB8  0EFC               	movlw	252
 16021  003DBA  6E71               	movwf	3953,c	;volatile
 16022                           
 16023                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 16024                           ;ECAN.c: 181: (0 << 6) |
 16025                           ;ECAN.c: 182: (2-1);
 16026  003DBC  0E01               	movlw	1
 16027  003DBE  6E72               	movwf	3954,c	;volatile
 16028                           
 16029                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 16030  003DC0  0E20               	movlw	32
 16031  003DC2  6E73               	movwf	3955,c	;volatile
 16032                           
 16033                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 16034  003DC4  8E77               	bsf	3959,7,c	;volatile
 16035                           
 16036                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 16037  003DC6  9C77               	bcf	3959,6,c	;volatile
 16038                           
 16039                           ;ECAN.c: 205: RXB0CON = 0;
 16040  003DC8  6A60               	clrf	3936,c	;volatile
 16041                           
 16042                           ;ECAN.c: 211: RXB1CON = 0;
 16043  003DCA  010F               	movlb	15	; () banked
 16044  003DCC  6B50               	clrf	80,b	;volatile
 16045                           
 16046                           ; BSR set to: 15
 16047                           ;ECAN.c: 221: B0CON = 0;
 16048  003DCE  010E               	movlb	14	; () banked
 16049  003DD0  6B20               	clrf	32,b	;volatile
 16050                           
 16051                           ; BSR set to: 14
 16052                           ;ECAN.c: 231: B1CON = 0;
 16053  003DD2  6B30               	clrf	48,b	;volatile
 16054                           
 16055                           ; BSR set to: 14
 16056                           ;ECAN.c: 241: B2CON = 0;
 16057  003DD4  6B40               	clrf	64,b	;volatile
 16058                           
 16059                           ; BSR set to: 14
 16060                           ;ECAN.c: 254: B3CON = 0 << 2;
 16061  003DD6  6B50               	clrf	80,b	;volatile
 16062                           
 16063                           ; BSR set to: 14
 16064                           ;ECAN.c: 264: B4CON = 0 << 2;
 16065  003DD8  6B60               	clrf	96,b	;volatile
 16066                           
 16067                           ; BSR set to: 14
 16068                           ;ECAN.c: 274: B5CON = 0 << 2;
 16069  003DDA  6B70               	clrf	112,b	;volatile
 16070                           
 16071                           ; BSR set to: 14
 16072                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 16073  003DDC  0EE0               	movlw	224
 16074  003DDE  010D               	movlb	13	; () banked
 16075  003DE0  6FF8               	movwf	248,b	;volatile
 16076                           
 16077                           ; BSR set to: 13
 16078                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 16079  003DE2  010F               	movlb	15	; () banked
 16080  003DE4  6B00               	clrf	0,b	;volatile
 16081                           
 16082                           ; BSR set to: 15
 16083  003DE6  0E08               	movlw	8
 16084  003DE8  6F01               	movwf	1,b	;volatile
 16085                           
 16086                           ; BSR set to: 15
 16087  003DEA  6B02               	clrf	2,b	;volatile
 16088                           
 16089                           ; BSR set to: 15
 16090  003DEC  6B03               	clrf	3,b	;volatile
 16091                           
 16092                           ; BSR set to: 15
 16093                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 16094  003DEE  6B04               	clrf	4,b	;volatile
 16095                           
 16096                           ; BSR set to: 15
 16097  003DF0  0EE8               	movlw	232
 16098  003DF2  6F05               	movwf	5,b	;volatile
 16099                           
 16100                           ; BSR set to: 15
 16101  003DF4  0E1A               	movlw	26
 16102  003DF6  6F06               	movwf	6,b	;volatile
 16103                           
 16104                           ; BSR set to: 15
 16105  003DF8  6B07               	clrf	7,b	;volatile
 16106                           
 16107                           ; BSR set to: 15
 16108                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 16109  003DFA  0E03               	movlw	3
 16110  003DFC  010D               	movlb	13	; () banked
 16111  003DFE  6FD4               	movwf	212,b	;volatile
 16112                           
 16113                           ; BSR set to: 13
 16114                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 16115  003E00  6BD5               	clrf	213,b	;volatile
 16116                           
 16117                           ; BSR set to: 13
 16118                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 16119  003E02  6BE0               	clrf	224,b	;volatile
 16120                           
 16121                           ; BSR set to: 13
 16122                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 16123  003E04  0E11               	movlw	17
 16124  003E06  6FE1               	movwf	225,b	;volatile
 16125                           
 16126                           ; BSR set to: 13
 16127                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 16128  003E08  6FE2               	movwf	226,b	;volatile
 16129                           
 16130                           ; BSR set to: 13
 16131                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 16132  003E0A  6BE3               	clrf	227,b	;volatile
 16133                           
 16134                           ; BSR set to: 13
 16135                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 16136  003E0C  6BE4               	clrf	228,b	;volatile
 16137                           
 16138                           ; BSR set to: 13
 16139                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 16140  003E0E  6BE5               	clrf	229,b	;volatile
 16141                           
 16142                           ; BSR set to: 13
 16143                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 16144  003E10  6BE6               	clrf	230,b	;volatile
 16145                           
 16146                           ; BSR set to: 13
 16147                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 16148  003E12  6BE7               	clrf	231,b	;volatile
 16149                           
 16150                           ; BSR set to: 13
 16151                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 16152  003E14  0E54               	movlw	84
 16153  003E16  6FF0               	movwf	240,b	;volatile
 16154                           
 16155                           ; BSR set to: 13
 16156                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 16157  003E18  0E05               	movlw	5
 16158  003E1A  6FF1               	movwf	241,b	;volatile
 16159                           
 16160                           ; BSR set to: 13
 16161                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 16162  003E1C  6BF2               	clrf	242,b	;volatile
 16163                           
 16164                           ; BSR set to: 13
 16165                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 16166  003E1E  6BF2               	clrf	242,b	;volatile
 16167                           
 16168                           ; BSR set to: 13
 16169                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 16170  003E20  0E0F               	movlw	15
 16171  003E22  010F               	movlb	15	; () banked
 16172  003E24  6F18               	movwf	24,b	;volatile
 16173                           
 16174                           ; BSR set to: 15
 16175  003E26  0EE0               	movlw	224
 16176  003E28  6F19               	movwf	25,b	;volatile
 16177                           
 16178                           ; BSR set to: 15
 16179  003E2A  6B1A               	clrf	26,b	;volatile
 16180                           
 16181                           ; BSR set to: 15
 16182  003E2C  6B1B               	clrf	27,b	;volatile
 16183                           
 16184                           ; BSR set to: 15
 16185                           ;ECAN.c: 482: RXM0EXIDM = 1;
 16186  003E2E  8719               	bsf	25,3,b	;volatile
 16187                           
 16188                           ; BSR set to: 15
 16189                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 16190  003E30  0E0F               	movlw	15
 16191  003E32  6F1C               	movwf	28,b	;volatile
 16192                           
 16193                           ; BSR set to: 15
 16194  003E34  0EE0               	movlw	224
 16195  003E36  6F1D               	movwf	29,b	;volatile
 16196                           
 16197                           ; BSR set to: 15
 16198  003E38  691E               	setf	30,b	;volatile
 16199                           
 16200                           ; BSR set to: 15
 16201  003E3A  6B1F               	clrf	31,b	;volatile
 16202                           
 16203                           ; BSR set to: 15
 16204                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 16205  003E3C  871D               	bsf	29,3,b	;volatile
 16206                           
 16207                           ; BSR set to: 15
 16208                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 16209  003E3E  0E00               	movlw	0
 16210  003E40  EFE9  F021         	goto	_ECANSetOperationMode
 16211  003E44                     __end_of_ECANInitialize:
 16212                           	opt stack 0
 16213                           tblptru	equ	0xFF8
 16214                           tblptrh	equ	0xFF7
 16215                           tblptrl	equ	0xFF6
 16216                           tablat	equ	0xFF5
 16217                           prodh	equ	0xFF4
 16218                           prodl	equ	0xFF3
 16219                           intcon	equ	0xFF2
 16220                           postinc0	equ	0xFEE
 16221                           wreg	equ	0xFE8
 16222                           indf1	equ	0xFE7
 16223                           fsr1h	equ	0xFE2
 16224                           fsr1l	equ	0xFE1
 16225                           indf2	equ	0xFDF
 16226                           postinc2	equ	0xFDE
 16227                           postdec2	equ	0xFDD
 16228                           plusw2	equ	0xFDB
 16229                           fsr2h	equ	0xFDA
 16230                           fsr2l	equ	0xFD9
 16231                           status	equ	0xFD8
 16232                           
 16233 ;; *************** function _ECANSetOperationMode *****************
 16234 ;; Defined at:
 16235 ;;		line 1012 in file "../ECAN.c"
 16236 ;; Parameters:    Size  Location     Type
 16237 ;;  mode            1    wreg     enum E16337
 16238 ;; Auto vars:     Size  Location     Type
 16239 ;;  mode            1    7[COMRAM] enum E16337
 16240 ;; Return value:  Size  Location     Type
 16241 ;;		None               void
 16242 ;; Registers used:
 16243 ;;		wreg, status,2, status,0
 16244 ;; Tracked objects:
 16245 ;;		On entry : 0/0
 16246 ;;		On exit  : 0/0
 16247 ;;		Unchanged: 0/0
 16248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16249 ;;      Params:         0       0       0       0       0       0       0
 16250 ;;      Locals:         1       0       0       0       0       0       0
 16251 ;;      Temps:          0       0       0       0       0       0       0
 16252 ;;      Totals:         1       0       0       0       0       0       0
 16253 ;;Total ram usage:        1 bytes
 16254 ;; Hardware stack levels used:    1
 16255 ;; Hardware stack levels required when called:    2
 16256 ;; This function calls:
 16257 ;;		Nothing
 16258 ;; This function is called by:
 16259 ;;		_calculateSetFilterMask
 16260 ;;		_ECANInitialize
 16261 ;; This function uses a non-reentrant model
 16262 ;;
 16263                           
 16264                           	psect	text71
 16265  0043D2                     __ptext71:
 16266                           	opt stack 0
 16267  0043D2                     _ECANSetOperationMode:
 16268                           	opt stack 23
 16269                           
 16270                           ;incstack = 0
 16271                           ;incstack = 0
 16272                           ;ECANSetOperationMode@mode stored from wreg
 16273  0043D2  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 16274                           
 16275                           ;ECAN.c: 1013: CANCON &= 0x1F;
 16276  0043D6  0E1F               	movlw	31
 16277  0043D8  166F               	andwf	3951,f,c	;volatile
 16278                           
 16279                           ;ECAN.c: 1014: CANCON |= mode;
 16280  0043DA  5008               	movf	ECANSetOperationMode@mode,w,c
 16281  0043DC  126F               	iorwf	3951,f,c	;volatile
 16282  0043DE                     l7195:
 16283  0043DE  506F               	movf	3951,w,c	;volatile
 16284  0043E0  0BE0               	andlw	224
 16285  0043E2  1808               	xorwf	ECANSetOperationMode@mode,w,c
 16286  0043E4  B4D8               	btfsc	status,2,c
 16287  0043E6  0012               	return	
 16288  0043E8  D7FA               	goto	l7195
 16289  0043EA                     __end_of_ECANSetOperationMode:
 16290                           	opt stack 0
 16291                           tblptru	equ	0xFF8
 16292                           tblptrh	equ	0xFF7
 16293                           tblptrl	equ	0xFF6
 16294                           tablat	equ	0xFF5
 16295                           prodh	equ	0xFF4
 16296                           prodl	equ	0xFF3
 16297                           intcon	equ	0xFF2
 16298                           postinc0	equ	0xFEE
 16299                           wreg	equ	0xFE8
 16300                           indf1	equ	0xFE7
 16301                           fsr1h	equ	0xFE2
 16302                           fsr1l	equ	0xFE1
 16303                           indf2	equ	0xFDF
 16304                           postinc2	equ	0xFDE
 16305                           postdec2	equ	0xFDD
 16306                           plusw2	equ	0xFDB
 16307                           fsr2h	equ	0xFDA
 16308                           fsr2l	equ	0xFD9
 16309                           status	equ	0xFD8
 16310                           
 16311 ;; *************** function _OpenTimer0 *****************
 16312 ;; Defined at:
 16313 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 16314 ;; Parameters:    Size  Location     Type
 16315 ;;  config          1    wreg     unsigned char 
 16316 ;; Auto vars:     Size  Location     Type
 16317 ;;  config          1    7[COMRAM] unsigned char 
 16318 ;; Return value:  Size  Location     Type
 16319 ;;		None               void
 16320 ;; Registers used:
 16321 ;;		wreg, status,2, status,0
 16322 ;; Tracked objects:
 16323 ;;		On entry : 0/0
 16324 ;;		On exit  : 0/0
 16325 ;;		Unchanged: 0/0
 16326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16327 ;;      Params:         0       0       0       0       0       0       0
 16328 ;;      Locals:         1       0       0       0       0       0       0
 16329 ;;      Temps:          0       0       0       0       0       0       0
 16330 ;;      Totals:         1       0       0       0       0       0       0
 16331 ;;Total ram usage:        1 bytes
 16332 ;; Hardware stack levels used:    1
 16333 ;; Hardware stack levels required when called:    2
 16334 ;; This function calls:
 16335 ;;		Nothing
 16336 ;; This function is called by:
 16337 ;;		_init
 16338 ;; This function uses a non-reentrant model
 16339 ;;
 16340                           
 16341                           	psect	text72
 16342  00434A                     __ptext72:
 16343                           	opt stack 0
 16344  00434A                     _OpenTimer0:
 16345                           	opt stack 27
 16346                           
 16347                           ;incstack = 0
 16348                           ;incstack = 0
 16349                           ;OpenTimer0@config stored from wreg
 16350  00434A  CFE8 F008          	movff	wreg,OpenTimer0@config
 16351  00434E  5008               	movf	OpenTimer0@config,w,c
 16352  004350  0B7F               	andlw	127
 16353  004352  6ED5               	movwf	4053,c	;volatile
 16354  004354  6AD7               	clrf	4055,c	;volatile
 16355  004356  6AD6               	clrf	4054,c	;volatile
 16356  004358  94F2               	bcf	intcon,2,c	;volatile
 16357  00435A  AE08               	btfss	OpenTimer0@config,7,c
 16358  00435C  D002               	goto	l1346
 16359  00435E  8AF2               	bsf	intcon,5,c	;volatile
 16360  004360  D001               	goto	l1347
 16361  004362                     l1346:
 16362  004362  9AF2               	bcf	intcon,5,c	;volatile
 16363  004364                     l1347:
 16364  004364  8ED5               	bsf	4053,7,c	;volatile
 16365  004366  0012               	return	
 16366  004368                     __end_of_OpenTimer0:
 16367                           	opt stack 0
 16368                           tblptru	equ	0xFF8
 16369                           tblptrh	equ	0xFF7
 16370                           tblptrl	equ	0xFF6
 16371                           tablat	equ	0xFF5
 16372                           prodh	equ	0xFF4
 16373                           prodl	equ	0xFF3
 16374                           intcon	equ	0xFF2
 16375                           postinc0	equ	0xFEE
 16376                           wreg	equ	0xFE8
 16377                           indf1	equ	0xFE7
 16378                           fsr1h	equ	0xFE2
 16379                           fsr1l	equ	0xFE1
 16380                           indf2	equ	0xFDF
 16381                           postinc2	equ	0xFDE
 16382                           postdec2	equ	0xFDD
 16383                           plusw2	equ	0xFDB
 16384                           fsr2h	equ	0xFDA
 16385                           fsr2l	equ	0xFD9
 16386                           status	equ	0xFD8
 16387                           
 16388 ;; *************** function _init_app_ram *****************
 16389 ;; Defined at:
 16390 ;;		line 435 in file "../main.c"
 16391 ;; Parameters:    Size  Location     Type
 16392 ;;		None
 16393 ;; Auto vars:     Size  Location     Type
 16394 ;;  i               1   11[COMRAM] unsigned char 
 16395 ;; Return value:  Size  Location     Type
 16396 ;;		None               void
 16397 ;; Registers used:
 16398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16399 ;; Tracked objects:
 16400 ;;		On entry : 0/0
 16401 ;;		On exit  : 0/0
 16402 ;;		Unchanged: 0/0
 16403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16404 ;;      Params:         0       0       0       0       0       0       0
 16405 ;;      Locals:         1       0       0       0       0       0       0
 16406 ;;      Temps:          2       0       0       0       0       0       0
 16407 ;;      Totals:         3       0       0       0       0       0       0
 16408 ;;Total ram usage:        3 bytes
 16409 ;; Hardware stack levels used:    1
 16410 ;; Hardware stack levels required when called:    3
 16411 ;; This function calls:
 16412 ;;		_Read_b_eep
 16413 ;; This function is called by:
 16414 ;;		_main
 16415 ;;		_init
 16416 ;;		_vscp_restoreDefaults
 16417 ;; This function uses a non-reentrant model
 16418 ;;
 16419                           
 16420                           	psect	text73
 16421  003708                     __ptext73:
 16422                           	opt stack 0
 16423  003708                     _init_app_ram:
 16424                           	opt stack 24
 16425                           
 16426                           ;main.c: 436: uint8_t i;
 16427                           ;main.c: 438: measurement_clock = 0;
 16428                           
 16429                           ;incstack = 0
 16430                           ;incstack = 0
 16431  003708  0100               	movlb	0	; () banked
 16432  00370A  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
 16433  00370C  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 16434  00370E  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 16435  003710  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 16436                           
 16437                           ;main.c: 440: seconds = 0;
 16438  003712  6B8B               	clrf	_seconds& (0+255),b
 16439                           
 16440                           ;main.c: 441: minutes = 0;
 16441  003714  6B89               	clrf	_minutes& (0+255),b
 16442                           
 16443                           ;main.c: 442: hours = 0;
 16444  003716  6B88               	clrf	_hours& (0+255),b
 16445                           
 16446                           ;main.c: 444: relay_pulse_flags = 0;
 16447  003718  6B8A               	clrf	_relay_pulse_flags& (0+255),b
 16448                           
 16449                           ;main.c: 447: for ( i = 0; i < 8; i++ ) {
 16450  00371A  6A0C               	clrf	init_app_ram@i,c
 16451  00371C                     l7911:
 16452                           
 16453                           ; BSR set to: 0
 16454                           ;main.c: 448: relay_pulse_timer[ i ] = 0;
 16455  00371C  500C               	movf	init_app_ram@i,w,c
 16456  00371E  0D02               	mullw	2
 16457  003720  50F3               	movf	prodl,w,c
 16458  003722  0F70               	addlw	low _relay_pulse_timer
 16459  003724  6ED9               	movwf	fsr2l,c
 16460  003726  6ADA               	clrf	fsr2h,c
 16461  003728  6ADE               	clrf	postinc2,c
 16462  00372A  6ADD               	clrf	postdec2,c
 16463                           
 16464                           ;main.c: 449: relay_protection_timer[ i ] = 0;
 16465  00372C  500C               	movf	init_app_ram@i,w,c
 16466  00372E  0D02               	mullw	2
 16467  003730  50F3               	movf	prodl,w,c
 16468  003732  0F60               	addlw	low _relay_protection_timer
 16469  003734  6ED9               	movwf	fsr2l,c
 16470  003736  6ADA               	clrf	fsr2h,c
 16471  003738  6ADE               	clrf	postinc2,c
 16472  00373A  6ADD               	clrf	postdec2,c
 16473                           
 16474                           ; BSR set to: 0
 16475  00373C  2A0C               	incf	init_app_ram@i,f,c
 16476                           
 16477                           ; BSR set to: 0
 16478  00373E  0E07               	movlw	7
 16479  003740  640C               	cpfsgt	init_app_ram@i,c
 16480  003742  D7EC               	goto	l7911
 16481                           
 16482                           ; BSR set to: 0
 16483                           ;main.c: 450: }
 16484                           ;main.c: 452: for ( i=0; i<7; i++ ) {
 16485  003744  6A0C               	clrf	init_app_ram@i,c
 16486  003746                     l7921:
 16487                           
 16488                           ;main.c: 455: if ( Read_b_eep(0x43 + 10 + i) &
 16489                           ;main.c: 456: 0x01 ) {
 16490  003746  0E4D               	movlw	77
 16491  003748  240C               	addwf	init_app_ram@i,w,c
 16492  00374A  6E08               	movwf	?_Read_b_eep,c
 16493  00374C  6A09               	clrf	?_Read_b_eep+1,c
 16494  00374E  0E00               	movlw	0
 16495  003750  2209               	addwfc	?_Read_b_eep+1,f,c
 16496  003752  EC3D  F022         	call	_Read_b_eep	;wreg free
 16497  003756  6E0A               	movwf	??_init_app_ram& (0+255),c
 16498  003758  A00A               	btfss	??_init_app_ram,0,c
 16499  00375A  D02D               	goto	l7927
 16500                           
 16501                           ;main.c: 458: relay_pulse_flags |= (1<<i);
 16502  00375C  C00C  F00A         	movff	init_app_ram@i,??_init_app_ram
 16503  003760  0E01               	movlw	1
 16504  003762  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16505  003764  2A0A               	incf	??_init_app_ram,f,c
 16506  003766  D002               	goto	u8254
 16507  003768                     u8255:
 16508  003768  90D8               	bcf	status,0,c
 16509  00376A  360B               	rlcf	??_init_app_ram+1,f,c
 16510  00376C                     u8254:
 16511  00376C  2E0A               	decfsz	??_init_app_ram,f,c
 16512  00376E  D7FC               	goto	u8255
 16513  003770  500B               	movf	??_init_app_ram+1,w,c
 16514  003772  0100               	movlb	0	; () banked
 16515  003774  138A               	iorwf	_relay_pulse_flags& (0+255),f,b
 16516                           
 16517                           ; BSR set to: 0
 16518                           ;main.c: 459: relay_pulse_timer[ i ] =
 16519                           ;main.c: 460: Read_b_eep(0x43 + 18 + i) * 256 +
 16520                           ;main.c: 461: Read_b_eep(0x43 + 19 + i);
 16521  003776  0E55               	movlw	85
 16522  003778  240C               	addwf	init_app_ram@i,w,c
 16523  00377A  6E08               	movwf	?_Read_b_eep,c
 16524  00377C  6A09               	clrf	?_Read_b_eep+1,c
 16525  00377E  0E00               	movlw	0
 16526  003780  2209               	addwfc	?_Read_b_eep+1,f,c
 16527  003782  EC3D  F022         	call	_Read_b_eep	;wreg free
 16528  003786  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16529  003788  6A0A               	clrf	??_init_app_ram& (0+255),c
 16530  00378A  0E56               	movlw	86
 16531  00378C  240C               	addwf	init_app_ram@i,w,c
 16532  00378E  6E08               	movwf	?_Read_b_eep,c
 16533  003790  6A09               	clrf	?_Read_b_eep+1,c
 16534  003792  0E00               	movlw	0
 16535  003794  2209               	addwfc	?_Read_b_eep+1,f,c
 16536  003796  EC3D  F022         	call	_Read_b_eep	;wreg free
 16537  00379A  260A               	addwf	??_init_app_ram,f,c
 16538  00379C  0E00               	movlw	0
 16539  00379E  220B               	addwfc	??_init_app_ram+1,f,c
 16540  0037A0  500C               	movf	init_app_ram@i,w,c
 16541  0037A2  0D02               	mullw	2
 16542  0037A4  50F3               	movf	prodl,w,c
 16543  0037A6  0100               	movlb	0	; () banked
 16544  0037A8  0F70               	addlw	low _relay_pulse_timer
 16545  0037AA  6ED9               	movwf	fsr2l,c
 16546  0037AC  6ADA               	clrf	fsr2h,c
 16547  0037AE  C00A  FFDE         	movff	??_init_app_ram,postinc2
 16548  0037B2  C00B  FFDD         	movff	??_init_app_ram+1,postdec2
 16549  0037B6                     l7927:
 16550                           
 16551                           ;main.c: 462: }
 16552                           ;main.c: 465: if ( Read_b_eep(0x43 + 15 + i) & 0x04) {
 16553  0037B6  0E52               	movlw	82
 16554  0037B8  240C               	addwf	init_app_ram@i,w,c
 16555  0037BA  6E08               	movwf	?_Read_b_eep,c
 16556  0037BC  6A09               	clrf	?_Read_b_eep+1,c
 16557  0037BE  0E00               	movlw	0
 16558  0037C0  2209               	addwfc	?_Read_b_eep+1,f,c
 16559  0037C2  EC3D  F022         	call	_Read_b_eep	;wreg free
 16560  0037C6  6E0A               	movwf	??_init_app_ram& (0+255),c
 16561  0037C8  A40A               	btfss	??_init_app_ram,2,c
 16562  0037CA  D020               	goto	l7931
 16563                           
 16564                           ;main.c: 466: relay_protection_timer[ i ] =
 16565                           ;main.c: 467: Read_b_eep(0x43 + 44 + i) * 256 +
 16566                           ;main.c: 468: Read_b_eep(0x43 + 45 + i);
 16567  0037CC  0E6F               	movlw	111
 16568  0037CE  240C               	addwf	init_app_ram@i,w,c
 16569  0037D0  6E08               	movwf	?_Read_b_eep,c
 16570  0037D2  6A09               	clrf	?_Read_b_eep+1,c
 16571  0037D4  0E00               	movlw	0
 16572  0037D6  2209               	addwfc	?_Read_b_eep+1,f,c
 16573  0037D8  EC3D  F022         	call	_Read_b_eep	;wreg free
 16574  0037DC  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16575  0037DE  6A0A               	clrf	??_init_app_ram& (0+255),c
 16576  0037E0  0E70               	movlw	112
 16577  0037E2  240C               	addwf	init_app_ram@i,w,c
 16578  0037E4  6E08               	movwf	?_Read_b_eep,c
 16579  0037E6  6A09               	clrf	?_Read_b_eep+1,c
 16580  0037E8  0E00               	movlw	0
 16581  0037EA  2209               	addwfc	?_Read_b_eep+1,f,c
 16582  0037EC  EC3D  F022         	call	_Read_b_eep	;wreg free
 16583  0037F0  260A               	addwf	??_init_app_ram,f,c
 16584  0037F2  0E00               	movlw	0
 16585  0037F4  220B               	addwfc	??_init_app_ram+1,f,c
 16586  0037F6  500C               	movf	init_app_ram@i,w,c
 16587  0037F8  0D02               	mullw	2
 16588  0037FA  50F3               	movf	prodl,w,c
 16589  0037FC  0100               	movlb	0	; () banked
 16590  0037FE  0F60               	addlw	low _relay_protection_timer
 16591  003800  6ED9               	movwf	fsr2l,c
 16592  003802  6ADA               	clrf	fsr2h,c
 16593  003804  C00A  FFDE         	movff	??_init_app_ram,postinc2
 16594  003808  C00B  FFDD         	movff	??_init_app_ram+1,postdec2
 16595  00380C                     l7931:
 16596  00380C  2A0C               	incf	init_app_ram@i,f,c
 16597  00380E  0E06               	movlw	6
 16598  003810  640C               	cpfsgt	init_app_ram@i,c
 16599  003812  D799               	goto	l7921
 16600  003814  0C06               	retlw	6
 16601  003816                     __end_of_init_app_ram:
 16602                           	opt stack 0
 16603                           tblptru	equ	0xFF8
 16604                           tblptrh	equ	0xFF7
 16605                           tblptrl	equ	0xFF6
 16606                           tablat	equ	0xFF5
 16607                           prodh	equ	0xFF4
 16608                           prodl	equ	0xFF3
 16609                           intcon	equ	0xFF2
 16610                           postinc0	equ	0xFEE
 16611                           wreg	equ	0xFE8
 16612                           indf1	equ	0xFE7
 16613                           fsr1h	equ	0xFE2
 16614                           fsr1l	equ	0xFE1
 16615                           indf2	equ	0xFDF
 16616                           postinc2	equ	0xFDE
 16617                           postdec2	equ	0xFDD
 16618                           plusw2	equ	0xFDB
 16619                           fsr2h	equ	0xFDA
 16620                           fsr2l	equ	0xFD9
 16621                           status	equ	0xFD8
 16622                           
 16623 ;; *************** function _WriteTimer0 *****************
 16624 ;; Defined at:
 16625 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16626 ;; Parameters:    Size  Location     Type
 16627 ;;  timer0          2    7[COMRAM] unsigned int 
 16628 ;; Auto vars:     Size  Location     Type
 16629 ;;  timer           2    9[COMRAM] struct Timers
 16630 ;; Return value:  Size  Location     Type
 16631 ;;		None               void
 16632 ;; Registers used:
 16633 ;;		None
 16634 ;; Tracked objects:
 16635 ;;		On entry : 0/0
 16636 ;;		On exit  : 0/0
 16637 ;;		Unchanged: 0/0
 16638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16639 ;;      Params:         2       0       0       0       0       0       0
 16640 ;;      Locals:         2       0       0       0       0       0       0
 16641 ;;      Temps:          0       0       0       0       0       0       0
 16642 ;;      Totals:         4       0       0       0       0       0       0
 16643 ;;Total ram usage:        4 bytes
 16644 ;; Hardware stack levels used:    1
 16645 ;; Hardware stack levels required when called:    2
 16646 ;; This function calls:
 16647 ;;		Nothing
 16648 ;; This function is called by:
 16649 ;;		_init
 16650 ;; This function uses a non-reentrant model
 16651 ;;
 16652                           
 16653                           	psect	text74
 16654  004468                     __ptext74:
 16655                           	opt stack 0
 16656  004468                     _WriteTimer0:
 16657                           	opt stack 27
 16658                           
 16659                           ;incstack = 0
 16660                           ;incstack = 0
 16661  004468  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 16662  00446C  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 16663  004470  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 16664  004474  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 16665  004478  0012               	return	
 16666  00447A                     __end_of_WriteTimer0:
 16667                           	opt stack 0
 16668                           tblptru	equ	0xFF8
 16669                           tblptrh	equ	0xFF7
 16670                           tblptrl	equ	0xFF6
 16671                           tablat	equ	0xFF5
 16672                           prodh	equ	0xFF4
 16673                           prodl	equ	0xFF3
 16674                           intcon	equ	0xFF2
 16675                           postinc0	equ	0xFEE
 16676                           wreg	equ	0xFE8
 16677                           indf1	equ	0xFE7
 16678                           fsr1h	equ	0xFE2
 16679                           fsr1l	equ	0xFE1
 16680                           indf2	equ	0xFDF
 16681                           postinc2	equ	0xFDE
 16682                           postdec2	equ	0xFDD
 16683                           plusw2	equ	0xFDB
 16684                           fsr2h	equ	0xFDA
 16685                           fsr2l	equ	0xFD9
 16686                           status	equ	0xFD8
 16687                           
 16688 ;; *************** function _vscp_readAppReg *****************
 16689 ;; Defined at:
 16690 ;;		line 901 in file "../main.c"
 16691 ;; Parameters:    Size  Location     Type
 16692 ;;  reg             1    wreg     unsigned char 
 16693 ;; Auto vars:     Size  Location     Type
 16694 ;;  reg             1   10[COMRAM] unsigned char 
 16695 ;;  rv              1    9[COMRAM] unsigned char 
 16696 ;; Return value:  Size  Location     Type
 16697 ;;                  1    wreg      unsigned char 
 16698 ;; Registers used:
 16699 ;;		wreg, status,2, status,0, cstack
 16700 ;; Tracked objects:
 16701 ;;		On entry : F/0
 16702 ;;		On exit  : 0/0
 16703 ;;		Unchanged: 0/0
 16704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16705 ;;      Params:         0       0       0       0       0       0       0
 16706 ;;      Locals:         2       0       0       0       0       0       0
 16707 ;;      Temps:          0       0       0       0       0       0       0
 16708 ;;      Totals:         2       0       0       0       0       0       0
 16709 ;;Total ram usage:        2 bytes
 16710 ;; Hardware stack levels used:    1
 16711 ;; Hardware stack levels required when called:    3
 16712 ;; This function calls:
 16713 ;;		_Read_b_eep
 16714 ;; This function is called by:
 16715 ;;		_vscp_readRegister
 16716 ;;		_vscp_handleProtocolEvent
 16717 ;; This function uses a non-reentrant model
 16718 ;;
 16719                           
 16720                           	psect	text75
 16721  003C5A                     __ptext75:
 16722                           	opt stack 0
 16723  003C5A                     _vscp_readAppReg:
 16724                           	opt stack 25
 16725                           
 16726                           ;incstack = 0
 16727                           ;incstack = 0
 16728                           ;vscp_readAppReg@reg stored from wreg
 16729  003C5A  CFE8 F00B          	movff	wreg,vscp_readAppReg@reg
 16730                           
 16731                           ; BSR set to: 0
 16732                           ;main.c: 902: uint8_t rv;
 16733                           ;main.c: 904: rv = 0x00;
 16734  003C5E  6A0A               	clrf	vscp_readAppReg@rv,c
 16735                           
 16736                           ; BSR set to: 0
 16737                           ;main.c: 907: if ( reg == 0x00 ) {
 16738  003C60  660B               	tstfsz	vscp_readAppReg@reg,c
 16739  003C62  D006               	goto	l8773
 16740                           
 16741                           ; BSR set to: 0
 16742                           ;main.c: 908: rv = Read_b_eep(0x43 + 0);
 16743  003C64  6A09               	clrf	?_Read_b_eep+1,c
 16744  003C66  0E43               	movlw	67
 16745  003C68  6E08               	movwf	?_Read_b_eep,c
 16746  003C6A  EC3D  F022         	call	_Read_b_eep	;wreg free
 16747  003C6E  D04D               	goto	L63
 16748  003C70                     l8773:
 16749                           
 16750                           ; BSR set to: 0
 16751                           ;main.c: 911: else if ( reg == 0x01 ) {
 16752  003C70  040B               	decf	vscp_readAppReg@reg,w,c
 16753  003C72  E106               	bnz	l8777
 16754                           
 16755                           ; BSR set to: 0
 16756                           ;main.c: 912: rv = Read_b_eep(0x43 + 1);
 16757  003C74  6A09               	clrf	?_Read_b_eep+1,c
 16758  003C76  0E44               	movlw	68
 16759  003C78  6E08               	movwf	?_Read_b_eep,c
 16760  003C7A  EC3D  F022         	call	_Read_b_eep	;wreg free
 16761  003C7E  D045               	goto	L63
 16762  003C80                     l8777:
 16763                           
 16764                           ; BSR set to: 0
 16765                           ;main.c: 914: else if ( (reg >= 2) && (reg < 10) ) {
 16766  003C80  0E01               	movlw	1
 16767  003C82  640B               	cpfsgt	vscp_readAppReg@reg,c
 16768  003C84  D034               	goto	l8801
 16769                           
 16770                           ; BSR set to: 0
 16771  003C86  0E0A               	movlw	10
 16772  003C88  600B               	cpfslt	vscp_readAppReg@reg,c
 16773  003C8A  D031               	goto	l8801
 16774  003C8C  D01E               	goto	l8799
 16775  003C8E                     l8783:
 16776                           
 16777                           ; BSR set to: 0
 16778                           ;main.c: 920: rv = LATBbits.LATB4;
 16779  003C8E  0E00               	movlw	0
 16780  003C90  B88A               	btfsc	3978,4,c	;volatile
 16781  003C92  0E01               	movlw	1
 16782  003C94  D03A               	goto	L63
 16783  003C96                     l8785:
 16784                           
 16785                           ; BSR set to: 0
 16786                           ;main.c: 925: rv = LATBbits.LATB1;
 16787  003C96  0E00               	movlw	0
 16788  003C98  B28A               	btfsc	3978,1,c	;volatile
 16789  003C9A  0E01               	movlw	1
 16790  003C9C  D036               	goto	L63
 16791  003C9E                     l8787:
 16792                           
 16793                           ; BSR set to: 0
 16794                           ;main.c: 930: rv = LATBbits.LATB0;
 16795  003C9E  0E00               	movlw	0
 16796  003CA0  B08A               	btfsc	3978,0,c	;volatile
 16797  003CA2  0E01               	movlw	1
 16798  003CA4  D032               	goto	L63
 16799  003CA6                     l8789:
 16800                           
 16801                           ; BSR set to: 0
 16802                           ;main.c: 935: rv = LATCbits.LATC7;
 16803  003CA6  0E00               	movlw	0
 16804  003CA8  BE8B               	btfsc	3979,7,c	;volatile
 16805  003CAA  0E01               	movlw	1
 16806  003CAC  D02E               	goto	L63
 16807  003CAE                     l8791:
 16808                           
 16809                           ; BSR set to: 0
 16810                           ;main.c: 940: rv = LATCbits.LATC6;
 16811  003CAE  0E00               	movlw	0
 16812  003CB0  BC8B               	btfsc	3979,6,c	;volatile
 16813  003CB2  0E01               	movlw	1
 16814  003CB4  D02A               	goto	L63
 16815  003CB6                     l8793:
 16816                           
 16817                           ; BSR set to: 0
 16818                           ;main.c: 945: rv = LATCbits.LATC5;
 16819  003CB6  0E00               	movlw	0
 16820  003CB8  BA8B               	btfsc	3979,5,c	;volatile
 16821  003CBA  0E01               	movlw	1
 16822  003CBC  D026               	goto	L63
 16823  003CBE                     l8795:
 16824                           
 16825                           ; BSR set to: 0
 16826                           ;main.c: 950: rv = LATCbits.LATC4;
 16827  003CBE  0E00               	movlw	0
 16828  003CC0  B88B               	btfsc	3979,4,c	;volatile
 16829  003CC2  0E01               	movlw	1
 16830  003CC4  D022               	goto	L63
 16831  003CC6                     l292:
 16832                           
 16833                           ; BSR set to: 0
 16834                           ;main.c: 955: rv = 0;
 16835  003CC6  6A0A               	clrf	vscp_readAppReg@rv,c
 16836                           
 16837                           ;main.c: 956: break;
 16838  003CC8  D021               	goto	l8807
 16839  003CCA                     l8799:
 16840                           
 16841                           ; BSR set to: 0
 16842  003CCA  500B               	movf	vscp_readAppReg@reg,w,c
 16843                           
 16844                           ; Switch size 1, requested type "speed"
 16845                           ; Number of cases is 8, Range of values is 2 to 9
 16846                           ; switch strategies available:
 16847                           ; Name         Instructions Cycles
 16848                           ; simple_byte           25    13 (average)
 16849                           ;	Chosen strategy is simple_byte
 16850  003CCC  0A02               	xorlw	2	; case 2
 16851  003CCE  E0DF               	bz	l8783
 16852  003CD0  0A01               	xorlw	1	; case 3
 16853  003CD2  E0E1               	bz	l8785
 16854  003CD4  0A07               	xorlw	7	; case 4
 16855  003CD6  E0E3               	bz	l8787
 16856  003CD8  0A01               	xorlw	1	; case 5
 16857  003CDA  E0E5               	bz	l8789
 16858  003CDC  0A03               	xorlw	3	; case 6
 16859  003CDE  E0E7               	bz	l8791
 16860  003CE0  0A01               	xorlw	1	; case 7
 16861  003CE2  E0E9               	bz	l8793
 16862  003CE4  0A0F               	xorlw	15	; case 8
 16863  003CE6  E0EB               	bz	l8795
 16864  003CE8  0A01               	xorlw	1	; case 9
 16865  003CEA  E0ED               	bz	l292
 16866  003CEC  D00F               	goto	l8807
 16867  003CEE                     l8801:
 16868                           
 16869                           ; BSR set to: 0
 16870                           ;main.c: 961: else if ( ( reg >= 10 ) &&
 16871                           ;main.c: 962: (reg < (72 + 7 * 8 ) ) ) {
 16872  003CEE  0E09               	movlw	9
 16873  003CF0  640B               	cpfsgt	vscp_readAppReg@reg,c
 16874  003CF2  D00C               	goto	l8807
 16875                           
 16876                           ; BSR set to: 0
 16877  003CF4  0E80               	movlw	128
 16878  003CF6  600B               	cpfslt	vscp_readAppReg@reg,c
 16879  003CF8  D009               	goto	l8807
 16880                           
 16881                           ; BSR set to: 0
 16882                           ;main.c: 963: rv = Read_b_eep(0x43 + reg);
 16883  003CFA  0E43               	movlw	67
 16884  003CFC  240B               	addwf	vscp_readAppReg@reg,w,c
 16885  003CFE  6E08               	movwf	?_Read_b_eep,c
 16886  003D00  6A09               	clrf	?_Read_b_eep+1,c
 16887  003D02  0E00               	movlw	0
 16888  003D04  2209               	addwfc	?_Read_b_eep+1,f,c
 16889  003D06  EC3D  F022         	call	_Read_b_eep	;wreg free
 16890  003D0A                     L63:
 16891  003D0A  6E0A               	movwf	vscp_readAppReg@rv,c
 16892  003D0C                     l8807:
 16893                           
 16894                           ;main.c: 964: }
 16895                           ;main.c: 966: return rv;
 16896  003D0C  500A               	movf	vscp_readAppReg@rv,w,c
 16897  003D0E  0012               	return	
 16898  003D10                     __end_of_vscp_readAppReg:
 16899                           	opt stack 0
 16900                           tblptru	equ	0xFF8
 16901                           tblptrh	equ	0xFF7
 16902                           tblptrl	equ	0xFF6
 16903                           tablat	equ	0xFF5
 16904                           prodh	equ	0xFF4
 16905                           prodl	equ	0xFF3
 16906                           intcon	equ	0xFF2
 16907                           postinc0	equ	0xFEE
 16908                           wreg	equ	0xFE8
 16909                           indf1	equ	0xFE7
 16910                           fsr1h	equ	0xFE2
 16911                           fsr1l	equ	0xFE1
 16912                           indf2	equ	0xFDF
 16913                           postinc2	equ	0xFDE
 16914                           postdec2	equ	0xFDD
 16915                           plusw2	equ	0xFDB
 16916                           fsr2h	equ	0xFDA
 16917                           fsr2l	equ	0xFD9
 16918                           status	equ	0xFD8
 16919                           
 16920 ;; *************** function _Read_b_eep *****************
 16921 ;; Defined at:
 16922 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 16923 ;; Parameters:    Size  Location     Type
 16924 ;;  badd            2    7[COMRAM] unsigned int 
 16925 ;; Auto vars:     Size  Location     Type
 16926 ;;		None
 16927 ;; Return value:  Size  Location     Type
 16928 ;;                  1    wreg      unsigned char 
 16929 ;; Registers used:
 16930 ;;		wreg, status,2
 16931 ;; Tracked objects:
 16932 ;;		On entry : 0/0
 16933 ;;		On exit  : 0/0
 16934 ;;		Unchanged: 0/0
 16935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16936 ;;      Params:         2       0       0       0       0       0       0
 16937 ;;      Locals:         0       0       0       0       0       0       0
 16938 ;;      Temps:          0       0       0       0       0       0       0
 16939 ;;      Totals:         2       0       0       0       0       0       0
 16940 ;;Total ram usage:        2 bytes
 16941 ;; Hardware stack levels used:    1
 16942 ;; Hardware stack levels required when called:    2
 16943 ;; This function calls:
 16944 ;;		Nothing
 16945 ;; This function is called by:
 16946 ;;		_init_app_ram
 16947 ;;		_doApplicationOneSecondWork
 16948 ;;		_vscp_readNicknamePermanent
 16949 ;;		_vscp_getZone
 16950 ;;		_vscp_getSubzone
 16951 ;;		_vscp_readAppReg
 16952 ;;		_vscp_writeAppReg
 16953 ;;		_SendInformationEvent
 16954 ;;		_doDM
 16955 ;;		_doActionOn
 16956 ;;		_doActionOff
 16957 ;;		_doActionPulse
 16958 ;;		_doActionStatus
 16959 ;;		_doActionDisable
 16960 ;;		_doActionToggle
 16961 ;;		_vscp_getGUID
 16962 ;;		_vscp_getUserID
 16963 ;;		_vscp_getManufacturerId
 16964 ;;		_vscp_getSegmentCRC
 16965 ;;		_calculateSetFilterMask
 16966 ;; This function uses a non-reentrant model
 16967 ;;
 16968                           
 16969                           	psect	text76
 16970  00447A                     __ptext76:
 16971                           	opt stack 0
 16972  00447A                     _Read_b_eep:
 16973                           	opt stack 26
 16974                           
 16975                           ;incstack = 0
 16976                           ;incstack = 0
 16977  00447A  C008  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 16978  00447E  9CA6               	bcf	4006,6,c	;volatile
 16979  004480  9EA6               	bcf	4006,7,c	;volatile
 16980  004482  80A6               	bsf	4006,0,c	;volatile
 16981  004484  F000               	nop		;# 
 16982  004486  F000               	nop		;# 
 16983  004488  50A8               	movf	4008,w,c	;volatile
 16984  00448A  0012               	return	
 16985  00448C                     __end_of_Read_b_eep:
 16986                           	opt stack 0
 16987                           tblptru	equ	0xFF8
 16988                           tblptrh	equ	0xFF7
 16989                           tblptrl	equ	0xFF6
 16990                           tablat	equ	0xFF5
 16991                           prodh	equ	0xFF4
 16992                           prodl	equ	0xFF3
 16993                           intcon	equ	0xFF2
 16994                           postinc0	equ	0xFEE
 16995                           wreg	equ	0xFE8
 16996                           indf1	equ	0xFE7
 16997                           fsr1h	equ	0xFE2
 16998                           fsr1l	equ	0xFE1
 16999                           indf2	equ	0xFDF
 17000                           postinc2	equ	0xFDE
 17001                           postdec2	equ	0xFDD
 17002                           plusw2	equ	0xFDB
 17003                           fsr2h	equ	0xFDA
 17004                           fsr2l	equ	0xFD9
 17005                           status	equ	0xFD8
 17006                           
 17007 ;; *************** function _interrupt_at_low_vector *****************
 17008 ;; Defined at:
 17009 ;;		line 131 in file "../main.c"
 17010 ;; Parameters:    Size  Location     Type
 17011 ;;		None
 17012 ;; Auto vars:     Size  Location     Type
 17013 ;;		None
 17014 ;; Return value:  Size  Location     Type
 17015 ;;		None               void
 17016 ;; Registers used:
 17017 ;;		wreg, status,2, status,0, cstack
 17018 ;; Tracked objects:
 17019 ;;		On entry : 0/0
 17020 ;;		On exit  : 0/0
 17021 ;;		Unchanged: 0/0
 17022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17023 ;;      Params:         0       0       0       0       0       0       0
 17024 ;;      Locals:         0       0       0       0       0       0       0
 17025 ;;      Temps:          3       0       0       0       0       0       0
 17026 ;;      Totals:         3       0       0       0       0       0       0
 17027 ;;Total ram usage:        3 bytes
 17028 ;; Hardware stack levels used:    1
 17029 ;; Hardware stack levels required when called:    1
 17030 ;; This function calls:
 17031 ;;		i1_WriteTimer0
 17032 ;; This function is called by:
 17033 ;;		Interrupt level 1
 17034 ;; This function uses a non-reentrant model
 17035 ;;
 17036                           
 17037                           	psect	intcodelo
 17038  000818                     __pintcodelo:
 17039                           	opt stack 0
 17040  000818                     _interrupt_at_low_vector:
 17041                           	opt stack 21
 17042                           
 17043                           ;incstack = 0
 17044  000818  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 17045  00081C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 17046  000820  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 17047  000824                     
 17048                           ;main.c: 133: if ( INTCONbits.TMR0IF ) {
 17049  000824  A4F2               	btfss	intcon,2,c	;volatile
 17050  000826  D001               	goto	i1u802_21
 17051  000828  D001               	goto	i1u802_20
 17052  00082A                     i1u802_21:
 17053  00082A  D03F               	goto	i1l147
 17054  00082C                     i1u802_20:
 17055  00082C                     
 17056                           ;main.c: 136: WriteTimer0(0xfb1d);
 17057  00082C  0EFB               	movlw	251
 17058  00082E  6E02               	movwf	?i1_WriteTimer0+1,c
 17059  000830  0E1D               	movlw	29
 17060  000832  6E01               	movwf	?i1_WriteTimer0,c
 17061  000834  EC46  F022         	call	i1_WriteTimer0	;wreg free
 17062  000838                     
 17063                           ;main.c: 138: vscp_timer++;
 17064  000838  0100               	movlb	0	; () banked
 17065  00083A  4B86               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 17066  00083C  2B87               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 17067  00083E                     
 17068                           ; BSR set to: 0
 17069                           ;main.c: 139: vscp_configtimer++;
 17070  00083E  4B84               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 17071  000840  2B85               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 17072  000842                     
 17073                           ; BSR set to: 0
 17074                           ;main.c: 140: measurement_clock++;
 17075  000842  0E01               	movlw	1
 17076  000844  2780               	addwf	_measurement_clock& (0+255),f,b	;volatile
 17077  000846  0E00               	movlw	0
 17078  000848  2381               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 17079  00084A  0E00               	movlw	0
 17080  00084C  2382               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 17081  00084E  0E00               	movlw	0
 17082  000850  2383               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 17083  000852                     
 17084                           ; BSR set to: 0
 17085                           ;main.c: 141: sendTimer++;
 17086  000852  2B8C               	incf	_sendTimer& (0+255),f,b	;volatile
 17087  000854                     
 17088                           ; BSR set to: 0
 17089                           ;main.c: 144: if ( PORTCbits.RC0 ) {
 17090  000854  A082               	btfss	3970,0,c	;volatile
 17091  000856  D001               	goto	i1u803_21
 17092  000858  D001               	goto	i1u803_20
 17093  00085A                     i1u803_21:
 17094  00085A  D002               	goto	i1l7553
 17095  00085C                     i1u803_20:
 17096  00085C                     
 17097                           ; BSR set to: 0
 17098                           ;main.c: 145: vscp_initbtncnt = 0;
 17099  00085C  6B8F               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 17100                           
 17101                           ;main.c: 146: } else {
 17102  00085E  D001               	goto	i1l139
 17103  000860                     i1l7553:
 17104                           
 17105                           ; BSR set to: 0
 17106                           ;main.c: 148: vscp_initbtncnt++;
 17107  000860  2B8F               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 17108  000862                     i1l139:
 17109                           
 17110                           ; BSR set to: 0
 17111                           ;main.c: 149: }
 17112                           ;main.c: 152: vscp_statuscnt++;
 17113  000862  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 17114  000864                     
 17115                           ; BSR set to: 0
 17116                           ;main.c: 153: if ( ( 0x02 == vscp_initledfunc ) &&
 17117                           ;main.c: 154: ( vscp_statuscnt > 100 ) ) {
 17118  000864  5056               	movf	_vscp_initledfunc,w,c
 17119  000866  0A02               	xorlw	2
 17120  000868  A4D8               	btfss	status,2,c
 17121  00086A  D001               	goto	i1u804_21
 17122  00086C  D001               	goto	i1u804_20
 17123  00086E                     i1u804_21:
 17124  00086E  D00E               	goto	i1l7563
 17125  000870                     i1u804_20:
 17126  000870                     
 17127                           ; BSR set to: 0
 17128  000870  0E64               	movlw	100
 17129  000872  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 17130  000874  D001               	goto	i1u805_21
 17131  000876  D001               	goto	i1u805_20
 17132  000878                     i1u805_21:
 17133  000878  D009               	goto	i1l7563
 17134  00087A                     i1u805_20:
 17135  00087A                     
 17136                           ; BSR set to: 0
 17137                           ;main.c: 156: if ( PORTCbits.RC1 ) {
 17138  00087A  A282               	btfss	3970,1,c	;volatile
 17139  00087C  D001               	goto	i1u806_21
 17140  00087E  D001               	goto	i1u806_20
 17141  000880                     i1u806_21:
 17142  000880  D002               	goto	i1l141
 17143  000882                     i1u806_20:
 17144  000882                     
 17145                           ; BSR set to: 0
 17146                           ;main.c: 157: PORTCbits.RC1 = 0;
 17147  000882  9282               	bcf	3970,1,c	;volatile
 17148                           
 17149                           ;main.c: 158: }
 17150  000884  D001               	goto	i1l142
 17151  000886                     i1l141:
 17152                           
 17153                           ; BSR set to: 0
 17154                           ;main.c: 159: else {
 17155                           ;main.c: 160: PORTCbits.RC1 = 1;
 17156  000886  8282               	bsf	3970,1,c	;volatile
 17157  000888                     i1l142:
 17158                           
 17159                           ; BSR set to: 0
 17160                           ;main.c: 161: }
 17161                           ;main.c: 163: vscp_statuscnt = 0;
 17162  000888  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17163                           
 17164                           ;main.c: 165: }
 17165  00088A  D00E               	goto	i1l143
 17166  00088C                     i1l7563:
 17167                           
 17168                           ; BSR set to: 0
 17169                           ;main.c: 166: else if (0x01 == vscp_initledfunc) {
 17170  00088C  0456               	decf	_vscp_initledfunc,w,c
 17171  00088E  A4D8               	btfss	status,2,c
 17172  000890  D001               	goto	i1u807_21
 17173  000892  D001               	goto	i1u807_20
 17174  000894                     i1u807_21:
 17175  000894  D003               	goto	i1l144
 17176  000896                     i1u807_20:
 17177  000896                     
 17178                           ; BSR set to: 0
 17179                           ;main.c: 167: PORTCbits.RC1 = 1;
 17180  000896  8282               	bsf	3970,1,c	;volatile
 17181                           
 17182                           ;main.c: 168: vscp_statuscnt = 0;
 17183  000898  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17184                           
 17185                           ;main.c: 169: }
 17186  00089A  D006               	goto	i1l143
 17187  00089C                     i1l144:
 17188                           
 17189                           ; BSR set to: 0
 17190                           ;main.c: 170: else if (0x00 == vscp_initledfunc) {
 17191  00089C  6656               	tstfsz	_vscp_initledfunc,c
 17192  00089E  D001               	goto	i1u808_21
 17193  0008A0  D001               	goto	i1u808_20
 17194  0008A2                     i1u808_21:
 17195  0008A2  D002               	goto	i1l143
 17196  0008A4                     i1u808_20:
 17197  0008A4                     
 17198                           ; BSR set to: 0
 17199                           ;main.c: 171: PORTCbits.RC1 = 0;
 17200  0008A4  9282               	bcf	3970,1,c	;volatile
 17201                           
 17202                           ;main.c: 172: vscp_statuscnt = 0;
 17203  0008A6  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17204  0008A8                     i1l143:
 17205                           
 17206                           ; BSR set to: 0
 17207                           ;main.c: 173: }
 17208                           ;main.c: 175: INTCONbits.TMR0IF = 0;
 17209  0008A8  94F2               	bcf	intcon,2,c	;volatile
 17210  0008AA                     i1l147:
 17211  0008AA  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 17212  0008AE  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 17213  0008B2  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 17214  0008B6  0010               	retfie	
 17215  0008B8                     __end_of_interrupt_at_low_vector:
 17216                           	opt stack 0
 17217                           tblptru	equ	0xFF8
 17218                           tblptrh	equ	0xFF7
 17219                           tblptrl	equ	0xFF6
 17220                           tablat	equ	0xFF5
 17221                           prodh	equ	0xFF4
 17222                           prodl	equ	0xFF3
 17223                           intcon	equ	0xFF2
 17224                           postinc0	equ	0xFEE
 17225                           wreg	equ	0xFE8
 17226                           indf1	equ	0xFE7
 17227                           fsr1h	equ	0xFE2
 17228                           fsr1l	equ	0xFE1
 17229                           bsr	equ	0xFE0
 17230                           indf2	equ	0xFDF
 17231                           postinc2	equ	0xFDE
 17232                           postdec2	equ	0xFDD
 17233                           plusw2	equ	0xFDB
 17234                           fsr2h	equ	0xFDA
 17235                           fsr2l	equ	0xFD9
 17236                           status	equ	0xFD8
 17237                           
 17238 ;; *************** function i1_WriteTimer0 *****************
 17239 ;; Defined at:
 17240 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 17241 ;; Parameters:    Size  Location     Type
 17242 ;;  timer0          2    0[COMRAM] unsigned int 
 17243 ;; Auto vars:     Size  Location     Type
 17244 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 17245 ;; Return value:  Size  Location     Type
 17246 ;;		None               void
 17247 ;; Registers used:
 17248 ;;		None
 17249 ;; Tracked objects:
 17250 ;;		On entry : 0/0
 17251 ;;		On exit  : 0/0
 17252 ;;		Unchanged: 0/0
 17253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17254 ;;      Params:         2       0       0       0       0       0       0
 17255 ;;      Locals:         2       0       0       0       0       0       0
 17256 ;;      Temps:          0       0       0       0       0       0       0
 17257 ;;      Totals:         4       0       0       0       0       0       0
 17258 ;;Total ram usage:        4 bytes
 17259 ;; Hardware stack levels used:    1
 17260 ;; This function calls:
 17261 ;;		Nothing
 17262 ;; This function is called by:
 17263 ;;		_interrupt_at_low_vector
 17264 ;; This function uses a non-reentrant model
 17265 ;;
 17266                           
 17267                           	psect	text78
 17268  00448C                     __ptext78:
 17269                           	opt stack 0
 17270  00448C                     i1_WriteTimer0:
 17271                           	opt stack 21
 17272                           
 17273                           ;incstack = 0
 17274                           ;incstack = 0
 17275  00448C  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 17276  004490  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 17277  004494  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 17278  004498  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 17279  00449C  0012               	return	
 17280  00449E                     __end_ofi1_WriteTimer0:
 17281                           	opt stack 0
 17282                           tblptru	equ	0xFF8
 17283                           tblptrh	equ	0xFF7
 17284                           tblptrl	equ	0xFF6
 17285                           tablat	equ	0xFF5
 17286                           prodh	equ	0xFF4
 17287                           prodl	equ	0xFF3
 17288                           intcon	equ	0xFF2
 17289                           postinc0	equ	0xFEE
 17290                           wreg	equ	0xFE8
 17291                           indf1	equ	0xFE7
 17292                           fsr1h	equ	0xFE2
 17293                           fsr1l	equ	0xFE1
 17294                           bsr	equ	0xFE0
 17295                           indf2	equ	0xFDF
 17296                           postinc2	equ	0xFDE
 17297                           postdec2	equ	0xFDD
 17298                           plusw2	equ	0xFDB
 17299                           fsr2h	equ	0xFDA
 17300                           fsr2l	equ	0xFD9
 17301                           status	equ	0xFD8
 17302                           tblptru	equ	0xFF8
 17303                           tblptrh	equ	0xFF7
 17304                           tblptrl	equ	0xFF6
 17305                           tablat	equ	0xFF5
 17306                           prodh	equ	0xFF4
 17307                           prodl	equ	0xFF3
 17308                           intcon	equ	0xFF2
 17309                           postinc0	equ	0xFEE
 17310                           wreg	equ	0xFE8
 17311                           indf1	equ	0xFE7
 17312                           fsr1h	equ	0xFE2
 17313                           fsr1l	equ	0xFE1
 17314                           bsr	equ	0xFE0
 17315                           indf2	equ	0xFDF
 17316                           postinc2	equ	0xFDE
 17317                           postdec2	equ	0xFDD
 17318                           plusw2	equ	0xFDB
 17319                           fsr2h	equ	0xFDA
 17320                           fsr2l	equ	0xFD9
 17321                           status	equ	0xFD8
 17322                           
 17323                           	psect	rparam
 17324  0000                     tblptru	equ	0xFF8
 17325                           tblptrh	equ	0xFF7
 17326                           tblptrl	equ	0xFF6
 17327                           tablat	equ	0xFF5
 17328                           prodh	equ	0xFF4
 17329                           prodl	equ	0xFF3
 17330                           intcon	equ	0xFF2
 17331                           postinc0	equ	0xFEE
 17332                           wreg	equ	0xFE8
 17333                           indf1	equ	0xFE7
 17334                           fsr1h	equ	0xFE2
 17335                           fsr1l	equ	0xFE1
 17336                           bsr	equ	0xFE0
 17337                           indf2	equ	0xFDF
 17338                           postinc2	equ	0xFDE
 17339                           postdec2	equ	0xFDD
 17340                           plusw2	equ	0xFDB
 17341                           fsr2h	equ	0xFDA
 17342                           fsr2l	equ	0xFD9
 17343                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     60     141
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionDisable->_Write_b_eep
    _doActionStatus->_SendInformationEvent
    _doActionPulse->_Read_b_eep
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeAppReg
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_calculateSetFilterMask
    _vscp_setUserID->_Write_b_eep
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _calculateSetFilterMask->__CANIDToRegs
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_Read_b_eep
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_Write_b_eep
    _vscp_setSegmentCRC->_Write_b_eep
    _vscp_getSegmentCRC->_Read_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_Read_b_eep
    _vscp_readAppReg->_Read_b_eep

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   77599
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
             _calculateSetFilterMask
                          _vscp_init
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           6     6      0    7438
                                             27 BANK0      6     6      0
                         _Read_b_eep
                        _doActionOff
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2370
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                17    17      0   15731
                                             28 BANK0     17    17      0
                         _Read_b_eep
                        _doActionOff
                         _doActionOn
                      _doActionPulse
                     _doActionStatus
                    _doActionDisable
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       7     6      1    3470
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionDisable                                      6     5      1     449
                                             11 COMRAM     6     5      1
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _doActionStatus                                       7     6      1    3428
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulse                                        7     6      1     381
                                              9 COMRAM     7     6      1
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           7     6      1    3212
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          6     5      1    3212
                                             80 COMRAM     1     0      1
                                             22 BANK0      5     5      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   38013
                                             32 BANK0     28    28      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   13131
                                             30 BANK0      2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    4058
                                             71 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0    2619
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0    2111
                                             67 COMRAM     4     4      0
             _calculateSetFilterMask
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     112
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     9     8      1    8863
                                             80 COMRAM     1     0      1
                                             22 BANK0      8     8      0
             _calculateSetFilterMask
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (2) _SendInformationEvent                                 8     6      2    2533
                                             74 COMRAM     6     6      0
                                             20 BANK0      2     0      2
                         _Read_b_eep
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (5) _calculateSetFilterMask                              50    50      0    1845
                                             17 COMRAM    50    50      0
                         _Read_b_eep
               _ECANSetOperationMode
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1773
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1334
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     217
                                             12 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      31
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     180
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     211
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4672
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     301
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _Write_b_eep                                          4     1      3      68
                                              7 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     666
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (6) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         3     3      0     508
                                              9 COMRAM     3     3      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     346
                                              9 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_getSegmentCRC
       _Read_b_eep
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
   _init_app_eeprom
     _calculateSetFilterMask
       _Read_b_eep
       _ECANSetOperationMode
       __CANIDToRegs
     _Busy_eep
     _Write_b_eep
   _init_app_ram
     _Read_b_eep
   _calculateSetFilterMask
     _Read_b_eep
     _ECANSetOperationMode
     __CANIDToRegs
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
     _vscp_readAppReg
       _Read_b_eep
     _vscp_writeAppReg
       _calculateSetFilterMask
         _Read_b_eep
         _ECANSetOperationMode
         __CANIDToRegs
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _Read_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _Read_b_eep
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_getSegmentCRC
         _Read_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _calculateSetFilterMask
           _Read_b_eep
           _ECANSetOperationMode
           __CANIDToRegs
         _Busy_eep
         _Write_b_eep
         _Read_b_eep
         _SendInformationEvent
           _Read_b_eep
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _Read_b_eep
       _vscp_writeStdReg
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_getGUID
           _Read_b_eep
         _vscp_getUserID
           _Read_b_eep
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _calculateSetFilterMask
               _Read_b_eep
               _ECANSetOperationMode
               __CANIDToRegs
             _Busy_eep
             _Write_b_eep
           _init_app_ram
             _Read_b_eep
     _vscp_writeStdReg
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_getGUID
         _Read_b_eep
       _vscp_getUserID
         _Read_b_eep
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _calculateSetFilterMask
             _Read_b_eep
             _ECANSetOperationMode
             __CANIDToRegs
           _Busy_eep
           _Write_b_eep
         _init_app_ram
           _Read_b_eep
     ___lbmod
   _doDM
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulse
       _Read_b_eep
     _doActionStatus
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionDisable
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
     _doActionToggle
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
     _vscp_getSubzone
       _Read_b_eep
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _Read_b_eep
       _vscp_getSubzone (ARG)
         _Read_b_eep
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _SendInformationEvent
       _Read_b_eep
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      8D       5       88.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E5       3        0.0%
DATA                 0      0      F1      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Fri Nov 13 11:49:03 2015

                      doActionToggle@val 00CA                  __end_of_vscp_readAppReg 3D10  
                  __end_of_sendVSCPFrame 3C5A                              __CFG_CPB$ON 000000  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000C  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 305C  
                  doActionToggle@dmflags 00C9                              __CFG_LVP$ON 000000  
                            __CFG_WDT$ON 000000                                      l210 2660  
                                    l211 2668                                      l220 268C  
                                    l213 266C                                      l222 2690  
                                    l214 2674                                      l206 2650  
                                    l223 2698                                      l207 2658  
                                    l151 3A20                                      l312 0A0C  
                                    l216 2678                                      l160 3A68  
                                    l225 269C                                      l217 2680  
                                    l322 0ADC                                      l306 09B2  
                                    l226 26A6                                      l219 2684  
                                    l404 12DC                                      l332 0BA4  
                                    l500 2D34                                      l420 2512  
                                    l228 279C                                      l236 2804  
                                    l164 3A82                                      l317 0A76  
                                    l253 4232                                      l502 2D64  
                                    l327 0B40                                      l503 2D94  
                                    l504 2DC4                                      l337 0C08  
                                    l249 4258                                      l441 284E  
                                    l505 2DF4                       vscp_readStdReg@idx 0019  
                                    l450 28CE                                      l506 2E24  
                                    l187 21C8                                      l507 2E54  
                                    l515 3614                                      l292 3CC6  
                                    l460 2A0E                                      l452 290E  
                                    l541 3D54                                      l454 294E  
                                    l471 3960                                      l447 288E  
                                    l640 439E                                      l480 39A6  
                                    l456 298E                                      l528 36DA  
                                    l552 3374                                      l481 39AA  
                                    l449 2A72                                      l561 33BE  
                                    l482 39AE                                      l458 29CE  
                                    l570 33E2                                      l562 33C6  
                                    l483 39B2                                      l571 33EA  
                                    l484 39B6                                      l564 33CA  
                                    l477 399E                                      l573 33EE  
                                    l565 33D2                                      l557 33AE  
                                    l478 39D6                                      l494 2CF6  
                                    l574 33F6                                      l558 33B6  
                                    l479 39A2                                      l567 33D6  
                                    l576 33FA                                      l568 33DE  
                                    l665 3EBA                                      l577 3404  
                                    l930 3328                                      l907 2C14  
                                    l579 344E                        doActionStatus@bOn 00CA  
                                    l908 2C38                                      l676 416A  
                                    l925 35CA                       vscp_readStdReg@reg 001C  
                                    l935 3F28                                      l871 31C4  
                                    l863 3128                                      l865 3146  
                                    l891 2B48                                      l883 2CAC  
                                    l876 2AD8                                      l893 2B5C  
                                    l886 2BA6                                      l895 2B70  
                                    l887 2B26                                      l897 2B80  
                                    l889 2B34                                      l899 2B90  
         __size_of_vscp_handleProbeState 00BA                        doActionStatus@arg 0051  
                         getVSCPFrame@id 0028                        doActionStatus@val 00CB  
          __end_of_vscp_handleProbeState 3BA4                    ?_vscp_restoreDefaults 0001  
                   __size_of_WriteTimer0 0012                     __size_of_Write_b_eep 0034  
                 _calculateSetFilterMask 1946                                      wreg 000FE8  
            ?_doApplicationOneSecondWork 0001                                     l1102 42A2  
                                   l1113 4194                                     l1050 3FFE  
                                   l1122 3FEA                                     l1108 4102  
                                   l1109 410E                     __size_of_doActionOff 00E8  
                                   l1126 43B8                                     l1055 42C6  
                                   l1231 14CE                                     l1305 44E2  
                                   l1073 3B8E                                     l1065 3BA0  
                                   l1330 40CE                                     l1074 3B6E  
                                   l1066 3B2C                                     l1171 430A  
                                   l1255 165E                                     l1256 1672  
                                   l1257 16B4                                     l1346 4362  
                                   l1098 406C                                     l1266 16F0  
                                   l1347 4364                                     l1291 1944  
                                   l1197 3916                                     l1299 41BE  
                                   l6015 4240                                     l6023 421A  
                    vscp_readStdReg@code 0011                                     l7133 2BBA  
                                   l7231 3EDE                                     l7143 2BDA  
              vscp_getManufacturerId@idx 000A                                     l7233 3EE8  
                                   l7225 3EC2                                     l7161 2C3A  
                                   l7081 2B06                                     l7065 2AC6  
                                   l8033 3B0A                                     l7235 3EF2  
                                   l7227 3ECA                                     l7243 3F0A  
                                   l7075 2AF0                                     l7083 2B10  
                                   l8035 3B10                                     l8019 3AEC  
                                   l7237 3EF8                                     l7229 3ED4  
                                   l8053 3B46                                     l7239 3EFE  
                                   l7183 2C96                                     l7257 325A  
                                   l7169 2C66                                     l7177 2C80  
                                   l7089 2B14                                     l8057 3B4A  
                                   l7521 41CA                                     l7195 43DE  
                                   l8059 3B4E                                     l7721 42B2  
                                   l8089 3B92                                     l7529 41E0  
                                   l9401 2E84                                     l8601 3FD2  
                                   l6907 4318                                     l9403 2EA4  
                                   l6941 3E5E                                     l7911 371C  
                                   l8801 3CEE                                     l7921 3746  
                                   l6953 4148                                     l9353 2CB4  
                                   l7931 380C                                     l9603 30B2  
                                   l6957 414C                                     l9621 30EC  
                                   l7941 1958                                     l9365 2D1C  
                                   l8807 3D0C                                     l7927 37B6  
                                   l9631 312C                                     l9471 3D16  
                                   l8591 3FC0                                     l9609 30C2  
                                   l9801 2F36                                     l7961 1C72  
                                   l9643 3176                                     l9651 3194  
                                   l9483 3D78                                     l8773 3C70  
                                   l9637 3148                                     l9661 31BA  
                                   l9717 4064                                     l9821 2F70  
                                   l9813 2F58                                     l9805 2F42  
                                   l7981 1D2C                                     l7957 1BE4  
                                   l7949 1BD2                                     l7893 21CA  
                                   l8597 3FCA                                     l8791 3CAE  
                                   l8783 3C8E                                     l9663 31BC  
                                   l9831 2FD2                                     l7975 1C90  
                                   l9911 38E8                                     l8793 3CB6  
                                   l8785 3C96                                     l8777 3C80  
                                   l9657 31B6                                     l9841 3032  
                                   l9817 2F64                                     l9809 2F4C  
                                   l9753 43B2                                     l7985 1D56  
                                   l9489 3DA4                                     l8795 3CBE  
                                   l8787 3C9E                                     l9587 4112  
                                   l9771 2ED6                                     l9851 3058  
                                   l9763 2EC2                                     l7979 1D24  
                                   l8789 3CA6                                     l8799 3CCA  
                                   l9679 34F2                                     l9847 3048  
                                   l9791 2F14                                     l9783 2EF8  
                                   l9775 2EE0                                     l9767 2ECC  
                                   l9919 38FC                                     l9881 3860  
                                   l9929 3918                                     l9787 2F04  
                                   l9779 2EEC                                     l9875 3840  
                                   l9797 2F2A                                     l9895 389A  
                                   l9887 387C                                     l9897 389E  
                                   l9993 3A58                                     l9985 3A46  
                                   l9969 3A18                                     l9899 38B4  
                                   l9995 3A5C                                     l9997 3A62  
                                   l9989 3A4E              __size_of_vscp_getMatrixInfo 0020  
                                   u4425 40DA                                     u4426 40DC  
                         sendCANFrame@id 0037                                     u7115 2ACE  
                                   u7117 2AD0                                     u8310 1C04  
                                   u8320 1C2C                                     u7435 3208  
                                   u8315 1BFA                                     u8404 1CFE  
                                   u7445 3228                                     u8405 1CF8  
                                   u8325 1C22                                     u8254 376C  
                                   u8255 3768                                     u7455 3276  
                                   u8344 1C4C                                     u8345 1C46  
                                   u6940 3EAE                                     u8374 1CC6  
                                   u8375 1CC2                                     u8295 1A42  
                                   u8384 1CDE                                     u6945 3EA4  
                                   u8385 1CDA                         ??_ECANInitialize 0009  
              vscp_setManufacturerId@idx 000D                                     _doDM 2216  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 3A04                                     _init 406E  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 08DE                              _vscp_minute 0090  
                            _vscp_second 0095                                     prodh 000FF4  
                                   prodl 000FF3                                     start 08B8  
                   doActionPulse@dmflags 000F            __size_of_vscp_doOneSecondWork 004E  
                      vscp_getUserID@idx 000A                    __size_of_vscp_setGUID 0026  
                       _vscp_writeStdReg 3816                          _doActionDisable 3D10  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 3EBC              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 002C                                    l10011 3A9E  
                                  l10021 3AC8                                    l10005 3A7C  
                                  l11001 0F92                                    l10105 1396  
                                  l10033 3ADC                                    l10009 3A86  
                                  l10051 132A                                    l10043 1312  
                                  l11101 12C6                                    l11021 102E  
                                  l10213 15A4                                    l10045 1318  
                                  l10037 3AE4                                    l11111 1304  
                                  l11031 110A                                    l11023 105A  
                                  l11007 0F98                                    l10311 16A8  
                                  l10303 1698                                    l10231 15F6  
                                  l10215 15A6                                    l10135 13FE  
                                  l10119 13A2                                    l10071 1368  
                                  l10047 131E                                    l11033 1136  
                                  l11025 1086                                    l11009 0FC4  
                                  l10321 16B6                                    l10225 15CA  
                                  l10217 15B0                                    l10145 1432  
                                  l10049 1324                                    l11121 280C  
                                  l11201 364E                                    l11107 12F0  
                                  l11027 10B2                                    l11019 1002  
                                  l10307 16A0                                    l10243 1612  
                                  l10155 1466                                    l11211 3680  
                                  l11203 3658                                    l11029 10DE  
                                  l11037 1162                                    l10413 17EA  
                                  l10405 17BA                                    l10325 16D0  
                                  l10165 149A                                    l10085 1370  
                                  l10069 1362                                    l11133 2874  
                                  l11213 368A                                    l11205 3662  
                                  l11063 11CA                                    l11039 118C  
                                  l10183 1500                                    l11231 36EC  
                                  l11207 366C                                    l11303 3460  
                                  l10503 23A0                                    _B0CON 000E20  
                                  l10417 1802                                    l10409 17D4  
                                  l10361 1720                                    l10193 155E  
                                  l10177 14D2                                    l11225 36C6  
                                  l11209 3676                                    l11217 3694  
                                  l10513 244E                                    l10521 24C2  
                                  l10601 2776                                    l11067 11F6  
                                  l11091 1296                                    l10435 185A  
                                  l10427 182C                                    l10371 1742  
                                  l10347 16F8                                    l10275 1652  
                                  l10259 1632                                    l10187 1518  
                                  l10179 14F0                                    l11219 36B0  
                                  l11235 36FE                                    l11307 3472  
                                  l10515 2488                                    l10507 23DA  
                                  l10523 2508                                    l10611 27AE  
                                  l11077 1252                                    l11069 122C  
                                  l10197 1574                                    l10461 18E2  
                                  l11173 2A84                                    l11261 33B8  
                                  l11245 3332                                    l10509 2414  
                                  l10605 2788                                    l10533 2520  
                                  l11079 126A                                    l11319 4300  
                                  l10439 1882                                    l10383 176E  
                                  l10295 167A                                    l10615 27C2  
                                  l10551 25B8                                    _B1CON 000E30  
                                  l10705 09C2                                    l11169 2A4E  
                                  l11177 2A96                                    l11257 3398  
                                  l10553 25FA                                    l10617 2800  
                                  l10529 2518                                    ?_doDM 0001  
                                  l10707 09C8                                    l10387 1780  
                                  l10651 39E8                                    l10627 3922  
                                  l11187 35D4                                    l11291 3424  
                                  l10563 265A                                    l10389 1786  
                                  l10477 2222                                    l10807 0BB4  
                                  l10727 0A1E                                    l10719 09F2  
                                  l10831 0C42                                    l10671 090E  
                                  l10647 39BA                                    l10639 3984  
                                  l10655 39FA                                    l11199 3638  
                                  l10487 2286                                    l10591 26AA  
                                  _B2CON 000E40                                    l10905 0DCA  
                                  l11297 343A                                    l11289 3408  
                                  l10593 26C6                                    l10923 0E36  
                                  l10851 0CB6                                    l10819 0BDC  
                                  l10747 0A88                                    l10739 0A48  
                                  l10499 2366                                    l10933 0E42  
                                  l10909 0DD0                                    l10861 0CC2  
                                  l10837 0C50                                    l10829 0C18  
                                  l10767 0AEC                                    l10759 0AB0  
                                  l10687 095A                                    l10679 0932  
                                  _B3CON 000E50                                    l10953 0EAE  
                                  l10929 0E3C                                    l10881 0D2E  
                                  l10857 0CBC                                    l10971 0F1A  
                                  l10947 0EA8                                    l10875 0D28  
                                  l10787 0B50                                    l10779 0B14  
                                  l10699 0984                                    l10981 0F26  
                                  l10957 0EB4                                    l10885 0D5E  
                                  l10799 0B78                                    _B4CON 000E60  
                                  l10977 0F20            __size_of_SendInformationEvent 006C  
                                  l10995 0F8C                                    l10899 0DC4  
          __size_of_vscp_getMajorVersion 0002                                    _B5CON 000E70  
             __end_of_vscp_goActiveState 434A            ??_vscp_writeNicknamePermanent 000C  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                            i1_WriteTimer0 448C  
                                  _EEADR 000FA9                          __end_of___lbmod 41E8  
                _vscp_handleDropNickname 40E0                                    _BSEL0 000DF8  
                                  u10215 3BE0                                    u10404 2CC4  
                                  u10405 2CC0                                    u11320 302A  
                                  _T0CON 000FD5                                    u10604 3D26  
                                  u11325 3020                                    u10605 3D22  
                                  u11290 2FC8                                    u13214 281C  
                                  u11295 2FBE                                    u13215 2818  
                                  u12364 2596                                    u12365 2592  
                                  u13504 3342                                    u12384 260A  
                                  u13505 333E                                    u12385 2606  
                                  u12554 3932                                    u12555 392E  
                                  u10975 34B6                                    u13384 35E4  
                                  u10985 34DC                                    u13385 35E0  
                                  u10995 3506                                    i1l141 0886  
                                  i1l142 0888                                    i1l143 08A8  
                                  i1l144 089C                                    i1l139 0862  
                                  i1l147 08AA                          sendCANFrame@dlc 003B  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 44D0               _vscp_readNicknamePermanent 44C6  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                             _vscp_getGUID 4454  
                                  doDM@i 00DD                            __CFG_WRTD$OFF 000000  
                         Read_b_eep@badd 0008                           __CFG_EBTRB$OFF 000000  
                 Write_b_eep@GIE_BIT_VAL 000B                             _vscp_getZone 44A8  
                     vscp_writeAppReg@rv 00CC                                    _hours 0088  
              _vscp_getRegisterPagesUsed 44EE                   __size_of_vscp_getEvent 002A  
                           _vscp_setGUID 4234                                    tablat 000FF5  
                _vscp_getSubMinorVersion 44F4                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 420E  
                   _ECANSetOperationMode 43D2                          __initialization 42C8  
                           __end_of_doDM 2514                             __end_of_main 3AEA  
                           __end_of_init 40AC                         ?_vscp_readAppReg 0001  
                             _Read_b_eep 447A                  _interrupt_at_low_vector 0818  
                       __end_of_Busy_eep 44E8                           doDM@class_mask 00D2  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00CD  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 0048                                   ??_main 0052  
                                 ??_init 000D            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 000A                 ??_vscp_setManufacturerId 000D  
               _vscp_handleProtocolEvent 1308                            __activetblptr 000002  
                      __RegsToCANID@type 000B               ECANReceiveMessage@msgFlags 0011  
          doApplicationOneSecondWork@bOn 00CF                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                 __size_of_doActionPulse 0200               ECANReceiveMessage@savedPtr 0012  
                                 _CANCON 000F6F                                   _EEDATA 000FA8  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                        __CFG_BBSIZ$2048 000000                            doDM@type_mask 00D5  
                     vscp_writeStdReg@rv 004D                            ?_init_app_ram 0001  
                                 _MDSEL0 007BBE                                   _MDSEL1 007BBF  
                             _OpenTimer0 434A                                   i1l7541 0838  
                                 i1l7551 085C                                   i1l7543 083E  
                                 i1l7561 0882                                   i1l7553 0860  
                                 i1l7545 0842                                   i1l7537 0824  
                                 i1l7563 088C                                   i1l7555 0864  
                                 i1l7547 0852                                   i1l7539 082C  
                                 i1l7565 0896                                   i1l7557 0870  
                                 i1l7549 0854                                   i1l7567 08A4  
                                 i1l7559 087A                          _init_app_eeprom 1DB2  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                __end_of_doActionDisable 3DAE                           __CFG_WDTPS$128 000000  
                                 _RXF1EN 006EA1                   ECANReceiveMessage@data 000F  
                 ECANReceiveMessage@mode 0016                   ECANReceiveMessage@temp 0017  
                      getVSCPFrame@pData 0022                        getVSCPFrame@pSize 0021  
                     _vscp_newNodeOnline 416C                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0011   vscp_handleProtocolEvent@page_save_1294 00DA  
                         getCANFrame@pid 001C                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0009                            _vscp_getEvent 4196  
                                 _doWork 44EC                         OpenTimer0@config 0008  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 000D  
                    vscp_writeAppReg@bOn 00CD          calculateSetFilterMask@rowfilter 003E  
             calculateSetFilterMask@mask 0036                      vscp_writeAppReg@reg 00CE  
             __end_of_vscp_setSegmentCRC 4416                      vscp_writeAppReg@val 0051  
                                 clear_0 42CE                                   clear_1 42DA  
                          ?_sendCANFrame 0037             vscp_handleProtocolEvent@byte 00E7  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 0091  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 000C                ??_vscp_getSubMinorVersion 0008  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 000A  
                   ??_vscp_newNodeOnline 004C                          ___lbmod@divisor 0008  
                        doActionToggle@i 00CC                               __accesstop 0060  
                __end_of__initialization 42E0                          ___lbmod@counter 000A  
          __size_of_vscp_getMinorVersion 0002                          doActionStatus@i 00CC  
                  __size_of_getVSCPFrame 0078                       _vscp_writeRegister 42EA  
              ??_interrupt_at_low_vector 0005                  __size_of_vscp_sendEvent 0026  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                          _doActionPulse 2CAE              __end_of_vscp_check_pstorage 42C8  
                __size_of_vscp_setUserID 001C                              ?_Read_b_eep 0008  
                        ??i1_WriteTimer0 0003                      ?_vscp_writeRegister 00CF  
                         ??_sendCANFrame 003E                               _doActionOn 2806  
                ?_calculateSetFilterMask 0001            calculateSetFilterMask@lastOID 0035  
             __end_of_vscp_getFamilyCode 44C6                            ?__RegsToCANID 0008  
            __size_of_ECANReceiveMessage 020E                       sendVSCPFrame@pData 0045  
             __end_of_vscp_getFamilyType 44BC          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 00CF          __size_of_vscp_setManufacturerId 0026  
               __end_of_vscp_writeAppReg 1308                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 2216              __end_of_vscp_setControlByte 4400  
               __end_of_vscp_writeStdReg 391C            calculateSetFilterMask@rowmask 0031  
                     __RegsToCANID@Value 000E                     ??_vscp_writeRegister 0052  
        __end_of_vscp_handleDropNickname 4110                             _getVSCPFrame 3E44  
                             __pbssBANK0 0060                              ?_OpenTimer0 0001  
             __end_of_vscp_getBufferSize 44F2                                ?_Busy_eep 0001  
                       ?_doActionDisable 000C                    vscp_writeRegister@reg 00D0  
                 ??_ECANSetOperationMode 0008       __size_of_vscp_getRegisterPagesUsed 0002  
                         ?_doActionPulse 000A          __end_of_vscp_getSubMinorVersion 44F6  
               ECANSetOperationMode@mode 0008                                  _B0RXFUL 007107  
                                _B1RXFUL 007187                     __ECANRxFilterHitInfo 0054  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 000C                                  _B5RXFUL 007387  
         __end_of_calculateSetFilterMask 1DB2                  __size_of_doActionToggle 0152  
                       WriteTimer0@timer 000A                  __size_of_doActionStatus 013C  
                                _ECANCON 000F77                            ??_WriteTimer0 000A  
                         ??__RegsToCANID 000C                            ??_Write_b_eep 000B  
                  sendVSCPFrame@priority 0043                                  _BRGCON1 000F70  
                                _BRGCON2 000F71                                  _BRGCON3 000F72  
         SendInformationEvent@eventClass 00C5                      vscp_writeStdReg@reg 004E  
           __end_of_vscp_doOneSecondWork 3FEC              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0041                            ??_doActionOff 00C7  
        __end_of_interrupt_at_low_vector 08B8                 vscp_readStdReg@code_1267 0015  
                      sendCANFrame@pdata 003C                    _vscp_handleProbeState 3AEA  
                                _RXB0CON 000F60                                  _RXB1CON 000F50  
                                _RXB0FUL 007B07                         __ECANPointBuffer 3EBC  
             __end_of_vscp_getMatrixInfo 432C                                  _TXB0CON 000F40  
                                _TXB1CON 000F30                                  _TXB2CON 000F20  
                                _RXFCON0 000DD4                                  _RXFCON1 000DD5  
                  doActionStatus@dmflags 00C9                       _vscp_goActiveState 432C  
                 __size_of_sendVSCPFrame 00B6             __end_of_SendInformationEvent 3F9E  
           __end_of_vscp_getMajorVersion 44FA                      __size_of_Read_b_eep 0012  
                     __size_of_vscp_init 0044                               ??_Busy_eep 0008  
                SendInformationEvent@idx 0050                   _vscp_getManufacturerId 442C  
                 _vscp_setManufacturerId 420E                          _ECANSendMessage 305C  
                    ?_vscp_goActiveState 0001                                  __Hparam 0000  
                        ??_vscp_getEvent 002C                                  __Lparam 0000  
                     _vscp_node_substate 0093               __end_of_vscp_getSegmentCRC 44DA  
             ??_vscp_handleProtocolEvent 00D1                            ??_getCANFrame 001C  
                           doActionOff@i 00CB        __end_of_vscp_getRegisterPagesUsed 44F0  
               __size_of_vscp_getMDF_URL 0018                                  ___lbmod 41C0  
                        getCANFrame@pdlc 001A                  vscp_writeAppReg@val_682 00CB  
                              _FIFOEMPTY 007BA7                          __size_of_doWork 0002  
                           __psmallconst 08BC                     __end_of_init_app_ram 3816  
                     _vscp_sendHeartBeat 41E8                                  __pcinit 42C8  
                         _vscp_deviceURL 08BC                              ?_doActionOn 0051  
                                __ramtop 0600                      __size_of_OpenTimer0 001E  
                                __ptext0 3A04                                  __ptext1 44EC  
                                __ptext2 2514                                  __ptext3 3F9E  
                                __ptext4 41E8                                  __ptext5 449E  
                                __ptext6 44A8                                  __ptext7 44E8  
                                __ptext8 2216                                  __ptext9 332A  
                         _vscp_getUserID 4440                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 004C                         doActionDisable@i 0011  
                  vscp_writeStdReg@value 0048                      ?_vscp_sendHeartBeat 00C5  
               ??_vscp_handleSetNickname 000D                                  _minutes 0089  
                                _seconds 008B                      __end_of_WriteTimer0 447A  
                       ?_init_app_eeprom 0001                      __end_of_Write_b_eep 40E0  
                      vscp_readAppReg@rv 000A                       vscp_getMDF_URL@idx 0009  
          vscp_handleProtocolEvent@bytes 00DE                     end_of_initialization 42E0  
                    __end_of_doActionOff 3A04             __end_of_vscp_handleHeartbeat 406E  
               __size_of_vscp_getSubzone 000A                            __Lmediumconst 0000  
                   __end_of_sendCANFrame 4140                vscp_handleProtocolEvent@i 00EB  
              vscp_handleProtocolEvent@j 00EC                vscp_handleProtocolEvent@k 00E5  
                        ??_doActionPulse 000B                   doActionDisable@dmflags 0010  
                   ??_vscp_sendHeartBeat 004C                           _vscp_sendEvent 425A  
                      ECANSendMessage@id 0012                        ECANSendMessage@pb 001B  
                                postdec2 000FDD                  __size_of_ECANInitialize 0096  
                         _vscp_setUserID 4368                                  postinc0 000FEE  
                                postinc2 000FDE                   __end_of_vscp_deviceURL 08DC  
    __end_of_vscp_writeNicknamePermanent 442C              _vscp_writeNicknamePermanent 4416  
                     __ECANPointBuffer@b 000B                            _sendVSCPFrame 3BA4  
                 __end_of_vscp_getUserID 4454             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0078CB                        __end_of_vscp_init 4030  
                         _vscp_probe_cnt 0094                                _PORTCbits 000F82  
                    __end_of_getCANFrame 416C            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                 __size_of_vscp_readAppReg 00B6  
                       ___lbmod@dividend 0009                         doActionPulse@arg 000A  
                         _vscp_statuscnt 0058                 __size_of_vscp_readStdReg 01AE  
                       doActionPulse@val 000E                       _vscp_setSegmentCRC 4400  
             vscp_handleProtocolEvent@cb 00E3                  __end_of_ECANSendMessage 31C6  
                      vscp_readStdReg@rv 001B                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 00DC  
                   __end_of__RegsToCANID 332A                      __size_of_doActionOn 029A  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 4280  
                             _vscp_error 44E8                     _vscp_doOneSecondWork 3F9E  
                     i1WriteTimer0@timer 0003                               _vscp_timer 0086  
                 __end_of_vscp_setUserID 4384                   vscp_sendHeartBeat@zone 004C  
                           ??_Read_b_eep 000A                           ?_sendVSCPFrame 003F  
            doApplicationOneSecondWork@i 00D1                           _doActionToggle 332A  
                         _doActionStatus 35CC                          ?_vscp_getUserID 0001  
                         __end_of_doWork 44EE             __end_of_vscp_getMinorVersion 44F8  
                            _WriteTimer0 4468                     _SendInformationEvent 3F32  
                   _vscp_getMajorVersion 44F8                              _Write_b_eep 40AC  
                   ??_vscp_setSegmentCRC 000C                        ??_vscp_getMDF_URL 0008  
          ??_vscp_getBootLoaderAlgorithm 0008                        ?_vscp_writeAppReg 0051  
                    start_initialization 42C8                              _doActionOff 391C  
        __size_of_vscp_handleSetNickname 0024                       ??_vscp_writeAppReg 00C7  
                      ?_vscp_writeStdReg 0048                   _relay_protection_timer 0060  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 0008                       ??_vscp_writeStdReg 0049  
                     _vscp_getFamilyCode 44BC                           ??__CANIDToRegs 000F  
                     _vscp_getFamilyType 44B2                         doDM@class_filter 00D0  
                     __end_of_Read_b_eep 448C                      sendVSCPFrame@nodeid 0042  
                      _vscp_readRegister 43A0                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 00E2                    ?_vscp_doOneSecondWork 0001  
                      __size_of_Busy_eep 0006                    ECANReceiveMessage@ptr 0018  
                    ?_vscp_getFamilyCode 0008                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 1946                                _doDM$2152 00D6  
                        ?_vscp_setUserID 000C                                _doDM$2153 00D7  
                              _doDM$2154 00D8                                _doDM$2155 00D9  
                              _doDM$2156 00DA                                _doDM$2157 00DB  
                    ?_vscp_getFamilyType 0008                    __size_of_init_app_ram 010E  
               ?_vscp_handleDropNickname 0001                   __end_of_doActionToggle 347C  
                      ??_vscp_getSubzone 000A                   __end_of_doActionStatus 3708  
               __end_of__ECANPointBuffer 3F32                        __CANIDToRegs@type 000E  
                            _getCANFrame 4140                                 ??_doWork 0008  
                     _vscp_getBufferSize 44F0              vscp_handleProtocolEvent@len 00DF  
                         doActionOff@arg 0051              vscp_handleProtocolEvent@pos 00DD  
             __end_of_ECANReceiveMessage 2CAE                           doActionOff@val 00CA  
                    ??_vscp_readRegister 001D           __size_of_vscp_goBootloaderMode 001C  
                  ?_SendInformationEvent 00C5                    ?_vscp_getMajorVersion 0001  
                  __end_ofi1_WriteTimer0 449E            __end_of_vscp_goBootloaderMode 43A0  
                   _vscp_handleHeartbeat 4030                       __end_of_OpenTimer0 4368  
    __size_of_doApplicationOneSecondWork 02F2                      ?_vscp_getBufferSize 0001  
                         doActionPulse@i 0010             __size_of_vscp_check_pstorage 0024  
                   ??_vscp_getFamilyCode 000C                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0052                     ??_vscp_getFamilyType 000C  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 00B1  
                       _vscp_alarmstatus 0055                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 0030                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 000C                            ?_vscp_setGUID 000C  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0012  
                      ??_vscp_readAppReg 000A                        sendVSCPFrame@size 0044  
              __end_of_vscp_readRegister 43BA                        _relay_pulse_flags 008A  
                           _init_app_ram 3708                        _relay_pulse_timer 0070  
           __size_of_vscp_setControlByte 0016                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 000C                     ??_vscp_getBufferSize 0008  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 430C  
                 _vscp_handleSetNickname 4280            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 00B1                          ?_doActionToggle 0051  
                         _ECANInitialize 3DAE                          ?_doActionStatus 0051  
               __size_of_doActionDisable 009E                                 ?___lbmod 0008  
                    ?_vscp_getMatrixInfo 0001                  calculateSetFilterMask@i 0043  
                calculateSetFilterMask@j 0042                          vscp_getGUID@idx 000A  
                            __pintcodelo 0818                             ??_doActionOn 00C7  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1284 00E1  
                vscp_readStdReg@idx_1268 001A               vscp_setManufacturerId@data 000C  
                           _sendCANFrame 4110                              __smallconst 08BC  
                      WriteTimer0@timer0 0008                       _vscp_getSegmentCRC 44D0  
                         ??_vscp_getGUID 000A                           ??_vscp_getZone 000A  
                            doActionOn@i 00CC           __end_of_vscp_getManufacturerId 4440  
         __end_of_vscp_setManufacturerId 4234                    __size_of__RegsToCANID 0164  
       vscp_handleProtocolEvent@pos_1283 00E0                          doDM@type_filter 00D4  
                         ??_vscp_setGUID 000D                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 0008                         _vscp_configtimer 0084  
                     doActionDisable@arg 000C                       doActionDisable@val 000F  
        SendInformationEvent@eventTypeId 00C6                   ??_vscp_doOneSecondWork 004D  
                 sendVSCPFrame@vscpclass 003F                                 _LATBbits 000F8A  
                   _vscp_getMinorVersion 44F6                                 _LATCbits 000F8B  
                              _sendTimer 008C                       __end_of_doActionOn 2AA0  
                 __end_of_ECANInitialize 3E44                                 i1u802_20 082C  
                               i1u802_21 082A                                 i1u803_20 085C  
                               i1u803_21 085A                                 i1u804_20 0870  
                               i1u804_21 086E                                 i1u805_20 087A  
                               i1u805_21 0878                                 i1u806_20 0882  
                               i1u806_21 0880                                 i1u807_20 0896  
                               i1u807_21 0894                                 i1u808_20 08A4  
                               i1u808_21 08A2                         ECANSendMessage@i 0034  
                       ECANSendMessage@j 002F                    __end_of_vscp_getEvent 41C0  
                               _RXF0EIDH 000F02                                 _RXF0EIDL 000F03  
                               _RXB0OVFL 007BA7                                 _RXF1EIDH 000F06  
                               _RXF1EIDL 000F07                                 _RXB1OVFL 007BA6  
                               _RXF0SIDH 000F00                                 _RXF0SIDL 000F01  
                               _RXF1SIDH 000F04                                 _RXF1SIDL 000F05  
                               _RXM0EIDH 000F1A                                 _RXM0EIDL 000F1B  
                        vscp_getEvent@rv 002C                                 _RXM1EIDH 000F1E  
                               _RXM1EIDL 000F1F                     ??_vscp_getSegmentCRC 000A  
                               _RXFBCON0 000DE0                                 _RXFBCON1 000DE1  
                               _RXFBCON2 000DE2                                 _RXFBCON3 000DE3  
                               _RXFBCON4 000DE4                                 _RXFBCON5 000DE5  
                               _RXFBCON6 000DE6                                 _RXFBCON7 000DE7  
                               _RXM0SIDH 000F18                                 _RXM0SIDL 000F19  
                 ??_SendInformationEvent 004B                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 0008                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 004C  
                     vscp_setUserID@data 000C                     __end_of__CANIDToRegs 35CC  
                           __RegsToCANID 31C6                       _vscp_probe_address 0057  
                        Write_b_eep@badd 0008                          Write_b_eep@bdat 000A  
                     doActionOff@dmflags 00C9              __size_of_vscp_goActiveState 001E  
                    getVSCPFrame@pNodeId 001F                                _vscp_init 3FEC  
                              _vscp_imsg 0096                                _vscp_hour 008E  
                              _vscp_omsg 00A4                         vscp_setGUID@data 000C  
      __size_of_vscp_handleProtocolEvent 063E                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001                 SendInformationEvent@data 004D  
   __size_of_vscp_writeNicknamePermanent 0016       __end_of_doApplicationOneSecondWork 2806  
             _doApplicationOneSecondWork 2514                         _vscp_page_select 0052  
             __size_of_vscp_readRegister 001A                        _measurement_clock 0080  
                               _Busy_eep 44E2                    ?_vscp_getMinorVersion 0001  
               __size_of_init_app_eeprom 0464             __end_of_vscp_restoreDefaults 44E2  
                             _EECON1bits 000FA6                          ?_ECANInitialize 0001  
               ??_calculateSetFilterMask 0012                                 __Hrparam 0000  
                   ECANReceiveMessage@id 0014              __size_of_vscp_sendHeartBeat 0026  
                       ??_vscp_getUserID 000A                          _vscp_getMDF_URL 43BA  
                               __Lrparam 0000                    __end_of_doActionPulse 2EAE  
                       __CANIDToRegs@val 000A                         __CANIDToRegs@ptr 0008  
                          doActionOn@arg 0051                            doActionOn@val 00CB  
                       _vscp_initledfunc 0056                         __size_of___lbmod 0028  
                 ??_vscp_handleHeartbeat 000D                         getCANFrame@flags 001D  
                           ?_WriteTimer0 0008                         getCANFrame@pdata 001B  
                           ?_Write_b_eep 0008                        ??_doActionDisable 000D  
             vscp_writeAppReg@bInfoEvent 00CA                               ?_vscp_init 0001  
                           ?_doActionOff 0051                                 __ptext10 3D10  
                               __ptext11 35CC                                 __ptext20 1DB2  
                               __ptext12 2CAE                                 __ptext21 4368  
                               __ptext13 2806                                 __ptext30 44B2  
                               __ptext22 420E                                 __ptext14 391C  
                               __ptext31 44BC                                 __ptext23 4234  
                               __ptext15 1308                                 __ptext40 44F8  
                               __ptext32 44F0                                 __ptext24 08DE  
                               __ptext16 41C0                                 __ptext41 416C  
                               __ptext33 44F2                                 __ptext25 3F32  
                               __ptext17 42EA                                 __ptext50 432C  
                               __ptext42 40E0                                 __ptext34 442C  
                               __ptext26 1946                                 __ptext18 3816  
                               __ptext51 425A                                 __ptext43 3FEC  
                               __ptext35 4440                                 __ptext27 43A0  
                               __ptext19 44DA                                 __ptext60 31C6  
                               __ptext52 3BA4                                 __ptext44 44C6  
                               __ptext36 43BA                                 __ptext28 2EAE  
                               __ptext61 3EBC                                 __ptext53 4110  
                               __ptext45 4280                                 __ptext37 4454  
                               __ptext29 44EE                                 __ptext70 3DAE  
                               __ptext62 42A4                                 __ptext54 305C  
                               __ptext46 4030                                 __ptext38 44F4  
                               __ptext71 43D2                                 __ptext63 43EA  
                               __ptext55 347C                                 __ptext47 430C  
                               __ptext39 44F6                                 __ptext72 434A  
                               __ptext64 4400                                 __ptext56 4196  
                               __ptext48 4384                                 __ptext73 3708  
                               __ptext65 44D0                                 __ptext57 3E44  
                               __ptext49 3AEA                                 __ptext74 4468  
                               __ptext66 4416                                 __ptext58 4140  
                               __ptext75 3C5A                                 __ptext67 40AC  
                               __ptext59 2AA0                                 __ptext76 447A  
                               __ptext68 44E2                                 __ptext69 406E  
                               __ptext78 448C           vscp_goBootloaderMode@algorithm 000C  
              vscp_sendHeartBeat@subzone 00C5                            ?_getVSCPFrame 001E  
                       ??_vscp_sendEvent 004B                          _vscp_getSubzone 449E  
           calculateSetFilterMask@filter 003A                         ??_vscp_setUserID 000D  
                          __size_of_doDM 02FE                            __size_of_main 00E6  
                          __size_of_init 003E                __size_of_vscp_writeAppReg 0A2A  
                    _vscp_check_pstorage 42A4                            init_app_ram@i 000C  
         vscp_handleProtocolEvent@i_1282 00E6           vscp_handleProtocolEvent@i_1285 00EA  
         vscp_handleProtocolEvent@i_1293 00E4                     __end_of_vscp_getGUID 4468  
              __size_of_vscp_writeStdReg 0106                      ECANSendMessage@data 0016  
               ECANSendMessage@tempBSEL0 0030                             ?_getCANFrame 001A  
                    ECANSendMessage@mode 002D                     __end_of_vscp_getZone 44B2  
                    ECANSendMessage@temp 0033                        ?__ECANPointBuffer 0008  
                      doActionOn@dmflags 00CA                        vscp_setUserID@idx 000D  
                   __end_of_vscp_setGUID 425A                       vscp_readAppReg@reg 000B  
                     ??__ECANPointBuffer 000B           vscp_handleProtocolEvent@offset 00DC  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 000D  
                       init_app_eeprom@i 0046                         init_app_eeprom@j 0047  
                    _vscp_setControlByte 43EA              __size_of_vscp_setSegmentCRC 0016  
                        _vscp_readAppReg 3C5A                     ?_vscp_check_pstorage 0001  
                            _RXB1CONbits 000F50         __size_of_vscp_handleDropNickname 0030  
                             _INTCONbits 000FF2             ??_vscp_readNicknamePermanent 000A  
                    ECANReceiveMessage@i 0015                          _vscp_guid_reset 008D  
                        _vscp_readStdReg 2EAE             vscp_handleDropNickname@bytes 000D  
             __end_of_vscp_newNodeOnline 4196                       _ECANReceiveMessage 2AA0  
                         ??_getVSCPFrame 0023                          _vscp_initbtncnt 008F  
                        sendVSCPFrame@id 0047                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 0008                  vscp_getMatrixInfo@pData 0001  
                __end_of_vscp_getMDF_URL 43D2                     ?_vscp_setControlByte 0001  
                    ?_ECANReceiveMessage 000F                  ?_vscp_handleSetNickname 0001  
                       ??_doActionToggle 00C7         __size_of_vscp_getSubMinorVersion 0002  
                       ??_doActionStatus 00C7                          _vscp_node_state 0092  
                           ??_vscp_error 0008                  ECANSendMessage@msgFlags 0019  
                    vscp_getMatrixInfo@i 0008          __size_of_calculateSetFilterMask 046C  
                vscp_setControlByte@ctrl 000C                       ECANSendMessage@ptr 0035  
                      ??_init_app_eeprom 0044                    __size_of__CANIDToRegs 0150  
    __size_of_vscp_readNicknamePermanent 000A      __end_of_vscp_getBootLoaderAlgorithm 44F4  
            _vscp_getBootLoaderAlgorithm 44F2         __size_of_interrupt_at_low_vector 00A0  
                 ECANSendMessage@dataLen 0018                      __ECANPointBuffer@pt 000C  
                   ??_ECANReceiveMessage 0012                    ??_vscp_check_pstorage 000D  
                 ECANSendMessage@buffers 002E                    _vscp_goBootloaderMode 4384  
           __end_of_ECANSetOperationMode 43EA                     _vscp_restoreDefaults 44DA  
            __size_of_vscp_getFamilyCode 000A                              ??_vscp_init 000A  
                __end_of_vscp_getSubzone 44A8              __size_of_vscp_getFamilyType 000A  
                             _RXM1EXIDEN 0078EB               __end_of_vscp_writeRegister 430C  
                     __end_of_vscp_error 44EC                   ECANSendMessage@tempPtr 0031  
         __end_of_vscp_handleSetNickname 42A4       vscp_handleProtocolEvent@bytes_1289 00E8  
                  ??_vscp_setControlByte 000C                     vscp_readRegister@reg 001D  
           ??_doApplicationOneSecondWork 00CC                             __CANIDToRegs 347C  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00D8  
            __size_of_vscp_getBufferSize 0002        doApplicationOneSecondWork@ctrlreg 00D0  
               __size_of_ECANSendMessage 016A                        doActionToggle@bOn 00CB  
                      doActionToggle@arg 0051  
