

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Mar 24 15:48:08 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    88                           	psect	text77,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    91  0000                     
    92                           	psect	smallconst
    93  0008BA                     __psmallconst:
    94                           	opt stack 0
    95  0008BA                     _vscp_deviceURL:
    96                           	opt stack 0
    97  0008BA  77                 	db	119
    98  0008BB  77                 	db	119
    99  0008BC  77                 	db	119
   100  0008BD  2E                 	db	46
   101  0008BE  65                 	db	101
   102  0008BF  75                 	db	117
   103  0008C0  72                 	db	114
   104  0008C1  6F                 	db	111
   105  0008C2  73                 	db	115
   106  0008C3  6F                 	db	111
   107  0008C4  75                 	db	117
   108  0008C5  72                 	db	114
   109  0008C6  63                 	db	99
   110  0008C7  65                 	db	101
   111  0008C8  2E                 	db	46
   112  0008C9  73                 	db	115
   113  0008CA  65                 	db	101
   114  0008CB  2F                 	db	47
   115  0008CC  70                 	db	112
   116  0008CD  61                 	db	97
   117  0008CE  72                 	db	114
   118  0008CF  69                 	db	105
   119  0008D0  73                 	db	115
   120  0008D1  5F                 	db	95
   121  0008D2  30                 	db	48
   122  0008D3  31                 	db	49
   123  0008D4  30                 	db	48
   124  0008D5  2E                 	db	46
   125  0008D6  78                 	db	120
   126  0008D7  6D                 	db	109
   127  0008D8  6C                 	db	108
   128  0008D9  00                 	db	0
   129  0008DA                     __end_of_vscp_deviceURL:
   130                           	opt stack 0
   131  0000                     _BRGCON1	set	3952
   132  0000                     _BRGCON2	set	3953
   133  0000                     _BRGCON3	set	3954
   134  0000                     _BSEL0	set	3576
   135  0000                     _CANCON	set	3951
   136  0000                     _CIOCON	set	3955
   137  0000                     _ECANCON	set	3959
   138  0000                     _EEADR	set	4009
   139  0000                     _EECON1bits	set	4006
   140  0000                     _EECON2	set	4007
   141  0000                     _EEDATA	set	4008
   142  0000                     _INTCONbits	set	4082
   143  0000                     _LATBbits	set	3978
   144  0000                     _LATCbits	set	3979
   145  0000                     _MSEL0	set	3568
   146  0000                     _MSEL1	set	3569
   147  0000                     _MSEL2	set	3570
   148  0000                     _PIR2bits	set	4001
   149  0000                     _PORTA	set	3968
   150  0000                     _PORTB	set	3969
   151  0000                     _PORTC	set	3970
   152  0000                     _PORTCbits	set	3970
   153  0000                     _RXB1CONbits	set	3920
   154  0000                     _RXF0EIDH	set	3842
   155  0000                     _RXF0EIDL	set	3843
   156  0000                     _RXF0SIDH	set	3840
   157  0000                     _RXF0SIDL	set	3841
   158  0000                     _RXF1EIDH	set	3846
   159  0000                     _RXF1EIDL	set	3847
   160  0000                     _RXF1SIDL	set	3845
   161  0000                     _RXFBCON0	set	3552
   162  0000                     _RXFBCON1	set	3553
   163  0000                     _RXFBCON2	set	3554
   164  0000                     _RXFBCON3	set	3555
   165  0000                     _RXFBCON4	set	3556
   166  0000                     _RXFBCON5	set	3557
   167  0000                     _RXFBCON6	set	3558
   168  0000                     _RXFBCON7	set	3559
   169  0000                     _RXFCON0	set	3540
   170  0000                     _RXFCON1	set	3541
   171  0000                     _RXM0EIDH	set	3866
   172  0000                     _RXM0EIDL	set	3867
   173  0000                     _RXM0SIDH	set	3864
   174  0000                     _RXM0SIDL	set	3865
   175  0000                     _RXM1EIDH	set	3870
   176  0000                     _RXM1EIDL	set	3871
   177  0000                     _RXM1SIDL	set	3869
   178  0000                     _T0CON	set	4053
   179  0000                     _T0CONbits	set	4053
   180  0000                     _TMR0H	set	4055
   181  0000                     _TMR0L	set	4054
   182  0000                     _TRISA	set	3986
   183  0000                     _TRISB	set	3987
   184  0000                     _TRISC	set	3988
   185  0000                     _B0RXFUL	set	28935
   186  0000                     _B0TXEN	set	28610
   187  0000                     _B1RXFUL	set	29063
   188  0000                     _B1TXEN	set	28611
   189  0000                     _B2RXFUL	set	29191
   190  0000                     _B2TXEN	set	28612
   191  0000                     _B3RXFUL	set	29319
   192  0000                     _B3TXEN	set	28613
   193  0000                     _B4RXFUL	set	29447
   194  0000                     _B4TXEN	set	28614
   195  0000                     _B5RXFUL	set	29575
   196  0000                     _B5TXEN	set	28615
   197  0000                     _FIFOEMPTY	set	31655
   198  0000                     _IRXIF	set	32039
   199  0000                     _MDSEL0	set	31678
   200  0000                     _MDSEL1	set	31679
   201  0000                     _RXB0FILHIT0	set	31488
   202  0000                     _RXB0FUL	set	31495
   203  0000                     _RXB0IF	set	32032
   204  0000                     _RXB0OVFL	set	31655
   205  0000                     _RXB1IF	set	32033
   206  0000                     _RXB1OVFL	set	31654
   207  0000                     _RXF1EN	set	28321
   208  0000                     _RXM0EXIDM	set	30923
   209  0000                     _RXM1EXIDEN	set	30955
   210  0000                     _B0CON	set	3616
   211  0000                     _B1CON	set	3632
   212  0000                     _B2CON	set	3648
   213  0000                     _B3CON	set	3664
   214  0000                     _B4CON	set	3680
   215  0000                     _B5CON	set	3696
   216  0000                     _RXB0CON	set	3936
   217  0000                     _RXB1CON	set	3920
   218  0000                     _RXF1SIDH	set	3844
   219  0000                     _RXM1SIDH	set	3868
   220  0000                     _TXB0CON	set	3904
   221  0000                     _TXB1CON	set	3888
   222  0000                     _TXB2CON	set	3872
   223                           
   224                           ; #config settings
   225  0008DA  00                 	db	0	; dummy byte at the end
   226  0000                     
   227                           	psect	cinit
   228  003FDA                     __pcinit:
   229                           	opt stack 0
   230  003FDA                     start_initialization:
   231                           	opt stack 0
   232  003FDA                     __initialization:
   233                           	opt stack 0
   234                           
   235                           ; Clear objects allocated to BANK0 (81 bytes)
   236  003FDA  EE00  F060         	lfsr	0,__pbssBANK0
   237  003FDE  0E51               	movlw	81
   238  003FE0                     clear_0:
   239  003FE0  6AEE               	clrf	postinc0,c
   240  003FE2  06E8               	decf	wreg,f,c
   241  003FE4  E1FD               	bnz	clear_0
   242                           
   243                           ; Clear objects allocated to COMRAM (7 bytes)
   244  003FE6  EE00  F052         	lfsr	0,__pbssCOMRAM
   245  003FEA  0E07               	movlw	7
   246  003FEC                     clear_1:
   247  003FEC  6AEE               	clrf	postinc0,c
   248  003FEE  06E8               	decf	wreg,f,c
   249  003FF0  E1FD               	bnz	clear_1
   250  003FF2                     end_of_initialization:
   251                           	opt stack 0
   252  003FF2                     __end_of__initialization:
   253                           	opt stack 0
   254  003FF2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   255  003FF4  6EF8               	movwf	tblptru,c
   256  003FF6  0100               	movlb	0
   257  003FF8  EF6F  F01B         	goto	_main	;jump to C main() function
   258                           tblptru	equ	0xFF8
   259                           postinc0	equ	0xFEE
   260                           wreg	equ	0xFE8
   261                           
   262                           	psect	bssCOMRAM
   263  000052                     __pbssCOMRAM:
   264                           	opt stack 0
   265  000052                     _vscp_page_select:
   266                           	opt stack 0
   267  000052                     	ds	2
   268  000054                     __ECANRxFilterHitInfo:
   269                           	opt stack 0
   270  000054                     	ds	1
   271  000055                     _sendTimer:
   272                           	opt stack 0
   273  000055                     	ds	1
   274  000056                     _vscp_initledfunc:
   275                           	opt stack 0
   276  000056                     	ds	1
   277  000057                     _vscp_probe_address:
   278                           	opt stack 0
   279  000057                     	ds	1
   280  000058                     _vscp_statuscnt:
   281                           	opt stack 0
   282  000058                     	ds	1
   283                           tblptru	equ	0xFF8
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287                           	psect	bssBANK0
   288  000060                     __pbssBANK0:
   289                           	opt stack 0
   290  000060                     _relay_protection_timer:
   291                           	opt stack 0
   292  000060                     	ds	16
   293  000070                     _relay_pulse_timer:
   294                           	opt stack 0
   295  000070                     	ds	16
   296  000080                     _measurement_clock:
   297                           	opt stack 0
   298  000080                     	ds	4
   299  000084                     _vscp_configtimer:
   300                           	opt stack 0
   301  000084                     	ds	2
   302  000086                     _vscp_timer:
   303                           	opt stack 0
   304  000086                     	ds	2
   305  000088                     _hours:
   306                           	opt stack 0
   307  000088                     	ds	1
   308  000089                     _minutes:
   309                           	opt stack 0
   310  000089                     	ds	1
   311  00008A                     _relay_pulse_flags:
   312                           	opt stack 0
   313  00008A                     	ds	1
   314  00008B                     _seconds:
   315                           	opt stack 0
   316  00008B                     	ds	1
   317  00008C                     _vscp_alarmstatus:
   318                           	opt stack 0
   319  00008C                     	ds	1
   320  00008D                     _vscp_guid_reset:
   321                           	opt stack 0
   322  00008D                     	ds	1
   323  00008E                     _vscp_hour:
   324                           	opt stack 0
   325  00008E                     	ds	1
   326  00008F                     _vscp_initbtncnt:
   327                           	opt stack 0
   328  00008F                     	ds	1
   329  000090                     _vscp_minute:
   330                           	opt stack 0
   331  000090                     	ds	1
   332  000091                     _vscp_nickname:
   333                           	opt stack 0
   334  000091                     	ds	1
   335  000092                     _vscp_node_state:
   336                           	opt stack 0
   337  000092                     	ds	1
   338  000093                     _vscp_node_substate:
   339                           	opt stack 0
   340  000093                     	ds	1
   341  000094                     _vscp_probe_cnt:
   342                           	opt stack 0
   343  000094                     	ds	1
   344  000095                     _vscp_second:
   345                           	opt stack 0
   346  000095                     	ds	1
   347  000096                     _vscp_imsg:
   348                           	opt stack 0
   349  000096                     	ds	14
   350  0000A4                     _vscp_omsg:
   351                           	opt stack 0
   352  0000A4                     	ds	13
   353                           tblptru	equ	0xFF8
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           
   357                           	psect	cstackBANK0
   358  0000B1                     __pcstackBANK0:
   359                           	opt stack 0
   360  0000B1                     ??_sendVSCPFrame:
   361                           
   362                           ; 0 bytes @ 0x0
   363  0000B1                     	ds	20
   364  0000C5                     ?_SendInformationEvent:
   365                           	opt stack 0
   366  0000C5                     ?_vscp_sendHeartBeat:
   367                           	opt stack 0
   368  0000C5                     SendInformationEvent@eventClass:
   369                           	opt stack 0
   370  0000C5                     vscp_sendHeartBeat@subzone:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x14
   374  0000C5                     	ds	1
   375  0000C6                     SendInformationEvent@eventTypeId:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x15
   379  0000C6                     	ds	1
   380  0000C7                     ??_doActionOff:
   381  0000C7                     ??_doActionOn:
   382  0000C7                     ??_doActionStatus:
   383  0000C7                     ??_doActionToggle:
   384  0000C7                     ??_vscp_writeAppReg:
   385                           
   386                           ; 0 bytes @ 0x16
   387  0000C7                     	ds	2
   388  0000C9                     doActionOff@dmflags:
   389                           	opt stack 0
   390  0000C9                     doActionStatus@dmflags:
   391                           	opt stack 0
   392  0000C9                     doActionToggle@dmflags:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x18
   396  0000C9                     	ds	1
   397  0000CA                     vscp_writeAppReg@bInfoEvent:
   398                           	opt stack 0
   399  0000CA                     doActionOn@dmflags:
   400                           	opt stack 0
   401  0000CA                     doActionOff@val:
   402                           	opt stack 0
   403  0000CA                     doActionStatus@bOn:
   404                           	opt stack 0
   405  0000CA                     doActionToggle@val:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x19
   409  0000CA                     	ds	1
   410  0000CB                     vscp_writeAppReg@val_678:
   411                           	opt stack 0
   412  0000CB                     doActionOn@val:
   413                           	opt stack 0
   414  0000CB                     doActionOff@i:
   415                           	opt stack 0
   416  0000CB                     doActionStatus@val:
   417                           	opt stack 0
   418  0000CB                     doActionToggle@bOn:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x1A
   422  0000CB                     	ds	1
   423  0000CC                     ??_doApplicationOneSecondWork:
   424  0000CC                     vscp_writeAppReg@bOn:
   425                           	opt stack 0
   426  0000CC                     doActionOn@i:
   427                           	opt stack 0
   428  0000CC                     doActionStatus@i:
   429                           	opt stack 0
   430  0000CC                     doActionToggle@i:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x1B
   434  0000CC                     	ds	1
   435  0000CD                     ??_doDM:
   436  0000CD                     vscp_writeAppReg@rv:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x1C
   440  0000CD                     	ds	1
   441  0000CE                     vscp_writeAppReg@reg:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x1D
   445  0000CE                     	ds	1
   446  0000CF                     ?_vscp_writeRegister:
   447                           	opt stack 0
   448  0000CF                     doApplicationOneSecondWork@bOn:
   449                           	opt stack 0
   450  0000CF                     vscp_writeRegister@value:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x1E
   454  0000CF                     	ds	1
   455  0000D0                     doApplicationOneSecondWork@ctrlreg:
   456                           	opt stack 0
   457  0000D0                     vscp_writeRegister@reg:
   458                           	opt stack 0
   459  0000D0                     doDM@class_filter:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x1F
   463  0000D0                     	ds	1
   464  0000D1                     ??_vscp_handleProtocolEvent:
   465  0000D1                     doApplicationOneSecondWork@i:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x20
   469  0000D1                     	ds	1
   470  0000D2                     doDM@class_mask:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x21
   474  0000D2                     	ds	2
   475  0000D4                     doDM@type_filter:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x23
   479  0000D4                     	ds	1
   480  0000D5                     doDM@type_mask:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x24
   484  0000D5                     	ds	1
   485  0000D6                     _doDM$2146:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x25
   489  0000D6                     	ds	1
   490  0000D7                     _doDM$2147:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0x26
   494  0000D7                     	ds	1
   495  0000D8                     _doDM$2148:
   496                           	opt stack 0
   497  0000D8                     vscp_handleProtocolEvent@page_save:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x27
   501  0000D8                     	ds	1
   502  0000D9                     _doDM$2149:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x28
   506  0000D9                     	ds	1
   507  0000DA                     _doDM$2150:
   508                           	opt stack 0
   509  0000DA                     vscp_handleProtocolEvent@page_save_1290:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x29
   513  0000DA                     	ds	1
   514  0000DB                     _doDM$2151:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x2A
   518  0000DB                     	ds	1
   519  0000DC                     doDM@dmflags:
   520                           	opt stack 0
   521  0000DC                     vscp_handleProtocolEvent@offset:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x2B
   525  0000DC                     	ds	1
   526  0000DD                     doDM@i:
   527                           	opt stack 0
   528  0000DD                     vscp_handleProtocolEvent@pos:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x2C
   532  0000DD                     	ds	1
   533  0000DE                     vscp_handleProtocolEvent@bytes:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x2D
   537  0000DE                     	ds	1
   538  0000DF                     vscp_handleProtocolEvent@len:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x2E
   542  0000DF                     	ds	1
   543  0000E0                     vscp_handleProtocolEvent@pos_1279:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x2F
   547  0000E0                     	ds	1
   548  0000E1                     vscp_handleProtocolEvent@len_1280:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x30
   552  0000E1                     	ds	1
   553  0000E2                     vscp_handleProtocolEvent@bytes_this_time:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x31
   557  0000E2                     	ds	1
   558  0000E3                     vscp_handleProtocolEvent@cb:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x32
   562  0000E3                     	ds	1
   563  0000E4                     vscp_handleProtocolEvent@i_1289:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x33
   567  0000E4                     	ds	1
   568  0000E5                     vscp_handleProtocolEvent@k:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x34
   572  0000E5                     	ds	1
   573  0000E6                     vscp_handleProtocolEvent@bytes_1286:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x35
   577  0000E6                     	ds	1
   578  0000E7                     vscp_handleProtocolEvent@i_1278:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x36
   582  0000E7                     	ds	1
   583  0000E8                     vscp_handleProtocolEvent@byte:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0x37
   587  0000E8                     	ds	1
   588  0000E9                     vscp_handleProtocolEvent@i_1281:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x38
   592  0000E9                     	ds	1
   593  0000EA                     vscp_handleProtocolEvent@i:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x39
   597  0000EA                     	ds	1
   598  0000EB                     vscp_handleProtocolEvent@j:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x3A
   602  0000EB                     	ds	1
   603                           tblptru	equ	0xFF8
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           
   607                           	psect	cstackCOMRAM
   608  000001                     __pcstackCOMRAM:
   609                           	opt stack 0
   610  000001                     ?i1_WriteTimer0:
   611                           	opt stack 0
   612  000001                     i1WriteTimer0@timer0:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x0
   616  000001                     	ds	2
   617  000003                     i1WriteTimer0@timer:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x2
   621  000003                     	ds	2
   622  000005                     ??_interrupt_at_low_vector:
   623                           
   624                           ; 0 bytes @ 0x4
   625  000005                     	ds	3
   626  000008                     ?_WriteTimer0:
   627                           	opt stack 0
   628  000008                     ?_writeEEPROM:
   629                           	opt stack 0
   630  000008                     ?__CANIDToRegs:
   631                           	opt stack 0
   632  000008                     ?__RegsToCANID:
   633                           	opt stack 0
   634  000008                     ??_vscp_getMDF_URL:
   635  000008                     ?_readEEPROM:
   636                           	opt stack 0
   637  000008                     ?___lbmod:
   638                           	opt stack 0
   639  000008                     ?__ECANPointBuffer:
   640                           	opt stack 0
   641  000008                     ?_vscp_getFamilyCode:
   642                           	opt stack 0
   643  000008                     ?_vscp_getFamilyType:
   644                           	opt stack 0
   645  000008                     vscp_getMatrixInfo@i:
   646                           	opt stack 0
   647  000008                     ECANSetOperationMode@mode:
   648                           	opt stack 0
   649  000008                     OpenTimer0@config:
   650                           	opt stack 0
   651  000008                     ___lbmod@divisor:
   652                           	opt stack 0
   653  000008                     __CANIDToRegs@ptr:
   654                           	opt stack 0
   655  000008                     __RegsToCANID@ptr:
   656                           	opt stack 0
   657  000008                     writeEEPROM@address:
   658                           	opt stack 0
   659  000008                     readEEPROM@address:
   660                           	opt stack 0
   661  000008                     WriteTimer0@timer0:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x7
   665  000008                     	ds	1
   666  000009                     vscp_getMDF_URL@idx:
   667                           	opt stack 0
   668  000009                     ___lbmod@dividend:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x8
   672  000009                     	ds	1
   673  00000A                     __RegsToCANID@val:
   674                           	opt stack 0
   675  00000A                     writeEEPROM@data:
   676                           	opt stack 0
   677  00000A                     readEEPROM@data:
   678                           	opt stack 0
   679  00000A                     ___lbmod@counter:
   680                           	opt stack 0
   681  00000A                     WriteTimer0@timer:
   682                           	opt stack 0
   683  00000A                     __CANIDToRegs@val:
   684                           	opt stack 0
   685                           
   686                           ; 4 bytes @ 0x9
   687  00000A                     	ds	1
   688  00000B                     ??_init_app_eeprom:
   689  00000B                     ??_init_app_ram:
   690  00000B                     ?_doActionPulse:
   691                           	opt stack 0
   692  00000B                     ?_doActionDisable:
   693                           	opt stack 0
   694  00000B                     ?_vscp_setGUID:
   695                           	opt stack 0
   696  00000B                     ?_vscp_setManufacturerId:
   697                           	opt stack 0
   698  00000B                     ?_vscp_setUserID:
   699                           	opt stack 0
   700  00000B                     vscp_setGUID@data:
   701                           	opt stack 0
   702  00000B                     vscp_setManufacturerId@data:
   703                           	opt stack 0
   704  00000B                     vscp_writeNicknamePermanent@nickname:
   705                           	opt stack 0
   706  00000B                     vscp_readAppReg@rv:
   707                           	opt stack 0
   708  00000B                     doActionPulse@arg:
   709                           	opt stack 0
   710  00000B                     doActionDisable@arg:
   711                           	opt stack 0
   712  00000B                     vscp_getGUID@idx:
   713                           	opt stack 0
   714  00000B                     vscp_getUserID@idx:
   715                           	opt stack 0
   716  00000B                     vscp_setUserID@data:
   717                           	opt stack 0
   718  00000B                     vscp_getManufacturerId@idx:
   719                           	opt stack 0
   720  00000B                     vscp_setSegmentCRC@crc:
   721                           	opt stack 0
   722  00000B                     vscp_setControlByte@ctrl:
   723                           	opt stack 0
   724  00000B                     vscp_goBootloaderMode@algorithm:
   725                           	opt stack 0
   726  00000B                     __RegsToCANID@type:
   727                           	opt stack 0
   728  00000B                     __ECANPointBuffer@b:
   729                           	opt stack 0
   730  00000B                     ___lbmod@rem:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0xA
   734  00000B                     	ds	1
   735  00000C                     ??_doActionPulse:
   736  00000C                     ??_doActionDisable:
   737  00000C                     ??__RegsToCANID:
   738  00000C                     vscp_setGUID@idx:
   739                           	opt stack 0
   740  00000C                     vscp_setManufacturerId@idx:
   741                           	opt stack 0
   742  00000C                     vscp_readAppReg@reg:
   743                           	opt stack 0
   744  00000C                     vscp_setUserID@idx:
   745                           	opt stack 0
   746  00000C                     vscp_handleDropNickname@bytes:
   747                           	opt stack 0
   748  00000C                     vscp_readStdReg@rv:
   749                           	opt stack 0
   750  00000C                     __ECANPointBuffer@pt:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0xB
   754  00000C                     	ds	1
   755  00000D                     init_app_ram@i:
   756                           	opt stack 0
   757  00000D                     init_app_eeprom@i:
   758                           	opt stack 0
   759  00000D                     vscp_readStdReg@reg:
   760                           	opt stack 0
   761                           
   762                           ; 1 bytes @ 0xC
   763  00000D                     	ds	1
   764  00000E                     init_app_eeprom@j:
   765                           	opt stack 0
   766  00000E                     doActionDisable@dmflags:
   767                           	opt stack 0
   768  00000E                     __CANIDToRegs@type:
   769                           	opt stack 0
   770  00000E                     __RegsToCANID@Value:
   771                           	opt stack 0
   772  00000E                     vscp_readRegister@reg:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0xD
   776  00000E                     	ds	1
   777  00000F                     ??__CANIDToRegs:
   778  00000F                     ?_ECANReceiveMessage:
   779                           	opt stack 0
   780  00000F                     ?_vscp_writeStdReg:
   781                           	opt stack 0
   782  00000F                     doActionPulse@dmflags:
   783                           	opt stack 0
   784  00000F                     doActionDisable@val:
   785                           	opt stack 0
   786  00000F                     ECANReceiveMessage@data:
   787                           	opt stack 0
   788  00000F                     vscp_writeStdReg@value:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0xE
   792  00000F                     	ds	1
   793  000010                     ??_vscp_writeStdReg:
   794  000010                     doActionPulse@val:
   795                           	opt stack 0
   796  000010                     doActionDisable@i:
   797                           	opt stack 0
   798  000010                     ECANReceiveMessage@dataLen:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0xF
   802  000010                     	ds	1
   803  000011                     doActionPulse@i:
   804                           	opt stack 0
   805  000011                     ECANReceiveMessage@msgFlags:
   806                           	opt stack 0
   807  000011                     __CANIDToRegs@Value:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x10
   811  000011                     	ds	1
   812  000012                     ??_calculateSetFilterMask:
   813  000012                     ?_ECANSendMessage:
   814                           	opt stack 0
   815  000012                     ECANReceiveMessage@savedPtr:
   816                           	opt stack 0
   817  000012                     ECANSendMessage@id:
   818                           	opt stack 0
   819                           
   820                           ; 4 bytes @ 0x11
   821  000012                     	ds	2
   822  000014                     ECANReceiveMessage@id:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0x13
   826  000014                     	ds	1
   827  000015                     ECANReceiveMessage@i:
   828                           	opt stack 0
   829  000015                     vscp_writeStdReg@code:
   830                           	opt stack 0
   831                           
   832                           ; 4 bytes @ 0x14
   833  000015                     	ds	1
   834  000016                     ECANReceiveMessage@mode:
   835                           	opt stack 0
   836  000016                     ECANSendMessage@data:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x15
   840  000016                     	ds	1
   841  000017                     ECANReceiveMessage@temp:
   842                           	opt stack 0
   843                           
   844                           ; 1 bytes @ 0x16
   845  000017                     	ds	1
   846  000018                     ECANSendMessage@dataLen:
   847                           	opt stack 0
   848  000018                     ECANReceiveMessage@ptr:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x17
   852  000018                     	ds	1
   853  000019                     ECANSendMessage@msgFlags:
   854                           	opt stack 0
   855  000019                     vscp_writeStdReg@code_1270:
   856                           	opt stack 0
   857                           
   858                           ; 4 bytes @ 0x18
   859  000019                     	ds	1
   860  00001A                     ??_ECANSendMessage:
   861  00001A                     ?_getCANFrame:
   862                           	opt stack 0
   863  00001A                     getCANFrame@pdlc:
   864                           	opt stack 0
   865                           
   866                           ; 1 bytes @ 0x19
   867  00001A                     	ds	1
   868  00001B                     getCANFrame@pdata:
   869                           	opt stack 0
   870  00001B                     ECANSendMessage@pb:
   871                           	opt stack 0
   872                           
   873                           ; 18 bytes @ 0x1A
   874  00001B                     	ds	1
   875  00001C                     getCANFrame@pid:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x1B
   879  00001C                     	ds	1
   880  00001D                     getCANFrame@flags:
   881                           	opt stack 0
   882  00001D                     vscp_writeStdReg@idx:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0x1C
   886  00001D                     	ds	1
   887  00001E                     ?_getVSCPFrame:
   888                           	opt stack 0
   889  00001E                     getVSCPFrame@pvscptype:
   890                           	opt stack 0
   891  00001E                     vscp_writeStdReg@idx_1271:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x1D
   895  00001E                     	ds	1
   896  00001F                     getVSCPFrame@pNodeId:
   897                           	opt stack 0
   898  00001F                     vscp_writeStdReg@rv:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x1E
   902  00001F                     	ds	1
   903  000020                     getVSCPFrame@pPriority:
   904                           	opt stack 0
   905  000020                     vscp_writeStdReg@reg:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x1F
   909  000020                     	ds	1
   910  000021                     getVSCPFrame@pSize:
   911                           	opt stack 0
   912                           
   913                           ; 1 bytes @ 0x20
   914  000021                     	ds	1
   915  000022                     getVSCPFrame@pData:
   916                           	opt stack 0
   917                           
   918                           ; 1 bytes @ 0x21
   919  000022                     	ds	1
   920  000023                     ??_getVSCPFrame:
   921                           
   922                           ; 0 bytes @ 0x22
   923  000023                     	ds	4
   924  000027                     getVSCPFrame@pvscpclass:
   925                           	opt stack 0
   926                           
   927                           ; 1 bytes @ 0x26
   928  000027                     	ds	1
   929  000028                     getVSCPFrame@id:
   930                           	opt stack 0
   931                           
   932                           ; 4 bytes @ 0x27
   933  000028                     	ds	4
   934  00002C                     vscp_getEvent@rv:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x2B
   938  00002C                     	ds	1
   939  00002D                     ECANSendMessage@mode:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x2C
   943  00002D                     	ds	1
   944  00002E                     ECANSendMessage@buffers:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x2D
   948  00002E                     	ds	1
   949  00002F                     ECANSendMessage@j:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x2E
   953  00002F                     	ds	1
   954  000030                     ECANSendMessage@tempBSEL0:
   955                           	opt stack 0
   956                           
   957                           ; 1 bytes @ 0x2F
   958  000030                     	ds	1
   959  000031                     ECANSendMessage@tempPtr:
   960                           	opt stack 0
   961  000031                     calculateSetFilterMask@rowmask:
   962                           	opt stack 0
   963                           
   964                           ; 4 bytes @ 0x30
   965  000031                     	ds	2
   966  000033                     ECANSendMessage@temp:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x32
   970  000033                     	ds	1
   971  000034                     ECANSendMessage@i:
   972                           	opt stack 0
   973                           
   974                           ; 1 bytes @ 0x33
   975  000034                     	ds	1
   976  000035                     calculateSetFilterMask@lastOID:
   977                           	opt stack 0
   978  000035                     ECANSendMessage@ptr:
   979                           	opt stack 0
   980                           
   981                           ; 2 bytes @ 0x34
   982  000035                     	ds	1
   983  000036                     calculateSetFilterMask@mask:
   984                           	opt stack 0
   985                           
   986                           ; 4 bytes @ 0x35
   987  000036                     	ds	1
   988  000037                     ?_sendCANFrame:
   989                           	opt stack 0
   990  000037                     sendCANFrame@id:
   991                           	opt stack 0
   992                           
   993                           ; 4 bytes @ 0x36
   994  000037                     	ds	3
   995  00003A                     calculateSetFilterMask@filter:
   996                           	opt stack 0
   997                           
   998                           ; 4 bytes @ 0x39
   999  00003A                     	ds	1
  1000  00003B                     sendCANFrame@dlc:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x3A
  1004  00003B                     	ds	1
  1005  00003C                     sendCANFrame@pdata:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0x3B
  1009  00003C                     	ds	2
  1010  00003E                     sendCANFrame@rv:
  1011                           	opt stack 0
  1012  00003E                     calculateSetFilterMask@rowfilter:
  1013                           	opt stack 0
  1014                           
  1015                           ; 4 bytes @ 0x3D
  1016  00003E                     	ds	1
  1017  00003F                     ?_sendVSCPFrame:
  1018                           	opt stack 0
  1019  00003F                     sendVSCPFrame@vscpclass:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x3E
  1023  00003F                     	ds	2
  1024  000041                     sendVSCPFrame@vscptype:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0x40
  1028  000041                     	ds	1
  1029  000042                     sendVSCPFrame@nodeid:
  1030                           	opt stack 0
  1031  000042                     calculateSetFilterMask@j:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x41
  1035  000042                     	ds	1
  1036  000043                     sendVSCPFrame@priority:
  1037                           	opt stack 0
  1038  000043                     calculateSetFilterMask@i:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x42
  1042  000043                     	ds	1
  1043  000044                     sendVSCPFrame@size:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x43
  1047  000044                     	ds	1
  1048  000045                     sendVSCPFrame@pData:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x44
  1052  000045                     	ds	2
  1053  000047                     sendVSCPFrame@id:
  1054                           	opt stack 0
  1055                           
  1056                           ; 4 bytes @ 0x46
  1057  000047                     	ds	4
  1058  00004B                     ??_SendInformationEvent:
  1059  00004B                     
  1060                           ; 0 bytes @ 0x4A
  1061  00004B                     	ds	1
  1062  00004C                     ??_vscp_newNodeOnline:
  1063  00004C                     vscp_sendHeartBeat@zone:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0x4B
  1067  00004C                     	ds	1
  1068  00004D                     ??_vscp_doOneSecondWork:
  1069  00004D                     SendInformationEvent@data:
  1070                           	opt stack 0
  1071                           
  1072                           ; 3 bytes @ 0x4C
  1073  00004D                     	ds	3
  1074  000050                     SendInformationEvent@idx:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x4F
  1078  000050                     	ds	1
  1079  000051                     ?_doActionOff:
  1080                           	opt stack 0
  1081  000051                     ?_doActionOn:
  1082                           	opt stack 0
  1083  000051                     ?_doActionStatus:
  1084                           	opt stack 0
  1085  000051                     ?_doActionToggle:
  1086                           	opt stack 0
  1087  000051                     ?_vscp_writeAppReg:
  1088                           	opt stack 0
  1089  000051                     vscp_writeAppReg@val:
  1090                           	opt stack 0
  1091  000051                     doActionOn@arg:
  1092                           	opt stack 0
  1093  000051                     doActionOff@arg:
  1094                           	opt stack 0
  1095  000051                     doActionStatus@arg:
  1096                           	opt stack 0
  1097  000051                     doActionToggle@arg:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x50
  1101  000051                     	ds	1
  1102  000052                     tblptru	equ	0xFF8
  1103                           postinc0	equ	0xFEE
  1104                           wreg	equ	0xFE8
  1105                           
  1106                           ; 0 bytes @ 0x51
  1107 ;;
  1108 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1109 ;;
  1110 ;; *************** function _main *****************
  1111 ;; Defined at:
  1112 ;;		line 190 in file "../main.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;		None
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;		None
  1117 ;; Return value:  Size  Location     Type
  1118 ;;		None               void
  1119 ;; Registers used:
  1120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : F/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1126 ;;      Params:         0       0       0       0       0       0       0
  1127 ;;      Locals:         0       0       0       0       0       0       0
  1128 ;;      Temps:          0       0       0       0       0       0       0
  1129 ;;      Totals:         0       0       0       0       0       0       0
  1130 ;;Total ram usage:        0 bytes
  1131 ;; Hardware stack levels required when called:   10
  1132 ;; This function calls:
  1133 ;;		_init
  1134 ;;		_vscp_check_pstorage
  1135 ;;		_init_app_eeprom
  1136 ;;		_init_app_ram
  1137 ;;		_vscp_init
  1138 ;;		_writeEEPROM
  1139 ;;		_vscp_getEvent
  1140 ;;		_vscp_goActiveState
  1141 ;;		_vscp_handleProbeState
  1142 ;;		_vscp_handleProtocolEvent
  1143 ;;		_doDM
  1144 ;;		_vscp_error
  1145 ;;		_vscp_doOneSecondWork
  1146 ;;		_doApplicationOneSecondWork
  1147 ;;		_doWork
  1148 ;; This function is called by:
  1149 ;;		Startup code after reset
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text0
  1154  0036DE                     __ptext0:
  1155                           	opt stack 0
  1156  0036DE                     _main:
  1157                           	opt stack 21
  1158                           
  1159                           ;main.c: 191: init();
  1160                           
  1161                           ;incstack = 0
  1162                           ;incstack = 0
  1163  0036DE  EC05  F01F         	call	_init	;wreg free
  1164                           
  1165                           ;main.c: 195: if ( !vscp_check_pstorage() ) {
  1166  0036E2  ECDB  F01F         	call	_vscp_check_pstorage	;wreg free
  1167  0036E6  0900               	iorlw	0
  1168  0036E8  E104               	bnz	l9195
  1169                           
  1170                           ;main.c: 198: init_app_eeprom();
  1171  0036EA  EC89  F00E         	call	_init_app_eeprom	;wreg free
  1172                           
  1173                           ;main.c: 199: init_app_ram();
  1174  0036EE  ECF0  F019         	call	_init_app_ram	;wreg free
  1175  0036F2                     l9195:
  1176                           
  1177                           ;main.c: 202: }
  1178                           ;main.c: 204: vscp_init();
  1179  0036F2  ECA4  F01E         	call	_vscp_init	;wreg free
  1180  0036F6                     l149:
  1181                           
  1182                           ; BSR set to: 0
  1183  0036F6  0004               	clrwdt		;# 
  1184                           
  1185                           ;main.c: 210: if ( ( vscp_initbtncnt > 250 ) &&
  1186                           ;main.c: 211: ( 0x01 != vscp_node_state ) ) {
  1187  0036F8  0EFA               	movlw	250
  1188  0036FA  0100               	movlb	0	; () banked
  1189  0036FC  658F               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1190  0036FE  D00C               	goto	l9205
  1191                           
  1192                           ; BSR set to: 0
  1193  003700  0592               	decf	_vscp_node_state& (0+255),w,b
  1194  003702  E00A               	bz	l9205
  1195                           
  1196                           ; BSR set to: 0
  1197                           ;main.c: 214: vscp_nickname = 0xff;
  1198  003704  6991               	setf	_vscp_nickname& (0+255),b
  1199                           
  1200                           ; BSR set to: 0
  1201                           ;main.c: 215: writeEEPROM( 0x01, 0xff );
  1202  003706  6A09               	clrf	?_writeEEPROM+1,c
  1203  003708  0E01               	movlw	1
  1204  00370A  6E08               	movwf	?_writeEEPROM,c
  1205  00370C  0EFF               	movlw	255
  1206  00370E  680A               	setf	?_writeEEPROM+2,c
  1207  003710  ECB6  F01F         	call	_writeEEPROM	;wreg free
  1208                           
  1209                           ;main.c: 216: vscp_init();
  1210  003714  ECA4  F01E         	call	_vscp_init	;wreg free
  1211  003718                     l9205:
  1212                           
  1213                           ; BSR set to: 0
  1214                           ;main.c: 218: }
  1215                           ;main.c: 221: vscp_imsg.flags = 0;
  1216  003718  6B96               	clrf	_vscp_imsg& (0+255),b
  1217                           
  1218                           ; BSR set to: 0
  1219                           ;main.c: 222: vscp_getEvent();
  1220  00371A  EC67  F01F         	call	_vscp_getEvent	;wreg free
  1221                           
  1222                           ;main.c: 224: switch ( vscp_node_state ) {
  1223  00371E  D01C               	goto	l9229
  1224  003720                     l9209:
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;main.c: 229: if (0xff == vscp_nickname) {
  1228  003720  2991               	incf	_vscp_nickname& (0+255),w,b
  1229  003722  E103               	bnz	l9213
  1230                           
  1231                           ; BSR set to: 0
  1232                           ;main.c: 231: vscp_node_state = 0x01;
  1233  003724  0E01               	movlw	1
  1234  003726  6F92               	movwf	_vscp_node_state& (0+255),b
  1235                           
  1236                           ;main.c: 232: } else {
  1237  003728  D023               	goto	l9231
  1238  00372A                     l9213:
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;main.c: 234: vscp_node_state = 0x03;
  1242  00372A  0E03               	movlw	3
  1243  00372C  6F92               	movwf	_vscp_node_state& (0+255),b
  1244  00372E                     l9215:
  1245                           
  1246                           ; BSR set to: 0
  1247                           ;main.c: 235: vscp_goActiveState();
  1248  00372E  EC41  F020         	call	_vscp_goActiveState	;wreg free
  1249  003732  D01E               	goto	l9231
  1250  003734                     l9217:
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;main.c: 240: vscp_handleProbeState();
  1254  003734  EC3C  F01C         	call	_vscp_handleProbeState	;wreg free
  1255                           
  1256                           ;main.c: 241: break;
  1257  003738  D01B               	goto	l9231
  1258  00373A                     l158:
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;main.c: 250: if (vscp_imsg.flags & 0x80) {
  1262  00373A  AF96               	btfss	_vscp_imsg& (0+255),7,b
  1263  00373C  D019               	goto	l9231
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;main.c: 252: if ( 0 == vscp_imsg.vscp_class ) {
  1267  00373E  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  1268  003740  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1269  003742  B4D8               	btfsc	status,2,c
  1270                           
  1271                           ; BSR set to: 0
  1272                           ;main.c: 255: vscp_handleProtocolEvent();
  1273  003744  EC45  F009         	call	_vscp_handleProtocolEvent	;wreg free
  1274                           
  1275                           ;main.c: 257: }
  1276                           ;main.c: 259: doDM();
  1277  003748  EC44  F010         	call	_doDM	;wreg free
  1278  00374C  D011               	goto	l9231
  1279  00374E                     l9225:
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;main.c: 265: vscp_error();
  1283  00374E  EC12  F021         	call	_vscp_error	;wreg free
  1284                           
  1285                           ;main.c: 266: break;
  1286  003752  D00E               	goto	l9231
  1287  003754                     l162:
  1288                           
  1289                           ; BSR set to: 0
  1290                           ;main.c: 269: vscp_node_state = 0x00;
  1291  003754  6B92               	clrf	_vscp_node_state& (0+255),b
  1292                           
  1293                           ;main.c: 270: break;
  1294  003756  D00C               	goto	l9231
  1295  003758                     l9229:
  1296  003758  0100               	movlb	0	; () banked
  1297  00375A  5192               	movf	_vscp_node_state& (0+255),w,b
  1298                           
  1299                           ; Switch size 1, requested type "speed"
  1300                           ; Number of cases is 5, Range of values is 0 to 4
  1301                           ; switch strategies available:
  1302                           ; Name         Instructions Cycles
  1303                           ; simple_byte           16     9 (average)
  1304                           ;	Chosen strategy is simple_byte
  1305  00375C  E0E1               	bz	l9209
  1306  00375E  0A01               	xorlw	1	; case 1
  1307  003760  E0E9               	bz	l9217
  1308  003762  0A03               	xorlw	3	; case 2
  1309  003764  E0E4               	bz	l9215
  1310  003766  0A01               	xorlw	1	; case 3
  1311  003768  E0E8               	bz	l158
  1312  00376A  0A07               	xorlw	7	; case 4
  1313  00376C  E0F0               	bz	l9225
  1314  00376E  D7F2               	goto	l162
  1315  003770                     l9231:
  1316                           
  1317                           ;main.c: 275: if ( measurement_clock > 1000 ) {
  1318  003770  0EE9               	movlw	233
  1319  003772  0100               	movlb	0	; () banked
  1320  003774  5D80               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1321  003776  0E03               	movlw	3
  1322  003778  5981               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1323  00377A  0E00               	movlw	0
  1324  00377C  5982               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1325  00377E  0E00               	movlw	0
  1326  003780  5983               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1327  003782  E30C               	bnc	l9243
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;main.c: 277: measurement_clock = 0;
  1331  003784  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
  1332  003786  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1333  003788  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1334  00378A  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1335                           
  1336                           ; BSR set to: 0
  1337                           ;main.c: 279: sendTimer++;
  1338  00378C  2A55               	incf	_sendTimer,f,c
  1339                           
  1340                           ; BSR set to: 0
  1341                           ;main.c: 282: vscp_doOneSecondWork();
  1342  00378E  EC7D  F01E         	call	_vscp_doOneSecondWork	;wreg free
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;main.c: 286: if ( 0x03 == vscp_node_state ) {
  1346  003792  5192               	movf	_vscp_node_state& (0+255),w,b
  1347  003794  0A03               	xorlw	3
  1348  003796  B4D8               	btfsc	status,2,c
  1349                           
  1350                           ; BSR set to: 0
  1351                           ;main.c: 289: doApplicationOneSecondWork();
  1352  003798  ECD0  F011         	call	_doApplicationOneSecondWork	;wreg free
  1353  00379C                     l9243:
  1354                           
  1355                           ; BSR set to: 0
  1356                           ;main.c: 291: }
  1357                           ;main.c: 293: }
  1358                           ;main.c: 296: if ( seconds > 59 ) {
  1359  00379C  0E3B               	movlw	59
  1360  00379E  658B               	cpfsgt	_seconds& (0+255),b
  1361  0037A0  D00B               	goto	l9259
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;main.c: 298: seconds = 0;
  1365  0037A2  6B8B               	clrf	_seconds& (0+255),b
  1366                           
  1367                           ; BSR set to: 0
  1368                           ;main.c: 299: minutes++;
  1369  0037A4  2B89               	incf	_minutes& (0+255),f,b
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;main.c: 301: if ( minutes > 59 ) {
  1373  0037A6  0E3B               	movlw	59
  1374  0037A8  6589               	cpfsgt	_minutes& (0+255),b
  1375  0037AA  D002               	goto	l9255
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;main.c: 302: minutes = 0;
  1379  0037AC  6B89               	clrf	_minutes& (0+255),b
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;main.c: 303: hours++;
  1383  0037AE  2B88               	incf	_hours& (0+255),f,b
  1384  0037B0                     l9255:
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;main.c: 304: }
  1388                           ;main.c: 306: if ( hours > 23 ) hours = 0;
  1389  0037B0  0E17               	movlw	23
  1390  0037B2  6588               	cpfsgt	_hours& (0+255),b
  1391  0037B4  D001               	goto	l9259
  1392                           
  1393                           ; BSR set to: 0
  1394  0037B6  6B88               	clrf	_hours& (0+255),b
  1395  0037B8                     l9259:
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;main.c: 308: }
  1399                           ;main.c: 310: doWork();
  1400  0037B8  EC14  F021         	call	_doWork	;wreg free
  1401  0037BC  D79C               	goto	l149
  1402  0037BE                     __end_of_main:
  1403                           	opt stack 0
  1404                           tblptru	equ	0xFF8
  1405                           postinc0	equ	0xFEE
  1406                           wreg	equ	0xFE8
  1407                           status	equ	0xFD8
  1408                           
  1409 ;; *************** function _doWork *****************
  1410 ;; Defined at:
  1411 ;;		line 887 in file "../main.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;		None
  1414 ;; Auto vars:     Size  Location     Type
  1415 ;;		None
  1416 ;; Return value:  Size  Location     Type
  1417 ;;		None               void
  1418 ;; Registers used:
  1419 ;;		wreg, status,2, status,0
  1420 ;; Tracked objects:
  1421 ;;		On entry : F/0
  1422 ;;		On exit  : F/0
  1423 ;;		Unchanged: F/0
  1424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1425 ;;      Params:         0       0       0       0       0       0       0
  1426 ;;      Locals:         0       0       0       0       0       0       0
  1427 ;;      Temps:          0       0       0       0       0       0       0
  1428 ;;      Totals:         0       0       0       0       0       0       0
  1429 ;;Total ram usage:        0 bytes
  1430 ;; Hardware stack levels used:    1
  1431 ;; Hardware stack levels required when called:    2
  1432 ;; This function calls:
  1433 ;;		Nothing
  1434 ;; This function is called by:
  1435 ;;		_main
  1436 ;; This function uses a non-reentrant model
  1437 ;;
  1438                           
  1439                           	psect	text1
  1440  004228                     __ptext1:
  1441                           	opt stack 0
  1442  004228                     _doWork:
  1443                           	opt stack 28
  1444                           
  1445                           ; BSR set to: 0
  1446                           
  1447                           ; BSR set to: 0
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;incstack = 0
  1451                           ;incstack = 0
  1452  004228  0012               	return	
  1453  00422A                     __end_of_doWork:
  1454                           	opt stack 0
  1455                           tblptru	equ	0xFF8
  1456                           postinc0	equ	0xFEE
  1457                           wreg	equ	0xFE8
  1458                           status	equ	0xFD8
  1459                           
  1460 ;; *************** function _doApplicationOneSecondWork *****************
  1461 ;; Defined at:
  1462 ;;		line 592 in file "../main.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;		None
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;  i               1   32[BANK0 ] unsigned char 
  1467 ;;  ctrlreg         1   31[BANK0 ] unsigned char 
  1468 ;;  bOn             1   30[BANK0 ] enum E15660
  1469 ;; Return value:  Size  Location     Type
  1470 ;;		None               void
  1471 ;; Registers used:
  1472 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1473 ;; Tracked objects:
  1474 ;;		On entry : F/0
  1475 ;;		On exit  : F/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1478 ;;      Params:         0       0       0       0       0       0       0
  1479 ;;      Locals:         0       3       0       0       0       0       0
  1480 ;;      Temps:          0       3       0       0       0       0       0
  1481 ;;      Totals:         0       6       0       0       0       0       0
  1482 ;;Total ram usage:        6 bytes
  1483 ;; Hardware stack levels used:    1
  1484 ;; Hardware stack levels required when called:    8
  1485 ;; This function calls:
  1486 ;;		_readEEPROM
  1487 ;;		_doActionOff
  1488 ;;		_SendInformationEvent
  1489 ;; This function is called by:
  1490 ;;		_main
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           	psect	text2
  1495  0023A0                     __ptext2:
  1496                           	opt stack 0
  1497  0023A0                     _doApplicationOneSecondWork:
  1498                           	opt stack 22
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;main.c: 594: uint8_t i;
  1502                           ;main.c: 595: uint8_t ctrlreg;
  1503                           ;main.c: 596: BOOL bOn = 0;
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;incstack = 0
  1507                           ;incstack = 0
  1508  0023A0  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1509                           
  1510                           ;main.c: 598: for ( i = 0; i < 8; i++ ) {
  1511  0023A2  6BD1               	clrf	doApplicationOneSecondWork@i& (0+255),b
  1512  0023A4                     l9751:
  1513                           
  1514                           ; BSR set to: 0
  1515  0023A4  0E07               	movlw	7
  1516  0023A6  65D1               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  1517  0023A8  D001               	goto	l9755
  1518  0023AA  D172               	goto	l234
  1519  0023AC                     l9755:
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;main.c: 601: ctrlreg = readEEPROM( 0x43 + 10 + i );
  1523  0023AC  0E4D               	movlw	77
  1524  0023AE  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1525  0023B0  6E08               	movwf	?_readEEPROM,c
  1526  0023B2  6A09               	clrf	?_readEEPROM+1,c
  1527  0023B4  0E00               	movlw	0
  1528  0023B6  2209               	addwfc	?_readEEPROM+1,f,c
  1529  0023B8  ECDE  F020         	call	_readEEPROM	;wreg free
  1530  0023BC  0100               	movlb	0	; () banked
  1531  0023BE  6FD0               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;main.c: 604: if ( !( ctrlreg & 0x80 ) ) continue;
  1535  0023C0  AFD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  1536  0023C2  D164               	goto	l9839
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;main.c: 608: if ( relay_protection_timer[ i ] ) {
  1540                           
  1541                           ; BSR set to: 0
  1542  0023C4  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1543  0023C6  0D02               	mullw	2
  1544  0023C8  50F3               	movf	prodl,w,c
  1545  0023CA  0F60               	addlw	low _relay_protection_timer
  1546  0023CC  6ED9               	movwf	fsr2l,c
  1547  0023CE  6ADA               	clrf	fsr2h,c
  1548  0023D0  50DE               	movf	postinc2,w,c
  1549  0023D2  10DD               	iorwf	postdec2,w,c
  1550  0023D4  E037               	bz	l9773
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;main.c: 610: relay_protection_timer[ i ]--;
  1554  0023D6  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1555  0023D8  0D02               	mullw	2
  1556  0023DA  50F3               	movf	prodl,w,c
  1557  0023DC  0F60               	addlw	low _relay_protection_timer
  1558  0023DE  6ED9               	movwf	fsr2l,c
  1559  0023E0  6ADA               	clrf	fsr2h,c
  1560  0023E2  06DE               	decf	postinc2,f,c
  1561  0023E4  0E00               	movlw	0
  1562  0023E6  5ADD               	subwfb	postdec2,f,c
  1563                           
  1564                           ;main.c: 613: if ( !relay_protection_timer[ i ] &&
  1565                           ;main.c: 614: ( readEEPROM( 0x43 + 10 + i ) &
  1566                           ;main.c: 615: 0x04 ) ) {
  1567  0023E8  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1568  0023EA  0D02               	mullw	2
  1569  0023EC  50F3               	movf	prodl,w,c
  1570  0023EE  0F60               	addlw	low _relay_protection_timer
  1571  0023F0  6ED9               	movwf	fsr2l,c
  1572  0023F2  6ADA               	clrf	fsr2h,c
  1573  0023F4  50DE               	movf	postinc2,w,c
  1574  0023F6  10DD               	iorwf	postdec2,w,c
  1575  0023F8  E146               	bnz	l9775
  1576                           
  1577                           ; BSR set to: 0
  1578  0023FA  0E4D               	movlw	77
  1579  0023FC  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1580  0023FE  6E08               	movwf	?_readEEPROM,c
  1581  002400  6A09               	clrf	?_readEEPROM+1,c
  1582  002402  0E00               	movlw	0
  1583  002404  2209               	addwfc	?_readEEPROM+1,f,c
  1584  002406  ECDE  F020         	call	_readEEPROM	;wreg free
  1585  00240A  0100               	movlb	0	; () banked
  1586  00240C  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1587  00240E  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1588  002410  D03A               	goto	l9775
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;main.c: 618: doActionOff( 0, (1 << i) );
  1592  002412  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1593  002416  0E01               	movlw	1
  1594  002418  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1595  00241A  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1596  00241C  D002               	goto	u12024
  1597  00241E                     u12025:
  1598  00241E  90D8               	bcf	status,0,c
  1599  002420  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1600  002422                     u12024:
  1601  002422  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1602  002424  D7FC               	goto	u12025
  1603  002426  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1604  002428  6E51               	movwf	?_doActionOff,c
  1605  00242A  0E00               	movlw	0
  1606  00242C  ECDF  F01B         	call	_doActionOff
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;main.c: 621: if ( ctrlreg & 0x02 ) {
  1610  002430  A3D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  1611  002432  D029               	goto	l9775
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;main.c: 622: SendInformationEvent( i, 1,
  1615                           ;main.c: 623: 2 );
  1616  002434  0E01               	movlw	1
  1617  002436  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1618  002438  0E02               	movlw	2
  1619  00243A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1620  00243C  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1621  00243E  EC47  F01E         	call	_SendInformationEvent
  1622  002442  D021               	goto	l9775
  1623  002444                     l9773:
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;main.c: 628: else {
  1627                           ;main.c: 630: relay_protection_timer[ i ] =
  1628                           ;main.c: 631: readEEPROM(0x43 + 34 + i ) * 256 +
  1629                           ;main.c: 632: readEEPROM(0x43 + 35 + i );
  1630  002444  0E65               	movlw	101
  1631  002446  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1632  002448  6E08               	movwf	?_readEEPROM,c
  1633  00244A  6A09               	clrf	?_readEEPROM+1,c
  1634  00244C  0E00               	movlw	0
  1635  00244E  2209               	addwfc	?_readEEPROM+1,f,c
  1636  002450  ECDE  F020         	call	_readEEPROM	;wreg free
  1637  002454  0100               	movlb	0	; () banked
  1638  002456  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1639  002458  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1640  00245A  0E66               	movlw	102
  1641  00245C  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1642  00245E  6E08               	movwf	?_readEEPROM,c
  1643  002460  6A09               	clrf	?_readEEPROM+1,c
  1644  002462  0E00               	movlw	0
  1645  002464  2209               	addwfc	?_readEEPROM+1,f,c
  1646  002466  ECDE  F020         	call	_readEEPROM	;wreg free
  1647  00246A  0100               	movlb	0	; () banked
  1648  00246C  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1649  00246E  0E00               	movlw	0
  1650  002470  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1651  002472  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1652  002474  0D02               	mullw	2
  1653  002476  50F3               	movf	prodl,w,c
  1654  002478  0F60               	addlw	low _relay_protection_timer
  1655  00247A  6ED9               	movwf	fsr2l,c
  1656  00247C  6ADA               	clrf	fsr2h,c
  1657  00247E  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1658  002482  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1659  002486                     l9775:
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;main.c: 633: }
  1663                           ;main.c: 636: if ( relay_pulse_flags & (1 << i) ) {
  1664  002486  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1665  00248A  0E01               	movlw	1
  1666  00248C  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1667  00248E  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1668  002490  D002               	goto	u12044
  1669  002492                     u12045:
  1670  002492  90D8               	bcf	status,0,c
  1671  002494  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1672  002496                     u12044:
  1673  002496  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1674  002498  D7FC               	goto	u12045
  1675  00249A  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1676  00249C  158A               	andwf	_relay_pulse_flags& (0+255),w,b
  1677  00249E  E101 D0F5          	bz	l9839
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;main.c: 638: if ( relay_pulse_timer[ i ] ) {
  1681  0024A2  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1682  0024A4  0D02               	mullw	2
  1683  0024A6  50F3               	movf	prodl,w,c
  1684  0024A8  0F70               	addlw	low _relay_pulse_timer
  1685  0024AA  6ED9               	movwf	fsr2l,c
  1686  0024AC  6ADA               	clrf	fsr2h,c
  1687  0024AE  50DE               	movf	postinc2,w,c
  1688  0024B0  10DD               	iorwf	postdec2,w,c
  1689  0024B2  E101 D0CC          	bz	l9837
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;main.c: 640: relay_pulse_timer[ i ]--;
  1693  0024B6  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1694  0024B8  0D02               	mullw	2
  1695  0024BA  50F3               	movf	prodl,w,c
  1696  0024BC  0F70               	addlw	low _relay_pulse_timer
  1697  0024BE  6ED9               	movwf	fsr2l,c
  1698  0024C0  6ADA               	clrf	fsr2h,c
  1699  0024C2  06DE               	decf	postinc2,f,c
  1700  0024C4  0E00               	movlw	0
  1701  0024C6  5ADD               	subwfb	postdec2,f,c
  1702                           
  1703                           ;main.c: 643: if ( !relay_pulse_timer[ i ] ) {
  1704  0024C8  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1705  0024CA  0D02               	mullw	2
  1706  0024CC  50F3               	movf	prodl,w,c
  1707  0024CE  0F70               	addlw	low _relay_pulse_timer
  1708  0024D0  6ED9               	movwf	fsr2l,c
  1709  0024D2  6ADA               	clrf	fsr2h,c
  1710  0024D4  50DE               	movf	postinc2,w,c
  1711  0024D6  10DD               	iorwf	postdec2,w,c
  1712  0024D8  E02E               	bz	l9813
  1713  0024DA  D0D8               	goto	l9839
  1714  0024DC                     l204:
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;main.c: 648: if ( LATBbits.LATB4 ) {
  1718  0024DC  A88A               	btfss	3978,4,c	;volatile
  1719  0024DE  D002               	goto	l205
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;main.c: 649: LATBbits.LATB4 = 0;
  1723  0024E0  988A               	bcf	3978,4,c	;volatile
  1724  0024E2  D025               	goto	L6
  1725  0024E4                     l205:
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;main.c: 652: LATBbits.LATB4 = 1;
  1729  0024E4  888A               	bsf	3978,4,c	;volatile
  1730  0024E6                     l9785:
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;main.c: 653: bOn = 1;
  1734  0024E6  0E01               	movlw	1
  1735  0024E8  6FCF               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  1736  0024EA  D033               	goto	l9815
  1737  0024EC                     l208:
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;main.c: 658: if ( LATBbits.LATB1 ) {
  1741  0024EC  A28A               	btfss	3978,1,c	;volatile
  1742  0024EE  D002               	goto	l209
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;main.c: 659: LATBbits.LATB1 = 0;
  1746  0024F0  928A               	bcf	3978,1,c	;volatile
  1747  0024F2  D01D               	goto	L6
  1748  0024F4                     l209:
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;main.c: 662: LATBbits.LATB1 = 1;
  1752  0024F4  828A               	bsf	3978,1,c	;volatile
  1753  0024F6  D7F7               	goto	l9785
  1754  0024F8                     l211:
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;main.c: 668: if ( LATBbits.LATB0 ) {
  1758  0024F8  A08A               	btfss	3978,0,c	;volatile
  1759  0024FA  D002               	goto	l212
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;main.c: 669: LATBbits.LATB0 = 0;
  1763  0024FC  908A               	bcf	3978,0,c	;volatile
  1764  0024FE  D017               	goto	L6
  1765  002500                     l212:
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;main.c: 672: LATBbits.LATB0 = 1;
  1769  002500  808A               	bsf	3978,0,c	;volatile
  1770  002502  D7F1               	goto	l9785
  1771  002504                     l214:
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;main.c: 678: if ( LATCbits.LATC7 ) {
  1775  002504  AE8B               	btfss	3979,7,c	;volatile
  1776  002506  D002               	goto	l215
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;main.c: 679: LATCbits.LATC7 = 0;
  1780  002508  9E8B               	bcf	3979,7,c	;volatile
  1781  00250A  D011               	goto	L6
  1782  00250C                     l215:
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;main.c: 682: LATCbits.LATC7 = 1;
  1786  00250C  8E8B               	bsf	3979,7,c	;volatile
  1787  00250E  D7EB               	goto	l9785
  1788  002510                     l217:
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;main.c: 688: if ( LATCbits.LATC6 ) {
  1792  002510  AC8B               	btfss	3979,6,c	;volatile
  1793  002512  D002               	goto	l218
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;main.c: 689: LATCbits.LATC6 = 0;
  1797  002514  9C8B               	bcf	3979,6,c	;volatile
  1798  002516  D00B               	goto	L6
  1799  002518                     l218:
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;main.c: 692: LATCbits.LATC6 = 1;
  1803  002518  8C8B               	bsf	3979,6,c	;volatile
  1804  00251A  D7E5               	goto	l9785
  1805  00251C                     l220:
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;main.c: 698: if ( LATCbits.LATC5 ) {
  1809  00251C  AA8B               	btfss	3979,5,c	;volatile
  1810  00251E  D002               	goto	l221
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;main.c: 699: LATCbits.LATC5 = 0;
  1814  002520  9A8B               	bcf	3979,5,c	;volatile
  1815  002522  D005               	goto	L6
  1816  002524                     l221:
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;main.c: 702: LATCbits.LATC5 = 1;
  1820  002524  8A8B               	bsf	3979,5,c	;volatile
  1821  002526  D7DF               	goto	l9785
  1822  002528                     l223:
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;main.c: 708: if ( LATCbits.LATC4 ) {
  1826  002528  A88B               	btfss	3979,4,c	;volatile
  1827  00252A  D003               	goto	l224
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;main.c: 709: LATCbits.LATC4 = 0;
  1831  00252C  988B               	bcf	3979,4,c	;volatile
  1832  00252E                     L6:
  1833                           
  1834                           ;main.c: 710: bOn = 0;
  1835  00252E  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1836                           
  1837                           ;main.c: 711: } else {
  1838  002530  D010               	goto	l9815
  1839  002532                     l224:
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;main.c: 712: LATCbits.LATC4 = 1;
  1843  002532  888B               	bsf	3979,4,c	;volatile
  1844  002534  D7D8               	goto	l9785
  1845  002536                     l9813:
  1846                           
  1847                           ; BSR set to: 0
  1848  002536  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1849                           
  1850                           ; Switch size 1, requested type "speed"
  1851                           ; Number of cases is 7, Range of values is 0 to 6
  1852                           ; switch strategies available:
  1853                           ; Name         Instructions Cycles
  1854                           ; simple_byte           22    12 (average)
  1855                           ;	Chosen strategy is simple_byte
  1856  002538  E0D1               	bz	l204
  1857  00253A  0A01               	xorlw	1	; case 1
  1858  00253C  E0D7               	bz	l208
  1859  00253E  0A03               	xorlw	3	; case 2
  1860  002540  E0DB               	bz	l211
  1861  002542  0A01               	xorlw	1	; case 3
  1862  002544  E0DF               	bz	l214
  1863  002546  0A07               	xorlw	7	; case 4
  1864  002548  E0E3               	bz	l217
  1865  00254A  0A01               	xorlw	1	; case 5
  1866  00254C  E0E7               	bz	l220
  1867  00254E  0A03               	xorlw	3	; case 6
  1868  002550  E0EB               	bz	l223
  1869  002552                     l9815:
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;main.c: 720: relay_pulse_timer[ i ] =
  1873                           ;main.c: 721: readEEPROM( 0x43 +
  1874                           ;main.c: 722: 18 + 2*i ) * 256 +
  1875                           ;main.c: 723: readEEPROM( 0x43 +
  1876                           ;main.c: 724: 19 + 2*i );
  1877  002552  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1878  002554  0D02               	mullw	2
  1879  002556  0E55               	movlw	85
  1880  002558  24F3               	addwf	prodl,w,c
  1881  00255A  6E08               	movwf	?_readEEPROM,c
  1882  00255C  0E00               	movlw	0
  1883  00255E  20F4               	addwfc	prodh,w,c
  1884  002560  6E09               	movwf	?_readEEPROM+1,c
  1885  002562  ECDE  F020         	call	_readEEPROM	;wreg free
  1886  002566  0100               	movlb	0	; () banked
  1887  002568  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1888  00256A  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1889  00256C  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1890  00256E  0D02               	mullw	2
  1891  002570  0E56               	movlw	86
  1892  002572  24F3               	addwf	prodl,w,c
  1893  002574  6E08               	movwf	?_readEEPROM,c
  1894  002576  0E00               	movlw	0
  1895  002578  20F4               	addwfc	prodh,w,c
  1896  00257A  6E09               	movwf	?_readEEPROM+1,c
  1897  00257C  ECDE  F020         	call	_readEEPROM	;wreg free
  1898  002580  0100               	movlb	0	; () banked
  1899  002582  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1900  002584  0E00               	movlw	0
  1901  002586  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1902  002588  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1903  00258A  0D02               	mullw	2
  1904  00258C  50F3               	movf	prodl,w,c
  1905  00258E  0F70               	addlw	low _relay_pulse_timer
  1906  002590  6ED9               	movwf	fsr2l,c
  1907  002592  6ADA               	clrf	fsr2h,c
  1908  002594  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1909  002598  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1910                           
  1911                           ; BSR set to: 0
  1912                           ;main.c: 726: if ( bOn ) {
  1913  00259C  51CF               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  1914  00259E  E044               	bz	l226
  1915                           
  1916                           ; BSR set to: 0
  1917                           ;main.c: 729: if ( readEEPROM( 0x43 + 10 + i ) & 0x04 ) {
  1918  0025A0  0E4D               	movlw	77
  1919  0025A2  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1920  0025A4  6E08               	movwf	?_readEEPROM,c
  1921  0025A6  6A09               	clrf	?_readEEPROM+1,c
  1922  0025A8  0E00               	movlw	0
  1923  0025AA  2209               	addwfc	?_readEEPROM+1,f,c
  1924  0025AC  ECDE  F020         	call	_readEEPROM	;wreg free
  1925  0025B0  0100               	movlb	0	; () banked
  1926  0025B2  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1927  0025B4  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1928  0025B6  D025               	goto	l9823
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;main.c: 730: relay_protection_timer[ i ] =
  1932                           ;main.c: 731: readEEPROM( 0x43 + 34 + 2*i ) * 256 +
  1933                           ;main.c: 732: readEEPROM( 0x43 + 35 + 2*i );
  1934  0025B8  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1935  0025BA  0D02               	mullw	2
  1936  0025BC  0E65               	movlw	101
  1937  0025BE  24F3               	addwf	prodl,w,c
  1938  0025C0  6E08               	movwf	?_readEEPROM,c
  1939  0025C2  0E00               	movlw	0
  1940  0025C4  20F4               	addwfc	prodh,w,c
  1941  0025C6  6E09               	movwf	?_readEEPROM+1,c
  1942  0025C8  ECDE  F020         	call	_readEEPROM	;wreg free
  1943  0025CC  0100               	movlb	0	; () banked
  1944  0025CE  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1945  0025D0  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1946  0025D2  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1947  0025D4  0D02               	mullw	2
  1948  0025D6  0E66               	movlw	102
  1949  0025D8  24F3               	addwf	prodl,w,c
  1950  0025DA  6E08               	movwf	?_readEEPROM,c
  1951  0025DC  0E00               	movlw	0
  1952  0025DE  20F4               	addwfc	prodh,w,c
  1953  0025E0  6E09               	movwf	?_readEEPROM+1,c
  1954  0025E2  ECDE  F020         	call	_readEEPROM	;wreg free
  1955  0025E6  0100               	movlb	0	; () banked
  1956  0025E8  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1957  0025EA  0E00               	movlw	0
  1958  0025EC  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1959  0025EE  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1960  0025F0  0D02               	mullw	2
  1961  0025F2  50F3               	movf	prodl,w,c
  1962  0025F4  0F60               	addlw	low _relay_protection_timer
  1963  0025F6  6ED9               	movwf	fsr2l,c
  1964  0025F8  6ADA               	clrf	fsr2h,c
  1965  0025FA  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1966  0025FE  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1967  002602                     l9823:
  1968                           
  1969                           ; BSR set to: 0
  1970                           ;main.c: 733: }
  1971                           ;main.c: 735: if ( ctrlreg & 0x08 ) {
  1972  002602  A7D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  1973  002604  D007               	goto	l9827
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;main.c: 736: SendInformationEvent( i, 20,
  1977                           ;main.c: 737: 3 );
  1978  002606  0E14               	movlw	20
  1979  002608  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1980  00260A  0E03               	movlw	3
  1981  00260C  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1982  00260E  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1983  002610  EC47  F01E         	call	_SendInformationEvent
  1984  002614                     l9827:
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;main.c: 738: }
  1988                           ;main.c: 740: if ( ctrlreg & 0x20 ) {
  1989  002614  ABD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  1990  002616  D03A               	goto	l9839
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;main.c: 741: SendInformationEvent( i, 20,
  1994                           ;main.c: 742: 25 );
  1995  002618  0E14               	movlw	20
  1996  00261A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1997  00261C  0E19               	movlw	25
  1998  00261E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1999  002620  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2000  002622  EC47  F01E         	call	_SendInformationEvent
  2001  002626  D032               	goto	l9839
  2002  002628                     l226:
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;main.c: 747: if ( ctrlreg & 0x10 ) {
  2006  002628  A9D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2007  00262A  D007               	goto	l9833
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;main.c: 748: SendInformationEvent( i, 20,
  2011                           ;main.c: 749: 4 );
  2012  00262C  0E14               	movlw	20
  2013  00262E  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2014  002630  0E04               	movlw	4
  2015  002632  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2016  002634  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2017  002636  EC47  F01E         	call	_SendInformationEvent
  2018  00263A                     l9833:
  2019                           
  2020                           ; BSR set to: 0
  2021                           ;main.c: 750: }
  2022                           ;main.c: 752: if (ctrlreg & 0x40) {
  2023  00263A  ADD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),6,b
  2024  00263C  D027               	goto	l9839
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;main.c: 753: SendInformationEvent( i, 20,
  2028                           ;main.c: 754: 24 );
  2029  00263E  0E14               	movlw	20
  2030  002640  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2031  002642  0E18               	movlw	24
  2032  002644  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2033  002646  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2034  002648  EC47  F01E         	call	_SendInformationEvent
  2035  00264C  D01F               	goto	l9839
  2036  00264E                     l9837:
  2037                           
  2038                           ; BSR set to: 0
  2039                           ;main.c: 761: else {
  2040                           ;main.c: 763: relay_pulse_timer[ 0 ] =
  2041                           ;main.c: 764: readEEPROM( 0x43 + 18 + 2*i ) * 256 +
  2042                           ;main.c: 765: readEEPROM( 0x43 + 19 + 2*i );
  2043  00264E  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2044  002650  0D02               	mullw	2
  2045  002652  0E56               	movlw	86
  2046  002654  24F3               	addwf	prodl,w,c
  2047  002656  6E08               	movwf	?_readEEPROM,c
  2048  002658  0E00               	movlw	0
  2049  00265A  20F4               	addwfc	prodh,w,c
  2050  00265C  6E09               	movwf	?_readEEPROM+1,c
  2051  00265E  ECDE  F020         	call	_readEEPROM	;wreg free
  2052  002662  0100               	movlb	0	; () banked
  2053  002664  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2054  002666  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2055  002668  0D02               	mullw	2
  2056  00266A  0E55               	movlw	85
  2057  00266C  24F3               	addwf	prodl,w,c
  2058  00266E  6E08               	movwf	?_readEEPROM,c
  2059  002670  0E00               	movlw	0
  2060  002672  20F4               	addwfc	prodh,w,c
  2061  002674  6E09               	movwf	?_readEEPROM+1,c
  2062  002676  ECDE  F020         	call	_readEEPROM	;wreg free
  2063  00267A  0100               	movlb	0	; () banked
  2064  00267C  6FCE               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2065  00267E  6BCD               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2066  002680  51CC               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2067  002682  25CD               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2068  002684  6F70               	movwf	_relay_pulse_timer& (0+255),b
  2069  002686  0E00               	movlw	0
  2070  002688  21CE               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2071  00268A  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  2072  00268C                     l9839:
  2073                           
  2074                           ; BSR set to: 0
  2075  00268C  2BD1               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  2076  00268E  D68A               	goto	l9751
  2077  002690                     l234:
  2078                           
  2079                           ; BSR set to: 0
  2080  002690  0012               	return	
  2081  002692                     __end_of_doApplicationOneSecondWork:
  2082                           	opt stack 0
  2083                           tblptru	equ	0xFF8
  2084                           prodh	equ	0xFF4
  2085                           prodl	equ	0xFF3
  2086                           postinc0	equ	0xFEE
  2087                           wreg	equ	0xFE8
  2088                           postinc2	equ	0xFDE
  2089                           postdec2	equ	0xFDD
  2090                           fsr2h	equ	0xFDA
  2091                           fsr2l	equ	0xFD9
  2092                           status	equ	0xFD8
  2093                           
  2094 ;; *************** function _vscp_doOneSecondWork *****************
  2095 ;; Defined at:
  2096 ;;		line 516 in file "../../vscp_firmware/common/vscp_firmware.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;		None
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;		None
  2101 ;; Return value:  Size  Location     Type
  2102 ;;		None               void
  2103 ;; Registers used:
  2104 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2105 ;; Tracked objects:
  2106 ;;		On entry : F/0
  2107 ;;		On exit  : F/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2110 ;;      Params:         0       0       0       0       0       0       0
  2111 ;;      Locals:         0       0       0       0       0       0       0
  2112 ;;      Temps:          1       0       0       0       0       0       0
  2113 ;;      Totals:         1       0       0       0       0       0       0
  2114 ;;Total ram usage:        1 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; Hardware stack levels required when called:    8
  2117 ;; This function calls:
  2118 ;;		_vscp_getZone
  2119 ;;		_vscp_getSubzone
  2120 ;;		_vscp_sendHeartBeat
  2121 ;; This function is called by:
  2122 ;;		_main
  2123 ;; This function uses a non-reentrant model
  2124 ;;
  2125                           
  2126                           	psect	text3
  2127  003CFA                     __ptext3:
  2128                           	opt stack 0
  2129  003CFA                     _vscp_doOneSecondWork:
  2130                           	opt stack 22
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;vscp_firmware.c: 518: ++vscp_second;
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;incstack = 0
  2137                           ;incstack = 0
  2138  003CFA  2B95               	incf	_vscp_second& (0+255),f,b
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;vscp_firmware.c: 520: if (vscp_second > 59) {
  2142  003CFC  0E3B               	movlw	59
  2143  003CFE  6595               	cpfsgt	_vscp_second& (0+255),b
  2144  003D00  D00D               	goto	l7875
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;vscp_firmware.c: 521: vscp_second = 0;
  2148  003D02  6B95               	clrf	_vscp_second& (0+255),b
  2149                           
  2150                           ; BSR set to: 0
  2151                           ;vscp_firmware.c: 522: vscp_minute++;
  2152  003D04  2B90               	incf	_vscp_minute& (0+255),f,b
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;vscp_firmware.c: 525: if (0x03 == vscp_node_state) {
  2156  003D06  5192               	movf	_vscp_node_state& (0+255),w,b
  2157  003D08  0A03               	xorlw	3
  2158  003D0A  E108               	bnz	l7875
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;vscp_firmware.c: 526: vscp_sendHeartBeat(vscp_getZone(),
  2162                           ;vscp_firmware.c: 527: vscp_getSubzone());
  2163  003D0C  ECF0  F020         	call	_vscp_getSubzone	;wreg free
  2164  003D10  0100               	movlb	0	; () banked
  2165  003D12  6FC5               	movwf	?_vscp_sendHeartBeat& (0+255),b
  2166  003D14  ECF5  F020         	call	_vscp_getZone	;wreg free
  2167  003D18  EC90  F01F         	call	_vscp_sendHeartBeat
  2168  003D1C                     l7875:
  2169                           
  2170                           ; BSR set to: 0
  2171                           ;vscp_firmware.c: 528: }
  2172                           ;vscp_firmware.c: 529: }
  2173                           ;vscp_firmware.c: 531: if (vscp_minute > 59) {
  2174  003D1C  0E3B               	movlw	59
  2175  003D1E  6590               	cpfsgt	_vscp_minute& (0+255),b
  2176  003D20  D002               	goto	l7881
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;vscp_firmware.c: 532: vscp_minute = 0;
  2180  003D22  6B90               	clrf	_vscp_minute& (0+255),b
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;vscp_firmware.c: 533: vscp_hour++;
  2184  003D24  2B8E               	incf	_vscp_hour& (0+255),f,b
  2185  003D26                     l7881:
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;vscp_firmware.c: 534: }
  2189                           ;vscp_firmware.c: 536: if (vscp_hour > 23) vscp_hour = 0;
  2190  003D26  0E17               	movlw	23
  2191  003D28  658E               	cpfsgt	_vscp_hour& (0+255),b
  2192  003D2A  D001               	goto	l7885
  2193                           
  2194                           ; BSR set to: 0
  2195  003D2C  6B8E               	clrf	_vscp_hour& (0+255),b
  2196  003D2E                     l7885:
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;vscp_firmware.c: 540: if (0x03 == vscp_node_state) {
  2200  003D2E  5192               	movf	_vscp_node_state& (0+255),w,b
  2201  003D30  0A03               	xorlw	3
  2202  003D32  E109               	bnz	l1104
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;vscp_firmware.c: 541: vscp_guid_reset++;
  2206  003D34  2B8D               	incf	_vscp_guid_reset& (0+255),f,b
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;vscp_firmware.c: 542: if ((vscp_guid_reset & 0x0f) >= 2) {
  2210  003D36  C08D  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  2211  003D3A  0E0F               	movlw	15
  2212  003D3C  164D               	andwf	??_vscp_doOneSecondWork,f,c
  2213  003D3E  0E02               	movlw	2
  2214  003D40  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  2215  003D42  B0D8               	btfsc	status,0,c
  2216                           
  2217                           ; BSR set to: 0
  2218                           ;vscp_firmware.c: 543: vscp_guid_reset = 0;
  2219  003D44  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  2220  003D46                     l1104:
  2221                           
  2222                           ; BSR set to: 0
  2223  003D46  0012               	return	
  2224  003D48                     __end_of_vscp_doOneSecondWork:
  2225                           	opt stack 0
  2226                           tblptru	equ	0xFF8
  2227                           prodh	equ	0xFF4
  2228                           prodl	equ	0xFF3
  2229                           postinc0	equ	0xFEE
  2230                           wreg	equ	0xFE8
  2231                           postinc2	equ	0xFDE
  2232                           postdec2	equ	0xFDD
  2233                           fsr2h	equ	0xFDA
  2234                           fsr2l	equ	0xFD9
  2235                           status	equ	0xFD8
  2236                           
  2237 ;; *************** function _vscp_sendHeartBeat *****************
  2238 ;; Defined at:
  2239 ;;		line 370 in file "../../vscp_firmware/common/vscp_firmware.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;  zone            1    wreg     unsigned char 
  2242 ;;  subzone         1   20[BANK0 ] unsigned char 
  2243 ;; Auto vars:     Size  Location     Type
  2244 ;;  zone            1   75[COMRAM] unsigned char 
  2245 ;; Return value:  Size  Location     Type
  2246 ;;		None               void
  2247 ;; Registers used:
  2248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2249 ;; Tracked objects:
  2250 ;;		On entry : 0/0
  2251 ;;		On exit  : F/0
  2252 ;;		Unchanged: 0/0
  2253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2254 ;;      Params:         0       1       0       0       0       0       0
  2255 ;;      Locals:         1       0       0       0       0       0       0
  2256 ;;      Temps:          0       0       0       0       0       0       0
  2257 ;;      Totals:         1       1       0       0       0       0       0
  2258 ;;Total ram usage:        2 bytes
  2259 ;; Hardware stack levels used:    1
  2260 ;; Hardware stack levels required when called:    7
  2261 ;; This function calls:
  2262 ;;		_vscp_sendEvent
  2263 ;; This function is called by:
  2264 ;;		_vscp_doOneSecondWork
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268                           	psect	text4
  2269  003F20                     __ptext4:
  2270                           	opt stack 0
  2271  003F20                     _vscp_sendHeartBeat:
  2272                           	opt stack 22
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;incstack = 0
  2276                           ;incstack = 0
  2277                           ;vscp_sendHeartBeat@zone stored from wreg
  2278  003F20  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  2279                           
  2280                           ;vscp_firmware.c: 371: vscp_omsg.flags = 0x80 + 3;
  2281  003F24  0E83               	movlw	131
  2282  003F26  0100               	movlb	0	; () banked
  2283  003F28  6FA4               	movwf	_vscp_omsg& (0+255),b
  2284                           
  2285                           ;vscp_firmware.c: 372: vscp_omsg.priority = 0x07;
  2286  003F2A  0E07               	movlw	7
  2287  003F2C  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  2288                           
  2289                           ;vscp_firmware.c: 373: vscp_omsg.vscp_class = 20;
  2290  003F2E  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  2291  003F30  0E14               	movlw	20
  2292  003F32  6FA6               	movwf	(_vscp_omsg+2)& (0+255),b
  2293                           
  2294                           ;vscp_firmware.c: 374: vscp_omsg.vscp_type = 9;
  2295  003F34  0E09               	movlw	9
  2296  003F36  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;vscp_firmware.c: 375: vscp_omsg.data[ 0 ] = 0;
  2300  003F38  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;vscp_firmware.c: 376: vscp_omsg.data[ 1 ] = zone;
  2304  003F3A  C04C  F0AA         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;vscp_firmware.c: 377: vscp_omsg.data[ 2 ] = subzone;
  2308  003F3E  C0C5  F0AB         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;vscp_firmware.c: 380: vscp_sendEvent();
  2312  003F42  EFA3  F01F         	goto	_vscp_sendEvent	;wreg free
  2313  003F46                     __end_of_vscp_sendHeartBeat:
  2314                           	opt stack 0
  2315                           tblptru	equ	0xFF8
  2316                           prodh	equ	0xFF4
  2317                           prodl	equ	0xFF3
  2318                           postinc0	equ	0xFEE
  2319                           wreg	equ	0xFE8
  2320                           postinc2	equ	0xFDE
  2321                           postdec2	equ	0xFDD
  2322                           fsr2h	equ	0xFDA
  2323                           fsr2l	equ	0xFD9
  2324                           status	equ	0xFD8
  2325                           
  2326 ;; *************** function _vscp_getSubzone *****************
  2327 ;; Defined at:
  2328 ;;		line 876 in file "../main.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;		None
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;		None
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      unsigned char 
  2335 ;; Registers used:
  2336 ;;		wreg, status,2, cstack
  2337 ;; Tracked objects:
  2338 ;;		On entry : F/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2342 ;;      Params:         0       0       0       0       0       0       0
  2343 ;;      Locals:         0       0       0       0       0       0       0
  2344 ;;      Temps:          0       0       0       0       0       0       0
  2345 ;;      Totals:         0       0       0       0       0       0       0
  2346 ;;Total ram usage:        0 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    3
  2349 ;; This function calls:
  2350 ;;		_readEEPROM
  2351 ;; This function is called by:
  2352 ;;		_vscp_doOneSecondWork
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           	psect	text5
  2357  0041E0                     __ptext5:
  2358                           	opt stack 0
  2359  0041E0                     _vscp_getSubzone:
  2360                           	opt stack 26
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;main.c: 877: return readEEPROM( 0x43 + 1 );
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;incstack = 0
  2367                           ;incstack = 0
  2368  0041E0  6A09               	clrf	?_readEEPROM+1,c
  2369  0041E2  0E44               	movlw	68
  2370  0041E4  6E08               	movwf	?_readEEPROM,c
  2371  0041E6  EFDE  F020         	goto	_readEEPROM	;wreg free
  2372  0041EA                     __end_of_vscp_getSubzone:
  2373                           	opt stack 0
  2374                           tblptru	equ	0xFF8
  2375                           prodh	equ	0xFF4
  2376                           prodl	equ	0xFF3
  2377                           postinc0	equ	0xFEE
  2378                           wreg	equ	0xFE8
  2379                           postinc2	equ	0xFDE
  2380                           postdec2	equ	0xFDD
  2381                           fsr2h	equ	0xFDA
  2382                           fsr2l	equ	0xFD9
  2383                           status	equ	0xFD8
  2384                           
  2385 ;; *************** function _vscp_getZone *****************
  2386 ;; Defined at:
  2387 ;;		line 867 in file "../main.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;		None
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;		None
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      unsigned char 
  2394 ;; Registers used:
  2395 ;;		wreg, status,2, cstack
  2396 ;; Tracked objects:
  2397 ;;		On entry : F/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2401 ;;      Params:         0       0       0       0       0       0       0
  2402 ;;      Locals:         0       0       0       0       0       0       0
  2403 ;;      Temps:          0       0       0       0       0       0       0
  2404 ;;      Totals:         0       0       0       0       0       0       0
  2405 ;;Total ram usage:        0 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    3
  2408 ;; This function calls:
  2409 ;;		_readEEPROM
  2410 ;; This function is called by:
  2411 ;;		_vscp_doOneSecondWork
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text6
  2416  0041EA                     __ptext6:
  2417                           	opt stack 0
  2418  0041EA                     _vscp_getZone:
  2419                           	opt stack 26
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;main.c: 868: return readEEPROM( 0x43 + 0 );
  2423                           
  2424                           ;incstack = 0
  2425                           ;incstack = 0
  2426  0041EA  6A09               	clrf	?_readEEPROM+1,c
  2427  0041EC  0E43               	movlw	67
  2428  0041EE  6E08               	movwf	?_readEEPROM,c
  2429  0041F0  EFDE  F020         	goto	_readEEPROM	;wreg free
  2430  0041F4                     __end_of_vscp_getZone:
  2431                           	opt stack 0
  2432                           tblptru	equ	0xFF8
  2433                           prodh	equ	0xFF4
  2434                           prodl	equ	0xFF3
  2435                           postinc0	equ	0xFEE
  2436                           wreg	equ	0xFE8
  2437                           postinc2	equ	0xFDE
  2438                           postdec2	equ	0xFDD
  2439                           fsr2h	equ	0xFDA
  2440                           fsr2l	equ	0xFD9
  2441                           status	equ	0xFD8
  2442                           
  2443 ;; *************** function _vscp_error *****************
  2444 ;; Defined at:
  2445 ;;		line 191 in file "../../vscp_firmware/common/vscp_firmware.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;		None
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;		None
  2450 ;; Return value:  Size  Location     Type
  2451 ;;		None               void
  2452 ;; Registers used:
  2453 ;;		None
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2459 ;;      Params:         0       0       0       0       0       0       0
  2460 ;;      Locals:         0       0       0       0       0       0       0
  2461 ;;      Temps:          0       0       0       0       0       0       0
  2462 ;;      Totals:         0       0       0       0       0       0       0
  2463 ;;Total ram usage:        0 bytes
  2464 ;; Hardware stack levels used:    1
  2465 ;; Hardware stack levels required when called:    2
  2466 ;; This function calls:
  2467 ;;		Nothing
  2468 ;; This function is called by:
  2469 ;;		_main
  2470 ;; This function uses a non-reentrant model
  2471 ;;
  2472                           
  2473                           	psect	text7
  2474  004224                     __ptext7:
  2475                           	opt stack 0
  2476  004224                     _vscp_error:
  2477                           	opt stack 28
  2478                           
  2479                           ;vscp_firmware.c: 192: vscp_initledfunc = 0x00;
  2480                           
  2481                           ;incstack = 0
  2482                           ;incstack = 0
  2483  004224  6A56               	clrf	_vscp_initledfunc,c
  2484  004226  0012               	return	
  2485  004228                     __end_of_vscp_error:
  2486                           	opt stack 0
  2487                           tblptru	equ	0xFF8
  2488                           prodh	equ	0xFF4
  2489                           prodl	equ	0xFF3
  2490                           postinc0	equ	0xFEE
  2491                           wreg	equ	0xFE8
  2492                           postinc2	equ	0xFDE
  2493                           postdec2	equ	0xFDD
  2494                           fsr2h	equ	0xFDA
  2495                           fsr2l	equ	0xFD9
  2496                           status	equ	0xFD8
  2497                           
  2498 ;; *************** function _doDM *****************
  2499 ;; Defined at:
  2500 ;;		line 1596 in file "../main.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;		None
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  class_mask      2   33[BANK0 ] unsigned short 
  2505 ;;  class_filter    2   31[BANK0 ] unsigned short 
  2506 ;;  i               1   44[BANK0 ] unsigned char 
  2507 ;;  dmflags         1   43[BANK0 ] unsigned char 
  2508 ;;  type_mask       1   36[BANK0 ] unsigned char 
  2509 ;;  type_filter     1   35[BANK0 ] unsigned char 
  2510 ;; Return value:  Size  Location     Type
  2511 ;;		None               void
  2512 ;; Registers used:
  2513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : F/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2519 ;;      Params:         0       0       0       0       0       0       0
  2520 ;;      Locals:         0      14       0       0       0       0       0
  2521 ;;      Temps:          0       3       0       0       0       0       0
  2522 ;;      Totals:         0      17       0       0       0       0       0
  2523 ;;Total ram usage:       17 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    8
  2526 ;; This function calls:
  2527 ;;		_readEEPROM
  2528 ;;		_doActionOff
  2529 ;;		_doActionOn
  2530 ;;		_doActionPulse
  2531 ;;		_doActionStatus
  2532 ;;		_doActionDisable
  2533 ;;		_doActionToggle
  2534 ;; This function is called by:
  2535 ;;		_main
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538                           
  2539                           	psect	text8
  2540  002088                     __ptext8:
  2541                           	opt stack 0
  2542  002088                     _doDM:
  2543                           	opt stack 22
  2544                           
  2545                           ;main.c: 1597: unsigned char i;
  2546                           ;main.c: 1598: unsigned char dmflags;
  2547                           ;main.c: 1599: unsigned short class_filter;
  2548                           ;main.c: 1600: unsigned short class_mask;
  2549                           ;main.c: 1601: unsigned char type_filter;
  2550                           ;main.c: 1602: unsigned char type_mask;
  2551                           ;main.c: 1605: if ( 0 == vscp_imsg.vscp_class ) return;
  2552                           
  2553                           ;incstack = 0
  2554                           ;incstack = 0
  2555  002088  0100               	movlb	0	; () banked
  2556  00208A  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  2557  00208C  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2558  00208E  E101 D186          	bz	l411
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;main.c: 1607: for (i = 0; i < 7; i++) {
  2562  002092  6BDD               	clrf	doDM@i& (0+255),b
  2563  002094                     l9693:
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;main.c: 1610: dmflags = readEEPROM( 0x43 + 72 + 1 + (8 * i) );
  2567  002094  51DD               	movf	doDM@i& (0+255),w,b
  2568  002096  6FCD               	movwf	??_doDM& (0+255),b
  2569  002098  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2570  00209A  90D8               	bcf	status,0,c
  2571  00209C  37CD               	rlcf	??_doDM& (0+255),f,b
  2572  00209E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2573  0020A0  90D8               	bcf	status,0,c
  2574  0020A2  37CD               	rlcf	??_doDM& (0+255),f,b
  2575  0020A4  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2576  0020A6  90D8               	bcf	status,0,c
  2577  0020A8  37CD               	rlcf	??_doDM& (0+255),f,b
  2578  0020AA  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2579  0020AC  0E8C               	movlw	140
  2580  0020AE  25CD               	addwf	??_doDM& (0+255),w,b
  2581  0020B0  6E08               	movwf	?_readEEPROM,c
  2582  0020B2  0E00               	movlw	0
  2583  0020B4  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2584  0020B6  6E09               	movwf	?_readEEPROM+1,c
  2585  0020B8  ECDE  F020         	call	_readEEPROM	;wreg free
  2586  0020BC  0100               	movlb	0	; () banked
  2587  0020BE  6FDC               	movwf	doDM@dmflags& (0+255),b
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;main.c: 1613: if ( dmflags & 0x80 ) {
  2591  0020C0  AFDC               	btfss	doDM@dmflags& (0+255),7,b
  2592  0020C2  D168               	goto	l9745
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;main.c: 1616: if ( ( dmflags & 0x40 ) &&
  2596                           ;main.c: 1617: ( vscp_imsg.oaddr != readEEPROM( 0x43 + 72 + (8 * i) ) ) ) {
  2597  0020C4  ADDC               	btfss	doDM@dmflags& (0+255),6,b
  2598  0020C6  D018               	goto	l415
  2599                           
  2600                           ; BSR set to: 0
  2601  0020C8  51DD               	movf	doDM@i& (0+255),w,b
  2602  0020CA  6FCD               	movwf	??_doDM& (0+255),b
  2603  0020CC  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2604  0020CE  90D8               	bcf	status,0,c
  2605  0020D0  37CD               	rlcf	??_doDM& (0+255),f,b
  2606  0020D2  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2607  0020D4  90D8               	bcf	status,0,c
  2608  0020D6  37CD               	rlcf	??_doDM& (0+255),f,b
  2609  0020D8  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2610  0020DA  90D8               	bcf	status,0,c
  2611  0020DC  37CD               	rlcf	??_doDM& (0+255),f,b
  2612  0020DE  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2613  0020E0  0E8B               	movlw	139
  2614  0020E2  25CD               	addwf	??_doDM& (0+255),w,b
  2615  0020E4  6E08               	movwf	?_readEEPROM,c
  2616  0020E6  0E00               	movlw	0
  2617  0020E8  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2618  0020EA  6E09               	movwf	?_readEEPROM+1,c
  2619  0020EC  ECDE  F020         	call	_readEEPROM	;wreg free
  2620  0020F0  0100               	movlb	0	; () banked
  2621  0020F2  199B               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2622  0020F4  E001 D14E          	bnz	l9745
  2623  0020F8                     l415:
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;main.c: 1619: }
  2627                           ;main.c: 1622: if ( dmflags & 0x10 ) {
  2628  0020F8  A9DC               	btfss	doDM@dmflags& (0+255),4,b
  2629  0020FA  D00B               	goto	l9709
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;main.c: 1623: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2633  0020FC  299D               	incf	(_vscp_imsg+7)& (0+255),w,b
  2634  0020FE  E009               	bz	l9709
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;main.c: 1624: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x43 + 0 ) ) {
  2638  002100  6A09               	clrf	?_readEEPROM+1,c
  2639  002102  0E43               	movlw	67
  2640  002104  6E08               	movwf	?_readEEPROM,c
  2641  002106  ECDE  F020         	call	_readEEPROM	;wreg free
  2642  00210A  0100               	movlb	0	; () banked
  2643  00210C  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2644  00210E  E001 D141          	bnz	l9745
  2645  002112                     l9709:
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;main.c: 1626: }
  2649                           ;main.c: 1627: }
  2650                           ;main.c: 1628: }
  2651                           ;main.c: 1630: class_filter = ( dmflags & 0x01)*256 +
  2652                           ;main.c: 1631: readEEPROM( 0x43 +
  2653                           ;main.c: 1632: 72 +
  2654                           ;main.c: 1633: (8 * i) +
  2655                           ;main.c: 1634: 3);
  2656  002112  51DD               	movf	doDM@i& (0+255),w,b
  2657  002114  0D08               	mullw	8
  2658  002116  0E8E               	movlw	142
  2659  002118  24F3               	addwf	prodl,w,c
  2660  00211A  6E08               	movwf	?_readEEPROM,c
  2661  00211C  0E00               	movlw	0
  2662  00211E  20F4               	addwfc	prodh,w,c
  2663  002120  6E09               	movwf	?_readEEPROM+1,c
  2664  002122  ECDE  F020         	call	_readEEPROM	;wreg free
  2665  002126  0100               	movlb	0	; () banked
  2666  002128  6FCD               	movwf	??_doDM& (0+255),b
  2667  00212A  51DC               	movf	doDM@dmflags& (0+255),w,b
  2668  00212C  0B01               	andlw	1
  2669  00212E  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2670  002130  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2671  002132  51CD               	movf	??_doDM& (0+255),w,b
  2672  002134  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2673  002136  6FD0               	movwf	doDM@class_filter& (0+255),b
  2674  002138  0E00               	movlw	0
  2675  00213A  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2676  00213C  6FD1               	movwf	(doDM@class_filter+1)& (0+255),b
  2677                           
  2678                           ;main.c: 1635: class_mask = ( dmflags & 0x02)*256 +
  2679                           ;main.c: 1636: readEEPROM( 0x43 +
  2680                           ;main.c: 1637: 72 +
  2681                           ;main.c: 1638: (8 * i) +
  2682                           ;main.c: 1639: 2);
  2683  00213E  51DD               	movf	doDM@i& (0+255),w,b
  2684  002140  0D08               	mullw	8
  2685  002142  0E8D               	movlw	141
  2686  002144  24F3               	addwf	prodl,w,c
  2687  002146  6E08               	movwf	?_readEEPROM,c
  2688  002148  0E00               	movlw	0
  2689  00214A  20F4               	addwfc	prodh,w,c
  2690  00214C  6E09               	movwf	?_readEEPROM+1,c
  2691  00214E  ECDE  F020         	call	_readEEPROM	;wreg free
  2692  002152  0100               	movlb	0	; () banked
  2693  002154  6FCD               	movwf	??_doDM& (0+255),b
  2694  002156  51DC               	movf	doDM@dmflags& (0+255),w,b
  2695  002158  0B02               	andlw	2
  2696  00215A  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2697  00215C  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2698  00215E  51CD               	movf	??_doDM& (0+255),w,b
  2699  002160  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2700  002162  6FD2               	movwf	doDM@class_mask& (0+255),b
  2701  002164  0E00               	movlw	0
  2702  002166  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2703  002168  6FD3               	movwf	(doDM@class_mask+1)& (0+255),b
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;main.c: 1640: type_filter = readEEPROM( 0x43 +
  2707                           ;main.c: 1641: 72 +
  2708                           ;main.c: 1642: (8 * i) +
  2709                           ;main.c: 1643: 5);
  2710  00216A  51DD               	movf	doDM@i& (0+255),w,b
  2711  00216C  6FCD               	movwf	??_doDM& (0+255),b
  2712  00216E  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2713  002170  90D8               	bcf	status,0,c
  2714  002172  37CD               	rlcf	??_doDM& (0+255),f,b
  2715  002174  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2716  002176  90D8               	bcf	status,0,c
  2717  002178  37CD               	rlcf	??_doDM& (0+255),f,b
  2718  00217A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2719  00217C  90D8               	bcf	status,0,c
  2720  00217E  37CD               	rlcf	??_doDM& (0+255),f,b
  2721  002180  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2722  002182  0E90               	movlw	144
  2723  002184  25CD               	addwf	??_doDM& (0+255),w,b
  2724  002186  6E08               	movwf	?_readEEPROM,c
  2725  002188  0E00               	movlw	0
  2726  00218A  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2727  00218C  6E09               	movwf	?_readEEPROM+1,c
  2728  00218E  ECDE  F020         	call	_readEEPROM	;wreg free
  2729  002192  0100               	movlb	0	; () banked
  2730  002194  6FD4               	movwf	doDM@type_filter& (0+255),b
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;main.c: 1644: type_mask = readEEPROM( 0x43 +
  2734                           ;main.c: 1645: 72 +
  2735                           ;main.c: 1646: (8 * i) +
  2736                           ;main.c: 1647: 4);
  2737  002196  51DD               	movf	doDM@i& (0+255),w,b
  2738  002198  6FCD               	movwf	??_doDM& (0+255),b
  2739  00219A  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2740  00219C  90D8               	bcf	status,0,c
  2741  00219E  37CD               	rlcf	??_doDM& (0+255),f,b
  2742  0021A0  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2743  0021A2  90D8               	bcf	status,0,c
  2744  0021A4  37CD               	rlcf	??_doDM& (0+255),f,b
  2745  0021A6  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2746  0021A8  90D8               	bcf	status,0,c
  2747  0021AA  37CD               	rlcf	??_doDM& (0+255),f,b
  2748  0021AC  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2749  0021AE  0E8F               	movlw	143
  2750  0021B0  25CD               	addwf	??_doDM& (0+255),w,b
  2751  0021B2  6E08               	movwf	?_readEEPROM,c
  2752  0021B4  0E00               	movlw	0
  2753  0021B6  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2754  0021B8  6E09               	movwf	?_readEEPROM+1,c
  2755  0021BA  ECDE  F020         	call	_readEEPROM	;wreg free
  2756  0021BE  0100               	movlb	0	; () banked
  2757  0021C0  6FD5               	movwf	doDM@type_mask& (0+255),b
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;main.c: 1649: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2761                           ;main.c: 1650: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2762  0021C2  EE20  F098         	lfsr	2,_vscp_imsg+2
  2763  0021C6  CFDE F0CD          	movff	postinc2,??_doDM
  2764  0021CA  CFDD F0CE          	movff	postdec2,??_doDM+1
  2765  0021CE  51D0               	movf	doDM@class_filter& (0+255),w,b
  2766  0021D0  1BCD               	xorwf	??_doDM& (0+255),f,b
  2767  0021D2  51D1               	movf	(doDM@class_filter+1)& (0+255),w,b
  2768  0021D4  1BCE               	xorwf	(??_doDM+1)& (0+255),f,b
  2769  0021D6  51D2               	movf	doDM@class_mask& (0+255),w,b
  2770  0021D8  17CD               	andwf	??_doDM& (0+255),f,b
  2771  0021DA  51D3               	movf	(doDM@class_mask+1)& (0+255),w,b
  2772  0021DC  17CE               	andwf	(??_doDM+1)& (0+255),f,b
  2773  0021DE  51CE               	movf	(??_doDM+1)& (0+255),w,b
  2774  0021E0  11CD               	iorwf	??_doDM& (0+255),w,b
  2775  0021E2  E001 D0D7          	bnz	l9745
  2776                           
  2777                           ; BSR set to: 0
  2778  0021E6  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  2779  0021E8  19D4               	xorwf	doDM@type_filter& (0+255),w,b
  2780  0021EA  15D5               	andwf	doDM@type_mask& (0+255),w,b
  2781  0021EC  E101 D0AF          	bz	l9743
  2782  0021F0  D0D1               	goto	l9745
  2783  0021F2                     l9721:
  2784                           
  2785                           ;main.c: 1656: doActionOn( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2786  0021F2  0100               	movlb	0	; () banked
  2787  0021F4  51DD               	movf	doDM@i& (0+255),w,b
  2788  0021F6  6FCD               	movwf	??_doDM& (0+255),b
  2789  0021F8  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2790  0021FA  90D8               	bcf	status,0,c
  2791  0021FC  37CD               	rlcf	??_doDM& (0+255),f,b
  2792  0021FE  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2793  002200  90D8               	bcf	status,0,c
  2794  002202  37CD               	rlcf	??_doDM& (0+255),f,b
  2795  002204  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2796  002206  90D8               	bcf	status,0,c
  2797  002208  37CD               	rlcf	??_doDM& (0+255),f,b
  2798  00220A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2799  00220C  0E92               	movlw	146
  2800  00220E  25CD               	addwf	??_doDM& (0+255),w,b
  2801  002210  6E08               	movwf	?_readEEPROM,c
  2802  002212  0E00               	movlw	0
  2803  002214  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2804  002216  6E09               	movwf	?_readEEPROM+1,c
  2805  002218  ECDE  F020         	call	_readEEPROM	;wreg free
  2806  00221C  0100               	movlb	0	; () banked
  2807  00221E  6FD6               	movwf	_doDM$2146& (0+255),b
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;main.c: 1656: doActionOn( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2811  002220  C0D6  F051         	movff	_doDM$2146,?_doActionOn
  2812  002224  51DC               	movf	doDM@dmflags& (0+255),w,b
  2813  002226  EC49  F013         	call	_doActionOn
  2814                           
  2815                           ;main.c: 1657: break;
  2816  00222A  D0B4               	goto	l9745
  2817  00222C                     l9725:
  2818                           
  2819                           ;main.c: 1660: doActionOff( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2820  00222C  0100               	movlb	0	; () banked
  2821  00222E  51DD               	movf	doDM@i& (0+255),w,b
  2822  002230  6FCD               	movwf	??_doDM& (0+255),b
  2823  002232  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2824  002234  90D8               	bcf	status,0,c
  2825  002236  37CD               	rlcf	??_doDM& (0+255),f,b
  2826  002238  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2827  00223A  90D8               	bcf	status,0,c
  2828  00223C  37CD               	rlcf	??_doDM& (0+255),f,b
  2829  00223E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2830  002240  90D8               	bcf	status,0,c
  2831  002242  37CD               	rlcf	??_doDM& (0+255),f,b
  2832  002244  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2833  002246  0E92               	movlw	146
  2834  002248  25CD               	addwf	??_doDM& (0+255),w,b
  2835  00224A  6E08               	movwf	?_readEEPROM,c
  2836  00224C  0E00               	movlw	0
  2837  00224E  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2838  002250  6E09               	movwf	?_readEEPROM+1,c
  2839  002252  ECDE  F020         	call	_readEEPROM	;wreg free
  2840  002256  0100               	movlb	0	; () banked
  2841  002258  6FD7               	movwf	_doDM$2147& (0+255),b
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;main.c: 1660: doActionOff( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2845  00225A  C0D7  F051         	movff	_doDM$2147,?_doActionOff
  2846  00225E  51DC               	movf	doDM@dmflags& (0+255),w,b
  2847  002260  ECDF  F01B         	call	_doActionOff
  2848                           
  2849                           ;main.c: 1661: break;
  2850  002264  D097               	goto	l9745
  2851  002266                     l9729:
  2852                           
  2853                           ;main.c: 1664: doActionPulse( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2854  002266  0100               	movlb	0	; () banked
  2855  002268  51DD               	movf	doDM@i& (0+255),w,b
  2856  00226A  6FCD               	movwf	??_doDM& (0+255),b
  2857  00226C  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2858  00226E  90D8               	bcf	status,0,c
  2859  002270  37CD               	rlcf	??_doDM& (0+255),f,b
  2860  002272  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2861  002274  90D8               	bcf	status,0,c
  2862  002276  37CD               	rlcf	??_doDM& (0+255),f,b
  2863  002278  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2864  00227A  90D8               	bcf	status,0,c
  2865  00227C  37CD               	rlcf	??_doDM& (0+255),f,b
  2866  00227E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2867  002280  0E92               	movlw	146
  2868  002282  25CD               	addwf	??_doDM& (0+255),w,b
  2869  002284  6E08               	movwf	?_readEEPROM,c
  2870  002286  0E00               	movlw	0
  2871  002288  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2872  00228A  6E09               	movwf	?_readEEPROM+1,c
  2873  00228C  ECDE  F020         	call	_readEEPROM	;wreg free
  2874  002290  0100               	movlb	0	; () banked
  2875  002292  6FD8               	movwf	_doDM$2148& (0+255),b
  2876                           
  2877                           ;main.c: 1664: doActionPulse( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2878  002294  C0D8  F00B         	movff	_doDM$2148,?_doActionPulse
  2879  002298  51DC               	movf	doDM@dmflags& (0+255),w,b
  2880  00229A  EC85  F015         	call	_doActionPulse
  2881                           
  2882                           ;main.c: 1665: break;
  2883  00229E  D07A               	goto	l9745
  2884  0022A0                     l9731:
  2885                           
  2886                           ;main.c: 1668: doActionStatus( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2887  0022A0  0100               	movlb	0	; () banked
  2888  0022A2  51DD               	movf	doDM@i& (0+255),w,b
  2889  0022A4  6FCD               	movwf	??_doDM& (0+255),b
  2890  0022A6  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2891  0022A8  90D8               	bcf	status,0,c
  2892  0022AA  37CD               	rlcf	??_doDM& (0+255),f,b
  2893  0022AC  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2894  0022AE  90D8               	bcf	status,0,c
  2895  0022B0  37CD               	rlcf	??_doDM& (0+255),f,b
  2896  0022B2  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2897  0022B4  90D8               	bcf	status,0,c
  2898  0022B6  37CD               	rlcf	??_doDM& (0+255),f,b
  2899  0022B8  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2900  0022BA  0E92               	movlw	146
  2901  0022BC  25CD               	addwf	??_doDM& (0+255),w,b
  2902  0022BE  6E08               	movwf	?_readEEPROM,c
  2903  0022C0  0E00               	movlw	0
  2904  0022C2  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2905  0022C4  6E09               	movwf	?_readEEPROM+1,c
  2906  0022C6  ECDE  F020         	call	_readEEPROM	;wreg free
  2907  0022CA  0100               	movlb	0	; () banked
  2908  0022CC  6FD9               	movwf	_doDM$2149& (0+255),b
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;main.c: 1668: doActionStatus( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2912  0022CE  C0D9  F051         	movff	_doDM$2149,?_doActionStatus
  2913  0022D2  51DC               	movf	doDM@dmflags& (0+255),w,b
  2914  0022D4  EC77  F01A         	call	_doActionStatus
  2915                           
  2916                           ;main.c: 1669: break;
  2917  0022D8  D05D               	goto	l9745
  2918  0022DA                     l9735:
  2919                           
  2920                           ;main.c: 1672: doActionDisable( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2921  0022DA  0100               	movlb	0	; () banked
  2922  0022DC  51DD               	movf	doDM@i& (0+255),w,b
  2923  0022DE  6FCD               	movwf	??_doDM& (0+255),b
  2924  0022E0  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2925  0022E2  90D8               	bcf	status,0,c
  2926  0022E4  37CD               	rlcf	??_doDM& (0+255),f,b
  2927  0022E6  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2928  0022E8  90D8               	bcf	status,0,c
  2929  0022EA  37CD               	rlcf	??_doDM& (0+255),f,b
  2930  0022EC  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2931  0022EE  90D8               	bcf	status,0,c
  2932  0022F0  37CD               	rlcf	??_doDM& (0+255),f,b
  2933  0022F2  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2934  0022F4  0E92               	movlw	146
  2935  0022F6  25CD               	addwf	??_doDM& (0+255),w,b
  2936  0022F8  6E08               	movwf	?_readEEPROM,c
  2937  0022FA  0E00               	movlw	0
  2938  0022FC  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2939  0022FE  6E09               	movwf	?_readEEPROM+1,c
  2940  002300  ECDE  F020         	call	_readEEPROM	;wreg free
  2941  002304  0100               	movlb	0	; () banked
  2942  002306  6FDA               	movwf	_doDM$2150& (0+255),b
  2943                           
  2944                           ;main.c: 1672: doActionDisable( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2945  002308  C0DA  F00B         	movff	_doDM$2150,?_doActionDisable
  2946  00230C  51DC               	movf	doDM@dmflags& (0+255),w,b
  2947  00230E  EC11  F01E         	call	_doActionDisable
  2948                           
  2949                           ;main.c: 1673: break;
  2950  002312  D040               	goto	l9745
  2951  002314                     l9737:
  2952                           
  2953                           ;main.c: 1676: doActionToggle( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2954  002314  0100               	movlb	0	; () banked
  2955  002316  51DD               	movf	doDM@i& (0+255),w,b
  2956  002318  6FCD               	movwf	??_doDM& (0+255),b
  2957  00231A  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2958  00231C  90D8               	bcf	status,0,c
  2959  00231E  37CD               	rlcf	??_doDM& (0+255),f,b
  2960  002320  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2961  002322  90D8               	bcf	status,0,c
  2962  002324  37CD               	rlcf	??_doDM& (0+255),f,b
  2963  002326  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2964  002328  90D8               	bcf	status,0,c
  2965  00232A  37CD               	rlcf	??_doDM& (0+255),f,b
  2966  00232C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2967  00232E  0E92               	movlw	146
  2968  002330  25CD               	addwf	??_doDM& (0+255),w,b
  2969  002332  6E08               	movwf	?_readEEPROM,c
  2970  002334  0E00               	movlw	0
  2971  002336  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2972  002338  6E09               	movwf	?_readEEPROM+1,c
  2973  00233A  ECDE  F020         	call	_readEEPROM	;wreg free
  2974  00233E  0100               	movlb	0	; () banked
  2975  002340  6FDB               	movwf	_doDM$2151& (0+255),b
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;main.c: 1676: doActionToggle( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2979  002342  C0DB  F051         	movff	_doDM$2151,?_doActionToggle
  2980  002346  51DC               	movf	doDM@dmflags& (0+255),w,b
  2981  002348  EC60  F019         	call	_doActionToggle
  2982                           
  2983                           ;main.c: 1677: break;
  2984  00234C  D023               	goto	l9745
  2985  00234E                     l9743:
  2986                           
  2987                           ; BSR set to: 0
  2988  00234E  51DD               	movf	doDM@i& (0+255),w,b
  2989  002350  6FCD               	movwf	??_doDM& (0+255),b
  2990  002352  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2991  002354  90D8               	bcf	status,0,c
  2992  002356  37CD               	rlcf	??_doDM& (0+255),f,b
  2993  002358  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2994  00235A  90D8               	bcf	status,0,c
  2995  00235C  37CD               	rlcf	??_doDM& (0+255),f,b
  2996  00235E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2997  002360  90D8               	bcf	status,0,c
  2998  002362  37CD               	rlcf	??_doDM& (0+255),f,b
  2999  002364  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3000  002366  0E91               	movlw	145
  3001  002368  25CD               	addwf	??_doDM& (0+255),w,b
  3002  00236A  6E08               	movwf	?_readEEPROM,c
  3003  00236C  0E00               	movlw	0
  3004  00236E  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  3005  002370  6E09               	movwf	?_readEEPROM+1,c
  3006  002372  ECDE  F020         	call	_readEEPROM	;wreg free
  3007                           
  3008                           ; Switch size 1, requested type "speed"
  3009                           ; Number of cases is 6, Range of values is 1 to 16
  3010                           ; switch strategies available:
  3011                           ; Name         Instructions Cycles
  3012                           ; simple_byte           19    10 (average)
  3013                           ;	Chosen strategy is simple_byte
  3014  002376  0A01               	xorlw	1	; case 1
  3015  002378  E101 D73B          	bz	l9721
  3016  00237C  0A03               	xorlw	3	; case 2
  3017  00237E  E101 D755          	bz	l9725
  3018  002382  0A01               	xorlw	1	; case 3
  3019  002384  E101 D76F          	bz	l9729
  3020  002388  0A07               	xorlw	7	; case 4
  3021  00238A  E0C4               	bz	l9737
  3022  00238C  0A0E               	xorlw	14	; case 10
  3023  00238E  E088               	bz	l9731
  3024  002390  0A1A               	xorlw	26	; case 16
  3025  002392  E0A3               	bz	l9735
  3026  002394                     l9745:
  3027  002394  0100               	movlb	0	; () banked
  3028  002396  2BDD               	incf	doDM@i& (0+255),f,b
  3029                           
  3030                           ; BSR set to: 0
  3031  002398  0E06               	movlw	6
  3032  00239A  65DD               	cpfsgt	doDM@i& (0+255),b
  3033  00239C  D67B               	goto	l9693
  3034  00239E                     l411:
  3035                           
  3036                           ; BSR set to: 0
  3037  00239E  0012               	return	
  3038  0023A0                     __end_of_doDM:
  3039                           	opt stack 0
  3040                           tblptru	equ	0xFF8
  3041                           prodh	equ	0xFF4
  3042                           prodl	equ	0xFF3
  3043                           postinc0	equ	0xFEE
  3044                           wreg	equ	0xFE8
  3045                           postinc2	equ	0xFDE
  3046                           postdec2	equ	0xFDD
  3047                           fsr2h	equ	0xFDA
  3048                           fsr2l	equ	0xFD9
  3049                           status	equ	0xFD8
  3050                           
  3051 ;; *************** function _doActionToggle *****************
  3052 ;; Defined at:
  3053 ;;		line 2088 in file "../main.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;  dmflags         1    wreg     unsigned char 
  3056 ;;  arg             1   80[COMRAM] unsigned char 
  3057 ;; Auto vars:     Size  Location     Type
  3058 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3059 ;;  i               1   27[BANK0 ] unsigned char 
  3060 ;;  bOn             1   26[BANK0 ] enum E15660
  3061 ;;  val             1   25[BANK0 ] unsigned char 
  3062 ;; Return value:  Size  Location     Type
  3063 ;;		None               void
  3064 ;; Registers used:
  3065 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3066 ;; Tracked objects:
  3067 ;;		On entry : F/0
  3068 ;;		On exit  : F/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3071 ;;      Params:         1       0       0       0       0       0       0
  3072 ;;      Locals:         0       4       0       0       0       0       0
  3073 ;;      Temps:          0       2       0       0       0       0       0
  3074 ;;      Totals:         1       6       0       0       0       0       0
  3075 ;;Total ram usage:        7 bytes
  3076 ;; Hardware stack levels used:    1
  3077 ;; Hardware stack levels required when called:    7
  3078 ;; This function calls:
  3079 ;;		_readEEPROM
  3080 ;;		_SendInformationEvent
  3081 ;; This function is called by:
  3082 ;;		_doDM
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           	psect	text9
  3087  0032C0                     __ptext9:
  3088                           	opt stack 0
  3089  0032C0                     _doActionToggle:
  3090                           	opt stack 22
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;incstack = 0
  3094                           ;incstack = 0
  3095                           ;doActionToggle@dmflags stored from wreg
  3096  0032C0  CFE8 F0C9          	movff	wreg,doActionToggle@dmflags
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;main.c: 2090: unsigned char i;
  3100                           ;main.c: 2091: unsigned char val;
  3101                           ;main.c: 2092: BOOL bOn = 0;
  3102  0032C4  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3103                           
  3104                           ;main.c: 2094: for ( i = 0; i < 8; i++ ) {
  3105  0032C6  6BCC               	clrf	doActionToggle@i& (0+255),b
  3106  0032C8                     l10363:
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;main.c: 2097: if ( !( arg & (1 << i) ) ) continue;
  3110  0032C8  C0CC  F0C7         	movff	doActionToggle@i,??_doActionToggle
  3111  0032CC  0E01               	movlw	1
  3112  0032CE  6FC8               	movwf	(??_doActionToggle+1)& (0+255),b
  3113  0032D0  2BC7               	incf	??_doActionToggle& (0+255),f,b
  3114  0032D2  D002               	goto	u13104
  3115  0032D4                     u13105:
  3116  0032D4  90D8               	bcf	status,0,c
  3117  0032D6  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3118  0032D8                     u13104:
  3119  0032D8  2FC7               	decfsz	??_doActionToggle& (0+255),f,b
  3120  0032DA  D7FC               	goto	u13105
  3121  0032DC  51C8               	movf	(??_doActionToggle+1)& (0+255),w,b
  3122  0032DE  1451               	andwf	doActionToggle@arg,w,c
  3123  0032E0  E07A               	bz	l10421
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;main.c: 2100: if ( dmflags & 0x08 ) {
  3127  0032E2  A7C9               	btfss	doActionToggle@dmflags& (0+255),3,b
  3128  0032E4  D00B               	goto	l10371
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;main.c: 2101: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3132                           ;main.c: 2102: 53 +
  3133                           ;main.c: 2103: i ) ) {
  3134  0032E6  0E78               	movlw	120
  3135  0032E8  25CC               	addwf	doActionToggle@i& (0+255),w,b
  3136  0032EA  6E08               	movwf	?_readEEPROM,c
  3137  0032EC  6A09               	clrf	?_readEEPROM+1,c
  3138  0032EE  0E00               	movlw	0
  3139  0032F0  2209               	addwfc	?_readEEPROM+1,f,c
  3140  0032F2  ECDE  F020         	call	_readEEPROM	;wreg free
  3141  0032F6  0100               	movlb	0	; () banked
  3142  0032F8  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3143  0032FA  E16D               	bnz	l10421
  3144  0032FC                     l10371:
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;main.c: 2105: }
  3148                           ;main.c: 2106: }
  3149                           ;main.c: 2108: val = readEEPROM(0x43 + 10 + i);
  3150  0032FC  0E4D               	movlw	77
  3151  0032FE  25CC               	addwf	doActionToggle@i& (0+255),w,b
  3152  003300  6E08               	movwf	?_readEEPROM,c
  3153  003302  6A09               	clrf	?_readEEPROM+1,c
  3154  003304  0E00               	movlw	0
  3155  003306  2209               	addwfc	?_readEEPROM+1,f,c
  3156  003308  ECDE  F020         	call	_readEEPROM	;wreg free
  3157  00330C  0100               	movlb	0	; () banked
  3158  00330E  6FCA               	movwf	doActionToggle@val& (0+255),b
  3159                           
  3160                           ;main.c: 2110: switch ( i ) {
  3161  003310  D02D               	goto	l10403
  3162  003312                     l539:
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;main.c: 2113: if ( LATBbits.LATB4 ) {
  3166  003312  A88A               	btfss	3978,4,c	;volatile
  3167  003314  D002               	goto	l540
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;main.c: 2114: LATBbits.LATB4 = 0;
  3171  003316  988A               	bcf	3978,4,c	;volatile
  3172  003318  D025               	goto	L12
  3173  00331A                     l540:
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;main.c: 2117: LATBbits.LATB4 = 1;
  3177  00331A  888A               	bsf	3978,4,c	;volatile
  3178  00331C                     l10375:
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;main.c: 2118: bOn = 1;
  3182  00331C  0E01               	movlw	1
  3183  00331E  6FCB               	movwf	doActionToggle@bOn& (0+255),b
  3184  003320  D033               	goto	l10405
  3185  003322                     l543:
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;main.c: 2123: if ( LATBbits.LATB1 ) {
  3189  003322  A28A               	btfss	3978,1,c	;volatile
  3190  003324  D002               	goto	l544
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;main.c: 2124: LATBbits.LATB1 = 0;
  3194  003326  928A               	bcf	3978,1,c	;volatile
  3195  003328  D01D               	goto	L12
  3196  00332A                     l544:
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;main.c: 2127: LATBbits.LATB1 = 1;
  3200  00332A  828A               	bsf	3978,1,c	;volatile
  3201  00332C  D7F7               	goto	l10375
  3202  00332E                     l546:
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;main.c: 2133: if ( LATBbits.LATB0 ) {
  3206  00332E  A08A               	btfss	3978,0,c	;volatile
  3207  003330  D002               	goto	l547
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;main.c: 2134: LATBbits.LATB0 = 0;
  3211  003332  908A               	bcf	3978,0,c	;volatile
  3212  003334  D017               	goto	L12
  3213  003336                     l547:
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;main.c: 2137: LATBbits.LATB0 = 1;
  3217  003336  808A               	bsf	3978,0,c	;volatile
  3218  003338  D7F1               	goto	l10375
  3219  00333A                     l549:
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;main.c: 2143: if ( LATCbits.LATC7 ) {
  3223  00333A  AE8B               	btfss	3979,7,c	;volatile
  3224  00333C  D002               	goto	l550
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;main.c: 2144: LATCbits.LATC7 = 0;
  3228  00333E  9E8B               	bcf	3979,7,c	;volatile
  3229  003340  D011               	goto	L12
  3230  003342                     l550:
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;main.c: 2147: LATCbits.LATC7 = 1;
  3234  003342  8E8B               	bsf	3979,7,c	;volatile
  3235  003344  D7EB               	goto	l10375
  3236  003346                     l552:
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;main.c: 2153: if ( LATCbits.LATC6 ) {
  3240  003346  AC8B               	btfss	3979,6,c	;volatile
  3241  003348  D002               	goto	l553
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;main.c: 2154: LATCbits.LATC6 = 0;
  3245  00334A  9C8B               	bcf	3979,6,c	;volatile
  3246  00334C  D00B               	goto	L12
  3247  00334E                     l553:
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;main.c: 2157: LATCbits.LATC6 = 1;
  3251  00334E  8C8B               	bsf	3979,6,c	;volatile
  3252  003350  D7E5               	goto	l10375
  3253  003352                     l555:
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;main.c: 2163: if ( LATCbits.LATC5 ) {
  3257  003352  AA8B               	btfss	3979,5,c	;volatile
  3258  003354  D002               	goto	l556
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;main.c: 2164: LATCbits.LATC5 = 0;
  3262  003356  9A8B               	bcf	3979,5,c	;volatile
  3263  003358  D005               	goto	L12
  3264  00335A                     l556:
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;main.c: 2167: LATCbits.LATC5 = 1;
  3268  00335A  8A8B               	bsf	3979,5,c	;volatile
  3269  00335C  D7DF               	goto	l10375
  3270  00335E                     l558:
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;main.c: 2173: if ( LATCbits.LATC4 ) {
  3274  00335E  A88B               	btfss	3979,4,c	;volatile
  3275  003360  D003               	goto	l559
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;main.c: 2174: LATCbits.LATC4 = 0;
  3279  003362  988B               	bcf	3979,4,c	;volatile
  3280  003364                     L12:
  3281                           
  3282                           ;main.c: 2175: bOn = 0;
  3283  003364  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3284                           
  3285                           ;main.c: 2176: } else {
  3286  003366  D010               	goto	l10405
  3287  003368                     l559:
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;main.c: 2177: LATCbits.LATC4 = 1;
  3291  003368  888B               	bsf	3979,4,c	;volatile
  3292  00336A  D7D8               	goto	l10375
  3293  00336C                     l10403:
  3294                           
  3295                           ; BSR set to: 0
  3296  00336C  51CC               	movf	doActionToggle@i& (0+255),w,b
  3297                           
  3298                           ; Switch size 1, requested type "speed"
  3299                           ; Number of cases is 7, Range of values is 0 to 6
  3300                           ; switch strategies available:
  3301                           ; Name         Instructions Cycles
  3302                           ; simple_byte           22    12 (average)
  3303                           ;	Chosen strategy is simple_byte
  3304  00336E  E0D1               	bz	l539
  3305  003370  0A01               	xorlw	1	; case 1
  3306  003372  E0D7               	bz	l543
  3307  003374  0A03               	xorlw	3	; case 2
  3308  003376  E0DB               	bz	l546
  3309  003378  0A01               	xorlw	1	; case 3
  3310  00337A  E0DF               	bz	l549
  3311  00337C  0A07               	xorlw	7	; case 4
  3312  00337E  E0E3               	bz	l552
  3313  003380  0A01               	xorlw	1	; case 5
  3314  003382  E0E7               	bz	l555
  3315  003384  0A03               	xorlw	3	; case 6
  3316  003386  E0EB               	bz	l558
  3317  003388                     l10405:
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;main.c: 2184: if ( bOn ) {
  3321  003388  51CB               	movf	doActionToggle@bOn& (0+255),w,b
  3322  00338A  E013               	bz	l561
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;main.c: 2187: if ( val & 0x08 ) {
  3326  00338C  A7CA               	btfss	doActionToggle@val& (0+255),3,b
  3327  00338E  D007               	goto	l10411
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;main.c: 2188: SendInformationEvent( i, 20, 3 );
  3331  003390  0E14               	movlw	20
  3332  003392  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3333  003394  0E03               	movlw	3
  3334  003396  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3335  003398  51CC               	movf	doActionToggle@i& (0+255),w,b
  3336  00339A  EC47  F01E         	call	_SendInformationEvent
  3337  00339E                     l10411:
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;main.c: 2189: }
  3341                           ;main.c: 2192: if ( val & 0x20 ) {
  3342  00339E  ABCA               	btfss	doActionToggle@val& (0+255),5,b
  3343  0033A0  D01A               	goto	l10421
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;main.c: 2193: SendInformationEvent( i, 20, 25 );
  3347  0033A2  0E14               	movlw	20
  3348  0033A4  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3349  0033A6  0E19               	movlw	25
  3350  0033A8  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3351  0033AA  51CC               	movf	doActionToggle@i& (0+255),w,b
  3352  0033AC  EC47  F01E         	call	_SendInformationEvent
  3353  0033B0  D012               	goto	l10421
  3354  0033B2                     l561:
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;main.c: 2197: else {
  3358                           ;main.c: 2200: if ( val & 0x10 ) {
  3359  0033B2  A9CA               	btfss	doActionToggle@val& (0+255),4,b
  3360  0033B4  D007               	goto	l10417
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;main.c: 2201: SendInformationEvent( i, 20, 4 );
  3364  0033B6  0E14               	movlw	20
  3365  0033B8  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3366  0033BA  0E04               	movlw	4
  3367  0033BC  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3368  0033BE  51CC               	movf	doActionToggle@i& (0+255),w,b
  3369  0033C0  EC47  F01E         	call	_SendInformationEvent
  3370  0033C4                     l10417:
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;main.c: 2202: }
  3374                           ;main.c: 2205: if (val & 0x40 ) {
  3375  0033C4  ADCA               	btfss	doActionToggle@val& (0+255),6,b
  3376  0033C6  D007               	goto	l10421
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;main.c: 2206: SendInformationEvent( i, 20, 24 );
  3380  0033C8  0E14               	movlw	20
  3381  0033CA  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3382  0033CC  0E18               	movlw	24
  3383  0033CE  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3384  0033D0  51CC               	movf	doActionToggle@i& (0+255),w,b
  3385  0033D2  EC47  F01E         	call	_SendInformationEvent
  3386  0033D6                     l10421:
  3387                           
  3388                           ; BSR set to: 0
  3389  0033D6  2BCC               	incf	doActionToggle@i& (0+255),f,b
  3390                           
  3391                           ; BSR set to: 0
  3392  0033D8  0E07               	movlw	7
  3393  0033DA  65CC               	cpfsgt	doActionToggle@i& (0+255),b
  3394  0033DC  D775               	goto	l10363
  3395                           
  3396                           ; BSR set to: 0
  3397  0033DE  0C07               	retlw	7
  3398  0033E0                     __end_of_doActionToggle:
  3399                           	opt stack 0
  3400                           tblptru	equ	0xFF8
  3401                           prodh	equ	0xFF4
  3402                           prodl	equ	0xFF3
  3403                           postinc0	equ	0xFEE
  3404                           wreg	equ	0xFE8
  3405                           postinc2	equ	0xFDE
  3406                           postdec2	equ	0xFDD
  3407                           fsr2h	equ	0xFDA
  3408                           fsr2l	equ	0xFD9
  3409                           status	equ	0xFD8
  3410                           
  3411 ;; *************** function _doActionDisable *****************
  3412 ;; Defined at:
  3413 ;;		line 2058 in file "../main.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;  dmflags         1    wreg     unsigned char 
  3416 ;;  arg             1   10[COMRAM] unsigned char 
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;  dmflags         1   13[COMRAM] unsigned char 
  3419 ;;  i               1   15[COMRAM] unsigned char 
  3420 ;;  val             1   14[COMRAM] unsigned char 
  3421 ;; Return value:  Size  Location     Type
  3422 ;;		None               void
  3423 ;; Registers used:
  3424 ;;		wreg, status,2, status,0, cstack
  3425 ;; Tracked objects:
  3426 ;;		On entry : F/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3430 ;;      Params:         1       0       0       0       0       0       0
  3431 ;;      Locals:         3       0       0       0       0       0       0
  3432 ;;      Temps:          2       0       0       0       0       0       0
  3433 ;;      Totals:         6       0       0       0       0       0       0
  3434 ;;Total ram usage:        6 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; Hardware stack levels required when called:    3
  3437 ;; This function calls:
  3438 ;;		_writeEEPROM
  3439 ;;		_readEEPROM
  3440 ;; This function is called by:
  3441 ;;		_doDM
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           	psect	text10
  3446  003C22                     __ptext10:
  3447                           	opt stack 0
  3448  003C22                     _doActionDisable:
  3449                           	opt stack 26
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;incstack = 0
  3453                           ;incstack = 0
  3454                           ;doActionDisable@dmflags stored from wreg
  3455  003C22  CFE8 F00E          	movff	wreg,doActionDisable@dmflags
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;main.c: 2060: unsigned char i;
  3459                           ;main.c: 2061: unsigned char val;
  3460                           ;main.c: 2063: for ( i = 0; i < 8; i++ ) {
  3461  003C26  6A10               	clrf	doActionDisable@i,c
  3462  003C28                     l8709:
  3463                           
  3464                           ;main.c: 2066: if ( !( arg & (1 << i) ) ) continue;
  3465  003C28  C010  F00C         	movff	doActionDisable@i,??_doActionDisable
  3466  003C2C  0E01               	movlw	1
  3467  003C2E  6E0D               	movwf	(??_doActionDisable+1)& (0+255),c
  3468  003C30  2A0C               	incf	??_doActionDisable,f,c
  3469  003C32  D002               	goto	u10284
  3470  003C34                     u10285:
  3471  003C34  90D8               	bcf	status,0,c
  3472  003C36  360D               	rlcf	??_doActionDisable+1,f,c
  3473  003C38                     u10284:
  3474  003C38  2E0C               	decfsz	??_doActionDisable,f,c
  3475  003C3A  D7FC               	goto	u10285
  3476  003C3C  500D               	movf	??_doActionDisable+1,w,c
  3477  003C3E  140B               	andwf	doActionDisable@arg,w,c
  3478  003C40  E021               	bz	l8719
  3479                           
  3480                           ;main.c: 2069: if ( dmflags & 0x08) {
  3481  003C42  A60E               	btfss	doActionDisable@dmflags,3,c
  3482  003C44  D00B               	goto	l8717
  3483                           
  3484                           ;main.c: 2070: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3485                           ;main.c: 2071: 53 +
  3486                           ;main.c: 2072: i ) ) {
  3487  003C46  0E78               	movlw	120
  3488  003C48  2410               	addwf	doActionDisable@i,w,c
  3489  003C4A  6E08               	movwf	?_readEEPROM,c
  3490  003C4C  6A09               	clrf	?_readEEPROM+1,c
  3491  003C4E  0E00               	movlw	0
  3492  003C50  2209               	addwfc	?_readEEPROM+1,f,c
  3493  003C52  ECDE  F020         	call	_readEEPROM	;wreg free
  3494  003C56  0100               	movlb	0	; () banked
  3495  003C58  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3496  003C5A  E114               	bnz	l8719
  3497  003C5C                     l8717:
  3498                           
  3499                           ;main.c: 2074: }
  3500                           ;main.c: 2075: }
  3501                           ;main.c: 2077: val = readEEPROM( 0x43 + 10 + i );
  3502  003C5C  0E4D               	movlw	77
  3503  003C5E  2410               	addwf	doActionDisable@i,w,c
  3504  003C60  6E08               	movwf	?_readEEPROM,c
  3505  003C62  6A09               	clrf	?_readEEPROM+1,c
  3506  003C64  0E00               	movlw	0
  3507  003C66  2209               	addwfc	?_readEEPROM+1,f,c
  3508  003C68  ECDE  F020         	call	_readEEPROM	;wreg free
  3509  003C6C  6E0F               	movwf	doActionDisable@val,c
  3510                           
  3511                           ;main.c: 2078: writeEEPROM( 0x43 + 10 + i, val & ~0x80 );
  3512  003C6E  0E4D               	movlw	77
  3513  003C70  2410               	addwf	doActionDisable@i,w,c
  3514  003C72  6E08               	movwf	?_writeEEPROM,c
  3515  003C74  6A09               	clrf	?_writeEEPROM+1,c
  3516  003C76  0E00               	movlw	0
  3517  003C78  2209               	addwfc	?_writeEEPROM+1,f,c
  3518  003C7A  500F               	movf	doActionDisable@val,w,c
  3519  003C7C  0B7F               	andlw	127
  3520  003C7E  6E0A               	movwf	?_writeEEPROM+2,c
  3521  003C80  ECB6  F01F         	call	_writeEEPROM	;wreg free
  3522  003C84                     l8719:
  3523  003C84  2A10               	incf	doActionDisable@i,f,c
  3524  003C86  0E07               	movlw	7
  3525  003C88  6410               	cpfsgt	doActionDisable@i,c
  3526  003C8A  D7CE               	goto	l8709
  3527  003C8C  0C07               	retlw	7
  3528  003C8E                     __end_of_doActionDisable:
  3529                           	opt stack 0
  3530                           tblptru	equ	0xFF8
  3531                           prodh	equ	0xFF4
  3532                           prodl	equ	0xFF3
  3533                           postinc0	equ	0xFEE
  3534                           wreg	equ	0xFE8
  3535                           postinc2	equ	0xFDE
  3536                           postdec2	equ	0xFDD
  3537                           fsr2h	equ	0xFDA
  3538                           fsr2l	equ	0xFD9
  3539                           status	equ	0xFD8
  3540                           
  3541 ;; *************** function _doActionStatus *****************
  3542 ;; Defined at:
  3543 ;;		line 1969 in file "../main.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  dmflags         1    wreg     unsigned char 
  3546 ;;  arg             1   80[COMRAM] unsigned char 
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3549 ;;  i               1   27[BANK0 ] unsigned char 
  3550 ;;  val             1   26[BANK0 ] unsigned char 
  3551 ;;  bOn             1   25[BANK0 ] enum E15660
  3552 ;; Return value:  Size  Location     Type
  3553 ;;		None               void
  3554 ;; Registers used:
  3555 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3556 ;; Tracked objects:
  3557 ;;		On entry : F/0
  3558 ;;		On exit  : F/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3561 ;;      Params:         1       0       0       0       0       0       0
  3562 ;;      Locals:         0       4       0       0       0       0       0
  3563 ;;      Temps:          0       2       0       0       0       0       0
  3564 ;;      Totals:         1       6       0       0       0       0       0
  3565 ;;Total ram usage:        7 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    7
  3568 ;; This function calls:
  3569 ;;		_readEEPROM
  3570 ;;		_SendInformationEvent
  3571 ;; This function is called by:
  3572 ;;		_doDM
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           	psect	text11
  3577  0034EE                     __ptext11:
  3578                           	opt stack 0
  3579  0034EE                     _doActionStatus:
  3580                           	opt stack 22
  3581                           
  3582                           ;incstack = 0
  3583                           ;incstack = 0
  3584                           ;doActionStatus@dmflags stored from wreg
  3585  0034EE  CFE8 F0C9          	movff	wreg,doActionStatus@dmflags
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;main.c: 1971: unsigned char i;
  3589                           ;main.c: 1972: unsigned char val;
  3590                           ;main.c: 1973: BOOL bOn = 0;
  3591  0034F2  6BCA               	clrf	doActionStatus@bOn& (0+255),b
  3592                           
  3593                           ;main.c: 1975: for (i = 0; i < 8; i++) {
  3594  0034F4  6BCC               	clrf	doActionStatus@i& (0+255),b
  3595  0034F6                     l10309:
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;main.c: 1978: if (!(arg & (1 << i))) continue;
  3599  0034F6  C0CC  F0C7         	movff	doActionStatus@i,??_doActionStatus
  3600  0034FA  0E01               	movlw	1
  3601  0034FC  6FC8               	movwf	(??_doActionStatus+1)& (0+255),b
  3602  0034FE  2BC7               	incf	??_doActionStatus& (0+255),f,b
  3603  003500  D002               	goto	u13004
  3604  003502                     u13005:
  3605  003502  90D8               	bcf	status,0,c
  3606  003504  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3607  003506                     u13004:
  3608  003506  2FC7               	decfsz	??_doActionStatus& (0+255),f,b
  3609  003508  D7FC               	goto	u13005
  3610  00350A  51C8               	movf	(??_doActionStatus+1)& (0+255),w,b
  3611  00350C  1451               	andwf	doActionStatus@arg,w,c
  3612  00350E  E070               	bz	l10353
  3613                           
  3614                           ; BSR set to: 0
  3615                           ;main.c: 1981: if (dmflags & 0x08) {
  3616  003510  A7C9               	btfss	doActionStatus@dmflags& (0+255),3,b
  3617  003512  D00B               	goto	l10317
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;main.c: 1982: if (vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3621                           ;main.c: 1983: 53 +
  3622                           ;main.c: 1984: i ) ) {
  3623  003514  0E78               	movlw	120
  3624  003516  25CC               	addwf	doActionStatus@i& (0+255),w,b
  3625  003518  6E08               	movwf	?_readEEPROM,c
  3626  00351A  6A09               	clrf	?_readEEPROM+1,c
  3627  00351C  0E00               	movlw	0
  3628  00351E  2209               	addwfc	?_readEEPROM+1,f,c
  3629  003520  ECDE  F020         	call	_readEEPROM	;wreg free
  3630  003524  0100               	movlb	0	; () banked
  3631  003526  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3632  003528  E163               	bnz	l10353
  3633  00352A                     l10317:
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;main.c: 1986: }
  3637                           ;main.c: 1987: }
  3638                           ;main.c: 1989: val = readEEPROM( 0x43 + 10 + i );
  3639  00352A  0E4D               	movlw	77
  3640  00352C  25CC               	addwf	doActionStatus@i& (0+255),w,b
  3641  00352E  6E08               	movwf	?_readEEPROM,c
  3642  003530  6A09               	clrf	?_readEEPROM+1,c
  3643  003532  0E00               	movlw	0
  3644  003534  2209               	addwfc	?_readEEPROM+1,f,c
  3645  003536  ECDE  F020         	call	_readEEPROM	;wreg free
  3646  00353A  0100               	movlb	0	; () banked
  3647  00353C  6FCB               	movwf	doActionStatus@val& (0+255),b
  3648                           
  3649                           ;main.c: 1991: switch (i) {
  3650  00353E  D023               	goto	l10335
  3651  003540                     l10319:
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;main.c: 1994: bOn = LATBbits.LATB4;
  3655  003540  0E00               	movlw	0
  3656  003542  B88A               	btfsc	3978,4,c	;volatile
  3657  003544  0E01               	movlw	1
  3658  003546  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3659                           
  3660                           ;main.c: 1995: break;
  3661  003548  D02C               	goto	l10337
  3662  00354A                     l10321:
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;main.c: 1998: bOn = LATBbits.LATB1;
  3666  00354A  0E00               	movlw	0
  3667  00354C  B28A               	btfsc	3978,1,c	;volatile
  3668  00354E  0E01               	movlw	1
  3669  003550  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3670                           
  3671                           ;main.c: 1999: break;
  3672  003552  D027               	goto	l10337
  3673  003554                     l10323:
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;main.c: 2002: bOn = LATBbits.LATB0;
  3677  003554  0E00               	movlw	0
  3678  003556  B08A               	btfsc	3978,0,c	;volatile
  3679  003558  0E01               	movlw	1
  3680  00355A  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3681                           
  3682                           ;main.c: 2003: break;
  3683  00355C  D022               	goto	l10337
  3684  00355E                     l10325:
  3685                           
  3686                           ; BSR set to: 0
  3687                           ;main.c: 2006: bOn = LATCbits.LATC7;
  3688  00355E  0E00               	movlw	0
  3689  003560  BE8B               	btfsc	3979,7,c	;volatile
  3690  003562  0E01               	movlw	1
  3691  003564  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3692                           
  3693                           ;main.c: 2007: break;
  3694  003566  D01D               	goto	l10337
  3695  003568                     l10327:
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;main.c: 2010: bOn = LATCbits.LATC6;
  3699  003568  0E00               	movlw	0
  3700  00356A  BC8B               	btfsc	3979,6,c	;volatile
  3701  00356C  0E01               	movlw	1
  3702  00356E  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3703                           
  3704                           ;main.c: 2011: break;
  3705  003570  D018               	goto	l10337
  3706  003572                     l10329:
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;main.c: 2014: bOn = LATCbits.LATC5;
  3710  003572  0E00               	movlw	0
  3711  003574  BA8B               	btfsc	3979,5,c	;volatile
  3712  003576  0E01               	movlw	1
  3713  003578  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3714                           
  3715                           ;main.c: 2015: break;
  3716  00357A  D013               	goto	l10337
  3717  00357C                     l10331:
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;main.c: 2018: bOn = LATCbits.LATC4;
  3721  00357C  0E00               	movlw	0
  3722  00357E  B88B               	btfsc	3979,4,c	;volatile
  3723  003580  0E01               	movlw	1
  3724  003582  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3725                           
  3726                           ;main.c: 2019: break;
  3727  003584  D00E               	goto	l10337
  3728  003586                     l10335:
  3729                           
  3730                           ; BSR set to: 0
  3731  003586  51CC               	movf	doActionStatus@i& (0+255),w,b
  3732                           
  3733                           ; Switch size 1, requested type "speed"
  3734                           ; Number of cases is 7, Range of values is 0 to 6
  3735                           ; switch strategies available:
  3736                           ; Name         Instructions Cycles
  3737                           ; simple_byte           22    12 (average)
  3738                           ;	Chosen strategy is simple_byte
  3739  003588  E0DB               	bz	l10319
  3740  00358A  0A01               	xorlw	1	; case 1
  3741  00358C  E0DE               	bz	l10321
  3742  00358E  0A03               	xorlw	3	; case 2
  3743  003590  E0E1               	bz	l10323
  3744  003592  0A01               	xorlw	1	; case 3
  3745  003594  E0E4               	bz	l10325
  3746  003596  0A07               	xorlw	7	; case 4
  3747  003598  E0E7               	bz	l10327
  3748  00359A  0A01               	xorlw	1	; case 5
  3749  00359C  E0EA               	bz	l10329
  3750  00359E  0A03               	xorlw	3	; case 6
  3751  0035A0  E0ED               	bz	l10331
  3752  0035A2                     l10337:
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;main.c: 2023: if (bOn) {
  3756  0035A2  51CA               	movf	doActionStatus@bOn& (0+255),w,b
  3757  0035A4  E013               	bz	l514
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;main.c: 2026: if ( val & 0x10 ) {
  3761  0035A6  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3762  0035A8  D007               	goto	l10343
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;main.c: 2027: SendInformationEvent( i, 20, 4 );
  3766  0035AA  0E14               	movlw	20
  3767  0035AC  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3768  0035AE  0E04               	movlw	4
  3769  0035B0  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3770  0035B2  51CC               	movf	doActionStatus@i& (0+255),w,b
  3771  0035B4  EC47  F01E         	call	_SendInformationEvent
  3772  0035B8                     l10343:
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;main.c: 2028: }
  3776                           ;main.c: 2031: if ( val & 0x40 ) {
  3777  0035B8  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3778  0035BA  D01A               	goto	l10353
  3779                           
  3780                           ; BSR set to: 0
  3781                           ;main.c: 2032: SendInformationEvent( i, 20, 24 );
  3782  0035BC  0E14               	movlw	20
  3783  0035BE  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3784  0035C0  0E18               	movlw	24
  3785  0035C2  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3786  0035C4  51CC               	movf	doActionStatus@i& (0+255),w,b
  3787  0035C6  EC47  F01E         	call	_SendInformationEvent
  3788  0035CA  D012               	goto	l10353
  3789  0035CC                     l514:
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;main.c: 2036: else {
  3793                           ;main.c: 2039: if ( val & 0x10 ) {
  3794  0035CC  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3795  0035CE  D007               	goto	l10349
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;main.c: 2040: SendInformationEvent( i, 20, 4 );
  3799  0035D0  0E14               	movlw	20
  3800  0035D2  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3801  0035D4  0E04               	movlw	4
  3802  0035D6  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3803  0035D8  51CC               	movf	doActionStatus@i& (0+255),w,b
  3804  0035DA  EC47  F01E         	call	_SendInformationEvent
  3805  0035DE                     l10349:
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;main.c: 2041: }
  3809                           ;main.c: 2044: if ( val & 0x40 ) {
  3810  0035DE  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3811  0035E0  D007               	goto	l10353
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;main.c: 2045: SendInformationEvent( i, 20, 24 );
  3815  0035E2  0E14               	movlw	20
  3816  0035E4  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3817  0035E6  0E18               	movlw	24
  3818  0035E8  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3819  0035EA  51CC               	movf	doActionStatus@i& (0+255),w,b
  3820  0035EC  EC47  F01E         	call	_SendInformationEvent
  3821  0035F0                     l10353:
  3822                           
  3823                           ; BSR set to: 0
  3824  0035F0  2BCC               	incf	doActionStatus@i& (0+255),f,b
  3825                           
  3826                           ; BSR set to: 0
  3827  0035F2  0E07               	movlw	7
  3828  0035F4  65CC               	cpfsgt	doActionStatus@i& (0+255),b
  3829  0035F6  D77F               	goto	l10309
  3830                           
  3831                           ; BSR set to: 0
  3832  0035F8  0C07               	retlw	7
  3833  0035FA                     __end_of_doActionStatus:
  3834                           	opt stack 0
  3835                           tblptru	equ	0xFF8
  3836                           prodh	equ	0xFF4
  3837                           prodl	equ	0xFF3
  3838                           postinc0	equ	0xFEE
  3839                           wreg	equ	0xFE8
  3840                           postinc2	equ	0xFDE
  3841                           postdec2	equ	0xFDD
  3842                           fsr2h	equ	0xFDA
  3843                           fsr2l	equ	0xFD9
  3844                           status	equ	0xFD8
  3845                           
  3846 ;; *************** function _doActionPulse *****************
  3847 ;; Defined at:
  3848 ;;		line 1878 in file "../main.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;  dmflags         1    wreg     unsigned char 
  3851 ;;  arg             1   10[COMRAM] unsigned char 
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;  dmflags         1   14[COMRAM] unsigned char 
  3854 ;;  i               1   16[COMRAM] unsigned char 
  3855 ;;  val             1   15[COMRAM] unsigned char 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;		None               void
  3858 ;; Registers used:
  3859 ;;		wreg, status,2, status,0, cstack
  3860 ;; Tracked objects:
  3861 ;;		On entry : F/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3865 ;;      Params:         1       0       0       0       0       0       0
  3866 ;;      Locals:         3       0       0       0       0       0       0
  3867 ;;      Temps:          3       0       0       0       0       0       0
  3868 ;;      Totals:         7       0       0       0       0       0       0
  3869 ;;Total ram usage:        7 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    3
  3872 ;; This function calls:
  3873 ;;		_readEEPROM
  3874 ;; This function is called by:
  3875 ;;		_doDM
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           	psect	text12
  3880  002B0A                     __ptext12:
  3881                           	opt stack 0
  3882  002B0A                     _doActionPulse:
  3883                           	opt stack 26
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;incstack = 0
  3887                           ;incstack = 0
  3888                           ;doActionPulse@dmflags stored from wreg
  3889  002B0A  CFE8 F00F          	movff	wreg,doActionPulse@dmflags
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;main.c: 1880: unsigned char i;
  3893                           ;main.c: 1881: unsigned char val;
  3894                           ;main.c: 1883: for ( i = 0; i < 8; i++ ) {
  3895  002B0E  6A11               	clrf	doActionPulse@i,c
  3896  002B10                     l8599:
  3897                           
  3898                           ;main.c: 1886: if ( !( arg & ( 1 << i ) ) ) continue;
  3899  002B10  C011  F00C         	movff	doActionPulse@i,??_doActionPulse
  3900  002B14  0E01               	movlw	1
  3901  002B16  6E0D               	movwf	(??_doActionPulse+1)& (0+255),c
  3902  002B18  2A0C               	incf	??_doActionPulse,f,c
  3903  002B1A  D002               	goto	u10124
  3904  002B1C                     u10125:
  3905  002B1C  90D8               	bcf	status,0,c
  3906  002B1E  360D               	rlcf	??_doActionPulse+1,f,c
  3907  002B20                     u10124:
  3908  002B20  2E0C               	decfsz	??_doActionPulse,f,c
  3909  002B22  D7FC               	goto	u10125
  3910  002B24  500D               	movf	??_doActionPulse+1,w,c
  3911  002B26  140B               	andwf	doActionPulse@arg,w,c
  3912  002B28  E101 D0D2          	bz	l8645
  3913                           
  3914                           ;main.c: 1889: if (dmflags & 0x08) {
  3915  002B2C  A60F               	btfss	doActionPulse@dmflags,3,c
  3916  002B2E  D00C               	goto	l8607
  3917                           
  3918                           ;main.c: 1890: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3919                           ;main.c: 1891: 53 +
  3920                           ;main.c: 1892: i ) ) {
  3921  002B30  0E78               	movlw	120
  3922  002B32  2411               	addwf	doActionPulse@i,w,c
  3923  002B34  6E08               	movwf	?_readEEPROM,c
  3924  002B36  6A09               	clrf	?_readEEPROM+1,c
  3925  002B38  0E00               	movlw	0
  3926  002B3A  2209               	addwfc	?_readEEPROM+1,f,c
  3927  002B3C  ECDE  F020         	call	_readEEPROM	;wreg free
  3928  002B40  0100               	movlb	0	; () banked
  3929  002B42  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3930  002B44  E001 D0C4          	bnz	l8645
  3931  002B48                     l8607:
  3932                           
  3933                           ;main.c: 1894: }
  3934                           ;main.c: 1895: }
  3935                           ;main.c: 1897: val = readEEPROM( 0x43 + 10 + i );
  3936  002B48  0E4D               	movlw	77
  3937  002B4A  2411               	addwf	doActionPulse@i,w,c
  3938  002B4C  6E08               	movwf	?_readEEPROM,c
  3939  002B4E  6A09               	clrf	?_readEEPROM+1,c
  3940  002B50  0E00               	movlw	0
  3941  002B52  2209               	addwfc	?_readEEPROM+1,f,c
  3942  002B54  ECDE  F020         	call	_readEEPROM	;wreg free
  3943  002B58  6E10               	movwf	doActionPulse@val,c
  3944                           
  3945                           ;main.c: 1900: if ( !( val & 0x80 ) ) continue;
  3946  002B5A  AE10               	btfss	doActionPulse@val,7,c
  3947  002B5C  D0B9               	goto	l8645
  3948  002B5E  D0A8               	goto	l8643
  3949  002B60                     l488:
  3950                           
  3951                           ;main.c: 1905: LATBbits.LATB4 = 0;
  3952  002B60  988A               	bcf	3978,4,c	;volatile
  3953                           
  3954                           ;main.c: 1906: relay_pulse_flags |= 0x01;
  3955  002B62  0100               	movlb	0	; () banked
  3956  002B64  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;main.c: 1907: relay_pulse_timer[ 0 ] =
  3960                           ;main.c: 1908: readEEPROM( 0x43 + 18 ) * 256 +
  3961                           ;main.c: 1909: readEEPROM( 0x43 + 19 );
  3962  002B66  6A09               	clrf	?_readEEPROM+1,c
  3963  002B68  0E56               	movlw	86
  3964  002B6A  6E08               	movwf	?_readEEPROM,c
  3965  002B6C  ECDE  F020         	call	_readEEPROM	;wreg free
  3966  002B70  6E0C               	movwf	??_doActionPulse& (0+255),c
  3967  002B72  6A09               	clrf	?_readEEPROM+1,c
  3968  002B74  0E55               	movlw	85
  3969  002B76  6E08               	movwf	?_readEEPROM,c
  3970  002B78  ECDE  F020         	call	_readEEPROM	;wreg free
  3971  002B7C  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  3972  002B7E  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  3973  002B80  500C               	movf	??_doActionPulse,w,c
  3974  002B82  240D               	addwf	??_doActionPulse+1,w,c
  3975  002B84  0100               	movlb	0	; () banked
  3976  002B86  6F70               	movwf	_relay_pulse_timer& (0+255),b
  3977  002B88  0E00               	movlw	0
  3978  002B8A  200E               	addwfc	??_doActionPulse+2,w,c
  3979  002B8C  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  3980                           
  3981                           ;main.c: 1910: break;
  3982  002B8E  D0A0               	goto	l8645
  3983  002B90                     l490:
  3984                           
  3985                           ;main.c: 1913: LATBbits.LATB1 = 0;
  3986  002B90  928A               	bcf	3978,1,c	;volatile
  3987                           
  3988                           ;main.c: 1914: relay_pulse_flags |= 0x02;
  3989  002B92  0100               	movlb	0	; () banked
  3990  002B94  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;main.c: 1915: relay_pulse_timer[ 1 ] =
  3994                           ;main.c: 1916: readEEPROM( 0x43 + 20 ) * 256 +
  3995                           ;main.c: 1917: readEEPROM( 0x43 + 21 );
  3996  002B96  6A09               	clrf	?_readEEPROM+1,c
  3997  002B98  0E58               	movlw	88
  3998  002B9A  6E08               	movwf	?_readEEPROM,c
  3999  002B9C  ECDE  F020         	call	_readEEPROM	;wreg free
  4000  002BA0  6E0C               	movwf	??_doActionPulse& (0+255),c
  4001  002BA2  6A09               	clrf	?_readEEPROM+1,c
  4002  002BA4  0E57               	movlw	87
  4003  002BA6  6E08               	movwf	?_readEEPROM,c
  4004  002BA8  ECDE  F020         	call	_readEEPROM	;wreg free
  4005  002BAC  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4006  002BAE  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4007  002BB0  500C               	movf	??_doActionPulse,w,c
  4008  002BB2  240D               	addwf	??_doActionPulse+1,w,c
  4009  002BB4  0100               	movlb	0	; () banked
  4010  002BB6  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  4011  002BB8  0E00               	movlw	0
  4012  002BBA  200E               	addwfc	??_doActionPulse+2,w,c
  4013  002BBC  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  4014                           
  4015                           ;main.c: 1918: break;
  4016  002BBE  D088               	goto	l8645
  4017  002BC0                     l491:
  4018                           
  4019                           ;main.c: 1921: LATBbits.LATB0 = 0;
  4020  002BC0  908A               	bcf	3978,0,c	;volatile
  4021                           
  4022                           ;main.c: 1922: relay_pulse_flags |= 0x04;
  4023  002BC2  0100               	movlb	0	; () banked
  4024  002BC4  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;main.c: 1923: relay_pulse_timer[ 2 ] =
  4028                           ;main.c: 1924: readEEPROM( 0x43 + 22 ) * 256 +
  4029                           ;main.c: 1925: readEEPROM( 0x43 + 23 );
  4030  002BC6  6A09               	clrf	?_readEEPROM+1,c
  4031  002BC8  0E5A               	movlw	90
  4032  002BCA  6E08               	movwf	?_readEEPROM,c
  4033  002BCC  ECDE  F020         	call	_readEEPROM	;wreg free
  4034  002BD0  6E0C               	movwf	??_doActionPulse& (0+255),c
  4035  002BD2  6A09               	clrf	?_readEEPROM+1,c
  4036  002BD4  0E59               	movlw	89
  4037  002BD6  6E08               	movwf	?_readEEPROM,c
  4038  002BD8  ECDE  F020         	call	_readEEPROM	;wreg free
  4039  002BDC  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4040  002BDE  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4041  002BE0  500C               	movf	??_doActionPulse,w,c
  4042  002BE2  240D               	addwf	??_doActionPulse+1,w,c
  4043  002BE4  0100               	movlb	0	; () banked
  4044  002BE6  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  4045  002BE8  0E00               	movlw	0
  4046  002BEA  200E               	addwfc	??_doActionPulse+2,w,c
  4047  002BEC  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  4048                           
  4049                           ;main.c: 1926: break;
  4050  002BEE  D070               	goto	l8645
  4051  002BF0                     l492:
  4052                           
  4053                           ;main.c: 1929: LATCbits.LATC7 = 0;
  4054  002BF0  9E8B               	bcf	3979,7,c	;volatile
  4055                           
  4056                           ;main.c: 1930: relay_pulse_flags |= 0x08;
  4057  002BF2  0100               	movlb	0	; () banked
  4058  002BF4  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;main.c: 1931: relay_pulse_timer[ 3 ] =
  4062                           ;main.c: 1932: readEEPROM( 0x43 + 24 ) * 256 +
  4063                           ;main.c: 1933: readEEPROM( 0x43 + 25 );
  4064  002BF6  6A09               	clrf	?_readEEPROM+1,c
  4065  002BF8  0E5C               	movlw	92
  4066  002BFA  6E08               	movwf	?_readEEPROM,c
  4067  002BFC  ECDE  F020         	call	_readEEPROM	;wreg free
  4068  002C00  6E0C               	movwf	??_doActionPulse& (0+255),c
  4069  002C02  6A09               	clrf	?_readEEPROM+1,c
  4070  002C04  0E5B               	movlw	91
  4071  002C06  6E08               	movwf	?_readEEPROM,c
  4072  002C08  ECDE  F020         	call	_readEEPROM	;wreg free
  4073  002C0C  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4074  002C0E  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4075  002C10  500C               	movf	??_doActionPulse,w,c
  4076  002C12  240D               	addwf	??_doActionPulse+1,w,c
  4077  002C14  0100               	movlb	0	; () banked
  4078  002C16  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  4079  002C18  0E00               	movlw	0
  4080  002C1A  200E               	addwfc	??_doActionPulse+2,w,c
  4081  002C1C  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  4082                           
  4083                           ;main.c: 1934: break;
  4084  002C1E  D058               	goto	l8645
  4085  002C20                     l493:
  4086                           
  4087                           ;main.c: 1937: LATCbits.LATC6 = 0;
  4088  002C20  9C8B               	bcf	3979,6,c	;volatile
  4089                           
  4090                           ;main.c: 1938: relay_pulse_flags |= 0x10;
  4091  002C22  0100               	movlb	0	; () banked
  4092  002C24  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;main.c: 1939: relay_pulse_timer[ 4 ] =
  4096                           ;main.c: 1940: readEEPROM( 0x43 + 26 ) * 256 +
  4097                           ;main.c: 1941: readEEPROM( 0x43 + 27 );
  4098  002C26  6A09               	clrf	?_readEEPROM+1,c
  4099  002C28  0E5E               	movlw	94
  4100  002C2A  6E08               	movwf	?_readEEPROM,c
  4101  002C2C  ECDE  F020         	call	_readEEPROM	;wreg free
  4102  002C30  6E0C               	movwf	??_doActionPulse& (0+255),c
  4103  002C32  6A09               	clrf	?_readEEPROM+1,c
  4104  002C34  0E5D               	movlw	93
  4105  002C36  6E08               	movwf	?_readEEPROM,c
  4106  002C38  ECDE  F020         	call	_readEEPROM	;wreg free
  4107  002C3C  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4108  002C3E  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4109  002C40  500C               	movf	??_doActionPulse,w,c
  4110  002C42  240D               	addwf	??_doActionPulse+1,w,c
  4111  002C44  0100               	movlb	0	; () banked
  4112  002C46  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  4113  002C48  0E00               	movlw	0
  4114  002C4A  200E               	addwfc	??_doActionPulse+2,w,c
  4115  002C4C  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  4116                           
  4117                           ;main.c: 1942: break;
  4118  002C4E  D040               	goto	l8645
  4119  002C50                     l494:
  4120                           
  4121                           ;main.c: 1945: LATCbits.LATC5 = 0;
  4122  002C50  9A8B               	bcf	3979,5,c	;volatile
  4123                           
  4124                           ;main.c: 1946: relay_pulse_flags |= 0x20;
  4125  002C52  0100               	movlb	0	; () banked
  4126  002C54  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;main.c: 1947: relay_pulse_timer[ 5 ] =
  4130                           ;main.c: 1948: readEEPROM( 0x43 + 28 ) * 256 +
  4131                           ;main.c: 1949: readEEPROM( 0x43 + 29 );
  4132  002C56  6A09               	clrf	?_readEEPROM+1,c
  4133  002C58  0E60               	movlw	96
  4134  002C5A  6E08               	movwf	?_readEEPROM,c
  4135  002C5C  ECDE  F020         	call	_readEEPROM	;wreg free
  4136  002C60  6E0C               	movwf	??_doActionPulse& (0+255),c
  4137  002C62  6A09               	clrf	?_readEEPROM+1,c
  4138  002C64  0E5F               	movlw	95
  4139  002C66  6E08               	movwf	?_readEEPROM,c
  4140  002C68  ECDE  F020         	call	_readEEPROM	;wreg free
  4141  002C6C  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4142  002C6E  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4143  002C70  500C               	movf	??_doActionPulse,w,c
  4144  002C72  240D               	addwf	??_doActionPulse+1,w,c
  4145  002C74  0100               	movlb	0	; () banked
  4146  002C76  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  4147  002C78  0E00               	movlw	0
  4148  002C7A  200E               	addwfc	??_doActionPulse+2,w,c
  4149  002C7C  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  4150                           
  4151                           ;main.c: 1950: break;
  4152  002C7E  D028               	goto	l8645
  4153  002C80                     l495:
  4154                           
  4155                           ;main.c: 1953: LATCbits.LATC4 = 0;
  4156  002C80  988B               	bcf	3979,4,c	;volatile
  4157                           
  4158                           ;main.c: 1954: relay_pulse_flags |= 0x40;
  4159  002C82  0100               	movlb	0	; () banked
  4160  002C84  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;main.c: 1955: relay_pulse_timer[ 6 ] =
  4164                           ;main.c: 1956: readEEPROM( 0x43 + 30 ) * 256 +
  4165                           ;main.c: 1957: readEEPROM( 0x43 + 31 );
  4166  002C86  6A09               	clrf	?_readEEPROM+1,c
  4167  002C88  0E62               	movlw	98
  4168  002C8A  6E08               	movwf	?_readEEPROM,c
  4169  002C8C  ECDE  F020         	call	_readEEPROM	;wreg free
  4170  002C90  6E0C               	movwf	??_doActionPulse& (0+255),c
  4171  002C92  6A09               	clrf	?_readEEPROM+1,c
  4172  002C94  0E61               	movlw	97
  4173  002C96  6E08               	movwf	?_readEEPROM,c
  4174  002C98  ECDE  F020         	call	_readEEPROM	;wreg free
  4175  002C9C  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4176  002C9E  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4177  002CA0  500C               	movf	??_doActionPulse,w,c
  4178  002CA2  240D               	addwf	??_doActionPulse+1,w,c
  4179  002CA4  0100               	movlb	0	; () banked
  4180  002CA6  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  4181  002CA8  0E00               	movlw	0
  4182  002CAA  200E               	addwfc	??_doActionPulse+2,w,c
  4183  002CAC  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  4184                           
  4185                           ;main.c: 1958: break;
  4186  002CAE  D010               	goto	l8645
  4187  002CB0                     l8643:
  4188  002CB0  5011               	movf	doActionPulse@i,w,c
  4189                           
  4190                           ; Switch size 1, requested type "speed"
  4191                           ; Number of cases is 7, Range of values is 0 to 6
  4192                           ; switch strategies available:
  4193                           ; Name         Instructions Cycles
  4194                           ; simple_byte           22    12 (average)
  4195                           ;	Chosen strategy is simple_byte
  4196  002CB2  E101 D755          	bz	l488
  4197  002CB6  0A01               	xorlw	1	; case 1
  4198  002CB8  E101 D76A          	bz	l490
  4199  002CBC  0A03               	xorlw	3	; case 2
  4200  002CBE  E080               	bz	l491
  4201  002CC0  0A01               	xorlw	1	; case 3
  4202  002CC2  E096               	bz	l492
  4203  002CC4  0A07               	xorlw	7	; case 4
  4204  002CC6  E0AC               	bz	l493
  4205  002CC8  0A01               	xorlw	1	; case 5
  4206  002CCA  E0C2               	bz	l494
  4207  002CCC  0A03               	xorlw	3	; case 6
  4208  002CCE  E0D8               	bz	l495
  4209  002CD0                     l8645:
  4210  002CD0  2A11               	incf	doActionPulse@i,f,c
  4211  002CD2  0E07               	movlw	7
  4212  002CD4  6411               	cpfsgt	doActionPulse@i,c
  4213  002CD6  D71C               	goto	l8599
  4214  002CD8  0C07               	retlw	7
  4215  002CDA                     __end_of_doActionPulse:
  4216                           	opt stack 0
  4217                           tblptru	equ	0xFF8
  4218                           prodh	equ	0xFF4
  4219                           prodl	equ	0xFF3
  4220                           postinc0	equ	0xFEE
  4221                           wreg	equ	0xFE8
  4222                           postinc2	equ	0xFDE
  4223                           postdec2	equ	0xFDD
  4224                           fsr2h	equ	0xFDA
  4225                           fsr2l	equ	0xFD9
  4226                           status	equ	0xFD8
  4227                           
  4228 ;; *************** function _doActionOn *****************
  4229 ;; Defined at:
  4230 ;;		line 1690 in file "../main.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;  dmflags         1    wreg     unsigned char 
  4233 ;;  arg             1   80[COMRAM] unsigned char 
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;  dmflags         1   25[BANK0 ] unsigned char 
  4236 ;;  i               1   27[BANK0 ] unsigned char 
  4237 ;;  val             1   26[BANK0 ] unsigned char 
  4238 ;; Return value:  Size  Location     Type
  4239 ;;		None               void
  4240 ;; Registers used:
  4241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4242 ;; Tracked objects:
  4243 ;;		On entry : F/0
  4244 ;;		On exit  : F/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4247 ;;      Params:         1       0       0       0       0       0       0
  4248 ;;      Locals:         0       3       0       0       0       0       0
  4249 ;;      Temps:          0       3       0       0       0       0       0
  4250 ;;      Totals:         1       6       0       0       0       0       0
  4251 ;;Total ram usage:        7 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    7
  4254 ;; This function calls:
  4255 ;;		_readEEPROM
  4256 ;;		_SendInformationEvent
  4257 ;; This function is called by:
  4258 ;;		_doDM
  4259 ;; This function uses a non-reentrant model
  4260 ;;
  4261                           
  4262                           	psect	text13
  4263  002692                     __ptext13:
  4264                           	opt stack 0
  4265  002692                     _doActionOn:
  4266                           	opt stack 22
  4267                           
  4268                           ;incstack = 0
  4269                           ;incstack = 0
  4270                           ;doActionOn@dmflags stored from wreg
  4271  002692  CFE8 F0CA          	movff	wreg,doActionOn@dmflags
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;main.c: 1692: unsigned char i;
  4275                           ;main.c: 1693: unsigned char val;
  4276                           ;main.c: 1695: for (i = 0; i < 8; i++) {
  4277  002696  6BCC               	clrf	doActionOn@i& (0+255),b
  4278  002698                     l10247:
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;main.c: 1698: if ( !( arg & ( 1 << i ) ) ) continue;
  4282  002698  C0CC  F0C7         	movff	doActionOn@i,??_doActionOn
  4283  00269C  0E01               	movlw	1
  4284  00269E  6FC8               	movwf	(??_doActionOn+1)& (0+255),b
  4285  0026A0  2BC7               	incf	??_doActionOn& (0+255),f,b
  4286  0026A2  D002               	goto	u12854
  4287  0026A4                     u12855:
  4288  0026A4  90D8               	bcf	status,0,c
  4289  0026A6  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4290  0026A8                     u12854:
  4291  0026A8  2FC7               	decfsz	??_doActionOn& (0+255),f,b
  4292  0026AA  D7FC               	goto	u12855
  4293  0026AC  51C8               	movf	(??_doActionOn+1)& (0+255),w,b
  4294  0026AE  1451               	andwf	doActionOn@arg,w,c
  4295  0026B0  E101 D11F          	bz	l10299
  4296                           
  4297                           ; BSR set to: 0
  4298                           ;main.c: 1701: if ( dmflags & 0x08 ) {
  4299  0026B4  A7CA               	btfss	doActionOn@dmflags& (0+255),3,b
  4300  0026B6  D00C               	goto	l10255
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;main.c: 1702: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  4304                           ;main.c: 1703: 53 +
  4305                           ;main.c: 1704: i ) ) {
  4306  0026B8  0E78               	movlw	120
  4307  0026BA  25CC               	addwf	doActionOn@i& (0+255),w,b
  4308  0026BC  6E08               	movwf	?_readEEPROM,c
  4309  0026BE  6A09               	clrf	?_readEEPROM+1,c
  4310  0026C0  0E00               	movlw	0
  4311  0026C2  2209               	addwfc	?_readEEPROM+1,f,c
  4312  0026C4  ECDE  F020         	call	_readEEPROM	;wreg free
  4313  0026C8  0100               	movlb	0	; () banked
  4314  0026CA  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4315  0026CC  E001 D111          	bnz	l10299
  4316  0026D0                     l10255:
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;main.c: 1706: }
  4320                           ;main.c: 1707: }
  4321                           ;main.c: 1709: val = readEEPROM( 0x43 + 10 + i );
  4322  0026D0  0E4D               	movlw	77
  4323  0026D2  25CC               	addwf	doActionOn@i& (0+255),w,b
  4324  0026D4  6E08               	movwf	?_readEEPROM,c
  4325  0026D6  6A09               	clrf	?_readEEPROM+1,c
  4326  0026D8  0E00               	movlw	0
  4327  0026DA  2209               	addwfc	?_readEEPROM+1,f,c
  4328  0026DC  ECDE  F020         	call	_readEEPROM	;wreg free
  4329  0026E0  0100               	movlb	0	; () banked
  4330  0026E2  6FCB               	movwf	doActionOn@val& (0+255),b
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;main.c: 1712: if ( !( val & 0x80 ) ) continue;
  4334  0026E4  AFCB               	btfss	doActionOn@val& (0+255),7,b
  4335  0026E6  D105               	goto	l10299
  4336  0026E8  D0E0               	goto	l10291
  4337  0026EA                     l439:
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;main.c: 1717: LATBbits.LATB4 = 1;
  4341  0026EA  888A               	bsf	3978,4,c	;volatile
  4342                           
  4343                           ; BSR set to: 0
  4344                           ;main.c: 1719: if (readEEPROM( 0x43 + 10 ) & 0x04 ) {
  4345  0026EC  6A09               	clrf	?_readEEPROM+1,c
  4346  0026EE  0E4D               	movlw	77
  4347  0026F0  6E08               	movwf	?_readEEPROM,c
  4348  0026F2  ECDE  F020         	call	_readEEPROM	;wreg free
  4349  0026F6  0100               	movlb	0	; () banked
  4350  0026F8  6FC7               	movwf	??_doActionOn& (0+255),b
  4351  0026FA  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4352  0026FC  D0E8               	goto	l441
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;main.c: 1720: relay_protection_timer[ 0 ] =
  4356                           ;main.c: 1721: readEEPROM( 0x43 + 34 ) * 256 +
  4357                           ;main.c: 1722: readEEPROM( 0x43 + 35 );
  4358  0026FE  6A09               	clrf	?_readEEPROM+1,c
  4359  002700  0E66               	movlw	102
  4360  002702  6E08               	movwf	?_readEEPROM,c
  4361  002704  ECDE  F020         	call	_readEEPROM	;wreg free
  4362  002708  0100               	movlb	0	; () banked
  4363  00270A  6FC7               	movwf	??_doActionOn& (0+255),b
  4364  00270C  6A09               	clrf	?_readEEPROM+1,c
  4365  00270E  0E65               	movlw	101
  4366  002710  6E08               	movwf	?_readEEPROM,c
  4367  002712  ECDE  F020         	call	_readEEPROM	;wreg free
  4368  002716  0100               	movlb	0	; () banked
  4369  002718  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4370  00271A  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4371  00271C  51C7               	movf	??_doActionOn& (0+255),w,b
  4372  00271E  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4373  002720  6F60               	movwf	_relay_protection_timer& (0+255),b
  4374  002722  0E00               	movlw	0
  4375  002724  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4376  002726  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  4377  002728  D0D2               	goto	l441
  4378  00272A                     l442:
  4379                           
  4380                           ; BSR set to: 0
  4381                           ;main.c: 1727: LATBbits.LATB1 = 1;
  4382  00272A  828A               	bsf	3978,1,c	;volatile
  4383                           
  4384                           ; BSR set to: 0
  4385                           ;main.c: 1729: if (readEEPROM( 0x43 + 11) & 0x04 ) {
  4386  00272C  6A09               	clrf	?_readEEPROM+1,c
  4387  00272E  0E4E               	movlw	78
  4388  002730  6E08               	movwf	?_readEEPROM,c
  4389  002732  ECDE  F020         	call	_readEEPROM	;wreg free
  4390  002736  0100               	movlb	0	; () banked
  4391  002738  6FC7               	movwf	??_doActionOn& (0+255),b
  4392  00273A  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4393  00273C  D0C8               	goto	l441
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;main.c: 1730: relay_protection_timer[ 1 ] =
  4397                           ;main.c: 1731: readEEPROM( 0x43 + 36 ) * 256 +
  4398                           ;main.c: 1732: readEEPROM( 0x43 + 37 );
  4399  00273E  6A09               	clrf	?_readEEPROM+1,c
  4400  002740  0E68               	movlw	104
  4401  002742  6E08               	movwf	?_readEEPROM,c
  4402  002744  ECDE  F020         	call	_readEEPROM	;wreg free
  4403  002748  0100               	movlb	0	; () banked
  4404  00274A  6FC7               	movwf	??_doActionOn& (0+255),b
  4405  00274C  6A09               	clrf	?_readEEPROM+1,c
  4406  00274E  0E67               	movlw	103
  4407  002750  6E08               	movwf	?_readEEPROM,c
  4408  002752  ECDE  F020         	call	_readEEPROM	;wreg free
  4409  002756  0100               	movlb	0	; () banked
  4410  002758  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4411  00275A  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4412  00275C  51C7               	movf	??_doActionOn& (0+255),w,b
  4413  00275E  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4414  002760  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  4415  002762  0E00               	movlw	0
  4416  002764  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4417  002766  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  4418  002768  D0B2               	goto	l441
  4419  00276A                     l444:
  4420                           
  4421                           ; BSR set to: 0
  4422                           ;main.c: 1737: LATBbits.LATB0 = 1;
  4423  00276A  808A               	bsf	3978,0,c	;volatile
  4424                           
  4425                           ; BSR set to: 0
  4426                           ;main.c: 1739: if (readEEPROM( 0x43 + 12) & 0x04 ) {
  4427  00276C  6A09               	clrf	?_readEEPROM+1,c
  4428  00276E  0E4F               	movlw	79
  4429  002770  6E08               	movwf	?_readEEPROM,c
  4430  002772  ECDE  F020         	call	_readEEPROM	;wreg free
  4431  002776  0100               	movlb	0	; () banked
  4432  002778  6FC7               	movwf	??_doActionOn& (0+255),b
  4433  00277A  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4434  00277C  D0A8               	goto	l441
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;main.c: 1740: relay_protection_timer[ 2 ] =
  4438                           ;main.c: 1741: readEEPROM( 0x43 + 38 ) * 256 +
  4439                           ;main.c: 1742: readEEPROM( 0x43 + 39 );
  4440  00277E  6A09               	clrf	?_readEEPROM+1,c
  4441  002780  0E6A               	movlw	106
  4442  002782  6E08               	movwf	?_readEEPROM,c
  4443  002784  ECDE  F020         	call	_readEEPROM	;wreg free
  4444  002788  0100               	movlb	0	; () banked
  4445  00278A  6FC7               	movwf	??_doActionOn& (0+255),b
  4446  00278C  6A09               	clrf	?_readEEPROM+1,c
  4447  00278E  0E69               	movlw	105
  4448  002790  6E08               	movwf	?_readEEPROM,c
  4449  002792  ECDE  F020         	call	_readEEPROM	;wreg free
  4450  002796  0100               	movlb	0	; () banked
  4451  002798  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4452  00279A  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4453  00279C  51C7               	movf	??_doActionOn& (0+255),w,b
  4454  00279E  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4455  0027A0  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  4456  0027A2  0E00               	movlw	0
  4457  0027A4  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4458  0027A6  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  4459  0027A8  D092               	goto	l441
  4460  0027AA                     l446:
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;main.c: 1747: LATCbits.LATC7 = 1;
  4464  0027AA  8E8B               	bsf	3979,7,c	;volatile
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;main.c: 1749: if ( readEEPROM( 0x43 + 13) & 0x04 ) {
  4468  0027AC  6A09               	clrf	?_readEEPROM+1,c
  4469  0027AE  0E50               	movlw	80
  4470  0027B0  6E08               	movwf	?_readEEPROM,c
  4471  0027B2  ECDE  F020         	call	_readEEPROM	;wreg free
  4472  0027B6  0100               	movlb	0	; () banked
  4473  0027B8  6FC7               	movwf	??_doActionOn& (0+255),b
  4474  0027BA  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4475  0027BC  D088               	goto	l441
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;main.c: 1750: relay_protection_timer[ 3 ] =
  4479                           ;main.c: 1751: readEEPROM( 0x43 + 40 ) * 256 +
  4480                           ;main.c: 1752: readEEPROM( 0x43 + 41 );
  4481  0027BE  6A09               	clrf	?_readEEPROM+1,c
  4482  0027C0  0E6C               	movlw	108
  4483  0027C2  6E08               	movwf	?_readEEPROM,c
  4484  0027C4  ECDE  F020         	call	_readEEPROM	;wreg free
  4485  0027C8  0100               	movlb	0	; () banked
  4486  0027CA  6FC7               	movwf	??_doActionOn& (0+255),b
  4487  0027CC  6A09               	clrf	?_readEEPROM+1,c
  4488  0027CE  0E6B               	movlw	107
  4489  0027D0  6E08               	movwf	?_readEEPROM,c
  4490  0027D2  ECDE  F020         	call	_readEEPROM	;wreg free
  4491  0027D6  0100               	movlb	0	; () banked
  4492  0027D8  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4493  0027DA  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4494  0027DC  51C7               	movf	??_doActionOn& (0+255),w,b
  4495  0027DE  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4496  0027E0  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  4497  0027E2  0E00               	movlw	0
  4498  0027E4  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4499  0027E6  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  4500  0027E8  D072               	goto	l441
  4501  0027EA                     l448:
  4502                           
  4503                           ; BSR set to: 0
  4504                           ;main.c: 1757: LATCbits.LATC6 = 1;
  4505  0027EA  8C8B               	bsf	3979,6,c	;volatile
  4506                           
  4507                           ; BSR set to: 0
  4508                           ;main.c: 1759: if (readEEPROM( 0x43 + 14) & 0x04 ) {
  4509  0027EC  6A09               	clrf	?_readEEPROM+1,c
  4510  0027EE  0E51               	movlw	81
  4511  0027F0  6E08               	movwf	?_readEEPROM,c
  4512  0027F2  ECDE  F020         	call	_readEEPROM	;wreg free
  4513  0027F6  0100               	movlb	0	; () banked
  4514  0027F8  6FC7               	movwf	??_doActionOn& (0+255),b
  4515  0027FA  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4516  0027FC  D068               	goto	l441
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;main.c: 1760: relay_protection_timer[ 4 ] =
  4520                           ;main.c: 1761: readEEPROM( 0x43 + 42 ) * 256 +
  4521                           ;main.c: 1762: readEEPROM( 0x43 + 43 );
  4522  0027FE  6A09               	clrf	?_readEEPROM+1,c
  4523  002800  0E6E               	movlw	110
  4524  002802  6E08               	movwf	?_readEEPROM,c
  4525  002804  ECDE  F020         	call	_readEEPROM	;wreg free
  4526  002808  0100               	movlb	0	; () banked
  4527  00280A  6FC7               	movwf	??_doActionOn& (0+255),b
  4528  00280C  6A09               	clrf	?_readEEPROM+1,c
  4529  00280E  0E6D               	movlw	109
  4530  002810  6E08               	movwf	?_readEEPROM,c
  4531  002812  ECDE  F020         	call	_readEEPROM	;wreg free
  4532  002816  0100               	movlb	0	; () banked
  4533  002818  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4534  00281A  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4535  00281C  51C7               	movf	??_doActionOn& (0+255),w,b
  4536  00281E  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4537  002820  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  4538  002822  0E00               	movlw	0
  4539  002824  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4540  002826  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  4541  002828  D052               	goto	l441
  4542  00282A                     l450:
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;main.c: 1767: LATCbits.LATC5 = 1;
  4546  00282A  8A8B               	bsf	3979,5,c	;volatile
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;main.c: 1769: if (readEEPROM( 0x43 + 15) & 0x04) {
  4550  00282C  6A09               	clrf	?_readEEPROM+1,c
  4551  00282E  0E52               	movlw	82
  4552  002830  6E08               	movwf	?_readEEPROM,c
  4553  002832  ECDE  F020         	call	_readEEPROM	;wreg free
  4554  002836  0100               	movlb	0	; () banked
  4555  002838  6FC7               	movwf	??_doActionOn& (0+255),b
  4556  00283A  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4557  00283C  D048               	goto	l441
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;main.c: 1770: relay_protection_timer[ 5 ] =
  4561                           ;main.c: 1771: readEEPROM( 0x43 + 44 ) * 256 +
  4562                           ;main.c: 1772: readEEPROM( 0x43 + 45 );
  4563  00283E  6A09               	clrf	?_readEEPROM+1,c
  4564  002840  0E70               	movlw	112
  4565  002842  6E08               	movwf	?_readEEPROM,c
  4566  002844  ECDE  F020         	call	_readEEPROM	;wreg free
  4567  002848  0100               	movlb	0	; () banked
  4568  00284A  6FC7               	movwf	??_doActionOn& (0+255),b
  4569  00284C  6A09               	clrf	?_readEEPROM+1,c
  4570  00284E  0E6F               	movlw	111
  4571  002850  6E08               	movwf	?_readEEPROM,c
  4572  002852  ECDE  F020         	call	_readEEPROM	;wreg free
  4573  002856  0100               	movlb	0	; () banked
  4574  002858  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4575  00285A  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4576  00285C  51C7               	movf	??_doActionOn& (0+255),w,b
  4577  00285E  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4578  002860  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  4579  002862  0E00               	movlw	0
  4580  002864  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4581  002866  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  4582  002868  D032               	goto	l441
  4583  00286A                     l452:
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;main.c: 1777: LATCbits.LATC4 = 1;
  4587  00286A  888B               	bsf	3979,4,c	;volatile
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;main.c: 1779: if ( readEEPROM( 0x43 + 16) & 0x04) {
  4591  00286C  6A09               	clrf	?_readEEPROM+1,c
  4592  00286E  0E53               	movlw	83
  4593  002870  6E08               	movwf	?_readEEPROM,c
  4594  002872  ECDE  F020         	call	_readEEPROM	;wreg free
  4595  002876  0100               	movlb	0	; () banked
  4596  002878  6FC7               	movwf	??_doActionOn& (0+255),b
  4597  00287A  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4598  00287C  D028               	goto	l441
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;main.c: 1780: relay_protection_timer[ 6 ] =
  4602                           ;main.c: 1781: readEEPROM( 0x43 + 46 ) * 256 +
  4603                           ;main.c: 1782: readEEPROM( 0x43 + 47 );
  4604  00287E  6A09               	clrf	?_readEEPROM+1,c
  4605  002880  0E72               	movlw	114
  4606  002882  6E08               	movwf	?_readEEPROM,c
  4607  002884  ECDE  F020         	call	_readEEPROM	;wreg free
  4608  002888  0100               	movlb	0	; () banked
  4609  00288A  6FC7               	movwf	??_doActionOn& (0+255),b
  4610  00288C  6A09               	clrf	?_readEEPROM+1,c
  4611  00288E  0E71               	movlw	113
  4612  002890  6E08               	movwf	?_readEEPROM,c
  4613  002892  ECDE  F020         	call	_readEEPROM	;wreg free
  4614  002896  0100               	movlb	0	; () banked
  4615  002898  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4616  00289A  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4617  00289C  51C7               	movf	??_doActionOn& (0+255),w,b
  4618  00289E  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4619  0028A0  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  4620  0028A2  0E00               	movlw	0
  4621  0028A4  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4622  0028A6  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  4623  0028A8  D012               	goto	l441
  4624  0028AA                     l10291:
  4625                           
  4626                           ; BSR set to: 0
  4627  0028AA  51CC               	movf	doActionOn@i& (0+255),w,b
  4628                           
  4629                           ; Switch size 1, requested type "speed"
  4630                           ; Number of cases is 7, Range of values is 0 to 6
  4631                           ; switch strategies available:
  4632                           ; Name         Instructions Cycles
  4633                           ; simple_byte           22    12 (average)
  4634                           ;	Chosen strategy is simple_byte
  4635  0028AC  E101 D71D          	bz	l439
  4636  0028B0  0A01               	xorlw	1	; case 1
  4637  0028B2  E101 D73A          	bz	l442
  4638  0028B6  0A03               	xorlw	3	; case 2
  4639  0028B8  E101 D757          	bz	l444
  4640  0028BC  0A01               	xorlw	1	; case 3
  4641  0028BE  E101 D774          	bz	l446
  4642  0028C2  0A07               	xorlw	7	; case 4
  4643  0028C4  E092               	bz	l448
  4644  0028C6  0A01               	xorlw	1	; case 5
  4645  0028C8  E0B0               	bz	l450
  4646  0028CA  0A03               	xorlw	3	; case 6
  4647  0028CC  E0CE               	bz	l452
  4648  0028CE                     l441:
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;main.c: 1789: if ( val & 0x08 ) {
  4652  0028CE  A7CB               	btfss	doActionOn@val& (0+255),3,b
  4653  0028D0  D007               	goto	l10295
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;main.c: 1790: SendInformationEvent( i, 20, 3 );
  4657  0028D2  0E14               	movlw	20
  4658  0028D4  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4659  0028D6  0E03               	movlw	3
  4660  0028D8  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4661  0028DA  51CC               	movf	doActionOn@i& (0+255),w,b
  4662  0028DC  EC47  F01E         	call	_SendInformationEvent
  4663  0028E0                     l10295:
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;main.c: 1791: }
  4667                           ;main.c: 1794: if ( val & 0x20 ) {
  4668  0028E0  ABCB               	btfss	doActionOn@val& (0+255),5,b
  4669  0028E2  D007               	goto	l10299
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;main.c: 1795: SendInformationEvent( i, 20, 25 );
  4673  0028E4  0E14               	movlw	20
  4674  0028E6  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4675  0028E8  0E19               	movlw	25
  4676  0028EA  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4677  0028EC  51CC               	movf	doActionOn@i& (0+255),w,b
  4678  0028EE  EC47  F01E         	call	_SendInformationEvent
  4679  0028F2                     l10299:
  4680                           
  4681                           ; BSR set to: 0
  4682  0028F2  2BCC               	incf	doActionOn@i& (0+255),f,b
  4683                           
  4684                           ; BSR set to: 0
  4685  0028F4  0E07               	movlw	7
  4686  0028F6  65CC               	cpfsgt	doActionOn@i& (0+255),b
  4687  0028F8  D6CF               	goto	l10247
  4688                           
  4689                           ; BSR set to: 0
  4690  0028FA  0C07               	retlw	7
  4691  0028FC                     __end_of_doActionOn:
  4692                           	opt stack 0
  4693                           tblptru	equ	0xFF8
  4694                           prodh	equ	0xFF4
  4695                           prodl	equ	0xFF3
  4696                           postinc0	equ	0xFEE
  4697                           wreg	equ	0xFE8
  4698                           postinc2	equ	0xFDE
  4699                           postdec2	equ	0xFDD
  4700                           fsr2h	equ	0xFDA
  4701                           fsr2l	equ	0xFD9
  4702                           status	equ	0xFD8
  4703                           
  4704 ;; *************** function _doActionOff *****************
  4705 ;; Defined at:
  4706 ;;		line 1805 in file "../main.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  dmflags         1    wreg     unsigned char 
  4709 ;;  arg             1   80[COMRAM] unsigned char 
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;  dmflags         1   24[BANK0 ] unsigned char 
  4712 ;;  i               1   26[BANK0 ] unsigned char 
  4713 ;;  val             1   25[BANK0 ] unsigned char 
  4714 ;; Return value:  Size  Location     Type
  4715 ;;		None               void
  4716 ;; Registers used:
  4717 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4718 ;; Tracked objects:
  4719 ;;		On entry : F/0
  4720 ;;		On exit  : F/0
  4721 ;;		Unchanged: 0/0
  4722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4723 ;;      Params:         1       0       0       0       0       0       0
  4724 ;;      Locals:         0       3       0       0       0       0       0
  4725 ;;      Temps:          0       2       0       0       0       0       0
  4726 ;;      Totals:         1       5       0       0       0       0       0
  4727 ;;Total ram usage:        6 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:    7
  4730 ;; This function calls:
  4731 ;;		_readEEPROM
  4732 ;;		_SendInformationEvent
  4733 ;; This function is called by:
  4734 ;;		_doApplicationOneSecondWork
  4735 ;;		_doDM
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           	psect	text14
  4740  0037BE                     __ptext14:
  4741                           	opt stack 0
  4742  0037BE                     _doActionOff:
  4743                           	opt stack 22
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;incstack = 0
  4747                           ;incstack = 0
  4748                           ;doActionOff@dmflags stored from wreg
  4749  0037BE  CFE8 F0C9          	movff	wreg,doActionOff@dmflags
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;main.c: 1807: unsigned char i;
  4753                           ;main.c: 1808: unsigned char val;
  4754                           ;main.c: 1810: for ( i = 0; i < 8; i++ ) {
  4755  0037C2  6BCB               	clrf	doActionOff@i& (0+255),b
  4756  0037C4                     l9849:
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;main.c: 1813: if ( !( arg & ( 1 << i ) ) ) continue;
  4760  0037C4  C0CB  F0C7         	movff	doActionOff@i,??_doActionOff
  4761  0037C8  0E01               	movlw	1
  4762  0037CA  6FC8               	movwf	(??_doActionOff+1)& (0+255),b
  4763  0037CC  2BC7               	incf	??_doActionOff& (0+255),f,b
  4764  0037CE  D002               	goto	u12214
  4765  0037D0                     u12215:
  4766  0037D0  90D8               	bcf	status,0,c
  4767  0037D2  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4768  0037D4                     u12214:
  4769  0037D4  2FC7               	decfsz	??_doActionOff& (0+255),f,b
  4770  0037D6  D7FC               	goto	u12215
  4771  0037D8  51C8               	movf	(??_doActionOff+1)& (0+255),w,b
  4772  0037DA  1451               	andwf	doActionOff@arg,w,c
  4773  0037DC  E048               	bz	l9873
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;main.c: 1816: if ( dmflags & 0x08 ) {
  4777  0037DE  A7C9               	btfss	doActionOff@dmflags& (0+255),3,b
  4778  0037E0  D00B               	goto	l9857
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;main.c: 1817: if ( vscp_imsg.data[ 2 ] != readEEPROM(0x43 +
  4782                           ;main.c: 1818: 53 +
  4783                           ;main.c: 1819: i ) ) {
  4784  0037E2  0E78               	movlw	120
  4785  0037E4  25CB               	addwf	doActionOff@i& (0+255),w,b
  4786  0037E6  6E08               	movwf	?_readEEPROM,c
  4787  0037E8  6A09               	clrf	?_readEEPROM+1,c
  4788  0037EA  0E00               	movlw	0
  4789  0037EC  2209               	addwfc	?_readEEPROM+1,f,c
  4790  0037EE  ECDE  F020         	call	_readEEPROM	;wreg free
  4791  0037F2  0100               	movlb	0	; () banked
  4792  0037F4  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4793  0037F6  E13B               	bnz	l9873
  4794  0037F8                     l9857:
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;main.c: 1821: }
  4798                           ;main.c: 1822: }
  4799                           ;main.c: 1824: val = readEEPROM( 0x43 + 10 + i );
  4800  0037F8  0E4D               	movlw	77
  4801  0037FA  25CB               	addwf	doActionOff@i& (0+255),w,b
  4802  0037FC  6E08               	movwf	?_readEEPROM,c
  4803  0037FE  6A09               	clrf	?_readEEPROM+1,c
  4804  003800  0E00               	movlw	0
  4805  003802  2209               	addwfc	?_readEEPROM+1,f,c
  4806  003804  ECDE  F020         	call	_readEEPROM	;wreg free
  4807  003808  0100               	movlb	0	; () banked
  4808  00380A  6FCA               	movwf	doActionOff@val& (0+255),b
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;main.c: 1827: if ( !( val & 0x80 ) ) continue;
  4812  00380C  AFCA               	btfss	doActionOff@val& (0+255),7,b
  4813  00380E  D02F               	goto	l9873
  4814  003810  D00E               	goto	l9865
  4815  003812                     l467:
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;main.c: 1832: LATBbits.LATB4 = 0;
  4819  003812  988A               	bcf	3978,4,c	;volatile
  4820                           
  4821                           ;main.c: 1833: break;
  4822  003814  D01A               	goto	l468
  4823  003816                     l469:
  4824                           
  4825                           ; BSR set to: 0
  4826                           ;main.c: 1836: LATBbits.LATB1 = 0;
  4827  003816  928A               	bcf	3978,1,c	;volatile
  4828                           
  4829                           ;main.c: 1837: break;
  4830  003818  D018               	goto	l468
  4831  00381A                     l470:
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;main.c: 1840: LATBbits.LATB0 = 0;
  4835  00381A  908A               	bcf	3978,0,c	;volatile
  4836                           
  4837                           ;main.c: 1841: break;
  4838  00381C  D016               	goto	l468
  4839  00381E                     l471:
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;main.c: 1844: LATCbits.LATC7 = 0;
  4843  00381E  9E8B               	bcf	3979,7,c	;volatile
  4844                           
  4845                           ;main.c: 1845: break;
  4846  003820  D014               	goto	l468
  4847  003822                     l472:
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;main.c: 1848: LATCbits.LATC6 = 0;
  4851  003822  9C8B               	bcf	3979,6,c	;volatile
  4852                           
  4853                           ;main.c: 1849: break;
  4854  003824  D012               	goto	l468
  4855  003826                     l473:
  4856                           
  4857                           ; BSR set to: 0
  4858                           ;main.c: 1852: LATCbits.LATC5 = 0;
  4859  003826  9A8B               	bcf	3979,5,c	;volatile
  4860                           
  4861                           ;main.c: 1853: break;
  4862  003828  D010               	goto	l468
  4863  00382A                     l474:
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;main.c: 1856: LATCbits.LATC4 = 0;
  4867  00382A  988B               	bcf	3979,4,c	;volatile
  4868                           
  4869                           ;main.c: 1857: break;
  4870  00382C  D00E               	goto	l468
  4871  00382E                     l9865:
  4872                           
  4873                           ; BSR set to: 0
  4874  00382E  51CB               	movf	doActionOff@i& (0+255),w,b
  4875                           
  4876                           ; Switch size 1, requested type "speed"
  4877                           ; Number of cases is 7, Range of values is 0 to 6
  4878                           ; switch strategies available:
  4879                           ; Name         Instructions Cycles
  4880                           ; simple_byte           22    12 (average)
  4881                           ;	Chosen strategy is simple_byte
  4882  003830  E0F0               	bz	l467
  4883  003832  0A01               	xorlw	1	; case 1
  4884  003834  E0F0               	bz	l469
  4885  003836  0A03               	xorlw	3	; case 2
  4886  003838  E0F0               	bz	l470
  4887  00383A  0A01               	xorlw	1	; case 3
  4888  00383C  E0F0               	bz	l471
  4889  00383E  0A07               	xorlw	7	; case 4
  4890  003840  E0F0               	bz	l472
  4891  003842  0A01               	xorlw	1	; case 5
  4892  003844  E0F0               	bz	l473
  4893  003846  0A03               	xorlw	3	; case 6
  4894  003848  E0F0               	bz	l474
  4895  00384A                     l468:
  4896                           
  4897                           ; BSR set to: 0
  4898                           ;main.c: 1862: if ( val & 0x10 ) {
  4899  00384A  A9CA               	btfss	doActionOff@val& (0+255),4,b
  4900  00384C  D007               	goto	l9869
  4901                           
  4902                           ; BSR set to: 0
  4903                           ;main.c: 1863: SendInformationEvent( i, 20, 4 );
  4904  00384E  0E14               	movlw	20
  4905  003850  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4906  003852  0E04               	movlw	4
  4907  003854  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4908  003856  51CB               	movf	doActionOff@i& (0+255),w,b
  4909  003858  EC47  F01E         	call	_SendInformationEvent
  4910  00385C                     l9869:
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;main.c: 1864: }
  4914                           ;main.c: 1867: if ( val & 0x40 ) {
  4915  00385C  ADCA               	btfss	doActionOff@val& (0+255),6,b
  4916  00385E  D007               	goto	l9873
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;main.c: 1868: SendInformationEvent( i, 20, 24 );
  4920  003860  0E14               	movlw	20
  4921  003862  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4922  003864  0E18               	movlw	24
  4923  003866  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4924  003868  51CB               	movf	doActionOff@i& (0+255),w,b
  4925  00386A  EC47  F01E         	call	_SendInformationEvent
  4926  00386E                     l9873:
  4927                           
  4928                           ; BSR set to: 0
  4929  00386E  2BCB               	incf	doActionOff@i& (0+255),f,b
  4930                           
  4931                           ; BSR set to: 0
  4932  003870  0E07               	movlw	7
  4933  003872  65CB               	cpfsgt	doActionOff@i& (0+255),b
  4934  003874  D7A7               	goto	l9849
  4935                           
  4936                           ; BSR set to: 0
  4937  003876  0C07               	retlw	7
  4938  003878                     __end_of_doActionOff:
  4939                           	opt stack 0
  4940                           tblptru	equ	0xFF8
  4941                           prodh	equ	0xFF4
  4942                           prodl	equ	0xFF3
  4943                           postinc0	equ	0xFEE
  4944                           wreg	equ	0xFE8
  4945                           postinc2	equ	0xFDE
  4946                           postdec2	equ	0xFDD
  4947                           fsr2h	equ	0xFDA
  4948                           fsr2l	equ	0xFD9
  4949                           status	equ	0xFD8
  4950                           
  4951 ;; *************** function _vscp_handleProtocolEvent *****************
  4952 ;; Defined at:
  4953 ;;		line 786 in file "../../vscp_firmware/common/vscp_firmware.c"
  4954 ;; Parameters:    Size  Location     Type
  4955 ;;		None
  4956 ;; Auto vars:     Size  Location     Type
  4957 ;;  bytes           1   45[BANK0 ] unsigned char 
  4958 ;;  page_save       2   41[BANK0 ] unsigned short 
  4959 ;;  i               1   51[BANK0 ] unsigned char 
  4960 ;;  page_save       2   39[BANK0 ] unsigned short 
  4961 ;;  byte            1   55[BANK0 ] unsigned char 
  4962 ;;  bytes           1   53[BANK0 ] unsigned char 
  4963 ;;  cb              1   50[BANK0 ] unsigned char 
  4964 ;;  bytes_this_t    1   49[BANK0 ] unsigned char 
  4965 ;;  j               1   58[BANK0 ] unsigned char 
  4966 ;;  i               1   56[BANK0 ] unsigned char 
  4967 ;;  k               1   52[BANK0 ] unsigned char 
  4968 ;;  i               1   54[BANK0 ] unsigned char 
  4969 ;;  len             1   48[BANK0 ] unsigned char 
  4970 ;;  pos             1   47[BANK0 ] unsigned char 
  4971 ;;  i               1   57[BANK0 ] unsigned char 
  4972 ;;  len             1   46[BANK0 ] unsigned char 
  4973 ;;  pos             1   44[BANK0 ] unsigned char 
  4974 ;;  offset          1   43[BANK0 ] unsigned char 
  4975 ;; Return value:  Size  Location     Type
  4976 ;;		None               void
  4977 ;; Registers used:
  4978 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4979 ;; Tracked objects:
  4980 ;;		On entry : F/0
  4981 ;;		On exit  : 0/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4984 ;;      Params:         0       0       0       0       0       0       0
  4985 ;;      Locals:         0      20       0       0       0       0       0
  4986 ;;      Temps:          0       7       0       0       0       0       0
  4987 ;;      Totals:         0      27       0       0       0       0       0
  4988 ;;Total ram usage:       27 bytes
  4989 ;; Hardware stack levels used:    1
  4990 ;; Hardware stack levels required when called:    9
  4991 ;; This function calls:
  4992 ;;		_vscp_init
  4993 ;;		_vscp_readAppReg
  4994 ;;		_vscp_writeAppReg
  4995 ;;		_vscp_sendEvent
  4996 ;;		_vscp_getGUID
  4997 ;;		_vscp_getMDF_URL
  4998 ;;		_vscp_goBootloaderMode
  4999 ;;		_vscp_getMatrixInfo
  5000 ;;		_vscp_handleHeartbeat
  5001 ;;		_vscp_handleSetNickname
  5002 ;;		_vscp_handleDropNickname
  5003 ;;		_vscp_newNodeOnline
  5004 ;;		_vscp_readRegister
  5005 ;;		_vscp_readStdReg
  5006 ;;		_vscp_writeRegister
  5007 ;;		_vscp_writeStdReg
  5008 ;;		___lbmod
  5009 ;; This function is called by:
  5010 ;;		_main
  5011 ;; This function uses a non-reentrant model
  5012 ;;
  5013                           
  5014                           	psect	text15
  5015  00128A                     __ptext15:
  5016                           	opt stack 0
  5017  00128A                     _vscp_handleProtocolEvent:
  5018                           	opt stack 21
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;vscp_firmware.c: 788: if (0 == vscp_imsg.vscp_class) {
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;incstack = 0
  5025                           ;incstack = 0
  5026  00128A  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  5027  00128C  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  5028  00128E  E101 D2D8          	bz	l9677
  5029  001292  D308               	goto	l1271
  5030  001294                     l9265:
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;vscp_firmware.c: 795: vscp_handleHeartbeat();
  5034  001294  ECE6  F01E         	call	_vscp_handleHeartbeat	;wreg free
  5035                           
  5036                           ;vscp_firmware.c: 796: break;
  5037  001298  D305               	goto	l1271
  5038  00129A                     l9267:
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;vscp_firmware.c: 800: vscp_newNodeOnline();
  5042  00129A  EC52  F01F         	call	_vscp_newNodeOnline	;wreg free
  5043                           
  5044                           ;vscp_firmware.c: 801: break;
  5045  00129E  D302               	goto	l1271
  5046  0012A0                     l9269:
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;vscp_firmware.c: 805: vscp_handleSetNickname();
  5050  0012A0  ECC9  F01F         	call	_vscp_handleSetNickname	;wreg free
  5051                           
  5052                           ;vscp_firmware.c: 806: break;
  5053  0012A4  D2FF               	goto	l1271
  5054  0012A6                     l9271:
  5055                           
  5056                           ; BSR set to: 0
  5057                           ;vscp_firmware.c: 810: vscp_handleDropNickname();
  5058  0012A6  EC24  F01F         	call	_vscp_handleDropNickname	;wreg free
  5059                           
  5060                           ;vscp_firmware.c: 811: break;
  5061  0012AA  D2FC               	goto	l1271
  5062  0012AC                     l9273:
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;vscp_firmware.c: 815: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  5066                           ;vscp_firmware.c: 816: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5067  0012AC  5196               	movf	_vscp_imsg& (0+255),w,b
  5068  0012AE  0B0F               	andlw	15
  5069  0012B0  0A02               	xorlw	2
  5070  0012B2  E001 D2F7          	bnz	l1271
  5071                           
  5072                           ; BSR set to: 0
  5073  0012B6  5191               	movf	_vscp_nickname& (0+255),w,b
  5074  0012B8  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5075  0012BC  62DF               	cpfseq	indf2,c
  5076  0012BE  D2F2               	goto	l1271
  5077                           
  5078                           ; BSR set to: 0
  5079                           ;vscp_firmware.c: 818: if (vscp_imsg.data[ 1 ] < 0x80) {
  5080  0012C0  0E80               	movlw	128
  5081  0012C2  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5082  0012C4  D012               	goto	l9293
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;vscp_firmware.c: 821: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  5086  0012C6  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5087  0012C8  ECF4  F01C         	call	_vscp_readAppReg
  5088  0012CC                     L13:
  5089  0012CC  0100               	movlb	0	; () banked
  5090  0012CE                     L14:
  5091  0012CE  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;vscp_firmware.c: 824: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  5095  0012D0  C09D  F0A9         	movff	_vscp_imsg+7,_vscp_omsg+5
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;vscp_firmware.c: 826: vscp_omsg.priority = 0x03;
  5099  0012D4  0E03               	movlw	3
  5100  0012D6  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;vscp_firmware.c: 827: vscp_omsg.flags = 0x80 + 2;
  5104  0012D8  0E82               	movlw	130
  5105  0012DA  6FA4               	movwf	_vscp_omsg& (0+255),b
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;vscp_firmware.c: 828: vscp_omsg.vscp_class = 0;
  5109  0012DC  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5110  0012DE  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;vscp_firmware.c: 829: vscp_omsg.vscp_type = 10;
  5114  0012E0  0E0A               	movlw	10
  5115  0012E2  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5116  0012E4                     l9291:
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;vscp_firmware.c: 832: vscp_sendEvent();
  5120  0012E4  ECA3  F01F         	call	_vscp_sendEvent	;wreg free
  5121                           
  5122                           ;vscp_firmware.c: 833: } else {
  5123  0012E8  D2DD               	goto	l1271
  5124  0012EA                     l9293:
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;vscp_firmware.c: 836: vscp_omsg.data[ 1 ] =
  5128                           ;vscp_firmware.c: 837: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  5129  0012EA  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5130  0012EC  ECFD  F01A         	call	_vscp_readStdReg
  5131  0012F0  D7ED               	goto	L13
  5132  0012F2                     l9307:
  5133                           
  5134                           ; BSR set to: 0
  5135                           ;vscp_firmware.c: 855: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  5136                           ;vscp_firmware.c: 856: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5137  0012F2  5196               	movf	_vscp_imsg& (0+255),w,b
  5138  0012F4  0B0F               	andlw	15
  5139  0012F6  0A03               	xorlw	3
  5140  0012F8  E001 D2D4          	bnz	l1271
  5141                           
  5142                           ; BSR set to: 0
  5143  0012FC  5191               	movf	_vscp_nickname& (0+255),w,b
  5144  0012FE  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5145  001302  62DF               	cpfseq	indf2,c
  5146  001304  D2CF               	goto	l1271
  5147                           
  5148                           ; BSR set to: 0
  5149                           ;vscp_firmware.c: 858: if (vscp_imsg.data[ 1 ] < 0x80) {
  5150  001306  0E80               	movlw	128
  5151  001308  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5152  00130A  D006               	goto	l9327
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;vscp_firmware.c: 861: vscp_omsg.data[ 1 ] =
  5156                           ;vscp_firmware.c: 862: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5157  00130C  C09E  F051         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  5158  001310  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5159  001312  EC6E  F004         	call	_vscp_writeAppReg
  5160  001316  D7DB               	goto	L14
  5161  001318                     l9327:
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;vscp_firmware.c: 878: vscp_omsg.data[ 1 ] =
  5165                           ;vscp_firmware.c: 879: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5166  001318  C09E  F00F         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  5167  00131C  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5168  00131E  EC6D  F016         	call	_vscp_writeStdReg
  5169  001322  D7D4               	goto	L13
  5170  001324                     l9341:
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;vscp_firmware.c: 897: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  5174                           ;vscp_firmware.c: 899: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  5175                           ;vscp_firmware.c: 900: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  5176                           ;vscp_firmware.c: 901: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  5177                           ;vscp_firmware.c: 902: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  5178                           ;vscp_firmware.c: 903: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  5179                           ;vscp_firmware.c: 904: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  5180  001324  5191               	movf	_vscp_nickname& (0+255),w,b
  5181  001326  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5182  00132A  62DF               	cpfseq	indf2,c
  5183  00132C  D2BB               	goto	l1271
  5184                           
  5185                           ; BSR set to: 0
  5186  00132E  0E00               	movlw	0
  5187  001330  ECB0  F020         	call	_vscp_getGUID
  5188  001334  0100               	movlb	0	; () banked
  5189  001336  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5190  001338  E001 D2B4          	bnz	l1271
  5191                           
  5192                           ; BSR set to: 0
  5193  00133C  0E03               	movlw	3
  5194  00133E  ECB0  F020         	call	_vscp_getGUID
  5195  001342  0100               	movlb	0	; () banked
  5196  001344  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5197  001346  E001 D2AD          	bnz	l1271
  5198                           
  5199                           ; BSR set to: 0
  5200  00134A  0E05               	movlw	5
  5201  00134C  ECB0  F020         	call	_vscp_getGUID
  5202  001350  0100               	movlb	0	; () banked
  5203  001352  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5204  001354  E001 D2A6          	bnz	l1271
  5205                           
  5206                           ; BSR set to: 0
  5207  001358  0E07               	movlw	7
  5208  00135A  ECB0  F020         	call	_vscp_getGUID
  5209  00135E  0100               	movlb	0	; () banked
  5210  001360  19A1               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  5211  001362  E001 D29F          	bnz	l1271
  5212                           
  5213                           ; BSR set to: 0
  5214  001366  5053               	movf	_vscp_page_select+1,w,c
  5215  001368  19A2               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  5216  00136A  E001 D29B          	bnz	l1271
  5217                           
  5218                           ; BSR set to: 0
  5219  00136E  5052               	movf	_vscp_page_select,w,c
  5220  001370  EE20  F0A3         	lfsr	2,_vscp_imsg+13
  5221  001374  62DF               	cpfseq	indf2,c
  5222  001376  D296               	goto	l1271
  5223                           
  5224                           ; BSR set to: 0
  5225                           ;vscp_firmware.c: 906: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  5226  001378  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5227  00137A  EC84  F020         	call	_vscp_goBootloaderMode
  5228  00137E  D292               	goto	l1271
  5229  001380                     l9357:
  5230                           
  5231                           ; BSR set to: 0
  5232                           ;vscp_firmware.c: 915: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  5233                           ;vscp_firmware.c: 916: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  5234                           ;vscp_firmware.c: 917: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  5235                           ;vscp_firmware.c: 918: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  5236  001380  0E00               	movlw	0
  5237  001382  ECB0  F020         	call	_vscp_getGUID
  5238  001386  0100               	movlb	0	; () banked
  5239  001388  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5240  00138A  E173               	bnz	l9401
  5241                           
  5242                           ; BSR set to: 0
  5243  00138C  0E01               	movlw	1
  5244  00138E  ECB0  F020         	call	_vscp_getGUID
  5245  001392  0100               	movlb	0	; () banked
  5246  001394  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5247  001396  E16D               	bnz	l9401
  5248                           
  5249                           ; BSR set to: 0
  5250  001398  0E02               	movlw	2
  5251  00139A  ECB0  F020         	call	_vscp_getGUID
  5252  00139E  0100               	movlb	0	; () banked
  5253  0013A0  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5254  0013A2  E167               	bnz	l9401
  5255                           
  5256                           ; BSR set to: 0
  5257  0013A4  0E03               	movlw	3
  5258  0013A6  ECB0  F020         	call	_vscp_getGUID
  5259  0013AA  0100               	movlb	0	; () banked
  5260  0013AC  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5261  0013AE  E161               	bnz	l9401
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;vscp_firmware.c: 919: vscp_guid_reset |= 0x10;
  5265  0013B0  898D               	bsf	_vscp_guid_reset& (0+255),4,b
  5266  0013B2  D05F               	goto	l9401
  5267  0013B4                     l9367:
  5268                           
  5269                           ; BSR set to: 0
  5270                           ;vscp_firmware.c: 924: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  5271                           ;vscp_firmware.c: 925: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  5272                           ;vscp_firmware.c: 926: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  5273                           ;vscp_firmware.c: 927: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  5274  0013B4  0E04               	movlw	4
  5275  0013B6  ECB0  F020         	call	_vscp_getGUID
  5276  0013BA  0100               	movlb	0	; () banked
  5277  0013BC  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5278  0013BE  E159               	bnz	l9401
  5279                           
  5280                           ; BSR set to: 0
  5281  0013C0  0E05               	movlw	5
  5282  0013C2  ECB0  F020         	call	_vscp_getGUID
  5283  0013C6  0100               	movlb	0	; () banked
  5284  0013C8  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5285  0013CA  E153               	bnz	l9401
  5286                           
  5287                           ; BSR set to: 0
  5288  0013CC  0E06               	movlw	6
  5289  0013CE  ECB0  F020         	call	_vscp_getGUID
  5290  0013D2  0100               	movlb	0	; () banked
  5291  0013D4  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5292  0013D6  E14D               	bnz	l9401
  5293                           
  5294                           ; BSR set to: 0
  5295  0013D8  0E07               	movlw	7
  5296  0013DA  ECB0  F020         	call	_vscp_getGUID
  5297  0013DE  0100               	movlb	0	; () banked
  5298  0013E0  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5299  0013E2  E147               	bnz	l9401
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;vscp_firmware.c: 928: vscp_guid_reset |= 0x20;
  5303  0013E4  8B8D               	bsf	_vscp_guid_reset& (0+255),5,b
  5304  0013E6  D045               	goto	l9401
  5305  0013E8                     l9377:
  5306                           
  5307                           ; BSR set to: 0
  5308                           ;vscp_firmware.c: 933: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  5309                           ;vscp_firmware.c: 934: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  5310                           ;vscp_firmware.c: 935: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  5311                           ;vscp_firmware.c: 936: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  5312  0013E8  0E08               	movlw	8
  5313  0013EA  ECB0  F020         	call	_vscp_getGUID
  5314  0013EE  0100               	movlb	0	; () banked
  5315  0013F0  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5316  0013F2  E13F               	bnz	l9401
  5317                           
  5318                           ; BSR set to: 0
  5319  0013F4  0E09               	movlw	9
  5320  0013F6  ECB0  F020         	call	_vscp_getGUID
  5321  0013FA  0100               	movlb	0	; () banked
  5322  0013FC  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5323  0013FE  E139               	bnz	l9401
  5324                           
  5325                           ; BSR set to: 0
  5326  001400  0E0A               	movlw	10
  5327  001402  ECB0  F020         	call	_vscp_getGUID
  5328  001406  0100               	movlb	0	; () banked
  5329  001408  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5330  00140A  E133               	bnz	l9401
  5331                           
  5332                           ; BSR set to: 0
  5333  00140C  0E0B               	movlw	11
  5334  00140E  ECB0  F020         	call	_vscp_getGUID
  5335  001412  0100               	movlb	0	; () banked
  5336  001414  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5337  001416  E12D               	bnz	l9401
  5338                           
  5339                           ; BSR set to: 0
  5340                           ;vscp_firmware.c: 937: vscp_guid_reset |= 0x40;
  5341  001418  8D8D               	bsf	_vscp_guid_reset& (0+255),6,b
  5342  00141A  D02B               	goto	l9401
  5343  00141C                     l9387:
  5344                           
  5345                           ; BSR set to: 0
  5346                           ;vscp_firmware.c: 942: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  5347                           ;vscp_firmware.c: 943: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  5348                           ;vscp_firmware.c: 944: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  5349                           ;vscp_firmware.c: 945: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  5350  00141C  0E0C               	movlw	12
  5351  00141E  ECB0  F020         	call	_vscp_getGUID
  5352  001422  0100               	movlb	0	; () banked
  5353  001424  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5354  001426  E125               	bnz	l9401
  5355                           
  5356                           ; BSR set to: 0
  5357  001428  0E0D               	movlw	13
  5358  00142A  ECB0  F020         	call	_vscp_getGUID
  5359  00142E  0100               	movlb	0	; () banked
  5360  001430  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5361  001432  E11F               	bnz	l9401
  5362                           
  5363                           ; BSR set to: 0
  5364  001434  0E0E               	movlw	14
  5365  001436  ECB0  F020         	call	_vscp_getGUID
  5366  00143A  0100               	movlb	0	; () banked
  5367  00143C  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5368  00143E  E119               	bnz	l9401
  5369                           
  5370                           ; BSR set to: 0
  5371  001440  0E0F               	movlw	15
  5372  001442  ECB0  F020         	call	_vscp_getGUID
  5373  001446  0100               	movlb	0	; () banked
  5374  001448  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5375  00144A  E113               	bnz	l9401
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;vscp_firmware.c: 946: vscp_guid_reset |= 0x80;
  5379  00144C  8F8D               	bsf	_vscp_guid_reset& (0+255),7,b
  5380  00144E  D011               	goto	l9401
  5381  001450                     l1212:
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;vscp_firmware.c: 951: vscp_guid_reset = 0;
  5385  001450  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  5386                           
  5387                           ;vscp_firmware.c: 952: break;
  5388  001452  D00F               	goto	l9401
  5389  001454                     l9399:
  5390                           
  5391                           ; BSR set to: 0
  5392  001454  399C               	swapf	(_vscp_imsg+6)& (0+255),w,b
  5393  001456  0B0F               	andlw	15
  5394  001458  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5395  00145A  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5396                           
  5397                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5398                           ; Switch size 1, requested type "speed"
  5399                           ; Number of cases is 1, Range of values is 0 to 0
  5400                           ; switch strategies available:
  5401                           ; Name         Instructions Cycles
  5402                           ; simple_byte            4     3 (average)
  5403                           ;	Chosen strategy is simple_byte
  5404  00145C  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5405  00145E  E1F8               	bnz	l1212
  5406                           
  5407                           ; BSR set to: 0
  5408                           ; Switch size 1, requested type "speed"
  5409                           ; Number of cases is 4, Range of values is 0 to 3
  5410                           ; switch strategies available:
  5411                           ; Name         Instructions Cycles
  5412                           ; simple_byte           13     7 (average)
  5413                           ;	Chosen strategy is simple_byte
  5414  001460  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5415  001462  E08E               	bz	l9357
  5416  001464  0A01               	xorlw	1	; case 1
  5417  001466  E0A6               	bz	l9367
  5418  001468  0A03               	xorlw	3	; case 2
  5419  00146A  E0BE               	bz	l9377
  5420  00146C  0A01               	xorlw	1	; case 3
  5421  00146E  E0D6               	bz	l9387
  5422  001470  D7EF               	goto	l1212
  5423  001472                     l9401:
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;vscp_firmware.c: 955: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  5427  001472  518D               	movf	_vscp_guid_reset& (0+255),w,b
  5428  001474  0BF0               	andlw	240
  5429  001476  0AF0               	xorlw	240
  5430  001478  E001 D214          	bnz	l1271
  5431                           
  5432                           ; BSR set to: 0
  5433                           ;vscp_firmware.c: 957: vscp_init();
  5434  00147C  ECA4  F01E         	call	_vscp_init	;wreg free
  5435  001480  D211               	goto	l1271
  5436  001482                     l9405:
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;vscp_firmware.c: 963: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5440  001482  5191               	movf	_vscp_nickname& (0+255),w,b
  5441  001484  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5442  001488  62DF               	cpfseq	indf2,c
  5443  00148A  D20C               	goto	l1271
  5444                           
  5445                           ; BSR set to: 0
  5446                           ;vscp_firmware.c: 965: uint8_t i;
  5447                           ;vscp_firmware.c: 966: uint8_t pos = 0;
  5448  00148C  6BDD               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  5449                           
  5450                           ;vscp_firmware.c: 967: uint8_t offset = vscp_imsg.data[ 1 ];
  5451  00148E  C09D  F0DC         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  5452                           
  5453                           ;vscp_firmware.c: 968: uint8_t len = vscp_imsg.data[ 2 ];
  5454  001492  C09E  F0DF         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  5455                           
  5456                           ;vscp_firmware.c: 970: for (i = 0; i < len; i++) {
  5457  001496  6BEA               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  5458  001498  D047               	goto	l9437
  5459  00149A                     l9409:
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;vscp_firmware.c: 971: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  5463  00149A  0E07               	movlw	7
  5464  00149C  6E08               	movwf	?___lbmod,c
  5465  00149E  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5466  0014A0  EC7C  F01F         	call	___lbmod
  5467  0014A4  0100               	movlb	0	; () banked
  5468  0014A6  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5469  0014A8  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5470  0014AA  0FAA               	addlw	low (_vscp_omsg+6)
  5471  0014AC  6ED9               	movwf	fsr2l,c
  5472  0014AE  6ADA               	clrf	fsr2h,c
  5473  0014B0  51DC               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  5474  0014B2  25EA               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5475  0014B4  EC5F  F020         	call	_vscp_readRegister
  5476  0014B8  6EDF               	movwf	indf2,c
  5477                           
  5478                           ;vscp_firmware.c: 973: if ((i % 7) == 6 || i == (len - 1)) {
  5479  0014BA  0E07               	movlw	7
  5480  0014BC  6E08               	movwf	?___lbmod,c
  5481  0014BE  0100               	movlb	0	; () banked
  5482  0014C0  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5483  0014C2  EC7C  F01F         	call	___lbmod
  5484  0014C6  0A06               	xorlw	6
  5485  0014C8  E00B               	bz	l9415
  5486  0014CA  0EFF               	movlw	255
  5487  0014CC  0100               	movlb	0	; () banked
  5488  0014CE  25DF               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  5489  0014D0  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5490  0014D2  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5491  0014D4  0EFF               	movlw	255
  5492  0014D6  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  5493  0014D8  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5494  0014DA  19D1               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5495  0014DC  11D2               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5496  0014DE  E123               	bnz	l9435
  5497  0014E0                     l9415:
  5498                           
  5499                           ;vscp_firmware.c: 974: uint8_t bytes;
  5500                           ;vscp_firmware.c: 976: if ((i % 7) == 6) bytes = 7;
  5501  0014E0  0E07               	movlw	7
  5502  0014E2  6E08               	movwf	?___lbmod,c
  5503  0014E4  0100               	movlb	0	; () banked
  5504  0014E6  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5505  0014E8  EC7C  F01F         	call	___lbmod
  5506  0014EC  0A06               	xorlw	6
  5507  0014EE  E103               	bnz	l9419
  5508  0014F0  0E07               	movlw	7
  5509  0014F2  0100               	movlb	0	; () banked
  5510  0014F4  D009               	goto	L15
  5511  0014F6                     l9419:
  5512                           
  5513                           ;vscp_firmware.c: 977: else bytes = (i % 7) + 1;
  5514  0014F6  0E07               	movlw	7
  5515  0014F8  6E08               	movwf	?___lbmod,c
  5516  0014FA  0100               	movlb	0	; () banked
  5517  0014FC  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5518  0014FE  EC7C  F01F         	call	___lbmod
  5519  001502  0100               	movlb	0	; () banked
  5520  001504  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5521  001506  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5522  001508                     L15:
  5523  001508  6FDE               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  5524                           
  5525                           ; BSR set to: 0
  5526                           ;vscp_firmware.c: 979: vscp_omsg.flags = 0x80 + bytes + 1;
  5527  00150A  51DE               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  5528  00150C  0F81               	addlw	129
  5529  00150E  6FA4               	movwf	_vscp_omsg& (0+255),b
  5530                           
  5531                           ; BSR set to: 0
  5532                           ;vscp_firmware.c: 980: vscp_omsg.priority = 0x03;
  5533  001510  0E03               	movlw	3
  5534  001512  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;vscp_firmware.c: 981: vscp_omsg.vscp_class = 0;
  5538  001514  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5539  001516  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5540                           
  5541                           ; BSR set to: 0
  5542                           ;vscp_firmware.c: 982: vscp_omsg.vscp_type = 26;
  5543  001518  0E1A               	movlw	26
  5544  00151A  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5545                           
  5546                           ; BSR set to: 0
  5547                           ;vscp_firmware.c: 983: vscp_omsg.data[ 0 ] = pos;
  5548  00151C  C0DD  F0A9         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  5549                           
  5550                           ; BSR set to: 0
  5551                           ;vscp_firmware.c: 986: vscp_sendEvent();
  5552  001520  ECA3  F01F         	call	_vscp_sendEvent	;wreg free
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;vscp_firmware.c: 987: pos++;
  5556  001524  2BDD               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  5557  001526                     l9435:
  5558                           
  5559                           ; BSR set to: 0
  5560  001526  2BEA               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  5561  001528                     l9437:
  5562                           
  5563                           ; BSR set to: 0
  5564  001528  51DF               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  5565  00152A  5DEA               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5566  00152C  E301 D1BA          	bc	l1271
  5567  001530  D7B4               	goto	l9409
  5568  001532                     l9439:
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;vscp_firmware.c: 995: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5572  001532  5191               	movf	_vscp_nickname& (0+255),w,b
  5573  001534  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5574  001538  62DF               	cpfseq	indf2,c
  5575  00153A  D1B4               	goto	l1271
  5576                           
  5577                           ; BSR set to: 0
  5578                           ;vscp_firmware.c: 996: uint8_t i;
  5579                           ;vscp_firmware.c: 997: uint8_t pos = vscp_imsg.data[ 1 ];
  5580  00153C  C09D  F0E0         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1279
  5581                           
  5582                           ; BSR set to: 0
  5583                           ;vscp_firmware.c: 998: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  5584  001540  5196               	movf	_vscp_imsg& (0+255),w,b
  5585  001542  0FFE               	addlw	254
  5586  001544  0B07               	andlw	7
  5587  001546  6FE1               	movwf	vscp_handleProtocolEvent@len_1280& (0+255),b
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;vscp_firmware.c: 1000: for (i = 0; i < len; i++) {
  5591  001548  6BE7               	clrf	vscp_handleProtocolEvent@i_1278& (0+255),b
  5592  00154A  D016               	goto	l9453
  5593  00154C                     l9447:
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;vscp_firmware.c: 1002: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  5597  00154C  51E7               	movf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5598  00154E  0F9E               	addlw	low (_vscp_imsg+8)
  5599  001550  6ED9               	movwf	fsr2l,c
  5600  001552  6ADA               	clrf	fsr2h,c
  5601  001554  50DF               	movf	indf2,w,c
  5602  001556  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  5603  001558  51E0               	movf	vscp_handleProtocolEvent@pos_1279& (0+255),w,b
  5604  00155A  25E7               	addwf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5605  00155C  ECFE  F01F         	call	_vscp_writeRegister
  5606                           
  5607                           ;vscp_firmware.c: 1003: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  5608  001560  0100               	movlb	0	; () banked
  5609  001562  51E7               	movf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5610  001564  0FAA               	addlw	low (_vscp_omsg+6)
  5611  001566  6ED9               	movwf	fsr2l,c
  5612  001568  6ADA               	clrf	fsr2h,c
  5613  00156A  51E0               	movf	vscp_handleProtocolEvent@pos_1279& (0+255),w,b
  5614  00156C  25E7               	addwf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5615  00156E  EC5F  F020         	call	_vscp_readRegister
  5616  001572  6EDF               	movwf	indf2,c
  5617  001574  0100               	movlb	0	; () banked
  5618  001576  2BE7               	incf	vscp_handleProtocolEvent@i_1278& (0+255),f,b
  5619  001578                     l9453:
  5620                           
  5621                           ; BSR set to: 0
  5622  001578  51E1               	movf	vscp_handleProtocolEvent@len_1280& (0+255),w,b
  5623  00157A  5DE7               	subwf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5624  00157C  E3E7               	bnc	l9447
  5625                           
  5626                           ; BSR set to: 0
  5627                           ;vscp_firmware.c: 1004: }
  5628                           ;vscp_firmware.c: 1006: vscp_omsg.priority = 0x03;
  5629  00157E  0E03               	movlw	3
  5630  001580  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;vscp_firmware.c: 1007: vscp_omsg.vscp_class = 0;
  5634  001582  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5635  001584  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5636                           
  5637                           ;vscp_firmware.c: 1008: vscp_omsg.vscp_type = 26;
  5638  001586  0E1A               	movlw	26
  5639  001588  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;vscp_firmware.c: 1009: vscp_omsg.data[ 0 ] = 0;
  5643  00158A  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;vscp_firmware.c: 1010: vscp_omsg.flags = 0x80 + len + 1;
  5647  00158C  51E1               	movf	vscp_handleProtocolEvent@len_1280& (0+255),w,b
  5648  00158E  0F81               	addlw	129
  5649  001590  6FA4               	movwf	_vscp_omsg& (0+255),b
  5650  001592  D6A8               	goto	l9291
  5651  001594                     l9465:
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;vscp_firmware.c: 1020: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5655  001594  5191               	movf	_vscp_nickname& (0+255),w,b
  5656  001596  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5657  00159A  62DF               	cpfseq	indf2,c
  5658  00159C  D183               	goto	l1271
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;vscp_firmware.c: 1022: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5662                           ;vscp_firmware.c: 1023: vscp_imsg.data[ 1 ],
  5663                           ;vscp_firmware.c: 1024: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  5664  00159E  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5665  0015A0  ECF4  F01C         	call	_vscp_readAppReg
  5666  0015A4  0100               	movlb	0	; () banked
  5667  0015A6  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5668  0015A8  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5669  0015AA  6E51               	movwf	?_vscp_writeAppReg,c
  5670  0015AC  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5671  0015AE  EC6E  F004         	call	_vscp_writeAppReg
  5672  0015B2  D68D               	goto	L14
  5673  0015B4                     l9481:
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;vscp_firmware.c: 1040: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5677  0015B4  5191               	movf	_vscp_nickname& (0+255),w,b
  5678  0015B6  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5679  0015BA  62DF               	cpfseq	indf2,c
  5680  0015BC  D173               	goto	l1271
  5681                           
  5682                           ; BSR set to: 0
  5683                           ;vscp_firmware.c: 1042: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5684                           ;vscp_firmware.c: 1043: vscp_imsg.data[ 1 ],
  5685                           ;vscp_firmware.c: 1044: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  5686  0015BE  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5687  0015C0  ECF4  F01C         	call	_vscp_readAppReg
  5688  0015C4  0100               	movlb	0	; () banked
  5689  0015C6  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5690  0015C8  05D1               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  5691  0015CA  6E51               	movwf	?_vscp_writeAppReg,c
  5692  0015CC  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5693  0015CE  EC6E  F004         	call	_vscp_writeAppReg
  5694  0015D2  D67D               	goto	L14
  5695  0015D4                     l9497:
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;vscp_firmware.c: 1060: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  5699                           ;vscp_firmware.c: 1061: (0xff == vscp_imsg.data[ 0 ])) {
  5700  0015D4  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
  5701  0015D6  1991               	xorwf	_vscp_nickname& (0+255),w,b
  5702  0015D8  E003               	bz	l1236
  5703                           
  5704                           ; BSR set to: 0
  5705  0015DA  299C               	incf	(_vscp_imsg+6)& (0+255),w,b
  5706  0015DC  E001 D162          	bnz	l1271
  5707  0015E0                     l1236:
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;vscp_firmware.c: 1063: uint8_t i, j, k = 0;
  5711  0015E0  6BE5               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;vscp_firmware.c: 1067: vscp_omsg.priority = 0x03;
  5715  0015E2  0E03               	movlw	3
  5716  0015E4  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5717                           
  5718                           ;vscp_firmware.c: 1068: vscp_omsg.flags = 0x80 + 8;
  5719  0015E6  0E88               	movlw	136
  5720  0015E8  6FA4               	movwf	_vscp_omsg& (0+255),b
  5721                           
  5722                           ; BSR set to: 0
  5723                           ;vscp_firmware.c: 1069: vscp_omsg.vscp_class = 0;
  5724  0015EA  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5725  0015EC  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5726                           
  5727                           ;vscp_firmware.c: 1070: vscp_omsg.vscp_type = 32;
  5728  0015EE  0E20               	movlw	32
  5729  0015F0  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5730                           
  5731                           ; BSR set to: 0
  5732                           ;vscp_firmware.c: 1072: for (i = 0; i < 3; i++)
  5733  0015F2  6BE9               	clrf	vscp_handleProtocolEvent@i_1281& (0+255),b
  5734  0015F4                     l1237:
  5735                           
  5736                           ; BSR set to: 0
  5737                           ;vscp_firmware.c: 1073: {
  5738                           ;vscp_firmware.c: 1074: vscp_omsg.data[0] = i;
  5739  0015F4  C0E9  F0A9         	movff	vscp_handleProtocolEvent@i_1281,_vscp_omsg+5
  5740                           
  5741                           ; BSR set to: 0
  5742                           ;vscp_firmware.c: 1076: for (j = 1; j < 8; j++) {
  5743  0015F8  0E01               	movlw	1
  5744  0015FA  6FEB               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  5745  0015FC                     l9517:
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;vscp_firmware.c: 1077: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  5749  0015FC  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5750  0015FE  0FA9               	addlw	low (_vscp_omsg+5)
  5751  001600  6ED9               	movwf	fsr2l,c
  5752  001602  6ADA               	clrf	fsr2h,c
  5753  001604  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5754  001606  080F               	sublw	15
  5755  001608  ECB0  F020         	call	_vscp_getGUID
  5756  00160C  6EDF               	movwf	indf2,c
  5757  00160E  0100               	movlb	0	; () banked
  5758  001610  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5759                           
  5760                           ; BSR set to: 0
  5761                           ;vscp_firmware.c: 1078: if (k > 16)
  5762  001612  0E10               	movlw	16
  5763  001614  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5764  001616  D001               	goto	l9525
  5765  001618  D004               	goto	l9529
  5766  00161A                     l9525:
  5767                           
  5768                           ; BSR set to: 0
  5769  00161A  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5770                           
  5771                           ; BSR set to: 0
  5772  00161C  0E07               	movlw	7
  5773  00161E  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5774  001620  D7ED               	goto	l9517
  5775  001622                     l9529:
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;vscp_firmware.c: 1080: }
  5779                           ;vscp_firmware.c: 1082: if (k > 16)
  5780  001622  0E10               	movlw	16
  5781  001624  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5782  001626  D001               	goto	l9533
  5783  001628  D006               	goto	l1238
  5784  00162A                     l9533:
  5785                           
  5786                           ; BSR set to: 0
  5787                           ;vscp_firmware.c: 1085: vscp_sendEvent();
  5788  00162A  ECA3  F01F         	call	_vscp_sendEvent	;wreg free
  5789                           
  5790                           ; BSR set to: 0
  5791  00162E  2BE9               	incf	vscp_handleProtocolEvent@i_1281& (0+255),f,b
  5792                           
  5793                           ; BSR set to: 0
  5794  001630  0E02               	movlw	2
  5795  001632  65E9               	cpfsgt	vscp_handleProtocolEvent@i_1281& (0+255),b
  5796  001634  D7DF               	goto	l1237
  5797  001636                     l1238:
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;vscp_firmware.c: 1086: }
  5801                           ;vscp_firmware.c: 1088: for (j = 0; j < 5; j++)
  5802  001636  6BEB               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  5803  001638                     l9543:
  5804                           
  5805                           ; BSR set to: 0
  5806                           ;vscp_firmware.c: 1089: {
  5807                           ;vscp_firmware.c: 1090: if (vscp_getMDF_URL(j) > 0)
  5808  001638  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5809  00163A  EC78  F020         	call	_vscp_getMDF_URL
  5810  00163E  0900               	iorlw	0
  5811  001640  E008               	bz	l9547
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;vscp_firmware.c: 1091: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  5815  001642  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5816  001644  0FAC               	addlw	low (_vscp_omsg+8)
  5817  001646  6ED9               	movwf	fsr2l,c
  5818  001648  6ADA               	clrf	fsr2h,c
  5819  00164A  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5820  00164C  EC78  F020         	call	_vscp_getMDF_URL
  5821  001650  D005               	goto	L16
  5822  001652                     l9547:
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;vscp_firmware.c: 1092: else
  5826                           ;vscp_firmware.c: 1093: vscp_omsg.data[3 + j] = 0;
  5827  001652  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5828  001654  0FAC               	addlw	low (_vscp_omsg+8)
  5829  001656  6ED9               	movwf	fsr2l,c
  5830  001658  6ADA               	clrf	fsr2h,c
  5831  00165A  0E00               	movlw	0
  5832  00165C                     L16:
  5833  00165C  6EDF               	movwf	indf2,c
  5834                           
  5835                           ; BSR set to: 0
  5836  00165E  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5837                           
  5838                           ; BSR set to: 0
  5839  001660  0E04               	movlw	4
  5840  001662  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5841  001664  D7E9               	goto	l9543
  5842                           
  5843                           ; BSR set to: 0
  5844                           ;vscp_firmware.c: 1094: }
  5845                           ;vscp_firmware.c: 1096: vscp_sendEvent();
  5846  001666  ECA3  F01F         	call	_vscp_sendEvent	;wreg free
  5847                           
  5848                           ; BSR set to: 0
  5849                           ;vscp_firmware.c: 1098: k = 5;
  5850  00166A  0E05               	movlw	5
  5851  00166C  6FE5               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;vscp_firmware.c: 1099: for (i = 3; i < 7; i++)
  5855  00166E  0E03               	movlw	3
  5856  001670  6FE9               	movwf	vscp_handleProtocolEvent@i_1281& (0+255),b
  5857  001672                     l1247:
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;vscp_firmware.c: 1100: {
  5861                           ;vscp_firmware.c: 1101: vscp_omsg.data[0] = i;
  5862  001672  C0E9  F0A9         	movff	vscp_handleProtocolEvent@i_1281,_vscp_omsg+5
  5863                           
  5864                           ; BSR set to: 0
  5865                           ;vscp_firmware.c: 1103: for (j = 1; j < 8; j++) {
  5866  001676  0E01               	movlw	1
  5867  001678  6FEB               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  5868  00167A                     l9569:
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;vscp_firmware.c: 1104: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  5872  00167A  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5873  00167C  0FA9               	addlw	low (_vscp_omsg+5)
  5874  00167E  6ED9               	movwf	fsr2l,c
  5875  001680  6ADA               	clrf	fsr2h,c
  5876  001682  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5877  001684  EC78  F020         	call	_vscp_getMDF_URL
  5878  001688  6EDF               	movwf	indf2,c
  5879                           
  5880                           ; BSR set to: 0
  5881  00168A  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5882                           
  5883                           ; BSR set to: 0
  5884  00168C  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5885                           
  5886                           ; BSR set to: 0
  5887  00168E  0E07               	movlw	7
  5888  001690  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5889  001692  D7F3               	goto	l9569
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;vscp_firmware.c: 1105: }
  5893                           ;vscp_firmware.c: 1106: vscp_sendEvent();
  5894  001694  ECA3  F01F         	call	_vscp_sendEvent	;wreg free
  5895                           
  5896                           ; BSR set to: 0
  5897  001698  2BE9               	incf	vscp_handleProtocolEvent@i_1281& (0+255),f,b
  5898                           
  5899                           ; BSR set to: 0
  5900  00169A  0E06               	movlw	6
  5901  00169C  65E9               	cpfsgt	vscp_handleProtocolEvent@i_1281& (0+255),b
  5902  00169E  D7E9               	goto	l1247
  5903  0016A0  D101               	goto	l1271
  5904  0016A2                     l9583:
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;vscp_firmware.c: 1115: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5908  0016A2  5191               	movf	_vscp_nickname& (0+255),w,b
  5909  0016A4  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5910  0016A8  62DF               	cpfseq	indf2,c
  5911  0016AA  D0FC               	goto	l1271
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;vscp_firmware.c: 1117: vscp_omsg.priority = 0x03;
  5915  0016AC  0E03               	movlw	3
  5916  0016AE  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5917                           
  5918                           ;vscp_firmware.c: 1118: vscp_omsg.flags = 0x80 + 7;
  5919  0016B0  0E87               	movlw	135
  5920  0016B2  6FA4               	movwf	_vscp_omsg& (0+255),b
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;vscp_firmware.c: 1119: vscp_omsg.vscp_class = 0;
  5924  0016B4  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5925  0016B6  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5926                           
  5927                           ;vscp_firmware.c: 1120: vscp_omsg.vscp_type = 34;
  5928  0016B8  0E22               	movlw	34
  5929  0016BA  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;vscp_firmware.c: 1122: vscp_getMatrixInfo((char *) vscp_omsg.data);
  5933  0016BC  0EA9               	movlw	(_vscp_omsg+5)& (0+255)
  5934  0016BE  EC31  F020         	call	_vscp_getMatrixInfo
  5935  0016C2  D610               	goto	l9291
  5936  0016C4                     l9593:
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;vscp_firmware.c: 1138: if ( vscp_nickname == vscp_imsg.data[0] ) {
  5940  0016C4  5191               	movf	_vscp_nickname& (0+255),w,b
  5941  0016C6  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5942  0016CA  62DF               	cpfseq	indf2,c
  5943  0016CC  D0EB               	goto	l1271
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;vscp_firmware.c: 1140: uint16_t page_save;
  5947                           ;vscp_firmware.c: 1141: uint8_t byte = 0, bytes = 0;
  5948  0016CE  6BE8               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  5949                           
  5950                           ; BSR set to: 0
  5951                           ;vscp_firmware.c: 1142: uint8_t bytes_this_time, cb;
  5952                           ;vscp_firmware.c: 1146: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  5953  0016D0  C096  F0D1         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  5954  0016D4  0E0F               	movlw	15
  5955  0016D6  17D1               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  5956  0016D8  0E04               	movlw	4
  5957  0016DA  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5958  0016DC  E304               	bnc	l9601
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;vscp_firmware.c: 1149: bytes = vscp_imsg.data[4];
  5962  0016DE  C0A0  F0E6         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1286
  5963                           
  5964                           ;vscp_firmware.c: 1151: if ( 0 == bytes ) {
  5965  0016E2  67E6               	tstfsz	vscp_handleProtocolEvent@bytes_1286& (0+255),b
  5966  0016E4  D002               	goto	l9605
  5967  0016E6                     l9601:
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;vscp_firmware.c: 1152: bytes = 1;
  5971  0016E6  0E01               	movlw	1
  5972  0016E8  6FE6               	movwf	vscp_handleProtocolEvent@bytes_1286& (0+255),b
  5973  0016EA                     l9605:
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;vscp_firmware.c: 1157: }
  5977                           ;vscp_firmware.c: 1160: page_save = vscp_page_select;
  5978  0016EA  C052  F0D8         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  5979  0016EE  C053  F0D9         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;vscp_firmware.c: 1165: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  5983  0016F2  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  5984  0016F4  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  5985  0016F8  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5986  0016FA  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  5987  0016FE  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  5988  001700  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5989  001702  6E52               	movwf	_vscp_page_select,c
  5990  001704  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5991  001706  6E53               	movwf	_vscp_page_select+1,c
  5992                           
  5993                           ; BSR set to: 0
  5994                           ;vscp_firmware.c: 1168: vscp_omsg.priority = 0x03;
  5995  001708  0E03               	movlw	3
  5996  00170A  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;vscp_firmware.c: 1169: vscp_omsg.vscp_class = 0;
  6000  00170C  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6001  00170E  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;vscp_firmware.c: 1170: vscp_omsg.vscp_type = 39;
  6005  001710  0E27               	movlw	39
  6006  001712  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;vscp_firmware.c: 1171: vscp_omsg.data[0] = 0;
  6010  001714  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;vscp_firmware.c: 1172: vscp_omsg.data[1] = vscp_imsg.data[1];
  6014  001716  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;vscp_firmware.c: 1173: vscp_omsg.data[2] = vscp_imsg.data[2];
  6018  00171A  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6019  00171E                     l9621:
  6020                           
  6021                           ; BSR set to: 0
  6022                           ;vscp_firmware.c: 1177: if ( ( bytes - byte ) >= 4 ) {
  6023  00171E  51E8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6024  001720  C0E6  F0D1         	movff	vscp_handleProtocolEvent@bytes_1286,??_vscp_handleProtocolEvent
  6025  001724  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6026  001726  5FD1               	subwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6027  001728  0E00               	movlw	0
  6028  00172A  5BD2               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6029  00172C  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6030  00172E  0A80               	xorlw	128
  6031  001730  0F80               	addlw	-128
  6032  001732  0E04               	movlw	4
  6033  001734  B4D8               	btfsc	status,2,c
  6034  001736  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6035  001738  E302               	bnc	l9625
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;vscp_firmware.c: 1178: bytes_this_time = 4;
  6039  00173A  0E04               	movlw	4
  6040  00173C  D002               	goto	L18
  6041  00173E                     l9625:
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;vscp_firmware.c: 1180: else {
  6045                           ;vscp_firmware.c: 1181: bytes_this_time = (bytes - byte);
  6046  00173E  51E8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6047  001740  5DE6               	subwf	vscp_handleProtocolEvent@bytes_1286& (0+255),w,b
  6048  001742                     L18:
  6049  001742  6FE2               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;vscp_firmware.c: 1182: }
  6053                           ;vscp_firmware.c: 1185: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  6054  001744  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6055  001746  0F84               	addlw	132
  6056  001748  6FA4               	movwf	_vscp_omsg& (0+255),b
  6057                           
  6058                           ;vscp_firmware.c: 1186: vscp_omsg.data[3] =
  6059                           ;vscp_firmware.c: 1187: vscp_imsg.data[3] + byte;
  6060  00174A  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6061  00174C  25E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6062  00174E  6FAC               	movwf	(_vscp_omsg+8)& (0+255),b
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;vscp_firmware.c: 1190: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  6066  001750  6BE3               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  6067  001752  D00C               	goto	l9633
  6068  001754                     l9629:
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;vscp_firmware.c: 1191: vscp_omsg.data[ (4 + cb) ] =
  6072                           ;vscp_firmware.c: 1192: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  6073  001754  51E3               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6074  001756  0FAD               	addlw	low (_vscp_omsg+9)
  6075  001758  6ED9               	movwf	fsr2l,c
  6076  00175A  6ADA               	clrf	fsr2h,c
  6077  00175C  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6078  00175E  25E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6079  001760  25E3               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6080  001762  EC5F  F020         	call	_vscp_readRegister
  6081  001766  6EDF               	movwf	indf2,c
  6082  001768  0100               	movlb	0	; () banked
  6083  00176A  2BE3               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  6084  00176C                     l9633:
  6085                           
  6086                           ; BSR set to: 0
  6087  00176C  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6088  00176E  5DE3               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6089  001770  E3F1               	bnc	l9629
  6090                           
  6091                           ; BSR set to: 0
  6092                           ;vscp_firmware.c: 1193: }
  6093                           ;vscp_firmware.c: 1196: vscp_sendEvent();
  6094  001772  ECA3  F01F         	call	_vscp_sendEvent	;wreg free
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;vscp_firmware.c: 1199: byte += bytes_this_time;
  6098  001776  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6099  001778  27E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;vscp_firmware.c: 1202: vscp_omsg.data[0] += 1;
  6103  00177A  2BA9               	incf	(_vscp_omsg+5)& (0+255),f,b
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;vscp_firmware.c: 1204: } while (byte < bytes);
  6107  00177C  51E6               	movf	vscp_handleProtocolEvent@bytes_1286& (0+255),w,b
  6108  00177E  5DE8               	subwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6109  001780  E3CE               	bnc	l9621
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;vscp_firmware.c: 1207: vscp_page_select = page_save;
  6113  001782  C0D8  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  6114  001786  C0D9  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  6115  00178A  D08C               	goto	l1271
  6116  00178C                     l9643:
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;vscp_firmware.c: 1214: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  6120  00178C  5191               	movf	_vscp_nickname& (0+255),w,b
  6121  00178E  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6122  001792  62DF               	cpfseq	indf2,c
  6123  001794  D087               	goto	l1271
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;vscp_firmware.c: 1216: uint8_t i;
  6127                           ;vscp_firmware.c: 1217: uint16_t page_save;
  6128                           ;vscp_firmware.c: 1220: page_save = vscp_page_select;
  6129  001796  C052  F0DA         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1290
  6130  00179A  C053  F0DB         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1290+1
  6131                           
  6132                           ; BSR set to: 0
  6133                           ;vscp_firmware.c: 1224: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  6134  00179E  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  6135  0017A0  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6136  0017A4  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6137  0017A6  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6138  0017AA  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6139  0017AC  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6140  0017AE  6E52               	movwf	_vscp_page_select,c
  6141  0017B0  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6142  0017B2  6E53               	movwf	_vscp_page_select+1,c
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;vscp_firmware.c: 1226: for (i = vscp_imsg.data[ 3 ];
  6146  0017B4  C09F  F0E4         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1289
  6147                           
  6148                           ;vscp_firmware.c: 1229: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  6149                           ;vscp_firmware.c: 1230: i++) {
  6150  0017B8  D014               	goto	l9655
  6151  0017BA                     l9651:
  6152                           
  6153                           ; BSR set to: 0
  6154                           ;vscp_firmware.c: 1231: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  6155                           ;vscp_firmware.c: 1232: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  6156  0017BA  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6157  0017BC  08A0               	sublw	low (_vscp_imsg+10)
  6158  0017BE  25E4               	addwf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6159  0017C0  6ED9               	movwf	fsr2l,c
  6160  0017C2  6ADA               	clrf	fsr2h,c
  6161  0017C4  50DF               	movf	indf2,w,c
  6162  0017C6  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  6163  0017C8  51E4               	movf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6164  0017CA  ECFE  F01F         	call	_vscp_writeRegister
  6165  0017CE  0100               	movlb	0	; () banked
  6166  0017D0  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6167  0017D2  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6168  0017D4  08AD               	sublw	low (_vscp_omsg+9)
  6169  0017D6  25E4               	addwf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6170  0017D8  6ED9               	movwf	fsr2l,c
  6171  0017DA  6ADA               	clrf	fsr2h,c
  6172  0017DC  C0D1  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  6173                           
  6174                           ; BSR set to: 0
  6175  0017E0  2BE4               	incf	vscp_handleProtocolEvent@i_1289& (0+255),f,b
  6176  0017E2                     l9655:
  6177                           
  6178                           ; BSR set to: 0
  6179  0017E2  5196               	movf	_vscp_imsg& (0+255),w,b
  6180  0017E4  0B0F               	andlw	15
  6181  0017E6  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6182  0017E8  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6183  0017EA  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6184  0017EC  27D1               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6185  0017EE  0E00               	movlw	0
  6186  0017F0  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6187  0017F2  0EFC               	movlw	252
  6188  0017F4  25D1               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6189  0017F6  6FD3               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  6190  0017F8  0EFF               	movlw	255
  6191  0017FA  21D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6192  0017FC  6FD4               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  6193  0017FE  51E4               	movf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6194  001800  6FD5               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  6195  001802  6BD6               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  6196  001804  51D6               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  6197  001806  0A80               	xorlw	128
  6198  001808  6FD7               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  6199  00180A  51D3               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  6200  00180C  5DD5               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  6201  00180E  51D4               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  6202  001810  0A80               	xorlw	128
  6203  001812  59D7               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  6204  001814  E3D2               	bnc	l9651
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;vscp_firmware.c: 1233: }
  6208                           ;vscp_firmware.c: 1236: vscp_page_select = page_save;
  6209  001816  C0DA  F052         	movff	vscp_handleProtocolEvent@page_save_1290,_vscp_page_select
  6210  00181A  C0DB  F053         	movff	vscp_handleProtocolEvent@page_save_1290+1,_vscp_page_select+1
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;vscp_firmware.c: 1238: vscp_omsg.priority = 0x03;
  6214  00181E  0E03               	movlw	3
  6215  001820  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6216                           
  6217                           ; BSR set to: 0
  6218                           ;vscp_firmware.c: 1239: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  6219  001822  5196               	movf	_vscp_imsg& (0+255),w,b
  6220  001824  0B0F               	andlw	15
  6221  001826  0F80               	addlw	128
  6222  001828  6FA4               	movwf	_vscp_omsg& (0+255),b
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;vscp_firmware.c: 1240: vscp_omsg.vscp_class = 0;
  6226  00182A  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6227  00182C  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;vscp_firmware.c: 1241: vscp_omsg.vscp_type = 39;
  6231  00182E  0E27               	movlw	39
  6232  001830  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;vscp_firmware.c: 1242: vscp_omsg.data[0] = 0;
  6236  001832  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;vscp_firmware.c: 1243: vscp_omsg.data[1] = vscp_imsg.data[1];
  6240  001834  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;vscp_firmware.c: 1244: vscp_omsg.data[2] = vscp_imsg.data[2];
  6244  001838  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;vscp_firmware.c: 1245: vscp_omsg.data[3] = vscp_imsg.data[3];
  6248  00183C  C09F  F0AC         	movff	_vscp_imsg+9,_vscp_omsg+8
  6249  001840  D551               	goto	l9291
  6250  001842                     l9677:
  6251                           
  6252                           ; BSR set to: 0
  6253  001842  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  6254                           
  6255                           ; Switch size 1, requested type "speed"
  6256                           ; Number of cases is 16, Range of values is 1 to 38
  6257                           ; switch strategies available:
  6258                           ; Name         Instructions Cycles
  6259                           ; simple_byte           49    25 (average)
  6260                           ;	Chosen strategy is simple_byte
  6261  001844  0A01               	xorlw	1	; case 1
  6262  001846  E101 D525          	bz	l9265
  6263  00184A  0A03               	xorlw	3	; case 2
  6264  00184C  E101 D525          	bz	l9267
  6265  001850  0A04               	xorlw	4	; case 6
  6266  001852  E101 D525          	bz	l9269
  6267  001856  0A0E               	xorlw	14	; case 8
  6268  001858  E101 D525          	bz	l9271
  6269  00185C  0A01               	xorlw	1	; case 9
  6270  00185E  E101 D525          	bz	l9273
  6271  001862  0A02               	xorlw	2	; case 11
  6272  001864  E101 D545          	bz	l9307
  6273  001868  0A07               	xorlw	7	; case 12
  6274  00186A  E101 D55B          	bz	l9341
  6275  00186E  0A1B               	xorlw	27	; case 23
  6276  001870  E101 D5F0          	bz	l9399
  6277  001874  0A0F               	xorlw	15	; case 24
  6278  001876  E101 D604          	bz	l9405
  6279  00187A  0A01               	xorlw	1	; case 25
  6280  00187C  E101 D659          	bz	l9439
  6281  001880  0A04               	xorlw	4	; case 29
  6282  001882  E101 D687          	bz	l9465
  6283  001886  0A03               	xorlw	3	; case 30
  6284  001888  E101 D694          	bz	l9481
  6285  00188C  0A01               	xorlw	1	; case 31
  6286  00188E  E101 D6A1          	bz	l9497
  6287  001892  0A3E               	xorlw	62	; case 33
  6288  001894  E101 D705          	bz	l9583
  6289  001898  0A04               	xorlw	4	; case 37
  6290  00189A  E101 D713          	bz	l9593
  6291  00189E  0A03               	xorlw	3	; case 38
  6292  0018A0  E101 D774          	bz	l9643
  6293  0018A4                     l1271:
  6294  0018A4  0012               	return	
  6295  0018A6                     __end_of_vscp_handleProtocolEvent:
  6296                           	opt stack 0
  6297                           tblptru	equ	0xFF8
  6298                           prodh	equ	0xFF4
  6299                           prodl	equ	0xFF3
  6300                           postinc0	equ	0xFEE
  6301                           wreg	equ	0xFE8
  6302                           indf2	equ	0xFDF
  6303                           postinc2	equ	0xFDE
  6304                           postdec2	equ	0xFDD
  6305                           fsr2h	equ	0xFDA
  6306                           fsr2l	equ	0xFD9
  6307                           status	equ	0xFD8
  6308                           
  6309 ;; *************** function ___lbmod *****************
  6310 ;; Defined at:
  6311 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  6312 ;; Parameters:    Size  Location     Type
  6313 ;;  dividend        1    wreg     unsigned char 
  6314 ;;  divisor         1    7[COMRAM] unsigned char 
  6315 ;; Auto vars:     Size  Location     Type
  6316 ;;  dividend        1    8[COMRAM] unsigned char 
  6317 ;;  rem             1   10[COMRAM] unsigned char 
  6318 ;;  counter         1    9[COMRAM] unsigned char 
  6319 ;; Return value:  Size  Location     Type
  6320 ;;                  1    wreg      unsigned char 
  6321 ;; Registers used:
  6322 ;;		wreg, status,2, status,0
  6323 ;; Tracked objects:
  6324 ;;		On entry : F/0
  6325 ;;		On exit  : 0/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6328 ;;      Params:         1       0       0       0       0       0       0
  6329 ;;      Locals:         3       0       0       0       0       0       0
  6330 ;;      Temps:          0       0       0       0       0       0       0
  6331 ;;      Totals:         4       0       0       0       0       0       0
  6332 ;;Total ram usage:        4 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; Hardware stack levels required when called:    2
  6335 ;; This function calls:
  6336 ;;		Nothing
  6337 ;; This function is called by:
  6338 ;;		_vscp_handleProtocolEvent
  6339 ;; This function uses a non-reentrant model
  6340 ;;
  6341                           
  6342                           	psect	text16
  6343  003EF8                     __ptext16:
  6344                           	opt stack 0
  6345  003EF8                     ___lbmod:
  6346                           	opt stack 27
  6347                           
  6348                           ;incstack = 0
  6349                           ;incstack = 0
  6350                           ;___lbmod@dividend stored from wreg
  6351  003EF8  CFE8 F009          	movff	wreg,___lbmod@dividend
  6352                           
  6353                           ; BSR set to: 0
  6354  003EFC  0E08               	movlw	8
  6355  003EFE  6E0A               	movwf	___lbmod@counter,c
  6356                           
  6357                           ; BSR set to: 0
  6358  003F00  6A0B               	clrf	___lbmod@rem,c
  6359  003F02                     l7051:
  6360  003F02  90D8               	bcf	status,0,c
  6361  003F04  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  6362  003F06  340B               	rlcf	___lbmod@rem& (0+255),w,c
  6363  003F08  6E0B               	movwf	___lbmod@rem,c
  6364  003F0A  90D8               	bcf	status,0,c
  6365  003F0C  3609               	rlcf	___lbmod@dividend,f,c
  6366  003F0E  5008               	movf	___lbmod@divisor,w,c
  6367  003F10  5C0B               	subwf	___lbmod@rem,w,c
  6368  003F12  E302               	bnc	l7059
  6369  003F14  5008               	movf	___lbmod@divisor,w,c
  6370  003F16  5E0B               	subwf	___lbmod@rem,f,c
  6371  003F18                     l7059:
  6372  003F18  2E0A               	decfsz	___lbmod@counter,f,c
  6373  003F1A  D7F3               	goto	l7051
  6374  003F1C  500B               	movf	___lbmod@rem,w,c
  6375  003F1E  0012               	return	
  6376  003F20                     __end_of___lbmod:
  6377                           	opt stack 0
  6378                           tblptru	equ	0xFF8
  6379                           prodh	equ	0xFF4
  6380                           prodl	equ	0xFF3
  6381                           postinc0	equ	0xFEE
  6382                           wreg	equ	0xFE8
  6383                           indf2	equ	0xFDF
  6384                           postinc2	equ	0xFDE
  6385                           postdec2	equ	0xFDD
  6386                           fsr2h	equ	0xFDA
  6387                           fsr2l	equ	0xFD9
  6388                           status	equ	0xFD8
  6389                           
  6390 ;; *************** function _vscp_writeRegister *****************
  6391 ;; Defined at:
  6392 ;;		line 678 in file "../../vscp_firmware/common/vscp_firmware.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;  reg             1    wreg     unsigned char 
  6395 ;;  value           1   30[BANK0 ] unsigned char 
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;  reg             1   31[BANK0 ] unsigned char 
  6398 ;; Return value:  Size  Location     Type
  6399 ;;                  1    wreg      unsigned char 
  6400 ;; Registers used:
  6401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6402 ;; Tracked objects:
  6403 ;;		On entry : F/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6407 ;;      Params:         0       1       0       0       0       0       0
  6408 ;;      Locals:         0       1       0       0       0       0       0
  6409 ;;      Temps:          0       0       0       0       0       0       0
  6410 ;;      Totals:         0       2       0       0       0       0       0
  6411 ;;Total ram usage:        2 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:    8
  6414 ;; This function calls:
  6415 ;;		_vscp_writeAppReg
  6416 ;;		_vscp_writeStdReg
  6417 ;; This function is called by:
  6418 ;;		_vscp_handleProtocolEvent
  6419 ;; This function uses a non-reentrant model
  6420 ;;
  6421                           
  6422                           	psect	text17
  6423  003FFC                     __ptext17:
  6424                           	opt stack 0
  6425  003FFC                     _vscp_writeRegister:
  6426                           	opt stack 21
  6427                           
  6428                           ;incstack = 0
  6429                           ;incstack = 0
  6430                           ;vscp_writeRegister@reg stored from wreg
  6431  003FFC  CFE8 F0D0          	movff	wreg,vscp_writeRegister@reg
  6432                           
  6433                           ; BSR set to: 0
  6434                           ;vscp_firmware.c: 679: if (reg >= 0x80) {
  6435  004000  0E7F               	movlw	127
  6436  004002  65D0               	cpfsgt	vscp_writeRegister@reg& (0+255),b
  6437  004004  D006               	goto	l10433
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;vscp_firmware.c: 680: return vscp_writeStdReg(reg, value);
  6441  004006  C0CF  F00F         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  6442  00400A  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6443  00400C  EC6D  F016         	call	_vscp_writeStdReg
  6444  004010  D005               	goto	l1148
  6445  004012                     l10433:
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;vscp_firmware.c: 682: return vscp_writeAppReg(reg, value);
  6449  004012  C0CF  F051         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  6450  004016  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6451  004018  EC6E  F004         	call	_vscp_writeAppReg
  6452  00401C                     l1148:
  6453  00401C  0012               	return	
  6454  00401E                     __end_of_vscp_writeRegister:
  6455                           	opt stack 0
  6456                           tblptru	equ	0xFF8
  6457                           prodh	equ	0xFF4
  6458                           prodl	equ	0xFF3
  6459                           postinc0	equ	0xFEE
  6460                           wreg	equ	0xFE8
  6461                           indf2	equ	0xFDF
  6462                           postinc2	equ	0xFDE
  6463                           postdec2	equ	0xFDD
  6464                           fsr2h	equ	0xFDA
  6465                           fsr2l	equ	0xFD9
  6466                           status	equ	0xFD8
  6467                           
  6468 ;; *************** function _vscp_writeStdReg *****************
  6469 ;; Defined at:
  6470 ;;		line 691 in file "../../vscp_firmware/common/vscp_firmware.c"
  6471 ;; Parameters:    Size  Location     Type
  6472 ;;  reg             1    wreg     unsigned char 
  6473 ;;  value           1   14[COMRAM] unsigned char 
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;  reg             1   31[COMRAM] unsigned char 
  6476 ;;  code            4   24[COMRAM] unsigned long 
  6477 ;;  idx             1   29[COMRAM] unsigned char 
  6478 ;;  code            4   20[COMRAM] unsigned long 
  6479 ;;  idx             1   28[COMRAM] unsigned char 
  6480 ;;  rv              1   30[COMRAM] unsigned char 
  6481 ;; Return value:  Size  Location     Type
  6482 ;;                  1    wreg      unsigned char 
  6483 ;; Registers used:
  6484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6485 ;; Tracked objects:
  6486 ;;		On entry : F/0
  6487 ;;		On exit  : 0/0
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6490 ;;      Params:         1       0       0       0       0       0       0
  6491 ;;      Locals:        12       0       0       0       0       0       0
  6492 ;;      Temps:          5       0       0       0       0       0       0
  6493 ;;      Totals:        18       0       0       0       0       0       0
  6494 ;;Total ram usage:       18 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; Hardware stack levels required when called:    5
  6497 ;; This function calls:
  6498 ;;		_vscp_setGUID
  6499 ;;		_vscp_setManufacturerId
  6500 ;;		_vscp_getGUID
  6501 ;;		_vscp_getUserID
  6502 ;;		_vscp_setUserID
  6503 ;;		_vscp_getManufacturerId
  6504 ;;		_vscp_getFamilyCode
  6505 ;;		_vscp_getFamilyType
  6506 ;;		_vscp_restoreDefaults
  6507 ;; This function is called by:
  6508 ;;		_vscp_writeRegister
  6509 ;;		_vscp_handleProtocolEvent
  6510 ;; This function uses a non-reentrant model
  6511 ;;
  6512                           
  6513                           	psect	text18
  6514  002CDA                     __ptext18:
  6515                           	opt stack 0
  6516  002CDA                     _vscp_writeStdReg:
  6517                           	opt stack 24
  6518                           
  6519                           ;incstack = 0
  6520                           ;incstack = 0
  6521                           ;vscp_writeStdReg@reg stored from wreg
  6522  002CDA  CFE8 F020          	movff	wreg,vscp_writeStdReg@reg
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;vscp_firmware.c: 692: uint8_t rv = ~value;
  6526  002CDE  1C0F               	comf	vscp_writeStdReg@value,w,c
  6527  002CE0  6E1F               	movwf	vscp_writeStdReg@rv,c
  6528                           
  6529                           ; BSR set to: 0
  6530                           ;vscp_firmware.c: 694: if ((reg > (0x82 + 1)) &&
  6531                           ;vscp_firmware.c: 695: (reg < 0x89)) {
  6532  002CE2  0E83               	movlw	131
  6533  002CE4  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6534  002CE6  D00E               	goto	l9081
  6535                           
  6536                           ; BSR set to: 0
  6537  002CE8  0E89               	movlw	137
  6538  002CEA  6020               	cpfslt	vscp_writeStdReg@reg,c
  6539  002CEC  D00B               	goto	l9081
  6540                           
  6541                           ; BSR set to: 0
  6542                           ;vscp_firmware.c: 698: vscp_setUserID((reg - 0x84), value);
  6543  002CEE  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  6544  002CF2  5020               	movf	vscp_writeStdReg@reg,w,c
  6545  002CF4  0F7C               	addlw	124
  6546  002CF6  EC6C  F020         	call	_vscp_setUserID
  6547                           
  6548                           ;vscp_firmware.c: 699: rv = vscp_getUserID((reg - 0x84));
  6549  002CFA  5020               	movf	vscp_writeStdReg@reg,w,c
  6550  002CFC  0F7C               	addlw	124
  6551  002CFE  ECA6  F020         	call	_vscp_getUserID
  6552  002D02  D083               	goto	L23
  6553  002D04                     l9081:
  6554                           
  6555                           ; BSR set to: 0
  6556                           ;vscp_firmware.c: 702: else if (0x92 == reg) {
  6557  002D04  5020               	movf	vscp_writeStdReg@reg,w,c
  6558  002D06  0A92               	xorlw	146
  6559  002D08  E10D               	bnz	l9087
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;vscp_firmware.c: 705: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  6563  002D0A  500F               	movf	vscp_writeStdReg@value,w,c
  6564  002D0C  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6565  002D0E  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  6566  002D10  5052               	movf	_vscp_page_select,w,c
  6567  002D12  6E12               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  6568  002D14  6A13               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  6569  002D16  1010               	iorwf	??_vscp_writeStdReg,w,c
  6570  002D18  6E52               	movwf	_vscp_page_select,c
  6571  002D1A  5011               	movf	??_vscp_writeStdReg+1,w,c
  6572  002D1C  1013               	iorwf	??_vscp_writeStdReg+3,w,c
  6573  002D1E  6E53               	movwf	_vscp_page_select+1,c
  6574                           
  6575                           ; BSR set to: 0
  6576                           ;vscp_firmware.c: 706: rv = (vscp_page_select >> 8) & 0xff;
  6577  002D20  5053               	movf	_vscp_page_select+1,w,c
  6578  002D22  D073               	goto	L23
  6579  002D24                     l9087:
  6580                           
  6581                           ; BSR set to: 0
  6582                           ;vscp_firmware.c: 708: else if (0x93 == reg) {
  6583  002D24  5020               	movf	vscp_writeStdReg@reg,w,c
  6584  002D26  0A93               	xorlw	147
  6585  002D28  E10B               	bnz	l9093
  6586                           
  6587                           ; BSR set to: 0
  6588                           ;vscp_firmware.c: 711: vscp_page_select = (vscp_page_select & 0xff00) | value;
  6589  002D2A  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  6590  002D2C  5053               	movf	_vscp_page_select+1,w,c
  6591  002D2E  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6592  002D30  500F               	movf	vscp_writeStdReg@value,w,c
  6593  002D32  1010               	iorwf	??_vscp_writeStdReg,w,c
  6594  002D34  6E52               	movwf	_vscp_page_select,c
  6595  002D36  5011               	movf	??_vscp_writeStdReg+1,w,c
  6596  002D38  6E53               	movwf	_vscp_page_select+1,c
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;vscp_firmware.c: 712: rv = (vscp_page_select & 0xff);
  6600  002D3A  C052  F01F         	movff	_vscp_page_select,vscp_writeStdReg@rv
  6601                           
  6602                           ;vscp_firmware.c: 713: }
  6603  002D3E  D0AF               	goto	l9155
  6604  002D40                     l9093:
  6605                           
  6606                           ; BSR set to: 0
  6607                           ;vscp_firmware.c: 718: else if ((reg > 0x88) && (reg < 0x91)) {
  6608  002D40  0E88               	movlw	136
  6609  002D42  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6610  002D44  D019               	goto	l9105
  6611                           
  6612                           ; BSR set to: 0
  6613  002D46  0E91               	movlw	145
  6614  002D48  6020               	cpfslt	vscp_writeStdReg@reg,c
  6615  002D4A  D016               	goto	l9105
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;vscp_firmware.c: 720: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6619                           ;vscp_firmware.c: 721: (0xff != (vscp_page_select & 0xff))) {
  6620  002D4C  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6621  002D50  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6622  002D54  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6623  002D56  2811               	incf	??_vscp_writeStdReg+1,w,c
  6624  002D58  E102               	bnz	l9101
  6625                           
  6626                           ; BSR set to: 0
  6627  002D5A  2852               	incf	_vscp_page_select,w,c
  6628  002D5C  E002               	bz	l9103
  6629  002D5E                     l9101:
  6630                           
  6631                           ; BSR set to: 0
  6632                           ;vscp_firmware.c: 723: rv = ~value;
  6633  002D5E  1C0F               	comf	vscp_writeStdReg@value,w,c
  6634  002D60  D054               	goto	L23
  6635  002D62                     l9103:
  6636                           
  6637                           ; BSR set to: 0
  6638                           ;vscp_firmware.c: 726: vscp_setManufacturerId(reg - 0x89, value);
  6639  002D62  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  6640  002D66  5020               	movf	vscp_writeStdReg@reg,w,c
  6641  002D68  0F77               	addlw	119
  6642  002D6A  EC0F  F020         	call	_vscp_setManufacturerId
  6643                           
  6644                           ;vscp_firmware.c: 727: rv = vscp_getManufacturerId(reg - 0x89);
  6645  002D6E  5020               	movf	vscp_writeStdReg@reg,w,c
  6646  002D70  0F77               	addlw	119
  6647  002D72  EC9C  F020         	call	_vscp_getManufacturerId
  6648  002D76  D049               	goto	L23
  6649  002D78                     l9105:
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;vscp_firmware.c: 730: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  6653  002D78  0ECF               	movlw	207
  6654  002D7A  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6655  002D7C  D017               	goto	l9117
  6656                           
  6657                           ; BSR set to: 0
  6658  002D7E  0EE0               	movlw	224
  6659  002D80  6020               	cpfslt	vscp_writeStdReg@reg,c
  6660  002D82  D014               	goto	l9117
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;vscp_firmware.c: 732: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6664                           ;vscp_firmware.c: 733: (0xff != (vscp_page_select & 0xff))) {
  6665  002D84  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6666  002D88  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6667  002D8C  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6668  002D8E  2811               	incf	??_vscp_writeStdReg+1,w,c
  6669  002D90  E1E6               	bnz	l9101
  6670                           
  6671                           ; BSR set to: 0
  6672  002D92  2852               	incf	_vscp_page_select,w,c
  6673  002D94  E1E4               	bnz	l9101
  6674                           
  6675                           ; BSR set to: 0
  6676                           ;vscp_firmware.c: 737: else {
  6677                           ;vscp_firmware.c: 738: vscp_setGUID(reg - 0xD0, value);
  6678  002D96  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  6679  002D9A  5020               	movf	vscp_writeStdReg@reg,w,c
  6680  002D9C  0F30               	addlw	48
  6681  002D9E  EC20  F020         	call	_vscp_setGUID
  6682                           
  6683                           ;vscp_firmware.c: 739: rv = vscp_getGUID(reg - 0xD0);
  6684  002DA2  5020               	movf	vscp_writeStdReg@reg,w,c
  6685  002DA4  0F30               	addlw	48
  6686  002DA6  ECB0  F020         	call	_vscp_getGUID
  6687  002DAA  D02F               	goto	L23
  6688  002DAC                     l9117:
  6689                           
  6690                           ; BSR set to: 0
  6691                           ;vscp_firmware.c: 743: else if ( ( reg >= 0x9A ) &&
  6692                           ;vscp_firmware.c: 744: ( reg < 0x9E ) ) {
  6693  002DAC  0E99               	movlw	153
  6694  002DAE  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6695  002DB0  D02E               	goto	l9127
  6696                           
  6697                           ; BSR set to: 0
  6698  002DB2  0E9E               	movlw	158
  6699  002DB4  6020               	cpfslt	vscp_writeStdReg@reg,c
  6700  002DB6  D02B               	goto	l9127
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;vscp_firmware.c: 746: uint32_t code = vscp_getFamilyCode();
  6704  002DB8  ECFF  F020         	call	_vscp_getFamilyCode	;wreg free
  6705  002DBC  C00B  F018         	movff	?_vscp_getFamilyCode+3,vscp_writeStdReg@code+3
  6706  002DC0  C00A  F017         	movff	?_vscp_getFamilyCode+2,vscp_writeStdReg@code+2
  6707  002DC4  C009  F016         	movff	?_vscp_getFamilyCode+1,vscp_writeStdReg@code+1
  6708  002DC8  C008  F015         	movff	?_vscp_getFamilyCode,vscp_writeStdReg@code
  6709                           
  6710                           ; BSR set to: 0
  6711                           ;vscp_firmware.c: 747: uint8_t idx = reg - 0x9A;
  6712  002DCC  5020               	movf	vscp_writeStdReg@reg,w,c
  6713  002DCE  0F66               	addlw	102
  6714  002DD0  6E1D               	movwf	vscp_writeStdReg@idx,c
  6715                           
  6716                           ; BSR set to: 0
  6717                           ;vscp_firmware.c: 748: rv = code >> (((3-idx)*8) & 0xff);
  6718  002DD2  501D               	movf	vscp_writeStdReg@idx,w,c
  6719  002DD4  0803               	sublw	3
  6720  002DD6  6E10               	movwf	??_vscp_writeStdReg& (0+255),c
  6721  002DD8  90D8               	bcf	status,0,c
  6722  002DDA  3610               	rlcf	??_vscp_writeStdReg,f,c
  6723  002DDC  90D8               	bcf	status,0,c
  6724  002DDE  3610               	rlcf	??_vscp_writeStdReg,f,c
  6725  002DE0  90D8               	bcf	status,0,c
  6726  002DE2  3610               	rlcf	??_vscp_writeStdReg,f,c
  6727  002DE4  5010               	movf	??_vscp_writeStdReg,w,c
  6728  002DE6  C015  F011         	movff	vscp_writeStdReg@code,??_vscp_writeStdReg+1
  6729  002DEA  C016  F012         	movff	vscp_writeStdReg@code+1,??_vscp_writeStdReg+2
  6730  002DEE  C017  F013         	movff	vscp_writeStdReg@code+2,??_vscp_writeStdReg+3
  6731  002DF2  C018  F014         	movff	vscp_writeStdReg@code+3,??_vscp_writeStdReg+4
  6732  002DF6  2AE8               	incf	wreg,f,c
  6733  002DF8  D005               	goto	u11090
  6734  002DFA                     u11095:
  6735  002DFA  90D8               	bcf	status,0,c
  6736  002DFC  3214               	rrcf	??_vscp_writeStdReg+4,f,c
  6737  002DFE  3213               	rrcf	??_vscp_writeStdReg+3,f,c
  6738  002E00  3212               	rrcf	??_vscp_writeStdReg+2,f,c
  6739  002E02  3211               	rrcf	??_vscp_writeStdReg+1,f,c
  6740  002E04                     u11090:
  6741  002E04  2EE8               	decfsz	wreg,f,c
  6742  002E06  D7F9               	goto	u11095
  6743  002E08  D030               	goto	L24
  6744  002E0A                     L23:
  6745  002E0A  6E1F               	movwf	vscp_writeStdReg@rv,c
  6746                           
  6747                           ;vscp_firmware.c: 749: }
  6748  002E0C  D048               	goto	l9155
  6749  002E0E                     l9127:
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;vscp_firmware.c: 750: else if ( ( reg >= 0x9E ) &&
  6753                           ;vscp_firmware.c: 751: ( reg < 0xA2 ) ) {
  6754  002E0E  0E9D               	movlw	157
  6755  002E10  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6756  002E12  D02D               	goto	l9137
  6757                           
  6758                           ; BSR set to: 0
  6759  002E14  0EA2               	movlw	162
  6760  002E16  6020               	cpfslt	vscp_writeStdReg@reg,c
  6761  002E18  D02A               	goto	l9137
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;vscp_firmware.c: 753: uint32_t code = vscp_getFamilyType();
  6765  002E1A  ECFA  F020         	call	_vscp_getFamilyType	;wreg free
  6766  002E1E  C00B  F01C         	movff	?_vscp_getFamilyType+3,vscp_writeStdReg@code_1270+3
  6767  002E22  C00A  F01B         	movff	?_vscp_getFamilyType+2,vscp_writeStdReg@code_1270+2
  6768  002E26  C009  F01A         	movff	?_vscp_getFamilyType+1,vscp_writeStdReg@code_1270+1
  6769  002E2A  C008  F019         	movff	?_vscp_getFamilyType,vscp_writeStdReg@code_1270
  6770                           
  6771                           ; BSR set to: 0
  6772                           ;vscp_firmware.c: 754: uint8_t idx = reg - 0x9E;
  6773  002E2E  5020               	movf	vscp_writeStdReg@reg,w,c
  6774  002E30  0F62               	addlw	98
  6775  002E32  6E1E               	movwf	vscp_writeStdReg@idx_1271,c
  6776                           
  6777                           ; BSR set to: 0
  6778                           ;vscp_firmware.c: 755: rv = code >> (((3-idx)*8) & 0xff);
  6779  002E34  501E               	movf	vscp_writeStdReg@idx_1271,w,c
  6780  002E36  0803               	sublw	3
  6781  002E38  6E10               	movwf	??_vscp_writeStdReg& (0+255),c
  6782  002E3A  90D8               	bcf	status,0,c
  6783  002E3C  3610               	rlcf	??_vscp_writeStdReg,f,c
  6784  002E3E  90D8               	bcf	status,0,c
  6785  002E40  3610               	rlcf	??_vscp_writeStdReg,f,c
  6786  002E42  90D8               	bcf	status,0,c
  6787  002E44  3610               	rlcf	??_vscp_writeStdReg,f,c
  6788  002E46  5010               	movf	??_vscp_writeStdReg,w,c
  6789  002E48  C019  F011         	movff	vscp_writeStdReg@code_1270,??_vscp_writeStdReg+1
  6790  002E4C  C01A  F012         	movff	vscp_writeStdReg@code_1270+1,??_vscp_writeStdReg+2
  6791  002E50  C01B  F013         	movff	vscp_writeStdReg@code_1270+2,??_vscp_writeStdReg+3
  6792  002E54  C01C  F014         	movff	vscp_writeStdReg@code_1270+3,??_vscp_writeStdReg+4
  6793  002E58  2AE8               	incf	wreg,f,c
  6794  002E5A  D005               	goto	u11120
  6795  002E5C                     u11125:
  6796  002E5C  90D8               	bcf	status,0,c
  6797  002E5E  3214               	rrcf	??_vscp_writeStdReg+4,f,c
  6798  002E60  3213               	rrcf	??_vscp_writeStdReg+3,f,c
  6799  002E62  3212               	rrcf	??_vscp_writeStdReg+2,f,c
  6800  002E64  3211               	rrcf	??_vscp_writeStdReg+1,f,c
  6801  002E66                     u11120:
  6802  002E66  2EE8               	decfsz	wreg,f,c
  6803  002E68  D7F9               	goto	u11125
  6804  002E6A                     L24:
  6805  002E6A  5011               	movf	??_vscp_writeStdReg+1,w,c
  6806  002E6C  D7CE               	goto	L23
  6807  002E6E                     l9137:
  6808                           
  6809                           ; BSR set to: 0
  6810                           ;vscp_firmware.c: 757: else if ( 0xA2 == reg ) {
  6811  002E6E  5020               	movf	vscp_writeStdReg@reg,w,c
  6812  002E70  0AA2               	xorlw	162
  6813  002E72  E001 D774          	bnz	l9101
  6814                           
  6815                           ; BSR set to: 0
  6816                           ;vscp_firmware.c: 758: if ( 0x55 == value ) {
  6817  002E76  500F               	movf	vscp_writeStdReg@value,w,c
  6818  002E78  0A55               	xorlw	85
  6819  002E7A  E104               	bnz	l9145
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;vscp_firmware.c: 759: vscp_configtimer = 0;
  6823  002E7C  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
  6824  002E7E  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;vscp_firmware.c: 760: rv = 0x55;
  6828  002E80  0E55               	movlw	85
  6829  002E82  D7C3               	goto	L23
  6830  002E84                     l9145:
  6831                           
  6832                           ; BSR set to: 0
  6833                           ;vscp_firmware.c: 762: else if ( 0xaa == value ) {
  6834  002E84  500F               	movf	vscp_writeStdReg@value,w,c
  6835  002E86  0AAA               	xorlw	170
  6836  002E88  E10A               	bnz	l9155
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;vscp_firmware.c: 763: if ( vscp_configtimer < 1000 ) {
  6840  002E8A  0EE8               	movlw	232
  6841  002E8C  5D84               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  6842  002E8E  0E03               	movlw	3
  6843  002E90  5985               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  6844  002E92  E204               	bc	l1178
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;vscp_firmware.c: 764: vscp_restoreDefaults();
  6848  002E94  EC0E  F021         	call	_vscp_restoreDefaults	;wreg free
  6849                           
  6850                           ;vscp_firmware.c: 765: rv = 0xaa;
  6851  002E98  0EAA               	movlw	170
  6852  002E9A  D7B7               	goto	L23
  6853  002E9C                     l1178:
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;vscp_firmware.c: 767: else {
  6857                           ;vscp_firmware.c: 768: rv = 0;
  6858  002E9C  6A1F               	clrf	vscp_writeStdReg@rv,c
  6859  002E9E                     l9155:
  6860                           
  6861                           ;vscp_firmware.c: 776: }
  6862                           ;vscp_firmware.c: 778: return rv;
  6863  002E9E  501F               	movf	vscp_writeStdReg@rv,w,c
  6864  002EA0  0012               	return	
  6865  002EA2                     __end_of_vscp_writeStdReg:
  6866                           	opt stack 0
  6867                           tblptru	equ	0xFF8
  6868                           prodh	equ	0xFF4
  6869                           prodl	equ	0xFF3
  6870                           postinc0	equ	0xFEE
  6871                           wreg	equ	0xFE8
  6872                           indf2	equ	0xFDF
  6873                           postinc2	equ	0xFDE
  6874                           postdec2	equ	0xFDD
  6875                           fsr2h	equ	0xFDA
  6876                           fsr2l	equ	0xFD9
  6877                           status	equ	0xFD8
  6878                           
  6879 ;; *************** function _vscp_restoreDefaults *****************
  6880 ;; Defined at:
  6881 ;;		line 2471 in file "../main.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;		None
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;		None
  6886 ;; Return value:  Size  Location     Type
  6887 ;;		None               void
  6888 ;; Registers used:
  6889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6890 ;; Tracked objects:
  6891 ;;		On entry : F/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6895 ;;      Params:         0       0       0       0       0       0       0
  6896 ;;      Locals:         0       0       0       0       0       0       0
  6897 ;;      Temps:          0       0       0       0       0       0       0
  6898 ;;      Totals:         0       0       0       0       0       0       0
  6899 ;;Total ram usage:        0 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    4
  6902 ;; This function calls:
  6903 ;;		_init_app_eeprom
  6904 ;;		_init_app_ram
  6905 ;; This function is called by:
  6906 ;;		_vscp_writeStdReg
  6907 ;; This function uses a non-reentrant model
  6908 ;;
  6909                           
  6910                           	psect	text19
  6911  00421C                     __ptext19:
  6912                           	opt stack 0
  6913  00421C                     _vscp_restoreDefaults:
  6914                           	opt stack 24
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;main.c: 2472: init_app_eeprom();
  6918                           
  6919                           ;incstack = 0
  6920                           ;incstack = 0
  6921  00421C  EC89  F00E         	call	_init_app_eeprom	;wreg free
  6922                           
  6923                           ;main.c: 2473: init_app_ram();
  6924  004220  EFF0  F019         	goto	_init_app_ram	;wreg free
  6925  004224                     __end_of_vscp_restoreDefaults:
  6926                           	opt stack 0
  6927                           tblptru	equ	0xFF8
  6928                           prodh	equ	0xFF4
  6929                           prodl	equ	0xFF3
  6930                           postinc0	equ	0xFEE
  6931                           wreg	equ	0xFE8
  6932                           indf2	equ	0xFDF
  6933                           postinc2	equ	0xFDE
  6934                           postdec2	equ	0xFDD
  6935                           fsr2h	equ	0xFDA
  6936                           fsr2l	equ	0xFD9
  6937                           status	equ	0xFD8
  6938                           
  6939 ;; *************** function _init_app_eeprom *****************
  6940 ;; Defined at:
  6941 ;;		line 480 in file "../main.c"
  6942 ;; Parameters:    Size  Location     Type
  6943 ;;		None
  6944 ;; Auto vars:     Size  Location     Type
  6945 ;;  j               1   13[COMRAM] unsigned char 
  6946 ;;  i               1   12[COMRAM] unsigned char 
  6947 ;; Return value:  Size  Location     Type
  6948 ;;		None               void
  6949 ;; Registers used:
  6950 ;;		wreg, status,2, status,0, cstack
  6951 ;; Tracked objects:
  6952 ;;		On entry : 0/0
  6953 ;;		On exit  : 0/0
  6954 ;;		Unchanged: 0/0
  6955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6956 ;;      Params:         0       0       0       0       0       0       0
  6957 ;;      Locals:         2       0       0       0       0       0       0
  6958 ;;      Temps:          2       0       0       0       0       0       0
  6959 ;;      Totals:         4       0       0       0       0       0       0
  6960 ;;Total ram usage:        4 bytes
  6961 ;; Hardware stack levels used:    1
  6962 ;; Hardware stack levels required when called:    3
  6963 ;; This function calls:
  6964 ;;		_writeEEPROM
  6965 ;; This function is called by:
  6966 ;;		_main
  6967 ;;		_vscp_restoreDefaults
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           	psect	text20
  6972  001D12                     __ptext20:
  6973                           	opt stack 0
  6974  001D12                     _init_app_eeprom:
  6975                           	opt stack 24
  6976                           
  6977                           ;main.c: 481: unsigned char i, j;
  6978                           ;main.c: 483: writeEEPROM( 0x43 + 0, 0 );
  6979                           
  6980                           ;incstack = 0
  6981                           ;incstack = 0
  6982  001D12  6A09               	clrf	?_writeEEPROM+1,c
  6983  001D14  0E43               	movlw	67
  6984  001D16  6E08               	movwf	?_writeEEPROM,c
  6985  001D18  0E00               	movlw	0
  6986  001D1A  6A0A               	clrf	?_writeEEPROM+2,c
  6987  001D1C  ECB6  F01F         	call	_writeEEPROM	;wreg free
  6988                           
  6989                           ;main.c: 484: writeEEPROM( 0x43 + 1, 0 );
  6990  001D20  6A09               	clrf	?_writeEEPROM+1,c
  6991  001D22  0E44               	movlw	68
  6992  001D24  6E08               	movwf	?_writeEEPROM,c
  6993  001D26  0E00               	movlw	0
  6994  001D28  6A0A               	clrf	?_writeEEPROM+2,c
  6995  001D2A  ECB6  F01F         	call	_writeEEPROM	;wreg free
  6996                           
  6997                           ;main.c: 486: writeEEPROM( 0x43 + 10,
  6998                           ;main.c: 487: 0x08 |
  6999                           ;main.c: 488: 0x10 |
  7000                           ;main.c: 489: 0x80 );
  7001  001D2E  6A09               	clrf	?_writeEEPROM+1,c
  7002  001D30  0E4D               	movlw	77
  7003  001D32  6E08               	movwf	?_writeEEPROM,c
  7004  001D34  0E98               	movlw	152
  7005  001D36  6E0A               	movwf	?_writeEEPROM+2,c
  7006  001D38  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7007                           
  7008                           ;main.c: 491: writeEEPROM( 0x43 + 11,
  7009                           ;main.c: 492: 0x08 |
  7010                           ;main.c: 493: 0x10 |
  7011                           ;main.c: 494: 0x80 );
  7012  001D3C  6A09               	clrf	?_writeEEPROM+1,c
  7013  001D3E  0E4E               	movlw	78
  7014  001D40  6E08               	movwf	?_writeEEPROM,c
  7015  001D42  0E98               	movlw	152
  7016  001D44  6E0A               	movwf	?_writeEEPROM+2,c
  7017  001D46  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7018                           
  7019                           ;main.c: 496: writeEEPROM( 0x43 + 12,
  7020                           ;main.c: 497: 0x08 |
  7021                           ;main.c: 498: 0x10 |
  7022                           ;main.c: 499: 0x80 );
  7023  001D4A  6A09               	clrf	?_writeEEPROM+1,c
  7024  001D4C  0E4F               	movlw	79
  7025  001D4E  6E08               	movwf	?_writeEEPROM,c
  7026  001D50  0E98               	movlw	152
  7027  001D52  6E0A               	movwf	?_writeEEPROM+2,c
  7028  001D54  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7029                           
  7030                           ;main.c: 501: writeEEPROM( 0x43 + 13,
  7031                           ;main.c: 502: 0x08 |
  7032                           ;main.c: 503: 0x10 |
  7033                           ;main.c: 504: 0x80 );
  7034  001D58  6A09               	clrf	?_writeEEPROM+1,c
  7035  001D5A  0E50               	movlw	80
  7036  001D5C  6E08               	movwf	?_writeEEPROM,c
  7037  001D5E  0E98               	movlw	152
  7038  001D60  6E0A               	movwf	?_writeEEPROM+2,c
  7039  001D62  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7040                           
  7041                           ;main.c: 506: writeEEPROM( 0x43 + 14,
  7042                           ;main.c: 507: 0x08 |
  7043                           ;main.c: 508: 0x10 |
  7044                           ;main.c: 509: 0x80 );
  7045  001D66  6A09               	clrf	?_writeEEPROM+1,c
  7046  001D68  0E51               	movlw	81
  7047  001D6A  6E08               	movwf	?_writeEEPROM,c
  7048  001D6C  0E98               	movlw	152
  7049  001D6E  6E0A               	movwf	?_writeEEPROM+2,c
  7050  001D70  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7051                           
  7052                           ;main.c: 511: writeEEPROM( 0x43 + 15,
  7053                           ;main.c: 512: 0x08 |
  7054                           ;main.c: 513: 0x10 |
  7055                           ;main.c: 514: 0x80 );
  7056  001D74  6A09               	clrf	?_writeEEPROM+1,c
  7057  001D76  0E52               	movlw	82
  7058  001D78  6E08               	movwf	?_writeEEPROM,c
  7059  001D7A  0E98               	movlw	152
  7060  001D7C  6E0A               	movwf	?_writeEEPROM+2,c
  7061  001D7E  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7062                           
  7063                           ;main.c: 516: writeEEPROM( 0x43 + 16,
  7064                           ;main.c: 517: 0x08 |
  7065                           ;main.c: 518: 0x10 |
  7066                           ;main.c: 519: 0x80 );
  7067  001D82  6A09               	clrf	?_writeEEPROM+1,c
  7068  001D84  0E53               	movlw	83
  7069  001D86  6E08               	movwf	?_writeEEPROM,c
  7070  001D88  0E98               	movlw	152
  7071  001D8A  6E0A               	movwf	?_writeEEPROM+2,c
  7072  001D8C  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7073                           
  7074                           ;main.c: 521: writeEEPROM( 0x43 + 17,
  7075                           ;main.c: 522: 0x08 |
  7076                           ;main.c: 523: 0x10 |
  7077                           ;main.c: 524: 0x80 );
  7078  001D90  6A09               	clrf	?_writeEEPROM+1,c
  7079  001D92  0E54               	movlw	84
  7080  001D94  6E08               	movwf	?_writeEEPROM,c
  7081  001D96  0E98               	movlw	152
  7082  001D98  6E0A               	movwf	?_writeEEPROM+2,c
  7083  001D9A  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7084                           
  7085                           ;main.c: 526: writeEEPROM( 0x43 + 18, 0 );
  7086  001D9E  6A09               	clrf	?_writeEEPROM+1,c
  7087  001DA0  0E55               	movlw	85
  7088  001DA2  6E08               	movwf	?_writeEEPROM,c
  7089  001DA4  0E00               	movlw	0
  7090  001DA6  6A0A               	clrf	?_writeEEPROM+2,c
  7091  001DA8  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7092                           
  7093                           ;main.c: 527: writeEEPROM( 0x43 + 19, 0 );
  7094  001DAC  6A09               	clrf	?_writeEEPROM+1,c
  7095  001DAE  0E56               	movlw	86
  7096  001DB0  6E08               	movwf	?_writeEEPROM,c
  7097  001DB2  0E00               	movlw	0
  7098  001DB4  6A0A               	clrf	?_writeEEPROM+2,c
  7099  001DB6  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7100                           
  7101                           ;main.c: 528: writeEEPROM( 0x43 + 20, 0 );
  7102  001DBA  6A09               	clrf	?_writeEEPROM+1,c
  7103  001DBC  0E57               	movlw	87
  7104  001DBE  6E08               	movwf	?_writeEEPROM,c
  7105  001DC0  0E00               	movlw	0
  7106  001DC2  6A0A               	clrf	?_writeEEPROM+2,c
  7107  001DC4  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7108                           
  7109                           ;main.c: 529: writeEEPROM( 0x43 + 21, 0 );
  7110  001DC8  6A09               	clrf	?_writeEEPROM+1,c
  7111  001DCA  0E58               	movlw	88
  7112  001DCC  6E08               	movwf	?_writeEEPROM,c
  7113  001DCE  0E00               	movlw	0
  7114  001DD0  6A0A               	clrf	?_writeEEPROM+2,c
  7115  001DD2  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7116                           
  7117                           ;main.c: 530: writeEEPROM( 0x43 + 22, 0 );
  7118  001DD6  6A09               	clrf	?_writeEEPROM+1,c
  7119  001DD8  0E59               	movlw	89
  7120  001DDA  6E08               	movwf	?_writeEEPROM,c
  7121  001DDC  0E00               	movlw	0
  7122  001DDE  6A0A               	clrf	?_writeEEPROM+2,c
  7123  001DE0  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7124                           
  7125                           ;main.c: 531: writeEEPROM( 0x43 + 23, 0 );
  7126  001DE4  6A09               	clrf	?_writeEEPROM+1,c
  7127  001DE6  0E5A               	movlw	90
  7128  001DE8  6E08               	movwf	?_writeEEPROM,c
  7129  001DEA  0E00               	movlw	0
  7130  001DEC  6A0A               	clrf	?_writeEEPROM+2,c
  7131  001DEE  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7132                           
  7133                           ;main.c: 532: writeEEPROM( 0x43 + 24, 0 );
  7134  001DF2  6A09               	clrf	?_writeEEPROM+1,c
  7135  001DF4  0E5B               	movlw	91
  7136  001DF6  6E08               	movwf	?_writeEEPROM,c
  7137  001DF8  0E00               	movlw	0
  7138  001DFA  6A0A               	clrf	?_writeEEPROM+2,c
  7139  001DFC  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7140                           
  7141                           ;main.c: 533: writeEEPROM( 0x43 + 25, 0 );
  7142  001E00  6A09               	clrf	?_writeEEPROM+1,c
  7143  001E02  0E5C               	movlw	92
  7144  001E04  6E08               	movwf	?_writeEEPROM,c
  7145  001E06  0E00               	movlw	0
  7146  001E08  6A0A               	clrf	?_writeEEPROM+2,c
  7147  001E0A  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7148                           
  7149                           ;main.c: 534: writeEEPROM( 0x43 + 26, 0 );
  7150  001E0E  6A09               	clrf	?_writeEEPROM+1,c
  7151  001E10  0E5D               	movlw	93
  7152  001E12  6E08               	movwf	?_writeEEPROM,c
  7153  001E14  0E00               	movlw	0
  7154  001E16  6A0A               	clrf	?_writeEEPROM+2,c
  7155  001E18  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7156                           
  7157                           ;main.c: 535: writeEEPROM( 0x43 + 27, 0 );
  7158  001E1C  6A09               	clrf	?_writeEEPROM+1,c
  7159  001E1E  0E5E               	movlw	94
  7160  001E20  6E08               	movwf	?_writeEEPROM,c
  7161  001E22  0E00               	movlw	0
  7162  001E24  6A0A               	clrf	?_writeEEPROM+2,c
  7163  001E26  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7164                           
  7165                           ;main.c: 536: writeEEPROM( 0x43 + 28, 0 );
  7166  001E2A  6A09               	clrf	?_writeEEPROM+1,c
  7167  001E2C  0E5F               	movlw	95
  7168  001E2E  6E08               	movwf	?_writeEEPROM,c
  7169  001E30  0E00               	movlw	0
  7170  001E32  6A0A               	clrf	?_writeEEPROM+2,c
  7171  001E34  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7172                           
  7173                           ;main.c: 537: writeEEPROM( 0x43 + 29, 0 );
  7174  001E38  6A09               	clrf	?_writeEEPROM+1,c
  7175  001E3A  0E60               	movlw	96
  7176  001E3C  6E08               	movwf	?_writeEEPROM,c
  7177  001E3E  0E00               	movlw	0
  7178  001E40  6A0A               	clrf	?_writeEEPROM+2,c
  7179  001E42  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7180                           
  7181                           ;main.c: 538: writeEEPROM( 0x43 + 30, 0 );
  7182  001E46  6A09               	clrf	?_writeEEPROM+1,c
  7183  001E48  0E61               	movlw	97
  7184  001E4A  6E08               	movwf	?_writeEEPROM,c
  7185  001E4C  0E00               	movlw	0
  7186  001E4E  6A0A               	clrf	?_writeEEPROM+2,c
  7187  001E50  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7188                           
  7189                           ;main.c: 539: writeEEPROM( 0x43 + 31, 0 );
  7190  001E54  6A09               	clrf	?_writeEEPROM+1,c
  7191  001E56  0E62               	movlw	98
  7192  001E58  6E08               	movwf	?_writeEEPROM,c
  7193  001E5A  0E00               	movlw	0
  7194  001E5C  6A0A               	clrf	?_writeEEPROM+2,c
  7195  001E5E  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7196                           
  7197                           ;main.c: 540: writeEEPROM( 0x43 + 32, 0 );
  7198  001E62  6A09               	clrf	?_writeEEPROM+1,c
  7199  001E64  0E63               	movlw	99
  7200  001E66  6E08               	movwf	?_writeEEPROM,c
  7201  001E68  0E00               	movlw	0
  7202  001E6A  6A0A               	clrf	?_writeEEPROM+2,c
  7203  001E6C  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7204                           
  7205                           ;main.c: 541: writeEEPROM( 0x43 + 33, 0 );
  7206  001E70  6A09               	clrf	?_writeEEPROM+1,c
  7207  001E72  0E64               	movlw	100
  7208  001E74  6E08               	movwf	?_writeEEPROM,c
  7209  001E76  0E00               	movlw	0
  7210  001E78  6A0A               	clrf	?_writeEEPROM+2,c
  7211  001E7A  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7212                           
  7213                           ;main.c: 543: writeEEPROM( 0x43 + 34, 0 );
  7214  001E7E  6A09               	clrf	?_writeEEPROM+1,c
  7215  001E80  0E65               	movlw	101
  7216  001E82  6E08               	movwf	?_writeEEPROM,c
  7217  001E84  0E00               	movlw	0
  7218  001E86  6A0A               	clrf	?_writeEEPROM+2,c
  7219  001E88  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7220                           
  7221                           ;main.c: 544: writeEEPROM( 0x43 + 35, 0 );
  7222  001E8C  6A09               	clrf	?_writeEEPROM+1,c
  7223  001E8E  0E66               	movlw	102
  7224  001E90  6E08               	movwf	?_writeEEPROM,c
  7225  001E92  0E00               	movlw	0
  7226  001E94  6A0A               	clrf	?_writeEEPROM+2,c
  7227  001E96  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7228                           
  7229                           ;main.c: 545: writeEEPROM( 0x43 + 36, 0 );
  7230  001E9A  6A09               	clrf	?_writeEEPROM+1,c
  7231  001E9C  0E67               	movlw	103
  7232  001E9E  6E08               	movwf	?_writeEEPROM,c
  7233  001EA0  0E00               	movlw	0
  7234  001EA2  6A0A               	clrf	?_writeEEPROM+2,c
  7235  001EA4  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7236                           
  7237                           ;main.c: 546: writeEEPROM( 0x43 + 37, 0 );
  7238  001EA8  6A09               	clrf	?_writeEEPROM+1,c
  7239  001EAA  0E68               	movlw	104
  7240  001EAC  6E08               	movwf	?_writeEEPROM,c
  7241  001EAE  0E00               	movlw	0
  7242  001EB0  6A0A               	clrf	?_writeEEPROM+2,c
  7243  001EB2  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7244                           
  7245                           ;main.c: 547: writeEEPROM( 0x43 + 38, 0 );
  7246  001EB6  6A09               	clrf	?_writeEEPROM+1,c
  7247  001EB8  0E69               	movlw	105
  7248  001EBA  6E08               	movwf	?_writeEEPROM,c
  7249  001EBC  0E00               	movlw	0
  7250  001EBE  6A0A               	clrf	?_writeEEPROM+2,c
  7251  001EC0  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7252                           
  7253                           ;main.c: 548: writeEEPROM( 0x43 + 39, 0 );
  7254  001EC4  6A09               	clrf	?_writeEEPROM+1,c
  7255  001EC6  0E6A               	movlw	106
  7256  001EC8  6E08               	movwf	?_writeEEPROM,c
  7257  001ECA  0E00               	movlw	0
  7258  001ECC  6A0A               	clrf	?_writeEEPROM+2,c
  7259  001ECE  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7260                           
  7261                           ;main.c: 549: writeEEPROM( 0x43 + 40, 0 );
  7262  001ED2  6A09               	clrf	?_writeEEPROM+1,c
  7263  001ED4  0E6B               	movlw	107
  7264  001ED6  6E08               	movwf	?_writeEEPROM,c
  7265  001ED8  0E00               	movlw	0
  7266  001EDA  6A0A               	clrf	?_writeEEPROM+2,c
  7267  001EDC  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7268                           
  7269                           ;main.c: 550: writeEEPROM( 0x43 + 41, 0 );
  7270  001EE0  6A09               	clrf	?_writeEEPROM+1,c
  7271  001EE2  0E6C               	movlw	108
  7272  001EE4  6E08               	movwf	?_writeEEPROM,c
  7273  001EE6  0E00               	movlw	0
  7274  001EE8  6A0A               	clrf	?_writeEEPROM+2,c
  7275  001EEA  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7276                           
  7277                           ;main.c: 551: writeEEPROM( 0x43 + 42, 0 );
  7278  001EEE  6A09               	clrf	?_writeEEPROM+1,c
  7279  001EF0  0E6D               	movlw	109
  7280  001EF2  6E08               	movwf	?_writeEEPROM,c
  7281  001EF4  0E00               	movlw	0
  7282  001EF6  6A0A               	clrf	?_writeEEPROM+2,c
  7283  001EF8  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7284                           
  7285                           ;main.c: 552: writeEEPROM( 0x43 + 43, 0 );
  7286  001EFC  6A09               	clrf	?_writeEEPROM+1,c
  7287  001EFE  0E6E               	movlw	110
  7288  001F00  6E08               	movwf	?_writeEEPROM,c
  7289  001F02  0E00               	movlw	0
  7290  001F04  6A0A               	clrf	?_writeEEPROM+2,c
  7291  001F06  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7292                           
  7293                           ;main.c: 553: writeEEPROM( 0x43 + 44, 0 );
  7294  001F0A  6A09               	clrf	?_writeEEPROM+1,c
  7295  001F0C  0E6F               	movlw	111
  7296  001F0E  6E08               	movwf	?_writeEEPROM,c
  7297  001F10  0E00               	movlw	0
  7298  001F12  6A0A               	clrf	?_writeEEPROM+2,c
  7299  001F14  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7300                           
  7301                           ;main.c: 554: writeEEPROM( 0x43 + 45, 0 );
  7302  001F18  6A09               	clrf	?_writeEEPROM+1,c
  7303  001F1A  0E70               	movlw	112
  7304  001F1C  6E08               	movwf	?_writeEEPROM,c
  7305  001F1E  0E00               	movlw	0
  7306  001F20  6A0A               	clrf	?_writeEEPROM+2,c
  7307  001F22  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7308                           
  7309                           ;main.c: 555: writeEEPROM( 0x43 + 46, 0 );
  7310  001F26  6A09               	clrf	?_writeEEPROM+1,c
  7311  001F28  0E71               	movlw	113
  7312  001F2A  6E08               	movwf	?_writeEEPROM,c
  7313  001F2C  0E00               	movlw	0
  7314  001F2E  6A0A               	clrf	?_writeEEPROM+2,c
  7315  001F30  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7316                           
  7317                           ;main.c: 556: writeEEPROM( 0x43 + 47, 0 );
  7318  001F34  6A09               	clrf	?_writeEEPROM+1,c
  7319  001F36  0E72               	movlw	114
  7320  001F38  6E08               	movwf	?_writeEEPROM,c
  7321  001F3A  0E00               	movlw	0
  7322  001F3C  6A0A               	clrf	?_writeEEPROM+2,c
  7323  001F3E  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7324                           
  7325                           ;main.c: 557: writeEEPROM( 0x43 + 48, 0 );
  7326  001F42  6A09               	clrf	?_writeEEPROM+1,c
  7327  001F44  0E73               	movlw	115
  7328  001F46  6E08               	movwf	?_writeEEPROM,c
  7329  001F48  0E00               	movlw	0
  7330  001F4A  6A0A               	clrf	?_writeEEPROM+2,c
  7331  001F4C  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7332                           
  7333                           ;main.c: 558: writeEEPROM( 0x43 + 49, 0 );
  7334  001F50  6A09               	clrf	?_writeEEPROM+1,c
  7335  001F52  0E74               	movlw	116
  7336  001F54  6E08               	movwf	?_writeEEPROM,c
  7337  001F56  0E00               	movlw	0
  7338  001F58  6A0A               	clrf	?_writeEEPROM+2,c
  7339  001F5A  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7340                           
  7341                           ;main.c: 560: writeEEPROM( 0x43 + 50, 0 );
  7342  001F5E  6A09               	clrf	?_writeEEPROM+1,c
  7343  001F60  0E75               	movlw	117
  7344  001F62  6E08               	movwf	?_writeEEPROM,c
  7345  001F64  0E00               	movlw	0
  7346  001F66  6A0A               	clrf	?_writeEEPROM+2,c
  7347  001F68  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7348                           
  7349                           ;main.c: 561: writeEEPROM( 0x43 + 51, 0 );
  7350  001F6C  6A09               	clrf	?_writeEEPROM+1,c
  7351  001F6E  0E76               	movlw	118
  7352  001F70  6E08               	movwf	?_writeEEPROM,c
  7353  001F72  0E00               	movlw	0
  7354  001F74  6A0A               	clrf	?_writeEEPROM+2,c
  7355  001F76  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7356                           
  7357                           ;main.c: 562: writeEEPROM( 0x43 + 52, 0 );
  7358  001F7A  6A09               	clrf	?_writeEEPROM+1,c
  7359  001F7C  0E77               	movlw	119
  7360  001F7E  6E08               	movwf	?_writeEEPROM,c
  7361  001F80  0E00               	movlw	0
  7362  001F82  6A0A               	clrf	?_writeEEPROM+2,c
  7363  001F84  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7364                           
  7365                           ;main.c: 563: writeEEPROM( 0x43 + 53, 0 );
  7366  001F88  6A09               	clrf	?_writeEEPROM+1,c
  7367  001F8A  0E78               	movlw	120
  7368  001F8C  6E08               	movwf	?_writeEEPROM,c
  7369  001F8E  0E00               	movlw	0
  7370  001F90  6A0A               	clrf	?_writeEEPROM+2,c
  7371  001F92  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7372                           
  7373                           ;main.c: 564: writeEEPROM( 0x43 + 54, 0 );
  7374  001F96  6A09               	clrf	?_writeEEPROM+1,c
  7375  001F98  0E79               	movlw	121
  7376  001F9A  6E08               	movwf	?_writeEEPROM,c
  7377  001F9C  0E00               	movlw	0
  7378  001F9E  6A0A               	clrf	?_writeEEPROM+2,c
  7379  001FA0  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7380                           
  7381                           ;main.c: 565: writeEEPROM( 0x43 + 55, 0 );
  7382  001FA4  6A09               	clrf	?_writeEEPROM+1,c
  7383  001FA6  0E7A               	movlw	122
  7384  001FA8  6E08               	movwf	?_writeEEPROM,c
  7385  001FAA  0E00               	movlw	0
  7386  001FAC  6A0A               	clrf	?_writeEEPROM+2,c
  7387  001FAE  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7388                           
  7389                           ;main.c: 566: writeEEPROM( 0x43 + 56, 0 );
  7390  001FB2  6A09               	clrf	?_writeEEPROM+1,c
  7391  001FB4  0E7B               	movlw	123
  7392  001FB6  6E08               	movwf	?_writeEEPROM,c
  7393  001FB8  0E00               	movlw	0
  7394  001FBA  6A0A               	clrf	?_writeEEPROM+2,c
  7395  001FBC  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7396                           
  7397                           ;main.c: 567: writeEEPROM( 0x43 + 57, 0 );
  7398  001FC0  6A09               	clrf	?_writeEEPROM+1,c
  7399  001FC2  0E7C               	movlw	124
  7400  001FC4  6E08               	movwf	?_writeEEPROM,c
  7401  001FC6  0E00               	movlw	0
  7402  001FC8  6A0A               	clrf	?_writeEEPROM+2,c
  7403  001FCA  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7404                           
  7405                           ;main.c: 568: writeEEPROM( 0x43 + 58, 0 );
  7406  001FCE  6A09               	clrf	?_writeEEPROM+1,c
  7407  001FD0  0E7D               	movlw	125
  7408  001FD2  6E08               	movwf	?_writeEEPROM,c
  7409  001FD4  0E00               	movlw	0
  7410  001FD6  6A0A               	clrf	?_writeEEPROM+2,c
  7411  001FD8  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7412                           
  7413                           ;main.c: 569: writeEEPROM( 0x43 + 59, 0 );
  7414  001FDC  6A09               	clrf	?_writeEEPROM+1,c
  7415  001FDE  0E7E               	movlw	126
  7416  001FE0  6E08               	movwf	?_writeEEPROM,c
  7417  001FE2  0E00               	movlw	0
  7418  001FE4  6A0A               	clrf	?_writeEEPROM+2,c
  7419  001FE6  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7420                           
  7421                           ;main.c: 570: writeEEPROM( 0x43 + 60, 0 );
  7422  001FEA  6A09               	clrf	?_writeEEPROM+1,c
  7423  001FEC  0E7F               	movlw	127
  7424  001FEE  6E08               	movwf	?_writeEEPROM,c
  7425  001FF0  0E00               	movlw	0
  7426  001FF2  6A0A               	clrf	?_writeEEPROM+2,c
  7427  001FF4  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7428                           
  7429                           ;main.c: 571: writeEEPROM( 0x43 + 61, 0 );
  7430  001FF8  6A09               	clrf	?_writeEEPROM+1,c
  7431  001FFA  0E80               	movlw	128
  7432  001FFC  6E08               	movwf	?_writeEEPROM,c
  7433  001FFE  0E00               	movlw	0
  7434  002000  6A0A               	clrf	?_writeEEPROM+2,c
  7435  002002  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7436                           
  7437                           ;main.c: 572: writeEEPROM( 0x43 + 62, 0 );
  7438  002006  6A09               	clrf	?_writeEEPROM+1,c
  7439  002008  0E81               	movlw	129
  7440  00200A  6E08               	movwf	?_writeEEPROM,c
  7441  00200C  0E00               	movlw	0
  7442  00200E  6A0A               	clrf	?_writeEEPROM+2,c
  7443  002010  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7444                           
  7445                           ;main.c: 573: writeEEPROM( 0x43 + 63, 0 );
  7446  002014  6A09               	clrf	?_writeEEPROM+1,c
  7447  002016  0E82               	movlw	130
  7448  002018  6E08               	movwf	?_writeEEPROM,c
  7449  00201A  0E00               	movlw	0
  7450  00201C  6A0A               	clrf	?_writeEEPROM+2,c
  7451  00201E  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7452                           
  7453                           ;main.c: 574: writeEEPROM( 0x43 + 64, 0 );
  7454  002022  6A09               	clrf	?_writeEEPROM+1,c
  7455  002024  0E83               	movlw	131
  7456  002026  6E08               	movwf	?_writeEEPROM,c
  7457  002028  0E00               	movlw	0
  7458  00202A  6A0A               	clrf	?_writeEEPROM+2,c
  7459  00202C  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7460                           
  7461                           ;main.c: 575: writeEEPROM( 0x43 + 65, 0 );
  7462  002030  6A09               	clrf	?_writeEEPROM+1,c
  7463  002032  0E84               	movlw	132
  7464  002034  6E08               	movwf	?_writeEEPROM,c
  7465  002036  0E00               	movlw	0
  7466  002038  6A0A               	clrf	?_writeEEPROM+2,c
  7467  00203A  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7468                           
  7469                           ;main.c: 579: for ( i = 0; i < 7; i++ ) {
  7470  00203E  6A0D               	clrf	init_app_eeprom@i,c
  7471  002040                     l185:
  7472                           
  7473                           ;main.c: 580: for ( j = 0; j < 8; j++ ) {
  7474  002040  6A0E               	clrf	init_app_eeprom@j,c
  7475  002042                     l4685:
  7476                           
  7477                           ;main.c: 581: writeEEPROM( 0x43 + 72 + i * 8 + j, 0 );
  7478  002042  500E               	movf	init_app_eeprom@j,w,c
  7479  002044  C00D  F00B         	movff	init_app_eeprom@i,??_init_app_eeprom
  7480  002048  6A0C               	clrf	(??_init_app_eeprom+1)& (0+255),c
  7481  00204A  90D8               	bcf	status,0,c
  7482  00204C  360B               	rlcf	??_init_app_eeprom,f,c
  7483  00204E  360C               	rlcf	??_init_app_eeprom+1,f,c
  7484  002050  90D8               	bcf	status,0,c
  7485  002052  360B               	rlcf	??_init_app_eeprom,f,c
  7486  002054  360C               	rlcf	??_init_app_eeprom+1,f,c
  7487  002056  90D8               	bcf	status,0,c
  7488  002058  360B               	rlcf	??_init_app_eeprom,f,c
  7489  00205A  360C               	rlcf	??_init_app_eeprom+1,f,c
  7490  00205C  260B               	addwf	??_init_app_eeprom,f,c
  7491  00205E  0E00               	movlw	0
  7492  002060  220C               	addwfc	??_init_app_eeprom+1,f,c
  7493  002062  0E8B               	movlw	139
  7494  002064  240B               	addwf	??_init_app_eeprom,w,c
  7495  002066  6E08               	movwf	?_writeEEPROM,c
  7496  002068  0E00               	movlw	0
  7497  00206A  200C               	addwfc	??_init_app_eeprom+1,w,c
  7498  00206C  6E09               	movwf	?_writeEEPROM+1,c
  7499  00206E  0E00               	movlw	0
  7500  002070  6A0A               	clrf	?_writeEEPROM+2,c
  7501  002072  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7502  002076  2A0E               	incf	init_app_eeprom@j,f,c
  7503  002078  0E07               	movlw	7
  7504  00207A  640E               	cpfsgt	init_app_eeprom@j,c
  7505  00207C  D7E2               	goto	l4685
  7506  00207E  2A0D               	incf	init_app_eeprom@i,f,c
  7507  002080  0E06               	movlw	6
  7508  002082  640D               	cpfsgt	init_app_eeprom@i,c
  7509  002084  D7DD               	goto	l185
  7510  002086  0C06               	retlw	6
  7511  002088                     __end_of_init_app_eeprom:
  7512                           	opt stack 0
  7513                           tblptru	equ	0xFF8
  7514                           prodh	equ	0xFF4
  7515                           prodl	equ	0xFF3
  7516                           postinc0	equ	0xFEE
  7517                           wreg	equ	0xFE8
  7518                           indf2	equ	0xFDF
  7519                           postinc2	equ	0xFDE
  7520                           postdec2	equ	0xFDD
  7521                           fsr2h	equ	0xFDA
  7522                           fsr2l	equ	0xFD9
  7523                           status	equ	0xFD8
  7524                           
  7525 ;; *************** function _vscp_getFamilyType *****************
  7526 ;; Defined at:
  7527 ;;		line 2463 in file "../main.c"
  7528 ;; Parameters:    Size  Location     Type
  7529 ;;		None
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;		None
  7532 ;; Return value:  Size  Location     Type
  7533 ;;                  4    7[COMRAM] unsigned long 
  7534 ;; Registers used:
  7535 ;;		None
  7536 ;; Tracked objects:
  7537 ;;		On entry : F/0
  7538 ;;		On exit  : F/0
  7539 ;;		Unchanged: F/0
  7540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7541 ;;      Params:         4       0       0       0       0       0       0
  7542 ;;      Locals:         0       0       0       0       0       0       0
  7543 ;;      Temps:          0       0       0       0       0       0       0
  7544 ;;      Totals:         4       0       0       0       0       0       0
  7545 ;;Total ram usage:        4 bytes
  7546 ;; Hardware stack levels used:    1
  7547 ;; Hardware stack levels required when called:    2
  7548 ;; This function calls:
  7549 ;;		Nothing
  7550 ;; This function is called by:
  7551 ;;		_vscp_writeStdReg
  7552 ;; This function uses a non-reentrant model
  7553 ;;
  7554                           
  7555                           	psect	text21
  7556  0041F4                     __ptext21:
  7557                           	opt stack 0
  7558  0041F4                     _vscp_getFamilyType:
  7559                           	opt stack 26
  7560                           
  7561                           ; BSR set to: 0
  7562                           ;main.c: 2464: return 0;
  7563                           
  7564                           ;incstack = 0
  7565                           ;incstack = 0
  7566  0041F4  6A08               	clrf	?_vscp_getFamilyType,c
  7567  0041F6  6A09               	clrf	?_vscp_getFamilyType+1,c
  7568  0041F8  6A0A               	clrf	?_vscp_getFamilyType+2,c
  7569  0041FA  6A0B               	clrf	?_vscp_getFamilyType+3,c
  7570                           
  7571                           ; BSR set to: 0
  7572  0041FC  0012               	return	
  7573  0041FE                     __end_of_vscp_getFamilyType:
  7574                           	opt stack 0
  7575                           tblptru	equ	0xFF8
  7576                           prodh	equ	0xFF4
  7577                           prodl	equ	0xFF3
  7578                           postinc0	equ	0xFEE
  7579                           wreg	equ	0xFE8
  7580                           indf2	equ	0xFDF
  7581                           postinc2	equ	0xFDE
  7582                           postdec2	equ	0xFDD
  7583                           fsr2h	equ	0xFDA
  7584                           fsr2l	equ	0xFD9
  7585                           status	equ	0xFD8
  7586                           
  7587 ;; *************** function _vscp_getFamilyCode *****************
  7588 ;; Defined at:
  7589 ;;		line 2454 in file "../main.c"
  7590 ;; Parameters:    Size  Location     Type
  7591 ;;		None
  7592 ;; Auto vars:     Size  Location     Type
  7593 ;;		None
  7594 ;; Return value:  Size  Location     Type
  7595 ;;                  4    7[COMRAM] unsigned long 
  7596 ;; Registers used:
  7597 ;;		None
  7598 ;; Tracked objects:
  7599 ;;		On entry : F/0
  7600 ;;		On exit  : F/0
  7601 ;;		Unchanged: F/0
  7602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7603 ;;      Params:         4       0       0       0       0       0       0
  7604 ;;      Locals:         0       0       0       0       0       0       0
  7605 ;;      Temps:          0       0       0       0       0       0       0
  7606 ;;      Totals:         4       0       0       0       0       0       0
  7607 ;;Total ram usage:        4 bytes
  7608 ;; Hardware stack levels used:    1
  7609 ;; Hardware stack levels required when called:    2
  7610 ;; This function calls:
  7611 ;;		Nothing
  7612 ;; This function is called by:
  7613 ;;		_vscp_writeStdReg
  7614 ;; This function uses a non-reentrant model
  7615 ;;
  7616                           
  7617                           	psect	text22
  7618  0041FE                     __ptext22:
  7619                           	opt stack 0
  7620  0041FE                     _vscp_getFamilyCode:
  7621                           	opt stack 26
  7622                           
  7623                           ; BSR set to: 0
  7624                           ;main.c: 2455: return 0L;
  7625                           
  7626                           ; BSR set to: 0
  7627                           ;incstack = 0
  7628                           ;incstack = 0
  7629  0041FE  6A08               	clrf	?_vscp_getFamilyCode,c
  7630  004200  6A09               	clrf	?_vscp_getFamilyCode+1,c
  7631  004202  6A0A               	clrf	?_vscp_getFamilyCode+2,c
  7632  004204  6A0B               	clrf	?_vscp_getFamilyCode+3,c
  7633                           
  7634                           ; BSR set to: 0
  7635  004206  0012               	return	
  7636  004208                     __end_of_vscp_getFamilyCode:
  7637                           	opt stack 0
  7638                           tblptru	equ	0xFF8
  7639                           prodh	equ	0xFF4
  7640                           prodl	equ	0xFF3
  7641                           postinc0	equ	0xFEE
  7642                           wreg	equ	0xFE8
  7643                           indf2	equ	0xFDF
  7644                           postinc2	equ	0xFDE
  7645                           postdec2	equ	0xFDD
  7646                           fsr2h	equ	0xFDA
  7647                           fsr2l	equ	0xFD9
  7648                           status	equ	0xFD8
  7649                           
  7650 ;; *************** function _vscp_setUserID *****************
  7651 ;; Defined at:
  7652 ;;		line 2286 in file "../main.c"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;  idx             1    wreg     unsigned char 
  7655 ;;  data            1   10[COMRAM] unsigned char 
  7656 ;; Auto vars:     Size  Location     Type
  7657 ;;  idx             1   11[COMRAM] unsigned char 
  7658 ;; Return value:  Size  Location     Type
  7659 ;;		None               void
  7660 ;; Registers used:
  7661 ;;		wreg, status,2, status,0, cstack
  7662 ;; Tracked objects:
  7663 ;;		On entry : F/0
  7664 ;;		On exit  : 0/0
  7665 ;;		Unchanged: 0/0
  7666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7667 ;;      Params:         1       0       0       0       0       0       0
  7668 ;;      Locals:         1       0       0       0       0       0       0
  7669 ;;      Temps:          0       0       0       0       0       0       0
  7670 ;;      Totals:         2       0       0       0       0       0       0
  7671 ;;Total ram usage:        2 bytes
  7672 ;; Hardware stack levels used:    1
  7673 ;; Hardware stack levels required when called:    3
  7674 ;; This function calls:
  7675 ;;		_writeEEPROM
  7676 ;; This function is called by:
  7677 ;;		_vscp_writeStdReg
  7678 ;; This function uses a non-reentrant model
  7679 ;;
  7680                           
  7681                           	psect	text23
  7682  0040D8                     __ptext23:
  7683                           	opt stack 0
  7684  0040D8                     _vscp_setUserID:
  7685                           	opt stack 25
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;incstack = 0
  7689                           ;incstack = 0
  7690                           ;vscp_setUserID@idx stored from wreg
  7691  0040D8  CFE8 F00C          	movff	wreg,vscp_setUserID@idx
  7692                           
  7693                           ; BSR set to: 0
  7694                           ;main.c: 2287: writeEEPROM( idx + 0x06, data );
  7695  0040DC  0E06               	movlw	6
  7696  0040DE  240C               	addwf	vscp_setUserID@idx,w,c
  7697  0040E0  6E08               	movwf	?_writeEEPROM,c
  7698  0040E2  6A09               	clrf	?_writeEEPROM+1,c
  7699  0040E4  0E00               	movlw	0
  7700  0040E6  2209               	addwfc	?_writeEEPROM+1,f,c
  7701  0040E8  C00B  F00A         	movff	vscp_setUserID@data,?_writeEEPROM+2
  7702  0040EC  EFB6  F01F         	goto	_writeEEPROM	;wreg free
  7703  0040F0                     __end_of_vscp_setUserID:
  7704                           	opt stack 0
  7705                           tblptru	equ	0xFF8
  7706                           prodh	equ	0xFF4
  7707                           prodl	equ	0xFF3
  7708                           postinc0	equ	0xFEE
  7709                           wreg	equ	0xFE8
  7710                           indf2	equ	0xFDF
  7711                           postinc2	equ	0xFDE
  7712                           postdec2	equ	0xFDD
  7713                           fsr2h	equ	0xFDA
  7714                           fsr2l	equ	0xFD9
  7715                           status	equ	0xFD8
  7716                           
  7717 ;; *************** function _vscp_setManufacturerId *****************
  7718 ;; Defined at:
  7719 ;;		line 820 in file "../main.c"
  7720 ;; Parameters:    Size  Location     Type
  7721 ;;  idx             1    wreg     unsigned char 
  7722 ;;  data            1   10[COMRAM] unsigned char 
  7723 ;; Auto vars:     Size  Location     Type
  7724 ;;  idx             1   11[COMRAM] unsigned char 
  7725 ;; Return value:  Size  Location     Type
  7726 ;;		None               void
  7727 ;; Registers used:
  7728 ;;		wreg, status,2, status,0, cstack
  7729 ;; Tracked objects:
  7730 ;;		On entry : F/0
  7731 ;;		On exit  : 0/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7734 ;;      Params:         1       0       0       0       0       0       0
  7735 ;;      Locals:         1       0       0       0       0       0       0
  7736 ;;      Temps:          0       0       0       0       0       0       0
  7737 ;;      Totals:         2       0       0       0       0       0       0
  7738 ;;Total ram usage:        2 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; Hardware stack levels required when called:    3
  7741 ;; This function calls:
  7742 ;;		_writeEEPROM
  7743 ;; This function is called by:
  7744 ;;		_vscp_writeStdReg
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           	psect	text24
  7749  00401E                     __ptext24:
  7750                           	opt stack 0
  7751  00401E                     _vscp_setManufacturerId:
  7752                           	opt stack 25
  7753                           
  7754                           ;incstack = 0
  7755                           ;incstack = 0
  7756                           ;vscp_setManufacturerId@idx stored from wreg
  7757  00401E  CFE8 F00C          	movff	wreg,vscp_setManufacturerId@idx
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;main.c: 821: if ( idx>7 ) return;
  7761  004022  0E07               	movlw	7
  7762  004024  640C               	cpfsgt	vscp_setManufacturerId@idx,c
  7763  004026  D001               	goto	l5619
  7764  004028  D00A               	goto	l251
  7765  00402A                     l5619:
  7766                           
  7767                           ; BSR set to: 0
  7768                           ;main.c: 822: writeEEPROM(0x0B + idx, data);
  7769  00402A  0E0B               	movlw	11
  7770  00402C  240C               	addwf	vscp_setManufacturerId@idx,w,c
  7771  00402E  6E08               	movwf	?_writeEEPROM,c
  7772  004030  6A09               	clrf	?_writeEEPROM+1,c
  7773  004032  0E00               	movlw	0
  7774  004034  2209               	addwfc	?_writeEEPROM+1,f,c
  7775  004036  C00B  F00A         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
  7776  00403A  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7777  00403E                     l251:
  7778  00403E  0012               	return	
  7779  004040                     __end_of_vscp_setManufacturerId:
  7780                           	opt stack 0
  7781                           tblptru	equ	0xFF8
  7782                           prodh	equ	0xFF4
  7783                           prodl	equ	0xFF3
  7784                           postinc0	equ	0xFEE
  7785                           wreg	equ	0xFE8
  7786                           indf2	equ	0xFDF
  7787                           postinc2	equ	0xFDE
  7788                           postdec2	equ	0xFDD
  7789                           fsr2h	equ	0xFDA
  7790                           fsr2l	equ	0xFD9
  7791                           status	equ	0xFD8
  7792                           
  7793 ;; *************** function _vscp_setGUID *****************
  7794 ;; Defined at:
  7795 ;;		line 808 in file "../main.c"
  7796 ;; Parameters:    Size  Location     Type
  7797 ;;  idx             1    wreg     unsigned char 
  7798 ;;  data            1   10[COMRAM] unsigned char 
  7799 ;; Auto vars:     Size  Location     Type
  7800 ;;  idx             1   11[COMRAM] unsigned char 
  7801 ;; Return value:  Size  Location     Type
  7802 ;;		None               void
  7803 ;; Registers used:
  7804 ;;		wreg, status,2, status,0, cstack
  7805 ;; Tracked objects:
  7806 ;;		On entry : F/0
  7807 ;;		On exit  : 0/0
  7808 ;;		Unchanged: 0/0
  7809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7810 ;;      Params:         1       0       0       0       0       0       0
  7811 ;;      Locals:         1       0       0       0       0       0       0
  7812 ;;      Temps:          0       0       0       0       0       0       0
  7813 ;;      Totals:         2       0       0       0       0       0       0
  7814 ;;Total ram usage:        2 bytes
  7815 ;; Hardware stack levels used:    1
  7816 ;; Hardware stack levels required when called:    3
  7817 ;; This function calls:
  7818 ;;		_writeEEPROM
  7819 ;; This function is called by:
  7820 ;;		_vscp_writeStdReg
  7821 ;; This function uses a non-reentrant model
  7822 ;;
  7823                           
  7824                           	psect	text25
  7825  004040                     __ptext25:
  7826                           	opt stack 0
  7827  004040                     _vscp_setGUID:
  7828                           	opt stack 25
  7829                           
  7830                           ;incstack = 0
  7831                           ;incstack = 0
  7832                           ;vscp_setGUID@idx stored from wreg
  7833  004040  CFE8 F00C          	movff	wreg,vscp_setGUID@idx
  7834                           
  7835                           ; BSR set to: 0
  7836                           ;main.c: 809: if ( idx>15 ) return;
  7837  004044  0E0F               	movlw	15
  7838  004046  640C               	cpfsgt	vscp_setGUID@idx,c
  7839  004048  D001               	goto	l5613
  7840  00404A  D00A               	goto	l247
  7841  00404C                     l5613:
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;main.c: 810: writeEEPROM(0x13 + idx, data);
  7845  00404C  0E13               	movlw	19
  7846  00404E  240C               	addwf	vscp_setGUID@idx,w,c
  7847  004050  6E08               	movwf	?_writeEEPROM,c
  7848  004052  6A09               	clrf	?_writeEEPROM+1,c
  7849  004054  0E00               	movlw	0
  7850  004056  2209               	addwfc	?_writeEEPROM+1,f,c
  7851  004058  C00B  F00A         	movff	vscp_setGUID@data,?_writeEEPROM+2
  7852  00405C  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7853  004060                     l247:
  7854  004060  0012               	return	
  7855  004062                     __end_of_vscp_setGUID:
  7856                           	opt stack 0
  7857                           tblptru	equ	0xFF8
  7858                           prodh	equ	0xFF4
  7859                           prodl	equ	0xFF3
  7860                           postinc0	equ	0xFEE
  7861                           wreg	equ	0xFE8
  7862                           indf2	equ	0xFDF
  7863                           postinc2	equ	0xFDE
  7864                           postdec2	equ	0xFDD
  7865                           fsr2h	equ	0xFDA
  7866                           fsr2l	equ	0xFD9
  7867                           status	equ	0xFD8
  7868                           
  7869 ;; *************** function _vscp_writeAppReg *****************
  7870 ;; Defined at:
  7871 ;;		line 971 in file "../main.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;  reg             1    wreg     unsigned char 
  7874 ;;  val             1   80[COMRAM] unsigned char 
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;  reg             1   29[BANK0 ] unsigned char 
  7877 ;;  val             1   26[BANK0 ] unsigned char 
  7878 ;;  rv              1   28[BANK0 ] unsigned char 
  7879 ;;  bOn             1   27[BANK0 ] enum E15660
  7880 ;;  bInfoEvent      1   25[BANK0 ] enum E15660
  7881 ;; Return value:  Size  Location     Type
  7882 ;;                  1    wreg      unsigned char 
  7883 ;; Registers used:
  7884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7885 ;; Tracked objects:
  7886 ;;		On entry : F/0
  7887 ;;		On exit  : F/0
  7888 ;;		Unchanged: 0/0
  7889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7890 ;;      Params:         1       0       0       0       0       0       0
  7891 ;;      Locals:         0       5       0       0       0       0       0
  7892 ;;      Temps:          0       3       0       0       0       0       0
  7893 ;;      Totals:         1       8       0       0       0       0       0
  7894 ;;Total ram usage:        9 bytes
  7895 ;; Hardware stack levels used:    1
  7896 ;; Hardware stack levels required when called:    7
  7897 ;; This function calls:
  7898 ;;		_writeEEPROM
  7899 ;;		_readEEPROM
  7900 ;;		_SendInformationEvent
  7901 ;;		_calculateSetFilterMask
  7902 ;; This function is called by:
  7903 ;;		_vscp_writeRegister
  7904 ;;		_vscp_handleProtocolEvent
  7905 ;; This function uses a non-reentrant model
  7906 ;;
  7907                           
  7908                           	psect	text26
  7909  0008DC                     __ptext26:
  7910                           	opt stack 0
  7911  0008DC                     _vscp_writeAppReg:
  7912                           	opt stack 21
  7913                           
  7914                           ;incstack = 0
  7915                           ;incstack = 0
  7916                           ;vscp_writeAppReg@reg stored from wreg
  7917  0008DC  CFE8 F0CE          	movff	wreg,vscp_writeAppReg@reg
  7918                           
  7919                           ; BSR set to: 0
  7920                           ;main.c: 972: uint8_t rv;
  7921                           ;main.c: 973: BOOL bInfoEvent = 0;
  7922  0008E0  6BCA               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7923                           
  7924                           ;main.c: 974: BOOL bOn = 0;
  7925  0008E2  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  7926                           
  7927                           ; BSR set to: 0
  7928                           ;main.c: 976: rv = ~val;
  7929  0008E4  1C51               	comf	vscp_writeAppReg@val,w,c
  7930  0008E6  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  7931                           
  7932                           ; BSR set to: 0
  7933                           ;main.c: 979: if ( reg == 0 ) {
  7934  0008E8  67CE               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  7935  0008EA  D00E               	goto	l9885
  7936                           
  7937                           ; BSR set to: 0
  7938                           ;main.c: 980: writeEEPROM(0x43 + 0, val);
  7939  0008EC  6A09               	clrf	?_writeEEPROM+1,c
  7940  0008EE  0E43               	movlw	67
  7941  0008F0  6E08               	movwf	?_writeEEPROM,c
  7942  0008F2  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  7943  0008F6  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7944                           
  7945                           ;main.c: 981: rv = readEEPROM(0x43 + 0);
  7946  0008FA  6A09               	clrf	?_readEEPROM+1,c
  7947  0008FC  0E43               	movlw	67
  7948  0008FE  6E08               	movwf	?_readEEPROM,c
  7949  000900  ECDE  F020         	call	_readEEPROM	;wreg free
  7950  000904  EF0A  F009         	goto	L25
  7951  000908                     l9885:
  7952                           
  7953                           ; BSR set to: 0
  7954                           ;main.c: 983: else if ( reg == 1 ) {
  7955  000908  05CE               	decf	vscp_writeAppReg@reg& (0+255),w,b
  7956  00090A  E10E               	bnz	l9889
  7957                           
  7958                           ; BSR set to: 0
  7959                           ;main.c: 985: writeEEPROM(0x43 + 1, val);
  7960  00090C  6A09               	clrf	?_writeEEPROM+1,c
  7961  00090E  0E44               	movlw	68
  7962  000910  6E08               	movwf	?_writeEEPROM,c
  7963  000912  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  7964  000916  ECB6  F01F         	call	_writeEEPROM	;wreg free
  7965                           
  7966                           ;main.c: 986: rv = readEEPROM(0x43 + 1);
  7967  00091A  6A09               	clrf	?_readEEPROM+1,c
  7968  00091C  0E44               	movlw	68
  7969  00091E  6E08               	movwf	?_readEEPROM,c
  7970  000920  ECDE  F020         	call	_readEEPROM	;wreg free
  7971  000924  EF0A  F009         	goto	L25
  7972  000928                     l9889:
  7973                           
  7974                           ; BSR set to: 0
  7975                           ;main.c: 989: else if ( (reg >= 2) && (reg <= 9) ) {
  7976  000928  0E01               	movlw	1
  7977  00092A  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  7978  00092C  D182               	goto	l10041
  7979                           
  7980                           ; BSR set to: 0
  7981  00092E  0E0A               	movlw	10
  7982  000930  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  7983  000932  D17F               	goto	l10041
  7984                           
  7985                           ; BSR set to: 0
  7986                           ;main.c: 991: if ( readEEPROM( 0x43 +
  7987                           ;main.c: 992: 10 + reg - 2 ) &
  7988                           ;main.c: 993: 0x80 ) {
  7989  000934  0E4B               	movlw	75
  7990  000936  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  7991  000938  6E08               	movwf	?_readEEPROM,c
  7992  00093A  6A09               	clrf	?_readEEPROM+1,c
  7993  00093C  0E00               	movlw	0
  7994  00093E  2209               	addwfc	?_readEEPROM+1,f,c
  7995  000940  ECDE  F020         	call	_readEEPROM	;wreg free
  7996  000944  0100               	movlb	0	; () banked
  7997  000946  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  7998  000948  BFC7               	btfsc	??_vscp_writeAppReg& (0+255),7,b
  7999  00094A  D15E               	goto	l10039
  8000  00094C  EF0C  F009         	goto	l10217
  8001  000950                     l9897:
  8002                           
  8003                           ; BSR set to: 0
  8004                           ;main.c: 1000: bInfoEvent = 1;
  8005  000950  0E01               	movlw	1
  8006  000952  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8007                           
  8008                           ; BSR set to: 0
  8009                           ;main.c: 1002: if ( 1 == val ) {
  8010  000954  0451               	decf	vscp_writeAppReg@val,w,c
  8011  000956  E128               	bnz	l304
  8012                           
  8013                           ; BSR set to: 0
  8014                           ;main.c: 1004: LATBbits.LATB4 = 1;
  8015  000958  888A               	bsf	3978,4,c	;volatile
  8016                           
  8017                           ; BSR set to: 0
  8018                           ;main.c: 1005: rv = LATBbits.LATB4;
  8019  00095A  0E00               	movlw	0
  8020  00095C  B88A               	btfsc	3978,4,c	;volatile
  8021  00095E  0E01               	movlw	1
  8022  000960  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8023                           
  8024                           ; BSR set to: 0
  8025                           ;main.c: 1006: bOn = 1;
  8026  000962  0E01               	movlw	1
  8027  000964  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8028                           
  8029                           ; BSR set to: 0
  8030                           ;main.c: 1009: if ( readEEPROM( 0x43 + 10 ) & 0x04 ) {
  8031  000966  6A09               	clrf	?_readEEPROM+1,c
  8032  000968  0E4D               	movlw	77
  8033  00096A  6E08               	movwf	?_readEEPROM,c
  8034  00096C  ECDE  F020         	call	_readEEPROM	;wreg free
  8035  000970  0100               	movlb	0	; () banked
  8036  000972  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8037  000974  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8038  000976  EF0C  F009         	goto	l10217
  8039  00097A                     l9909:
  8040                           
  8041                           ; BSR set to: 0
  8042                           ;main.c: 1010: relay_protection_timer[ 0 ] =
  8043                           ;main.c: 1011: readEEPROM( 0x43 + 34 ) * 256 +
  8044                           ;main.c: 1012: readEEPROM( 0x43 + 35 );
  8045  00097A  6A09               	clrf	?_readEEPROM+1,c
  8046  00097C  0E66               	movlw	102
  8047  00097E  6E08               	movwf	?_readEEPROM,c
  8048  000980  ECDE  F020         	call	_readEEPROM	;wreg free
  8049  000984  0100               	movlb	0	; () banked
  8050  000986  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8051  000988  6A09               	clrf	?_readEEPROM+1,c
  8052  00098A  0E65               	movlw	101
  8053  00098C  6E08               	movwf	?_readEEPROM,c
  8054  00098E  ECDE  F020         	call	_readEEPROM	;wreg free
  8055  000992  0100               	movlb	0	; () banked
  8056  000994  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8057  000996  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8058  000998  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8059  00099A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8060  00099C  6F60               	movwf	_relay_protection_timer& (0+255),b
  8061  00099E  0E00               	movlw	0
  8062  0009A0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8063  0009A2  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  8064  0009A4  EF0C  F009         	goto	l10217
  8065  0009A8                     l304:
  8066                           
  8067                           ; BSR set to: 0
  8068                           ;main.c: 1016: else if (0 == val) {
  8069  0009A8  6651               	tstfsz	vscp_writeAppReg@val,c
  8070  0009AA  EF0C  F009         	goto	l10217
  8071                           
  8072                           ; BSR set to: 0
  8073                           ;main.c: 1017: LATBbits.LATB4 = 0;
  8074  0009AE  988A               	bcf	3978,4,c	;volatile
  8075                           
  8076                           ; BSR set to: 0
  8077                           ;main.c: 1018: rv = LATBbits.LATB4;
  8078  0009B0  0E00               	movlw	0
  8079  0009B2  B88A               	btfsc	3978,4,c	;volatile
  8080  0009B4  0E01               	movlw	1
  8081  0009B6  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8082  0009B8                     l9915:
  8083                           
  8084                           ; BSR set to: 0
  8085                           ;main.c: 1019: bOn = 0;
  8086  0009B8  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8087  0009BA  EF0C  F009         	goto	l10217
  8088  0009BE                     l9917:
  8089                           
  8090                           ; BSR set to: 0
  8091                           ;main.c: 1026: bInfoEvent = 1;
  8092  0009BE  0E01               	movlw	1
  8093  0009C0  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8094                           
  8095                           ; BSR set to: 0
  8096                           ;main.c: 1028: if (1 == val) {
  8097  0009C2  0451               	decf	vscp_writeAppReg@val,w,c
  8098  0009C4  E11E               	bnz	l310
  8099                           
  8100                           ; BSR set to: 0
  8101                           ;main.c: 1030: LATBbits.LATB1 = 1;
  8102  0009C6  828A               	bsf	3978,1,c	;volatile
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;main.c: 1031: rv = LATBbits.LATB1;
  8106  0009C8  0E00               	movlw	0
  8107  0009CA  B28A               	btfsc	3978,1,c	;volatile
  8108  0009CC  0E01               	movlw	1
  8109  0009CE  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8110                           
  8111                           ; BSR set to: 0
  8112                           ;main.c: 1032: bOn = 1;
  8113  0009D0  0E01               	movlw	1
  8114  0009D2  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8115                           
  8116                           ; BSR set to: 0
  8117                           ;main.c: 1034: if (readEEPROM(0x43 + 11) & 0x04) {
  8118  0009D4  6A09               	clrf	?_readEEPROM+1,c
  8119  0009D6  0E4E               	movlw	78
  8120  0009D8  6E08               	movwf	?_readEEPROM,c
  8121  0009DA  ECDE  F020         	call	_readEEPROM	;wreg free
  8122  0009DE  0100               	movlb	0	; () banked
  8123  0009E0  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8124  0009E2  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8125  0009E4  EF0C  F009         	goto	l10217
  8126  0009E8                     l9929:
  8127                           
  8128                           ; BSR set to: 0
  8129                           ;main.c: 1035: relay_protection_timer[ 1 ] =
  8130                           ;main.c: 1036: readEEPROM(0x43 + 36) * 256 +
  8131                           ;main.c: 1037: readEEPROM(0x43 + 37);
  8132  0009E8  6A09               	clrf	?_readEEPROM+1,c
  8133  0009EA  0E68               	movlw	104
  8134  0009EC  6E08               	movwf	?_readEEPROM,c
  8135  0009EE  ECDE  F020         	call	_readEEPROM	;wreg free
  8136  0009F2  0100               	movlb	0	; () banked
  8137  0009F4  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8138  0009F6  6A09               	clrf	?_readEEPROM+1,c
  8139  0009F8  0E67               	movlw	103
  8140  0009FA  6E08               	movwf	?_readEEPROM,c
  8141  0009FC  ECDE  F020         	call	_readEEPROM	;wreg free
  8142  000A00  D18E               	goto	L26
  8143  000A02                     l310:
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;main.c: 1041: else if (0 == val) {
  8147  000A02  6651               	tstfsz	vscp_writeAppReg@val,c
  8148  000A04  EF0C  F009         	goto	l10217
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;main.c: 1042: LATBbits.LATB1 = 0;
  8152  000A08  928A               	bcf	3978,1,c	;volatile
  8153                           
  8154                           ; BSR set to: 0
  8155                           ;main.c: 1043: rv = LATBbits.LATB1;
  8156  000A0A  0E00               	movlw	0
  8157  000A0C  B28A               	btfsc	3978,1,c	;volatile
  8158  000A0E  0E01               	movlw	1
  8159  000A10  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8160  000A12  D7D2               	goto	l9915
  8161  000A14                     l9937:
  8162                           
  8163                           ; BSR set to: 0
  8164                           ;main.c: 1051: bInfoEvent = 1;
  8165  000A14  0E01               	movlw	1
  8166  000A16  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;main.c: 1053: if (1 == val) {
  8170  000A18  0451               	decf	vscp_writeAppReg@val,w,c
  8171  000A1A  E126               	bnz	l315
  8172                           
  8173                           ; BSR set to: 0
  8174                           ;main.c: 1055: LATBbits.LATB0 = 1;
  8175  000A1C  808A               	bsf	3978,0,c	;volatile
  8176                           
  8177                           ; BSR set to: 0
  8178                           ;main.c: 1056: rv = LATBbits.LATB0;
  8179  000A1E  0E00               	movlw	0
  8180  000A20  B08A               	btfsc	3978,0,c	;volatile
  8181  000A22  0E01               	movlw	1
  8182  000A24  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;main.c: 1057: bOn = 1;
  8186  000A26  0E01               	movlw	1
  8187  000A28  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8188                           
  8189                           ; BSR set to: 0
  8190                           ;main.c: 1059: if ( readEEPROM(0x43 + 12) & 0x04) {
  8191  000A2A  6A09               	clrf	?_readEEPROM+1,c
  8192  000A2C  0E4F               	movlw	79
  8193  000A2E  6E08               	movwf	?_readEEPROM,c
  8194  000A30  ECDE  F020         	call	_readEEPROM	;wreg free
  8195  000A34  0100               	movlb	0	; () banked
  8196  000A36  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8197  000A38  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8198  000A3A  D3EE               	goto	l10217
  8199  000A3C                     l9949:
  8200                           
  8201                           ; BSR set to: 0
  8202                           ;main.c: 1060: relay_protection_timer[ 2 ] =
  8203                           ;main.c: 1061: readEEPROM(0x43 + 38) * 256 +
  8204                           ;main.c: 1062: readEEPROM(0x43 + 39);
  8205  000A3C  6A09               	clrf	?_readEEPROM+1,c
  8206  000A3E  0E6A               	movlw	106
  8207  000A40  6E08               	movwf	?_readEEPROM,c
  8208  000A42  ECDE  F020         	call	_readEEPROM	;wreg free
  8209  000A46  0100               	movlb	0	; () banked
  8210  000A48  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8211  000A4A  6A09               	clrf	?_readEEPROM+1,c
  8212  000A4C  0E69               	movlw	105
  8213  000A4E  6E08               	movwf	?_readEEPROM,c
  8214  000A50  ECDE  F020         	call	_readEEPROM	;wreg free
  8215  000A54  0100               	movlb	0	; () banked
  8216  000A56  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8217  000A58  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8218  000A5A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8219  000A5C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8220  000A5E  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  8221  000A60  0E00               	movlw	0
  8222  000A62  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8223  000A64  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  8224  000A66  D3D8               	goto	l10217
  8225  000A68                     l315:
  8226                           
  8227                           ; BSR set to: 0
  8228                           ;main.c: 1066: else if (0 == val) {
  8229  000A68  6651               	tstfsz	vscp_writeAppReg@val,c
  8230  000A6A  D3D6               	goto	l10217
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;main.c: 1067: LATBbits.LATB0 = 0;
  8234  000A6C  908A               	bcf	3978,0,c	;volatile
  8235                           
  8236                           ; BSR set to: 0
  8237                           ;main.c: 1068: rv = LATBbits.LATB0;
  8238  000A6E  0E00               	movlw	0
  8239  000A70  B08A               	btfsc	3978,0,c	;volatile
  8240  000A72  0E01               	movlw	1
  8241  000A74  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8242  000A76  D7A0               	goto	l9915
  8243  000A78                     l9957:
  8244                           
  8245                           ; BSR set to: 0
  8246                           ;main.c: 1077: bInfoEvent = 1;
  8247  000A78  0E01               	movlw	1
  8248  000A7A  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;main.c: 1079: if (1 == val) {
  8252  000A7C  0451               	decf	vscp_writeAppReg@val,w,c
  8253  000A7E  E126               	bnz	l320
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;main.c: 1081: LATCbits.LATC7 = 1;
  8257  000A80  8E8B               	bsf	3979,7,c	;volatile
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;main.c: 1082: rv = LATCbits.LATC7;
  8261  000A82  0E00               	movlw	0
  8262  000A84  BE8B               	btfsc	3979,7,c	;volatile
  8263  000A86  0E01               	movlw	1
  8264  000A88  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8265                           
  8266                           ; BSR set to: 0
  8267                           ;main.c: 1083: bOn = 1;
  8268  000A8A  0E01               	movlw	1
  8269  000A8C  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8270                           
  8271                           ; BSR set to: 0
  8272                           ;main.c: 1085: if (readEEPROM(0x43 + 13) & 0x04) {
  8273  000A8E  6A09               	clrf	?_readEEPROM+1,c
  8274  000A90  0E50               	movlw	80
  8275  000A92  6E08               	movwf	?_readEEPROM,c
  8276  000A94  ECDE  F020         	call	_readEEPROM	;wreg free
  8277  000A98  0100               	movlb	0	; () banked
  8278  000A9A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8279  000A9C  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8280  000A9E  D3BC               	goto	l10217
  8281  000AA0                     l9969:
  8282                           
  8283                           ; BSR set to: 0
  8284                           ;main.c: 1086: relay_protection_timer[ 3 ] =
  8285                           ;main.c: 1087: readEEPROM(0x43 + 40) * 256 +
  8286                           ;main.c: 1088: readEEPROM(0x43 + 41);
  8287  000AA0  6A09               	clrf	?_readEEPROM+1,c
  8288  000AA2  0E6C               	movlw	108
  8289  000AA4  6E08               	movwf	?_readEEPROM,c
  8290  000AA6  ECDE  F020         	call	_readEEPROM	;wreg free
  8291  000AAA  0100               	movlb	0	; () banked
  8292  000AAC  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8293  000AAE  6A09               	clrf	?_readEEPROM+1,c
  8294  000AB0  0E6B               	movlw	107
  8295  000AB2  6E08               	movwf	?_readEEPROM,c
  8296  000AB4  ECDE  F020         	call	_readEEPROM	;wreg free
  8297  000AB8  0100               	movlb	0	; () banked
  8298  000ABA  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8299  000ABC  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8300  000ABE  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8301  000AC0  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8302  000AC2  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  8303  000AC4  0E00               	movlw	0
  8304  000AC6  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8305  000AC8  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  8306  000ACA  D3A6               	goto	l10217
  8307  000ACC                     l320:
  8308                           
  8309                           ; BSR set to: 0
  8310                           ;main.c: 1092: else if (0 == val) {
  8311  000ACC  6651               	tstfsz	vscp_writeAppReg@val,c
  8312  000ACE  D3A4               	goto	l10217
  8313                           
  8314                           ; BSR set to: 0
  8315                           ;main.c: 1093: LATCbits.LATC7 = 0;
  8316  000AD0  9E8B               	bcf	3979,7,c	;volatile
  8317                           
  8318                           ; BSR set to: 0
  8319                           ;main.c: 1094: rv = LATCbits.LATC7;
  8320  000AD2  0E00               	movlw	0
  8321  000AD4  BE8B               	btfsc	3979,7,c	;volatile
  8322  000AD6  0E01               	movlw	1
  8323  000AD8  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8324  000ADA  D76E               	goto	l9915
  8325  000ADC                     l9977:
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;main.c: 1103: bInfoEvent = 1;
  8329  000ADC  0E01               	movlw	1
  8330  000ADE  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8331                           
  8332                           ; BSR set to: 0
  8333                           ;main.c: 1105: if (1 == val) {
  8334  000AE0  0451               	decf	vscp_writeAppReg@val,w,c
  8335  000AE2  E126               	bnz	l325
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;main.c: 1107: LATCbits.LATC6 = 1;
  8339  000AE4  8C8B               	bsf	3979,6,c	;volatile
  8340                           
  8341                           ; BSR set to: 0
  8342                           ;main.c: 1108: rv = LATCbits.LATC6;
  8343  000AE6  0E00               	movlw	0
  8344  000AE8  BC8B               	btfsc	3979,6,c	;volatile
  8345  000AEA  0E01               	movlw	1
  8346  000AEC  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8347                           
  8348                           ; BSR set to: 0
  8349                           ;main.c: 1109: bOn = 1;
  8350  000AEE  0E01               	movlw	1
  8351  000AF0  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8352                           
  8353                           ; BSR set to: 0
  8354                           ;main.c: 1111: if (readEEPROM(0x43 + 14) & 0x04) {
  8355  000AF2  6A09               	clrf	?_readEEPROM+1,c
  8356  000AF4  0E51               	movlw	81
  8357  000AF6  6E08               	movwf	?_readEEPROM,c
  8358  000AF8  ECDE  F020         	call	_readEEPROM	;wreg free
  8359  000AFC  0100               	movlb	0	; () banked
  8360  000AFE  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8361  000B00  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8362  000B02  D38A               	goto	l10217
  8363  000B04                     l9989:
  8364                           
  8365                           ; BSR set to: 0
  8366                           ;main.c: 1112: relay_protection_timer[ 4 ] =
  8367                           ;main.c: 1113: readEEPROM(0x43 + 42) * 256 +
  8368                           ;main.c: 1114: readEEPROM(0x43 + 43);
  8369  000B04  6A09               	clrf	?_readEEPROM+1,c
  8370  000B06  0E6E               	movlw	110
  8371  000B08  6E08               	movwf	?_readEEPROM,c
  8372  000B0A  ECDE  F020         	call	_readEEPROM	;wreg free
  8373  000B0E  0100               	movlb	0	; () banked
  8374  000B10  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8375  000B12  6A09               	clrf	?_readEEPROM+1,c
  8376  000B14  0E6D               	movlw	109
  8377  000B16  6E08               	movwf	?_readEEPROM,c
  8378  000B18  ECDE  F020         	call	_readEEPROM	;wreg free
  8379  000B1C  0100               	movlb	0	; () banked
  8380  000B1E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8381  000B20  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8382  000B22  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8383  000B24  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8384  000B26  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  8385  000B28  0E00               	movlw	0
  8386  000B2A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8387  000B2C  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  8388  000B2E  D374               	goto	l10217
  8389  000B30                     l325:
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;main.c: 1118: else if (0 == val) {
  8393  000B30  6651               	tstfsz	vscp_writeAppReg@val,c
  8394  000B32  D372               	goto	l10217
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;main.c: 1119: LATCbits.LATC6 = 0;
  8398  000B34  9C8B               	bcf	3979,6,c	;volatile
  8399                           
  8400                           ; BSR set to: 0
  8401                           ;main.c: 1120: rv = LATCbits.LATC6;
  8402  000B36  0E00               	movlw	0
  8403  000B38  BC8B               	btfsc	3979,6,c	;volatile
  8404  000B3A  0E01               	movlw	1
  8405  000B3C  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8406  000B3E  D73C               	goto	l9915
  8407  000B40                     l9997:
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;main.c: 1129: bInfoEvent = 1;
  8411  000B40  0E01               	movlw	1
  8412  000B42  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8413                           
  8414                           ; BSR set to: 0
  8415                           ;main.c: 1131: if (1 == val) {
  8416  000B44  0451               	decf	vscp_writeAppReg@val,w,c
  8417  000B46  E126               	bnz	l330
  8418                           
  8419                           ; BSR set to: 0
  8420                           ;main.c: 1133: LATCbits.LATC5 = 1;
  8421  000B48  8A8B               	bsf	3979,5,c	;volatile
  8422                           
  8423                           ; BSR set to: 0
  8424                           ;main.c: 1134: rv = LATCbits.LATC5;
  8425  000B4A  0E00               	movlw	0
  8426  000B4C  BA8B               	btfsc	3979,5,c	;volatile
  8427  000B4E  0E01               	movlw	1
  8428  000B50  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8429                           
  8430                           ; BSR set to: 0
  8431                           ;main.c: 1135: bOn = 1;
  8432  000B52  0E01               	movlw	1
  8433  000B54  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8434                           
  8435                           ; BSR set to: 0
  8436                           ;main.c: 1137: if (readEEPROM(0x43 + 15) & 0x04) {
  8437  000B56  6A09               	clrf	?_readEEPROM+1,c
  8438  000B58  0E52               	movlw	82
  8439  000B5A  6E08               	movwf	?_readEEPROM,c
  8440  000B5C  ECDE  F020         	call	_readEEPROM	;wreg free
  8441  000B60  0100               	movlb	0	; () banked
  8442  000B62  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8443  000B64  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8444  000B66  D358               	goto	l10217
  8445  000B68                     l10009:
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;main.c: 1138: relay_protection_timer[ 5 ] =
  8449                           ;main.c: 1139: readEEPROM(0x43 + 44) * 256 +
  8450                           ;main.c: 1140: readEEPROM(0x43 + 45);
  8451  000B68  6A09               	clrf	?_readEEPROM+1,c
  8452  000B6A  0E70               	movlw	112
  8453  000B6C  6E08               	movwf	?_readEEPROM,c
  8454  000B6E  ECDE  F020         	call	_readEEPROM	;wreg free
  8455  000B72  0100               	movlb	0	; () banked
  8456  000B74  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8457  000B76  6A09               	clrf	?_readEEPROM+1,c
  8458  000B78  0E6F               	movlw	111
  8459  000B7A  6E08               	movwf	?_readEEPROM,c
  8460  000B7C  ECDE  F020         	call	_readEEPROM	;wreg free
  8461  000B80  0100               	movlb	0	; () banked
  8462  000B82  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8463  000B84  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8464  000B86  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8465  000B88  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8466  000B8A  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  8467  000B8C  0E00               	movlw	0
  8468  000B8E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8469  000B90  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  8470  000B92  D342               	goto	l10217
  8471  000B94                     l330:
  8472                           
  8473                           ; BSR set to: 0
  8474                           ;main.c: 1144: else if (0 == val) {
  8475  000B94  6651               	tstfsz	vscp_writeAppReg@val,c
  8476  000B96  D340               	goto	l10217
  8477                           
  8478                           ; BSR set to: 0
  8479                           ;main.c: 1145: LATCbits.LATC5 = 0;
  8480  000B98  9A8B               	bcf	3979,5,c	;volatile
  8481                           
  8482                           ; BSR set to: 0
  8483                           ;main.c: 1146: rv = LATCbits.LATC5;
  8484  000B9A  0E00               	movlw	0
  8485  000B9C  BA8B               	btfsc	3979,5,c	;volatile
  8486  000B9E  0E01               	movlw	1
  8487  000BA0  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8488  000BA2  D70A               	goto	l9915
  8489  000BA4                     l10017:
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;main.c: 1154: bInfoEvent = 1;
  8493  000BA4  0E01               	movlw	1
  8494  000BA6  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8495                           
  8496                           ; BSR set to: 0
  8497                           ;main.c: 1156: if (1 == val) {
  8498  000BA8  0451               	decf	vscp_writeAppReg@val,w,c
  8499  000BAA  E126               	bnz	l335
  8500                           
  8501                           ; BSR set to: 0
  8502                           ;main.c: 1158: LATCbits.LATC4 = 1;
  8503  000BAC  888B               	bsf	3979,4,c	;volatile
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;main.c: 1159: rv = LATCbits.LATC4;
  8507  000BAE  0E00               	movlw	0
  8508  000BB0  B88B               	btfsc	3979,4,c	;volatile
  8509  000BB2  0E01               	movlw	1
  8510  000BB4  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8511                           
  8512                           ; BSR set to: 0
  8513                           ;main.c: 1160: bOn = 1;
  8514  000BB6  0E01               	movlw	1
  8515  000BB8  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;main.c: 1162: if (readEEPROM(0x43 + 16) & 0x04) {
  8519  000BBA  6A09               	clrf	?_readEEPROM+1,c
  8520  000BBC  0E53               	movlw	83
  8521  000BBE  6E08               	movwf	?_readEEPROM,c
  8522  000BC0  ECDE  F020         	call	_readEEPROM	;wreg free
  8523  000BC4  0100               	movlb	0	; () banked
  8524  000BC6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8525  000BC8  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8526  000BCA  D326               	goto	l10217
  8527  000BCC                     l10029:
  8528                           
  8529                           ; BSR set to: 0
  8530                           ;main.c: 1163: relay_protection_timer[ 6 ] =
  8531                           ;main.c: 1164: readEEPROM(0x43 + 46) * 256 +
  8532                           ;main.c: 1165: readEEPROM(0x43 + 47);
  8533  000BCC  6A09               	clrf	?_readEEPROM+1,c
  8534  000BCE  0E72               	movlw	114
  8535  000BD0  6E08               	movwf	?_readEEPROM,c
  8536  000BD2  ECDE  F020         	call	_readEEPROM	;wreg free
  8537  000BD6  0100               	movlb	0	; () banked
  8538  000BD8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8539  000BDA  6A09               	clrf	?_readEEPROM+1,c
  8540  000BDC  0E71               	movlw	113
  8541  000BDE  6E08               	movwf	?_readEEPROM,c
  8542  000BE0  ECDE  F020         	call	_readEEPROM	;wreg free
  8543  000BE4  0100               	movlb	0	; () banked
  8544  000BE6  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8545  000BE8  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8546  000BEA  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8547  000BEC  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8548  000BEE  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  8549  000BF0  0E00               	movlw	0
  8550  000BF2  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8551  000BF4  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  8552  000BF6  D310               	goto	l10217
  8553  000BF8                     l335:
  8554                           
  8555                           ; BSR set to: 0
  8556                           ;main.c: 1169: else if (0 == val) {
  8557  000BF8  6651               	tstfsz	vscp_writeAppReg@val,c
  8558  000BFA  D30E               	goto	l10217
  8559                           
  8560                           ; BSR set to: 0
  8561                           ;main.c: 1170: LATCbits.LATC4 = 0;
  8562  000BFC  988B               	bcf	3979,4,c	;volatile
  8563                           
  8564                           ; BSR set to: 0
  8565                           ;main.c: 1171: rv = LATCbits.LATC4;
  8566  000BFE  0E00               	movlw	0
  8567  000C00  B88B               	btfsc	3979,4,c	;volatile
  8568  000C02  0E01               	movlw	1
  8569  000C04  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8570  000C06  D6D8               	goto	l9915
  8571  000C08                     l10039:
  8572                           
  8573                           ; BSR set to: 0
  8574  000C08  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8575                           
  8576                           ; Switch size 1, requested type "speed"
  8577                           ; Number of cases is 7, Range of values is 2 to 8
  8578                           ; switch strategies available:
  8579                           ; Name         Instructions Cycles
  8580                           ; simple_byte           22    12 (average)
  8581                           ;	Chosen strategy is simple_byte
  8582  000C0A  0A02               	xorlw	2	; case 2
  8583  000C0C  E101 D6A0          	bz	l9897
  8584  000C10  0A01               	xorlw	1	; case 3
  8585  000C12  E101 D6D4          	bz	l9917
  8586  000C16  0A07               	xorlw	7	; case 4
  8587  000C18  E101 D6FC          	bz	l9937
  8588  000C1C  0A01               	xorlw	1	; case 5
  8589  000C1E  E101 D72B          	bz	l9957
  8590  000C22  0A03               	xorlw	3	; case 6
  8591  000C24  E101 D75A          	bz	l9977
  8592  000C28  0A01               	xorlw	1	; case 7
  8593  000C2A  E08A               	bz	l9997
  8594  000C2C  0A0F               	xorlw	15	; case 8
  8595  000C2E  E0BA               	bz	l10017
  8596                           
  8597                           ; BSR set to: 0
  8598                           ;main.c: 1177: }
  8599                           ;main.c: 1178: }
  8600  000C30  D2F3               	goto	l10217
  8601  000C32                     l10041:
  8602                           
  8603                           ; BSR set to: 0
  8604                           ;main.c: 1181: else if ( (reg >= 10 ) &&
  8605                           ;main.c: 1182: (reg <= 17) ) {
  8606  000C32  0E09               	movlw	9
  8607  000C34  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8608  000C36  D18C               	goto	l10149
  8609                           
  8610                           ; BSR set to: 0
  8611  000C38  0E12               	movlw	18
  8612  000C3A  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8613  000C3C  D189               	goto	l10149
  8614  000C3E  D173               	goto	l10147
  8615  000C40                     l10047:
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;main.c: 1188: writeEEPROM( 0x43 + reg, val );
  8619  000C40  0E43               	movlw	67
  8620  000C42  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8621  000C44  6E08               	movwf	?_writeEEPROM,c
  8622  000C46  6A09               	clrf	?_writeEEPROM+1,c
  8623  000C48  0E00               	movlw	0
  8624  000C4A  2209               	addwfc	?_writeEEPROM+1,f,c
  8625  000C4C  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8626  000C50  ECB6  F01F         	call	_writeEEPROM	;wreg free
  8627                           
  8628                           ;main.c: 1189: rv = readEEPROM( 0x43 + reg );
  8629  000C54  0E43               	movlw	67
  8630  000C56  0100               	movlb	0	; () banked
  8631  000C58  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8632  000C5A  6E08               	movwf	?_readEEPROM,c
  8633  000C5C  6A09               	clrf	?_readEEPROM+1,c
  8634  000C5E  0E00               	movlw	0
  8635  000C60  2209               	addwfc	?_readEEPROM+1,f,c
  8636  000C62  ECDE  F020         	call	_readEEPROM	;wreg free
  8637  000C66  0100               	movlb	0	; () banked
  8638  000C68  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;main.c: 1191: if ( val & 0x01 ) {
  8642  000C6A  A051               	btfss	vscp_writeAppReg@val,0,c
  8643  000C6C  D018               	goto	l10057
  8644                           
  8645                           ; BSR set to: 0
  8646                           ;main.c: 1193: LATBbits.LATB4 = 0;
  8647  000C6E  988A               	bcf	3978,4,c	;volatile
  8648                           
  8649                           ;main.c: 1194: bOn = 0;
  8650  000C70  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;main.c: 1196: relay_pulse_flags |= 0x01;
  8654  000C72  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  8655                           
  8656                           ; BSR set to: 0
  8657                           ;main.c: 1197: relay_pulse_timer[ 0 ] =
  8658                           ;main.c: 1198: readEEPROM( 0x43 + 18 ) * 256 +
  8659                           ;main.c: 1199: readEEPROM( 0x43 + 19 );
  8660  000C74  6A09               	clrf	?_readEEPROM+1,c
  8661  000C76  0E56               	movlw	86
  8662  000C78  6E08               	movwf	?_readEEPROM,c
  8663  000C7A  ECDE  F020         	call	_readEEPROM	;wreg free
  8664  000C7E  0100               	movlb	0	; () banked
  8665  000C80  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8666  000C82  6A09               	clrf	?_readEEPROM+1,c
  8667  000C84  0E55               	movlw	85
  8668  000C86  6E08               	movwf	?_readEEPROM,c
  8669  000C88  ECDE  F020         	call	_readEEPROM	;wreg free
  8670  000C8C  0100               	movlb	0	; () banked
  8671  000C8E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8672  000C90  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8673  000C92  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8674  000C94  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8675  000C96  6F70               	movwf	_relay_pulse_timer& (0+255),b
  8676  000C98  0E00               	movlw	0
  8677  000C9A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8678  000C9C  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  8679  000C9E                     l10057:
  8680                           
  8681                           ; BSR set to: 0
  8682                           ;main.c: 1200: }
  8683                           ;main.c: 1202: if ( val & 0x04 ) {
  8684  000C9E  B451               	btfsc	vscp_writeAppReg@val,2,c
  8685  000CA0  D66C               	goto	l9909
  8686  000CA2  D2BA               	goto	l10217
  8687  000CA4                     l10061:
  8688                           
  8689                           ; BSR set to: 0
  8690                           ;main.c: 1211: writeEEPROM( 0x43 + reg, val );
  8691  000CA4  0E43               	movlw	67
  8692  000CA6  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8693  000CA8  6E08               	movwf	?_writeEEPROM,c
  8694  000CAA  6A09               	clrf	?_writeEEPROM+1,c
  8695  000CAC  0E00               	movlw	0
  8696  000CAE  2209               	addwfc	?_writeEEPROM+1,f,c
  8697  000CB0  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8698  000CB4  ECB6  F01F         	call	_writeEEPROM	;wreg free
  8699                           
  8700                           ;main.c: 1212: rv = readEEPROM( 0x43 + reg );
  8701  000CB8  0E43               	movlw	67
  8702  000CBA  0100               	movlb	0	; () banked
  8703  000CBC  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8704  000CBE  6E08               	movwf	?_readEEPROM,c
  8705  000CC0  6A09               	clrf	?_readEEPROM+1,c
  8706  000CC2  0E00               	movlw	0
  8707  000CC4  2209               	addwfc	?_readEEPROM+1,f,c
  8708  000CC6  ECDE  F020         	call	_readEEPROM	;wreg free
  8709  000CCA  0100               	movlb	0	; () banked
  8710  000CCC  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8711                           
  8712                           ; BSR set to: 0
  8713                           ;main.c: 1214: if ( val & 0x01 ) {
  8714  000CCE  A051               	btfss	vscp_writeAppReg@val,0,c
  8715  000CD0  D018               	goto	l10071
  8716                           
  8717                           ; BSR set to: 0
  8718                           ;main.c: 1216: LATBbits.LATB1 = 0;
  8719  000CD2  928A               	bcf	3978,1,c	;volatile
  8720                           
  8721                           ;main.c: 1217: bOn = 0;
  8722  000CD4  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8723                           
  8724                           ; BSR set to: 0
  8725                           ;main.c: 1219: relay_pulse_flags |= 0x02;
  8726  000CD6  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  8727                           
  8728                           ; BSR set to: 0
  8729                           ;main.c: 1220: relay_pulse_timer[ 1 ] =
  8730                           ;main.c: 1221: readEEPROM( 0x43 + 18) * 256 +
  8731                           ;main.c: 1222: readEEPROM( 0x43 + 19);
  8732  000CD8  6A09               	clrf	?_readEEPROM+1,c
  8733  000CDA  0E56               	movlw	86
  8734  000CDC  6E08               	movwf	?_readEEPROM,c
  8735  000CDE  ECDE  F020         	call	_readEEPROM	;wreg free
  8736  000CE2  0100               	movlb	0	; () banked
  8737  000CE4  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8738  000CE6  6A09               	clrf	?_readEEPROM+1,c
  8739  000CE8  0E55               	movlw	85
  8740  000CEA  6E08               	movwf	?_readEEPROM,c
  8741  000CEC  ECDE  F020         	call	_readEEPROM	;wreg free
  8742  000CF0  0100               	movlb	0	; () banked
  8743  000CF2  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8744  000CF4  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8745  000CF6  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8746  000CF8  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8747  000CFA  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  8748  000CFC  0E00               	movlw	0
  8749  000CFE  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8750  000D00  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  8751  000D02                     l10071:
  8752                           
  8753                           ; BSR set to: 0
  8754                           ;main.c: 1223: }
  8755                           ;main.c: 1225: if ( val & 0x04 ) {
  8756  000D02  A451               	btfss	vscp_writeAppReg@val,2,c
  8757  000D04  D289               	goto	l10217
  8758                           
  8759                           ; BSR set to: 0
  8760                           ;main.c: 1226: relay_protection_timer[ 1 ] =
  8761                           ;main.c: 1227: readEEPROM( 0x43 + 34 ) * 256 +
  8762                           ;main.c: 1228: readEEPROM( 0x43 + 35 );
  8763  000D06  6A09               	clrf	?_readEEPROM+1,c
  8764  000D08  0E66               	movlw	102
  8765  000D0A  6E08               	movwf	?_readEEPROM,c
  8766  000D0C  ECDE  F020         	call	_readEEPROM	;wreg free
  8767  000D10  0100               	movlb	0	; () banked
  8768  000D12  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8769  000D14  6A09               	clrf	?_readEEPROM+1,c
  8770  000D16  0E65               	movlw	101
  8771  000D18  6E08               	movwf	?_readEEPROM,c
  8772  000D1A  ECDE  F020         	call	_readEEPROM	;wreg free
  8773  000D1E                     L26:
  8774  000D1E  0100               	movlb	0	; () banked
  8775  000D20  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8776  000D22  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8777  000D24  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8778  000D26  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8779  000D28  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  8780  000D2A  0E00               	movlw	0
  8781  000D2C  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8782  000D2E  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  8783  000D30  D273               	goto	l10217
  8784  000D32                     l10075:
  8785                           
  8786                           ; BSR set to: 0
  8787                           ;main.c: 1234: writeEEPROM( 0x43 + reg, val );
  8788  000D32  0E43               	movlw	67
  8789  000D34  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8790  000D36  6E08               	movwf	?_writeEEPROM,c
  8791  000D38  6A09               	clrf	?_writeEEPROM+1,c
  8792  000D3A  0E00               	movlw	0
  8793  000D3C  2209               	addwfc	?_writeEEPROM+1,f,c
  8794  000D3E  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8795  000D42  ECB6  F01F         	call	_writeEEPROM	;wreg free
  8796                           
  8797                           ;main.c: 1235: rv = readEEPROM( 0x43 + reg );
  8798  000D46  0E43               	movlw	67
  8799  000D48  0100               	movlb	0	; () banked
  8800  000D4A  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8801  000D4C  6E08               	movwf	?_readEEPROM,c
  8802  000D4E  6A09               	clrf	?_readEEPROM+1,c
  8803  000D50  0E00               	movlw	0
  8804  000D52  2209               	addwfc	?_readEEPROM+1,f,c
  8805  000D54  ECDE  F020         	call	_readEEPROM	;wreg free
  8806  000D58  0100               	movlb	0	; () banked
  8807  000D5A  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8808                           
  8809                           ; BSR set to: 0
  8810                           ;main.c: 1237: if ( val & 0x01 ) {
  8811  000D5C  A051               	btfss	vscp_writeAppReg@val,0,c
  8812  000D5E  D018               	goto	l10085
  8813                           
  8814                           ; BSR set to: 0
  8815                           ;main.c: 1239: LATBbits.LATB0 = 0;
  8816  000D60  908A               	bcf	3978,0,c	;volatile
  8817                           
  8818                           ;main.c: 1240: bOn = 0;
  8819  000D62  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8820                           
  8821                           ; BSR set to: 0
  8822                           ;main.c: 1242: relay_pulse_flags |= 0x04;
  8823  000D64  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  8824                           
  8825                           ; BSR set to: 0
  8826                           ;main.c: 1243: relay_pulse_timer[ 2 ] =
  8827                           ;main.c: 1244: readEEPROM( 0x43 + 22) * 256 +
  8828                           ;main.c: 1245: readEEPROM( 0x43 + 23);
  8829  000D66  6A09               	clrf	?_readEEPROM+1,c
  8830  000D68  0E5A               	movlw	90
  8831  000D6A  6E08               	movwf	?_readEEPROM,c
  8832  000D6C  ECDE  F020         	call	_readEEPROM	;wreg free
  8833  000D70  0100               	movlb	0	; () banked
  8834  000D72  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8835  000D74  6A09               	clrf	?_readEEPROM+1,c
  8836  000D76  0E59               	movlw	89
  8837  000D78  6E08               	movwf	?_readEEPROM,c
  8838  000D7A  ECDE  F020         	call	_readEEPROM	;wreg free
  8839  000D7E  0100               	movlb	0	; () banked
  8840  000D80  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8841  000D82  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8842  000D84  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8843  000D86  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8844  000D88  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  8845  000D8A  0E00               	movlw	0
  8846  000D8C  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8847  000D8E  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  8848  000D90                     l10085:
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;main.c: 1246: }
  8852                           ;main.c: 1248: if ( val & 0x04 ) {
  8853  000D90  B451               	btfsc	vscp_writeAppReg@val,2,c
  8854  000D92  D654               	goto	l9949
  8855  000D94  D241               	goto	l10217
  8856  000D96                     l10089:
  8857                           
  8858                           ; BSR set to: 0
  8859                           ;main.c: 1257: writeEEPROM( 0x43 + reg, val );
  8860  000D96  0E43               	movlw	67
  8861  000D98  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8862  000D9A  6E08               	movwf	?_writeEEPROM,c
  8863  000D9C  6A09               	clrf	?_writeEEPROM+1,c
  8864  000D9E  0E00               	movlw	0
  8865  000DA0  2209               	addwfc	?_writeEEPROM+1,f,c
  8866  000DA2  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8867  000DA6  ECB6  F01F         	call	_writeEEPROM	;wreg free
  8868                           
  8869                           ;main.c: 1258: rv = readEEPROM( 0x43 + reg );
  8870  000DAA  0E43               	movlw	67
  8871  000DAC  0100               	movlb	0	; () banked
  8872  000DAE  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8873  000DB0  6E08               	movwf	?_readEEPROM,c
  8874  000DB2  6A09               	clrf	?_readEEPROM+1,c
  8875  000DB4  0E00               	movlw	0
  8876  000DB6  2209               	addwfc	?_readEEPROM+1,f,c
  8877  000DB8  ECDE  F020         	call	_readEEPROM	;wreg free
  8878  000DBC  0100               	movlb	0	; () banked
  8879  000DBE  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8880                           
  8881                           ; BSR set to: 0
  8882                           ;main.c: 1260: if ( val & 0x01 ) {
  8883  000DC0  A051               	btfss	vscp_writeAppReg@val,0,c
  8884  000DC2  D018               	goto	l10099
  8885                           
  8886                           ; BSR set to: 0
  8887                           ;main.c: 1262: LATCbits.LATC7 = 0;
  8888  000DC4  9E8B               	bcf	3979,7,c	;volatile
  8889                           
  8890                           ;main.c: 1263: bOn = 0;
  8891  000DC6  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8892                           
  8893                           ; BSR set to: 0
  8894                           ;main.c: 1265: relay_pulse_flags |= 0x08;
  8895  000DC8  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  8896                           
  8897                           ; BSR set to: 0
  8898                           ;main.c: 1266: relay_pulse_timer[ 3 ] =
  8899                           ;main.c: 1267: readEEPROM( 0x43 + 24) * 256 +
  8900                           ;main.c: 1268: readEEPROM( 0x43 + 25);
  8901  000DCA  6A09               	clrf	?_readEEPROM+1,c
  8902  000DCC  0E5C               	movlw	92
  8903  000DCE  6E08               	movwf	?_readEEPROM,c
  8904  000DD0  ECDE  F020         	call	_readEEPROM	;wreg free
  8905  000DD4  0100               	movlb	0	; () banked
  8906  000DD6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8907  000DD8  6A09               	clrf	?_readEEPROM+1,c
  8908  000DDA  0E5B               	movlw	91
  8909  000DDC  6E08               	movwf	?_readEEPROM,c
  8910  000DDE  ECDE  F020         	call	_readEEPROM	;wreg free
  8911  000DE2  0100               	movlb	0	; () banked
  8912  000DE4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8913  000DE6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8914  000DE8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8915  000DEA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8916  000DEC  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  8917  000DEE  0E00               	movlw	0
  8918  000DF0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8919  000DF2  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  8920  000DF4                     l10099:
  8921                           
  8922                           ; BSR set to: 0
  8923                           ;main.c: 1269: }
  8924                           ;main.c: 1271: if ( val & 0x04 ) {
  8925  000DF4  B451               	btfsc	vscp_writeAppReg@val,2,c
  8926  000DF6  D654               	goto	l9969
  8927  000DF8  D20F               	goto	l10217
  8928  000DFA                     l10103:
  8929                           
  8930                           ; BSR set to: 0
  8931                           ;main.c: 1280: writeEEPROM( 0x43 + reg, val );
  8932  000DFA  0E43               	movlw	67
  8933  000DFC  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8934  000DFE  6E08               	movwf	?_writeEEPROM,c
  8935  000E00  6A09               	clrf	?_writeEEPROM+1,c
  8936  000E02  0E00               	movlw	0
  8937  000E04  2209               	addwfc	?_writeEEPROM+1,f,c
  8938  000E06  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8939  000E0A  ECB6  F01F         	call	_writeEEPROM	;wreg free
  8940                           
  8941                           ;main.c: 1281: rv = readEEPROM( 0x43 + reg );
  8942  000E0E  0E43               	movlw	67
  8943  000E10  0100               	movlb	0	; () banked
  8944  000E12  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8945  000E14  6E08               	movwf	?_readEEPROM,c
  8946  000E16  6A09               	clrf	?_readEEPROM+1,c
  8947  000E18  0E00               	movlw	0
  8948  000E1A  2209               	addwfc	?_readEEPROM+1,f,c
  8949  000E1C  ECDE  F020         	call	_readEEPROM	;wreg free
  8950  000E20  0100               	movlb	0	; () banked
  8951  000E22  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;main.c: 1283: if ( val & 0x01 ) {
  8955  000E24  A051               	btfss	vscp_writeAppReg@val,0,c
  8956  000E26  D018               	goto	l10113
  8957                           
  8958                           ; BSR set to: 0
  8959                           ;main.c: 1285: LATCbits.LATC6 = 0;
  8960  000E28  9C8B               	bcf	3979,6,c	;volatile
  8961                           
  8962                           ;main.c: 1286: bOn = 0;
  8963  000E2A  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;main.c: 1288: relay_pulse_flags |= 0x10;
  8967  000E2C  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  8968                           
  8969                           ; BSR set to: 0
  8970                           ;main.c: 1289: relay_pulse_timer[ 4 ] =
  8971                           ;main.c: 1290: readEEPROM( 0x43 + 26) * 256 +
  8972                           ;main.c: 1291: readEEPROM( 0x43 + 27);
  8973  000E2E  6A09               	clrf	?_readEEPROM+1,c
  8974  000E30  0E5E               	movlw	94
  8975  000E32  6E08               	movwf	?_readEEPROM,c
  8976  000E34  ECDE  F020         	call	_readEEPROM	;wreg free
  8977  000E38  0100               	movlb	0	; () banked
  8978  000E3A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8979  000E3C  6A09               	clrf	?_readEEPROM+1,c
  8980  000E3E  0E5D               	movlw	93
  8981  000E40  6E08               	movwf	?_readEEPROM,c
  8982  000E42  ECDE  F020         	call	_readEEPROM	;wreg free
  8983  000E46  0100               	movlb	0	; () banked
  8984  000E48  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8985  000E4A  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8986  000E4C  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8987  000E4E  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8988  000E50  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  8989  000E52  0E00               	movlw	0
  8990  000E54  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8991  000E56  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  8992  000E58                     l10113:
  8993                           
  8994                           ; BSR set to: 0
  8995                           ;main.c: 1292: }
  8996                           ;main.c: 1294: if ( val & 0x04 ) {
  8997  000E58  B451               	btfsc	vscp_writeAppReg@val,2,c
  8998  000E5A  D654               	goto	l9989
  8999  000E5C  D1DD               	goto	l10217
  9000  000E5E                     l10117:
  9001                           
  9002                           ; BSR set to: 0
  9003                           ;main.c: 1303: writeEEPROM( 0x43 + reg, val );
  9004  000E5E  0E43               	movlw	67
  9005  000E60  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9006  000E62  6E08               	movwf	?_writeEEPROM,c
  9007  000E64  6A09               	clrf	?_writeEEPROM+1,c
  9008  000E66  0E00               	movlw	0
  9009  000E68  2209               	addwfc	?_writeEEPROM+1,f,c
  9010  000E6A  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9011  000E6E  ECB6  F01F         	call	_writeEEPROM	;wreg free
  9012                           
  9013                           ;main.c: 1304: rv = readEEPROM( 0x43 + reg );
  9014  000E72  0E43               	movlw	67
  9015  000E74  0100               	movlb	0	; () banked
  9016  000E76  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9017  000E78  6E08               	movwf	?_readEEPROM,c
  9018  000E7A  6A09               	clrf	?_readEEPROM+1,c
  9019  000E7C  0E00               	movlw	0
  9020  000E7E  2209               	addwfc	?_readEEPROM+1,f,c
  9021  000E80  ECDE  F020         	call	_readEEPROM	;wreg free
  9022  000E84  0100               	movlb	0	; () banked
  9023  000E86  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9024                           
  9025                           ; BSR set to: 0
  9026                           ;main.c: 1306: if ( val & 0x01 ) {
  9027  000E88  A051               	btfss	vscp_writeAppReg@val,0,c
  9028  000E8A  D018               	goto	l10127
  9029                           
  9030                           ; BSR set to: 0
  9031                           ;main.c: 1308: LATCbits.LATC5 = 0;
  9032  000E8C  9A8B               	bcf	3979,5,c	;volatile
  9033                           
  9034                           ;main.c: 1309: bOn = 0;
  9035  000E8E  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9036                           
  9037                           ; BSR set to: 0
  9038                           ;main.c: 1311: relay_pulse_flags |= 0x20;
  9039  000E90  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  9040                           
  9041                           ; BSR set to: 0
  9042                           ;main.c: 1312: relay_pulse_timer[ 5 ] =
  9043                           ;main.c: 1313: readEEPROM( 0x43 + 28) * 256 +
  9044                           ;main.c: 1314: readEEPROM( 0x43 + 29);
  9045  000E92  6A09               	clrf	?_readEEPROM+1,c
  9046  000E94  0E60               	movlw	96
  9047  000E96  6E08               	movwf	?_readEEPROM,c
  9048  000E98  ECDE  F020         	call	_readEEPROM	;wreg free
  9049  000E9C  0100               	movlb	0	; () banked
  9050  000E9E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9051  000EA0  6A09               	clrf	?_readEEPROM+1,c
  9052  000EA2  0E5F               	movlw	95
  9053  000EA4  6E08               	movwf	?_readEEPROM,c
  9054  000EA6  ECDE  F020         	call	_readEEPROM	;wreg free
  9055  000EAA  0100               	movlb	0	; () banked
  9056  000EAC  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9057  000EAE  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9058  000EB0  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9059  000EB2  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9060  000EB4  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9061  000EB6  0E00               	movlw	0
  9062  000EB8  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9063  000EBA  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9064  000EBC                     l10127:
  9065                           
  9066                           ; BSR set to: 0
  9067                           ;main.c: 1315: }
  9068                           ;main.c: 1317: if ( val & 0x04 ) {
  9069  000EBC  B451               	btfsc	vscp_writeAppReg@val,2,c
  9070  000EBE  D654               	goto	l10009
  9071  000EC0  D1AB               	goto	l10217
  9072  000EC2                     l10131:
  9073                           
  9074                           ; BSR set to: 0
  9075                           ;main.c: 1326: writeEEPROM( 0x43 + reg, val );
  9076  000EC2  0E43               	movlw	67
  9077  000EC4  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9078  000EC6  6E08               	movwf	?_writeEEPROM,c
  9079  000EC8  6A09               	clrf	?_writeEEPROM+1,c
  9080  000ECA  0E00               	movlw	0
  9081  000ECC  2209               	addwfc	?_writeEEPROM+1,f,c
  9082  000ECE  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9083  000ED2  ECB6  F01F         	call	_writeEEPROM	;wreg free
  9084                           
  9085                           ;main.c: 1327: rv = readEEPROM( 0x43 + reg );
  9086  000ED6  0E43               	movlw	67
  9087  000ED8  0100               	movlb	0	; () banked
  9088  000EDA  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9089  000EDC  6E08               	movwf	?_readEEPROM,c
  9090  000EDE  6A09               	clrf	?_readEEPROM+1,c
  9091  000EE0  0E00               	movlw	0
  9092  000EE2  2209               	addwfc	?_readEEPROM+1,f,c
  9093  000EE4  ECDE  F020         	call	_readEEPROM	;wreg free
  9094  000EE8  0100               	movlb	0	; () banked
  9095  000EEA  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9096                           
  9097                           ; BSR set to: 0
  9098                           ;main.c: 1329: if ( val & 0x01 ) {
  9099  000EEC  A051               	btfss	vscp_writeAppReg@val,0,c
  9100  000EEE  D018               	goto	l10141
  9101                           
  9102                           ; BSR set to: 0
  9103                           ;main.c: 1331: LATCbits.LATC4 = 0;
  9104  000EF0  988B               	bcf	3979,4,c	;volatile
  9105                           
  9106                           ;main.c: 1332: bOn = 0;
  9107  000EF2  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9108                           
  9109                           ; BSR set to: 0
  9110                           ;main.c: 1334: relay_pulse_flags |= 0x40;
  9111  000EF4  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  9112                           
  9113                           ; BSR set to: 0
  9114                           ;main.c: 1335: relay_pulse_timer[ 6 ] =
  9115                           ;main.c: 1336: readEEPROM( 0x43 + 30) * 256 +
  9116                           ;main.c: 1337: readEEPROM( 0x43 + 31);
  9117  000EF6  6A09               	clrf	?_readEEPROM+1,c
  9118  000EF8  0E62               	movlw	98
  9119  000EFA  6E08               	movwf	?_readEEPROM,c
  9120  000EFC  ECDE  F020         	call	_readEEPROM	;wreg free
  9121  000F00  0100               	movlb	0	; () banked
  9122  000F02  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9123  000F04  6A09               	clrf	?_readEEPROM+1,c
  9124  000F06  0E61               	movlw	97
  9125  000F08  6E08               	movwf	?_readEEPROM,c
  9126  000F0A  ECDE  F020         	call	_readEEPROM	;wreg free
  9127  000F0E  0100               	movlb	0	; () banked
  9128  000F10  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9129  000F12  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9130  000F14  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9131  000F16  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9132  000F18  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9133  000F1A  0E00               	movlw	0
  9134  000F1C  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9135  000F1E  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9136  000F20                     l10141:
  9137                           
  9138                           ; BSR set to: 0
  9139                           ;main.c: 1338: }
  9140                           ;main.c: 1340: if ( val & 0x04 ) {
  9141  000F20  B451               	btfsc	vscp_writeAppReg@val,2,c
  9142  000F22  D654               	goto	l10029
  9143  000F24  D179               	goto	l10217
  9144  000F26                     l10147:
  9145                           
  9146                           ; BSR set to: 0
  9147  000F26  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9148                           
  9149                           ; Switch size 1, requested type "speed"
  9150                           ; Number of cases is 7, Range of values is 10 to 16
  9151                           ; switch strategies available:
  9152                           ; Name         Instructions Cycles
  9153                           ; simple_byte           22    12 (average)
  9154                           ;	Chosen strategy is simple_byte
  9155  000F28  0A0A               	xorlw	10	; case 10
  9156  000F2A  E101 D689          	bz	l10047
  9157  000F2E  0A01               	xorlw	1	; case 11
  9158  000F30  E101 D6B8          	bz	l10061
  9159  000F34  0A07               	xorlw	7	; case 12
  9160  000F36  E101 D6FC          	bz	l10075
  9161  000F3A  0A01               	xorlw	1	; case 13
  9162  000F3C  E101 D72B          	bz	l10089
  9163  000F40  0A03               	xorlw	3	; case 14
  9164  000F42  E101 D75A          	bz	l10103
  9165  000F46  0A01               	xorlw	1	; case 15
  9166  000F48  E08A               	bz	l10117
  9167  000F4A  0A1F               	xorlw	31	; case 16
  9168  000F4C  E0BA               	bz	l10131
  9169  000F4E  D164               	goto	l10217
  9170  000F50                     l10149:
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;main.c: 1351: else if ( (reg >= 18 ) &&
  9174                           ;main.c: 1352: (reg <= 33 ) ) {
  9175  000F50  0E11               	movlw	17
  9176  000F52  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9177  000F54  D0DE               	goto	l10175
  9178                           
  9179                           ; BSR set to: 0
  9180  000F56  0E22               	movlw	34
  9181  000F58  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9182  000F5A  D0DB               	goto	l10175
  9183                           
  9184                           ; BSR set to: 0
  9185                           ;main.c: 1355: writeEEPROM( 0x43 + reg, val );
  9186  000F5C  0E43               	movlw	67
  9187  000F5E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9188  000F60  6E08               	movwf	?_writeEEPROM,c
  9189  000F62  6A09               	clrf	?_writeEEPROM+1,c
  9190  000F64  0E00               	movlw	0
  9191  000F66  2209               	addwfc	?_writeEEPROM+1,f,c
  9192  000F68  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9193  000F6C  ECB6  F01F         	call	_writeEEPROM	;wreg free
  9194                           
  9195                           ;main.c: 1356: rv = readEEPROM( 0x43 + reg );
  9196  000F70  0E43               	movlw	67
  9197  000F72  0100               	movlb	0	; () banked
  9198  000F74  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9199  000F76  6E08               	movwf	?_readEEPROM,c
  9200  000F78  6A09               	clrf	?_readEEPROM+1,c
  9201  000F7A  0E00               	movlw	0
  9202  000F7C  2209               	addwfc	?_readEEPROM+1,f,c
  9203  000F7E  ECDE  F020         	call	_readEEPROM	;wreg free
  9204  000F82  0100               	movlb	0	; () banked
  9205  000F84  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9206                           
  9207                           ;main.c: 1360: switch ( reg ) {
  9208  000F86  D0B0               	goto	l10173
  9209  000F88                     l10155:
  9210                           
  9211                           ; BSR set to: 0
  9212                           ;main.c: 1363: relay_pulse_timer[ 0 ] =
  9213                           ;main.c: 1364: readEEPROM( 0x43 + 18) * 256 +
  9214                           ;main.c: 1365: readEEPROM( 0x43 + 19);
  9215  000F88  6A09               	clrf	?_readEEPROM+1,c
  9216  000F8A  0E56               	movlw	86
  9217  000F8C  6E08               	movwf	?_readEEPROM,c
  9218  000F8E  ECDE  F020         	call	_readEEPROM	;wreg free
  9219  000F92  0100               	movlb	0	; () banked
  9220  000F94  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9221  000F96  6A09               	clrf	?_readEEPROM+1,c
  9222  000F98  0E55               	movlw	85
  9223  000F9A  6E08               	movwf	?_readEEPROM,c
  9224  000F9C  ECDE  F020         	call	_readEEPROM	;wreg free
  9225  000FA0  0100               	movlb	0	; () banked
  9226  000FA2  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9227  000FA4  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9228  000FA6  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9229  000FA8  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9230  000FAA  6F70               	movwf	_relay_pulse_timer& (0+255),b
  9231  000FAC  0E00               	movlw	0
  9232  000FAE  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9233  000FB0  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  9234                           
  9235                           ;main.c: 1366: break;
  9236  000FB2  D132               	goto	l10217
  9237  000FB4                     l10157:
  9238                           
  9239                           ; BSR set to: 0
  9240                           ;main.c: 1369: relay_pulse_timer[ 1 ] =
  9241                           ;main.c: 1370: readEEPROM( 0x43 + 20) * 256 +
  9242                           ;main.c: 1371: readEEPROM( 0x43 + 21);
  9243  000FB4  6A09               	clrf	?_readEEPROM+1,c
  9244  000FB6  0E58               	movlw	88
  9245  000FB8  6E08               	movwf	?_readEEPROM,c
  9246  000FBA  ECDE  F020         	call	_readEEPROM	;wreg free
  9247  000FBE  0100               	movlb	0	; () banked
  9248  000FC0  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9249  000FC2  6A09               	clrf	?_readEEPROM+1,c
  9250  000FC4  0E57               	movlw	87
  9251  000FC6  6E08               	movwf	?_readEEPROM,c
  9252  000FC8  ECDE  F020         	call	_readEEPROM	;wreg free
  9253  000FCC  0100               	movlb	0	; () banked
  9254  000FCE  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9255  000FD0  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9256  000FD2  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9257  000FD4  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9258  000FD6  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  9259  000FD8  0E00               	movlw	0
  9260  000FDA  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9261  000FDC  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  9262                           
  9263                           ;main.c: 1372: break;
  9264  000FDE  D11C               	goto	l10217
  9265  000FE0                     l10159:
  9266                           
  9267                           ; BSR set to: 0
  9268                           ;main.c: 1375: relay_pulse_timer[ 2 ] =
  9269                           ;main.c: 1376: readEEPROM( 0x43 + 22) * 256 +
  9270                           ;main.c: 1377: readEEPROM( 0x43 + 23);
  9271  000FE0  6A09               	clrf	?_readEEPROM+1,c
  9272  000FE2  0E5A               	movlw	90
  9273  000FE4  6E08               	movwf	?_readEEPROM,c
  9274  000FE6  ECDE  F020         	call	_readEEPROM	;wreg free
  9275  000FEA  0100               	movlb	0	; () banked
  9276  000FEC  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9277  000FEE  6A09               	clrf	?_readEEPROM+1,c
  9278  000FF0  0E59               	movlw	89
  9279  000FF2  6E08               	movwf	?_readEEPROM,c
  9280  000FF4  ECDE  F020         	call	_readEEPROM	;wreg free
  9281  000FF8  0100               	movlb	0	; () banked
  9282  000FFA  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9283  000FFC  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9284  000FFE  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9285  001000  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9286  001002  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  9287  001004  0E00               	movlw	0
  9288  001006  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9289  001008  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  9290                           
  9291                           ;main.c: 1378: break;
  9292  00100A  D106               	goto	l10217
  9293  00100C                     l10161:
  9294                           
  9295                           ; BSR set to: 0
  9296                           ;main.c: 1381: relay_pulse_timer[ 3 ] =
  9297                           ;main.c: 1382: readEEPROM( 0x43 + 24) * 256 +
  9298                           ;main.c: 1383: readEEPROM( 0x43 + 25);
  9299  00100C  6A09               	clrf	?_readEEPROM+1,c
  9300  00100E  0E5C               	movlw	92
  9301  001010  6E08               	movwf	?_readEEPROM,c
  9302  001012  ECDE  F020         	call	_readEEPROM	;wreg free
  9303  001016  0100               	movlb	0	; () banked
  9304  001018  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9305  00101A  6A09               	clrf	?_readEEPROM+1,c
  9306  00101C  0E5B               	movlw	91
  9307  00101E  6E08               	movwf	?_readEEPROM,c
  9308  001020  ECDE  F020         	call	_readEEPROM	;wreg free
  9309  001024  0100               	movlb	0	; () banked
  9310  001026  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9311  001028  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9312  00102A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9313  00102C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9314  00102E  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  9315  001030  0E00               	movlw	0
  9316  001032  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9317  001034  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  9318                           
  9319                           ;main.c: 1384: break;
  9320  001036  D0F0               	goto	l10217
  9321  001038                     l10163:
  9322                           
  9323                           ; BSR set to: 0
  9324                           ;main.c: 1387: relay_pulse_timer[ 4 ] =
  9325                           ;main.c: 1388: readEEPROM( 0x43 + 26) * 256 +
  9326                           ;main.c: 1389: readEEPROM( 0x43 + 27);
  9327  001038  6A09               	clrf	?_readEEPROM+1,c
  9328  00103A  0E5E               	movlw	94
  9329  00103C  6E08               	movwf	?_readEEPROM,c
  9330  00103E  ECDE  F020         	call	_readEEPROM	;wreg free
  9331  001042  0100               	movlb	0	; () banked
  9332  001044  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9333  001046  6A09               	clrf	?_readEEPROM+1,c
  9334  001048  0E5D               	movlw	93
  9335  00104A  6E08               	movwf	?_readEEPROM,c
  9336  00104C  ECDE  F020         	call	_readEEPROM	;wreg free
  9337  001050  0100               	movlb	0	; () banked
  9338  001052  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9339  001054  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9340  001056  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9341  001058  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9342  00105A  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9343  00105C  0E00               	movlw	0
  9344  00105E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9345  001060  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9346                           
  9347                           ;main.c: 1390: break;
  9348  001062  D0DA               	goto	l10217
  9349  001064                     l10165:
  9350                           
  9351                           ; BSR set to: 0
  9352                           ;main.c: 1393: relay_pulse_timer[ 5 ] =
  9353                           ;main.c: 1394: readEEPROM( 0x43 + 28) * 256 +
  9354                           ;main.c: 1395: readEEPROM( 0x43 + 29);
  9355  001064  6A09               	clrf	?_readEEPROM+1,c
  9356  001066  0E60               	movlw	96
  9357  001068  6E08               	movwf	?_readEEPROM,c
  9358  00106A  ECDE  F020         	call	_readEEPROM	;wreg free
  9359  00106E  0100               	movlb	0	; () banked
  9360  001070  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9361  001072  6A09               	clrf	?_readEEPROM+1,c
  9362  001074  0E5F               	movlw	95
  9363  001076  6E08               	movwf	?_readEEPROM,c
  9364  001078  ECDE  F020         	call	_readEEPROM	;wreg free
  9365  00107C  0100               	movlb	0	; () banked
  9366  00107E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9367  001080  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9368  001082  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9369  001084  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9370  001086  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9371  001088  0E00               	movlw	0
  9372  00108A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9373  00108C  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9374                           
  9375                           ;main.c: 1396: break;
  9376  00108E  D0C4               	goto	l10217
  9377  001090                     l10167:
  9378                           
  9379                           ; BSR set to: 0
  9380                           ;main.c: 1399: relay_pulse_timer[ 6 ] =
  9381                           ;main.c: 1400: readEEPROM( 0x43 + 30) * 256 +
  9382                           ;main.c: 1401: readEEPROM( 0x43 + 31);
  9383  001090  6A09               	clrf	?_readEEPROM+1,c
  9384  001092  0E62               	movlw	98
  9385  001094  6E08               	movwf	?_readEEPROM,c
  9386  001096  ECDE  F020         	call	_readEEPROM	;wreg free
  9387  00109A  0100               	movlb	0	; () banked
  9388  00109C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9389  00109E  6A09               	clrf	?_readEEPROM+1,c
  9390  0010A0  0E61               	movlw	97
  9391  0010A2  6E08               	movwf	?_readEEPROM,c
  9392  0010A4  ECDE  F020         	call	_readEEPROM	;wreg free
  9393  0010A8  0100               	movlb	0	; () banked
  9394  0010AA  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9395  0010AC  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9396  0010AE  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9397  0010B0  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9398  0010B2  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9399  0010B4  0E00               	movlw	0
  9400  0010B6  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9401  0010B8  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9402                           
  9403                           ;main.c: 1402: break;
  9404  0010BA  D0AE               	goto	l10217
  9405  0010BC                     l10169:
  9406                           
  9407                           ; BSR set to: 0
  9408                           ;main.c: 1405: relay_pulse_timer[ 7 ] =
  9409                           ;main.c: 1406: readEEPROM( 0x43 + 32) * 256 +
  9410                           ;main.c: 1407: readEEPROM( 0x43 + 33);
  9411  0010BC  6A09               	clrf	?_readEEPROM+1,c
  9412  0010BE  0E64               	movlw	100
  9413  0010C0  6E08               	movwf	?_readEEPROM,c
  9414  0010C2  ECDE  F020         	call	_readEEPROM	;wreg free
  9415  0010C6  0100               	movlb	0	; () banked
  9416  0010C8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9417  0010CA  6A09               	clrf	?_readEEPROM+1,c
  9418  0010CC  0E63               	movlw	99
  9419  0010CE  6E08               	movwf	?_readEEPROM,c
  9420  0010D0  ECDE  F020         	call	_readEEPROM	;wreg free
  9421  0010D4  0100               	movlb	0	; () banked
  9422  0010D6  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9423  0010D8  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9424  0010DA  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9425  0010DC  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9426  0010DE  6F7E               	movwf	(_relay_pulse_timer+14)& (0+255),b
  9427  0010E0  0E00               	movlw	0
  9428  0010E2  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9429  0010E4  6F7F               	movwf	(_relay_pulse_timer+15)& (0+255),b
  9430                           
  9431                           ;main.c: 1408: break;
  9432  0010E6  D098               	goto	l10217
  9433  0010E8                     l10173:
  9434                           
  9435                           ; BSR set to: 0
  9436  0010E8  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9437                           
  9438                           ; Switch size 1, requested type "speed"
  9439                           ; Number of cases is 8, Range of values is 19 to 33
  9440                           ; switch strategies available:
  9441                           ; Name         Instructions Cycles
  9442                           ; simple_byte           25    13 (average)
  9443                           ;	Chosen strategy is simple_byte
  9444  0010EA  0A13               	xorlw	19	; case 19
  9445  0010EC  E101 D74C          	bz	l10155
  9446  0010F0  0A06               	xorlw	6	; case 21
  9447  0010F2  E101 D75F          	bz	l10157
  9448  0010F6  0A02               	xorlw	2	; case 23
  9449  0010F8  E101 D772          	bz	l10159
  9450  0010FC  0A0E               	xorlw	14	; case 25
  9451  0010FE  E086               	bz	l10161
  9452  001100  0A02               	xorlw	2	; case 27
  9453  001102  E09A               	bz	l10163
  9454  001104  0A06               	xorlw	6	; case 29
  9455  001106  E0AE               	bz	l10165
  9456  001108  0A02               	xorlw	2	; case 31
  9457  00110A  E0C2               	bz	l10167
  9458  00110C  0A3E               	xorlw	62	; case 33
  9459  00110E  E0D6               	bz	l10169
  9460  001110  D083               	goto	l10217
  9461  001112                     l10175:
  9462                           
  9463                           ; BSR set to: 0
  9464                           ;main.c: 1416: else if ( ( reg >= 34 ) &&
  9465                           ;main.c: 1417: ( reg <= 49 ) ) {
  9466  001112  0E21               	movlw	33
  9467  001114  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9468  001116  D049               	goto	l10201
  9469                           
  9470                           ; BSR set to: 0
  9471  001118  0E32               	movlw	50
  9472  00111A  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9473  00111C  D046               	goto	l10201
  9474                           
  9475                           ; BSR set to: 0
  9476                           ;main.c: 1420: writeEEPROM( 0x43 + reg, val );
  9477  00111E  0E43               	movlw	67
  9478  001120  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9479  001122  6E08               	movwf	?_writeEEPROM,c
  9480  001124  6A09               	clrf	?_writeEEPROM+1,c
  9481  001126  0E00               	movlw	0
  9482  001128  2209               	addwfc	?_writeEEPROM+1,f,c
  9483  00112A  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9484  00112E  ECB6  F01F         	call	_writeEEPROM	;wreg free
  9485                           
  9486                           ;main.c: 1421: rv = readEEPROM( 0x43 + reg );
  9487  001132  0E43               	movlw	67
  9488  001134  0100               	movlb	0	; () banked
  9489  001136  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9490  001138  6E08               	movwf	?_readEEPROM,c
  9491  00113A  6A09               	clrf	?_readEEPROM+1,c
  9492  00113C  0E00               	movlw	0
  9493  00113E  2209               	addwfc	?_readEEPROM+1,f,c
  9494  001140  ECDE  F020         	call	_readEEPROM	;wreg free
  9495  001144  0100               	movlb	0	; () banked
  9496  001146  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9497                           
  9498                           ;main.c: 1423: switch ( reg ) {
  9499  001148  D016               	goto	l10199
  9500  00114A                     l10195:
  9501                           
  9502                           ; BSR set to: 0
  9503                           ;main.c: 1468: relay_protection_timer[ 7 ] =
  9504                           ;main.c: 1469: readEEPROM( 0x43 + 48 ) * 256 +
  9505                           ;main.c: 1470: readEEPROM( 0x43 + 49 );
  9506  00114A  6A09               	clrf	?_readEEPROM+1,c
  9507  00114C  0E74               	movlw	116
  9508  00114E  6E08               	movwf	?_readEEPROM,c
  9509  001150  ECDE  F020         	call	_readEEPROM	;wreg free
  9510  001154  0100               	movlb	0	; () banked
  9511  001156  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9512  001158  6A09               	clrf	?_readEEPROM+1,c
  9513  00115A  0E73               	movlw	115
  9514  00115C  6E08               	movwf	?_readEEPROM,c
  9515  00115E  ECDE  F020         	call	_readEEPROM	;wreg free
  9516  001162  0100               	movlb	0	; () banked
  9517  001164  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9518  001166  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9519  001168  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9520  00116A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9521  00116C  6F6E               	movwf	(_relay_protection_timer+14)& (0+255),b
  9522  00116E  0E00               	movlw	0
  9523  001170  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9524  001172  6F6F               	movwf	(_relay_protection_timer+15)& (0+255),b
  9525                           
  9526                           ;main.c: 1471: break;
  9527  001174  D051               	goto	l10217
  9528  001176                     l10199:
  9529                           
  9530                           ; BSR set to: 0
  9531  001176  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9532                           
  9533                           ; Switch size 1, requested type "speed"
  9534                           ; Number of cases is 8, Range of values is 35 to 49
  9535                           ; switch strategies available:
  9536                           ; Name         Instructions Cycles
  9537                           ; simple_byte           25    13 (average)
  9538                           ;	Chosen strategy is simple_byte
  9539  001178  0A23               	xorlw	35	; case 35
  9540  00117A  E102 EFBD  F004    	bz	l9909
  9541  001180  0A06               	xorlw	6	; case 37
  9542  001182  E101 D431          	bz	l9929
  9543  001186  0A02               	xorlw	2	; case 39
  9544  001188  E101 D458          	bz	l9949
  9545  00118C  0A0E               	xorlw	14	; case 41
  9546  00118E  E101 D487          	bz	l9969
  9547  001192  0A02               	xorlw	2	; case 43
  9548  001194  E101 D4B6          	bz	l9989
  9549  001198  0A06               	xorlw	6	; case 45
  9550  00119A  E101 D4E5          	bz	l10009
  9551  00119E  0A02               	xorlw	2	; case 47
  9552  0011A0  E101 D514          	bz	l10029
  9553  0011A4  0A1E               	xorlw	30	; case 49
  9554  0011A6  E0D1               	bz	l10195
  9555  0011A8  D037               	goto	l10217
  9556  0011AA                     l10201:
  9557                           
  9558                           ; BSR set to: 0
  9559                           ;main.c: 1479: else if ( (reg >= 50 ) && (reg <= 65) ) {
  9560  0011AA  0E31               	movlw	49
  9561  0011AC  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9562  0011AE  D017               	goto	l10207
  9563                           
  9564                           ; BSR set to: 0
  9565  0011B0  0E42               	movlw	66
  9566  0011B2  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9567  0011B4  D014               	goto	l10207
  9568                           
  9569                           ; BSR set to: 0
  9570                           ;main.c: 1482: writeEEPROM( 0x43 + reg, val );
  9571  0011B6  0E43               	movlw	67
  9572  0011B8  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9573  0011BA  6E08               	movwf	?_writeEEPROM,c
  9574  0011BC  6A09               	clrf	?_writeEEPROM+1,c
  9575  0011BE  0E00               	movlw	0
  9576  0011C0  2209               	addwfc	?_writeEEPROM+1,f,c
  9577  0011C2  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9578  0011C6  ECB6  F01F         	call	_writeEEPROM	;wreg free
  9579                           
  9580                           ;main.c: 1483: rv = readEEPROM( 0x43 + reg );
  9581  0011CA  0E43               	movlw	67
  9582  0011CC  0100               	movlb	0	; () banked
  9583  0011CE  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9584  0011D0  6E08               	movwf	?_readEEPROM,c
  9585  0011D2  6A09               	clrf	?_readEEPROM+1,c
  9586  0011D4  0E00               	movlw	0
  9587  0011D6  2209               	addwfc	?_readEEPROM+1,f,c
  9588  0011D8  ECDE  F020         	call	_readEEPROM	;wreg free
  9589  0011DC  D01B               	goto	L25
  9590  0011DE                     l10207:
  9591                           
  9592                           ; BSR set to: 0
  9593                           ;main.c: 1486: else if ( (reg >= 72) &&
  9594                           ;main.c: 1487: (reg < (72 + 7 * 8)) ) {
  9595  0011DE  0E47               	movlw	71
  9596  0011E0  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9597  0011E2  D01A               	goto	l10217
  9598                           
  9599                           ; BSR set to: 0
  9600  0011E4  0E80               	movlw	128
  9601  0011E6  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9602  0011E8  D017               	goto	l10217
  9603                           
  9604                           ; BSR set to: 0
  9605                           ;main.c: 1488: writeEEPROM( 0x43 + reg, val );
  9606  0011EA  0E43               	movlw	67
  9607  0011EC  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9608  0011EE  6E08               	movwf	?_writeEEPROM,c
  9609  0011F0  6A09               	clrf	?_writeEEPROM+1,c
  9610  0011F2  0E00               	movlw	0
  9611  0011F4  2209               	addwfc	?_writeEEPROM+1,f,c
  9612  0011F6  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9613  0011FA  ECB6  F01F         	call	_writeEEPROM	;wreg free
  9614                           
  9615                           ;main.c: 1489: calculateSetFilterMask();
  9616  0011FE  EC53  F00C         	call	_calculateSetFilterMask	;wreg free
  9617                           
  9618                           ;main.c: 1490: rv = readEEPROM( 0x43 + reg );
  9619  001202  0E43               	movlw	67
  9620  001204  0100               	movlb	0	; () banked
  9621  001206  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9622  001208  6E08               	movwf	?_readEEPROM,c
  9623  00120A  6A09               	clrf	?_readEEPROM+1,c
  9624  00120C  0E00               	movlw	0
  9625  00120E  2209               	addwfc	?_readEEPROM+1,f,c
  9626  001210  ECDE  F020         	call	_readEEPROM	;wreg free
  9627  001214                     L25:
  9628  001214  0100               	movlb	0	; () banked
  9629  001216  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9630  001218                     l10217:
  9631                           
  9632                           ; BSR set to: 0
  9633                           ;main.c: 1491: }
  9634                           ;main.c: 1497: if ( bInfoEvent ) {
  9635  001218  51CA               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
  9636  00121A  E035               	bz	l10237
  9637                           
  9638                           ; BSR set to: 0
  9639                           ;main.c: 1499: unsigned char val;
  9640                           ;main.c: 1500: val = readEEPROM( 0x43 +
  9641                           ;main.c: 1501: 10 + (reg - 2) );
  9642  00121C  0E4B               	movlw	75
  9643  00121E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9644  001220  6E08               	movwf	?_readEEPROM,c
  9645  001222  6A09               	clrf	?_readEEPROM+1,c
  9646  001224  0E00               	movlw	0
  9647  001226  2209               	addwfc	?_readEEPROM+1,f,c
  9648  001228  ECDE  F020         	call	_readEEPROM	;wreg free
  9649  00122C  0100               	movlb	0	; () banked
  9650  00122E  6FCB               	movwf	vscp_writeAppReg@val_678& (0+255),b
  9651                           
  9652                           ; BSR set to: 0
  9653                           ;main.c: 1503: if ( bOn ) {
  9654  001230  51CC               	movf	vscp_writeAppReg@bOn& (0+255),w,b
  9655  001232  E015               	bz	l395
  9656                           
  9657                           ; BSR set to: 0
  9658                           ;main.c: 1505: if ( val & 0x08 ) {
  9659  001234  A7CB               	btfss	vscp_writeAppReg@val_678& (0+255),3,b
  9660  001236  D008               	goto	l10227
  9661                           
  9662                           ; BSR set to: 0
  9663                           ;main.c: 1506: SendInformationEvent( reg - 2,
  9664                           ;main.c: 1507: 20,
  9665                           ;main.c: 1508: 3 );
  9666  001238  0E14               	movlw	20
  9667  00123A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9668  00123C  0E03               	movlw	3
  9669  00123E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9670  001240  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9671  001242  0FFE               	addlw	254
  9672  001244  EC47  F01E         	call	_SendInformationEvent
  9673  001248                     l10227:
  9674                           
  9675                           ; BSR set to: 0
  9676                           ;main.c: 1509: }
  9677                           ;main.c: 1511: if ( val & 0x20 ) {
  9678  001248  ABCB               	btfss	vscp_writeAppReg@val_678& (0+255),5,b
  9679  00124A  D01D               	goto	l10237
  9680                           
  9681                           ; BSR set to: 0
  9682                           ;main.c: 1512: SendInformationEvent( reg - 2,
  9683                           ;main.c: 1513: 20,
  9684                           ;main.c: 1514: 25 );
  9685  00124C  0E14               	movlw	20
  9686  00124E  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9687  001250  0E19               	movlw	25
  9688  001252  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9689  001254  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9690  001256  0FFE               	addlw	254
  9691  001258  EC47  F01E         	call	_SendInformationEvent
  9692  00125C  D014               	goto	l10237
  9693  00125E                     l395:
  9694                           
  9695                           ; BSR set to: 0
  9696                           ;main.c: 1518: else {
  9697                           ;main.c: 1520: if ( val & 0x10 ) {
  9698  00125E  A9CB               	btfss	vscp_writeAppReg@val_678& (0+255),4,b
  9699  001260  D008               	goto	l10233
  9700                           
  9701                           ; BSR set to: 0
  9702                           ;main.c: 1521: SendInformationEvent( reg - 2,
  9703                           ;main.c: 1522: 20,
  9704                           ;main.c: 1523: 4 );
  9705  001262  0E14               	movlw	20
  9706  001264  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9707  001266  0E04               	movlw	4
  9708  001268  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9709  00126A  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9710  00126C  0FFE               	addlw	254
  9711  00126E  EC47  F01E         	call	_SendInformationEvent
  9712  001272                     l10233:
  9713                           
  9714                           ; BSR set to: 0
  9715                           ;main.c: 1524: }
  9716                           ;main.c: 1526: if ( val & 0x40 ) {
  9717  001272  ADCB               	btfss	vscp_writeAppReg@val_678& (0+255),6,b
  9718  001274  D008               	goto	l10237
  9719                           
  9720                           ; BSR set to: 0
  9721                           ;main.c: 1527: SendInformationEvent( reg - 2,
  9722                           ;main.c: 1528: 20,
  9723                           ;main.c: 1529: 24 );
  9724  001276  0E14               	movlw	20
  9725  001278  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9726  00127A  0E18               	movlw	24
  9727  00127C  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9728  00127E  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9729  001280  0FFE               	addlw	254
  9730  001282  EC47  F01E         	call	_SendInformationEvent
  9731  001286                     l10237:
  9732                           
  9733                           ; BSR set to: 0
  9734                           ;main.c: 1530: }
  9735                           ;main.c: 1531: }
  9736                           ;main.c: 1532: }
  9737                           ;main.c: 1534: return rv;
  9738  001286  51CD               	movf	vscp_writeAppReg@rv& (0+255),w,b
  9739                           
  9740                           ; BSR set to: 0
  9741  001288  0012               	return	
  9742  00128A                     __end_of_vscp_writeAppReg:
  9743                           	opt stack 0
  9744                           tblptru	equ	0xFF8
  9745                           prodh	equ	0xFF4
  9746                           prodl	equ	0xFF3
  9747                           postinc0	equ	0xFEE
  9748                           wreg	equ	0xFE8
  9749                           indf2	equ	0xFDF
  9750                           postinc2	equ	0xFDE
  9751                           postdec2	equ	0xFDD
  9752                           fsr2h	equ	0xFDA
  9753                           fsr2l	equ	0xFD9
  9754                           status	equ	0xFD8
  9755                           
  9756 ;; *************** function _calculateSetFilterMask *****************
  9757 ;; Defined at:
  9758 ;;		line 2592 in file "../main.c"
  9759 ;; Parameters:    Size  Location     Type
  9760 ;;		None
  9761 ;; Auto vars:     Size  Location     Type
  9762 ;;  rowfilter       4   61[COMRAM] unsigned long 
  9763 ;;  filter          4   57[COMRAM] unsigned long 
  9764 ;;  mask            4   53[COMRAM] unsigned long 
  9765 ;;  rowmask         4   48[COMRAM] unsigned long 
  9766 ;;  i               1   66[COMRAM] unsigned char 
  9767 ;;  j               1   65[COMRAM] unsigned char 
  9768 ;;  lastOID         1   52[COMRAM] unsigned char 
  9769 ;; Return value:  Size  Location     Type
  9770 ;;		None               void
  9771 ;; Registers used:
  9772 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9773 ;; Tracked objects:
  9774 ;;		On entry : 0/0
  9775 ;;		On exit  : 0/0
  9776 ;;		Unchanged: 0/0
  9777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9778 ;;      Params:         0       0       0       0       0       0       0
  9779 ;;      Locals:        19       0       0       0       0       0       0
  9780 ;;      Temps:         31       0       0       0       0       0       0
  9781 ;;      Totals:        50       0       0       0       0       0       0
  9782 ;;Total ram usage:       50 bytes
  9783 ;; Hardware stack levels used:    1
  9784 ;; Hardware stack levels required when called:    3
  9785 ;; This function calls:
  9786 ;;		_readEEPROM
  9787 ;;		_ECANSetOperationMode
  9788 ;;		__CANIDToRegs
  9789 ;; This function is called by:
  9790 ;;		_vscp_writeAppReg
  9791 ;; This function uses a non-reentrant model
  9792 ;;
  9793                           
  9794                           	psect	text27
  9795  0018A6                     __ptext27:
  9796                           	opt stack 0
  9797  0018A6                     _calculateSetFilterMask:
  9798                           	opt stack 24
  9799                           
  9800                           ;main.c: 2593: uint8_t i,j;
  9801                           ;main.c: 2594: uint8_t lastOID;
  9802                           ;main.c: 2595: uint32_t rowmask;
  9803                           ;main.c: 2596: uint32_t rowfilter;
  9804                           ;main.c: 2599: uint32_t mask = 0xffffffff;
  9805                           
  9806                           ; BSR set to: 0
  9807                           ;incstack = 0
  9808                           ;incstack = 0
  9809  0018A6  6836               	setf	calculateSetFilterMask@mask,c
  9810  0018A8  6837               	setf	calculateSetFilterMask@mask+1,c
  9811  0018AA  6838               	setf	calculateSetFilterMask@mask+2,c
  9812  0018AC  6839               	setf	calculateSetFilterMask@mask+3,c
  9813                           
  9814                           ;main.c: 2600: uint32_t filter = 0;
  9815  0018AE  6A3A               	clrf	calculateSetFilterMask@filter,c
  9816  0018B0  6A3B               	clrf	calculateSetFilterMask@filter+1,c
  9817  0018B2  6A3C               	clrf	calculateSetFilterMask@filter+2,c
  9818  0018B4  6A3D               	clrf	calculateSetFilterMask@filter+3,c
  9819                           
  9820                           ;main.c: 2603: for ( i=0; i < 7; i++ ) {
  9821  0018B6  6A43               	clrf	calculateSetFilterMask@i,c
  9822  0018B8                     l8461:
  9823                           
  9824                           ;main.c: 2606: if ( readEEPROM( 0x43 + 8*i + 1 ) & 0x80 ) {
  9825  0018B8  5043               	movf	calculateSetFilterMask@i,w,c
  9826  0018BA  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
  9827  0018BC  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
  9828  0018BE  90D8               	bcf	status,0,c
  9829  0018C0  3612               	rlcf	??_calculateSetFilterMask,f,c
  9830  0018C2  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9831  0018C4  90D8               	bcf	status,0,c
  9832  0018C6  3612               	rlcf	??_calculateSetFilterMask,f,c
  9833  0018C8  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9834  0018CA  90D8               	bcf	status,0,c
  9835  0018CC  3612               	rlcf	??_calculateSetFilterMask,f,c
  9836  0018CE  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9837  0018D0  0E44               	movlw	68
  9838  0018D2  2412               	addwf	??_calculateSetFilterMask,w,c
  9839  0018D4  6E08               	movwf	?_readEEPROM,c
  9840  0018D6  0E00               	movlw	0
  9841  0018D8  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9842  0018DA  6E09               	movwf	?_readEEPROM+1,c
  9843  0018DC  ECDE  F020         	call	_readEEPROM	;wreg free
  9844  0018E0  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9845  0018E2  AE14               	btfss	??_calculateSetFilterMask+2,7,c
  9846  0018E4  D1E8               	goto	l8505
  9847                           
  9848                           ;main.c: 2615: rowmask =
  9849                           ;main.c: 2617: ( (uint32_t)( readEEPROM( 0x43 + 8*i + 1 ) & 2 ) << 23 ) |
  9850                           ;main.c: 2619: ( (uint32_t)readEEPROM( 0x43 + 8*i + 2 ) << 16 ) |
  9851                           ;main.c: 2621: ( (uint32_t)readEEPROM( 0x43 + 8*i + 4 ) << 8 ) |
  9852                           ;main.c: 2623: 0xff;
  9853  0018E6  5043               	movf	calculateSetFilterMask@i,w,c
  9854  0018E8  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
  9855  0018EA  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
  9856  0018EC  90D8               	bcf	status,0,c
  9857  0018EE  3612               	rlcf	??_calculateSetFilterMask,f,c
  9858  0018F0  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9859  0018F2  90D8               	bcf	status,0,c
  9860  0018F4  3612               	rlcf	??_calculateSetFilterMask,f,c
  9861  0018F6  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9862  0018F8  90D8               	bcf	status,0,c
  9863  0018FA  3612               	rlcf	??_calculateSetFilterMask,f,c
  9864  0018FC  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9865  0018FE  0E47               	movlw	71
  9866  001900  2412               	addwf	??_calculateSetFilterMask,w,c
  9867  001902  6E08               	movwf	?_readEEPROM,c
  9868  001904  0E00               	movlw	0
  9869  001906  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9870  001908  6E09               	movwf	?_readEEPROM+1,c
  9871  00190A  ECDE  F020         	call	_readEEPROM	;wreg free
  9872  00190E  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9873  001910  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
  9874  001914  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
  9875  001916  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
  9876  001918  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
  9877  00191A  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
  9878  00191E  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
  9879  001922  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
  9880  001926  6A15               	clrf	??_calculateSetFilterMask+3,c
  9881  001928  5043               	movf	calculateSetFilterMask@i,w,c
  9882  00192A  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
  9883  00192C  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
  9884  00192E  90D8               	bcf	status,0,c
  9885  001930  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9886  001932  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9887  001934  90D8               	bcf	status,0,c
  9888  001936  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9889  001938  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9890  00193A  90D8               	bcf	status,0,c
  9891  00193C  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9892  00193E  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9893  001940  0E45               	movlw	69
  9894  001942  2419               	addwf	??_calculateSetFilterMask+7,w,c
  9895  001944  6E08               	movwf	?_readEEPROM,c
  9896  001946  0E00               	movlw	0
  9897  001948  201A               	addwfc	??_calculateSetFilterMask+8,w,c
  9898  00194A  6E09               	movwf	?_readEEPROM+1,c
  9899  00194C  ECDE  F020         	call	_readEEPROM	;wreg free
  9900  001950  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
  9901  001952  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
  9902  001956  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
  9903  001958  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
  9904  00195A  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
  9905  00195C  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
  9906  001960  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
  9907  001964  6A1D               	clrf	??_calculateSetFilterMask+11,c
  9908  001966  6A1C               	clrf	??_calculateSetFilterMask+10,c
  9909  001968  5043               	movf	calculateSetFilterMask@i,w,c
  9910  00196A  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
  9911  00196C  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
  9912  00196E  90D8               	bcf	status,0,c
  9913  001970  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9914  001972  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9915  001974  90D8               	bcf	status,0,c
  9916  001976  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9917  001978  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9918  00197A  90D8               	bcf	status,0,c
  9919  00197C  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9920  00197E  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9921  001980  0E44               	movlw	68
  9922  001982  2420               	addwf	??_calculateSetFilterMask+14,w,c
  9923  001984  6E08               	movwf	?_readEEPROM,c
  9924  001986  0E00               	movlw	0
  9925  001988  2021               	addwfc	??_calculateSetFilterMask+15,w,c
  9926  00198A  6E09               	movwf	?_readEEPROM+1,c
  9927  00198C  ECDE  F020         	call	_readEEPROM	;wreg free
  9928  001990  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
  9929  001992  0E02               	movlw	2
  9930  001994  1622               	andwf	??_calculateSetFilterMask+16,f,c
  9931  001996  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
  9932  00199A  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
  9933  00199C  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
  9934  00199E  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
  9935  0019A0  0E17               	movlw	23
  9936  0019A2                     u9815:
  9937  0019A2  90D8               	bcf	status,0,c
  9938  0019A4  3623               	rlcf	??_calculateSetFilterMask+17,f,c
  9939  0019A6  3624               	rlcf	??_calculateSetFilterMask+18,f,c
  9940  0019A8  3625               	rlcf	??_calculateSetFilterMask+19,f,c
  9941  0019AA  3626               	rlcf	??_calculateSetFilterMask+20,f,c
  9942  0019AC  2EE8               	decfsz	wreg,f,c
  9943  0019AE  D7F9               	goto	u9815
  9944  0019B0  501C               	movf	??_calculateSetFilterMask+10,w,c
  9945  0019B2  1023               	iorwf	??_calculateSetFilterMask+17,w,c
  9946  0019B4  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
  9947  0019B6  501D               	movf	??_calculateSetFilterMask+11,w,c
  9948  0019B8  1024               	iorwf	??_calculateSetFilterMask+18,w,c
  9949  0019BA  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
  9950  0019BC  501E               	movf	??_calculateSetFilterMask+12,w,c
  9951  0019BE  1025               	iorwf	??_calculateSetFilterMask+19,w,c
  9952  0019C0  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
  9953  0019C2  501F               	movf	??_calculateSetFilterMask+13,w,c
  9954  0019C4  1026               	iorwf	??_calculateSetFilterMask+20,w,c
  9955  0019C6  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
  9956  0019C8  5015               	movf	??_calculateSetFilterMask+3,w,c
  9957  0019CA  1027               	iorwf	??_calculateSetFilterMask+21,w,c
  9958  0019CC  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
  9959  0019CE  5016               	movf	??_calculateSetFilterMask+4,w,c
  9960  0019D0  1028               	iorwf	??_calculateSetFilterMask+22,w,c
  9961  0019D2  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
  9962  0019D4  5017               	movf	??_calculateSetFilterMask+5,w,c
  9963  0019D6  1029               	iorwf	??_calculateSetFilterMask+23,w,c
  9964  0019D8  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
  9965  0019DA  5018               	movf	??_calculateSetFilterMask+6,w,c
  9966  0019DC  102A               	iorwf	??_calculateSetFilterMask+24,w,c
  9967  0019DE  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
  9968  0019E0  0EFF               	movlw	255
  9969  0019E2  102B               	iorwf	??_calculateSetFilterMask+25,w,c
  9970  0019E4  6E31               	movwf	calculateSetFilterMask@rowmask,c
  9971  0019E6  502C               	movf	??_calculateSetFilterMask+26,w,c
  9972  0019E8  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
  9973  0019EA  502D               	movf	??_calculateSetFilterMask+27,w,c
  9974  0019EC  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
  9975  0019EE  502E               	movf	??_calculateSetFilterMask+28,w,c
  9976  0019F0  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
  9977                           
  9978                           ;main.c: 2624: ;
  9979                           ;main.c: 2629: rowfilter =
  9980                           ;main.c: 2631: ( (uint32_t)( readEEPROM( 0x43 + 8*i + 1 ) & 1 ) << 24 ) |
  9981                           ;main.c: 2633: ( (uint32_t)readEEPROM( 0x43 + 8*i + 3 ) << 16 ) |
  9982                           ;main.c: 2635: ( (uint32_t)readEEPROM( 0x43 + 8*i + 5 ) << 8 ) |
  9983                           ;main.c: 2638: readEEPROM( 0x43 + 8*i );
  9984  0019F2  5043               	movf	calculateSetFilterMask@i,w,c
  9985  0019F4  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
  9986  0019F6  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
  9987  0019F8  90D8               	bcf	status,0,c
  9988  0019FA  3612               	rlcf	??_calculateSetFilterMask,f,c
  9989  0019FC  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9990  0019FE  90D8               	bcf	status,0,c
  9991  001A00  3612               	rlcf	??_calculateSetFilterMask,f,c
  9992  001A02  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9993  001A04  90D8               	bcf	status,0,c
  9994  001A06  3612               	rlcf	??_calculateSetFilterMask,f,c
  9995  001A08  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9996  001A0A  0E48               	movlw	72
  9997  001A0C  2412               	addwf	??_calculateSetFilterMask,w,c
  9998  001A0E  6E08               	movwf	?_readEEPROM,c
  9999  001A10  0E00               	movlw	0
 10000  001A12  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10001  001A14  6E09               	movwf	?_readEEPROM+1,c
 10002  001A16  ECDE  F020         	call	_readEEPROM	;wreg free
 10003  001A1A  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10004  001A1C  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 10005  001A20  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 10006  001A22  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10007  001A24  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 10008  001A26  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 10009  001A2A  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 10010  001A2E  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 10011  001A32  6A15               	clrf	??_calculateSetFilterMask+3,c
 10012  001A34  5043               	movf	calculateSetFilterMask@i,w,c
 10013  001A36  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 10014  001A38  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 10015  001A3A  90D8               	bcf	status,0,c
 10016  001A3C  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10017  001A3E  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10018  001A40  90D8               	bcf	status,0,c
 10019  001A42  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10020  001A44  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10021  001A46  90D8               	bcf	status,0,c
 10022  001A48  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10023  001A4A  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10024  001A4C  0E46               	movlw	70
 10025  001A4E  2419               	addwf	??_calculateSetFilterMask+7,w,c
 10026  001A50  6E08               	movwf	?_readEEPROM,c
 10027  001A52  0E00               	movlw	0
 10028  001A54  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 10029  001A56  6E09               	movwf	?_readEEPROM+1,c
 10030  001A58  ECDE  F020         	call	_readEEPROM	;wreg free
 10031  001A5C  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 10032  001A5E  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 10033  001A62  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 10034  001A64  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 10035  001A66  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 10036  001A68  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 10037  001A6C  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 10038  001A70  6A1D               	clrf	??_calculateSetFilterMask+11,c
 10039  001A72  6A1C               	clrf	??_calculateSetFilterMask+10,c
 10040  001A74  5043               	movf	calculateSetFilterMask@i,w,c
 10041  001A76  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 10042  001A78  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 10043  001A7A  90D8               	bcf	status,0,c
 10044  001A7C  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10045  001A7E  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10046  001A80  90D8               	bcf	status,0,c
 10047  001A82  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10048  001A84  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10049  001A86  90D8               	bcf	status,0,c
 10050  001A88  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10051  001A8A  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10052  001A8C  0E44               	movlw	68
 10053  001A8E  2420               	addwf	??_calculateSetFilterMask+14,w,c
 10054  001A90  6E08               	movwf	?_readEEPROM,c
 10055  001A92  0E00               	movlw	0
 10056  001A94  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 10057  001A96  6E09               	movwf	?_readEEPROM+1,c
 10058  001A98  ECDE  F020         	call	_readEEPROM	;wreg free
 10059  001A9C  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 10060  001A9E  0E01               	movlw	1
 10061  001AA0  1622               	andwf	??_calculateSetFilterMask+16,f,c
 10062  001AA2  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 10063  001AA6  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 10064  001AA8  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 10065  001AAA  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 10066  001AAC  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
 10067  001AB0  6A25               	clrf	??_calculateSetFilterMask+19,c
 10068  001AB2  6A24               	clrf	??_calculateSetFilterMask+18,c
 10069  001AB4  6A23               	clrf	??_calculateSetFilterMask+17,c
 10070  001AB6  501C               	movf	??_calculateSetFilterMask+10,w,c
 10071  001AB8  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 10072  001ABA  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 10073  001ABC  501D               	movf	??_calculateSetFilterMask+11,w,c
 10074  001ABE  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 10075  001AC0  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 10076  001AC2  501E               	movf	??_calculateSetFilterMask+12,w,c
 10077  001AC4  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 10078  001AC6  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 10079  001AC8  501F               	movf	??_calculateSetFilterMask+13,w,c
 10080  001ACA  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 10081  001ACC  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 10082  001ACE  5015               	movf	??_calculateSetFilterMask+3,w,c
 10083  001AD0  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 10084  001AD2  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 10085  001AD4  5016               	movf	??_calculateSetFilterMask+4,w,c
 10086  001AD6  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 10087  001AD8  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 10088  001ADA  5017               	movf	??_calculateSetFilterMask+5,w,c
 10089  001ADC  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 10090  001ADE  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 10091  001AE0  5018               	movf	??_calculateSetFilterMask+6,w,c
 10092  001AE2  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10093  001AE4  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10094  001AE6  5043               	movf	calculateSetFilterMask@i,w,c
 10095  001AE8  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
 10096  001AEA  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
 10097  001AEC  90D8               	bcf	status,0,c
 10098  001AEE  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10099  001AF0  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10100  001AF2  90D8               	bcf	status,0,c
 10101  001AF4  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10102  001AF6  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10103  001AF8  90D8               	bcf	status,0,c
 10104  001AFA  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10105  001AFC  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10106  001AFE  0E43               	movlw	67
 10107  001B00  242F               	addwf	??_calculateSetFilterMask+29,w,c
 10108  001B02  6E08               	movwf	?_readEEPROM,c
 10109  001B04  0E00               	movlw	0
 10110  001B06  2030               	addwfc	??_calculateSetFilterMask+30,w,c
 10111  001B08  6E09               	movwf	?_readEEPROM+1,c
 10112  001B0A  ECDE  F020         	call	_readEEPROM	;wreg free
 10113  001B0E  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10114  001B10  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
 10115  001B12  502C               	movf	??_calculateSetFilterMask+26,w,c
 10116  001B14  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
 10117  001B16  502D               	movf	??_calculateSetFilterMask+27,w,c
 10118  001B18  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
 10119  001B1A  502E               	movf	??_calculateSetFilterMask+28,w,c
 10120  001B1C  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
 10121                           
 10122                           ;main.c: 2640: if ( 0 == i ) filter = rowfilter;
 10123  001B1E  6643               	tstfsz	calculateSetFilterMask@i,c
 10124  001B20  D008               	goto	l8469
 10125  001B22  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
 10126  001B26  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
 10127  001B2A  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
 10128  001B2E  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
 10129  001B32                     l8469:
 10130                           
 10131                           ;main.c: 2644: mask &= rowmask;
 10132  001B32  5031               	movf	calculateSetFilterMask@rowmask,w,c
 10133  001B34  1636               	andwf	calculateSetFilterMask@mask,f,c
 10134  001B36  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
 10135  001B38  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10136  001B3A  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
 10137  001B3C  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10138  001B3E  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
 10139  001B40  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10140                           
 10141                           ;main.c: 2649: for ( j=0; j<32; j++ ) {
 10142  001B42  6A42               	clrf	calculateSetFilterMask@j,c
 10143  001B44                     l8477:
 10144                           
 10145                           ;main.c: 2651: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
 10146  001B44  5042               	movf	calculateSetFilterMask@j,w,c
 10147  001B46  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
 10148  001B4A  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
 10149  001B4E  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
 10150  001B52  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
 10151  001B56  2AE8               	incf	wreg,f,c
 10152  001B58  D005               	goto	u9830
 10153  001B5A                     u9835:
 10154  001B5A  90D8               	bcf	status,0,c
 10155  001B5C  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10156  001B5E  3214               	rrcf	??_calculateSetFilterMask+2,f,c
 10157  001B60  3213               	rrcf	??_calculateSetFilterMask+1,f,c
 10158  001B62  3212               	rrcf	??_calculateSetFilterMask,f,c
 10159  001B64                     u9830:
 10160  001B64  2EE8               	decfsz	wreg,f,c
 10161  001B66  D7F9               	goto	u9835
 10162  001B68  0E01               	movlw	1
 10163  001B6A  1612               	andwf	??_calculateSetFilterMask,f,c
 10164  001B6C  5042               	movf	calculateSetFilterMask@j,w,c
 10165  001B6E  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
 10166  001B72  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
 10167  001B76  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
 10168  001B7A  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
 10169  001B7E  2AE8               	incf	wreg,f,c
 10170  001B80  D005               	goto	u9840
 10171  001B82                     u9845:
 10172  001B82  90D8               	bcf	status,0,c
 10173  001B84  3219               	rrcf	??_calculateSetFilterMask+7,f,c
 10174  001B86  3218               	rrcf	??_calculateSetFilterMask+6,f,c
 10175  001B88  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10176  001B8A  3216               	rrcf	??_calculateSetFilterMask+4,f,c
 10177  001B8C                     u9840:
 10178  001B8C  2EE8               	decfsz	wreg,f,c
 10179  001B8E  D7F9               	goto	u9845
 10180  001B90  5016               	movf	??_calculateSetFilterMask+4,w,c
 10181  001B92  0B01               	andlw	1
 10182  001B94  1812               	xorwf	??_calculateSetFilterMask,w,c
 10183  001B96  E01D               	bz	l8481
 10184                           
 10185                           ;main.c: 2652: mask &= ~(1<<j);
 10186  001B98  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
 10187  001B9C  0E01               	movlw	1
 10188  001B9E  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10189  001BA0  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10190  001BA2  2A12               	incf	??_calculateSetFilterMask,f,c
 10191  001BA4  D003               	goto	u9864
 10192  001BA6                     u9865:
 10193  001BA6  90D8               	bcf	status,0,c
 10194  001BA8  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10195  001BAA  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10196  001BAC                     u9864:
 10197  001BAC  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10198  001BAE  D7FB               	goto	u9865
 10199  001BB0  1C13               	comf	??_calculateSetFilterMask+1,w,c
 10200  001BB2  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10201  001BB4  1C14               	comf	??_calculateSetFilterMask+2,w,c
 10202  001BB6  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
 10203  001BB8  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10204  001BBA  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10205  001BBC  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
 10206  001BBE  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
 10207  001BC0  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10208  001BC2  5015               	movf	??_calculateSetFilterMask+3,w,c
 10209  001BC4  1636               	andwf	calculateSetFilterMask@mask,f,c
 10210  001BC6  5016               	movf	??_calculateSetFilterMask+4,w,c
 10211  001BC8  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10212  001BCA  5017               	movf	??_calculateSetFilterMask+5,w,c
 10213  001BCC  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10214  001BCE  5018               	movf	??_calculateSetFilterMask+6,w,c
 10215  001BD0  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10216  001BD2                     l8481:
 10217  001BD2  2A42               	incf	calculateSetFilterMask@j,f,c
 10218  001BD4  0E1F               	movlw	31
 10219  001BD6  6442               	cpfsgt	calculateSetFilterMask@j,c
 10220  001BD8  D7B5               	goto	l8477
 10221                           
 10222                           ;main.c: 2653: }
 10223                           ;main.c: 2654: }
 10224                           ;main.c: 2660: filter &= rowfilter;
 10225  001BDA  503E               	movf	calculateSetFilterMask@rowfilter,w,c
 10226  001BDC  163A               	andwf	calculateSetFilterMask@filter,f,c
 10227  001BDE  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
 10228  001BE0  163B               	andwf	calculateSetFilterMask@filter+1,f,c
 10229  001BE2  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
 10230  001BE4  163C               	andwf	calculateSetFilterMask@filter+2,f,c
 10231  001BE6  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
 10232  001BE8  163D               	andwf	calculateSetFilterMask@filter+3,f,c
 10233                           
 10234                           ;main.c: 2668: }
 10235                           ;main.c: 2670: if (i) {
 10236                           
 10237                           ;main.c: 2663: if ( !readEEPROM( 0x43 + 8*i + 1 ) & 0x40 ) {
 10238  001BEA  5043               	movf	calculateSetFilterMask@i,w,c
 10239  001BEC  E04F               	bz	l8501
 10240                           
 10241                           ;main.c: 2673: for (j = 0; j < 8; j++) {
 10242  001BEE  6A42               	clrf	calculateSetFilterMask@j,c
 10243  001BF0                     l8495:
 10244                           
 10245                           ;main.c: 2674: if ((lastOID >> i & 1)
 10246                           ;main.c: 2675: != (readEEPROM(0x43 + 8 * i) >> i & 1)) {
 10247  001BF0  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10248  001BF4  5043               	movf	calculateSetFilterMask@i,w,c
 10249  001BF6  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10250  001BF8  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10251  001BFA  90D8               	bcf	status,0,c
 10252  001BFC  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10253  001BFE  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10254  001C00  90D8               	bcf	status,0,c
 10255  001C02  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10256  001C04  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10257  001C06  90D8               	bcf	status,0,c
 10258  001C08  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10259  001C0A  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10260  001C0C  0E43               	movlw	67
 10261  001C0E  2413               	addwf	??_calculateSetFilterMask+1,w,c
 10262  001C10  6E08               	movwf	?_readEEPROM,c
 10263  001C12  0E00               	movlw	0
 10264  001C14  2014               	addwfc	??_calculateSetFilterMask+2,w,c
 10265  001C16  6E09               	movwf	?_readEEPROM+1,c
 10266  001C18  ECDE  F020         	call	_readEEPROM	;wreg free
 10267  001C1C  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10268  001C1E  2A12               	incf	??_calculateSetFilterMask,f,c
 10269  001C20  D002               	goto	u9894
 10270  001C22                     u9895:
 10271  001C22  90D8               	bcf	status,0,c
 10272  001C24  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10273  001C26                     u9894:
 10274  001C26  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10275  001C28  D7FC               	goto	u9895
 10276  001C2A  0E01               	movlw	1
 10277  001C2C  1615               	andwf	??_calculateSetFilterMask+3,f,c
 10278  001C2E  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 10279  001C32  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 10280  001C36  2A16               	incf	??_calculateSetFilterMask+4,f,c
 10281  001C38  D002               	goto	u9904
 10282  001C3A                     u9905:
 10283  001C3A  90D8               	bcf	status,0,c
 10284  001C3C  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10285  001C3E                     u9904:
 10286  001C3E  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 10287  001C40  D7FC               	goto	u9905
 10288  001C42  5017               	movf	??_calculateSetFilterMask+5,w,c
 10289  001C44  0B01               	andlw	1
 10290  001C46  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 10291  001C48  E01D               	bz	l8499
 10292                           
 10293                           ;main.c: 2676: mask &= (1 << i);
 10294  001C4A  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10295  001C4E  0E01               	movlw	1
 10296  001C50  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10297  001C52  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10298  001C54  2A12               	incf	??_calculateSetFilterMask,f,c
 10299  001C56  D003               	goto	u9924
 10300  001C58                     u9925:
 10301  001C58  90D8               	bcf	status,0,c
 10302  001C5A  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10303  001C5C  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10304  001C5E                     u9924:
 10305  001C5E  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10306  001C60  D7FB               	goto	u9925
 10307  001C62  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 10308  001C66  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 10309  001C6A  0E00               	movlw	0
 10310  001C6C  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10311  001C6E  0EFF               	movlw	255
 10312  001C70  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 10313  001C72  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10314  001C74  5015               	movf	??_calculateSetFilterMask+3,w,c
 10315  001C76  1636               	andwf	calculateSetFilterMask@mask,f,c
 10316  001C78  5016               	movf	??_calculateSetFilterMask+4,w,c
 10317  001C7A  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10318  001C7C  5017               	movf	??_calculateSetFilterMask+5,w,c
 10319  001C7E  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10320  001C80  5018               	movf	??_calculateSetFilterMask+6,w,c
 10321  001C82  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10322  001C84                     l8499:
 10323  001C84  2A42               	incf	calculateSetFilterMask@j,f,c
 10324  001C86  0E07               	movlw	7
 10325  001C88  6442               	cpfsgt	calculateSetFilterMask@j,c
 10326  001C8A  D7B2               	goto	l8495
 10327  001C8C                     l8501:
 10328                           
 10329                           ;main.c: 2677: }
 10330                           ;main.c: 2678: }
 10331                           ;main.c: 2680: lastOID = readEEPROM(0x43 + 8 * i);
 10332  001C8C  5043               	movf	calculateSetFilterMask@i,w,c
 10333  001C8E  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10334  001C90  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10335  001C92  90D8               	bcf	status,0,c
 10336  001C94  3612               	rlcf	??_calculateSetFilterMask,f,c
 10337  001C96  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10338  001C98  90D8               	bcf	status,0,c
 10339  001C9A  3612               	rlcf	??_calculateSetFilterMask,f,c
 10340  001C9C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10341  001C9E  90D8               	bcf	status,0,c
 10342  001CA0  3612               	rlcf	??_calculateSetFilterMask,f,c
 10343  001CA2  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10344  001CA4  0E43               	movlw	67
 10345  001CA6  2412               	addwf	??_calculateSetFilterMask,w,c
 10346  001CA8  6E08               	movwf	?_readEEPROM,c
 10347  001CAA  0E00               	movlw	0
 10348  001CAC  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10349  001CAE  6E09               	movwf	?_readEEPROM+1,c
 10350  001CB0  ECDE  F020         	call	_readEEPROM	;wreg free
 10351  001CB4  6E35               	movwf	calculateSetFilterMask@lastOID,c
 10352  001CB6                     l8505:
 10353  001CB6  2A43               	incf	calculateSetFilterMask@i,f,c
 10354  001CB8  0E06               	movlw	6
 10355  001CBA  6443               	cpfsgt	calculateSetFilterMask@i,c
 10356  001CBC  D5FD               	goto	l8461
 10357                           
 10358                           ;main.c: 2686: }
 10359                           ;main.c: 2688: }
 10360                           ;main.c: 2689: }
 10361                           ;main.c: 2692: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 10362  001CBE  0E80               	movlw	128
 10363  001CC0  EC90  F020         	call	_ECANSetOperationMode
 10364                           
 10365                           ;main.c: 2695: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 10366  001CC4  010F               	movlb	15	; () banked
 10367  001CC6  0E0F               	movlw	15	;volatile
 10368  001CC8  6E09               	movwf	?__CANIDToRegs+1,c
 10369  001CCA  0E1C               	movlw	28	;volatile
 10370  001CCC  6E08               	movwf	?__CANIDToRegs,c
 10371  001CCE  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 10372  001CD2  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 10373  001CD6  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 10374  001CDA  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 10375  001CDE  0E01               	movlw	1
 10376  001CE0  6E0E               	movwf	?__CANIDToRegs+6,c
 10377  001CE2  ECB8  F018         	call	__CANIDToRegs	;wreg free
 10378                           
 10379                           ;main.c: 2698: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 10380  001CE6  010D               	movlb	13	; () banked
 10381  001CE8  83D4               	bsf	212,1,b	;volatile
 10382                           
 10383                           ; BSR set to: 13
 10384  001CEA  010F               	movlb	15	; () banked
 10385  001CEC  0E0F               	movlw	15	;volatile
 10386  001CEE  6E09               	movwf	?__CANIDToRegs+1,c
 10387  001CF0  0E04               	movlw	4	;volatile
 10388  001CF2  6E08               	movwf	?__CANIDToRegs,c
 10389  001CF4  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 10390  001CF8  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 10391  001CFC  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 10392  001D00  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 10393  001D04  0E01               	movlw	1
 10394  001D06  6E0E               	movwf	?__CANIDToRegs+6,c
 10395  001D08  ECB8  F018         	call	__CANIDToRegs	;wreg free
 10396                           
 10397                           ;main.c: 2701: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 10398  001D0C  0E00               	movlw	0
 10399  001D0E  EF90  F020         	goto	_ECANSetOperationMode
 10400  001D12                     __end_of_calculateSetFilterMask:
 10401                           	opt stack 0
 10402                           tblptru	equ	0xFF8
 10403                           prodh	equ	0xFF4
 10404                           prodl	equ	0xFF3
 10405                           postinc0	equ	0xFEE
 10406                           wreg	equ	0xFE8
 10407                           indf2	equ	0xFDF
 10408                           postinc2	equ	0xFDE
 10409                           postdec2	equ	0xFDD
 10410                           fsr2h	equ	0xFDA
 10411                           fsr2l	equ	0xFD9
 10412                           status	equ	0xFD8
 10413                           
 10414 ;; *************** function _SendInformationEvent *****************
 10415 ;; Defined at:
 10416 ;;		line 1564 in file "../main.c"
 10417 ;; Parameters:    Size  Location     Type
 10418 ;;  idx             1    wreg     unsigned char 
 10419 ;;  eventClass      1   20[BANK0 ] unsigned char 
 10420 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
 10421 ;; Auto vars:     Size  Location     Type
 10422 ;;  idx             1   79[COMRAM] unsigned char 
 10423 ;;  data            3   76[COMRAM] unsigned char [3]
 10424 ;; Return value:  Size  Location     Type
 10425 ;;		None               void
 10426 ;; Registers used:
 10427 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10428 ;; Tracked objects:
 10429 ;;		On entry : F/0
 10430 ;;		On exit  : F/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10433 ;;      Params:         0       2       0       0       0       0       0
 10434 ;;      Locals:         4       0       0       0       0       0       0
 10435 ;;      Temps:          2       0       0       0       0       0       0
 10436 ;;      Totals:         6       2       0       0       0       0       0
 10437 ;;Total ram usage:        8 bytes
 10438 ;; Hardware stack levels used:    1
 10439 ;; Hardware stack levels required when called:    6
 10440 ;; This function calls:
 10441 ;;		_readEEPROM
 10442 ;;		_sendVSCPFrame
 10443 ;; This function is called by:
 10444 ;;		_doApplicationOneSecondWork
 10445 ;;		_vscp_writeAppReg
 10446 ;;		_doActionOn
 10447 ;;		_doActionOff
 10448 ;;		_doActionStatus
 10449 ;;		_doActionToggle
 10450 ;; This function uses a non-reentrant model
 10451 ;;
 10452                           
 10453                           	psect	text28
 10454  003C8E                     __ptext28:
 10455                           	opt stack 0
 10456  003C8E                     _SendInformationEvent:
 10457                           	opt stack 23
 10458                           
 10459                           ;incstack = 0
 10460                           ;incstack = 0
 10461                           ;SendInformationEvent@idx stored from wreg
 10462  003C8E  CFE8 F050          	movff	wreg,SendInformationEvent@idx
 10463                           
 10464                           ; BSR set to: 0
 10465                           ;main.c: 1565: uint8_t data[3];
 10466                           ;main.c: 1578: data[ 0 ] = idx;
 10467  003C92  C050  F04D         	movff	SendInformationEvent@idx,SendInformationEvent@data
 10468                           
 10469                           ; BSR set to: 0
 10470                           ;main.c: 1579: data[ 1 ] = readEEPROM( 0x43 + 50 + 2*idx );
 10471  003C96  90D8               	bcf	status,0,c
 10472  003C98  3450               	rlcf	SendInformationEvent@idx,w,c
 10473  003C9A  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10474  003C9C  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10475  003C9E  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10476  003CA0  0E75               	movlw	117
 10477  003CA2  244B               	addwf	??_SendInformationEvent,w,c
 10478  003CA4  6E08               	movwf	?_readEEPROM,c
 10479  003CA6  0E00               	movlw	0
 10480  003CA8  204C               	addwfc	??_SendInformationEvent+1,w,c
 10481  003CAA  6E09               	movwf	?_readEEPROM+1,c
 10482  003CAC  ECDE  F020         	call	_readEEPROM	;wreg free
 10483  003CB0  6E4E               	movwf	SendInformationEvent@data+1,c
 10484                           
 10485                           ;main.c: 1580: data[ 2 ] = readEEPROM( 0x43 + 51 + 2*idx );
 10486  003CB2  90D8               	bcf	status,0,c
 10487  003CB4  3450               	rlcf	SendInformationEvent@idx,w,c
 10488  003CB6  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10489  003CB8  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10490  003CBA  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10491  003CBC  0E76               	movlw	118
 10492  003CBE  244B               	addwf	??_SendInformationEvent,w,c
 10493  003CC0  6E08               	movwf	?_readEEPROM,c
 10494  003CC2  0E00               	movlw	0
 10495  003CC4  204C               	addwfc	??_SendInformationEvent+1,w,c
 10496  003CC6  6E09               	movwf	?_readEEPROM+1,c
 10497  003CC8  ECDE  F020         	call	_readEEPROM	;wreg free
 10498  003CCC  6E4F               	movwf	SendInformationEvent@data+2,c
 10499                           
 10500                           ;main.c: 1581: sendVSCPFrame( eventClass,
 10501                           ;main.c: 1582: eventTypeId,
 10502                           ;main.c: 1583: vscp_nickname,
 10503                           ;main.c: 1584: 0x03,
 10504                           ;main.c: 1585: 3,
 10505                           ;main.c: 1586: data );
 10506  003CCE  0100               	movlb	0	; () banked
 10507  003CD0  C0C5  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
 10508  003CD4  6A40               	clrf	?_sendVSCPFrame+1,c
 10509  003CD6  C0C6  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
 10510  003CDA  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 10511  003CDE  0E03               	movlw	3
 10512  003CE0  6E43               	movwf	?_sendVSCPFrame+4,c
 10513  003CE2  6E44               	movwf	?_sendVSCPFrame+5,c
 10514  003CE4  0E4D               	movlw	low SendInformationEvent@data
 10515  003CE6  6E45               	movwf	?_sendVSCPFrame+6,c
 10516  003CE8  0E00               	movlw	high SendInformationEvent@data
 10517  003CEA  6E46               	movwf	?_sendVSCPFrame+7,c
 10518  003CEC  0E0F               	movlw	15
 10519  003CEE  6E46               	movwf	?_sendVSCPFrame+7,c
 10520  003CF0  0E5F               	movlw	__accesstop+-1
 10521  003CF2  6445               	cpfsgt	?_sendVSCPFrame+6,c
 10522  003CF4  6A46               	clrf	?_sendVSCPFrame+7,c
 10523  003CF6  EF99  F01C         	goto	_sendVSCPFrame	;wreg free
 10524  003CFA                     __end_of_SendInformationEvent:
 10525                           	opt stack 0
 10526                           tblptru	equ	0xFF8
 10527                           prodh	equ	0xFF4
 10528                           prodl	equ	0xFF3
 10529                           postinc0	equ	0xFEE
 10530                           wreg	equ	0xFE8
 10531                           indf2	equ	0xFDF
 10532                           postinc2	equ	0xFDE
 10533                           postdec2	equ	0xFDD
 10534                           fsr2h	equ	0xFDA
 10535                           fsr2l	equ	0xFD9
 10536                           status	equ	0xFD8
 10537                           
 10538 ;; *************** function _vscp_readRegister *****************
 10539 ;; Defined at:
 10540 ;;		line 553 in file "../../vscp_firmware/common/vscp_firmware.c"
 10541 ;; Parameters:    Size  Location     Type
 10542 ;;  reg             1    wreg     unsigned char 
 10543 ;; Auto vars:     Size  Location     Type
 10544 ;;  reg             1   13[COMRAM] unsigned char 
 10545 ;; Return value:  Size  Location     Type
 10546 ;;                  1    wreg      unsigned char 
 10547 ;; Registers used:
 10548 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10549 ;; Tracked objects:
 10550 ;;		On entry : F/0
 10551 ;;		On exit  : 0/0
 10552 ;;		Unchanged: 0/0
 10553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10554 ;;      Params:         0       0       0       0       0       0       0
 10555 ;;      Locals:         1       0       0       0       0       0       0
 10556 ;;      Temps:          0       0       0       0       0       0       0
 10557 ;;      Totals:         1       0       0       0       0       0       0
 10558 ;;Total ram usage:        1 bytes
 10559 ;; Hardware stack levels used:    1
 10560 ;; Hardware stack levels required when called:    5
 10561 ;; This function calls:
 10562 ;;		_vscp_readAppReg
 10563 ;;		_vscp_readStdReg
 10564 ;; This function is called by:
 10565 ;;		_vscp_handleProtocolEvent
 10566 ;; This function uses a non-reentrant model
 10567 ;;
 10568                           
 10569                           	psect	text29
 10570  0040BE                     __ptext29:
 10571                           	opt stack 0
 10572  0040BE                     _vscp_readRegister:
 10573                           	opt stack 24
 10574                           
 10575                           ; BSR set to: 0
 10576                           ;incstack = 0
 10577                           ;incstack = 0
 10578                           ;vscp_readRegister@reg stored from wreg
 10579  0040BE  CFE8 F00E          	movff	wreg,vscp_readRegister@reg
 10580                           
 10581                           ; BSR set to: 0
 10582                           ;vscp_firmware.c: 554: if (reg >= 0x80) {
 10583  0040C2  0E7F               	movlw	127
 10584  0040C4  640E               	cpfsgt	vscp_readRegister@reg,c
 10585  0040C6  D004               	goto	l8981
 10586                           
 10587                           ; BSR set to: 0
 10588                           ;vscp_firmware.c: 555: return vscp_readStdReg(reg);
 10589  0040C8  500E               	movf	vscp_readRegister@reg,w,c
 10590  0040CA  ECFD  F01A         	call	_vscp_readStdReg
 10591  0040CE  D003               	goto	l1108
 10592  0040D0                     l8981:
 10593                           
 10594                           ; BSR set to: 0
 10595                           ;vscp_firmware.c: 557: return vscp_readAppReg(reg);
 10596  0040D0  500E               	movf	vscp_readRegister@reg,w,c
 10597  0040D2  ECF4  F01C         	call	_vscp_readAppReg
 10598  0040D6                     l1108:
 10599  0040D6  0012               	return	
 10600  0040D8                     __end_of_vscp_readRegister:
 10601                           	opt stack 0
 10602                           tblptru	equ	0xFF8
 10603                           prodh	equ	0xFF4
 10604                           prodl	equ	0xFF3
 10605                           postinc0	equ	0xFEE
 10606                           wreg	equ	0xFE8
 10607                           indf2	equ	0xFDF
 10608                           postinc2	equ	0xFDE
 10609                           postdec2	equ	0xFDD
 10610                           fsr2h	equ	0xFDA
 10611                           fsr2l	equ	0xFD9
 10612                           status	equ	0xFD8
 10613                           
 10614 ;; *************** function _vscp_readStdReg *****************
 10615 ;; Defined at:
 10616 ;;		line 566 in file "../../vscp_firmware/common/vscp_firmware.c"
 10617 ;; Parameters:    Size  Location     Type
 10618 ;;  reg             1    wreg     unsigned char 
 10619 ;; Auto vars:     Size  Location     Type
 10620 ;;  reg             1   12[COMRAM] unsigned char 
 10621 ;;  rv              1   11[COMRAM] unsigned char 
 10622 ;; Return value:  Size  Location     Type
 10623 ;;                  1    wreg      unsigned char 
 10624 ;; Registers used:
 10625 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10626 ;; Tracked objects:
 10627 ;;		On entry : F/0
 10628 ;;		On exit  : 0/0
 10629 ;;		Unchanged: 0/0
 10630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10631 ;;      Params:         0       0       0       0       0       0       0
 10632 ;;      Locals:         2       0       0       0       0       0       0
 10633 ;;      Temps:          0       0       0       0       0       0       0
 10634 ;;      Totals:         2       0       0       0       0       0       0
 10635 ;;Total ram usage:        2 bytes
 10636 ;; Hardware stack levels used:    1
 10637 ;; Hardware stack levels required when called:    4
 10638 ;; This function calls:
 10639 ;;		_vscp_getMajorVersion
 10640 ;;		_vscp_getMinorVersion
 10641 ;;		_vscp_getSubMinorVersion
 10642 ;;		_vscp_getGUID
 10643 ;;		_vscp_getMDF_URL
 10644 ;;		_vscp_getUserID
 10645 ;;		_vscp_getManufacturerId
 10646 ;;		_vscp_getBootLoaderAlgorithm
 10647 ;;		_vscp_getBufferSize
 10648 ;;		_vscp_getRegisterPagesUsed
 10649 ;; This function is called by:
 10650 ;;		_vscp_readRegister
 10651 ;;		_vscp_handleProtocolEvent
 10652 ;; This function uses a non-reentrant model
 10653 ;;
 10654                           
 10655                           	psect	text30
 10656  0035FA                     __ptext30:
 10657                           	opt stack 0
 10658  0035FA                     _vscp_readStdReg:
 10659                           	opt stack 25
 10660                           
 10661                           ;incstack = 0
 10662                           ;incstack = 0
 10663                           ;vscp_readStdReg@reg stored from wreg
 10664  0035FA  CFE8 F00D          	movff	wreg,vscp_readStdReg@reg
 10665                           
 10666                           ; BSR set to: 0
 10667                           ;vscp_firmware.c: 569: if (0x80 == reg) {
 10668                           
 10669                           ; BSR set to: 0
 10670  0035FE  500D               	movf	vscp_readStdReg@reg,w,c
 10671  003600  0A80               	xorlw	128
 10672  003602  E104               	bnz	l8991
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;vscp_firmware.c: 572: rv = vscp_alarmstatus;
 10676  003604  C08C  F00C         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 10677                           
 10678                           ;vscp_firmware.c: 573: vscp_alarmstatus = 0x00;
 10679  003608  6B8C               	clrf	_vscp_alarmstatus& (0+255),b
 10680                           
 10681                           ;vscp_firmware.c: 575: }
 10682  00360A  D067               	goto	l9057
 10683  00360C                     l8991:
 10684                           
 10685                           ; BSR set to: 0
 10686                           ;vscp_firmware.c: 576: else if (0x81 == reg) {
 10687  00360C  500D               	movf	vscp_readStdReg@reg,w,c
 10688  00360E  0A81               	xorlw	129
 10689  003610  E102               	bnz	l8995
 10690                           
 10691                           ; BSR set to: 0
 10692                           ;vscp_firmware.c: 579: rv = 1;
 10693  003612  0E01               	movlw	1
 10694  003614  D061               	goto	L27
 10695  003616                     l8995:
 10696                           
 10697                           ; BSR set to: 0
 10698                           ;vscp_firmware.c: 582: else if (0x82 == reg) {
 10699  003616  500D               	movf	vscp_readStdReg@reg,w,c
 10700  003618  0A82               	xorlw	130
 10701  00361A  E102               	bnz	l8999
 10702                           
 10703                           ; BSR set to: 0
 10704                           ;vscp_firmware.c: 585: rv = 5;
 10705  00361C  0E05               	movlw	5
 10706  00361E  D05C               	goto	L27
 10707  003620                     l8999:
 10708                           
 10709                           ; BSR set to: 0
 10710                           ;vscp_firmware.c: 588: else if (0x83 == reg) {
 10711  003620  500D               	movf	vscp_readStdReg@reg,w,c
 10712  003622  0A83               	xorlw	131
 10713  003624  E102               	bnz	l9003
 10714                           
 10715                           ; BSR set to: 0
 10716                           ;vscp_firmware.c: 591: rv = 0;
 10717  003626  6A0C               	clrf	vscp_readStdReg@rv,c
 10718                           
 10719                           ;vscp_firmware.c: 593: }
 10720  003628  D058               	goto	l9057
 10721  00362A                     l9003:
 10722                           
 10723                           ; BSR set to: 0
 10724                           ;vscp_firmware.c: 594: else if (0x94 == reg) {
 10725  00362A  500D               	movf	vscp_readStdReg@reg,w,c
 10726  00362C  0A94               	xorlw	148
 10727  00362E  E103               	bnz	l9007
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;vscp_firmware.c: 597: rv = vscp_getMajorVersion();
 10731  003630  EC1A  F021         	call	_vscp_getMajorVersion	;wreg free
 10732  003634  D051               	goto	L27
 10733  003636                     l9007:
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;vscp_firmware.c: 600: else if (0x95 == reg) {
 10737  003636  500D               	movf	vscp_readStdReg@reg,w,c
 10738  003638  0A95               	xorlw	149
 10739  00363A  E103               	bnz	l9011
 10740                           
 10741                           ; BSR set to: 0
 10742                           ;vscp_firmware.c: 603: rv = vscp_getMinorVersion();
 10743  00363C  EC19  F021         	call	_vscp_getMinorVersion	;wreg free
 10744  003640  D04B               	goto	L27
 10745  003642                     l9011:
 10746                           
 10747                           ; BSR set to: 0
 10748                           ;vscp_firmware.c: 606: else if (0x96 == reg) {
 10749  003642  500D               	movf	vscp_readStdReg@reg,w,c
 10750  003644  0A96               	xorlw	150
 10751  003646  E103               	bnz	l9015
 10752                           
 10753                           ; BSR set to: 0
 10754                           ;vscp_firmware.c: 609: rv = vscp_getSubMinorVersion();
 10755  003648  EC18  F021         	call	_vscp_getSubMinorVersion	;wreg free
 10756  00364C  D045               	goto	L27
 10757  00364E                     l9015:
 10758                           
 10759                           ; BSR set to: 0
 10760                           ;vscp_firmware.c: 612: else if (reg < 0x89) {
 10761  00364E  0E89               	movlw	137
 10762  003650  600D               	cpfslt	vscp_readStdReg@reg,c
 10763  003652  D005               	goto	l9019
 10764                           
 10765                           ; BSR set to: 0
 10766                           ;vscp_firmware.c: 615: rv = vscp_getUserID(reg - 0x84);
 10767  003654  500D               	movf	vscp_readStdReg@reg,w,c
 10768  003656  0F7C               	addlw	124
 10769  003658  ECA6  F020         	call	_vscp_getUserID
 10770  00365C  D03D               	goto	L27
 10771  00365E                     l9019:
 10772                           
 10773                           ; BSR set to: 0
 10774                           ;vscp_firmware.c: 618: else if ((reg > 0x88) &&
 10775                           ;vscp_firmware.c: 619: (reg < 0x91)) {
 10776  00365E  0E88               	movlw	136
 10777  003660  640D               	cpfsgt	vscp_readStdReg@reg,c
 10778  003662  D008               	goto	l9025
 10779                           
 10780                           ; BSR set to: 0
 10781  003664  0E91               	movlw	145
 10782  003666  600D               	cpfslt	vscp_readStdReg@reg,c
 10783  003668  D005               	goto	l9025
 10784                           
 10785                           ; BSR set to: 0
 10786                           ;vscp_firmware.c: 622: rv = vscp_getManufacturerId(reg - 0x89);
 10787  00366A  500D               	movf	vscp_readStdReg@reg,w,c
 10788  00366C  0F77               	addlw	119
 10789  00366E  EC9C  F020         	call	_vscp_getManufacturerId
 10790  003672  D032               	goto	L27
 10791  003674                     l9025:
 10792                           
 10793                           ; BSR set to: 0
 10794                           ;vscp_firmware.c: 625: else if (0x91 == reg) {
 10795  003674  500D               	movf	vscp_readStdReg@reg,w,c
 10796  003676  0A91               	xorlw	145
 10797  003678  E103               	bnz	l9029
 10798                           
 10799                           ; BSR set to: 0
 10800                           ;vscp_firmware.c: 628: rv = vscp_nickname;
 10801  00367A  C091  F00C         	movff	_vscp_nickname,vscp_readStdReg@rv
 10802                           
 10803                           ;vscp_firmware.c: 630: }
 10804  00367E  D02D               	goto	l9057
 10805  003680                     l9029:
 10806                           
 10807                           ; BSR set to: 0
 10808                           ;vscp_firmware.c: 631: else if (0x93 == reg) {
 10809  003680  500D               	movf	vscp_readStdReg@reg,w,c
 10810  003682  0A93               	xorlw	147
 10811  003684  E103               	bnz	l9033
 10812                           
 10813                           ; BSR set to: 0
 10814                           ;vscp_firmware.c: 634: rv = (vscp_page_select & 0xff);
 10815  003686  C052  F00C         	movff	_vscp_page_select,vscp_readStdReg@rv
 10816                           
 10817                           ;vscp_firmware.c: 636: }
 10818  00368A  D027               	goto	l9057
 10819  00368C                     l9033:
 10820                           
 10821                           ; BSR set to: 0
 10822                           ;vscp_firmware.c: 638: else if (0x92 == reg) {
 10823  00368C  500D               	movf	vscp_readStdReg@reg,w,c
 10824  00368E  0A92               	xorlw	146
 10825  003690  E102               	bnz	l9037
 10826                           
 10827                           ; BSR set to: 0
 10828                           ;vscp_firmware.c: 641: rv = (vscp_page_select >> 8) & 0xff;
 10829  003692  5053               	movf	_vscp_page_select+1,w,c
 10830  003694  D021               	goto	L27
 10831  003696                     l9037:
 10832                           
 10833                           ; BSR set to: 0
 10834                           ;vscp_firmware.c: 644: else if (0x97 == reg) {
 10835  003696  500D               	movf	vscp_readStdReg@reg,w,c
 10836  003698  0A97               	xorlw	151
 10837  00369A  E103               	bnz	l9041
 10838                           
 10839                           ; BSR set to: 0
 10840                           ;vscp_firmware.c: 646: rv = vscp_getBootLoaderAlgorithm();
 10841  00369C  EC17  F021         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 10842  0036A0  D01B               	goto	L27
 10843  0036A2                     l9041:
 10844                           
 10845                           ; BSR set to: 0
 10846                           ;vscp_firmware.c: 648: else if (0x98 == reg) {
 10847  0036A2  500D               	movf	vscp_readStdReg@reg,w,c
 10848  0036A4  0A98               	xorlw	152
 10849  0036A6  E103               	bnz	l9045
 10850                           
 10851                           ; BSR set to: 0
 10852                           ;vscp_firmware.c: 650: rv = vscp_getBufferSize();
 10853  0036A8  EC16  F021         	call	_vscp_getBufferSize	;wreg free
 10854  0036AC  D015               	goto	L27
 10855  0036AE                     l9045:
 10856                           
 10857                           ; BSR set to: 0
 10858                           ;vscp_firmware.c: 652: else if (0x99 == reg) {
 10859  0036AE  500D               	movf	vscp_readStdReg@reg,w,c
 10860  0036B0  0A99               	xorlw	153
 10861  0036B2  E103               	bnz	l9049
 10862                           
 10863                           ; BSR set to: 0
 10864                           ;vscp_firmware.c: 654: rv = vscp_getRegisterPagesUsed();
 10865  0036B4  EC15  F021         	call	_vscp_getRegisterPagesUsed	;wreg free
 10866  0036B8  D00F               	goto	L27
 10867  0036BA                     l9049:
 10868                           
 10869                           ; BSR set to: 0
 10870                           ;vscp_firmware.c: 656: else if ((reg > (0xD0 - 1)) &&
 10871                           ;vscp_firmware.c: 657: (reg < 0xE0)) {
 10872  0036BA  0ECF               	movlw	207
 10873  0036BC  640D               	cpfsgt	vscp_readStdReg@reg,c
 10874  0036BE  D008               	goto	l9055
 10875                           
 10876                           ; BSR set to: 0
 10877  0036C0  0EE0               	movlw	224
 10878  0036C2  600D               	cpfslt	vscp_readStdReg@reg,c
 10879  0036C4  D005               	goto	l9055
 10880                           
 10881                           ; BSR set to: 0
 10882                           ;vscp_firmware.c: 660: rv = vscp_getGUID(reg - 0xD0);
 10883  0036C6  500D               	movf	vscp_readStdReg@reg,w,c
 10884  0036C8  0F30               	addlw	48
 10885  0036CA  ECB0  F020         	call	_vscp_getGUID
 10886  0036CE  D004               	goto	L27
 10887  0036D0                     l9055:
 10888                           
 10889                           ; BSR set to: 0
 10890                           ;vscp_firmware.c: 663: else {
 10891                           ;vscp_firmware.c: 666: rv = vscp_getMDF_URL(reg - 0xE0);
 10892  0036D0  500D               	movf	vscp_readStdReg@reg,w,c
 10893  0036D2  0F20               	addlw	32
 10894  0036D4  EC78  F020         	call	_vscp_getMDF_URL
 10895  0036D8                     L27:
 10896  0036D8  6E0C               	movwf	vscp_readStdReg@rv,c
 10897  0036DA                     l9057:
 10898                           
 10899                           ;vscp_firmware.c: 668: }
 10900                           ;vscp_firmware.c: 670: return rv;
 10901  0036DA  500C               	movf	vscp_readStdReg@rv,w,c
 10902  0036DC  0012               	return	
 10903  0036DE                     __end_of_vscp_readStdReg:
 10904                           	opt stack 0
 10905                           tblptru	equ	0xFF8
 10906                           prodh	equ	0xFF4
 10907                           prodl	equ	0xFF3
 10908                           postinc0	equ	0xFEE
 10909                           wreg	equ	0xFE8
 10910                           indf2	equ	0xFDF
 10911                           postinc2	equ	0xFDE
 10912                           postdec2	equ	0xFDD
 10913                           fsr2h	equ	0xFDA
 10914                           fsr2l	equ	0xFD9
 10915                           status	equ	0xFD8
 10916                           
 10917 ;; *************** function _vscp_getRegisterPagesUsed *****************
 10918 ;; Defined at:
 10919 ;;		line 2482 in file "../main.c"
 10920 ;; Parameters:    Size  Location     Type
 10921 ;;		None
 10922 ;; Auto vars:     Size  Location     Type
 10923 ;;		None
 10924 ;; Return value:  Size  Location     Type
 10925 ;;                  1    wreg      unsigned char 
 10926 ;; Registers used:
 10927 ;;		wreg
 10928 ;; Tracked objects:
 10929 ;;		On entry : F/0
 10930 ;;		On exit  : F/0
 10931 ;;		Unchanged: F/0
 10932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10933 ;;      Params:         0       0       0       0       0       0       0
 10934 ;;      Locals:         0       0       0       0       0       0       0
 10935 ;;      Temps:          0       0       0       0       0       0       0
 10936 ;;      Totals:         0       0       0       0       0       0       0
 10937 ;;Total ram usage:        0 bytes
 10938 ;; Hardware stack levels used:    1
 10939 ;; Hardware stack levels required when called:    2
 10940 ;; This function calls:
 10941 ;;		Nothing
 10942 ;; This function is called by:
 10943 ;;		_vscp_readStdReg
 10944 ;; This function uses a non-reentrant model
 10945 ;;
 10946                           
 10947                           	psect	text31
 10948  00422A                     __ptext31:
 10949                           	opt stack 0
 10950  00422A                     _vscp_getRegisterPagesUsed:
 10951                           	opt stack 26
 10952                           
 10953                           ; BSR set to: 0
 10954                           
 10955                           ; BSR set to: 0
 10956                           ;main.c: 2483: return 1;
 10957                           
 10958                           ;incstack = 0
 10959                           ;incstack = 0
 10960  00422A  0C01               	retlw	1
 10961  00422C                     __end_of_vscp_getRegisterPagesUsed:
 10962                           	opt stack 0
 10963                           tblptru	equ	0xFF8
 10964                           prodh	equ	0xFF4
 10965                           prodl	equ	0xFF3
 10966                           postinc0	equ	0xFEE
 10967                           wreg	equ	0xFE8
 10968                           indf2	equ	0xFDF
 10969                           postinc2	equ	0xFDE
 10970                           postdec2	equ	0xFDD
 10971                           fsr2h	equ	0xFDA
 10972                           fsr2l	equ	0xFD9
 10973                           status	equ	0xFD8
 10974                           
 10975 ;; *************** function _vscp_getBufferSize *****************
 10976 ;; Defined at:
 10977 ;;		line 2315 in file "../main.c"
 10978 ;; Parameters:    Size  Location     Type
 10979 ;;		None
 10980 ;; Auto vars:     Size  Location     Type
 10981 ;;		None
 10982 ;; Return value:  Size  Location     Type
 10983 ;;                  1    wreg      unsigned char 
 10984 ;; Registers used:
 10985 ;;		wreg
 10986 ;; Tracked objects:
 10987 ;;		On entry : F/0
 10988 ;;		On exit  : F/0
 10989 ;;		Unchanged: F/0
 10990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10991 ;;      Params:         0       0       0       0       0       0       0
 10992 ;;      Locals:         0       0       0       0       0       0       0
 10993 ;;      Temps:          0       0       0       0       0       0       0
 10994 ;;      Totals:         0       0       0       0       0       0       0
 10995 ;;Total ram usage:        0 bytes
 10996 ;; Hardware stack levels used:    1
 10997 ;; Hardware stack levels required when called:    2
 10998 ;; This function calls:
 10999 ;;		Nothing
 11000 ;; This function is called by:
 11001 ;;		_vscp_readStdReg
 11002 ;; This function uses a non-reentrant model
 11003 ;;
 11004                           
 11005                           	psect	text32
 11006  00422C                     __ptext32:
 11007                           	opt stack 0
 11008  00422C                     _vscp_getBufferSize:
 11009                           	opt stack 26
 11010                           
 11011                           ; BSR set to: 0
 11012                           
 11013                           ; BSR set to: 0
 11014                           ;main.c: 2316: return 8;
 11015                           
 11016                           ; BSR set to: 0
 11017                           ;incstack = 0
 11018                           ;incstack = 0
 11019  00422C  0C08               	retlw	8
 11020  00422E                     __end_of_vscp_getBufferSize:
 11021                           	opt stack 0
 11022                           tblptru	equ	0xFF8
 11023                           prodh	equ	0xFF4
 11024                           prodl	equ	0xFF3
 11025                           postinc0	equ	0xFEE
 11026                           wreg	equ	0xFE8
 11027                           indf2	equ	0xFDF
 11028                           postinc2	equ	0xFDE
 11029                           postdec2	equ	0xFDD
 11030                           fsr2h	equ	0xFDA
 11031                           fsr2l	equ	0xFD9
 11032                           status	equ	0xFD8
 11033                           
 11034 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 11035 ;; Defined at:
 11036 ;;		line 2306 in file "../main.c"
 11037 ;; Parameters:    Size  Location     Type
 11038 ;;		None
 11039 ;; Auto vars:     Size  Location     Type
 11040 ;;		None
 11041 ;; Return value:  Size  Location     Type
 11042 ;;                  1    wreg      unsigned char 
 11043 ;; Registers used:
 11044 ;;		wreg
 11045 ;; Tracked objects:
 11046 ;;		On entry : F/0
 11047 ;;		On exit  : F/0
 11048 ;;		Unchanged: F/0
 11049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11050 ;;      Params:         0       0       0       0       0       0       0
 11051 ;;      Locals:         0       0       0       0       0       0       0
 11052 ;;      Temps:          0       0       0       0       0       0       0
 11053 ;;      Totals:         0       0       0       0       0       0       0
 11054 ;;Total ram usage:        0 bytes
 11055 ;; Hardware stack levels used:    1
 11056 ;; Hardware stack levels required when called:    2
 11057 ;; This function calls:
 11058 ;;		Nothing
 11059 ;; This function is called by:
 11060 ;;		_vscp_readStdReg
 11061 ;; This function uses a non-reentrant model
 11062 ;;
 11063                           
 11064                           	psect	text33
 11065  00422E                     __ptext33:
 11066                           	opt stack 0
 11067  00422E                     _vscp_getBootLoaderAlgorithm:
 11068                           	opt stack 26
 11069                           
 11070                           ; BSR set to: 0
 11071                           
 11072                           ; BSR set to: 0
 11073                           ;main.c: 2307: return 0x01;
 11074                           
 11075                           ; BSR set to: 0
 11076                           ;incstack = 0
 11077                           ;incstack = 0
 11078  00422E  0C01               	retlw	1
 11079  004230                     __end_of_vscp_getBootLoaderAlgorithm:
 11080                           	opt stack 0
 11081                           tblptru	equ	0xFF8
 11082                           prodh	equ	0xFF4
 11083                           prodl	equ	0xFF3
 11084                           postinc0	equ	0xFEE
 11085                           wreg	equ	0xFE8
 11086                           indf2	equ	0xFDF
 11087                           postinc2	equ	0xFDE
 11088                           postdec2	equ	0xFDD
 11089                           fsr2h	equ	0xFDA
 11090                           fsr2l	equ	0xFD9
 11091                           status	equ	0xFD8
 11092                           
 11093 ;; *************** function _vscp_getManufacturerId *****************
 11094 ;; Defined at:
 11095 ;;		line 2297 in file "../main.c"
 11096 ;; Parameters:    Size  Location     Type
 11097 ;;  idx             1    wreg     unsigned char 
 11098 ;; Auto vars:     Size  Location     Type
 11099 ;;  idx             1   10[COMRAM] unsigned char 
 11100 ;; Return value:  Size  Location     Type
 11101 ;;                  1    wreg      unsigned char 
 11102 ;; Registers used:
 11103 ;;		wreg, status,2, status,0, cstack
 11104 ;; Tracked objects:
 11105 ;;		On entry : 0/0
 11106 ;;		On exit  : 0/0
 11107 ;;		Unchanged: 0/0
 11108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11109 ;;      Params:         0       0       0       0       0       0       0
 11110 ;;      Locals:         1       0       0       0       0       0       0
 11111 ;;      Temps:          0       0       0       0       0       0       0
 11112 ;;      Totals:         1       0       0       0       0       0       0
 11113 ;;Total ram usage:        1 bytes
 11114 ;; Hardware stack levels used:    1
 11115 ;; Hardware stack levels required when called:    3
 11116 ;; This function calls:
 11117 ;;		_readEEPROM
 11118 ;; This function is called by:
 11119 ;;		_vscp_readStdReg
 11120 ;;		_vscp_writeStdReg
 11121 ;; This function uses a non-reentrant model
 11122 ;;
 11123                           
 11124                           	psect	text34
 11125  004138                     __ptext34:
 11126                           	opt stack 0
 11127  004138                     _vscp_getManufacturerId:
 11128                           	opt stack 25
 11129                           
 11130                           ; BSR set to: 0
 11131                           ;incstack = 0
 11132                           ;incstack = 0
 11133                           ;vscp_getManufacturerId@idx stored from wreg
 11134  004138  CFE8 F00B          	movff	wreg,vscp_getManufacturerId@idx
 11135                           
 11136                           ;main.c: 2298: return readEEPROM( 0x0B + idx );
 11137  00413C  0E0B               	movlw	11
 11138  00413E  240B               	addwf	vscp_getManufacturerId@idx,w,c
 11139  004140  6E08               	movwf	?_readEEPROM,c
 11140  004142  6A09               	clrf	?_readEEPROM+1,c
 11141  004144  0E00               	movlw	0
 11142  004146  2209               	addwfc	?_readEEPROM+1,f,c
 11143  004148  EFDE  F020         	goto	_readEEPROM	;wreg free
 11144  00414C                     __end_of_vscp_getManufacturerId:
 11145                           	opt stack 0
 11146                           tblptru	equ	0xFF8
 11147                           prodh	equ	0xFF4
 11148                           prodl	equ	0xFF3
 11149                           postinc0	equ	0xFEE
 11150                           wreg	equ	0xFE8
 11151                           indf2	equ	0xFDF
 11152                           postinc2	equ	0xFDE
 11153                           postdec2	equ	0xFDD
 11154                           fsr2h	equ	0xFDA
 11155                           fsr2l	equ	0xFD9
 11156                           status	equ	0xFD8
 11157                           
 11158 ;; *************** function _vscp_getUserID *****************
 11159 ;; Defined at:
 11160 ;;		line 2277 in file "../main.c"
 11161 ;; Parameters:    Size  Location     Type
 11162 ;;  idx             1    wreg     unsigned char 
 11163 ;; Auto vars:     Size  Location     Type
 11164 ;;  idx             1   10[COMRAM] unsigned char 
 11165 ;; Return value:  Size  Location     Type
 11166 ;;                  1    wreg      unsigned char 
 11167 ;; Registers used:
 11168 ;;		wreg, status,2, status,0, cstack
 11169 ;; Tracked objects:
 11170 ;;		On entry : 0/0
 11171 ;;		On exit  : 0/0
 11172 ;;		Unchanged: 0/0
 11173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11174 ;;      Params:         0       0       0       0       0       0       0
 11175 ;;      Locals:         1       0       0       0       0       0       0
 11176 ;;      Temps:          0       0       0       0       0       0       0
 11177 ;;      Totals:         1       0       0       0       0       0       0
 11178 ;;Total ram usage:        1 bytes
 11179 ;; Hardware stack levels used:    1
 11180 ;; Hardware stack levels required when called:    3
 11181 ;; This function calls:
 11182 ;;		_readEEPROM
 11183 ;; This function is called by:
 11184 ;;		_vscp_readStdReg
 11185 ;;		_vscp_writeStdReg
 11186 ;; This function uses a non-reentrant model
 11187 ;;
 11188                           
 11189                           	psect	text35
 11190  00414C                     __ptext35:
 11191                           	opt stack 0
 11192  00414C                     _vscp_getUserID:
 11193                           	opt stack 25
 11194                           
 11195                           ;incstack = 0
 11196                           ;incstack = 0
 11197                           ;vscp_getUserID@idx stored from wreg
 11198  00414C  CFE8 F00B          	movff	wreg,vscp_getUserID@idx
 11199                           
 11200                           ;main.c: 2278: return readEEPROM( 0x06 + idx );
 11201  004150  0E06               	movlw	6
 11202  004152  240B               	addwf	vscp_getUserID@idx,w,c
 11203  004154  6E08               	movwf	?_readEEPROM,c
 11204  004156  6A09               	clrf	?_readEEPROM+1,c
 11205  004158  0E00               	movlw	0
 11206  00415A  2209               	addwfc	?_readEEPROM+1,f,c
 11207  00415C  EFDE  F020         	goto	_readEEPROM	;wreg free
 11208  004160                     __end_of_vscp_getUserID:
 11209                           	opt stack 0
 11210                           tblptru	equ	0xFF8
 11211                           prodh	equ	0xFF4
 11212                           prodl	equ	0xFF3
 11213                           postinc0	equ	0xFEE
 11214                           wreg	equ	0xFE8
 11215                           indf2	equ	0xFDF
 11216                           postinc2	equ	0xFDE
 11217                           postdec2	equ	0xFDD
 11218                           fsr2h	equ	0xFDA
 11219                           fsr2l	equ	0xFD9
 11220                           status	equ	0xFD8
 11221                           
 11222 ;; *************** function _vscp_getMDF_URL *****************
 11223 ;; Defined at:
 11224 ;;		line 2268 in file "../main.c"
 11225 ;; Parameters:    Size  Location     Type
 11226 ;;  idx             1    wreg     unsigned char 
 11227 ;; Auto vars:     Size  Location     Type
 11228 ;;  idx             1    8[COMRAM] unsigned char 
 11229 ;; Return value:  Size  Location     Type
 11230 ;;                  1    wreg      unsigned char 
 11231 ;; Registers used:
 11232 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11233 ;; Tracked objects:
 11234 ;;		On entry : F/0
 11235 ;;		On exit  : F/0
 11236 ;;		Unchanged: F/0
 11237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11238 ;;      Params:         0       0       0       0       0       0       0
 11239 ;;      Locals:         1       0       0       0       0       0       0
 11240 ;;      Temps:          1       0       0       0       0       0       0
 11241 ;;      Totals:         2       0       0       0       0       0       0
 11242 ;;Total ram usage:        2 bytes
 11243 ;; Hardware stack levels used:    1
 11244 ;; Hardware stack levels required when called:    2
 11245 ;; This function calls:
 11246 ;;		Nothing
 11247 ;; This function is called by:
 11248 ;;		_vscp_readStdReg
 11249 ;;		_vscp_handleProtocolEvent
 11250 ;; This function uses a non-reentrant model
 11251 ;;
 11252                           
 11253                           	psect	text36
 11254  0040F0                     __ptext36:
 11255                           	opt stack 0
 11256  0040F0                     _vscp_getMDF_URL:
 11257                           	opt stack 26
 11258                           
 11259                           ;incstack = 0
 11260                           ;incstack = 0
 11261                           ;vscp_getMDF_URL@idx stored from wreg
 11262  0040F0  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 11263                           
 11264                           ; BSR set to: 0
 11265                           ;main.c: 2269: return vscp_deviceURL[ idx ];
 11266  0040F4  5009               	movf	vscp_getMDF_URL@idx,w,c
 11267  0040F6  0FBA               	addlw	low _vscp_deviceURL
 11268  0040F8  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 11269  0040FA  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 11270  0040FE  0E08               	movlw	high __smallconst
 11271  004100  6EF7               	movwf	tblptrh,c
 11272  004102  0008               	tblrd		*
 11273  004104  50F5               	movf	tablat,w,c
 11274                           
 11275                           ; BSR set to: 0
 11276  004106  0012               	return	
 11277  004108                     __end_of_vscp_getMDF_URL:
 11278                           	opt stack 0
 11279                           tblptru	equ	0xFF8
 11280                           tblptrh	equ	0xFF7
 11281                           tblptrl	equ	0xFF6
 11282                           tablat	equ	0xFF5
 11283                           prodh	equ	0xFF4
 11284                           prodl	equ	0xFF3
 11285                           postinc0	equ	0xFEE
 11286                           wreg	equ	0xFE8
 11287                           indf2	equ	0xFDF
 11288                           postinc2	equ	0xFDE
 11289                           postdec2	equ	0xFDD
 11290                           fsr2h	equ	0xFDA
 11291                           fsr2l	equ	0xFD9
 11292                           status	equ	0xFD8
 11293                           
 11294 ;; *************** function _vscp_getGUID *****************
 11295 ;; Defined at:
 11296 ;;		line 2256 in file "../main.c"
 11297 ;; Parameters:    Size  Location     Type
 11298 ;;  idx             1    wreg     unsigned char 
 11299 ;; Auto vars:     Size  Location     Type
 11300 ;;  idx             1   10[COMRAM] unsigned char 
 11301 ;; Return value:  Size  Location     Type
 11302 ;;                  1    wreg      unsigned char 
 11303 ;; Registers used:
 11304 ;;		wreg, status,2, status,0, cstack
 11305 ;; Tracked objects:
 11306 ;;		On entry : 0/0
 11307 ;;		On exit  : 0/0
 11308 ;;		Unchanged: 0/0
 11309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11310 ;;      Params:         0       0       0       0       0       0       0
 11311 ;;      Locals:         1       0       0       0       0       0       0
 11312 ;;      Temps:          0       0       0       0       0       0       0
 11313 ;;      Totals:         1       0       0       0       0       0       0
 11314 ;;Total ram usage:        1 bytes
 11315 ;; Hardware stack levels used:    1
 11316 ;; Hardware stack levels required when called:    3
 11317 ;; This function calls:
 11318 ;;		_readEEPROM
 11319 ;; This function is called by:
 11320 ;;		_vscp_readStdReg
 11321 ;;		_vscp_writeStdReg
 11322 ;;		_vscp_handleProtocolEvent
 11323 ;; This function uses a non-reentrant model
 11324 ;;
 11325                           
 11326                           	psect	text37
 11327  004160                     __ptext37:
 11328                           	opt stack 0
 11329  004160                     _vscp_getGUID:
 11330                           	opt stack 25
 11331                           
 11332                           ; BSR set to: 0
 11333                           ;incstack = 0
 11334                           ;incstack = 0
 11335                           ;vscp_getGUID@idx stored from wreg
 11336  004160  CFE8 F00B          	movff	wreg,vscp_getGUID@idx
 11337                           
 11338                           ;main.c: 2257: return readEEPROM( 0x13 + idx );
 11339  004164  0E13               	movlw	19
 11340  004166  240B               	addwf	vscp_getGUID@idx,w,c
 11341  004168  6E08               	movwf	?_readEEPROM,c
 11342  00416A  6A09               	clrf	?_readEEPROM+1,c
 11343  00416C  0E00               	movlw	0
 11344  00416E  2209               	addwfc	?_readEEPROM+1,f,c
 11345  004170  EFDE  F020         	goto	_readEEPROM	;wreg free
 11346  004174                     __end_of_vscp_getGUID:
 11347                           	opt stack 0
 11348                           tblptru	equ	0xFF8
 11349                           tblptrh	equ	0xFF7
 11350                           tblptrl	equ	0xFF6
 11351                           tablat	equ	0xFF5
 11352                           prodh	equ	0xFF4
 11353                           prodl	equ	0xFF3
 11354                           postinc0	equ	0xFEE
 11355                           wreg	equ	0xFE8
 11356                           indf2	equ	0xFDF
 11357                           postinc2	equ	0xFDE
 11358                           postdec2	equ	0xFDD
 11359                           fsr2h	equ	0xFDA
 11360                           fsr2l	equ	0xFD9
 11361                           status	equ	0xFD8
 11362                           
 11363 ;; *************** function _vscp_getSubMinorVersion *****************
 11364 ;; Defined at:
 11365 ;;		line 2245 in file "../main.c"
 11366 ;; Parameters:    Size  Location     Type
 11367 ;;		None
 11368 ;; Auto vars:     Size  Location     Type
 11369 ;;		None
 11370 ;; Return value:  Size  Location     Type
 11371 ;;                  1    wreg      unsigned char 
 11372 ;; Registers used:
 11373 ;;		wreg
 11374 ;; Tracked objects:
 11375 ;;		On entry : F/0
 11376 ;;		On exit  : F/0
 11377 ;;		Unchanged: F/0
 11378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11379 ;;      Params:         0       0       0       0       0       0       0
 11380 ;;      Locals:         0       0       0       0       0       0       0
 11381 ;;      Temps:          0       0       0       0       0       0       0
 11382 ;;      Totals:         0       0       0       0       0       0       0
 11383 ;;Total ram usage:        0 bytes
 11384 ;; Hardware stack levels used:    1
 11385 ;; Hardware stack levels required when called:    2
 11386 ;; This function calls:
 11387 ;;		Nothing
 11388 ;; This function is called by:
 11389 ;;		_vscp_readStdReg
 11390 ;; This function uses a non-reentrant model
 11391 ;;
 11392                           
 11393                           	psect	text38
 11394  004230                     __ptext38:
 11395                           	opt stack 0
 11396  004230                     _vscp_getSubMinorVersion:
 11397                           	opt stack 26
 11398                           
 11399                           ; BSR set to: 0
 11400                           
 11401                           ; BSR set to: 0
 11402                           ;main.c: 2246: return 0;
 11403                           
 11404                           ;incstack = 0
 11405                           ;incstack = 0
 11406  004230  0C00               	retlw	0
 11407  004232                     __end_of_vscp_getSubMinorVersion:
 11408                           	opt stack 0
 11409                           tblptru	equ	0xFF8
 11410                           tblptrh	equ	0xFF7
 11411                           tblptrl	equ	0xFF6
 11412                           tablat	equ	0xFF5
 11413                           prodh	equ	0xFF4
 11414                           prodl	equ	0xFF3
 11415                           postinc0	equ	0xFEE
 11416                           wreg	equ	0xFE8
 11417                           indf2	equ	0xFDF
 11418                           postinc2	equ	0xFDE
 11419                           postdec2	equ	0xFDD
 11420                           fsr2h	equ	0xFDA
 11421                           fsr2l	equ	0xFD9
 11422                           status	equ	0xFD8
 11423                           
 11424 ;; *************** function _vscp_getMinorVersion *****************
 11425 ;; Defined at:
 11426 ;;		line 2236 in file "../main.c"
 11427 ;; Parameters:    Size  Location     Type
 11428 ;;		None
 11429 ;; Auto vars:     Size  Location     Type
 11430 ;;		None
 11431 ;; Return value:  Size  Location     Type
 11432 ;;                  1    wreg      unsigned char 
 11433 ;; Registers used:
 11434 ;;		wreg
 11435 ;; Tracked objects:
 11436 ;;		On entry : F/0
 11437 ;;		On exit  : F/0
 11438 ;;		Unchanged: F/0
 11439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11440 ;;      Params:         0       0       0       0       0       0       0
 11441 ;;      Locals:         0       0       0       0       0       0       0
 11442 ;;      Temps:          0       0       0       0       0       0       0
 11443 ;;      Totals:         0       0       0       0       0       0       0
 11444 ;;Total ram usage:        0 bytes
 11445 ;; Hardware stack levels used:    1
 11446 ;; Hardware stack levels required when called:    2
 11447 ;; This function calls:
 11448 ;;		Nothing
 11449 ;; This function is called by:
 11450 ;;		_vscp_readStdReg
 11451 ;; This function uses a non-reentrant model
 11452 ;;
 11453                           
 11454                           	psect	text39
 11455  004232                     __ptext39:
 11456                           	opt stack 0
 11457  004232                     _vscp_getMinorVersion:
 11458                           	opt stack 26
 11459                           
 11460                           ; BSR set to: 0
 11461                           
 11462                           ; BSR set to: 0
 11463                           ;main.c: 2237: return 1;
 11464                           
 11465                           ; BSR set to: 0
 11466                           ;incstack = 0
 11467                           ;incstack = 0
 11468  004232  0C01               	retlw	1
 11469  004234                     __end_of_vscp_getMinorVersion:
 11470                           	opt stack 0
 11471                           tblptru	equ	0xFF8
 11472                           tblptrh	equ	0xFF7
 11473                           tblptrl	equ	0xFF6
 11474                           tablat	equ	0xFF5
 11475                           prodh	equ	0xFF4
 11476                           prodl	equ	0xFF3
 11477                           postinc0	equ	0xFEE
 11478                           wreg	equ	0xFE8
 11479                           indf2	equ	0xFDF
 11480                           postinc2	equ	0xFDE
 11481                           postdec2	equ	0xFDD
 11482                           fsr2h	equ	0xFDA
 11483                           fsr2l	equ	0xFD9
 11484                           status	equ	0xFD8
 11485                           
 11486 ;; *************** function _vscp_getMajorVersion *****************
 11487 ;; Defined at:
 11488 ;;		line 2227 in file "../main.c"
 11489 ;; Parameters:    Size  Location     Type
 11490 ;;		None
 11491 ;; Auto vars:     Size  Location     Type
 11492 ;;		None
 11493 ;; Return value:  Size  Location     Type
 11494 ;;                  1    wreg      unsigned char 
 11495 ;; Registers used:
 11496 ;;		wreg
 11497 ;; Tracked objects:
 11498 ;;		On entry : F/0
 11499 ;;		On exit  : F/0
 11500 ;;		Unchanged: F/0
 11501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11502 ;;      Params:         0       0       0       0       0       0       0
 11503 ;;      Locals:         0       0       0       0       0       0       0
 11504 ;;      Temps:          0       0       0       0       0       0       0
 11505 ;;      Totals:         0       0       0       0       0       0       0
 11506 ;;Total ram usage:        0 bytes
 11507 ;; Hardware stack levels used:    1
 11508 ;; Hardware stack levels required when called:    2
 11509 ;; This function calls:
 11510 ;;		Nothing
 11511 ;; This function is called by:
 11512 ;;		_vscp_readStdReg
 11513 ;; This function uses a non-reentrant model
 11514 ;;
 11515                           
 11516                           	psect	text40
 11517  004234                     __ptext40:
 11518                           	opt stack 0
 11519  004234                     _vscp_getMajorVersion:
 11520                           	opt stack 26
 11521                           
 11522                           ; BSR set to: 0
 11523                           
 11524                           ; BSR set to: 0
 11525                           ;main.c: 2228: return 1;
 11526                           
 11527                           ; BSR set to: 0
 11528                           ;incstack = 0
 11529                           ;incstack = 0
 11530  004234  0C01               	retlw	1
 11531  004236                     __end_of_vscp_getMajorVersion:
 11532                           	opt stack 0
 11533                           tblptru	equ	0xFF8
 11534                           tblptrh	equ	0xFF7
 11535                           tblptrl	equ	0xFF6
 11536                           tablat	equ	0xFF5
 11537                           prodh	equ	0xFF4
 11538                           prodl	equ	0xFF3
 11539                           postinc0	equ	0xFEE
 11540                           wreg	equ	0xFE8
 11541                           indf2	equ	0xFDF
 11542                           postinc2	equ	0xFDE
 11543                           postdec2	equ	0xFDD
 11544                           fsr2h	equ	0xFDA
 11545                           fsr2l	equ	0xFD9
 11546                           status	equ	0xFD8
 11547                           
 11548 ;; *************** function _vscp_newNodeOnline *****************
 11549 ;; Defined at:
 11550 ;;		line 494 in file "../../vscp_firmware/common/vscp_firmware.c"
 11551 ;; Parameters:    Size  Location     Type
 11552 ;;		None
 11553 ;; Auto vars:     Size  Location     Type
 11554 ;;		None
 11555 ;; Return value:  Size  Location     Type
 11556 ;;		None               void
 11557 ;; Registers used:
 11558 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11559 ;; Tracked objects:
 11560 ;;		On entry : F/0
 11561 ;;		On exit  : F/0
 11562 ;;		Unchanged: 0/0
 11563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11564 ;;      Params:         0       0       0       0       0       0       0
 11565 ;;      Locals:         0       0       0       0       0       0       0
 11566 ;;      Temps:          1       0       0       0       0       0       0
 11567 ;;      Totals:         1       0       0       0       0       0       0
 11568 ;;Total ram usage:        1 bytes
 11569 ;; Hardware stack levels used:    1
 11570 ;; Hardware stack levels required when called:    7
 11571 ;; This function calls:
 11572 ;;		_vscp_sendEvent
 11573 ;; This function is called by:
 11574 ;;		_vscp_handleProtocolEvent
 11575 ;; This function uses a non-reentrant model
 11576 ;;
 11577                           
 11578                           	psect	text41
 11579  003EA4                     __ptext41:
 11580                           	opt stack 0
 11581  003EA4                     _vscp_newNodeOnline:
 11582                           	opt stack 22
 11583                           
 11584                           ; BSR set to: 0
 11585                           ;vscp_firmware.c: 495: if ((1 == (vscp_imsg.flags & 0x0f)) &&
 11586                           ;vscp_firmware.c: 496: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11587                           
 11588                           ; BSR set to: 0
 11589                           ;incstack = 0
 11590                           ;incstack = 0
 11591  003EA4  C096  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 11592  003EA8  0E0F               	movlw	15
 11593  003EAA  164C               	andwf	??_vscp_newNodeOnline,f,c
 11594  003EAC  044C               	decf	??_vscp_newNodeOnline,w,c
 11595  003EAE  E10E               	bnz	l1095
 11596                           
 11597                           ; BSR set to: 0
 11598  003EB0  5191               	movf	_vscp_nickname& (0+255),w,b
 11599  003EB2  EE20  F09C         	lfsr	2,_vscp_imsg+6
 11600  003EB6  62DF               	cpfseq	indf2,c
 11601  003EB8  D009               	goto	l1095
 11602                           
 11603                           ; BSR set to: 0
 11604                           ;vscp_firmware.c: 502: vscp_omsg.flags = 0x80;
 11605  003EBA  0E80               	movlw	128
 11606  003EBC  6FA4               	movwf	_vscp_omsg& (0+255),b
 11607                           
 11608                           ; BSR set to: 0
 11609                           ;vscp_firmware.c: 503: vscp_omsg.priority = 0x00;
 11610  003EBE  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 11611                           
 11612                           ; BSR set to: 0
 11613                           ;vscp_firmware.c: 504: vscp_omsg.vscp_class = 0;
 11614  003EC0  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 11615  003EC2  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 11616                           
 11617                           ;vscp_firmware.c: 505: vscp_omsg.vscp_type = 3;
 11618  003EC4  0E03               	movlw	3
 11619  003EC6  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 11620                           
 11621                           ; BSR set to: 0
 11622                           ;vscp_firmware.c: 506: vscp_sendEvent();
 11623  003EC8  ECA3  F01F         	call	_vscp_sendEvent	;wreg free
 11624  003ECC                     l1095:
 11625                           
 11626                           ; BSR set to: 0
 11627  003ECC  0012               	return	
 11628  003ECE                     __end_of_vscp_newNodeOnline:
 11629                           	opt stack 0
 11630                           tblptru	equ	0xFF8
 11631                           tblptrh	equ	0xFF7
 11632                           tblptrl	equ	0xFF6
 11633                           tablat	equ	0xFF5
 11634                           prodh	equ	0xFF4
 11635                           prodl	equ	0xFF3
 11636                           postinc0	equ	0xFEE
 11637                           wreg	equ	0xFE8
 11638                           indf2	equ	0xFDF
 11639                           postinc2	equ	0xFDE
 11640                           postdec2	equ	0xFDD
 11641                           fsr2h	equ	0xFDA
 11642                           fsr2l	equ	0xFD9
 11643                           status	equ	0xFD8
 11644                           
 11645 ;; *************** function _vscp_handleDropNickname *****************
 11646 ;; Defined at:
 11647 ;;		line 430 in file "../../vscp_firmware/common/vscp_firmware.c"
 11648 ;; Parameters:    Size  Location     Type
 11649 ;;		None
 11650 ;; Auto vars:     Size  Location     Type
 11651 ;;  bytes           1   11[COMRAM] unsigned char 
 11652 ;; Return value:  Size  Location     Type
 11653 ;;		None               void
 11654 ;; Registers used:
 11655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11656 ;; Tracked objects:
 11657 ;;		On entry : F/0
 11658 ;;		On exit  : F/0
 11659 ;;		Unchanged: 0/0
 11660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11661 ;;      Params:         0       0       0       0       0       0       0
 11662 ;;      Locals:         1       0       0       0       0       0       0
 11663 ;;      Temps:          0       0       0       0       0       0       0
 11664 ;;      Totals:         1       0       0       0       0       0       0
 11665 ;;Total ram usage:        1 bytes
 11666 ;; Hardware stack levels used:    1
 11667 ;; Hardware stack levels required when called:    5
 11668 ;; This function calls:
 11669 ;;		_vscp_init
 11670 ;;		_vscp_writeNicknamePermanent
 11671 ;; This function is called by:
 11672 ;;		_vscp_handleProtocolEvent
 11673 ;; This function uses a non-reentrant model
 11674 ;;
 11675                           
 11676                           	psect	text42
 11677  003E48                     __ptext42:
 11678                           	opt stack 0
 11679  003E48                     _vscp_handleDropNickname:
 11680                           	opt stack 24
 11681                           
 11682                           ; BSR set to: 0
 11683                           ;vscp_firmware.c: 431: uint8_t bytes = vscp_imsg.flags & 0x0f;
 11684                           
 11685                           ; BSR set to: 0
 11686                           ;incstack = 0
 11687                           ;incstack = 0
 11688  003E48  5196               	movf	_vscp_imsg& (0+255),w,b
 11689  003E4A  0B0F               	andlw	15
 11690  003E4C  6E0C               	movwf	vscp_handleDropNickname@bytes,c
 11691                           
 11692                           ; BSR set to: 0
 11693                           ;vscp_firmware.c: 437: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11694  003E4E  500C               	movf	vscp_handleDropNickname@bytes,w,c
 11695  003E50  E012               	bz	l1091
 11696                           
 11697                           ; BSR set to: 0
 11698  003E52  5191               	movf	_vscp_nickname& (0+255),w,b
 11699  003E54  EE20  F09C         	lfsr	2,_vscp_imsg+6
 11700  003E58  62DF               	cpfseq	indf2,c
 11701  003E5A  D00D               	goto	l1091
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;vscp_firmware.c: 469: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 11705  003E5C  040C               	decf	vscp_handleDropNickname@bytes,w,c
 11706  003E5E  E005               	bz	l1090
 11707                           
 11708                           ; BSR set to: 0
 11709  003E60  0E01               	movlw	1
 11710  003E62  640C               	cpfsgt	vscp_handleDropNickname@bytes,c
 11711  003E64  D008               	goto	l1091
 11712                           
 11713                           ; BSR set to: 0
 11714  003E66  679D               	tstfsz	(_vscp_imsg+7)& (0+255),b
 11715  003E68  D006               	goto	l1091
 11716  003E6A                     l1090:
 11717                           
 11718                           ; BSR set to: 0
 11719                           ;vscp_firmware.c: 471: vscp_nickname = 0xff;
 11720  003E6A  6991               	setf	_vscp_nickname& (0+255),b
 11721                           
 11722                           ; BSR set to: 0
 11723                           ;vscp_firmware.c: 472: vscp_writeNicknamePermanent(0xff);
 11724  003E6C  0EFF               	movlw	255
 11725  003E6E  ECCC  F020         	call	_vscp_writeNicknamePermanent
 11726                           
 11727                           ;vscp_firmware.c: 473: vscp_init();
 11728  003E72  ECA4  F01E         	call	_vscp_init	;wreg free
 11729  003E76                     l1091:
 11730                           
 11731                           ; BSR set to: 0
 11732  003E76  0012               	return	
 11733  003E78                     __end_of_vscp_handleDropNickname:
 11734                           	opt stack 0
 11735                           tblptru	equ	0xFF8
 11736                           tblptrh	equ	0xFF7
 11737                           tblptrl	equ	0xFF6
 11738                           tablat	equ	0xFF5
 11739                           prodh	equ	0xFF4
 11740                           prodl	equ	0xFF3
 11741                           postinc0	equ	0xFEE
 11742                           wreg	equ	0xFE8
 11743                           indf2	equ	0xFDF
 11744                           postinc2	equ	0xFDE
 11745                           postdec2	equ	0xFDD
 11746                           fsr2h	equ	0xFDA
 11747                           fsr2l	equ	0xFD9
 11748                           status	equ	0xFD8
 11749                           
 11750 ;; *************** function _vscp_init *****************
 11751 ;; Defined at:
 11752 ;;		line 117 in file "../../vscp_firmware/common/vscp_firmware.c"
 11753 ;; Parameters:    Size  Location     Type
 11754 ;;		None
 11755 ;; Auto vars:     Size  Location     Type
 11756 ;;		None
 11757 ;; Return value:  Size  Location     Type
 11758 ;;		None               void
 11759 ;; Registers used:
 11760 ;;		wreg, status,2, cstack
 11761 ;; Tracked objects:
 11762 ;;		On entry : 0/0
 11763 ;;		On exit  : F/0
 11764 ;;		Unchanged: 0/0
 11765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11766 ;;      Params:         0       0       0       0       0       0       0
 11767 ;;      Locals:         0       0       0       0       0       0       0
 11768 ;;      Temps:          0       0       0       0       0       0       0
 11769 ;;      Totals:         0       0       0       0       0       0       0
 11770 ;;Total ram usage:        0 bytes
 11771 ;; Hardware stack levels used:    1
 11772 ;; Hardware stack levels required when called:    4
 11773 ;; This function calls:
 11774 ;;		_vscp_readNicknamePermanent
 11775 ;; This function is called by:
 11776 ;;		_main
 11777 ;;		_vscp_handleDropNickname
 11778 ;;		_vscp_handleProtocolEvent
 11779 ;; This function uses a non-reentrant model
 11780 ;;
 11781                           
 11782                           	psect	text43
 11783  003D48                     __ptext43:
 11784                           	opt stack 0
 11785  003D48                     _vscp_init:
 11786                           	opt stack 24
 11787                           
 11788                           ;vscp_firmware.c: 118: vscp_initledfunc = 0x02;
 11789                           
 11790                           ; BSR set to: 0
 11791                           ;incstack = 0
 11792                           ;incstack = 0
 11793  003D48  0E02               	movlw	2
 11794  003D4A  6E56               	movwf	_vscp_initledfunc,c
 11795                           
 11796                           ;vscp_firmware.c: 121: vscp_nickname = vscp_readNicknamePermanent();
 11797  003D4C  EC04  F021         	call	_vscp_readNicknamePermanent	;wreg free
 11798  003D50  0100               	movlb	0	; () banked
 11799  003D52  6F91               	movwf	_vscp_nickname& (0+255),b
 11800                           
 11801                           ; BSR set to: 0
 11802                           ;vscp_firmware.c: 124: if (!vscp_nickname) vscp_nickname = 0xff;
 11803  003D54  6791               	tstfsz	_vscp_nickname& (0+255),b
 11804  003D56  D001               	goto	l1032
 11805                           
 11806                           ; BSR set to: 0
 11807  003D58  6991               	setf	_vscp_nickname& (0+255),b
 11808  003D5A                     l1032:
 11809                           
 11810                           ; BSR set to: 0
 11811                           ;vscp_firmware.c: 127: vscp_imsg.flags = 0;
 11812  003D5A  6B96               	clrf	_vscp_imsg& (0+255),b
 11813                           
 11814                           ;vscp_firmware.c: 128: vscp_imsg.priority = 0;
 11815  003D5C  6B97               	clrf	(_vscp_imsg+1)& (0+255),b
 11816                           
 11817                           ;vscp_firmware.c: 129: vscp_imsg.vscp_class = 0;
 11818  003D5E  6B98               	clrf	(_vscp_imsg+2)& (0+255),b
 11819  003D60  6B99               	clrf	(_vscp_imsg+3)& (0+255),b
 11820                           
 11821                           ;vscp_firmware.c: 130: vscp_imsg.vscp_type = 0;
 11822  003D62  6B9A               	clrf	(_vscp_imsg+4)& (0+255),b
 11823                           
 11824                           ;vscp_firmware.c: 133: vscp_omsg.flags = 0;
 11825  003D64  6BA4               	clrf	_vscp_omsg& (0+255),b
 11826                           
 11827                           ;vscp_firmware.c: 134: vscp_omsg.priority = 0;
 11828  003D66  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 11829                           
 11830                           ;vscp_firmware.c: 135: vscp_omsg.vscp_class = 0;
 11831  003D68  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 11832  003D6A  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 11833                           
 11834                           ;vscp_firmware.c: 138: vscp_errorcnt = 0;
 11835  003D6C  6BA8               	clrf	(_vscp_omsg+4)& (0+255),b
 11836                           
 11837                           ;vscp_firmware.c: 139: vscp_alarmstatus = 0;
 11838  003D6E  6B8C               	clrf	_vscp_alarmstatus& (0+255),b
 11839                           
 11840                           ;vscp_firmware.c: 141: vscp_probe_address = 0;
 11841  003D70  6A57               	clrf	_vscp_probe_address,c
 11842                           
 11843                           ;vscp_firmware.c: 144: vscp_node_state = 0x00;
 11844  003D72  6B92               	clrf	_vscp_node_state& (0+255),b
 11845                           
 11846                           ;vscp_firmware.c: 145: vscp_node_substate = 0x00;
 11847  003D74  6B93               	clrf	_vscp_node_substate& (0+255),b
 11848                           
 11849                           ;vscp_firmware.c: 147: vscp_probe_cnt = 0;
 11850  003D76  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 11851                           
 11852                           ;vscp_firmware.c: 148: vscp_page_select = 0;
 11853  003D78  6A52               	clrf	_vscp_page_select,c
 11854  003D7A  6A53               	clrf	_vscp_page_select+1,c
 11855                           
 11856                           ;vscp_firmware.c: 151: vscp_timer = 0;
 11857  003D7C  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 11858  003D7E  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 11859                           
 11860                           ;vscp_firmware.c: 152: vscp_configtimer = 0;
 11861  003D80  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
 11862  003D82  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 11863                           
 11864                           ;vscp_firmware.c: 153: vscp_second = 0;
 11865  003D84  6B95               	clrf	_vscp_second& (0+255),b
 11866                           
 11867                           ;vscp_firmware.c: 154: vscp_minute = 0;
 11868  003D86  6B90               	clrf	_vscp_minute& (0+255),b
 11869                           
 11870                           ;vscp_firmware.c: 155: vscp_hour = 0;
 11871  003D88  6B8E               	clrf	_vscp_hour& (0+255),b
 11872                           
 11873                           ; BSR set to: 0
 11874  003D8A  0012               	return	
 11875  003D8C                     __end_of_vscp_init:
 11876                           	opt stack 0
 11877                           tblptru	equ	0xFF8
 11878                           tblptrh	equ	0xFF7
 11879                           tblptrl	equ	0xFF6
 11880                           tablat	equ	0xFF5
 11881                           prodh	equ	0xFF4
 11882                           prodl	equ	0xFF3
 11883                           postinc0	equ	0xFEE
 11884                           wreg	equ	0xFE8
 11885                           indf2	equ	0xFDF
 11886                           postinc2	equ	0xFDE
 11887                           postdec2	equ	0xFDD
 11888                           fsr2h	equ	0xFDA
 11889                           fsr2l	equ	0xFD9
 11890                           status	equ	0xFD8
 11891                           
 11892 ;; *************** function _vscp_readNicknamePermanent *****************
 11893 ;; Defined at:
 11894 ;;		line 849 in file "../main.c"
 11895 ;; Parameters:    Size  Location     Type
 11896 ;;		None
 11897 ;; Auto vars:     Size  Location     Type
 11898 ;;		None
 11899 ;; Return value:  Size  Location     Type
 11900 ;;                  1    wreg      unsigned char 
 11901 ;; Registers used:
 11902 ;;		wreg, status,2, cstack
 11903 ;; Tracked objects:
 11904 ;;		On entry : 0/0
 11905 ;;		On exit  : 0/0
 11906 ;;		Unchanged: 0/0
 11907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11908 ;;      Params:         0       0       0       0       0       0       0
 11909 ;;      Locals:         0       0       0       0       0       0       0
 11910 ;;      Temps:          0       0       0       0       0       0       0
 11911 ;;      Totals:         0       0       0       0       0       0       0
 11912 ;;Total ram usage:        0 bytes
 11913 ;; Hardware stack levels used:    1
 11914 ;; Hardware stack levels required when called:    3
 11915 ;; This function calls:
 11916 ;;		_readEEPROM
 11917 ;; This function is called by:
 11918 ;;		_vscp_init
 11919 ;; This function uses a non-reentrant model
 11920 ;;
 11921                           
 11922                           	psect	text44
 11923  004208                     __ptext44:
 11924                           	opt stack 0
 11925  004208                     _vscp_readNicknamePermanent:
 11926                           	opt stack 24
 11927                           
 11928                           ;main.c: 850: return readEEPROM( 0x01 );
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;incstack = 0
 11932                           ;incstack = 0
 11933  004208  6A09               	clrf	?_readEEPROM+1,c
 11934  00420A  0E01               	movlw	1
 11935  00420C  6E08               	movwf	?_readEEPROM,c
 11936  00420E  EFDE  F020         	goto	_readEEPROM	;wreg free
 11937  004212                     __end_of_vscp_readNicknamePermanent:
 11938                           	opt stack 0
 11939                           tblptru	equ	0xFF8
 11940                           tblptrh	equ	0xFF7
 11941                           tblptrl	equ	0xFF6
 11942                           tablat	equ	0xFF5
 11943                           prodh	equ	0xFF4
 11944                           prodl	equ	0xFF3
 11945                           postinc0	equ	0xFEE
 11946                           wreg	equ	0xFE8
 11947                           indf2	equ	0xFDF
 11948                           postinc2	equ	0xFDE
 11949                           postdec2	equ	0xFDD
 11950                           fsr2h	equ	0xFDA
 11951                           fsr2l	equ	0xFD9
 11952                           status	equ	0xFD8
 11953                           
 11954 ;; *************** function _vscp_handleSetNickname *****************
 11955 ;; Defined at:
 11956 ;;		line 414 in file "../../vscp_firmware/common/vscp_firmware.c"
 11957 ;; Parameters:    Size  Location     Type
 11958 ;;		None
 11959 ;; Auto vars:     Size  Location     Type
 11960 ;;		None
 11961 ;; Return value:  Size  Location     Type
 11962 ;;		None               void
 11963 ;; Registers used:
 11964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11965 ;; Tracked objects:
 11966 ;;		On entry : F/0
 11967 ;;		On exit  : 0/0
 11968 ;;		Unchanged: 0/0
 11969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11970 ;;      Params:         0       0       0       0       0       0       0
 11971 ;;      Locals:         0       0       0       0       0       0       0
 11972 ;;      Temps:          0       0       0       0       0       0       0
 11973 ;;      Totals:         0       0       0       0       0       0       0
 11974 ;;Total ram usage:        0 bytes
 11975 ;; Hardware stack levels used:    1
 11976 ;; Hardware stack levels required when called:    4
 11977 ;; This function calls:
 11978 ;;		_vscp_writeNicknamePermanent
 11979 ;;		_vscp_setSegmentCRC
 11980 ;; This function is called by:
 11981 ;;		_vscp_handleProtocolEvent
 11982 ;; This function uses a non-reentrant model
 11983 ;;
 11984                           
 11985                           	psect	text45
 11986  003F92                     __ptext45:
 11987                           	opt stack 0
 11988  003F92                     _vscp_handleSetNickname:
 11989                           	opt stack 25
 11990                           
 11991                           ; BSR set to: 0
 11992                           ;vscp_firmware.c: 415: if ((2 == (vscp_imsg.flags & 0x0f)) &&
 11993                           ;vscp_firmware.c: 416: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11994                           
 11995                           ;incstack = 0
 11996                           ;incstack = 0
 11997  003F92  5196               	movf	_vscp_imsg& (0+255),w,b
 11998  003F94  0B0F               	andlw	15
 11999  003F96  0A02               	xorlw	2
 12000  003F98  E10D               	bnz	l1084
 12001                           
 12002                           ; BSR set to: 0
 12003  003F9A  5191               	movf	_vscp_nickname& (0+255),w,b
 12004  003F9C  EE20  F09C         	lfsr	2,_vscp_imsg+6
 12005  003FA0  62DF               	cpfseq	indf2,c
 12006  003FA2  D008               	goto	l1084
 12007                           
 12008                           ; BSR set to: 0
 12009                           ;vscp_firmware.c: 419: vscp_nickname = vscp_imsg.data[ 1 ];
 12010  003FA4  C09D  F091         	movff	_vscp_imsg+7,_vscp_nickname
 12011                           
 12012                           ; BSR set to: 0
 12013                           ;vscp_firmware.c: 420: vscp_writeNicknamePermanent(vscp_nickname);
 12014  003FA8  5191               	movf	_vscp_nickname& (0+255),w,b
 12015  003FAA  ECCC  F020         	call	_vscp_writeNicknamePermanent
 12016                           
 12017                           ;vscp_firmware.c: 421: vscp_setSegmentCRC(0x40);
 12018  003FAE  0E40               	movlw	64
 12019  003FB0  ECC3  F020         	call	_vscp_setSegmentCRC
 12020  003FB4                     l1084:
 12021  003FB4  0012               	return	
 12022  003FB6                     __end_of_vscp_handleSetNickname:
 12023                           	opt stack 0
 12024                           tblptru	equ	0xFF8
 12025                           tblptrh	equ	0xFF7
 12026                           tblptrl	equ	0xFF6
 12027                           tablat	equ	0xFF5
 12028                           prodh	equ	0xFF4
 12029                           prodl	equ	0xFF3
 12030                           postinc0	equ	0xFEE
 12031                           wreg	equ	0xFE8
 12032                           indf2	equ	0xFDF
 12033                           postinc2	equ	0xFDE
 12034                           postdec2	equ	0xFDD
 12035                           fsr2h	equ	0xFDA
 12036                           fsr2l	equ	0xFD9
 12037                           status	equ	0xFD8
 12038                           
 12039 ;; *************** function _vscp_handleHeartbeat *****************
 12040 ;; Defined at:
 12041 ;;		line 388 in file "../../vscp_firmware/common/vscp_firmware.c"
 12042 ;; Parameters:    Size  Location     Type
 12043 ;;		None
 12044 ;; Auto vars:     Size  Location     Type
 12045 ;;		None
 12046 ;; Return value:  Size  Location     Type
 12047 ;;		None               void
 12048 ;; Registers used:
 12049 ;;		wreg, status,2, status,0, cstack
 12050 ;; Tracked objects:
 12051 ;;		On entry : F/0
 12052 ;;		On exit  : 0/0
 12053 ;;		Unchanged: 0/0
 12054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12055 ;;      Params:         0       0       0       0       0       0       0
 12056 ;;      Locals:         0       0       0       0       0       0       0
 12057 ;;      Temps:          0       0       0       0       0       0       0
 12058 ;;      Totals:         0       0       0       0       0       0       0
 12059 ;;Total ram usage:        0 bytes
 12060 ;; Hardware stack levels used:    1
 12061 ;; Hardware stack levels required when called:    4
 12062 ;; This function calls:
 12063 ;;		_vscp_writeNicknamePermanent
 12064 ;;		_vscp_getSegmentCRC
 12065 ;;		_vscp_setSegmentCRC
 12066 ;; This function is called by:
 12067 ;;		_vscp_handleProtocolEvent
 12068 ;; This function uses a non-reentrant model
 12069 ;;
 12070                           
 12071                           	psect	text46
 12072  003DCC                     __ptext46:
 12073                           	opt stack 0
 12074  003DCC                     _vscp_handleHeartbeat:
 12075                           	opt stack 25
 12076                           
 12077                           ; BSR set to: 0
 12078                           ;vscp_firmware.c: 389: if ( !vscp_getSegmentCRC() ) {
 12079                           
 12080                           ;incstack = 0
 12081                           ;incstack = 0
 12082  003DCC  EC09  F021         	call	_vscp_getSegmentCRC	;wreg free
 12083  003DD0  0900               	iorlw	0
 12084  003DD2  E116               	bnz	l8945
 12085                           
 12086                           ;vscp_firmware.c: 390: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 12087                           ;vscp_firmware.c: 391: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 12088  003DD4  0100               	movlb	0	; () banked
 12089  003DD6  5196               	movf	_vscp_imsg& (0+255),w,b
 12090  003DD8  0B0F               	andlw	15
 12091  003DDA  0A05               	xorlw	5
 12092  003DDC  E115               	bnz	l1080
 12093                           
 12094                           ; BSR set to: 0
 12095  003DDE  EC09  F021         	call	_vscp_getSegmentCRC	;wreg free
 12096  003DE2  0100               	movlb	0	; () banked
 12097  003DE4  199C               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 12098  003DE6  E010               	bz	l1080
 12099                           
 12100                           ; BSR set to: 0
 12101                           ;vscp_firmware.c: 395: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12102  003DE8  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12103  003DEA  ECC3  F020         	call	_vscp_setSegmentCRC
 12104                           
 12105                           ;vscp_firmware.c: 398: vscp_nickname = 0xff;
 12106  003DEE  0100               	movlb	0	; () banked
 12107  003DF0  6991               	setf	_vscp_nickname& (0+255),b
 12108                           
 12109                           ;vscp_firmware.c: 399: vscp_writeNicknamePermanent(0xff);
 12110  003DF2  0EFF               	movlw	255
 12111  003DF4  ECCC  F020         	call	_vscp_writeNicknamePermanent
 12112                           
 12113                           ;vscp_firmware.c: 400: vscp_node_state = 0x01;
 12114  003DF8  0E01               	movlw	1
 12115  003DFA  0100               	movlb	0	; () banked
 12116  003DFC  6F92               	movwf	_vscp_node_state& (0+255),b
 12117  003DFE  D004               	goto	l1080
 12118  003E00                     l8945:
 12119                           
 12120                           ;vscp_firmware.c: 403: else {
 12121                           ;vscp_firmware.c: 405: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12122  003E00  0100               	movlb	0	; () banked
 12123  003E02  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12124  003E04  ECC3  F020         	call	_vscp_setSegmentCRC
 12125  003E08                     l1080:
 12126  003E08  0012               	return	
 12127  003E0A                     __end_of_vscp_handleHeartbeat:
 12128                           	opt stack 0
 12129                           tblptru	equ	0xFF8
 12130                           tblptrh	equ	0xFF7
 12131                           tblptrl	equ	0xFF6
 12132                           tablat	equ	0xFF5
 12133                           prodh	equ	0xFF4
 12134                           prodl	equ	0xFF3
 12135                           postinc0	equ	0xFEE
 12136                           wreg	equ	0xFE8
 12137                           indf2	equ	0xFDF
 12138                           postinc2	equ	0xFDE
 12139                           postdec2	equ	0xFDD
 12140                           fsr2h	equ	0xFDA
 12141                           fsr2l	equ	0xFD9
 12142                           status	equ	0xFD8
 12143                           
 12144 ;; *************** function _vscp_getMatrixInfo *****************
 12145 ;; Defined at:
 12146 ;;		line 2437 in file "../main.c"
 12147 ;; Parameters:    Size  Location     Type
 12148 ;;  pData           1    wreg     PTR unsigned char 
 12149 ;;		 -> vscp_omsg(13), 
 12150 ;; Auto vars:     Size  Location     Type
 12151 ;;  pData           1    0[COMRAM] PTR unsigned char 
 12152 ;;		 -> vscp_omsg(13), 
 12153 ;;  i               1    7[COMRAM] unsigned char 
 12154 ;; Return value:  Size  Location     Type
 12155 ;;		None               void
 12156 ;; Registers used:
 12157 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12158 ;; Tracked objects:
 12159 ;;		On entry : F/0
 12160 ;;		On exit  : F/0
 12161 ;;		Unchanged: 0/0
 12162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12163 ;;      Params:         0       0       0       0       0       0       0
 12164 ;;      Locals:         1       0       0       0       0       0       0
 12165 ;;      Temps:          0       0       0       0       0       0       0
 12166 ;;      Totals:         1       0       0       0       0       0       0
 12167 ;;Total ram usage:        1 bytes
 12168 ;; Hardware stack levels used:    1
 12169 ;; Hardware stack levels required when called:    2
 12170 ;; This function calls:
 12171 ;;		Nothing
 12172 ;; This function is called by:
 12173 ;;		_vscp_handleProtocolEvent
 12174 ;; This function uses a non-reentrant model
 12175 ;;
 12176                           
 12177                           	psect	text47
 12178  004062                     __ptext47:
 12179                           	opt stack 0
 12180  004062                     _vscp_getMatrixInfo:
 12181                           	opt stack 27
 12182                           
 12183                           ; BSR set to: 0
 12184                           ;main.c: 2438: uint8_t i;
 12185                           ;main.c: 2440: vscp_omsg.data[ 0 ] = 7;
 12186                           
 12187                           ;incstack = 0
 12188                           ;incstack = 0
 12189  004062  0E07               	movlw	7
 12190  004064  6FA9               	movwf	(_vscp_omsg+5)& (0+255),b
 12191                           
 12192                           ;main.c: 2441: vscp_omsg.data[ 1 ] = 72;
 12193  004066  0E48               	movlw	72
 12194  004068  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
 12195                           
 12196                           ;main.c: 2444: for ( i = 2; i < 8; i++ ) {
 12197  00406A  0E02               	movlw	2
 12198  00406C  6E08               	movwf	vscp_getMatrixInfo@i,c
 12199  00406E                     l6437:
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;main.c: 2445: vscp_omsg.data[ i ] = 0;
 12203  00406E  5008               	movf	vscp_getMatrixInfo@i,w,c
 12204  004070  0FA9               	addlw	low (_vscp_omsg+5)
 12205  004072  6ED9               	movwf	fsr2l,c
 12206  004074  6ADA               	clrf	fsr2h,c
 12207  004076  6ADF               	clrf	indf2,c
 12208                           
 12209                           ; BSR set to: 0
 12210  004078  2A08               	incf	vscp_getMatrixInfo@i,f,c
 12211                           
 12212                           ; BSR set to: 0
 12213  00407A  0E07               	movlw	7
 12214  00407C  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 12215  00407E  D7F7               	goto	l6437
 12216                           
 12217                           ; BSR set to: 0
 12218  004080  0C07               	retlw	7
 12219  004082                     __end_of_vscp_getMatrixInfo:
 12220                           	opt stack 0
 12221                           tblptru	equ	0xFF8
 12222                           tblptrh	equ	0xFF7
 12223                           tblptrl	equ	0xFF6
 12224                           tablat	equ	0xFF5
 12225                           prodh	equ	0xFF4
 12226                           prodl	equ	0xFF3
 12227                           postinc0	equ	0xFEE
 12228                           wreg	equ	0xFE8
 12229                           indf2	equ	0xFDF
 12230                           postinc2	equ	0xFDE
 12231                           postdec2	equ	0xFDD
 12232                           fsr2h	equ	0xFDA
 12233                           fsr2l	equ	0xFD9
 12234                           status	equ	0xFD8
 12235                           
 12236 ;; *************** function _vscp_goBootloaderMode *****************
 12237 ;; Defined at:
 12238 ;;		line 2421 in file "../main.c"
 12239 ;; Parameters:    Size  Location     Type
 12240 ;;  algorithm       1    wreg     unsigned char 
 12241 ;; Auto vars:     Size  Location     Type
 12242 ;;  algorithm       1   10[COMRAM] unsigned char 
 12243 ;; Return value:  Size  Location     Type
 12244 ;;		None               void
 12245 ;; Registers used:
 12246 ;;		wreg, status,2, status,0, cstack
 12247 ;; Tracked objects:
 12248 ;;		On entry : F/0
 12249 ;;		On exit  : 0/0
 12250 ;;		Unchanged: 0/0
 12251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12252 ;;      Params:         0       0       0       0       0       0       0
 12253 ;;      Locals:         1       0       0       0       0       0       0
 12254 ;;      Temps:          0       0       0       0       0       0       0
 12255 ;;      Totals:         1       0       0       0       0       0       0
 12256 ;;Total ram usage:        1 bytes
 12257 ;; Hardware stack levels used:    1
 12258 ;; Hardware stack levels required when called:    3
 12259 ;; This function calls:
 12260 ;;		_writeEEPROM
 12261 ;; This function is called by:
 12262 ;;		_vscp_handleProtocolEvent
 12263 ;; This function uses a non-reentrant model
 12264 ;;
 12265                           
 12266                           	psect	text48
 12267  004108                     __ptext48:
 12268                           	opt stack 0
 12269  004108                     _vscp_goBootloaderMode:
 12270                           	opt stack 26
 12271                           
 12272                           ; BSR set to: 0
 12273                           ;incstack = 0
 12274                           ;incstack = 0
 12275                           ;vscp_goBootloaderMode@algorithm stored from wreg
 12276  004108  CFE8 F00B          	movff	wreg,vscp_goBootloaderMode@algorithm
 12277                           
 12278                           ; BSR set to: 0
 12279                           ;main.c: 2422: if ( 0x01 != algorithm ) return;
 12280  00410C  040B               	decf	vscp_goBootloaderMode@algorithm,w,c
 12281  00410E  E107               	bnz	l622
 12282                           
 12283                           ; BSR set to: 0
 12284                           ;main.c: 2426: writeEEPROM(0x00, 0xff);
 12285  004110  6A09               	clrf	?_writeEEPROM+1,c
 12286  004112  6A08               	clrf	?_writeEEPROM,c
 12287  004114  0EFF               	movlw	255
 12288  004116  680A               	setf	?_writeEEPROM+2,c
 12289  004118  ECB6  F01F         	call	_writeEEPROM	;wreg free
 12290  00411C  00FF               	reset		;# 
 12291  00411E                     l622:
 12292  00411E  0012               	return	
 12293  004120                     __end_of_vscp_goBootloaderMode:
 12294                           	opt stack 0
 12295                           tblptru	equ	0xFF8
 12296                           tblptrh	equ	0xFF7
 12297                           tblptrl	equ	0xFF6
 12298                           tablat	equ	0xFF5
 12299                           prodh	equ	0xFF4
 12300                           prodl	equ	0xFF3
 12301                           postinc0	equ	0xFEE
 12302                           wreg	equ	0xFE8
 12303                           indf2	equ	0xFDF
 12304                           postinc2	equ	0xFDE
 12305                           postdec2	equ	0xFDD
 12306                           fsr2h	equ	0xFDA
 12307                           fsr2l	equ	0xFD9
 12308                           status	equ	0xFD8
 12309                           
 12310 ;; *************** function _vscp_handleProbeState *****************
 12311 ;; Defined at:
 12312 ;;		line 200 in file "../../vscp_firmware/common/vscp_firmware.c"
 12313 ;; Parameters:    Size  Location     Type
 12314 ;;		None
 12315 ;; Auto vars:     Size  Location     Type
 12316 ;;		None
 12317 ;; Return value:  Size  Location     Type
 12318 ;;		None               void
 12319 ;; Registers used:
 12320 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12321 ;; Tracked objects:
 12322 ;;		On entry : 0/0
 12323 ;;		On exit  : F/0
 12324 ;;		Unchanged: 0/0
 12325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12326 ;;      Params:         0       0       0       0       0       0       0
 12327 ;;      Locals:         0       0       0       0       0       0       0
 12328 ;;      Temps:          0       0       0       0       0       0       0
 12329 ;;      Totals:         0       0       0       0       0       0       0
 12330 ;;Total ram usage:        0 bytes
 12331 ;; Hardware stack levels used:    1
 12332 ;; Hardware stack levels required when called:    8
 12333 ;; This function calls:
 12334 ;;		_vscp_goActiveState
 12335 ;;		_vscp_writeNicknamePermanent
 12336 ;;		_vscp_sendEvent
 12337 ;;		_vscp_setSegmentCRC
 12338 ;; This function is called by:
 12339 ;;		_main
 12340 ;; This function uses a non-reentrant model
 12341 ;;
 12342                           
 12343                           	psect	text49
 12344  003878                     __ptext49:
 12345                           	opt stack 0
 12346  003878                     _vscp_handleProbeState:
 12347                           	opt stack 22
 12348                           
 12349                           ;vscp_firmware.c: 201: switch (vscp_node_substate) {
 12350                           
 12351                           ;incstack = 0
 12352                           ;incstack = 0
 12353  003878  D053               	goto	l7373
 12354  00387A                     l7303:
 12355                           
 12356                           ; BSR set to: 0
 12357                           ;vscp_firmware.c: 205: if (0xff != vscp_probe_address) {
 12358  00387A  2857               	incf	_vscp_probe_address,w,c
 12359  00387C  E010               	bz	l7319
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;vscp_firmware.c: 207: vscp_omsg.flags = 0x80 + 1;
 12363  00387E  0E81               	movlw	129
 12364  003880  6FA4               	movwf	_vscp_omsg& (0+255),b
 12365                           
 12366                           ; BSR set to: 0
 12367                           ;vscp_firmware.c: 208: vscp_omsg.priority = 0x00;
 12368  003882  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12369                           
 12370                           ; BSR set to: 0
 12371                           ;vscp_firmware.c: 209: vscp_omsg.vscp_class = 0;
 12372  003884  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12373  003886  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12374                           
 12375                           ;vscp_firmware.c: 210: vscp_omsg.vscp_type = 2;
 12376  003888  0E02               	movlw	2
 12377  00388A  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12378                           
 12379                           ; BSR set to: 0
 12380                           ;vscp_firmware.c: 211: vscp_omsg.data[ 0 ] = vscp_probe_address;
 12381  00388C  C057  F0A9         	movff	_vscp_probe_address,_vscp_omsg+5
 12382                           
 12383                           ; BSR set to: 0
 12384                           ;vscp_firmware.c: 214: vscp_sendEvent();
 12385  003890  ECA3  F01F         	call	_vscp_sendEvent	;wreg free
 12386                           
 12387                           ; BSR set to: 0
 12388                           ;vscp_firmware.c: 216: vscp_node_substate = 0x01;
 12389  003894  0E01               	movlw	1
 12390  003896  6F93               	movwf	_vscp_node_substate& (0+255),b
 12391  003898                     l7317:
 12392                           
 12393                           ; BSR set to: 0
 12394                           ;vscp_firmware.c: 217: vscp_timer = 0;
 12395  003898  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12396  00389A  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12397                           
 12398                           ;vscp_firmware.c: 219: } else {
 12399  00389C  D048               	goto	l1047
 12400  00389E                     l7319:
 12401                           
 12402                           ; BSR set to: 0
 12403                           ;vscp_firmware.c: 222: vscp_node_state = 0x04;
 12404  00389E  0E04               	movlw	4
 12405  0038A0  6F92               	movwf	_vscp_node_state& (0+255),b
 12406                           
 12407                           ;vscp_firmware.c: 225: vscp_omsg.flags = 0x80 + 1;
 12408  0038A2  0E81               	movlw	129
 12409  0038A4  6FA4               	movwf	_vscp_omsg& (0+255),b
 12410                           
 12411                           ; BSR set to: 0
 12412                           ;vscp_firmware.c: 226: vscp_omsg.data[ 0 ] = 0xff;
 12413  0038A6  69A9               	setf	(_vscp_omsg+5)& (0+255),b
 12414                           
 12415                           ;vscp_firmware.c: 227: vscp_omsg.priority = 0x07;
 12416  0038A8  0E07               	movlw	7
 12417  0038AA  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
 12418                           
 12419                           ; BSR set to: 0
 12420                           ;vscp_firmware.c: 228: vscp_omsg.vscp_class = 0;
 12421  0038AC  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12422  0038AE  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12423                           
 12424                           ;vscp_firmware.c: 229: vscp_omsg.vscp_type = 3;
 12425  0038B0  0E03               	movlw	3
 12426  0038B2  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12427                           
 12428                           ; BSR set to: 0
 12429                           ;vscp_firmware.c: 232: vscp_sendEvent();
 12430  0038B4  ECA3  F01F         	call	_vscp_sendEvent	;wreg free
 12431  0038B8  D03A               	goto	l1047
 12432  0038BA                     l1048:
 12433                           
 12434                           ; BSR set to: 0
 12435                           ;vscp_firmware.c: 239: if (vscp_imsg.flags & 0x80) {
 12436  0038BA  AF96               	btfss	_vscp_imsg& (0+255),7,b
 12437  0038BC  D00F               	goto	l7343
 12438                           
 12439                           ; BSR set to: 0
 12440                           ;vscp_firmware.c: 242: if ((0 == vscp_imsg.vscp_class) &&
 12441                           ;vscp_firmware.c: 243: (3 == vscp_imsg.vscp_type)) {
 12442  0038BE  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
 12443  0038C0  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 12444  0038C2  E135               	bnz	l1047
 12445                           
 12446                           ; BSR set to: 0
 12447  0038C4  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
 12448  0038C6  0A03               	xorlw	3
 12449  0038C8  E132               	bnz	l1047
 12450                           
 12451                           ; BSR set to: 0
 12452                           ;vscp_firmware.c: 246: if (0 == vscp_probe_address) {
 12453  0038CA  6657               	tstfsz	_vscp_probe_address,c
 12454  0038CC  D003               	goto	l7337
 12455                           
 12456                           ; BSR set to: 0
 12457                           ;vscp_firmware.c: 250: vscp_node_state = 0x02;
 12458  0038CE  0E02               	movlw	2
 12459  0038D0  6F92               	movwf	_vscp_node_state& (0+255),b
 12460  0038D2  D7E2               	goto	l7317
 12461  0038D4                     l7337:
 12462                           
 12463                           ; BSR set to: 0
 12464                           ;vscp_firmware.c: 256: vscp_probe_address++;
 12465  0038D4  2A57               	incf	_vscp_probe_address,f,c
 12466                           
 12467                           ; BSR set to: 0
 12468                           ;vscp_firmware.c: 257: vscp_node_substate = 0x00;
 12469  0038D6  6B93               	clrf	_vscp_node_substate& (0+255),b
 12470  0038D8                     l7341:
 12471                           
 12472                           ; BSR set to: 0
 12473                           ;vscp_firmware.c: 258: vscp_probe_cnt = 0;
 12474  0038D8  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12475  0038DA  D029               	goto	l1047
 12476  0038DC                     l7343:
 12477                           
 12478                           ; BSR set to: 0
 12479                           ;vscp_firmware.c: 264: if (vscp_timer > 1000) {
 12480  0038DC  0EE9               	movlw	233
 12481  0038DE  5D86               	subwf	_vscp_timer& (0+255),w,b	;volatile
 12482  0038E0  0E03               	movlw	3
 12483  0038E2  5987               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 12484  0038E4  E324               	bnc	l1047
 12485                           
 12486                           ; BSR set to: 0
 12487                           ;vscp_firmware.c: 266: vscp_probe_cnt++;
 12488  0038E6  2B94               	incf	_vscp_probe_cnt& (0+255),f,b
 12489                           
 12490                           ; BSR set to: 0
 12491                           ;vscp_firmware.c: 268: if (vscp_probe_cnt >= 3) {
 12492  0038E8  0E02               	movlw	2
 12493  0038EA  6594               	cpfsgt	_vscp_probe_cnt& (0+255),b
 12494  0038EC  D017               	goto	l1055
 12495                           
 12496                           ; BSR set to: 0
 12497                           ;vscp_firmware.c: 271: if (0 == vscp_probe_address) {
 12498  0038EE  6657               	tstfsz	_vscp_probe_address,c
 12499  0038F0  D005               	goto	l1056
 12500                           
 12501                           ; BSR set to: 0
 12502                           ;vscp_firmware.c: 274: vscp_probe_address++;
 12503  0038F2  2A57               	incf	_vscp_probe_address,f,c
 12504                           
 12505                           ; BSR set to: 0
 12506                           ;vscp_firmware.c: 275: vscp_node_substate = 0x00;
 12507  0038F4  6B93               	clrf	_vscp_node_substate& (0+255),b
 12508                           
 12509                           ; BSR set to: 0
 12510                           ;vscp_firmware.c: 276: vscp_timer = 0;
 12511  0038F6  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12512  0038F8  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12513  0038FA  D7EE               	goto	l7341
 12514  0038FC                     l1056:
 12515                           
 12516                           ; BSR set to: 0
 12517                           ;vscp_firmware.c: 282: vscp_nickname = vscp_probe_address;
 12518  0038FC  C057  F091         	movff	_vscp_probe_address,_vscp_nickname
 12519                           
 12520                           ; BSR set to: 0
 12521                           ;vscp_firmware.c: 283: vscp_node_state = 0x03;
 12522  003900  0E03               	movlw	3
 12523  003902  6F92               	movwf	_vscp_node_state& (0+255),b
 12524                           
 12525                           ; BSR set to: 0
 12526                           ;vscp_firmware.c: 284: vscp_node_substate = 0x00;
 12527  003904  6B93               	clrf	_vscp_node_substate& (0+255),b
 12528                           
 12529                           ; BSR set to: 0
 12530                           ;vscp_firmware.c: 285: vscp_writeNicknamePermanent(vscp_nickname);
 12531  003906  5191               	movf	_vscp_nickname& (0+255),w,b
 12532  003908  ECCC  F020         	call	_vscp_writeNicknamePermanent
 12533                           
 12534                           ;vscp_firmware.c: 286: vscp_setSegmentCRC(0x40);
 12535  00390C  0E40               	movlw	64
 12536  00390E  ECC3  F020         	call	_vscp_setSegmentCRC
 12537                           
 12538                           ;vscp_firmware.c: 289: vscp_probe_cnt = 0;
 12539  003912  0100               	movlb	0	; () banked
 12540  003914  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12541                           
 12542                           ; BSR set to: 0
 12543                           ;vscp_firmware.c: 290: vscp_goActiveState();
 12544  003916  EC41  F020         	call	_vscp_goActiveState	;wreg free
 12545  00391A  D009               	goto	l1047
 12546  00391C                     l1055:
 12547                           
 12548                           ; BSR set to: 0
 12549                           ;vscp_firmware.c: 294: vscp_node_substate = 0x00;
 12550  00391C  6B93               	clrf	_vscp_node_substate& (0+255),b
 12551  00391E  D007               	goto	l1047
 12552  003920                     l7373:
 12553  003920  0100               	movlb	0	; () banked
 12554  003922  5193               	movf	_vscp_node_substate& (0+255),w,b
 12555                           
 12556                           ; Switch size 1, requested type "speed"
 12557                           ; Number of cases is 3, Range of values is 0 to 2
 12558                           ; switch strategies available:
 12559                           ; Name         Instructions Cycles
 12560                           ; simple_byte           10     6 (average)
 12561                           ;	Chosen strategy is simple_byte
 12562  003924  E0AA               	bz	l7303
 12563  003926  0A01               	xorlw	1	; case 1
 12564  003928  E0C8               	bz	l1048
 12565  00392A  0A03               	xorlw	3	; case 2
 12566  00392C  E1F7               	bnz	l1055
 12567  00392E                     l1047:
 12568                           
 12569                           ; BSR set to: 0
 12570                           ;vscp_firmware.c: 309: vscp_imsg.flags = 0;
 12571  00392E  6B96               	clrf	_vscp_imsg& (0+255),b
 12572                           
 12573                           ; BSR set to: 0
 12574  003930  0012               	return	
 12575  003932                     __end_of_vscp_handleProbeState:
 12576                           	opt stack 0
 12577                           tblptru	equ	0xFF8
 12578                           tblptrh	equ	0xFF7
 12579                           tblptrl	equ	0xFF6
 12580                           tablat	equ	0xFF5
 12581                           prodh	equ	0xFF4
 12582                           prodl	equ	0xFF3
 12583                           postinc0	equ	0xFEE
 12584                           wreg	equ	0xFE8
 12585                           indf2	equ	0xFDF
 12586                           postinc2	equ	0xFDE
 12587                           postdec2	equ	0xFDD
 12588                           fsr2h	equ	0xFDA
 12589                           fsr2l	equ	0xFD9
 12590                           status	equ	0xFD8
 12591                           
 12592 ;; *************** function _vscp_goActiveState *****************
 12593 ;; Defined at:
 12594 ;;		line 350 in file "../../vscp_firmware/common/vscp_firmware.c"
 12595 ;; Parameters:    Size  Location     Type
 12596 ;;		None
 12597 ;; Auto vars:     Size  Location     Type
 12598 ;;		None
 12599 ;; Return value:  Size  Location     Type
 12600 ;;		None               void
 12601 ;; Registers used:
 12602 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12603 ;; Tracked objects:
 12604 ;;		On entry : 0/0
 12605 ;;		On exit  : F/0
 12606 ;;		Unchanged: 0/0
 12607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12608 ;;      Params:         0       0       0       0       0       0       0
 12609 ;;      Locals:         0       0       0       0       0       0       0
 12610 ;;      Temps:          0       0       0       0       0       0       0
 12611 ;;      Totals:         0       0       0       0       0       0       0
 12612 ;;Total ram usage:        0 bytes
 12613 ;; Hardware stack levels used:    1
 12614 ;; Hardware stack levels required when called:    7
 12615 ;; This function calls:
 12616 ;;		_vscp_sendEvent
 12617 ;; This function is called by:
 12618 ;;		_main
 12619 ;;		_vscp_handleProbeState
 12620 ;; This function uses a non-reentrant model
 12621 ;;
 12622                           
 12623                           	psect	text50
 12624  004082                     __ptext50:
 12625                           	opt stack 0
 12626  004082                     _vscp_goActiveState:
 12627                           	opt stack 22
 12628                           
 12629                           ;vscp_firmware.c: 351: vscp_omsg.flags = 0x80 + 1;
 12630                           
 12631                           ; BSR set to: 0
 12632                           ;incstack = 0
 12633                           ;incstack = 0
 12634  004082  0E81               	movlw	129
 12635  004084  0100               	movlb	0	; () banked
 12636  004086  6FA4               	movwf	_vscp_omsg& (0+255),b
 12637                           
 12638                           ; BSR set to: 0
 12639                           ;vscp_firmware.c: 352: vscp_omsg.priority = 0x00;
 12640  004088  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12641                           
 12642                           ; BSR set to: 0
 12643                           ;vscp_firmware.c: 353: vscp_omsg.vscp_class = 0;
 12644  00408A  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12645  00408C  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12646                           
 12647                           ;vscp_firmware.c: 354: vscp_omsg.vscp_type = 2;
 12648  00408E  0E02               	movlw	2
 12649  004090  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12650                           
 12651                           ; BSR set to: 0
 12652                           ;vscp_firmware.c: 355: vscp_omsg.data[ 0 ] = vscp_nickname;
 12653  004092  C091  F0A9         	movff	_vscp_nickname,_vscp_omsg+5
 12654                           
 12655                           ; BSR set to: 0
 12656                           ;vscp_firmware.c: 358: vscp_sendEvent();
 12657  004096  ECA3  F01F         	call	_vscp_sendEvent	;wreg free
 12658                           
 12659                           ; BSR set to: 0
 12660                           ;vscp_firmware.c: 360: vscp_initledfunc = 0x01;
 12661  00409A  0E01               	movlw	1
 12662  00409C  6E56               	movwf	_vscp_initledfunc,c
 12663                           
 12664                           ; BSR set to: 0
 12665  00409E  0C01               	retlw	1
 12666  0040A0                     __end_of_vscp_goActiveState:
 12667                           	opt stack 0
 12668                           tblptru	equ	0xFF8
 12669                           tblptrh	equ	0xFF7
 12670                           tblptrl	equ	0xFF6
 12671                           tablat	equ	0xFF5
 12672                           prodh	equ	0xFF4
 12673                           prodl	equ	0xFF3
 12674                           postinc0	equ	0xFEE
 12675                           wreg	equ	0xFE8
 12676                           indf2	equ	0xFDF
 12677                           postinc2	equ	0xFDE
 12678                           postdec2	equ	0xFDD
 12679                           fsr2h	equ	0xFDA
 12680                           fsr2l	equ	0xFD9
 12681                           status	equ	0xFD8
 12682                           
 12683 ;; *************** function _vscp_sendEvent *****************
 12684 ;; Defined at:
 12685 ;;		line 1270 in file "../../vscp_firmware/common/vscp_firmware.c"
 12686 ;; Parameters:    Size  Location     Type
 12687 ;;		None
 12688 ;; Auto vars:     Size  Location     Type
 12689 ;;  rv              1    0        unsigned char 
 12690 ;; Return value:  Size  Location     Type
 12691 ;;                  1    wreg      unsigned char 
 12692 ;; Registers used:
 12693 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12694 ;; Tracked objects:
 12695 ;;		On entry : F/0
 12696 ;;		On exit  : F/0
 12697 ;;		Unchanged: 0/0
 12698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12699 ;;      Params:         0       0       0       0       0       0       0
 12700 ;;      Locals:         1       0       0       0       0       0       0
 12701 ;;      Temps:          0       0       0       0       0       0       0
 12702 ;;      Totals:         1       0       0       0       0       0       0
 12703 ;;Total ram usage:        1 bytes
 12704 ;; Hardware stack levels used:    1
 12705 ;; Hardware stack levels required when called:    6
 12706 ;; This function calls:
 12707 ;;		_sendVSCPFrame
 12708 ;; This function is called by:
 12709 ;;		_vscp_handleProbeState
 12710 ;;		_vscp_goActiveState
 12711 ;;		_vscp_sendHeartBeat
 12712 ;;		_vscp_newNodeOnline
 12713 ;;		_vscp_handleProtocolEvent
 12714 ;; This function uses a non-reentrant model
 12715 ;;
 12716                           
 12717                           	psect	text51
 12718  003F46                     __ptext51:
 12719                           	opt stack 0
 12720  003F46                     _vscp_sendEvent:
 12721                           	opt stack 22
 12722                           
 12723                           ; BSR set to: 0
 12724                           
 12725                           ; BSR set to: 0
 12726                           ;incstack = 0
 12727                           ;incstack = 0
 12728  003F46  C0A6  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 12729  003F4A  C0A7  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 12730  003F4E  C0A8  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 12731  003F52  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 12732  003F56  C0A5  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 12733  003F5A  51A4               	movf	_vscp_omsg& (0+255),w,b
 12734  003F5C  0B0F               	andlw	15
 12735  003F5E  6E44               	movwf	?_sendVSCPFrame+5,c
 12736  003F60  0E00               	movlw	high (_vscp_omsg+5)
 12737  003F62  6E46               	movwf	?_sendVSCPFrame+7,c
 12738  003F64  0EA9               	movlw	low (_vscp_omsg+5)
 12739  003F66  6E45               	movwf	?_sendVSCPFrame+6,c
 12740  003F68  EF99  F01C         	goto	_sendVSCPFrame	;wreg free
 12741  003F6C                     __end_of_vscp_sendEvent:
 12742                           	opt stack 0
 12743                           tblptru	equ	0xFF8
 12744                           tblptrh	equ	0xFF7
 12745                           tblptrl	equ	0xFF6
 12746                           tablat	equ	0xFF5
 12747                           prodh	equ	0xFF4
 12748                           prodl	equ	0xFF3
 12749                           postinc0	equ	0xFEE
 12750                           wreg	equ	0xFE8
 12751                           indf2	equ	0xFDF
 12752                           postinc2	equ	0xFDE
 12753                           postdec2	equ	0xFDD
 12754                           fsr2h	equ	0xFDA
 12755                           fsr2l	equ	0xFD9
 12756                           status	equ	0xFD8
 12757                           
 12758 ;; *************** function _sendVSCPFrame *****************
 12759 ;; Defined at:
 12760 ;;		line 2496 in file "../main.c"
 12761 ;; Parameters:    Size  Location     Type
 12762 ;;  vscpclass       2   62[COMRAM] unsigned short 
 12763 ;;  vscptype        1   64[COMRAM] unsigned char 
 12764 ;;  nodeid          1   65[COMRAM] unsigned char 
 12765 ;;  priority        1   66[COMRAM] unsigned char 
 12766 ;;  size            1   67[COMRAM] unsigned char 
 12767 ;;  pData           2   68[COMRAM] PTR unsigned char 
 12768 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 12769 ;; Auto vars:     Size  Location     Type
 12770 ;;  id              4   70[COMRAM] unsigned long 
 12771 ;; Return value:  Size  Location     Type
 12772 ;;                  1    wreg      unsigned char 
 12773 ;; Registers used:
 12774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12775 ;; Tracked objects:
 12776 ;;		On entry : F/0
 12777 ;;		On exit  : F/0
 12778 ;;		Unchanged: 0/0
 12779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12780 ;;      Params:         8       0       0       0       0       0       0
 12781 ;;      Locals:         4       0       0       0       0       0       0
 12782 ;;      Temps:          0      20       0       0       0       0       0
 12783 ;;      Totals:        12      20       0       0       0       0       0
 12784 ;;Total ram usage:       32 bytes
 12785 ;; Hardware stack levels used:    1
 12786 ;; Hardware stack levels required when called:    5
 12787 ;; This function calls:
 12788 ;;		_sendCANFrame
 12789 ;; This function is called by:
 12790 ;;		_SendInformationEvent
 12791 ;;		_vscp_sendEvent
 12792 ;; This function uses a non-reentrant model
 12793 ;;
 12794                           
 12795                           	psect	text52
 12796  003932                     __ptext52:
 12797                           	opt stack 0
 12798  003932                     _sendVSCPFrame:
 12799                           	opt stack 23
 12800                           
 12801                           ; BSR set to: 0
 12802                           ;main.c: 2497: uint32_t id = ( (uint32_t)priority << 26 ) |
 12803                           ;main.c: 2498: ( (uint32_t)vscpclass << 16 ) |
 12804                           ;main.c: 2499: ( (uint32_t)vscptype << 8 ) |
 12805                           ;main.c: 2500: nodeid;
 12806                           
 12807                           ; BSR set to: 0
 12808                           ;incstack = 0
 12809                           ;incstack = 0
 12810  003932  C041  F0B1         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 12811  003936  6BB2               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 12812  003938  6BB3               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 12813  00393A  6BB4               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 12814  00393C  C0B3  F0B4         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 12815  003940  C0B2  F0B3         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 12816  003944  C0B1  F0B2         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 12817  003948  6BB1               	clrf	??_sendVSCPFrame& (0+255),b
 12818  00394A  503F               	movf	sendVSCPFrame@vscpclass,w,c
 12819  00394C  6FB5               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 12820  00394E  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 12821  003950  6FB6               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 12822  003952  6BB7               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 12823  003954  6BB8               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 12824  003956  C0B6  F0B8         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 12825  00395A  C0B5  F0B7         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 12826  00395E  6BB6               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 12827  003960  6BB5               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 12828  003962  C043  F0B9         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 12829  003966  6BBA               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 12830  003968  6BBB               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 12831  00396A  6BBC               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 12832  00396C  0E1A               	movlw	26
 12833  00396E                     u9955:
 12834  00396E  90D8               	bcf	status,0,c
 12835  003970  37B9               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 12836  003972  37BA               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 12837  003974  37BB               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 12838  003976  37BC               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 12839  003978  2EE8               	decfsz	wreg,f,c
 12840  00397A  D7F9               	goto	u9955
 12841  00397C  51B5               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 12842  00397E  11B9               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 12843  003980  6FBD               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 12844  003982  51B6               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 12845  003984  11BA               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 12846  003986  6FBE               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 12847  003988  51B7               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 12848  00398A  11BB               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 12849  00398C  6FBF               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 12850  00398E  51B8               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 12851  003990  11BC               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 12852  003992  6FC0               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 12853  003994  51B1               	movf	??_sendVSCPFrame& (0+255),w,b
 12854  003996  11BD               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 12855  003998  6FC1               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 12856  00399A  51B2               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 12857  00399C  11BE               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 12858  00399E  6FC2               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 12859  0039A0  51B3               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 12860  0039A2  11BF               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 12861  0039A4  6FC3               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 12862  0039A6  51B4               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 12863  0039A8  11C0               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 12864  0039AA  6FC4               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 12865  0039AC  5042               	movf	sendVSCPFrame@nodeid,w,c
 12866  0039AE  11C1               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 12867  0039B0  6E47               	movwf	sendVSCPFrame@id,c
 12868  0039B2  51C2               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 12869  0039B4  6E48               	movwf	sendVSCPFrame@id+1,c
 12870  0039B6  51C3               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 12871  0039B8  6E49               	movwf	sendVSCPFrame@id+2,c
 12872  0039BA  51C4               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 12873  0039BC  6E4A               	movwf	sendVSCPFrame@id+3,c
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;main.c: 2502: if ( !sendCANFrame( id, size, pData ) ) {
 12877  0039BE  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 12878  0039C2  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 12879  0039C6  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 12880  0039CA  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 12881  0039CE  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 12882  0039D2  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 12883  0039D6  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 12884  0039DA  ECC6  F01E         	call	_sendCANFrame	;wreg free
 12885  0039DE  0900               	iorlw	0
 12886                           
 12887                           ; BSR set to: 0
 12888                           ;main.c: 2503: return 0;
 12889  0039E0  0E00               	movlw	0
 12890  0039E2  A4D8               	btfss	status,2,c
 12891                           
 12892                           ; BSR set to: 0
 12893                           ;main.c: 2504: }
 12894                           ;main.c: 2506: return 1;
 12895  0039E4  0E01               	movlw	1
 12896                           
 12897                           ; BSR set to: 0
 12898  0039E6  0012               	return	
 12899  0039E8                     __end_of_sendVSCPFrame:
 12900                           	opt stack 0
 12901                           tblptru	equ	0xFF8
 12902                           tblptrh	equ	0xFF7
 12903                           tblptrl	equ	0xFF6
 12904                           tablat	equ	0xFF5
 12905                           prodh	equ	0xFF4
 12906                           prodl	equ	0xFF3
 12907                           postinc0	equ	0xFEE
 12908                           wreg	equ	0xFE8
 12909                           indf2	equ	0xFDF
 12910                           postinc2	equ	0xFDE
 12911                           postdec2	equ	0xFDD
 12912                           fsr2h	equ	0xFDA
 12913                           fsr2l	equ	0xFD9
 12914                           status	equ	0xFD8
 12915                           
 12916 ;; *************** function _sendCANFrame *****************
 12917 ;; Defined at:
 12918 ;;		line 2541 in file "../main.c"
 12919 ;; Parameters:    Size  Location     Type
 12920 ;;  id              4   54[COMRAM] unsigned long 
 12921 ;;  dlc             1   58[COMRAM] unsigned char 
 12922 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 12923 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 12924 ;; Auto vars:     Size  Location     Type
 12925 ;;  rv              1   61[COMRAM] unsigned char 
 12926 ;; Return value:  Size  Location     Type
 12927 ;;                  1    wreg      unsigned char 
 12928 ;; Registers used:
 12929 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12930 ;; Tracked objects:
 12931 ;;		On entry : F/0
 12932 ;;		On exit  : F/0
 12933 ;;		Unchanged: 0/0
 12934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12935 ;;      Params:         7       0       0       0       0       0       0
 12936 ;;      Locals:         1       0       0       0       0       0       0
 12937 ;;      Temps:          0       0       0       0       0       0       0
 12938 ;;      Totals:         8       0       0       0       0       0       0
 12939 ;;Total ram usage:        8 bytes
 12940 ;; Hardware stack levels used:    1
 12941 ;; Hardware stack levels required when called:    4
 12942 ;; This function calls:
 12943 ;;		_ECANSendMessage
 12944 ;; This function is called by:
 12945 ;;		_sendVSCPFrame
 12946 ;; This function uses a non-reentrant model
 12947 ;;
 12948                           
 12949                           	psect	text53
 12950  003D8C                     __ptext53:
 12951                           	opt stack 0
 12952  003D8C                     _sendCANFrame:
 12953                           	opt stack 23
 12954                           
 12955                           ; BSR set to: 0
 12956                           ;main.c: 2542: uint8_t rv = 0;
 12957                           
 12958                           ; BSR set to: 0
 12959                           ;incstack = 0
 12960                           ;incstack = 0
 12961  003D8C  6A3E               	clrf	sendCANFrame@rv,c
 12962                           
 12963                           ;main.c: 2543: sendTimer = 0;
 12964  003D8E  6A55               	clrf	_sendTimer,c
 12965                           
 12966                           ;main.c: 2545: while ( sendTimer < 1 ) {
 12967  003D90  D017               	goto	l8817
 12968  003D92                     l8813:
 12969                           
 12970                           ;main.c: 2546: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 12971  003D92  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 12972  003D96  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 12973  003D9A  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 12974  003D9E  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 12975  003DA2  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 12976  003DA6  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 12977  003DAA  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 12978  003DAE  0E20               	movlw	32
 12979  003DB0  6E19               	movwf	?_ECANSendMessage+7,c
 12980  003DB2  EC51  F017         	call	_ECANSendMessage	;wreg free
 12981  003DB6  0900               	iorlw	0
 12982  003DB8  E003               	bz	l8817
 12983                           
 12984                           ;main.c: 2547: rv = 1;
 12985  003DBA  0E01               	movlw	1
 12986  003DBC  6E3E               	movwf	sendCANFrame@rv,c
 12987                           
 12988                           ;main.c: 2548: break;
 12989  003DBE  D002               	goto	l653
 12990  003DC0                     l8817:
 12991  003DC0  5055               	movf	_sendTimer,w,c
 12992  003DC2  E0E7               	bz	l8813
 12993  003DC4                     l653:
 12994                           
 12995                           ;main.c: 2549: }
 12996                           ;main.c: 2550: }
 12997                           ;main.c: 2552: vscp_omsg.flags = 0;
 12998  003DC4  0100               	movlb	0	; () banked
 12999  003DC6  6BA4               	clrf	_vscp_omsg& (0+255),b
 13000                           
 13001                           ; BSR set to: 0
 13002                           ;main.c: 2554: return rv;
 13003  003DC8  503E               	movf	sendCANFrame@rv,w,c
 13004                           
 13005                           ; BSR set to: 0
 13006  003DCA  0012               	return	
 13007  003DCC                     __end_of_sendCANFrame:
 13008                           	opt stack 0
 13009                           tblptru	equ	0xFF8
 13010                           tblptrh	equ	0xFF7
 13011                           tblptrl	equ	0xFF6
 13012                           tablat	equ	0xFF5
 13013                           prodh	equ	0xFF4
 13014                           prodl	equ	0xFF3
 13015                           postinc0	equ	0xFEE
 13016                           wreg	equ	0xFE8
 13017                           indf2	equ	0xFDF
 13018                           postinc2	equ	0xFDE
 13019                           postdec2	equ	0xFDD
 13020                           fsr2h	equ	0xFDA
 13021                           fsr2l	equ	0xFD9
 13022                           status	equ	0xFD8
 13023                           
 13024 ;; *************** function _ECANSendMessage *****************
 13025 ;; Defined at:
 13026 ;;		line 617 in file "../ECAN.c"
 13027 ;; Parameters:    Size  Location     Type
 13028 ;;  id              4   17[COMRAM] unsigned long 
 13029 ;;  data            2   21[COMRAM] PTR unsigned char 
 13030 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13031 ;;  dataLen         1   23[COMRAM] unsigned char 
 13032 ;;  msgFlags        1   24[COMRAM] enum E16306
 13033 ;; Auto vars:     Size  Location     Type
 13034 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 13035 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13036 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13037 ;;		 -> B0CON(1), 
 13038 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 13039 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13040 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13041 ;;		 -> B0CON(1), 
 13042 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 13043 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13044 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13045 ;;		 -> B0CON(1), 
 13046 ;;  i               1   51[COMRAM] unsigned char 
 13047 ;;  temp            1   50[COMRAM] unsigned char 
 13048 ;;  tempBSEL0       1   47[COMRAM] struct .
 13049 ;;  j               1   46[COMRAM] unsigned char 
 13050 ;;  buffers         1   45[COMRAM] unsigned char 
 13051 ;;  mode            1   44[COMRAM] unsigned char 
 13052 ;; Return value:  Size  Location     Type
 13053 ;;                  1    wreg      enum E15660
 13054 ;; Registers used:
 13055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13056 ;; Tracked objects:
 13057 ;;		On entry : 0/0
 13058 ;;		On exit  : 0/0
 13059 ;;		Unchanged: 0/0
 13060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13061 ;;      Params:         8       0       0       0       0       0       0
 13062 ;;      Locals:        28       0       0       0       0       0       0
 13063 ;;      Temps:          1       0       0       0       0       0       0
 13064 ;;      Totals:        37       0       0       0       0       0       0
 13065 ;;Total ram usage:       37 bytes
 13066 ;; Hardware stack levels used:    1
 13067 ;; Hardware stack levels required when called:    3
 13068 ;; This function calls:
 13069 ;;		__CANIDToRegs
 13070 ;; This function is called by:
 13071 ;;		_sendCANFrame
 13072 ;; This function uses a non-reentrant model
 13073 ;;
 13074                           
 13075                           	psect	text54
 13076  002EA2                     __ptext54:
 13077                           	opt stack 0
 13078  002EA2                     _ECANSendMessage:
 13079                           	opt stack 23
 13080                           
 13081                           ;ECAN.c: 619: BYTE mode;
 13082                           ;ECAN.c: 620: BYTE buffers;
 13083                           ;ECAN.c: 628: BYTE i,j;
 13084                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 13085                           ;ECAN.c: 630: BYTE* pb[9];
 13086                           ;ECAN.c: 631: BYTE temp;
 13087                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 13088                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 13089                           
 13090                           ; BSR set to: 0
 13091                           ;incstack = 0
 13092                           ;incstack = 0
 13093  002EA2  0E0F               	movlw	15	;volatile
 13094  002EA4  6E1C               	movwf	ECANSendMessage@pb+1,c
 13095  002EA6  0E40               	movlw	64	;volatile
 13096  002EA8  6E1B               	movwf	ECANSendMessage@pb,c
 13097                           
 13098                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 13099  002EAA  0E0F               	movlw	15	;volatile
 13100  002EAC  6E1E               	movwf	ECANSendMessage@pb+3,c
 13101  002EAE  0E30               	movlw	48	;volatile
 13102  002EB0  6E1D               	movwf	ECANSendMessage@pb+2,c
 13103                           
 13104                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 13105  002EB2  0E0F               	movlw	15	;volatile
 13106  002EB4  6E20               	movwf	ECANSendMessage@pb+5,c
 13107  002EB6  0E20               	movlw	32	;volatile
 13108  002EB8  6E1F               	movwf	ECANSendMessage@pb+4,c
 13109                           
 13110                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 13111  002EBA  0E0E               	movlw	14	;volatile
 13112  002EBC  6E22               	movwf	ECANSendMessage@pb+7,c
 13113  002EBE  0E20               	movlw	32	;volatile
 13114  002EC0  6E21               	movwf	ECANSendMessage@pb+6,c
 13115                           
 13116                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 13117  002EC2  0E0E               	movlw	14	;volatile
 13118  002EC4  6E24               	movwf	ECANSendMessage@pb+9,c
 13119  002EC6  0E30               	movlw	48	;volatile
 13120  002EC8  6E23               	movwf	ECANSendMessage@pb+8,c
 13121                           
 13122                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 13123  002ECA  0E0E               	movlw	14	;volatile
 13124  002ECC  6E26               	movwf	ECANSendMessage@pb+11,c
 13125  002ECE  0E40               	movlw	64	;volatile
 13126  002ED0  6E25               	movwf	ECANSendMessage@pb+10,c
 13127                           
 13128                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 13129  002ED2  0E0E               	movlw	14	;volatile
 13130  002ED4  6E28               	movwf	ECANSendMessage@pb+13,c
 13131  002ED6  0E50               	movlw	80	;volatile
 13132  002ED8  6E27               	movwf	ECANSendMessage@pb+12,c
 13133                           
 13134                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 13135  002EDA  0E0E               	movlw	14	;volatile
 13136  002EDC  6E2A               	movwf	ECANSendMessage@pb+15,c
 13137  002EDE  0E60               	movlw	96	;volatile
 13138  002EE0  6E29               	movwf	ECANSendMessage@pb+14,c
 13139                           
 13140                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 13141  002EE2  0E0E               	movlw	14	;volatile
 13142  002EE4  6E2C               	movwf	ECANSendMessage@pb+17,c
 13143  002EE6  0E70               	movlw	112	;volatile
 13144  002EE8  6E2B               	movwf	ECANSendMessage@pb+16,c
 13145                           
 13146                           ; BSR set to: 14
 13147                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 13148  002EEA  5077               	movf	3959,w,c	;volatile
 13149  002EEC  0BC0               	andlw	192
 13150  002EEE  6E2D               	movwf	ECANSendMessage@mode,c
 13151                           
 13152                           ; BSR set to: 14
 13153                           ;ECAN.c: 660: if ( mode == 0x00 )
 13154  002EF0  662D               	tstfsz	ECANSendMessage@mode,c
 13155  002EF2  D002               	goto	l8831
 13156                           
 13157                           ; BSR set to: 14
 13158                           ;ECAN.c: 661: buffers = 2;
 13159  002EF4  0E02               	movlw	2
 13160  002EF6  D001               	goto	L28
 13161  002EF8                     l8831:
 13162                           
 13163                           ; BSR set to: 14
 13164                           ;ECAN.c: 662: else
 13165                           ;ECAN.c: 663: buffers = 8;
 13166  002EF8  0E08               	movlw	8
 13167  002EFA                     L28:
 13168  002EFA  6E2E               	movwf	ECANSendMessage@buffers,c
 13169                           
 13170                           ; BSR set to: 14
 13171                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 13172  002EFC  010D               	movlb	13	; () banked
 13173  002EFE  90D8               	bcf	status,0,c
 13174  002F00  31F8               	rrcf	248,w,b	;volatile
 13175  002F02  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 13176                           
 13177                           ; BSR set to: 13
 13178                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 13179  002F04  6A34               	clrf	ECANSendMessage@i,c
 13180  002F06  D07D               	goto	l8891
 13181  002F08                     l8837:
 13182                           
 13183                           ;ECAN.c: 688: {
 13184                           ;ECAN.c: 693: ptr = pb[i];
 13185  002F08  5034               	movf	ECANSendMessage@i,w,c
 13186  002F0A  0D02               	mullw	2
 13187  002F0C  50F3               	movf	prodl,w,c
 13188  002F0E  0F1B               	addlw	low ECANSendMessage@pb
 13189  002F10  6ED9               	movwf	fsr2l,c
 13190  002F12  6ADA               	clrf	fsr2h,c
 13191  002F14  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 13192  002F18  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 13193                           
 13194                           ;ECAN.c: 694: tempPtr = ptr;
 13195  002F1C  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 13196  002F20  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 13197                           
 13198                           ;ECAN.c: 702: if ( i > 2 )
 13199  002F24  0E02               	movlw	2
 13200  002F26  6434               	cpfsgt	ECANSendMessage@i,c
 13201  002F28  D004               	goto	l8849
 13202                           
 13203                           ;ECAN.c: 703: {
 13204                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 13205  002F2A  90D8               	bcf	status,0,c
 13206  002F2C  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 13207                           
 13208                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 13209  002F2E  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 13210  002F30  D067               	goto	l8889
 13211  002F32                     l8849:
 13212                           
 13213                           ;ECAN.c: 714: }
 13214                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 13215  002F32  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13216  002F36  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13217  002F3A  50DF               	movf	indf2,w,c
 13218  002F3C  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13219  002F3E  B61A               	btfsc	??_ECANSendMessage,3,c
 13220  002F40  D05F               	goto	l8889
 13221                           
 13222                           ;ECAN.c: 721: {
 13223                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 13224  002F42  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13225  002F46  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13226  002F4A  0EFC               	movlw	252
 13227  002F4C  16DF               	andwf	indf2,f,c
 13228                           
 13229                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 13230  002F4E  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 13231  002F52  0E03               	movlw	3
 13232  002F54  161A               	andwf	??_ECANSendMessage,f,c
 13233  002F56  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13234  002F5A  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13235  002F5E  501A               	movf	??_ECANSendMessage,w,c
 13236  002F60  12DF               	iorwf	indf2,f,c
 13237                           
 13238                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 13239  002F62  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 13240  002F64  D004               	goto	l845
 13241                           
 13242                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 13243  002F66  5018               	movf	ECANSendMessage@dataLen,w,c
 13244  002F68  0940               	iorlw	64
 13245  002F6A  6E33               	movwf	ECANSendMessage@temp,c
 13246  002F6C  D002               	goto	l8859
 13247  002F6E                     l845:
 13248                           
 13249                           ;ECAN.c: 729: else
 13250                           ;ECAN.c: 730: temp = dataLen;
 13251  002F6E  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 13252  002F72                     l8859:
 13253                           
 13254                           ;ECAN.c: 732: *(ptr+5) = temp;
 13255  002F72  EE20 F005          	lfsr	2,5
 13256  002F76  5035               	movf	ECANSendMessage@ptr,w,c
 13257  002F78  26D9               	addwf	fsr2l,f,c
 13258  002F7A  5036               	movf	ECANSendMessage@ptr+1,w,c
 13259  002F7C  22DA               	addwfc	fsr2h,f,c
 13260  002F7E  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 13261                           
 13262                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 13263  002F82  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 13264  002F84  D003               	goto	l847
 13265                           
 13266                           ;ECAN.c: 736: temp = 1;
 13267  002F86  0E01               	movlw	1
 13268  002F88  6E33               	movwf	ECANSendMessage@temp,c
 13269  002F8A  D001               	goto	l8865
 13270  002F8C                     l847:
 13271                           
 13272                           ;ECAN.c: 738: else
 13273                           ;ECAN.c: 739: temp = 0;
 13274  002F8C  6A33               	clrf	ECANSendMessage@temp,c
 13275  002F8E                     l8865:
 13276                           
 13277                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 13278  002F8E  2835               	incf	ECANSendMessage@ptr,w,c
 13279  002F90  6E08               	movwf	?__CANIDToRegs,c
 13280  002F92  0E00               	movlw	0
 13281  002F94  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 13282  002F96  6E09               	movwf	?__CANIDToRegs+1,c
 13283  002F98  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 13284  002F9C  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 13285  002FA0  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 13286  002FA4  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 13287  002FA8  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 13288  002FAC  ECB8  F018         	call	__CANIDToRegs	;wreg free
 13289                           
 13290                           ;ECAN.c: 745: ptr += 6;
 13291  002FB0  0E06               	movlw	6
 13292  002FB2  2635               	addwf	ECANSendMessage@ptr,f,c
 13293  002FB4  0E00               	movlw	0
 13294  002FB6  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 13295                           
 13296                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 13297  002FB8  6A2F               	clrf	ECANSendMessage@j,c
 13298  002FBA  D00F               	goto	l8879
 13299  002FBC                     l8871:
 13300                           
 13301                           ;ECAN.c: 748: *ptr++ = *data++;
 13302  002FBC  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 13303  002FC0  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 13304  002FC4  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 13305  002FC8  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 13306  002FCC  CFDF FFE7          	movff	indf2,indf1
 13307  002FD0  4A16               	infsnz	ECANSendMessage@data,f,c
 13308  002FD2  2A17               	incf	ECANSendMessage@data+1,f,c
 13309  002FD4  4A35               	infsnz	ECANSendMessage@ptr,f,c
 13310  002FD6  2A36               	incf	ECANSendMessage@ptr+1,f,c
 13311  002FD8  2A2F               	incf	ECANSendMessage@j,f,c
 13312  002FDA                     l8879:
 13313  002FDA  5018               	movf	ECANSendMessage@dataLen,w,c
 13314  002FDC  5C2F               	subwf	ECANSendMessage@j,w,c
 13315  002FDE  E3EE               	bnc	l8871
 13316                           
 13317                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 13318  002FE0  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13319  002FE4  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13320  002FE8  50DF               	movf	indf2,w,c
 13321  002FEA  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13322  002FEC  B41A               	btfsc	??_ECANSendMessage,2,c
 13323  002FEE  D006               	goto	l8885
 13324                           
 13325                           ;ECAN.c: 753: *tempPtr |= 0x08;
 13326  002FF0  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13327  002FF4  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13328  002FF8  0E00               	movlw	0
 13329  002FFA  86DB               	bsf	plusw2,3,c
 13330  002FFC                     l8885:
 13331                           
 13332                           ;ECAN.c: 755: return TRUE;
 13333  002FFC  0E01               	movlw	1
 13334  002FFE  D005               	goto	l853
 13335  003000                     l8889:
 13336  003000  2A34               	incf	ECANSendMessage@i,f,c
 13337  003002                     l8891:
 13338  003002  502E               	movf	ECANSendMessage@buffers,w,c
 13339  003004  5C34               	subwf	ECANSendMessage@i,w,c
 13340  003006  E380               	bnc	l8837
 13341                           
 13342                           ;ECAN.c: 756: }
 13343                           ;ECAN.c: 757: }
 13344                           ;ECAN.c: 760: return FALSE;
 13345  003008  0E00               	movlw	0
 13346  00300A                     l853:
 13347  00300A  0012               	return	
 13348  00300C                     __end_of_ECANSendMessage:
 13349                           	opt stack 0
 13350                           tblptru	equ	0xFF8
 13351                           tblptrh	equ	0xFF7
 13352                           tblptrl	equ	0xFF6
 13353                           tablat	equ	0xFF5
 13354                           prodh	equ	0xFF4
 13355                           prodl	equ	0xFF3
 13356                           postinc0	equ	0xFEE
 13357                           wreg	equ	0xFE8
 13358                           indf1	equ	0xFE7
 13359                           fsr1h	equ	0xFE2
 13360                           fsr1l	equ	0xFE1
 13361                           indf2	equ	0xFDF
 13362                           postinc2	equ	0xFDE
 13363                           postdec2	equ	0xFDD
 13364                           plusw2	equ	0xFDB
 13365                           fsr2h	equ	0xFDA
 13366                           fsr2l	equ	0xFD9
 13367                           status	equ	0xFD8
 13368                           
 13369 ;; *************** function __CANIDToRegs *****************
 13370 ;; Defined at:
 13371 ;;		line 1099 in file "../ECAN.c"
 13372 ;; Parameters:    Size  Location     Type
 13373 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 13374 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13375 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13376 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
 13377 ;;  val             4    9[COMRAM] unsigned long 
 13378 ;;  type            1   13[COMRAM] unsigned char 
 13379 ;; Auto vars:     Size  Location     Type
 13380 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 13381 ;;		 -> _CANIDToRegs@val(4), 
 13382 ;; Return value:  Size  Location     Type
 13383 ;;		None               void
 13384 ;; Registers used:
 13385 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13386 ;; Tracked objects:
 13387 ;;		On entry : 0/F
 13388 ;;		On exit  : 0/0
 13389 ;;		Unchanged: 0/0
 13390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13391 ;;      Params:         7       0       0       0       0       0       0
 13392 ;;      Locals:         1       0       0       0       0       0       0
 13393 ;;      Temps:          2       0       0       0       0       0       0
 13394 ;;      Totals:        10       0       0       0       0       0       0
 13395 ;;Total ram usage:       10 bytes
 13396 ;; Hardware stack levels used:    1
 13397 ;; Hardware stack levels required when called:    2
 13398 ;; This function calls:
 13399 ;;		Nothing
 13400 ;; This function is called by:
 13401 ;;		_calculateSetFilterMask
 13402 ;;		_ECANSendMessage
 13403 ;; This function uses a non-reentrant model
 13404 ;;
 13405                           
 13406                           	psect	text55
 13407  003170                     __ptext55:
 13408                           	opt stack 0
 13409  003170                     __CANIDToRegs:
 13410                           	opt stack 23
 13411                           
 13412                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 13413                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 13414                           
 13415                           ;incstack = 0
 13416                           ;incstack = 0
 13417  003170  0E0A               	movlw	low __CANIDToRegs@val
 13418  003172  6E11               	movwf	__CANIDToRegs@Value,c
 13419                           
 13420                           ;ECAN.c: 1104: if ( type == 0 )
 13421  003174  660E               	tstfsz	__CANIDToRegs@type,c
 13422  003176  D037               	goto	l8907
 13423                           
 13424                           ;ECAN.c: 1105: {
 13425                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 13426  003178  5011               	movf	__CANIDToRegs@Value,w,c
 13427  00317A  6ED9               	movwf	fsr2l,c
 13428  00317C  6ADA               	clrf	fsr2h,c
 13429  00317E  50DF               	movf	indf2,w,c
 13430  003180  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13431  003182  90D8               	bcf	status,0,c
 13432  003184  320F               	rrcf	??__CANIDToRegs,f,c
 13433  003186  90D8               	bcf	status,0,c
 13434  003188  320F               	rrcf	??__CANIDToRegs,f,c
 13435  00318A  90D8               	bcf	status,0,c
 13436  00318C  300F               	rrcf	??__CANIDToRegs,w,c
 13437  00318E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13438  003192  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13439  003196  6EDF               	movwf	indf2,c
 13440                           
 13441                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 13442  003198  5011               	movf	__CANIDToRegs@Value,w,c
 13443  00319A  6ED9               	movwf	fsr2l,c
 13444  00319C  6ADA               	clrf	fsr2h,c
 13445  00319E  2AD9               	incf	fsr2l,f,c
 13446  0031A0  6ADA               	clrf	fsr2h,c
 13447  0031A2  50DF               	movf	indf2,w,c
 13448  0031A4  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13449  0031A6  0E05               	movlw	5
 13450  0031A8  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13451  0031AA                     u10625:
 13452  0031AA  90D8               	bcf	status,0,c
 13453  0031AC  360F               	rlcf	??__CANIDToRegs,f,c
 13454  0031AE  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13455  0031B0  D7FC               	goto	u10625
 13456  0031B2  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13457  0031B6  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13458  0031BA  500F               	movf	??__CANIDToRegs,w,c
 13459  0031BC  12DF               	iorwf	indf2,f,c
 13460                           
 13461                           ;ECAN.c: 1109: ptr++;
 13462  0031BE  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13463  0031C0  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13464                           
 13465                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 13466  0031C2  5011               	movf	__CANIDToRegs@Value,w,c
 13467  0031C4  6ED9               	movwf	fsr2l,c
 13468  0031C6  6ADA               	clrf	fsr2h,c
 13469  0031C8  50DF               	movf	indf2,w,c
 13470  0031CA  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13471  0031CC  0E05               	movlw	5
 13472  0031CE  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13473  0031D0                     u10635:
 13474  0031D0  90D8               	bcf	status,0,c
 13475  0031D2  360F               	rlcf	??__CANIDToRegs,f,c
 13476  0031D4  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13477  0031D6  D7FC               	goto	u10635
 13478  0031D8  500F               	movf	??__CANIDToRegs,w,c
 13479  0031DA  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13480  0031DE  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13481  0031E2  6EDF               	movwf	indf2,c
 13482                           
 13483                           ;ECAN.c: 1111: }
 13484  0031E4  D06C               	goto	l907
 13485  0031E6                     l8907:
 13486                           
 13487                           ;ECAN.c: 1112: else
 13488                           ;ECAN.c: 1113: {
 13489                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 13490  0031E6  5011               	movf	__CANIDToRegs@Value,w,c
 13491  0031E8  6ED9               	movwf	fsr2l,c
 13492  0031EA  6ADA               	clrf	fsr2h,c
 13493  0031EC  0E02               	movlw	2
 13494  0031EE  26D9               	addwf	fsr2l,f,c
 13495  0031F0  6ADA               	clrf	fsr2h,c
 13496  0031F2  50DF               	movf	indf2,w,c
 13497  0031F4  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13498  0031F6  0E05               	movlw	5
 13499  0031F8  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13500  0031FA                     u10645:
 13501  0031FA  90D8               	bcf	status,0,c
 13502  0031FC  320F               	rrcf	??__CANIDToRegs,f,c
 13503  0031FE  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13504  003200  D7FC               	goto	u10645
 13505  003202  500F               	movf	??__CANIDToRegs,w,c
 13506  003204  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13507  003208  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13508  00320C  6EDF               	movwf	indf2,c
 13509                           
 13510                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 13511  00320E  5011               	movf	__CANIDToRegs@Value,w,c
 13512  003210  6ED9               	movwf	fsr2l,c
 13513  003212  6ADA               	clrf	fsr2h,c
 13514  003214  0E03               	movlw	3
 13515  003216  26D9               	addwf	fsr2l,f,c
 13516  003218  6ADA               	clrf	fsr2h,c
 13517  00321A  50DF               	movf	indf2,w,c
 13518  00321C  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13519  00321E  90D8               	bcf	status,0,c
 13520  003220  360F               	rlcf	??__CANIDToRegs,f,c
 13521  003222  90D8               	bcf	status,0,c
 13522  003224  360F               	rlcf	??__CANIDToRegs,f,c
 13523  003226  90D8               	bcf	status,0,c
 13524  003228  360F               	rlcf	??__CANIDToRegs,f,c
 13525  00322A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13526  00322E  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13527  003232  500F               	movf	??__CANIDToRegs,w,c
 13528  003234  12DF               	iorwf	indf2,f,c
 13529                           
 13530                           ;ECAN.c: 1117: ptr++;
 13531  003236  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13532  003238  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13533                           
 13534                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 13535  00323A  5011               	movf	__CANIDToRegs@Value,w,c
 13536  00323C  6ED9               	movwf	fsr2l,c
 13537  00323E  6ADA               	clrf	fsr2h,c
 13538  003240  0E02               	movlw	2
 13539  003242  26D9               	addwf	fsr2l,f,c
 13540  003244  6ADA               	clrf	fsr2h,c
 13541  003246  50DF               	movf	indf2,w,c
 13542  003248  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13543  00324A  90D8               	bcf	status,0,c
 13544  00324C  360F               	rlcf	??__CANIDToRegs,f,c
 13545  00324E  90D8               	bcf	status,0,c
 13546  003250  360F               	rlcf	??__CANIDToRegs,f,c
 13547  003252  90D8               	bcf	status,0,c
 13548  003254  340F               	rlcf	??__CANIDToRegs,w,c
 13549  003256  0BE0               	andlw	224
 13550  003258  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13551  00325C  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13552  003260  6EDF               	movwf	indf2,c
 13553                           
 13554                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 13555  003262  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13556  003266  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13557  00326A  0E00               	movlw	0
 13558  00326C  86DB               	bsf	plusw2,3,c
 13559                           
 13560                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 13561  00326E  5011               	movf	__CANIDToRegs@Value,w,c
 13562  003270  6ED9               	movwf	fsr2l,c
 13563  003272  6ADA               	clrf	fsr2h,c
 13564  003274  0E02               	movlw	2
 13565  003276  26D9               	addwf	fsr2l,f,c
 13566  003278  6ADA               	clrf	fsr2h,c
 13567  00327A  50DF               	movf	indf2,w,c
 13568  00327C  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13569  00327E  0E03               	movlw	3
 13570  003280  160F               	andwf	??__CANIDToRegs,f,c
 13571  003282  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13572  003286  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13573  00328A  500F               	movf	??__CANIDToRegs,w,c
 13574  00328C  12DF               	iorwf	indf2,f,c
 13575                           
 13576                           ;ECAN.c: 1122: ptr++;
 13577  00328E  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13578  003290  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13579                           
 13580                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 13581  003292  5011               	movf	__CANIDToRegs@Value,w,c
 13582  003294  6ED9               	movwf	fsr2l,c
 13583  003296  6ADA               	clrf	fsr2h,c
 13584  003298  2AD9               	incf	fsr2l,f,c
 13585  00329A  6ADA               	clrf	fsr2h,c
 13586  00329C  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13587  0032A0  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13588  0032A4  CFDF FFE7          	movff	indf2,indf1
 13589                           
 13590                           ;ECAN.c: 1124: ptr++;
 13591  0032A8  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13592  0032AA  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13593                           
 13594                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 13595  0032AC  5011               	movf	__CANIDToRegs@Value,w,c
 13596  0032AE  6ED9               	movwf	fsr2l,c
 13597  0032B0  6ADA               	clrf	fsr2h,c
 13598  0032B2  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13599  0032B6  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13600  0032BA  CFDF FFE7          	movff	indf2,indf1
 13601  0032BE                     l907:
 13602  0032BE  0012               	return	
 13603  0032C0                     __end_of__CANIDToRegs:
 13604                           	opt stack 0
 13605                           tblptru	equ	0xFF8
 13606                           tblptrh	equ	0xFF7
 13607                           tblptrl	equ	0xFF6
 13608                           tablat	equ	0xFF5
 13609                           prodh	equ	0xFF4
 13610                           prodl	equ	0xFF3
 13611                           postinc0	equ	0xFEE
 13612                           wreg	equ	0xFE8
 13613                           indf1	equ	0xFE7
 13614                           fsr1h	equ	0xFE2
 13615                           fsr1l	equ	0xFE1
 13616                           indf2	equ	0xFDF
 13617                           postinc2	equ	0xFDE
 13618                           postdec2	equ	0xFDD
 13619                           plusw2	equ	0xFDB
 13620                           fsr2h	equ	0xFDA
 13621                           fsr2l	equ	0xFD9
 13622                           status	equ	0xFD8
 13623                           
 13624 ;; *************** function _vscp_getEvent *****************
 13625 ;; Defined at:
 13626 ;;		line 1290 in file "../../vscp_firmware/common/vscp_firmware.c"
 13627 ;; Parameters:    Size  Location     Type
 13628 ;;		None
 13629 ;; Auto vars:     Size  Location     Type
 13630 ;;  rv              1   43[COMRAM] unsigned char 
 13631 ;; Return value:  Size  Location     Type
 13632 ;;                  1    wreg      unsigned char 
 13633 ;; Registers used:
 13634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13635 ;; Tracked objects:
 13636 ;;		On entry : F/0
 13637 ;;		On exit  : 0/0
 13638 ;;		Unchanged: 0/0
 13639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13640 ;;      Params:         0       0       0       0       0       0       0
 13641 ;;      Locals:         1       0       0       0       0       0       0
 13642 ;;      Temps:          0       0       0       0       0       0       0
 13643 ;;      Totals:         1       0       0       0       0       0       0
 13644 ;;Total ram usage:        1 bytes
 13645 ;; Hardware stack levels used:    1
 13646 ;; Hardware stack levels required when called:    6
 13647 ;; This function calls:
 13648 ;;		_getVSCPFrame
 13649 ;; This function is called by:
 13650 ;;		_main
 13651 ;; This function uses a non-reentrant model
 13652 ;;
 13653                           
 13654                           	psect	text56
 13655  003ECE                     __ptext56:
 13656                           	opt stack 0
 13657  003ECE                     _vscp_getEvent:
 13658                           	opt stack 24
 13659                           
 13660                           ; BSR set to: 0
 13661                           ;vscp_firmware.c: 1291: int8_t rv;
 13662                           ;vscp_firmware.c: 1297: if (vscp_imsg.flags & 0x80) return !0;
 13663                           
 13664                           ;incstack = 0
 13665                           ;incstack = 0
 13666  003ECE  BF96               	btfsc	_vscp_imsg& (0+255),7,b
 13667  003ED0  D012               	goto	l1279
 13668                           
 13669                           ; BSR set to: 0
 13670                           ;vscp_firmware.c: 1300: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
 13671                           ;vscp_firmware.c: 1301: &vscp_imsg.vscp_type,
 13672                           ;vscp_firmware.c: 1302: &vscp_imsg.oaddr,
 13673                           ;vscp_firmware.c: 1303: &vscp_imsg.priority,
 13674                           ;vscp_firmware.c: 1304: &vscp_imsg.flags,
 13675                           ;vscp_firmware.c: 1305: vscp_imsg.data))) {
 13676  003ED2  0E9A               	movlw	low (_vscp_imsg+4)
 13677  003ED4  6E1E               	movwf	?_getVSCPFrame,c
 13678  003ED6  0E9B               	movlw	low (_vscp_imsg+5)
 13679  003ED8  6E1F               	movwf	?_getVSCPFrame+1,c
 13680  003EDA  0E97               	movlw	low (_vscp_imsg+1)
 13681  003EDC  6E20               	movwf	?_getVSCPFrame+2,c
 13682  003EDE  0E96               	movlw	low _vscp_imsg
 13683  003EE0  6E21               	movwf	?_getVSCPFrame+3,c
 13684  003EE2  0E9C               	movlw	low (_vscp_imsg+6)
 13685  003EE4  6E22               	movwf	?_getVSCPFrame+4,c
 13686  003EE6  0E98               	movlw	(_vscp_imsg+2)& (0+255)
 13687  003EE8  EC9A  F01D         	call	_getVSCPFrame
 13688  003EEC  6E2C               	movwf	vscp_getEvent@rv,c
 13689  003EEE  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 13690  003EF0  E002               	bz	l1279
 13691                           
 13692                           ;vscp_firmware.c: 1307: vscp_imsg.flags |= 0x80;
 13693  003EF2  0100               	movlb	0	; () banked
 13694  003EF4  8F96               	bsf	_vscp_imsg& (0+255),7,b
 13695  003EF6                     l1279:
 13696  003EF6  0012               	return	
 13697  003EF8                     __end_of_vscp_getEvent:
 13698                           	opt stack 0
 13699                           tblptru	equ	0xFF8
 13700                           tblptrh	equ	0xFF7
 13701                           tblptrl	equ	0xFF6
 13702                           tablat	equ	0xFF5
 13703                           prodh	equ	0xFF4
 13704                           prodl	equ	0xFF3
 13705                           postinc0	equ	0xFEE
 13706                           wreg	equ	0xFE8
 13707                           indf1	equ	0xFE7
 13708                           fsr1h	equ	0xFE2
 13709                           fsr1l	equ	0xFE1
 13710                           indf2	equ	0xFDF
 13711                           postinc2	equ	0xFDE
 13712                           postdec2	equ	0xFDD
 13713                           plusw2	equ	0xFDB
 13714                           fsr2h	equ	0xFDA
 13715                           fsr2l	equ	0xFD9
 13716                           status	equ	0xFD8
 13717                           
 13718 ;; *************** function _getVSCPFrame *****************
 13719 ;; Defined at:
 13720 ;;		line 2520 in file "../main.c"
 13721 ;; Parameters:    Size  Location     Type
 13722 ;;  pvscpclass      1    wreg     PTR unsigned short 
 13723 ;;		 -> vscp_imsg(14), 
 13724 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 13725 ;;		 -> vscp_imsg(14), 
 13726 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 13727 ;;		 -> vscp_imsg(14), 
 13728 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 13729 ;;		 -> vscp_imsg(14), 
 13730 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 13731 ;;		 -> vscp_imsg(14), 
 13732 ;;  pData           1   33[COMRAM] PTR unsigned char 
 13733 ;;		 -> vscp_imsg(14), 
 13734 ;; Auto vars:     Size  Location     Type
 13735 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 13736 ;;		 -> vscp_imsg(14), 
 13737 ;;  id              4   39[COMRAM] unsigned long 
 13738 ;; Return value:  Size  Location     Type
 13739 ;;                  1    wreg      unsigned char 
 13740 ;; Registers used:
 13741 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13742 ;; Tracked objects:
 13743 ;;		On entry : F/0
 13744 ;;		On exit  : 0/0
 13745 ;;		Unchanged: 0/0
 13746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13747 ;;      Params:         5       0       0       0       0       0       0
 13748 ;;      Locals:         5       0       0       0       0       0       0
 13749 ;;      Temps:          4       0       0       0       0       0       0
 13750 ;;      Totals:        14       0       0       0       0       0       0
 13751 ;;Total ram usage:       14 bytes
 13752 ;; Hardware stack levels used:    1
 13753 ;; Hardware stack levels required when called:    5
 13754 ;; This function calls:
 13755 ;;		_getCANFrame
 13756 ;; This function is called by:
 13757 ;;		_vscp_getEvent
 13758 ;; This function uses a non-reentrant model
 13759 ;;
 13760                           
 13761                           	psect	text57
 13762  003B34                     __ptext57:
 13763                           	opt stack 0
 13764  003B34                     _getVSCPFrame:
 13765                           	opt stack 24
 13766                           
 13767                           ;incstack = 0
 13768                           ;incstack = 0
 13769                           ;getVSCPFrame@pvscpclass stored from wreg
 13770  003B34  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 13771                           
 13772                           ; BSR set to: 0
 13773                           ;main.c: 2521: uint32_t id;
 13774                           ;main.c: 2523: if ( !getCANFrame(&id, pSize, pData) ) {
 13775  003B38  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 13776  003B3C  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 13777  003B40  0E28               	movlw	getVSCPFrame@id& (0+255)
 13778  003B42  EC3C  F01F         	call	_getCANFrame
 13779  003B46  0900               	iorlw	0
 13780  003B48  E102               	bnz	l6473
 13781                           
 13782                           ;main.c: 2524: return 0;
 13783  003B4A  0E00               	movlw	0
 13784  003B4C  D02E               	goto	l647
 13785  003B4E                     l6473:
 13786                           
 13787                           ;main.c: 2525: }
 13788                           ;main.c: 2527: *pNodeId = id & 0x0ff;
 13789  003B4E  501F               	movf	getVSCPFrame@pNodeId,w,c
 13790  003B50  6ED9               	movwf	fsr2l,c
 13791  003B52  6ADA               	clrf	fsr2h,c
 13792  003B54  C028  FFDF         	movff	getVSCPFrame@id,indf2
 13793                           
 13794                           ;main.c: 2528: *pvscptype = (id >> 8) & 0xff;
 13795  003B58  501E               	movf	getVSCPFrame@pvscptype,w,c
 13796  003B5A  6ED9               	movwf	fsr2l,c
 13797  003B5C  6ADA               	clrf	fsr2h,c
 13798  003B5E  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 13799                           
 13800                           ;main.c: 2529: *pvscpclass = (id >> 16) & 0x1ff;
 13801  003B62  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 13802  003B64  6E23               	movwf	??_getVSCPFrame& (0+255),c
 13803  003B66  0E01               	movlw	1
 13804  003B68  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 13805  003B6A  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 13806  003B6C  5027               	movf	getVSCPFrame@pvscpclass,w,c
 13807  003B6E  6ED9               	movwf	fsr2l,c
 13808  003B70  6ADA               	clrf	fsr2h,c
 13809  003B72  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 13810  003B76  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 13811                           
 13812                           ;main.c: 2530: *pPriority = (uint16_t) (0x07 & (id >> 26));
 13813  003B7A  5020               	movf	getVSCPFrame@pPriority,w,c
 13814  003B7C  6ED9               	movwf	fsr2l,c
 13815  003B7E  6ADA               	clrf	fsr2h,c
 13816  003B80  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 13817  003B84  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 13818  003B88  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 13819  003B8C  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 13820  003B90  0E1B               	movlw	27
 13821  003B92  D005               	goto	u6710
 13822  003B94                     u6715:
 13823  003B94  90D8               	bcf	status,0,c
 13824  003B96  3226               	rrcf	??_getVSCPFrame+3,f,c
 13825  003B98  3225               	rrcf	??_getVSCPFrame+2,f,c
 13826  003B9A  3224               	rrcf	??_getVSCPFrame+1,f,c
 13827  003B9C  3223               	rrcf	??_getVSCPFrame,f,c
 13828  003B9E                     u6710:
 13829  003B9E  2EE8               	decfsz	wreg,f,c
 13830  003BA0  D7F9               	goto	u6715
 13831  003BA2  5023               	movf	??_getVSCPFrame,w,c
 13832  003BA4  0B07               	andlw	7
 13833  003BA6  6EDF               	movwf	indf2,c
 13834                           
 13835                           ;main.c: 2532: return 1;
 13836  003BA8  0E01               	movlw	1
 13837  003BAA                     l647:
 13838  003BAA  0012               	return	
 13839  003BAC                     __end_of_getVSCPFrame:
 13840                           	opt stack 0
 13841                           tblptru	equ	0xFF8
 13842                           tblptrh	equ	0xFF7
 13843                           tblptrl	equ	0xFF6
 13844                           tablat	equ	0xFF5
 13845                           prodh	equ	0xFF4
 13846                           prodl	equ	0xFF3
 13847                           postinc0	equ	0xFEE
 13848                           wreg	equ	0xFE8
 13849                           indf1	equ	0xFE7
 13850                           fsr1h	equ	0xFE2
 13851                           fsr1l	equ	0xFE1
 13852                           indf2	equ	0xFDF
 13853                           postinc2	equ	0xFDE
 13854                           postdec2	equ	0xFDD
 13855                           plusw2	equ	0xFDB
 13856                           fsr2h	equ	0xFDA
 13857                           fsr2l	equ	0xFD9
 13858                           status	equ	0xFD8
 13859                           
 13860 ;; *************** function _getCANFrame *****************
 13861 ;; Defined at:
 13862 ;;		line 2562 in file "../main.c"
 13863 ;; Parameters:    Size  Location     Type
 13864 ;;  pid             1    wreg     PTR unsigned long 
 13865 ;;		 -> getVSCPFrame@id(4), 
 13866 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 13867 ;;		 -> vscp_imsg(14), 
 13868 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 13869 ;;		 -> vscp_imsg(14), 
 13870 ;; Auto vars:     Size  Location     Type
 13871 ;;  pid             1   27[COMRAM] PTR unsigned long 
 13872 ;;		 -> getVSCPFrame@id(4), 
 13873 ;;  flags           1   28[COMRAM] enum E16349
 13874 ;; Return value:  Size  Location     Type
 13875 ;;                  1    wreg      unsigned char 
 13876 ;; Registers used:
 13877 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13878 ;; Tracked objects:
 13879 ;;		On entry : F/0
 13880 ;;		On exit  : 0/0
 13881 ;;		Unchanged: 0/0
 13882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13883 ;;      Params:         2       0       0       0       0       0       0
 13884 ;;      Locals:         2       0       0       0       0       0       0
 13885 ;;      Temps:          0       0       0       0       0       0       0
 13886 ;;      Totals:         4       0       0       0       0       0       0
 13887 ;;Total ram usage:        4 bytes
 13888 ;; Hardware stack levels used:    1
 13889 ;; Hardware stack levels required when called:    4
 13890 ;; This function calls:
 13891 ;;		_ECANReceiveMessage
 13892 ;; This function is called by:
 13893 ;;		_getVSCPFrame
 13894 ;; This function uses a non-reentrant model
 13895 ;;
 13896                           
 13897                           	psect	text58
 13898  003E78                     __ptext58:
 13899                           	opt stack 0
 13900  003E78                     _getCANFrame:
 13901                           	opt stack 24
 13902                           
 13903                           ;incstack = 0
 13904                           ;incstack = 0
 13905                           ;getCANFrame@pid stored from wreg
 13906  003E78  CFE8 F01C          	movff	wreg,getCANFrame@pid
 13907                           
 13908                           ; BSR set to: 0
 13909                           ;main.c: 2563: ECAN_RX_MSG_FLAGS flags;
 13910                           ;main.c: 2567: if (vscp_imsg.flags & 0x80) return 0;
 13911  003E7C  AF96               	btfss	_vscp_imsg& (0+255),7,b
 13912  003E7E  D002               	goto	l6489
 13913  003E80                     l6485:
 13914  003E80  0E00               	movlw	0
 13915  003E82  D00F               	goto	l658
 13916  003E84                     l6489:
 13917                           
 13918                           ; BSR set to: 0
 13919                           ;main.c: 2569: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 13920  003E84  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 13921  003E88  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 13922  003E8C  0E1D               	movlw	low getCANFrame@flags
 13923  003E8E  6E11               	movwf	?_ECANReceiveMessage+2,c
 13924  003E90  501C               	movf	getCANFrame@pid,w,c
 13925  003E92  EC7E  F014         	call	_ECANReceiveMessage
 13926  003E96  0900               	iorlw	0
 13927  003E98  E0F3               	bz	l6485
 13928                           
 13929                           ;main.c: 2572: if (flags & ECAN_RX_RTR_FRAME) return 0;
 13930  003E9A  AC1D               	btfss	getCANFrame@flags,6,c
 13931                           
 13932                           ;main.c: 2575: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 13933  003E9C  AA1D               	btfss	getCANFrame@flags,5,c
 13934  003E9E  D7F0               	goto	l6485
 13935                           
 13936                           ;main.c: 2577: return 1;
 13937  003EA0  0E01               	movlw	1
 13938  003EA2                     l658:
 13939  003EA2  0012               	return	
 13940  003EA4                     __end_of_getCANFrame:
 13941                           	opt stack 0
 13942                           tblptru	equ	0xFF8
 13943                           tblptrh	equ	0xFF7
 13944                           tblptrl	equ	0xFF6
 13945                           tablat	equ	0xFF5
 13946                           prodh	equ	0xFF4
 13947                           prodl	equ	0xFF3
 13948                           postinc0	equ	0xFEE
 13949                           wreg	equ	0xFE8
 13950                           indf1	equ	0xFE7
 13951                           fsr1h	equ	0xFE2
 13952                           fsr1l	equ	0xFE1
 13953                           indf2	equ	0xFDF
 13954                           postinc2	equ	0xFDE
 13955                           postdec2	equ	0xFDD
 13956                           plusw2	equ	0xFDB
 13957                           fsr2h	equ	0xFDA
 13958                           fsr2l	equ	0xFD9
 13959                           status	equ	0xFD8
 13960                           
 13961 ;; *************** function _ECANReceiveMessage *****************
 13962 ;; Defined at:
 13963 ;;		line 803 in file "../ECAN.c"
 13964 ;; Parameters:    Size  Location     Type
 13965 ;;  id              1    wreg     PTR unsigned long 
 13966 ;;		 -> getVSCPFrame@id(4), 
 13967 ;;  data            1   14[COMRAM] PTR unsigned char 
 13968 ;;		 -> vscp_imsg(14), 
 13969 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 13970 ;;		 -> vscp_imsg(14), 
 13971 ;;  msgFlags        1   16[COMRAM] PTR enum E16324
 13972 ;;		 -> getCANFrame@flags(1), 
 13973 ;; Auto vars:     Size  Location     Type
 13974 ;;  id              1   19[COMRAM] PTR unsigned long 
 13975 ;;		 -> getVSCPFrame@id(4), 
 13976 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 13977 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 13978 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 13979 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 13980 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 13981 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 13982 ;;  temp            1   22[COMRAM] struct .
 13983 ;;  mode            1   21[COMRAM] unsigned char 
 13984 ;;  i               1   20[COMRAM] unsigned char 
 13985 ;; Return value:  Size  Location     Type
 13986 ;;                  1    wreg      enum E15660
 13987 ;; Registers used:
 13988 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13989 ;; Tracked objects:
 13990 ;;		On entry : F/0
 13991 ;;		On exit  : 0/0
 13992 ;;		Unchanged: 0/0
 13993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13994 ;;      Params:         3       0       0       0       0       0       0
 13995 ;;      Locals:         8       0       0       0       0       0       0
 13996 ;;      Temps:          0       0       0       0       0       0       0
 13997 ;;      Totals:        11       0       0       0       0       0       0
 13998 ;;Total ram usage:       11 bytes
 13999 ;; Hardware stack levels used:    1
 14000 ;; Hardware stack levels required when called:    3
 14001 ;; This function calls:
 14002 ;;		__ECANPointBuffer
 14003 ;;		__RegsToCANID
 14004 ;; This function is called by:
 14005 ;;		_getCANFrame
 14006 ;; This function uses a non-reentrant model
 14007 ;;
 14008                           
 14009                           	psect	text59
 14010  0028FC                     __ptext59:
 14011                           	opt stack 0
 14012  0028FC                     _ECANReceiveMessage:
 14013                           	opt stack 24
 14014                           
 14015                           ;incstack = 0
 14016                           ;incstack = 0
 14017                           ;ECANReceiveMessage@id stored from wreg
 14018  0028FC  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 14019                           
 14020                           ; BSR set to: 0
 14021                           ;ECAN.c: 805: BYTE mode;
 14022                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 14023                           ;ECAN.c: 809: char i;
 14024                           ;ECAN.c: 810: BYTE_VAL temp;
 14025                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 14026  002900  6A54               	clrf	__ECANRxFilterHitInfo,c
 14027                           
 14028                           ; BSR set to: 0
 14029                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 14030  002902  5077               	movf	3959,w,c	;volatile
 14031  002904  0BC0               	andlw	192
 14032  002906  6E16               	movwf	ECANReceiveMessage@mode,c
 14033                           
 14034                           ; BSR set to: 0
 14035                           ;ECAN.c: 816: if ( mode == 0x00 )
 14036  002908  6616               	tstfsz	ECANReceiveMessage@mode,c
 14037  00290A  D032               	goto	l6621
 14038                           
 14039                           ; BSR set to: 0
 14040                           ;ECAN.c: 822: {
 14041                           ;ECAN.c: 824: if ( RXB0FUL )
 14042  00290C  AE60               	btfss	3936,7,c	;volatile
 14043  00290E  D012               	goto	l858
 14044                           
 14045                           ; BSR set to: 0
 14046                           ;ECAN.c: 825: {
 14047                           ;ECAN.c: 827: RXB0IF = 0;
 14048  002910  90A4               	bcf	4004,0,c	;volatile
 14049                           
 14050                           ;ECAN.c: 830: if ( RXB0OVFL )
 14051  002912  AE74               	btfss	3956,7,c	;volatile
 14052  002914  D006               	goto	l6597
 14053                           
 14054                           ; BSR set to: 0
 14055                           ;ECAN.c: 831: {
 14056                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 14057  002916  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14058  002918  6ED9               	movwf	fsr2l,c
 14059  00291A  6ADA               	clrf	fsr2h,c
 14060  00291C  0E00               	movlw	0
 14061  00291E  86DB               	bsf	plusw2,3,c
 14062                           
 14063                           ; BSR set to: 0
 14064                           ;ECAN.c: 833: RXB0OVFL = 0;
 14065  002920  9E74               	bcf	3956,7,c	;volatile
 14066  002922                     l6597:
 14067                           
 14068                           ; BSR set to: 0
 14069                           ;ECAN.c: 834: }
 14070                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 14071  002922  A060               	btfss	3936,0,c	;volatile
 14072  002924  D002               	bra	u6885
 14073  002926  8054               	bsf	__ECANRxFilterHitInfo,0,c
 14074  002928  D001               	bra	u6887
 14075  00292A                     u6885:
 14076  00292A  9054               	bcf	__ECANRxFilterHitInfo,0,c
 14077  00292C                     u6887:
 14078                           
 14079                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 14080  00292C  0E0F               	movlw	15	;volatile
 14081  00292E  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14082  002930  0E60               	movlw	96	;volatile
 14083  002932  D01A               	goto	L29
 14084  002934                     l858:
 14085                           
 14086                           ; BSR set to: 0
 14087                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 14088  002934  010F               	movlb	15	; () banked
 14089  002936  AF50               	btfss	80,7,b	;volatile
 14090  002938  D019               	goto	l6615
 14091                           
 14092                           ; BSR set to: 15
 14093                           ;ECAN.c: 842: {
 14094                           ;ECAN.c: 844: RXB1IF = 0;
 14095  00293A  92A4               	bcf	4004,1,c	;volatile
 14096                           
 14097                           ;ECAN.c: 847: if ( RXB1OVFL )
 14098  00293C  AC74               	btfss	3956,6,c	;volatile
 14099  00293E  D006               	goto	l6607
 14100                           
 14101                           ; BSR set to: 15
 14102                           ;ECAN.c: 848: {
 14103                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 14104  002940  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14105  002942  6ED9               	movwf	fsr2l,c
 14106  002944  6ADA               	clrf	fsr2h,c
 14107  002946  0E00               	movlw	0
 14108  002948  86DB               	bsf	plusw2,3,c
 14109                           
 14110                           ; BSR set to: 15
 14111                           ;ECAN.c: 850: RXB1OVFL = 0;
 14112  00294A  9C74               	bcf	3956,6,c	;volatile
 14113  00294C                     l6607:
 14114                           
 14115                           ; BSR set to: 15
 14116                           ;ECAN.c: 851: }
 14117                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 14118  00294C  5150               	movf	80,w,b	;volatile
 14119  00294E  0B07               	andlw	7
 14120  002950  6E54               	movwf	__ECANRxFilterHitInfo,c
 14121                           
 14122                           ; BSR set to: 15
 14123                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 14124  002952  0E02               	movlw	2
 14125  002954  6054               	cpfslt	__ECANRxFilterHitInfo,c
 14126  002956  D005               	goto	l6613
 14127                           
 14128                           ; BSR set to: 15
 14129                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 14130  002958  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14131  00295A  6ED9               	movwf	fsr2l,c
 14132  00295C  6ADA               	clrf	fsr2h,c
 14133  00295E  0E00               	movlw	0
 14134  002960  8EDB               	bsf	plusw2,7,c
 14135  002962                     l6613:
 14136                           
 14137                           ; BSR set to: 15
 14138                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 14139  002962  0E0F               	movlw	15	;volatile
 14140  002964  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14141  002966  0E50               	movlw	80	;volatile
 14142  002968                     L29:
 14143  002968  6E18               	movwf	ECANReceiveMessage@ptr,c
 14144                           
 14145                           ;ECAN.c: 860: }
 14146  00296A  D065               	goto	l6675
 14147  00296C                     l6615:
 14148                           
 14149                           ;ECAN.c: 861: else
 14150                           ;ECAN.c: 862: return FALSE;
 14151  00296C  0E00               	movlw	0
 14152  00296E  D0CC               	goto	l865
 14153  002970                     l6621:
 14154                           
 14155                           ; BSR set to: 0
 14156                           ;ECAN.c: 869: else if ( mode == 0x40 )
 14157  002970  5016               	movf	ECANReceiveMessage@mode,w,c
 14158  002972  0A40               	xorlw	64
 14159  002974  E146               	bnz	l868
 14160                           
 14161                           ; BSR set to: 0
 14162                           ;ECAN.c: 875: {
 14163                           ;ECAN.c: 876: if ( RXB0FUL )
 14164  002976  AE60               	btfss	3936,7,c	;volatile
 14165  002978  D004               	goto	l869
 14166                           
 14167                           ; BSR set to: 0
 14168                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 14169  00297A  0E0F               	movlw	15	;volatile
 14170  00297C  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14171  00297E  0E60               	movlw	96	;volatile
 14172  002980  D03E               	goto	L36
 14173  002982                     l869:
 14174                           
 14175                           ; BSR set to: 0
 14176                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 14177  002982  010F               	movlb	15	; () banked
 14178  002984  AF50               	btfss	80,7,b	;volatile
 14179  002986  D004               	goto	l871
 14180                           
 14181                           ; BSR set to: 15
 14182                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 14183  002988  0E0F               	movlw	15	;volatile
 14184  00298A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14185  00298C  0E50               	movlw	80	;volatile
 14186  00298E  D037               	goto	L36
 14187  002990                     l871:
 14188                           
 14189                           ; BSR set to: 15
 14190                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 14191  002990  010D               	movlb	13
 14192  002992  B5F8               	btfsc	248,2,b	;volatile
 14193  002994  D007               	goto	l873
 14194  002996  010E               	movlb	14
 14195  002998  AF20               	btfss	32,7,b	;volatile
 14196  00299A  D004               	goto	l873
 14197                           
 14198                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 14199  00299C  0E0E               	movlw	14	;volatile
 14200  00299E  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14201  0029A0  0E20               	movlw	32	;volatile
 14202  0029A2  D02D               	goto	L36
 14203  0029A4                     l873:
 14204                           
 14205                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 14206  0029A4  010D               	movlb	13
 14207  0029A6  B7F8               	btfsc	248,3,b	;volatile
 14208  0029A8  D007               	goto	l875
 14209  0029AA  010E               	movlb	14
 14210  0029AC  AF30               	btfss	48,7,b	;volatile
 14211  0029AE  D004               	goto	l875
 14212                           
 14213                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 14214  0029B0  0E0E               	movlw	14	;volatile
 14215  0029B2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14216  0029B4  0E30               	movlw	48	;volatile
 14217  0029B6  D023               	goto	L36
 14218  0029B8                     l875:
 14219                           
 14220                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 14221  0029B8  010D               	movlb	13
 14222  0029BA  B9F8               	btfsc	248,4,b	;volatile
 14223  0029BC  D007               	goto	l877
 14224  0029BE  010E               	movlb	14
 14225  0029C0  AF40               	btfss	64,7,b	;volatile
 14226  0029C2  D004               	goto	l877
 14227                           
 14228                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 14229  0029C4  0E0E               	movlw	14	;volatile
 14230  0029C6  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14231  0029C8  0E40               	movlw	64	;volatile
 14232  0029CA  D019               	goto	L36
 14233  0029CC                     l877:
 14234                           
 14235                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 14236  0029CC  010D               	movlb	13
 14237  0029CE  BBF8               	btfsc	248,5,b	;volatile
 14238  0029D0  D005               	goto	l879
 14239  0029D2  010E               	movlb	14
 14240  0029D4  AF50               	btfss	80,7,b	;volatile
 14241  0029D6  D002               	goto	l879
 14242                           
 14243                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 14244  0029D8  0E0E               	movlw	14	;volatile
 14245  0029DA  D7D7               	goto	L37
 14246  0029DC                     l879:
 14247                           
 14248                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 14249  0029DC  010D               	movlb	13
 14250  0029DE  BDF8               	btfsc	248,6,b	;volatile
 14251  0029E0  D005               	goto	l881
 14252  0029E2  010E               	movlb	14
 14253  0029E4  AF60               	btfss	96,7,b	;volatile
 14254  0029E6  D002               	goto	l881
 14255                           
 14256                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 14257  0029E8  0E0E               	movlw	14	;volatile
 14258  0029EA  D7C8               	goto	L38
 14259  0029EC                     l881:
 14260                           
 14261                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 14262  0029EC  010D               	movlb	13
 14263  0029EE  BFF8               	btfsc	248,7,b	;volatile
 14264  0029F0  D7BD               	goto	l6615
 14265  0029F2  010E               	movlb	14
 14266  0029F4  AF70               	btfss	112,7,b	;volatile
 14267  0029F6  D7BA               	goto	l6615
 14268                           
 14269                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 14270  0029F8  0E0E               	movlw	14	;volatile
 14271  0029FA  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14272  0029FC  0E70               	movlw	112	;volatile
 14273  0029FE                     L36:
 14274  0029FE  6E18               	movwf	ECANReceiveMessage@ptr,c
 14275  002A00  D00A               	goto	l6665
 14276  002A02                     l868:
 14277                           
 14278                           ; BSR set to: 0
 14279                           ;ECAN.c: 910: else
 14280                           ;ECAN.c: 915: {
 14281                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 14282  002A02  AE74               	btfss	3956,7,c	;volatile
 14283  002A04  D7B3               	goto	l6615
 14284                           
 14285                           ; BSR set to: 0
 14286                           ;ECAN.c: 917: {
 14287                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 14288  002A06  506F               	movf	3951,w,c	;volatile
 14289  002A08  0B07               	andlw	7
 14290  002A0A  ECD6  F01D         	call	__ECANPointBuffer
 14291  002A0E  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 14292  002A12  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 14293  002A16                     l6665:
 14294                           
 14295                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 14296  002A16  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14297  002A1A  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14298  002A1E  50DF               	movf	indf2,w,c
 14299  002A20  0B1F               	andlw	31
 14300  002A22  6E54               	movwf	__ECANRxFilterHitInfo,c
 14301                           
 14302                           ;ECAN.c: 932: RXB1IF = 0;
 14303  002A24  92A4               	bcf	4004,1,c	;volatile
 14304                           
 14305                           ;ECAN.c: 934: if ( RXB1OVFL )
 14306  002A26  AC74               	btfss	3956,6,c	;volatile
 14307  002A28  D006               	goto	l6675
 14308                           
 14309                           ;ECAN.c: 935: {
 14310                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 14311  002A2A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14312  002A2C  6ED9               	movwf	fsr2l,c
 14313  002A2E  6ADA               	clrf	fsr2h,c
 14314  002A30  0E00               	movlw	0
 14315  002A32  86DB               	bsf	plusw2,3,c
 14316                           
 14317                           ;ECAN.c: 937: RXB1OVFL = 0;
 14318  002A34  9C74               	bcf	3956,6,c	;volatile
 14319  002A36                     l6675:
 14320                           
 14321                           ;ECAN.c: 942: savedPtr = ptr;
 14322  002A36  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 14323  002A3A  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 14324                           
 14325                           ;ECAN.c: 943: *msgFlags = 0;
 14326  002A3E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14327  002A40  6ED9               	movwf	fsr2l,c
 14328  002A42  6ADA               	clrf	fsr2h,c
 14329  002A44  6ADF               	clrf	indf2,c
 14330                           
 14331                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 14332  002A46  EE20 F005          	lfsr	2,5
 14333  002A4A  5018               	movf	ECANReceiveMessage@ptr,w,c
 14334  002A4C  26D9               	addwf	fsr2l,f,c
 14335  002A4E  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14336  002A50  22DA               	addwfc	fsr2h,f,c
 14337  002A52  50DF               	movf	indf2,w,c
 14338  002A54  6E17               	movwf	ECANReceiveMessage@temp,c
 14339                           
 14340                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 14341  002A56  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14342  002A58  6ED9               	movwf	fsr2l,c
 14343  002A5A  6ADA               	clrf	fsr2h,c
 14344  002A5C  5017               	movf	ECANReceiveMessage@temp,w,c
 14345  002A5E  0B0F               	andlw	15
 14346  002A60  6EDF               	movwf	indf2,c
 14347                           
 14348                           ;ECAN.c: 950: if ( temp.bits.b6 )
 14349  002A62  AC17               	btfss	ECANReceiveMessage@temp,6,c
 14350  002A64  D005               	goto	l889
 14351                           
 14352                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 14353  002A66  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14354  002A68  6ED9               	movwf	fsr2l,c
 14355  002A6A  6ADA               	clrf	fsr2h,c
 14356  002A6C  0E00               	movlw	0
 14357  002A6E  8CDB               	bsf	plusw2,6,c
 14358  002A70                     l889:
 14359                           
 14360                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 14361  002A70  EE20 F002          	lfsr	2,2
 14362  002A74  5018               	movf	ECANReceiveMessage@ptr,w,c
 14363  002A76  26D9               	addwf	fsr2l,f,c
 14364  002A78  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14365  002A7A  22DA               	addwfc	fsr2h,f,c
 14366  002A7C  50DF               	movf	indf2,w,c
 14367  002A7E  6E17               	movwf	ECANReceiveMessage@temp,c
 14368                           
 14369                           ;ECAN.c: 955: if ( temp.bits.b3 )
 14370  002A80  A617               	btfss	ECANReceiveMessage@temp,3,c
 14371  002A82  D008               	goto	l890
 14372                           
 14373                           ;ECAN.c: 956: {
 14374                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 14375  002A84  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14376  002A86  6ED9               	movwf	fsr2l,c
 14377  002A88  6ADA               	clrf	fsr2h,c
 14378  002A8A  0E00               	movlw	0
 14379  002A8C  8ADB               	bsf	plusw2,5,c
 14380                           
 14381                           ;ECAN.c: 958: temp.Val = 1;
 14382  002A8E  0E01               	movlw	1
 14383  002A90  6E17               	movwf	ECANReceiveMessage@temp,c
 14384                           
 14385                           ;ECAN.c: 959: }
 14386  002A92  D001               	goto	l6693
 14387  002A94                     l890:
 14388                           
 14389                           ;ECAN.c: 960: else
 14390                           ;ECAN.c: 961: temp.Val = 0;
 14391  002A94  6A17               	clrf	ECANReceiveMessage@temp,c
 14392  002A96                     l6693:
 14393                           
 14394                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 14395  002A96  2818               	incf	ECANReceiveMessage@ptr,w,c
 14396  002A98  6E08               	movwf	?__RegsToCANID,c
 14397  002A9A  0E00               	movlw	0
 14398  002A9C  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 14399  002A9E  6E09               	movwf	?__RegsToCANID+1,c
 14400  002AA0  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 14401  002AA4  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 14402  002AA8  EC06  F018         	call	__RegsToCANID	;wreg free
 14403                           
 14404                           ;ECAN.c: 966: ptr += 6;
 14405  002AAC  0E06               	movlw	6
 14406  002AAE  2618               	addwf	ECANReceiveMessage@ptr,f,c
 14407  002AB0  0E00               	movlw	0
 14408  002AB2  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 14409                           
 14410                           ;ECAN.c: 967: temp.Val = *dataLen;
 14411  002AB4  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14412  002AB6  6ED9               	movwf	fsr2l,c
 14413  002AB8  6ADA               	clrf	fsr2h,c
 14414  002ABA  50DF               	movf	indf2,w,c
 14415  002ABC  6E17               	movwf	ECANReceiveMessage@temp,c
 14416                           
 14417                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 14418  002ABE  6A15               	clrf	ECANReceiveMessage@i,c
 14419  002AC0  D00D               	goto	l6709
 14420  002AC2                     l6701:
 14421                           
 14422                           ;ECAN.c: 969: *data++ = *ptr++;
 14423  002AC2  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14424  002AC6  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14425  002ACA  500F               	movf	ECANReceiveMessage@data,w,c
 14426  002ACC  6EE1               	movwf	fsr1l,c
 14427  002ACE  6AE2               	clrf	fsr1h,c
 14428  002AD0  CFDF FFE7          	movff	indf2,indf1
 14429  002AD4  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 14430  002AD6  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 14431  002AD8  2A0F               	incf	ECANReceiveMessage@data,f,c
 14432  002ADA  2A15               	incf	ECANReceiveMessage@i,f,c
 14433  002ADC                     l6709:
 14434  002ADC  5017               	movf	ECANReceiveMessage@temp,w,c
 14435  002ADE  5C15               	subwf	ECANReceiveMessage@i,w,c
 14436  002AE0  E3F0               	bnc	l6701
 14437                           
 14438                           ;ECAN.c: 972: if ( IRXIF )
 14439  002AE2  AEA4               	btfss	4004,7,c	;volatile
 14440  002AE4  D006               	goto	l6715
 14441                           
 14442                           ;ECAN.c: 973: {
 14443                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 14444  002AE6  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14445  002AE8  6ED9               	movwf	fsr2l,c
 14446  002AEA  6ADA               	clrf	fsr2h,c
 14447  002AEC  0E00               	movlw	0
 14448  002AEE  88DB               	bsf	plusw2,4,c
 14449                           
 14450                           ;ECAN.c: 975: IRXIF = 0;
 14451  002AF0  9EA4               	bcf	4004,7,c	;volatile
 14452  002AF2                     l6715:
 14453                           
 14454                           ;ECAN.c: 976: }
 14455                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 14456  002AF2  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 14457  002AF6  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 14458  002AFA  0E7F               	movlw	127
 14459  002AFC  16DF               	andwf	indf2,f,c
 14460                           
 14461                           ;ECAN.c: 983: if ( mode == 0x80 )
 14462  002AFE  5016               	movf	ECANReceiveMessage@mode,w,c
 14463  002B00  0A80               	xorlw	128
 14464  002B02  B4D8               	btfsc	status,2,c
 14465                           
 14466                           ;ECAN.c: 984: FIFOEMPTY = 0;
 14467  002B04  9E74               	bcf	3956,7,c	;volatile
 14468                           
 14469                           ;ECAN.c: 990: return TRUE;
 14470  002B06  0E01               	movlw	1
 14471  002B08                     l865:
 14472  002B08  0012               	return	
 14473  002B0A                     __end_of_ECANReceiveMessage:
 14474                           	opt stack 0
 14475                           tblptru	equ	0xFF8
 14476                           tblptrh	equ	0xFF7
 14477                           tblptrl	equ	0xFF6
 14478                           tablat	equ	0xFF5
 14479                           prodh	equ	0xFF4
 14480                           prodl	equ	0xFF3
 14481                           postinc0	equ	0xFEE
 14482                           wreg	equ	0xFE8
 14483                           indf1	equ	0xFE7
 14484                           fsr1h	equ	0xFE2
 14485                           fsr1l	equ	0xFE1
 14486                           indf2	equ	0xFDF
 14487                           postinc2	equ	0xFDE
 14488                           postdec2	equ	0xFDD
 14489                           plusw2	equ	0xFDB
 14490                           fsr2h	equ	0xFDA
 14491                           fsr2l	equ	0xFD9
 14492                           status	equ	0xFD8
 14493                           
 14494 ;; *************** function __RegsToCANID *****************
 14495 ;; Defined at:
 14496 ;;		line 1156 in file "../ECAN.c"
 14497 ;; Parameters:    Size  Location     Type
 14498 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 14499 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14500 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14501 ;;  val             1    9[COMRAM] PTR unsigned long 
 14502 ;;		 -> getVSCPFrame@id(4), 
 14503 ;;  type            1   10[COMRAM] unsigned char 
 14504 ;; Auto vars:     Size  Location     Type
 14505 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 14506 ;;		 -> getVSCPFrame@id(4), 
 14507 ;; Return value:  Size  Location     Type
 14508 ;;		None               void
 14509 ;; Registers used:
 14510 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14511 ;; Tracked objects:
 14512 ;;		On entry : 0/0
 14513 ;;		On exit  : 0/0
 14514 ;;		Unchanged: 0/0
 14515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14516 ;;      Params:         4       0       0       0       0       0       0
 14517 ;;      Locals:         1       0       0       0       0       0       0
 14518 ;;      Temps:          2       0       0       0       0       0       0
 14519 ;;      Totals:         7       0       0       0       0       0       0
 14520 ;;Total ram usage:        7 bytes
 14521 ;; Hardware stack levels used:    1
 14522 ;; Hardware stack levels required when called:    2
 14523 ;; This function calls:
 14524 ;;		Nothing
 14525 ;; This function is called by:
 14526 ;;		_ECANReceiveMessage
 14527 ;; This function uses a non-reentrant model
 14528 ;;
 14529                           
 14530                           	psect	text60
 14531  00300C                     __ptext60:
 14532                           	opt stack 0
 14533  00300C                     __RegsToCANID:
 14534                           	opt stack 24
 14535                           
 14536                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 14537                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 14538                           
 14539                           ;incstack = 0
 14540                           ;incstack = 0
 14541  00300C  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 14542                           
 14543                           ;ECAN.c: 1161: if ( type == 0 )
 14544  003010  660B               	tstfsz	__RegsToCANID@type,c
 14545  003012  D046               	goto	l6789
 14546                           
 14547                           ;ECAN.c: 1162: {
 14548                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 14549  003014  500E               	movf	__RegsToCANID@Value,w,c
 14550  003016  6ED9               	movwf	fsr2l,c
 14551  003018  6ADA               	clrf	fsr2h,c
 14552  00301A  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14553  00301E  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14554  003022  50E7               	movf	indf1,w,c
 14555  003024  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14556  003026  90D8               	bcf	status,0,c
 14557  003028  360C               	rlcf	??__RegsToCANID,f,c
 14558  00302A  90D8               	bcf	status,0,c
 14559  00302C  360C               	rlcf	??__RegsToCANID,f,c
 14560  00302E  90D8               	bcf	status,0,c
 14561  003030  340C               	rlcf	??__RegsToCANID,w,c
 14562  003032  6EDF               	movwf	indf2,c
 14563                           
 14564                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 14565  003034  500E               	movf	__RegsToCANID@Value,w,c
 14566  003036  6ED9               	movwf	fsr2l,c
 14567  003038  6ADA               	clrf	fsr2h,c
 14568  00303A  2AD9               	incf	fsr2l,f,c
 14569  00303C  6ADA               	clrf	fsr2h,c
 14570  00303E  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14571  003042  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14572  003046  50E7               	movf	indf1,w,c
 14573  003048  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14574  00304A  0E05               	movlw	5
 14575  00304C  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14576  00304E                     u7205:
 14577  00304E  90D8               	bcf	status,0,c
 14578  003050  320C               	rrcf	??__RegsToCANID,f,c
 14579  003052  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14580  003054  D7FC               	goto	u7205
 14581  003056  500C               	movf	??__RegsToCANID,w,c
 14582  003058  6EDF               	movwf	indf2,c
 14583                           
 14584                           ;ECAN.c: 1166: ptr++;
 14585  00305A  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14586  00305C  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14587                           
 14588                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 14589  00305E  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14590  003062  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14591  003066  50DF               	movf	indf2,w,c
 14592  003068  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14593  00306A  0E05               	movlw	5
 14594  00306C  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14595  00306E                     u7215:
 14596  00306E  90D8               	bcf	status,0,c
 14597  003070  320C               	rrcf	??__RegsToCANID,f,c
 14598  003072  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14599  003074  D7FC               	goto	u7215
 14600  003076  500E               	movf	__RegsToCANID@Value,w,c
 14601  003078  6ED9               	movwf	fsr2l,c
 14602  00307A  6ADA               	clrf	fsr2h,c
 14603  00307C  500C               	movf	??__RegsToCANID,w,c
 14604  00307E  12DF               	iorwf	indf2,f,c
 14605                           
 14606                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 14607  003080  500E               	movf	__RegsToCANID@Value,w,c
 14608  003082  6ED9               	movwf	fsr2l,c
 14609  003084  6ADA               	clrf	fsr2h,c
 14610  003086  0E02               	movlw	2
 14611  003088  26D9               	addwf	fsr2l,f,c
 14612  00308A  6ADA               	clrf	fsr2h,c
 14613  00308C  6ADF               	clrf	indf2,c
 14614                           
 14615                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 14616  00308E  500E               	movf	__RegsToCANID@Value,w,c
 14617  003090  6ED9               	movwf	fsr2l,c
 14618  003092  6ADA               	clrf	fsr2h,c
 14619  003094  0E03               	movlw	3
 14620  003096  26D9               	addwf	fsr2l,f,c
 14621  003098  6ADA               	clrf	fsr2h,c
 14622  00309A  0E00               	movlw	0
 14623  00309C  6EDF               	movwf	indf2,c
 14624                           
 14625                           ;ECAN.c: 1170: }
 14626  00309E  D067               	goto	l912
 14627  0030A0                     l6789:
 14628                           
 14629                           ;ECAN.c: 1171: else
 14630                           ;ECAN.c: 1172: {
 14631                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 14632  0030A0  500E               	movf	__RegsToCANID@Value,w,c
 14633  0030A2  6ED9               	movwf	fsr2l,c
 14634  0030A4  6ADA               	clrf	fsr2h,c
 14635  0030A6  0E02               	movlw	2
 14636  0030A8  26D9               	addwf	fsr2l,f,c
 14637  0030AA  6ADA               	clrf	fsr2h,c
 14638  0030AC  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14639  0030B0  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14640  0030B4  50E7               	movf	indf1,w,c
 14641  0030B6  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14642  0030B8  0E05               	movlw	5
 14643  0030BA  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14644  0030BC                     u7225:
 14645  0030BC  90D8               	bcf	status,0,c
 14646  0030BE  360C               	rlcf	??__RegsToCANID,f,c
 14647  0030C0  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14648  0030C2  D7FC               	goto	u7225
 14649  0030C4  500C               	movf	??__RegsToCANID,w,c
 14650  0030C6  6EDF               	movwf	indf2,c
 14651                           
 14652                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 14653  0030C8  500E               	movf	__RegsToCANID@Value,w,c
 14654  0030CA  6ED9               	movwf	fsr2l,c
 14655  0030CC  6ADA               	clrf	fsr2h,c
 14656  0030CE  0E03               	movlw	3
 14657  0030D0  26D9               	addwf	fsr2l,f,c
 14658  0030D2  6ADA               	clrf	fsr2h,c
 14659  0030D4  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14660  0030D8  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14661  0030DC  50E7               	movf	indf1,w,c
 14662  0030DE  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14663  0030E0  90D8               	bcf	status,0,c
 14664  0030E2  320C               	rrcf	??__RegsToCANID,f,c
 14665  0030E4  90D8               	bcf	status,0,c
 14666  0030E6  320C               	rrcf	??__RegsToCANID,f,c
 14667  0030E8  90D8               	bcf	status,0,c
 14668  0030EA  300C               	rrcf	??__RegsToCANID,w,c
 14669  0030EC  6EDF               	movwf	indf2,c
 14670                           
 14671                           ;ECAN.c: 1176: ptr++;
 14672  0030EE  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14673  0030F0  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14674                           
 14675                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 14676  0030F2  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14677  0030F6  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14678  0030FA  50DF               	movf	indf2,w,c
 14679  0030FC  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14680  0030FE  0E03               	movlw	3
 14681  003100  160C               	andwf	??__RegsToCANID,f,c
 14682  003102  500E               	movf	__RegsToCANID@Value,w,c
 14683  003104  6ED9               	movwf	fsr2l,c
 14684  003106  6ADA               	clrf	fsr2h,c
 14685  003108  0E02               	movlw	2
 14686  00310A  26D9               	addwf	fsr2l,f,c
 14687  00310C  6ADA               	clrf	fsr2h,c
 14688  00310E  500C               	movf	??__RegsToCANID,w,c
 14689  003110  12DF               	iorwf	indf2,f,c
 14690                           
 14691                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 14692  003112  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14693  003116  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14694  00311A  50DF               	movf	indf2,w,c
 14695  00311C  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14696  00311E  90D8               	bcf	status,0,c
 14697  003120  320C               	rrcf	??__RegsToCANID,f,c
 14698  003122  90D8               	bcf	status,0,c
 14699  003124  320C               	rrcf	??__RegsToCANID,f,c
 14700  003126  90D8               	bcf	status,0,c
 14701  003128  320C               	rrcf	??__RegsToCANID,f,c
 14702  00312A  0E1C               	movlw	28
 14703  00312C  160C               	andwf	??__RegsToCANID,f,c
 14704  00312E  500E               	movf	__RegsToCANID@Value,w,c
 14705  003130  6ED9               	movwf	fsr2l,c
 14706  003132  6ADA               	clrf	fsr2h,c
 14707  003134  0E02               	movlw	2
 14708  003136  26D9               	addwf	fsr2l,f,c
 14709  003138  6ADA               	clrf	fsr2h,c
 14710  00313A  500C               	movf	??__RegsToCANID,w,c
 14711  00313C  12DF               	iorwf	indf2,f,c
 14712                           
 14713                           ;ECAN.c: 1180: ptr++;
 14714  00313E  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14715  003140  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14716                           
 14717                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 14718  003142  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14719  003146  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14720  00314A  500E               	movf	__RegsToCANID@Value,w,c
 14721  00314C  6EE1               	movwf	fsr1l,c
 14722  00314E  6AE2               	clrf	fsr1h,c
 14723  003150  2AE1               	incf	fsr1l,f,c
 14724  003152  6AE2               	clrf	fsr1h,c
 14725  003154  CFDF FFE7          	movff	indf2,indf1
 14726                           
 14727                           ;ECAN.c: 1182: ptr++;
 14728  003158  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14729  00315A  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14730                           
 14731                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 14732  00315C  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14733  003160  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14734  003164  500E               	movf	__RegsToCANID@Value,w,c
 14735  003166  6EE1               	movwf	fsr1l,c
 14736  003168  6AE2               	clrf	fsr1h,c
 14737  00316A  CFDF FFE7          	movff	indf2,indf1
 14738  00316E                     l912:
 14739  00316E  0012               	return	
 14740  003170                     __end_of__RegsToCANID:
 14741                           	opt stack 0
 14742                           tblptru	equ	0xFF8
 14743                           tblptrh	equ	0xFF7
 14744                           tblptrl	equ	0xFF6
 14745                           tablat	equ	0xFF5
 14746                           prodh	equ	0xFF4
 14747                           prodl	equ	0xFF3
 14748                           postinc0	equ	0xFEE
 14749                           wreg	equ	0xFE8
 14750                           indf1	equ	0xFE7
 14751                           fsr1h	equ	0xFE2
 14752                           fsr1l	equ	0xFE1
 14753                           indf2	equ	0xFDF
 14754                           postinc2	equ	0xFDE
 14755                           postdec2	equ	0xFDD
 14756                           plusw2	equ	0xFDB
 14757                           fsr2h	equ	0xFDA
 14758                           fsr2l	equ	0xFD9
 14759                           status	equ	0xFD8
 14760                           
 14761 ;; *************** function __ECANPointBuffer *****************
 14762 ;; Defined at:
 14763 ;;		line 1207 in file "../ECAN.c"
 14764 ;; Parameters:    Size  Location     Type
 14765 ;;  b               1    wreg     unsigned char 
 14766 ;; Auto vars:     Size  Location     Type
 14767 ;;  b               1   10[COMRAM] unsigned char 
 14768 ;;  pt              2   11[COMRAM] PTR unsigned char 
 14769 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14770 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14771 ;; Return value:  Size  Location     Type
 14772 ;;                  2    7[COMRAM] PTR unsigned char 
 14773 ;; Registers used:
 14774 ;;		wreg, status,2, status,0
 14775 ;; Tracked objects:
 14776 ;;		On entry : F/0
 14777 ;;		On exit  : 0/0
 14778 ;;		Unchanged: 0/0
 14779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14780 ;;      Params:         3       0       0       0       0       0       0
 14781 ;;      Locals:         3       0       0       0       0       0       0
 14782 ;;      Temps:          0       0       0       0       0       0       0
 14783 ;;      Totals:         6       0       0       0       0       0       0
 14784 ;;Total ram usage:        6 bytes
 14785 ;; Hardware stack levels used:    1
 14786 ;; Hardware stack levels required when called:    2
 14787 ;; This function calls:
 14788 ;;		Nothing
 14789 ;; This function is called by:
 14790 ;;		_ECANReceiveMessage
 14791 ;; This function uses a non-reentrant model
 14792 ;;
 14793                           
 14794                           	psect	text61
 14795  003BAC                     __ptext61:
 14796                           	opt stack 0
 14797  003BAC                     __ECANPointBuffer:
 14798                           	opt stack 24
 14799                           
 14800                           ;incstack = 0
 14801                           ;incstack = 0
 14802                           ;__ECANPointBuffer@b stored from wreg
 14803  003BAC  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 14804                           
 14805                           ; BSR set to: 0
 14806                           ;ECAN.c: 1208: BYTE* pt;
 14807                           ;ECAN.c: 1210: switch(b)
 14808  003BB0  D024               	goto	l6775
 14809  003BB2                     l6757:
 14810                           
 14811                           ; BSR set to: 0
 14812                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 14813  003BB2  0E0F               	movlw	15	;volatile
 14814  003BB4  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14815  003BB6  0E60               	movlw	96	;volatile
 14816  003BB8  D01E               	goto	L45
 14817  003BBA                     l6759:
 14818                           
 14819                           ; BSR set to: 0
 14820                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 14821  003BBA  010F               	movlb	15	; () banked
 14822  003BBC  0E0F               	movlw	15	;volatile
 14823  003BBE  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14824  003BC0  0E50               	movlw	80	;volatile
 14825  003BC2  D019               	goto	L45
 14826  003BC4                     l6761:
 14827                           
 14828                           ; BSR set to: 0
 14829                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 14830  003BC4  010E               	movlb	14	; () banked
 14831  003BC6  0E0E               	movlw	14	;volatile
 14832  003BC8  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14833  003BCA  0E20               	movlw	32	;volatile
 14834  003BCC  D014               	goto	L45
 14835  003BCE                     l6763:
 14836                           
 14837                           ; BSR set to: 0
 14838                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 14839  003BCE  010E               	movlb	14	; () banked
 14840  003BD0  0E0E               	movlw	14	;volatile
 14841  003BD2  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14842  003BD4  0E30               	movlw	48	;volatile
 14843  003BD6  D00F               	goto	L45
 14844  003BD8                     l6765:
 14845                           
 14846                           ; BSR set to: 0
 14847                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 14848  003BD8  010E               	movlb	14	; () banked
 14849  003BDA  0E0E               	movlw	14	;volatile
 14850  003BDC  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14851  003BDE  0E40               	movlw	64	;volatile
 14852  003BE0  D00A               	goto	L45
 14853  003BE2                     l6767:
 14854                           
 14855                           ; BSR set to: 0
 14856                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 14857  003BE2  010E               	movlb	14	; () banked
 14858  003BE4  0E0E               	movlw	14	;volatile
 14859  003BE6  D7EB               	goto	L46
 14860  003BE8                     l6769:
 14861                           
 14862                           ; BSR set to: 0
 14863                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 14864  003BE8  010E               	movlb	14	; () banked
 14865  003BEA  0E0E               	movlw	14	;volatile
 14866  003BEC  D7E3               	goto	L47
 14867  003BEE                     l6771:
 14868                           
 14869                           ; BSR set to: 0
 14870                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 14871  003BEE  010E               	movlb	14	; () banked
 14872  003BF0  0E0E               	movlw	14	;volatile
 14873  003BF2  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14874  003BF4  0E70               	movlw	112	;volatile
 14875  003BF6                     L45:
 14876  003BF6  6E0C               	movwf	__ECANPointBuffer@pt,c
 14877                           
 14878                           ;ECAN.c: 1235: break;
 14879  003BF8  D00F               	goto	l917
 14880  003BFA                     l6775:
 14881                           
 14882                           ; BSR set to: 0
 14883  003BFA  500B               	movf	__ECANPointBuffer@b,w,c
 14884                           
 14885                           ; Switch size 1, requested type "speed"
 14886                           ; Number of cases is 7, Range of values is 0 to 6
 14887                           ; switch strategies available:
 14888                           ; Name         Instructions Cycles
 14889                           ; simple_byte           22    12 (average)
 14890                           ;	Chosen strategy is simple_byte
 14891  003BFC  E0DA               	bz	l6757
 14892  003BFE  0A01               	xorlw	1	; case 1
 14893  003C00  E0DC               	bz	l6759
 14894  003C02  0A03               	xorlw	3	; case 2
 14895  003C04  E0DF               	bz	l6761
 14896  003C06  0A01               	xorlw	1	; case 3
 14897  003C08  E0E2               	bz	l6763
 14898  003C0A  0A07               	xorlw	7	; case 4
 14899  003C0C  E0E5               	bz	l6765
 14900  003C0E  0A01               	xorlw	1	; case 5
 14901  003C10  E0E8               	bz	l6767
 14902  003C12  0A03               	xorlw	3	; case 6
 14903  003C14  E0E9               	bz	l6769
 14904  003C16  D7EB               	goto	l6771
 14905  003C18                     l917:
 14906                           
 14907                           ;ECAN.c: 1237: return (pt);
 14908  003C18  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 14909  003C1C  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 14910  003C20  0012               	return	
 14911  003C22                     __end_of__ECANPointBuffer:
 14912                           	opt stack 0
 14913                           tblptru	equ	0xFF8
 14914                           tblptrh	equ	0xFF7
 14915                           tblptrl	equ	0xFF6
 14916                           tablat	equ	0xFF5
 14917                           prodh	equ	0xFF4
 14918                           prodl	equ	0xFF3
 14919                           postinc0	equ	0xFEE
 14920                           wreg	equ	0xFE8
 14921                           indf1	equ	0xFE7
 14922                           fsr1h	equ	0xFE2
 14923                           fsr1l	equ	0xFE1
 14924                           indf2	equ	0xFDF
 14925                           postinc2	equ	0xFDE
 14926                           postdec2	equ	0xFDD
 14927                           plusw2	equ	0xFDB
 14928                           fsr2h	equ	0xFDA
 14929                           fsr2l	equ	0xFD9
 14930                           status	equ	0xFD8
 14931                           
 14932 ;; *************** function _vscp_check_pstorage *****************
 14933 ;; Defined at:
 14934 ;;		line 166 in file "../../vscp_firmware/common/vscp_firmware.c"
 14935 ;; Parameters:    Size  Location     Type
 14936 ;;		None
 14937 ;; Auto vars:     Size  Location     Type
 14938 ;;		None
 14939 ;; Return value:  Size  Location     Type
 14940 ;;                  1    wreg      unsigned char 
 14941 ;; Registers used:
 14942 ;;		wreg, status,2, status,0, cstack
 14943 ;; Tracked objects:
 14944 ;;		On entry : 0/0
 14945 ;;		On exit  : 0/0
 14946 ;;		Unchanged: 0/0
 14947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14948 ;;      Params:         0       0       0       0       0       0       0
 14949 ;;      Locals:         0       0       0       0       0       0       0
 14950 ;;      Temps:          0       0       0       0       0       0       0
 14951 ;;      Totals:         0       0       0       0       0       0       0
 14952 ;;Total ram usage:        0 bytes
 14953 ;; Hardware stack levels used:    1
 14954 ;; Hardware stack levels required when called:    4
 14955 ;; This function calls:
 14956 ;;		_vscp_writeNicknamePermanent
 14957 ;;		_vscp_getSegmentCRC
 14958 ;;		_vscp_setSegmentCRC
 14959 ;;		_vscp_setControlByte
 14960 ;; This function is called by:
 14961 ;;		_main
 14962 ;; This function uses a non-reentrant model
 14963 ;;
 14964                           
 14965                           	psect	text62
 14966  003FB6                     __ptext62:
 14967                           	opt stack 0
 14968  003FB6                     _vscp_check_pstorage:
 14969                           	opt stack 26
 14970                           
 14971                           ;vscp_firmware.c: 169: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 14972                           
 14973                           ;incstack = 0
 14974                           ;incstack = 0
 14975  003FB6  EC09  F021         	call	_vscp_getSegmentCRC	;wreg free
 14976  003FBA  0BC0               	andlw	192
 14977  003FBC  0A40               	xorlw	64
 14978  003FBE  E102               	bnz	l7245
 14979                           
 14980                           ;vscp_firmware.c: 170: return !0;
 14981  003FC0  0E01               	movlw	1
 14982  003FC2  D00A               	goto	l1037
 14983  003FC4                     l7245:
 14984                           
 14985                           ;vscp_firmware.c: 171: }
 14986                           ;vscp_firmware.c: 174: vscp_writeNicknamePermanent(0xff);
 14987  003FC4  0EFF               	movlw	255
 14988  003FC6  ECCC  F020         	call	_vscp_writeNicknamePermanent
 14989                           
 14990                           ;vscp_firmware.c: 177: vscp_setSegmentCRC(0x00);
 14991  003FCA  0E00               	movlw	0
 14992  003FCC  ECC3  F020         	call	_vscp_setSegmentCRC
 14993                           
 14994                           ;vscp_firmware.c: 181: vscp_setControlByte(0xA0);
 14995  003FD0  0EA0               	movlw	160
 14996  003FD2  ECBA  F020         	call	_vscp_setControlByte
 14997                           
 14998                           ;vscp_firmware.c: 183: return 0;
 14999  003FD6  0E00               	movlw	0
 15000  003FD8                     l1037:
 15001  003FD8  0012               	return	
 15002  003FDA                     __end_of_vscp_check_pstorage:
 15003                           	opt stack 0
 15004                           tblptru	equ	0xFF8
 15005                           tblptrh	equ	0xFF7
 15006                           tblptrl	equ	0xFF6
 15007                           tablat	equ	0xFF5
 15008                           prodh	equ	0xFF4
 15009                           prodl	equ	0xFF3
 15010                           postinc0	equ	0xFEE
 15011                           wreg	equ	0xFE8
 15012                           indf1	equ	0xFE7
 15013                           fsr1h	equ	0xFE2
 15014                           fsr1l	equ	0xFE1
 15015                           indf2	equ	0xFDF
 15016                           postinc2	equ	0xFDE
 15017                           postdec2	equ	0xFDD
 15018                           plusw2	equ	0xFDB
 15019                           fsr2h	equ	0xFDA
 15020                           fsr2l	equ	0xFD9
 15021                           status	equ	0xFD8
 15022                           
 15023 ;; *************** function _vscp_setControlByte *****************
 15024 ;; Defined at:
 15025 ;;		line 2361 in file "../main.c"
 15026 ;; Parameters:    Size  Location     Type
 15027 ;;  ctrl            1    wreg     unsigned char 
 15028 ;; Auto vars:     Size  Location     Type
 15029 ;;  ctrl            1   10[COMRAM] unsigned char 
 15030 ;; Return value:  Size  Location     Type
 15031 ;;		None               void
 15032 ;; Registers used:
 15033 ;;		wreg, status,2, cstack
 15034 ;; Tracked objects:
 15035 ;;		On entry : 0/0
 15036 ;;		On exit  : 0/0
 15037 ;;		Unchanged: 0/0
 15038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15039 ;;      Params:         0       0       0       0       0       0       0
 15040 ;;      Locals:         1       0       0       0       0       0       0
 15041 ;;      Temps:          0       0       0       0       0       0       0
 15042 ;;      Totals:         1       0       0       0       0       0       0
 15043 ;;Total ram usage:        1 bytes
 15044 ;; Hardware stack levels used:    1
 15045 ;; Hardware stack levels required when called:    3
 15046 ;; This function calls:
 15047 ;;		_writeEEPROM
 15048 ;; This function is called by:
 15049 ;;		_vscp_check_pstorage
 15050 ;; This function uses a non-reentrant model
 15051 ;;
 15052                           
 15053                           	psect	text63
 15054  004174                     __ptext63:
 15055                           	opt stack 0
 15056  004174                     _vscp_setControlByte:
 15057                           	opt stack 26
 15058                           
 15059                           ;incstack = 0
 15060                           ;incstack = 0
 15061                           ;vscp_setControlByte@ctrl stored from wreg
 15062  004174  CFE8 F00B          	movff	wreg,vscp_setControlByte@ctrl
 15063                           
 15064                           ;main.c: 2362: writeEEPROM(0x03, ctrl);
 15065  004178  6A09               	clrf	?_writeEEPROM+1,c
 15066  00417A  0E03               	movlw	3
 15067  00417C  6E08               	movwf	?_writeEEPROM,c
 15068  00417E  C00B  F00A         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 15069  004182  EFB6  F01F         	goto	_writeEEPROM	;wreg free
 15070  004186                     __end_of_vscp_setControlByte:
 15071                           	opt stack 0
 15072                           tblptru	equ	0xFF8
 15073                           tblptrh	equ	0xFF7
 15074                           tblptrl	equ	0xFF6
 15075                           tablat	equ	0xFF5
 15076                           prodh	equ	0xFF4
 15077                           prodl	equ	0xFF3
 15078                           postinc0	equ	0xFEE
 15079                           wreg	equ	0xFE8
 15080                           indf1	equ	0xFE7
 15081                           fsr1h	equ	0xFE2
 15082                           fsr1l	equ	0xFE1
 15083                           indf2	equ	0xFDF
 15084                           postinc2	equ	0xFDE
 15085                           postdec2	equ	0xFDD
 15086                           plusw2	equ	0xFDB
 15087                           fsr2h	equ	0xFDA
 15088                           fsr2l	equ	0xFD9
 15089                           status	equ	0xFD8
 15090                           
 15091 ;; *************** function _vscp_setSegmentCRC *****************
 15092 ;; Defined at:
 15093 ;;		line 2352 in file "../main.c"
 15094 ;; Parameters:    Size  Location     Type
 15095 ;;  crc             1    wreg     unsigned char 
 15096 ;; Auto vars:     Size  Location     Type
 15097 ;;  crc             1   10[COMRAM] unsigned char 
 15098 ;; Return value:  Size  Location     Type
 15099 ;;		None               void
 15100 ;; Registers used:
 15101 ;;		wreg, status,2, cstack
 15102 ;; Tracked objects:
 15103 ;;		On entry : 0/0
 15104 ;;		On exit  : 0/0
 15105 ;;		Unchanged: 0/0
 15106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15107 ;;      Params:         0       0       0       0       0       0       0
 15108 ;;      Locals:         1       0       0       0       0       0       0
 15109 ;;      Temps:          0       0       0       0       0       0       0
 15110 ;;      Totals:         1       0       0       0       0       0       0
 15111 ;;Total ram usage:        1 bytes
 15112 ;; Hardware stack levels used:    1
 15113 ;; Hardware stack levels required when called:    3
 15114 ;; This function calls:
 15115 ;;		_writeEEPROM
 15116 ;; This function is called by:
 15117 ;;		_vscp_check_pstorage
 15118 ;;		_vscp_handleProbeState
 15119 ;;		_vscp_handleHeartbeat
 15120 ;;		_vscp_handleSetNickname
 15121 ;; This function uses a non-reentrant model
 15122 ;;
 15123                           
 15124                           	psect	text64
 15125  004186                     __ptext64:
 15126                           	opt stack 0
 15127  004186                     _vscp_setSegmentCRC:
 15128                           	opt stack 25
 15129                           
 15130                           ;incstack = 0
 15131                           ;incstack = 0
 15132                           ;vscp_setSegmentCRC@crc stored from wreg
 15133  004186  CFE8 F00B          	movff	wreg,vscp_setSegmentCRC@crc
 15134                           
 15135                           ;main.c: 2353: writeEEPROM( 0x02, crc );
 15136  00418A  6A09               	clrf	?_writeEEPROM+1,c
 15137  00418C  0E02               	movlw	2
 15138  00418E  6E08               	movwf	?_writeEEPROM,c
 15139  004190  C00B  F00A         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 15140  004194  EFB6  F01F         	goto	_writeEEPROM	;wreg free
 15141  004198                     __end_of_vscp_setSegmentCRC:
 15142                           	opt stack 0
 15143                           tblptru	equ	0xFF8
 15144                           tblptrh	equ	0xFF7
 15145                           tblptrl	equ	0xFF6
 15146                           tablat	equ	0xFF5
 15147                           prodh	equ	0xFF4
 15148                           prodl	equ	0xFF3
 15149                           postinc0	equ	0xFEE
 15150                           wreg	equ	0xFE8
 15151                           indf1	equ	0xFE7
 15152                           fsr1h	equ	0xFE2
 15153                           fsr1l	equ	0xFE1
 15154                           indf2	equ	0xFDF
 15155                           postinc2	equ	0xFDE
 15156                           postdec2	equ	0xFDD
 15157                           plusw2	equ	0xFDB
 15158                           fsr2h	equ	0xFDA
 15159                           fsr2l	equ	0xFD9
 15160                           status	equ	0xFD8
 15161                           
 15162 ;; *************** function _vscp_getSegmentCRC *****************
 15163 ;; Defined at:
 15164 ;;		line 2343 in file "../main.c"
 15165 ;; Parameters:    Size  Location     Type
 15166 ;;		None
 15167 ;; Auto vars:     Size  Location     Type
 15168 ;;		None
 15169 ;; Return value:  Size  Location     Type
 15170 ;;                  1    wreg      unsigned char 
 15171 ;; Registers used:
 15172 ;;		wreg, status,2, cstack
 15173 ;; Tracked objects:
 15174 ;;		On entry : 0/0
 15175 ;;		On exit  : 0/0
 15176 ;;		Unchanged: 0/0
 15177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15178 ;;      Params:         0       0       0       0       0       0       0
 15179 ;;      Locals:         0       0       0       0       0       0       0
 15180 ;;      Temps:          0       0       0       0       0       0       0
 15181 ;;      Totals:         0       0       0       0       0       0       0
 15182 ;;Total ram usage:        0 bytes
 15183 ;; Hardware stack levels used:    1
 15184 ;; Hardware stack levels required when called:    3
 15185 ;; This function calls:
 15186 ;;		_readEEPROM
 15187 ;; This function is called by:
 15188 ;;		_vscp_check_pstorage
 15189 ;;		_vscp_handleHeartbeat
 15190 ;; This function uses a non-reentrant model
 15191 ;;
 15192                           
 15193                           	psect	text65
 15194  004212                     __ptext65:
 15195                           	opt stack 0
 15196  004212                     _vscp_getSegmentCRC:
 15197                           	opt stack 25
 15198                           
 15199                           ;main.c: 2344: return readEEPROM( 0x02 );
 15200                           
 15201                           ;incstack = 0
 15202                           ;incstack = 0
 15203  004212  6A09               	clrf	?_readEEPROM+1,c
 15204  004214  0E02               	movlw	2
 15205  004216  6E08               	movwf	?_readEEPROM,c
 15206  004218  EFDE  F020         	goto	_readEEPROM	;wreg free
 15207  00421C                     __end_of_vscp_getSegmentCRC:
 15208                           	opt stack 0
 15209                           tblptru	equ	0xFF8
 15210                           tblptrh	equ	0xFF7
 15211                           tblptrl	equ	0xFF6
 15212                           tablat	equ	0xFF5
 15213                           prodh	equ	0xFF4
 15214                           prodl	equ	0xFF3
 15215                           postinc0	equ	0xFEE
 15216                           wreg	equ	0xFE8
 15217                           indf1	equ	0xFE7
 15218                           fsr1h	equ	0xFE2
 15219                           fsr1l	equ	0xFE1
 15220                           indf2	equ	0xFDF
 15221                           postinc2	equ	0xFDE
 15222                           postdec2	equ	0xFDD
 15223                           plusw2	equ	0xFDB
 15224                           fsr2h	equ	0xFDA
 15225                           fsr2l	equ	0xFD9
 15226                           status	equ	0xFD8
 15227                           
 15228 ;; *************** function _vscp_writeNicknamePermanent *****************
 15229 ;; Defined at:
 15230 ;;		line 858 in file "../main.c"
 15231 ;; Parameters:    Size  Location     Type
 15232 ;;  nickname        1    wreg     unsigned char 
 15233 ;; Auto vars:     Size  Location     Type
 15234 ;;  nickname        1   10[COMRAM] unsigned char 
 15235 ;; Return value:  Size  Location     Type
 15236 ;;		None               void
 15237 ;; Registers used:
 15238 ;;		wreg, status,2, cstack
 15239 ;; Tracked objects:
 15240 ;;		On entry : 0/0
 15241 ;;		On exit  : 0/0
 15242 ;;		Unchanged: 0/0
 15243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15244 ;;      Params:         0       0       0       0       0       0       0
 15245 ;;      Locals:         1       0       0       0       0       0       0
 15246 ;;      Temps:          0       0       0       0       0       0       0
 15247 ;;      Totals:         1       0       0       0       0       0       0
 15248 ;;Total ram usage:        1 bytes
 15249 ;; Hardware stack levels used:    1
 15250 ;; Hardware stack levels required when called:    3
 15251 ;; This function calls:
 15252 ;;		_writeEEPROM
 15253 ;; This function is called by:
 15254 ;;		_vscp_check_pstorage
 15255 ;;		_vscp_handleProbeState
 15256 ;;		_vscp_handleHeartbeat
 15257 ;;		_vscp_handleSetNickname
 15258 ;;		_vscp_handleDropNickname
 15259 ;; This function uses a non-reentrant model
 15260 ;;
 15261                           
 15262                           	psect	text66
 15263  004198                     __ptext66:
 15264                           	opt stack 0
 15265  004198                     _vscp_writeNicknamePermanent:
 15266                           	opt stack 25
 15267                           
 15268                           ;incstack = 0
 15269                           ;incstack = 0
 15270                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 15271  004198  CFE8 F00B          	movff	wreg,vscp_writeNicknamePermanent@nickname
 15272                           
 15273                           ;main.c: 859: writeEEPROM( 0x01, nickname );
 15274  00419C  6A09               	clrf	?_writeEEPROM+1,c
 15275  00419E  0E01               	movlw	1
 15276  0041A0  6E08               	movwf	?_writeEEPROM,c
 15277  0041A2  C00B  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 15278  0041A6  EFB6  F01F         	goto	_writeEEPROM	;wreg free
 15279  0041AA                     __end_of_vscp_writeNicknamePermanent:
 15280                           	opt stack 0
 15281                           tblptru	equ	0xFF8
 15282                           tblptrh	equ	0xFF7
 15283                           tblptrl	equ	0xFF6
 15284                           tablat	equ	0xFF5
 15285                           prodh	equ	0xFF4
 15286                           prodl	equ	0xFF3
 15287                           postinc0	equ	0xFEE
 15288                           wreg	equ	0xFE8
 15289                           indf1	equ	0xFE7
 15290                           fsr1h	equ	0xFE2
 15291                           fsr1l	equ	0xFE1
 15292                           indf2	equ	0xFDF
 15293                           postinc2	equ	0xFDE
 15294                           postdec2	equ	0xFDD
 15295                           plusw2	equ	0xFDB
 15296                           fsr2h	equ	0xFDA
 15297                           fsr2l	equ	0xFD9
 15298                           status	equ	0xFD8
 15299                           
 15300 ;; *************** function _writeEEPROM *****************
 15301 ;; Defined at:
 15302 ;;		line 23 in file "../../vscp_firmware/pic/common/eeprom.c"
 15303 ;; Parameters:    Size  Location     Type
 15304 ;;  address         2    7[COMRAM] unsigned short 
 15305 ;;  data            1    9[COMRAM] unsigned char 
 15306 ;; Auto vars:     Size  Location     Type
 15307 ;;		None
 15308 ;; Return value:  Size  Location     Type
 15309 ;;		None               void
 15310 ;; Registers used:
 15311 ;;		wreg, status,2
 15312 ;; Tracked objects:
 15313 ;;		On entry : 0/0
 15314 ;;		On exit  : 0/0
 15315 ;;		Unchanged: 0/0
 15316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15317 ;;      Params:         3       0       0       0       0       0       0
 15318 ;;      Locals:         0       0       0       0       0       0       0
 15319 ;;      Temps:          0       0       0       0       0       0       0
 15320 ;;      Totals:         3       0       0       0       0       0       0
 15321 ;;Total ram usage:        3 bytes
 15322 ;; Hardware stack levels used:    1
 15323 ;; Hardware stack levels required when called:    2
 15324 ;; This function calls:
 15325 ;;		Nothing
 15326 ;; This function is called by:
 15327 ;;		_main
 15328 ;;		_init_app_eeprom
 15329 ;;		_vscp_setGUID
 15330 ;;		_vscp_setManufacturerId
 15331 ;;		_vscp_writeNicknamePermanent
 15332 ;;		_vscp_writeAppReg
 15333 ;;		_doActionDisable
 15334 ;;		_vscp_setUserID
 15335 ;;		_vscp_setSegmentCRC
 15336 ;;		_vscp_setControlByte
 15337 ;;		_vscp_goBootloaderMode
 15338 ;; This function uses a non-reentrant model
 15339 ;;
 15340                           
 15341                           	psect	text67
 15342  003F6C                     __ptext67:
 15343                           	opt stack 0
 15344  003F6C                     _writeEEPROM:
 15345                           	opt stack 26
 15346                           
 15347                           ;eeprom.c: 29: EEADR = address & 0xff;
 15348                           
 15349                           ;incstack = 0
 15350                           ;incstack = 0
 15351  003F6C  C008  FFA9         	movff	writeEEPROM@address,4009	;volatile
 15352                           
 15353                           ;eeprom.c: 30: EEDATA = data;
 15354  003F70  C00A  FFA8         	movff	writeEEPROM@data,4008	;volatile
 15355                           
 15356                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 15357  003F74  9EA6               	bcf	4006,7,c	;volatile
 15358                           
 15359                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 15360  003F76  9CA6               	bcf	4006,6,c	;volatile
 15361                           
 15362                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 15363  003F78  84A6               	bsf	4006,2,c	;volatile
 15364                           
 15365                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 15366  003F7A  9EF2               	bcf	intcon,7,c	;volatile
 15367                           
 15368                           ;eeprom.c: 37: EECON2 = 0x55;
 15369  003F7C  0E55               	movlw	85
 15370  003F7E  6EA7               	movwf	4007,c	;volatile
 15371                           
 15372                           ;eeprom.c: 38: EECON2 = 0xaa;
 15373  003F80  0EAA               	movlw	170
 15374  003F82  6EA7               	movwf	4007,c	;volatile
 15375                           
 15376                           ;eeprom.c: 39: EECON1bits.WR = 1;
 15377  003F84  82A6               	bsf	4006,1,c	;volatile
 15378                           
 15379                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 15380  003F86  8EF2               	bsf	intcon,7,c	;volatile
 15381  003F88                     l1295:
 15382  003F88  A8A1               	btfss	4001,4,c	;volatile
 15383  003F8A  D7FE               	goto	l1295
 15384                           
 15385                           ;eeprom.c: 47: PIR2bits.EEIF = 0;
 15386  003F8C  98A1               	bcf	4001,4,c	;volatile
 15387                           
 15388                           ;eeprom.c: 49: EECON1bits.WREN = 0;
 15389  003F8E  94A6               	bcf	4006,2,c	;volatile
 15390  003F90  0012               	return	
 15391  003F92                     __end_of_writeEEPROM:
 15392                           	opt stack 0
 15393                           tblptru	equ	0xFF8
 15394                           tblptrh	equ	0xFF7
 15395                           tblptrl	equ	0xFF6
 15396                           tablat	equ	0xFF5
 15397                           prodh	equ	0xFF4
 15398                           prodl	equ	0xFF3
 15399                           intcon	equ	0xFF2
 15400                           postinc0	equ	0xFEE
 15401                           wreg	equ	0xFE8
 15402                           indf1	equ	0xFE7
 15403                           fsr1h	equ	0xFE2
 15404                           fsr1l	equ	0xFE1
 15405                           indf2	equ	0xFDF
 15406                           postinc2	equ	0xFDE
 15407                           postdec2	equ	0xFDD
 15408                           plusw2	equ	0xFDB
 15409                           fsr2h	equ	0xFDA
 15410                           fsr2l	equ	0xFD9
 15411                           status	equ	0xFD8
 15412                           
 15413 ;; *************** function _init *****************
 15414 ;; Defined at:
 15415 ;;		line 320 in file "../main.c"
 15416 ;; Parameters:    Size  Location     Type
 15417 ;;		None
 15418 ;; Auto vars:     Size  Location     Type
 15419 ;;		None
 15420 ;; Return value:  Size  Location     Type
 15421 ;;		None               void
 15422 ;; Registers used:
 15423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15424 ;; Tracked objects:
 15425 ;;		On entry : 0/0
 15426 ;;		On exit  : 0/0
 15427 ;;		Unchanged: 0/0
 15428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15429 ;;      Params:         0       0       0       0       0       0       0
 15430 ;;      Locals:         0       0       0       0       0       0       0
 15431 ;;      Temps:          0       0       0       0       0       0       0
 15432 ;;      Totals:         0       0       0       0       0       0       0
 15433 ;;Total ram usage:        0 bytes
 15434 ;; Hardware stack levels used:    1
 15435 ;; Hardware stack levels required when called:    4
 15436 ;; This function calls:
 15437 ;;		_WriteTimer0
 15438 ;;		_init_app_ram
 15439 ;;		_OpenTimer0
 15440 ;;		_ECANInitialize
 15441 ;; This function is called by:
 15442 ;;		_main
 15443 ;; This function uses a non-reentrant model
 15444 ;;
 15445                           
 15446                           	psect	text68
 15447  003E0A                     __ptext68:
 15448                           	opt stack 0
 15449  003E0A                     _init:
 15450                           	opt stack 26
 15451                           
 15452                           ;main.c: 325: init_app_ram();
 15453                           
 15454                           ;incstack = 0
 15455                           ;incstack = 0
 15456  003E0A  ECF0  F019         	call	_init_app_ram	;wreg free
 15457                           
 15458                           ;main.c: 336: TRISA = 0x00;
 15459  003E0E  6A92               	clrf	3986,c	;volatile
 15460                           
 15461                           ;main.c: 337: PORTA = 0x00;
 15462  003E10  6A80               	clrf	3968,c	;volatile
 15463                           
 15464                           ;main.c: 349: TRISB = 0b00001000;
 15465  003E12  0E08               	movlw	8
 15466  003E14  6E93               	movwf	3987,c	;volatile
 15467                           
 15468                           ;main.c: 350: PORTB = 0x00;
 15469  003E16  6A81               	clrf	3969,c	;volatile
 15470                           
 15471                           ;main.c: 360: TRISC = 0b00000001;
 15472  003E18  0E01               	movlw	1
 15473  003E1A  6E94               	movwf	3988,c	;volatile
 15474                           
 15475                           ;main.c: 361: PORTC = 0x00;
 15476  003E1C  6A82               	clrf	3970,c	;volatile
 15477                           
 15478                           ;main.c: 387: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 15479  003E1E  0E92               	movlw	146
 15480  003E20  EC50  F020         	call	_OpenTimer0
 15481                           
 15482                           ;main.c: 388: WriteTimer0( 0xfb1d );
 15483  003E24  0EFB               	movlw	251
 15484  003E26  6E09               	movwf	?_WriteTimer0+1,c
 15485  003E28  0E1D               	movlw	29
 15486  003E2A  6E08               	movwf	?_WriteTimer0,c
 15487  003E2C  ECD5  F020         	call	_WriteTimer0	;wreg free
 15488                           
 15489                           ;main.c: 391: LATBbits.LATB4 = 0;
 15490  003E30  988A               	bcf	3978,4,c	;volatile
 15491                           
 15492                           ;main.c: 392: LATBbits.LATB1 = 0;
 15493  003E32  928A               	bcf	3978,1,c	;volatile
 15494                           
 15495                           ;main.c: 393: LATBbits.LATB0 = 0;
 15496  003E34  908A               	bcf	3978,0,c	;volatile
 15497                           
 15498                           ;main.c: 394: LATCbits.LATC7 = 0;
 15499  003E36  9E8B               	bcf	3979,7,c	;volatile
 15500                           
 15501                           ;main.c: 395: LATCbits.LATC6 = 0;
 15502  003E38  9C8B               	bcf	3979,6,c	;volatile
 15503                           
 15504                           ;main.c: 396: LATCbits.LATC5 = 0;
 15505  003E3A  9A8B               	bcf	3979,5,c	;volatile
 15506                           
 15507                           ;main.c: 397: LATCbits.LATC4 = 0;
 15508  003E3C  988B               	bcf	3979,4,c	;volatile
 15509                           
 15510                           ;main.c: 400: ECANInitialize();
 15511  003E3E  EC4F  F01D         	call	_ECANInitialize	;wreg free
 15512                           
 15513                           ;main.c: 421: INTCONbits.PEIE = 1;
 15514  003E42  8CF2               	bsf	intcon,6,c	;volatile
 15515                           
 15516                           ;main.c: 424: INTCONbits.GIE = 1;
 15517  003E44  8EF2               	bsf	intcon,7,c	;volatile
 15518  003E46  0012               	return	
 15519  003E48                     __end_of_init:
 15520                           	opt stack 0
 15521                           tblptru	equ	0xFF8
 15522                           tblptrh	equ	0xFF7
 15523                           tblptrl	equ	0xFF6
 15524                           tablat	equ	0xFF5
 15525                           prodh	equ	0xFF4
 15526                           prodl	equ	0xFF3
 15527                           intcon	equ	0xFF2
 15528                           postinc0	equ	0xFEE
 15529                           wreg	equ	0xFE8
 15530                           indf1	equ	0xFE7
 15531                           fsr1h	equ	0xFE2
 15532                           fsr1l	equ	0xFE1
 15533                           indf2	equ	0xFDF
 15534                           postinc2	equ	0xFDE
 15535                           postdec2	equ	0xFDD
 15536                           plusw2	equ	0xFDB
 15537                           fsr2h	equ	0xFDA
 15538                           fsr2l	equ	0xFD9
 15539                           status	equ	0xFD8
 15540                           
 15541 ;; *************** function _ECANInitialize *****************
 15542 ;; Defined at:
 15543 ;;		line 168 in file "../ECAN.c"
 15544 ;; Parameters:    Size  Location     Type
 15545 ;;		None
 15546 ;; Auto vars:     Size  Location     Type
 15547 ;;		None
 15548 ;; Return value:  Size  Location     Type
 15549 ;;		None               void
 15550 ;; Registers used:
 15551 ;;		wreg, status,2, status,0, cstack
 15552 ;; Tracked objects:
 15553 ;;		On entry : 0/0
 15554 ;;		On exit  : 0/0
 15555 ;;		Unchanged: 0/0
 15556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15557 ;;      Params:         0       0       0       0       0       0       0
 15558 ;;      Locals:         0       0       0       0       0       0       0
 15559 ;;      Temps:          0       0       0       0       0       0       0
 15560 ;;      Totals:         0       0       0       0       0       0       0
 15561 ;;Total ram usage:        0 bytes
 15562 ;; Hardware stack levels used:    1
 15563 ;; Hardware stack levels required when called:    3
 15564 ;; This function calls:
 15565 ;;		_ECANSetOperationMode
 15566 ;; This function is called by:
 15567 ;;		_init
 15568 ;; This function uses a non-reentrant model
 15569 ;;
 15570                           
 15571                           	psect	text69
 15572  003A9E                     __ptext69:
 15573                           	opt stack 0
 15574  003A9E                     _ECANInitialize:
 15575                           	opt stack 26
 15576                           
 15577                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 15578                           
 15579                           ;incstack = 0
 15580                           ;incstack = 0
 15581  003A9E  0E80               	movlw	128
 15582  003AA0  EC90  F020         	call	_ECANSetOperationMode
 15583                           
 15584                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 15585  003AA4  0E09               	movlw	9
 15586  003AA6  6E70               	movwf	3952,c	;volatile
 15587                           
 15588                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 15589  003AA8  0EFC               	movlw	252
 15590  003AAA  6E71               	movwf	3953,c	;volatile
 15591                           
 15592                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 15593                           ;ECAN.c: 181: (0 << 6) |
 15594                           ;ECAN.c: 182: (2-1);
 15595  003AAC  0E01               	movlw	1
 15596  003AAE  6E72               	movwf	3954,c	;volatile
 15597                           
 15598                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 15599  003AB0  0E20               	movlw	32
 15600  003AB2  6E73               	movwf	3955,c	;volatile
 15601                           
 15602                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 15603  003AB4  8E77               	bsf	3959,7,c	;volatile
 15604                           
 15605                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 15606  003AB6  9C77               	bcf	3959,6,c	;volatile
 15607                           
 15608                           ;ECAN.c: 205: RXB0CON = 0;
 15609  003AB8  6A60               	clrf	3936,c	;volatile
 15610                           
 15611                           ;ECAN.c: 211: RXB1CON = 0;
 15612  003ABA  010F               	movlb	15	; () banked
 15613  003ABC  6B50               	clrf	80,b	;volatile
 15614                           
 15615                           ; BSR set to: 15
 15616                           ;ECAN.c: 221: B0CON = 0;
 15617  003ABE  010E               	movlb	14	; () banked
 15618  003AC0  6B20               	clrf	32,b	;volatile
 15619                           
 15620                           ; BSR set to: 14
 15621                           ;ECAN.c: 231: B1CON = 0;
 15622  003AC2  6B30               	clrf	48,b	;volatile
 15623                           
 15624                           ; BSR set to: 14
 15625                           ;ECAN.c: 241: B2CON = 0;
 15626  003AC4  6B40               	clrf	64,b	;volatile
 15627                           
 15628                           ; BSR set to: 14
 15629                           ;ECAN.c: 254: B3CON = 0 << 2;
 15630  003AC6  6B50               	clrf	80,b	;volatile
 15631                           
 15632                           ; BSR set to: 14
 15633                           ;ECAN.c: 264: B4CON = 0 << 2;
 15634  003AC8  6B60               	clrf	96,b	;volatile
 15635                           
 15636                           ; BSR set to: 14
 15637                           ;ECAN.c: 274: B5CON = 0 << 2;
 15638  003ACA  6B70               	clrf	112,b	;volatile
 15639                           
 15640                           ; BSR set to: 14
 15641                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 15642  003ACC  0EE0               	movlw	224
 15643  003ACE  010D               	movlb	13	; () banked
 15644  003AD0  6FF8               	movwf	248,b	;volatile
 15645                           
 15646                           ; BSR set to: 13
 15647                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 15648  003AD2  010F               	movlb	15	; () banked
 15649  003AD4  6B00               	clrf	0,b	;volatile
 15650                           
 15651                           ; BSR set to: 15
 15652  003AD6  0E08               	movlw	8
 15653  003AD8  6F01               	movwf	1,b	;volatile
 15654                           
 15655                           ; BSR set to: 15
 15656  003ADA  6B02               	clrf	2,b	;volatile
 15657                           
 15658                           ; BSR set to: 15
 15659  003ADC  6B03               	clrf	3,b	;volatile
 15660                           
 15661                           ; BSR set to: 15
 15662                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 15663  003ADE  6B04               	clrf	4,b	;volatile
 15664                           
 15665                           ; BSR set to: 15
 15666  003AE0  0EE8               	movlw	232
 15667  003AE2  6F05               	movwf	5,b	;volatile
 15668                           
 15669                           ; BSR set to: 15
 15670  003AE4  0E1A               	movlw	26
 15671  003AE6  6F06               	movwf	6,b	;volatile
 15672                           
 15673                           ; BSR set to: 15
 15674  003AE8  6B07               	clrf	7,b	;volatile
 15675                           
 15676                           ; BSR set to: 15
 15677                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 15678  003AEA  0E03               	movlw	3
 15679  003AEC  010D               	movlb	13	; () banked
 15680  003AEE  6FD4               	movwf	212,b	;volatile
 15681                           
 15682                           ; BSR set to: 13
 15683                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 15684  003AF0  6BD5               	clrf	213,b	;volatile
 15685                           
 15686                           ; BSR set to: 13
 15687                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 15688  003AF2  6BE0               	clrf	224,b	;volatile
 15689                           
 15690                           ; BSR set to: 13
 15691                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 15692  003AF4  0E11               	movlw	17
 15693  003AF6  6FE1               	movwf	225,b	;volatile
 15694                           
 15695                           ; BSR set to: 13
 15696                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 15697  003AF8  6FE2               	movwf	226,b	;volatile
 15698                           
 15699                           ; BSR set to: 13
 15700                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 15701  003AFA  6BE3               	clrf	227,b	;volatile
 15702                           
 15703                           ; BSR set to: 13
 15704                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 15705  003AFC  6BE4               	clrf	228,b	;volatile
 15706                           
 15707                           ; BSR set to: 13
 15708                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 15709  003AFE  6BE5               	clrf	229,b	;volatile
 15710                           
 15711                           ; BSR set to: 13
 15712                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 15713  003B00  6BE6               	clrf	230,b	;volatile
 15714                           
 15715                           ; BSR set to: 13
 15716                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 15717  003B02  6BE7               	clrf	231,b	;volatile
 15718                           
 15719                           ; BSR set to: 13
 15720                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 15721  003B04  0E54               	movlw	84
 15722  003B06  6FF0               	movwf	240,b	;volatile
 15723                           
 15724                           ; BSR set to: 13
 15725                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 15726  003B08  0E05               	movlw	5
 15727  003B0A  6FF1               	movwf	241,b	;volatile
 15728                           
 15729                           ; BSR set to: 13
 15730                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15731  003B0C  6BF2               	clrf	242,b	;volatile
 15732                           
 15733                           ; BSR set to: 13
 15734                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15735  003B0E  6BF2               	clrf	242,b	;volatile
 15736                           
 15737                           ; BSR set to: 13
 15738                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 15739  003B10  0E0F               	movlw	15
 15740  003B12  010F               	movlb	15	; () banked
 15741  003B14  6F18               	movwf	24,b	;volatile
 15742                           
 15743                           ; BSR set to: 15
 15744  003B16  0EE0               	movlw	224
 15745  003B18  6F19               	movwf	25,b	;volatile
 15746                           
 15747                           ; BSR set to: 15
 15748  003B1A  6B1A               	clrf	26,b	;volatile
 15749                           
 15750                           ; BSR set to: 15
 15751  003B1C  6B1B               	clrf	27,b	;volatile
 15752                           
 15753                           ; BSR set to: 15
 15754                           ;ECAN.c: 482: RXM0EXIDM = 1;
 15755  003B1E  8719               	bsf	25,3,b	;volatile
 15756                           
 15757                           ; BSR set to: 15
 15758                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 15759  003B20  0E0F               	movlw	15
 15760  003B22  6F1C               	movwf	28,b	;volatile
 15761                           
 15762                           ; BSR set to: 15
 15763  003B24  0EE0               	movlw	224
 15764  003B26  6F1D               	movwf	29,b	;volatile
 15765                           
 15766                           ; BSR set to: 15
 15767  003B28  691E               	setf	30,b	;volatile
 15768                           
 15769                           ; BSR set to: 15
 15770  003B2A  6B1F               	clrf	31,b	;volatile
 15771                           
 15772                           ; BSR set to: 15
 15773                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 15774  003B2C  871D               	bsf	29,3,b	;volatile
 15775                           
 15776                           ; BSR set to: 15
 15777                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 15778  003B2E  0E00               	movlw	0
 15779  003B30  EF90  F020         	goto	_ECANSetOperationMode
 15780  003B34                     __end_of_ECANInitialize:
 15781                           	opt stack 0
 15782                           tblptru	equ	0xFF8
 15783                           tblptrh	equ	0xFF7
 15784                           tblptrl	equ	0xFF6
 15785                           tablat	equ	0xFF5
 15786                           prodh	equ	0xFF4
 15787                           prodl	equ	0xFF3
 15788                           intcon	equ	0xFF2
 15789                           postinc0	equ	0xFEE
 15790                           wreg	equ	0xFE8
 15791                           indf1	equ	0xFE7
 15792                           fsr1h	equ	0xFE2
 15793                           fsr1l	equ	0xFE1
 15794                           indf2	equ	0xFDF
 15795                           postinc2	equ	0xFDE
 15796                           postdec2	equ	0xFDD
 15797                           plusw2	equ	0xFDB
 15798                           fsr2h	equ	0xFDA
 15799                           fsr2l	equ	0xFD9
 15800                           status	equ	0xFD8
 15801                           
 15802 ;; *************** function _ECANSetOperationMode *****************
 15803 ;; Defined at:
 15804 ;;		line 1012 in file "../ECAN.c"
 15805 ;; Parameters:    Size  Location     Type
 15806 ;;  mode            1    wreg     enum E16337
 15807 ;; Auto vars:     Size  Location     Type
 15808 ;;  mode            1    7[COMRAM] enum E16337
 15809 ;; Return value:  Size  Location     Type
 15810 ;;		None               void
 15811 ;; Registers used:
 15812 ;;		wreg, status,2, status,0
 15813 ;; Tracked objects:
 15814 ;;		On entry : 0/0
 15815 ;;		On exit  : 0/0
 15816 ;;		Unchanged: 0/0
 15817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15818 ;;      Params:         0       0       0       0       0       0       0
 15819 ;;      Locals:         1       0       0       0       0       0       0
 15820 ;;      Temps:          0       0       0       0       0       0       0
 15821 ;;      Totals:         1       0       0       0       0       0       0
 15822 ;;Total ram usage:        1 bytes
 15823 ;; Hardware stack levels used:    1
 15824 ;; Hardware stack levels required when called:    2
 15825 ;; This function calls:
 15826 ;;		Nothing
 15827 ;; This function is called by:
 15828 ;;		_calculateSetFilterMask
 15829 ;;		_ECANInitialize
 15830 ;; This function uses a non-reentrant model
 15831 ;;
 15832                           
 15833                           	psect	text70
 15834  004120                     __ptext70:
 15835                           	opt stack 0
 15836  004120                     _ECANSetOperationMode:
 15837                           	opt stack 24
 15838                           
 15839                           ;incstack = 0
 15840                           ;incstack = 0
 15841                           ;ECANSetOperationMode@mode stored from wreg
 15842  004120  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 15843                           
 15844                           ;ECAN.c: 1013: CANCON &= 0x1F;
 15845  004124  0E1F               	movlw	31
 15846  004126  166F               	andwf	3951,f,c	;volatile
 15847                           
 15848                           ;ECAN.c: 1014: CANCON |= mode;
 15849  004128  5008               	movf	ECANSetOperationMode@mode,w,c
 15850  00412A  126F               	iorwf	3951,f,c	;volatile
 15851  00412C                     l6727:
 15852  00412C  506F               	movf	3951,w,c	;volatile
 15853  00412E  0BE0               	andlw	224
 15854  004130  1808               	xorwf	ECANSetOperationMode@mode,w,c
 15855  004132  B4D8               	btfsc	status,2,c
 15856  004134  0012               	return	
 15857  004136  D7FA               	goto	l6727
 15858  004138                     __end_of_ECANSetOperationMode:
 15859                           	opt stack 0
 15860                           tblptru	equ	0xFF8
 15861                           tblptrh	equ	0xFF7
 15862                           tblptrl	equ	0xFF6
 15863                           tablat	equ	0xFF5
 15864                           prodh	equ	0xFF4
 15865                           prodl	equ	0xFF3
 15866                           intcon	equ	0xFF2
 15867                           postinc0	equ	0xFEE
 15868                           wreg	equ	0xFE8
 15869                           indf1	equ	0xFE7
 15870                           fsr1h	equ	0xFE2
 15871                           fsr1l	equ	0xFE1
 15872                           indf2	equ	0xFDF
 15873                           postinc2	equ	0xFDE
 15874                           postdec2	equ	0xFDD
 15875                           plusw2	equ	0xFDB
 15876                           fsr2h	equ	0xFDA
 15877                           fsr2l	equ	0xFD9
 15878                           status	equ	0xFD8
 15879                           
 15880 ;; *************** function _OpenTimer0 *****************
 15881 ;; Defined at:
 15882 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 15883 ;; Parameters:    Size  Location     Type
 15884 ;;  config          1    wreg     unsigned char 
 15885 ;; Auto vars:     Size  Location     Type
 15886 ;;  config          1    7[COMRAM] unsigned char 
 15887 ;; Return value:  Size  Location     Type
 15888 ;;		None               void
 15889 ;; Registers used:
 15890 ;;		wreg, status,2, status,0
 15891 ;; Tracked objects:
 15892 ;;		On entry : 0/0
 15893 ;;		On exit  : 0/0
 15894 ;;		Unchanged: 0/0
 15895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15896 ;;      Params:         0       0       0       0       0       0       0
 15897 ;;      Locals:         1       0       0       0       0       0       0
 15898 ;;      Temps:          0       0       0       0       0       0       0
 15899 ;;      Totals:         1       0       0       0       0       0       0
 15900 ;;Total ram usage:        1 bytes
 15901 ;; Hardware stack levels used:    1
 15902 ;; Hardware stack levels required when called:    2
 15903 ;; This function calls:
 15904 ;;		Nothing
 15905 ;; This function is called by:
 15906 ;;		_init
 15907 ;; This function uses a non-reentrant model
 15908 ;;
 15909                           
 15910                           	psect	text71
 15911  0040A0                     __ptext71:
 15912                           	opt stack 0
 15913  0040A0                     _OpenTimer0:
 15914                           	opt stack 27
 15915                           
 15916                           ;incstack = 0
 15917                           ;incstack = 0
 15918                           ;OpenTimer0@config stored from wreg
 15919  0040A0  CFE8 F008          	movff	wreg,OpenTimer0@config
 15920  0040A4  5008               	movf	OpenTimer0@config,w,c
 15921  0040A6  0B7F               	andlw	127
 15922  0040A8  6ED5               	movwf	4053,c	;volatile
 15923  0040AA  6AD7               	clrf	4055,c	;volatile
 15924  0040AC  6AD6               	clrf	4054,c	;volatile
 15925  0040AE  94F2               	bcf	intcon,2,c	;volatile
 15926  0040B0  AE08               	btfss	OpenTimer0@config,7,c
 15927  0040B2  D002               	goto	l1314
 15928  0040B4  8AF2               	bsf	intcon,5,c	;volatile
 15929  0040B6  D001               	goto	l1315
 15930  0040B8                     l1314:
 15931  0040B8  9AF2               	bcf	intcon,5,c	;volatile
 15932  0040BA                     l1315:
 15933  0040BA  8ED5               	bsf	4053,7,c	;volatile
 15934  0040BC  0012               	return	
 15935  0040BE                     __end_of_OpenTimer0:
 15936                           	opt stack 0
 15937                           tblptru	equ	0xFF8
 15938                           tblptrh	equ	0xFF7
 15939                           tblptrl	equ	0xFF6
 15940                           tablat	equ	0xFF5
 15941                           prodh	equ	0xFF4
 15942                           prodl	equ	0xFF3
 15943                           intcon	equ	0xFF2
 15944                           postinc0	equ	0xFEE
 15945                           wreg	equ	0xFE8
 15946                           indf1	equ	0xFE7
 15947                           fsr1h	equ	0xFE2
 15948                           fsr1l	equ	0xFE1
 15949                           indf2	equ	0xFDF
 15950                           postinc2	equ	0xFDE
 15951                           postdec2	equ	0xFDD
 15952                           plusw2	equ	0xFDB
 15953                           fsr2h	equ	0xFDA
 15954                           fsr2l	equ	0xFD9
 15955                           status	equ	0xFD8
 15956                           
 15957 ;; *************** function _init_app_ram *****************
 15958 ;; Defined at:
 15959 ;;		line 434 in file "../main.c"
 15960 ;; Parameters:    Size  Location     Type
 15961 ;;		None
 15962 ;; Auto vars:     Size  Location     Type
 15963 ;;  i               1   12[COMRAM] unsigned char 
 15964 ;; Return value:  Size  Location     Type
 15965 ;;		None               void
 15966 ;; Registers used:
 15967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15968 ;; Tracked objects:
 15969 ;;		On entry : 0/0
 15970 ;;		On exit  : 0/0
 15971 ;;		Unchanged: 0/0
 15972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15973 ;;      Params:         0       0       0       0       0       0       0
 15974 ;;      Locals:         1       0       0       0       0       0       0
 15975 ;;      Temps:          2       0       0       0       0       0       0
 15976 ;;      Totals:         3       0       0       0       0       0       0
 15977 ;;Total ram usage:        3 bytes
 15978 ;; Hardware stack levels used:    1
 15979 ;; Hardware stack levels required when called:    3
 15980 ;; This function calls:
 15981 ;;		_readEEPROM
 15982 ;; This function is called by:
 15983 ;;		_main
 15984 ;;		_init
 15985 ;;		_vscp_restoreDefaults
 15986 ;; This function uses a non-reentrant model
 15987 ;;
 15988                           
 15989                           	psect	text72
 15990  0033E0                     __ptext72:
 15991                           	opt stack 0
 15992  0033E0                     _init_app_ram:
 15993                           	opt stack 24
 15994                           
 15995                           ;main.c: 435: uint8_t i;
 15996                           ;main.c: 437: measurement_clock = 0;
 15997                           
 15998                           ;incstack = 0
 15999                           ;incstack = 0
 16000  0033E0  0100               	movlb	0	; () banked
 16001  0033E2  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
 16002  0033E4  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 16003  0033E6  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 16004  0033E8  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 16005                           
 16006                           ;main.c: 439: seconds = 0;
 16007  0033EA  6B8B               	clrf	_seconds& (0+255),b
 16008                           
 16009                           ;main.c: 440: minutes = 0;
 16010  0033EC  6B89               	clrf	_minutes& (0+255),b
 16011                           
 16012                           ;main.c: 441: hours = 0;
 16013  0033EE  6B88               	clrf	_hours& (0+255),b
 16014                           
 16015                           ;main.c: 443: relay_pulse_flags = 0;
 16016  0033F0  6B8A               	clrf	_relay_pulse_flags& (0+255),b
 16017                           
 16018                           ;main.c: 446: for ( i = 0; i < 8; i++ ) {
 16019  0033F2  6A0D               	clrf	init_app_ram@i,c
 16020  0033F4                     l7257:
 16021                           
 16022                           ; BSR set to: 0
 16023                           ;main.c: 447: relay_pulse_timer[ i ] = 0;
 16024  0033F4  500D               	movf	init_app_ram@i,w,c
 16025  0033F6  0D02               	mullw	2
 16026  0033F8  50F3               	movf	prodl,w,c
 16027  0033FA  0F70               	addlw	low _relay_pulse_timer
 16028  0033FC  6ED9               	movwf	fsr2l,c
 16029  0033FE  6ADA               	clrf	fsr2h,c
 16030  003400  6ADE               	clrf	postinc2,c
 16031  003402  6ADD               	clrf	postdec2,c
 16032                           
 16033                           ;main.c: 448: relay_protection_timer[ i ] = 0;
 16034  003404  500D               	movf	init_app_ram@i,w,c
 16035  003406  0D02               	mullw	2
 16036  003408  50F3               	movf	prodl,w,c
 16037  00340A  0F60               	addlw	low _relay_protection_timer
 16038  00340C  6ED9               	movwf	fsr2l,c
 16039  00340E  6ADA               	clrf	fsr2h,c
 16040  003410  6ADE               	clrf	postinc2,c
 16041  003412  6ADD               	clrf	postdec2,c
 16042                           
 16043                           ; BSR set to: 0
 16044  003414  2A0D               	incf	init_app_ram@i,f,c
 16045                           
 16046                           ; BSR set to: 0
 16047  003416  0E07               	movlw	7
 16048  003418  640D               	cpfsgt	init_app_ram@i,c
 16049  00341A  D7EC               	goto	l7257
 16050                           
 16051                           ; BSR set to: 0
 16052                           ;main.c: 449: }
 16053                           ;main.c: 451: for ( i=0; i<7; i++ ) {
 16054  00341C  6A0D               	clrf	init_app_ram@i,c
 16055  00341E                     l7267:
 16056                           
 16057                           ;main.c: 454: if ( readEEPROM( 0x43 + 10 + i ) &
 16058                           ;main.c: 455: 0x01 ) {
 16059  00341E  0E4D               	movlw	77
 16060  003420  240D               	addwf	init_app_ram@i,w,c
 16061  003422  6E08               	movwf	?_readEEPROM,c
 16062  003424  6A09               	clrf	?_readEEPROM+1,c
 16063  003426  0E00               	movlw	0
 16064  003428  2209               	addwfc	?_readEEPROM+1,f,c
 16065  00342A  ECDE  F020         	call	_readEEPROM	;wreg free
 16066  00342E  6E0B               	movwf	??_init_app_ram& (0+255),c
 16067  003430  A00B               	btfss	??_init_app_ram,0,c
 16068  003432  D02D               	goto	l7273
 16069                           
 16070                           ;main.c: 457: relay_pulse_flags |= (1<<i);
 16071  003434  C00D  F00B         	movff	init_app_ram@i,??_init_app_ram
 16072  003438  0E01               	movlw	1
 16073  00343A  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16074  00343C  2A0B               	incf	??_init_app_ram,f,c
 16075  00343E  D002               	goto	u7994
 16076  003440                     u7995:
 16077  003440  90D8               	bcf	status,0,c
 16078  003442  360C               	rlcf	??_init_app_ram+1,f,c
 16079  003444                     u7994:
 16080  003444  2E0B               	decfsz	??_init_app_ram,f,c
 16081  003446  D7FC               	goto	u7995
 16082  003448  500C               	movf	??_init_app_ram+1,w,c
 16083  00344A  0100               	movlb	0	; () banked
 16084  00344C  138A               	iorwf	_relay_pulse_flags& (0+255),f,b
 16085                           
 16086                           ; BSR set to: 0
 16087                           ;main.c: 458: relay_pulse_timer[ i ] =
 16088                           ;main.c: 459: readEEPROM( 0x43 + 18 + i ) * 256 +
 16089                           ;main.c: 460: readEEPROM( 0x43 + 19 + i );
 16090  00344E  0E55               	movlw	85
 16091  003450  240D               	addwf	init_app_ram@i,w,c
 16092  003452  6E08               	movwf	?_readEEPROM,c
 16093  003454  6A09               	clrf	?_readEEPROM+1,c
 16094  003456  0E00               	movlw	0
 16095  003458  2209               	addwfc	?_readEEPROM+1,f,c
 16096  00345A  ECDE  F020         	call	_readEEPROM	;wreg free
 16097  00345E  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16098  003460  6A0B               	clrf	??_init_app_ram& (0+255),c
 16099  003462  0E56               	movlw	86
 16100  003464  240D               	addwf	init_app_ram@i,w,c
 16101  003466  6E08               	movwf	?_readEEPROM,c
 16102  003468  6A09               	clrf	?_readEEPROM+1,c
 16103  00346A  0E00               	movlw	0
 16104  00346C  2209               	addwfc	?_readEEPROM+1,f,c
 16105  00346E  ECDE  F020         	call	_readEEPROM	;wreg free
 16106  003472  260B               	addwf	??_init_app_ram,f,c
 16107  003474  0E00               	movlw	0
 16108  003476  220C               	addwfc	??_init_app_ram+1,f,c
 16109  003478  500D               	movf	init_app_ram@i,w,c
 16110  00347A  0D02               	mullw	2
 16111  00347C  50F3               	movf	prodl,w,c
 16112  00347E  0100               	movlb	0	; () banked
 16113  003480  0F70               	addlw	low _relay_pulse_timer
 16114  003482  6ED9               	movwf	fsr2l,c
 16115  003484  6ADA               	clrf	fsr2h,c
 16116  003486  C00B  FFDE         	movff	??_init_app_ram,postinc2
 16117  00348A  C00C  FFDD         	movff	??_init_app_ram+1,postdec2
 16118  00348E                     l7273:
 16119                           
 16120                           ;main.c: 461: }
 16121                           ;main.c: 464: if ( readEEPROM(0x43 + 15 + i ) & 0x04) {
 16122  00348E  0E52               	movlw	82
 16123  003490  240D               	addwf	init_app_ram@i,w,c
 16124  003492  6E08               	movwf	?_readEEPROM,c
 16125  003494  6A09               	clrf	?_readEEPROM+1,c
 16126  003496  0E00               	movlw	0
 16127  003498  2209               	addwfc	?_readEEPROM+1,f,c
 16128  00349A  ECDE  F020         	call	_readEEPROM	;wreg free
 16129  00349E  6E0B               	movwf	??_init_app_ram& (0+255),c
 16130  0034A0  A40B               	btfss	??_init_app_ram,2,c
 16131  0034A2  D020               	goto	l7277
 16132                           
 16133                           ;main.c: 465: relay_protection_timer[ i ] =
 16134                           ;main.c: 466: readEEPROM(0x43 + 44 + i ) * 256 +
 16135                           ;main.c: 467: readEEPROM(0x43 + 45 + i );
 16136  0034A4  0E6F               	movlw	111
 16137  0034A6  240D               	addwf	init_app_ram@i,w,c
 16138  0034A8  6E08               	movwf	?_readEEPROM,c
 16139  0034AA  6A09               	clrf	?_readEEPROM+1,c
 16140  0034AC  0E00               	movlw	0
 16141  0034AE  2209               	addwfc	?_readEEPROM+1,f,c
 16142  0034B0  ECDE  F020         	call	_readEEPROM	;wreg free
 16143  0034B4  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16144  0034B6  6A0B               	clrf	??_init_app_ram& (0+255),c
 16145  0034B8  0E70               	movlw	112
 16146  0034BA  240D               	addwf	init_app_ram@i,w,c
 16147  0034BC  6E08               	movwf	?_readEEPROM,c
 16148  0034BE  6A09               	clrf	?_readEEPROM+1,c
 16149  0034C0  0E00               	movlw	0
 16150  0034C2  2209               	addwfc	?_readEEPROM+1,f,c
 16151  0034C4  ECDE  F020         	call	_readEEPROM	;wreg free
 16152  0034C8  260B               	addwf	??_init_app_ram,f,c
 16153  0034CA  0E00               	movlw	0
 16154  0034CC  220C               	addwfc	??_init_app_ram+1,f,c
 16155  0034CE  500D               	movf	init_app_ram@i,w,c
 16156  0034D0  0D02               	mullw	2
 16157  0034D2  50F3               	movf	prodl,w,c
 16158  0034D4  0100               	movlb	0	; () banked
 16159  0034D6  0F60               	addlw	low _relay_protection_timer
 16160  0034D8  6ED9               	movwf	fsr2l,c
 16161  0034DA  6ADA               	clrf	fsr2h,c
 16162  0034DC  C00B  FFDE         	movff	??_init_app_ram,postinc2
 16163  0034E0  C00C  FFDD         	movff	??_init_app_ram+1,postdec2
 16164  0034E4                     l7277:
 16165  0034E4  2A0D               	incf	init_app_ram@i,f,c
 16166  0034E6  0E06               	movlw	6
 16167  0034E8  640D               	cpfsgt	init_app_ram@i,c
 16168  0034EA  D799               	goto	l7267
 16169  0034EC  0C06               	retlw	6
 16170  0034EE                     __end_of_init_app_ram:
 16171                           	opt stack 0
 16172                           tblptru	equ	0xFF8
 16173                           tblptrh	equ	0xFF7
 16174                           tblptrl	equ	0xFF6
 16175                           tablat	equ	0xFF5
 16176                           prodh	equ	0xFF4
 16177                           prodl	equ	0xFF3
 16178                           intcon	equ	0xFF2
 16179                           postinc0	equ	0xFEE
 16180                           wreg	equ	0xFE8
 16181                           indf1	equ	0xFE7
 16182                           fsr1h	equ	0xFE2
 16183                           fsr1l	equ	0xFE1
 16184                           indf2	equ	0xFDF
 16185                           postinc2	equ	0xFDE
 16186                           postdec2	equ	0xFDD
 16187                           plusw2	equ	0xFDB
 16188                           fsr2h	equ	0xFDA
 16189                           fsr2l	equ	0xFD9
 16190                           status	equ	0xFD8
 16191                           
 16192 ;; *************** function _WriteTimer0 *****************
 16193 ;; Defined at:
 16194 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16195 ;; Parameters:    Size  Location     Type
 16196 ;;  timer0          2    7[COMRAM] unsigned int 
 16197 ;; Auto vars:     Size  Location     Type
 16198 ;;  timer           2    9[COMRAM] struct Timers
 16199 ;; Return value:  Size  Location     Type
 16200 ;;		None               void
 16201 ;; Registers used:
 16202 ;;		None
 16203 ;; Tracked objects:
 16204 ;;		On entry : 0/0
 16205 ;;		On exit  : 0/0
 16206 ;;		Unchanged: 0/0
 16207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16208 ;;      Params:         2       0       0       0       0       0       0
 16209 ;;      Locals:         2       0       0       0       0       0       0
 16210 ;;      Temps:          0       0       0       0       0       0       0
 16211 ;;      Totals:         4       0       0       0       0       0       0
 16212 ;;Total ram usage:        4 bytes
 16213 ;; Hardware stack levels used:    1
 16214 ;; Hardware stack levels required when called:    2
 16215 ;; This function calls:
 16216 ;;		Nothing
 16217 ;; This function is called by:
 16218 ;;		_init
 16219 ;; This function uses a non-reentrant model
 16220 ;;
 16221                           
 16222                           	psect	text73
 16223  0041AA                     __ptext73:
 16224                           	opt stack 0
 16225  0041AA                     _WriteTimer0:
 16226                           	opt stack 27
 16227                           
 16228                           ;incstack = 0
 16229                           ;incstack = 0
 16230  0041AA  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 16231  0041AE  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 16232  0041B2  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 16233  0041B6  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 16234  0041BA  0012               	return	
 16235  0041BC                     __end_of_WriteTimer0:
 16236                           	opt stack 0
 16237                           tblptru	equ	0xFF8
 16238                           tblptrh	equ	0xFF7
 16239                           tblptrl	equ	0xFF6
 16240                           tablat	equ	0xFF5
 16241                           prodh	equ	0xFF4
 16242                           prodl	equ	0xFF3
 16243                           intcon	equ	0xFF2
 16244                           postinc0	equ	0xFEE
 16245                           wreg	equ	0xFE8
 16246                           indf1	equ	0xFE7
 16247                           fsr1h	equ	0xFE2
 16248                           fsr1l	equ	0xFE1
 16249                           indf2	equ	0xFDF
 16250                           postinc2	equ	0xFDE
 16251                           postdec2	equ	0xFDD
 16252                           plusw2	equ	0xFDB
 16253                           fsr2h	equ	0xFDA
 16254                           fsr2l	equ	0xFD9
 16255                           status	equ	0xFD8
 16256                           
 16257 ;; *************** function _vscp_readAppReg *****************
 16258 ;; Defined at:
 16259 ;;		line 898 in file "../main.c"
 16260 ;; Parameters:    Size  Location     Type
 16261 ;;  reg             1    wreg     unsigned char 
 16262 ;; Auto vars:     Size  Location     Type
 16263 ;;  reg             1   11[COMRAM] unsigned char 
 16264 ;;  rv              1   10[COMRAM] unsigned char 
 16265 ;; Return value:  Size  Location     Type
 16266 ;;                  1    wreg      unsigned char 
 16267 ;; Registers used:
 16268 ;;		wreg, status,2, status,0, cstack
 16269 ;; Tracked objects:
 16270 ;;		On entry : F/0
 16271 ;;		On exit  : 0/0
 16272 ;;		Unchanged: 0/0
 16273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16274 ;;      Params:         0       0       0       0       0       0       0
 16275 ;;      Locals:         2       0       0       0       0       0       0
 16276 ;;      Temps:          0       0       0       0       0       0       0
 16277 ;;      Totals:         2       0       0       0       0       0       0
 16278 ;;Total ram usage:        2 bytes
 16279 ;; Hardware stack levels used:    1
 16280 ;; Hardware stack levels required when called:    3
 16281 ;; This function calls:
 16282 ;;		_readEEPROM
 16283 ;; This function is called by:
 16284 ;;		_vscp_readRegister
 16285 ;;		_vscp_handleProtocolEvent
 16286 ;; This function uses a non-reentrant model
 16287 ;;
 16288                           
 16289                           	psect	text74
 16290  0039E8                     __ptext74:
 16291                           	opt stack 0
 16292  0039E8                     _vscp_readAppReg:
 16293                           	opt stack 25
 16294                           
 16295                           ;incstack = 0
 16296                           ;incstack = 0
 16297                           ;vscp_readAppReg@reg stored from wreg
 16298  0039E8  CFE8 F00C          	movff	wreg,vscp_readAppReg@reg
 16299                           
 16300                           ; BSR set to: 0
 16301                           ;main.c: 899: uint8_t rv;
 16302                           ;main.c: 901: rv = 0x00;
 16303  0039EC  6A0B               	clrf	vscp_readAppReg@rv,c
 16304                           
 16305                           ; BSR set to: 0
 16306                           ;main.c: 904: if ( reg == 0x00 ) {
 16307  0039EE  660C               	tstfsz	vscp_readAppReg@reg,c
 16308  0039F0  D006               	goto	l8053
 16309                           
 16310                           ; BSR set to: 0
 16311                           ;main.c: 905: rv = readEEPROM(0x43 + 0);
 16312  0039F2  6A09               	clrf	?_readEEPROM+1,c
 16313  0039F4  0E43               	movlw	67
 16314  0039F6  6E08               	movwf	?_readEEPROM,c
 16315  0039F8  ECDE  F020         	call	_readEEPROM	;wreg free
 16316  0039FC  D04D               	goto	L50
 16317  0039FE                     l8053:
 16318                           
 16319                           ; BSR set to: 0
 16320                           ;main.c: 908: else if ( reg == 0x01 ) {
 16321  0039FE  040C               	decf	vscp_readAppReg@reg,w,c
 16322  003A00  E106               	bnz	l8057
 16323                           
 16324                           ; BSR set to: 0
 16325                           ;main.c: 909: rv = readEEPROM(0x43 + 1);
 16326  003A02  6A09               	clrf	?_readEEPROM+1,c
 16327  003A04  0E44               	movlw	68
 16328  003A06  6E08               	movwf	?_readEEPROM,c
 16329  003A08  ECDE  F020         	call	_readEEPROM	;wreg free
 16330  003A0C  D045               	goto	L50
 16331  003A0E                     l8057:
 16332                           
 16333                           ; BSR set to: 0
 16334                           ;main.c: 911: else if ( (reg >= 2) && (reg < 10) ) {
 16335  003A0E  0E01               	movlw	1
 16336  003A10  640C               	cpfsgt	vscp_readAppReg@reg,c
 16337  003A12  D034               	goto	l8081
 16338                           
 16339                           ; BSR set to: 0
 16340  003A14  0E0A               	movlw	10
 16341  003A16  600C               	cpfslt	vscp_readAppReg@reg,c
 16342  003A18  D031               	goto	l8081
 16343  003A1A  D01E               	goto	l8079
 16344  003A1C                     l8063:
 16345                           
 16346                           ; BSR set to: 0
 16347                           ;main.c: 917: rv = LATBbits.LATB4;
 16348  003A1C  0E00               	movlw	0
 16349  003A1E  B88A               	btfsc	3978,4,c	;volatile
 16350  003A20  0E01               	movlw	1
 16351  003A22  D03A               	goto	L50
 16352  003A24                     l8065:
 16353                           
 16354                           ; BSR set to: 0
 16355                           ;main.c: 922: rv = LATBbits.LATB1;
 16356  003A24  0E00               	movlw	0
 16357  003A26  B28A               	btfsc	3978,1,c	;volatile
 16358  003A28  0E01               	movlw	1
 16359  003A2A  D036               	goto	L50
 16360  003A2C                     l8067:
 16361                           
 16362                           ; BSR set to: 0
 16363                           ;main.c: 927: rv = LATBbits.LATB0;
 16364  003A2C  0E00               	movlw	0
 16365  003A2E  B08A               	btfsc	3978,0,c	;volatile
 16366  003A30  0E01               	movlw	1
 16367  003A32  D032               	goto	L50
 16368  003A34                     l8069:
 16369                           
 16370                           ; BSR set to: 0
 16371                           ;main.c: 932: rv = LATCbits.LATC7;
 16372  003A34  0E00               	movlw	0
 16373  003A36  BE8B               	btfsc	3979,7,c	;volatile
 16374  003A38  0E01               	movlw	1
 16375  003A3A  D02E               	goto	L50
 16376  003A3C                     l8071:
 16377                           
 16378                           ; BSR set to: 0
 16379                           ;main.c: 937: rv = LATCbits.LATC6;
 16380  003A3C  0E00               	movlw	0
 16381  003A3E  BC8B               	btfsc	3979,6,c	;volatile
 16382  003A40  0E01               	movlw	1
 16383  003A42  D02A               	goto	L50
 16384  003A44                     l8073:
 16385                           
 16386                           ; BSR set to: 0
 16387                           ;main.c: 942: rv = LATCbits.LATC5;
 16388  003A44  0E00               	movlw	0
 16389  003A46  BA8B               	btfsc	3979,5,c	;volatile
 16390  003A48  0E01               	movlw	1
 16391  003A4A  D026               	goto	L50
 16392  003A4C                     l8075:
 16393                           
 16394                           ; BSR set to: 0
 16395                           ;main.c: 947: rv = LATCbits.LATC4;
 16396  003A4C  0E00               	movlw	0
 16397  003A4E  B88B               	btfsc	3979,4,c	;volatile
 16398  003A50  0E01               	movlw	1
 16399  003A52  D022               	goto	L50
 16400  003A54                     l290:
 16401                           
 16402                           ; BSR set to: 0
 16403                           ;main.c: 952: rv = 0;
 16404  003A54  6A0B               	clrf	vscp_readAppReg@rv,c
 16405                           
 16406                           ;main.c: 953: break;
 16407  003A56  D021               	goto	l8087
 16408  003A58                     l8079:
 16409                           
 16410                           ; BSR set to: 0
 16411  003A58  500C               	movf	vscp_readAppReg@reg,w,c
 16412                           
 16413                           ; Switch size 1, requested type "speed"
 16414                           ; Number of cases is 8, Range of values is 2 to 9
 16415                           ; switch strategies available:
 16416                           ; Name         Instructions Cycles
 16417                           ; simple_byte           25    13 (average)
 16418                           ;	Chosen strategy is simple_byte
 16419  003A5A  0A02               	xorlw	2	; case 2
 16420  003A5C  E0DF               	bz	l8063
 16421  003A5E  0A01               	xorlw	1	; case 3
 16422  003A60  E0E1               	bz	l8065
 16423  003A62  0A07               	xorlw	7	; case 4
 16424  003A64  E0E3               	bz	l8067
 16425  003A66  0A01               	xorlw	1	; case 5
 16426  003A68  E0E5               	bz	l8069
 16427  003A6A  0A03               	xorlw	3	; case 6
 16428  003A6C  E0E7               	bz	l8071
 16429  003A6E  0A01               	xorlw	1	; case 7
 16430  003A70  E0E9               	bz	l8073
 16431  003A72  0A0F               	xorlw	15	; case 8
 16432  003A74  E0EB               	bz	l8075
 16433  003A76  0A01               	xorlw	1	; case 9
 16434  003A78  E0ED               	bz	l290
 16435  003A7A  D00F               	goto	l8087
 16436  003A7C                     l8081:
 16437                           
 16438                           ; BSR set to: 0
 16439                           ;main.c: 957: else if ( ( reg >= 10 ) &&
 16440                           ;main.c: 958: (reg < (72 + 7 * 8 ) ) ) {
 16441  003A7C  0E09               	movlw	9
 16442  003A7E  640C               	cpfsgt	vscp_readAppReg@reg,c
 16443  003A80  D00C               	goto	l8087
 16444                           
 16445                           ; BSR set to: 0
 16446  003A82  0E80               	movlw	128
 16447  003A84  600C               	cpfslt	vscp_readAppReg@reg,c
 16448  003A86  D009               	goto	l8087
 16449                           
 16450                           ; BSR set to: 0
 16451                           ;main.c: 959: rv = readEEPROM( 0x43 + reg );
 16452  003A88  0E43               	movlw	67
 16453  003A8A  240C               	addwf	vscp_readAppReg@reg,w,c
 16454  003A8C  6E08               	movwf	?_readEEPROM,c
 16455  003A8E  6A09               	clrf	?_readEEPROM+1,c
 16456  003A90  0E00               	movlw	0
 16457  003A92  2209               	addwfc	?_readEEPROM+1,f,c
 16458  003A94  ECDE  F020         	call	_readEEPROM	;wreg free
 16459  003A98                     L50:
 16460  003A98  6E0B               	movwf	vscp_readAppReg@rv,c
 16461  003A9A                     l8087:
 16462                           
 16463                           ;main.c: 960: }
 16464                           ;main.c: 962: return rv;
 16465  003A9A  500B               	movf	vscp_readAppReg@rv,w,c
 16466  003A9C  0012               	return	
 16467  003A9E                     __end_of_vscp_readAppReg:
 16468                           	opt stack 0
 16469                           tblptru	equ	0xFF8
 16470                           tblptrh	equ	0xFF7
 16471                           tblptrl	equ	0xFF6
 16472                           tablat	equ	0xFF5
 16473                           prodh	equ	0xFF4
 16474                           prodl	equ	0xFF3
 16475                           intcon	equ	0xFF2
 16476                           postinc0	equ	0xFEE
 16477                           wreg	equ	0xFE8
 16478                           indf1	equ	0xFE7
 16479                           fsr1h	equ	0xFE2
 16480                           fsr1l	equ	0xFE1
 16481                           indf2	equ	0xFDF
 16482                           postinc2	equ	0xFDE
 16483                           postdec2	equ	0xFDD
 16484                           plusw2	equ	0xFDB
 16485                           fsr2h	equ	0xFDA
 16486                           fsr2l	equ	0xFD9
 16487                           status	equ	0xFD8
 16488                           
 16489 ;; *************** function _readEEPROM *****************
 16490 ;; Defined at:
 16491 ;;		line 92 in file "../../vscp_firmware/pic/common/eeprom.c"
 16492 ;; Parameters:    Size  Location     Type
 16493 ;;  address         2    7[COMRAM] unsigned short 
 16494 ;; Auto vars:     Size  Location     Type
 16495 ;;  data            1    9[COMRAM] unsigned char 
 16496 ;; Return value:  Size  Location     Type
 16497 ;;                  1    wreg      unsigned char 
 16498 ;; Registers used:
 16499 ;;		wreg, status,2
 16500 ;; Tracked objects:
 16501 ;;		On entry : 0/0
 16502 ;;		On exit  : 0/0
 16503 ;;		Unchanged: 0/0
 16504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16505 ;;      Params:         2       0       0       0       0       0       0
 16506 ;;      Locals:         1       0       0       0       0       0       0
 16507 ;;      Temps:          0       0       0       0       0       0       0
 16508 ;;      Totals:         3       0       0       0       0       0       0
 16509 ;;Total ram usage:        3 bytes
 16510 ;; Hardware stack levels used:    1
 16511 ;; Hardware stack levels required when called:    2
 16512 ;; This function calls:
 16513 ;;		Nothing
 16514 ;; This function is called by:
 16515 ;;		_init_app_ram
 16516 ;;		_doApplicationOneSecondWork
 16517 ;;		_vscp_readNicknamePermanent
 16518 ;;		_vscp_getZone
 16519 ;;		_vscp_getSubzone
 16520 ;;		_vscp_readAppReg
 16521 ;;		_vscp_writeAppReg
 16522 ;;		_SendInformationEvent
 16523 ;;		_doDM
 16524 ;;		_doActionOn
 16525 ;;		_doActionOff
 16526 ;;		_doActionPulse
 16527 ;;		_doActionStatus
 16528 ;;		_doActionDisable
 16529 ;;		_doActionToggle
 16530 ;;		_vscp_getGUID
 16531 ;;		_vscp_getUserID
 16532 ;;		_vscp_getManufacturerId
 16533 ;;		_vscp_getSegmentCRC
 16534 ;;		_calculateSetFilterMask
 16535 ;; This function uses a non-reentrant model
 16536 ;;
 16537                           
 16538                           	psect	text75
 16539  0041BC                     __ptext75:
 16540                           	opt stack 0
 16541  0041BC                     _readEEPROM:
 16542                           	opt stack 26
 16543                           
 16544                           ;eeprom.c: 93: uint8_t data;
 16545                           ;eeprom.c: 98: EEADR = address & 0xff;
 16546                           
 16547                           ;incstack = 0
 16548                           ;incstack = 0
 16549  0041BC  C008  FFA9         	movff	readEEPROM@address,4009	;volatile
 16550                           
 16551                           ;eeprom.c: 99: EECON1bits.EEPGD= 0;
 16552  0041C0  9EA6               	bcf	4006,7,c	;volatile
 16553                           
 16554                           ;eeprom.c: 100: EECON1bits.CFGS = 0;
 16555  0041C2  9CA6               	bcf	4006,6,c	;volatile
 16556                           
 16557                           ;eeprom.c: 101: EECON1bits.RD = 1;
 16558  0041C4  80A6               	bsf	4006,0,c	;volatile
 16559                           
 16560                           ;eeprom.c: 102: data = EEDATA;
 16561  0041C6  CFA8 F00A          	movff	4008,readEEPROM@data	;volatile
 16562                           
 16563                           ;eeprom.c: 104: return data;
 16564  0041CA  500A               	movf	readEEPROM@data,w,c
 16565  0041CC  0012               	return	
 16566  0041CE                     __end_of_readEEPROM:
 16567                           	opt stack 0
 16568                           tblptru	equ	0xFF8
 16569                           tblptrh	equ	0xFF7
 16570                           tblptrl	equ	0xFF6
 16571                           tablat	equ	0xFF5
 16572                           prodh	equ	0xFF4
 16573                           prodl	equ	0xFF3
 16574                           intcon	equ	0xFF2
 16575                           postinc0	equ	0xFEE
 16576                           wreg	equ	0xFE8
 16577                           indf1	equ	0xFE7
 16578                           fsr1h	equ	0xFE2
 16579                           fsr1l	equ	0xFE1
 16580                           indf2	equ	0xFDF
 16581                           postinc2	equ	0xFDE
 16582                           postdec2	equ	0xFDD
 16583                           plusw2	equ	0xFDB
 16584                           fsr2h	equ	0xFDA
 16585                           fsr2l	equ	0xFD9
 16586                           status	equ	0xFD8
 16587                           
 16588 ;; *************** function _interrupt_at_low_vector *****************
 16589 ;; Defined at:
 16590 ;;		line 134 in file "../main.c"
 16591 ;; Parameters:    Size  Location     Type
 16592 ;;		None
 16593 ;; Auto vars:     Size  Location     Type
 16594 ;;		None
 16595 ;; Return value:  Size  Location     Type
 16596 ;;		None               void
 16597 ;; Registers used:
 16598 ;;		wreg, status,2, status,0, cstack
 16599 ;; Tracked objects:
 16600 ;;		On entry : 0/0
 16601 ;;		On exit  : 0/0
 16602 ;;		Unchanged: 0/0
 16603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16604 ;;      Params:         0       0       0       0       0       0       0
 16605 ;;      Locals:         0       0       0       0       0       0       0
 16606 ;;      Temps:          3       0       0       0       0       0       0
 16607 ;;      Totals:         3       0       0       0       0       0       0
 16608 ;;Total ram usage:        3 bytes
 16609 ;; Hardware stack levels used:    1
 16610 ;; Hardware stack levels required when called:    1
 16611 ;; This function calls:
 16612 ;;		i1_WriteTimer0
 16613 ;; This function is called by:
 16614 ;;		Interrupt level 1
 16615 ;; This function uses a non-reentrant model
 16616 ;;
 16617                           
 16618                           	psect	intcodelo
 16619  000818                     __pintcodelo:
 16620                           	opt stack 0
 16621  000818                     _interrupt_at_low_vector:
 16622                           	opt stack 21
 16623                           
 16624                           ;incstack = 0
 16625  000818  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 16626  00081C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 16627  000820  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 16628  000824                     
 16629                           ;main.c: 136: if ( INTCONbits.TMR0IF ) {
 16630  000824  A4F2               	btfss	intcon,2,c	;volatile
 16631  000826  D001               	goto	i1u778_21
 16632  000828  D001               	goto	i1u778_20
 16633  00082A                     i1u778_21:
 16634  00082A  D03E               	goto	i1l145
 16635  00082C                     i1u778_20:
 16636  00082C                     
 16637                           ;main.c: 139: WriteTimer0(0xfb1d);
 16638  00082C  0EFB               	movlw	251
 16639  00082E  6E02               	movwf	?i1_WriteTimer0+1,c
 16640  000830  0E1D               	movlw	29
 16641  000832  6E01               	movwf	?i1_WriteTimer0,c
 16642  000834  ECE7  F020         	call	i1_WriteTimer0	;wreg free
 16643  000838                     
 16644                           ;main.c: 141: vscp_timer++;
 16645  000838  0100               	movlb	0	; () banked
 16646  00083A  4B86               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 16647  00083C  2B87               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 16648  00083E                     
 16649                           ; BSR set to: 0
 16650                           ;main.c: 142: vscp_configtimer++;
 16651  00083E  4B84               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 16652  000840  2B85               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 16653  000842                     
 16654                           ; BSR set to: 0
 16655                           ;main.c: 143: measurement_clock++;
 16656  000842  0E01               	movlw	1
 16657  000844  2780               	addwf	_measurement_clock& (0+255),f,b	;volatile
 16658  000846  0E00               	movlw	0
 16659  000848  2381               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 16660  00084A  0E00               	movlw	0
 16661  00084C  2382               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 16662  00084E  0E00               	movlw	0
 16663  000850  2383               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 16664  000852                     
 16665                           ; BSR set to: 0
 16666                           ;main.c: 146: if ( PORTCbits.RC0 ) {
 16667  000852  A082               	btfss	3970,0,c	;volatile
 16668  000854  D001               	goto	i1u779_21
 16669  000856  D001               	goto	i1u779_20
 16670  000858                     i1u779_21:
 16671  000858  D002               	goto	i1l7081
 16672  00085A                     i1u779_20:
 16673  00085A                     
 16674                           ; BSR set to: 0
 16675                           ;main.c: 147: vscp_initbtncnt = 0;
 16676  00085A  6B8F               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 16677                           
 16678                           ;main.c: 148: } else {
 16679  00085C  D001               	goto	i1l137
 16680  00085E                     i1l7081:
 16681                           
 16682                           ; BSR set to: 0
 16683                           ;main.c: 150: vscp_initbtncnt++;
 16684  00085E  2B8F               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 16685  000860                     i1l137:
 16686                           
 16687                           ; BSR set to: 0
 16688                           ;main.c: 151: }
 16689                           ;main.c: 154: vscp_statuscnt++;
 16690  000860  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 16691  000862                     
 16692                           ; BSR set to: 0
 16693                           ;main.c: 155: if ( ( 0x02 == vscp_initledfunc ) &&
 16694                           ;main.c: 156: ( vscp_statuscnt > 100 ) ) {
 16695  000862  5056               	movf	_vscp_initledfunc,w,c
 16696  000864  0A02               	xorlw	2
 16697  000866  A4D8               	btfss	status,2,c
 16698  000868  D001               	goto	i1u780_21
 16699  00086A  D001               	goto	i1u780_20
 16700  00086C                     i1u780_21:
 16701  00086C  D00E               	goto	i1l7091
 16702  00086E                     i1u780_20:
 16703  00086E                     
 16704                           ; BSR set to: 0
 16705  00086E  0E64               	movlw	100
 16706  000870  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 16707  000872  D001               	goto	i1u781_21
 16708  000874  D001               	goto	i1u781_20
 16709  000876                     i1u781_21:
 16710  000876  D009               	goto	i1l7091
 16711  000878                     i1u781_20:
 16712  000878                     
 16713                           ; BSR set to: 0
 16714                           ;main.c: 158: if ( PORTCbits.RC1 ) {
 16715  000878  A282               	btfss	3970,1,c	;volatile
 16716  00087A  D001               	goto	i1u782_21
 16717  00087C  D001               	goto	i1u782_20
 16718  00087E                     i1u782_21:
 16719  00087E  D002               	goto	i1l139
 16720  000880                     i1u782_20:
 16721  000880                     
 16722                           ; BSR set to: 0
 16723                           ;main.c: 159: PORTCbits.RC1 = 0;
 16724  000880  9282               	bcf	3970,1,c	;volatile
 16725                           
 16726                           ;main.c: 160: }
 16727  000882  D001               	goto	i1l140
 16728  000884                     i1l139:
 16729                           
 16730                           ; BSR set to: 0
 16731                           ;main.c: 161: else {
 16732                           ;main.c: 162: PORTCbits.RC1 = 1;
 16733  000884  8282               	bsf	3970,1,c	;volatile
 16734  000886                     i1l140:
 16735                           
 16736                           ; BSR set to: 0
 16737                           ;main.c: 163: }
 16738                           ;main.c: 165: vscp_statuscnt = 0;
 16739  000886  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16740                           
 16741                           ;main.c: 167: }
 16742  000888  D00E               	goto	i1l141
 16743  00088A                     i1l7091:
 16744                           
 16745                           ; BSR set to: 0
 16746                           ;main.c: 168: else if (0x01 == vscp_initledfunc) {
 16747  00088A  0456               	decf	_vscp_initledfunc,w,c
 16748  00088C  A4D8               	btfss	status,2,c
 16749  00088E  D001               	goto	i1u783_21
 16750  000890  D001               	goto	i1u783_20
 16751  000892                     i1u783_21:
 16752  000892  D003               	goto	i1l142
 16753  000894                     i1u783_20:
 16754  000894                     
 16755                           ; BSR set to: 0
 16756                           ;main.c: 169: PORTCbits.RC1 = 1;
 16757  000894  8282               	bsf	3970,1,c	;volatile
 16758                           
 16759                           ;main.c: 170: vscp_statuscnt = 0;
 16760  000896  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16761                           
 16762                           ;main.c: 171: }
 16763  000898  D006               	goto	i1l141
 16764  00089A                     i1l142:
 16765                           
 16766                           ; BSR set to: 0
 16767                           ;main.c: 172: else if (0x00 == vscp_initledfunc) {
 16768  00089A  6656               	tstfsz	_vscp_initledfunc,c
 16769  00089C  D001               	goto	i1u784_21
 16770  00089E  D001               	goto	i1u784_20
 16771  0008A0                     i1u784_21:
 16772  0008A0  D002               	goto	i1l141
 16773  0008A2                     i1u784_20:
 16774  0008A2                     
 16775                           ; BSR set to: 0
 16776                           ;main.c: 173: PORTCbits.RC1 = 0;
 16777  0008A2  9282               	bcf	3970,1,c	;volatile
 16778                           
 16779                           ;main.c: 174: vscp_statuscnt = 0;
 16780  0008A4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16781  0008A6                     i1l141:
 16782                           
 16783                           ; BSR set to: 0
 16784                           ;main.c: 175: }
 16785                           ;main.c: 177: INTCONbits.TMR0IF = 0;
 16786  0008A6  94F2               	bcf	intcon,2,c	;volatile
 16787  0008A8                     i1l145:
 16788  0008A8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 16789  0008AC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 16790  0008B0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 16791  0008B4  0010               	retfie	
 16792  0008B6                     __end_of_interrupt_at_low_vector:
 16793                           	opt stack 0
 16794                           tblptru	equ	0xFF8
 16795                           tblptrh	equ	0xFF7
 16796                           tblptrl	equ	0xFF6
 16797                           tablat	equ	0xFF5
 16798                           prodh	equ	0xFF4
 16799                           prodl	equ	0xFF3
 16800                           intcon	equ	0xFF2
 16801                           postinc0	equ	0xFEE
 16802                           wreg	equ	0xFE8
 16803                           indf1	equ	0xFE7
 16804                           fsr1h	equ	0xFE2
 16805                           fsr1l	equ	0xFE1
 16806                           bsr	equ	0xFE0
 16807                           indf2	equ	0xFDF
 16808                           postinc2	equ	0xFDE
 16809                           postdec2	equ	0xFDD
 16810                           plusw2	equ	0xFDB
 16811                           fsr2h	equ	0xFDA
 16812                           fsr2l	equ	0xFD9
 16813                           status	equ	0xFD8
 16814                           
 16815 ;; *************** function i1_WriteTimer0 *****************
 16816 ;; Defined at:
 16817 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16818 ;; Parameters:    Size  Location     Type
 16819 ;;  timer0          2    0[COMRAM] unsigned int 
 16820 ;; Auto vars:     Size  Location     Type
 16821 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 16822 ;; Return value:  Size  Location     Type
 16823 ;;		None               void
 16824 ;; Registers used:
 16825 ;;		None
 16826 ;; Tracked objects:
 16827 ;;		On entry : 0/0
 16828 ;;		On exit  : 0/0
 16829 ;;		Unchanged: 0/0
 16830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16831 ;;      Params:         2       0       0       0       0       0       0
 16832 ;;      Locals:         2       0       0       0       0       0       0
 16833 ;;      Temps:          0       0       0       0       0       0       0
 16834 ;;      Totals:         4       0       0       0       0       0       0
 16835 ;;Total ram usage:        4 bytes
 16836 ;; Hardware stack levels used:    1
 16837 ;; This function calls:
 16838 ;;		Nothing
 16839 ;; This function is called by:
 16840 ;;		_interrupt_at_low_vector
 16841 ;; This function uses a non-reentrant model
 16842 ;;
 16843                           
 16844                           	psect	text77
 16845  0041CE                     __ptext77:
 16846                           	opt stack 0
 16847  0041CE                     i1_WriteTimer0:
 16848                           	opt stack 21
 16849                           
 16850                           ;incstack = 0
 16851                           ;incstack = 0
 16852  0041CE  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 16853  0041D2  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 16854  0041D6  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 16855  0041DA  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 16856  0041DE  0012               	return	
 16857  0041E0                     __end_ofi1_WriteTimer0:
 16858                           	opt stack 0
 16859                           tblptru	equ	0xFF8
 16860                           tblptrh	equ	0xFF7
 16861                           tblptrl	equ	0xFF6
 16862                           tablat	equ	0xFF5
 16863                           prodh	equ	0xFF4
 16864                           prodl	equ	0xFF3
 16865                           intcon	equ	0xFF2
 16866                           postinc0	equ	0xFEE
 16867                           wreg	equ	0xFE8
 16868                           indf1	equ	0xFE7
 16869                           fsr1h	equ	0xFE2
 16870                           fsr1l	equ	0xFE1
 16871                           bsr	equ	0xFE0
 16872                           indf2	equ	0xFDF
 16873                           postinc2	equ	0xFDE
 16874                           postdec2	equ	0xFDD
 16875                           plusw2	equ	0xFDB
 16876                           fsr2h	equ	0xFDA
 16877                           fsr2l	equ	0xFD9
 16878                           status	equ	0xFD8
 16879                           tblptru	equ	0xFF8
 16880                           tblptrh	equ	0xFF7
 16881                           tblptrl	equ	0xFF6
 16882                           tablat	equ	0xFF5
 16883                           prodh	equ	0xFF4
 16884                           prodl	equ	0xFF3
 16885                           intcon	equ	0xFF2
 16886                           postinc0	equ	0xFEE
 16887                           wreg	equ	0xFE8
 16888                           indf1	equ	0xFE7
 16889                           fsr1h	equ	0xFE2
 16890                           fsr1l	equ	0xFE1
 16891                           bsr	equ	0xFE0
 16892                           indf2	equ	0xFDF
 16893                           postinc2	equ	0xFDE
 16894                           postdec2	equ	0xFDD
 16895                           plusw2	equ	0xFDB
 16896                           fsr2h	equ	0xFDA
 16897                           fsr2l	equ	0xFD9
 16898                           status	equ	0xFD8
 16899                           
 16900                           	psect	rparam
 16901  0000                     tblptru	equ	0xFF8
 16902                           tblptrh	equ	0xFF7
 16903                           tblptrl	equ	0xFF6
 16904                           tablat	equ	0xFF5
 16905                           prodh	equ	0xFF4
 16906                           prodl	equ	0xFF3
 16907                           intcon	equ	0xFF2
 16908                           postinc0	equ	0xFEE
 16909                           wreg	equ	0xFE8
 16910                           indf1	equ	0xFE7
 16911                           fsr1h	equ	0xFE2
 16912                           fsr1l	equ	0xFE1
 16913                           bsr	equ	0xFE0
 16914                           indf2	equ	0xFDF
 16915                           postinc2	equ	0xFDE
 16916                           postdec2	equ	0xFDD
 16917                           plusw2	equ	0xFDB
 16918                           fsr2h	equ	0xFDA
 16919                           fsr2l	equ	0xFD9
 16920                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     59     140
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionDisable->_writeEEPROM
    _doActionDisable->_readEEPROM
    _doActionStatus->_SendInformationEvent
    _doActionPulse->_readEEPROM
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeAppReg
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_SendInformationEvent
    _calculateSetFilterMask->__CANIDToRegs
    _SendInformationEvent->_sendVSCPFrame
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_readEEPROM
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   70359
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           6     6      0    7490
                                             27 BANK0      6     6      0
                         _readEEPROM
                        _doActionOff
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2438
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                17    17      0   15663
                                             28 BANK0     17    17      0
                         _readEEPROM
                        _doActionOff
                         _doActionOn
                      _doActionPulse
                     _doActionStatus
                    _doActionDisable
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       7     6      1    3454
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionDisable                                      6     5      1     397
                                             10 COMRAM     6     5      1
                        _writeEEPROM
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _doActionStatus                                       7     6      1    3412
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulse                                        7     6      1     353
                                             10 COMRAM     7     6      1
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           7     6      1    3196
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          6     5      1    3196
                                             80 COMRAM     1     0      1
                                             22 BANK0      5     5      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            27    27      0   34505
                                             32 BANK0     27    27      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   11628
                                             30 BANK0      2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                    18    17      1    2519
                                             14 COMRAM    18    17      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     722
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     180
                                             10 COMRAM     4     4      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     9     8      1    8899
                                             80 COMRAM     1     0      1
                                             22 BANK0      8     8      0
                        _writeEEPROM
                         _readEEPROM
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (4) _calculateSetFilterMask                              50    50      0    1879
                                             17 COMRAM    50    50      0
                         _readEEPROM
               _ECANSetOperationMode
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _SendInformationEvent                                 8     6      2    2567
                                             74 COMRAM     6     6      0
                                             20 BANK0      2     0      2
                         _readEEPROM
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1550
                                             13 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                      2     2      0    1077
                                             11 COMRAM     2     2      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     227
                                             11 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     132
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     197
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4624
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     263
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _writeEEPROM                                          3     0      3      44
                                              7 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     700
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (5) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         3     3      0     542
                                             10 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     380
                                             10 COMRAM     2     2      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _init_app_ram
     _readEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _readEEPROM
       _calculateSetFilterMask (ARG)
         _readEEPROM
         _ECANSetOperationMode
         __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _SendInformationEvent
           _readEEPROM
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _readEEPROM
         _calculateSetFilterMask (ARG)
           _readEEPROM
           _ECANSetOperationMode
           __CANIDToRegs
       _vscp_writeStdReg
         _vscp_setGUID
           _writeEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_getGUID
           _readEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
             _readEEPROM
     _vscp_writeStdReg
       _vscp_setGUID
         _writeEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_getGUID
         _readEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
           _readEEPROM
     ___lbmod
   _doDM
     _readEEPROM
     _doActionOff
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulse
       _readEEPROM
     _doActionStatus
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionDisable
       _writeEEPROM
       _readEEPROM
     _doActionToggle
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _readEEPROM
     _doActionOff
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _SendInformationEvent
       _readEEPROM
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3B      8C       5       87.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E4       3        0.0%
DATA                 0      0      F0      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Mar 24 15:48:08 2015

                      doActionToggle@val 00CA                  __end_of_vscp_readAppReg 3A9E  
                  __end_of_sendVSCPFrame 39E8                              __CFG_CPB$ON 000000  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000B  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 36DE  
                  doActionToggle@dmflags 00C9                              __CFG_LVP$ON 000000  
                            __CFG_WDT$ON 000000                                      l211 24F8  
                                    l220 251C                                      l212 2500  
                                    l204 24DC                                      l221 2524  
                                    l205 24E4                                      l310 0A02  
                                    l214 2504                                      l223 2528  
                                    l215 250C                                      l320 0ACC  
                                    l304 09A8                                      l224 2532  
                                    l208 24EC                                      l217 2510  
                                    l209 24F4                                      l330 0B94  
                                    l226 2628                                      l218 2518  
                                    l234 2690                                      l162 3754  
                                    l315 0A68                                      l251 403E  
                                    l411 239E                                      l325 0B30  
                                    l149 36F6                                      l158 373A  
                                    l335 0BF8                                      l247 4060  
                                    l415 20F8                                      l185 2040  
                                    l441 28CE                                      l290 3A54  
                                    l450 282A                                      l442 272A  
                                    l514 35CC                                      l452 286A  
                                    l444 276A                                      l540 331A  
                                    l622 411E                                      l470 381A  
                                    l446 27AA                                      l550 3342  
                                    l471 381E                                      l439 26EA  
                                    l543 3322                                      l472 3822  
                                    l448 27EA                                      l552 3346  
                                    l544 332A                                      l473 3826  
                                    l561 33B2                                      l553 334E  
                                    l474 382A                                      l490 2B90  
                                    l546 332E                                      l395 125E  
                                    l467 3812                                      l491 2BC0  
                                    l555 3352                                      l547 3336  
                                    l539 3312                                      l468 384A  
                                    l492 2BF0                                      l556 335A  
                                    l653 3DC4                                      l469 3816  
                                    l493 2C20                                      l549 333A  
                                    l494 2C50                                      l558 335E  
                                    l647 3BAA                                      l495 2C80  
                                    l559 3368                                      l912 316E  
                                    l488 2B60                                      l658 3EA2  
                                    l907 32BE                        doActionStatus@bOn 00CA  
                                    l917 3C18                                      l853 300A  
                                    l845 2F6E                       vscp_readStdReg@reg 000D  
                                    l871 2990                                      l847 2F8C  
                                    l881 29EC                                      l873 29A4  
                                    l865 2B08                                      l890 2A94  
                                    l858 2934                                      l875 29B8  
                                    l868 2A02                                      l877 29CC  
                                    l869 2982                                      l879 29DC  
                                    l889 2A70           __size_of_vscp_handleProbeState 00BA  
                      doActionStatus@arg 0051                           getVSCPFrame@id 0028  
                      doActionStatus@val 00CB            __end_of_vscp_handleProbeState 3932  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                 _calculateSetFilterMask 18A6                                      wreg 000FE8  
            ?_doApplicationOneSecondWork 0001                                     l1032 3D5A  
                                   l1104 3D46                                     l1108 40D6  
                                   l1212 1450                                     l1037 3FD8  
                   __size_of_doActionOff 00BA                                     l1055 391C  
                                   l1047 392E                                     l1056 38FC  
                                   l1048 38BA                                     l1080 3E08  
                                   l1314 40B8                                     l1090 3E6A  
                                   l1315 40BA                                     l1091 3E76  
                                   l1084 3FB4                                     l1148 401C  
                                   l1236 15E0                                     l1237 15F4  
                                   l1238 1636                                     l1095 3ECC  
                                   l1247 1672                                     l1271 18A4  
                                   l1178 2E9C                                     l1295 3F88  
                                   l1279 3EF6                                     l7051 3F02  
                                   l5613 404C                                     l7303 387A  
              vscp_getManufacturerId@idx 000B                                     l9011 3642  
                                   l9003 362A                                     l5619 402A  
                                   l7059 3F18                                     l8053 39FE  
                                   l7245 3FC4                                     l6701 2AC2  
                                   l6613 2962                                     l6621 2970  
                                   l7341 38D8                                     l7317 3898  
                                   l6437 406E                                     l4685 2042  
                                   l9101 2D5E                                     l8071 3A3C  
                                   l8063 3A1C                                     l6607 294C  
                                   l6615 296C                                     l7343 38DC  
                                   l7319 389E                                     l9015 364E  
                                   l9007 3636                                     l9103 2D62  
                                   l8073 3A44                                     l8065 3A24  
                                   l8081 3A7C                                     l8057 3A0E  
                                   l7273 348E                                     l7257 33F4  
                                   l6473 3B4E                                     l7337 38D4  
                                   l9041 36A2                                     l9033 368C  
                                   l9025 3674                                     l9105 2D78  
                                   l8075 3A4C                                     l8067 3A2C  
                                   l7267 341E                                     l6715 2AF2  
                                   l9019 365E                                     l8069 3A34  
                                   l7277 34E4                                     l6709 2ADC  
                                   l6485 3E80                                     l7373 3920  
                                   l9045 36AE                                     l9037 3696  
                                   l9029 3680                                     l8501 1C8C  
                                   l9117 2DAC                                     l9213 372A  
                                   l9205 3718                                     l8079 3A58  
                                   l8087 3A9A                                     l6727 412C  
                                   l9055 36D0                                     l9127 2E0E  
                                   l9215 372E                                     l9231 3770  
                                   l6761 3BC4                                     l6665 2A16  
                                   l6489 3E84                                     l9049 36BA  
                                   l9057 36DA                                     l8505 1CB6  
                                   l9145 2E84                                     l9137 2E6E  
                                   l9081 2D04                                     l9401 1472  
                                   l9225 374E                                     l9217 3734  
                                   l9209 3720                                     l6771 3BEE  
                                   l6763 3BCE                                     l6675 2A36  
                                   l9155 2E9E                                     l9307 12F2  
                                   l9243 379C                                     l6765 3BD8  
                                   l6757 3BB2                                     l6693 2A96  
                                   l6597 2922                                     l8461 18B8  
                                   l9093 2D40                                     l9405 1482  
                                   l9341 1324                                     l9229 3758  
                                   l6767 3BE2                                     l6759 3BBA  
                                   l6775 3BFA                                     l9087 2D24  
                                   l9415 14E0                                     l9327 1318  
                                   l9271 12A6                                     l8607 2B48  
                                   l9255 37B0                                     l6769 3BE8  
                                   l8481 1BD2                                     l9601 16E6  
                                   l9409 149A                                     l9273 12AC  
                                   l9265 1294                                     l9419 14F6  
                                   l9435 1526                                     l9291 12E4  
                                   l9267 129A                                     l8643 2CB0  
                                   l9259 37B8                                     l9195 36F2  
                                   l6789 30A0                                     l8813 3D92  
                                   l8477 1B44                                     l8469 1B32  
                                   l9621 171E                                     l9605 16EA  
                                   l9533 162A                                     l9525 161A  
                                   l9517 15FC                                     l9453 1578  
                                   l9437 1528                                     l9357 1380  
                                   l9293 12EA                                     l9269 12A0  
                                   l8645 2CD0                                     l8717 3C5C  
                                   l8709 3C28                                     l8831 2EF8  
                                   l8495 1BF0                                     l9543 1638  
                                   l9447 154C                                     l9439 1532  
                                   l9367 13B4                                     l8719 3C84  
                                   l8817 3DC0                                     l9633 176C  
                                   l9625 173E                                     l9529 1622  
                                   l9481 15B4                                     l9465 1594  
                                   l9377 13E8                                     l9721 21F2  
                                   l7881 3D26                                     l8907 31E6  
                                   l8499 1C84                                     l9651 17BA  
                                   l9643 178C                                     l9547 1652  
                                   l9387 141C                                     l9731 22A0  
                                   l7875 3D1C                                     l8837 2F08  
                                   l9629 1754                                     l9725 222C  
                                   l9709 2112                                     l7885 3D2E  
                                   l9813 2536                                     l8871 2FBC  
                                   l9655 17E2                                     l9583 16A2  
                                   l9399 1454                                     l8599 2B10  
                                   l9735 22DA                                     l9743 234E  
                                   l9823 2602                                     l9815 2552  
                                   l9751 23A4                                     l8865 2F8E  
                                   l8849 2F32                                     l8945 3E00  
                                   l9593 16C4                                     l9569 167A  
                                   l9497 15D4                                     l9737 2314  
                                   l9729 2266                                     l9745 2394  
                                   l9833 263A                                     l8859 2F72  
                                   l8891 3002                                     l9915 09B8  
                                   l9827 2614                                     l9755 23AC  
                                   l8885 2FFC                                     l8981 40D0  
                                   l9917 09BE                                     l9909 097A  
                                   l9677 1842                                     l9693 2094  
                                   l9837 264E                                     l9773 2444  
                                   l8879 2FDA                                     l8991 360C  
                                   l9775 2486                                     l9839 268C  
                                   l8889 3000                                     l9937 0A14  
                                   l9929 09E8                                     l9865 382E  
                                   l9857 37F8                                     l9873 386E  
                                   l9849 37C4                                     l9785 24E6  
                                   l8995 3616                                     l9957 0A78  
                                   l9949 0A3C                                     l9885 0908  
                                   l9869 385C                                     l8999 3620  
                                   l9977 0ADC                                     l9969 0AA0  
                                   l9897 0950                                     l9889 0928  
                                   l9997 0B40                                     l9989 0B04  
            __size_of_vscp_getMatrixInfo 0020                           sendCANFrame@id 0037  
                                   u7205 304E                                     u7215 306E  
                                   u7225 30BC                                     u6710 3B9E  
                                   u6715 3B94                           sendCANFrame@rv 003E  
                                   u6885 292A                                     u6887 292C  
                                   u9830 1B64                                     u9815 19A2  
                                   u9904 1C3E                                     u9840 1B8C  
                                   u9905 1C3A                                     u7994 3444  
                                   u7995 3440                                     u9835 1B5A  
                                   u9924 1C5E                                     u9925 1C58  
                                   u9845 1B82                                     u9864 1BAC  
                                   u9865 1BA6                                     u9955 396E  
                                   u9894 1C26                                     u9895 1C22  
                       ??_ECANInitialize 0009                vscp_setManufacturerId@idx 000C  
                                   _doDM 2088                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 36DE  
                                   _init 3E0A                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                    __size_of_vscp_getZone 000A  
                    i1WriteTimer0@timer0 0001                         _vscp_writeAppReg 08DC  
                            _vscp_minute 0090                              _vscp_second 0095  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 08B6                     doActionPulse@dmflags 000F  
          __size_of_vscp_doOneSecondWork 004E                        vscp_getUserID@idx 000B  
                  __size_of_vscp_setGUID 0022                         _vscp_writeStdReg 2CDA  
                        _doActionDisable 3C22                              _writeEEPROM 3F6C  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 3BAC              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 002C                                    l10103 0DFA  
                                  l10201 11AA                                    l10113 0E58  
                                  l10017 0BA4                                    l10009 0B68  
                                  l10041 0C32                                    l10131 0EC2  
                                  l10141 0F20                                    l10117 0E5E  
                                  l10061 0CA4                                    l10029 0BCC  
                                  l10207 11DE                                    l10127 0EBC  
                                  l10071 0D02                                    l10047 0C40  
                                  l10039 0C08                                    l10233 1272  
                                  l10161 100C                                    l10057 0C9E  
                                  l10217 1218                                    l10321 354A  
                                  l10227 1248                                    l10163 1038  
                                  l10155 0F88                                    l10075 0D32  
                                  l10147 0F26                                    l10331 357C  
                                  l10323 3554                                    l10411 339E  
                                  l10403 336C                                    l10237 1286  
                                  l10165 1064                                    l10157 0FB4  
                                  l10173 10E8                                    l10085 0D90  
                                  l10149 0F50                                    l10325 355E  
                                  l10317 352A                                    l10309 34F6  
                                  l10405 3388                                    l10421 33D6  
                                  l10167 1090                                    l10159 0FE0  
                                  l10175 1112                                    l10255 26D0  
                                  l10247 2698                                    l10343 35B8  
                                  l10327 3568                                    l10319 3540  
                                  l10335 3586                                    _B0CON 000E20  
                                  l10169 10BC                                    l10089 0D96  
                                  l10433 4012                                    l10329 3572  
                                  l10337 35A2                                    l10353 35F0  
                                  l10417 33C4                                    l10195 114A  
                                  l10099 0DF4                                    l10291 28AA  
                                  l10371 32FC                                    l10363 32C8  
                                  l10349 35DE                                    l10199 1176  
                                  l10295 28E0                                    l10375 331C  
                                  _B1CON 000E30                                    ?_doDM 0001  
                                  l10299 28F2                                    _B2CON 000E40  
                                  _B3CON 000E50                                    _B4CON 000E60  
          __size_of_SendInformationEvent 006C            __size_of_vscp_getMajorVersion 0002  
                                  _B5CON 000E70               __end_of_vscp_goActiveState 40A0  
          ??_vscp_writeNicknamePermanent 000B                       writeEEPROM@address 0008  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                            i1_WriteTimer0 41CE  
                                  _EEADR 000FA9                          __end_of___lbmod 3F20  
                _vscp_handleDropNickname 3E48                                    _BSEL0 000DF8  
                                  u10124 2B20                                    u10125 2B1C  
                                  u11120 2E66                                    u11125 2E5C  
                                  u12024 2422                                    _T0CON 000FD5  
                                  u12025 241E                                    u11090 2E04  
                                  u13004 3506                                    u10284 3C38  
                                  u12044 2496                                    u13005 3502  
                                  u10285 3C34                                    u12045 2492  
                                  u12214 37D4                                    u11095 2DFA  
                                  u12215 37D0                                    u13104 32D8  
                                  u10625 31AA                                    u13105 32D4  
                                  u10635 31D0                                    u10645 31FA  
                                  u12854 26A8                                    u12855 26A4  
                                  i1l140 0886                                    i1l141 08A6  
                                  i1l142 089A                                    i1l137 0860  
                                  i1l145 08A8                                    i1l139 0884  
                        sendCANFrame@dlc 003B                                    _MSEL0 000DF0  
                                  _MSEL1 000DF1                                    _MSEL2 000DF2  
                                  _IRXIF 007D27                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 4212  
             _vscp_readNicknamePermanent 4208                                    _PORTA 000F80  
                                  _PORTB 000F81                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                         ?_vscp_getSubzone 0001  
                         __CFG_EBTR0$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                           _vscp_getGUID 4160                                    doDM@i 00DD  
                          __CFG_WRTD$OFF 000000                           __CFG_EBTRB$OFF 000000  
                           _vscp_getZone 41EA                       vscp_writeAppReg@rv 00CD  
                                  _hours 0088                _vscp_getRegisterPagesUsed 422A  
                 __size_of_vscp_getEvent 002A                             _vscp_setGUID 4040  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 4230  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 3F46                     _ECANSetOperationMode 4120  
                        __initialization 3FDA                             __end_of_doDM 23A0  
                           __end_of_main 37BE                             __end_of_init 3E48  
                       ?_vscp_readAppReg 0001                  _interrupt_at_low_vector 0818  
                         doDM@class_mask 00D2                           __CFG_OSC$HSPLL 000000  
                      ??_ECANSendMessage 001A                           ?i1_WriteTimer0 0001  
                                 ??_doDM 00CD                         ?_vscp_readStdReg 0001  
                  getVSCPFrame@pvscptype 001E                   ??_vscp_restoreDefaults 000F  
                                 ??_main 0052                                   ??_init 000E  
          __size_of_vscp_handleHeartbeat 003E                 ??_vscp_getManufacturerId 000B  
               ??_vscp_setManufacturerId 000C                 _vscp_handleProtocolEvent 128A  
                          __activetblptr 000002                        __RegsToCANID@type 000B  
             ECANReceiveMessage@msgFlags 0011            doApplicationOneSecondWork@bOn 00CF  
              __size_of__ECANPointBuffer 0076                                   _B0TXEN 006FC2  
                                 _B1TXEN 006FC3                                   _B2TXEN 006FC4  
                                 _B3TXEN 006FC5                                   _B4TXEN 006FC6  
                                 _B5TXEN 006FC7                   __size_of_doActionPulse 01D0  
             ECANReceiveMessage@savedPtr 0012                                   _CANCON 000F6F  
                                 _EEDATA 000FA8                                   _EECON2 000FA7  
                                 _CIOCON 000F73                          __CFG_BBSIZ$2048 000000  
                          doDM@type_mask 00D5                       vscp_writeStdReg@rv 001F  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                                   i1l7071 0838  
                                 i1l7081 085E                                   i1l7073 083E  
                             _OpenTimer0 40A0                                   i1l7091 088A  
                                 i1l7083 0862                                   i1l7075 0842  
                                 i1l7067 0824                                   i1l7093 0894  
                                 i1l7085 086E                                   i1l7077 0852  
                                 i1l7069 082C                                   i1l7095 08A2  
                                 i1l7087 0878                                   i1l7079 085A  
                                 i1l7089 0880                          _init_app_eeprom 1D12  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                __end_of_doActionDisable 3C8E                           __CFG_WDTPS$128 000000  
                                 _RXF1EN 006EA1                   ECANReceiveMessage@data 000F  
                 ECANReceiveMessage@mode 0016                   ECANReceiveMessage@temp 0017  
                      getVSCPFrame@pData 0022                        getVSCPFrame@pSize 0021  
                     _vscp_newNodeOnline 3EA4                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0011   vscp_handleProtocolEvent@page_save_1290 00DA  
                         getCANFrame@pid 001C                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0009                            _vscp_getEvent 3ECE  
                                 _doWork 4228                         OpenTimer0@config 0008  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 000C  
                    vscp_writeAppReg@bOn 00CC          calculateSetFilterMask@rowfilter 003E  
             calculateSetFilterMask@mask 0036                      vscp_writeAppReg@reg 00CE  
             __end_of_vscp_setSegmentCRC 4198                      vscp_writeAppReg@val 0051  
                                 clear_0 3FE0                                   clear_1 3FEC  
                          ?_sendCANFrame 0037             vscp_handleProtocolEvent@byte 00E8  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 0091  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 000B                ??_vscp_getSubMinorVersion 0008  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 000B  
                   ??_vscp_newNodeOnline 004C                          ___lbmod@divisor 0008  
                        doActionToggle@i 00CC                               __accesstop 0060  
                __end_of__initialization 3FF2                          ___lbmod@counter 000A  
          __size_of_vscp_getMinorVersion 0002                          doActionStatus@i 00CC  
                        writeEEPROM@data 000A                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 3FFC                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0026                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001                            _doActionPulse 2B0A  
            __end_of_vscp_check_pstorage 3FDA                  __size_of_vscp_setUserID 0018  
                        ??i1_WriteTimer0 0003                      ?_vscp_writeRegister 00CF  
                         ??_sendCANFrame 003E                               _doActionOn 2692  
                ?_calculateSetFilterMask 0001            calculateSetFilterMask@lastOID 0035  
             __end_of_vscp_getFamilyCode 4208                            ?__RegsToCANID 0008  
            __size_of_ECANReceiveMessage 020E                       sendVSCPFrame@pData 0045  
             __end_of_vscp_getFamilyType 41FE          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 00CF          __size_of_vscp_setManufacturerId 0022  
               __end_of_vscp_writeAppReg 128A                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 2088              __end_of_vscp_setControlByte 4186  
               __end_of_vscp_writeStdReg 2EA2            calculateSetFilterMask@rowmask 0031  
                     __RegsToCANID@Value 000E                     ??_vscp_writeRegister 0052  
        __end_of_vscp_handleDropNickname 3E78                             _getVSCPFrame 3B34  
                             __pbssBANK0 0060                              ?_OpenTimer0 0001  
             __end_of_vscp_getBufferSize 422E                         ?_doActionDisable 000B  
                  vscp_writeRegister@reg 00D0                   ??_ECANSetOperationMode 0008  
     __size_of_vscp_getRegisterPagesUsed 0002                             ?_writeEEPROM 0008  
                         ?_doActionPulse 000B          __end_of_vscp_getSubMinorVersion 4232  
               ECANSetOperationMode@mode 0008                                  _B0RXFUL 007107  
                                _B1RXFUL 007187                     __ECANRxFilterHitInfo 0054  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 000B                                  _B5RXFUL 007387  
         __end_of_calculateSetFilterMask 1D12                  __size_of_doActionToggle 0120  
                       WriteTimer0@timer 000A                  __size_of_doActionStatus 010C  
                                _ECANCON 000F77                            ??_WriteTimer0 000A  
                         ??__RegsToCANID 000C                    sendVSCPFrame@priority 0043  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72           SendInformationEvent@eventClass 00C5  
                    vscp_writeStdReg@idx 001D                      vscp_writeStdReg@reg 0020  
           __end_of_vscp_doOneSecondWork 3D48              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0041                            ??_doActionOff 00C7  
        __end_of_interrupt_at_low_vector 08B6                        sendCANFrame@pdata 003C  
                  _vscp_handleProbeState 3878                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 3BAC               __end_of_vscp_getMatrixInfo 4082  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                    doActionStatus@dmflags 00C9  
                     _vscp_goActiveState 4082                   __size_of_sendVSCPFrame 00B6  
           __end_of_SendInformationEvent 3CFA             __end_of_vscp_getMajorVersion 4236  
                     __size_of_vscp_init 0044                  SendInformationEvent@idx 0050  
              vscp_writeStdReg@code_1270 0019                               _readEEPROM 41BC  
                 _vscp_getManufacturerId 4138                   _vscp_setManufacturerId 401E  
                        _ECANSendMessage 2EA2                      ?_vscp_goActiveState 0001  
                                __Hparam 0000                          ??_vscp_getEvent 002C  
                                __Lparam 0000                       _vscp_node_substate 0093  
             __end_of_vscp_getSegmentCRC 421C               ??_vscp_handleProtocolEvent 00D1  
                          ??_getCANFrame 001C                             doActionOff@i 00CB  
               vscp_writeStdReg@idx_1271 001E        __end_of_vscp_getRegisterPagesUsed 422C  
               __size_of_vscp_getMDF_URL 0018                                  ___lbmod 3EF8  
                        getCANFrame@pdlc 001A                  vscp_writeAppReg@val_678 00CB  
                              _FIFOEMPTY 007BA7                          __size_of_doWork 0002  
                           __psmallconst 08BA                     __end_of_init_app_ram 34EE  
                     _vscp_sendHeartBeat 3F20                                  __pcinit 3FDA  
                         _vscp_deviceURL 08BA                              ?_doActionOn 0051  
                                __ramtop 0600                      __size_of_OpenTimer0 001E  
                                __ptext0 36DE                                  __ptext1 4228  
                                __ptext2 23A0                                  __ptext3 3CFA  
                                __ptext4 3F20                                  __ptext5 41E0  
                                __ptext6 41EA                                  __ptext7 4224  
                                __ptext8 2088                                  __ptext9 32C0  
                         _vscp_getUserID 414C                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 004C                         doActionDisable@i 0010  
                  vscp_writeStdReg@value 000F                      ?_vscp_sendHeartBeat 00C5  
               ??_vscp_handleSetNickname 000C                                  _minutes 0089  
                                _seconds 008B                      __end_of_WriteTimer0 41BC  
                       ?_init_app_eeprom 0001                        vscp_readAppReg@rv 000B  
                     vscp_getMDF_URL@idx 0009            vscp_handleProtocolEvent@bytes 00DE  
                   end_of_initialization 3FF2                      __end_of_doActionOff 3878  
           __end_of_vscp_handleHeartbeat 3E0A                 __size_of_vscp_getSubzone 000A  
                          __Lmediumconst 0000                     __end_of_sendCANFrame 3DCC  
              vscp_handleProtocolEvent@i 00EA                vscp_handleProtocolEvent@j 00EB  
              vscp_handleProtocolEvent@k 00E5                          ??_doActionPulse 000C  
                 doActionDisable@dmflags 000E                     ??_vscp_sendHeartBeat 004C  
                         _vscp_sendEvent 3F46                        ECANSendMessage@id 0012  
                      ECANSendMessage@pb 001B                                  postdec2 000FDD  
                __size_of_ECANInitialize 0096                           _vscp_setUserID 40D8  
                                postinc0 000FEE                                  postinc2 000FDE  
                 __end_of_vscp_deviceURL 08DA      __end_of_vscp_writeNicknamePermanent 41AA  
            _vscp_writeNicknamePermanent 4198                       __ECANPointBuffer@b 000B  
                          _sendVSCPFrame 3932                   __end_of_vscp_getUserID 4160  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0078CB  
                      __end_of_vscp_init 3D8C                           _vscp_probe_cnt 0094  
                              _PORTCbits 000F82                      __end_of_getCANFrame 3EA4  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
               __size_of_vscp_readAppReg 00B6                         ___lbmod@dividend 0009  
                       doActionPulse@arg 000B                           _vscp_statuscnt 0058  
               __size_of_vscp_readStdReg 00E4                         doActionPulse@val 0010  
                     _vscp_setSegmentCRC 4186                        readEEPROM@address 0008  
             vscp_handleProtocolEvent@cb 00E3                  __end_of_ECANSendMessage 300C  
                      vscp_readStdReg@rv 000C                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 00DC  
                   __end_of__RegsToCANID 3170                              ?_readEEPROM 0008  
                    __size_of_doActionOn 026A                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 3F6C                               _vscp_error 4224  
                   _vscp_doOneSecondWork 3CFA                       i1WriteTimer0@timer 0003  
                             _vscp_timer 0086                   __end_of_vscp_setUserID 40F0  
                 vscp_sendHeartBeat@zone 004C                           ?_sendVSCPFrame 003F  
            doApplicationOneSecondWork@i 00D1                           _doActionToggle 32C0  
                   __size_of_writeEEPROM 0026                           _doActionStatus 34EE  
                        ?_vscp_getUserID 0001                           __end_of_doWork 422A  
           __end_of_vscp_getMinorVersion 4234                              _WriteTimer0 41AA  
                   _SendInformationEvent 3C8E                     _vscp_getMajorVersion 4234  
                   ??_vscp_setSegmentCRC 000B                        ??_vscp_getMDF_URL 0008  
          ??_vscp_getBootLoaderAlgorithm 0008                        ?_vscp_writeAppReg 0051  
                    start_initialization 3FDA                              _doActionOff 37BE  
        __size_of_vscp_handleSetNickname 0024                       ??_vscp_writeAppReg 00C7  
                      ?_vscp_writeStdReg 000F                   _relay_protection_timer 0060  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 0008                       ??_vscp_writeStdReg 0010  
                     _vscp_getFamilyCode 41FE                           ??__CANIDToRegs 000F  
                     _vscp_getFamilyType 41F4                         doDM@class_filter 00D0  
                    sendVSCPFrame@nodeid 0042                        _vscp_readRegister 40BE  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 00E2  
                  ?_vscp_doOneSecondWork 0001                    ECANReceiveMessage@ptr 0018  
                    ?_vscp_getFamilyCode 0008                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 18A6                                _doDM$2150 00DA  
                              _doDM$2151 00DB                          ?_vscp_setUserID 000B  
                              _doDM$2146 00D6                                _doDM$2147 00D7  
                              _doDM$2148 00D8                                _doDM$2149 00D9  
                    ?_vscp_getFamilyType 0008                    __size_of_init_app_ram 010E  
               ?_vscp_handleDropNickname 0001                   __end_of_doActionToggle 33E0  
                      ??_vscp_getSubzone 000B                   __end_of_doActionStatus 35FA  
               __end_of__ECANPointBuffer 3C22                        __CANIDToRegs@type 000E  
                            _getCANFrame 3E78                                 ??_doWork 0008  
                     _vscp_getBufferSize 422C              vscp_handleProtocolEvent@len 00DF  
                         doActionOff@arg 0051              vscp_handleProtocolEvent@pos 00DD  
             __end_of_ECANReceiveMessage 2B0A                           doActionOff@val 00CA  
                    ??_vscp_readRegister 000E           __size_of_vscp_goBootloaderMode 0018  
                  ?_SendInformationEvent 00C5                    ?_vscp_getMajorVersion 0001  
                  __end_ofi1_WriteTimer0 41E0            __end_of_vscp_goBootloaderMode 4120  
                   _vscp_handleHeartbeat 3DCC                       __end_of_OpenTimer0 40BE  
    __size_of_doApplicationOneSecondWork 02F2                      ?_vscp_getBufferSize 0001  
                    __size_of_readEEPROM 0012                           doActionPulse@i 0011  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 000C  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0052  
                   ??_vscp_getFamilyType 000C                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 00B1                         _vscp_alarmstatus 008C  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0040  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 000B  
                          ?_vscp_setGUID 000B              __size_of_vscp_writeRegister 0022  
                       ?_ECANSendMessage 0012                        ??_vscp_readAppReg 000B  
                      sendVSCPFrame@size 0044                __end_of_vscp_readRegister 40D8  
                      _relay_pulse_flags 008A                             _init_app_ram 33E0  
                      _relay_pulse_timer 0070             __size_of_vscp_setControlByte 0012  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 000C  
                   ??_vscp_getBufferSize 0008                              ?_vscp_error 0001  
                     _vscp_getMatrixInfo 4062                   _vscp_handleSetNickname 3F92  
          __size_of_ECANSetOperationMode 0018                          ??_sendVSCPFrame 00B1  
                        ?_doActionToggle 0051                           _ECANInitialize 3A9E  
                        ?_doActionStatus 0051                 __size_of_doActionDisable 006C  
                               ?___lbmod 0008                      ?_vscp_getMatrixInfo 0001  
                calculateSetFilterMask@i 0043                  calculateSetFilterMask@j 0042  
                        vscp_getGUID@idx 000B                              __pintcodelo 0818  
                           ??_doActionOn 00C7                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1280 00E1               vscp_setManufacturerId@data 000B  
                           _sendCANFrame 3D8C                              __smallconst 08BA  
                      WriteTimer0@timer0 0008                       _vscp_getSegmentCRC 4212  
                         ??_vscp_getGUID 000B                           ??_vscp_getZone 000B  
                            doActionOn@i 00CC           __end_of_vscp_getManufacturerId 414C  
         __end_of_vscp_setManufacturerId 4040                    __size_of__RegsToCANID 0164  
       vscp_handleProtocolEvent@pos_1279 00E0                          doDM@type_filter 00D4  
                         ??_vscp_setGUID 000C                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 0008                         _vscp_configtimer 0084  
                   vscp_writeStdReg@code 0015                       doActionDisable@arg 000B  
                     doActionDisable@val 000F          SendInformationEvent@eventTypeId 00C6  
                 ??_vscp_doOneSecondWork 004D                   sendVSCPFrame@vscpclass 003F  
                               _LATBbits 000F8A                     _vscp_getMinorVersion 4232  
                               _LATCbits 000F8B                                _sendTimer 0055  
                     __end_of_doActionOn 28FC                   __end_of_ECANInitialize 3B34  
                               _PIR2bits 000FA1                                 i1u780_20 086E  
                               i1u780_21 086C                                 i1u781_20 0878  
                               i1u781_21 0876                                 i1u782_20 0880  
                               i1u782_21 087E                                 i1u783_20 0894  
                               i1u783_21 0892                                 i1u784_20 08A2  
                               i1u784_21 08A0                                 i1u778_20 082C  
                               i1u778_21 082A                                 i1u779_20 085A  
                               i1u779_21 0858                         ECANSendMessage@i 0034  
                       ECANSendMessage@j 002F                    __end_of_vscp_getEvent 3EF8  
                               _RXF0EIDH 000F02                                 _RXF0EIDL 000F03  
                               _RXB0OVFL 007BA7                                 _RXF1EIDH 000F06  
                               _RXF1EIDL 000F07                                 _RXB1OVFL 007BA6  
                               _RXF0SIDH 000F00                                 _RXF0SIDL 000F01  
                               _RXF1SIDH 000F04                                 _RXF1SIDL 000F05  
                               _RXM0EIDH 000F1A                                 _RXM0EIDL 000F1B  
                        vscp_getEvent@rv 002C                                 _RXM1EIDH 000F1E  
                               _RXM1EIDL 000F1F                     ??_vscp_getSegmentCRC 000B  
                               _RXFBCON0 000DE0                                 _RXFBCON1 000DE1  
                               _RXFBCON2 000DE2                                 _RXFBCON3 000DE3  
                               _RXFBCON4 000DE4                                 _RXFBCON5 000DE5  
                               _RXFBCON6 000DE6                                 _RXFBCON7 000DE7  
                               _RXM0SIDH 000F18                                 _RXM0SIDL 000F19  
                 ??_SendInformationEvent 004B                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 0008                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 004C  
                     vscp_setUserID@data 000B                     __end_of__CANIDToRegs 32C0  
                           __RegsToCANID 300C                       _vscp_probe_address 0057  
                     doActionOff@dmflags 00C9              __size_of_vscp_goActiveState 001E  
                    getVSCPFrame@pNodeId 001F                                _vscp_init 3D48  
                              _vscp_imsg 0096                                _vscp_hour 008E  
                              _vscp_omsg 00A4                         vscp_setGUID@data 000B  
      __size_of_vscp_handleProtocolEvent 061C                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001                 SendInformationEvent@data 004D  
   __size_of_vscp_writeNicknamePermanent 0012       __end_of_doApplicationOneSecondWork 2692  
             _doApplicationOneSecondWork 23A0                         _vscp_page_select 0052  
             __size_of_vscp_readRegister 001A                        _measurement_clock 0080  
                  ?_vscp_getMinorVersion 0001                             ??_readEEPROM 000A  
               __size_of_init_app_eeprom 0376             __end_of_vscp_restoreDefaults 4224  
                             _EECON1bits 000FA6                          ?_ECANInitialize 0001  
               ??_calculateSetFilterMask 0012                                 __Hrparam 0000  
                   ECANReceiveMessage@id 0014              __size_of_vscp_sendHeartBeat 0026  
                       ??_vscp_getUserID 000B                          _vscp_getMDF_URL 40F0  
                               __Lrparam 0000                    __end_of_doActionPulse 2CDA  
                       __CANIDToRegs@val 000A                         __CANIDToRegs@ptr 0008  
                          doActionOn@arg 0051                            doActionOn@val 00CB  
                       _vscp_initledfunc 0056                         __size_of___lbmod 0028  
                 ??_vscp_handleHeartbeat 000C                         getCANFrame@flags 001D  
                           ?_WriteTimer0 0008                         getCANFrame@pdata 001B  
                      ??_doActionDisable 000C               vscp_writeAppReg@bInfoEvent 00CA  
                     __end_of_readEEPROM 41CE                               ?_vscp_init 0001  
                           ?_doActionOff 0051                                 __ptext10 3C22  
                               __ptext11 34EE                                 __ptext20 1D12  
                               __ptext12 2B0A                                 __ptext21 41F4  
                               __ptext13 2692                                 __ptext30 35FA  
                               __ptext22 41FE                                 __ptext14 37BE  
                               __ptext31 422A                                 __ptext23 40D8  
                               __ptext15 128A                                 __ptext40 4234  
                               __ptext32 422C                                 __ptext24 401E  
                               __ptext16 3EF8                                 __ptext41 3EA4  
                               __ptext33 422E                                 __ptext25 4040  
                               __ptext17 3FFC                                 __ptext50 4082  
                               __ptext42 3E48                                 __ptext34 4138  
                               __ptext26 08DC                                 __ptext18 2CDA  
                               __ptext51 3F46                                 __ptext43 3D48  
                               __ptext35 414C                                 __ptext27 18A6  
                               __ptext19 421C                                 __ptext60 300C  
                               __ptext52 3932                                 __ptext44 4208  
                               __ptext36 40F0                                 __ptext28 3C8E  
                               __ptext61 3BAC                                 __ptext53 3D8C  
                               __ptext45 3F92                                 __ptext37 4160  
                               __ptext29 40BE                                 __ptext70 4120  
                               __ptext62 3FB6                                 __ptext54 2EA2  
                               __ptext46 3DCC                                 __ptext38 4230  
                               __ptext71 40A0                                 __ptext63 4174  
                               __ptext55 3170                                 __ptext47 4062  
                               __ptext39 4232                                 __ptext72 33E0  
                               __ptext64 4186                                 __ptext56 3ECE  
                               __ptext48 4108                                 __ptext73 41AA  
                               __ptext65 4212                                 __ptext57 3B34  
                               __ptext49 3878                                 __ptext74 39E8  
                               __ptext66 4198                                 __ptext58 3E78  
                               __ptext75 41BC                                 __ptext67 3F6C  
                               __ptext59 28FC                                 __ptext68 3E0A  
                               __ptext77 41CE                                 __ptext69 3A9E  
         vscp_goBootloaderMode@algorithm 000B                vscp_sendHeartBeat@subzone 00C5  
                          ?_getVSCPFrame 001E                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 41E0             calculateSetFilterMask@filter 003A  
                       ??_vscp_setUserID 000C                            __size_of_doDM 0318  
                          __size_of_main 00E0                            __size_of_init 003E  
              __size_of_vscp_writeAppReg 09AE                      _vscp_check_pstorage 3FB6  
                          init_app_ram@i 000D           vscp_handleProtocolEvent@i_1281 00E9  
         vscp_handleProtocolEvent@i_1278 00E7           vscp_handleProtocolEvent@i_1289 00E4  
                   __end_of_vscp_getGUID 4174                            ??_writeEEPROM 000B  
              __size_of_vscp_writeStdReg 01C8                      ECANSendMessage@data 0016  
               ECANSendMessage@tempBSEL0 0030                             ?_getCANFrame 001A  
                    ECANSendMessage@mode 002D                     __end_of_vscp_getZone 41F4  
                    ECANSendMessage@temp 0033                        ?__ECANPointBuffer 0008  
                      doActionOn@dmflags 00CA                        vscp_setUserID@idx 000C  
                   __end_of_vscp_setGUID 4062                       vscp_readAppReg@reg 000C  
                     ??__ECANPointBuffer 000B           vscp_handleProtocolEvent@offset 00DC  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 000C  
                       init_app_eeprom@i 000D                         init_app_eeprom@j 000E  
                    _vscp_setControlByte 4174              __size_of_vscp_setSegmentCRC 0012  
                        _vscp_readAppReg 39E8                     ?_vscp_check_pstorage 0001  
                            _RXB1CONbits 000F50         __size_of_vscp_handleDropNickname 0030  
                             _INTCONbits 000FF2             ??_vscp_readNicknamePermanent 000B  
                    ECANReceiveMessage@i 0015                          _vscp_guid_reset 008D  
                        _vscp_readStdReg 35FA             vscp_handleDropNickname@bytes 000C  
             __end_of_vscp_newNodeOnline 3ECE                       _ECANReceiveMessage 28FC  
                         ??_getVSCPFrame 0023                          _vscp_initbtncnt 008F  
                        sendVSCPFrame@id 0047                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 0008                  vscp_getMatrixInfo@pData 0001  
                __end_of_vscp_getMDF_URL 4108                     ?_vscp_setControlByte 0001  
                    ?_ECANReceiveMessage 000F                  ?_vscp_handleSetNickname 0001  
                       ??_doActionToggle 00C7         __size_of_vscp_getSubMinorVersion 0002  
                       ??_doActionStatus 00C7                          _vscp_node_state 0092  
                           ??_vscp_error 0008                  ECANSendMessage@msgFlags 0019  
                    vscp_getMatrixInfo@i 0008          __size_of_calculateSetFilterMask 046C  
                vscp_setControlByte@ctrl 000B                       ECANSendMessage@ptr 0035  
                      ??_init_app_eeprom 000B                    __size_of__CANIDToRegs 0150  
                         readEEPROM@data 000A      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 4230              _vscp_getBootLoaderAlgorithm 422E  
       __size_of_interrupt_at_low_vector 009E                   ECANSendMessage@dataLen 0018  
                    __end_of_writeEEPROM 3F92                      __ECANPointBuffer@pt 000C  
                   ??_ECANReceiveMessage 0012                    ??_vscp_check_pstorage 000C  
                 ECANSendMessage@buffers 002E                    _vscp_goBootloaderMode 4108  
           __end_of_ECANSetOperationMode 4138                     _vscp_restoreDefaults 421C  
            __size_of_vscp_getFamilyCode 000A                              ??_vscp_init 000B  
                __end_of_vscp_getSubzone 41EA              __size_of_vscp_getFamilyType 000A  
                             _RXM1EXIDEN 0078EB               __end_of_vscp_writeRegister 401E  
                     __end_of_vscp_error 4228                   ECANSendMessage@tempPtr 0031  
         __end_of_vscp_handleSetNickname 3FB6       vscp_handleProtocolEvent@bytes_1286 00E6  
                  ??_vscp_setControlByte 000B                     vscp_readRegister@reg 000E  
           ??_doApplicationOneSecondWork 00CC                             __CANIDToRegs 3170  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00D8  
            __size_of_vscp_getBufferSize 0002        doApplicationOneSecondWork@ctrlreg 00D0  
               __size_of_ECANSendMessage 016A                        doActionToggle@bOn 00CB  
                      doActionToggle@arg 0051  
