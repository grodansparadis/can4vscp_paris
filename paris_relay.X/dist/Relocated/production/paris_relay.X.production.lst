

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Sun Sep 13 18:13:03 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	text76,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    89                           	psect	text78,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    92  0000                     
    93                           	psect	smallconst
    94  0008BC                     __psmallconst:
    95                           	opt stack 0
    96  0008BC                     _vscp_deviceURL:
    97                           	opt stack 0
    98  0008BC  77                 	db	119
    99  0008BD  77                 	db	119
   100  0008BE  77                 	db	119
   101  0008BF  2E                 	db	46
   102  0008C0  65                 	db	101
   103  0008C1  75                 	db	117
   104  0008C2  72                 	db	114
   105  0008C3  6F                 	db	111
   106  0008C4  73                 	db	115
   107  0008C5  6F                 	db	111
   108  0008C6  75                 	db	117
   109  0008C7  72                 	db	114
   110  0008C8  63                 	db	99
   111  0008C9  65                 	db	101
   112  0008CA  2E                 	db	46
   113  0008CB  73                 	db	115
   114  0008CC  65                 	db	101
   115  0008CD  2F                 	db	47
   116  0008CE  70                 	db	112
   117  0008CF  61                 	db	97
   118  0008D0  72                 	db	114
   119  0008D1  69                 	db	105
   120  0008D2  73                 	db	115
   121  0008D3  5F                 	db	95
   122  0008D4  30                 	db	48
   123  0008D5  31                 	db	49
   124  0008D6  30                 	db	48
   125  0008D7  2E                 	db	46
   126  0008D8  78                 	db	120
   127  0008D9  6D                 	db	109
   128  0008DA  6C                 	db	108
   129  0008DB  00                 	db	0
   130  0008DC                     __end_of_vscp_deviceURL:
   131                           	opt stack 0
   132  0000                     _BRGCON1	set	3952
   133  0000                     _BRGCON2	set	3953
   134  0000                     _BRGCON3	set	3954
   135  0000                     _BSEL0	set	3576
   136  0000                     _CANCON	set	3951
   137  0000                     _CIOCON	set	3955
   138  0000                     _ECANCON	set	3959
   139  0000                     _EEADR	set	4009
   140  0000                     _EECON1bits	set	4006
   141  0000                     _EECON2	set	4007
   142  0000                     _EEDATA	set	4008
   143  0000                     _INTCONbits	set	4082
   144  0000                     _LATBbits	set	3978
   145  0000                     _LATCbits	set	3979
   146  0000                     _MSEL0	set	3568
   147  0000                     _MSEL1	set	3569
   148  0000                     _MSEL2	set	3570
   149  0000                     _PORTA	set	3968
   150  0000                     _PORTB	set	3969
   151  0000                     _PORTC	set	3970
   152  0000                     _PORTCbits	set	3970
   153  0000                     _RXB1CONbits	set	3920
   154  0000                     _RXF0EIDH	set	3842
   155  0000                     _RXF0EIDL	set	3843
   156  0000                     _RXF0SIDH	set	3840
   157  0000                     _RXF0SIDL	set	3841
   158  0000                     _RXF1EIDH	set	3846
   159  0000                     _RXF1EIDL	set	3847
   160  0000                     _RXF1SIDL	set	3845
   161  0000                     _RXFBCON0	set	3552
   162  0000                     _RXFBCON1	set	3553
   163  0000                     _RXFBCON2	set	3554
   164  0000                     _RXFBCON3	set	3555
   165  0000                     _RXFBCON4	set	3556
   166  0000                     _RXFBCON5	set	3557
   167  0000                     _RXFBCON6	set	3558
   168  0000                     _RXFBCON7	set	3559
   169  0000                     _RXFCON0	set	3540
   170  0000                     _RXFCON1	set	3541
   171  0000                     _RXM0EIDH	set	3866
   172  0000                     _RXM0EIDL	set	3867
   173  0000                     _RXM0SIDH	set	3864
   174  0000                     _RXM0SIDL	set	3865
   175  0000                     _RXM1EIDH	set	3870
   176  0000                     _RXM1EIDL	set	3871
   177  0000                     _RXM1SIDL	set	3869
   178  0000                     _T0CON	set	4053
   179  0000                     _T0CONbits	set	4053
   180  0000                     _TMR0H	set	4055
   181  0000                     _TMR0L	set	4054
   182  0000                     _TRISA	set	3986
   183  0000                     _TRISB	set	3987
   184  0000                     _TRISC	set	3988
   185  0000                     _B0RXFUL	set	28935
   186  0000                     _B0TXEN	set	28610
   187  0000                     _B1RXFUL	set	29063
   188  0000                     _B1TXEN	set	28611
   189  0000                     _B2RXFUL	set	29191
   190  0000                     _B2TXEN	set	28612
   191  0000                     _B3RXFUL	set	29319
   192  0000                     _B3TXEN	set	28613
   193  0000                     _B4RXFUL	set	29447
   194  0000                     _B4TXEN	set	28614
   195  0000                     _B5RXFUL	set	29575
   196  0000                     _B5TXEN	set	28615
   197  0000                     _FIFOEMPTY	set	31655
   198  0000                     _IRXIF	set	32039
   199  0000                     _MDSEL0	set	31678
   200  0000                     _MDSEL1	set	31679
   201  0000                     _RXB0FILHIT0	set	31488
   202  0000                     _RXB0FUL	set	31495
   203  0000                     _RXB0IF	set	32032
   204  0000                     _RXB0OVFL	set	31655
   205  0000                     _RXB1IF	set	32033
   206  0000                     _RXB1OVFL	set	31654
   207  0000                     _RXF1EN	set	28321
   208  0000                     _RXM0EXIDM	set	30923
   209  0000                     _RXM1EXIDEN	set	30955
   210  0000                     _B0CON	set	3616
   211  0000                     _B1CON	set	3632
   212  0000                     _B2CON	set	3648
   213  0000                     _B3CON	set	3664
   214  0000                     _B4CON	set	3680
   215  0000                     _B5CON	set	3696
   216  0000                     _RXB0CON	set	3936
   217  0000                     _RXB1CON	set	3920
   218  0000                     _RXF1SIDH	set	3844
   219  0000                     _RXM1SIDH	set	3868
   220  0000                     _TXB0CON	set	3904
   221  0000                     _TXB1CON	set	3888
   222  0000                     _TXB2CON	set	3872
   223                           
   224                           ; #config settings
   225  0008DC  00                 	db	0	; dummy byte at the end
   226  0000                     
   227                           	psect	cinit
   228  0042C2                     __pcinit:
   229                           	opt stack 0
   230  0042C2                     start_initialization:
   231                           	opt stack 0
   232  0042C2                     __initialization:
   233                           	opt stack 0
   234                           
   235                           ; Clear objects allocated to BANK0 (81 bytes)
   236  0042C2  EE00  F060         	lfsr	0,__pbssBANK0
   237  0042C6  0E51               	movlw	81
   238  0042C8                     clear_0:
   239  0042C8  6AEE               	clrf	postinc0,c
   240  0042CA  06E8               	decf	wreg,f,c
   241  0042CC  E1FD               	bnz	clear_0
   242                           
   243                           ; Clear objects allocated to COMRAM (7 bytes)
   244  0042CE  EE00  F052         	lfsr	0,__pbssCOMRAM
   245  0042D2  0E07               	movlw	7
   246  0042D4                     clear_1:
   247  0042D4  6AEE               	clrf	postinc0,c
   248  0042D6  06E8               	decf	wreg,f,c
   249  0042D8  E1FD               	bnz	clear_1
   250  0042DA                     end_of_initialization:
   251                           	opt stack 0
   252  0042DA                     __end_of__initialization:
   253                           	opt stack 0
   254  0042DA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   255  0042DC  6EF8               	movwf	tblptru,c
   256  0042DE  0100               	movlb	0
   257  0042E0  EF01  F01D         	goto	_main	;jump to C main() function
   258                           tblptru	equ	0xFF8
   259                           postinc0	equ	0xFEE
   260                           wreg	equ	0xFE8
   261                           
   262                           	psect	bssCOMRAM
   263  000052                     __pbssCOMRAM:
   264                           	opt stack 0
   265  000052                     _vscp_page_select:
   266                           	opt stack 0
   267  000052                     	ds	2
   268  000054                     __ECANRxFilterHitInfo:
   269                           	opt stack 0
   270  000054                     	ds	1
   271  000055                     _vscp_alarmstatus:
   272                           	opt stack 0
   273  000055                     	ds	1
   274  000056                     _vscp_initledfunc:
   275                           	opt stack 0
   276  000056                     	ds	1
   277  000057                     _vscp_probe_address:
   278                           	opt stack 0
   279  000057                     	ds	1
   280  000058                     _vscp_statuscnt:
   281                           	opt stack 0
   282  000058                     	ds	1
   283                           tblptru	equ	0xFF8
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287                           	psect	bssBANK0
   288  000060                     __pbssBANK0:
   289                           	opt stack 0
   290  000060                     _relay_protection_timer:
   291                           	opt stack 0
   292  000060                     	ds	16
   293  000070                     _relay_pulse_timer:
   294                           	opt stack 0
   295  000070                     	ds	16
   296  000080                     _measurement_clock:
   297                           	opt stack 0
   298  000080                     	ds	4
   299  000084                     _vscp_configtimer:
   300                           	opt stack 0
   301  000084                     	ds	2
   302  000086                     _vscp_timer:
   303                           	opt stack 0
   304  000086                     	ds	2
   305  000088                     _hours:
   306                           	opt stack 0
   307  000088                     	ds	1
   308  000089                     _minutes:
   309                           	opt stack 0
   310  000089                     	ds	1
   311  00008A                     _relay_pulse_flags:
   312                           	opt stack 0
   313  00008A                     	ds	1
   314  00008B                     _seconds:
   315                           	opt stack 0
   316  00008B                     	ds	1
   317  00008C                     _sendTimer:
   318                           	opt stack 0
   319  00008C                     	ds	1
   320  00008D                     _vscp_guid_reset:
   321                           	opt stack 0
   322  00008D                     	ds	1
   323  00008E                     _vscp_hour:
   324                           	opt stack 0
   325  00008E                     	ds	1
   326  00008F                     _vscp_initbtncnt:
   327                           	opt stack 0
   328  00008F                     	ds	1
   329  000090                     _vscp_minute:
   330                           	opt stack 0
   331  000090                     	ds	1
   332  000091                     _vscp_nickname:
   333                           	opt stack 0
   334  000091                     	ds	1
   335  000092                     _vscp_node_state:
   336                           	opt stack 0
   337  000092                     	ds	1
   338  000093                     _vscp_node_substate:
   339                           	opt stack 0
   340  000093                     	ds	1
   341  000094                     _vscp_probe_cnt:
   342                           	opt stack 0
   343  000094                     	ds	1
   344  000095                     _vscp_second:
   345                           	opt stack 0
   346  000095                     	ds	1
   347  000096                     _vscp_imsg:
   348                           	opt stack 0
   349  000096                     	ds	14
   350  0000A4                     _vscp_omsg:
   351                           	opt stack 0
   352  0000A4                     	ds	13
   353                           tblptru	equ	0xFF8
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           
   357                           	psect	cstackBANK0
   358  0000B1                     __pcstackBANK0:
   359                           	opt stack 0
   360  0000B1                     ??_sendVSCPFrame:
   361                           
   362                           ; 0 bytes @ 0x0
   363  0000B1                     	ds	20
   364  0000C5                     ?_SendInformationEvent:
   365                           	opt stack 0
   366  0000C5                     ?_vscp_sendHeartBeat:
   367                           	opt stack 0
   368  0000C5                     SendInformationEvent@eventClass:
   369                           	opt stack 0
   370  0000C5                     vscp_sendHeartBeat@subzone:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x14
   374  0000C5                     	ds	1
   375  0000C6                     SendInformationEvent@eventTypeId:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x15
   379  0000C6                     	ds	1
   380  0000C7                     ??_doActionOff:
   381  0000C7                     ??_doActionOn:
   382  0000C7                     ??_doActionStatus:
   383  0000C7                     ??_doActionToggle:
   384  0000C7                     ??_vscp_writeAppReg:
   385                           
   386                           ; 0 bytes @ 0x16
   387  0000C7                     	ds	2
   388  0000C9                     doActionOff@dmflags:
   389                           	opt stack 0
   390  0000C9                     doActionStatus@dmflags:
   391                           	opt stack 0
   392  0000C9                     doActionToggle@dmflags:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x18
   396  0000C9                     	ds	1
   397  0000CA                     vscp_writeAppReg@bInfoEvent:
   398                           	opt stack 0
   399  0000CA                     doActionOn@dmflags:
   400                           	opt stack 0
   401  0000CA                     doActionOff@val:
   402                           	opt stack 0
   403  0000CA                     doActionStatus@bOn:
   404                           	opt stack 0
   405  0000CA                     doActionToggle@val:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x19
   409  0000CA                     	ds	1
   410  0000CB                     vscp_writeAppReg@val_682:
   411                           	opt stack 0
   412  0000CB                     doActionOn@val:
   413                           	opt stack 0
   414  0000CB                     doActionOff@i:
   415                           	opt stack 0
   416  0000CB                     doActionStatus@val:
   417                           	opt stack 0
   418  0000CB                     doActionToggle@bOn:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x1A
   422  0000CB                     	ds	1
   423  0000CC                     ??_doApplicationOneSecondWork:
   424  0000CC                     vscp_writeAppReg@rv:
   425                           	opt stack 0
   426  0000CC                     doActionOn@i:
   427                           	opt stack 0
   428  0000CC                     doActionStatus@i:
   429                           	opt stack 0
   430  0000CC                     doActionToggle@i:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x1B
   434  0000CC                     	ds	1
   435  0000CD                     ??_doDM:
   436  0000CD                     vscp_writeAppReg@bOn:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x1C
   440  0000CD                     	ds	1
   441  0000CE                     vscp_writeAppReg@reg:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x1D
   445  0000CE                     	ds	1
   446  0000CF                     ?_vscp_writeRegister:
   447                           	opt stack 0
   448  0000CF                     doApplicationOneSecondWork@bOn:
   449                           	opt stack 0
   450  0000CF                     vscp_writeRegister@value:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x1E
   454  0000CF                     	ds	1
   455  0000D0                     doApplicationOneSecondWork@ctrlreg:
   456                           	opt stack 0
   457  0000D0                     vscp_writeRegister@reg:
   458                           	opt stack 0
   459  0000D0                     doDM@class_filter:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x1F
   463  0000D0                     	ds	1
   464  0000D1                     ??_vscp_handleProtocolEvent:
   465  0000D1                     doApplicationOneSecondWork@i:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x20
   469  0000D1                     	ds	1
   470  0000D2                     doDM@class_mask:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x21
   474  0000D2                     	ds	2
   475  0000D4                     doDM@type_filter:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x23
   479  0000D4                     	ds	1
   480  0000D5                     doDM@type_mask:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x24
   484  0000D5                     	ds	1
   485  0000D6                     _doDM$2152:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x25
   489  0000D6                     	ds	1
   490  0000D7                     _doDM$2153:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0x26
   494  0000D7                     	ds	1
   495  0000D8                     _doDM$2154:
   496                           	opt stack 0
   497  0000D8                     vscp_handleProtocolEvent@page_save:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x27
   501  0000D8                     	ds	1
   502  0000D9                     _doDM$2155:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x28
   506  0000D9                     	ds	1
   507  0000DA                     _doDM$2156:
   508                           	opt stack 0
   509  0000DA                     vscp_handleProtocolEvent@page_save_1294:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x29
   513  0000DA                     	ds	1
   514  0000DB                     _doDM$2157:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x2A
   518  0000DB                     	ds	1
   519  0000DC                     doDM@dmflags:
   520                           	opt stack 0
   521  0000DC                     vscp_handleProtocolEvent@offset:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x2B
   525  0000DC                     	ds	1
   526  0000DD                     doDM@i:
   527                           	opt stack 0
   528  0000DD                     vscp_handleProtocolEvent@pos:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x2C
   532  0000DD                     	ds	1
   533  0000DE                     vscp_handleProtocolEvent@bytes:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x2D
   537  0000DE                     	ds	1
   538  0000DF                     vscp_handleProtocolEvent@len:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x2E
   542  0000DF                     	ds	1
   543  0000E0                     vscp_handleProtocolEvent@pos_1283:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x2F
   547  0000E0                     	ds	1
   548  0000E1                     vscp_handleProtocolEvent@len_1284:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x30
   552  0000E1                     	ds	1
   553  0000E2                     vscp_handleProtocolEvent@bytes_this_time:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x31
   557  0000E2                     	ds	1
   558  0000E3                     vscp_handleProtocolEvent@cb:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x32
   562  0000E3                     	ds	1
   563  0000E4                     vscp_handleProtocolEvent@i_1293:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x33
   567  0000E4                     	ds	1
   568  0000E5                     vscp_handleProtocolEvent@k:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x34
   572  0000E5                     	ds	1
   573  0000E6                     vscp_handleProtocolEvent@i_1282:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x35
   577  0000E6                     	ds	1
   578  0000E7                     vscp_handleProtocolEvent@byte:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x36
   582  0000E7                     	ds	1
   583  0000E8                     vscp_handleProtocolEvent@bytes_1289:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x37
   587  0000E8                     	ds	2
   588  0000EA                     vscp_handleProtocolEvent@i_1285:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x39
   592  0000EA                     	ds	1
   593  0000EB                     vscp_handleProtocolEvent@i:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x3A
   597  0000EB                     	ds	1
   598  0000EC                     vscp_handleProtocolEvent@j:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x3B
   602  0000EC                     	ds	1
   603                           tblptru	equ	0xFF8
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           
   607                           	psect	cstackCOMRAM
   608  000001                     __pcstackCOMRAM:
   609                           	opt stack 0
   610  000001                     ?i1_WriteTimer0:
   611                           	opt stack 0
   612  000001                     i1WriteTimer0@timer0:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x0
   616  000001                     	ds	2
   617  000003                     i1WriteTimer0@timer:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x2
   621  000003                     	ds	2
   622  000005                     ??_interrupt_at_low_vector:
   623                           
   624                           ; 0 bytes @ 0x4
   625  000005                     	ds	3
   626  000008                     ?_WriteTimer0:
   627                           	opt stack 0
   628  000008                     ?_Write_b_eep:
   629                           	opt stack 0
   630  000008                     ?__CANIDToRegs:
   631                           	opt stack 0
   632  000008                     ?__RegsToCANID:
   633                           	opt stack 0
   634  000008                     ??_vscp_getMDF_URL:
   635  000008                     ?_Read_b_eep:
   636                           	opt stack 0
   637  000008                     ?___lbmod:
   638                           	opt stack 0
   639  000008                     ?__ECANPointBuffer:
   640                           	opt stack 0
   641  000008                     ?_vscp_getFamilyCode:
   642                           	opt stack 0
   643  000008                     ?_vscp_getFamilyType:
   644                           	opt stack 0
   645  000008                     vscp_getMatrixInfo@i:
   646                           	opt stack 0
   647  000008                     ECANSetOperationMode@mode:
   648                           	opt stack 0
   649  000008                     OpenTimer0@config:
   650                           	opt stack 0
   651  000008                     ___lbmod@divisor:
   652                           	opt stack 0
   653  000008                     __CANIDToRegs@ptr:
   654                           	opt stack 0
   655  000008                     __RegsToCANID@ptr:
   656                           	opt stack 0
   657  000008                     Read_b_eep@badd:
   658                           	opt stack 0
   659  000008                     Write_b_eep@badd:
   660                           	opt stack 0
   661  000008                     WriteTimer0@timer0:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x7
   665  000008                     	ds	1
   666  000009                     vscp_getMDF_URL@idx:
   667                           	opt stack 0
   668  000009                     ___lbmod@dividend:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x8
   672  000009                     	ds	1
   673  00000A                     ??_init_app_ram:
   674  00000A                     ?_doActionPulse:
   675                           	opt stack 0
   676  00000A                     vscp_readAppReg@rv:
   677                           	opt stack 0
   678  00000A                     doActionPulse@arg:
   679                           	opt stack 0
   680  00000A                     vscp_getGUID@idx:
   681                           	opt stack 0
   682  00000A                     vscp_getUserID@idx:
   683                           	opt stack 0
   684  00000A                     vscp_getManufacturerId@idx:
   685                           	opt stack 0
   686  00000A                     __RegsToCANID@val:
   687                           	opt stack 0
   688  00000A                     Write_b_eep@bdat:
   689                           	opt stack 0
   690  00000A                     ___lbmod@counter:
   691                           	opt stack 0
   692  00000A                     WriteTimer0@timer:
   693                           	opt stack 0
   694  00000A                     __CANIDToRegs@val:
   695                           	opt stack 0
   696                           
   697                           ; 4 bytes @ 0x9
   698  00000A                     	ds	1
   699  00000B                     ??_doActionPulse:
   700  00000B                     vscp_readAppReg@reg:
   701                           	opt stack 0
   702  00000B                     __RegsToCANID@type:
   703                           	opt stack 0
   704  00000B                     __ECANPointBuffer@b:
   705                           	opt stack 0
   706  00000B                     Write_b_eep@GIE_BIT_VAL:
   707                           	opt stack 0
   708  00000B                     ___lbmod@rem:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0xA
   712  00000B                     	ds	1
   713  00000C                     ??_init_app_eeprom:
   714  00000C                     ?_doActionDisable:
   715                           	opt stack 0
   716  00000C                     ??__RegsToCANID:
   717  00000C                     ??_vscp_readStdReg:
   718  00000C                     ?_vscp_setGUID:
   719                           	opt stack 0
   720  00000C                     ?_vscp_setManufacturerId:
   721                           	opt stack 0
   722  00000C                     ?_vscp_setUserID:
   723                           	opt stack 0
   724  00000C                     init_app_ram@i:
   725                           	opt stack 0
   726  00000C                     vscp_setGUID@data:
   727                           	opt stack 0
   728  00000C                     vscp_setManufacturerId@data:
   729                           	opt stack 0
   730  00000C                     vscp_writeNicknamePermanent@nickname:
   731                           	opt stack 0
   732  00000C                     doActionDisable@arg:
   733                           	opt stack 0
   734  00000C                     vscp_setUserID@data:
   735                           	opt stack 0
   736  00000C                     vscp_setSegmentCRC@crc:
   737                           	opt stack 0
   738  00000C                     vscp_setControlByte@ctrl:
   739                           	opt stack 0
   740  00000C                     vscp_goBootloaderMode@algorithm:
   741                           	opt stack 0
   742  00000C                     __ECANPointBuffer@pt:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0xB
   746  00000C                     	ds	1
   747  00000D                     ??_doActionDisable:
   748  00000D                     vscp_setGUID@idx:
   749                           	opt stack 0
   750  00000D                     vscp_setManufacturerId@idx:
   751                           	opt stack 0
   752  00000D                     vscp_setUserID@idx:
   753                           	opt stack 0
   754  00000D                     vscp_handleDropNickname@bytes:
   755                           	opt stack 0
   756                           
   757                           ; 1 bytes @ 0xC
   758  00000D                     	ds	1
   759  00000E                     init_app_eeprom@i:
   760                           	opt stack 0
   761  00000E                     doActionPulse@val:
   762                           	opt stack 0
   763  00000E                     __CANIDToRegs@type:
   764                           	opt stack 0
   765  00000E                     __RegsToCANID@Value:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0xD
   769  00000E                     	ds	1
   770  00000F                     ??__CANIDToRegs:
   771  00000F                     ?_ECANReceiveMessage:
   772                           	opt stack 0
   773  00000F                     init_app_eeprom@j:
   774                           	opt stack 0
   775  00000F                     doActionPulse@dmflags:
   776                           	opt stack 0
   777  00000F                     doActionDisable@val:
   778                           	opt stack 0
   779  00000F                     ECANReceiveMessage@data:
   780                           	opt stack 0
   781                           
   782                           ; 1 bytes @ 0xE
   783  00000F                     	ds	1
   784  000010                     ?_vscp_writeStdReg:
   785                           	opt stack 0
   786  000010                     doActionPulse@i:
   787                           	opt stack 0
   788  000010                     doActionDisable@dmflags:
   789                           	opt stack 0
   790  000010                     ECANReceiveMessage@dataLen:
   791                           	opt stack 0
   792  000010                     vscp_writeStdReg@value:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0xF
   796  000010                     	ds	1
   797  000011                     ??_vscp_writeStdReg:
   798  000011                     doActionDisable@i:
   799                           	opt stack 0
   800  000011                     ECANReceiveMessage@msgFlags:
   801                           	opt stack 0
   802  000011                     __CANIDToRegs@Value:
   803                           	opt stack 0
   804  000011                     vscp_readStdReg@code:
   805                           	opt stack 0
   806                           
   807                           ; 4 bytes @ 0x10
   808  000011                     	ds	1
   809  000012                     ??_calculateSetFilterMask:
   810  000012                     ?_ECANSendMessage:
   811                           	opt stack 0
   812  000012                     ECANReceiveMessage@savedPtr:
   813                           	opt stack 0
   814  000012                     ECANSendMessage@id:
   815                           	opt stack 0
   816                           
   817                           ; 4 bytes @ 0x11
   818  000012                     	ds	2
   819  000014                     ECANReceiveMessage@id:
   820                           	opt stack 0
   821                           
   822                           ; 1 bytes @ 0x13
   823  000014                     	ds	1
   824  000015                     ECANReceiveMessage@i:
   825                           	opt stack 0
   826  000015                     vscp_writeStdReg@rv:
   827                           	opt stack 0
   828  000015                     vscp_readStdReg@code_1267:
   829                           	opt stack 0
   830                           
   831                           ; 4 bytes @ 0x14
   832  000015                     	ds	1
   833  000016                     ECANReceiveMessage@mode:
   834                           	opt stack 0
   835  000016                     vscp_writeStdReg@reg:
   836                           	opt stack 0
   837  000016                     ECANSendMessage@data:
   838                           	opt stack 0
   839                           
   840                           ; 2 bytes @ 0x15
   841  000016                     	ds	1
   842  000017                     ECANReceiveMessage@temp:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x16
   846  000017                     	ds	1
   847  000018                     ECANSendMessage@dataLen:
   848                           	opt stack 0
   849  000018                     ECANReceiveMessage@ptr:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x17
   853  000018                     	ds	1
   854  000019                     ECANSendMessage@msgFlags:
   855                           	opt stack 0
   856  000019                     vscp_readStdReg@idx:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x18
   860  000019                     	ds	1
   861  00001A                     ??_ECANSendMessage:
   862  00001A                     ?_getCANFrame:
   863                           	opt stack 0
   864  00001A                     getCANFrame@pdlc:
   865                           	opt stack 0
   866  00001A                     vscp_readStdReg@idx_1268:
   867                           	opt stack 0
   868                           
   869                           ; 1 bytes @ 0x19
   870  00001A                     	ds	1
   871  00001B                     getCANFrame@pdata:
   872                           	opt stack 0
   873  00001B                     vscp_readStdReg@rv:
   874                           	opt stack 0
   875  00001B                     ECANSendMessage@pb:
   876                           	opt stack 0
   877                           
   878                           ; 18 bytes @ 0x1A
   879  00001B                     	ds	1
   880  00001C                     getCANFrame@pid:
   881                           	opt stack 0
   882  00001C                     vscp_readStdReg@reg:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0x1B
   886  00001C                     	ds	1
   887  00001D                     getCANFrame@flags:
   888                           	opt stack 0
   889  00001D                     vscp_readRegister@reg:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x1C
   893  00001D                     	ds	1
   894  00001E                     ?_getVSCPFrame:
   895                           	opt stack 0
   896  00001E                     getVSCPFrame@pvscptype:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x1D
   900  00001E                     	ds	1
   901  00001F                     getVSCPFrame@pNodeId:
   902                           	opt stack 0
   903                           
   904                           ; 1 bytes @ 0x1E
   905  00001F                     	ds	1
   906  000020                     getVSCPFrame@pPriority:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x1F
   910  000020                     	ds	1
   911  000021                     getVSCPFrame@pSize:
   912                           	opt stack 0
   913                           
   914                           ; 1 bytes @ 0x20
   915  000021                     	ds	1
   916  000022                     getVSCPFrame@pData:
   917                           	opt stack 0
   918                           
   919                           ; 1 bytes @ 0x21
   920  000022                     	ds	1
   921  000023                     ??_getVSCPFrame:
   922                           
   923                           ; 0 bytes @ 0x22
   924  000023                     	ds	4
   925  000027                     getVSCPFrame@pvscpclass:
   926                           	opt stack 0
   927                           
   928                           ; 1 bytes @ 0x26
   929  000027                     	ds	1
   930  000028                     getVSCPFrame@id:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x27
   934  000028                     	ds	4
   935  00002C                     vscp_getEvent@rv:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x2B
   939  00002C                     	ds	1
   940  00002D                     ECANSendMessage@mode:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x2C
   944  00002D                     	ds	1
   945  00002E                     ECANSendMessage@buffers:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x2D
   949  00002E                     	ds	1
   950  00002F                     ECANSendMessage@j:
   951                           	opt stack 0
   952                           
   953                           ; 1 bytes @ 0x2E
   954  00002F                     	ds	1
   955  000030                     ECANSendMessage@tempBSEL0:
   956                           	opt stack 0
   957                           
   958                           ; 1 bytes @ 0x2F
   959  000030                     	ds	1
   960  000031                     ECANSendMessage@tempPtr:
   961                           	opt stack 0
   962  000031                     calculateSetFilterMask@rowmask:
   963                           	opt stack 0
   964                           
   965                           ; 4 bytes @ 0x30
   966  000031                     	ds	2
   967  000033                     ECANSendMessage@temp:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0x32
   971  000033                     	ds	1
   972  000034                     ECANSendMessage@i:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x33
   976  000034                     	ds	1
   977  000035                     calculateSetFilterMask@lastOID:
   978                           	opt stack 0
   979  000035                     ECANSendMessage@ptr:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x34
   983  000035                     	ds	1
   984  000036                     calculateSetFilterMask@mask:
   985                           	opt stack 0
   986                           
   987                           ; 4 bytes @ 0x35
   988  000036                     	ds	1
   989  000037                     ?_sendCANFrame:
   990                           	opt stack 0
   991  000037                     sendCANFrame@id:
   992                           	opt stack 0
   993                           
   994                           ; 4 bytes @ 0x36
   995  000037                     	ds	3
   996  00003A                     calculateSetFilterMask@filter:
   997                           	opt stack 0
   998                           
   999                           ; 4 bytes @ 0x39
  1000  00003A                     	ds	1
  1001  00003B                     sendCANFrame@dlc:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0x3A
  1005  00003B                     	ds	1
  1006  00003C                     sendCANFrame@pdata:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x3B
  1010  00003C                     	ds	2
  1011  00003E                     calculateSetFilterMask@rowfilter:
  1012                           	opt stack 0
  1013                           
  1014                           ; 4 bytes @ 0x3D
  1015  00003E                     	ds	1
  1016  00003F                     ?_sendVSCPFrame:
  1017                           	opt stack 0
  1018  00003F                     sendVSCPFrame@vscpclass:
  1019                           	opt stack 0
  1020                           
  1021                           ; 2 bytes @ 0x3E
  1022  00003F                     	ds	2
  1023  000041                     sendVSCPFrame@vscptype:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x40
  1027  000041                     	ds	1
  1028  000042                     sendVSCPFrame@nodeid:
  1029                           	opt stack 0
  1030  000042                     calculateSetFilterMask@j:
  1031                           	opt stack 0
  1032                           
  1033                           ; 1 bytes @ 0x41
  1034  000042                     	ds	1
  1035  000043                     sendVSCPFrame@priority:
  1036                           	opt stack 0
  1037  000043                     calculateSetFilterMask@i:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x42
  1041  000043                     	ds	1
  1042  000044                     sendVSCPFrame@size:
  1043                           	opt stack 0
  1044                           
  1045                           ; 1 bytes @ 0x43
  1046  000044                     	ds	1
  1047  000045                     sendVSCPFrame@pData:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x44
  1051  000045                     	ds	2
  1052  000047                     sendVSCPFrame@id:
  1053                           	opt stack 0
  1054                           
  1055                           ; 4 bytes @ 0x46
  1056  000047                     	ds	4
  1057  00004B                     ??_SendInformationEvent:
  1058  00004B                     
  1059                           ; 0 bytes @ 0x4A
  1060  00004B                     	ds	1
  1061  00004C                     ??_vscp_newNodeOnline:
  1062  00004C                     vscp_sendHeartBeat@zone:
  1063                           	opt stack 0
  1064                           
  1065                           ; 1 bytes @ 0x4B
  1066  00004C                     	ds	1
  1067  00004D                     ??_vscp_doOneSecondWork:
  1068  00004D                     SendInformationEvent@data:
  1069                           	opt stack 0
  1070                           
  1071                           ; 3 bytes @ 0x4C
  1072  00004D                     	ds	3
  1073  000050                     SendInformationEvent@idx:
  1074                           	opt stack 0
  1075                           
  1076                           ; 1 bytes @ 0x4F
  1077  000050                     	ds	1
  1078  000051                     ?_doActionOff:
  1079                           	opt stack 0
  1080  000051                     ?_doActionOn:
  1081                           	opt stack 0
  1082  000051                     ?_doActionStatus:
  1083                           	opt stack 0
  1084  000051                     ?_doActionToggle:
  1085                           	opt stack 0
  1086  000051                     ?_vscp_writeAppReg:
  1087                           	opt stack 0
  1088  000051                     vscp_writeAppReg@val:
  1089                           	opt stack 0
  1090  000051                     doActionOn@arg:
  1091                           	opt stack 0
  1092  000051                     doActionOff@arg:
  1093                           	opt stack 0
  1094  000051                     doActionStatus@arg:
  1095                           	opt stack 0
  1096  000051                     doActionToggle@arg:
  1097                           	opt stack 0
  1098                           
  1099                           ; 1 bytes @ 0x50
  1100  000051                     	ds	1
  1101  000052                     tblptru	equ	0xFF8
  1102                           postinc0	equ	0xFEE
  1103                           wreg	equ	0xFE8
  1104                           
  1105                           ; 0 bytes @ 0x51
  1106 ;;
  1107 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1108 ;;
  1109 ;; *************** function _main *****************
  1110 ;; Defined at:
  1111 ;;		line 190 in file "../main.c"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;		None
  1114 ;; Auto vars:     Size  Location     Type
  1115 ;;		None
  1116 ;; Return value:  Size  Location     Type
  1117 ;;		None               void
  1118 ;; Registers used:
  1119 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1120 ;; Tracked objects:
  1121 ;;		On entry : 0/0
  1122 ;;		On exit  : F/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1125 ;;      Params:         0       0       0       0       0       0       0
  1126 ;;      Locals:         0       0       0       0       0       0       0
  1127 ;;      Temps:          0       0       0       0       0       0       0
  1128 ;;      Totals:         0       0       0       0       0       0       0
  1129 ;;Total ram usage:        0 bytes
  1130 ;; Hardware stack levels required when called:   10
  1131 ;; This function calls:
  1132 ;;		_init
  1133 ;;		_vscp_check_pstorage
  1134 ;;		_init_app_eeprom
  1135 ;;		_init_app_ram
  1136 ;;		_vscp_init
  1137 ;;		_Busy_eep
  1138 ;;		_Write_b_eep
  1139 ;;		_vscp_getEvent
  1140 ;;		_vscp_goActiveState
  1141 ;;		_vscp_handleProbeState
  1142 ;;		_vscp_handleProtocolEvent
  1143 ;;		_doDM
  1144 ;;		_vscp_error
  1145 ;;		_vscp_doOneSecondWork
  1146 ;;		_doApplicationOneSecondWork
  1147 ;;		_doWork
  1148 ;; This function is called by:
  1149 ;;		Startup code after reset
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text0
  1154  003A02                     __ptext0:
  1155                           	opt stack 0
  1156  003A02                     _main:
  1157                           	opt stack 21
  1158                           
  1159                           ;main.c: 191: init();
  1160                           
  1161                           ;incstack = 0
  1162                           ;incstack = 0
  1163  003A02  EC34  F020         	call	_init	;wreg free
  1164                           
  1165                           ;main.c: 195: if ( !vscp_check_pstorage() ) {
  1166  003A06  EC4F  F021         	call	_vscp_check_pstorage	;wreg free
  1167  003A0A  0900               	iorlw	0
  1168  003A0C  E104               	bnz	l9785
  1169                           
  1170                           ;main.c: 198: init_app_eeprom();
  1171  003A0E  ECD9  F00E         	call	_init_app_eeprom	;wreg free
  1172                           
  1173                           ;main.c: 199: init_app_ram();
  1174  003A12  EC83  F01B         	call	_init_app_ram	;wreg free
  1175  003A16                     l9785:
  1176                           
  1177                           ;main.c: 202: }
  1178                           ;main.c: 204: vscp_init();
  1179  003A16  ECF3  F01F         	call	_vscp_init	;wreg free
  1180  003A1A                     l151:
  1181                           
  1182                           ; BSR set to: 0
  1183  003A1A  0004               	clrwdt		;# 
  1184                           
  1185                           ;main.c: 210: if ( ( vscp_initbtncnt > 250 ) &&
  1186                           ;main.c: 211: ( 0x01 != vscp_node_state ) ) {
  1187  003A1C  0EFA               	movlw	250
  1188  003A1E  0100               	movlb	0	; () banked
  1189  003A20  658F               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1190  003A22  D00E               	goto	l9799
  1191                           
  1192                           ; BSR set to: 0
  1193  003A24  0592               	decf	_vscp_node_state& (0+255),w,b
  1194  003A26  E00C               	bz	l9799
  1195                           
  1196                           ; BSR set to: 0
  1197                           ;main.c: 214: vscp_nickname = 0xff;
  1198  003A28  6991               	setf	_vscp_nickname& (0+255),b
  1199                           
  1200                           ; BSR set to: 0
  1201                           ;main.c: 215: (Busy_eep(), Write_b_eep(0x01,0xff));
  1202  003A2A  EC6E  F022         	call	_Busy_eep	;wreg free
  1203  003A2E  6A09               	clrf	?_Write_b_eep+1,c
  1204  003A30  0E01               	movlw	1
  1205  003A32  6E08               	movwf	?_Write_b_eep,c
  1206  003A34  0EFF               	movlw	255
  1207  003A36  680A               	setf	?_Write_b_eep+2,c
  1208  003A38  EC53  F020         	call	_Write_b_eep	;wreg free
  1209                           
  1210                           ;main.c: 216: vscp_init();
  1211  003A3C  ECF3  F01F         	call	_vscp_init	;wreg free
  1212  003A40                     l9799:
  1213                           
  1214                           ; BSR set to: 0
  1215                           ;main.c: 218: }
  1216                           ;main.c: 221: vscp_imsg.flags = 0;
  1217  003A40  6B96               	clrf	_vscp_imsg& (0+255),b
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;main.c: 222: vscp_getEvent();
  1221  003A42  ECC8  F020         	call	_vscp_getEvent	;wreg free
  1222                           
  1223                           ;main.c: 224: switch ( vscp_node_state ) {
  1224  003A46  D01C               	goto	l9823
  1225  003A48                     l9803:
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;main.c: 229: if (0xff == vscp_nickname) {
  1229  003A48  2991               	incf	_vscp_nickname& (0+255),w,b
  1230  003A4A  E103               	bnz	l9807
  1231                           
  1232                           ; BSR set to: 0
  1233                           ;main.c: 231: vscp_node_state = 0x01;
  1234  003A4C  0E01               	movlw	1
  1235  003A4E  6F92               	movwf	_vscp_node_state& (0+255),b
  1236                           
  1237                           ;main.c: 232: } else {
  1238  003A50  D023               	goto	l9825
  1239  003A52                     l9807:
  1240                           
  1241                           ; BSR set to: 0
  1242                           ;main.c: 234: vscp_node_state = 0x03;
  1243  003A52  0E03               	movlw	3
  1244  003A54  6F92               	movwf	_vscp_node_state& (0+255),b
  1245  003A56                     l9809:
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;main.c: 235: vscp_goActiveState();
  1249  003A56  EC93  F021         	call	_vscp_goActiveState	;wreg free
  1250  003A5A  D01E               	goto	l9825
  1251  003A5C                     l9811:
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;main.c: 240: vscp_handleProbeState();
  1255  003A5C  EC72  F01D         	call	_vscp_handleProbeState	;wreg free
  1256                           
  1257                           ;main.c: 241: break;
  1258  003A60  D01B               	goto	l9825
  1259  003A62                     l160:
  1260                           
  1261                           ; BSR set to: 0
  1262                           ;main.c: 250: if (vscp_imsg.flags & 0x80) {
  1263  003A62  AF96               	btfss	_vscp_imsg& (0+255),7,b
  1264  003A64  D019               	goto	l9825
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;main.c: 252: if ( 0 == vscp_imsg.vscp_class ) {
  1268  003A66  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  1269  003A68  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1270  003A6A  B4D8               	btfsc	status,2,c
  1271                           
  1272                           ; BSR set to: 0
  1273                           ;main.c: 255: vscp_handleProtocolEvent();
  1274  003A6C  EC84  F009         	call	_vscp_handleProtocolEvent	;wreg free
  1275                           
  1276                           ;main.c: 257: }
  1277                           ;main.c: 259: doDM();
  1278  003A70  EC0A  F011         	call	_doDM	;wreg free
  1279  003A74  D011               	goto	l9825
  1280  003A76                     l9819:
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;main.c: 265: vscp_error();
  1284  003A76  EC71  F022         	call	_vscp_error	;wreg free
  1285                           
  1286                           ;main.c: 266: break;
  1287  003A7A  D00E               	goto	l9825
  1288  003A7C                     l164:
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;main.c: 269: vscp_node_state = 0x00;
  1292  003A7C  6B92               	clrf	_vscp_node_state& (0+255),b
  1293                           
  1294                           ;main.c: 270: break;
  1295  003A7E  D00C               	goto	l9825
  1296  003A80                     l9823:
  1297  003A80  0100               	movlb	0	; () banked
  1298  003A82  5192               	movf	_vscp_node_state& (0+255),w,b
  1299                           
  1300                           ; Switch size 1, requested type "speed"
  1301                           ; Number of cases is 5, Range of values is 0 to 4
  1302                           ; switch strategies available:
  1303                           ; Name         Instructions Cycles
  1304                           ; simple_byte           16     9 (average)
  1305                           ;	Chosen strategy is simple_byte
  1306  003A84  E0E1               	bz	l9803
  1307  003A86  0A01               	xorlw	1	; case 1
  1308  003A88  E0E9               	bz	l9811
  1309  003A8A  0A03               	xorlw	3	; case 2
  1310  003A8C  E0E4               	bz	l9809
  1311  003A8E  0A01               	xorlw	1	; case 3
  1312  003A90  E0E8               	bz	l160
  1313  003A92  0A07               	xorlw	7	; case 4
  1314  003A94  E0F0               	bz	l9819
  1315  003A96  D7F2               	goto	l164
  1316  003A98                     l9825:
  1317                           
  1318                           ;main.c: 275: if ( measurement_clock > 1000 ) {
  1319  003A98  0EE9               	movlw	233
  1320  003A9A  0100               	movlb	0	; () banked
  1321  003A9C  5D80               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1322  003A9E  0E03               	movlw	3
  1323  003AA0  5981               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1324  003AA2  0E00               	movlw	0
  1325  003AA4  5982               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1326  003AA6  0E00               	movlw	0
  1327  003AA8  5983               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1328  003AAA  E30B               	bnc	l9835
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;main.c: 277: measurement_clock = 0;
  1332  003AAC  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
  1333  003AAE  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1334  003AB0  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1335  003AB2  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;main.c: 280: vscp_doOneSecondWork();
  1339  003AB4  ECCC  F01F         	call	_vscp_doOneSecondWork	;wreg free
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;main.c: 284: if ( 0x03 == vscp_node_state ) {
  1343  003AB8  5192               	movf	_vscp_node_state& (0+255),w,b
  1344  003ABA  0A03               	xorlw	3
  1345  003ABC  B4D8               	btfsc	status,2,c
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;main.c: 287: doApplicationOneSecondWork();
  1349  003ABE  EC89  F012         	call	_doApplicationOneSecondWork	;wreg free
  1350  003AC2                     l9835:
  1351                           
  1352                           ; BSR set to: 0
  1353                           ;main.c: 289: }
  1354                           ;main.c: 291: }
  1355                           ;main.c: 294: if ( seconds > 59 ) {
  1356  003AC2  0E3B               	movlw	59
  1357  003AC4  658B               	cpfsgt	_seconds& (0+255),b
  1358  003AC6  D00B               	goto	l9851
  1359                           
  1360                           ; BSR set to: 0
  1361                           ;main.c: 296: seconds = 0;
  1362  003AC8  6B8B               	clrf	_seconds& (0+255),b
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;main.c: 297: minutes++;
  1366  003ACA  2B89               	incf	_minutes& (0+255),f,b
  1367                           
  1368                           ; BSR set to: 0
  1369                           ;main.c: 299: if ( minutes > 59 ) {
  1370  003ACC  0E3B               	movlw	59
  1371  003ACE  6589               	cpfsgt	_minutes& (0+255),b
  1372  003AD0  D002               	goto	l9847
  1373                           
  1374                           ; BSR set to: 0
  1375                           ;main.c: 300: minutes = 0;
  1376  003AD2  6B89               	clrf	_minutes& (0+255),b
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;main.c: 301: hours++;
  1380  003AD4  2B88               	incf	_hours& (0+255),f,b
  1381  003AD6                     l9847:
  1382                           
  1383                           ; BSR set to: 0
  1384                           ;main.c: 302: }
  1385                           ;main.c: 304: if ( hours > 23 ) hours = 0;
  1386  003AD6  0E17               	movlw	23
  1387  003AD8  6588               	cpfsgt	_hours& (0+255),b
  1388  003ADA  D001               	goto	l9851
  1389                           
  1390                           ; BSR set to: 0
  1391  003ADC  6B88               	clrf	_hours& (0+255),b
  1392  003ADE                     l9851:
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;main.c: 306: }
  1396                           ;main.c: 308: doWork();
  1397  003ADE  EC73  F022         	call	_doWork	;wreg free
  1398  003AE2  D79B               	goto	l151
  1399  003AE4                     __end_of_main:
  1400                           	opt stack 0
  1401                           tblptru	equ	0xFF8
  1402                           postinc0	equ	0xFEE
  1403                           wreg	equ	0xFE8
  1404                           status	equ	0xFD8
  1405                           
  1406 ;; *************** function _doWork *****************
  1407 ;; Defined at:
  1408 ;;		line 885 in file "../main.c"
  1409 ;; Parameters:    Size  Location     Type
  1410 ;;		None
  1411 ;; Auto vars:     Size  Location     Type
  1412 ;;		None
  1413 ;; Return value:  Size  Location     Type
  1414 ;;		None               void
  1415 ;; Registers used:
  1416 ;;		wreg, status,2, status,0
  1417 ;; Tracked objects:
  1418 ;;		On entry : F/0
  1419 ;;		On exit  : F/0
  1420 ;;		Unchanged: F/0
  1421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1422 ;;      Params:         0       0       0       0       0       0       0
  1423 ;;      Locals:         0       0       0       0       0       0       0
  1424 ;;      Temps:          0       0       0       0       0       0       0
  1425 ;;      Totals:         0       0       0       0       0       0       0
  1426 ;;Total ram usage:        0 bytes
  1427 ;; Hardware stack levels used:    1
  1428 ;; Hardware stack levels required when called:    2
  1429 ;; This function calls:
  1430 ;;		Nothing
  1431 ;; This function is called by:
  1432 ;;		_main
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436                           	psect	text1
  1437  0044E6                     __ptext1:
  1438                           	opt stack 0
  1439  0044E6                     _doWork:
  1440                           	opt stack 28
  1441                           
  1442                           ; BSR set to: 0
  1443                           
  1444                           ; BSR set to: 0
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;incstack = 0
  1448                           ;incstack = 0
  1449  0044E6  0012               	return	
  1450  0044E8                     __end_of_doWork:
  1451                           	opt stack 0
  1452                           tblptru	equ	0xFF8
  1453                           postinc0	equ	0xFEE
  1454                           wreg	equ	0xFE8
  1455                           status	equ	0xFD8
  1456                           
  1457 ;; *************** function _doApplicationOneSecondWork *****************
  1458 ;; Defined at:
  1459 ;;		line 590 in file "../main.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;		None
  1462 ;; Auto vars:     Size  Location     Type
  1463 ;;  i               1   32[BANK0 ] unsigned char 
  1464 ;;  ctrlreg         1   31[BANK0 ] unsigned char 
  1465 ;;  bOn             1   30[BANK0 ] enum E15660
  1466 ;; Return value:  Size  Location     Type
  1467 ;;		None               void
  1468 ;; Registers used:
  1469 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1470 ;; Tracked objects:
  1471 ;;		On entry : F/0
  1472 ;;		On exit  : F/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1475 ;;      Params:         0       0       0       0       0       0       0
  1476 ;;      Locals:         0       3       0       0       0       0       0
  1477 ;;      Temps:          0       3       0       0       0       0       0
  1478 ;;      Totals:         0       6       0       0       0       0       0
  1479 ;;Total ram usage:        6 bytes
  1480 ;; Hardware stack levels used:    1
  1481 ;; Hardware stack levels required when called:    8
  1482 ;; This function calls:
  1483 ;;		_Read_b_eep
  1484 ;;		_doActionOff
  1485 ;;		_SendInformationEvent
  1486 ;; This function is called by:
  1487 ;;		_main
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           	psect	text2
  1492  002512                     __ptext2:
  1493                           	opt stack 0
  1494  002512                     _doApplicationOneSecondWork:
  1495                           	opt stack 22
  1496                           
  1497                           ; BSR set to: 0
  1498                           ;main.c: 592: uint8_t i;
  1499                           ;main.c: 593: uint8_t ctrlreg;
  1500                           ;main.c: 594: BOOL bOn = 0;
  1501                           
  1502                           ; BSR set to: 0
  1503                           ;incstack = 0
  1504                           ;incstack = 0
  1505  002512  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1506                           
  1507                           ;main.c: 596: for ( i = 0; i < 8; i++ ) {
  1508  002514  6BD1               	clrf	doApplicationOneSecondWork@i& (0+255),b
  1509  002516                     l10343:
  1510                           
  1511                           ; BSR set to: 0
  1512  002516  0E07               	movlw	7
  1513  002518  65D1               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  1514  00251A  D001               	goto	l10347
  1515  00251C  D172               	goto	l236
  1516  00251E                     l10347:
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;main.c: 599: ctrlreg = Read_b_eep(0x43 + 10 + i);
  1520  00251E  0E4D               	movlw	77
  1521  002520  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1522  002522  6E08               	movwf	?_Read_b_eep,c
  1523  002524  6A09               	clrf	?_Read_b_eep+1,c
  1524  002526  0E00               	movlw	0
  1525  002528  2209               	addwfc	?_Read_b_eep+1,f,c
  1526  00252A  EC3A  F022         	call	_Read_b_eep	;wreg free
  1527  00252E  0100               	movlb	0	; () banked
  1528  002530  6FD0               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;main.c: 602: if ( !( ctrlreg & 0x80 ) ) continue;
  1532  002532  AFD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  1533  002534  D164               	goto	l10431
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;main.c: 606: if ( relay_protection_timer[ i ] ) {
  1537                           
  1538                           ; BSR set to: 0
  1539  002536  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1540  002538  0D02               	mullw	2
  1541  00253A  50F3               	movf	prodl,w,c
  1542  00253C  0F60               	addlw	low _relay_protection_timer
  1543  00253E  6ED9               	movwf	fsr2l,c
  1544  002540  6ADA               	clrf	fsr2h,c
  1545  002542  50DE               	movf	postinc2,w,c
  1546  002544  10DD               	iorwf	postdec2,w,c
  1547  002546  E037               	bz	l10365
  1548                           
  1549                           ; BSR set to: 0
  1550                           ;main.c: 608: relay_protection_timer[ i ]--;
  1551  002548  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1552  00254A  0D02               	mullw	2
  1553  00254C  50F3               	movf	prodl,w,c
  1554  00254E  0F60               	addlw	low _relay_protection_timer
  1555  002550  6ED9               	movwf	fsr2l,c
  1556  002552  6ADA               	clrf	fsr2h,c
  1557  002554  06DE               	decf	postinc2,f,c
  1558  002556  0E00               	movlw	0
  1559  002558  5ADD               	subwfb	postdec2,f,c
  1560                           
  1561                           ;main.c: 611: if ( !relay_protection_timer[ i ] &&
  1562                           ;main.c: 612: ( Read_b_eep(0x43 + 10 + i) &
  1563                           ;main.c: 613: 0x04 ) ) {
  1564  00255A  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1565  00255C  0D02               	mullw	2
  1566  00255E  50F3               	movf	prodl,w,c
  1567  002560  0F60               	addlw	low _relay_protection_timer
  1568  002562  6ED9               	movwf	fsr2l,c
  1569  002564  6ADA               	clrf	fsr2h,c
  1570  002566  50DE               	movf	postinc2,w,c
  1571  002568  10DD               	iorwf	postdec2,w,c
  1572  00256A  E146               	bnz	l10367
  1573                           
  1574                           ; BSR set to: 0
  1575  00256C  0E4D               	movlw	77
  1576  00256E  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1577  002570  6E08               	movwf	?_Read_b_eep,c
  1578  002572  6A09               	clrf	?_Read_b_eep+1,c
  1579  002574  0E00               	movlw	0
  1580  002576  2209               	addwfc	?_Read_b_eep+1,f,c
  1581  002578  EC3A  F022         	call	_Read_b_eep	;wreg free
  1582  00257C  0100               	movlb	0	; () banked
  1583  00257E  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1584  002580  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1585  002582  D03A               	goto	l10367
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;main.c: 616: doActionOff( 0, (1 << i) );
  1589  002584  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1590  002588  0E01               	movlw	1
  1591  00258A  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1592  00258C  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1593  00258E  D002               	goto	u12344
  1594  002590                     u12345:
  1595  002590  90D8               	bcf	status,0,c
  1596  002592  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1597  002594                     u12344:
  1598  002594  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1599  002596  D7FC               	goto	u12345
  1600  002598  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1601  00259A  6E51               	movwf	?_doActionOff,c
  1602  00259C  0E00               	movlw	0
  1603  00259E  EC8D  F01C         	call	_doActionOff
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;main.c: 619: if ( ctrlreg & 0x02 ) {
  1607  0025A2  A3D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  1608  0025A4  D029               	goto	l10367
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;main.c: 620: SendInformationEvent( i, 1,
  1612                           ;main.c: 621: 2 );
  1613  0025A6  0E01               	movlw	1
  1614  0025A8  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1615  0025AA  0E02               	movlw	2
  1616  0025AC  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1617  0025AE  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1618  0025B0  EC96  F01F         	call	_SendInformationEvent
  1619  0025B4  D021               	goto	l10367
  1620  0025B6                     l10365:
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;main.c: 626: else {
  1624                           ;main.c: 628: relay_protection_timer[ i ] =
  1625                           ;main.c: 629: Read_b_eep(0x43 + 34 + i) * 256 +
  1626                           ;main.c: 630: Read_b_eep(0x43 + 35 + i);
  1627  0025B6  0E65               	movlw	101
  1628  0025B8  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1629  0025BA  6E08               	movwf	?_Read_b_eep,c
  1630  0025BC  6A09               	clrf	?_Read_b_eep+1,c
  1631  0025BE  0E00               	movlw	0
  1632  0025C0  2209               	addwfc	?_Read_b_eep+1,f,c
  1633  0025C2  EC3A  F022         	call	_Read_b_eep	;wreg free
  1634  0025C6  0100               	movlb	0	; () banked
  1635  0025C8  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1636  0025CA  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1637  0025CC  0E66               	movlw	102
  1638  0025CE  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1639  0025D0  6E08               	movwf	?_Read_b_eep,c
  1640  0025D2  6A09               	clrf	?_Read_b_eep+1,c
  1641  0025D4  0E00               	movlw	0
  1642  0025D6  2209               	addwfc	?_Read_b_eep+1,f,c
  1643  0025D8  EC3A  F022         	call	_Read_b_eep	;wreg free
  1644  0025DC  0100               	movlb	0	; () banked
  1645  0025DE  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1646  0025E0  0E00               	movlw	0
  1647  0025E2  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1648  0025E4  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1649  0025E6  0D02               	mullw	2
  1650  0025E8  50F3               	movf	prodl,w,c
  1651  0025EA  0F60               	addlw	low _relay_protection_timer
  1652  0025EC  6ED9               	movwf	fsr2l,c
  1653  0025EE  6ADA               	clrf	fsr2h,c
  1654  0025F0  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1655  0025F4  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1656  0025F8                     l10367:
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;main.c: 631: }
  1660                           ;main.c: 634: if ( relay_pulse_flags & (1 << i) ) {
  1661  0025F8  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1662  0025FC  0E01               	movlw	1
  1663  0025FE  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1664  002600  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1665  002602  D002               	goto	u12364
  1666  002604                     u12365:
  1667  002604  90D8               	bcf	status,0,c
  1668  002606  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1669  002608                     u12364:
  1670  002608  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1671  00260A  D7FC               	goto	u12365
  1672  00260C  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1673  00260E  158A               	andwf	_relay_pulse_flags& (0+255),w,b
  1674  002610  E101 D0F5          	bz	l10431
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;main.c: 636: if ( relay_pulse_timer[ i ] ) {
  1678  002614  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1679  002616  0D02               	mullw	2
  1680  002618  50F3               	movf	prodl,w,c
  1681  00261A  0F70               	addlw	low _relay_pulse_timer
  1682  00261C  6ED9               	movwf	fsr2l,c
  1683  00261E  6ADA               	clrf	fsr2h,c
  1684  002620  50DE               	movf	postinc2,w,c
  1685  002622  10DD               	iorwf	postdec2,w,c
  1686  002624  E101 D0CC          	bz	l10429
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;main.c: 638: relay_pulse_timer[ i ]--;
  1690  002628  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1691  00262A  0D02               	mullw	2
  1692  00262C  50F3               	movf	prodl,w,c
  1693  00262E  0F70               	addlw	low _relay_pulse_timer
  1694  002630  6ED9               	movwf	fsr2l,c
  1695  002632  6ADA               	clrf	fsr2h,c
  1696  002634  06DE               	decf	postinc2,f,c
  1697  002636  0E00               	movlw	0
  1698  002638  5ADD               	subwfb	postdec2,f,c
  1699                           
  1700                           ;main.c: 641: if ( !relay_pulse_timer[ i ] ) {
  1701  00263A  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1702  00263C  0D02               	mullw	2
  1703  00263E  50F3               	movf	prodl,w,c
  1704  002640  0F70               	addlw	low _relay_pulse_timer
  1705  002642  6ED9               	movwf	fsr2l,c
  1706  002644  6ADA               	clrf	fsr2h,c
  1707  002646  50DE               	movf	postinc2,w,c
  1708  002648  10DD               	iorwf	postdec2,w,c
  1709  00264A  E02E               	bz	l10405
  1710  00264C  D0D8               	goto	l10431
  1711  00264E                     l206:
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;main.c: 646: if ( LATBbits.LATB4 ) {
  1715  00264E  A88A               	btfss	3978,4,c	;volatile
  1716  002650  D002               	goto	l207
  1717                           
  1718                           ; BSR set to: 0
  1719                           ;main.c: 647: LATBbits.LATB4 = 0;
  1720  002652  988A               	bcf	3978,4,c	;volatile
  1721  002654  D025               	goto	L6
  1722  002656                     l207:
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;main.c: 650: LATBbits.LATB4 = 1;
  1726  002656  888A               	bsf	3978,4,c	;volatile
  1727  002658                     l10377:
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;main.c: 651: bOn = 1;
  1731  002658  0E01               	movlw	1
  1732  00265A  6FCF               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  1733  00265C  D033               	goto	l10407
  1734  00265E                     l210:
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;main.c: 656: if ( LATBbits.LATB1 ) {
  1738  00265E  A28A               	btfss	3978,1,c	;volatile
  1739  002660  D002               	goto	l211
  1740                           
  1741                           ; BSR set to: 0
  1742                           ;main.c: 657: LATBbits.LATB1 = 0;
  1743  002662  928A               	bcf	3978,1,c	;volatile
  1744  002664  D01D               	goto	L6
  1745  002666                     l211:
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;main.c: 660: LATBbits.LATB1 = 1;
  1749  002666  828A               	bsf	3978,1,c	;volatile
  1750  002668  D7F7               	goto	l10377
  1751  00266A                     l213:
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;main.c: 666: if ( LATBbits.LATB0 ) {
  1755  00266A  A08A               	btfss	3978,0,c	;volatile
  1756  00266C  D002               	goto	l214
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;main.c: 667: LATBbits.LATB0 = 0;
  1760  00266E  908A               	bcf	3978,0,c	;volatile
  1761  002670  D017               	goto	L6
  1762  002672                     l214:
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;main.c: 670: LATBbits.LATB0 = 1;
  1766  002672  808A               	bsf	3978,0,c	;volatile
  1767  002674  D7F1               	goto	l10377
  1768  002676                     l216:
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;main.c: 676: if ( LATCbits.LATC7 ) {
  1772  002676  AE8B               	btfss	3979,7,c	;volatile
  1773  002678  D002               	goto	l217
  1774                           
  1775                           ; BSR set to: 0
  1776                           ;main.c: 677: LATCbits.LATC7 = 0;
  1777  00267A  9E8B               	bcf	3979,7,c	;volatile
  1778  00267C  D011               	goto	L6
  1779  00267E                     l217:
  1780                           
  1781                           ; BSR set to: 0
  1782                           ;main.c: 680: LATCbits.LATC7 = 1;
  1783  00267E  8E8B               	bsf	3979,7,c	;volatile
  1784  002680  D7EB               	goto	l10377
  1785  002682                     l219:
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;main.c: 686: if ( LATCbits.LATC6 ) {
  1789  002682  AC8B               	btfss	3979,6,c	;volatile
  1790  002684  D002               	goto	l220
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;main.c: 687: LATCbits.LATC6 = 0;
  1794  002686  9C8B               	bcf	3979,6,c	;volatile
  1795  002688  D00B               	goto	L6
  1796  00268A                     l220:
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;main.c: 690: LATCbits.LATC6 = 1;
  1800  00268A  8C8B               	bsf	3979,6,c	;volatile
  1801  00268C  D7E5               	goto	l10377
  1802  00268E                     l222:
  1803                           
  1804                           ; BSR set to: 0
  1805                           ;main.c: 696: if ( LATCbits.LATC5 ) {
  1806  00268E  AA8B               	btfss	3979,5,c	;volatile
  1807  002690  D002               	goto	l223
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;main.c: 697: LATCbits.LATC5 = 0;
  1811  002692  9A8B               	bcf	3979,5,c	;volatile
  1812  002694  D005               	goto	L6
  1813  002696                     l223:
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;main.c: 700: LATCbits.LATC5 = 1;
  1817  002696  8A8B               	bsf	3979,5,c	;volatile
  1818  002698  D7DF               	goto	l10377
  1819  00269A                     l225:
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;main.c: 706: if ( LATCbits.LATC4 ) {
  1823  00269A  A88B               	btfss	3979,4,c	;volatile
  1824  00269C  D003               	goto	l226
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;main.c: 707: LATCbits.LATC4 = 0;
  1828  00269E  988B               	bcf	3979,4,c	;volatile
  1829  0026A0                     L6:
  1830                           
  1831                           ;main.c: 708: bOn = 0;
  1832  0026A0  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1833                           
  1834                           ;main.c: 709: } else {
  1835  0026A2  D010               	goto	l10407
  1836  0026A4                     l226:
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;main.c: 710: LATCbits.LATC4 = 1;
  1840  0026A4  888B               	bsf	3979,4,c	;volatile
  1841  0026A6  D7D8               	goto	l10377
  1842  0026A8                     l10405:
  1843                           
  1844                           ; BSR set to: 0
  1845  0026A8  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1846                           
  1847                           ; Switch size 1, requested type "speed"
  1848                           ; Number of cases is 7, Range of values is 0 to 6
  1849                           ; switch strategies available:
  1850                           ; Name         Instructions Cycles
  1851                           ; simple_byte           22    12 (average)
  1852                           ;	Chosen strategy is simple_byte
  1853  0026AA  E0D1               	bz	l206
  1854  0026AC  0A01               	xorlw	1	; case 1
  1855  0026AE  E0D7               	bz	l210
  1856  0026B0  0A03               	xorlw	3	; case 2
  1857  0026B2  E0DB               	bz	l213
  1858  0026B4  0A01               	xorlw	1	; case 3
  1859  0026B6  E0DF               	bz	l216
  1860  0026B8  0A07               	xorlw	7	; case 4
  1861  0026BA  E0E3               	bz	l219
  1862  0026BC  0A01               	xorlw	1	; case 5
  1863  0026BE  E0E7               	bz	l222
  1864  0026C0  0A03               	xorlw	3	; case 6
  1865  0026C2  E0EB               	bz	l225
  1866  0026C4                     l10407:
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;main.c: 718: relay_pulse_timer[ i ] =
  1870                           ;main.c: 719: Read_b_eep(0x43 + 18 + 2*i) * 256 +
  1871                           ;main.c: 721: Read_b_eep(0x43 + 19 + 2*i);
  1872  0026C4  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1873  0026C6  0D02               	mullw	2
  1874  0026C8  0E55               	movlw	85
  1875  0026CA  24F3               	addwf	prodl,w,c
  1876  0026CC  6E08               	movwf	?_Read_b_eep,c
  1877  0026CE  0E00               	movlw	0
  1878  0026D0  20F4               	addwfc	prodh,w,c
  1879  0026D2  6E09               	movwf	?_Read_b_eep+1,c
  1880  0026D4  EC3A  F022         	call	_Read_b_eep	;wreg free
  1881  0026D8  0100               	movlb	0	; () banked
  1882  0026DA  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1883  0026DC  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1884  0026DE  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1885  0026E0  0D02               	mullw	2
  1886  0026E2  0E56               	movlw	86
  1887  0026E4  24F3               	addwf	prodl,w,c
  1888  0026E6  6E08               	movwf	?_Read_b_eep,c
  1889  0026E8  0E00               	movlw	0
  1890  0026EA  20F4               	addwfc	prodh,w,c
  1891  0026EC  6E09               	movwf	?_Read_b_eep+1,c
  1892  0026EE  EC3A  F022         	call	_Read_b_eep	;wreg free
  1893  0026F2  0100               	movlb	0	; () banked
  1894  0026F4  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1895  0026F6  0E00               	movlw	0
  1896  0026F8  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1897  0026FA  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1898  0026FC  0D02               	mullw	2
  1899  0026FE  50F3               	movf	prodl,w,c
  1900  002700  0F70               	addlw	low _relay_pulse_timer
  1901  002702  6ED9               	movwf	fsr2l,c
  1902  002704  6ADA               	clrf	fsr2h,c
  1903  002706  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1904  00270A  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;main.c: 724: if ( bOn ) {
  1908  00270E  51CF               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  1909  002710  E044               	bz	l228
  1910                           
  1911                           ; BSR set to: 0
  1912                           ;main.c: 727: if ( Read_b_eep(0x43 + 10 + i) & 0x04 ) {
  1913  002712  0E4D               	movlw	77
  1914  002714  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1915  002716  6E08               	movwf	?_Read_b_eep,c
  1916  002718  6A09               	clrf	?_Read_b_eep+1,c
  1917  00271A  0E00               	movlw	0
  1918  00271C  2209               	addwfc	?_Read_b_eep+1,f,c
  1919  00271E  EC3A  F022         	call	_Read_b_eep	;wreg free
  1920  002722  0100               	movlb	0	; () banked
  1921  002724  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1922  002726  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1923  002728  D025               	goto	l10415
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;main.c: 728: relay_protection_timer[ i ] =
  1927                           ;main.c: 729: Read_b_eep(0x43 + 34 + 2*i) * 256 +
  1928                           ;main.c: 730: Read_b_eep(0x43 + 35 + 2*i);
  1929  00272A  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1930  00272C  0D02               	mullw	2
  1931  00272E  0E65               	movlw	101
  1932  002730  24F3               	addwf	prodl,w,c
  1933  002732  6E08               	movwf	?_Read_b_eep,c
  1934  002734  0E00               	movlw	0
  1935  002736  20F4               	addwfc	prodh,w,c
  1936  002738  6E09               	movwf	?_Read_b_eep+1,c
  1937  00273A  EC3A  F022         	call	_Read_b_eep	;wreg free
  1938  00273E  0100               	movlb	0	; () banked
  1939  002740  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1940  002742  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1941  002744  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1942  002746  0D02               	mullw	2
  1943  002748  0E66               	movlw	102
  1944  00274A  24F3               	addwf	prodl,w,c
  1945  00274C  6E08               	movwf	?_Read_b_eep,c
  1946  00274E  0E00               	movlw	0
  1947  002750  20F4               	addwfc	prodh,w,c
  1948  002752  6E09               	movwf	?_Read_b_eep+1,c
  1949  002754  EC3A  F022         	call	_Read_b_eep	;wreg free
  1950  002758  0100               	movlb	0	; () banked
  1951  00275A  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1952  00275C  0E00               	movlw	0
  1953  00275E  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1954  002760  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1955  002762  0D02               	mullw	2
  1956  002764  50F3               	movf	prodl,w,c
  1957  002766  0F60               	addlw	low _relay_protection_timer
  1958  002768  6ED9               	movwf	fsr2l,c
  1959  00276A  6ADA               	clrf	fsr2h,c
  1960  00276C  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1961  002770  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1962  002774                     l10415:
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;main.c: 731: }
  1966                           ;main.c: 733: if ( ctrlreg & 0x08 ) {
  1967  002774  A7D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  1968  002776  D007               	goto	l10419
  1969                           
  1970                           ; BSR set to: 0
  1971                           ;main.c: 734: SendInformationEvent( i, 20,
  1972                           ;main.c: 735: 3 );
  1973  002778  0E14               	movlw	20
  1974  00277A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1975  00277C  0E03               	movlw	3
  1976  00277E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1977  002780  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1978  002782  EC96  F01F         	call	_SendInformationEvent
  1979  002786                     l10419:
  1980                           
  1981                           ; BSR set to: 0
  1982                           ;main.c: 736: }
  1983                           ;main.c: 738: if ( ctrlreg & 0x20 ) {
  1984  002786  ABD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  1985  002788  D03A               	goto	l10431
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;main.c: 739: SendInformationEvent( i, 20,
  1989                           ;main.c: 740: 25 );
  1990  00278A  0E14               	movlw	20
  1991  00278C  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1992  00278E  0E19               	movlw	25
  1993  002790  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1994  002792  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1995  002794  EC96  F01F         	call	_SendInformationEvent
  1996  002798  D032               	goto	l10431
  1997  00279A                     l228:
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;main.c: 745: if ( ctrlreg & 0x10 ) {
  2001  00279A  A9D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2002  00279C  D007               	goto	l10425
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;main.c: 746: SendInformationEvent( i, 20,
  2006                           ;main.c: 747: 4 );
  2007  00279E  0E14               	movlw	20
  2008  0027A0  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2009  0027A2  0E04               	movlw	4
  2010  0027A4  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2011  0027A6  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2012  0027A8  EC96  F01F         	call	_SendInformationEvent
  2013  0027AC                     l10425:
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;main.c: 748: }
  2017                           ;main.c: 750: if (ctrlreg & 0x40) {
  2018  0027AC  ADD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),6,b
  2019  0027AE  D027               	goto	l10431
  2020                           
  2021                           ; BSR set to: 0
  2022                           ;main.c: 751: SendInformationEvent( i, 20,
  2023                           ;main.c: 752: 24 );
  2024  0027B0  0E14               	movlw	20
  2025  0027B2  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2026  0027B4  0E18               	movlw	24
  2027  0027B6  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2028  0027B8  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2029  0027BA  EC96  F01F         	call	_SendInformationEvent
  2030  0027BE  D01F               	goto	l10431
  2031  0027C0                     l10429:
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;main.c: 759: else {
  2035                           ;main.c: 761: relay_pulse_timer[ 0 ] =
  2036                           ;main.c: 762: Read_b_eep(0x43 + 18 + 2*i) * 256 +
  2037                           ;main.c: 763: Read_b_eep(0x43 + 19 + 2*i);
  2038  0027C0  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2039  0027C2  0D02               	mullw	2
  2040  0027C4  0E56               	movlw	86
  2041  0027C6  24F3               	addwf	prodl,w,c
  2042  0027C8  6E08               	movwf	?_Read_b_eep,c
  2043  0027CA  0E00               	movlw	0
  2044  0027CC  20F4               	addwfc	prodh,w,c
  2045  0027CE  6E09               	movwf	?_Read_b_eep+1,c
  2046  0027D0  EC3A  F022         	call	_Read_b_eep	;wreg free
  2047  0027D4  0100               	movlb	0	; () banked
  2048  0027D6  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2049  0027D8  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2050  0027DA  0D02               	mullw	2
  2051  0027DC  0E55               	movlw	85
  2052  0027DE  24F3               	addwf	prodl,w,c
  2053  0027E0  6E08               	movwf	?_Read_b_eep,c
  2054  0027E2  0E00               	movlw	0
  2055  0027E4  20F4               	addwfc	prodh,w,c
  2056  0027E6  6E09               	movwf	?_Read_b_eep+1,c
  2057  0027E8  EC3A  F022         	call	_Read_b_eep	;wreg free
  2058  0027EC  0100               	movlb	0	; () banked
  2059  0027EE  6FCE               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2060  0027F0  6BCD               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2061  0027F2  51CC               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2062  0027F4  25CD               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2063  0027F6  6F70               	movwf	_relay_pulse_timer& (0+255),b
  2064  0027F8  0E00               	movlw	0
  2065  0027FA  21CE               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2066  0027FC  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  2067  0027FE                     l10431:
  2068                           
  2069                           ; BSR set to: 0
  2070  0027FE  2BD1               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  2071  002800  D68A               	goto	l10343
  2072  002802                     l236:
  2073                           
  2074                           ; BSR set to: 0
  2075  002802  0012               	return	
  2076  002804                     __end_of_doApplicationOneSecondWork:
  2077                           	opt stack 0
  2078                           tblptru	equ	0xFF8
  2079                           prodh	equ	0xFF4
  2080                           prodl	equ	0xFF3
  2081                           postinc0	equ	0xFEE
  2082                           wreg	equ	0xFE8
  2083                           postinc2	equ	0xFDE
  2084                           postdec2	equ	0xFDD
  2085                           fsr2h	equ	0xFDA
  2086                           fsr2l	equ	0xFD9
  2087                           status	equ	0xFD8
  2088                           
  2089 ;; *************** function _vscp_doOneSecondWork *****************
  2090 ;; Defined at:
  2091 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  2092 ;; Parameters:    Size  Location     Type
  2093 ;;		None
  2094 ;; Auto vars:     Size  Location     Type
  2095 ;;		None
  2096 ;; Return value:  Size  Location     Type
  2097 ;;		None               void
  2098 ;; Registers used:
  2099 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2100 ;; Tracked objects:
  2101 ;;		On entry : F/0
  2102 ;;		On exit  : F/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2105 ;;      Params:         0       0       0       0       0       0       0
  2106 ;;      Locals:         0       0       0       0       0       0       0
  2107 ;;      Temps:          1       0       0       0       0       0       0
  2108 ;;      Totals:         1       0       0       0       0       0       0
  2109 ;;Total ram usage:        1 bytes
  2110 ;; Hardware stack levels used:    1
  2111 ;; Hardware stack levels required when called:    8
  2112 ;; This function calls:
  2113 ;;		_vscp_getZone
  2114 ;;		_vscp_getSubzone
  2115 ;;		_vscp_sendHeartBeat
  2116 ;; This function is called by:
  2117 ;;		_main
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           	psect	text3
  2122  003F98                     __ptext3:
  2123                           	opt stack 0
  2124  003F98                     _vscp_doOneSecondWork:
  2125                           	opt stack 22
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;vscp_firmware.c: 526: ++vscp_second;
  2129                           
  2130                           ; BSR set to: 0
  2131                           ;incstack = 0
  2132                           ;incstack = 0
  2133  003F98  2B95               	incf	_vscp_second& (0+255),f,b
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  2137  003F9A  0E3B               	movlw	59
  2138  003F9C  6595               	cpfsgt	_vscp_second& (0+255),b
  2139  003F9E  D00D               	goto	l8345
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;vscp_firmware.c: 529: vscp_second = 0;
  2143  003FA0  6B95               	clrf	_vscp_second& (0+255),b
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;vscp_firmware.c: 530: vscp_minute++;
  2147  003FA2  2B90               	incf	_vscp_minute& (0+255),f,b
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  2151  003FA4  5192               	movf	_vscp_node_state& (0+255),w,b
  2152  003FA6  0A03               	xorlw	3
  2153  003FA8  E108               	bnz	l8345
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  2157                           ;vscp_firmware.c: 535: vscp_getSubzone());
  2158  003FAA  EC4C  F022         	call	_vscp_getSubzone	;wreg free
  2159  003FAE  0100               	movlb	0	; () banked
  2160  003FB0  6FC5               	movwf	?_vscp_sendHeartBeat& (0+255),b
  2161  003FB2  EC51  F022         	call	_vscp_getZone	;wreg free
  2162  003FB6  ECF1  F020         	call	_vscp_sendHeartBeat
  2163  003FBA                     l8345:
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;vscp_firmware.c: 536: }
  2167                           ;vscp_firmware.c: 537: }
  2168                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  2169  003FBA  0E3B               	movlw	59
  2170  003FBC  6590               	cpfsgt	_vscp_minute& (0+255),b
  2171  003FBE  D002               	goto	l8351
  2172                           
  2173                           ; BSR set to: 0
  2174                           ;vscp_firmware.c: 540: vscp_minute = 0;
  2175  003FC0  6B90               	clrf	_vscp_minute& (0+255),b
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;vscp_firmware.c: 541: vscp_hour++;
  2179  003FC2  2B8E               	incf	_vscp_hour& (0+255),f,b
  2180  003FC4                     l8351:
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;vscp_firmware.c: 542: }
  2184                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  2185  003FC4  0E17               	movlw	23
  2186  003FC6  658E               	cpfsgt	_vscp_hour& (0+255),b
  2187  003FC8  D001               	goto	l8355
  2188                           
  2189                           ; BSR set to: 0
  2190  003FCA  6B8E               	clrf	_vscp_hour& (0+255),b
  2191  003FCC                     l8355:
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  2195  003FCC  5192               	movf	_vscp_node_state& (0+255),w,b
  2196  003FCE  0A03               	xorlw	3
  2197  003FD0  E109               	bnz	l1122
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  2201  003FD2  2B8D               	incf	_vscp_guid_reset& (0+255),f,b
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  2205  003FD4  C08D  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  2206  003FD8  0E0F               	movlw	15
  2207  003FDA  164D               	andwf	??_vscp_doOneSecondWork,f,c
  2208  003FDC  0E02               	movlw	2
  2209  003FDE  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  2210  003FE0  B0D8               	btfsc	status,0,c
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  2214  003FE2  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  2215  003FE4                     l1122:
  2216                           
  2217                           ; BSR set to: 0
  2218  003FE4  0012               	return	
  2219  003FE6                     __end_of_vscp_doOneSecondWork:
  2220                           	opt stack 0
  2221                           tblptru	equ	0xFF8
  2222                           prodh	equ	0xFF4
  2223                           prodl	equ	0xFF3
  2224                           postinc0	equ	0xFEE
  2225                           wreg	equ	0xFE8
  2226                           postinc2	equ	0xFDE
  2227                           postdec2	equ	0xFDD
  2228                           fsr2h	equ	0xFDA
  2229                           fsr2l	equ	0xFD9
  2230                           status	equ	0xFD8
  2231                           
  2232 ;; *************** function _vscp_sendHeartBeat *****************
  2233 ;; Defined at:
  2234 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;  zone            1    wreg     unsigned char 
  2237 ;;  subzone         1   20[BANK0 ] unsigned char 
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;  zone            1   75[COMRAM] unsigned char 
  2240 ;; Return value:  Size  Location     Type
  2241 ;;		None               void
  2242 ;; Registers used:
  2243 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : F/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2249 ;;      Params:         0       1       0       0       0       0       0
  2250 ;;      Locals:         1       0       0       0       0       0       0
  2251 ;;      Temps:          0       0       0       0       0       0       0
  2252 ;;      Totals:         1       1       0       0       0       0       0
  2253 ;;Total ram usage:        2 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    7
  2256 ;; This function calls:
  2257 ;;		_vscp_sendEvent
  2258 ;; This function is called by:
  2259 ;;		_vscp_doOneSecondWork
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text4
  2264  0041E2                     __ptext4:
  2265                           	opt stack 0
  2266  0041E2                     _vscp_sendHeartBeat:
  2267                           	opt stack 22
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;incstack = 0
  2271                           ;incstack = 0
  2272                           ;vscp_sendHeartBeat@zone stored from wreg
  2273  0041E2  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  2274                           
  2275                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  2276  0041E6  0E83               	movlw	131
  2277  0041E8  0100               	movlb	0	; () banked
  2278  0041EA  6FA4               	movwf	_vscp_omsg& (0+255),b
  2279                           
  2280                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  2281  0041EC  0E07               	movlw	7
  2282  0041EE  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  2283                           
  2284                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  2285  0041F0  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  2286  0041F2  0E14               	movlw	20
  2287  0041F4  6FA6               	movwf	(_vscp_omsg+2)& (0+255),b
  2288                           
  2289                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  2290  0041F6  0E09               	movlw	9
  2291  0041F8  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  2295  0041FA  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  2299  0041FC  C04C  F0AA         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  2303  004200  C0C5  F0AB         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;vscp_firmware.c: 388: vscp_sendEvent();
  2307  004204  EF2A  F021         	goto	_vscp_sendEvent	;wreg free
  2308  004208                     __end_of_vscp_sendHeartBeat:
  2309                           	opt stack 0
  2310                           tblptru	equ	0xFF8
  2311                           prodh	equ	0xFF4
  2312                           prodl	equ	0xFF3
  2313                           postinc0	equ	0xFEE
  2314                           wreg	equ	0xFE8
  2315                           postinc2	equ	0xFDE
  2316                           postdec2	equ	0xFDD
  2317                           fsr2h	equ	0xFDA
  2318                           fsr2l	equ	0xFD9
  2319                           status	equ	0xFD8
  2320                           
  2321 ;; *************** function _vscp_getSubzone *****************
  2322 ;; Defined at:
  2323 ;;		line 874 in file "../main.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;		None
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;		None
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  1    wreg      unsigned char 
  2330 ;; Registers used:
  2331 ;;		wreg, status,2, cstack
  2332 ;; Tracked objects:
  2333 ;;		On entry : F/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2337 ;;      Params:         0       0       0       0       0       0       0
  2338 ;;      Locals:         0       0       0       0       0       0       0
  2339 ;;      Temps:          0       0       0       0       0       0       0
  2340 ;;      Totals:         0       0       0       0       0       0       0
  2341 ;;Total ram usage:        0 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    3
  2344 ;; This function calls:
  2345 ;;		_Read_b_eep
  2346 ;; This function is called by:
  2347 ;;		_vscp_doOneSecondWork
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           	psect	text5
  2352  004498                     __ptext5:
  2353                           	opt stack 0
  2354  004498                     _vscp_getSubzone:
  2355                           	opt stack 26
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;main.c: 875: return Read_b_eep(0x43 + 1);
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;incstack = 0
  2362                           ;incstack = 0
  2363  004498  6A09               	clrf	?_Read_b_eep+1,c
  2364  00449A  0E44               	movlw	68
  2365  00449C  6E08               	movwf	?_Read_b_eep,c
  2366  00449E  EF3A  F022         	goto	_Read_b_eep	;wreg free
  2367  0044A2                     __end_of_vscp_getSubzone:
  2368                           	opt stack 0
  2369                           tblptru	equ	0xFF8
  2370                           prodh	equ	0xFF4
  2371                           prodl	equ	0xFF3
  2372                           postinc0	equ	0xFEE
  2373                           wreg	equ	0xFE8
  2374                           postinc2	equ	0xFDE
  2375                           postdec2	equ	0xFDD
  2376                           fsr2h	equ	0xFDA
  2377                           fsr2l	equ	0xFD9
  2378                           status	equ	0xFD8
  2379                           
  2380 ;; *************** function _vscp_getZone *****************
  2381 ;; Defined at:
  2382 ;;		line 865 in file "../main.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;		None
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;		None
  2387 ;; Return value:  Size  Location     Type
  2388 ;;                  1    wreg      unsigned char 
  2389 ;; Registers used:
  2390 ;;		wreg, status,2, cstack
  2391 ;; Tracked objects:
  2392 ;;		On entry : F/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2396 ;;      Params:         0       0       0       0       0       0       0
  2397 ;;      Locals:         0       0       0       0       0       0       0
  2398 ;;      Temps:          0       0       0       0       0       0       0
  2399 ;;      Totals:         0       0       0       0       0       0       0
  2400 ;;Total ram usage:        0 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:    3
  2403 ;; This function calls:
  2404 ;;		_Read_b_eep
  2405 ;; This function is called by:
  2406 ;;		_vscp_doOneSecondWork
  2407 ;; This function uses a non-reentrant model
  2408 ;;
  2409                           
  2410                           	psect	text6
  2411  0044A2                     __ptext6:
  2412                           	opt stack 0
  2413  0044A2                     _vscp_getZone:
  2414                           	opt stack 26
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;main.c: 866: return Read_b_eep(0x43 + 0);
  2418                           
  2419                           ;incstack = 0
  2420                           ;incstack = 0
  2421  0044A2  6A09               	clrf	?_Read_b_eep+1,c
  2422  0044A4  0E43               	movlw	67
  2423  0044A6  6E08               	movwf	?_Read_b_eep,c
  2424  0044A8  EF3A  F022         	goto	_Read_b_eep	;wreg free
  2425  0044AC                     __end_of_vscp_getZone:
  2426                           	opt stack 0
  2427                           tblptru	equ	0xFF8
  2428                           prodh	equ	0xFF4
  2429                           prodl	equ	0xFF3
  2430                           postinc0	equ	0xFEE
  2431                           wreg	equ	0xFE8
  2432                           postinc2	equ	0xFDE
  2433                           postdec2	equ	0xFDD
  2434                           fsr2h	equ	0xFDA
  2435                           fsr2l	equ	0xFD9
  2436                           status	equ	0xFD8
  2437                           
  2438 ;; *************** function _vscp_error *****************
  2439 ;; Defined at:
  2440 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;		None
  2443 ;; Auto vars:     Size  Location     Type
  2444 ;;		None
  2445 ;; Return value:  Size  Location     Type
  2446 ;;		None               void
  2447 ;; Registers used:
  2448 ;;		None
  2449 ;; Tracked objects:
  2450 ;;		On entry : 0/0
  2451 ;;		On exit  : 0/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2454 ;;      Params:         0       0       0       0       0       0       0
  2455 ;;      Locals:         0       0       0       0       0       0       0
  2456 ;;      Temps:          0       0       0       0       0       0       0
  2457 ;;      Totals:         0       0       0       0       0       0       0
  2458 ;;Total ram usage:        0 bytes
  2459 ;; Hardware stack levels used:    1
  2460 ;; Hardware stack levels required when called:    2
  2461 ;; This function calls:
  2462 ;;		Nothing
  2463 ;; This function is called by:
  2464 ;;		_main
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           	psect	text7
  2469  0044E2                     __ptext7:
  2470                           	opt stack 0
  2471  0044E2                     _vscp_error:
  2472                           	opt stack 28
  2473                           
  2474                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  2475                           
  2476                           ;incstack = 0
  2477                           ;incstack = 0
  2478  0044E2  6A56               	clrf	_vscp_initledfunc,c
  2479  0044E4  0012               	return	
  2480  0044E6                     __end_of_vscp_error:
  2481                           	opt stack 0
  2482                           tblptru	equ	0xFF8
  2483                           prodh	equ	0xFF4
  2484                           prodl	equ	0xFF3
  2485                           postinc0	equ	0xFEE
  2486                           wreg	equ	0xFE8
  2487                           postinc2	equ	0xFDE
  2488                           postdec2	equ	0xFDD
  2489                           fsr2h	equ	0xFDA
  2490                           fsr2l	equ	0xFD9
  2491                           status	equ	0xFD8
  2492                           
  2493 ;; *************** function _doDM *****************
  2494 ;; Defined at:
  2495 ;;		line 1630 in file "../main.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;		None
  2498 ;; Auto vars:     Size  Location     Type
  2499 ;;  class_mask      2   33[BANK0 ] unsigned short 
  2500 ;;  class_filter    2   31[BANK0 ] unsigned short 
  2501 ;;  i               1   44[BANK0 ] unsigned char 
  2502 ;;  dmflags         1   43[BANK0 ] unsigned char 
  2503 ;;  type_mask       1   36[BANK0 ] unsigned char 
  2504 ;;  type_filter     1   35[BANK0 ] unsigned char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;		None               void
  2507 ;; Registers used:
  2508 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : F/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2514 ;;      Params:         0       0       0       0       0       0       0
  2515 ;;      Locals:         0      14       0       0       0       0       0
  2516 ;;      Temps:          0       3       0       0       0       0       0
  2517 ;;      Totals:         0      17       0       0       0       0       0
  2518 ;;Total ram usage:       17 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    8
  2521 ;; This function calls:
  2522 ;;		_Read_b_eep
  2523 ;;		_doActionOff
  2524 ;;		_doActionOn
  2525 ;;		_doActionPulse
  2526 ;;		_doActionStatus
  2527 ;;		_doActionDisable
  2528 ;;		_doActionToggle
  2529 ;; This function is called by:
  2530 ;;		_main
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534                           	psect	text8
  2535  002214                     __ptext8:
  2536                           	opt stack 0
  2537  002214                     _doDM:
  2538                           	opt stack 22
  2539                           
  2540                           ;main.c: 1631: unsigned char i;
  2541                           ;main.c: 1632: unsigned char dmflags;
  2542                           ;main.c: 1633: unsigned short class_filter;
  2543                           ;main.c: 1634: unsigned short class_mask;
  2544                           ;main.c: 1635: unsigned char type_filter;
  2545                           ;main.c: 1636: unsigned char type_mask;
  2546                           ;main.c: 1639: if ( 0 == vscp_imsg.vscp_class ) return;
  2547                           
  2548                           ;incstack = 0
  2549                           ;incstack = 0
  2550  002214  0100               	movlb	0	; () banked
  2551  002216  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  2552  002218  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2553  00221A  E101 D179          	bz	l420
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;main.c: 1641: for (i = 0; i < 7; i++) {
  2557  00221E  6BDD               	clrf	doDM@i& (0+255),b
  2558  002220                     l10291:
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;main.c: 1644: dmflags = Read_b_eep(0x43 + 72 + 1 + (8 * i));
  2562  002220  51DD               	movf	doDM@i& (0+255),w,b
  2563  002222  6FCD               	movwf	??_doDM& (0+255),b
  2564  002224  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2565  002226  90D8               	bcf	status,0,c
  2566  002228  37CD               	rlcf	??_doDM& (0+255),f,b
  2567  00222A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2568  00222C  90D8               	bcf	status,0,c
  2569  00222E  37CD               	rlcf	??_doDM& (0+255),f,b
  2570  002230  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2571  002232  90D8               	bcf	status,0,c
  2572  002234  37CD               	rlcf	??_doDM& (0+255),f,b
  2573  002236  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2574  002238  0E8C               	movlw	140
  2575  00223A  25CD               	addwf	??_doDM& (0+255),w,b
  2576  00223C  6E08               	movwf	?_Read_b_eep,c
  2577  00223E  0E00               	movlw	0
  2578  002240  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2579  002242  6E09               	movwf	?_Read_b_eep+1,c
  2580  002244  EC3A  F022         	call	_Read_b_eep	;wreg free
  2581  002248  0100               	movlb	0	; () banked
  2582  00224A  6FDC               	movwf	doDM@dmflags& (0+255),b
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;main.c: 1647: if ( dmflags & 0x80 ) {
  2586  00224C  AFDC               	btfss	doDM@dmflags& (0+255),7,b
  2587  00224E  D15B               	goto	l10337
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;main.c: 1650: if ( ( dmflags & 0x40 ) &&
  2591                           ;main.c: 1651: ( vscp_imsg.oaddr != Read_b_eep(0x43 + 72 + (8 * i)) ) ) {
  2592  002250  ADDC               	btfss	doDM@dmflags& (0+255),6,b
  2593  002252  D018               	goto	l10301
  2594                           
  2595                           ; BSR set to: 0
  2596  002254  51DD               	movf	doDM@i& (0+255),w,b
  2597  002256  6FCD               	movwf	??_doDM& (0+255),b
  2598  002258  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2599  00225A  90D8               	bcf	status,0,c
  2600  00225C  37CD               	rlcf	??_doDM& (0+255),f,b
  2601  00225E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2602  002260  90D8               	bcf	status,0,c
  2603  002262  37CD               	rlcf	??_doDM& (0+255),f,b
  2604  002264  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2605  002266  90D8               	bcf	status,0,c
  2606  002268  37CD               	rlcf	??_doDM& (0+255),f,b
  2607  00226A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2608  00226C  0E8B               	movlw	139
  2609  00226E  25CD               	addwf	??_doDM& (0+255),w,b
  2610  002270  6E08               	movwf	?_Read_b_eep,c
  2611  002272  0E00               	movlw	0
  2612  002274  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2613  002276  6E09               	movwf	?_Read_b_eep+1,c
  2614  002278  EC3A  F022         	call	_Read_b_eep	;wreg free
  2615  00227C  0100               	movlb	0	; () banked
  2616  00227E  199B               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2617  002280  E001 D141          	bnz	l10337
  2618  002284                     l10301:
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;main.c: 1653: }
  2622                           ;main.c: 1677: class_filter = ( dmflags & 0x01)*256 +
  2623                           ;main.c: 1678: Read_b_eep(0x43 + 72 + (8 * i) + 3);
  2624  002284  51DD               	movf	doDM@i& (0+255),w,b
  2625  002286  0D08               	mullw	8
  2626  002288  0E8E               	movlw	142
  2627  00228A  24F3               	addwf	prodl,w,c
  2628  00228C  6E08               	movwf	?_Read_b_eep,c
  2629  00228E  0E00               	movlw	0
  2630  002290  20F4               	addwfc	prodh,w,c
  2631  002292  6E09               	movwf	?_Read_b_eep+1,c
  2632  002294  EC3A  F022         	call	_Read_b_eep	;wreg free
  2633  002298  0100               	movlb	0	; () banked
  2634  00229A  6FCD               	movwf	??_doDM& (0+255),b
  2635  00229C  51DC               	movf	doDM@dmflags& (0+255),w,b
  2636  00229E  0B01               	andlw	1
  2637  0022A0  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2638  0022A2  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2639  0022A4  51CD               	movf	??_doDM& (0+255),w,b
  2640  0022A6  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2641  0022A8  6FD0               	movwf	doDM@class_filter& (0+255),b
  2642  0022AA  0E00               	movlw	0
  2643  0022AC  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2644  0022AE  6FD1               	movwf	(doDM@class_filter+1)& (0+255),b
  2645                           
  2646                           ;main.c: 1682: class_mask = ( dmflags & 0x02)*256 +
  2647                           ;main.c: 1683: Read_b_eep(0x43 + 72 + (8 * i) + 2);
  2648  0022B0  51DD               	movf	doDM@i& (0+255),w,b
  2649  0022B2  0D08               	mullw	8
  2650  0022B4  0E8D               	movlw	141
  2651  0022B6  24F3               	addwf	prodl,w,c
  2652  0022B8  6E08               	movwf	?_Read_b_eep,c
  2653  0022BA  0E00               	movlw	0
  2654  0022BC  20F4               	addwfc	prodh,w,c
  2655  0022BE  6E09               	movwf	?_Read_b_eep+1,c
  2656  0022C0  EC3A  F022         	call	_Read_b_eep	;wreg free
  2657  0022C4  0100               	movlb	0	; () banked
  2658  0022C6  6FCD               	movwf	??_doDM& (0+255),b
  2659  0022C8  51DC               	movf	doDM@dmflags& (0+255),w,b
  2660  0022CA  0B02               	andlw	2
  2661  0022CC  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2662  0022CE  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2663  0022D0  51CD               	movf	??_doDM& (0+255),w,b
  2664  0022D2  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2665  0022D4  6FD2               	movwf	doDM@class_mask& (0+255),b
  2666  0022D6  0E00               	movlw	0
  2667  0022D8  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2668  0022DA  6FD3               	movwf	(doDM@class_mask+1)& (0+255),b
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;main.c: 1687: type_filter = Read_b_eep(0x43 + 72 + (8 * i) + 5);
  2672  0022DC  51DD               	movf	doDM@i& (0+255),w,b
  2673  0022DE  6FCD               	movwf	??_doDM& (0+255),b
  2674  0022E0  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2675  0022E2  90D8               	bcf	status,0,c
  2676  0022E4  37CD               	rlcf	??_doDM& (0+255),f,b
  2677  0022E6  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2678  0022E8  90D8               	bcf	status,0,c
  2679  0022EA  37CD               	rlcf	??_doDM& (0+255),f,b
  2680  0022EC  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2681  0022EE  90D8               	bcf	status,0,c
  2682  0022F0  37CD               	rlcf	??_doDM& (0+255),f,b
  2683  0022F2  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2684  0022F4  0E90               	movlw	144
  2685  0022F6  25CD               	addwf	??_doDM& (0+255),w,b
  2686  0022F8  6E08               	movwf	?_Read_b_eep,c
  2687  0022FA  0E00               	movlw	0
  2688  0022FC  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2689  0022FE  6E09               	movwf	?_Read_b_eep+1,c
  2690  002300  EC3A  F022         	call	_Read_b_eep	;wreg free
  2691  002304  0100               	movlb	0	; () banked
  2692  002306  6FD4               	movwf	doDM@type_filter& (0+255),b
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;main.c: 1691: type_mask = Read_b_eep(0x43 + 72 + (8 * i) + 4);
  2696  002308  51DD               	movf	doDM@i& (0+255),w,b
  2697  00230A  6FCD               	movwf	??_doDM& (0+255),b
  2698  00230C  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2699  00230E  90D8               	bcf	status,0,c
  2700  002310  37CD               	rlcf	??_doDM& (0+255),f,b
  2701  002312  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2702  002314  90D8               	bcf	status,0,c
  2703  002316  37CD               	rlcf	??_doDM& (0+255),f,b
  2704  002318  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2705  00231A  90D8               	bcf	status,0,c
  2706  00231C  37CD               	rlcf	??_doDM& (0+255),f,b
  2707  00231E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2708  002320  0E8F               	movlw	143
  2709  002322  25CD               	addwf	??_doDM& (0+255),w,b
  2710  002324  6E08               	movwf	?_Read_b_eep,c
  2711  002326  0E00               	movlw	0
  2712  002328  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2713  00232A  6E09               	movwf	?_Read_b_eep+1,c
  2714  00232C  EC3A  F022         	call	_Read_b_eep	;wreg free
  2715  002330  0100               	movlb	0	; () banked
  2716  002332  6FD5               	movwf	doDM@type_mask& (0+255),b
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;main.c: 1696: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2720                           ;main.c: 1697: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2721  002334  EE20  F098         	lfsr	2,_vscp_imsg+2
  2722  002338  CFDE F0CD          	movff	postinc2,??_doDM
  2723  00233C  CFDD F0CE          	movff	postdec2,??_doDM+1
  2724  002340  51D0               	movf	doDM@class_filter& (0+255),w,b
  2725  002342  1BCD               	xorwf	??_doDM& (0+255),f,b
  2726  002344  51D1               	movf	(doDM@class_filter+1)& (0+255),w,b
  2727  002346  1BCE               	xorwf	(??_doDM+1)& (0+255),f,b
  2728  002348  51D2               	movf	doDM@class_mask& (0+255),w,b
  2729  00234A  17CD               	andwf	??_doDM& (0+255),f,b
  2730  00234C  51D3               	movf	(doDM@class_mask+1)& (0+255),w,b
  2731  00234E  17CE               	andwf	(??_doDM+1)& (0+255),f,b
  2732  002350  51CE               	movf	(??_doDM+1)& (0+255),w,b
  2733  002352  11CD               	iorwf	??_doDM& (0+255),w,b
  2734  002354  E001 D0D7          	bnz	l10337
  2735                           
  2736                           ; BSR set to: 0
  2737  002358  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  2738  00235A  19D4               	xorwf	doDM@type_filter& (0+255),w,b
  2739  00235C  15D5               	andwf	doDM@type_mask& (0+255),w,b
  2740  00235E  E101 D0AF          	bz	l10335
  2741  002362  D0D1               	goto	l10337
  2742  002364                     l10313:
  2743                           
  2744                           ;main.c: 1703: doActionOn( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2745  002364  0100               	movlb	0	; () banked
  2746  002366  51DD               	movf	doDM@i& (0+255),w,b
  2747  002368  6FCD               	movwf	??_doDM& (0+255),b
  2748  00236A  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2749  00236C  90D8               	bcf	status,0,c
  2750  00236E  37CD               	rlcf	??_doDM& (0+255),f,b
  2751  002370  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2752  002372  90D8               	bcf	status,0,c
  2753  002374  37CD               	rlcf	??_doDM& (0+255),f,b
  2754  002376  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2755  002378  90D8               	bcf	status,0,c
  2756  00237A  37CD               	rlcf	??_doDM& (0+255),f,b
  2757  00237C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2758  00237E  0E92               	movlw	146
  2759  002380  25CD               	addwf	??_doDM& (0+255),w,b
  2760  002382  6E08               	movwf	?_Read_b_eep,c
  2761  002384  0E00               	movlw	0
  2762  002386  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2763  002388  6E09               	movwf	?_Read_b_eep+1,c
  2764  00238A  EC3A  F022         	call	_Read_b_eep	;wreg free
  2765  00238E  0100               	movlb	0	; () banked
  2766  002390  6FD6               	movwf	_doDM$2152& (0+255),b
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;main.c: 1703: doActionOn( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2770  002392  C0D6  F051         	movff	_doDM$2152,?_doActionOn
  2771  002396  51DC               	movf	doDM@dmflags& (0+255),w,b
  2772  002398  EC02  F014         	call	_doActionOn
  2773                           
  2774                           ;main.c: 1704: break;
  2775  00239C  D0B4               	goto	l10337
  2776  00239E                     l10317:
  2777                           
  2778                           ;main.c: 1707: doActionOff( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2779  00239E  0100               	movlb	0	; () banked
  2780  0023A0  51DD               	movf	doDM@i& (0+255),w,b
  2781  0023A2  6FCD               	movwf	??_doDM& (0+255),b
  2782  0023A4  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2783  0023A6  90D8               	bcf	status,0,c
  2784  0023A8  37CD               	rlcf	??_doDM& (0+255),f,b
  2785  0023AA  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2786  0023AC  90D8               	bcf	status,0,c
  2787  0023AE  37CD               	rlcf	??_doDM& (0+255),f,b
  2788  0023B0  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2789  0023B2  90D8               	bcf	status,0,c
  2790  0023B4  37CD               	rlcf	??_doDM& (0+255),f,b
  2791  0023B6  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2792  0023B8  0E92               	movlw	146
  2793  0023BA  25CD               	addwf	??_doDM& (0+255),w,b
  2794  0023BC  6E08               	movwf	?_Read_b_eep,c
  2795  0023BE  0E00               	movlw	0
  2796  0023C0  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2797  0023C2  6E09               	movwf	?_Read_b_eep+1,c
  2798  0023C4  EC3A  F022         	call	_Read_b_eep	;wreg free
  2799  0023C8  0100               	movlb	0	; () banked
  2800  0023CA  6FD7               	movwf	_doDM$2153& (0+255),b
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;main.c: 1707: doActionOff( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2804  0023CC  C0D7  F051         	movff	_doDM$2153,?_doActionOff
  2805  0023D0  51DC               	movf	doDM@dmflags& (0+255),w,b
  2806  0023D2  EC8D  F01C         	call	_doActionOff
  2807                           
  2808                           ;main.c: 1708: break;
  2809  0023D6  D097               	goto	l10337
  2810  0023D8                     l10321:
  2811                           
  2812                           ;main.c: 1711: doActionPulse( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2813  0023D8  0100               	movlb	0	; () banked
  2814  0023DA  51DD               	movf	doDM@i& (0+255),w,b
  2815  0023DC  6FCD               	movwf	??_doDM& (0+255),b
  2816  0023DE  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2817  0023E0  90D8               	bcf	status,0,c
  2818  0023E2  37CD               	rlcf	??_doDM& (0+255),f,b
  2819  0023E4  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2820  0023E6  90D8               	bcf	status,0,c
  2821  0023E8  37CD               	rlcf	??_doDM& (0+255),f,b
  2822  0023EA  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2823  0023EC  90D8               	bcf	status,0,c
  2824  0023EE  37CD               	rlcf	??_doDM& (0+255),f,b
  2825  0023F0  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2826  0023F2  0E92               	movlw	146
  2827  0023F4  25CD               	addwf	??_doDM& (0+255),w,b
  2828  0023F6  6E08               	movwf	?_Read_b_eep,c
  2829  0023F8  0E00               	movlw	0
  2830  0023FA  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2831  0023FC  6E09               	movwf	?_Read_b_eep+1,c
  2832  0023FE  EC3A  F022         	call	_Read_b_eep	;wreg free
  2833  002402  0100               	movlb	0	; () banked
  2834  002404  6FD8               	movwf	_doDM$2154& (0+255),b
  2835                           
  2836                           ;main.c: 1711: doActionPulse( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2837  002406  C0D8  F00A         	movff	_doDM$2154,?_doActionPulse
  2838  00240A  51DC               	movf	doDM@dmflags& (0+255),w,b
  2839  00240C  EC56  F016         	call	_doActionPulse
  2840                           
  2841                           ;main.c: 1712: break;
  2842  002410  D07A               	goto	l10337
  2843  002412                     l10323:
  2844                           
  2845                           ;main.c: 1715: doActionStatus( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2846  002412  0100               	movlb	0	; () banked
  2847  002414  51DD               	movf	doDM@i& (0+255),w,b
  2848  002416  6FCD               	movwf	??_doDM& (0+255),b
  2849  002418  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2850  00241A  90D8               	bcf	status,0,c
  2851  00241C  37CD               	rlcf	??_doDM& (0+255),f,b
  2852  00241E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2853  002420  90D8               	bcf	status,0,c
  2854  002422  37CD               	rlcf	??_doDM& (0+255),f,b
  2855  002424  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2856  002426  90D8               	bcf	status,0,c
  2857  002428  37CD               	rlcf	??_doDM& (0+255),f,b
  2858  00242A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2859  00242C  0E92               	movlw	146
  2860  00242E  25CD               	addwf	??_doDM& (0+255),w,b
  2861  002430  6E08               	movwf	?_Read_b_eep,c
  2862  002432  0E00               	movlw	0
  2863  002434  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2864  002436  6E09               	movwf	?_Read_b_eep+1,c
  2865  002438  EC3A  F022         	call	_Read_b_eep	;wreg free
  2866  00243C  0100               	movlb	0	; () banked
  2867  00243E  6FD9               	movwf	_doDM$2155& (0+255),b
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;main.c: 1715: doActionStatus( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2871  002440  C0D9  F051         	movff	_doDM$2155,?_doActionStatus
  2872  002444  51DC               	movf	doDM@dmflags& (0+255),w,b
  2873  002446  ECE5  F01A         	call	_doActionStatus
  2874                           
  2875                           ;main.c: 1716: break;
  2876  00244A  D05D               	goto	l10337
  2877  00244C                     l10327:
  2878                           
  2879                           ;main.c: 1719: doActionDisable( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2880  00244C  0100               	movlb	0	; () banked
  2881  00244E  51DD               	movf	doDM@i& (0+255),w,b
  2882  002450  6FCD               	movwf	??_doDM& (0+255),b
  2883  002452  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2884  002454  90D8               	bcf	status,0,c
  2885  002456  37CD               	rlcf	??_doDM& (0+255),f,b
  2886  002458  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2887  00245A  90D8               	bcf	status,0,c
  2888  00245C  37CD               	rlcf	??_doDM& (0+255),f,b
  2889  00245E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2890  002460  90D8               	bcf	status,0,c
  2891  002462  37CD               	rlcf	??_doDM& (0+255),f,b
  2892  002464  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2893  002466  0E92               	movlw	146
  2894  002468  25CD               	addwf	??_doDM& (0+255),w,b
  2895  00246A  6E08               	movwf	?_Read_b_eep,c
  2896  00246C  0E00               	movlw	0
  2897  00246E  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2898  002470  6E09               	movwf	?_Read_b_eep+1,c
  2899  002472  EC3A  F022         	call	_Read_b_eep	;wreg free
  2900  002476  0100               	movlb	0	; () banked
  2901  002478  6FDA               	movwf	_doDM$2156& (0+255),b
  2902                           
  2903                           ;main.c: 1719: doActionDisable( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2904  00247A  C0DA  F00C         	movff	_doDM$2156,?_doActionDisable
  2905  00247E  51DC               	movf	doDM@dmflags& (0+255),w,b
  2906  002480  EC85  F01E         	call	_doActionDisable
  2907                           
  2908                           ;main.c: 1720: break;
  2909  002484  D040               	goto	l10337
  2910  002486                     l10329:
  2911                           
  2912                           ;main.c: 1723: doActionToggle( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2913  002486  0100               	movlb	0	; () banked
  2914  002488  51DD               	movf	doDM@i& (0+255),w,b
  2915  00248A  6FCD               	movwf	??_doDM& (0+255),b
  2916  00248C  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2917  00248E  90D8               	bcf	status,0,c
  2918  002490  37CD               	rlcf	??_doDM& (0+255),f,b
  2919  002492  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2920  002494  90D8               	bcf	status,0,c
  2921  002496  37CD               	rlcf	??_doDM& (0+255),f,b
  2922  002498  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2923  00249A  90D8               	bcf	status,0,c
  2924  00249C  37CD               	rlcf	??_doDM& (0+255),f,b
  2925  00249E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2926  0024A0  0E92               	movlw	146
  2927  0024A2  25CD               	addwf	??_doDM& (0+255),w,b
  2928  0024A4  6E08               	movwf	?_Read_b_eep,c
  2929  0024A6  0E00               	movlw	0
  2930  0024A8  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2931  0024AA  6E09               	movwf	?_Read_b_eep+1,c
  2932  0024AC  EC3A  F022         	call	_Read_b_eep	;wreg free
  2933  0024B0  0100               	movlb	0	; () banked
  2934  0024B2  6FDB               	movwf	_doDM$2157& (0+255),b
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;main.c: 1723: doActionToggle( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2938  0024B4  C0DB  F051         	movff	_doDM$2157,?_doActionToggle
  2939  0024B8  51DC               	movf	doDM@dmflags& (0+255),w,b
  2940  0024BA  EC94  F019         	call	_doActionToggle
  2941                           
  2942                           ;main.c: 1724: break;
  2943  0024BE  D023               	goto	l10337
  2944  0024C0                     l10335:
  2945                           
  2946                           ; BSR set to: 0
  2947  0024C0  51DD               	movf	doDM@i& (0+255),w,b
  2948  0024C2  6FCD               	movwf	??_doDM& (0+255),b
  2949  0024C4  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2950  0024C6  90D8               	bcf	status,0,c
  2951  0024C8  37CD               	rlcf	??_doDM& (0+255),f,b
  2952  0024CA  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2953  0024CC  90D8               	bcf	status,0,c
  2954  0024CE  37CD               	rlcf	??_doDM& (0+255),f,b
  2955  0024D0  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2956  0024D2  90D8               	bcf	status,0,c
  2957  0024D4  37CD               	rlcf	??_doDM& (0+255),f,b
  2958  0024D6  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2959  0024D8  0E91               	movlw	145
  2960  0024DA  25CD               	addwf	??_doDM& (0+255),w,b
  2961  0024DC  6E08               	movwf	?_Read_b_eep,c
  2962  0024DE  0E00               	movlw	0
  2963  0024E0  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2964  0024E2  6E09               	movwf	?_Read_b_eep+1,c
  2965  0024E4  EC3A  F022         	call	_Read_b_eep	;wreg free
  2966                           
  2967                           ; Switch size 1, requested type "speed"
  2968                           ; Number of cases is 6, Range of values is 1 to 16
  2969                           ; switch strategies available:
  2970                           ; Name         Instructions Cycles
  2971                           ; simple_byte           19    10 (average)
  2972                           ;	Chosen strategy is simple_byte
  2973  0024E8  0A01               	xorlw	1	; case 1
  2974  0024EA  E101 D73B          	bz	l10313
  2975  0024EE  0A03               	xorlw	3	; case 2
  2976  0024F0  E101 D755          	bz	l10317
  2977  0024F4  0A01               	xorlw	1	; case 3
  2978  0024F6  E101 D76F          	bz	l10321
  2979  0024FA  0A07               	xorlw	7	; case 4
  2980  0024FC  E0C4               	bz	l10329
  2981  0024FE  0A0E               	xorlw	14	; case 10
  2982  002500  E088               	bz	l10323
  2983  002502  0A1A               	xorlw	26	; case 16
  2984  002504  E0A3               	bz	l10327
  2985  002506                     l10337:
  2986  002506  0100               	movlb	0	; () banked
  2987  002508  2BDD               	incf	doDM@i& (0+255),f,b
  2988                           
  2989                           ; BSR set to: 0
  2990  00250A  0E06               	movlw	6
  2991  00250C  65DD               	cpfsgt	doDM@i& (0+255),b
  2992  00250E  D688               	goto	l10291
  2993  002510                     l420:
  2994                           
  2995                           ; BSR set to: 0
  2996  002510  0012               	return	
  2997  002512                     __end_of_doDM:
  2998                           	opt stack 0
  2999                           tblptru	equ	0xFF8
  3000                           prodh	equ	0xFF4
  3001                           prodl	equ	0xFF3
  3002                           postinc0	equ	0xFEE
  3003                           wreg	equ	0xFE8
  3004                           postinc2	equ	0xFDE
  3005                           postdec2	equ	0xFDD
  3006                           fsr2h	equ	0xFDA
  3007                           fsr2l	equ	0xFD9
  3008                           status	equ	0xFD8
  3009                           
  3010 ;; *************** function _doActionToggle *****************
  3011 ;; Defined at:
  3012 ;;		line 2170 in file "../main.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;  dmflags         1    wreg     unsigned char 
  3015 ;;  arg             1   80[COMRAM] unsigned char 
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3018 ;;  i               1   27[BANK0 ] unsigned char 
  3019 ;;  bOn             1   26[BANK0 ] enum E15660
  3020 ;;  val             1   25[BANK0 ] unsigned char 
  3021 ;; Return value:  Size  Location     Type
  3022 ;;		None               void
  3023 ;; Registers used:
  3024 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3025 ;; Tracked objects:
  3026 ;;		On entry : F/0
  3027 ;;		On exit  : F/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3030 ;;      Params:         1       0       0       0       0       0       0
  3031 ;;      Locals:         0       4       0       0       0       0       0
  3032 ;;      Temps:          0       2       0       0       0       0       0
  3033 ;;      Totals:         1       6       0       0       0       0       0
  3034 ;;Total ram usage:        7 bytes
  3035 ;; Hardware stack levels used:    1
  3036 ;; Hardware stack levels required when called:    7
  3037 ;; This function calls:
  3038 ;;		_Read_b_eep
  3039 ;;		_SendInformationEvent
  3040 ;; This function is called by:
  3041 ;;		_doDM
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           	psect	text9
  3046  003328                     __ptext9:
  3047                           	opt stack 0
  3048  003328                     _doActionToggle:
  3049                           	opt stack 22
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;incstack = 0
  3053                           ;incstack = 0
  3054                           ;doActionToggle@dmflags stored from wreg
  3055  003328  CFE8 F0C9          	movff	wreg,doActionToggle@dmflags
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;main.c: 2172: unsigned char i;
  3059                           ;main.c: 2173: unsigned char val;
  3060                           ;main.c: 2174: BOOL bOn = 0;
  3061  00332C  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3062                           
  3063                           ;main.c: 2176: for ( i = 0; i < 8; i++ ) {
  3064  00332E  6BCC               	clrf	doActionToggle@i& (0+255),b
  3065  003330                     l11059:
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;main.c: 2179: if ( !( arg & (1 << i) ) ) continue;
  3069  003330  C0CC  F0C7         	movff	doActionToggle@i,??_doActionToggle
  3070  003334  0E01               	movlw	1
  3071  003336  6FC8               	movwf	(??_doActionToggle+1)& (0+255),b
  3072  003338  2BC7               	incf	??_doActionToggle& (0+255),f,b
  3073  00333A  D002               	goto	u13484
  3074  00333C                     u13485:
  3075  00333C  90D8               	bcf	status,0,c
  3076  00333E  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3077  003340                     u13484:
  3078  003340  2FC7               	decfsz	??_doActionToggle& (0+255),f,b
  3079  003342  D7FC               	goto	u13485
  3080  003344  51C8               	movf	(??_doActionToggle+1)& (0+255),w,b
  3081  003346  1451               	andwf	doActionToggle@arg,w,c
  3082  003348  E101 D092          	bz	l11121
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;main.c: 2182: if ( dmflags & 0x10 ) {
  3086  00334C  A9C9               	btfss	doActionToggle@dmflags& (0+255),4,b
  3087  00334E  D011               	goto	l552
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;main.c: 2183: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3091  003350  90D8               	bcf	status,0,c
  3092  003352  35CC               	rlcf	doActionToggle@i& (0+255),w,b
  3093  003354  6FC7               	movwf	??_doActionToggle& (0+255),b
  3094  003356  6BC8               	clrf	(??_doActionToggle+1)& (0+255),b
  3095  003358  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3096  00335A  0E75               	movlw	117
  3097  00335C  25C7               	addwf	??_doActionToggle& (0+255),w,b
  3098  00335E  6E08               	movwf	?_Read_b_eep,c
  3099  003360  0E00               	movlw	0
  3100  003362  21C8               	addwfc	(??_doActionToggle+1)& (0+255),w,b
  3101  003364  6E09               	movwf	?_Read_b_eep+1,c
  3102  003366  EC3A  F022         	call	_Read_b_eep	;wreg free
  3103  00336A  0100               	movlb	0	; () banked
  3104  00336C  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3105  00336E  E001 D07F          	bnz	l11121
  3106  003372                     l552:
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;main.c: 2186: }
  3110                           ;main.c: 2187: }
  3111                           ;main.c: 2190: if ( dmflags & 0x08 ) {
  3112  003372  A7C9               	btfss	doActionToggle@dmflags& (0+255),3,b
  3113  003374  D010               	goto	l11071
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;main.c: 2191: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3117  003376  90D8               	bcf	status,0,c
  3118  003378  35CC               	rlcf	doActionToggle@i& (0+255),w,b
  3119  00337A  6FC7               	movwf	??_doActionToggle& (0+255),b
  3120  00337C  6BC8               	clrf	(??_doActionToggle+1)& (0+255),b
  3121  00337E  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3122  003380  0E76               	movlw	118
  3123  003382  25C7               	addwf	??_doActionToggle& (0+255),w,b
  3124  003384  6E08               	movwf	?_Read_b_eep,c
  3125  003386  0E00               	movlw	0
  3126  003388  21C8               	addwfc	(??_doActionToggle+1)& (0+255),w,b
  3127  00338A  6E09               	movwf	?_Read_b_eep+1,c
  3128  00338C  EC3A  F022         	call	_Read_b_eep	;wreg free
  3129  003390  0100               	movlb	0	; () banked
  3130  003392  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3131  003394  E16D               	bnz	l11121
  3132  003396                     l11071:
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;main.c: 2194: }
  3136                           ;main.c: 2195: }
  3137                           ;main.c: 2197: val = Read_b_eep(0x43 + 10 + i);
  3138  003396  0E4D               	movlw	77
  3139  003398  25CC               	addwf	doActionToggle@i& (0+255),w,b
  3140  00339A  6E08               	movwf	?_Read_b_eep,c
  3141  00339C  6A09               	clrf	?_Read_b_eep+1,c
  3142  00339E  0E00               	movlw	0
  3143  0033A0  2209               	addwfc	?_Read_b_eep+1,f,c
  3144  0033A2  EC3A  F022         	call	_Read_b_eep	;wreg free
  3145  0033A6  0100               	movlb	0	; () banked
  3146  0033A8  6FCA               	movwf	doActionToggle@val& (0+255),b
  3147                           
  3148                           ;main.c: 2199: switch ( i ) {
  3149  0033AA  D02D               	goto	l11103
  3150  0033AC                     l557:
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;main.c: 2202: if ( LATBbits.LATB4 ) {
  3154  0033AC  A88A               	btfss	3978,4,c	;volatile
  3155  0033AE  D002               	goto	l558
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;main.c: 2203: LATBbits.LATB4 = 0;
  3159  0033B0  988A               	bcf	3978,4,c	;volatile
  3160  0033B2  D025               	goto	L12
  3161  0033B4                     l558:
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;main.c: 2206: LATBbits.LATB4 = 1;
  3165  0033B4  888A               	bsf	3978,4,c	;volatile
  3166  0033B6                     l11075:
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;main.c: 2207: bOn = 1;
  3170  0033B6  0E01               	movlw	1
  3171  0033B8  6FCB               	movwf	doActionToggle@bOn& (0+255),b
  3172  0033BA  D033               	goto	l11105
  3173  0033BC                     l561:
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;main.c: 2212: if ( LATBbits.LATB1 ) {
  3177  0033BC  A28A               	btfss	3978,1,c	;volatile
  3178  0033BE  D002               	goto	l562
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;main.c: 2213: LATBbits.LATB1 = 0;
  3182  0033C0  928A               	bcf	3978,1,c	;volatile
  3183  0033C2  D01D               	goto	L12
  3184  0033C4                     l562:
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;main.c: 2216: LATBbits.LATB1 = 1;
  3188  0033C4  828A               	bsf	3978,1,c	;volatile
  3189  0033C6  D7F7               	goto	l11075
  3190  0033C8                     l564:
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;main.c: 2222: if ( LATBbits.LATB0 ) {
  3194  0033C8  A08A               	btfss	3978,0,c	;volatile
  3195  0033CA  D002               	goto	l565
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;main.c: 2223: LATBbits.LATB0 = 0;
  3199  0033CC  908A               	bcf	3978,0,c	;volatile
  3200  0033CE  D017               	goto	L12
  3201  0033D0                     l565:
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;main.c: 2226: LATBbits.LATB0 = 1;
  3205  0033D0  808A               	bsf	3978,0,c	;volatile
  3206  0033D2  D7F1               	goto	l11075
  3207  0033D4                     l567:
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;main.c: 2232: if ( LATCbits.LATC7 ) {
  3211  0033D4  AE8B               	btfss	3979,7,c	;volatile
  3212  0033D6  D002               	goto	l568
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;main.c: 2233: LATCbits.LATC7 = 0;
  3216  0033D8  9E8B               	bcf	3979,7,c	;volatile
  3217  0033DA  D011               	goto	L12
  3218  0033DC                     l568:
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;main.c: 2236: LATCbits.LATC7 = 1;
  3222  0033DC  8E8B               	bsf	3979,7,c	;volatile
  3223  0033DE  D7EB               	goto	l11075
  3224  0033E0                     l570:
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;main.c: 2242: if ( LATCbits.LATC6 ) {
  3228  0033E0  AC8B               	btfss	3979,6,c	;volatile
  3229  0033E2  D002               	goto	l571
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;main.c: 2243: LATCbits.LATC6 = 0;
  3233  0033E4  9C8B               	bcf	3979,6,c	;volatile
  3234  0033E6  D00B               	goto	L12
  3235  0033E8                     l571:
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;main.c: 2246: LATCbits.LATC6 = 1;
  3239  0033E8  8C8B               	bsf	3979,6,c	;volatile
  3240  0033EA  D7E5               	goto	l11075
  3241  0033EC                     l573:
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;main.c: 2252: if ( LATCbits.LATC5 ) {
  3245  0033EC  AA8B               	btfss	3979,5,c	;volatile
  3246  0033EE  D002               	goto	l574
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;main.c: 2253: LATCbits.LATC5 = 0;
  3250  0033F0  9A8B               	bcf	3979,5,c	;volatile
  3251  0033F2  D005               	goto	L12
  3252  0033F4                     l574:
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;main.c: 2256: LATCbits.LATC5 = 1;
  3256  0033F4  8A8B               	bsf	3979,5,c	;volatile
  3257  0033F6  D7DF               	goto	l11075
  3258  0033F8                     l576:
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;main.c: 2262: if ( LATCbits.LATC4 ) {
  3262  0033F8  A88B               	btfss	3979,4,c	;volatile
  3263  0033FA  D003               	goto	l577
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;main.c: 2263: LATCbits.LATC4 = 0;
  3267  0033FC  988B               	bcf	3979,4,c	;volatile
  3268  0033FE                     L12:
  3269                           
  3270                           ;main.c: 2264: bOn = 0;
  3271  0033FE  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3272                           
  3273                           ;main.c: 2265: } else {
  3274  003400  D010               	goto	l11105
  3275  003402                     l577:
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;main.c: 2266: LATCbits.LATC4 = 1;
  3279  003402  888B               	bsf	3979,4,c	;volatile
  3280  003404  D7D8               	goto	l11075
  3281  003406                     l11103:
  3282                           
  3283                           ; BSR set to: 0
  3284  003406  51CC               	movf	doActionToggle@i& (0+255),w,b
  3285                           
  3286                           ; Switch size 1, requested type "speed"
  3287                           ; Number of cases is 7, Range of values is 0 to 6
  3288                           ; switch strategies available:
  3289                           ; Name         Instructions Cycles
  3290                           ; simple_byte           22    12 (average)
  3291                           ;	Chosen strategy is simple_byte
  3292  003408  E0D1               	bz	l557
  3293  00340A  0A01               	xorlw	1	; case 1
  3294  00340C  E0D7               	bz	l561
  3295  00340E  0A03               	xorlw	3	; case 2
  3296  003410  E0DB               	bz	l564
  3297  003412  0A01               	xorlw	1	; case 3
  3298  003414  E0DF               	bz	l567
  3299  003416  0A07               	xorlw	7	; case 4
  3300  003418  E0E3               	bz	l570
  3301  00341A  0A01               	xorlw	1	; case 5
  3302  00341C  E0E7               	bz	l573
  3303  00341E  0A03               	xorlw	3	; case 6
  3304  003420  E0EB               	bz	l576
  3305  003422                     l11105:
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;main.c: 2273: if ( bOn ) {
  3309  003422  51CB               	movf	doActionToggle@bOn& (0+255),w,b
  3310  003424  E013               	bz	l579
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;main.c: 2276: if ( val & 0x08 ) {
  3314  003426  A7CA               	btfss	doActionToggle@val& (0+255),3,b
  3315  003428  D007               	goto	l11111
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;main.c: 2277: SendInformationEvent( i, 20, 3 );
  3319  00342A  0E14               	movlw	20
  3320  00342C  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3321  00342E  0E03               	movlw	3
  3322  003430  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3323  003432  51CC               	movf	doActionToggle@i& (0+255),w,b
  3324  003434  EC96  F01F         	call	_SendInformationEvent
  3325  003438                     l11111:
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;main.c: 2278: }
  3329                           ;main.c: 2281: if ( val & 0x20 ) {
  3330  003438  ABCA               	btfss	doActionToggle@val& (0+255),5,b
  3331  00343A  D01A               	goto	l11121
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;main.c: 2282: SendInformationEvent( i, 20, 25 );
  3335  00343C  0E14               	movlw	20
  3336  00343E  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3337  003440  0E19               	movlw	25
  3338  003442  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3339  003444  51CC               	movf	doActionToggle@i& (0+255),w,b
  3340  003446  EC96  F01F         	call	_SendInformationEvent
  3341  00344A  D012               	goto	l11121
  3342  00344C                     l579:
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;main.c: 2286: else {
  3346                           ;main.c: 2289: if ( val & 0x10 ) {
  3347  00344C  A9CA               	btfss	doActionToggle@val& (0+255),4,b
  3348  00344E  D007               	goto	l11117
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;main.c: 2290: SendInformationEvent( i, 20, 4 );
  3352  003450  0E14               	movlw	20
  3353  003452  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3354  003454  0E04               	movlw	4
  3355  003456  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3356  003458  51CC               	movf	doActionToggle@i& (0+255),w,b
  3357  00345A  EC96  F01F         	call	_SendInformationEvent
  3358  00345E                     l11117:
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;main.c: 2291: }
  3362                           ;main.c: 2294: if (val & 0x40 ) {
  3363  00345E  ADCA               	btfss	doActionToggle@val& (0+255),6,b
  3364  003460  D007               	goto	l11121
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;main.c: 2295: SendInformationEvent( i, 20, 24 );
  3368  003462  0E14               	movlw	20
  3369  003464  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3370  003466  0E18               	movlw	24
  3371  003468  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3372  00346A  51CC               	movf	doActionToggle@i& (0+255),w,b
  3373  00346C  EC96  F01F         	call	_SendInformationEvent
  3374  003470                     l11121:
  3375                           
  3376                           ; BSR set to: 0
  3377  003470  2BCC               	incf	doActionToggle@i& (0+255),f,b
  3378                           
  3379                           ; BSR set to: 0
  3380  003472  0E07               	movlw	7
  3381  003474  65CC               	cpfsgt	doActionToggle@i& (0+255),b
  3382  003476  D75C               	goto	l11059
  3383                           
  3384                           ; BSR set to: 0
  3385  003478  0C07               	retlw	7
  3386  00347A                     __end_of_doActionToggle:
  3387                           	opt stack 0
  3388                           tblptru	equ	0xFF8
  3389                           prodh	equ	0xFF4
  3390                           prodl	equ	0xFF3
  3391                           postinc0	equ	0xFEE
  3392                           wreg	equ	0xFE8
  3393                           postinc2	equ	0xFDE
  3394                           postdec2	equ	0xFDD
  3395                           fsr2h	equ	0xFDA
  3396                           fsr2l	equ	0xFD9
  3397                           status	equ	0xFD8
  3398                           
  3399 ;; *************** function _doActionDisable *****************
  3400 ;; Defined at:
  3401 ;;		line 2133 in file "../main.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;  dmflags         1    wreg     unsigned char 
  3404 ;;  arg             1   11[COMRAM] unsigned char 
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;  dmflags         1   15[COMRAM] unsigned char 
  3407 ;;  i               1   16[COMRAM] unsigned char 
  3408 ;;  val             1   14[COMRAM] unsigned char 
  3409 ;; Return value:  Size  Location     Type
  3410 ;;		None               void
  3411 ;; Registers used:
  3412 ;;		wreg, status,2, status,0, cstack
  3413 ;; Tracked objects:
  3414 ;;		On entry : F/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3418 ;;      Params:         1       0       0       0       0       0       0
  3419 ;;      Locals:         3       0       0       0       0       0       0
  3420 ;;      Temps:          2       0       0       0       0       0       0
  3421 ;;      Totals:         6       0       0       0       0       0       0
  3422 ;;Total ram usage:        6 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    3
  3425 ;; This function calls:
  3426 ;;		_Busy_eep
  3427 ;;		_Write_b_eep
  3428 ;;		_Read_b_eep
  3429 ;; This function is called by:
  3430 ;;		_doDM
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           	psect	text10
  3435  003D0A                     __ptext10:
  3436                           	opt stack 0
  3437  003D0A                     _doActionDisable:
  3438                           	opt stack 26
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;incstack = 0
  3442                           ;incstack = 0
  3443                           ;doActionDisable@dmflags stored from wreg
  3444  003D0A  CFE8 F010          	movff	wreg,doActionDisable@dmflags
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;main.c: 2135: unsigned char i;
  3448                           ;main.c: 2136: unsigned char val;
  3449                           ;main.c: 2138: for ( i = 0; i < 8; i++ ) {
  3450  003D0E  6A11               	clrf	doActionDisable@i,c
  3451  003D10                     l9287:
  3452                           
  3453                           ;main.c: 2141: if ( !( arg & (1 << i) ) ) continue;
  3454  003D10  C011  F00D         	movff	doActionDisable@i,??_doActionDisable
  3455  003D14  0E01               	movlw	1
  3456  003D16  6E0E               	movwf	(??_doActionDisable+1)& (0+255),c
  3457  003D18  2A0D               	incf	??_doActionDisable,f,c
  3458  003D1A  D002               	goto	u10584
  3459  003D1C                     u10585:
  3460  003D1C  90D8               	bcf	status,0,c
  3461  003D1E  360E               	rlcf	??_doActionDisable+1,f,c
  3462  003D20                     u10584:
  3463  003D20  2E0D               	decfsz	??_doActionDisable,f,c
  3464  003D22  D7FC               	goto	u10585
  3465  003D24  500E               	movf	??_doActionDisable+1,w,c
  3466  003D26  140C               	andwf	doActionDisable@arg,w,c
  3467  003D28  E03A               	bz	l9305
  3468                           
  3469                           ;main.c: 2144: if ( dmflags & 0x10 ) {
  3470  003D2A  A810               	btfss	doActionDisable@dmflags,4,c
  3471  003D2C  D010               	goto	l541
  3472                           
  3473                           ;main.c: 2145: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3474  003D2E  90D8               	bcf	status,0,c
  3475  003D30  3411               	rlcf	doActionDisable@i,w,c
  3476  003D32  6E0D               	movwf	??_doActionDisable& (0+255),c
  3477  003D34  6A0E               	clrf	(??_doActionDisable+1)& (0+255),c
  3478  003D36  360E               	rlcf	(??_doActionDisable+1)& (0+255),f,c
  3479  003D38  0E75               	movlw	117
  3480  003D3A  240D               	addwf	??_doActionDisable,w,c
  3481  003D3C  6E08               	movwf	?_Read_b_eep,c
  3482  003D3E  0E00               	movlw	0
  3483  003D40  200E               	addwfc	??_doActionDisable+1,w,c
  3484  003D42  6E09               	movwf	?_Read_b_eep+1,c
  3485  003D44  EC3A  F022         	call	_Read_b_eep	;wreg free
  3486  003D48  0100               	movlb	0	; () banked
  3487  003D4A  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3488  003D4C  E128               	bnz	l9305
  3489  003D4E                     l541:
  3490                           
  3491                           ;main.c: 2148: }
  3492                           ;main.c: 2149: }
  3493                           ;main.c: 2152: if ( dmflags & 0x08 ) {
  3494  003D4E  A610               	btfss	doActionDisable@dmflags,3,c
  3495  003D50  D010               	goto	l9299
  3496                           
  3497                           ;main.c: 2153: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3498  003D52  90D8               	bcf	status,0,c
  3499  003D54  3411               	rlcf	doActionDisable@i,w,c
  3500  003D56  6E0D               	movwf	??_doActionDisable& (0+255),c
  3501  003D58  6A0E               	clrf	(??_doActionDisable+1)& (0+255),c
  3502  003D5A  360E               	rlcf	(??_doActionDisable+1)& (0+255),f,c
  3503  003D5C  0E76               	movlw	118
  3504  003D5E  240D               	addwf	??_doActionDisable,w,c
  3505  003D60  6E08               	movwf	?_Read_b_eep,c
  3506  003D62  0E00               	movlw	0
  3507  003D64  200E               	addwfc	??_doActionDisable+1,w,c
  3508  003D66  6E09               	movwf	?_Read_b_eep+1,c
  3509  003D68  EC3A  F022         	call	_Read_b_eep	;wreg free
  3510  003D6C  0100               	movlb	0	; () banked
  3511  003D6E  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3512  003D70  E116               	bnz	l9305
  3513  003D72                     l9299:
  3514                           
  3515                           ;main.c: 2156: }
  3516                           ;main.c: 2157: }
  3517                           ;main.c: 2159: val = Read_b_eep(0x43 + 10 + i);
  3518  003D72  0E4D               	movlw	77
  3519  003D74  2411               	addwf	doActionDisable@i,w,c
  3520  003D76  6E08               	movwf	?_Read_b_eep,c
  3521  003D78  6A09               	clrf	?_Read_b_eep+1,c
  3522  003D7A  0E00               	movlw	0
  3523  003D7C  2209               	addwfc	?_Read_b_eep+1,f,c
  3524  003D7E  EC3A  F022         	call	_Read_b_eep	;wreg free
  3525  003D82  6E0F               	movwf	doActionDisable@val,c
  3526                           
  3527                           ;main.c: 2160: (Busy_eep(), Write_b_eep(0x43 + 10 + i,val & ~0x80));
  3528  003D84  EC6E  F022         	call	_Busy_eep	;wreg free
  3529  003D88  0E4D               	movlw	77
  3530  003D8A  2411               	addwf	doActionDisable@i,w,c
  3531  003D8C  6E08               	movwf	?_Write_b_eep,c
  3532  003D8E  6A09               	clrf	?_Write_b_eep+1,c
  3533  003D90  0E00               	movlw	0
  3534  003D92  2209               	addwfc	?_Write_b_eep+1,f,c
  3535  003D94  500F               	movf	doActionDisable@val,w,c
  3536  003D96  0B7F               	andlw	127
  3537  003D98  6E0A               	movwf	?_Write_b_eep+2,c
  3538  003D9A  EC53  F020         	call	_Write_b_eep	;wreg free
  3539  003D9E                     l9305:
  3540  003D9E  2A11               	incf	doActionDisable@i,f,c
  3541  003DA0  0E07               	movlw	7
  3542  003DA2  6411               	cpfsgt	doActionDisable@i,c
  3543  003DA4  D7B5               	goto	l9287
  3544  003DA6  0C07               	retlw	7
  3545  003DA8                     __end_of_doActionDisable:
  3546                           	opt stack 0
  3547                           tblptru	equ	0xFF8
  3548                           prodh	equ	0xFF4
  3549                           prodl	equ	0xFF3
  3550                           postinc0	equ	0xFEE
  3551                           wreg	equ	0xFE8
  3552                           postinc2	equ	0xFDE
  3553                           postdec2	equ	0xFDD
  3554                           fsr2h	equ	0xFDA
  3555                           fsr2l	equ	0xFD9
  3556                           status	equ	0xFD8
  3557                           
  3558 ;; *************** function _doActionStatus *****************
  3559 ;; Defined at:
  3560 ;;		line 2037 in file "../main.c"
  3561 ;; Parameters:    Size  Location     Type
  3562 ;;  dmflags         1    wreg     unsigned char 
  3563 ;;  arg             1   80[COMRAM] unsigned char 
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3566 ;;  i               1   27[BANK0 ] unsigned char 
  3567 ;;  val             1   26[BANK0 ] unsigned char 
  3568 ;;  bOn             1   25[BANK0 ] enum E15660
  3569 ;; Return value:  Size  Location     Type
  3570 ;;		None               void
  3571 ;; Registers used:
  3572 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3573 ;; Tracked objects:
  3574 ;;		On entry : F/0
  3575 ;;		On exit  : F/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3578 ;;      Params:         1       0       0       0       0       0       0
  3579 ;;      Locals:         0       4       0       0       0       0       0
  3580 ;;      Temps:          0       2       0       0       0       0       0
  3581 ;;      Totals:         1       6       0       0       0       0       0
  3582 ;;Total ram usage:        7 bytes
  3583 ;; Hardware stack levels used:    1
  3584 ;; Hardware stack levels required when called:    7
  3585 ;; This function calls:
  3586 ;;		_Read_b_eep
  3587 ;;		_SendInformationEvent
  3588 ;; This function is called by:
  3589 ;;		_doDM
  3590 ;; This function uses a non-reentrant model
  3591 ;;
  3592                           
  3593                           	psect	text11
  3594  0035CA                     __ptext11:
  3595                           	opt stack 0
  3596  0035CA                     _doActionStatus:
  3597                           	opt stack 22
  3598                           
  3599                           ;incstack = 0
  3600                           ;incstack = 0
  3601                           ;doActionStatus@dmflags stored from wreg
  3602  0035CA  CFE8 F0C9          	movff	wreg,doActionStatus@dmflags
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;main.c: 2039: unsigned char i;
  3606                           ;main.c: 2040: unsigned char val;
  3607                           ;main.c: 2041: BOOL bOn = 0;
  3608  0035CE  6BCA               	clrf	doActionStatus@bOn& (0+255),b
  3609                           
  3610                           ;main.c: 2043: for (i = 0; i < 8; i++) {
  3611  0035D0  6BCC               	clrf	doActionStatus@i& (0+255),b
  3612  0035D2                     l11001:
  3613                           
  3614                           ; BSR set to: 0
  3615                           ;main.c: 2046: if (!(arg & (1 << i))) continue;
  3616  0035D2  C0CC  F0C7         	movff	doActionStatus@i,??_doActionStatus
  3617  0035D6  0E01               	movlw	1
  3618  0035D8  6FC8               	movwf	(??_doActionStatus+1)& (0+255),b
  3619  0035DA  2BC7               	incf	??_doActionStatus& (0+255),f,b
  3620  0035DC  D002               	goto	u13364
  3621  0035DE                     u13365:
  3622  0035DE  90D8               	bcf	status,0,c
  3623  0035E0  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3624  0035E2                     u13364:
  3625  0035E2  2FC7               	decfsz	??_doActionStatus& (0+255),f,b
  3626  0035E4  D7FC               	goto	u13365
  3627  0035E6  51C8               	movf	(??_doActionStatus+1)& (0+255),w,b
  3628  0035E8  1451               	andwf	doActionStatus@arg,w,c
  3629  0035EA  E101 D087          	bz	l11049
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;main.c: 2049: if ( dmflags & 0x10 ) {
  3633  0035EE  A9C9               	btfss	doActionStatus@dmflags& (0+255),4,b
  3634  0035F0  D010               	goto	l515
  3635                           
  3636                           ; BSR set to: 0
  3637                           ;main.c: 2050: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3638  0035F2  90D8               	bcf	status,0,c
  3639  0035F4  35CC               	rlcf	doActionStatus@i& (0+255),w,b
  3640  0035F6  6FC7               	movwf	??_doActionStatus& (0+255),b
  3641  0035F8  6BC8               	clrf	(??_doActionStatus+1)& (0+255),b
  3642  0035FA  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3643  0035FC  0E75               	movlw	117
  3644  0035FE  25C7               	addwf	??_doActionStatus& (0+255),w,b
  3645  003600  6E08               	movwf	?_Read_b_eep,c
  3646  003602  0E00               	movlw	0
  3647  003604  21C8               	addwfc	(??_doActionStatus+1)& (0+255),w,b
  3648  003606  6E09               	movwf	?_Read_b_eep+1,c
  3649  003608  EC3A  F022         	call	_Read_b_eep	;wreg free
  3650  00360C  0100               	movlb	0	; () banked
  3651  00360E  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3652  003610  E175               	bnz	l11049
  3653  003612                     l515:
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;main.c: 2053: }
  3657                           ;main.c: 2054: }
  3658                           ;main.c: 2057: if ( dmflags & 0x08 ) {
  3659  003612  A7C9               	btfss	doActionStatus@dmflags& (0+255),3,b
  3660  003614  D010               	goto	l11013
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;main.c: 2058: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3664  003616  90D8               	bcf	status,0,c
  3665  003618  35CC               	rlcf	doActionStatus@i& (0+255),w,b
  3666  00361A  6FC7               	movwf	??_doActionStatus& (0+255),b
  3667  00361C  6BC8               	clrf	(??_doActionStatus+1)& (0+255),b
  3668  00361E  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3669  003620  0E76               	movlw	118
  3670  003622  25C7               	addwf	??_doActionStatus& (0+255),w,b
  3671  003624  6E08               	movwf	?_Read_b_eep,c
  3672  003626  0E00               	movlw	0
  3673  003628  21C8               	addwfc	(??_doActionStatus+1)& (0+255),w,b
  3674  00362A  6E09               	movwf	?_Read_b_eep+1,c
  3675  00362C  EC3A  F022         	call	_Read_b_eep	;wreg free
  3676  003630  0100               	movlb	0	; () banked
  3677  003632  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3678  003634  E163               	bnz	l11049
  3679  003636                     l11013:
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;main.c: 2061: }
  3683                           ;main.c: 2062: }
  3684                           ;main.c: 2064: val = Read_b_eep(0x43 + 10 + i);
  3685  003636  0E4D               	movlw	77
  3686  003638  25CC               	addwf	doActionStatus@i& (0+255),w,b
  3687  00363A  6E08               	movwf	?_Read_b_eep,c
  3688  00363C  6A09               	clrf	?_Read_b_eep+1,c
  3689  00363E  0E00               	movlw	0
  3690  003640  2209               	addwfc	?_Read_b_eep+1,f,c
  3691  003642  EC3A  F022         	call	_Read_b_eep	;wreg free
  3692  003646  0100               	movlb	0	; () banked
  3693  003648  6FCB               	movwf	doActionStatus@val& (0+255),b
  3694                           
  3695                           ;main.c: 2066: switch (i) {
  3696  00364A  D023               	goto	l11031
  3697  00364C                     l11015:
  3698                           
  3699                           ; BSR set to: 0
  3700                           ;main.c: 2069: bOn = LATBbits.LATB4;
  3701  00364C  0E00               	movlw	0
  3702  00364E  B88A               	btfsc	3978,4,c	;volatile
  3703  003650  0E01               	movlw	1
  3704  003652  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3705                           
  3706                           ;main.c: 2070: break;
  3707  003654  D02C               	goto	l11033
  3708  003656                     l11017:
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;main.c: 2073: bOn = LATBbits.LATB1;
  3712  003656  0E00               	movlw	0
  3713  003658  B28A               	btfsc	3978,1,c	;volatile
  3714  00365A  0E01               	movlw	1
  3715  00365C  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3716                           
  3717                           ;main.c: 2074: break;
  3718  00365E  D027               	goto	l11033
  3719  003660                     l11019:
  3720                           
  3721                           ; BSR set to: 0
  3722                           ;main.c: 2077: bOn = LATBbits.LATB0;
  3723  003660  0E00               	movlw	0
  3724  003662  B08A               	btfsc	3978,0,c	;volatile
  3725  003664  0E01               	movlw	1
  3726  003666  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3727                           
  3728                           ;main.c: 2078: break;
  3729  003668  D022               	goto	l11033
  3730  00366A                     l11021:
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;main.c: 2081: bOn = LATCbits.LATC7;
  3734  00366A  0E00               	movlw	0
  3735  00366C  BE8B               	btfsc	3979,7,c	;volatile
  3736  00366E  0E01               	movlw	1
  3737  003670  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3738                           
  3739                           ;main.c: 2082: break;
  3740  003672  D01D               	goto	l11033
  3741  003674                     l11023:
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;main.c: 2085: bOn = LATCbits.LATC6;
  3745  003674  0E00               	movlw	0
  3746  003676  BC8B               	btfsc	3979,6,c	;volatile
  3747  003678  0E01               	movlw	1
  3748  00367A  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3749                           
  3750                           ;main.c: 2086: break;
  3751  00367C  D018               	goto	l11033
  3752  00367E                     l11025:
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;main.c: 2089: bOn = LATCbits.LATC5;
  3756  00367E  0E00               	movlw	0
  3757  003680  BA8B               	btfsc	3979,5,c	;volatile
  3758  003682  0E01               	movlw	1
  3759  003684  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3760                           
  3761                           ;main.c: 2090: break;
  3762  003686  D013               	goto	l11033
  3763  003688                     l11027:
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;main.c: 2093: bOn = LATCbits.LATC4;
  3767  003688  0E00               	movlw	0
  3768  00368A  B88B               	btfsc	3979,4,c	;volatile
  3769  00368C  0E01               	movlw	1
  3770  00368E  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3771                           
  3772                           ;main.c: 2094: break;
  3773  003690  D00E               	goto	l11033
  3774  003692                     l11031:
  3775                           
  3776                           ; BSR set to: 0
  3777  003692  51CC               	movf	doActionStatus@i& (0+255),w,b
  3778                           
  3779                           ; Switch size 1, requested type "speed"
  3780                           ; Number of cases is 7, Range of values is 0 to 6
  3781                           ; switch strategies available:
  3782                           ; Name         Instructions Cycles
  3783                           ; simple_byte           22    12 (average)
  3784                           ;	Chosen strategy is simple_byte
  3785  003694  E0DB               	bz	l11015
  3786  003696  0A01               	xorlw	1	; case 1
  3787  003698  E0DE               	bz	l11017
  3788  00369A  0A03               	xorlw	3	; case 2
  3789  00369C  E0E1               	bz	l11019
  3790  00369E  0A01               	xorlw	1	; case 3
  3791  0036A0  E0E4               	bz	l11021
  3792  0036A2  0A07               	xorlw	7	; case 4
  3793  0036A4  E0E7               	bz	l11023
  3794  0036A6  0A01               	xorlw	1	; case 5
  3795  0036A8  E0EA               	bz	l11025
  3796  0036AA  0A03               	xorlw	3	; case 6
  3797  0036AC  E0ED               	bz	l11027
  3798  0036AE                     l11033:
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;main.c: 2098: if (bOn) {
  3802  0036AE  51CA               	movf	doActionStatus@bOn& (0+255),w,b
  3803  0036B0  E013               	bz	l528
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;main.c: 2101: if ( val & 0x10 ) {
  3807  0036B2  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3808  0036B4  D007               	goto	l11039
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;main.c: 2102: SendInformationEvent( i, 20, 4 );
  3812  0036B6  0E14               	movlw	20
  3813  0036B8  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3814  0036BA  0E04               	movlw	4
  3815  0036BC  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3816  0036BE  51CC               	movf	doActionStatus@i& (0+255),w,b
  3817  0036C0  EC96  F01F         	call	_SendInformationEvent
  3818  0036C4                     l11039:
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;main.c: 2103: }
  3822                           ;main.c: 2106: if ( val & 0x40 ) {
  3823  0036C4  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3824  0036C6  D01A               	goto	l11049
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;main.c: 2107: SendInformationEvent( i, 20, 24 );
  3828  0036C8  0E14               	movlw	20
  3829  0036CA  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3830  0036CC  0E18               	movlw	24
  3831  0036CE  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3832  0036D0  51CC               	movf	doActionStatus@i& (0+255),w,b
  3833  0036D2  EC96  F01F         	call	_SendInformationEvent
  3834  0036D6  D012               	goto	l11049
  3835  0036D8                     l528:
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;main.c: 2111: else {
  3839                           ;main.c: 2114: if ( val & 0x10 ) {
  3840  0036D8  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3841  0036DA  D007               	goto	l11045
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;main.c: 2115: SendInformationEvent( i, 20, 4 );
  3845  0036DC  0E14               	movlw	20
  3846  0036DE  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3847  0036E0  0E04               	movlw	4
  3848  0036E2  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3849  0036E4  51CC               	movf	doActionStatus@i& (0+255),w,b
  3850  0036E6  EC96  F01F         	call	_SendInformationEvent
  3851  0036EA                     l11045:
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;main.c: 2116: }
  3855                           ;main.c: 2119: if ( val & 0x40 ) {
  3856  0036EA  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3857  0036EC  D007               	goto	l11049
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;main.c: 2120: SendInformationEvent( i, 20, 24 );
  3861  0036EE  0E14               	movlw	20
  3862  0036F0  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3863  0036F2  0E18               	movlw	24
  3864  0036F4  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3865  0036F6  51CC               	movf	doActionStatus@i& (0+255),w,b
  3866  0036F8  EC96  F01F         	call	_SendInformationEvent
  3867  0036FC                     l11049:
  3868                           
  3869                           ; BSR set to: 0
  3870  0036FC  2BCC               	incf	doActionStatus@i& (0+255),f,b
  3871                           
  3872                           ; BSR set to: 0
  3873  0036FE  0E07               	movlw	7
  3874  003700  65CC               	cpfsgt	doActionStatus@i& (0+255),b
  3875  003702  D767               	goto	l11001
  3876                           
  3877                           ; BSR set to: 0
  3878  003704  0C07               	retlw	7
  3879  003706                     __end_of_doActionStatus:
  3880                           	opt stack 0
  3881                           tblptru	equ	0xFF8
  3882                           prodh	equ	0xFF4
  3883                           prodl	equ	0xFF3
  3884                           postinc0	equ	0xFEE
  3885                           wreg	equ	0xFE8
  3886                           postinc2	equ	0xFDE
  3887                           postdec2	equ	0xFDD
  3888                           fsr2h	equ	0xFDA
  3889                           fsr2l	equ	0xFD9
  3890                           status	equ	0xFD8
  3891                           
  3892 ;; *************** function _doActionPulse *****************
  3893 ;; Defined at:
  3894 ;;		line 1939 in file "../main.c"
  3895 ;; Parameters:    Size  Location     Type
  3896 ;;  dmflags         1    wreg     unsigned char 
  3897 ;;  arg             1    9[COMRAM] unsigned char 
  3898 ;; Auto vars:     Size  Location     Type
  3899 ;;  dmflags         1   14[COMRAM] unsigned char 
  3900 ;;  i               1   15[COMRAM] unsigned char 
  3901 ;;  val             1   13[COMRAM] unsigned char 
  3902 ;; Return value:  Size  Location     Type
  3903 ;;		None               void
  3904 ;; Registers used:
  3905 ;;		wreg, status,2, status,0, cstack
  3906 ;; Tracked objects:
  3907 ;;		On entry : F/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3911 ;;      Params:         1       0       0       0       0       0       0
  3912 ;;      Locals:         3       0       0       0       0       0       0
  3913 ;;      Temps:          3       0       0       0       0       0       0
  3914 ;;      Totals:         7       0       0       0       0       0       0
  3915 ;;Total ram usage:        7 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; Hardware stack levels required when called:    3
  3918 ;; This function calls:
  3919 ;;		_Read_b_eep
  3920 ;; This function is called by:
  3921 ;;		_doDM
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           	psect	text12
  3926  002CAC                     __ptext12:
  3927                           	opt stack 0
  3928  002CAC                     _doActionPulse:
  3929                           	opt stack 26
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;incstack = 0
  3933                           ;incstack = 0
  3934                           ;doActionPulse@dmflags stored from wreg
  3935  002CAC  CFE8 F00F          	movff	wreg,doActionPulse@dmflags
  3936                           
  3937                           ; BSR set to: 0
  3938                           ;main.c: 1941: unsigned char i;
  3939                           ;main.c: 1942: unsigned char val;
  3940                           ;main.c: 1944: for ( i = 0; i < 8; i++ ) {
  3941  002CB0  6A10               	clrf	doActionPulse@i,c
  3942  002CB2                     l9169:
  3943                           
  3944                           ;main.c: 1947: if ( !( arg & ( 1 << i ) ) ) continue;
  3945  002CB2  C010  F00B         	movff	doActionPulse@i,??_doActionPulse
  3946  002CB6  0E01               	movlw	1
  3947  002CB8  6E0C               	movwf	(??_doActionPulse+1)& (0+255),c
  3948  002CBA  2A0B               	incf	??_doActionPulse,f,c
  3949  002CBC  D002               	goto	u10384
  3950  002CBE                     u10385:
  3951  002CBE  90D8               	bcf	status,0,c
  3952  002CC0  360C               	rlcf	??_doActionPulse+1,f,c
  3953  002CC2                     u10384:
  3954  002CC2  2E0B               	decfsz	??_doActionPulse,f,c
  3955  002CC4  D7FC               	goto	u10385
  3956  002CC6  500C               	movf	??_doActionPulse+1,w,c
  3957  002CC8  140A               	andwf	doActionPulse@arg,w,c
  3958  002CCA  E101 D0EA          	bz	l9219
  3959                           
  3960                           ;main.c: 1950: if ( dmflags & 0x10 ) {
  3961  002CCE  A80F               	btfss	doActionPulse@dmflags,4,c
  3962  002CD0  D011               	goto	l494
  3963                           
  3964                           ;main.c: 1951: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3965  002CD2  90D8               	bcf	status,0,c
  3966  002CD4  3410               	rlcf	doActionPulse@i,w,c
  3967  002CD6  6E0B               	movwf	??_doActionPulse& (0+255),c
  3968  002CD8  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  3969  002CDA  360C               	rlcf	(??_doActionPulse+1)& (0+255),f,c
  3970  002CDC  0E75               	movlw	117
  3971  002CDE  240B               	addwf	??_doActionPulse,w,c
  3972  002CE0  6E08               	movwf	?_Read_b_eep,c
  3973  002CE2  0E00               	movlw	0
  3974  002CE4  200C               	addwfc	??_doActionPulse+1,w,c
  3975  002CE6  6E09               	movwf	?_Read_b_eep+1,c
  3976  002CE8  EC3A  F022         	call	_Read_b_eep	;wreg free
  3977  002CEC  0100               	movlb	0	; () banked
  3978  002CEE  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3979  002CF0  E001 D0D7          	bnz	l9219
  3980  002CF4                     l494:
  3981                           
  3982                           ;main.c: 1954: }
  3983                           ;main.c: 1955: }
  3984                           ;main.c: 1958: if ( dmflags & 0x08 ) {
  3985  002CF4  A60F               	btfss	doActionPulse@dmflags,3,c
  3986  002CF6  D011               	goto	l9181
  3987                           
  3988                           ;main.c: 1959: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3989  002CF8  90D8               	bcf	status,0,c
  3990  002CFA  3410               	rlcf	doActionPulse@i,w,c
  3991  002CFC  6E0B               	movwf	??_doActionPulse& (0+255),c
  3992  002CFE  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  3993  002D00  360C               	rlcf	(??_doActionPulse+1)& (0+255),f,c
  3994  002D02  0E76               	movlw	118
  3995  002D04  240B               	addwf	??_doActionPulse,w,c
  3996  002D06  6E08               	movwf	?_Read_b_eep,c
  3997  002D08  0E00               	movlw	0
  3998  002D0A  200C               	addwfc	??_doActionPulse+1,w,c
  3999  002D0C  6E09               	movwf	?_Read_b_eep+1,c
  4000  002D0E  EC3A  F022         	call	_Read_b_eep	;wreg free
  4001  002D12  0100               	movlb	0	; () banked
  4002  002D14  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4003  002D16  E001 D0C4          	bnz	l9219
  4004  002D1A                     l9181:
  4005                           
  4006                           ;main.c: 1962: }
  4007                           ;main.c: 1963: }
  4008                           ;main.c: 1965: val = Read_b_eep(0x43 + 10 + i);
  4009  002D1A  0E4D               	movlw	77
  4010  002D1C  2410               	addwf	doActionPulse@i,w,c
  4011  002D1E  6E08               	movwf	?_Read_b_eep,c
  4012  002D20  6A09               	clrf	?_Read_b_eep+1,c
  4013  002D22  0E00               	movlw	0
  4014  002D24  2209               	addwfc	?_Read_b_eep+1,f,c
  4015  002D26  EC3A  F022         	call	_Read_b_eep	;wreg free
  4016  002D2A  6E0E               	movwf	doActionPulse@val,c
  4017                           
  4018                           ;main.c: 1968: if ( !( val & 0x80 ) ) continue;
  4019  002D2C  AE0E               	btfss	doActionPulse@val,7,c
  4020  002D2E  D0B9               	goto	l9219
  4021  002D30  D0A8               	goto	l9217
  4022  002D32                     l500:
  4023                           
  4024                           ;main.c: 1973: LATBbits.LATB4 = 0;
  4025  002D32  988A               	bcf	3978,4,c	;volatile
  4026                           
  4027                           ;main.c: 1974: relay_pulse_flags |= 0x01;
  4028  002D34  0100               	movlb	0	; () banked
  4029  002D36  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;main.c: 1975: relay_pulse_timer[ 0 ] =
  4033                           ;main.c: 1976: Read_b_eep(0x43 + 18) * 256 +
  4034                           ;main.c: 1977: Read_b_eep(0x43 + 19);
  4035  002D38  6A09               	clrf	?_Read_b_eep+1,c
  4036  002D3A  0E56               	movlw	86
  4037  002D3C  6E08               	movwf	?_Read_b_eep,c
  4038  002D3E  EC3A  F022         	call	_Read_b_eep	;wreg free
  4039  002D42  6E0B               	movwf	??_doActionPulse& (0+255),c
  4040  002D44  6A09               	clrf	?_Read_b_eep+1,c
  4041  002D46  0E55               	movlw	85
  4042  002D48  6E08               	movwf	?_Read_b_eep,c
  4043  002D4A  EC3A  F022         	call	_Read_b_eep	;wreg free
  4044  002D4E  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4045  002D50  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4046  002D52  500B               	movf	??_doActionPulse,w,c
  4047  002D54  240C               	addwf	??_doActionPulse+1,w,c
  4048  002D56  0100               	movlb	0	; () banked
  4049  002D58  6F70               	movwf	_relay_pulse_timer& (0+255),b
  4050  002D5A  0E00               	movlw	0
  4051  002D5C  200D               	addwfc	??_doActionPulse+2,w,c
  4052  002D5E  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  4053                           
  4054                           ;main.c: 1978: break;
  4055  002D60  D0A0               	goto	l9219
  4056  002D62                     l502:
  4057                           
  4058                           ;main.c: 1981: LATBbits.LATB1 = 0;
  4059  002D62  928A               	bcf	3978,1,c	;volatile
  4060                           
  4061                           ;main.c: 1982: relay_pulse_flags |= 0x02;
  4062  002D64  0100               	movlb	0	; () banked
  4063  002D66  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  4064                           
  4065                           ; BSR set to: 0
  4066                           ;main.c: 1983: relay_pulse_timer[ 1 ] =
  4067                           ;main.c: 1984: Read_b_eep(0x43 + 20) * 256 +
  4068                           ;main.c: 1985: Read_b_eep(0x43 + 21);
  4069  002D68  6A09               	clrf	?_Read_b_eep+1,c
  4070  002D6A  0E58               	movlw	88
  4071  002D6C  6E08               	movwf	?_Read_b_eep,c
  4072  002D6E  EC3A  F022         	call	_Read_b_eep	;wreg free
  4073  002D72  6E0B               	movwf	??_doActionPulse& (0+255),c
  4074  002D74  6A09               	clrf	?_Read_b_eep+1,c
  4075  002D76  0E57               	movlw	87
  4076  002D78  6E08               	movwf	?_Read_b_eep,c
  4077  002D7A  EC3A  F022         	call	_Read_b_eep	;wreg free
  4078  002D7E  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4079  002D80  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4080  002D82  500B               	movf	??_doActionPulse,w,c
  4081  002D84  240C               	addwf	??_doActionPulse+1,w,c
  4082  002D86  0100               	movlb	0	; () banked
  4083  002D88  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  4084  002D8A  0E00               	movlw	0
  4085  002D8C  200D               	addwfc	??_doActionPulse+2,w,c
  4086  002D8E  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  4087                           
  4088                           ;main.c: 1986: break;
  4089  002D90  D088               	goto	l9219
  4090  002D92                     l503:
  4091                           
  4092                           ;main.c: 1989: LATBbits.LATB0 = 0;
  4093  002D92  908A               	bcf	3978,0,c	;volatile
  4094                           
  4095                           ;main.c: 1990: relay_pulse_flags |= 0x04;
  4096  002D94  0100               	movlb	0	; () banked
  4097  002D96  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;main.c: 1991: relay_pulse_timer[ 2 ] =
  4101                           ;main.c: 1992: Read_b_eep(0x43 + 22) * 256 +
  4102                           ;main.c: 1993: Read_b_eep(0x43 + 23);
  4103  002D98  6A09               	clrf	?_Read_b_eep+1,c
  4104  002D9A  0E5A               	movlw	90
  4105  002D9C  6E08               	movwf	?_Read_b_eep,c
  4106  002D9E  EC3A  F022         	call	_Read_b_eep	;wreg free
  4107  002DA2  6E0B               	movwf	??_doActionPulse& (0+255),c
  4108  002DA4  6A09               	clrf	?_Read_b_eep+1,c
  4109  002DA6  0E59               	movlw	89
  4110  002DA8  6E08               	movwf	?_Read_b_eep,c
  4111  002DAA  EC3A  F022         	call	_Read_b_eep	;wreg free
  4112  002DAE  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4113  002DB0  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4114  002DB2  500B               	movf	??_doActionPulse,w,c
  4115  002DB4  240C               	addwf	??_doActionPulse+1,w,c
  4116  002DB6  0100               	movlb	0	; () banked
  4117  002DB8  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  4118  002DBA  0E00               	movlw	0
  4119  002DBC  200D               	addwfc	??_doActionPulse+2,w,c
  4120  002DBE  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  4121                           
  4122                           ;main.c: 1994: break;
  4123  002DC0  D070               	goto	l9219
  4124  002DC2                     l504:
  4125                           
  4126                           ;main.c: 1997: LATCbits.LATC7 = 0;
  4127  002DC2  9E8B               	bcf	3979,7,c	;volatile
  4128                           
  4129                           ;main.c: 1998: relay_pulse_flags |= 0x08;
  4130  002DC4  0100               	movlb	0	; () banked
  4131  002DC6  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;main.c: 1999: relay_pulse_timer[ 3 ] =
  4135                           ;main.c: 2000: Read_b_eep(0x43 + 24) * 256 +
  4136                           ;main.c: 2001: Read_b_eep(0x43 + 25);
  4137  002DC8  6A09               	clrf	?_Read_b_eep+1,c
  4138  002DCA  0E5C               	movlw	92
  4139  002DCC  6E08               	movwf	?_Read_b_eep,c
  4140  002DCE  EC3A  F022         	call	_Read_b_eep	;wreg free
  4141  002DD2  6E0B               	movwf	??_doActionPulse& (0+255),c
  4142  002DD4  6A09               	clrf	?_Read_b_eep+1,c
  4143  002DD6  0E5B               	movlw	91
  4144  002DD8  6E08               	movwf	?_Read_b_eep,c
  4145  002DDA  EC3A  F022         	call	_Read_b_eep	;wreg free
  4146  002DDE  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4147  002DE0  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4148  002DE2  500B               	movf	??_doActionPulse,w,c
  4149  002DE4  240C               	addwf	??_doActionPulse+1,w,c
  4150  002DE6  0100               	movlb	0	; () banked
  4151  002DE8  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  4152  002DEA  0E00               	movlw	0
  4153  002DEC  200D               	addwfc	??_doActionPulse+2,w,c
  4154  002DEE  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  4155                           
  4156                           ;main.c: 2002: break;
  4157  002DF0  D058               	goto	l9219
  4158  002DF2                     l505:
  4159                           
  4160                           ;main.c: 2005: LATCbits.LATC6 = 0;
  4161  002DF2  9C8B               	bcf	3979,6,c	;volatile
  4162                           
  4163                           ;main.c: 2006: relay_pulse_flags |= 0x10;
  4164  002DF4  0100               	movlb	0	; () banked
  4165  002DF6  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;main.c: 2007: relay_pulse_timer[ 4 ] =
  4169                           ;main.c: 2008: Read_b_eep(0x43 + 26) * 256 +
  4170                           ;main.c: 2009: Read_b_eep(0x43 + 27);
  4171  002DF8  6A09               	clrf	?_Read_b_eep+1,c
  4172  002DFA  0E5E               	movlw	94
  4173  002DFC  6E08               	movwf	?_Read_b_eep,c
  4174  002DFE  EC3A  F022         	call	_Read_b_eep	;wreg free
  4175  002E02  6E0B               	movwf	??_doActionPulse& (0+255),c
  4176  002E04  6A09               	clrf	?_Read_b_eep+1,c
  4177  002E06  0E5D               	movlw	93
  4178  002E08  6E08               	movwf	?_Read_b_eep,c
  4179  002E0A  EC3A  F022         	call	_Read_b_eep	;wreg free
  4180  002E0E  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4181  002E10  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4182  002E12  500B               	movf	??_doActionPulse,w,c
  4183  002E14  240C               	addwf	??_doActionPulse+1,w,c
  4184  002E16  0100               	movlb	0	; () banked
  4185  002E18  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  4186  002E1A  0E00               	movlw	0
  4187  002E1C  200D               	addwfc	??_doActionPulse+2,w,c
  4188  002E1E  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  4189                           
  4190                           ;main.c: 2010: break;
  4191  002E20  D040               	goto	l9219
  4192  002E22                     l506:
  4193                           
  4194                           ;main.c: 2013: LATCbits.LATC5 = 0;
  4195  002E22  9A8B               	bcf	3979,5,c	;volatile
  4196                           
  4197                           ;main.c: 2014: relay_pulse_flags |= 0x20;
  4198  002E24  0100               	movlb	0	; () banked
  4199  002E26  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;main.c: 2015: relay_pulse_timer[ 5 ] =
  4203                           ;main.c: 2016: Read_b_eep(0x43 + 28) * 256 +
  4204                           ;main.c: 2017: Read_b_eep(0x43 + 29);
  4205  002E28  6A09               	clrf	?_Read_b_eep+1,c
  4206  002E2A  0E60               	movlw	96
  4207  002E2C  6E08               	movwf	?_Read_b_eep,c
  4208  002E2E  EC3A  F022         	call	_Read_b_eep	;wreg free
  4209  002E32  6E0B               	movwf	??_doActionPulse& (0+255),c
  4210  002E34  6A09               	clrf	?_Read_b_eep+1,c
  4211  002E36  0E5F               	movlw	95
  4212  002E38  6E08               	movwf	?_Read_b_eep,c
  4213  002E3A  EC3A  F022         	call	_Read_b_eep	;wreg free
  4214  002E3E  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4215  002E40  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4216  002E42  500B               	movf	??_doActionPulse,w,c
  4217  002E44  240C               	addwf	??_doActionPulse+1,w,c
  4218  002E46  0100               	movlb	0	; () banked
  4219  002E48  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  4220  002E4A  0E00               	movlw	0
  4221  002E4C  200D               	addwfc	??_doActionPulse+2,w,c
  4222  002E4E  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  4223                           
  4224                           ;main.c: 2018: break;
  4225  002E50  D028               	goto	l9219
  4226  002E52                     l507:
  4227                           
  4228                           ;main.c: 2021: LATCbits.LATC4 = 0;
  4229  002E52  988B               	bcf	3979,4,c	;volatile
  4230                           
  4231                           ;main.c: 2022: relay_pulse_flags |= 0x40;
  4232  002E54  0100               	movlb	0	; () banked
  4233  002E56  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  4234                           
  4235                           ; BSR set to: 0
  4236                           ;main.c: 2023: relay_pulse_timer[ 6 ] =
  4237                           ;main.c: 2024: Read_b_eep(0x43 + 30) * 256 +
  4238                           ;main.c: 2025: Read_b_eep(0x43 + 31);
  4239  002E58  6A09               	clrf	?_Read_b_eep+1,c
  4240  002E5A  0E62               	movlw	98
  4241  002E5C  6E08               	movwf	?_Read_b_eep,c
  4242  002E5E  EC3A  F022         	call	_Read_b_eep	;wreg free
  4243  002E62  6E0B               	movwf	??_doActionPulse& (0+255),c
  4244  002E64  6A09               	clrf	?_Read_b_eep+1,c
  4245  002E66  0E61               	movlw	97
  4246  002E68  6E08               	movwf	?_Read_b_eep,c
  4247  002E6A  EC3A  F022         	call	_Read_b_eep	;wreg free
  4248  002E6E  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4249  002E70  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4250  002E72  500B               	movf	??_doActionPulse,w,c
  4251  002E74  240C               	addwf	??_doActionPulse+1,w,c
  4252  002E76  0100               	movlb	0	; () banked
  4253  002E78  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  4254  002E7A  0E00               	movlw	0
  4255  002E7C  200D               	addwfc	??_doActionPulse+2,w,c
  4256  002E7E  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  4257                           
  4258                           ;main.c: 2026: break;
  4259  002E80  D010               	goto	l9219
  4260  002E82                     l9217:
  4261  002E82  5010               	movf	doActionPulse@i,w,c
  4262                           
  4263                           ; Switch size 1, requested type "speed"
  4264                           ; Number of cases is 7, Range of values is 0 to 6
  4265                           ; switch strategies available:
  4266                           ; Name         Instructions Cycles
  4267                           ; simple_byte           22    12 (average)
  4268                           ;	Chosen strategy is simple_byte
  4269  002E84  E101 D755          	bz	l500
  4270  002E88  0A01               	xorlw	1	; case 1
  4271  002E8A  E101 D76A          	bz	l502
  4272  002E8E  0A03               	xorlw	3	; case 2
  4273  002E90  E080               	bz	l503
  4274  002E92  0A01               	xorlw	1	; case 3
  4275  002E94  E096               	bz	l504
  4276  002E96  0A07               	xorlw	7	; case 4
  4277  002E98  E0AC               	bz	l505
  4278  002E9A  0A01               	xorlw	1	; case 5
  4279  002E9C  E0C2               	bz	l506
  4280  002E9E  0A03               	xorlw	3	; case 6
  4281  002EA0  E0D8               	bz	l507
  4282  002EA2                     l9219:
  4283  002EA2  2A10               	incf	doActionPulse@i,f,c
  4284  002EA4  0E07               	movlw	7
  4285  002EA6  6410               	cpfsgt	doActionPulse@i,c
  4286  002EA8  D704               	goto	l9169
  4287  002EAA  0C07               	retlw	7
  4288  002EAC                     __end_of_doActionPulse:
  4289                           	opt stack 0
  4290                           tblptru	equ	0xFF8
  4291                           prodh	equ	0xFF4
  4292                           prodl	equ	0xFF3
  4293                           postinc0	equ	0xFEE
  4294                           wreg	equ	0xFE8
  4295                           postinc2	equ	0xFDE
  4296                           postdec2	equ	0xFDD
  4297                           fsr2h	equ	0xFDA
  4298                           fsr2l	equ	0xFD9
  4299                           status	equ	0xFD8
  4300                           
  4301 ;; *************** function _doActionOn *****************
  4302 ;; Defined at:
  4303 ;;		line 1737 in file "../main.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;  dmflags         1    wreg     unsigned char 
  4306 ;;  arg             1   80[COMRAM] unsigned char 
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;  dmflags         1   25[BANK0 ] unsigned char 
  4309 ;;  i               1   27[BANK0 ] unsigned char 
  4310 ;;  val             1   26[BANK0 ] unsigned char 
  4311 ;; Return value:  Size  Location     Type
  4312 ;;		None               void
  4313 ;; Registers used:
  4314 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : F/0
  4317 ;;		On exit  : F/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4320 ;;      Params:         1       0       0       0       0       0       0
  4321 ;;      Locals:         0       3       0       0       0       0       0
  4322 ;;      Temps:          0       3       0       0       0       0       0
  4323 ;;      Totals:         1       6       0       0       0       0       0
  4324 ;;Total ram usage:        7 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    7
  4327 ;; This function calls:
  4328 ;;		_Read_b_eep
  4329 ;;		_SendInformationEvent
  4330 ;; This function is called by:
  4331 ;;		_doDM
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           	psect	text13
  4336  002804                     __ptext13:
  4337                           	opt stack 0
  4338  002804                     _doActionOn:
  4339                           	opt stack 22
  4340                           
  4341                           ;incstack = 0
  4342                           ;incstack = 0
  4343                           ;doActionOn@dmflags stored from wreg
  4344  002804  CFE8 F0CA          	movff	wreg,doActionOn@dmflags
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;main.c: 1739: unsigned char i;
  4348                           ;main.c: 1740: unsigned char val;
  4349                           ;main.c: 1742: for (i = 0; i < 8; i++) {
  4350  002808  6BCC               	clrf	doActionOn@i& (0+255),b
  4351  00280A                     l10935:
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;main.c: 1745: if ( !( arg & ( 1 << i ) ) ) continue;
  4355  00280A  C0CC  F0C7         	movff	doActionOn@i,??_doActionOn
  4356  00280E  0E01               	movlw	1
  4357  002810  6FC8               	movwf	(??_doActionOn+1)& (0+255),b
  4358  002812  2BC7               	incf	??_doActionOn& (0+255),f,b
  4359  002814  D002               	goto	u13194
  4360  002816                     u13195:
  4361  002816  90D8               	bcf	status,0,c
  4362  002818  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4363  00281A                     u13194:
  4364  00281A  2FC7               	decfsz	??_doActionOn& (0+255),f,b
  4365  00281C  D7FC               	goto	u13195
  4366  00281E  51C8               	movf	(??_doActionOn+1)& (0+255),w,b
  4367  002820  1451               	andwf	doActionOn@arg,w,c
  4368  002822  E101 D137          	bz	l10991
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;main.c: 1748: if ( dmflags & 0x10 ) {
  4372  002826  A9CA               	btfss	doActionOn@dmflags& (0+255),4,b
  4373  002828  D011               	goto	l441
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;main.c: 1749: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  4377  00282A  90D8               	bcf	status,0,c
  4378  00282C  35CC               	rlcf	doActionOn@i& (0+255),w,b
  4379  00282E  6FC7               	movwf	??_doActionOn& (0+255),b
  4380  002830  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4381  002832  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4382  002834  0E75               	movlw	117
  4383  002836  25C7               	addwf	??_doActionOn& (0+255),w,b
  4384  002838  6E08               	movwf	?_Read_b_eep,c
  4385  00283A  0E00               	movlw	0
  4386  00283C  21C8               	addwfc	(??_doActionOn+1)& (0+255),w,b
  4387  00283E  6E09               	movwf	?_Read_b_eep+1,c
  4388  002840  EC3A  F022         	call	_Read_b_eep	;wreg free
  4389  002844  0100               	movlb	0	; () banked
  4390  002846  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4391  002848  E001 D124          	bnz	l10991
  4392  00284C                     l441:
  4393                           
  4394                           ; BSR set to: 0
  4395                           ;main.c: 1752: }
  4396                           ;main.c: 1753: }
  4397                           ;main.c: 1756: if ( dmflags & 0x08 ) {
  4398  00284C  A7CA               	btfss	doActionOn@dmflags& (0+255),3,b
  4399  00284E  D011               	goto	l10947
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;main.c: 1757: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  4403  002850  90D8               	bcf	status,0,c
  4404  002852  35CC               	rlcf	doActionOn@i& (0+255),w,b
  4405  002854  6FC7               	movwf	??_doActionOn& (0+255),b
  4406  002856  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4407  002858  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4408  00285A  0E76               	movlw	118
  4409  00285C  25C7               	addwf	??_doActionOn& (0+255),w,b
  4410  00285E  6E08               	movwf	?_Read_b_eep,c
  4411  002860  0E00               	movlw	0
  4412  002862  21C8               	addwfc	(??_doActionOn+1)& (0+255),w,b
  4413  002864  6E09               	movwf	?_Read_b_eep+1,c
  4414  002866  EC3A  F022         	call	_Read_b_eep	;wreg free
  4415  00286A  0100               	movlb	0	; () banked
  4416  00286C  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4417  00286E  E001 D111          	bnz	l10991
  4418  002872                     l10947:
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;main.c: 1760: }
  4422                           ;main.c: 1761: }
  4423                           ;main.c: 1763: val = Read_b_eep(0x43 + 10 + i);
  4424  002872  0E4D               	movlw	77
  4425  002874  25CC               	addwf	doActionOn@i& (0+255),w,b
  4426  002876  6E08               	movwf	?_Read_b_eep,c
  4427  002878  6A09               	clrf	?_Read_b_eep+1,c
  4428  00287A  0E00               	movlw	0
  4429  00287C  2209               	addwfc	?_Read_b_eep+1,f,c
  4430  00287E  EC3A  F022         	call	_Read_b_eep	;wreg free
  4431  002882  0100               	movlb	0	; () banked
  4432  002884  6FCB               	movwf	doActionOn@val& (0+255),b
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;main.c: 1766: if ( !( val & 0x80 ) ) continue;
  4436  002886  AFCB               	btfss	doActionOn@val& (0+255),7,b
  4437  002888  D105               	goto	l10991
  4438  00288A  D0E0               	goto	l10983
  4439  00288C                     l447:
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;main.c: 1771: LATBbits.LATB4 = 1;
  4443  00288C  888A               	bsf	3978,4,c	;volatile
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;main.c: 1773: if (Read_b_eep(0x43 + 10) & 0x04 ) {
  4447  00288E  6A09               	clrf	?_Read_b_eep+1,c
  4448  002890  0E4D               	movlw	77
  4449  002892  6E08               	movwf	?_Read_b_eep,c
  4450  002894  EC3A  F022         	call	_Read_b_eep	;wreg free
  4451  002898  0100               	movlb	0	; () banked
  4452  00289A  6FC7               	movwf	??_doActionOn& (0+255),b
  4453  00289C  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4454  00289E  D0E8               	goto	l449
  4455                           
  4456                           ; BSR set to: 0
  4457                           ;main.c: 1774: relay_protection_timer[ 0 ] =
  4458                           ;main.c: 1775: Read_b_eep(0x43 + 34) * 256 +
  4459                           ;main.c: 1776: Read_b_eep(0x43 + 35);
  4460  0028A0  6A09               	clrf	?_Read_b_eep+1,c
  4461  0028A2  0E66               	movlw	102
  4462  0028A4  6E08               	movwf	?_Read_b_eep,c
  4463  0028A6  EC3A  F022         	call	_Read_b_eep	;wreg free
  4464  0028AA  0100               	movlb	0	; () banked
  4465  0028AC  6FC7               	movwf	??_doActionOn& (0+255),b
  4466  0028AE  6A09               	clrf	?_Read_b_eep+1,c
  4467  0028B0  0E65               	movlw	101
  4468  0028B2  6E08               	movwf	?_Read_b_eep,c
  4469  0028B4  EC3A  F022         	call	_Read_b_eep	;wreg free
  4470  0028B8  0100               	movlb	0	; () banked
  4471  0028BA  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4472  0028BC  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4473  0028BE  51C7               	movf	??_doActionOn& (0+255),w,b
  4474  0028C0  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4475  0028C2  6F60               	movwf	_relay_protection_timer& (0+255),b
  4476  0028C4  0E00               	movlw	0
  4477  0028C6  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4478  0028C8  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  4479  0028CA  D0D2               	goto	l449
  4480  0028CC                     l450:
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;main.c: 1781: LATBbits.LATB1 = 1;
  4484  0028CC  828A               	bsf	3978,1,c	;volatile
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;main.c: 1783: if (Read_b_eep(0x43 + 11) & 0x04 ) {
  4488  0028CE  6A09               	clrf	?_Read_b_eep+1,c
  4489  0028D0  0E4E               	movlw	78
  4490  0028D2  6E08               	movwf	?_Read_b_eep,c
  4491  0028D4  EC3A  F022         	call	_Read_b_eep	;wreg free
  4492  0028D8  0100               	movlb	0	; () banked
  4493  0028DA  6FC7               	movwf	??_doActionOn& (0+255),b
  4494  0028DC  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4495  0028DE  D0C8               	goto	l449
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;main.c: 1784: relay_protection_timer[ 1 ] =
  4499                           ;main.c: 1785: Read_b_eep(0x43 + 36) * 256 +
  4500                           ;main.c: 1786: Read_b_eep(0x43 + 37);
  4501  0028E0  6A09               	clrf	?_Read_b_eep+1,c
  4502  0028E2  0E68               	movlw	104
  4503  0028E4  6E08               	movwf	?_Read_b_eep,c
  4504  0028E6  EC3A  F022         	call	_Read_b_eep	;wreg free
  4505  0028EA  0100               	movlb	0	; () banked
  4506  0028EC  6FC7               	movwf	??_doActionOn& (0+255),b
  4507  0028EE  6A09               	clrf	?_Read_b_eep+1,c
  4508  0028F0  0E67               	movlw	103
  4509  0028F2  6E08               	movwf	?_Read_b_eep,c
  4510  0028F4  EC3A  F022         	call	_Read_b_eep	;wreg free
  4511  0028F8  0100               	movlb	0	; () banked
  4512  0028FA  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4513  0028FC  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4514  0028FE  51C7               	movf	??_doActionOn& (0+255),w,b
  4515  002900  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4516  002902  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  4517  002904  0E00               	movlw	0
  4518  002906  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4519  002908  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  4520  00290A  D0B2               	goto	l449
  4521  00290C                     l452:
  4522                           
  4523                           ; BSR set to: 0
  4524                           ;main.c: 1791: LATBbits.LATB0 = 1;
  4525  00290C  808A               	bsf	3978,0,c	;volatile
  4526                           
  4527                           ; BSR set to: 0
  4528                           ;main.c: 1793: if (Read_b_eep(0x43 + 12) & 0x04 ) {
  4529  00290E  6A09               	clrf	?_Read_b_eep+1,c
  4530  002910  0E4F               	movlw	79
  4531  002912  6E08               	movwf	?_Read_b_eep,c
  4532  002914  EC3A  F022         	call	_Read_b_eep	;wreg free
  4533  002918  0100               	movlb	0	; () banked
  4534  00291A  6FC7               	movwf	??_doActionOn& (0+255),b
  4535  00291C  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4536  00291E  D0A8               	goto	l449
  4537                           
  4538                           ; BSR set to: 0
  4539                           ;main.c: 1794: relay_protection_timer[ 2 ] =
  4540                           ;main.c: 1795: Read_b_eep(0x43 + 38) * 256 +
  4541                           ;main.c: 1796: Read_b_eep(0x43 + 39);
  4542  002920  6A09               	clrf	?_Read_b_eep+1,c
  4543  002922  0E6A               	movlw	106
  4544  002924  6E08               	movwf	?_Read_b_eep,c
  4545  002926  EC3A  F022         	call	_Read_b_eep	;wreg free
  4546  00292A  0100               	movlb	0	; () banked
  4547  00292C  6FC7               	movwf	??_doActionOn& (0+255),b
  4548  00292E  6A09               	clrf	?_Read_b_eep+1,c
  4549  002930  0E69               	movlw	105
  4550  002932  6E08               	movwf	?_Read_b_eep,c
  4551  002934  EC3A  F022         	call	_Read_b_eep	;wreg free
  4552  002938  0100               	movlb	0	; () banked
  4553  00293A  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4554  00293C  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4555  00293E  51C7               	movf	??_doActionOn& (0+255),w,b
  4556  002940  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4557  002942  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  4558  002944  0E00               	movlw	0
  4559  002946  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4560  002948  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  4561  00294A  D092               	goto	l449
  4562  00294C                     l454:
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;main.c: 1801: LATCbits.LATC7 = 1;
  4566  00294C  8E8B               	bsf	3979,7,c	;volatile
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;main.c: 1803: if ( Read_b_eep(0x43 + 13) & 0x04 ) {
  4570  00294E  6A09               	clrf	?_Read_b_eep+1,c
  4571  002950  0E50               	movlw	80
  4572  002952  6E08               	movwf	?_Read_b_eep,c
  4573  002954  EC3A  F022         	call	_Read_b_eep	;wreg free
  4574  002958  0100               	movlb	0	; () banked
  4575  00295A  6FC7               	movwf	??_doActionOn& (0+255),b
  4576  00295C  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4577  00295E  D088               	goto	l449
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;main.c: 1804: relay_protection_timer[ 3 ] =
  4581                           ;main.c: 1805: Read_b_eep(0x43 + 40) * 256 +
  4582                           ;main.c: 1806: Read_b_eep(0x43 + 41);
  4583  002960  6A09               	clrf	?_Read_b_eep+1,c
  4584  002962  0E6C               	movlw	108
  4585  002964  6E08               	movwf	?_Read_b_eep,c
  4586  002966  EC3A  F022         	call	_Read_b_eep	;wreg free
  4587  00296A  0100               	movlb	0	; () banked
  4588  00296C  6FC7               	movwf	??_doActionOn& (0+255),b
  4589  00296E  6A09               	clrf	?_Read_b_eep+1,c
  4590  002970  0E6B               	movlw	107
  4591  002972  6E08               	movwf	?_Read_b_eep,c
  4592  002974  EC3A  F022         	call	_Read_b_eep	;wreg free
  4593  002978  0100               	movlb	0	; () banked
  4594  00297A  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4595  00297C  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4596  00297E  51C7               	movf	??_doActionOn& (0+255),w,b
  4597  002980  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4598  002982  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  4599  002984  0E00               	movlw	0
  4600  002986  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4601  002988  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  4602  00298A  D072               	goto	l449
  4603  00298C                     l456:
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;main.c: 1811: LATCbits.LATC6 = 1;
  4607  00298C  8C8B               	bsf	3979,6,c	;volatile
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;main.c: 1813: if (Read_b_eep(0x43 + 14) & 0x04 ) {
  4611  00298E  6A09               	clrf	?_Read_b_eep+1,c
  4612  002990  0E51               	movlw	81
  4613  002992  6E08               	movwf	?_Read_b_eep,c
  4614  002994  EC3A  F022         	call	_Read_b_eep	;wreg free
  4615  002998  0100               	movlb	0	; () banked
  4616  00299A  6FC7               	movwf	??_doActionOn& (0+255),b
  4617  00299C  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4618  00299E  D068               	goto	l449
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;main.c: 1814: relay_protection_timer[ 4 ] =
  4622                           ;main.c: 1815: Read_b_eep(0x43 + 42) * 256 +
  4623                           ;main.c: 1816: Read_b_eep(0x43 + 43);
  4624  0029A0  6A09               	clrf	?_Read_b_eep+1,c
  4625  0029A2  0E6E               	movlw	110
  4626  0029A4  6E08               	movwf	?_Read_b_eep,c
  4627  0029A6  EC3A  F022         	call	_Read_b_eep	;wreg free
  4628  0029AA  0100               	movlb	0	; () banked
  4629  0029AC  6FC7               	movwf	??_doActionOn& (0+255),b
  4630  0029AE  6A09               	clrf	?_Read_b_eep+1,c
  4631  0029B0  0E6D               	movlw	109
  4632  0029B2  6E08               	movwf	?_Read_b_eep,c
  4633  0029B4  EC3A  F022         	call	_Read_b_eep	;wreg free
  4634  0029B8  0100               	movlb	0	; () banked
  4635  0029BA  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4636  0029BC  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4637  0029BE  51C7               	movf	??_doActionOn& (0+255),w,b
  4638  0029C0  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4639  0029C2  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  4640  0029C4  0E00               	movlw	0
  4641  0029C6  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4642  0029C8  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  4643  0029CA  D052               	goto	l449
  4644  0029CC                     l458:
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;main.c: 1821: LATCbits.LATC5 = 1;
  4648  0029CC  8A8B               	bsf	3979,5,c	;volatile
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;main.c: 1823: if (Read_b_eep(0x43 + 15) & 0x04) {
  4652  0029CE  6A09               	clrf	?_Read_b_eep+1,c
  4653  0029D0  0E52               	movlw	82
  4654  0029D2  6E08               	movwf	?_Read_b_eep,c
  4655  0029D4  EC3A  F022         	call	_Read_b_eep	;wreg free
  4656  0029D8  0100               	movlb	0	; () banked
  4657  0029DA  6FC7               	movwf	??_doActionOn& (0+255),b
  4658  0029DC  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4659  0029DE  D048               	goto	l449
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;main.c: 1824: relay_protection_timer[ 5 ] =
  4663                           ;main.c: 1825: Read_b_eep(0x43 + 44) * 256 +
  4664                           ;main.c: 1826: Read_b_eep(0x43 + 45);
  4665  0029E0  6A09               	clrf	?_Read_b_eep+1,c
  4666  0029E2  0E70               	movlw	112
  4667  0029E4  6E08               	movwf	?_Read_b_eep,c
  4668  0029E6  EC3A  F022         	call	_Read_b_eep	;wreg free
  4669  0029EA  0100               	movlb	0	; () banked
  4670  0029EC  6FC7               	movwf	??_doActionOn& (0+255),b
  4671  0029EE  6A09               	clrf	?_Read_b_eep+1,c
  4672  0029F0  0E6F               	movlw	111
  4673  0029F2  6E08               	movwf	?_Read_b_eep,c
  4674  0029F4  EC3A  F022         	call	_Read_b_eep	;wreg free
  4675  0029F8  0100               	movlb	0	; () banked
  4676  0029FA  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4677  0029FC  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4678  0029FE  51C7               	movf	??_doActionOn& (0+255),w,b
  4679  002A00  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4680  002A02  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  4681  002A04  0E00               	movlw	0
  4682  002A06  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4683  002A08  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  4684  002A0A  D032               	goto	l449
  4685  002A0C                     l460:
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;main.c: 1831: LATCbits.LATC4 = 1;
  4689  002A0C  888B               	bsf	3979,4,c	;volatile
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;main.c: 1833: if ( Read_b_eep(0x43 + 16) & 0x04) {
  4693  002A0E  6A09               	clrf	?_Read_b_eep+1,c
  4694  002A10  0E53               	movlw	83
  4695  002A12  6E08               	movwf	?_Read_b_eep,c
  4696  002A14  EC3A  F022         	call	_Read_b_eep	;wreg free
  4697  002A18  0100               	movlb	0	; () banked
  4698  002A1A  6FC7               	movwf	??_doActionOn& (0+255),b
  4699  002A1C  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4700  002A1E  D028               	goto	l449
  4701                           
  4702                           ; BSR set to: 0
  4703                           ;main.c: 1834: relay_protection_timer[ 6 ] =
  4704                           ;main.c: 1835: Read_b_eep(0x43 + 46) * 256 +
  4705                           ;main.c: 1836: Read_b_eep(0x43 + 47);
  4706  002A20  6A09               	clrf	?_Read_b_eep+1,c
  4707  002A22  0E72               	movlw	114
  4708  002A24  6E08               	movwf	?_Read_b_eep,c
  4709  002A26  EC3A  F022         	call	_Read_b_eep	;wreg free
  4710  002A2A  0100               	movlb	0	; () banked
  4711  002A2C  6FC7               	movwf	??_doActionOn& (0+255),b
  4712  002A2E  6A09               	clrf	?_Read_b_eep+1,c
  4713  002A30  0E71               	movlw	113
  4714  002A32  6E08               	movwf	?_Read_b_eep,c
  4715  002A34  EC3A  F022         	call	_Read_b_eep	;wreg free
  4716  002A38  0100               	movlb	0	; () banked
  4717  002A3A  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4718  002A3C  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4719  002A3E  51C7               	movf	??_doActionOn& (0+255),w,b
  4720  002A40  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4721  002A42  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  4722  002A44  0E00               	movlw	0
  4723  002A46  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4724  002A48  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  4725  002A4A  D012               	goto	l449
  4726  002A4C                     l10983:
  4727                           
  4728                           ; BSR set to: 0
  4729  002A4C  51CC               	movf	doActionOn@i& (0+255),w,b
  4730                           
  4731                           ; Switch size 1, requested type "speed"
  4732                           ; Number of cases is 7, Range of values is 0 to 6
  4733                           ; switch strategies available:
  4734                           ; Name         Instructions Cycles
  4735                           ; simple_byte           22    12 (average)
  4736                           ;	Chosen strategy is simple_byte
  4737  002A4E  E101 D71D          	bz	l447
  4738  002A52  0A01               	xorlw	1	; case 1
  4739  002A54  E101 D73A          	bz	l450
  4740  002A58  0A03               	xorlw	3	; case 2
  4741  002A5A  E101 D757          	bz	l452
  4742  002A5E  0A01               	xorlw	1	; case 3
  4743  002A60  E101 D774          	bz	l454
  4744  002A64  0A07               	xorlw	7	; case 4
  4745  002A66  E092               	bz	l456
  4746  002A68  0A01               	xorlw	1	; case 5
  4747  002A6A  E0B0               	bz	l458
  4748  002A6C  0A03               	xorlw	3	; case 6
  4749  002A6E  E0CE               	bz	l460
  4750  002A70                     l449:
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;main.c: 1843: if ( val & 0x08 ) {
  4754  002A70  A7CB               	btfss	doActionOn@val& (0+255),3,b
  4755  002A72  D007               	goto	l10987
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;main.c: 1844: SendInformationEvent( i, 20, 3 );
  4759  002A74  0E14               	movlw	20
  4760  002A76  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4761  002A78  0E03               	movlw	3
  4762  002A7A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4763  002A7C  51CC               	movf	doActionOn@i& (0+255),w,b
  4764  002A7E  EC96  F01F         	call	_SendInformationEvent
  4765  002A82                     l10987:
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;main.c: 1845: }
  4769                           ;main.c: 1848: if ( val & 0x20 ) {
  4770  002A82  ABCB               	btfss	doActionOn@val& (0+255),5,b
  4771  002A84  D007               	goto	l10991
  4772                           
  4773                           ; BSR set to: 0
  4774                           ;main.c: 1849: SendInformationEvent( i, 20, 25 );
  4775  002A86  0E14               	movlw	20
  4776  002A88  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4777  002A8A  0E19               	movlw	25
  4778  002A8C  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4779  002A8E  51CC               	movf	doActionOn@i& (0+255),w,b
  4780  002A90  EC96  F01F         	call	_SendInformationEvent
  4781  002A94                     l10991:
  4782                           
  4783                           ; BSR set to: 0
  4784  002A94  2BCC               	incf	doActionOn@i& (0+255),f,b
  4785                           
  4786                           ; BSR set to: 0
  4787  002A96  0E07               	movlw	7
  4788  002A98  65CC               	cpfsgt	doActionOn@i& (0+255),b
  4789  002A9A  D6B7               	goto	l10935
  4790                           
  4791                           ; BSR set to: 0
  4792  002A9C  0C07               	retlw	7
  4793  002A9E                     __end_of_doActionOn:
  4794                           	opt stack 0
  4795                           tblptru	equ	0xFF8
  4796                           prodh	equ	0xFF4
  4797                           prodl	equ	0xFF3
  4798                           postinc0	equ	0xFEE
  4799                           wreg	equ	0xFE8
  4800                           postinc2	equ	0xFDE
  4801                           postdec2	equ	0xFDD
  4802                           fsr2h	equ	0xFDA
  4803                           fsr2l	equ	0xFD9
  4804                           status	equ	0xFD8
  4805                           
  4806 ;; *************** function _doActionOff *****************
  4807 ;; Defined at:
  4808 ;;		line 1859 in file "../main.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;  dmflags         1    wreg     unsigned char 
  4811 ;;  arg             1   80[COMRAM] unsigned char 
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;  dmflags         1   24[BANK0 ] unsigned char 
  4814 ;;  i               1   26[BANK0 ] unsigned char 
  4815 ;;  val             1   25[BANK0 ] unsigned char 
  4816 ;; Return value:  Size  Location     Type
  4817 ;;		None               void
  4818 ;; Registers used:
  4819 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4820 ;; Tracked objects:
  4821 ;;		On entry : F/0
  4822 ;;		On exit  : F/0
  4823 ;;		Unchanged: 0/0
  4824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4825 ;;      Params:         1       0       0       0       0       0       0
  4826 ;;      Locals:         0       3       0       0       0       0       0
  4827 ;;      Temps:          0       2       0       0       0       0       0
  4828 ;;      Totals:         1       5       0       0       0       0       0
  4829 ;;Total ram usage:        6 bytes
  4830 ;; Hardware stack levels used:    1
  4831 ;; Hardware stack levels required when called:    7
  4832 ;; This function calls:
  4833 ;;		_Read_b_eep
  4834 ;;		_SendInformationEvent
  4835 ;; This function is called by:
  4836 ;;		_doApplicationOneSecondWork
  4837 ;;		_doDM
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841                           	psect	text14
  4842  00391A                     __ptext14:
  4843                           	opt stack 0
  4844  00391A                     _doActionOff:
  4845                           	opt stack 22
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;incstack = 0
  4849                           ;incstack = 0
  4850                           ;doActionOff@dmflags stored from wreg
  4851  00391A  CFE8 F0C9          	movff	wreg,doActionOff@dmflags
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;main.c: 1861: unsigned char i;
  4855                           ;main.c: 1862: unsigned char val;
  4856                           ;main.c: 1864: for ( i = 0; i < 8; i++ ) {
  4857  00391E  6BCB               	clrf	doActionOff@i& (0+255),b
  4858  003920                     l10441:
  4859                           
  4860                           ; BSR set to: 0
  4861                           ;main.c: 1867: if ( !( arg & ( 1 << i ) ) ) continue;
  4862  003920  C0CB  F0C7         	movff	doActionOff@i,??_doActionOff
  4863  003924  0E01               	movlw	1
  4864  003926  6FC8               	movwf	(??_doActionOff+1)& (0+255),b
  4865  003928  2BC7               	incf	??_doActionOff& (0+255),f,b
  4866  00392A  D002               	goto	u12534
  4867  00392C                     u12535:
  4868  00392C  90D8               	bcf	status,0,c
  4869  00392E  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4870  003930                     u12534:
  4871  003930  2FC7               	decfsz	??_doActionOff& (0+255),f,b
  4872  003932  D7FC               	goto	u12535
  4873  003934  51C8               	movf	(??_doActionOff+1)& (0+255),w,b
  4874  003936  1451               	andwf	doActionOff@arg,w,c
  4875  003938  E05F               	bz	l10469
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;main.c: 1870: if ( dmflags & 0x10 ) {
  4879  00393A  A9C9               	btfss	doActionOff@dmflags& (0+255),4,b
  4880  00393C  D010               	goto	l471
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;main.c: 1871: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  4884  00393E  90D8               	bcf	status,0,c
  4885  003940  35CB               	rlcf	doActionOff@i& (0+255),w,b
  4886  003942  6FC7               	movwf	??_doActionOff& (0+255),b
  4887  003944  6BC8               	clrf	(??_doActionOff+1)& (0+255),b
  4888  003946  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4889  003948  0E75               	movlw	117
  4890  00394A  25C7               	addwf	??_doActionOff& (0+255),w,b
  4891  00394C  6E08               	movwf	?_Read_b_eep,c
  4892  00394E  0E00               	movlw	0
  4893  003950  21C8               	addwfc	(??_doActionOff+1)& (0+255),w,b
  4894  003952  6E09               	movwf	?_Read_b_eep+1,c
  4895  003954  EC3A  F022         	call	_Read_b_eep	;wreg free
  4896  003958  0100               	movlb	0	; () banked
  4897  00395A  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4898  00395C  E14D               	bnz	l10469
  4899  00395E                     l471:
  4900                           
  4901                           ; BSR set to: 0
  4902                           ;main.c: 1874: }
  4903                           ;main.c: 1875: }
  4904                           ;main.c: 1878: if ( dmflags & 0x08 ) {
  4905  00395E  A7C9               	btfss	doActionOff@dmflags& (0+255),3,b
  4906  003960  D010               	goto	l10453
  4907                           
  4908                           ; BSR set to: 0
  4909                           ;main.c: 1879: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  4910  003962  90D8               	bcf	status,0,c
  4911  003964  35CB               	rlcf	doActionOff@i& (0+255),w,b
  4912  003966  6FC7               	movwf	??_doActionOff& (0+255),b
  4913  003968  6BC8               	clrf	(??_doActionOff+1)& (0+255),b
  4914  00396A  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4915  00396C  0E76               	movlw	118
  4916  00396E  25C7               	addwf	??_doActionOff& (0+255),w,b
  4917  003970  6E08               	movwf	?_Read_b_eep,c
  4918  003972  0E00               	movlw	0
  4919  003974  21C8               	addwfc	(??_doActionOff+1)& (0+255),w,b
  4920  003976  6E09               	movwf	?_Read_b_eep+1,c
  4921  003978  EC3A  F022         	call	_Read_b_eep	;wreg free
  4922  00397C  0100               	movlb	0	; () banked
  4923  00397E  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4924  003980  E13B               	bnz	l10469
  4925  003982                     l10453:
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;main.c: 1882: }
  4929                           ;main.c: 1883: }
  4930                           ;main.c: 1885: val = Read_b_eep(0x43 + 10 + i);
  4931  003982  0E4D               	movlw	77
  4932  003984  25CB               	addwf	doActionOff@i& (0+255),w,b
  4933  003986  6E08               	movwf	?_Read_b_eep,c
  4934  003988  6A09               	clrf	?_Read_b_eep+1,c
  4935  00398A  0E00               	movlw	0
  4936  00398C  2209               	addwfc	?_Read_b_eep+1,f,c
  4937  00398E  EC3A  F022         	call	_Read_b_eep	;wreg free
  4938  003992  0100               	movlb	0	; () banked
  4939  003994  6FCA               	movwf	doActionOff@val& (0+255),b
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;main.c: 1888: if ( !( val & 0x80 ) ) continue;
  4943  003996  AFCA               	btfss	doActionOff@val& (0+255),7,b
  4944  003998  D02F               	goto	l10469
  4945  00399A  D00E               	goto	l10461
  4946  00399C                     l477:
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;main.c: 1893: LATBbits.LATB4 = 0;
  4950  00399C  988A               	bcf	3978,4,c	;volatile
  4951                           
  4952                           ;main.c: 1894: break;
  4953  00399E  D01A               	goto	l478
  4954  0039A0                     l479:
  4955                           
  4956                           ; BSR set to: 0
  4957                           ;main.c: 1897: LATBbits.LATB1 = 0;
  4958  0039A0  928A               	bcf	3978,1,c	;volatile
  4959                           
  4960                           ;main.c: 1898: break;
  4961  0039A2  D018               	goto	l478
  4962  0039A4                     l480:
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;main.c: 1901: LATBbits.LATB0 = 0;
  4966  0039A4  908A               	bcf	3978,0,c	;volatile
  4967                           
  4968                           ;main.c: 1902: break;
  4969  0039A6  D016               	goto	l478
  4970  0039A8                     l481:
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;main.c: 1905: LATCbits.LATC7 = 0;
  4974  0039A8  9E8B               	bcf	3979,7,c	;volatile
  4975                           
  4976                           ;main.c: 1906: break;
  4977  0039AA  D014               	goto	l478
  4978  0039AC                     l482:
  4979                           
  4980                           ; BSR set to: 0
  4981                           ;main.c: 1909: LATCbits.LATC6 = 0;
  4982  0039AC  9C8B               	bcf	3979,6,c	;volatile
  4983                           
  4984                           ;main.c: 1910: break;
  4985  0039AE  D012               	goto	l478
  4986  0039B0                     l483:
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;main.c: 1913: LATCbits.LATC5 = 0;
  4990  0039B0  9A8B               	bcf	3979,5,c	;volatile
  4991                           
  4992                           ;main.c: 1914: break;
  4993  0039B2  D010               	goto	l478
  4994  0039B4                     l484:
  4995                           
  4996                           ; BSR set to: 0
  4997                           ;main.c: 1917: LATCbits.LATC4 = 0;
  4998  0039B4  988B               	bcf	3979,4,c	;volatile
  4999                           
  5000                           ;main.c: 1918: break;
  5001  0039B6  D00E               	goto	l478
  5002  0039B8                     l10461:
  5003                           
  5004                           ; BSR set to: 0
  5005  0039B8  51CB               	movf	doActionOff@i& (0+255),w,b
  5006                           
  5007                           ; Switch size 1, requested type "speed"
  5008                           ; Number of cases is 7, Range of values is 0 to 6
  5009                           ; switch strategies available:
  5010                           ; Name         Instructions Cycles
  5011                           ; simple_byte           22    12 (average)
  5012                           ;	Chosen strategy is simple_byte
  5013  0039BA  E0F0               	bz	l477
  5014  0039BC  0A01               	xorlw	1	; case 1
  5015  0039BE  E0F0               	bz	l479
  5016  0039C0  0A03               	xorlw	3	; case 2
  5017  0039C2  E0F0               	bz	l480
  5018  0039C4  0A01               	xorlw	1	; case 3
  5019  0039C6  E0F0               	bz	l481
  5020  0039C8  0A07               	xorlw	7	; case 4
  5021  0039CA  E0F0               	bz	l482
  5022  0039CC  0A01               	xorlw	1	; case 5
  5023  0039CE  E0F0               	bz	l483
  5024  0039D0  0A03               	xorlw	3	; case 6
  5025  0039D2  E0F0               	bz	l484
  5026  0039D4                     l478:
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;main.c: 1923: if ( val & 0x10 ) {
  5030  0039D4  A9CA               	btfss	doActionOff@val& (0+255),4,b
  5031  0039D6  D007               	goto	l10465
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;main.c: 1924: SendInformationEvent( i, 20, 4 );
  5035  0039D8  0E14               	movlw	20
  5036  0039DA  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  5037  0039DC  0E04               	movlw	4
  5038  0039DE  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5039  0039E0  51CB               	movf	doActionOff@i& (0+255),w,b
  5040  0039E2  EC96  F01F         	call	_SendInformationEvent
  5041  0039E6                     l10465:
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;main.c: 1925: }
  5045                           ;main.c: 1928: if ( val & 0x40 ) {
  5046  0039E6  ADCA               	btfss	doActionOff@val& (0+255),6,b
  5047  0039E8  D007               	goto	l10469
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;main.c: 1929: SendInformationEvent( i, 20, 24 );
  5051  0039EA  0E14               	movlw	20
  5052  0039EC  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  5053  0039EE  0E18               	movlw	24
  5054  0039F0  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5055  0039F2  51CB               	movf	doActionOff@i& (0+255),w,b
  5056  0039F4  EC96  F01F         	call	_SendInformationEvent
  5057  0039F8                     l10469:
  5058                           
  5059                           ; BSR set to: 0
  5060  0039F8  2BCB               	incf	doActionOff@i& (0+255),f,b
  5061                           
  5062                           ; BSR set to: 0
  5063  0039FA  0E07               	movlw	7
  5064  0039FC  65CB               	cpfsgt	doActionOff@i& (0+255),b
  5065  0039FE  D790               	goto	l10441
  5066                           
  5067                           ; BSR set to: 0
  5068  003A00  0C07               	retlw	7
  5069  003A02                     __end_of_doActionOff:
  5070                           	opt stack 0
  5071                           tblptru	equ	0xFF8
  5072                           prodh	equ	0xFF4
  5073                           prodl	equ	0xFF3
  5074                           postinc0	equ	0xFEE
  5075                           wreg	equ	0xFE8
  5076                           postinc2	equ	0xFDE
  5077                           postdec2	equ	0xFDD
  5078                           fsr2h	equ	0xFDA
  5079                           fsr2l	equ	0xFD9
  5080                           status	equ	0xFD8
  5081                           
  5082 ;; *************** function _vscp_handleProtocolEvent *****************
  5083 ;; Defined at:
  5084 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;		None
  5087 ;; Auto vars:     Size  Location     Type
  5088 ;;  bytes           1   45[BANK0 ] unsigned char 
  5089 ;;  page_save       2   41[BANK0 ] unsigned short 
  5090 ;;  i               1   51[BANK0 ] unsigned char 
  5091 ;;  bytes           2   55[BANK0 ] unsigned short 
  5092 ;;  page_save       2   39[BANK0 ] unsigned short 
  5093 ;;  byte            1   54[BANK0 ] unsigned char 
  5094 ;;  cb              1   50[BANK0 ] unsigned char 
  5095 ;;  bytes_this_t    1   49[BANK0 ] unsigned char 
  5096 ;;  j               1   59[BANK0 ] unsigned char 
  5097 ;;  i               1   57[BANK0 ] unsigned char 
  5098 ;;  k               1   52[BANK0 ] unsigned char 
  5099 ;;  i               1   53[BANK0 ] unsigned char 
  5100 ;;  len             1   48[BANK0 ] unsigned char 
  5101 ;;  pos             1   47[BANK0 ] unsigned char 
  5102 ;;  i               1   58[BANK0 ] unsigned char 
  5103 ;;  len             1   46[BANK0 ] unsigned char 
  5104 ;;  pos             1   44[BANK0 ] unsigned char 
  5105 ;;  offset          1   43[BANK0 ] unsigned char 
  5106 ;; Return value:  Size  Location     Type
  5107 ;;		None               void
  5108 ;; Registers used:
  5109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5110 ;; Tracked objects:
  5111 ;;		On entry : F/0
  5112 ;;		On exit  : 0/0
  5113 ;;		Unchanged: 0/0
  5114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5115 ;;      Params:         0       0       0       0       0       0       0
  5116 ;;      Locals:         0      21       0       0       0       0       0
  5117 ;;      Temps:          0       7       0       0       0       0       0
  5118 ;;      Totals:         0      28       0       0       0       0       0
  5119 ;;Total ram usage:       28 bytes
  5120 ;; Hardware stack levels used:    1
  5121 ;; Hardware stack levels required when called:    9
  5122 ;; This function calls:
  5123 ;;		_vscp_init
  5124 ;;		_vscp_readAppReg
  5125 ;;		_vscp_writeAppReg
  5126 ;;		_vscp_sendEvent
  5127 ;;		_vscp_getGUID
  5128 ;;		_vscp_getMDF_URL
  5129 ;;		_vscp_goBootloaderMode
  5130 ;;		_vscp_getMatrixInfo
  5131 ;;		_vscp_handleHeartbeat
  5132 ;;		_vscp_handleSetNickname
  5133 ;;		_vscp_handleDropNickname
  5134 ;;		_vscp_newNodeOnline
  5135 ;;		_vscp_readRegister
  5136 ;;		_vscp_readStdReg
  5137 ;;		_vscp_writeRegister
  5138 ;;		_vscp_writeStdReg
  5139 ;;		___lbmod
  5140 ;; This function is called by:
  5141 ;;		_main
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144                           
  5145                           	psect	text15
  5146  001308                     __ptext15:
  5147                           	opt stack 0
  5148  001308                     _vscp_handleProtocolEvent:
  5149                           	opt stack 21
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;incstack = 0
  5156                           ;incstack = 0
  5157  001308  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  5158  00130A  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  5159  00130C  E101 D2E9          	bz	l10275
  5160  001310  D319               	goto	l1291
  5161  001312                     l9857:
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  5165  001312  EC15  F020         	call	_vscp_handleHeartbeat	;wreg free
  5166                           
  5167                           ;vscp_firmware.c: 807: break;
  5168  001316  D316               	goto	l1291
  5169  001318                     l9859:
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  5173  001318  ECB3  F020         	call	_vscp_newNodeOnline	;wreg free
  5174                           
  5175                           ;vscp_firmware.c: 812: break;
  5176  00131C  D313               	goto	l1291
  5177  00131E                     l9861:
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  5181  00131E  EC3D  F021         	call	_vscp_handleSetNickname	;wreg free
  5182                           
  5183                           ;vscp_firmware.c: 817: break;
  5184  001322  D310               	goto	l1291
  5185  001324                     l9863:
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  5189  001324  EC6D  F020         	call	_vscp_handleDropNickname	;wreg free
  5190                           
  5191                           ;vscp_firmware.c: 822: break;
  5192  001328  D30D               	goto	l1291
  5193  00132A                     l9865:
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  5197                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5198  00132A  5196               	movf	_vscp_imsg& (0+255),w,b
  5199  00132C  0B0F               	andlw	15
  5200  00132E  0A02               	xorlw	2
  5201  001330  E001 D308          	bnz	l1291
  5202                           
  5203                           ; BSR set to: 0
  5204  001334  5191               	movf	_vscp_nickname& (0+255),w,b
  5205  001336  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5206  00133A  62DF               	cpfseq	indf2,c
  5207  00133C  D303               	goto	l1291
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  5211  00133E  0E80               	movlw	128
  5212  001340  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5213  001342  D012               	goto	l9885
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  5217  001344  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5218  001346  EC2A  F01E         	call	_vscp_readAppReg
  5219  00134A                     L13:
  5220  00134A  0100               	movlb	0	; () banked
  5221  00134C                     L14:
  5222  00134C  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
  5223                           
  5224                           ; BSR set to: 0
  5225                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  5226  00134E  C09D  F0A9         	movff	_vscp_imsg+7,_vscp_omsg+5
  5227                           
  5228                           ; BSR set to: 0
  5229                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  5230  001352  0E03               	movlw	3
  5231  001354  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5232                           
  5233                           ; BSR set to: 0
  5234                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  5235  001356  0E82               	movlw	130
  5236  001358  6FA4               	movwf	_vscp_omsg& (0+255),b
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  5240  00135A  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5241  00135C  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  5245  00135E  0E0A               	movlw	10
  5246  001360  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5247  001362                     l9883:
  5248                           
  5249                           ; BSR set to: 0
  5250                           ;vscp_firmware.c: 843: vscp_sendEvent();
  5251  001362  EC2A  F021         	call	_vscp_sendEvent	;wreg free
  5252                           
  5253                           ;vscp_firmware.c: 844: }
  5254  001366  D2EE               	goto	l1291
  5255  001368                     l9885:
  5256                           
  5257                           ; BSR set to: 0
  5258                           ;vscp_firmware.c: 845: else {
  5259                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  5260                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  5261  001368  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5262  00136A  EC56  F017         	call	_vscp_readStdReg
  5263  00136E  D7ED               	goto	L13
  5264  001370                     l9899:
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  5268                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5269  001370  5196               	movf	_vscp_imsg& (0+255),w,b
  5270  001372  0B0F               	andlw	15
  5271  001374  0A03               	xorlw	3
  5272  001376  E001 D2E5          	bnz	l1291
  5273                           
  5274                           ; BSR set to: 0
  5275  00137A  5191               	movf	_vscp_nickname& (0+255),w,b
  5276  00137C  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5277  001380  62DF               	cpfseq	indf2,c
  5278  001382  D2E0               	goto	l1291
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  5282  001384  0E80               	movlw	128
  5283  001386  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5284  001388  D006               	goto	l9919
  5285                           
  5286                           ; BSR set to: 0
  5287                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  5288                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5289  00138A  C09E  F051         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  5290  00138E  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5291  001390  EC6F  F004         	call	_vscp_writeAppReg
  5292  001394  D7DB               	goto	L14
  5293  001396                     l9919:
  5294                           
  5295                           ; BSR set to: 0
  5296                           ;vscp_firmware.c: 888: else {
  5297                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  5298                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5299  001396  C09E  F010         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  5300  00139A  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5301  00139C  EC0A  F01C         	call	_vscp_writeStdReg
  5302  0013A0  D7D4               	goto	L13
  5303  0013A2                     l9933:
  5304                           
  5305                           ; BSR set to: 0
  5306                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  5307                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  5308                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  5309                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  5310                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  5311                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  5312                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  5313  0013A2  5191               	movf	_vscp_nickname& (0+255),w,b
  5314  0013A4  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5315  0013A8  62DF               	cpfseq	indf2,c
  5316  0013AA  D2CC               	goto	l1291
  5317                           
  5318                           ; BSR set to: 0
  5319  0013AC  0E00               	movlw	0
  5320  0013AE  EC27  F022         	call	_vscp_getGUID
  5321  0013B2  0100               	movlb	0	; () banked
  5322  0013B4  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5323  0013B6  E001 D2C5          	bnz	l1291
  5324                           
  5325                           ; BSR set to: 0
  5326  0013BA  0E03               	movlw	3
  5327  0013BC  EC27  F022         	call	_vscp_getGUID
  5328  0013C0  0100               	movlb	0	; () banked
  5329  0013C2  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5330  0013C4  E001 D2BE          	bnz	l1291
  5331                           
  5332                           ; BSR set to: 0
  5333  0013C8  0E05               	movlw	5
  5334  0013CA  EC27  F022         	call	_vscp_getGUID
  5335  0013CE  0100               	movlb	0	; () banked
  5336  0013D0  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5337  0013D2  E001 D2B7          	bnz	l1291
  5338                           
  5339                           ; BSR set to: 0
  5340  0013D6  0E07               	movlw	7
  5341  0013D8  EC27  F022         	call	_vscp_getGUID
  5342  0013DC  0100               	movlb	0	; () banked
  5343  0013DE  19A1               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  5344  0013E0  E001 D2B0          	bnz	l1291
  5345                           
  5346                           ; BSR set to: 0
  5347  0013E4  5053               	movf	_vscp_page_select+1,w,c
  5348  0013E6  19A2               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  5349  0013E8  E001 D2AC          	bnz	l1291
  5350                           
  5351                           ; BSR set to: 0
  5352  0013EC  5052               	movf	_vscp_page_select,w,c
  5353  0013EE  EE20  F0A3         	lfsr	2,_vscp_imsg+13
  5354  0013F2  62DF               	cpfseq	indf2,c
  5355  0013F4  D2A7               	goto	l1291
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  5359  0013F6  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5360  0013F8  ECBF  F021         	call	_vscp_goBootloaderMode
  5361  0013FC  D2A3               	goto	l1291
  5362  0013FE                     l9949:
  5363                           
  5364                           ; BSR set to: 0
  5365                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  5366                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  5367                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  5368                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  5369  0013FE  0E00               	movlw	0
  5370  001400  EC27  F022         	call	_vscp_getGUID
  5371  001404  0100               	movlb	0	; () banked
  5372  001406  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5373  001408  E173               	bnz	l9993
  5374                           
  5375                           ; BSR set to: 0
  5376  00140A  0E01               	movlw	1
  5377  00140C  EC27  F022         	call	_vscp_getGUID
  5378  001410  0100               	movlb	0	; () banked
  5379  001412  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5380  001414  E16D               	bnz	l9993
  5381                           
  5382                           ; BSR set to: 0
  5383  001416  0E02               	movlw	2
  5384  001418  EC27  F022         	call	_vscp_getGUID
  5385  00141C  0100               	movlb	0	; () banked
  5386  00141E  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5387  001420  E167               	bnz	l9993
  5388                           
  5389                           ; BSR set to: 0
  5390  001422  0E03               	movlw	3
  5391  001424  EC27  F022         	call	_vscp_getGUID
  5392  001428  0100               	movlb	0	; () banked
  5393  00142A  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5394  00142C  E161               	bnz	l9993
  5395                           
  5396                           ; BSR set to: 0
  5397                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  5398  00142E  898D               	bsf	_vscp_guid_reset& (0+255),4,b
  5399  001430  D05F               	goto	l9993
  5400  001432                     l9959:
  5401                           
  5402                           ; BSR set to: 0
  5403                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  5404                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  5405                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  5406                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  5407  001432  0E04               	movlw	4
  5408  001434  EC27  F022         	call	_vscp_getGUID
  5409  001438  0100               	movlb	0	; () banked
  5410  00143A  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5411  00143C  E159               	bnz	l9993
  5412                           
  5413                           ; BSR set to: 0
  5414  00143E  0E05               	movlw	5
  5415  001440  EC27  F022         	call	_vscp_getGUID
  5416  001444  0100               	movlb	0	; () banked
  5417  001446  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5418  001448  E153               	bnz	l9993
  5419                           
  5420                           ; BSR set to: 0
  5421  00144A  0E06               	movlw	6
  5422  00144C  EC27  F022         	call	_vscp_getGUID
  5423  001450  0100               	movlb	0	; () banked
  5424  001452  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5425  001454  E14D               	bnz	l9993
  5426                           
  5427                           ; BSR set to: 0
  5428  001456  0E07               	movlw	7
  5429  001458  EC27  F022         	call	_vscp_getGUID
  5430  00145C  0100               	movlb	0	; () banked
  5431  00145E  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5432  001460  E147               	bnz	l9993
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  5436  001462  8B8D               	bsf	_vscp_guid_reset& (0+255),5,b
  5437  001464  D045               	goto	l9993
  5438  001466                     l9969:
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  5442                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  5443                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  5444                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  5445  001466  0E08               	movlw	8
  5446  001468  EC27  F022         	call	_vscp_getGUID
  5447  00146C  0100               	movlb	0	; () banked
  5448  00146E  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5449  001470  E13F               	bnz	l9993
  5450                           
  5451                           ; BSR set to: 0
  5452  001472  0E09               	movlw	9
  5453  001474  EC27  F022         	call	_vscp_getGUID
  5454  001478  0100               	movlb	0	; () banked
  5455  00147A  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5456  00147C  E139               	bnz	l9993
  5457                           
  5458                           ; BSR set to: 0
  5459  00147E  0E0A               	movlw	10
  5460  001480  EC27  F022         	call	_vscp_getGUID
  5461  001484  0100               	movlb	0	; () banked
  5462  001486  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5463  001488  E133               	bnz	l9993
  5464                           
  5465                           ; BSR set to: 0
  5466  00148A  0E0B               	movlw	11
  5467  00148C  EC27  F022         	call	_vscp_getGUID
  5468  001490  0100               	movlb	0	; () banked
  5469  001492  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5470  001494  E12D               	bnz	l9993
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  5474  001496  8D8D               	bsf	_vscp_guid_reset& (0+255),6,b
  5475  001498  D02B               	goto	l9993
  5476  00149A                     l9979:
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  5480                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  5481                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  5482                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  5483  00149A  0E0C               	movlw	12
  5484  00149C  EC27  F022         	call	_vscp_getGUID
  5485  0014A0  0100               	movlb	0	; () banked
  5486  0014A2  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5487  0014A4  E125               	bnz	l9993
  5488                           
  5489                           ; BSR set to: 0
  5490  0014A6  0E0D               	movlw	13
  5491  0014A8  EC27  F022         	call	_vscp_getGUID
  5492  0014AC  0100               	movlb	0	; () banked
  5493  0014AE  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5494  0014B0  E11F               	bnz	l9993
  5495                           
  5496                           ; BSR set to: 0
  5497  0014B2  0E0E               	movlw	14
  5498  0014B4  EC27  F022         	call	_vscp_getGUID
  5499  0014B8  0100               	movlb	0	; () banked
  5500  0014BA  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5501  0014BC  E119               	bnz	l9993
  5502                           
  5503                           ; BSR set to: 0
  5504  0014BE  0E0F               	movlw	15
  5505  0014C0  EC27  F022         	call	_vscp_getGUID
  5506  0014C4  0100               	movlb	0	; () banked
  5507  0014C6  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5508  0014C8  E113               	bnz	l9993
  5509                           
  5510                           ; BSR set to: 0
  5511                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  5512  0014CA  8F8D               	bsf	_vscp_guid_reset& (0+255),7,b
  5513  0014CC  D011               	goto	l9993
  5514  0014CE                     l1231:
  5515                           
  5516                           ; BSR set to: 0
  5517                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  5518  0014CE  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  5519                           
  5520                           ;vscp_firmware.c: 965: break;
  5521  0014D0  D00F               	goto	l9993
  5522  0014D2                     l9991:
  5523                           
  5524                           ; BSR set to: 0
  5525  0014D2  399C               	swapf	(_vscp_imsg+6)& (0+255),w,b
  5526  0014D4  0B0F               	andlw	15
  5527  0014D6  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5528  0014D8  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5529                           
  5530                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5531                           ; Switch size 1, requested type "speed"
  5532                           ; Number of cases is 1, Range of values is 0 to 0
  5533                           ; switch strategies available:
  5534                           ; Name         Instructions Cycles
  5535                           ; simple_byte            4     3 (average)
  5536                           ;	Chosen strategy is simple_byte
  5537  0014DA  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5538  0014DC  E1F8               	bnz	l1231
  5539                           
  5540                           ; BSR set to: 0
  5541                           ; Switch size 1, requested type "speed"
  5542                           ; Number of cases is 4, Range of values is 0 to 3
  5543                           ; switch strategies available:
  5544                           ; Name         Instructions Cycles
  5545                           ; simple_byte           13     7 (average)
  5546                           ;	Chosen strategy is simple_byte
  5547  0014DE  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5548  0014E0  E08E               	bz	l9949
  5549  0014E2  0A01               	xorlw	1	; case 1
  5550  0014E4  E0A6               	bz	l9959
  5551  0014E6  0A03               	xorlw	3	; case 2
  5552  0014E8  E0BE               	bz	l9969
  5553  0014EA  0A01               	xorlw	1	; case 3
  5554  0014EC  E0D6               	bz	l9979
  5555  0014EE  D7EF               	goto	l1231
  5556  0014F0                     l9993:
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  5560  0014F0  518D               	movf	_vscp_guid_reset& (0+255),w,b
  5561  0014F2  0BF0               	andlw	240
  5562  0014F4  0AF0               	xorlw	240
  5563  0014F6  E001 D225          	bnz	l1291
  5564                           
  5565                           ; BSR set to: 0
  5566                           ;vscp_firmware.c: 970: vscp_init();
  5567  0014FA  ECF3  F01F         	call	_vscp_init	;wreg free
  5568  0014FE  D222               	goto	l1291
  5569  001500                     l9997:
  5570                           
  5571                           ; BSR set to: 0
  5572                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5573  001500  5191               	movf	_vscp_nickname& (0+255),w,b
  5574  001502  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5575  001506  62DF               	cpfseq	indf2,c
  5576  001508  D21D               	goto	l1291
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;vscp_firmware.c: 978: uint8_t i;
  5580                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  5581  00150A  6BDD               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  5582                           
  5583                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  5584  00150C  C09D  F0DC         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  5585                           
  5586                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  5587  001510  C09E  F0DF         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  5588                           
  5589                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  5590  001514  6BEB               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  5591  001516  D047               	goto	l10029
  5592  001518                     l10001:
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  5596  001518  0E07               	movlw	7
  5597  00151A  6E08               	movwf	?___lbmod,c
  5598  00151C  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5599  00151E  ECDD  F020         	call	___lbmod
  5600  001522  0100               	movlb	0	; () banked
  5601  001524  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5602  001526  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5603  001528  0FAA               	addlw	low (_vscp_omsg+6)
  5604  00152A  6ED9               	movwf	fsr2l,c
  5605  00152C  6ADA               	clrf	fsr2h,c
  5606  00152E  51DC               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  5607  001530  25EB               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5608  001532  ECCD  F021         	call	_vscp_readRegister
  5609  001536  6EDF               	movwf	indf2,c
  5610                           
  5611                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  5612  001538  0E07               	movlw	7
  5613  00153A  6E08               	movwf	?___lbmod,c
  5614  00153C  0100               	movlb	0	; () banked
  5615  00153E  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5616  001540  ECDD  F020         	call	___lbmod
  5617  001544  0A06               	xorlw	6
  5618  001546  E00B               	bz	l10007
  5619  001548  0EFF               	movlw	255
  5620  00154A  0100               	movlb	0	; () banked
  5621  00154C  25DF               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  5622  00154E  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5623  001550  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5624  001552  0EFF               	movlw	255
  5625  001554  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  5626  001556  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5627  001558  19D1               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5628  00155A  11D2               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5629  00155C  E123               	bnz	l10027
  5630  00155E                     l10007:
  5631                           
  5632                           ;vscp_firmware.c: 988: uint8_t bytes;
  5633                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  5634  00155E  0E07               	movlw	7
  5635  001560  6E08               	movwf	?___lbmod,c
  5636  001562  0100               	movlb	0	; () banked
  5637  001564  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5638  001566  ECDD  F020         	call	___lbmod
  5639  00156A  0A06               	xorlw	6
  5640  00156C  E103               	bnz	l10011
  5641                           
  5642                           ;vscp_firmware.c: 991: bytes = 7;
  5643  00156E  0E07               	movlw	7
  5644  001570  0100               	movlb	0	; () banked
  5645  001572  D009               	goto	L15
  5646  001574                     l10011:
  5647                           
  5648                           ;vscp_firmware.c: 993: else {
  5649                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  5650  001574  0E07               	movlw	7
  5651  001576  6E08               	movwf	?___lbmod,c
  5652  001578  0100               	movlb	0	; () banked
  5653  00157A  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5654  00157C  ECDD  F020         	call	___lbmod
  5655  001580  0100               	movlb	0	; () banked
  5656  001582  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5657  001584  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5658  001586                     L15:
  5659  001586  6FDE               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;vscp_firmware.c: 995: }
  5663                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  5664  001588  51DE               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  5665  00158A  0F81               	addlw	129
  5666  00158C  6FA4               	movwf	_vscp_omsg& (0+255),b
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  5670  00158E  0E07               	movlw	7
  5671  001590  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5672                           
  5673                           ; BSR set to: 0
  5674                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  5675  001592  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5676  001594  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5677                           
  5678                           ; BSR set to: 0
  5679                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  5680  001596  0E1A               	movlw	26
  5681  001598  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  5685  00159A  C0DD  F0A9         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  5686                           
  5687                           ; BSR set to: 0
  5688                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  5689  00159E  EC2A  F021         	call	_vscp_sendEvent	;wreg free
  5690                           
  5691                           ; BSR set to: 0
  5692                           ;vscp_firmware.c: 1005: pos++;
  5693  0015A2  2BDD               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  5694  0015A4                     l10027:
  5695                           
  5696                           ; BSR set to: 0
  5697  0015A4  2BEB               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  5698  0015A6                     l10029:
  5699                           
  5700                           ; BSR set to: 0
  5701  0015A6  51DF               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  5702  0015A8  5DEB               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5703  0015AA  E301 D1CB          	bc	l1291
  5704  0015AE  D7B4               	goto	l10001
  5705  0015B0                     l10031:
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5709  0015B0  5191               	movf	_vscp_nickname& (0+255),w,b
  5710  0015B2  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5711  0015B6  62DF               	cpfseq	indf2,c
  5712  0015B8  D1C5               	goto	l1291
  5713                           
  5714                           ; BSR set to: 0
  5715                           ;vscp_firmware.c: 1014: uint8_t i;
  5716                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  5717  0015BA  C09D  F0E0         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1283
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  5721  0015BE  5196               	movf	_vscp_imsg& (0+255),w,b
  5722  0015C0  0FFE               	addlw	254
  5723  0015C2  0B07               	andlw	7
  5724  0015C4  6FE1               	movwf	vscp_handleProtocolEvent@len_1284& (0+255),b
  5725                           
  5726                           ; BSR set to: 0
  5727                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  5728  0015C6  6BE6               	clrf	vscp_handleProtocolEvent@i_1282& (0+255),b
  5729  0015C8  D016               	goto	l10045
  5730  0015CA                     l10039:
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  5734  0015CA  51E6               	movf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5735  0015CC  0F9E               	addlw	low (_vscp_imsg+8)
  5736  0015CE  6ED9               	movwf	fsr2l,c
  5737  0015D0  6ADA               	clrf	fsr2h,c
  5738  0015D2  50DF               	movf	indf2,w,c
  5739  0015D4  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  5740  0015D6  51E0               	movf	vscp_handleProtocolEvent@pos_1283& (0+255),w,b
  5741  0015D8  25E6               	addwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5742  0015DA  EC72  F021         	call	_vscp_writeRegister
  5743                           
  5744                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  5745  0015DE  0100               	movlb	0	; () banked
  5746  0015E0  51E6               	movf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5747  0015E2  0FAA               	addlw	low (_vscp_omsg+6)
  5748  0015E4  6ED9               	movwf	fsr2l,c
  5749  0015E6  6ADA               	clrf	fsr2h,c
  5750  0015E8  51E0               	movf	vscp_handleProtocolEvent@pos_1283& (0+255),w,b
  5751  0015EA  25E6               	addwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5752  0015EC  ECCD  F021         	call	_vscp_readRegister
  5753  0015F0  6EDF               	movwf	indf2,c
  5754  0015F2  0100               	movlb	0	; () banked
  5755  0015F4  2BE6               	incf	vscp_handleProtocolEvent@i_1282& (0+255),f,b
  5756  0015F6                     l10045:
  5757                           
  5758                           ; BSR set to: 0
  5759  0015F6  51E1               	movf	vscp_handleProtocolEvent@len_1284& (0+255),w,b
  5760  0015F8  5DE6               	subwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5761  0015FA  E3E7               	bnc	l10039
  5762                           
  5763                           ; BSR set to: 0
  5764                           ;vscp_firmware.c: 1022: }
  5765                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  5766  0015FC  0E07               	movlw	7
  5767  0015FE  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  5771  001600  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5772  001602  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5773                           
  5774                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  5775  001604  0E1A               	movlw	26
  5776  001606  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5777                           
  5778                           ; BSR set to: 0
  5779                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  5780  001608  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  5784  00160A  51E1               	movf	vscp_handleProtocolEvent@len_1284& (0+255),w,b
  5785  00160C  0F81               	addlw	129
  5786  00160E  6FA4               	movwf	_vscp_omsg& (0+255),b
  5787  001610  D6A8               	goto	l9883
  5788  001612                     l10057:
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5792  001612  5191               	movf	_vscp_nickname& (0+255),w,b
  5793  001614  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5794  001618  62DF               	cpfseq	indf2,c
  5795  00161A  D194               	goto	l1291
  5796                           
  5797                           ; BSR set to: 0
  5798                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5799                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  5800                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  5801  00161C  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5802  00161E  EC2A  F01E         	call	_vscp_readAppReg
  5803  001622  0100               	movlb	0	; () banked
  5804  001624  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5805  001626  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5806  001628  6E51               	movwf	?_vscp_writeAppReg,c
  5807  00162A  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5808  00162C  EC6F  F004         	call	_vscp_writeAppReg
  5809  001630  D68D               	goto	L14
  5810  001632                     l10073:
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5814  001632  5191               	movf	_vscp_nickname& (0+255),w,b
  5815  001634  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5816  001638  62DF               	cpfseq	indf2,c
  5817  00163A  D184               	goto	l1291
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5821                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  5822                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  5823  00163C  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5824  00163E  EC2A  F01E         	call	_vscp_readAppReg
  5825  001642  0100               	movlb	0	; () banked
  5826  001644  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5827  001646  05D1               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  5828  001648  6E51               	movwf	?_vscp_writeAppReg,c
  5829  00164A  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5830  00164C  EC6F  F004         	call	_vscp_writeAppReg
  5831  001650  D67D               	goto	L14
  5832  001652                     l10089:
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  5836                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  5837  001652  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
  5838  001654  1991               	xorwf	_vscp_nickname& (0+255),w,b
  5839  001656  E003               	bz	l1255
  5840                           
  5841                           ; BSR set to: 0
  5842  001658  299C               	incf	(_vscp_imsg+6)& (0+255),w,b
  5843  00165A  E001 D173          	bnz	l1291
  5844  00165E                     l1255:
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  5848  00165E  6BE5               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  5849                           
  5850                           ; BSR set to: 0
  5851                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  5852  001660  0E03               	movlw	3
  5853  001662  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5854                           
  5855                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  5856  001664  0E88               	movlw	136
  5857  001666  6FA4               	movwf	_vscp_omsg& (0+255),b
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  5861  001668  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5862  00166A  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5863                           
  5864                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  5865  00166C  0E20               	movlw	32
  5866  00166E  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  5870  001670  6BEA               	clrf	vscp_handleProtocolEvent@i_1285& (0+255),b
  5871  001672                     l1256:
  5872                           
  5873                           ; BSR set to: 0
  5874                           ;vscp_firmware.c: 1091: {
  5875                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  5876  001672  C0EA  F0A9         	movff	vscp_handleProtocolEvent@i_1285,_vscp_omsg+5
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  5880  001676  0E01               	movlw	1
  5881  001678  6FEC               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  5882  00167A                     l10109:
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  5886  00167A  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5887  00167C  0FA9               	addlw	low (_vscp_omsg+5)
  5888  00167E  6ED9               	movwf	fsr2l,c
  5889  001680  6ADA               	clrf	fsr2h,c
  5890  001682  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5891  001684  080F               	sublw	15
  5892  001686  EC27  F022         	call	_vscp_getGUID
  5893  00168A  6EDF               	movwf	indf2,c
  5894  00168C  0100               	movlb	0	; () banked
  5895  00168E  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5896                           
  5897                           ; BSR set to: 0
  5898                           ;vscp_firmware.c: 1096: if (k > 16)
  5899  001690  0E10               	movlw	16
  5900  001692  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5901  001694  D001               	goto	l10117
  5902  001696  D004               	goto	l10121
  5903  001698                     l10117:
  5904                           
  5905                           ; BSR set to: 0
  5906  001698  2BEC               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5907                           
  5908                           ; BSR set to: 0
  5909  00169A  0E07               	movlw	7
  5910  00169C  65EC               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5911  00169E  D7ED               	goto	l10109
  5912  0016A0                     l10121:
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;vscp_firmware.c: 1098: }
  5916                           ;vscp_firmware.c: 1100: if (k > 16)
  5917  0016A0  0E10               	movlw	16
  5918  0016A2  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5919  0016A4  D001               	goto	l10125
  5920  0016A6  D006               	goto	l1257
  5921  0016A8                     l10125:
  5922                           
  5923                           ; BSR set to: 0
  5924                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  5925  0016A8  EC2A  F021         	call	_vscp_sendEvent	;wreg free
  5926                           
  5927                           ; BSR set to: 0
  5928  0016AC  2BEA               	incf	vscp_handleProtocolEvent@i_1285& (0+255),f,b
  5929                           
  5930                           ; BSR set to: 0
  5931  0016AE  0E02               	movlw	2
  5932  0016B0  65EA               	cpfsgt	vscp_handleProtocolEvent@i_1285& (0+255),b
  5933  0016B2  D7DF               	goto	l1256
  5934  0016B4                     l1257:
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;vscp_firmware.c: 1104: }
  5938                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  5939  0016B4  6BEC               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  5940  0016B6                     l10135:
  5941                           
  5942                           ; BSR set to: 0
  5943                           ;vscp_firmware.c: 1107: {
  5944                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  5945  0016B6  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5946  0016B8  ECDA  F021         	call	_vscp_getMDF_URL
  5947  0016BC  0900               	iorlw	0
  5948  0016BE  E008               	bz	l10139
  5949                           
  5950                           ; BSR set to: 0
  5951                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  5952  0016C0  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5953  0016C2  0FAC               	addlw	low (_vscp_omsg+8)
  5954  0016C4  6ED9               	movwf	fsr2l,c
  5955  0016C6  6ADA               	clrf	fsr2h,c
  5956  0016C8  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5957  0016CA  ECDA  F021         	call	_vscp_getMDF_URL
  5958  0016CE  D005               	goto	L16
  5959  0016D0                     l10139:
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;vscp_firmware.c: 1110: else
  5963                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  5964  0016D0  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5965  0016D2  0FAC               	addlw	low (_vscp_omsg+8)
  5966  0016D4  6ED9               	movwf	fsr2l,c
  5967  0016D6  6ADA               	clrf	fsr2h,c
  5968  0016D8  0E00               	movlw	0
  5969  0016DA                     L16:
  5970  0016DA  6EDF               	movwf	indf2,c
  5971                           
  5972                           ; BSR set to: 0
  5973  0016DC  2BEC               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5974                           
  5975                           ; BSR set to: 0
  5976  0016DE  0E04               	movlw	4
  5977  0016E0  65EC               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5978  0016E2  D7E9               	goto	l10135
  5979                           
  5980                           ; BSR set to: 0
  5981                           ;vscp_firmware.c: 1112: }
  5982                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  5983  0016E4  EC2A  F021         	call	_vscp_sendEvent	;wreg free
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;vscp_firmware.c: 1116: k = 5;
  5987  0016E8  0E05               	movlw	5
  5988  0016EA  6FE5               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  5992  0016EC  0E03               	movlw	3
  5993  0016EE  6FEA               	movwf	vscp_handleProtocolEvent@i_1285& (0+255),b
  5994  0016F0                     l1266:
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;vscp_firmware.c: 1118: {
  5998                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  5999  0016F0  C0EA  F0A9         	movff	vscp_handleProtocolEvent@i_1285,_vscp_omsg+5
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  6003  0016F4  0E01               	movlw	1
  6004  0016F6  6FEC               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  6005  0016F8                     l10161:
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  6009  0016F8  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6010  0016FA  0FA9               	addlw	low (_vscp_omsg+5)
  6011  0016FC  6ED9               	movwf	fsr2l,c
  6012  0016FE  6ADA               	clrf	fsr2h,c
  6013  001700  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  6014  001702  ECDA  F021         	call	_vscp_getMDF_URL
  6015  001706  6EDF               	movwf	indf2,c
  6016                           
  6017                           ; BSR set to: 0
  6018  001708  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  6019                           
  6020                           ; BSR set to: 0
  6021  00170A  2BEC               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  6022                           
  6023                           ; BSR set to: 0
  6024  00170C  0E07               	movlw	7
  6025  00170E  65EC               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  6026  001710  D7F3               	goto	l10161
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;vscp_firmware.c: 1123: }
  6030                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  6031  001712  EC2A  F021         	call	_vscp_sendEvent	;wreg free
  6032                           
  6033                           ; BSR set to: 0
  6034  001716  2BEA               	incf	vscp_handleProtocolEvent@i_1285& (0+255),f,b
  6035                           
  6036                           ; BSR set to: 0
  6037  001718  0E06               	movlw	6
  6038  00171A  65EA               	cpfsgt	vscp_handleProtocolEvent@i_1285& (0+255),b
  6039  00171C  D7E9               	goto	l1266
  6040  00171E  D112               	goto	l1291
  6041  001720                     l10175:
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  6045  001720  5191               	movf	_vscp_nickname& (0+255),w,b
  6046  001722  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6047  001726  62DF               	cpfseq	indf2,c
  6048  001728  D10D               	goto	l1291
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  6052  00172A  0E03               	movlw	3
  6053  00172C  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6054                           
  6055                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  6056  00172E  0E87               	movlw	135
  6057  001730  6FA4               	movwf	_vscp_omsg& (0+255),b
  6058                           
  6059                           ; BSR set to: 0
  6060                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  6061  001732  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6062  001734  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6063                           
  6064                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  6065  001736  0E22               	movlw	34
  6066  001738  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  6070  00173A  0EA9               	movlw	(_vscp_omsg+5)& (0+255)
  6071  00173C  EC83  F021         	call	_vscp_getMatrixInfo
  6072  001740  D610               	goto	l9883
  6073  001742                     l10185:
  6074                           
  6075                           ; BSR set to: 0
  6076                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  6077  001742  5191               	movf	_vscp_nickname& (0+255),w,b
  6078  001744  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6079  001748  62DF               	cpfseq	indf2,c
  6080  00174A  D0FC               	goto	l1291
  6081                           
  6082                           ; BSR set to: 0
  6083                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  6084  00174C  6BE7               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  6088                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  6089  00174E  C096  F0D1         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  6090  001752  0E0F               	movlw	15
  6091  001754  17D1               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6092  001756  0E04               	movlw	4
  6093  001758  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6094  00175A  E312               	bnc	l10201
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  6098  00175C  C0A0  F0E8         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1289
  6099  001760  6BE9               	clrf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  6103  001762  51E9               	movf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6104  001764  11E8               	iorwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6105  001766  E103               	bnz	l10197
  6106                           
  6107                           ; BSR set to: 0
  6108  001768  0E01               	movlw	1
  6109  00176A  6FE9               	movwf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6110  00176C  6BE8               	clrf	vscp_handleProtocolEvent@bytes_1289& (0+255),b
  6111  00176E                     l10197:
  6112                           
  6113                           ; BSR set to: 0
  6114                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  6115  00176E  0E01               	movlw	1
  6116  001770  5DE8               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6117  001772  0E01               	movlw	1
  6118  001774  59E9               	subwfb	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6119  001776  E307               	bnc	l10203
  6120                           
  6121                           ; BSR set to: 0
  6122  001778  0E01               	movlw	1
  6123  00177A  6FE9               	movwf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6124  00177C  0E00               	movlw	0
  6125  00177E  D002               	goto	L18
  6126  001780                     l10201:
  6127                           
  6128                           ; BSR set to: 0
  6129                           ;vscp_firmware.c: 1173: else {
  6130                           ;vscp_firmware.c: 1174: bytes = 1;
  6131  001780  6BE9               	clrf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6132  001782  0E01               	movlw	1
  6133  001784                     L18:
  6134  001784  6FE8               	movwf	vscp_handleProtocolEvent@bytes_1289& (0+255),b
  6135  001786                     l10203:
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;vscp_firmware.c: 1175: }
  6139                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  6140  001786  C052  F0D8         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  6141  00178A  C053  F0D9         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  6145  00178E  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  6146  001790  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6147  001794  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6148  001796  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6149  00179A  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6150  00179C  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6151  00179E  6E52               	movwf	_vscp_page_select,c
  6152  0017A0  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6153  0017A2  6E53               	movwf	_vscp_page_select+1,c
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  6157  0017A4  0E07               	movlw	7
  6158  0017A6  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6159                           
  6160                           ; BSR set to: 0
  6161                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  6162  0017A8  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6163  0017AA  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  6167  0017AC  0E27               	movlw	39
  6168  0017AE  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  6172  0017B0  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6173                           
  6174                           ; BSR set to: 0
  6175                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  6176  0017B2  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6177                           
  6178                           ; BSR set to: 0
  6179                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  6180  0017B6  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6181  0017BA                     l10219:
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  6185  0017BA  51E7               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6186  0017BC  5DE8               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6187  0017BE  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6188  0017C0  0E00               	movlw	0
  6189  0017C2  59E9               	subwfb	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6190  0017C4  6FD2               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6191  0017C6  0E04               	movlw	4
  6192  0017C8  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6193  0017CA  0E00               	movlw	0
  6194  0017CC  59D2               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6195  0017CE  E302               	bnc	l10223
  6196                           
  6197                           ; BSR set to: 0
  6198                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  6199  0017D0  0E04               	movlw	4
  6200  0017D2  D002               	goto	L19
  6201  0017D4                     l10223:
  6202                           
  6203                           ; BSR set to: 0
  6204                           ;vscp_firmware.c: 1198: else {
  6205                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  6206  0017D4  51E7               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6207  0017D6  5DE8               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6208  0017D8                     L19:
  6209  0017D8  6FE2               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  6210                           
  6211                           ; BSR set to: 0
  6212                           ;vscp_firmware.c: 1200: }
  6213                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  6214  0017DA  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6215  0017DC  0F84               	addlw	132
  6216  0017DE  6FA4               	movwf	_vscp_omsg& (0+255),b
  6217                           
  6218                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  6219                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  6220  0017E0  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6221  0017E2  25E7               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6222  0017E4  6FAC               	movwf	(_vscp_omsg+8)& (0+255),b
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  6226  0017E6  6BE3               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  6227  0017E8  D00C               	goto	l10231
  6228  0017EA                     l10227:
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  6232                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  6233  0017EA  51E3               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6234  0017EC  0FAD               	addlw	low (_vscp_omsg+9)
  6235  0017EE  6ED9               	movwf	fsr2l,c
  6236  0017F0  6ADA               	clrf	fsr2h,c
  6237  0017F2  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6238  0017F4  25E7               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6239  0017F6  25E3               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6240  0017F8  ECCD  F021         	call	_vscp_readRegister
  6241  0017FC  6EDF               	movwf	indf2,c
  6242  0017FE  0100               	movlb	0	; () banked
  6243  001800  2BE3               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  6244  001802                     l10231:
  6245                           
  6246                           ; BSR set to: 0
  6247  001802  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6248  001804  5DE3               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6249  001806  E3F1               	bnc	l10227
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;vscp_firmware.c: 1211: }
  6253                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  6254  001808  EC2A  F021         	call	_vscp_sendEvent	;wreg free
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  6258  00180C  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6259  00180E  27E7               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  6263  001810  2BA9               	incf	(_vscp_omsg+5)& (0+255),f,b
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  6267  001812  51E7               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6268  001814  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6269  001816  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6270  001818  51E8               	movf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6271  00181A  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6272  00181C  51E9               	movf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6273  00181E  59D2               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6274  001820  E3CC               	bnc	l10219
  6275                           
  6276                           ; BSR set to: 0
  6277                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  6278  001822  C0D8  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  6279  001826  C0D9  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  6280  00182A  D08C               	goto	l1291
  6281  00182C                     l10241:
  6282                           
  6283                           ; BSR set to: 0
  6284                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  6285  00182C  5191               	movf	_vscp_nickname& (0+255),w,b
  6286  00182E  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6287  001832  62DF               	cpfseq	indf2,c
  6288  001834  D087               	goto	l1291
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;vscp_firmware.c: 1234: uint8_t i;
  6292                           ;vscp_firmware.c: 1235: uint16_t page_save;
  6293                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  6294  001836  C052  F0DA         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1294
  6295  00183A  C053  F0DB         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1294+1
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  6299  00183E  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  6300  001840  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6301  001844  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6302  001846  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6303  00184A  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6304  00184C  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6305  00184E  6E52               	movwf	_vscp_page_select,c
  6306  001850  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6307  001852  6E53               	movwf	_vscp_page_select+1,c
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  6311  001854  C09F  F0E4         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1293
  6312                           
  6313                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  6314                           ;vscp_firmware.c: 1248: i++) {
  6315  001858  D014               	goto	l10253
  6316  00185A                     l10249:
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  6320                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  6321  00185A  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6322  00185C  08A0               	sublw	low (_vscp_imsg+10)
  6323  00185E  25E4               	addwf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6324  001860  6ED9               	movwf	fsr2l,c
  6325  001862  6ADA               	clrf	fsr2h,c
  6326  001864  50DF               	movf	indf2,w,c
  6327  001866  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  6328  001868  51E4               	movf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6329  00186A  EC72  F021         	call	_vscp_writeRegister
  6330  00186E  0100               	movlb	0	; () banked
  6331  001870  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6332  001872  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6333  001874  08AD               	sublw	low (_vscp_omsg+9)
  6334  001876  25E4               	addwf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6335  001878  6ED9               	movwf	fsr2l,c
  6336  00187A  6ADA               	clrf	fsr2h,c
  6337  00187C  C0D1  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  6338                           
  6339                           ; BSR set to: 0
  6340  001880  2BE4               	incf	vscp_handleProtocolEvent@i_1293& (0+255),f,b
  6341  001882                     l10253:
  6342                           
  6343                           ; BSR set to: 0
  6344  001882  5196               	movf	_vscp_imsg& (0+255),w,b
  6345  001884  0B0F               	andlw	15
  6346  001886  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6347  001888  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6348  00188A  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6349  00188C  27D1               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6350  00188E  0E00               	movlw	0
  6351  001890  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6352  001892  0EFC               	movlw	252
  6353  001894  25D1               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6354  001896  6FD3               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  6355  001898  0EFF               	movlw	255
  6356  00189A  21D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6357  00189C  6FD4               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  6358  00189E  51E4               	movf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6359  0018A0  6FD5               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  6360  0018A2  6BD6               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  6361  0018A4  51D6               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  6362  0018A6  0A80               	xorlw	128
  6363  0018A8  6FD7               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  6364  0018AA  51D3               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  6365  0018AC  5DD5               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  6366  0018AE  51D4               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  6367  0018B0  0A80               	xorlw	128
  6368  0018B2  59D7               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  6369  0018B4  E3D2               	bnc	l10249
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;vscp_firmware.c: 1251: }
  6373                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  6374  0018B6  C0DA  F052         	movff	vscp_handleProtocolEvent@page_save_1294,_vscp_page_select
  6375  0018BA  C0DB  F053         	movff	vscp_handleProtocolEvent@page_save_1294+1,_vscp_page_select+1
  6376                           
  6377                           ; BSR set to: 0
  6378                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  6379  0018BE  0E07               	movlw	7
  6380  0018C0  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6381                           
  6382                           ; BSR set to: 0
  6383                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  6384  0018C2  5196               	movf	_vscp_imsg& (0+255),w,b
  6385  0018C4  0B0F               	andlw	15
  6386  0018C6  0F80               	addlw	128
  6387  0018C8  6FA4               	movwf	_vscp_omsg& (0+255),b
  6388                           
  6389                           ; BSR set to: 0
  6390                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  6391  0018CA  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6392  0018CC  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  6396  0018CE  0E27               	movlw	39
  6397  0018D0  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6398                           
  6399                           ; BSR set to: 0
  6400                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  6401  0018D2  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6402                           
  6403                           ; BSR set to: 0
  6404                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  6405  0018D4  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6406                           
  6407                           ; BSR set to: 0
  6408                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  6409  0018D8  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6410                           
  6411                           ; BSR set to: 0
  6412                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  6413  0018DC  C09F  F0AC         	movff	_vscp_imsg+9,_vscp_omsg+8
  6414  0018E0  D540               	goto	l9883
  6415  0018E2                     l10275:
  6416                           
  6417                           ; BSR set to: 0
  6418  0018E2  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  6419                           
  6420                           ; Switch size 1, requested type "speed"
  6421                           ; Number of cases is 16, Range of values is 1 to 38
  6422                           ; switch strategies available:
  6423                           ; Name         Instructions Cycles
  6424                           ; simple_byte           49    25 (average)
  6425                           ;	Chosen strategy is simple_byte
  6426  0018E4  0A01               	xorlw	1	; case 1
  6427  0018E6  E101 D514          	bz	l9857
  6428  0018EA  0A03               	xorlw	3	; case 2
  6429  0018EC  E101 D514          	bz	l9859
  6430  0018F0  0A04               	xorlw	4	; case 6
  6431  0018F2  E101 D514          	bz	l9861
  6432  0018F6  0A0E               	xorlw	14	; case 8
  6433  0018F8  E101 D514          	bz	l9863
  6434  0018FC  0A01               	xorlw	1	; case 9
  6435  0018FE  E101 D514          	bz	l9865
  6436  001902  0A02               	xorlw	2	; case 11
  6437  001904  E101 D534          	bz	l9899
  6438  001908  0A07               	xorlw	7	; case 12
  6439  00190A  E101 D54A          	bz	l9933
  6440  00190E  0A1B               	xorlw	27	; case 23
  6441  001910  E101 D5DF          	bz	l9991
  6442  001914  0A0F               	xorlw	15	; case 24
  6443  001916  E101 D5F3          	bz	l9997
  6444  00191A  0A01               	xorlw	1	; case 25
  6445  00191C  E101 D648          	bz	l10031
  6446  001920  0A04               	xorlw	4	; case 29
  6447  001922  E101 D676          	bz	l10057
  6448  001926  0A03               	xorlw	3	; case 30
  6449  001928  E101 D683          	bz	l10073
  6450  00192C  0A01               	xorlw	1	; case 31
  6451  00192E  E101 D690          	bz	l10089
  6452  001932  0A3E               	xorlw	62	; case 33
  6453  001934  E101 D6F4          	bz	l10175
  6454  001938  0A04               	xorlw	4	; case 37
  6455  00193A  E101 D702          	bz	l10185
  6456  00193E  0A03               	xorlw	3	; case 38
  6457  001940  E101 D774          	bz	l10241
  6458  001944                     l1291:
  6459  001944  0012               	return	
  6460  001946                     __end_of_vscp_handleProtocolEvent:
  6461                           	opt stack 0
  6462                           tblptru	equ	0xFF8
  6463                           prodh	equ	0xFF4
  6464                           prodl	equ	0xFF3
  6465                           postinc0	equ	0xFEE
  6466                           wreg	equ	0xFE8
  6467                           indf2	equ	0xFDF
  6468                           postinc2	equ	0xFDE
  6469                           postdec2	equ	0xFDD
  6470                           fsr2h	equ	0xFDA
  6471                           fsr2l	equ	0xFD9
  6472                           status	equ	0xFD8
  6473                           
  6474 ;; *************** function ___lbmod *****************
  6475 ;; Defined at:
  6476 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;  dividend        1    wreg     unsigned char 
  6479 ;;  divisor         1    7[COMRAM] unsigned char 
  6480 ;; Auto vars:     Size  Location     Type
  6481 ;;  dividend        1    8[COMRAM] unsigned char 
  6482 ;;  rem             1   10[COMRAM] unsigned char 
  6483 ;;  counter         1    9[COMRAM] unsigned char 
  6484 ;; Return value:  Size  Location     Type
  6485 ;;                  1    wreg      unsigned char 
  6486 ;; Registers used:
  6487 ;;		wreg, status,2, status,0
  6488 ;; Tracked objects:
  6489 ;;		On entry : F/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6493 ;;      Params:         1       0       0       0       0       0       0
  6494 ;;      Locals:         3       0       0       0       0       0       0
  6495 ;;      Temps:          0       0       0       0       0       0       0
  6496 ;;      Totals:         4       0       0       0       0       0       0
  6497 ;;Total ram usage:        4 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    2
  6500 ;; This function calls:
  6501 ;;		Nothing
  6502 ;; This function is called by:
  6503 ;;		_vscp_handleProtocolEvent
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           	psect	text16
  6508  0041BA                     __ptext16:
  6509                           	opt stack 0
  6510  0041BA                     ___lbmod:
  6511                           	opt stack 27
  6512                           
  6513                           ;incstack = 0
  6514                           ;incstack = 0
  6515                           ;___lbmod@dividend stored from wreg
  6516  0041BA  CFE8 F009          	movff	wreg,___lbmod@dividend
  6517                           
  6518                           ; BSR set to: 0
  6519  0041BE  0E08               	movlw	8
  6520  0041C0  6E0A               	movwf	___lbmod@counter,c
  6521                           
  6522                           ; BSR set to: 0
  6523  0041C2  6A0B               	clrf	___lbmod@rem,c
  6524  0041C4                     l7517:
  6525  0041C4  90D8               	bcf	status,0,c
  6526  0041C6  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  6527  0041C8  340B               	rlcf	___lbmod@rem& (0+255),w,c
  6528  0041CA  6E0B               	movwf	___lbmod@rem,c
  6529  0041CC  90D8               	bcf	status,0,c
  6530  0041CE  3609               	rlcf	___lbmod@dividend,f,c
  6531  0041D0  5008               	movf	___lbmod@divisor,w,c
  6532  0041D2  5C0B               	subwf	___lbmod@rem,w,c
  6533  0041D4  E302               	bnc	l7525
  6534  0041D6  5008               	movf	___lbmod@divisor,w,c
  6535  0041D8  5E0B               	subwf	___lbmod@rem,f,c
  6536  0041DA                     l7525:
  6537  0041DA  2E0A               	decfsz	___lbmod@counter,f,c
  6538  0041DC  D7F3               	goto	l7517
  6539  0041DE  500B               	movf	___lbmod@rem,w,c
  6540  0041E0  0012               	return	
  6541  0041E2                     __end_of___lbmod:
  6542                           	opt stack 0
  6543                           tblptru	equ	0xFF8
  6544                           prodh	equ	0xFF4
  6545                           prodl	equ	0xFF3
  6546                           postinc0	equ	0xFEE
  6547                           wreg	equ	0xFE8
  6548                           indf2	equ	0xFDF
  6549                           postinc2	equ	0xFDE
  6550                           postdec2	equ	0xFDD
  6551                           fsr2h	equ	0xFDA
  6552                           fsr2l	equ	0xFD9
  6553                           status	equ	0xFD8
  6554                           
  6555 ;; *************** function _vscp_writeRegister *****************
  6556 ;; Defined at:
  6557 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  6558 ;; Parameters:    Size  Location     Type
  6559 ;;  reg             1    wreg     unsigned char 
  6560 ;;  value           1   30[BANK0 ] unsigned char 
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;  reg             1   31[BANK0 ] unsigned char 
  6563 ;; Return value:  Size  Location     Type
  6564 ;;                  1    wreg      unsigned char 
  6565 ;; Registers used:
  6566 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6567 ;; Tracked objects:
  6568 ;;		On entry : F/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6572 ;;      Params:         0       1       0       0       0       0       0
  6573 ;;      Locals:         0       1       0       0       0       0       0
  6574 ;;      Temps:          0       0       0       0       0       0       0
  6575 ;;      Totals:         0       2       0       0       0       0       0
  6576 ;;Total ram usage:        2 bytes
  6577 ;; Hardware stack levels used:    1
  6578 ;; Hardware stack levels required when called:    8
  6579 ;; This function calls:
  6580 ;;		_vscp_writeAppReg
  6581 ;;		_vscp_writeStdReg
  6582 ;; This function is called by:
  6583 ;;		_vscp_handleProtocolEvent
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           	psect	text17
  6588  0042E4                     __ptext17:
  6589                           	opt stack 0
  6590  0042E4                     _vscp_writeRegister:
  6591                           	opt stack 21
  6592                           
  6593                           ;incstack = 0
  6594                           ;incstack = 0
  6595                           ;vscp_writeRegister@reg stored from wreg
  6596  0042E4  CFE8 F0D0          	movff	wreg,vscp_writeRegister@reg
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  6600  0042E8  0E7F               	movlw	127
  6601  0042EA  65D0               	cpfsgt	vscp_writeRegister@reg& (0+255),b
  6602  0042EC  D006               	goto	l11133
  6603                           
  6604                           ; BSR set to: 0
  6605                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  6606  0042EE  C0CF  F010         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  6607  0042F2  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6608  0042F4  EC0A  F01C         	call	_vscp_writeStdReg
  6609  0042F8  D005               	goto	l1171
  6610  0042FA                     l11133:
  6611                           
  6612                           ; BSR set to: 0
  6613                           ;vscp_firmware.c: 705: else {
  6614                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  6615  0042FA  C0CF  F051         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  6616  0042FE  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6617  004300  EC6F  F004         	call	_vscp_writeAppReg
  6618  004304                     l1171:
  6619  004304  0012               	return	
  6620  004306                     __end_of_vscp_writeRegister:
  6621                           	opt stack 0
  6622                           tblptru	equ	0xFF8
  6623                           prodh	equ	0xFF4
  6624                           prodl	equ	0xFF3
  6625                           postinc0	equ	0xFEE
  6626                           wreg	equ	0xFE8
  6627                           indf2	equ	0xFDF
  6628                           postinc2	equ	0xFDE
  6629                           postdec2	equ	0xFDD
  6630                           fsr2h	equ	0xFDA
  6631                           fsr2l	equ	0xFD9
  6632                           status	equ	0xFD8
  6633                           
  6634 ;; *************** function _vscp_writeStdReg *****************
  6635 ;; Defined at:
  6636 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;  reg             1    wreg     unsigned char 
  6639 ;;  value           1   15[COMRAM] unsigned char 
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;  reg             1   21[COMRAM] unsigned char 
  6642 ;;  rv              1   20[COMRAM] unsigned char 
  6643 ;; Return value:  Size  Location     Type
  6644 ;;                  1    wreg      unsigned char 
  6645 ;; Registers used:
  6646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6647 ;; Tracked objects:
  6648 ;;		On entry : F/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6652 ;;      Params:         1       0       0       0       0       0       0
  6653 ;;      Locals:         2       0       0       0       0       0       0
  6654 ;;      Temps:          4       0       0       0       0       0       0
  6655 ;;      Totals:         7       0       0       0       0       0       0
  6656 ;;Total ram usage:        7 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; Hardware stack levels required when called:    5
  6659 ;; This function calls:
  6660 ;;		_vscp_setGUID
  6661 ;;		_vscp_setManufacturerId
  6662 ;;		_vscp_getGUID
  6663 ;;		_vscp_getUserID
  6664 ;;		_vscp_setUserID
  6665 ;;		_vscp_getManufacturerId
  6666 ;;		_vscp_restoreDefaults
  6667 ;; This function is called by:
  6668 ;;		_vscp_writeRegister
  6669 ;;		_vscp_handleProtocolEvent
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           	psect	text18
  6674  003814                     __ptext18:
  6675                           	opt stack 0
  6676  003814                     _vscp_writeStdReg:
  6677                           	opt stack 24
  6678                           
  6679                           ;incstack = 0
  6680                           ;incstack = 0
  6681                           ;vscp_writeStdReg@reg stored from wreg
  6682  003814  CFE8 F016          	movff	wreg,vscp_writeStdReg@reg
  6683                           
  6684                           ; BSR set to: 0
  6685                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  6686  003818  1C10               	comf	vscp_writeStdReg@value,w,c
  6687  00381A  6E15               	movwf	vscp_writeStdReg@rv,c
  6688                           
  6689                           ; BSR set to: 0
  6690                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  6691                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  6692  00381C  0E83               	movlw	131
  6693  00381E  6416               	cpfsgt	vscp_writeStdReg@reg,c
  6694  003820  D00E               	goto	l9691
  6695                           
  6696                           ; BSR set to: 0
  6697  003822  0E89               	movlw	137
  6698  003824  6016               	cpfslt	vscp_writeStdReg@reg,c
  6699  003826  D00B               	goto	l9691
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  6703  003828  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  6704  00382C  5016               	movf	vscp_writeStdReg@reg,w,c
  6705  00382E  0F7C               	addlw	124
  6706  003830  ECB1  F021         	call	_vscp_setUserID
  6707                           
  6708                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  6709  003834  5016               	movf	vscp_writeStdReg@reg,w,c
  6710  003836  0F7C               	addlw	124
  6711  003838  EC1D  F022         	call	_vscp_getUserID
  6712  00383C  D069               	goto	L25
  6713  00383E                     l9691:
  6714                           
  6715                           ; BSR set to: 0
  6716                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  6717  00383E  5016               	movf	vscp_writeStdReg@reg,w,c
  6718  003840  0A92               	xorlw	146
  6719  003842  E10D               	bnz	l9697
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  6723  003844  5010               	movf	vscp_writeStdReg@value,w,c
  6724  003846  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6725  003848  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  6726  00384A  5052               	movf	_vscp_page_select,w,c
  6727  00384C  6E13               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  6728  00384E  6A14               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  6729  003850  1011               	iorwf	??_vscp_writeStdReg,w,c
  6730  003852  6E52               	movwf	_vscp_page_select,c
  6731  003854  5012               	movf	??_vscp_writeStdReg+1,w,c
  6732  003856  1014               	iorwf	??_vscp_writeStdReg+3,w,c
  6733  003858  6E53               	movwf	_vscp_page_select+1,c
  6734                           
  6735                           ; BSR set to: 0
  6736                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  6737  00385A  5053               	movf	_vscp_page_select+1,w,c
  6738  00385C  D059               	goto	L25
  6739  00385E                     l9697:
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  6743  00385E  5016               	movf	vscp_writeStdReg@reg,w,c
  6744  003860  0A93               	xorlw	147
  6745  003862  E10B               	bnz	l9703
  6746                           
  6747                           ; BSR set to: 0
  6748                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  6749  003864  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  6750  003866  5053               	movf	_vscp_page_select+1,w,c
  6751  003868  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6752  00386A  5010               	movf	vscp_writeStdReg@value,w,c
  6753  00386C  1011               	iorwf	??_vscp_writeStdReg,w,c
  6754  00386E  6E52               	movwf	_vscp_page_select,c
  6755  003870  5012               	movf	??_vscp_writeStdReg+1,w,c
  6756  003872  6E53               	movwf	_vscp_page_select+1,c
  6757                           
  6758                           ; BSR set to: 0
  6759                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  6760  003874  C052  F015         	movff	_vscp_page_select,vscp_writeStdReg@rv
  6761                           
  6762                           ;vscp_firmware.c: 737: }
  6763  003878  D04E               	goto	l9745
  6764  00387A                     l9703:
  6765                           
  6766                           ; BSR set to: 0
  6767                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  6768  00387A  0E88               	movlw	136
  6769  00387C  6416               	cpfsgt	vscp_writeStdReg@reg,c
  6770  00387E  D019               	goto	l9715
  6771                           
  6772                           ; BSR set to: 0
  6773  003880  0E91               	movlw	145
  6774  003882  6016               	cpfslt	vscp_writeStdReg@reg,c
  6775  003884  D016               	goto	l9715
  6776                           
  6777                           ; BSR set to: 0
  6778                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6779                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  6780  003886  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6781  00388A  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6782  00388E  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6783  003890  2812               	incf	??_vscp_writeStdReg+1,w,c
  6784  003892  E102               	bnz	l9711
  6785                           
  6786                           ; BSR set to: 0
  6787  003894  2852               	incf	_vscp_page_select,w,c
  6788  003896  E002               	bz	l9713
  6789  003898                     l9711:
  6790                           
  6791                           ; BSR set to: 0
  6792                           ;vscp_firmware.c: 747: rv = ~value;
  6793  003898  1C10               	comf	vscp_writeStdReg@value,w,c
  6794  00389A  D03A               	goto	L25
  6795  00389C                     l9713:
  6796                           
  6797                           ; BSR set to: 0
  6798                           ;vscp_firmware.c: 749: else {
  6799                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  6800  00389C  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  6801  0038A0  5016               	movf	vscp_writeStdReg@reg,w,c
  6802  0038A2  0F77               	addlw	119
  6803  0038A4  EC04  F021         	call	_vscp_setManufacturerId
  6804                           
  6805                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  6806  0038A8  5016               	movf	vscp_writeStdReg@reg,w,c
  6807  0038AA  0F77               	addlw	119
  6808  0038AC  EC13  F022         	call	_vscp_getManufacturerId
  6809  0038B0  D02F               	goto	L25
  6810  0038B2                     l9715:
  6811                           
  6812                           ; BSR set to: 0
  6813                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  6814  0038B2  0ECF               	movlw	207
  6815  0038B4  6416               	cpfsgt	vscp_writeStdReg@reg,c
  6816  0038B6  D017               	goto	l9727
  6817                           
  6818                           ; BSR set to: 0
  6819  0038B8  0EE0               	movlw	224
  6820  0038BA  6016               	cpfslt	vscp_writeStdReg@reg,c
  6821  0038BC  D014               	goto	l9727
  6822                           
  6823                           ; BSR set to: 0
  6824                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6825                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  6826  0038BE  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6827  0038C2  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6828  0038C6  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6829  0038C8  2812               	incf	??_vscp_writeStdReg+1,w,c
  6830  0038CA  E1E6               	bnz	l9711
  6831                           
  6832                           ; BSR set to: 0
  6833  0038CC  2852               	incf	_vscp_page_select,w,c
  6834  0038CE  E1E4               	bnz	l9711
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;vscp_firmware.c: 762: else {
  6838                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  6839  0038D0  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  6840  0038D4  5016               	movf	vscp_writeStdReg@reg,w,c
  6841  0038D6  0F30               	addlw	48
  6842  0038D8  EC17  F021         	call	_vscp_setGUID
  6843                           
  6844                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  6845  0038DC  5016               	movf	vscp_writeStdReg@reg,w,c
  6846  0038DE  0F30               	addlw	48
  6847  0038E0  EC27  F022         	call	_vscp_getGUID
  6848  0038E4  D015               	goto	L25
  6849  0038E6                     l9727:
  6850                           
  6851                           ; BSR set to: 0
  6852                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  6853  0038E6  5016               	movf	vscp_writeStdReg@reg,w,c
  6854  0038E8  0AA2               	xorlw	162
  6855  0038EA  E1D6               	bnz	l9711
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  6859  0038EC  5010               	movf	vscp_writeStdReg@value,w,c
  6860  0038EE  0A55               	xorlw	85
  6861  0038F0  E104               	bnz	l9735
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  6865  0038F2  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
  6866  0038F4  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  6867                           
  6868                           ; BSR set to: 0
  6869                           ;vscp_firmware.c: 771: rv = 0x55;
  6870  0038F6  0E55               	movlw	85
  6871  0038F8  D00B               	goto	L25
  6872  0038FA                     l9735:
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  6876  0038FA  5010               	movf	vscp_writeStdReg@value,w,c
  6877  0038FC  0AAA               	xorlw	170
  6878  0038FE  E10B               	bnz	l9745
  6879                           
  6880                           ; BSR set to: 0
  6881                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  6882  003900  0EE8               	movlw	232
  6883  003902  5D84               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  6884  003904  0E03               	movlw	3
  6885  003906  5985               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  6886  003908  E205               	bc	l1197
  6887                           
  6888                           ; BSR set to: 0
  6889                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  6890  00390A  EC6A  F022         	call	_vscp_restoreDefaults	;wreg free
  6891                           
  6892                           ;vscp_firmware.c: 776: rv = 0xaa;
  6893  00390E  0EAA               	movlw	170
  6894  003910                     L25:
  6895  003910  6E15               	movwf	vscp_writeStdReg@rv,c
  6896                           
  6897                           ;vscp_firmware.c: 777: }
  6898  003912  D001               	goto	l9745
  6899  003914                     l1197:
  6900                           
  6901                           ; BSR set to: 0
  6902                           ;vscp_firmware.c: 778: else {
  6903                           ;vscp_firmware.c: 779: rv = 0;
  6904  003914  6A15               	clrf	vscp_writeStdReg@rv,c
  6905  003916                     l9745:
  6906                           
  6907                           ;vscp_firmware.c: 787: }
  6908                           ;vscp_firmware.c: 789: return rv;
  6909  003916  5015               	movf	vscp_writeStdReg@rv,w,c
  6910  003918  0012               	return	
  6911  00391A                     __end_of_vscp_writeStdReg:
  6912                           	opt stack 0
  6913                           tblptru	equ	0xFF8
  6914                           prodh	equ	0xFF4
  6915                           prodl	equ	0xFF3
  6916                           postinc0	equ	0xFEE
  6917                           wreg	equ	0xFE8
  6918                           indf2	equ	0xFDF
  6919                           postinc2	equ	0xFDE
  6920                           postdec2	equ	0xFDD
  6921                           fsr2h	equ	0xFDA
  6922                           fsr2l	equ	0xFD9
  6923                           status	equ	0xFD8
  6924                           
  6925 ;; *************** function _vscp_restoreDefaults *****************
  6926 ;; Defined at:
  6927 ;;		line 2560 in file "../main.c"
  6928 ;; Parameters:    Size  Location     Type
  6929 ;;		None
  6930 ;; Auto vars:     Size  Location     Type
  6931 ;;		None
  6932 ;; Return value:  Size  Location     Type
  6933 ;;		None               void
  6934 ;; Registers used:
  6935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6936 ;; Tracked objects:
  6937 ;;		On entry : F/0
  6938 ;;		On exit  : 0/0
  6939 ;;		Unchanged: 0/0
  6940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6941 ;;      Params:         0       0       0       0       0       0       0
  6942 ;;      Locals:         0       0       0       0       0       0       0
  6943 ;;      Temps:          0       0       0       0       0       0       0
  6944 ;;      Totals:         0       0       0       0       0       0       0
  6945 ;;Total ram usage:        0 bytes
  6946 ;; Hardware stack levels used:    1
  6947 ;; Hardware stack levels required when called:    4
  6948 ;; This function calls:
  6949 ;;		_init_app_eeprom
  6950 ;;		_init_app_ram
  6951 ;; This function is called by:
  6952 ;;		_vscp_writeStdReg
  6953 ;; This function uses a non-reentrant model
  6954 ;;
  6955                           
  6956                           	psect	text19
  6957  0044D4                     __ptext19:
  6958                           	opt stack 0
  6959  0044D4                     _vscp_restoreDefaults:
  6960                           	opt stack 24
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;main.c: 2561: init_app_eeprom();
  6964                           
  6965                           ;incstack = 0
  6966                           ;incstack = 0
  6967  0044D4  ECD9  F00E         	call	_init_app_eeprom	;wreg free
  6968                           
  6969                           ;main.c: 2562: init_app_ram();
  6970  0044D8  EF83  F01B         	goto	_init_app_ram	;wreg free
  6971  0044DC                     __end_of_vscp_restoreDefaults:
  6972                           	opt stack 0
  6973                           tblptru	equ	0xFF8
  6974                           prodh	equ	0xFF4
  6975                           prodl	equ	0xFF3
  6976                           postinc0	equ	0xFEE
  6977                           wreg	equ	0xFE8
  6978                           indf2	equ	0xFDF
  6979                           postinc2	equ	0xFDE
  6980                           postdec2	equ	0xFDD
  6981                           fsr2h	equ	0xFDA
  6982                           fsr2l	equ	0xFD9
  6983                           status	equ	0xFD8
  6984                           
  6985 ;; *************** function _init_app_eeprom *****************
  6986 ;; Defined at:
  6987 ;;		line 478 in file "../main.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;		None
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;  j               1   14[COMRAM] unsigned char 
  6992 ;;  i               1   13[COMRAM] unsigned char 
  6993 ;; Return value:  Size  Location     Type
  6994 ;;		None               void
  6995 ;; Registers used:
  6996 ;;		wreg, status,2, status,0, cstack
  6997 ;; Tracked objects:
  6998 ;;		On entry : 0/0
  6999 ;;		On exit  : 0/0
  7000 ;;		Unchanged: 0/0
  7001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7002 ;;      Params:         0       0       0       0       0       0       0
  7003 ;;      Locals:         2       0       0       0       0       0       0
  7004 ;;      Temps:          2       0       0       0       0       0       0
  7005 ;;      Totals:         4       0       0       0       0       0       0
  7006 ;;Total ram usage:        4 bytes
  7007 ;; Hardware stack levels used:    1
  7008 ;; Hardware stack levels required when called:    3
  7009 ;; This function calls:
  7010 ;;		_Busy_eep
  7011 ;;		_Write_b_eep
  7012 ;; This function is called by:
  7013 ;;		_main
  7014 ;;		_vscp_restoreDefaults
  7015 ;; This function uses a non-reentrant model
  7016 ;;
  7017                           
  7018                           	psect	text20
  7019  001DB2                     __ptext20:
  7020                           	opt stack 0
  7021  001DB2                     _init_app_eeprom:
  7022                           	opt stack 24
  7023                           
  7024                           ;main.c: 479: unsigned char i, j;
  7025                           ;main.c: 481: (Busy_eep(), Write_b_eep(0x43 + 0,0));
  7026                           
  7027                           ;incstack = 0
  7028                           ;incstack = 0
  7029  001DB2  EC6E  F022         	call	_Busy_eep	;wreg free
  7030  001DB6  6A09               	clrf	?_Write_b_eep+1,c
  7031  001DB8  0E43               	movlw	67
  7032  001DBA  6E08               	movwf	?_Write_b_eep,c
  7033  001DBC  0E00               	movlw	0
  7034  001DBE  6A0A               	clrf	?_Write_b_eep+2,c
  7035  001DC0  EC53  F020         	call	_Write_b_eep	;wreg free
  7036                           
  7037                           ;main.c: 482: (Busy_eep(), Write_b_eep(0x43 + 1,0));
  7038  001DC4  EC6E  F022         	call	_Busy_eep	;wreg free
  7039  001DC8  6A09               	clrf	?_Write_b_eep+1,c
  7040  001DCA  0E44               	movlw	68
  7041  001DCC  6E08               	movwf	?_Write_b_eep,c
  7042  001DCE  0E00               	movlw	0
  7043  001DD0  6A0A               	clrf	?_Write_b_eep+2,c
  7044  001DD2  EC53  F020         	call	_Write_b_eep	;wreg free
  7045                           
  7046                           ;main.c: 484: (Busy_eep(), Write_b_eep(0x43 + 10,0x08 | 0x10 | 0x80));
  7047  001DD6  EC6E  F022         	call	_Busy_eep	;wreg free
  7048  001DDA  6A09               	clrf	?_Write_b_eep+1,c
  7049  001DDC  0E4D               	movlw	77
  7050  001DDE  6E08               	movwf	?_Write_b_eep,c
  7051  001DE0  0E98               	movlw	152
  7052  001DE2  6E0A               	movwf	?_Write_b_eep+2,c
  7053  001DE4  EC53  F020         	call	_Write_b_eep	;wreg free
  7054                           
  7055                           ;main.c: 489: (Busy_eep(), Write_b_eep(0x43 + 11,0x08 | 0x10 | 0x80));
  7056  001DE8  EC6E  F022         	call	_Busy_eep	;wreg free
  7057  001DEC  6A09               	clrf	?_Write_b_eep+1,c
  7058  001DEE  0E4E               	movlw	78
  7059  001DF0  6E08               	movwf	?_Write_b_eep,c
  7060  001DF2  0E98               	movlw	152
  7061  001DF4  6E0A               	movwf	?_Write_b_eep+2,c
  7062  001DF6  EC53  F020         	call	_Write_b_eep	;wreg free
  7063                           
  7064                           ;main.c: 494: (Busy_eep(), Write_b_eep(0x43 + 12,0x08 | 0x10 | 0x80));
  7065  001DFA  EC6E  F022         	call	_Busy_eep	;wreg free
  7066  001DFE  6A09               	clrf	?_Write_b_eep+1,c
  7067  001E00  0E4F               	movlw	79
  7068  001E02  6E08               	movwf	?_Write_b_eep,c
  7069  001E04  0E98               	movlw	152
  7070  001E06  6E0A               	movwf	?_Write_b_eep+2,c
  7071  001E08  EC53  F020         	call	_Write_b_eep	;wreg free
  7072                           
  7073                           ;main.c: 499: (Busy_eep(), Write_b_eep(0x43 + 13,0x08 | 0x10 | 0x80));
  7074  001E0C  EC6E  F022         	call	_Busy_eep	;wreg free
  7075  001E10  6A09               	clrf	?_Write_b_eep+1,c
  7076  001E12  0E50               	movlw	80
  7077  001E14  6E08               	movwf	?_Write_b_eep,c
  7078  001E16  0E98               	movlw	152
  7079  001E18  6E0A               	movwf	?_Write_b_eep+2,c
  7080  001E1A  EC53  F020         	call	_Write_b_eep	;wreg free
  7081                           
  7082                           ;main.c: 504: (Busy_eep(), Write_b_eep(0x43 + 14,0x08 | 0x10 | 0x80));
  7083  001E1E  EC6E  F022         	call	_Busy_eep	;wreg free
  7084  001E22  6A09               	clrf	?_Write_b_eep+1,c
  7085  001E24  0E51               	movlw	81
  7086  001E26  6E08               	movwf	?_Write_b_eep,c
  7087  001E28  0E98               	movlw	152
  7088  001E2A  6E0A               	movwf	?_Write_b_eep+2,c
  7089  001E2C  EC53  F020         	call	_Write_b_eep	;wreg free
  7090                           
  7091                           ;main.c: 509: (Busy_eep(), Write_b_eep(0x43 + 15,0x08 | 0x10 | 0x80));
  7092  001E30  EC6E  F022         	call	_Busy_eep	;wreg free
  7093  001E34  6A09               	clrf	?_Write_b_eep+1,c
  7094  001E36  0E52               	movlw	82
  7095  001E38  6E08               	movwf	?_Write_b_eep,c
  7096  001E3A  0E98               	movlw	152
  7097  001E3C  6E0A               	movwf	?_Write_b_eep+2,c
  7098  001E3E  EC53  F020         	call	_Write_b_eep	;wreg free
  7099                           
  7100                           ;main.c: 514: (Busy_eep(), Write_b_eep(0x43 + 16,0x08 | 0x10 | 0x80));
  7101  001E42  EC6E  F022         	call	_Busy_eep	;wreg free
  7102  001E46  6A09               	clrf	?_Write_b_eep+1,c
  7103  001E48  0E53               	movlw	83
  7104  001E4A  6E08               	movwf	?_Write_b_eep,c
  7105  001E4C  0E98               	movlw	152
  7106  001E4E  6E0A               	movwf	?_Write_b_eep+2,c
  7107  001E50  EC53  F020         	call	_Write_b_eep	;wreg free
  7108                           
  7109                           ;main.c: 519: (Busy_eep(), Write_b_eep(0x43 + 17,0x08 | 0x10 | 0x80));
  7110  001E54  EC6E  F022         	call	_Busy_eep	;wreg free
  7111  001E58  6A09               	clrf	?_Write_b_eep+1,c
  7112  001E5A  0E54               	movlw	84
  7113  001E5C  6E08               	movwf	?_Write_b_eep,c
  7114  001E5E  0E98               	movlw	152
  7115  001E60  6E0A               	movwf	?_Write_b_eep+2,c
  7116  001E62  EC53  F020         	call	_Write_b_eep	;wreg free
  7117                           
  7118                           ;main.c: 524: (Busy_eep(), Write_b_eep(0x43 + 18,0));
  7119  001E66  EC6E  F022         	call	_Busy_eep	;wreg free
  7120  001E6A  6A09               	clrf	?_Write_b_eep+1,c
  7121  001E6C  0E55               	movlw	85
  7122  001E6E  6E08               	movwf	?_Write_b_eep,c
  7123  001E70  0E00               	movlw	0
  7124  001E72  6A0A               	clrf	?_Write_b_eep+2,c
  7125  001E74  EC53  F020         	call	_Write_b_eep	;wreg free
  7126                           
  7127                           ;main.c: 525: (Busy_eep(), Write_b_eep(0x43 + 19,0));
  7128  001E78  EC6E  F022         	call	_Busy_eep	;wreg free
  7129  001E7C  6A09               	clrf	?_Write_b_eep+1,c
  7130  001E7E  0E56               	movlw	86
  7131  001E80  6E08               	movwf	?_Write_b_eep,c
  7132  001E82  0E00               	movlw	0
  7133  001E84  6A0A               	clrf	?_Write_b_eep+2,c
  7134  001E86  EC53  F020         	call	_Write_b_eep	;wreg free
  7135                           
  7136                           ;main.c: 526: (Busy_eep(), Write_b_eep(0x43 + 20,0));
  7137  001E8A  EC6E  F022         	call	_Busy_eep	;wreg free
  7138  001E8E  6A09               	clrf	?_Write_b_eep+1,c
  7139  001E90  0E57               	movlw	87
  7140  001E92  6E08               	movwf	?_Write_b_eep,c
  7141  001E94  0E00               	movlw	0
  7142  001E96  6A0A               	clrf	?_Write_b_eep+2,c
  7143  001E98  EC53  F020         	call	_Write_b_eep	;wreg free
  7144                           
  7145                           ;main.c: 527: (Busy_eep(), Write_b_eep(0x43 + 21,0));
  7146  001E9C  EC6E  F022         	call	_Busy_eep	;wreg free
  7147  001EA0  6A09               	clrf	?_Write_b_eep+1,c
  7148  001EA2  0E58               	movlw	88
  7149  001EA4  6E08               	movwf	?_Write_b_eep,c
  7150  001EA6  0E00               	movlw	0
  7151  001EA8  6A0A               	clrf	?_Write_b_eep+2,c
  7152  001EAA  EC53  F020         	call	_Write_b_eep	;wreg free
  7153                           
  7154                           ;main.c: 528: (Busy_eep(), Write_b_eep(0x43 + 22,0));
  7155  001EAE  EC6E  F022         	call	_Busy_eep	;wreg free
  7156  001EB2  6A09               	clrf	?_Write_b_eep+1,c
  7157  001EB4  0E59               	movlw	89
  7158  001EB6  6E08               	movwf	?_Write_b_eep,c
  7159  001EB8  0E00               	movlw	0
  7160  001EBA  6A0A               	clrf	?_Write_b_eep+2,c
  7161  001EBC  EC53  F020         	call	_Write_b_eep	;wreg free
  7162                           
  7163                           ;main.c: 529: (Busy_eep(), Write_b_eep(0x43 + 23,0));
  7164  001EC0  EC6E  F022         	call	_Busy_eep	;wreg free
  7165  001EC4  6A09               	clrf	?_Write_b_eep+1,c
  7166  001EC6  0E5A               	movlw	90
  7167  001EC8  6E08               	movwf	?_Write_b_eep,c
  7168  001ECA  0E00               	movlw	0
  7169  001ECC  6A0A               	clrf	?_Write_b_eep+2,c
  7170  001ECE  EC53  F020         	call	_Write_b_eep	;wreg free
  7171                           
  7172                           ;main.c: 530: (Busy_eep(), Write_b_eep(0x43 + 24,0));
  7173  001ED2  EC6E  F022         	call	_Busy_eep	;wreg free
  7174  001ED6  6A09               	clrf	?_Write_b_eep+1,c
  7175  001ED8  0E5B               	movlw	91
  7176  001EDA  6E08               	movwf	?_Write_b_eep,c
  7177  001EDC  0E00               	movlw	0
  7178  001EDE  6A0A               	clrf	?_Write_b_eep+2,c
  7179  001EE0  EC53  F020         	call	_Write_b_eep	;wreg free
  7180                           
  7181                           ;main.c: 531: (Busy_eep(), Write_b_eep(0x43 + 25,0));
  7182  001EE4  EC6E  F022         	call	_Busy_eep	;wreg free
  7183  001EE8  6A09               	clrf	?_Write_b_eep+1,c
  7184  001EEA  0E5C               	movlw	92
  7185  001EEC  6E08               	movwf	?_Write_b_eep,c
  7186  001EEE  0E00               	movlw	0
  7187  001EF0  6A0A               	clrf	?_Write_b_eep+2,c
  7188  001EF2  EC53  F020         	call	_Write_b_eep	;wreg free
  7189                           
  7190                           ;main.c: 532: (Busy_eep(), Write_b_eep(0x43 + 26,0));
  7191  001EF6  EC6E  F022         	call	_Busy_eep	;wreg free
  7192  001EFA  6A09               	clrf	?_Write_b_eep+1,c
  7193  001EFC  0E5D               	movlw	93
  7194  001EFE  6E08               	movwf	?_Write_b_eep,c
  7195  001F00  0E00               	movlw	0
  7196  001F02  6A0A               	clrf	?_Write_b_eep+2,c
  7197  001F04  EC53  F020         	call	_Write_b_eep	;wreg free
  7198                           
  7199                           ;main.c: 533: (Busy_eep(), Write_b_eep(0x43 + 27,0));
  7200  001F08  EC6E  F022         	call	_Busy_eep	;wreg free
  7201  001F0C  6A09               	clrf	?_Write_b_eep+1,c
  7202  001F0E  0E5E               	movlw	94
  7203  001F10  6E08               	movwf	?_Write_b_eep,c
  7204  001F12  0E00               	movlw	0
  7205  001F14  6A0A               	clrf	?_Write_b_eep+2,c
  7206  001F16  EC53  F020         	call	_Write_b_eep	;wreg free
  7207                           
  7208                           ;main.c: 534: (Busy_eep(), Write_b_eep(0x43 + 28,0));
  7209  001F1A  EC6E  F022         	call	_Busy_eep	;wreg free
  7210  001F1E  6A09               	clrf	?_Write_b_eep+1,c
  7211  001F20  0E5F               	movlw	95
  7212  001F22  6E08               	movwf	?_Write_b_eep,c
  7213  001F24  0E00               	movlw	0
  7214  001F26  6A0A               	clrf	?_Write_b_eep+2,c
  7215  001F28  EC53  F020         	call	_Write_b_eep	;wreg free
  7216                           
  7217                           ;main.c: 535: (Busy_eep(), Write_b_eep(0x43 + 29,0));
  7218  001F2C  EC6E  F022         	call	_Busy_eep	;wreg free
  7219  001F30  6A09               	clrf	?_Write_b_eep+1,c
  7220  001F32  0E60               	movlw	96
  7221  001F34  6E08               	movwf	?_Write_b_eep,c
  7222  001F36  0E00               	movlw	0
  7223  001F38  6A0A               	clrf	?_Write_b_eep+2,c
  7224  001F3A  EC53  F020         	call	_Write_b_eep	;wreg free
  7225                           
  7226                           ;main.c: 536: (Busy_eep(), Write_b_eep(0x43 + 30,0));
  7227  001F3E  EC6E  F022         	call	_Busy_eep	;wreg free
  7228  001F42  6A09               	clrf	?_Write_b_eep+1,c
  7229  001F44  0E61               	movlw	97
  7230  001F46  6E08               	movwf	?_Write_b_eep,c
  7231  001F48  0E00               	movlw	0
  7232  001F4A  6A0A               	clrf	?_Write_b_eep+2,c
  7233  001F4C  EC53  F020         	call	_Write_b_eep	;wreg free
  7234                           
  7235                           ;main.c: 537: (Busy_eep(), Write_b_eep(0x43 + 31,0));
  7236  001F50  EC6E  F022         	call	_Busy_eep	;wreg free
  7237  001F54  6A09               	clrf	?_Write_b_eep+1,c
  7238  001F56  0E62               	movlw	98
  7239  001F58  6E08               	movwf	?_Write_b_eep,c
  7240  001F5A  0E00               	movlw	0
  7241  001F5C  6A0A               	clrf	?_Write_b_eep+2,c
  7242  001F5E  EC53  F020         	call	_Write_b_eep	;wreg free
  7243                           
  7244                           ;main.c: 538: (Busy_eep(), Write_b_eep(0x43 + 32,0));
  7245  001F62  EC6E  F022         	call	_Busy_eep	;wreg free
  7246  001F66  6A09               	clrf	?_Write_b_eep+1,c
  7247  001F68  0E63               	movlw	99
  7248  001F6A  6E08               	movwf	?_Write_b_eep,c
  7249  001F6C  0E00               	movlw	0
  7250  001F6E  6A0A               	clrf	?_Write_b_eep+2,c
  7251  001F70  EC53  F020         	call	_Write_b_eep	;wreg free
  7252                           
  7253                           ;main.c: 539: (Busy_eep(), Write_b_eep(0x43 + 33,0));
  7254  001F74  EC6E  F022         	call	_Busy_eep	;wreg free
  7255  001F78  6A09               	clrf	?_Write_b_eep+1,c
  7256  001F7A  0E64               	movlw	100
  7257  001F7C  6E08               	movwf	?_Write_b_eep,c
  7258  001F7E  0E00               	movlw	0
  7259  001F80  6A0A               	clrf	?_Write_b_eep+2,c
  7260  001F82  EC53  F020         	call	_Write_b_eep	;wreg free
  7261                           
  7262                           ;main.c: 541: (Busy_eep(), Write_b_eep(0x43 + 34,0));
  7263  001F86  EC6E  F022         	call	_Busy_eep	;wreg free
  7264  001F8A  6A09               	clrf	?_Write_b_eep+1,c
  7265  001F8C  0E65               	movlw	101
  7266  001F8E  6E08               	movwf	?_Write_b_eep,c
  7267  001F90  0E00               	movlw	0
  7268  001F92  6A0A               	clrf	?_Write_b_eep+2,c
  7269  001F94  EC53  F020         	call	_Write_b_eep	;wreg free
  7270                           
  7271                           ;main.c: 542: (Busy_eep(), Write_b_eep(0x43 + 35,0));
  7272  001F98  EC6E  F022         	call	_Busy_eep	;wreg free
  7273  001F9C  6A09               	clrf	?_Write_b_eep+1,c
  7274  001F9E  0E66               	movlw	102
  7275  001FA0  6E08               	movwf	?_Write_b_eep,c
  7276  001FA2  0E00               	movlw	0
  7277  001FA4  6A0A               	clrf	?_Write_b_eep+2,c
  7278  001FA6  EC53  F020         	call	_Write_b_eep	;wreg free
  7279                           
  7280                           ;main.c: 543: (Busy_eep(), Write_b_eep(0x43 + 36,0));
  7281  001FAA  EC6E  F022         	call	_Busy_eep	;wreg free
  7282  001FAE  6A09               	clrf	?_Write_b_eep+1,c
  7283  001FB0  0E67               	movlw	103
  7284  001FB2  6E08               	movwf	?_Write_b_eep,c
  7285  001FB4  0E00               	movlw	0
  7286  001FB6  6A0A               	clrf	?_Write_b_eep+2,c
  7287  001FB8  EC53  F020         	call	_Write_b_eep	;wreg free
  7288                           
  7289                           ;main.c: 544: (Busy_eep(), Write_b_eep(0x43 + 37,0));
  7290  001FBC  EC6E  F022         	call	_Busy_eep	;wreg free
  7291  001FC0  6A09               	clrf	?_Write_b_eep+1,c
  7292  001FC2  0E68               	movlw	104
  7293  001FC4  6E08               	movwf	?_Write_b_eep,c
  7294  001FC6  0E00               	movlw	0
  7295  001FC8  6A0A               	clrf	?_Write_b_eep+2,c
  7296  001FCA  EC53  F020         	call	_Write_b_eep	;wreg free
  7297                           
  7298                           ;main.c: 545: (Busy_eep(), Write_b_eep(0x43 + 38,0));
  7299  001FCE  EC6E  F022         	call	_Busy_eep	;wreg free
  7300  001FD2  6A09               	clrf	?_Write_b_eep+1,c
  7301  001FD4  0E69               	movlw	105
  7302  001FD6  6E08               	movwf	?_Write_b_eep,c
  7303  001FD8  0E00               	movlw	0
  7304  001FDA  6A0A               	clrf	?_Write_b_eep+2,c
  7305  001FDC  EC53  F020         	call	_Write_b_eep	;wreg free
  7306                           
  7307                           ;main.c: 546: (Busy_eep(), Write_b_eep(0x43 + 39,0));
  7308  001FE0  EC6E  F022         	call	_Busy_eep	;wreg free
  7309  001FE4  6A09               	clrf	?_Write_b_eep+1,c
  7310  001FE6  0E6A               	movlw	106
  7311  001FE8  6E08               	movwf	?_Write_b_eep,c
  7312  001FEA  0E00               	movlw	0
  7313  001FEC  6A0A               	clrf	?_Write_b_eep+2,c
  7314  001FEE  EC53  F020         	call	_Write_b_eep	;wreg free
  7315                           
  7316                           ;main.c: 547: (Busy_eep(), Write_b_eep(0x43 + 40,0));
  7317  001FF2  EC6E  F022         	call	_Busy_eep	;wreg free
  7318  001FF6  6A09               	clrf	?_Write_b_eep+1,c
  7319  001FF8  0E6B               	movlw	107
  7320  001FFA  6E08               	movwf	?_Write_b_eep,c
  7321  001FFC  0E00               	movlw	0
  7322  001FFE  6A0A               	clrf	?_Write_b_eep+2,c
  7323  002000  EC53  F020         	call	_Write_b_eep	;wreg free
  7324                           
  7325                           ;main.c: 548: (Busy_eep(), Write_b_eep(0x43 + 41,0));
  7326  002004  EC6E  F022         	call	_Busy_eep	;wreg free
  7327  002008  6A09               	clrf	?_Write_b_eep+1,c
  7328  00200A  0E6C               	movlw	108
  7329  00200C  6E08               	movwf	?_Write_b_eep,c
  7330  00200E  0E00               	movlw	0
  7331  002010  6A0A               	clrf	?_Write_b_eep+2,c
  7332  002012  EC53  F020         	call	_Write_b_eep	;wreg free
  7333                           
  7334                           ;main.c: 549: (Busy_eep(), Write_b_eep(0x43 + 42,0));
  7335  002016  EC6E  F022         	call	_Busy_eep	;wreg free
  7336  00201A  6A09               	clrf	?_Write_b_eep+1,c
  7337  00201C  0E6D               	movlw	109
  7338  00201E  6E08               	movwf	?_Write_b_eep,c
  7339  002020  0E00               	movlw	0
  7340  002022  6A0A               	clrf	?_Write_b_eep+2,c
  7341  002024  EC53  F020         	call	_Write_b_eep	;wreg free
  7342                           
  7343                           ;main.c: 550: (Busy_eep(), Write_b_eep(0x43 + 43,0));
  7344  002028  EC6E  F022         	call	_Busy_eep	;wreg free
  7345  00202C  6A09               	clrf	?_Write_b_eep+1,c
  7346  00202E  0E6E               	movlw	110
  7347  002030  6E08               	movwf	?_Write_b_eep,c
  7348  002032  0E00               	movlw	0
  7349  002034  6A0A               	clrf	?_Write_b_eep+2,c
  7350  002036  EC53  F020         	call	_Write_b_eep	;wreg free
  7351                           
  7352                           ;main.c: 551: (Busy_eep(), Write_b_eep(0x43 + 44,0));
  7353  00203A  EC6E  F022         	call	_Busy_eep	;wreg free
  7354  00203E  6A09               	clrf	?_Write_b_eep+1,c
  7355  002040  0E6F               	movlw	111
  7356  002042  6E08               	movwf	?_Write_b_eep,c
  7357  002044  0E00               	movlw	0
  7358  002046  6A0A               	clrf	?_Write_b_eep+2,c
  7359  002048  EC53  F020         	call	_Write_b_eep	;wreg free
  7360                           
  7361                           ;main.c: 552: (Busy_eep(), Write_b_eep(0x43 + 45,0));
  7362  00204C  EC6E  F022         	call	_Busy_eep	;wreg free
  7363  002050  6A09               	clrf	?_Write_b_eep+1,c
  7364  002052  0E70               	movlw	112
  7365  002054  6E08               	movwf	?_Write_b_eep,c
  7366  002056  0E00               	movlw	0
  7367  002058  6A0A               	clrf	?_Write_b_eep+2,c
  7368  00205A  EC53  F020         	call	_Write_b_eep	;wreg free
  7369                           
  7370                           ;main.c: 553: (Busy_eep(), Write_b_eep(0x43 + 46,0));
  7371  00205E  EC6E  F022         	call	_Busy_eep	;wreg free
  7372  002062  6A09               	clrf	?_Write_b_eep+1,c
  7373  002064  0E71               	movlw	113
  7374  002066  6E08               	movwf	?_Write_b_eep,c
  7375  002068  0E00               	movlw	0
  7376  00206A  6A0A               	clrf	?_Write_b_eep+2,c
  7377  00206C  EC53  F020         	call	_Write_b_eep	;wreg free
  7378                           
  7379                           ;main.c: 554: (Busy_eep(), Write_b_eep(0x43 + 47,0));
  7380  002070  EC6E  F022         	call	_Busy_eep	;wreg free
  7381  002074  6A09               	clrf	?_Write_b_eep+1,c
  7382  002076  0E72               	movlw	114
  7383  002078  6E08               	movwf	?_Write_b_eep,c
  7384  00207A  0E00               	movlw	0
  7385  00207C  6A0A               	clrf	?_Write_b_eep+2,c
  7386  00207E  EC53  F020         	call	_Write_b_eep	;wreg free
  7387                           
  7388                           ;main.c: 555: (Busy_eep(), Write_b_eep(0x43 + 48,0));
  7389  002082  EC6E  F022         	call	_Busy_eep	;wreg free
  7390  002086  6A09               	clrf	?_Write_b_eep+1,c
  7391  002088  0E73               	movlw	115
  7392  00208A  6E08               	movwf	?_Write_b_eep,c
  7393  00208C  0E00               	movlw	0
  7394  00208E  6A0A               	clrf	?_Write_b_eep+2,c
  7395  002090  EC53  F020         	call	_Write_b_eep	;wreg free
  7396                           
  7397                           ;main.c: 556: (Busy_eep(), Write_b_eep(0x43 + 49,0));
  7398  002094  EC6E  F022         	call	_Busy_eep	;wreg free
  7399  002098  6A09               	clrf	?_Write_b_eep+1,c
  7400  00209A  0E74               	movlw	116
  7401  00209C  6E08               	movwf	?_Write_b_eep,c
  7402  00209E  0E00               	movlw	0
  7403  0020A0  6A0A               	clrf	?_Write_b_eep+2,c
  7404  0020A2  EC53  F020         	call	_Write_b_eep	;wreg free
  7405                           
  7406                           ;main.c: 558: (Busy_eep(), Write_b_eep(0x43 + 50,0));
  7407  0020A6  EC6E  F022         	call	_Busy_eep	;wreg free
  7408  0020AA  6A09               	clrf	?_Write_b_eep+1,c
  7409  0020AC  0E75               	movlw	117
  7410  0020AE  6E08               	movwf	?_Write_b_eep,c
  7411  0020B0  0E00               	movlw	0
  7412  0020B2  6A0A               	clrf	?_Write_b_eep+2,c
  7413  0020B4  EC53  F020         	call	_Write_b_eep	;wreg free
  7414                           
  7415                           ;main.c: 559: (Busy_eep(), Write_b_eep(0x43 + 51,0));
  7416  0020B8  EC6E  F022         	call	_Busy_eep	;wreg free
  7417  0020BC  6A09               	clrf	?_Write_b_eep+1,c
  7418  0020BE  0E76               	movlw	118
  7419  0020C0  6E08               	movwf	?_Write_b_eep,c
  7420  0020C2  0E00               	movlw	0
  7421  0020C4  6A0A               	clrf	?_Write_b_eep+2,c
  7422  0020C6  EC53  F020         	call	_Write_b_eep	;wreg free
  7423                           
  7424                           ;main.c: 560: (Busy_eep(), Write_b_eep(0x43 + 52,0));
  7425  0020CA  EC6E  F022         	call	_Busy_eep	;wreg free
  7426  0020CE  6A09               	clrf	?_Write_b_eep+1,c
  7427  0020D0  0E77               	movlw	119
  7428  0020D2  6E08               	movwf	?_Write_b_eep,c
  7429  0020D4  0E00               	movlw	0
  7430  0020D6  6A0A               	clrf	?_Write_b_eep+2,c
  7431  0020D8  EC53  F020         	call	_Write_b_eep	;wreg free
  7432                           
  7433                           ;main.c: 561: (Busy_eep(), Write_b_eep(0x43 + 53,0));
  7434  0020DC  EC6E  F022         	call	_Busy_eep	;wreg free
  7435  0020E0  6A09               	clrf	?_Write_b_eep+1,c
  7436  0020E2  0E78               	movlw	120
  7437  0020E4  6E08               	movwf	?_Write_b_eep,c
  7438  0020E6  0E00               	movlw	0
  7439  0020E8  6A0A               	clrf	?_Write_b_eep+2,c
  7440  0020EA  EC53  F020         	call	_Write_b_eep	;wreg free
  7441                           
  7442                           ;main.c: 562: (Busy_eep(), Write_b_eep(0x43 + 54,0));
  7443  0020EE  EC6E  F022         	call	_Busy_eep	;wreg free
  7444  0020F2  6A09               	clrf	?_Write_b_eep+1,c
  7445  0020F4  0E79               	movlw	121
  7446  0020F6  6E08               	movwf	?_Write_b_eep,c
  7447  0020F8  0E00               	movlw	0
  7448  0020FA  6A0A               	clrf	?_Write_b_eep+2,c
  7449  0020FC  EC53  F020         	call	_Write_b_eep	;wreg free
  7450                           
  7451                           ;main.c: 563: (Busy_eep(), Write_b_eep(0x43 + 55,0));
  7452  002100  EC6E  F022         	call	_Busy_eep	;wreg free
  7453  002104  6A09               	clrf	?_Write_b_eep+1,c
  7454  002106  0E7A               	movlw	122
  7455  002108  6E08               	movwf	?_Write_b_eep,c
  7456  00210A  0E00               	movlw	0
  7457  00210C  6A0A               	clrf	?_Write_b_eep+2,c
  7458  00210E  EC53  F020         	call	_Write_b_eep	;wreg free
  7459                           
  7460                           ;main.c: 564: (Busy_eep(), Write_b_eep(0x43 + 56,0));
  7461  002112  EC6E  F022         	call	_Busy_eep	;wreg free
  7462  002116  6A09               	clrf	?_Write_b_eep+1,c
  7463  002118  0E7B               	movlw	123
  7464  00211A  6E08               	movwf	?_Write_b_eep,c
  7465  00211C  0E00               	movlw	0
  7466  00211E  6A0A               	clrf	?_Write_b_eep+2,c
  7467  002120  EC53  F020         	call	_Write_b_eep	;wreg free
  7468                           
  7469                           ;main.c: 565: (Busy_eep(), Write_b_eep(0x43 + 57,0));
  7470  002124  EC6E  F022         	call	_Busy_eep	;wreg free
  7471  002128  6A09               	clrf	?_Write_b_eep+1,c
  7472  00212A  0E7C               	movlw	124
  7473  00212C  6E08               	movwf	?_Write_b_eep,c
  7474  00212E  0E00               	movlw	0
  7475  002130  6A0A               	clrf	?_Write_b_eep+2,c
  7476  002132  EC53  F020         	call	_Write_b_eep	;wreg free
  7477                           
  7478                           ;main.c: 566: (Busy_eep(), Write_b_eep(0x43 + 58,0));
  7479  002136  EC6E  F022         	call	_Busy_eep	;wreg free
  7480  00213A  6A09               	clrf	?_Write_b_eep+1,c
  7481  00213C  0E7D               	movlw	125
  7482  00213E  6E08               	movwf	?_Write_b_eep,c
  7483  002140  0E00               	movlw	0
  7484  002142  6A0A               	clrf	?_Write_b_eep+2,c
  7485  002144  EC53  F020         	call	_Write_b_eep	;wreg free
  7486                           
  7487                           ;main.c: 567: (Busy_eep(), Write_b_eep(0x43 + 59,0));
  7488  002148  EC6E  F022         	call	_Busy_eep	;wreg free
  7489  00214C  6A09               	clrf	?_Write_b_eep+1,c
  7490  00214E  0E7E               	movlw	126
  7491  002150  6E08               	movwf	?_Write_b_eep,c
  7492  002152  0E00               	movlw	0
  7493  002154  6A0A               	clrf	?_Write_b_eep+2,c
  7494  002156  EC53  F020         	call	_Write_b_eep	;wreg free
  7495                           
  7496                           ;main.c: 568: (Busy_eep(), Write_b_eep(0x43 + 60,0));
  7497  00215A  EC6E  F022         	call	_Busy_eep	;wreg free
  7498  00215E  6A09               	clrf	?_Write_b_eep+1,c
  7499  002160  0E7F               	movlw	127
  7500  002162  6E08               	movwf	?_Write_b_eep,c
  7501  002164  0E00               	movlw	0
  7502  002166  6A0A               	clrf	?_Write_b_eep+2,c
  7503  002168  EC53  F020         	call	_Write_b_eep	;wreg free
  7504                           
  7505                           ;main.c: 569: (Busy_eep(), Write_b_eep(0x43 + 61,0));
  7506  00216C  EC6E  F022         	call	_Busy_eep	;wreg free
  7507  002170  6A09               	clrf	?_Write_b_eep+1,c
  7508  002172  0E80               	movlw	128
  7509  002174  6E08               	movwf	?_Write_b_eep,c
  7510  002176  0E00               	movlw	0
  7511  002178  6A0A               	clrf	?_Write_b_eep+2,c
  7512  00217A  EC53  F020         	call	_Write_b_eep	;wreg free
  7513                           
  7514                           ;main.c: 570: (Busy_eep(), Write_b_eep(0x43 + 62,0));
  7515  00217E  EC6E  F022         	call	_Busy_eep	;wreg free
  7516  002182  6A09               	clrf	?_Write_b_eep+1,c
  7517  002184  0E81               	movlw	129
  7518  002186  6E08               	movwf	?_Write_b_eep,c
  7519  002188  0E00               	movlw	0
  7520  00218A  6A0A               	clrf	?_Write_b_eep+2,c
  7521  00218C  EC53  F020         	call	_Write_b_eep	;wreg free
  7522                           
  7523                           ;main.c: 571: (Busy_eep(), Write_b_eep(0x43 + 63,0));
  7524  002190  EC6E  F022         	call	_Busy_eep	;wreg free
  7525  002194  6A09               	clrf	?_Write_b_eep+1,c
  7526  002196  0E82               	movlw	130
  7527  002198  6E08               	movwf	?_Write_b_eep,c
  7528  00219A  0E00               	movlw	0
  7529  00219C  6A0A               	clrf	?_Write_b_eep+2,c
  7530  00219E  EC53  F020         	call	_Write_b_eep	;wreg free
  7531                           
  7532                           ;main.c: 572: (Busy_eep(), Write_b_eep(0x43 + 64,0));
  7533  0021A2  EC6E  F022         	call	_Busy_eep	;wreg free
  7534  0021A6  6A09               	clrf	?_Write_b_eep+1,c
  7535  0021A8  0E83               	movlw	131
  7536  0021AA  6E08               	movwf	?_Write_b_eep,c
  7537  0021AC  0E00               	movlw	0
  7538  0021AE  6A0A               	clrf	?_Write_b_eep+2,c
  7539  0021B0  EC53  F020         	call	_Write_b_eep	;wreg free
  7540                           
  7541                           ;main.c: 573: (Busy_eep(), Write_b_eep(0x43 + 65,0));
  7542  0021B4  EC6E  F022         	call	_Busy_eep	;wreg free
  7543  0021B8  6A09               	clrf	?_Write_b_eep+1,c
  7544  0021BA  0E84               	movlw	132
  7545  0021BC  6E08               	movwf	?_Write_b_eep,c
  7546  0021BE  0E00               	movlw	0
  7547  0021C0  6A0A               	clrf	?_Write_b_eep+2,c
  7548  0021C2  EC53  F020         	call	_Write_b_eep	;wreg free
  7549                           
  7550                           ;main.c: 577: for ( i = 0; i < 7; i++ ) {
  7551  0021C6  6A0E               	clrf	init_app_eeprom@i,c
  7552  0021C8                     l187:
  7553                           
  7554                           ;main.c: 578: for ( j = 0; j < 8; j++ ) {
  7555  0021C8  6A0F               	clrf	init_app_eeprom@j,c
  7556  0021CA                     l5011:
  7557                           
  7558                           ;main.c: 579: (Busy_eep(), Write_b_eep(0x43 + 72 + i * 8 + j,0));
  7559  0021CA  EC6E  F022         	call	_Busy_eep	;wreg free
  7560  0021CE  500F               	movf	init_app_eeprom@j,w,c
  7561  0021D0  C00E  F00C         	movff	init_app_eeprom@i,??_init_app_eeprom
  7562  0021D4  6A0D               	clrf	(??_init_app_eeprom+1)& (0+255),c
  7563  0021D6  90D8               	bcf	status,0,c
  7564  0021D8  360C               	rlcf	??_init_app_eeprom,f,c
  7565  0021DA  360D               	rlcf	??_init_app_eeprom+1,f,c
  7566  0021DC  90D8               	bcf	status,0,c
  7567  0021DE  360C               	rlcf	??_init_app_eeprom,f,c
  7568  0021E0  360D               	rlcf	??_init_app_eeprom+1,f,c
  7569  0021E2  90D8               	bcf	status,0,c
  7570  0021E4  360C               	rlcf	??_init_app_eeprom,f,c
  7571  0021E6  360D               	rlcf	??_init_app_eeprom+1,f,c
  7572  0021E8  260C               	addwf	??_init_app_eeprom,f,c
  7573  0021EA  0E00               	movlw	0
  7574  0021EC  220D               	addwfc	??_init_app_eeprom+1,f,c
  7575  0021EE  0E8B               	movlw	139
  7576  0021F0  240C               	addwf	??_init_app_eeprom,w,c
  7577  0021F2  6E08               	movwf	?_Write_b_eep,c
  7578  0021F4  0E00               	movlw	0
  7579  0021F6  200D               	addwfc	??_init_app_eeprom+1,w,c
  7580  0021F8  6E09               	movwf	?_Write_b_eep+1,c
  7581  0021FA  0E00               	movlw	0
  7582  0021FC  6A0A               	clrf	?_Write_b_eep+2,c
  7583  0021FE  EC53  F020         	call	_Write_b_eep	;wreg free
  7584  002202  2A0F               	incf	init_app_eeprom@j,f,c
  7585  002204  0E07               	movlw	7
  7586  002206  640F               	cpfsgt	init_app_eeprom@j,c
  7587  002208  D7E0               	goto	l5011
  7588  00220A  2A0E               	incf	init_app_eeprom@i,f,c
  7589  00220C  0E06               	movlw	6
  7590  00220E  640E               	cpfsgt	init_app_eeprom@i,c
  7591  002210  D7DB               	goto	l187
  7592  002212  0C06               	retlw	6
  7593  002214                     __end_of_init_app_eeprom:
  7594                           	opt stack 0
  7595                           tblptru	equ	0xFF8
  7596                           prodh	equ	0xFF4
  7597                           prodl	equ	0xFF3
  7598                           postinc0	equ	0xFEE
  7599                           wreg	equ	0xFE8
  7600                           indf2	equ	0xFDF
  7601                           postinc2	equ	0xFDE
  7602                           postdec2	equ	0xFDD
  7603                           fsr2h	equ	0xFDA
  7604                           fsr2l	equ	0xFD9
  7605                           status	equ	0xFD8
  7606                           
  7607 ;; *************** function _vscp_setUserID *****************
  7608 ;; Defined at:
  7609 ;;		line 2375 in file "../main.c"
  7610 ;; Parameters:    Size  Location     Type
  7611 ;;  idx             1    wreg     unsigned char 
  7612 ;;  data            1   11[COMRAM] unsigned char 
  7613 ;; Auto vars:     Size  Location     Type
  7614 ;;  idx             1   12[COMRAM] unsigned char 
  7615 ;; Return value:  Size  Location     Type
  7616 ;;		None               void
  7617 ;; Registers used:
  7618 ;;		wreg, status,2, status,0, cstack
  7619 ;; Tracked objects:
  7620 ;;		On entry : F/0
  7621 ;;		On exit  : 0/0
  7622 ;;		Unchanged: 0/0
  7623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7624 ;;      Params:         1       0       0       0       0       0       0
  7625 ;;      Locals:         1       0       0       0       0       0       0
  7626 ;;      Temps:          0       0       0       0       0       0       0
  7627 ;;      Totals:         2       0       0       0       0       0       0
  7628 ;;Total ram usage:        2 bytes
  7629 ;; Hardware stack levels used:    1
  7630 ;; Hardware stack levels required when called:    3
  7631 ;; This function calls:
  7632 ;;		_Busy_eep
  7633 ;;		_Write_b_eep
  7634 ;; This function is called by:
  7635 ;;		_vscp_writeStdReg
  7636 ;; This function uses a non-reentrant model
  7637 ;;
  7638                           
  7639                           	psect	text21
  7640  004362                     __ptext21:
  7641                           	opt stack 0
  7642  004362                     _vscp_setUserID:
  7643                           	opt stack 25
  7644                           
  7645                           ;incstack = 0
  7646                           ;incstack = 0
  7647                           ;vscp_setUserID@idx stored from wreg
  7648  004362  CFE8 F00D          	movff	wreg,vscp_setUserID@idx
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;main.c: 2376: (Busy_eep(), Write_b_eep(idx + 0x06,data));
  7652  004366  EC6E  F022         	call	_Busy_eep	;wreg free
  7653  00436A  0E06               	movlw	6
  7654  00436C  240D               	addwf	vscp_setUserID@idx,w,c
  7655  00436E  6E08               	movwf	?_Write_b_eep,c
  7656  004370  6A09               	clrf	?_Write_b_eep+1,c
  7657  004372  0E00               	movlw	0
  7658  004374  2209               	addwfc	?_Write_b_eep+1,f,c
  7659  004376  C00C  F00A         	movff	vscp_setUserID@data,?_Write_b_eep+2
  7660  00437A  EF53  F020         	goto	_Write_b_eep	;wreg free
  7661  00437E                     __end_of_vscp_setUserID:
  7662                           	opt stack 0
  7663                           tblptru	equ	0xFF8
  7664                           prodh	equ	0xFF4
  7665                           prodl	equ	0xFF3
  7666                           postinc0	equ	0xFEE
  7667                           wreg	equ	0xFE8
  7668                           indf2	equ	0xFDF
  7669                           postinc2	equ	0xFDE
  7670                           postdec2	equ	0xFDD
  7671                           fsr2h	equ	0xFDA
  7672                           fsr2l	equ	0xFD9
  7673                           status	equ	0xFD8
  7674                           
  7675 ;; *************** function _vscp_setManufacturerId *****************
  7676 ;; Defined at:
  7677 ;;		line 818 in file "../main.c"
  7678 ;; Parameters:    Size  Location     Type
  7679 ;;  idx             1    wreg     unsigned char 
  7680 ;;  data            1   11[COMRAM] unsigned char 
  7681 ;; Auto vars:     Size  Location     Type
  7682 ;;  idx             1   12[COMRAM] unsigned char 
  7683 ;; Return value:  Size  Location     Type
  7684 ;;		None               void
  7685 ;; Registers used:
  7686 ;;		wreg, status,2, status,0, cstack
  7687 ;; Tracked objects:
  7688 ;;		On entry : F/0
  7689 ;;		On exit  : 0/0
  7690 ;;		Unchanged: 0/0
  7691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7692 ;;      Params:         1       0       0       0       0       0       0
  7693 ;;      Locals:         1       0       0       0       0       0       0
  7694 ;;      Temps:          0       0       0       0       0       0       0
  7695 ;;      Totals:         2       0       0       0       0       0       0
  7696 ;;Total ram usage:        2 bytes
  7697 ;; Hardware stack levels used:    1
  7698 ;; Hardware stack levels required when called:    3
  7699 ;; This function calls:
  7700 ;;		_Busy_eep
  7701 ;;		_Write_b_eep
  7702 ;; This function is called by:
  7703 ;;		_vscp_writeStdReg
  7704 ;; This function uses a non-reentrant model
  7705 ;;
  7706                           
  7707                           	psect	text22
  7708  004208                     __ptext22:
  7709                           	opt stack 0
  7710  004208                     _vscp_setManufacturerId:
  7711                           	opt stack 25
  7712                           
  7713                           ;incstack = 0
  7714                           ;incstack = 0
  7715                           ;vscp_setManufacturerId@idx stored from wreg
  7716  004208  CFE8 F00D          	movff	wreg,vscp_setManufacturerId@idx
  7717                           
  7718                           ; BSR set to: 0
  7719                           ;main.c: 819: if ( idx>7 ) return;
  7720  00420C  0E07               	movlw	7
  7721  00420E  640D               	cpfsgt	vscp_setManufacturerId@idx,c
  7722  004210  D001               	goto	l5957
  7723  004212  D00C               	goto	l253
  7724  004214                     l5957:
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;main.c: 820: (Busy_eep(), Write_b_eep(0x0B + idx,data));
  7728  004214  EC6E  F022         	call	_Busy_eep	;wreg free
  7729  004218  0E0B               	movlw	11
  7730  00421A  240D               	addwf	vscp_setManufacturerId@idx,w,c
  7731  00421C  6E08               	movwf	?_Write_b_eep,c
  7732  00421E  6A09               	clrf	?_Write_b_eep+1,c
  7733  004220  0E00               	movlw	0
  7734  004222  2209               	addwfc	?_Write_b_eep+1,f,c
  7735  004224  C00C  F00A         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  7736  004228  EC53  F020         	call	_Write_b_eep	;wreg free
  7737  00422C                     l253:
  7738  00422C  0012               	return	
  7739  00422E                     __end_of_vscp_setManufacturerId:
  7740                           	opt stack 0
  7741                           tblptru	equ	0xFF8
  7742                           prodh	equ	0xFF4
  7743                           prodl	equ	0xFF3
  7744                           postinc0	equ	0xFEE
  7745                           wreg	equ	0xFE8
  7746                           indf2	equ	0xFDF
  7747                           postinc2	equ	0xFDE
  7748                           postdec2	equ	0xFDD
  7749                           fsr2h	equ	0xFDA
  7750                           fsr2l	equ	0xFD9
  7751                           status	equ	0xFD8
  7752                           
  7753 ;; *************** function _vscp_setGUID *****************
  7754 ;; Defined at:
  7755 ;;		line 806 in file "../main.c"
  7756 ;; Parameters:    Size  Location     Type
  7757 ;;  idx             1    wreg     unsigned char 
  7758 ;;  data            1   11[COMRAM] unsigned char 
  7759 ;; Auto vars:     Size  Location     Type
  7760 ;;  idx             1   12[COMRAM] unsigned char 
  7761 ;; Return value:  Size  Location     Type
  7762 ;;		None               void
  7763 ;; Registers used:
  7764 ;;		wreg, status,2, status,0, cstack
  7765 ;; Tracked objects:
  7766 ;;		On entry : F/0
  7767 ;;		On exit  : 0/0
  7768 ;;		Unchanged: 0/0
  7769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7770 ;;      Params:         1       0       0       0       0       0       0
  7771 ;;      Locals:         1       0       0       0       0       0       0
  7772 ;;      Temps:          0       0       0       0       0       0       0
  7773 ;;      Totals:         2       0       0       0       0       0       0
  7774 ;;Total ram usage:        2 bytes
  7775 ;; Hardware stack levels used:    1
  7776 ;; Hardware stack levels required when called:    3
  7777 ;; This function calls:
  7778 ;;		_Busy_eep
  7779 ;;		_Write_b_eep
  7780 ;; This function is called by:
  7781 ;;		_vscp_writeStdReg
  7782 ;; This function uses a non-reentrant model
  7783 ;;
  7784                           
  7785                           	psect	text23
  7786  00422E                     __ptext23:
  7787                           	opt stack 0
  7788  00422E                     _vscp_setGUID:
  7789                           	opt stack 25
  7790                           
  7791                           ;incstack = 0
  7792                           ;incstack = 0
  7793                           ;vscp_setGUID@idx stored from wreg
  7794  00422E  CFE8 F00D          	movff	wreg,vscp_setGUID@idx
  7795                           
  7796                           ; BSR set to: 0
  7797                           ;main.c: 807: if ( idx>15 ) return;
  7798  004232  0E0F               	movlw	15
  7799  004234  640D               	cpfsgt	vscp_setGUID@idx,c
  7800  004236  D001               	goto	l5949
  7801  004238  D00C               	goto	l249
  7802  00423A                     l5949:
  7803                           
  7804                           ; BSR set to: 0
  7805                           ;main.c: 808: (Busy_eep(), Write_b_eep(0x13 + idx,data));
  7806  00423A  EC6E  F022         	call	_Busy_eep	;wreg free
  7807  00423E  0E13               	movlw	19
  7808  004240  240D               	addwf	vscp_setGUID@idx,w,c
  7809  004242  6E08               	movwf	?_Write_b_eep,c
  7810  004244  6A09               	clrf	?_Write_b_eep+1,c
  7811  004246  0E00               	movlw	0
  7812  004248  2209               	addwfc	?_Write_b_eep+1,f,c
  7813  00424A  C00C  F00A         	movff	vscp_setGUID@data,?_Write_b_eep+2
  7814  00424E  EC53  F020         	call	_Write_b_eep	;wreg free
  7815  004252                     l249:
  7816  004252  0012               	return	
  7817  004254                     __end_of_vscp_setGUID:
  7818                           	opt stack 0
  7819                           tblptru	equ	0xFF8
  7820                           prodh	equ	0xFF4
  7821                           prodl	equ	0xFF3
  7822                           postinc0	equ	0xFEE
  7823                           wreg	equ	0xFE8
  7824                           indf2	equ	0xFDF
  7825                           postinc2	equ	0xFDE
  7826                           postdec2	equ	0xFDD
  7827                           fsr2h	equ	0xFDA
  7828                           fsr2l	equ	0xFD9
  7829                           status	equ	0xFD8
  7830                           
  7831 ;; *************** function _vscp_writeAppReg *****************
  7832 ;; Defined at:
  7833 ;;		line 970 in file "../main.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;  reg             1    wreg     unsigned char 
  7836 ;;  val             1   80[COMRAM] unsigned char 
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;  reg             1   29[BANK0 ] unsigned char 
  7839 ;;  val             1   26[BANK0 ] unsigned char 
  7840 ;;  bOn             1   28[BANK0 ] enum E15660
  7841 ;;  rv              1   27[BANK0 ] unsigned char 
  7842 ;;  bInfoEvent      1   25[BANK0 ] enum E15660
  7843 ;; Return value:  Size  Location     Type
  7844 ;;                  1    wreg      unsigned char 
  7845 ;; Registers used:
  7846 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7847 ;; Tracked objects:
  7848 ;;		On entry : F/0
  7849 ;;		On exit  : F/0
  7850 ;;		Unchanged: 0/0
  7851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7852 ;;      Params:         1       0       0       0       0       0       0
  7853 ;;      Locals:         0       5       0       0       0       0       0
  7854 ;;      Temps:          0       3       0       0       0       0       0
  7855 ;;      Totals:         1       8       0       0       0       0       0
  7856 ;;Total ram usage:        9 bytes
  7857 ;; Hardware stack levels used:    1
  7858 ;; Hardware stack levels required when called:    7
  7859 ;; This function calls:
  7860 ;;		_Busy_eep
  7861 ;;		_Write_b_eep
  7862 ;;		_Read_b_eep
  7863 ;;		_SendInformationEvent
  7864 ;;		_calculateSetFilterMask
  7865 ;; This function is called by:
  7866 ;;		_vscp_writeRegister
  7867 ;;		_vscp_handleProtocolEvent
  7868 ;; This function uses a non-reentrant model
  7869 ;;
  7870                           
  7871                           	psect	text24
  7872  0008DE                     __ptext24:
  7873                           	opt stack 0
  7874  0008DE                     _vscp_writeAppReg:
  7875                           	opt stack 21
  7876                           
  7877                           ;incstack = 0
  7878                           ;incstack = 0
  7879                           ;vscp_writeAppReg@reg stored from wreg
  7880  0008DE  CFE8 F0CE          	movff	wreg,vscp_writeAppReg@reg
  7881                           
  7882                           ; BSR set to: 0
  7883                           ;main.c: 971: uint8_t rv;
  7884                           ;main.c: 972: BOOL bInfoEvent = 0;
  7885  0008E2  6BCA               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7886                           
  7887                           ;main.c: 973: BOOL bOn = 0;
  7888  0008E4  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  7889                           
  7890                           ; BSR set to: 0
  7891                           ;main.c: 975: rv = ~val;
  7892  0008E6  1C51               	comf	vscp_writeAppReg@val,w,c
  7893  0008E8  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;main.c: 978: if ( reg == 0 ) {
  7897  0008EA  67CE               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  7898  0008EC  D010               	goto	l10485
  7899                           
  7900                           ; BSR set to: 0
  7901                           ;main.c: 979: (Busy_eep(), Write_b_eep(0x43 + 0,val));
  7902  0008EE  EC6E  F022         	call	_Busy_eep	;wreg free
  7903  0008F2  6A09               	clrf	?_Write_b_eep+1,c
  7904  0008F4  0E43               	movlw	67
  7905  0008F6  6E08               	movwf	?_Write_b_eep,c
  7906  0008F8  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  7907  0008FC  EC53  F020         	call	_Write_b_eep	;wreg free
  7908                           
  7909                           ;main.c: 980: rv = Read_b_eep(0x43 + 0);
  7910  000900  6A09               	clrf	?_Read_b_eep+1,c
  7911  000902  0E43               	movlw	67
  7912  000904  6E08               	movwf	?_Read_b_eep,c
  7913  000906  EC3A  F022         	call	_Read_b_eep	;wreg free
  7914  00090A  EF32  F009         	goto	L27
  7915  00090E                     l10485:
  7916                           
  7917                           ; BSR set to: 0
  7918                           ;main.c: 982: else if ( reg == 1 ) {
  7919  00090E  05CE               	decf	vscp_writeAppReg@reg& (0+255),w,b
  7920  000910  E110               	bnz	l10493
  7921                           
  7922                           ; BSR set to: 0
  7923                           ;main.c: 984: (Busy_eep(), Write_b_eep(0x43 + 1,val));
  7924  000912  EC6E  F022         	call	_Busy_eep	;wreg free
  7925  000916  6A09               	clrf	?_Write_b_eep+1,c
  7926  000918  0E44               	movlw	68
  7927  00091A  6E08               	movwf	?_Write_b_eep,c
  7928  00091C  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  7929  000920  EC53  F020         	call	_Write_b_eep	;wreg free
  7930                           
  7931                           ;main.c: 985: rv = Read_b_eep(0x43 + 1);
  7932  000924  6A09               	clrf	?_Read_b_eep+1,c
  7933  000926  0E44               	movlw	68
  7934  000928  6E08               	movwf	?_Read_b_eep,c
  7935  00092A  EC3A  F022         	call	_Read_b_eep	;wreg free
  7936  00092E  EF32  F009         	goto	L27
  7937  000932                     l10493:
  7938                           
  7939                           ; BSR set to: 0
  7940                           ;main.c: 988: else if ( (reg >= 2) && (reg <= 9) ) {
  7941  000932  0E01               	movlw	1
  7942  000934  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  7943  000936  D185               	goto	l10645
  7944                           
  7945                           ; BSR set to: 0
  7946  000938  0E0A               	movlw	10
  7947  00093A  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  7948  00093C  D182               	goto	l10645
  7949                           
  7950                           ; BSR set to: 0
  7951                           ;main.c: 990: if ( Read_b_eep(0x43 + 10 + reg - 2) &
  7952                           ;main.c: 992: 0x80 ) {
  7953  00093E  0E4B               	movlw	75
  7954  000940  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  7955  000942  6E08               	movwf	?_Read_b_eep,c
  7956  000944  6A09               	clrf	?_Read_b_eep+1,c
  7957  000946  0E00               	movlw	0
  7958  000948  2209               	addwfc	?_Read_b_eep+1,f,c
  7959  00094A  EC3A  F022         	call	_Read_b_eep	;wreg free
  7960  00094E  0100               	movlb	0	; () banked
  7961  000950  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  7962  000952  BFC7               	btfsc	??_vscp_writeAppReg& (0+255),7,b
  7963  000954  D161               	goto	l10643
  7964  000956  EF4B  F009         	goto	l10905
  7965  00095A                     l10501:
  7966                           
  7967                           ; BSR set to: 0
  7968                           ;main.c: 999: bInfoEvent = 1;
  7969  00095A  0E01               	movlw	1
  7970  00095C  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7971                           
  7972                           ; BSR set to: 0
  7973                           ;main.c: 1001: if ( 1 == val ) {
  7974  00095E  0451               	decf	vscp_writeAppReg@val,w,c
  7975  000960  E128               	bnz	l306
  7976                           
  7977                           ; BSR set to: 0
  7978                           ;main.c: 1003: LATBbits.LATB4 = 1;
  7979  000962  888A               	bsf	3978,4,c	;volatile
  7980                           
  7981                           ; BSR set to: 0
  7982                           ;main.c: 1004: rv = LATBbits.LATB4;
  7983  000964  0E00               	movlw	0
  7984  000966  B88A               	btfsc	3978,4,c	;volatile
  7985  000968  0E01               	movlw	1
  7986  00096A  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  7987                           
  7988                           ; BSR set to: 0
  7989                           ;main.c: 1005: bOn = 1;
  7990  00096C  0E01               	movlw	1
  7991  00096E  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  7992                           
  7993                           ; BSR set to: 0
  7994                           ;main.c: 1008: if ( Read_b_eep(0x43 + 10) & 0x04 ) {
  7995  000970  6A09               	clrf	?_Read_b_eep+1,c
  7996  000972  0E4D               	movlw	77
  7997  000974  6E08               	movwf	?_Read_b_eep,c
  7998  000976  EC3A  F022         	call	_Read_b_eep	;wreg free
  7999  00097A  0100               	movlb	0	; () banked
  8000  00097C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8001  00097E  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8002  000980  EF4B  F009         	goto	l10905
  8003  000984                     l10513:
  8004                           
  8005                           ; BSR set to: 0
  8006                           ;main.c: 1009: relay_protection_timer[ 0 ] =
  8007                           ;main.c: 1010: Read_b_eep(0x43 + 34) * 256 +
  8008                           ;main.c: 1011: Read_b_eep(0x43 + 35);
  8009  000984  6A09               	clrf	?_Read_b_eep+1,c
  8010  000986  0E66               	movlw	102
  8011  000988  6E08               	movwf	?_Read_b_eep,c
  8012  00098A  EC3A  F022         	call	_Read_b_eep	;wreg free
  8013  00098E  0100               	movlb	0	; () banked
  8014  000990  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8015  000992  6A09               	clrf	?_Read_b_eep+1,c
  8016  000994  0E65               	movlw	101
  8017  000996  6E08               	movwf	?_Read_b_eep,c
  8018  000998  EC3A  F022         	call	_Read_b_eep	;wreg free
  8019  00099C  0100               	movlb	0	; () banked
  8020  00099E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8021  0009A0  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8022  0009A2  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8023  0009A4  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8024  0009A6  6F60               	movwf	_relay_protection_timer& (0+255),b
  8025  0009A8  0E00               	movlw	0
  8026  0009AA  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8027  0009AC  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  8028  0009AE  EF4B  F009         	goto	l10905
  8029  0009B2                     l306:
  8030                           
  8031                           ; BSR set to: 0
  8032                           ;main.c: 1015: else if (0 == val) {
  8033  0009B2  6651               	tstfsz	vscp_writeAppReg@val,c
  8034  0009B4  EF4B  F009         	goto	l10905
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;main.c: 1016: LATBbits.LATB4 = 0;
  8038  0009B8  988A               	bcf	3978,4,c	;volatile
  8039                           
  8040                           ; BSR set to: 0
  8041                           ;main.c: 1017: rv = LATBbits.LATB4;
  8042  0009BA  0E00               	movlw	0
  8043  0009BC  B88A               	btfsc	3978,4,c	;volatile
  8044  0009BE  0E01               	movlw	1
  8045  0009C0  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8046  0009C2                     l10519:
  8047                           
  8048                           ; BSR set to: 0
  8049                           ;main.c: 1018: bOn = 0;
  8050  0009C2  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8051  0009C4  EF4B  F009         	goto	l10905
  8052  0009C8                     l10521:
  8053                           
  8054                           ; BSR set to: 0
  8055                           ;main.c: 1025: bInfoEvent = 1;
  8056  0009C8  0E01               	movlw	1
  8057  0009CA  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8058                           
  8059                           ; BSR set to: 0
  8060                           ;main.c: 1027: if (1 == val) {
  8061  0009CC  0451               	decf	vscp_writeAppReg@val,w,c
  8062  0009CE  E11E               	bnz	l312
  8063                           
  8064                           ; BSR set to: 0
  8065                           ;main.c: 1029: LATBbits.LATB1 = 1;
  8066  0009D0  828A               	bsf	3978,1,c	;volatile
  8067                           
  8068                           ; BSR set to: 0
  8069                           ;main.c: 1030: rv = LATBbits.LATB1;
  8070  0009D2  0E00               	movlw	0
  8071  0009D4  B28A               	btfsc	3978,1,c	;volatile
  8072  0009D6  0E01               	movlw	1
  8073  0009D8  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8074                           
  8075                           ; BSR set to: 0
  8076                           ;main.c: 1031: bOn = 1;
  8077  0009DA  0E01               	movlw	1
  8078  0009DC  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;main.c: 1033: if (Read_b_eep(0x43 + 11) & 0x04) {
  8082  0009DE  6A09               	clrf	?_Read_b_eep+1,c
  8083  0009E0  0E4E               	movlw	78
  8084  0009E2  6E08               	movwf	?_Read_b_eep,c
  8085  0009E4  EC3A  F022         	call	_Read_b_eep	;wreg free
  8086  0009E8  0100               	movlb	0	; () banked
  8087  0009EA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8088  0009EC  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8089  0009EE  EF4B  F009         	goto	l10905
  8090  0009F2                     l10533:
  8091                           
  8092                           ; BSR set to: 0
  8093                           ;main.c: 1034: relay_protection_timer[ 1 ] =
  8094                           ;main.c: 1035: Read_b_eep(0x43 + 36) * 256 +
  8095                           ;main.c: 1036: Read_b_eep(0x43 + 37);
  8096  0009F2  6A09               	clrf	?_Read_b_eep+1,c
  8097  0009F4  0E68               	movlw	104
  8098  0009F6  6E08               	movwf	?_Read_b_eep,c
  8099  0009F8  EC3A  F022         	call	_Read_b_eep	;wreg free
  8100  0009FC  0100               	movlb	0	; () banked
  8101  0009FE  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8102  000A00  6A09               	clrf	?_Read_b_eep+1,c
  8103  000A02  0E67               	movlw	103
  8104  000A04  6E08               	movwf	?_Read_b_eep,c
  8105  000A06  EC3A  F022         	call	_Read_b_eep	;wreg free
  8106  000A0A  D19F               	goto	L28
  8107  000A0C                     l312:
  8108                           
  8109                           ; BSR set to: 0
  8110                           ;main.c: 1040: else if (0 == val) {
  8111  000A0C  6651               	tstfsz	vscp_writeAppReg@val,c
  8112  000A0E  EF4B  F009         	goto	l10905
  8113                           
  8114                           ; BSR set to: 0
  8115                           ;main.c: 1041: LATBbits.LATB1 = 0;
  8116  000A12  928A               	bcf	3978,1,c	;volatile
  8117                           
  8118                           ; BSR set to: 0
  8119                           ;main.c: 1042: rv = LATBbits.LATB1;
  8120  000A14  0E00               	movlw	0
  8121  000A16  B28A               	btfsc	3978,1,c	;volatile
  8122  000A18  0E01               	movlw	1
  8123  000A1A  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8124  000A1C  D7D2               	goto	l10519
  8125  000A1E                     l10541:
  8126                           
  8127                           ; BSR set to: 0
  8128                           ;main.c: 1050: bInfoEvent = 1;
  8129  000A1E  0E01               	movlw	1
  8130  000A20  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8131                           
  8132                           ; BSR set to: 0
  8133                           ;main.c: 1052: if (1 == val) {
  8134  000A22  0451               	decf	vscp_writeAppReg@val,w,c
  8135  000A24  E128               	bnz	l317
  8136                           
  8137                           ; BSR set to: 0
  8138                           ;main.c: 1054: LATBbits.LATB0 = 1;
  8139  000A26  808A               	bsf	3978,0,c	;volatile
  8140                           
  8141                           ; BSR set to: 0
  8142                           ;main.c: 1055: rv = LATBbits.LATB0;
  8143  000A28  0E00               	movlw	0
  8144  000A2A  B08A               	btfsc	3978,0,c	;volatile
  8145  000A2C  0E01               	movlw	1
  8146  000A2E  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8147                           
  8148                           ; BSR set to: 0
  8149                           ;main.c: 1056: bOn = 1;
  8150  000A30  0E01               	movlw	1
  8151  000A32  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8152                           
  8153                           ; BSR set to: 0
  8154                           ;main.c: 1058: if ( Read_b_eep(0x43 + 12) & 0x04) {
  8155  000A34  6A09               	clrf	?_Read_b_eep+1,c
  8156  000A36  0E4F               	movlw	79
  8157  000A38  6E08               	movwf	?_Read_b_eep,c
  8158  000A3A  EC3A  F022         	call	_Read_b_eep	;wreg free
  8159  000A3E  0100               	movlb	0	; () banked
  8160  000A40  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8161  000A42  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8162  000A44  EF4B  F009         	goto	l10905
  8163  000A48                     l10553:
  8164                           
  8165                           ; BSR set to: 0
  8166                           ;main.c: 1059: relay_protection_timer[ 2 ] =
  8167                           ;main.c: 1060: Read_b_eep(0x43 + 38) * 256 +
  8168                           ;main.c: 1061: Read_b_eep(0x43 + 39);
  8169  000A48  6A09               	clrf	?_Read_b_eep+1,c
  8170  000A4A  0E6A               	movlw	106
  8171  000A4C  6E08               	movwf	?_Read_b_eep,c
  8172  000A4E  EC3A  F022         	call	_Read_b_eep	;wreg free
  8173  000A52  0100               	movlb	0	; () banked
  8174  000A54  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8175  000A56  6A09               	clrf	?_Read_b_eep+1,c
  8176  000A58  0E69               	movlw	105
  8177  000A5A  6E08               	movwf	?_Read_b_eep,c
  8178  000A5C  EC3A  F022         	call	_Read_b_eep	;wreg free
  8179  000A60  0100               	movlb	0	; () banked
  8180  000A62  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8181  000A64  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8182  000A66  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8183  000A68  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8184  000A6A  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  8185  000A6C  0E00               	movlw	0
  8186  000A6E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8187  000A70  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  8188  000A72  EF4B  F009         	goto	l10905
  8189  000A76                     l317:
  8190                           
  8191                           ; BSR set to: 0
  8192                           ;main.c: 1065: else if (0 == val) {
  8193  000A76  6651               	tstfsz	vscp_writeAppReg@val,c
  8194  000A78  EF4B  F009         	goto	l10905
  8195                           
  8196                           ; BSR set to: 0
  8197                           ;main.c: 1066: LATBbits.LATB0 = 0;
  8198  000A7C  908A               	bcf	3978,0,c	;volatile
  8199                           
  8200                           ; BSR set to: 0
  8201                           ;main.c: 1067: rv = LATBbits.LATB0;
  8202  000A7E  0E00               	movlw	0
  8203  000A80  B08A               	btfsc	3978,0,c	;volatile
  8204  000A82  0E01               	movlw	1
  8205  000A84  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8206  000A86  D79D               	goto	l10519
  8207  000A88                     l10561:
  8208                           
  8209                           ; BSR set to: 0
  8210                           ;main.c: 1076: bInfoEvent = 1;
  8211  000A88  0E01               	movlw	1
  8212  000A8A  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8213                           
  8214                           ; BSR set to: 0
  8215                           ;main.c: 1078: if (1 == val) {
  8216  000A8C  0451               	decf	vscp_writeAppReg@val,w,c
  8217  000A8E  E126               	bnz	l322
  8218                           
  8219                           ; BSR set to: 0
  8220                           ;main.c: 1080: LATCbits.LATC7 = 1;
  8221  000A90  8E8B               	bsf	3979,7,c	;volatile
  8222                           
  8223                           ; BSR set to: 0
  8224                           ;main.c: 1081: rv = LATCbits.LATC7;
  8225  000A92  0E00               	movlw	0
  8226  000A94  BE8B               	btfsc	3979,7,c	;volatile
  8227  000A96  0E01               	movlw	1
  8228  000A98  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;main.c: 1082: bOn = 1;
  8232  000A9A  0E01               	movlw	1
  8233  000A9C  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8234                           
  8235                           ; BSR set to: 0
  8236                           ;main.c: 1084: if (Read_b_eep(0x43 + 13) & 0x04) {
  8237  000A9E  6A09               	clrf	?_Read_b_eep+1,c
  8238  000AA0  0E50               	movlw	80
  8239  000AA2  6E08               	movwf	?_Read_b_eep,c
  8240  000AA4  EC3A  F022         	call	_Read_b_eep	;wreg free
  8241  000AA8  0100               	movlb	0	; () banked
  8242  000AAA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8243  000AAC  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8244  000AAE  D3F3               	goto	l10905
  8245  000AB0                     l10573:
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;main.c: 1085: relay_protection_timer[ 3 ] =
  8249                           ;main.c: 1086: Read_b_eep(0x43 + 40) * 256 +
  8250                           ;main.c: 1087: Read_b_eep(0x43 + 41);
  8251  000AB0  6A09               	clrf	?_Read_b_eep+1,c
  8252  000AB2  0E6C               	movlw	108
  8253  000AB4  6E08               	movwf	?_Read_b_eep,c
  8254  000AB6  EC3A  F022         	call	_Read_b_eep	;wreg free
  8255  000ABA  0100               	movlb	0	; () banked
  8256  000ABC  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8257  000ABE  6A09               	clrf	?_Read_b_eep+1,c
  8258  000AC0  0E6B               	movlw	107
  8259  000AC2  6E08               	movwf	?_Read_b_eep,c
  8260  000AC4  EC3A  F022         	call	_Read_b_eep	;wreg free
  8261  000AC8  0100               	movlb	0	; () banked
  8262  000ACA  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8263  000ACC  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8264  000ACE  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8265  000AD0  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8266  000AD2  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  8267  000AD4  0E00               	movlw	0
  8268  000AD6  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8269  000AD8  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  8270  000ADA  D3DD               	goto	l10905
  8271  000ADC                     l322:
  8272                           
  8273                           ; BSR set to: 0
  8274                           ;main.c: 1091: else if (0 == val) {
  8275  000ADC  6651               	tstfsz	vscp_writeAppReg@val,c
  8276  000ADE  D3DB               	goto	l10905
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;main.c: 1092: LATCbits.LATC7 = 0;
  8280  000AE0  9E8B               	bcf	3979,7,c	;volatile
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;main.c: 1093: rv = LATCbits.LATC7;
  8284  000AE2  0E00               	movlw	0
  8285  000AE4  BE8B               	btfsc	3979,7,c	;volatile
  8286  000AE6  0E01               	movlw	1
  8287  000AE8  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8288  000AEA  D76B               	goto	l10519
  8289  000AEC                     l10581:
  8290                           
  8291                           ; BSR set to: 0
  8292                           ;main.c: 1102: bInfoEvent = 1;
  8293  000AEC  0E01               	movlw	1
  8294  000AEE  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8295                           
  8296                           ; BSR set to: 0
  8297                           ;main.c: 1104: if (1 == val) {
  8298  000AF0  0451               	decf	vscp_writeAppReg@val,w,c
  8299  000AF2  E126               	bnz	l327
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;main.c: 1106: LATCbits.LATC6 = 1;
  8303  000AF4  8C8B               	bsf	3979,6,c	;volatile
  8304                           
  8305                           ; BSR set to: 0
  8306                           ;main.c: 1107: rv = LATCbits.LATC6;
  8307  000AF6  0E00               	movlw	0
  8308  000AF8  BC8B               	btfsc	3979,6,c	;volatile
  8309  000AFA  0E01               	movlw	1
  8310  000AFC  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8311                           
  8312                           ; BSR set to: 0
  8313                           ;main.c: 1108: bOn = 1;
  8314  000AFE  0E01               	movlw	1
  8315  000B00  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;main.c: 1110: if (Read_b_eep(0x43 + 14) & 0x04) {
  8319  000B02  6A09               	clrf	?_Read_b_eep+1,c
  8320  000B04  0E51               	movlw	81
  8321  000B06  6E08               	movwf	?_Read_b_eep,c
  8322  000B08  EC3A  F022         	call	_Read_b_eep	;wreg free
  8323  000B0C  0100               	movlb	0	; () banked
  8324  000B0E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8325  000B10  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8326  000B12  D3C1               	goto	l10905
  8327  000B14                     l10593:
  8328                           
  8329                           ; BSR set to: 0
  8330                           ;main.c: 1111: relay_protection_timer[ 4 ] =
  8331                           ;main.c: 1112: Read_b_eep(0x43 + 42) * 256 +
  8332                           ;main.c: 1113: Read_b_eep(0x43 + 43);
  8333  000B14  6A09               	clrf	?_Read_b_eep+1,c
  8334  000B16  0E6E               	movlw	110
  8335  000B18  6E08               	movwf	?_Read_b_eep,c
  8336  000B1A  EC3A  F022         	call	_Read_b_eep	;wreg free
  8337  000B1E  0100               	movlb	0	; () banked
  8338  000B20  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8339  000B22  6A09               	clrf	?_Read_b_eep+1,c
  8340  000B24  0E6D               	movlw	109
  8341  000B26  6E08               	movwf	?_Read_b_eep,c
  8342  000B28  EC3A  F022         	call	_Read_b_eep	;wreg free
  8343  000B2C  0100               	movlb	0	; () banked
  8344  000B2E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8345  000B30  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8346  000B32  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8347  000B34  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8348  000B36  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  8349  000B38  0E00               	movlw	0
  8350  000B3A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8351  000B3C  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  8352  000B3E  D3AB               	goto	l10905
  8353  000B40                     l327:
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;main.c: 1117: else if (0 == val) {
  8357  000B40  6651               	tstfsz	vscp_writeAppReg@val,c
  8358  000B42  D3A9               	goto	l10905
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;main.c: 1118: LATCbits.LATC6 = 0;
  8362  000B44  9C8B               	bcf	3979,6,c	;volatile
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;main.c: 1119: rv = LATCbits.LATC6;
  8366  000B46  0E00               	movlw	0
  8367  000B48  BC8B               	btfsc	3979,6,c	;volatile
  8368  000B4A  0E01               	movlw	1
  8369  000B4C  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8370  000B4E  D739               	goto	l10519
  8371  000B50                     l10601:
  8372                           
  8373                           ; BSR set to: 0
  8374                           ;main.c: 1128: bInfoEvent = 1;
  8375  000B50  0E01               	movlw	1
  8376  000B52  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8377                           
  8378                           ; BSR set to: 0
  8379                           ;main.c: 1130: if (1 == val) {
  8380  000B54  0451               	decf	vscp_writeAppReg@val,w,c
  8381  000B56  E126               	bnz	l332
  8382                           
  8383                           ; BSR set to: 0
  8384                           ;main.c: 1132: LATCbits.LATC5 = 1;
  8385  000B58  8A8B               	bsf	3979,5,c	;volatile
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;main.c: 1133: rv = LATCbits.LATC5;
  8389  000B5A  0E00               	movlw	0
  8390  000B5C  BA8B               	btfsc	3979,5,c	;volatile
  8391  000B5E  0E01               	movlw	1
  8392  000B60  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;main.c: 1134: bOn = 1;
  8396  000B62  0E01               	movlw	1
  8397  000B64  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;main.c: 1136: if (Read_b_eep(0x43 + 15) & 0x04) {
  8401  000B66  6A09               	clrf	?_Read_b_eep+1,c
  8402  000B68  0E52               	movlw	82
  8403  000B6A  6E08               	movwf	?_Read_b_eep,c
  8404  000B6C  EC3A  F022         	call	_Read_b_eep	;wreg free
  8405  000B70  0100               	movlb	0	; () banked
  8406  000B72  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8407  000B74  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8408  000B76  D38F               	goto	l10905
  8409  000B78                     l10613:
  8410                           
  8411                           ; BSR set to: 0
  8412                           ;main.c: 1137: relay_protection_timer[ 5 ] =
  8413                           ;main.c: 1138: Read_b_eep(0x43 + 44) * 256 +
  8414                           ;main.c: 1139: Read_b_eep(0x43 + 45);
  8415  000B78  6A09               	clrf	?_Read_b_eep+1,c
  8416  000B7A  0E70               	movlw	112
  8417  000B7C  6E08               	movwf	?_Read_b_eep,c
  8418  000B7E  EC3A  F022         	call	_Read_b_eep	;wreg free
  8419  000B82  0100               	movlb	0	; () banked
  8420  000B84  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8421  000B86  6A09               	clrf	?_Read_b_eep+1,c
  8422  000B88  0E6F               	movlw	111
  8423  000B8A  6E08               	movwf	?_Read_b_eep,c
  8424  000B8C  EC3A  F022         	call	_Read_b_eep	;wreg free
  8425  000B90  0100               	movlb	0	; () banked
  8426  000B92  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8427  000B94  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8428  000B96  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8429  000B98  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8430  000B9A  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  8431  000B9C  0E00               	movlw	0
  8432  000B9E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8433  000BA0  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  8434  000BA2  D379               	goto	l10905
  8435  000BA4                     l332:
  8436                           
  8437                           ; BSR set to: 0
  8438                           ;main.c: 1143: else if (0 == val) {
  8439  000BA4  6651               	tstfsz	vscp_writeAppReg@val,c
  8440  000BA6  D377               	goto	l10905
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;main.c: 1144: LATCbits.LATC5 = 0;
  8444  000BA8  9A8B               	bcf	3979,5,c	;volatile
  8445                           
  8446                           ; BSR set to: 0
  8447                           ;main.c: 1145: rv = LATCbits.LATC5;
  8448  000BAA  0E00               	movlw	0
  8449  000BAC  BA8B               	btfsc	3979,5,c	;volatile
  8450  000BAE  0E01               	movlw	1
  8451  000BB0  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8452  000BB2  D707               	goto	l10519
  8453  000BB4                     l10621:
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;main.c: 1153: bInfoEvent = 1;
  8457  000BB4  0E01               	movlw	1
  8458  000BB6  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8459                           
  8460                           ; BSR set to: 0
  8461                           ;main.c: 1155: if (1 == val) {
  8462  000BB8  0451               	decf	vscp_writeAppReg@val,w,c
  8463  000BBA  E126               	bnz	l337
  8464                           
  8465                           ; BSR set to: 0
  8466                           ;main.c: 1157: LATCbits.LATC4 = 1;
  8467  000BBC  888B               	bsf	3979,4,c	;volatile
  8468                           
  8469                           ; BSR set to: 0
  8470                           ;main.c: 1158: rv = LATCbits.LATC4;
  8471  000BBE  0E00               	movlw	0
  8472  000BC0  B88B               	btfsc	3979,4,c	;volatile
  8473  000BC2  0E01               	movlw	1
  8474  000BC4  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8475                           
  8476                           ; BSR set to: 0
  8477                           ;main.c: 1159: bOn = 1;
  8478  000BC6  0E01               	movlw	1
  8479  000BC8  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8480                           
  8481                           ; BSR set to: 0
  8482                           ;main.c: 1161: if (Read_b_eep(0x43 + 16) & 0x04) {
  8483  000BCA  6A09               	clrf	?_Read_b_eep+1,c
  8484  000BCC  0E53               	movlw	83
  8485  000BCE  6E08               	movwf	?_Read_b_eep,c
  8486  000BD0  EC3A  F022         	call	_Read_b_eep	;wreg free
  8487  000BD4  0100               	movlb	0	; () banked
  8488  000BD6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8489  000BD8  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8490  000BDA  D35D               	goto	l10905
  8491  000BDC                     l10633:
  8492                           
  8493                           ; BSR set to: 0
  8494                           ;main.c: 1162: relay_protection_timer[ 6 ] =
  8495                           ;main.c: 1163: Read_b_eep(0x43 + 46) * 256 +
  8496                           ;main.c: 1164: Read_b_eep(0x43 + 47);
  8497  000BDC  6A09               	clrf	?_Read_b_eep+1,c
  8498  000BDE  0E72               	movlw	114
  8499  000BE0  6E08               	movwf	?_Read_b_eep,c
  8500  000BE2  EC3A  F022         	call	_Read_b_eep	;wreg free
  8501  000BE6  0100               	movlb	0	; () banked
  8502  000BE8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8503  000BEA  6A09               	clrf	?_Read_b_eep+1,c
  8504  000BEC  0E71               	movlw	113
  8505  000BEE  6E08               	movwf	?_Read_b_eep,c
  8506  000BF0  EC3A  F022         	call	_Read_b_eep	;wreg free
  8507  000BF4  0100               	movlb	0	; () banked
  8508  000BF6  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8509  000BF8  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8510  000BFA  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8511  000BFC  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8512  000BFE  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  8513  000C00  0E00               	movlw	0
  8514  000C02  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8515  000C04  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  8516  000C06  D347               	goto	l10905
  8517  000C08                     l337:
  8518                           
  8519                           ; BSR set to: 0
  8520                           ;main.c: 1168: else if (0 == val) {
  8521  000C08  6651               	tstfsz	vscp_writeAppReg@val,c
  8522  000C0A  D345               	goto	l10905
  8523                           
  8524                           ; BSR set to: 0
  8525                           ;main.c: 1169: LATCbits.LATC4 = 0;
  8526  000C0C  988B               	bcf	3979,4,c	;volatile
  8527                           
  8528                           ; BSR set to: 0
  8529                           ;main.c: 1170: rv = LATCbits.LATC4;
  8530  000C0E  0E00               	movlw	0
  8531  000C10  B88B               	btfsc	3979,4,c	;volatile
  8532  000C12  0E01               	movlw	1
  8533  000C14  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8534  000C16  D6D5               	goto	l10519
  8535  000C18                     l10643:
  8536                           
  8537                           ; BSR set to: 0
  8538  000C18  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8539                           
  8540                           ; Switch size 1, requested type "speed"
  8541                           ; Number of cases is 7, Range of values is 2 to 8
  8542                           ; switch strategies available:
  8543                           ; Name         Instructions Cycles
  8544                           ; simple_byte           22    12 (average)
  8545                           ;	Chosen strategy is simple_byte
  8546  000C1A  0A02               	xorlw	2	; case 2
  8547  000C1C  E101 D69D          	bz	l10501
  8548  000C20  0A01               	xorlw	1	; case 3
  8549  000C22  E101 D6D1          	bz	l10521
  8550  000C26  0A07               	xorlw	7	; case 4
  8551  000C28  E101 D6F9          	bz	l10541
  8552  000C2C  0A01               	xorlw	1	; case 5
  8553  000C2E  E101 D72B          	bz	l10561
  8554  000C32  0A03               	xorlw	3	; case 6
  8555  000C34  E101 D75A          	bz	l10581
  8556  000C38  0A01               	xorlw	1	; case 7
  8557  000C3A  E08A               	bz	l10601
  8558  000C3C  0A0F               	xorlw	15	; case 8
  8559  000C3E  E0BA               	bz	l10621
  8560                           
  8561                           ; BSR set to: 0
  8562                           ;main.c: 1176: }
  8563                           ;main.c: 1177: }
  8564  000C40  D32A               	goto	l10905
  8565  000C42                     l10645:
  8566                           
  8567                           ; BSR set to: 0
  8568                           ;main.c: 1180: else if ( (reg >= 10 ) &&
  8569                           ;main.c: 1181: (reg <= 17) ) {
  8570  000C42  0E09               	movlw	9
  8571  000C44  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8572  000C46  D1BE               	goto	l10823
  8573                           
  8574                           ; BSR set to: 0
  8575  000C48  0E12               	movlw	18
  8576  000C4A  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8577  000C4C  D1BB               	goto	l10823
  8578  000C4E  D1A4               	goto	l10821
  8579  000C50                     l10651:
  8580                           
  8581                           ; BSR set to: 0
  8582                           ;main.c: 1187: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8583  000C50  EC6E  F022         	call	_Busy_eep	;wreg free
  8584  000C54  0E43               	movlw	67
  8585  000C56  0100               	movlb	0	; () banked
  8586  000C58  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8587  000C5A  6E08               	movwf	?_Write_b_eep,c
  8588  000C5C  6A09               	clrf	?_Write_b_eep+1,c
  8589  000C5E  0E00               	movlw	0
  8590  000C60  2209               	addwfc	?_Write_b_eep+1,f,c
  8591  000C62  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8592  000C66  EC53  F020         	call	_Write_b_eep	;wreg free
  8593                           
  8594                           ;main.c: 1188: rv = Read_b_eep(0x43 + reg);
  8595  000C6A  0E43               	movlw	67
  8596  000C6C  0100               	movlb	0	; () banked
  8597  000C6E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8598  000C70  6E08               	movwf	?_Read_b_eep,c
  8599  000C72  6A09               	clrf	?_Read_b_eep+1,c
  8600  000C74  0E00               	movlw	0
  8601  000C76  2209               	addwfc	?_Read_b_eep+1,f,c
  8602  000C78  EC3A  F022         	call	_Read_b_eep	;wreg free
  8603  000C7C  0100               	movlb	0	; () banked
  8604  000C7E  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8605                           
  8606                           ; BSR set to: 0
  8607                           ;main.c: 1190: if ( val & 0x01 ) {
  8608  000C80  A051               	btfss	vscp_writeAppReg@val,0,c
  8609  000C82  D019               	goto	l10665
  8610                           
  8611                           ; BSR set to: 0
  8612                           ;main.c: 1192: LATBbits.LATB4 = 0;
  8613  000C84  988A               	bcf	3978,4,c	;volatile
  8614                           
  8615                           ;main.c: 1193: bOn = 0;
  8616  000C86  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8617                           
  8618                           ; BSR set to: 0
  8619                           ;main.c: 1195: relay_pulse_flags |= 0x01;
  8620  000C88  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  8621                           
  8622                           ; BSR set to: 0
  8623                           ;main.c: 1196: relay_pulse_timer[ 0 ] =
  8624                           ;main.c: 1197: Read_b_eep(0x43 + 18) * 256 +
  8625                           ;main.c: 1198: Read_b_eep(0x43 + 19);
  8626  000C8A  6A09               	clrf	?_Read_b_eep+1,c
  8627  000C8C  0E56               	movlw	86
  8628  000C8E  6E08               	movwf	?_Read_b_eep,c
  8629  000C90  EC3A  F022         	call	_Read_b_eep	;wreg free
  8630  000C94  0100               	movlb	0	; () banked
  8631  000C96  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8632  000C98  6A09               	clrf	?_Read_b_eep+1,c
  8633  000C9A  0E55               	movlw	85
  8634  000C9C  6E08               	movwf	?_Read_b_eep,c
  8635  000C9E  EC3A  F022         	call	_Read_b_eep	;wreg free
  8636  000CA2  0100               	movlb	0	; () banked
  8637  000CA4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8638  000CA6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8639  000CA8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8640  000CAA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8641  000CAC  6F70               	movwf	_relay_pulse_timer& (0+255),b
  8642  000CAE  0E00               	movlw	0
  8643  000CB0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8644  000CB2  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  8645                           
  8646                           ;main.c: 1199: }
  8647  000CB4  D003               	goto	l10671
  8648  000CB6                     l10665:
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;main.c: 1200: else {
  8652                           ;main.c: 1201: relay_pulse_flags &= 0b11111110;
  8653  000CB6  918A               	bcf	_relay_pulse_flags& (0+255),0,b
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;main.c: 1202: LATBbits.LATB4 = 0;
  8657  000CB8  988A               	bcf	3978,4,c	;volatile
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;main.c: 1203: bOn = 0;
  8661  000CBA  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8662  000CBC                     l10671:
  8663                           
  8664                           ; BSR set to: 0
  8665                           ;main.c: 1204: }
  8666                           ;main.c: 1206: if ( val & 0x04 ) {
  8667  000CBC  B451               	btfsc	vscp_writeAppReg@val,2,c
  8668  000CBE  D662               	goto	l10513
  8669  000CC0  D2EA               	goto	l10905
  8670  000CC2                     l10675:
  8671                           
  8672                           ; BSR set to: 0
  8673                           ;main.c: 1215: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8674  000CC2  EC6E  F022         	call	_Busy_eep	;wreg free
  8675  000CC6  0E43               	movlw	67
  8676  000CC8  0100               	movlb	0	; () banked
  8677  000CCA  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8678  000CCC  6E08               	movwf	?_Write_b_eep,c
  8679  000CCE  6A09               	clrf	?_Write_b_eep+1,c
  8680  000CD0  0E00               	movlw	0
  8681  000CD2  2209               	addwfc	?_Write_b_eep+1,f,c
  8682  000CD4  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8683  000CD8  EC53  F020         	call	_Write_b_eep	;wreg free
  8684                           
  8685                           ;main.c: 1216: rv = Read_b_eep(0x43 + reg);
  8686  000CDC  0E43               	movlw	67
  8687  000CDE  0100               	movlb	0	; () banked
  8688  000CE0  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8689  000CE2  6E08               	movwf	?_Read_b_eep,c
  8690  000CE4  6A09               	clrf	?_Read_b_eep+1,c
  8691  000CE6  0E00               	movlw	0
  8692  000CE8  2209               	addwfc	?_Read_b_eep+1,f,c
  8693  000CEA  EC3A  F022         	call	_Read_b_eep	;wreg free
  8694  000CEE  0100               	movlb	0	; () banked
  8695  000CF0  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8696                           
  8697                           ; BSR set to: 0
  8698                           ;main.c: 1218: if ( val & 0x01 ) {
  8699  000CF2  A051               	btfss	vscp_writeAppReg@val,0,c
  8700  000CF4  D019               	goto	l10689
  8701                           
  8702                           ; BSR set to: 0
  8703                           ;main.c: 1220: LATBbits.LATB1 = 0;
  8704  000CF6  928A               	bcf	3978,1,c	;volatile
  8705                           
  8706                           ;main.c: 1221: bOn = 0;
  8707  000CF8  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8708                           
  8709                           ; BSR set to: 0
  8710                           ;main.c: 1223: relay_pulse_flags |= 0x02;
  8711  000CFA  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  8712                           
  8713                           ; BSR set to: 0
  8714                           ;main.c: 1224: relay_pulse_timer[ 1 ] =
  8715                           ;main.c: 1225: Read_b_eep(0x43 + 18) * 256 +
  8716                           ;main.c: 1226: Read_b_eep(0x43 + 19);
  8717  000CFC  6A09               	clrf	?_Read_b_eep+1,c
  8718  000CFE  0E56               	movlw	86
  8719  000D00  6E08               	movwf	?_Read_b_eep,c
  8720  000D02  EC3A  F022         	call	_Read_b_eep	;wreg free
  8721  000D06  0100               	movlb	0	; () banked
  8722  000D08  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8723  000D0A  6A09               	clrf	?_Read_b_eep+1,c
  8724  000D0C  0E55               	movlw	85
  8725  000D0E  6E08               	movwf	?_Read_b_eep,c
  8726  000D10  EC3A  F022         	call	_Read_b_eep	;wreg free
  8727  000D14  0100               	movlb	0	; () banked
  8728  000D16  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8729  000D18  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8730  000D1A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8731  000D1C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8732  000D1E  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  8733  000D20  0E00               	movlw	0
  8734  000D22  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8735  000D24  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  8736                           
  8737                           ;main.c: 1227: }
  8738  000D26  D003               	goto	l10695
  8739  000D28                     l10689:
  8740                           
  8741                           ; BSR set to: 0
  8742                           ;main.c: 1228: else {
  8743                           ;main.c: 1229: relay_pulse_flags &= 0b11111101;
  8744  000D28  938A               	bcf	_relay_pulse_flags& (0+255),1,b
  8745                           
  8746                           ; BSR set to: 0
  8747                           ;main.c: 1230: LATBbits.LATB1 = 0;
  8748  000D2A  928A               	bcf	3978,1,c	;volatile
  8749                           
  8750                           ; BSR set to: 0
  8751                           ;main.c: 1231: bOn = 0;
  8752  000D2C  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8753  000D2E                     l10695:
  8754                           
  8755                           ; BSR set to: 0
  8756                           ;main.c: 1232: }
  8757                           ;main.c: 1234: if ( val & 0x04 ) {
  8758  000D2E  A451               	btfss	vscp_writeAppReg@val,2,c
  8759  000D30  D2B2               	goto	l10905
  8760                           
  8761                           ; BSR set to: 0
  8762                           ;main.c: 1235: relay_protection_timer[ 1 ] =
  8763                           ;main.c: 1236: Read_b_eep(0x43 + 34) * 256 +
  8764                           ;main.c: 1237: Read_b_eep(0x43 + 35);
  8765  000D32  6A09               	clrf	?_Read_b_eep+1,c
  8766  000D34  0E66               	movlw	102
  8767  000D36  6E08               	movwf	?_Read_b_eep,c
  8768  000D38  EC3A  F022         	call	_Read_b_eep	;wreg free
  8769  000D3C  0100               	movlb	0	; () banked
  8770  000D3E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8771  000D40  6A09               	clrf	?_Read_b_eep+1,c
  8772  000D42  0E65               	movlw	101
  8773  000D44  6E08               	movwf	?_Read_b_eep,c
  8774  000D46  EC3A  F022         	call	_Read_b_eep	;wreg free
  8775  000D4A                     L28:
  8776  000D4A  0100               	movlb	0	; () banked
  8777  000D4C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8778  000D4E  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8779  000D50  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8780  000D52  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8781  000D54  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  8782  000D56  0E00               	movlw	0
  8783  000D58  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8784  000D5A  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  8785  000D5C  D29C               	goto	l10905
  8786  000D5E                     l10699:
  8787                           
  8788                           ; BSR set to: 0
  8789                           ;main.c: 1243: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8790  000D5E  EC6E  F022         	call	_Busy_eep	;wreg free
  8791  000D62  0E43               	movlw	67
  8792  000D64  0100               	movlb	0	; () banked
  8793  000D66  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8794  000D68  6E08               	movwf	?_Write_b_eep,c
  8795  000D6A  6A09               	clrf	?_Write_b_eep+1,c
  8796  000D6C  0E00               	movlw	0
  8797  000D6E  2209               	addwfc	?_Write_b_eep+1,f,c
  8798  000D70  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8799  000D74  EC53  F020         	call	_Write_b_eep	;wreg free
  8800                           
  8801                           ;main.c: 1244: rv = Read_b_eep(0x43 + reg);
  8802  000D78  0E43               	movlw	67
  8803  000D7A  0100               	movlb	0	; () banked
  8804  000D7C  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8805  000D7E  6E08               	movwf	?_Read_b_eep,c
  8806  000D80  6A09               	clrf	?_Read_b_eep+1,c
  8807  000D82  0E00               	movlw	0
  8808  000D84  2209               	addwfc	?_Read_b_eep+1,f,c
  8809  000D86  EC3A  F022         	call	_Read_b_eep	;wreg free
  8810  000D8A  0100               	movlb	0	; () banked
  8811  000D8C  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8812                           
  8813                           ; BSR set to: 0
  8814                           ;main.c: 1246: if ( val & 0x01 ) {
  8815  000D8E  A051               	btfss	vscp_writeAppReg@val,0,c
  8816  000D90  D019               	goto	l10713
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;main.c: 1248: LATBbits.LATB0 = 0;
  8820  000D92  908A               	bcf	3978,0,c	;volatile
  8821                           
  8822                           ;main.c: 1249: bOn = 0;
  8823  000D94  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8824                           
  8825                           ; BSR set to: 0
  8826                           ;main.c: 1251: relay_pulse_flags |= 0x04;
  8827  000D96  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;main.c: 1252: relay_pulse_timer[ 2 ] =
  8831                           ;main.c: 1253: Read_b_eep(0x43 + 22) * 256 +
  8832                           ;main.c: 1254: Read_b_eep(0x43 + 23);
  8833  000D98  6A09               	clrf	?_Read_b_eep+1,c
  8834  000D9A  0E5A               	movlw	90
  8835  000D9C  6E08               	movwf	?_Read_b_eep,c
  8836  000D9E  EC3A  F022         	call	_Read_b_eep	;wreg free
  8837  000DA2  0100               	movlb	0	; () banked
  8838  000DA4  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8839  000DA6  6A09               	clrf	?_Read_b_eep+1,c
  8840  000DA8  0E59               	movlw	89
  8841  000DAA  6E08               	movwf	?_Read_b_eep,c
  8842  000DAC  EC3A  F022         	call	_Read_b_eep	;wreg free
  8843  000DB0  0100               	movlb	0	; () banked
  8844  000DB2  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8845  000DB4  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8846  000DB6  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8847  000DB8  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8848  000DBA  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  8849  000DBC  0E00               	movlw	0
  8850  000DBE  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8851  000DC0  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  8852                           
  8853                           ;main.c: 1255: }
  8854  000DC2  D003               	goto	l10719
  8855  000DC4                     l10713:
  8856                           
  8857                           ; BSR set to: 0
  8858                           ;main.c: 1256: else {
  8859                           ;main.c: 1257: relay_pulse_flags &= 0b11111011;
  8860  000DC4  958A               	bcf	_relay_pulse_flags& (0+255),2,b
  8861                           
  8862                           ; BSR set to: 0
  8863                           ;main.c: 1258: LATBbits.LATB0 = 0;
  8864  000DC6  908A               	bcf	3978,0,c	;volatile
  8865                           
  8866                           ; BSR set to: 0
  8867                           ;main.c: 1259: bOn = 0;
  8868  000DC8  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8869  000DCA                     l10719:
  8870                           
  8871                           ; BSR set to: 0
  8872                           ;main.c: 1260: }
  8873                           ;main.c: 1262: if ( val & 0x04 ) {
  8874  000DCA  B451               	btfsc	vscp_writeAppReg@val,2,c
  8875  000DCC  D63D               	goto	l10553
  8876  000DCE  D263               	goto	l10905
  8877  000DD0                     l10723:
  8878                           
  8879                           ; BSR set to: 0
  8880                           ;main.c: 1271: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8881  000DD0  EC6E  F022         	call	_Busy_eep	;wreg free
  8882  000DD4  0E43               	movlw	67
  8883  000DD6  0100               	movlb	0	; () banked
  8884  000DD8  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8885  000DDA  6E08               	movwf	?_Write_b_eep,c
  8886  000DDC  6A09               	clrf	?_Write_b_eep+1,c
  8887  000DDE  0E00               	movlw	0
  8888  000DE0  2209               	addwfc	?_Write_b_eep+1,f,c
  8889  000DE2  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8890  000DE6  EC53  F020         	call	_Write_b_eep	;wreg free
  8891                           
  8892                           ;main.c: 1272: rv = Read_b_eep(0x43 + reg);
  8893  000DEA  0E43               	movlw	67
  8894  000DEC  0100               	movlb	0	; () banked
  8895  000DEE  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8896  000DF0  6E08               	movwf	?_Read_b_eep,c
  8897  000DF2  6A09               	clrf	?_Read_b_eep+1,c
  8898  000DF4  0E00               	movlw	0
  8899  000DF6  2209               	addwfc	?_Read_b_eep+1,f,c
  8900  000DF8  EC3A  F022         	call	_Read_b_eep	;wreg free
  8901  000DFC  0100               	movlb	0	; () banked
  8902  000DFE  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8903                           
  8904                           ; BSR set to: 0
  8905                           ;main.c: 1274: if ( val & 0x01 ) {
  8906  000E00  A051               	btfss	vscp_writeAppReg@val,0,c
  8907  000E02  D019               	goto	l10737
  8908                           
  8909                           ; BSR set to: 0
  8910                           ;main.c: 1276: LATCbits.LATC7 = 0;
  8911  000E04  9E8B               	bcf	3979,7,c	;volatile
  8912                           
  8913                           ;main.c: 1277: bOn = 0;
  8914  000E06  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8915                           
  8916                           ; BSR set to: 0
  8917                           ;main.c: 1279: relay_pulse_flags |= 0x08;
  8918  000E08  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  8919                           
  8920                           ; BSR set to: 0
  8921                           ;main.c: 1280: relay_pulse_timer[ 3 ] =
  8922                           ;main.c: 1281: Read_b_eep(0x43 + 24) * 256 +
  8923                           ;main.c: 1282: Read_b_eep(0x43 + 25);
  8924  000E0A  6A09               	clrf	?_Read_b_eep+1,c
  8925  000E0C  0E5C               	movlw	92
  8926  000E0E  6E08               	movwf	?_Read_b_eep,c
  8927  000E10  EC3A  F022         	call	_Read_b_eep	;wreg free
  8928  000E14  0100               	movlb	0	; () banked
  8929  000E16  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8930  000E18  6A09               	clrf	?_Read_b_eep+1,c
  8931  000E1A  0E5B               	movlw	91
  8932  000E1C  6E08               	movwf	?_Read_b_eep,c
  8933  000E1E  EC3A  F022         	call	_Read_b_eep	;wreg free
  8934  000E22  0100               	movlb	0	; () banked
  8935  000E24  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8936  000E26  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8937  000E28  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8938  000E2A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8939  000E2C  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  8940  000E2E  0E00               	movlw	0
  8941  000E30  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8942  000E32  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  8943                           
  8944                           ;main.c: 1283: }
  8945  000E34  D003               	goto	l10743
  8946  000E36                     l10737:
  8947                           
  8948                           ; BSR set to: 0
  8949                           ;main.c: 1284: else {
  8950                           ;main.c: 1285: relay_pulse_flags &= 0b11110111;
  8951  000E36  978A               	bcf	_relay_pulse_flags& (0+255),3,b
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;main.c: 1286: LATCbits.LATC7 = 0;
  8955  000E38  9E8B               	bcf	3979,7,c	;volatile
  8956                           
  8957                           ; BSR set to: 0
  8958                           ;main.c: 1287: bOn = 0;
  8959  000E3A  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8960  000E3C                     l10743:
  8961                           
  8962                           ; BSR set to: 0
  8963                           ;main.c: 1288: }
  8964                           ;main.c: 1290: if ( val & 0x04 ) {
  8965  000E3C  B451               	btfsc	vscp_writeAppReg@val,2,c
  8966  000E3E  D638               	goto	l10573
  8967  000E40  D22A               	goto	l10905
  8968  000E42                     l10747:
  8969                           
  8970                           ; BSR set to: 0
  8971                           ;main.c: 1299: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8972  000E42  EC6E  F022         	call	_Busy_eep	;wreg free
  8973  000E46  0E43               	movlw	67
  8974  000E48  0100               	movlb	0	; () banked
  8975  000E4A  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8976  000E4C  6E08               	movwf	?_Write_b_eep,c
  8977  000E4E  6A09               	clrf	?_Write_b_eep+1,c
  8978  000E50  0E00               	movlw	0
  8979  000E52  2209               	addwfc	?_Write_b_eep+1,f,c
  8980  000E54  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8981  000E58  EC53  F020         	call	_Write_b_eep	;wreg free
  8982                           
  8983                           ;main.c: 1300: rv = Read_b_eep(0x43 + reg);
  8984  000E5C  0E43               	movlw	67
  8985  000E5E  0100               	movlb	0	; () banked
  8986  000E60  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8987  000E62  6E08               	movwf	?_Read_b_eep,c
  8988  000E64  6A09               	clrf	?_Read_b_eep+1,c
  8989  000E66  0E00               	movlw	0
  8990  000E68  2209               	addwfc	?_Read_b_eep+1,f,c
  8991  000E6A  EC3A  F022         	call	_Read_b_eep	;wreg free
  8992  000E6E  0100               	movlb	0	; () banked
  8993  000E70  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8994                           
  8995                           ; BSR set to: 0
  8996                           ;main.c: 1302: if ( val & 0x01 ) {
  8997  000E72  A051               	btfss	vscp_writeAppReg@val,0,c
  8998  000E74  D019               	goto	l10761
  8999                           
  9000                           ; BSR set to: 0
  9001                           ;main.c: 1304: LATCbits.LATC6 = 0;
  9002  000E76  9C8B               	bcf	3979,6,c	;volatile
  9003                           
  9004                           ;main.c: 1305: bOn = 0;
  9005  000E78  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9006                           
  9007                           ; BSR set to: 0
  9008                           ;main.c: 1307: relay_pulse_flags |= 0x10;
  9009  000E7A  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  9010                           
  9011                           ; BSR set to: 0
  9012                           ;main.c: 1308: relay_pulse_timer[ 4 ] =
  9013                           ;main.c: 1309: Read_b_eep(0x43 + 26) * 256 +
  9014                           ;main.c: 1310: Read_b_eep(0x43 + 27);
  9015  000E7C  6A09               	clrf	?_Read_b_eep+1,c
  9016  000E7E  0E5E               	movlw	94
  9017  000E80  6E08               	movwf	?_Read_b_eep,c
  9018  000E82  EC3A  F022         	call	_Read_b_eep	;wreg free
  9019  000E86  0100               	movlb	0	; () banked
  9020  000E88  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9021  000E8A  6A09               	clrf	?_Read_b_eep+1,c
  9022  000E8C  0E5D               	movlw	93
  9023  000E8E  6E08               	movwf	?_Read_b_eep,c
  9024  000E90  EC3A  F022         	call	_Read_b_eep	;wreg free
  9025  000E94  0100               	movlb	0	; () banked
  9026  000E96  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9027  000E98  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9028  000E9A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9029  000E9C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9030  000E9E  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9031  000EA0  0E00               	movlw	0
  9032  000EA2  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9033  000EA4  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9034                           
  9035                           ;main.c: 1311: }
  9036  000EA6  D003               	goto	l10767
  9037  000EA8                     l10761:
  9038                           
  9039                           ; BSR set to: 0
  9040                           ;main.c: 1312: else {
  9041                           ;main.c: 1313: relay_pulse_flags &= 0b11101111;
  9042  000EA8  998A               	bcf	_relay_pulse_flags& (0+255),4,b
  9043                           
  9044                           ; BSR set to: 0
  9045                           ;main.c: 1314: LATCbits.LATC6 = 0;
  9046  000EAA  9C8B               	bcf	3979,6,c	;volatile
  9047                           
  9048                           ; BSR set to: 0
  9049                           ;main.c: 1315: bOn = 0;
  9050  000EAC  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9051  000EAE                     l10767:
  9052                           
  9053                           ; BSR set to: 0
  9054                           ;main.c: 1316: }
  9055                           ;main.c: 1318: if ( val & 0x04 ) {
  9056  000EAE  B451               	btfsc	vscp_writeAppReg@val,2,c
  9057  000EB0  D631               	goto	l10593
  9058  000EB2  D1F1               	goto	l10905
  9059  000EB4                     l10771:
  9060                           
  9061                           ; BSR set to: 0
  9062                           ;main.c: 1327: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9063  000EB4  EC6E  F022         	call	_Busy_eep	;wreg free
  9064  000EB8  0E43               	movlw	67
  9065  000EBA  0100               	movlb	0	; () banked
  9066  000EBC  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9067  000EBE  6E08               	movwf	?_Write_b_eep,c
  9068  000EC0  6A09               	clrf	?_Write_b_eep+1,c
  9069  000EC2  0E00               	movlw	0
  9070  000EC4  2209               	addwfc	?_Write_b_eep+1,f,c
  9071  000EC6  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9072  000ECA  EC53  F020         	call	_Write_b_eep	;wreg free
  9073                           
  9074                           ;main.c: 1328: rv = Read_b_eep(0x43 + reg);
  9075  000ECE  0E43               	movlw	67
  9076  000ED0  0100               	movlb	0	; () banked
  9077  000ED2  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9078  000ED4  6E08               	movwf	?_Read_b_eep,c
  9079  000ED6  6A09               	clrf	?_Read_b_eep+1,c
  9080  000ED8  0E00               	movlw	0
  9081  000EDA  2209               	addwfc	?_Read_b_eep+1,f,c
  9082  000EDC  EC3A  F022         	call	_Read_b_eep	;wreg free
  9083  000EE0  0100               	movlb	0	; () banked
  9084  000EE2  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9085                           
  9086                           ; BSR set to: 0
  9087                           ;main.c: 1330: if ( val & 0x01 ) {
  9088  000EE4  A051               	btfss	vscp_writeAppReg@val,0,c
  9089  000EE6  D019               	goto	l10785
  9090                           
  9091                           ; BSR set to: 0
  9092                           ;main.c: 1332: LATCbits.LATC5 = 0;
  9093  000EE8  9A8B               	bcf	3979,5,c	;volatile
  9094                           
  9095                           ;main.c: 1333: bOn = 0;
  9096  000EEA  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9097                           
  9098                           ; BSR set to: 0
  9099                           ;main.c: 1335: relay_pulse_flags |= 0x20;
  9100  000EEC  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  9101                           
  9102                           ; BSR set to: 0
  9103                           ;main.c: 1336: relay_pulse_timer[ 5 ] =
  9104                           ;main.c: 1337: Read_b_eep(0x43 + 28) * 256 +
  9105                           ;main.c: 1338: Read_b_eep(0x43 + 29);
  9106  000EEE  6A09               	clrf	?_Read_b_eep+1,c
  9107  000EF0  0E60               	movlw	96
  9108  000EF2  6E08               	movwf	?_Read_b_eep,c
  9109  000EF4  EC3A  F022         	call	_Read_b_eep	;wreg free
  9110  000EF8  0100               	movlb	0	; () banked
  9111  000EFA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9112  000EFC  6A09               	clrf	?_Read_b_eep+1,c
  9113  000EFE  0E5F               	movlw	95
  9114  000F00  6E08               	movwf	?_Read_b_eep,c
  9115  000F02  EC3A  F022         	call	_Read_b_eep	;wreg free
  9116  000F06  0100               	movlb	0	; () banked
  9117  000F08  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9118  000F0A  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9119  000F0C  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9120  000F0E  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9121  000F10  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9122  000F12  0E00               	movlw	0
  9123  000F14  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9124  000F16  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9125                           
  9126                           ;main.c: 1339: }
  9127  000F18  D003               	goto	l10791
  9128  000F1A                     l10785:
  9129                           
  9130                           ; BSR set to: 0
  9131                           ;main.c: 1340: else {
  9132                           ;main.c: 1341: relay_pulse_flags &= 0b11011111;
  9133  000F1A  9B8A               	bcf	_relay_pulse_flags& (0+255),5,b
  9134                           
  9135                           ; BSR set to: 0
  9136                           ;main.c: 1342: LATCbits.LATC5 = 0;
  9137  000F1C  9A8B               	bcf	3979,5,c	;volatile
  9138                           
  9139                           ; BSR set to: 0
  9140                           ;main.c: 1343: bOn = 0;
  9141  000F1E  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9142  000F20                     l10791:
  9143                           
  9144                           ; BSR set to: 0
  9145                           ;main.c: 1344: }
  9146                           ;main.c: 1346: if ( val & 0x04 ) {
  9147  000F20  B451               	btfsc	vscp_writeAppReg@val,2,c
  9148  000F22  D62A               	goto	l10613
  9149  000F24  D1B8               	goto	l10905
  9150  000F26                     l10795:
  9151                           
  9152                           ; BSR set to: 0
  9153                           ;main.c: 1355: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9154  000F26  EC6E  F022         	call	_Busy_eep	;wreg free
  9155  000F2A  0E43               	movlw	67
  9156  000F2C  0100               	movlb	0	; () banked
  9157  000F2E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9158  000F30  6E08               	movwf	?_Write_b_eep,c
  9159  000F32  6A09               	clrf	?_Write_b_eep+1,c
  9160  000F34  0E00               	movlw	0
  9161  000F36  2209               	addwfc	?_Write_b_eep+1,f,c
  9162  000F38  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9163  000F3C  EC53  F020         	call	_Write_b_eep	;wreg free
  9164                           
  9165                           ;main.c: 1356: rv = Read_b_eep(0x43 + reg);
  9166  000F40  0E43               	movlw	67
  9167  000F42  0100               	movlb	0	; () banked
  9168  000F44  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9169  000F46  6E08               	movwf	?_Read_b_eep,c
  9170  000F48  6A09               	clrf	?_Read_b_eep+1,c
  9171  000F4A  0E00               	movlw	0
  9172  000F4C  2209               	addwfc	?_Read_b_eep+1,f,c
  9173  000F4E  EC3A  F022         	call	_Read_b_eep	;wreg free
  9174  000F52  0100               	movlb	0	; () banked
  9175  000F54  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9176                           
  9177                           ; BSR set to: 0
  9178                           ;main.c: 1358: if ( val & 0x01 ) {
  9179  000F56  A051               	btfss	vscp_writeAppReg@val,0,c
  9180  000F58  D019               	goto	l10809
  9181                           
  9182                           ; BSR set to: 0
  9183                           ;main.c: 1360: LATCbits.LATC4 = 0;
  9184  000F5A  988B               	bcf	3979,4,c	;volatile
  9185                           
  9186                           ;main.c: 1361: bOn = 0;
  9187  000F5C  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9188                           
  9189                           ; BSR set to: 0
  9190                           ;main.c: 1363: relay_pulse_flags |= 0x40;
  9191  000F5E  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  9192                           
  9193                           ; BSR set to: 0
  9194                           ;main.c: 1364: relay_pulse_timer[ 6 ] =
  9195                           ;main.c: 1365: Read_b_eep(0x43 + 30) * 256 +
  9196                           ;main.c: 1366: Read_b_eep(0x43 + 31);
  9197  000F60  6A09               	clrf	?_Read_b_eep+1,c
  9198  000F62  0E62               	movlw	98
  9199  000F64  6E08               	movwf	?_Read_b_eep,c
  9200  000F66  EC3A  F022         	call	_Read_b_eep	;wreg free
  9201  000F6A  0100               	movlb	0	; () banked
  9202  000F6C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9203  000F6E  6A09               	clrf	?_Read_b_eep+1,c
  9204  000F70  0E61               	movlw	97
  9205  000F72  6E08               	movwf	?_Read_b_eep,c
  9206  000F74  EC3A  F022         	call	_Read_b_eep	;wreg free
  9207  000F78  0100               	movlb	0	; () banked
  9208  000F7A  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9209  000F7C  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9210  000F7E  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9211  000F80  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9212  000F82  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9213  000F84  0E00               	movlw	0
  9214  000F86  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9215  000F88  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9216                           
  9217                           ;main.c: 1367: }
  9218  000F8A  D003               	goto	l10815
  9219  000F8C                     l10809:
  9220                           
  9221                           ; BSR set to: 0
  9222                           ;main.c: 1368: else {
  9223                           ;main.c: 1369: relay_pulse_flags &= 0b10111111;
  9224  000F8C  9D8A               	bcf	_relay_pulse_flags& (0+255),6,b
  9225                           
  9226                           ; BSR set to: 0
  9227                           ;main.c: 1370: LATCbits.LATC7 = 0;
  9228  000F8E  9E8B               	bcf	3979,7,c	;volatile
  9229                           
  9230                           ; BSR set to: 0
  9231                           ;main.c: 1371: bOn = 0;
  9232  000F90  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9233  000F92                     l10815:
  9234                           
  9235                           ; BSR set to: 0
  9236                           ;main.c: 1372: }
  9237                           ;main.c: 1374: if ( val & 0x04 ) {
  9238  000F92  B451               	btfsc	vscp_writeAppReg@val,2,c
  9239  000F94  D623               	goto	l10633
  9240  000F96  D17F               	goto	l10905
  9241  000F98                     l10821:
  9242                           
  9243                           ; BSR set to: 0
  9244  000F98  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9245                           
  9246                           ; Switch size 1, requested type "speed"
  9247                           ; Number of cases is 7, Range of values is 10 to 16
  9248                           ; switch strategies available:
  9249                           ; Name         Instructions Cycles
  9250                           ; simple_byte           22    12 (average)
  9251                           ;	Chosen strategy is simple_byte
  9252  000F9A  0A0A               	xorlw	10	; case 10
  9253  000F9C  E101 D658          	bz	l10651
  9254  000FA0  0A01               	xorlw	1	; case 11
  9255  000FA2  E101 D68E          	bz	l10675
  9256  000FA6  0A07               	xorlw	7	; case 12
  9257  000FA8  E101 D6D9          	bz	l10699
  9258  000FAC  0A01               	xorlw	1	; case 13
  9259  000FAE  E101 D70F          	bz	l10723
  9260  000FB2  0A03               	xorlw	3	; case 14
  9261  000FB4  E101 D745          	bz	l10747
  9262  000FB8  0A01               	xorlw	1	; case 15
  9263  000FBA  E101 D77B          	bz	l10771
  9264  000FBE  0A1F               	xorlw	31	; case 16
  9265  000FC0  E0B2               	bz	l10795
  9266  000FC2  D169               	goto	l10905
  9267  000FC4                     l10823:
  9268                           
  9269                           ; BSR set to: 0
  9270                           ;main.c: 1385: else if ( (reg >= 18 ) &&
  9271                           ;main.c: 1386: (reg <= 33 ) ) {
  9272  000FC4  0E11               	movlw	17
  9273  000FC6  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9274  000FC8  D0E1               	goto	l10853
  9275                           
  9276                           ; BSR set to: 0
  9277  000FCA  0E22               	movlw	34
  9278  000FCC  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9279  000FCE  D0DE               	goto	l10853
  9280                           
  9281                           ; BSR set to: 0
  9282                           ;main.c: 1389: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9283  000FD0  EC6E  F022         	call	_Busy_eep	;wreg free
  9284  000FD4  0E43               	movlw	67
  9285  000FD6  0100               	movlb	0	; () banked
  9286  000FD8  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9287  000FDA  6E08               	movwf	?_Write_b_eep,c
  9288  000FDC  6A09               	clrf	?_Write_b_eep+1,c
  9289  000FDE  0E00               	movlw	0
  9290  000FE0  2209               	addwfc	?_Write_b_eep+1,f,c
  9291  000FE2  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9292  000FE6  EC53  F020         	call	_Write_b_eep	;wreg free
  9293                           
  9294                           ;main.c: 1390: rv = Read_b_eep(0x43 + reg);
  9295  000FEA  0E43               	movlw	67
  9296  000FEC  0100               	movlb	0	; () banked
  9297  000FEE  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9298  000FF0  6E08               	movwf	?_Read_b_eep,c
  9299  000FF2  6A09               	clrf	?_Read_b_eep+1,c
  9300  000FF4  0E00               	movlw	0
  9301  000FF6  2209               	addwfc	?_Read_b_eep+1,f,c
  9302  000FF8  EC3A  F022         	call	_Read_b_eep	;wreg free
  9303  000FFC  0100               	movlb	0	; () banked
  9304  000FFE  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9305                           
  9306                           ;main.c: 1394: switch ( reg ) {
  9307  001000  D0B0               	goto	l10851
  9308  001002                     l10833:
  9309                           
  9310                           ; BSR set to: 0
  9311                           ;main.c: 1397: relay_pulse_timer[ 0 ] =
  9312                           ;main.c: 1398: Read_b_eep(0x43 + 18) * 256 +
  9313                           ;main.c: 1399: Read_b_eep(0x43 + 19);
  9314  001002  6A09               	clrf	?_Read_b_eep+1,c
  9315  001004  0E56               	movlw	86
  9316  001006  6E08               	movwf	?_Read_b_eep,c
  9317  001008  EC3A  F022         	call	_Read_b_eep	;wreg free
  9318  00100C  0100               	movlb	0	; () banked
  9319  00100E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9320  001010  6A09               	clrf	?_Read_b_eep+1,c
  9321  001012  0E55               	movlw	85
  9322  001014  6E08               	movwf	?_Read_b_eep,c
  9323  001016  EC3A  F022         	call	_Read_b_eep	;wreg free
  9324  00101A  0100               	movlb	0	; () banked
  9325  00101C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9326  00101E  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9327  001020  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9328  001022  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9329  001024  6F70               	movwf	_relay_pulse_timer& (0+255),b
  9330  001026  0E00               	movlw	0
  9331  001028  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9332  00102A  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  9333                           
  9334                           ;main.c: 1400: break;
  9335  00102C  D134               	goto	l10905
  9336  00102E                     l10835:
  9337                           
  9338                           ; BSR set to: 0
  9339                           ;main.c: 1403: relay_pulse_timer[ 1 ] =
  9340                           ;main.c: 1404: Read_b_eep(0x43 + 20) * 256 +
  9341                           ;main.c: 1405: Read_b_eep(0x43 + 21);
  9342  00102E  6A09               	clrf	?_Read_b_eep+1,c
  9343  001030  0E58               	movlw	88
  9344  001032  6E08               	movwf	?_Read_b_eep,c
  9345  001034  EC3A  F022         	call	_Read_b_eep	;wreg free
  9346  001038  0100               	movlb	0	; () banked
  9347  00103A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9348  00103C  6A09               	clrf	?_Read_b_eep+1,c
  9349  00103E  0E57               	movlw	87
  9350  001040  6E08               	movwf	?_Read_b_eep,c
  9351  001042  EC3A  F022         	call	_Read_b_eep	;wreg free
  9352  001046  0100               	movlb	0	; () banked
  9353  001048  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9354  00104A  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9355  00104C  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9356  00104E  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9357  001050  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  9358  001052  0E00               	movlw	0
  9359  001054  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9360  001056  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  9361                           
  9362                           ;main.c: 1406: break;
  9363  001058  D11E               	goto	l10905
  9364  00105A                     l10837:
  9365                           
  9366                           ; BSR set to: 0
  9367                           ;main.c: 1409: relay_pulse_timer[ 2 ] =
  9368                           ;main.c: 1410: Read_b_eep(0x43 + 22) * 256 +
  9369                           ;main.c: 1411: Read_b_eep(0x43 + 23);
  9370  00105A  6A09               	clrf	?_Read_b_eep+1,c
  9371  00105C  0E5A               	movlw	90
  9372  00105E  6E08               	movwf	?_Read_b_eep,c
  9373  001060  EC3A  F022         	call	_Read_b_eep	;wreg free
  9374  001064  0100               	movlb	0	; () banked
  9375  001066  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9376  001068  6A09               	clrf	?_Read_b_eep+1,c
  9377  00106A  0E59               	movlw	89
  9378  00106C  6E08               	movwf	?_Read_b_eep,c
  9379  00106E  EC3A  F022         	call	_Read_b_eep	;wreg free
  9380  001072  0100               	movlb	0	; () banked
  9381  001074  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9382  001076  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9383  001078  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9384  00107A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9385  00107C  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  9386  00107E  0E00               	movlw	0
  9387  001080  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9388  001082  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  9389                           
  9390                           ;main.c: 1412: break;
  9391  001084  D108               	goto	l10905
  9392  001086                     l10839:
  9393                           
  9394                           ; BSR set to: 0
  9395                           ;main.c: 1415: relay_pulse_timer[ 3 ] =
  9396                           ;main.c: 1416: Read_b_eep(0x43 + 24) * 256 +
  9397                           ;main.c: 1417: Read_b_eep(0x43 + 25);
  9398  001086  6A09               	clrf	?_Read_b_eep+1,c
  9399  001088  0E5C               	movlw	92
  9400  00108A  6E08               	movwf	?_Read_b_eep,c
  9401  00108C  EC3A  F022         	call	_Read_b_eep	;wreg free
  9402  001090  0100               	movlb	0	; () banked
  9403  001092  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9404  001094  6A09               	clrf	?_Read_b_eep+1,c
  9405  001096  0E5B               	movlw	91
  9406  001098  6E08               	movwf	?_Read_b_eep,c
  9407  00109A  EC3A  F022         	call	_Read_b_eep	;wreg free
  9408  00109E  0100               	movlb	0	; () banked
  9409  0010A0  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9410  0010A2  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9411  0010A4  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9412  0010A6  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9413  0010A8  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  9414  0010AA  0E00               	movlw	0
  9415  0010AC  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9416  0010AE  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  9417                           
  9418                           ;main.c: 1418: break;
  9419  0010B0  D0F2               	goto	l10905
  9420  0010B2                     l10841:
  9421                           
  9422                           ; BSR set to: 0
  9423                           ;main.c: 1421: relay_pulse_timer[ 4 ] =
  9424                           ;main.c: 1422: Read_b_eep(0x43 + 26) * 256 +
  9425                           ;main.c: 1423: Read_b_eep(0x43 + 27);
  9426  0010B2  6A09               	clrf	?_Read_b_eep+1,c
  9427  0010B4  0E5E               	movlw	94
  9428  0010B6  6E08               	movwf	?_Read_b_eep,c
  9429  0010B8  EC3A  F022         	call	_Read_b_eep	;wreg free
  9430  0010BC  0100               	movlb	0	; () banked
  9431  0010BE  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9432  0010C0  6A09               	clrf	?_Read_b_eep+1,c
  9433  0010C2  0E5D               	movlw	93
  9434  0010C4  6E08               	movwf	?_Read_b_eep,c
  9435  0010C6  EC3A  F022         	call	_Read_b_eep	;wreg free
  9436  0010CA  0100               	movlb	0	; () banked
  9437  0010CC  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9438  0010CE  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9439  0010D0  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9440  0010D2  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9441  0010D4  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9442  0010D6  0E00               	movlw	0
  9443  0010D8  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9444  0010DA  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9445                           
  9446                           ;main.c: 1424: break;
  9447  0010DC  D0DC               	goto	l10905
  9448  0010DE                     l10843:
  9449                           
  9450                           ; BSR set to: 0
  9451                           ;main.c: 1427: relay_pulse_timer[ 5 ] =
  9452                           ;main.c: 1428: Read_b_eep(0x43 + 28) * 256 +
  9453                           ;main.c: 1429: Read_b_eep(0x43 + 29);
  9454  0010DE  6A09               	clrf	?_Read_b_eep+1,c
  9455  0010E0  0E60               	movlw	96
  9456  0010E2  6E08               	movwf	?_Read_b_eep,c
  9457  0010E4  EC3A  F022         	call	_Read_b_eep	;wreg free
  9458  0010E8  0100               	movlb	0	; () banked
  9459  0010EA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9460  0010EC  6A09               	clrf	?_Read_b_eep+1,c
  9461  0010EE  0E5F               	movlw	95
  9462  0010F0  6E08               	movwf	?_Read_b_eep,c
  9463  0010F2  EC3A  F022         	call	_Read_b_eep	;wreg free
  9464  0010F6  0100               	movlb	0	; () banked
  9465  0010F8  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9466  0010FA  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9467  0010FC  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9468  0010FE  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9469  001100  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9470  001102  0E00               	movlw	0
  9471  001104  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9472  001106  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9473                           
  9474                           ;main.c: 1430: break;
  9475  001108  D0C6               	goto	l10905
  9476  00110A                     l10845:
  9477                           
  9478                           ; BSR set to: 0
  9479                           ;main.c: 1433: relay_pulse_timer[ 6 ] =
  9480                           ;main.c: 1434: Read_b_eep(0x43 + 30) * 256 +
  9481                           ;main.c: 1435: Read_b_eep(0x43 + 31);
  9482  00110A  6A09               	clrf	?_Read_b_eep+1,c
  9483  00110C  0E62               	movlw	98
  9484  00110E  6E08               	movwf	?_Read_b_eep,c
  9485  001110  EC3A  F022         	call	_Read_b_eep	;wreg free
  9486  001114  0100               	movlb	0	; () banked
  9487  001116  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9488  001118  6A09               	clrf	?_Read_b_eep+1,c
  9489  00111A  0E61               	movlw	97
  9490  00111C  6E08               	movwf	?_Read_b_eep,c
  9491  00111E  EC3A  F022         	call	_Read_b_eep	;wreg free
  9492  001122  0100               	movlb	0	; () banked
  9493  001124  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9494  001126  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9495  001128  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9496  00112A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9497  00112C  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9498  00112E  0E00               	movlw	0
  9499  001130  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9500  001132  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9501                           
  9502                           ;main.c: 1436: break;
  9503  001134  D0B0               	goto	l10905
  9504  001136                     l10847:
  9505                           
  9506                           ; BSR set to: 0
  9507                           ;main.c: 1439: relay_pulse_timer[ 7 ] =
  9508                           ;main.c: 1440: Read_b_eep(0x43 + 32) * 256 +
  9509                           ;main.c: 1441: Read_b_eep(0x43 + 33);
  9510  001136  6A09               	clrf	?_Read_b_eep+1,c
  9511  001138  0E64               	movlw	100
  9512  00113A  6E08               	movwf	?_Read_b_eep,c
  9513  00113C  EC3A  F022         	call	_Read_b_eep	;wreg free
  9514  001140  0100               	movlb	0	; () banked
  9515  001142  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9516  001144  6A09               	clrf	?_Read_b_eep+1,c
  9517  001146  0E63               	movlw	99
  9518  001148  6E08               	movwf	?_Read_b_eep,c
  9519  00114A  EC3A  F022         	call	_Read_b_eep	;wreg free
  9520  00114E  0100               	movlb	0	; () banked
  9521  001150  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9522  001152  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9523  001154  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9524  001156  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9525  001158  6F7E               	movwf	(_relay_pulse_timer+14)& (0+255),b
  9526  00115A  0E00               	movlw	0
  9527  00115C  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9528  00115E  6F7F               	movwf	(_relay_pulse_timer+15)& (0+255),b
  9529                           
  9530                           ;main.c: 1442: break;
  9531  001160  D09A               	goto	l10905
  9532  001162                     l10851:
  9533                           
  9534                           ; BSR set to: 0
  9535  001162  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9536                           
  9537                           ; Switch size 1, requested type "speed"
  9538                           ; Number of cases is 8, Range of values is 19 to 33
  9539                           ; switch strategies available:
  9540                           ; Name         Instructions Cycles
  9541                           ; simple_byte           25    13 (average)
  9542                           ;	Chosen strategy is simple_byte
  9543  001164  0A13               	xorlw	19	; case 19
  9544  001166  E101 D74C          	bz	l10833
  9545  00116A  0A06               	xorlw	6	; case 21
  9546  00116C  E101 D75F          	bz	l10835
  9547  001170  0A02               	xorlw	2	; case 23
  9548  001172  E101 D772          	bz	l10837
  9549  001176  0A0E               	xorlw	14	; case 25
  9550  001178  E086               	bz	l10839
  9551  00117A  0A02               	xorlw	2	; case 27
  9552  00117C  E09A               	bz	l10841
  9553  00117E  0A06               	xorlw	6	; case 29
  9554  001180  E0AE               	bz	l10843
  9555  001182  0A02               	xorlw	2	; case 31
  9556  001184  E0C2               	bz	l10845
  9557  001186  0A3E               	xorlw	62	; case 33
  9558  001188  E0D6               	bz	l10847
  9559  00118A  D085               	goto	l10905
  9560  00118C                     l10853:
  9561                           
  9562                           ; BSR set to: 0
  9563                           ;main.c: 1450: else if ( ( reg >= 34 ) &&
  9564                           ;main.c: 1451: ( reg <= 49 ) ) {
  9565  00118C  0E21               	movlw	33
  9566  00118E  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9567  001190  D04D               	goto	l10883
  9568                           
  9569                           ; BSR set to: 0
  9570  001192  0E32               	movlw	50
  9571  001194  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9572  001196  D04A               	goto	l10883
  9573                           
  9574                           ; BSR set to: 0
  9575                           ;main.c: 1454: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9576  001198  EC6E  F022         	call	_Busy_eep	;wreg free
  9577  00119C  0E43               	movlw	67
  9578  00119E  0100               	movlb	0	; () banked
  9579  0011A0  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9580  0011A2  6E08               	movwf	?_Write_b_eep,c
  9581  0011A4  6A09               	clrf	?_Write_b_eep+1,c
  9582  0011A6  0E00               	movlw	0
  9583  0011A8  2209               	addwfc	?_Write_b_eep+1,f,c
  9584  0011AA  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9585  0011AE  EC53  F020         	call	_Write_b_eep	;wreg free
  9586                           
  9587                           ;main.c: 1455: rv = Read_b_eep(0x43 + reg);
  9588  0011B2  0E43               	movlw	67
  9589  0011B4  0100               	movlb	0	; () banked
  9590  0011B6  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9591  0011B8  6E08               	movwf	?_Read_b_eep,c
  9592  0011BA  6A09               	clrf	?_Read_b_eep+1,c
  9593  0011BC  0E00               	movlw	0
  9594  0011BE  2209               	addwfc	?_Read_b_eep+1,f,c
  9595  0011C0  EC3A  F022         	call	_Read_b_eep	;wreg free
  9596  0011C4  0100               	movlb	0	; () banked
  9597  0011C6  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9598                           
  9599                           ;main.c: 1457: switch ( reg ) {
  9600  0011C8  D016               	goto	l10881
  9601  0011CA                     l10877:
  9602                           
  9603                           ; BSR set to: 0
  9604                           ;main.c: 1502: relay_protection_timer[ 7 ] =
  9605                           ;main.c: 1503: Read_b_eep(0x43 + 48) * 256 +
  9606                           ;main.c: 1504: Read_b_eep(0x43 + 49);
  9607  0011CA  6A09               	clrf	?_Read_b_eep+1,c
  9608  0011CC  0E74               	movlw	116
  9609  0011CE  6E08               	movwf	?_Read_b_eep,c
  9610  0011D0  EC3A  F022         	call	_Read_b_eep	;wreg free
  9611  0011D4  0100               	movlb	0	; () banked
  9612  0011D6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9613  0011D8  6A09               	clrf	?_Read_b_eep+1,c
  9614  0011DA  0E73               	movlw	115
  9615  0011DC  6E08               	movwf	?_Read_b_eep,c
  9616  0011DE  EC3A  F022         	call	_Read_b_eep	;wreg free
  9617  0011E2  0100               	movlb	0	; () banked
  9618  0011E4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9619  0011E6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9620  0011E8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9621  0011EA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9622  0011EC  6F6E               	movwf	(_relay_protection_timer+14)& (0+255),b
  9623  0011EE  0E00               	movlw	0
  9624  0011F0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9625  0011F2  6F6F               	movwf	(_relay_protection_timer+15)& (0+255),b
  9626                           
  9627                           ;main.c: 1505: break;
  9628  0011F4  D050               	goto	l10905
  9629  0011F6                     l10881:
  9630                           
  9631                           ; BSR set to: 0
  9632  0011F6  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9633                           
  9634                           ; Switch size 1, requested type "speed"
  9635                           ; Number of cases is 8, Range of values is 35 to 49
  9636                           ; switch strategies available:
  9637                           ; Name         Instructions Cycles
  9638                           ; simple_byte           25    13 (average)
  9639                           ;	Chosen strategy is simple_byte
  9640  0011F8  0A23               	xorlw	35	; case 35
  9641  0011FA  E102 EFC2  F004    	bz	l10513
  9642  001200  0A06               	xorlw	6	; case 37
  9643  001202  E102 EFF9  F004    	bz	l10533
  9644  001208  0A02               	xorlw	2	; case 39
  9645  00120A  E101 D41D          	bz	l10553
  9646  00120E  0A0E               	xorlw	14	; case 41
  9647  001210  E101 D44E          	bz	l10573
  9648  001214  0A02               	xorlw	2	; case 43
  9649  001216  E101 D47D          	bz	l10593
  9650  00121A  0A06               	xorlw	6	; case 45
  9651  00121C  E101 D4AC          	bz	l10613
  9652  001220  0A02               	xorlw	2	; case 47
  9653  001222  E101 D4DB          	bz	l10633
  9654  001226  0A1E               	xorlw	30	; case 49
  9655  001228  E0D0               	bz	l10877
  9656  00122A  D035               	goto	l10905
  9657  00122C                     l10883:
  9658                           
  9659                           ; BSR set to: 0
  9660                           ;main.c: 1513: else if ( (reg >= 50 ) && (reg <= 65) ) {
  9661  00122C  0E31               	movlw	49
  9662  00122E  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9663  001230  D01C               	goto	l10893
  9664                           
  9665                           ; BSR set to: 0
  9666  001232  0E42               	movlw	66
  9667  001234  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9668  001236  D019               	goto	l10893
  9669                           
  9670                           ; BSR set to: 0
  9671                           ;main.c: 1516: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9672  001238  EC6E  F022         	call	_Busy_eep	;wreg free
  9673  00123C  0E43               	movlw	67
  9674  00123E  0100               	movlb	0	; () banked
  9675  001240  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9676  001242  6E08               	movwf	?_Write_b_eep,c
  9677  001244  6A09               	clrf	?_Write_b_eep+1,c
  9678  001246  0E00               	movlw	0
  9679  001248  2209               	addwfc	?_Write_b_eep+1,f,c
  9680  00124A  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9681  00124E  EC53  F020         	call	_Write_b_eep	;wreg free
  9682  001252                     l10891:
  9683                           
  9684                           ;main.c: 1517: rv = Read_b_eep(0x43 + reg);
  9685  001252  0E43               	movlw	67
  9686  001254  0100               	movlb	0	; () banked
  9687  001256  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9688  001258  6E08               	movwf	?_Read_b_eep,c
  9689  00125A  6A09               	clrf	?_Read_b_eep+1,c
  9690  00125C  0E00               	movlw	0
  9691  00125E  2209               	addwfc	?_Read_b_eep+1,f,c
  9692  001260  EC3A  F022         	call	_Read_b_eep	;wreg free
  9693  001264                     L27:
  9694  001264  0100               	movlb	0	; () banked
  9695  001266  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9696                           
  9697                           ;main.c: 1519: }
  9698  001268  D016               	goto	l10905
  9699  00126A                     l10893:
  9700                           
  9701                           ; BSR set to: 0
  9702                           ;main.c: 1520: else if ( (reg >= 72) &&
  9703                           ;main.c: 1521: (reg < (72 + 7 * 8)) ) {
  9704  00126A  0E47               	movlw	71
  9705  00126C  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9706  00126E  D013               	goto	l10905
  9707                           
  9708                           ; BSR set to: 0
  9709  001270  0E80               	movlw	128
  9710  001272  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9711  001274  D010               	goto	l10905
  9712                           
  9713                           ; BSR set to: 0
  9714                           ;main.c: 1522: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9715  001276  EC6E  F022         	call	_Busy_eep	;wreg free
  9716  00127A  0E43               	movlw	67
  9717  00127C  0100               	movlb	0	; () banked
  9718  00127E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9719  001280  6E08               	movwf	?_Write_b_eep,c
  9720  001282  6A09               	clrf	?_Write_b_eep+1,c
  9721  001284  0E00               	movlw	0
  9722  001286  2209               	addwfc	?_Write_b_eep+1,f,c
  9723  001288  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9724  00128C  EC53  F020         	call	_Write_b_eep	;wreg free
  9725                           
  9726                           ;main.c: 1523: calculateSetFilterMask();
  9727  001290  ECA3  F00C         	call	_calculateSetFilterMask	;wreg free
  9728  001294  D7DE               	goto	l10891
  9729  001296                     l10905:
  9730                           
  9731                           ; BSR set to: 0
  9732                           ;main.c: 1525: }
  9733                           ;main.c: 1531: if ( bInfoEvent ) {
  9734  001296  51CA               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
  9735  001298  E035               	bz	l10925
  9736                           
  9737                           ; BSR set to: 0
  9738                           ;main.c: 1533: unsigned char val;
  9739                           ;main.c: 1534: val = Read_b_eep(0x43 + 10 + (reg - 2));
  9740  00129A  0E4B               	movlw	75
  9741  00129C  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9742  00129E  6E08               	movwf	?_Read_b_eep,c
  9743  0012A0  6A09               	clrf	?_Read_b_eep+1,c
  9744  0012A2  0E00               	movlw	0
  9745  0012A4  2209               	addwfc	?_Read_b_eep+1,f,c
  9746  0012A6  EC3A  F022         	call	_Read_b_eep	;wreg free
  9747  0012AA  0100               	movlb	0	; () banked
  9748  0012AC  6FCB               	movwf	vscp_writeAppReg@val_682& (0+255),b
  9749                           
  9750                           ; BSR set to: 0
  9751                           ;main.c: 1537: if ( bOn ) {
  9752  0012AE  51CD               	movf	vscp_writeAppReg@bOn& (0+255),w,b
  9753  0012B0  E015               	bz	l404
  9754                           
  9755                           ; BSR set to: 0
  9756                           ;main.c: 1539: if ( val & 0x08 ) {
  9757  0012B2  A7CB               	btfss	vscp_writeAppReg@val_682& (0+255),3,b
  9758  0012B4  D008               	goto	l10915
  9759                           
  9760                           ; BSR set to: 0
  9761                           ;main.c: 1540: SendInformationEvent( reg - 2,
  9762                           ;main.c: 1541: 20,
  9763                           ;main.c: 1542: 3 );
  9764  0012B6  0E14               	movlw	20
  9765  0012B8  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9766  0012BA  0E03               	movlw	3
  9767  0012BC  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9768  0012BE  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9769  0012C0  0FFE               	addlw	254
  9770  0012C2  EC96  F01F         	call	_SendInformationEvent
  9771  0012C6                     l10915:
  9772                           
  9773                           ; BSR set to: 0
  9774                           ;main.c: 1543: }
  9775                           ;main.c: 1545: if ( val & 0x20 ) {
  9776  0012C6  ABCB               	btfss	vscp_writeAppReg@val_682& (0+255),5,b
  9777  0012C8  D01D               	goto	l10925
  9778                           
  9779                           ; BSR set to: 0
  9780                           ;main.c: 1546: SendInformationEvent( reg - 2,
  9781                           ;main.c: 1547: 20,
  9782                           ;main.c: 1548: 25 );
  9783  0012CA  0E14               	movlw	20
  9784  0012CC  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9785  0012CE  0E19               	movlw	25
  9786  0012D0  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9787  0012D2  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9788  0012D4  0FFE               	addlw	254
  9789  0012D6  EC96  F01F         	call	_SendInformationEvent
  9790  0012DA  D014               	goto	l10925
  9791  0012DC                     l404:
  9792                           
  9793                           ; BSR set to: 0
  9794                           ;main.c: 1552: else {
  9795                           ;main.c: 1554: if ( val & 0x10 ) {
  9796  0012DC  A9CB               	btfss	vscp_writeAppReg@val_682& (0+255),4,b
  9797  0012DE  D008               	goto	l10921
  9798                           
  9799                           ; BSR set to: 0
  9800                           ;main.c: 1555: SendInformationEvent( reg - 2,
  9801                           ;main.c: 1556: 20,
  9802                           ;main.c: 1557: 4 );
  9803  0012E0  0E14               	movlw	20
  9804  0012E2  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9805  0012E4  0E04               	movlw	4
  9806  0012E6  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9807  0012E8  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9808  0012EA  0FFE               	addlw	254
  9809  0012EC  EC96  F01F         	call	_SendInformationEvent
  9810  0012F0                     l10921:
  9811                           
  9812                           ; BSR set to: 0
  9813                           ;main.c: 1558: }
  9814                           ;main.c: 1560: if ( val & 0x40 ) {
  9815  0012F0  ADCB               	btfss	vscp_writeAppReg@val_682& (0+255),6,b
  9816  0012F2  D008               	goto	l10925
  9817                           
  9818                           ; BSR set to: 0
  9819                           ;main.c: 1561: SendInformationEvent( reg - 2,
  9820                           ;main.c: 1562: 20,
  9821                           ;main.c: 1563: 24 );
  9822  0012F4  0E14               	movlw	20
  9823  0012F6  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9824  0012F8  0E18               	movlw	24
  9825  0012FA  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9826  0012FC  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9827  0012FE  0FFE               	addlw	254
  9828  001300  EC96  F01F         	call	_SendInformationEvent
  9829  001304                     l10925:
  9830                           
  9831                           ; BSR set to: 0
  9832                           ;main.c: 1564: }
  9833                           ;main.c: 1565: }
  9834                           ;main.c: 1566: }
  9835                           ;main.c: 1568: return rv;
  9836  001304  51CC               	movf	vscp_writeAppReg@rv& (0+255),w,b
  9837                           
  9838                           ; BSR set to: 0
  9839  001306  0012               	return	
  9840  001308                     __end_of_vscp_writeAppReg:
  9841                           	opt stack 0
  9842                           tblptru	equ	0xFF8
  9843                           prodh	equ	0xFF4
  9844                           prodl	equ	0xFF3
  9845                           postinc0	equ	0xFEE
  9846                           wreg	equ	0xFE8
  9847                           indf2	equ	0xFDF
  9848                           postinc2	equ	0xFDE
  9849                           postdec2	equ	0xFDD
  9850                           fsr2h	equ	0xFDA
  9851                           fsr2l	equ	0xFD9
  9852                           status	equ	0xFD8
  9853                           
  9854 ;; *************** function _calculateSetFilterMask *****************
  9855 ;; Defined at:
  9856 ;;		line 2681 in file "../main.c"
  9857 ;; Parameters:    Size  Location     Type
  9858 ;;		None
  9859 ;; Auto vars:     Size  Location     Type
  9860 ;;  rowfilter       4   61[COMRAM] unsigned long 
  9861 ;;  filter          4   57[COMRAM] unsigned long 
  9862 ;;  mask            4   53[COMRAM] unsigned long 
  9863 ;;  rowmask         4   48[COMRAM] unsigned long 
  9864 ;;  i               1   66[COMRAM] unsigned char 
  9865 ;;  j               1   65[COMRAM] unsigned char 
  9866 ;;  lastOID         1   52[COMRAM] unsigned char 
  9867 ;; Return value:  Size  Location     Type
  9868 ;;		None               void
  9869 ;; Registers used:
  9870 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9871 ;; Tracked objects:
  9872 ;;		On entry : 0/0
  9873 ;;		On exit  : 0/0
  9874 ;;		Unchanged: 0/0
  9875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9876 ;;      Params:         0       0       0       0       0       0       0
  9877 ;;      Locals:        19       0       0       0       0       0       0
  9878 ;;      Temps:         31       0       0       0       0       0       0
  9879 ;;      Totals:        50       0       0       0       0       0       0
  9880 ;;Total ram usage:       50 bytes
  9881 ;; Hardware stack levels used:    1
  9882 ;; Hardware stack levels required when called:    3
  9883 ;; This function calls:
  9884 ;;		_Read_b_eep
  9885 ;;		_ECANSetOperationMode
  9886 ;;		__CANIDToRegs
  9887 ;; This function is called by:
  9888 ;;		_vscp_writeAppReg
  9889 ;; This function uses a non-reentrant model
  9890 ;;
  9891                           
  9892                           	psect	text25
  9893  001946                     __ptext25:
  9894                           	opt stack 0
  9895  001946                     _calculateSetFilterMask:
  9896                           	opt stack 24
  9897                           
  9898                           ;main.c: 2682: uint8_t i,j;
  9899                           ;main.c: 2683: uint8_t lastOID;
  9900                           ;main.c: 2684: uint32_t rowmask;
  9901                           ;main.c: 2685: uint32_t rowfilter;
  9902                           ;main.c: 2688: uint32_t mask = 0xffffffff;
  9903                           
  9904                           ; BSR set to: 0
  9905                           ;incstack = 0
  9906                           ;incstack = 0
  9907  001946  6836               	setf	calculateSetFilterMask@mask,c
  9908  001948  6837               	setf	calculateSetFilterMask@mask+1,c
  9909  00194A  6838               	setf	calculateSetFilterMask@mask+2,c
  9910  00194C  6839               	setf	calculateSetFilterMask@mask+3,c
  9911                           
  9912                           ;main.c: 2689: uint32_t filter = 0;
  9913  00194E  6A3A               	clrf	calculateSetFilterMask@filter,c
  9914  001950  6A3B               	clrf	calculateSetFilterMask@filter+1,c
  9915  001952  6A3C               	clrf	calculateSetFilterMask@filter+2,c
  9916  001954  6A3D               	clrf	calculateSetFilterMask@filter+3,c
  9917                           
  9918                           ;main.c: 2692: for ( i=0; i < 7; i++ ) {
  9919  001956  6A43               	clrf	calculateSetFilterMask@i,c
  9920  001958                     l9027:
  9921                           
  9922                           ;main.c: 2695: if ( Read_b_eep(0x43 + 8*i + 1) & 0x80 ) {
  9923  001958  5043               	movf	calculateSetFilterMask@i,w,c
  9924  00195A  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
  9925  00195C  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
  9926  00195E  90D8               	bcf	status,0,c
  9927  001960  3612               	rlcf	??_calculateSetFilterMask,f,c
  9928  001962  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9929  001964  90D8               	bcf	status,0,c
  9930  001966  3612               	rlcf	??_calculateSetFilterMask,f,c
  9931  001968  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9932  00196A  90D8               	bcf	status,0,c
  9933  00196C  3612               	rlcf	??_calculateSetFilterMask,f,c
  9934  00196E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9935  001970  0E44               	movlw	68
  9936  001972  2412               	addwf	??_calculateSetFilterMask,w,c
  9937  001974  6E08               	movwf	?_Read_b_eep,c
  9938  001976  0E00               	movlw	0
  9939  001978  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9940  00197A  6E09               	movwf	?_Read_b_eep+1,c
  9941  00197C  EC3A  F022         	call	_Read_b_eep	;wreg free
  9942  001980  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9943  001982  AE14               	btfss	??_calculateSetFilterMask+2,7,c
  9944  001984  D1E8               	goto	l9071
  9945                           
  9946                           ;main.c: 2704: rowmask =
  9947                           ;main.c: 2706: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 2 ) << 23 ) |
  9948                           ;main.c: 2708: ( (uint32_t)Read_b_eep(0x43 + 8*i + 2) << 16 ) |
  9949                           ;main.c: 2710: ( (uint32_t)Read_b_eep(0x43 + 8*i + 4) << 8 ) |
  9950                           ;main.c: 2712: 0xff;
  9951  001986  5043               	movf	calculateSetFilterMask@i,w,c
  9952  001988  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
  9953  00198A  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
  9954  00198C  90D8               	bcf	status,0,c
  9955  00198E  3612               	rlcf	??_calculateSetFilterMask,f,c
  9956  001990  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9957  001992  90D8               	bcf	status,0,c
  9958  001994  3612               	rlcf	??_calculateSetFilterMask,f,c
  9959  001996  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9960  001998  90D8               	bcf	status,0,c
  9961  00199A  3612               	rlcf	??_calculateSetFilterMask,f,c
  9962  00199C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9963  00199E  0E47               	movlw	71
  9964  0019A0  2412               	addwf	??_calculateSetFilterMask,w,c
  9965  0019A2  6E08               	movwf	?_Read_b_eep,c
  9966  0019A4  0E00               	movlw	0
  9967  0019A6  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9968  0019A8  6E09               	movwf	?_Read_b_eep+1,c
  9969  0019AA  EC3A  F022         	call	_Read_b_eep	;wreg free
  9970  0019AE  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9971  0019B0  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
  9972  0019B4  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
  9973  0019B6  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
  9974  0019B8  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
  9975  0019BA  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
  9976  0019BE  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
  9977  0019C2  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
  9978  0019C6  6A15               	clrf	??_calculateSetFilterMask+3,c
  9979  0019C8  5043               	movf	calculateSetFilterMask@i,w,c
  9980  0019CA  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
  9981  0019CC  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
  9982  0019CE  90D8               	bcf	status,0,c
  9983  0019D0  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9984  0019D2  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9985  0019D4  90D8               	bcf	status,0,c
  9986  0019D6  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9987  0019D8  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9988  0019DA  90D8               	bcf	status,0,c
  9989  0019DC  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9990  0019DE  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9991  0019E0  0E45               	movlw	69
  9992  0019E2  2419               	addwf	??_calculateSetFilterMask+7,w,c
  9993  0019E4  6E08               	movwf	?_Read_b_eep,c
  9994  0019E6  0E00               	movlw	0
  9995  0019E8  201A               	addwfc	??_calculateSetFilterMask+8,w,c
  9996  0019EA  6E09               	movwf	?_Read_b_eep+1,c
  9997  0019EC  EC3A  F022         	call	_Read_b_eep	;wreg free
  9998  0019F0  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
  9999  0019F2  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 10000  0019F6  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 10001  0019F8  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 10002  0019FA  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 10003  0019FC  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 10004  001A00  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 10005  001A04  6A1D               	clrf	??_calculateSetFilterMask+11,c
 10006  001A06  6A1C               	clrf	??_calculateSetFilterMask+10,c
 10007  001A08  5043               	movf	calculateSetFilterMask@i,w,c
 10008  001A0A  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 10009  001A0C  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 10010  001A0E  90D8               	bcf	status,0,c
 10011  001A10  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10012  001A12  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10013  001A14  90D8               	bcf	status,0,c
 10014  001A16  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10015  001A18  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10016  001A1A  90D8               	bcf	status,0,c
 10017  001A1C  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10018  001A1E  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10019  001A20  0E44               	movlw	68
 10020  001A22  2420               	addwf	??_calculateSetFilterMask+14,w,c
 10021  001A24  6E08               	movwf	?_Read_b_eep,c
 10022  001A26  0E00               	movlw	0
 10023  001A28  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 10024  001A2A  6E09               	movwf	?_Read_b_eep+1,c
 10025  001A2C  EC3A  F022         	call	_Read_b_eep	;wreg free
 10026  001A30  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 10027  001A32  0E02               	movlw	2
 10028  001A34  1622               	andwf	??_calculateSetFilterMask+16,f,c
 10029  001A36  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 10030  001A3A  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 10031  001A3C  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 10032  001A3E  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 10033  001A40  0E17               	movlw	23
 10034  001A42                     u10055:
 10035  001A42  90D8               	bcf	status,0,c
 10036  001A44  3623               	rlcf	??_calculateSetFilterMask+17,f,c
 10037  001A46  3624               	rlcf	??_calculateSetFilterMask+18,f,c
 10038  001A48  3625               	rlcf	??_calculateSetFilterMask+19,f,c
 10039  001A4A  3626               	rlcf	??_calculateSetFilterMask+20,f,c
 10040  001A4C  2EE8               	decfsz	wreg,f,c
 10041  001A4E  D7F9               	goto	u10055
 10042  001A50  501C               	movf	??_calculateSetFilterMask+10,w,c
 10043  001A52  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 10044  001A54  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 10045  001A56  501D               	movf	??_calculateSetFilterMask+11,w,c
 10046  001A58  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 10047  001A5A  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 10048  001A5C  501E               	movf	??_calculateSetFilterMask+12,w,c
 10049  001A5E  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 10050  001A60  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 10051  001A62  501F               	movf	??_calculateSetFilterMask+13,w,c
 10052  001A64  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 10053  001A66  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 10054  001A68  5015               	movf	??_calculateSetFilterMask+3,w,c
 10055  001A6A  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 10056  001A6C  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 10057  001A6E  5016               	movf	??_calculateSetFilterMask+4,w,c
 10058  001A70  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 10059  001A72  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 10060  001A74  5017               	movf	??_calculateSetFilterMask+5,w,c
 10061  001A76  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 10062  001A78  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 10063  001A7A  5018               	movf	??_calculateSetFilterMask+6,w,c
 10064  001A7C  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10065  001A7E  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10066  001A80  0EFF               	movlw	255
 10067  001A82  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10068  001A84  6E31               	movwf	calculateSetFilterMask@rowmask,c
 10069  001A86  502C               	movf	??_calculateSetFilterMask+26,w,c
 10070  001A88  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
 10071  001A8A  502D               	movf	??_calculateSetFilterMask+27,w,c
 10072  001A8C  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
 10073  001A8E  502E               	movf	??_calculateSetFilterMask+28,w,c
 10074  001A90  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
 10075                           
 10076                           ;main.c: 2713: ;
 10077                           ;main.c: 2718: rowfilter =
 10078                           ;main.c: 2720: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 1 ) << 24 ) |
 10079                           ;main.c: 2722: ( (uint32_t)Read_b_eep(0x43 + 8*i + 3) << 16 ) |
 10080                           ;main.c: 2724: ( (uint32_t)Read_b_eep(0x43 + 8*i + 5) << 8 ) |
 10081                           ;main.c: 2727: Read_b_eep(0x43 + 8*i);
 10082  001A92  5043               	movf	calculateSetFilterMask@i,w,c
 10083  001A94  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10084  001A96  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10085  001A98  90D8               	bcf	status,0,c
 10086  001A9A  3612               	rlcf	??_calculateSetFilterMask,f,c
 10087  001A9C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10088  001A9E  90D8               	bcf	status,0,c
 10089  001AA0  3612               	rlcf	??_calculateSetFilterMask,f,c
 10090  001AA2  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10091  001AA4  90D8               	bcf	status,0,c
 10092  001AA6  3612               	rlcf	??_calculateSetFilterMask,f,c
 10093  001AA8  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10094  001AAA  0E48               	movlw	72
 10095  001AAC  2412               	addwf	??_calculateSetFilterMask,w,c
 10096  001AAE  6E08               	movwf	?_Read_b_eep,c
 10097  001AB0  0E00               	movlw	0
 10098  001AB2  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10099  001AB4  6E09               	movwf	?_Read_b_eep+1,c
 10100  001AB6  EC3A  F022         	call	_Read_b_eep	;wreg free
 10101  001ABA  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10102  001ABC  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 10103  001AC0  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 10104  001AC2  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10105  001AC4  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 10106  001AC6  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 10107  001ACA  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 10108  001ACE  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 10109  001AD2  6A15               	clrf	??_calculateSetFilterMask+3,c
 10110  001AD4  5043               	movf	calculateSetFilterMask@i,w,c
 10111  001AD6  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 10112  001AD8  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 10113  001ADA  90D8               	bcf	status,0,c
 10114  001ADC  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10115  001ADE  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10116  001AE0  90D8               	bcf	status,0,c
 10117  001AE2  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10118  001AE4  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10119  001AE6  90D8               	bcf	status,0,c
 10120  001AE8  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10121  001AEA  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10122  001AEC  0E46               	movlw	70
 10123  001AEE  2419               	addwf	??_calculateSetFilterMask+7,w,c
 10124  001AF0  6E08               	movwf	?_Read_b_eep,c
 10125  001AF2  0E00               	movlw	0
 10126  001AF4  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 10127  001AF6  6E09               	movwf	?_Read_b_eep+1,c
 10128  001AF8  EC3A  F022         	call	_Read_b_eep	;wreg free
 10129  001AFC  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 10130  001AFE  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 10131  001B02  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 10132  001B04  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 10133  001B06  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 10134  001B08  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 10135  001B0C  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 10136  001B10  6A1D               	clrf	??_calculateSetFilterMask+11,c
 10137  001B12  6A1C               	clrf	??_calculateSetFilterMask+10,c
 10138  001B14  5043               	movf	calculateSetFilterMask@i,w,c
 10139  001B16  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 10140  001B18  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 10141  001B1A  90D8               	bcf	status,0,c
 10142  001B1C  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10143  001B1E  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10144  001B20  90D8               	bcf	status,0,c
 10145  001B22  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10146  001B24  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10147  001B26  90D8               	bcf	status,0,c
 10148  001B28  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10149  001B2A  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10150  001B2C  0E44               	movlw	68
 10151  001B2E  2420               	addwf	??_calculateSetFilterMask+14,w,c
 10152  001B30  6E08               	movwf	?_Read_b_eep,c
 10153  001B32  0E00               	movlw	0
 10154  001B34  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 10155  001B36  6E09               	movwf	?_Read_b_eep+1,c
 10156  001B38  EC3A  F022         	call	_Read_b_eep	;wreg free
 10157  001B3C  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 10158  001B3E  0E01               	movlw	1
 10159  001B40  1622               	andwf	??_calculateSetFilterMask+16,f,c
 10160  001B42  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 10161  001B46  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 10162  001B48  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 10163  001B4A  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 10164  001B4C  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
 10165  001B50  6A25               	clrf	??_calculateSetFilterMask+19,c
 10166  001B52  6A24               	clrf	??_calculateSetFilterMask+18,c
 10167  001B54  6A23               	clrf	??_calculateSetFilterMask+17,c
 10168  001B56  501C               	movf	??_calculateSetFilterMask+10,w,c
 10169  001B58  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 10170  001B5A  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 10171  001B5C  501D               	movf	??_calculateSetFilterMask+11,w,c
 10172  001B5E  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 10173  001B60  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 10174  001B62  501E               	movf	??_calculateSetFilterMask+12,w,c
 10175  001B64  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 10176  001B66  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 10177  001B68  501F               	movf	??_calculateSetFilterMask+13,w,c
 10178  001B6A  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 10179  001B6C  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 10180  001B6E  5015               	movf	??_calculateSetFilterMask+3,w,c
 10181  001B70  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 10182  001B72  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 10183  001B74  5016               	movf	??_calculateSetFilterMask+4,w,c
 10184  001B76  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 10185  001B78  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 10186  001B7A  5017               	movf	??_calculateSetFilterMask+5,w,c
 10187  001B7C  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 10188  001B7E  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 10189  001B80  5018               	movf	??_calculateSetFilterMask+6,w,c
 10190  001B82  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10191  001B84  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10192  001B86  5043               	movf	calculateSetFilterMask@i,w,c
 10193  001B88  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
 10194  001B8A  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
 10195  001B8C  90D8               	bcf	status,0,c
 10196  001B8E  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10197  001B90  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10198  001B92  90D8               	bcf	status,0,c
 10199  001B94  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10200  001B96  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10201  001B98  90D8               	bcf	status,0,c
 10202  001B9A  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10203  001B9C  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10204  001B9E  0E43               	movlw	67
 10205  001BA0  242F               	addwf	??_calculateSetFilterMask+29,w,c
 10206  001BA2  6E08               	movwf	?_Read_b_eep,c
 10207  001BA4  0E00               	movlw	0
 10208  001BA6  2030               	addwfc	??_calculateSetFilterMask+30,w,c
 10209  001BA8  6E09               	movwf	?_Read_b_eep+1,c
 10210  001BAA  EC3A  F022         	call	_Read_b_eep	;wreg free
 10211  001BAE  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10212  001BB0  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
 10213  001BB2  502C               	movf	??_calculateSetFilterMask+26,w,c
 10214  001BB4  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
 10215  001BB6  502D               	movf	??_calculateSetFilterMask+27,w,c
 10216  001BB8  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
 10217  001BBA  502E               	movf	??_calculateSetFilterMask+28,w,c
 10218  001BBC  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
 10219                           
 10220                           ;main.c: 2729: if ( 0 == i ) filter = rowfilter;
 10221  001BBE  6643               	tstfsz	calculateSetFilterMask@i,c
 10222  001BC0  D008               	goto	l9035
 10223  001BC2  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
 10224  001BC6  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
 10225  001BCA  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
 10226  001BCE  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
 10227  001BD2                     l9035:
 10228                           
 10229                           ;main.c: 2733: mask &= rowmask;
 10230  001BD2  5031               	movf	calculateSetFilterMask@rowmask,w,c
 10231  001BD4  1636               	andwf	calculateSetFilterMask@mask,f,c
 10232  001BD6  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
 10233  001BD8  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10234  001BDA  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
 10235  001BDC  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10236  001BDE  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
 10237  001BE0  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10238                           
 10239                           ;main.c: 2738: for ( j=0; j<32; j++ ) {
 10240  001BE2  6A42               	clrf	calculateSetFilterMask@j,c
 10241  001BE4                     l9043:
 10242                           
 10243                           ;main.c: 2740: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
 10244  001BE4  5042               	movf	calculateSetFilterMask@j,w,c
 10245  001BE6  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
 10246  001BEA  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
 10247  001BEE  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
 10248  001BF2  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
 10249  001BF6  2AE8               	incf	wreg,f,c
 10250  001BF8  D005               	goto	u10070
 10251  001BFA                     u10075:
 10252  001BFA  90D8               	bcf	status,0,c
 10253  001BFC  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10254  001BFE  3214               	rrcf	??_calculateSetFilterMask+2,f,c
 10255  001C00  3213               	rrcf	??_calculateSetFilterMask+1,f,c
 10256  001C02  3212               	rrcf	??_calculateSetFilterMask,f,c
 10257  001C04                     u10070:
 10258  001C04  2EE8               	decfsz	wreg,f,c
 10259  001C06  D7F9               	goto	u10075
 10260  001C08  0E01               	movlw	1
 10261  001C0A  1612               	andwf	??_calculateSetFilterMask,f,c
 10262  001C0C  5042               	movf	calculateSetFilterMask@j,w,c
 10263  001C0E  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
 10264  001C12  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
 10265  001C16  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
 10266  001C1A  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
 10267  001C1E  2AE8               	incf	wreg,f,c
 10268  001C20  D005               	goto	u10080
 10269  001C22                     u10085:
 10270  001C22  90D8               	bcf	status,0,c
 10271  001C24  3219               	rrcf	??_calculateSetFilterMask+7,f,c
 10272  001C26  3218               	rrcf	??_calculateSetFilterMask+6,f,c
 10273  001C28  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10274  001C2A  3216               	rrcf	??_calculateSetFilterMask+4,f,c
 10275  001C2C                     u10080:
 10276  001C2C  2EE8               	decfsz	wreg,f,c
 10277  001C2E  D7F9               	goto	u10085
 10278  001C30  5016               	movf	??_calculateSetFilterMask+4,w,c
 10279  001C32  0B01               	andlw	1
 10280  001C34  1812               	xorwf	??_calculateSetFilterMask,w,c
 10281  001C36  E01D               	bz	l9047
 10282                           
 10283                           ;main.c: 2741: mask &= ~(1<<j);
 10284  001C38  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
 10285  001C3C  0E01               	movlw	1
 10286  001C3E  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10287  001C40  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10288  001C42  2A12               	incf	??_calculateSetFilterMask,f,c
 10289  001C44  D003               	goto	u10104
 10290  001C46                     u10105:
 10291  001C46  90D8               	bcf	status,0,c
 10292  001C48  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10293  001C4A  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10294  001C4C                     u10104:
 10295  001C4C  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10296  001C4E  D7FB               	goto	u10105
 10297  001C50  1C13               	comf	??_calculateSetFilterMask+1,w,c
 10298  001C52  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10299  001C54  1C14               	comf	??_calculateSetFilterMask+2,w,c
 10300  001C56  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
 10301  001C58  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10302  001C5A  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10303  001C5C  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
 10304  001C5E  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
 10305  001C60  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10306  001C62  5015               	movf	??_calculateSetFilterMask+3,w,c
 10307  001C64  1636               	andwf	calculateSetFilterMask@mask,f,c
 10308  001C66  5016               	movf	??_calculateSetFilterMask+4,w,c
 10309  001C68  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10310  001C6A  5017               	movf	??_calculateSetFilterMask+5,w,c
 10311  001C6C  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10312  001C6E  5018               	movf	??_calculateSetFilterMask+6,w,c
 10313  001C70  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10314  001C72                     l9047:
 10315  001C72  2A42               	incf	calculateSetFilterMask@j,f,c
 10316  001C74  0E1F               	movlw	31
 10317  001C76  6442               	cpfsgt	calculateSetFilterMask@j,c
 10318  001C78  D7B5               	goto	l9043
 10319                           
 10320                           ;main.c: 2742: }
 10321                           ;main.c: 2743: }
 10322                           ;main.c: 2749: filter &= rowfilter;
 10323  001C7A  503E               	movf	calculateSetFilterMask@rowfilter,w,c
 10324  001C7C  163A               	andwf	calculateSetFilterMask@filter,f,c
 10325  001C7E  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
 10326  001C80  163B               	andwf	calculateSetFilterMask@filter+1,f,c
 10327  001C82  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
 10328  001C84  163C               	andwf	calculateSetFilterMask@filter+2,f,c
 10329  001C86  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
 10330  001C88  163D               	andwf	calculateSetFilterMask@filter+3,f,c
 10331                           
 10332                           ;main.c: 2757: }
 10333                           ;main.c: 2759: if (i) {
 10334                           
 10335                           ;main.c: 2752: if ( !Read_b_eep(0x43 + 8*i + 1) & 0x40 ) {
 10336  001C8A  5043               	movf	calculateSetFilterMask@i,w,c
 10337  001C8C  E04F               	bz	l9067
 10338                           
 10339                           ;main.c: 2762: for (j = 0; j < 8; j++) {
 10340  001C8E  6A42               	clrf	calculateSetFilterMask@j,c
 10341  001C90                     l9061:
 10342                           
 10343                           ;main.c: 2763: if ((lastOID >> i & 1)
 10344                           ;main.c: 2764: != (Read_b_eep(0x43 + 8 * i) >> i & 1)) {
 10345  001C90  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10346  001C94  5043               	movf	calculateSetFilterMask@i,w,c
 10347  001C96  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10348  001C98  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10349  001C9A  90D8               	bcf	status,0,c
 10350  001C9C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10351  001C9E  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10352  001CA0  90D8               	bcf	status,0,c
 10353  001CA2  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10354  001CA4  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10355  001CA6  90D8               	bcf	status,0,c
 10356  001CA8  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10357  001CAA  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10358  001CAC  0E43               	movlw	67
 10359  001CAE  2413               	addwf	??_calculateSetFilterMask+1,w,c
 10360  001CB0  6E08               	movwf	?_Read_b_eep,c
 10361  001CB2  0E00               	movlw	0
 10362  001CB4  2014               	addwfc	??_calculateSetFilterMask+2,w,c
 10363  001CB6  6E09               	movwf	?_Read_b_eep+1,c
 10364  001CB8  EC3A  F022         	call	_Read_b_eep	;wreg free
 10365  001CBC  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10366  001CBE  2A12               	incf	??_calculateSetFilterMask,f,c
 10367  001CC0  D002               	goto	u10134
 10368  001CC2                     u10135:
 10369  001CC2  90D8               	bcf	status,0,c
 10370  001CC4  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10371  001CC6                     u10134:
 10372  001CC6  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10373  001CC8  D7FC               	goto	u10135
 10374  001CCA  0E01               	movlw	1
 10375  001CCC  1615               	andwf	??_calculateSetFilterMask+3,f,c
 10376  001CCE  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 10377  001CD2  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 10378  001CD6  2A16               	incf	??_calculateSetFilterMask+4,f,c
 10379  001CD8  D002               	goto	u10144
 10380  001CDA                     u10145:
 10381  001CDA  90D8               	bcf	status,0,c
 10382  001CDC  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10383  001CDE                     u10144:
 10384  001CDE  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 10385  001CE0  D7FC               	goto	u10145
 10386  001CE2  5017               	movf	??_calculateSetFilterMask+5,w,c
 10387  001CE4  0B01               	andlw	1
 10388  001CE6  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 10389  001CE8  E01D               	bz	l9065
 10390                           
 10391                           ;main.c: 2765: mask &= (1 << i);
 10392  001CEA  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10393  001CEE  0E01               	movlw	1
 10394  001CF0  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10395  001CF2  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10396  001CF4  2A12               	incf	??_calculateSetFilterMask,f,c
 10397  001CF6  D003               	goto	u10164
 10398  001CF8                     u10165:
 10399  001CF8  90D8               	bcf	status,0,c
 10400  001CFA  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10401  001CFC  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10402  001CFE                     u10164:
 10403  001CFE  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10404  001D00  D7FB               	goto	u10165
 10405  001D02  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 10406  001D06  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 10407  001D0A  0E00               	movlw	0
 10408  001D0C  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10409  001D0E  0EFF               	movlw	255
 10410  001D10  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 10411  001D12  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10412  001D14  5015               	movf	??_calculateSetFilterMask+3,w,c
 10413  001D16  1636               	andwf	calculateSetFilterMask@mask,f,c
 10414  001D18  5016               	movf	??_calculateSetFilterMask+4,w,c
 10415  001D1A  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10416  001D1C  5017               	movf	??_calculateSetFilterMask+5,w,c
 10417  001D1E  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10418  001D20  5018               	movf	??_calculateSetFilterMask+6,w,c
 10419  001D22  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10420  001D24                     l9065:
 10421  001D24  2A42               	incf	calculateSetFilterMask@j,f,c
 10422  001D26  0E07               	movlw	7
 10423  001D28  6442               	cpfsgt	calculateSetFilterMask@j,c
 10424  001D2A  D7B2               	goto	l9061
 10425  001D2C                     l9067:
 10426                           
 10427                           ;main.c: 2766: }
 10428                           ;main.c: 2767: }
 10429                           ;main.c: 2769: lastOID = Read_b_eep(0x43 + 8 * i);
 10430  001D2C  5043               	movf	calculateSetFilterMask@i,w,c
 10431  001D2E  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10432  001D30  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10433  001D32  90D8               	bcf	status,0,c
 10434  001D34  3612               	rlcf	??_calculateSetFilterMask,f,c
 10435  001D36  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10436  001D38  90D8               	bcf	status,0,c
 10437  001D3A  3612               	rlcf	??_calculateSetFilterMask,f,c
 10438  001D3C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10439  001D3E  90D8               	bcf	status,0,c
 10440  001D40  3612               	rlcf	??_calculateSetFilterMask,f,c
 10441  001D42  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10442  001D44  0E43               	movlw	67
 10443  001D46  2412               	addwf	??_calculateSetFilterMask,w,c
 10444  001D48  6E08               	movwf	?_Read_b_eep,c
 10445  001D4A  0E00               	movlw	0
 10446  001D4C  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10447  001D4E  6E09               	movwf	?_Read_b_eep+1,c
 10448  001D50  EC3A  F022         	call	_Read_b_eep	;wreg free
 10449  001D54  6E35               	movwf	calculateSetFilterMask@lastOID,c
 10450  001D56                     l9071:
 10451  001D56  2A43               	incf	calculateSetFilterMask@i,f,c
 10452  001D58  0E06               	movlw	6
 10453  001D5A  6443               	cpfsgt	calculateSetFilterMask@i,c
 10454  001D5C  D5FD               	goto	l9027
 10455                           
 10456                           ;main.c: 2775: }
 10457                           ;main.c: 2777: }
 10458                           ;main.c: 2778: }
 10459                           ;main.c: 2781: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 10460  001D5E  0E80               	movlw	128
 10461  001D60  ECE6  F021         	call	_ECANSetOperationMode
 10462                           
 10463                           ;main.c: 2784: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 10464  001D64  010F               	movlb	15	; () banked
 10465  001D66  0E0F               	movlw	15	;volatile
 10466  001D68  6E09               	movwf	?__CANIDToRegs+1,c
 10467  001D6A  0E1C               	movlw	28	;volatile
 10468  001D6C  6E08               	movwf	?__CANIDToRegs,c
 10469  001D6E  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 10470  001D72  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 10471  001D76  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 10472  001D7A  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 10473  001D7E  0E01               	movlw	1
 10474  001D80  6E0E               	movwf	?__CANIDToRegs+6,c
 10475  001D82  EC3D  F01A         	call	__CANIDToRegs	;wreg free
 10476                           
 10477                           ;main.c: 2787: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 10478  001D86  010D               	movlb	13	; () banked
 10479  001D88  83D4               	bsf	212,1,b	;volatile
 10480                           
 10481                           ; BSR set to: 13
 10482  001D8A  010F               	movlb	15	; () banked
 10483  001D8C  0E0F               	movlw	15	;volatile
 10484  001D8E  6E09               	movwf	?__CANIDToRegs+1,c
 10485  001D90  0E04               	movlw	4	;volatile
 10486  001D92  6E08               	movwf	?__CANIDToRegs,c
 10487  001D94  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 10488  001D98  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 10489  001D9C  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 10490  001DA0  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 10491  001DA4  0E01               	movlw	1
 10492  001DA6  6E0E               	movwf	?__CANIDToRegs+6,c
 10493  001DA8  EC3D  F01A         	call	__CANIDToRegs	;wreg free
 10494                           
 10495                           ;main.c: 2790: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 10496  001DAC  0E00               	movlw	0
 10497  001DAE  EFE6  F021         	goto	_ECANSetOperationMode
 10498  001DB2                     __end_of_calculateSetFilterMask:
 10499                           	opt stack 0
 10500                           tblptru	equ	0xFF8
 10501                           prodh	equ	0xFF4
 10502                           prodl	equ	0xFF3
 10503                           postinc0	equ	0xFEE
 10504                           wreg	equ	0xFE8
 10505                           indf2	equ	0xFDF
 10506                           postinc2	equ	0xFDE
 10507                           postdec2	equ	0xFDD
 10508                           fsr2h	equ	0xFDA
 10509                           fsr2l	equ	0xFD9
 10510                           status	equ	0xFD8
 10511                           
 10512 ;; *************** function _SendInformationEvent *****************
 10513 ;; Defined at:
 10514 ;;		line 1598 in file "../main.c"
 10515 ;; Parameters:    Size  Location     Type
 10516 ;;  idx             1    wreg     unsigned char 
 10517 ;;  eventClass      1   20[BANK0 ] unsigned char 
 10518 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
 10519 ;; Auto vars:     Size  Location     Type
 10520 ;;  idx             1   79[COMRAM] unsigned char 
 10521 ;;  data            3   76[COMRAM] unsigned char [3]
 10522 ;; Return value:  Size  Location     Type
 10523 ;;		None               void
 10524 ;; Registers used:
 10525 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10526 ;; Tracked objects:
 10527 ;;		On entry : F/0
 10528 ;;		On exit  : F/0
 10529 ;;		Unchanged: 0/0
 10530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10531 ;;      Params:         0       2       0       0       0       0       0
 10532 ;;      Locals:         4       0       0       0       0       0       0
 10533 ;;      Temps:          2       0       0       0       0       0       0
 10534 ;;      Totals:         6       2       0       0       0       0       0
 10535 ;;Total ram usage:        8 bytes
 10536 ;; Hardware stack levels used:    1
 10537 ;; Hardware stack levels required when called:    6
 10538 ;; This function calls:
 10539 ;;		_Read_b_eep
 10540 ;;		_sendVSCPFrame
 10541 ;; This function is called by:
 10542 ;;		_doApplicationOneSecondWork
 10543 ;;		_vscp_writeAppReg
 10544 ;;		_doActionOn
 10545 ;;		_doActionOff
 10546 ;;		_doActionStatus
 10547 ;;		_doActionToggle
 10548 ;; This function uses a non-reentrant model
 10549 ;;
 10550                           
 10551                           	psect	text26
 10552  003F2C                     __ptext26:
 10553                           	opt stack 0
 10554  003F2C                     _SendInformationEvent:
 10555                           	opt stack 23
 10556                           
 10557                           ;incstack = 0
 10558                           ;incstack = 0
 10559                           ;SendInformationEvent@idx stored from wreg
 10560  003F2C  CFE8 F050          	movff	wreg,SendInformationEvent@idx
 10561                           
 10562                           ; BSR set to: 0
 10563                           ;main.c: 1599: uint8_t data[3];
 10564                           ;main.c: 1612: data[ 0 ] = idx;
 10565  003F30  C050  F04D         	movff	SendInformationEvent@idx,SendInformationEvent@data
 10566                           
 10567                           ; BSR set to: 0
 10568                           ;main.c: 1613: data[ 1 ] = Read_b_eep(0x43 + 50 + 2*idx);
 10569  003F34  90D8               	bcf	status,0,c
 10570  003F36  3450               	rlcf	SendInformationEvent@idx,w,c
 10571  003F38  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10572  003F3A  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10573  003F3C  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10574  003F3E  0E75               	movlw	117
 10575  003F40  244B               	addwf	??_SendInformationEvent,w,c
 10576  003F42  6E08               	movwf	?_Read_b_eep,c
 10577  003F44  0E00               	movlw	0
 10578  003F46  204C               	addwfc	??_SendInformationEvent+1,w,c
 10579  003F48  6E09               	movwf	?_Read_b_eep+1,c
 10580  003F4A  EC3A  F022         	call	_Read_b_eep	;wreg free
 10581  003F4E  6E4E               	movwf	SendInformationEvent@data+1,c
 10582                           
 10583                           ;main.c: 1614: data[ 2 ] = Read_b_eep(0x43 + 51 + 2*idx);
 10584  003F50  90D8               	bcf	status,0,c
 10585  003F52  3450               	rlcf	SendInformationEvent@idx,w,c
 10586  003F54  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10587  003F56  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10588  003F58  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10589  003F5A  0E76               	movlw	118
 10590  003F5C  244B               	addwf	??_SendInformationEvent,w,c
 10591  003F5E  6E08               	movwf	?_Read_b_eep,c
 10592  003F60  0E00               	movlw	0
 10593  003F62  204C               	addwfc	??_SendInformationEvent+1,w,c
 10594  003F64  6E09               	movwf	?_Read_b_eep+1,c
 10595  003F66  EC3A  F022         	call	_Read_b_eep	;wreg free
 10596  003F6A  6E4F               	movwf	SendInformationEvent@data+2,c
 10597                           
 10598                           ;main.c: 1615: sendVSCPFrame( eventClass,
 10599                           ;main.c: 1616: eventTypeId,
 10600                           ;main.c: 1617: vscp_nickname,
 10601                           ;main.c: 1618: 0x03,
 10602                           ;main.c: 1619: 3,
 10603                           ;main.c: 1620: data );
 10604  003F6C  0100               	movlb	0	; () banked
 10605  003F6E  C0C5  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
 10606  003F72  6A40               	clrf	?_sendVSCPFrame+1,c
 10607  003F74  C0C6  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
 10608  003F78  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 10609  003F7C  0E03               	movlw	3
 10610  003F7E  6E43               	movwf	?_sendVSCPFrame+4,c
 10611  003F80  6E44               	movwf	?_sendVSCPFrame+5,c
 10612  003F82  0E4D               	movlw	low SendInformationEvent@data
 10613  003F84  6E45               	movwf	?_sendVSCPFrame+6,c
 10614  003F86  0E00               	movlw	high SendInformationEvent@data
 10615  003F88  6E46               	movwf	?_sendVSCPFrame+7,c
 10616  003F8A  0E0F               	movlw	15
 10617  003F8C  6E46               	movwf	?_sendVSCPFrame+7,c
 10618  003F8E  0E5F               	movlw	__accesstop+-1
 10619  003F90  6445               	cpfsgt	?_sendVSCPFrame+6,c
 10620  003F92  6A46               	clrf	?_sendVSCPFrame+7,c
 10621  003F94  EFCF  F01D         	goto	_sendVSCPFrame	;wreg free
 10622  003F98                     __end_of_SendInformationEvent:
 10623                           	opt stack 0
 10624                           tblptru	equ	0xFF8
 10625                           prodh	equ	0xFF4
 10626                           prodl	equ	0xFF3
 10627                           postinc0	equ	0xFEE
 10628                           wreg	equ	0xFE8
 10629                           indf2	equ	0xFDF
 10630                           postinc2	equ	0xFDE
 10631                           postdec2	equ	0xFDD
 10632                           fsr2h	equ	0xFDA
 10633                           fsr2l	equ	0xFD9
 10634                           status	equ	0xFD8
 10635                           
 10636 ;; *************** function _vscp_readRegister *****************
 10637 ;; Defined at:
 10638 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 10639 ;; Parameters:    Size  Location     Type
 10640 ;;  reg             1    wreg     unsigned char 
 10641 ;; Auto vars:     Size  Location     Type
 10642 ;;  reg             1   28[COMRAM] unsigned char 
 10643 ;; Return value:  Size  Location     Type
 10644 ;;                  1    wreg      unsigned char 
 10645 ;; Registers used:
 10646 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10647 ;; Tracked objects:
 10648 ;;		On entry : F/0
 10649 ;;		On exit  : 0/0
 10650 ;;		Unchanged: 0/0
 10651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10652 ;;      Params:         0       0       0       0       0       0       0
 10653 ;;      Locals:         1       0       0       0       0       0       0
 10654 ;;      Temps:          0       0       0       0       0       0       0
 10655 ;;      Totals:         1       0       0       0       0       0       0
 10656 ;;Total ram usage:        1 bytes
 10657 ;; Hardware stack levels used:    1
 10658 ;; Hardware stack levels required when called:    5
 10659 ;; This function calls:
 10660 ;;		_vscp_readAppReg
 10661 ;;		_vscp_readStdReg
 10662 ;; This function is called by:
 10663 ;;		_vscp_handleProtocolEvent
 10664 ;; This function uses a non-reentrant model
 10665 ;;
 10666                           
 10667                           	psect	text27
 10668  00439A                     __ptext27:
 10669                           	opt stack 0
 10670  00439A                     _vscp_readRegister:
 10671                           	opt stack 24
 10672                           
 10673                           ; BSR set to: 0
 10674                           ;incstack = 0
 10675                           ;incstack = 0
 10676                           ;vscp_readRegister@reg stored from wreg
 10677  00439A  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
 10678                           
 10679                           ; BSR set to: 0
 10680                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 10681  00439E  0E7F               	movlw	127
 10682  0043A0  641D               	cpfsgt	vscp_readRegister@reg,c
 10683  0043A2  D004               	goto	l9569
 10684                           
 10685                           ; BSR set to: 0
 10686                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 10687  0043A4  501D               	movf	vscp_readRegister@reg,w,c
 10688  0043A6  EC56  F017         	call	_vscp_readStdReg
 10689  0043AA  D003               	goto	l1126
 10690  0043AC                     l9569:
 10691                           
 10692                           ; BSR set to: 0
 10693                           ;vscp_firmware.c: 565: else {
 10694                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 10695  0043AC  501D               	movf	vscp_readRegister@reg,w,c
 10696  0043AE  EC2A  F01E         	call	_vscp_readAppReg
 10697  0043B2                     l1126:
 10698  0043B2  0012               	return	
 10699  0043B4                     __end_of_vscp_readRegister:
 10700                           	opt stack 0
 10701                           tblptru	equ	0xFF8
 10702                           prodh	equ	0xFF4
 10703                           prodl	equ	0xFF3
 10704                           postinc0	equ	0xFEE
 10705                           wreg	equ	0xFE8
 10706                           indf2	equ	0xFDF
 10707                           postinc2	equ	0xFDE
 10708                           postdec2	equ	0xFDD
 10709                           fsr2h	equ	0xFDA
 10710                           fsr2l	equ	0xFD9
 10711                           status	equ	0xFD8
 10712                           
 10713 ;; *************** function _vscp_readStdReg *****************
 10714 ;; Defined at:
 10715 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 10716 ;; Parameters:    Size  Location     Type
 10717 ;;  reg             1    wreg     unsigned char 
 10718 ;; Auto vars:     Size  Location     Type
 10719 ;;  reg             1   27[COMRAM] unsigned char 
 10720 ;;  code            4   20[COMRAM] unsigned long 
 10721 ;;  idx             1   25[COMRAM] unsigned char 
 10722 ;;  code            4   16[COMRAM] unsigned long 
 10723 ;;  idx             1   24[COMRAM] unsigned char 
 10724 ;;  rv              1   26[COMRAM] unsigned char 
 10725 ;; Return value:  Size  Location     Type
 10726 ;;                  1    wreg      unsigned char 
 10727 ;; Registers used:
 10728 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10729 ;; Tracked objects:
 10730 ;;		On entry : F/0
 10731 ;;		On exit  : 0/0
 10732 ;;		Unchanged: 0/0
 10733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10734 ;;      Params:         0       0       0       0       0       0       0
 10735 ;;      Locals:        12       0       0       0       0       0       0
 10736 ;;      Temps:          5       0       0       0       0       0       0
 10737 ;;      Totals:        17       0       0       0       0       0       0
 10738 ;;Total ram usage:       17 bytes
 10739 ;; Hardware stack levels used:    1
 10740 ;; Hardware stack levels required when called:    4
 10741 ;; This function calls:
 10742 ;;		_vscp_getMajorVersion
 10743 ;;		_vscp_getMinorVersion
 10744 ;;		_vscp_getSubMinorVersion
 10745 ;;		_vscp_getGUID
 10746 ;;		_vscp_getMDF_URL
 10747 ;;		_vscp_getUserID
 10748 ;;		_vscp_getManufacturerId
 10749 ;;		_vscp_getBootLoaderAlgorithm
 10750 ;;		_vscp_getBufferSize
 10751 ;;		_vscp_getFamilyCode
 10752 ;;		_vscp_getFamilyType
 10753 ;;		_vscp_getRegisterPagesUsed
 10754 ;; This function is called by:
 10755 ;;		_vscp_readRegister
 10756 ;;		_vscp_handleProtocolEvent
 10757 ;; This function uses a non-reentrant model
 10758 ;;
 10759                           
 10760                           	psect	text28
 10761  002EAC                     __ptext28:
 10762                           	opt stack 0
 10763  002EAC                     _vscp_readStdReg:
 10764                           	opt stack 25
 10765                           
 10766                           ;incstack = 0
 10767                           ;incstack = 0
 10768                           ;vscp_readStdReg@reg stored from wreg
 10769  002EAC  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
 10770                           
 10771                           ; BSR set to: 0
 10772                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 10773  002EB0  6A1B               	clrf	vscp_readStdReg@rv,c
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 10777  002EB2  501C               	movf	vscp_readStdReg@reg,w,c
 10778  002EB4  0A80               	xorlw	128
 10779  002EB6  E104               	bnz	l9579
 10780                           
 10781                           ; BSR set to: 0
 10782                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 10783  002EB8  C055  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 10784                           
 10785                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 10786  002EBC  6A55               	clrf	_vscp_alarmstatus,c
 10787                           
 10788                           ;vscp_firmware.c: 584: }
 10789  002EBE  D0CB               	goto	l9667
 10790  002EC0                     l9579:
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 10794  002EC0  501C               	movf	vscp_readStdReg@reg,w,c
 10795  002EC2  0A81               	xorlw	129
 10796  002EC4  E102               	bnz	l9583
 10797                           
 10798                           ; BSR set to: 0
 10799                           ;vscp_firmware.c: 588: rv = 1;
 10800  002EC6  0E01               	movlw	1
 10801  002EC8  D081               	goto	L39
 10802  002ECA                     l9583:
 10803                           
 10804                           ; BSR set to: 0
 10805                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 10806  002ECA  501C               	movf	vscp_readStdReg@reg,w,c
 10807  002ECC  0A82               	xorlw	130
 10808  002ECE  E102               	bnz	l9587
 10809                           
 10810                           ; BSR set to: 0
 10811                           ;vscp_firmware.c: 594: rv = 5;
 10812  002ED0  0E05               	movlw	5
 10813  002ED2  D07C               	goto	L39
 10814  002ED4                     l9587:
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 10818  002ED4  501C               	movf	vscp_readStdReg@reg,w,c
 10819  002ED6  0A83               	xorlw	131
 10820  002ED8  E102               	bnz	l9591
 10821                           
 10822                           ; BSR set to: 0
 10823                           ;vscp_firmware.c: 600: rv = 0;
 10824  002EDA  6A1B               	clrf	vscp_readStdReg@rv,c
 10825                           
 10826                           ;vscp_firmware.c: 602: }
 10827  002EDC  D0BC               	goto	l9667
 10828  002EDE                     l9591:
 10829                           
 10830                           ; BSR set to: 0
 10831                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 10832  002EDE  501C               	movf	vscp_readStdReg@reg,w,c
 10833  002EE0  0A94               	xorlw	148
 10834  002EE2  E103               	bnz	l9595
 10835                           
 10836                           ; BSR set to: 0
 10837                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 10838  002EE4  EC79  F022         	call	_vscp_getMajorVersion	;wreg free
 10839  002EE8  D071               	goto	L39
 10840  002EEA                     l9595:
 10841                           
 10842                           ; BSR set to: 0
 10843                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 10844  002EEA  501C               	movf	vscp_readStdReg@reg,w,c
 10845  002EEC  0A95               	xorlw	149
 10846  002EEE  E103               	bnz	l9599
 10847                           
 10848                           ; BSR set to: 0
 10849                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 10850  002EF0  EC78  F022         	call	_vscp_getMinorVersion	;wreg free
 10851  002EF4  D06B               	goto	L39
 10852  002EF6                     l9599:
 10853                           
 10854                           ; BSR set to: 0
 10855                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 10856  002EF6  501C               	movf	vscp_readStdReg@reg,w,c
 10857  002EF8  0A96               	xorlw	150
 10858  002EFA  E103               	bnz	l9603
 10859                           
 10860                           ; BSR set to: 0
 10861                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 10862  002EFC  EC77  F022         	call	_vscp_getSubMinorVersion	;wreg free
 10863  002F00  D065               	goto	L39
 10864  002F02                     l9603:
 10865                           
 10866                           ; BSR set to: 0
 10867                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 10868  002F02  0E89               	movlw	137
 10869  002F04  601C               	cpfslt	vscp_readStdReg@reg,c
 10870  002F06  D005               	goto	l9607
 10871                           
 10872                           ; BSR set to: 0
 10873                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 10874  002F08  501C               	movf	vscp_readStdReg@reg,w,c
 10875  002F0A  0F7C               	addlw	124
 10876  002F0C  EC1D  F022         	call	_vscp_getUserID
 10877  002F10  D05D               	goto	L39
 10878  002F12                     l9607:
 10879                           
 10880                           ; BSR set to: 0
 10881                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 10882                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 10883  002F12  0E88               	movlw	136
 10884  002F14  641C               	cpfsgt	vscp_readStdReg@reg,c
 10885  002F16  D008               	goto	l9613
 10886                           
 10887                           ; BSR set to: 0
 10888  002F18  0E91               	movlw	145
 10889  002F1A  601C               	cpfslt	vscp_readStdReg@reg,c
 10890  002F1C  D005               	goto	l9613
 10891                           
 10892                           ; BSR set to: 0
 10893                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 10894  002F1E  501C               	movf	vscp_readStdReg@reg,w,c
 10895  002F20  0F77               	addlw	119
 10896  002F22  EC13  F022         	call	_vscp_getManufacturerId
 10897  002F26  D052               	goto	L39
 10898  002F28                     l9613:
 10899                           
 10900                           ; BSR set to: 0
 10901                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 10902  002F28  501C               	movf	vscp_readStdReg@reg,w,c
 10903  002F2A  0A91               	xorlw	145
 10904  002F2C  E103               	bnz	l9617
 10905                           
 10906                           ; BSR set to: 0
 10907                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 10908  002F2E  C091  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
 10909                           
 10910                           ;vscp_firmware.c: 639: }
 10911  002F32  D091               	goto	l9667
 10912  002F34                     l9617:
 10913                           
 10914                           ; BSR set to: 0
 10915                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 10916  002F34  501C               	movf	vscp_readStdReg@reg,w,c
 10917  002F36  0A93               	xorlw	147
 10918  002F38  E103               	bnz	l9621
 10919                           
 10920                           ; BSR set to: 0
 10921                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 10922  002F3A  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
 10923                           
 10924                           ;vscp_firmware.c: 645: }
 10925  002F3E  D08B               	goto	l9667
 10926  002F40                     l9621:
 10927                           
 10928                           ; BSR set to: 0
 10929                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 10930  002F40  501C               	movf	vscp_readStdReg@reg,w,c
 10931  002F42  0A92               	xorlw	146
 10932  002F44  E102               	bnz	l9625
 10933                           
 10934                           ; BSR set to: 0
 10935                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 10936  002F46  5053               	movf	_vscp_page_select+1,w,c
 10937  002F48  D041               	goto	L39
 10938  002F4A                     l9625:
 10939                           
 10940                           ; BSR set to: 0
 10941                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 10942  002F4A  501C               	movf	vscp_readStdReg@reg,w,c
 10943  002F4C  0A97               	xorlw	151
 10944  002F4E  E103               	bnz	l9629
 10945                           
 10946                           ; BSR set to: 0
 10947                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 10948  002F50  EC76  F022         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 10949  002F54  D03B               	goto	L39
 10950  002F56                     l9629:
 10951                           
 10952                           ; BSR set to: 0
 10953                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 10954  002F56  501C               	movf	vscp_readStdReg@reg,w,c
 10955  002F58  0A98               	xorlw	152
 10956  002F5A  E103               	bnz	l9633
 10957                           
 10958                           ; BSR set to: 0
 10959                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 10960  002F5C  EC75  F022         	call	_vscp_getBufferSize	;wreg free
 10961  002F60  D035               	goto	L39
 10962  002F62                     l9633:
 10963                           
 10964                           ; BSR set to: 0
 10965                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 10966  002F62  501C               	movf	vscp_readStdReg@reg,w,c
 10967  002F64  0A99               	xorlw	153
 10968  002F66  E103               	bnz	l9637
 10969                           
 10970                           ; BSR set to: 0
 10971                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 10972  002F68  EC74  F022         	call	_vscp_getRegisterPagesUsed	;wreg free
 10973  002F6C  D02F               	goto	L39
 10974  002F6E                     l9637:
 10975                           
 10976                           ; BSR set to: 0
 10977                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 10978                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 10979  002F6E  0E99               	movlw	153
 10980  002F70  641C               	cpfsgt	vscp_readStdReg@reg,c
 10981  002F72  D02E               	goto	l9647
 10982                           
 10983                           ; BSR set to: 0
 10984  002F74  0E9E               	movlw	158
 10985  002F76  601C               	cpfslt	vscp_readStdReg@reg,c
 10986  002F78  D02B               	goto	l9647
 10987                           
 10988                           ; BSR set to: 0
 10989                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 10990  002F7A  EC5B  F022         	call	_vscp_getFamilyCode	;wreg free
 10991  002F7E  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 10992  002F82  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 10993  002F86  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 10994  002F8A  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 10995                           
 10996                           ; BSR set to: 0
 10997                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 10998  002F8E  501C               	movf	vscp_readStdReg@reg,w,c
 10999  002F90  0F66               	addlw	102
 11000  002F92  6E19               	movwf	vscp_readStdReg@idx,c
 11001                           
 11002                           ; BSR set to: 0
 11003                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 11004  002F94  5019               	movf	vscp_readStdReg@idx,w,c
 11005  002F96  0803               	sublw	3
 11006  002F98  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 11007  002F9A  90D8               	bcf	status,0,c
 11008  002F9C  360C               	rlcf	??_vscp_readStdReg,f,c
 11009  002F9E  90D8               	bcf	status,0,c
 11010  002FA0  360C               	rlcf	??_vscp_readStdReg,f,c
 11011  002FA2  90D8               	bcf	status,0,c
 11012  002FA4  360C               	rlcf	??_vscp_readStdReg,f,c
 11013  002FA6  500C               	movf	??_vscp_readStdReg,w,c
 11014  002FA8  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 11015  002FAC  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 11016  002FB0  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 11017  002FB4  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 11018  002FB8  2AE8               	incf	wreg,f,c
 11019  002FBA  D005               	goto	u11270
 11020  002FBC                     u11275:
 11021  002FBC  90D8               	bcf	status,0,c
 11022  002FBE  3210               	rrcf	??_vscp_readStdReg+4,f,c
 11023  002FC0  320F               	rrcf	??_vscp_readStdReg+3,f,c
 11024  002FC2  320E               	rrcf	??_vscp_readStdReg+2,f,c
 11025  002FC4  320D               	rrcf	??_vscp_readStdReg+1,f,c
 11026  002FC6                     u11270:
 11027  002FC6  2EE8               	decfsz	wreg,f,c
 11028  002FC8  D7F9               	goto	u11275
 11029  002FCA  D030               	goto	L40
 11030  002FCC                     L39:
 11031  002FCC  6E1B               	movwf	vscp_readStdReg@rv,c
 11032                           
 11033                           ;vscp_firmware.c: 671: }
 11034  002FCE  D043               	goto	l9667
 11035  002FD0                     l9647:
 11036                           
 11037                           ; BSR set to: 0
 11038                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 11039                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 11040  002FD0  0E9D               	movlw	157
 11041  002FD2  641C               	cpfsgt	vscp_readStdReg@reg,c
 11042  002FD4  D02D               	goto	l9657
 11043                           
 11044                           ; BSR set to: 0
 11045  002FD6  0EA2               	movlw	162
 11046  002FD8  601C               	cpfslt	vscp_readStdReg@reg,c
 11047  002FDA  D02A               	goto	l9657
 11048                           
 11049                           ; BSR set to: 0
 11050                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 11051  002FDC  EC56  F022         	call	_vscp_getFamilyType	;wreg free
 11052  002FE0  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1267+3
 11053  002FE4  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1267+2
 11054  002FE8  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1267+1
 11055  002FEC  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1267
 11056                           
 11057                           ; BSR set to: 0
 11058                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 11059  002FF0  501C               	movf	vscp_readStdReg@reg,w,c
 11060  002FF2  0F62               	addlw	98
 11061  002FF4  6E1A               	movwf	vscp_readStdReg@idx_1268,c
 11062                           
 11063                           ; BSR set to: 0
 11064                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 11065  002FF6  501A               	movf	vscp_readStdReg@idx_1268,w,c
 11066  002FF8  0803               	sublw	3
 11067  002FFA  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 11068  002FFC  90D8               	bcf	status,0,c
 11069  002FFE  360C               	rlcf	??_vscp_readStdReg,f,c
 11070  003000  90D8               	bcf	status,0,c
 11071  003002  360C               	rlcf	??_vscp_readStdReg,f,c
 11072  003004  90D8               	bcf	status,0,c
 11073  003006  360C               	rlcf	??_vscp_readStdReg,f,c
 11074  003008  500C               	movf	??_vscp_readStdReg,w,c
 11075  00300A  C015  F00D         	movff	vscp_readStdReg@code_1267,??_vscp_readStdReg+1
 11076  00300E  C016  F00E         	movff	vscp_readStdReg@code_1267+1,??_vscp_readStdReg+2
 11077  003012  C017  F00F         	movff	vscp_readStdReg@code_1267+2,??_vscp_readStdReg+3
 11078  003016  C018  F010         	movff	vscp_readStdReg@code_1267+3,??_vscp_readStdReg+4
 11079  00301A  2AE8               	incf	wreg,f,c
 11080  00301C  D005               	goto	u11300
 11081  00301E                     u11305:
 11082  00301E  90D8               	bcf	status,0,c
 11083  003020  3210               	rrcf	??_vscp_readStdReg+4,f,c
 11084  003022  320F               	rrcf	??_vscp_readStdReg+3,f,c
 11085  003024  320E               	rrcf	??_vscp_readStdReg+2,f,c
 11086  003026  320D               	rrcf	??_vscp_readStdReg+1,f,c
 11087  003028                     u11300:
 11088  003028  2EE8               	decfsz	wreg,f,c
 11089  00302A  D7F9               	goto	u11305
 11090  00302C                     L40:
 11091  00302C  500D               	movf	??_vscp_readStdReg+1,w,c
 11092  00302E  D7CE               	goto	L39
 11093  003030                     l9657:
 11094                           
 11095                           ; BSR set to: 0
 11096                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 11097                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 11098  003030  0ECF               	movlw	207
 11099  003032  641C               	cpfsgt	vscp_readStdReg@reg,c
 11100  003034  D008               	goto	l9663
 11101                           
 11102                           ; BSR set to: 0
 11103  003036  0EE0               	movlw	224
 11104  003038  601C               	cpfslt	vscp_readStdReg@reg,c
 11105  00303A  D005               	goto	l9663
 11106                           
 11107                           ; BSR set to: 0
 11108                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 11109  00303C  501C               	movf	vscp_readStdReg@reg,w,c
 11110  00303E  0F30               	addlw	48
 11111  003040  EC27  F022         	call	_vscp_getGUID
 11112  003044  D7C3               	goto	L39
 11113  003046                     l9663:
 11114                           
 11115                           ; BSR set to: 0
 11116                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 11117  003046  0EDF               	movlw	223
 11118  003048  641C               	cpfsgt	vscp_readStdReg@reg,c
 11119  00304A  D005               	goto	l9667
 11120                           
 11121                           ; BSR set to: 0
 11122                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 11123  00304C  501C               	movf	vscp_readStdReg@reg,w,c
 11124  00304E  0F20               	addlw	32
 11125  003050  ECDA  F021         	call	_vscp_getMDF_URL
 11126  003054  D7BB               	goto	L39
 11127  003056                     l9667:
 11128                           
 11129                           ;vscp_firmware.c: 691: }
 11130                           ;vscp_firmware.c: 693: return rv;
 11131  003056  501B               	movf	vscp_readStdReg@rv,w,c
 11132  003058  0012               	return	
 11133  00305A                     __end_of_vscp_readStdReg:
 11134                           	opt stack 0
 11135                           tblptru	equ	0xFF8
 11136                           prodh	equ	0xFF4
 11137                           prodl	equ	0xFF3
 11138                           postinc0	equ	0xFEE
 11139                           wreg	equ	0xFE8
 11140                           indf2	equ	0xFDF
 11141                           postinc2	equ	0xFDE
 11142                           postdec2	equ	0xFDD
 11143                           fsr2h	equ	0xFDA
 11144                           fsr2l	equ	0xFD9
 11145                           status	equ	0xFD8
 11146                           
 11147 ;; *************** function _vscp_getRegisterPagesUsed *****************
 11148 ;; Defined at:
 11149 ;;		line 2571 in file "../main.c"
 11150 ;; Parameters:    Size  Location     Type
 11151 ;;		None
 11152 ;; Auto vars:     Size  Location     Type
 11153 ;;		None
 11154 ;; Return value:  Size  Location     Type
 11155 ;;                  1    wreg      unsigned char 
 11156 ;; Registers used:
 11157 ;;		wreg
 11158 ;; Tracked objects:
 11159 ;;		On entry : F/0
 11160 ;;		On exit  : F/0
 11161 ;;		Unchanged: F/0
 11162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11163 ;;      Params:         0       0       0       0       0       0       0
 11164 ;;      Locals:         0       0       0       0       0       0       0
 11165 ;;      Temps:          0       0       0       0       0       0       0
 11166 ;;      Totals:         0       0       0       0       0       0       0
 11167 ;;Total ram usage:        0 bytes
 11168 ;; Hardware stack levels used:    1
 11169 ;; Hardware stack levels required when called:    2
 11170 ;; This function calls:
 11171 ;;		Nothing
 11172 ;; This function is called by:
 11173 ;;		_vscp_readStdReg
 11174 ;; This function uses a non-reentrant model
 11175 ;;
 11176                           
 11177                           	psect	text29
 11178  0044E8                     __ptext29:
 11179                           	opt stack 0
 11180  0044E8                     _vscp_getRegisterPagesUsed:
 11181                           	opt stack 26
 11182                           
 11183                           ; BSR set to: 0
 11184                           
 11185                           ; BSR set to: 0
 11186                           ;main.c: 2572: return 1;
 11187                           
 11188                           ;incstack = 0
 11189                           ;incstack = 0
 11190  0044E8  0C01               	retlw	1
 11191  0044EA                     __end_of_vscp_getRegisterPagesUsed:
 11192                           	opt stack 0
 11193                           tblptru	equ	0xFF8
 11194                           prodh	equ	0xFF4
 11195                           prodl	equ	0xFF3
 11196                           postinc0	equ	0xFEE
 11197                           wreg	equ	0xFE8
 11198                           indf2	equ	0xFDF
 11199                           postinc2	equ	0xFDE
 11200                           postdec2	equ	0xFDD
 11201                           fsr2h	equ	0xFDA
 11202                           fsr2l	equ	0xFD9
 11203                           status	equ	0xFD8
 11204                           
 11205 ;; *************** function _vscp_getFamilyType *****************
 11206 ;; Defined at:
 11207 ;;		line 2552 in file "../main.c"
 11208 ;; Parameters:    Size  Location     Type
 11209 ;;		None
 11210 ;; Auto vars:     Size  Location     Type
 11211 ;;		None
 11212 ;; Return value:  Size  Location     Type
 11213 ;;                  4    7[COMRAM] unsigned long 
 11214 ;; Registers used:
 11215 ;;		None
 11216 ;; Tracked objects:
 11217 ;;		On entry : F/0
 11218 ;;		On exit  : F/0
 11219 ;;		Unchanged: F/0
 11220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11221 ;;      Params:         4       0       0       0       0       0       0
 11222 ;;      Locals:         0       0       0       0       0       0       0
 11223 ;;      Temps:          0       0       0       0       0       0       0
 11224 ;;      Totals:         4       0       0       0       0       0       0
 11225 ;;Total ram usage:        4 bytes
 11226 ;; Hardware stack levels used:    1
 11227 ;; Hardware stack levels required when called:    2
 11228 ;; This function calls:
 11229 ;;		Nothing
 11230 ;; This function is called by:
 11231 ;;		_vscp_readStdReg
 11232 ;; This function uses a non-reentrant model
 11233 ;;
 11234                           
 11235                           	psect	text30
 11236  0044AC                     __ptext30:
 11237                           	opt stack 0
 11238  0044AC                     _vscp_getFamilyType:
 11239                           	opt stack 26
 11240                           
 11241                           ; BSR set to: 0
 11242                           ;main.c: 2553: return 0;
 11243                           
 11244                           ; BSR set to: 0
 11245                           ;incstack = 0
 11246                           ;incstack = 0
 11247  0044AC  6A08               	clrf	?_vscp_getFamilyType,c
 11248  0044AE  6A09               	clrf	?_vscp_getFamilyType+1,c
 11249  0044B0  6A0A               	clrf	?_vscp_getFamilyType+2,c
 11250  0044B2  6A0B               	clrf	?_vscp_getFamilyType+3,c
 11251                           
 11252                           ; BSR set to: 0
 11253  0044B4  0012               	return	
 11254  0044B6                     __end_of_vscp_getFamilyType:
 11255                           	opt stack 0
 11256                           tblptru	equ	0xFF8
 11257                           prodh	equ	0xFF4
 11258                           prodl	equ	0xFF3
 11259                           postinc0	equ	0xFEE
 11260                           wreg	equ	0xFE8
 11261                           indf2	equ	0xFDF
 11262                           postinc2	equ	0xFDE
 11263                           postdec2	equ	0xFDD
 11264                           fsr2h	equ	0xFDA
 11265                           fsr2l	equ	0xFD9
 11266                           status	equ	0xFD8
 11267                           
 11268 ;; *************** function _vscp_getFamilyCode *****************
 11269 ;; Defined at:
 11270 ;;		line 2543 in file "../main.c"
 11271 ;; Parameters:    Size  Location     Type
 11272 ;;		None
 11273 ;; Auto vars:     Size  Location     Type
 11274 ;;		None
 11275 ;; Return value:  Size  Location     Type
 11276 ;;                  4    7[COMRAM] unsigned long 
 11277 ;; Registers used:
 11278 ;;		None
 11279 ;; Tracked objects:
 11280 ;;		On entry : F/0
 11281 ;;		On exit  : F/0
 11282 ;;		Unchanged: F/0
 11283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11284 ;;      Params:         4       0       0       0       0       0       0
 11285 ;;      Locals:         0       0       0       0       0       0       0
 11286 ;;      Temps:          0       0       0       0       0       0       0
 11287 ;;      Totals:         4       0       0       0       0       0       0
 11288 ;;Total ram usage:        4 bytes
 11289 ;; Hardware stack levels used:    1
 11290 ;; Hardware stack levels required when called:    2
 11291 ;; This function calls:
 11292 ;;		Nothing
 11293 ;; This function is called by:
 11294 ;;		_vscp_readStdReg
 11295 ;; This function uses a non-reentrant model
 11296 ;;
 11297                           
 11298                           	psect	text31
 11299  0044B6                     __ptext31:
 11300                           	opt stack 0
 11301  0044B6                     _vscp_getFamilyCode:
 11302                           	opt stack 26
 11303                           
 11304                           ; BSR set to: 0
 11305                           ;main.c: 2544: return 0L;
 11306                           
 11307                           ; BSR set to: 0
 11308                           ;incstack = 0
 11309                           ;incstack = 0
 11310  0044B6  6A08               	clrf	?_vscp_getFamilyCode,c
 11311  0044B8  6A09               	clrf	?_vscp_getFamilyCode+1,c
 11312  0044BA  6A0A               	clrf	?_vscp_getFamilyCode+2,c
 11313  0044BC  6A0B               	clrf	?_vscp_getFamilyCode+3,c
 11314                           
 11315                           ; BSR set to: 0
 11316  0044BE  0012               	return	
 11317  0044C0                     __end_of_vscp_getFamilyCode:
 11318                           	opt stack 0
 11319                           tblptru	equ	0xFF8
 11320                           prodh	equ	0xFF4
 11321                           prodl	equ	0xFF3
 11322                           postinc0	equ	0xFEE
 11323                           wreg	equ	0xFE8
 11324                           indf2	equ	0xFDF
 11325                           postinc2	equ	0xFDE
 11326                           postdec2	equ	0xFDD
 11327                           fsr2h	equ	0xFDA
 11328                           fsr2l	equ	0xFD9
 11329                           status	equ	0xFD8
 11330                           
 11331 ;; *************** function _vscp_getBufferSize *****************
 11332 ;; Defined at:
 11333 ;;		line 2404 in file "../main.c"
 11334 ;; Parameters:    Size  Location     Type
 11335 ;;		None
 11336 ;; Auto vars:     Size  Location     Type
 11337 ;;		None
 11338 ;; Return value:  Size  Location     Type
 11339 ;;                  1    wreg      unsigned char 
 11340 ;; Registers used:
 11341 ;;		wreg
 11342 ;; Tracked objects:
 11343 ;;		On entry : F/0
 11344 ;;		On exit  : F/0
 11345 ;;		Unchanged: F/0
 11346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11347 ;;      Params:         0       0       0       0       0       0       0
 11348 ;;      Locals:         0       0       0       0       0       0       0
 11349 ;;      Temps:          0       0       0       0       0       0       0
 11350 ;;      Totals:         0       0       0       0       0       0       0
 11351 ;;Total ram usage:        0 bytes
 11352 ;; Hardware stack levels used:    1
 11353 ;; Hardware stack levels required when called:    2
 11354 ;; This function calls:
 11355 ;;		Nothing
 11356 ;; This function is called by:
 11357 ;;		_vscp_readStdReg
 11358 ;; This function uses a non-reentrant model
 11359 ;;
 11360                           
 11361                           	psect	text32
 11362  0044EA                     __ptext32:
 11363                           	opt stack 0
 11364  0044EA                     _vscp_getBufferSize:
 11365                           	opt stack 26
 11366                           
 11367                           ; BSR set to: 0
 11368                           
 11369                           ; BSR set to: 0
 11370                           ;main.c: 2405: return 8;
 11371                           
 11372                           ; BSR set to: 0
 11373                           ;incstack = 0
 11374                           ;incstack = 0
 11375  0044EA  0C08               	retlw	8
 11376  0044EC                     __end_of_vscp_getBufferSize:
 11377                           	opt stack 0
 11378                           tblptru	equ	0xFF8
 11379                           prodh	equ	0xFF4
 11380                           prodl	equ	0xFF3
 11381                           postinc0	equ	0xFEE
 11382                           wreg	equ	0xFE8
 11383                           indf2	equ	0xFDF
 11384                           postinc2	equ	0xFDE
 11385                           postdec2	equ	0xFDD
 11386                           fsr2h	equ	0xFDA
 11387                           fsr2l	equ	0xFD9
 11388                           status	equ	0xFD8
 11389                           
 11390 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 11391 ;; Defined at:
 11392 ;;		line 2395 in file "../main.c"
 11393 ;; Parameters:    Size  Location     Type
 11394 ;;		None
 11395 ;; Auto vars:     Size  Location     Type
 11396 ;;		None
 11397 ;; Return value:  Size  Location     Type
 11398 ;;                  1    wreg      unsigned char 
 11399 ;; Registers used:
 11400 ;;		wreg
 11401 ;; Tracked objects:
 11402 ;;		On entry : F/0
 11403 ;;		On exit  : F/0
 11404 ;;		Unchanged: F/0
 11405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11406 ;;      Params:         0       0       0       0       0       0       0
 11407 ;;      Locals:         0       0       0       0       0       0       0
 11408 ;;      Temps:          0       0       0       0       0       0       0
 11409 ;;      Totals:         0       0       0       0       0       0       0
 11410 ;;Total ram usage:        0 bytes
 11411 ;; Hardware stack levels used:    1
 11412 ;; Hardware stack levels required when called:    2
 11413 ;; This function calls:
 11414 ;;		Nothing
 11415 ;; This function is called by:
 11416 ;;		_vscp_readStdReg
 11417 ;; This function uses a non-reentrant model
 11418 ;;
 11419                           
 11420                           	psect	text33
 11421  0044EC                     __ptext33:
 11422                           	opt stack 0
 11423  0044EC                     _vscp_getBootLoaderAlgorithm:
 11424                           	opt stack 26
 11425                           
 11426                           ; BSR set to: 0
 11427                           
 11428                           ; BSR set to: 0
 11429                           ;main.c: 2396: return 0x01;
 11430                           
 11431                           ; BSR set to: 0
 11432                           ;incstack = 0
 11433                           ;incstack = 0
 11434  0044EC  0C01               	retlw	1
 11435  0044EE                     __end_of_vscp_getBootLoaderAlgorithm:
 11436                           	opt stack 0
 11437                           tblptru	equ	0xFF8
 11438                           prodh	equ	0xFF4
 11439                           prodl	equ	0xFF3
 11440                           postinc0	equ	0xFEE
 11441                           wreg	equ	0xFE8
 11442                           indf2	equ	0xFDF
 11443                           postinc2	equ	0xFDE
 11444                           postdec2	equ	0xFDD
 11445                           fsr2h	equ	0xFDA
 11446                           fsr2l	equ	0xFD9
 11447                           status	equ	0xFD8
 11448                           
 11449 ;; *************** function _vscp_getManufacturerId *****************
 11450 ;; Defined at:
 11451 ;;		line 2386 in file "../main.c"
 11452 ;; Parameters:    Size  Location     Type
 11453 ;;  idx             1    wreg     unsigned char 
 11454 ;; Auto vars:     Size  Location     Type
 11455 ;;  idx             1    9[COMRAM] unsigned char 
 11456 ;; Return value:  Size  Location     Type
 11457 ;;                  1    wreg      unsigned char 
 11458 ;; Registers used:
 11459 ;;		wreg, status,2, status,0, cstack
 11460 ;; Tracked objects:
 11461 ;;		On entry : 0/0
 11462 ;;		On exit  : 0/0
 11463 ;;		Unchanged: 0/0
 11464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11465 ;;      Params:         0       0       0       0       0       0       0
 11466 ;;      Locals:         1       0       0       0       0       0       0
 11467 ;;      Temps:          0       0       0       0       0       0       0
 11468 ;;      Totals:         1       0       0       0       0       0       0
 11469 ;;Total ram usage:        1 bytes
 11470 ;; Hardware stack levels used:    1
 11471 ;; Hardware stack levels required when called:    3
 11472 ;; This function calls:
 11473 ;;		_Read_b_eep
 11474 ;; This function is called by:
 11475 ;;		_vscp_readStdReg
 11476 ;;		_vscp_writeStdReg
 11477 ;; This function uses a non-reentrant model
 11478 ;;
 11479                           
 11480                           	psect	text34
 11481  004426                     __ptext34:
 11482                           	opt stack 0
 11483  004426                     _vscp_getManufacturerId:
 11484                           	opt stack 25
 11485                           
 11486                           ; BSR set to: 0
 11487                           ;incstack = 0
 11488                           ;incstack = 0
 11489                           ;vscp_getManufacturerId@idx stored from wreg
 11490  004426  CFE8 F00A          	movff	wreg,vscp_getManufacturerId@idx
 11491                           
 11492                           ;main.c: 2387: return Read_b_eep(0x0B + idx);
 11493  00442A  0E0B               	movlw	11
 11494  00442C  240A               	addwf	vscp_getManufacturerId@idx,w,c
 11495  00442E  6E08               	movwf	?_Read_b_eep,c
 11496  004430  6A09               	clrf	?_Read_b_eep+1,c
 11497  004432  0E00               	movlw	0
 11498  004434  2209               	addwfc	?_Read_b_eep+1,f,c
 11499  004436  EF3A  F022         	goto	_Read_b_eep	;wreg free
 11500  00443A                     __end_of_vscp_getManufacturerId:
 11501                           	opt stack 0
 11502                           tblptru	equ	0xFF8
 11503                           prodh	equ	0xFF4
 11504                           prodl	equ	0xFF3
 11505                           postinc0	equ	0xFEE
 11506                           wreg	equ	0xFE8
 11507                           indf2	equ	0xFDF
 11508                           postinc2	equ	0xFDE
 11509                           postdec2	equ	0xFDD
 11510                           fsr2h	equ	0xFDA
 11511                           fsr2l	equ	0xFD9
 11512                           status	equ	0xFD8
 11513                           
 11514 ;; *************** function _vscp_getUserID *****************
 11515 ;; Defined at:
 11516 ;;		line 2366 in file "../main.c"
 11517 ;; Parameters:    Size  Location     Type
 11518 ;;  idx             1    wreg     unsigned char 
 11519 ;; Auto vars:     Size  Location     Type
 11520 ;;  idx             1    9[COMRAM] unsigned char 
 11521 ;; Return value:  Size  Location     Type
 11522 ;;                  1    wreg      unsigned char 
 11523 ;; Registers used:
 11524 ;;		wreg, status,2, status,0, cstack
 11525 ;; Tracked objects:
 11526 ;;		On entry : 0/0
 11527 ;;		On exit  : 0/0
 11528 ;;		Unchanged: 0/0
 11529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11530 ;;      Params:         0       0       0       0       0       0       0
 11531 ;;      Locals:         1       0       0       0       0       0       0
 11532 ;;      Temps:          0       0       0       0       0       0       0
 11533 ;;      Totals:         1       0       0       0       0       0       0
 11534 ;;Total ram usage:        1 bytes
 11535 ;; Hardware stack levels used:    1
 11536 ;; Hardware stack levels required when called:    3
 11537 ;; This function calls:
 11538 ;;		_Read_b_eep
 11539 ;; This function is called by:
 11540 ;;		_vscp_readStdReg
 11541 ;;		_vscp_writeStdReg
 11542 ;; This function uses a non-reentrant model
 11543 ;;
 11544                           
 11545                           	psect	text35
 11546  00443A                     __ptext35:
 11547                           	opt stack 0
 11548  00443A                     _vscp_getUserID:
 11549                           	opt stack 25
 11550                           
 11551                           ;incstack = 0
 11552                           ;incstack = 0
 11553                           ;vscp_getUserID@idx stored from wreg
 11554  00443A  CFE8 F00A          	movff	wreg,vscp_getUserID@idx
 11555                           
 11556                           ;main.c: 2367: return Read_b_eep(0x06 + idx);
 11557  00443E  0E06               	movlw	6
 11558  004440  240A               	addwf	vscp_getUserID@idx,w,c
 11559  004442  6E08               	movwf	?_Read_b_eep,c
 11560  004444  6A09               	clrf	?_Read_b_eep+1,c
 11561  004446  0E00               	movlw	0
 11562  004448  2209               	addwfc	?_Read_b_eep+1,f,c
 11563  00444A  EF3A  F022         	goto	_Read_b_eep	;wreg free
 11564  00444E                     __end_of_vscp_getUserID:
 11565                           	opt stack 0
 11566                           tblptru	equ	0xFF8
 11567                           prodh	equ	0xFF4
 11568                           prodl	equ	0xFF3
 11569                           postinc0	equ	0xFEE
 11570                           wreg	equ	0xFE8
 11571                           indf2	equ	0xFDF
 11572                           postinc2	equ	0xFDE
 11573                           postdec2	equ	0xFDD
 11574                           fsr2h	equ	0xFDA
 11575                           fsr2l	equ	0xFD9
 11576                           status	equ	0xFD8
 11577                           
 11578 ;; *************** function _vscp_getMDF_URL *****************
 11579 ;; Defined at:
 11580 ;;		line 2357 in file "../main.c"
 11581 ;; Parameters:    Size  Location     Type
 11582 ;;  idx             1    wreg     unsigned char 
 11583 ;; Auto vars:     Size  Location     Type
 11584 ;;  idx             1    8[COMRAM] unsigned char 
 11585 ;; Return value:  Size  Location     Type
 11586 ;;                  1    wreg      unsigned char 
 11587 ;; Registers used:
 11588 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11589 ;; Tracked objects:
 11590 ;;		On entry : F/0
 11591 ;;		On exit  : F/0
 11592 ;;		Unchanged: F/0
 11593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11594 ;;      Params:         0       0       0       0       0       0       0
 11595 ;;      Locals:         1       0       0       0       0       0       0
 11596 ;;      Temps:          1       0       0       0       0       0       0
 11597 ;;      Totals:         2       0       0       0       0       0       0
 11598 ;;Total ram usage:        2 bytes
 11599 ;; Hardware stack levels used:    1
 11600 ;; Hardware stack levels required when called:    2
 11601 ;; This function calls:
 11602 ;;		Nothing
 11603 ;; This function is called by:
 11604 ;;		_vscp_readStdReg
 11605 ;;		_vscp_handleProtocolEvent
 11606 ;; This function uses a non-reentrant model
 11607 ;;
 11608                           
 11609                           	psect	text36
 11610  0043B4                     __ptext36:
 11611                           	opt stack 0
 11612  0043B4                     _vscp_getMDF_URL:
 11613                           	opt stack 26
 11614                           
 11615                           ;incstack = 0
 11616                           ;incstack = 0
 11617                           ;vscp_getMDF_URL@idx stored from wreg
 11618  0043B4  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 11619                           
 11620                           ; BSR set to: 0
 11621                           ;main.c: 2358: return vscp_deviceURL[ idx ];
 11622  0043B8  5009               	movf	vscp_getMDF_URL@idx,w,c
 11623  0043BA  0FBC               	addlw	low _vscp_deviceURL
 11624  0043BC  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 11625  0043BE  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 11626  0043C2  0E08               	movlw	high __smallconst
 11627  0043C4  6EF7               	movwf	tblptrh,c
 11628  0043C6  0008               	tblrd		*
 11629  0043C8  50F5               	movf	tablat,w,c
 11630                           
 11631                           ; BSR set to: 0
 11632  0043CA  0012               	return	
 11633  0043CC                     __end_of_vscp_getMDF_URL:
 11634                           	opt stack 0
 11635                           tblptru	equ	0xFF8
 11636                           tblptrh	equ	0xFF7
 11637                           tblptrl	equ	0xFF6
 11638                           tablat	equ	0xFF5
 11639                           prodh	equ	0xFF4
 11640                           prodl	equ	0xFF3
 11641                           postinc0	equ	0xFEE
 11642                           wreg	equ	0xFE8
 11643                           indf2	equ	0xFDF
 11644                           postinc2	equ	0xFDE
 11645                           postdec2	equ	0xFDD
 11646                           fsr2h	equ	0xFDA
 11647                           fsr2l	equ	0xFD9
 11648                           status	equ	0xFD8
 11649                           
 11650 ;; *************** function _vscp_getGUID *****************
 11651 ;; Defined at:
 11652 ;;		line 2345 in file "../main.c"
 11653 ;; Parameters:    Size  Location     Type
 11654 ;;  idx             1    wreg     unsigned char 
 11655 ;; Auto vars:     Size  Location     Type
 11656 ;;  idx             1    9[COMRAM] unsigned char 
 11657 ;; Return value:  Size  Location     Type
 11658 ;;                  1    wreg      unsigned char 
 11659 ;; Registers used:
 11660 ;;		wreg, status,2, status,0, cstack
 11661 ;; Tracked objects:
 11662 ;;		On entry : 0/0
 11663 ;;		On exit  : 0/0
 11664 ;;		Unchanged: 0/0
 11665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11666 ;;      Params:         0       0       0       0       0       0       0
 11667 ;;      Locals:         1       0       0       0       0       0       0
 11668 ;;      Temps:          0       0       0       0       0       0       0
 11669 ;;      Totals:         1       0       0       0       0       0       0
 11670 ;;Total ram usage:        1 bytes
 11671 ;; Hardware stack levels used:    1
 11672 ;; Hardware stack levels required when called:    3
 11673 ;; This function calls:
 11674 ;;		_Read_b_eep
 11675 ;; This function is called by:
 11676 ;;		_vscp_readStdReg
 11677 ;;		_vscp_writeStdReg
 11678 ;;		_vscp_handleProtocolEvent
 11679 ;; This function uses a non-reentrant model
 11680 ;;
 11681                           
 11682                           	psect	text37
 11683  00444E                     __ptext37:
 11684                           	opt stack 0
 11685  00444E                     _vscp_getGUID:
 11686                           	opt stack 25
 11687                           
 11688                           ; BSR set to: 0
 11689                           ;incstack = 0
 11690                           ;incstack = 0
 11691                           ;vscp_getGUID@idx stored from wreg
 11692  00444E  CFE8 F00A          	movff	wreg,vscp_getGUID@idx
 11693                           
 11694                           ;main.c: 2346: return Read_b_eep(0x13 + idx);
 11695  004452  0E13               	movlw	19
 11696  004454  240A               	addwf	vscp_getGUID@idx,w,c
 11697  004456  6E08               	movwf	?_Read_b_eep,c
 11698  004458  6A09               	clrf	?_Read_b_eep+1,c
 11699  00445A  0E00               	movlw	0
 11700  00445C  2209               	addwfc	?_Read_b_eep+1,f,c
 11701  00445E  EF3A  F022         	goto	_Read_b_eep	;wreg free
 11702  004462                     __end_of_vscp_getGUID:
 11703                           	opt stack 0
 11704                           tblptru	equ	0xFF8
 11705                           tblptrh	equ	0xFF7
 11706                           tblptrl	equ	0xFF6
 11707                           tablat	equ	0xFF5
 11708                           prodh	equ	0xFF4
 11709                           prodl	equ	0xFF3
 11710                           postinc0	equ	0xFEE
 11711                           wreg	equ	0xFE8
 11712                           indf2	equ	0xFDF
 11713                           postinc2	equ	0xFDE
 11714                           postdec2	equ	0xFDD
 11715                           fsr2h	equ	0xFDA
 11716                           fsr2l	equ	0xFD9
 11717                           status	equ	0xFD8
 11718                           
 11719 ;; *************** function _vscp_getSubMinorVersion *****************
 11720 ;; Defined at:
 11721 ;;		line 2334 in file "../main.c"
 11722 ;; Parameters:    Size  Location     Type
 11723 ;;		None
 11724 ;; Auto vars:     Size  Location     Type
 11725 ;;		None
 11726 ;; Return value:  Size  Location     Type
 11727 ;;                  1    wreg      unsigned char 
 11728 ;; Registers used:
 11729 ;;		wreg
 11730 ;; Tracked objects:
 11731 ;;		On entry : F/0
 11732 ;;		On exit  : F/0
 11733 ;;		Unchanged: F/0
 11734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11735 ;;      Params:         0       0       0       0       0       0       0
 11736 ;;      Locals:         0       0       0       0       0       0       0
 11737 ;;      Temps:          0       0       0       0       0       0       0
 11738 ;;      Totals:         0       0       0       0       0       0       0
 11739 ;;Total ram usage:        0 bytes
 11740 ;; Hardware stack levels used:    1
 11741 ;; Hardware stack levels required when called:    2
 11742 ;; This function calls:
 11743 ;;		Nothing
 11744 ;; This function is called by:
 11745 ;;		_vscp_readStdReg
 11746 ;; This function uses a non-reentrant model
 11747 ;;
 11748                           
 11749                           	psect	text38
 11750  0044EE                     __ptext38:
 11751                           	opt stack 0
 11752  0044EE                     _vscp_getSubMinorVersion:
 11753                           	opt stack 26
 11754                           
 11755                           ; BSR set to: 0
 11756                           
 11757                           ; BSR set to: 0
 11758                           ;main.c: 2335: return 1;
 11759                           
 11760                           ;incstack = 0
 11761                           ;incstack = 0
 11762  0044EE  0C01               	retlw	1
 11763  0044F0                     __end_of_vscp_getSubMinorVersion:
 11764                           	opt stack 0
 11765                           tblptru	equ	0xFF8
 11766                           tblptrh	equ	0xFF7
 11767                           tblptrl	equ	0xFF6
 11768                           tablat	equ	0xFF5
 11769                           prodh	equ	0xFF4
 11770                           prodl	equ	0xFF3
 11771                           postinc0	equ	0xFEE
 11772                           wreg	equ	0xFE8
 11773                           indf2	equ	0xFDF
 11774                           postinc2	equ	0xFDE
 11775                           postdec2	equ	0xFDD
 11776                           fsr2h	equ	0xFDA
 11777                           fsr2l	equ	0xFD9
 11778                           status	equ	0xFD8
 11779                           
 11780 ;; *************** function _vscp_getMinorVersion *****************
 11781 ;; Defined at:
 11782 ;;		line 2325 in file "../main.c"
 11783 ;; Parameters:    Size  Location     Type
 11784 ;;		None
 11785 ;; Auto vars:     Size  Location     Type
 11786 ;;		None
 11787 ;; Return value:  Size  Location     Type
 11788 ;;                  1    wreg      unsigned char 
 11789 ;; Registers used:
 11790 ;;		wreg
 11791 ;; Tracked objects:
 11792 ;;		On entry : F/0
 11793 ;;		On exit  : F/0
 11794 ;;		Unchanged: F/0
 11795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11796 ;;      Params:         0       0       0       0       0       0       0
 11797 ;;      Locals:         0       0       0       0       0       0       0
 11798 ;;      Temps:          0       0       0       0       0       0       0
 11799 ;;      Totals:         0       0       0       0       0       0       0
 11800 ;;Total ram usage:        0 bytes
 11801 ;; Hardware stack levels used:    1
 11802 ;; Hardware stack levels required when called:    2
 11803 ;; This function calls:
 11804 ;;		Nothing
 11805 ;; This function is called by:
 11806 ;;		_vscp_readStdReg
 11807 ;; This function uses a non-reentrant model
 11808 ;;
 11809                           
 11810                           	psect	text39
 11811  0044F0                     __ptext39:
 11812                           	opt stack 0
 11813  0044F0                     _vscp_getMinorVersion:
 11814                           	opt stack 26
 11815                           
 11816                           ; BSR set to: 0
 11817                           
 11818                           ; BSR set to: 0
 11819                           ;main.c: 2326: return 1;
 11820                           
 11821                           ; BSR set to: 0
 11822                           ;incstack = 0
 11823                           ;incstack = 0
 11824  0044F0  0C01               	retlw	1
 11825  0044F2                     __end_of_vscp_getMinorVersion:
 11826                           	opt stack 0
 11827                           tblptru	equ	0xFF8
 11828                           tblptrh	equ	0xFF7
 11829                           tblptrl	equ	0xFF6
 11830                           tablat	equ	0xFF5
 11831                           prodh	equ	0xFF4
 11832                           prodl	equ	0xFF3
 11833                           postinc0	equ	0xFEE
 11834                           wreg	equ	0xFE8
 11835                           indf2	equ	0xFDF
 11836                           postinc2	equ	0xFDE
 11837                           postdec2	equ	0xFDD
 11838                           fsr2h	equ	0xFDA
 11839                           fsr2l	equ	0xFD9
 11840                           status	equ	0xFD8
 11841                           
 11842 ;; *************** function _vscp_getMajorVersion *****************
 11843 ;; Defined at:
 11844 ;;		line 2316 in file "../main.c"
 11845 ;; Parameters:    Size  Location     Type
 11846 ;;		None
 11847 ;; Auto vars:     Size  Location     Type
 11848 ;;		None
 11849 ;; Return value:  Size  Location     Type
 11850 ;;                  1    wreg      unsigned char 
 11851 ;; Registers used:
 11852 ;;		wreg
 11853 ;; Tracked objects:
 11854 ;;		On entry : F/0
 11855 ;;		On exit  : F/0
 11856 ;;		Unchanged: F/0
 11857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11858 ;;      Params:         0       0       0       0       0       0       0
 11859 ;;      Locals:         0       0       0       0       0       0       0
 11860 ;;      Temps:          0       0       0       0       0       0       0
 11861 ;;      Totals:         0       0       0       0       0       0       0
 11862 ;;Total ram usage:        0 bytes
 11863 ;; Hardware stack levels used:    1
 11864 ;; Hardware stack levels required when called:    2
 11865 ;; This function calls:
 11866 ;;		Nothing
 11867 ;; This function is called by:
 11868 ;;		_vscp_readStdReg
 11869 ;; This function uses a non-reentrant model
 11870 ;;
 11871                           
 11872                           	psect	text40
 11873  0044F2                     __ptext40:
 11874                           	opt stack 0
 11875  0044F2                     _vscp_getMajorVersion:
 11876                           	opt stack 26
 11877                           
 11878                           ; BSR set to: 0
 11879                           
 11880                           ; BSR set to: 0
 11881                           ;main.c: 2317: return 1;
 11882                           
 11883                           ; BSR set to: 0
 11884                           ;incstack = 0
 11885                           ;incstack = 0
 11886  0044F2  0C01               	retlw	1
 11887  0044F4                     __end_of_vscp_getMajorVersion:
 11888                           	opt stack 0
 11889                           tblptru	equ	0xFF8
 11890                           tblptrh	equ	0xFF7
 11891                           tblptrl	equ	0xFF6
 11892                           tablat	equ	0xFF5
 11893                           prodh	equ	0xFF4
 11894                           prodl	equ	0xFF3
 11895                           postinc0	equ	0xFEE
 11896                           wreg	equ	0xFE8
 11897                           indf2	equ	0xFDF
 11898                           postinc2	equ	0xFDE
 11899                           postdec2	equ	0xFDD
 11900                           fsr2h	equ	0xFDA
 11901                           fsr2l	equ	0xFD9
 11902                           status	equ	0xFD8
 11903                           
 11904 ;; *************** function _vscp_newNodeOnline *****************
 11905 ;; Defined at:
 11906 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 11907 ;; Parameters:    Size  Location     Type
 11908 ;;		None
 11909 ;; Auto vars:     Size  Location     Type
 11910 ;;		None
 11911 ;; Return value:  Size  Location     Type
 11912 ;;		None               void
 11913 ;; Registers used:
 11914 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11915 ;; Tracked objects:
 11916 ;;		On entry : F/0
 11917 ;;		On exit  : F/0
 11918 ;;		Unchanged: 0/0
 11919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11920 ;;      Params:         0       0       0       0       0       0       0
 11921 ;;      Locals:         0       0       0       0       0       0       0
 11922 ;;      Temps:          1       0       0       0       0       0       0
 11923 ;;      Totals:         1       0       0       0       0       0       0
 11924 ;;Total ram usage:        1 bytes
 11925 ;; Hardware stack levels used:    1
 11926 ;; Hardware stack levels required when called:    7
 11927 ;; This function calls:
 11928 ;;		_vscp_sendEvent
 11929 ;; This function is called by:
 11930 ;;		_vscp_handleProtocolEvent
 11931 ;; This function uses a non-reentrant model
 11932 ;;
 11933                           
 11934                           	psect	text41
 11935  004166                     __ptext41:
 11936                           	opt stack 0
 11937  004166                     _vscp_newNodeOnline:
 11938                           	opt stack 22
 11939                           
 11940                           ; BSR set to: 0
 11941                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 11942                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11943                           
 11944                           ; BSR set to: 0
 11945                           ;incstack = 0
 11946                           ;incstack = 0
 11947  004166  C096  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 11948  00416A  0E0F               	movlw	15
 11949  00416C  164C               	andwf	??_vscp_newNodeOnline,f,c
 11950  00416E  044C               	decf	??_vscp_newNodeOnline,w,c
 11951  004170  E10E               	bnz	l1113
 11952                           
 11953                           ; BSR set to: 0
 11954  004172  5191               	movf	_vscp_nickname& (0+255),w,b
 11955  004174  EE20  F09C         	lfsr	2,_vscp_imsg+6
 11956  004178  62DF               	cpfseq	indf2,c
 11957  00417A  D009               	goto	l1113
 11958                           
 11959                           ; BSR set to: 0
 11960                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 11961  00417C  0E80               	movlw	128
 11962  00417E  6FA4               	movwf	_vscp_omsg& (0+255),b
 11963                           
 11964                           ; BSR set to: 0
 11965                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 11966  004180  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 11967                           
 11968                           ; BSR set to: 0
 11969                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 11970  004182  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 11971  004184  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 11972                           
 11973                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 11974  004186  0E03               	movlw	3
 11975  004188  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 11976                           
 11977                           ; BSR set to: 0
 11978                           ;vscp_firmware.c: 514: vscp_sendEvent();
 11979  00418A  EC2A  F021         	call	_vscp_sendEvent	;wreg free
 11980  00418E                     l1113:
 11981                           
 11982                           ; BSR set to: 0
 11983  00418E  0012               	return	
 11984  004190                     __end_of_vscp_newNodeOnline:
 11985                           	opt stack 0
 11986                           tblptru	equ	0xFF8
 11987                           tblptrh	equ	0xFF7
 11988                           tblptrl	equ	0xFF6
 11989                           tablat	equ	0xFF5
 11990                           prodh	equ	0xFF4
 11991                           prodl	equ	0xFF3
 11992                           postinc0	equ	0xFEE
 11993                           wreg	equ	0xFE8
 11994                           indf2	equ	0xFDF
 11995                           postinc2	equ	0xFDE
 11996                           postdec2	equ	0xFDD
 11997                           fsr2h	equ	0xFDA
 11998                           fsr2l	equ	0xFD9
 11999                           status	equ	0xFD8
 12000                           
 12001 ;; *************** function _vscp_handleDropNickname *****************
 12002 ;; Defined at:
 12003 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 12004 ;; Parameters:    Size  Location     Type
 12005 ;;		None
 12006 ;; Auto vars:     Size  Location     Type
 12007 ;;  bytes           1   12[COMRAM] unsigned char 
 12008 ;; Return value:  Size  Location     Type
 12009 ;;		None               void
 12010 ;; Registers used:
 12011 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12012 ;; Tracked objects:
 12013 ;;		On entry : F/0
 12014 ;;		On exit  : F/0
 12015 ;;		Unchanged: 0/0
 12016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12017 ;;      Params:         0       0       0       0       0       0       0
 12018 ;;      Locals:         1       0       0       0       0       0       0
 12019 ;;      Temps:          0       0       0       0       0       0       0
 12020 ;;      Totals:         1       0       0       0       0       0       0
 12021 ;;Total ram usage:        1 bytes
 12022 ;; Hardware stack levels used:    1
 12023 ;; Hardware stack levels required when called:    5
 12024 ;; This function calls:
 12025 ;;		_vscp_init
 12026 ;;		_vscp_writeNicknamePermanent
 12027 ;; This function is called by:
 12028 ;;		_vscp_handleProtocolEvent
 12029 ;; This function uses a non-reentrant model
 12030 ;;
 12031                           
 12032                           	psect	text42
 12033  0040DA                     __ptext42:
 12034                           	opt stack 0
 12035  0040DA                     _vscp_handleDropNickname:
 12036                           	opt stack 24
 12037                           
 12038                           ; BSR set to: 0
 12039                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 12040                           
 12041                           ; BSR set to: 0
 12042                           ;incstack = 0
 12043                           ;incstack = 0
 12044  0040DA  5196               	movf	_vscp_imsg& (0+255),w,b
 12045  0040DC  0B0F               	andlw	15
 12046  0040DE  6E0D               	movwf	vscp_handleDropNickname@bytes,c
 12047                           
 12048                           ; BSR set to: 0
 12049                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12050  0040E0  500D               	movf	vscp_handleDropNickname@bytes,w,c
 12051  0040E2  E012               	bz	l1109
 12052                           
 12053                           ; BSR set to: 0
 12054  0040E4  5191               	movf	_vscp_nickname& (0+255),w,b
 12055  0040E6  EE20  F09C         	lfsr	2,_vscp_imsg+6
 12056  0040EA  62DF               	cpfseq	indf2,c
 12057  0040EC  D00D               	goto	l1109
 12058                           
 12059                           ; BSR set to: 0
 12060                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 12061  0040EE  040D               	decf	vscp_handleDropNickname@bytes,w,c
 12062  0040F0  E005               	bz	l1108
 12063                           
 12064                           ; BSR set to: 0
 12065  0040F2  0E01               	movlw	1
 12066  0040F4  640D               	cpfsgt	vscp_handleDropNickname@bytes,c
 12067  0040F6  D008               	goto	l1109
 12068                           
 12069                           ; BSR set to: 0
 12070  0040F8  679D               	tstfsz	(_vscp_imsg+7)& (0+255),b
 12071  0040FA  D006               	goto	l1109
 12072  0040FC                     l1108:
 12073                           
 12074                           ; BSR set to: 0
 12075                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 12076  0040FC  6991               	setf	_vscp_nickname& (0+255),b
 12077                           
 12078                           ; BSR set to: 0
 12079                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 12080  0040FE  0EFF               	movlw	255
 12081  004100  EC08  F022         	call	_vscp_writeNicknamePermanent
 12082                           
 12083                           ;vscp_firmware.c: 481: vscp_init();
 12084  004104  ECF3  F01F         	call	_vscp_init	;wreg free
 12085  004108                     l1109:
 12086                           
 12087                           ; BSR set to: 0
 12088  004108  0012               	return	
 12089  00410A                     __end_of_vscp_handleDropNickname:
 12090                           	opt stack 0
 12091                           tblptru	equ	0xFF8
 12092                           tblptrh	equ	0xFF7
 12093                           tblptrl	equ	0xFF6
 12094                           tablat	equ	0xFF5
 12095                           prodh	equ	0xFF4
 12096                           prodl	equ	0xFF3
 12097                           postinc0	equ	0xFEE
 12098                           wreg	equ	0xFE8
 12099                           indf2	equ	0xFDF
 12100                           postinc2	equ	0xFDE
 12101                           postdec2	equ	0xFDD
 12102                           fsr2h	equ	0xFDA
 12103                           fsr2l	equ	0xFD9
 12104                           status	equ	0xFD8
 12105                           
 12106 ;; *************** function _vscp_init *****************
 12107 ;; Defined at:
 12108 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 12109 ;; Parameters:    Size  Location     Type
 12110 ;;		None
 12111 ;; Auto vars:     Size  Location     Type
 12112 ;;		None
 12113 ;; Return value:  Size  Location     Type
 12114 ;;		None               void
 12115 ;; Registers used:
 12116 ;;		wreg, status,2, cstack
 12117 ;; Tracked objects:
 12118 ;;		On entry : 0/0
 12119 ;;		On exit  : F/0
 12120 ;;		Unchanged: 0/0
 12121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12122 ;;      Params:         0       0       0       0       0       0       0
 12123 ;;      Locals:         0       0       0       0       0       0       0
 12124 ;;      Temps:          0       0       0       0       0       0       0
 12125 ;;      Totals:         0       0       0       0       0       0       0
 12126 ;;Total ram usage:        0 bytes
 12127 ;; Hardware stack levels used:    1
 12128 ;; Hardware stack levels required when called:    4
 12129 ;; This function calls:
 12130 ;;		_vscp_readNicknamePermanent
 12131 ;; This function is called by:
 12132 ;;		_main
 12133 ;;		_vscp_handleDropNickname
 12134 ;;		_vscp_handleProtocolEvent
 12135 ;; This function uses a non-reentrant model
 12136 ;;
 12137                           
 12138                           	psect	text43
 12139  003FE6                     __ptext43:
 12140                           	opt stack 0
 12141  003FE6                     _vscp_init:
 12142                           	opt stack 24
 12143                           
 12144                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 12145                           
 12146                           ; BSR set to: 0
 12147                           ;incstack = 0
 12148                           ;incstack = 0
 12149  003FE6  0E02               	movlw	2
 12150  003FE8  6E56               	movwf	_vscp_initledfunc,c
 12151                           
 12152                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 12153  003FEA  EC60  F022         	call	_vscp_readNicknamePermanent	;wreg free
 12154  003FEE  0100               	movlb	0	; () banked
 12155  003FF0  6F91               	movwf	_vscp_nickname& (0+255),b
 12156                           
 12157                           ; BSR set to: 0
 12158                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 12159  003FF2  6791               	tstfsz	_vscp_nickname& (0+255),b
 12160  003FF4  D001               	goto	l1050
 12161                           
 12162                           ; BSR set to: 0
 12163  003FF6  6991               	setf	_vscp_nickname& (0+255),b
 12164  003FF8                     l1050:
 12165                           
 12166                           ; BSR set to: 0
 12167                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 12168  003FF8  6B96               	clrf	_vscp_imsg& (0+255),b
 12169                           
 12170                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 12171  003FFA  6B97               	clrf	(_vscp_imsg+1)& (0+255),b
 12172                           
 12173                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 12174  003FFC  6B98               	clrf	(_vscp_imsg+2)& (0+255),b
 12175  003FFE  6B99               	clrf	(_vscp_imsg+3)& (0+255),b
 12176                           
 12177                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 12178  004000  6B9A               	clrf	(_vscp_imsg+4)& (0+255),b
 12179                           
 12180                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 12181  004002  6BA4               	clrf	_vscp_omsg& (0+255),b
 12182                           
 12183                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 12184  004004  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12185                           
 12186                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 12187  004006  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12188  004008  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12189                           
 12190                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 12191  00400A  6BA8               	clrf	(_vscp_omsg+4)& (0+255),b
 12192                           
 12193                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 12194  00400C  6A55               	clrf	_vscp_alarmstatus,c
 12195                           
 12196                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 12197  00400E  6A57               	clrf	_vscp_probe_address,c
 12198                           
 12199                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 12200  004010  6B92               	clrf	_vscp_node_state& (0+255),b
 12201                           
 12202                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 12203  004012  6B93               	clrf	_vscp_node_substate& (0+255),b
 12204                           
 12205                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 12206  004014  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12207                           
 12208                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 12209  004016  6A52               	clrf	_vscp_page_select,c
 12210  004018  6A53               	clrf	_vscp_page_select+1,c
 12211                           
 12212                           ;vscp_firmware.c: 153: vscp_timer = 0;
 12213  00401A  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12214  00401C  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12215                           
 12216                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 12217  00401E  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
 12218  004020  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 12219                           
 12220                           ;vscp_firmware.c: 155: vscp_second = 0;
 12221  004022  6B95               	clrf	_vscp_second& (0+255),b
 12222                           
 12223                           ;vscp_firmware.c: 156: vscp_minute = 0;
 12224  004024  6B90               	clrf	_vscp_minute& (0+255),b
 12225                           
 12226                           ;vscp_firmware.c: 157: vscp_hour = 0;
 12227  004026  6B8E               	clrf	_vscp_hour& (0+255),b
 12228                           
 12229                           ; BSR set to: 0
 12230  004028  0012               	return	
 12231  00402A                     __end_of_vscp_init:
 12232                           	opt stack 0
 12233                           tblptru	equ	0xFF8
 12234                           tblptrh	equ	0xFF7
 12235                           tblptrl	equ	0xFF6
 12236                           tablat	equ	0xFF5
 12237                           prodh	equ	0xFF4
 12238                           prodl	equ	0xFF3
 12239                           postinc0	equ	0xFEE
 12240                           wreg	equ	0xFE8
 12241                           indf2	equ	0xFDF
 12242                           postinc2	equ	0xFDE
 12243                           postdec2	equ	0xFDD
 12244                           fsr2h	equ	0xFDA
 12245                           fsr2l	equ	0xFD9
 12246                           status	equ	0xFD8
 12247                           
 12248 ;; *************** function _vscp_readNicknamePermanent *****************
 12249 ;; Defined at:
 12250 ;;		line 847 in file "../main.c"
 12251 ;; Parameters:    Size  Location     Type
 12252 ;;		None
 12253 ;; Auto vars:     Size  Location     Type
 12254 ;;		None
 12255 ;; Return value:  Size  Location     Type
 12256 ;;                  1    wreg      unsigned char 
 12257 ;; Registers used:
 12258 ;;		wreg, status,2, cstack
 12259 ;; Tracked objects:
 12260 ;;		On entry : 0/0
 12261 ;;		On exit  : 0/0
 12262 ;;		Unchanged: 0/0
 12263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12264 ;;      Params:         0       0       0       0       0       0       0
 12265 ;;      Locals:         0       0       0       0       0       0       0
 12266 ;;      Temps:          0       0       0       0       0       0       0
 12267 ;;      Totals:         0       0       0       0       0       0       0
 12268 ;;Total ram usage:        0 bytes
 12269 ;; Hardware stack levels used:    1
 12270 ;; Hardware stack levels required when called:    3
 12271 ;; This function calls:
 12272 ;;		_Read_b_eep
 12273 ;; This function is called by:
 12274 ;;		_vscp_init
 12275 ;; This function uses a non-reentrant model
 12276 ;;
 12277                           
 12278                           	psect	text44
 12279  0044C0                     __ptext44:
 12280                           	opt stack 0
 12281  0044C0                     _vscp_readNicknamePermanent:
 12282                           	opt stack 24
 12283                           
 12284                           ;main.c: 848: return Read_b_eep(0x01);
 12285                           
 12286                           ; BSR set to: 0
 12287                           ;incstack = 0
 12288                           ;incstack = 0
 12289  0044C0  6A09               	clrf	?_Read_b_eep+1,c
 12290  0044C2  0E01               	movlw	1
 12291  0044C4  6E08               	movwf	?_Read_b_eep,c
 12292  0044C6  EF3A  F022         	goto	_Read_b_eep	;wreg free
 12293  0044CA                     __end_of_vscp_readNicknamePermanent:
 12294                           	opt stack 0
 12295                           tblptru	equ	0xFF8
 12296                           tblptrh	equ	0xFF7
 12297                           tblptrl	equ	0xFF6
 12298                           tablat	equ	0xFF5
 12299                           prodh	equ	0xFF4
 12300                           prodl	equ	0xFF3
 12301                           postinc0	equ	0xFEE
 12302                           wreg	equ	0xFE8
 12303                           indf2	equ	0xFDF
 12304                           postinc2	equ	0xFDE
 12305                           postdec2	equ	0xFDD
 12306                           fsr2h	equ	0xFDA
 12307                           fsr2l	equ	0xFD9
 12308                           status	equ	0xFD8
 12309                           
 12310 ;; *************** function _vscp_handleSetNickname *****************
 12311 ;; Defined at:
 12312 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 12313 ;; Parameters:    Size  Location     Type
 12314 ;;		None
 12315 ;; Auto vars:     Size  Location     Type
 12316 ;;		None
 12317 ;; Return value:  Size  Location     Type
 12318 ;;		None               void
 12319 ;; Registers used:
 12320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12321 ;; Tracked objects:
 12322 ;;		On entry : F/0
 12323 ;;		On exit  : 0/0
 12324 ;;		Unchanged: 0/0
 12325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12326 ;;      Params:         0       0       0       0       0       0       0
 12327 ;;      Locals:         0       0       0       0       0       0       0
 12328 ;;      Temps:          0       0       0       0       0       0       0
 12329 ;;      Totals:         0       0       0       0       0       0       0
 12330 ;;Total ram usage:        0 bytes
 12331 ;; Hardware stack levels used:    1
 12332 ;; Hardware stack levels required when called:    4
 12333 ;; This function calls:
 12334 ;;		_vscp_writeNicknamePermanent
 12335 ;;		_vscp_setSegmentCRC
 12336 ;; This function is called by:
 12337 ;;		_vscp_handleProtocolEvent
 12338 ;; This function uses a non-reentrant model
 12339 ;;
 12340                           
 12341                           	psect	text45
 12342  00427A                     __ptext45:
 12343                           	opt stack 0
 12344  00427A                     _vscp_handleSetNickname:
 12345                           	opt stack 25
 12346                           
 12347                           ; BSR set to: 0
 12348                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 12349                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12350                           
 12351                           ;incstack = 0
 12352                           ;incstack = 0
 12353  00427A  5196               	movf	_vscp_imsg& (0+255),w,b
 12354  00427C  0B0F               	andlw	15
 12355  00427E  0A02               	xorlw	2
 12356  004280  E10D               	bnz	l1102
 12357                           
 12358                           ; BSR set to: 0
 12359  004282  5191               	movf	_vscp_nickname& (0+255),w,b
 12360  004284  EE20  F09C         	lfsr	2,_vscp_imsg+6
 12361  004288  62DF               	cpfseq	indf2,c
 12362  00428A  D008               	goto	l1102
 12363                           
 12364                           ; BSR set to: 0
 12365                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 12366  00428C  C09D  F091         	movff	_vscp_imsg+7,_vscp_nickname
 12367                           
 12368                           ; BSR set to: 0
 12369                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 12370  004290  5191               	movf	_vscp_nickname& (0+255),w,b
 12371  004292  EC08  F022         	call	_vscp_writeNicknamePermanent
 12372                           
 12373                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 12374  004296  0E40               	movlw	64
 12375  004298  ECFD  F021         	call	_vscp_setSegmentCRC
 12376  00429C                     l1102:
 12377  00429C  0012               	return	
 12378  00429E                     __end_of_vscp_handleSetNickname:
 12379                           	opt stack 0
 12380                           tblptru	equ	0xFF8
 12381                           tblptrh	equ	0xFF7
 12382                           tblptrl	equ	0xFF6
 12383                           tablat	equ	0xFF5
 12384                           prodh	equ	0xFF4
 12385                           prodl	equ	0xFF3
 12386                           postinc0	equ	0xFEE
 12387                           wreg	equ	0xFE8
 12388                           indf2	equ	0xFDF
 12389                           postinc2	equ	0xFDE
 12390                           postdec2	equ	0xFDD
 12391                           fsr2h	equ	0xFDA
 12392                           fsr2l	equ	0xFD9
 12393                           status	equ	0xFD8
 12394                           
 12395 ;; *************** function _vscp_handleHeartbeat *****************
 12396 ;; Defined at:
 12397 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 12398 ;; Parameters:    Size  Location     Type
 12399 ;;		None
 12400 ;; Auto vars:     Size  Location     Type
 12401 ;;		None
 12402 ;; Return value:  Size  Location     Type
 12403 ;;		None               void
 12404 ;; Registers used:
 12405 ;;		wreg, status,2, status,0, cstack
 12406 ;; Tracked objects:
 12407 ;;		On entry : F/0
 12408 ;;		On exit  : 0/0
 12409 ;;		Unchanged: 0/0
 12410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12411 ;;      Params:         0       0       0       0       0       0       0
 12412 ;;      Locals:         0       0       0       0       0       0       0
 12413 ;;      Temps:          0       0       0       0       0       0       0
 12414 ;;      Totals:         0       0       0       0       0       0       0
 12415 ;;Total ram usage:        0 bytes
 12416 ;; Hardware stack levels used:    1
 12417 ;; Hardware stack levels required when called:    4
 12418 ;; This function calls:
 12419 ;;		_vscp_writeNicknamePermanent
 12420 ;;		_vscp_getSegmentCRC
 12421 ;;		_vscp_setSegmentCRC
 12422 ;; This function is called by:
 12423 ;;		_vscp_handleProtocolEvent
 12424 ;; This function uses a non-reentrant model
 12425 ;;
 12426                           
 12427                           	psect	text46
 12428  00402A                     __ptext46:
 12429                           	opt stack 0
 12430  00402A                     _vscp_handleHeartbeat:
 12431                           	opt stack 25
 12432                           
 12433                           ; BSR set to: 0
 12434                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 12435                           
 12436                           ;incstack = 0
 12437                           ;incstack = 0
 12438  00402A  EC65  F022         	call	_vscp_getSegmentCRC	;wreg free
 12439  00402E  0900               	iorlw	0
 12440  004030  E116               	bnz	l9533
 12441                           
 12442                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 12443                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 12444  004032  0100               	movlb	0	; () banked
 12445  004034  5196               	movf	_vscp_imsg& (0+255),w,b
 12446  004036  0B0F               	andlw	15
 12447  004038  0A05               	xorlw	5
 12448  00403A  E115               	bnz	l1098
 12449                           
 12450                           ; BSR set to: 0
 12451  00403C  EC65  F022         	call	_vscp_getSegmentCRC	;wreg free
 12452  004040  0100               	movlb	0	; () banked
 12453  004042  199C               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 12454  004044  E010               	bz	l1098
 12455                           
 12456                           ; BSR set to: 0
 12457                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12458  004046  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12459  004048  ECFD  F021         	call	_vscp_setSegmentCRC
 12460                           
 12461                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 12462  00404C  0100               	movlb	0	; () banked
 12463  00404E  6991               	setf	_vscp_nickname& (0+255),b
 12464                           
 12465                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 12466  004050  0EFF               	movlw	255
 12467  004052  EC08  F022         	call	_vscp_writeNicknamePermanent
 12468                           
 12469                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 12470  004056  0E01               	movlw	1
 12471  004058  0100               	movlb	0	; () banked
 12472  00405A  6F92               	movwf	_vscp_node_state& (0+255),b
 12473  00405C  D004               	goto	l1098
 12474  00405E                     l9533:
 12475                           
 12476                           ;vscp_firmware.c: 411: else {
 12477                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12478  00405E  0100               	movlb	0	; () banked
 12479  004060  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12480  004062  ECFD  F021         	call	_vscp_setSegmentCRC
 12481  004066                     l1098:
 12482  004066  0012               	return	
 12483  004068                     __end_of_vscp_handleHeartbeat:
 12484                           	opt stack 0
 12485                           tblptru	equ	0xFF8
 12486                           tblptrh	equ	0xFF7
 12487                           tblptrl	equ	0xFF6
 12488                           tablat	equ	0xFF5
 12489                           prodh	equ	0xFF4
 12490                           prodl	equ	0xFF3
 12491                           postinc0	equ	0xFEE
 12492                           wreg	equ	0xFE8
 12493                           indf2	equ	0xFDF
 12494                           postinc2	equ	0xFDE
 12495                           postdec2	equ	0xFDD
 12496                           fsr2h	equ	0xFDA
 12497                           fsr2l	equ	0xFD9
 12498                           status	equ	0xFD8
 12499                           
 12500 ;; *************** function _vscp_getMatrixInfo *****************
 12501 ;; Defined at:
 12502 ;;		line 2526 in file "../main.c"
 12503 ;; Parameters:    Size  Location     Type
 12504 ;;  pData           1    wreg     PTR unsigned char 
 12505 ;;		 -> vscp_omsg(13), 
 12506 ;; Auto vars:     Size  Location     Type
 12507 ;;  pData           1    0[COMRAM] PTR unsigned char 
 12508 ;;		 -> vscp_omsg(13), 
 12509 ;;  i               1    7[COMRAM] unsigned char 
 12510 ;; Return value:  Size  Location     Type
 12511 ;;		None               void
 12512 ;; Registers used:
 12513 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12514 ;; Tracked objects:
 12515 ;;		On entry : F/0
 12516 ;;		On exit  : F/0
 12517 ;;		Unchanged: 0/0
 12518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12519 ;;      Params:         0       0       0       0       0       0       0
 12520 ;;      Locals:         1       0       0       0       0       0       0
 12521 ;;      Temps:          0       0       0       0       0       0       0
 12522 ;;      Totals:         1       0       0       0       0       0       0
 12523 ;;Total ram usage:        1 bytes
 12524 ;; Hardware stack levels used:    1
 12525 ;; Hardware stack levels required when called:    2
 12526 ;; This function calls:
 12527 ;;		Nothing
 12528 ;; This function is called by:
 12529 ;;		_vscp_handleProtocolEvent
 12530 ;; This function uses a non-reentrant model
 12531 ;;
 12532                           
 12533                           	psect	text47
 12534  004306                     __ptext47:
 12535                           	opt stack 0
 12536  004306                     _vscp_getMatrixInfo:
 12537                           	opt stack 27
 12538                           
 12539                           ; BSR set to: 0
 12540                           ;main.c: 2527: uint8_t i;
 12541                           ;main.c: 2529: vscp_omsg.data[ 0 ] = 7;
 12542                           
 12543                           ;incstack = 0
 12544                           ;incstack = 0
 12545  004306  0E07               	movlw	7
 12546  004308  6FA9               	movwf	(_vscp_omsg+5)& (0+255),b
 12547                           
 12548                           ;main.c: 2530: vscp_omsg.data[ 1 ] = 72;
 12549  00430A  0E48               	movlw	72
 12550  00430C  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
 12551                           
 12552                           ;main.c: 2533: for ( i = 2; i < 8; i++ ) {
 12553  00430E  0E02               	movlw	2
 12554  004310  6E08               	movwf	vscp_getMatrixInfo@i,c
 12555  004312                     l6903:
 12556                           
 12557                           ; BSR set to: 0
 12558                           ;main.c: 2534: vscp_omsg.data[ i ] = 0;
 12559  004312  5008               	movf	vscp_getMatrixInfo@i,w,c
 12560  004314  0FA9               	addlw	low (_vscp_omsg+5)
 12561  004316  6ED9               	movwf	fsr2l,c
 12562  004318  6ADA               	clrf	fsr2h,c
 12563  00431A  6ADF               	clrf	indf2,c
 12564                           
 12565                           ; BSR set to: 0
 12566  00431C  2A08               	incf	vscp_getMatrixInfo@i,f,c
 12567                           
 12568                           ; BSR set to: 0
 12569  00431E  0E07               	movlw	7
 12570  004320  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 12571  004322  D7F7               	goto	l6903
 12572                           
 12573                           ; BSR set to: 0
 12574  004324  0C07               	retlw	7
 12575  004326                     __end_of_vscp_getMatrixInfo:
 12576                           	opt stack 0
 12577                           tblptru	equ	0xFF8
 12578                           tblptrh	equ	0xFF7
 12579                           tblptrl	equ	0xFF6
 12580                           tablat	equ	0xFF5
 12581                           prodh	equ	0xFF4
 12582                           prodl	equ	0xFF3
 12583                           postinc0	equ	0xFEE
 12584                           wreg	equ	0xFE8
 12585                           indf2	equ	0xFDF
 12586                           postinc2	equ	0xFDE
 12587                           postdec2	equ	0xFDD
 12588                           fsr2h	equ	0xFDA
 12589                           fsr2l	equ	0xFD9
 12590                           status	equ	0xFD8
 12591                           
 12592 ;; *************** function _vscp_goBootloaderMode *****************
 12593 ;; Defined at:
 12594 ;;		line 2510 in file "../main.c"
 12595 ;; Parameters:    Size  Location     Type
 12596 ;;  algorithm       1    wreg     unsigned char 
 12597 ;; Auto vars:     Size  Location     Type
 12598 ;;  algorithm       1   11[COMRAM] unsigned char 
 12599 ;; Return value:  Size  Location     Type
 12600 ;;		None               void
 12601 ;; Registers used:
 12602 ;;		wreg, status,2, status,0, cstack
 12603 ;; Tracked objects:
 12604 ;;		On entry : F/0
 12605 ;;		On exit  : 0/0
 12606 ;;		Unchanged: 0/0
 12607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12608 ;;      Params:         0       0       0       0       0       0       0
 12609 ;;      Locals:         1       0       0       0       0       0       0
 12610 ;;      Temps:          0       0       0       0       0       0       0
 12611 ;;      Totals:         1       0       0       0       0       0       0
 12612 ;;Total ram usage:        1 bytes
 12613 ;; Hardware stack levels used:    1
 12614 ;; Hardware stack levels required when called:    3
 12615 ;; This function calls:
 12616 ;;		_Busy_eep
 12617 ;;		_Write_b_eep
 12618 ;; This function is called by:
 12619 ;;		_vscp_handleProtocolEvent
 12620 ;; This function uses a non-reentrant model
 12621 ;;
 12622                           
 12623                           	psect	text48
 12624  00437E                     __ptext48:
 12625                           	opt stack 0
 12626  00437E                     _vscp_goBootloaderMode:
 12627                           	opt stack 26
 12628                           
 12629                           ; BSR set to: 0
 12630                           ;incstack = 0
 12631                           ;incstack = 0
 12632                           ;vscp_goBootloaderMode@algorithm stored from wreg
 12633  00437E  CFE8 F00C          	movff	wreg,vscp_goBootloaderMode@algorithm
 12634                           
 12635                           ; BSR set to: 0
 12636                           ;main.c: 2511: if ( 0x01 != algorithm ) return;
 12637  004382  040C               	decf	vscp_goBootloaderMode@algorithm,w,c
 12638  004384  E109               	bnz	l640
 12639                           
 12640                           ; BSR set to: 0
 12641                           ;main.c: 2515: (Busy_eep(), Write_b_eep(0x00,0xff));
 12642  004386  EC6E  F022         	call	_Busy_eep	;wreg free
 12643  00438A  6A09               	clrf	?_Write_b_eep+1,c
 12644  00438C  6A08               	clrf	?_Write_b_eep,c
 12645  00438E  0EFF               	movlw	255
 12646  004390  680A               	setf	?_Write_b_eep+2,c
 12647  004392  EC53  F020         	call	_Write_b_eep	;wreg free
 12648  004396  00FF               	reset		;# 
 12649  004398                     l640:
 12650  004398  0012               	return	
 12651  00439A                     __end_of_vscp_goBootloaderMode:
 12652                           	opt stack 0
 12653                           tblptru	equ	0xFF8
 12654                           tblptrh	equ	0xFF7
 12655                           tblptrl	equ	0xFF6
 12656                           tablat	equ	0xFF5
 12657                           prodh	equ	0xFF4
 12658                           prodl	equ	0xFF3
 12659                           postinc0	equ	0xFEE
 12660                           wreg	equ	0xFE8
 12661                           indf2	equ	0xFDF
 12662                           postinc2	equ	0xFDE
 12663                           postdec2	equ	0xFDD
 12664                           fsr2h	equ	0xFDA
 12665                           fsr2l	equ	0xFD9
 12666                           status	equ	0xFD8
 12667                           
 12668 ;; *************** function _vscp_handleProbeState *****************
 12669 ;; Defined at:
 12670 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 12671 ;; Parameters:    Size  Location     Type
 12672 ;;		None
 12673 ;; Auto vars:     Size  Location     Type
 12674 ;;		None
 12675 ;; Return value:  Size  Location     Type
 12676 ;;		None               void
 12677 ;; Registers used:
 12678 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12679 ;; Tracked objects:
 12680 ;;		On entry : 0/0
 12681 ;;		On exit  : F/0
 12682 ;;		Unchanged: 0/0
 12683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12684 ;;      Params:         0       0       0       0       0       0       0
 12685 ;;      Locals:         0       0       0       0       0       0       0
 12686 ;;      Temps:          0       0       0       0       0       0       0
 12687 ;;      Totals:         0       0       0       0       0       0       0
 12688 ;;Total ram usage:        0 bytes
 12689 ;; Hardware stack levels used:    1
 12690 ;; Hardware stack levels required when called:    8
 12691 ;; This function calls:
 12692 ;;		_vscp_goActiveState
 12693 ;;		_vscp_writeNicknamePermanent
 12694 ;;		_vscp_sendEvent
 12695 ;;		_vscp_setSegmentCRC
 12696 ;; This function is called by:
 12697 ;;		_main
 12698 ;; This function uses a non-reentrant model
 12699 ;;
 12700                           
 12701                           	psect	text49
 12702  003AE4                     __ptext49:
 12703                           	opt stack 0
 12704  003AE4                     _vscp_handleProbeState:
 12705                           	opt stack 22
 12706                           
 12707                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 12708                           
 12709                           ;incstack = 0
 12710                           ;incstack = 0
 12711  003AE4  D053               	goto	l7843
 12712  003AE6                     l7773:
 12713                           
 12714                           ; BSR set to: 0
 12715                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 12716  003AE6  2857               	incf	_vscp_probe_address,w,c
 12717  003AE8  E010               	bz	l7789
 12718                           
 12719                           ; BSR set to: 0
 12720                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 12721  003AEA  0E81               	movlw	129
 12722  003AEC  6FA4               	movwf	_vscp_omsg& (0+255),b
 12723                           
 12724                           ; BSR set to: 0
 12725                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 12726  003AEE  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12727                           
 12728                           ; BSR set to: 0
 12729                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 12730  003AF0  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12731  003AF2  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12732                           
 12733                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 12734  003AF4  0E02               	movlw	2
 12735  003AF6  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12736                           
 12737                           ; BSR set to: 0
 12738                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 12739  003AF8  C057  F0A9         	movff	_vscp_probe_address,_vscp_omsg+5
 12740                           
 12741                           ; BSR set to: 0
 12742                           ;vscp_firmware.c: 216: vscp_sendEvent();
 12743  003AFC  EC2A  F021         	call	_vscp_sendEvent	;wreg free
 12744                           
 12745                           ; BSR set to: 0
 12746                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 12747  003B00  0E01               	movlw	1
 12748  003B02  6F93               	movwf	_vscp_node_substate& (0+255),b
 12749  003B04                     l7787:
 12750                           
 12751                           ; BSR set to: 0
 12752                           ;vscp_firmware.c: 219: vscp_timer = 0;
 12753  003B04  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12754  003B06  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12755                           
 12756                           ;vscp_firmware.c: 221: }
 12757  003B08  D048               	goto	l1065
 12758  003B0A                     l7789:
 12759                           
 12760                           ; BSR set to: 0
 12761                           ;vscp_firmware.c: 222: else {
 12762                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 12763  003B0A  0E04               	movlw	4
 12764  003B0C  6F92               	movwf	_vscp_node_state& (0+255),b
 12765                           
 12766                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 12767  003B0E  0E81               	movlw	129
 12768  003B10  6FA4               	movwf	_vscp_omsg& (0+255),b
 12769                           
 12770                           ; BSR set to: 0
 12771                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 12772  003B12  69A9               	setf	(_vscp_omsg+5)& (0+255),b
 12773                           
 12774                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 12775  003B14  0E07               	movlw	7
 12776  003B16  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
 12777                           
 12778                           ; BSR set to: 0
 12779                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 12780  003B18  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12781  003B1A  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12782                           
 12783                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 12784  003B1C  0E03               	movlw	3
 12785  003B1E  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12786                           
 12787                           ; BSR set to: 0
 12788                           ;vscp_firmware.c: 235: vscp_sendEvent();
 12789  003B20  EC2A  F021         	call	_vscp_sendEvent	;wreg free
 12790  003B24  D03A               	goto	l1065
 12791  003B26                     l1066:
 12792                           
 12793                           ; BSR set to: 0
 12794                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 12795  003B26  AF96               	btfss	_vscp_imsg& (0+255),7,b
 12796  003B28  D00F               	goto	l7813
 12797                           
 12798                           ; BSR set to: 0
 12799                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 12800                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 12801  003B2A  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
 12802  003B2C  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 12803  003B2E  E135               	bnz	l1065
 12804                           
 12805                           ; BSR set to: 0
 12806  003B30  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
 12807  003B32  0A03               	xorlw	3
 12808  003B34  E132               	bnz	l1065
 12809                           
 12810                           ; BSR set to: 0
 12811                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 12812  003B36  6657               	tstfsz	_vscp_probe_address,c
 12813  003B38  D003               	goto	l7807
 12814                           
 12815                           ; BSR set to: 0
 12816                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 12817  003B3A  0E02               	movlw	2
 12818  003B3C  6F92               	movwf	_vscp_node_state& (0+255),b
 12819  003B3E  D7E2               	goto	l7787
 12820  003B40                     l7807:
 12821                           
 12822                           ; BSR set to: 0
 12823                           ;vscp_firmware.c: 257: else {
 12824                           ;vscp_firmware.c: 260: vscp_probe_address++;
 12825  003B40  2A57               	incf	_vscp_probe_address,f,c
 12826                           
 12827                           ; BSR set to: 0
 12828                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 12829  003B42  6B93               	clrf	_vscp_node_substate& (0+255),b
 12830  003B44                     l7811:
 12831                           
 12832                           ; BSR set to: 0
 12833                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 12834  003B44  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12835  003B46  D029               	goto	l1065
 12836  003B48                     l7813:
 12837                           
 12838                           ; BSR set to: 0
 12839                           ;vscp_firmware.c: 267: else {
 12840                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 12841  003B48  0EE9               	movlw	233
 12842  003B4A  5D86               	subwf	_vscp_timer& (0+255),w,b	;volatile
 12843  003B4C  0E03               	movlw	3
 12844  003B4E  5987               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 12845  003B50  E324               	bnc	l1065
 12846                           
 12847                           ; BSR set to: 0
 12848                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 12849  003B52  2B94               	incf	_vscp_probe_cnt& (0+255),f,b
 12850                           
 12851                           ; BSR set to: 0
 12852                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 12853  003B54  0E02               	movlw	2
 12854  003B56  6594               	cpfsgt	_vscp_probe_cnt& (0+255),b
 12855  003B58  D017               	goto	l1073
 12856                           
 12857                           ; BSR set to: 0
 12858                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 12859  003B5A  6657               	tstfsz	_vscp_probe_address,c
 12860  003B5C  D005               	goto	l1074
 12861                           
 12862                           ; BSR set to: 0
 12863                           ;vscp_firmware.c: 279: vscp_probe_address++;
 12864  003B5E  2A57               	incf	_vscp_probe_address,f,c
 12865                           
 12866                           ; BSR set to: 0
 12867                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 12868  003B60  6B93               	clrf	_vscp_node_substate& (0+255),b
 12869                           
 12870                           ; BSR set to: 0
 12871                           ;vscp_firmware.c: 281: vscp_timer = 0;
 12872  003B62  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12873  003B64  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12874  003B66  D7EE               	goto	l7811
 12875  003B68                     l1074:
 12876                           
 12877                           ; BSR set to: 0
 12878                           ;vscp_firmware.c: 285: else {
 12879                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 12880  003B68  C057  F091         	movff	_vscp_probe_address,_vscp_nickname
 12881                           
 12882                           ; BSR set to: 0
 12883                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 12884  003B6C  0E03               	movlw	3
 12885  003B6E  6F92               	movwf	_vscp_node_state& (0+255),b
 12886                           
 12887                           ; BSR set to: 0
 12888                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 12889  003B70  6B93               	clrf	_vscp_node_substate& (0+255),b
 12890                           
 12891                           ; BSR set to: 0
 12892                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 12893  003B72  5191               	movf	_vscp_nickname& (0+255),w,b
 12894  003B74  EC08  F022         	call	_vscp_writeNicknamePermanent
 12895                           
 12896                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 12897  003B78  0E40               	movlw	64
 12898  003B7A  ECFD  F021         	call	_vscp_setSegmentCRC
 12899                           
 12900                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 12901  003B7E  0100               	movlb	0	; () banked
 12902  003B80  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12903                           
 12904                           ; BSR set to: 0
 12905                           ;vscp_firmware.c: 296: vscp_goActiveState();
 12906  003B82  EC93  F021         	call	_vscp_goActiveState	;wreg free
 12907  003B86  D009               	goto	l1065
 12908  003B88                     l1073:
 12909                           
 12910                           ; BSR set to: 0
 12911                           ;vscp_firmware.c: 300: else {
 12912                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 12913  003B88  6B93               	clrf	_vscp_node_substate& (0+255),b
 12914  003B8A  D007               	goto	l1065
 12915  003B8C                     l7843:
 12916  003B8C  0100               	movlb	0	; () banked
 12917  003B8E  5193               	movf	_vscp_node_substate& (0+255),w,b
 12918                           
 12919                           ; Switch size 1, requested type "speed"
 12920                           ; Number of cases is 3, Range of values is 0 to 2
 12921                           ; switch strategies available:
 12922                           ; Name         Instructions Cycles
 12923                           ; simple_byte           10     6 (average)
 12924                           ;	Chosen strategy is simple_byte
 12925  003B90  E0AA               	bz	l7773
 12926  003B92  0A01               	xorlw	1	; case 1
 12927  003B94  E0C8               	bz	l1066
 12928  003B96  0A03               	xorlw	3	; case 2
 12929  003B98  E1F7               	bnz	l1073
 12930  003B9A                     l1065:
 12931                           
 12932                           ; BSR set to: 0
 12933                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 12934  003B9A  6B96               	clrf	_vscp_imsg& (0+255),b
 12935                           
 12936                           ; BSR set to: 0
 12937  003B9C  0012               	return	
 12938  003B9E                     __end_of_vscp_handleProbeState:
 12939                           	opt stack 0
 12940                           tblptru	equ	0xFF8
 12941                           tblptrh	equ	0xFF7
 12942                           tblptrl	equ	0xFF6
 12943                           tablat	equ	0xFF5
 12944                           prodh	equ	0xFF4
 12945                           prodl	equ	0xFF3
 12946                           postinc0	equ	0xFEE
 12947                           wreg	equ	0xFE8
 12948                           indf2	equ	0xFDF
 12949                           postinc2	equ	0xFDE
 12950                           postdec2	equ	0xFDD
 12951                           fsr2h	equ	0xFDA
 12952                           fsr2l	equ	0xFD9
 12953                           status	equ	0xFD8
 12954                           
 12955 ;; *************** function _vscp_goActiveState *****************
 12956 ;; Defined at:
 12957 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 12958 ;; Parameters:    Size  Location     Type
 12959 ;;		None
 12960 ;; Auto vars:     Size  Location     Type
 12961 ;;		None
 12962 ;; Return value:  Size  Location     Type
 12963 ;;		None               void
 12964 ;; Registers used:
 12965 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12966 ;; Tracked objects:
 12967 ;;		On entry : 0/0
 12968 ;;		On exit  : F/0
 12969 ;;		Unchanged: 0/0
 12970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12971 ;;      Params:         0       0       0       0       0       0       0
 12972 ;;      Locals:         0       0       0       0       0       0       0
 12973 ;;      Temps:          0       0       0       0       0       0       0
 12974 ;;      Totals:         0       0       0       0       0       0       0
 12975 ;;Total ram usage:        0 bytes
 12976 ;; Hardware stack levels used:    1
 12977 ;; Hardware stack levels required when called:    7
 12978 ;; This function calls:
 12979 ;;		_vscp_sendEvent
 12980 ;; This function is called by:
 12981 ;;		_main
 12982 ;;		_vscp_handleProbeState
 12983 ;; This function uses a non-reentrant model
 12984 ;;
 12985                           
 12986                           	psect	text50
 12987  004326                     __ptext50:
 12988                           	opt stack 0
 12989  004326                     _vscp_goActiveState:
 12990                           	opt stack 22
 12991                           
 12992                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 12993                           
 12994                           ; BSR set to: 0
 12995                           ;incstack = 0
 12996                           ;incstack = 0
 12997  004326  0E81               	movlw	129
 12998  004328  0100               	movlb	0	; () banked
 12999  00432A  6FA4               	movwf	_vscp_omsg& (0+255),b
 13000                           
 13001                           ; BSR set to: 0
 13002                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 13003  00432C  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 13004                           
 13005                           ; BSR set to: 0
 13006                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 13007  00432E  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 13008  004330  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 13009                           
 13010                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 13011  004332  0E02               	movlw	2
 13012  004334  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 13013                           
 13014                           ; BSR set to: 0
 13015                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 13016  004336  C091  F0A9         	movff	_vscp_nickname,_vscp_omsg+5
 13017                           
 13018                           ; BSR set to: 0
 13019                           ;vscp_firmware.c: 366: vscp_sendEvent();
 13020  00433A  EC2A  F021         	call	_vscp_sendEvent	;wreg free
 13021                           
 13022                           ; BSR set to: 0
 13023                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 13024  00433E  0E01               	movlw	1
 13025  004340  6E56               	movwf	_vscp_initledfunc,c
 13026                           
 13027                           ; BSR set to: 0
 13028  004342  0C01               	retlw	1
 13029  004344                     __end_of_vscp_goActiveState:
 13030                           	opt stack 0
 13031                           tblptru	equ	0xFF8
 13032                           tblptrh	equ	0xFF7
 13033                           tblptrl	equ	0xFF6
 13034                           tablat	equ	0xFF5
 13035                           prodh	equ	0xFF4
 13036                           prodl	equ	0xFF3
 13037                           postinc0	equ	0xFEE
 13038                           wreg	equ	0xFE8
 13039                           indf2	equ	0xFDF
 13040                           postinc2	equ	0xFDE
 13041                           postdec2	equ	0xFDD
 13042                           fsr2h	equ	0xFDA
 13043                           fsr2l	equ	0xFD9
 13044                           status	equ	0xFD8
 13045                           
 13046 ;; *************** function _vscp_sendEvent *****************
 13047 ;; Defined at:
 13048 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 13049 ;; Parameters:    Size  Location     Type
 13050 ;;		None
 13051 ;; Auto vars:     Size  Location     Type
 13052 ;;  rv              1    0        unsigned char 
 13053 ;; Return value:  Size  Location     Type
 13054 ;;                  1    wreg      unsigned char 
 13055 ;; Registers used:
 13056 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13057 ;; Tracked objects:
 13058 ;;		On entry : F/0
 13059 ;;		On exit  : F/0
 13060 ;;		Unchanged: 0/0
 13061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13062 ;;      Params:         0       0       0       0       0       0       0
 13063 ;;      Locals:         1       0       0       0       0       0       0
 13064 ;;      Temps:          0       0       0       0       0       0       0
 13065 ;;      Totals:         1       0       0       0       0       0       0
 13066 ;;Total ram usage:        1 bytes
 13067 ;; Hardware stack levels used:    1
 13068 ;; Hardware stack levels required when called:    6
 13069 ;; This function calls:
 13070 ;;		_sendVSCPFrame
 13071 ;; This function is called by:
 13072 ;;		_vscp_handleProbeState
 13073 ;;		_vscp_goActiveState
 13074 ;;		_vscp_sendHeartBeat
 13075 ;;		_vscp_newNodeOnline
 13076 ;;		_vscp_handleProtocolEvent
 13077 ;; This function uses a non-reentrant model
 13078 ;;
 13079                           
 13080                           	psect	text51
 13081  004254                     __ptext51:
 13082                           	opt stack 0
 13083  004254                     _vscp_sendEvent:
 13084                           	opt stack 22
 13085                           
 13086                           ; BSR set to: 0
 13087                           
 13088                           ; BSR set to: 0
 13089                           ;incstack = 0
 13090                           ;incstack = 0
 13091  004254  C0A6  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 13092  004258  C0A7  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 13093  00425C  C0A8  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 13094  004260  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 13095  004264  C0A5  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 13096  004268  51A4               	movf	_vscp_omsg& (0+255),w,b
 13097  00426A  0B0F               	andlw	15
 13098  00426C  6E44               	movwf	?_sendVSCPFrame+5,c
 13099  00426E  0E00               	movlw	high (_vscp_omsg+5)
 13100  004270  6E46               	movwf	?_sendVSCPFrame+7,c
 13101  004272  0EA9               	movlw	low (_vscp_omsg+5)
 13102  004274  6E45               	movwf	?_sendVSCPFrame+6,c
 13103  004276  EFCF  F01D         	goto	_sendVSCPFrame	;wreg free
 13104  00427A                     __end_of_vscp_sendEvent:
 13105                           	opt stack 0
 13106                           tblptru	equ	0xFF8
 13107                           tblptrh	equ	0xFF7
 13108                           tblptrl	equ	0xFF6
 13109                           tablat	equ	0xFF5
 13110                           prodh	equ	0xFF4
 13111                           prodl	equ	0xFF3
 13112                           postinc0	equ	0xFEE
 13113                           wreg	equ	0xFE8
 13114                           indf2	equ	0xFDF
 13115                           postinc2	equ	0xFDE
 13116                           postdec2	equ	0xFDD
 13117                           fsr2h	equ	0xFDA
 13118                           fsr2l	equ	0xFD9
 13119                           status	equ	0xFD8
 13120                           
 13121 ;; *************** function _sendVSCPFrame *****************
 13122 ;; Defined at:
 13123 ;;		line 2585 in file "../main.c"
 13124 ;; Parameters:    Size  Location     Type
 13125 ;;  vscpclass       2   62[COMRAM] unsigned short 
 13126 ;;  vscptype        1   64[COMRAM] unsigned char 
 13127 ;;  nodeid          1   65[COMRAM] unsigned char 
 13128 ;;  priority        1   66[COMRAM] unsigned char 
 13129 ;;  size            1   67[COMRAM] unsigned char 
 13130 ;;  pData           2   68[COMRAM] PTR unsigned char 
 13131 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13132 ;; Auto vars:     Size  Location     Type
 13133 ;;  id              4   70[COMRAM] unsigned long 
 13134 ;; Return value:  Size  Location     Type
 13135 ;;                  1    wreg      unsigned char 
 13136 ;; Registers used:
 13137 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13138 ;; Tracked objects:
 13139 ;;		On entry : F/0
 13140 ;;		On exit  : F/0
 13141 ;;		Unchanged: 0/0
 13142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13143 ;;      Params:         8       0       0       0       0       0       0
 13144 ;;      Locals:         4       0       0       0       0       0       0
 13145 ;;      Temps:          0      20       0       0       0       0       0
 13146 ;;      Totals:        12      20       0       0       0       0       0
 13147 ;;Total ram usage:       32 bytes
 13148 ;; Hardware stack levels used:    1
 13149 ;; Hardware stack levels required when called:    5
 13150 ;; This function calls:
 13151 ;;		_sendCANFrame
 13152 ;; This function is called by:
 13153 ;;		_SendInformationEvent
 13154 ;;		_vscp_sendEvent
 13155 ;; This function uses a non-reentrant model
 13156 ;;
 13157                           
 13158                           	psect	text52
 13159  003B9E                     __ptext52:
 13160                           	opt stack 0
 13161  003B9E                     _sendVSCPFrame:
 13162                           	opt stack 23
 13163                           
 13164                           ; BSR set to: 0
 13165                           ;main.c: 2586: uint32_t id = ( (uint32_t)priority << 26 ) |
 13166                           ;main.c: 2587: ( (uint32_t)vscpclass << 16 ) |
 13167                           ;main.c: 2588: ( (uint32_t)vscptype << 8 ) |
 13168                           ;main.c: 2589: nodeid;
 13169                           
 13170                           ; BSR set to: 0
 13171                           ;incstack = 0
 13172                           ;incstack = 0
 13173  003B9E  C041  F0B1         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 13174  003BA2  6BB2               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 13175  003BA4  6BB3               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 13176  003BA6  6BB4               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 13177  003BA8  C0B3  F0B4         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 13178  003BAC  C0B2  F0B3         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 13179  003BB0  C0B1  F0B2         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 13180  003BB4  6BB1               	clrf	??_sendVSCPFrame& (0+255),b
 13181  003BB6  503F               	movf	sendVSCPFrame@vscpclass,w,c
 13182  003BB8  6FB5               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 13183  003BBA  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 13184  003BBC  6FB6               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 13185  003BBE  6BB7               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 13186  003BC0  6BB8               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 13187  003BC2  C0B6  F0B8         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 13188  003BC6  C0B5  F0B7         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 13189  003BCA  6BB6               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 13190  003BCC  6BB5               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 13191  003BCE  C043  F0B9         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 13192  003BD2  6BBA               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 13193  003BD4  6BBB               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 13194  003BD6  6BBC               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 13195  003BD8  0E1A               	movlw	26
 13196  003BDA                     u10195:
 13197  003BDA  90D8               	bcf	status,0,c
 13198  003BDC  37B9               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 13199  003BDE  37BA               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 13200  003BE0  37BB               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 13201  003BE2  37BC               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 13202  003BE4  2EE8               	decfsz	wreg,f,c
 13203  003BE6  D7F9               	goto	u10195
 13204  003BE8  51B5               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 13205  003BEA  11B9               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 13206  003BEC  6FBD               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 13207  003BEE  51B6               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 13208  003BF0  11BA               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 13209  003BF2  6FBE               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 13210  003BF4  51B7               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 13211  003BF6  11BB               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 13212  003BF8  6FBF               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 13213  003BFA  51B8               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 13214  003BFC  11BC               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 13215  003BFE  6FC0               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 13216  003C00  51B1               	movf	??_sendVSCPFrame& (0+255),w,b
 13217  003C02  11BD               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 13218  003C04  6FC1               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 13219  003C06  51B2               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 13220  003C08  11BE               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 13221  003C0A  6FC2               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 13222  003C0C  51B3               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 13223  003C0E  11BF               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 13224  003C10  6FC3               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 13225  003C12  51B4               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 13226  003C14  11C0               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 13227  003C16  6FC4               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 13228  003C18  5042               	movf	sendVSCPFrame@nodeid,w,c
 13229  003C1A  11C1               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 13230  003C1C  6E47               	movwf	sendVSCPFrame@id,c
 13231  003C1E  51C2               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 13232  003C20  6E48               	movwf	sendVSCPFrame@id+1,c
 13233  003C22  51C3               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 13234  003C24  6E49               	movwf	sendVSCPFrame@id+2,c
 13235  003C26  51C4               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 13236  003C28  6E4A               	movwf	sendVSCPFrame@id+3,c
 13237                           
 13238                           ; BSR set to: 0
 13239                           ;main.c: 2591: if ( !sendCANFrame( id, size, pData ) ) {
 13240  003C2A  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 13241  003C2E  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 13242  003C32  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 13243  003C36  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 13244  003C3A  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 13245  003C3E  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 13246  003C42  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 13247  003C46  EC85  F020         	call	_sendCANFrame	;wreg free
 13248  003C4A  0900               	iorlw	0
 13249                           
 13250                           ; BSR set to: 0
 13251                           ;main.c: 2592: return 0;
 13252  003C4C  0E00               	movlw	0
 13253  003C4E  A4D8               	btfss	status,2,c
 13254                           
 13255                           ; BSR set to: 0
 13256                           ;main.c: 2593: }
 13257                           ;main.c: 2595: return 1;
 13258  003C50  0E01               	movlw	1
 13259                           
 13260                           ; BSR set to: 0
 13261  003C52  0012               	return	
 13262  003C54                     __end_of_sendVSCPFrame:
 13263                           	opt stack 0
 13264                           tblptru	equ	0xFF8
 13265                           tblptrh	equ	0xFF7
 13266                           tblptrl	equ	0xFF6
 13267                           tablat	equ	0xFF5
 13268                           prodh	equ	0xFF4
 13269                           prodl	equ	0xFF3
 13270                           postinc0	equ	0xFEE
 13271                           wreg	equ	0xFE8
 13272                           indf2	equ	0xFDF
 13273                           postinc2	equ	0xFDE
 13274                           postdec2	equ	0xFDD
 13275                           fsr2h	equ	0xFDA
 13276                           fsr2l	equ	0xFD9
 13277                           status	equ	0xFD8
 13278                           
 13279 ;; *************** function _sendCANFrame *****************
 13280 ;; Defined at:
 13281 ;;		line 2630 in file "../main.c"
 13282 ;; Parameters:    Size  Location     Type
 13283 ;;  id              4   54[COMRAM] unsigned long 
 13284 ;;  dlc             1   58[COMRAM] unsigned char 
 13285 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 13286 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13287 ;; Auto vars:     Size  Location     Type
 13288 ;;  rv              1    0        unsigned char 
 13289 ;; Return value:  Size  Location     Type
 13290 ;;                  1    wreg      unsigned char 
 13291 ;; Registers used:
 13292 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13293 ;; Tracked objects:
 13294 ;;		On entry : F/0
 13295 ;;		On exit  : F/0
 13296 ;;		Unchanged: 0/0
 13297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13298 ;;      Params:         7       0       0       0       0       0       0
 13299 ;;      Locals:         1       0       0       0       0       0       0
 13300 ;;      Temps:          0       0       0       0       0       0       0
 13301 ;;      Totals:         8       0       0       0       0       0       0
 13302 ;;Total ram usage:        8 bytes
 13303 ;; Hardware stack levels used:    1
 13304 ;; Hardware stack levels required when called:    4
 13305 ;; This function calls:
 13306 ;;		_ECANSendMessage
 13307 ;; This function is called by:
 13308 ;;		_sendVSCPFrame
 13309 ;; This function uses a non-reentrant model
 13310 ;;
 13311                           
 13312                           	psect	text53
 13313  00410A                     __ptext53:
 13314                           	opt stack 0
 13315  00410A                     _sendCANFrame:
 13316                           	opt stack 23
 13317                           
 13318                           ; BSR set to: 0
 13319                           ;main.c: 2633: sendTimer = 0;
 13320                           
 13321                           ; BSR set to: 0
 13322                           ;incstack = 0
 13323                           ;incstack = 0
 13324  00410A  6B8C               	clrf	_sendTimer& (0+255),b	;volatile
 13325  00410C                     l9403:
 13326                           
 13327                           ;main.c: 2635: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 13328  00410C  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 13329  004110  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 13330  004114  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 13331  004118  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 13332  00411C  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 13333  004120  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 13334  004124  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 13335  004128  0E20               	movlw	32
 13336  00412A  6E19               	movwf	?_ECANSendMessage+7,c
 13337  00412C  EC2D  F018         	call	_ECANSendMessage	;wreg free
 13338  004130  0900               	iorlw	0
 13339  004132  E0EC               	bz	l9403
 13340                           
 13341                           ;main.c: 2638: }
 13342                           ;main.c: 2639: }
 13343                           ;main.c: 2641: vscp_omsg.flags = 0;
 13344                           
 13345                           ;main.c: 2637: break;
 13346  004134  0100               	movlb	0	; () banked
 13347  004136  6BA4               	clrf	_vscp_omsg& (0+255),b
 13348                           
 13349                           ; BSR set to: 0
 13350                           
 13351                           ; BSR set to: 0
 13352                           ;main.c: 2643: return rv;
 13353  004138  0C01               	retlw	1
 13354  00413A                     __end_of_sendCANFrame:
 13355                           	opt stack 0
 13356                           tblptru	equ	0xFF8
 13357                           tblptrh	equ	0xFF7
 13358                           tblptrl	equ	0xFF6
 13359                           tablat	equ	0xFF5
 13360                           prodh	equ	0xFF4
 13361                           prodl	equ	0xFF3
 13362                           postinc0	equ	0xFEE
 13363                           wreg	equ	0xFE8
 13364                           indf2	equ	0xFDF
 13365                           postinc2	equ	0xFDE
 13366                           postdec2	equ	0xFDD
 13367                           fsr2h	equ	0xFDA
 13368                           fsr2l	equ	0xFD9
 13369                           status	equ	0xFD8
 13370                           
 13371 ;; *************** function _ECANSendMessage *****************
 13372 ;; Defined at:
 13373 ;;		line 617 in file "../ECAN.c"
 13374 ;; Parameters:    Size  Location     Type
 13375 ;;  id              4   17[COMRAM] unsigned long 
 13376 ;;  data            2   21[COMRAM] PTR unsigned char 
 13377 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13378 ;;  dataLen         1   23[COMRAM] unsigned char 
 13379 ;;  msgFlags        1   24[COMRAM] enum E16306
 13380 ;; Auto vars:     Size  Location     Type
 13381 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 13382 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13383 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13384 ;;		 -> B0CON(1), 
 13385 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 13386 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13387 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13388 ;;		 -> B0CON(1), 
 13389 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 13390 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13391 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13392 ;;		 -> B0CON(1), 
 13393 ;;  i               1   51[COMRAM] unsigned char 
 13394 ;;  temp            1   50[COMRAM] unsigned char 
 13395 ;;  tempBSEL0       1   47[COMRAM] struct .
 13396 ;;  j               1   46[COMRAM] unsigned char 
 13397 ;;  buffers         1   45[COMRAM] unsigned char 
 13398 ;;  mode            1   44[COMRAM] unsigned char 
 13399 ;; Return value:  Size  Location     Type
 13400 ;;                  1    wreg      enum E15660
 13401 ;; Registers used:
 13402 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13403 ;; Tracked objects:
 13404 ;;		On entry : 0/0
 13405 ;;		On exit  : 0/0
 13406 ;;		Unchanged: 0/0
 13407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13408 ;;      Params:         8       0       0       0       0       0       0
 13409 ;;      Locals:        28       0       0       0       0       0       0
 13410 ;;      Temps:          1       0       0       0       0       0       0
 13411 ;;      Totals:        37       0       0       0       0       0       0
 13412 ;;Total ram usage:       37 bytes
 13413 ;; Hardware stack levels used:    1
 13414 ;; Hardware stack levels required when called:    3
 13415 ;; This function calls:
 13416 ;;		__CANIDToRegs
 13417 ;; This function is called by:
 13418 ;;		_sendCANFrame
 13419 ;; This function uses a non-reentrant model
 13420 ;;
 13421                           
 13422                           	psect	text54
 13423  00305A                     __ptext54:
 13424                           	opt stack 0
 13425  00305A                     _ECANSendMessage:
 13426                           	opt stack 23
 13427                           
 13428                           ;ECAN.c: 619: BYTE mode;
 13429                           ;ECAN.c: 620: BYTE buffers;
 13430                           ;ECAN.c: 628: BYTE i,j;
 13431                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 13432                           ;ECAN.c: 630: BYTE* pb[9];
 13433                           ;ECAN.c: 631: BYTE temp;
 13434                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 13435                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 13436                           
 13437                           ; BSR set to: 0
 13438                           ;incstack = 0
 13439                           ;incstack = 0
 13440  00305A  0E0F               	movlw	15	;volatile
 13441  00305C  6E1C               	movwf	ECANSendMessage@pb+1,c
 13442  00305E  0E40               	movlw	64	;volatile
 13443  003060  6E1B               	movwf	ECANSendMessage@pb,c
 13444                           
 13445                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 13446  003062  0E0F               	movlw	15	;volatile
 13447  003064  6E1E               	movwf	ECANSendMessage@pb+3,c
 13448  003066  0E30               	movlw	48	;volatile
 13449  003068  6E1D               	movwf	ECANSendMessage@pb+2,c
 13450                           
 13451                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 13452  00306A  0E0F               	movlw	15	;volatile
 13453  00306C  6E20               	movwf	ECANSendMessage@pb+5,c
 13454  00306E  0E20               	movlw	32	;volatile
 13455  003070  6E1F               	movwf	ECANSendMessage@pb+4,c
 13456                           
 13457                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 13458  003072  0E0E               	movlw	14	;volatile
 13459  003074  6E22               	movwf	ECANSendMessage@pb+7,c
 13460  003076  0E20               	movlw	32	;volatile
 13461  003078  6E21               	movwf	ECANSendMessage@pb+6,c
 13462                           
 13463                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 13464  00307A  0E0E               	movlw	14	;volatile
 13465  00307C  6E24               	movwf	ECANSendMessage@pb+9,c
 13466  00307E  0E30               	movlw	48	;volatile
 13467  003080  6E23               	movwf	ECANSendMessage@pb+8,c
 13468                           
 13469                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 13470  003082  0E0E               	movlw	14	;volatile
 13471  003084  6E26               	movwf	ECANSendMessage@pb+11,c
 13472  003086  0E40               	movlw	64	;volatile
 13473  003088  6E25               	movwf	ECANSendMessage@pb+10,c
 13474                           
 13475                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 13476  00308A  0E0E               	movlw	14	;volatile
 13477  00308C  6E28               	movwf	ECANSendMessage@pb+13,c
 13478  00308E  0E50               	movlw	80	;volatile
 13479  003090  6E27               	movwf	ECANSendMessage@pb+12,c
 13480                           
 13481                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 13482  003092  0E0E               	movlw	14	;volatile
 13483  003094  6E2A               	movwf	ECANSendMessage@pb+15,c
 13484  003096  0E60               	movlw	96	;volatile
 13485  003098  6E29               	movwf	ECANSendMessage@pb+14,c
 13486                           
 13487                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 13488  00309A  0E0E               	movlw	14	;volatile
 13489  00309C  6E2C               	movwf	ECANSendMessage@pb+17,c
 13490  00309E  0E70               	movlw	112	;volatile
 13491  0030A0  6E2B               	movwf	ECANSendMessage@pb+16,c
 13492                           
 13493                           ; BSR set to: 14
 13494                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 13495  0030A2  5077               	movf	3959,w,c	;volatile
 13496  0030A4  0BC0               	andlw	192
 13497  0030A6  6E2D               	movwf	ECANSendMessage@mode,c
 13498                           
 13499                           ; BSR set to: 14
 13500                           ;ECAN.c: 660: if ( mode == 0x00 )
 13501  0030A8  662D               	tstfsz	ECANSendMessage@mode,c
 13502  0030AA  D002               	goto	l9419
 13503                           
 13504                           ; BSR set to: 14
 13505                           ;ECAN.c: 661: buffers = 2;
 13506  0030AC  0E02               	movlw	2
 13507  0030AE  D001               	goto	L41
 13508  0030B0                     l9419:
 13509                           
 13510                           ; BSR set to: 14
 13511                           ;ECAN.c: 662: else
 13512                           ;ECAN.c: 663: buffers = 8;
 13513  0030B0  0E08               	movlw	8
 13514  0030B2                     L41:
 13515  0030B2  6E2E               	movwf	ECANSendMessage@buffers,c
 13516                           
 13517                           ; BSR set to: 14
 13518                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 13519  0030B4  010D               	movlb	13	; () banked
 13520  0030B6  90D8               	bcf	status,0,c
 13521  0030B8  31F8               	rrcf	248,w,b	;volatile
 13522  0030BA  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 13523                           
 13524                           ; BSR set to: 13
 13525                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 13526  0030BC  6A34               	clrf	ECANSendMessage@i,c
 13527  0030BE  D07D               	goto	l9479
 13528  0030C0                     l9425:
 13529                           
 13530                           ;ECAN.c: 688: {
 13531                           ;ECAN.c: 693: ptr = pb[i];
 13532  0030C0  5034               	movf	ECANSendMessage@i,w,c
 13533  0030C2  0D02               	mullw	2
 13534  0030C4  50F3               	movf	prodl,w,c
 13535  0030C6  0F1B               	addlw	low ECANSendMessage@pb
 13536  0030C8  6ED9               	movwf	fsr2l,c
 13537  0030CA  6ADA               	clrf	fsr2h,c
 13538  0030CC  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 13539  0030D0  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 13540                           
 13541                           ;ECAN.c: 694: tempPtr = ptr;
 13542  0030D4  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 13543  0030D8  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 13544                           
 13545                           ;ECAN.c: 702: if ( i > 2 )
 13546  0030DC  0E02               	movlw	2
 13547  0030DE  6434               	cpfsgt	ECANSendMessage@i,c
 13548  0030E0  D004               	goto	l9437
 13549                           
 13550                           ;ECAN.c: 703: {
 13551                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 13552  0030E2  90D8               	bcf	status,0,c
 13553  0030E4  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 13554                           
 13555                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 13556  0030E6  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 13557  0030E8  D067               	goto	l9477
 13558  0030EA                     l9437:
 13559                           
 13560                           ;ECAN.c: 714: }
 13561                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 13562  0030EA  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13563  0030EE  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13564  0030F2  50DF               	movf	indf2,w,c
 13565  0030F4  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13566  0030F6  B61A               	btfsc	??_ECANSendMessage,3,c
 13567  0030F8  D05F               	goto	l9477
 13568                           
 13569                           ;ECAN.c: 721: {
 13570                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 13571  0030FA  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13572  0030FE  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13573  003102  0EFC               	movlw	252
 13574  003104  16DF               	andwf	indf2,f,c
 13575                           
 13576                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 13577  003106  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 13578  00310A  0E03               	movlw	3
 13579  00310C  161A               	andwf	??_ECANSendMessage,f,c
 13580  00310E  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13581  003112  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13582  003116  501A               	movf	??_ECANSendMessage,w,c
 13583  003118  12DF               	iorwf	indf2,f,c
 13584                           
 13585                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 13586  00311A  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 13587  00311C  D004               	goto	l863
 13588                           
 13589                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 13590  00311E  5018               	movf	ECANSendMessage@dataLen,w,c
 13591  003120  0940               	iorlw	64
 13592  003122  6E33               	movwf	ECANSendMessage@temp,c
 13593  003124  D002               	goto	l9447
 13594  003126                     l863:
 13595                           
 13596                           ;ECAN.c: 729: else
 13597                           ;ECAN.c: 730: temp = dataLen;
 13598  003126  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 13599  00312A                     l9447:
 13600                           
 13601                           ;ECAN.c: 732: *(ptr+5) = temp;
 13602  00312A  EE20 F005          	lfsr	2,5
 13603  00312E  5035               	movf	ECANSendMessage@ptr,w,c
 13604  003130  26D9               	addwf	fsr2l,f,c
 13605  003132  5036               	movf	ECANSendMessage@ptr+1,w,c
 13606  003134  22DA               	addwfc	fsr2h,f,c
 13607  003136  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 13608                           
 13609                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 13610  00313A  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 13611  00313C  D003               	goto	l865
 13612                           
 13613                           ;ECAN.c: 736: temp = 1;
 13614  00313E  0E01               	movlw	1
 13615  003140  6E33               	movwf	ECANSendMessage@temp,c
 13616  003142  D001               	goto	l9453
 13617  003144                     l865:
 13618                           
 13619                           ;ECAN.c: 738: else
 13620                           ;ECAN.c: 739: temp = 0;
 13621  003144  6A33               	clrf	ECANSendMessage@temp,c
 13622  003146                     l9453:
 13623                           
 13624                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 13625  003146  2835               	incf	ECANSendMessage@ptr,w,c
 13626  003148  6E08               	movwf	?__CANIDToRegs,c
 13627  00314A  0E00               	movlw	0
 13628  00314C  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 13629  00314E  6E09               	movwf	?__CANIDToRegs+1,c
 13630  003150  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 13631  003154  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 13632  003158  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 13633  00315C  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 13634  003160  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 13635  003164  EC3D  F01A         	call	__CANIDToRegs	;wreg free
 13636                           
 13637                           ;ECAN.c: 745: ptr += 6;
 13638  003168  0E06               	movlw	6
 13639  00316A  2635               	addwf	ECANSendMessage@ptr,f,c
 13640  00316C  0E00               	movlw	0
 13641  00316E  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 13642                           
 13643                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 13644  003170  6A2F               	clrf	ECANSendMessage@j,c
 13645  003172  D00F               	goto	l9467
 13646  003174                     l9459:
 13647                           
 13648                           ;ECAN.c: 748: *ptr++ = *data++;
 13649  003174  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 13650  003178  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 13651  00317C  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 13652  003180  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 13653  003184  CFDF FFE7          	movff	indf2,indf1
 13654  003188  4A16               	infsnz	ECANSendMessage@data,f,c
 13655  00318A  2A17               	incf	ECANSendMessage@data+1,f,c
 13656  00318C  4A35               	infsnz	ECANSendMessage@ptr,f,c
 13657  00318E  2A36               	incf	ECANSendMessage@ptr+1,f,c
 13658  003190  2A2F               	incf	ECANSendMessage@j,f,c
 13659  003192                     l9467:
 13660  003192  5018               	movf	ECANSendMessage@dataLen,w,c
 13661  003194  5C2F               	subwf	ECANSendMessage@j,w,c
 13662  003196  E3EE               	bnc	l9459
 13663                           
 13664                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 13665  003198  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13666  00319C  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13667  0031A0  50DF               	movf	indf2,w,c
 13668  0031A2  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13669  0031A4  B41A               	btfsc	??_ECANSendMessage,2,c
 13670  0031A6  D006               	goto	l9473
 13671                           
 13672                           ;ECAN.c: 753: *tempPtr |= 0x08;
 13673  0031A8  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13674  0031AC  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13675  0031B0  0E00               	movlw	0
 13676  0031B2  86DB               	bsf	plusw2,3,c
 13677  0031B4                     l9473:
 13678                           
 13679                           ;ECAN.c: 755: return TRUE;
 13680  0031B4  0E01               	movlw	1
 13681  0031B6  D005               	goto	l871
 13682  0031B8                     l9477:
 13683  0031B8  2A34               	incf	ECANSendMessage@i,f,c
 13684  0031BA                     l9479:
 13685  0031BA  502E               	movf	ECANSendMessage@buffers,w,c
 13686  0031BC  5C34               	subwf	ECANSendMessage@i,w,c
 13687  0031BE  E380               	bnc	l9425
 13688                           
 13689                           ;ECAN.c: 756: }
 13690                           ;ECAN.c: 757: }
 13691                           ;ECAN.c: 760: return FALSE;
 13692  0031C0  0E00               	movlw	0
 13693  0031C2                     l871:
 13694  0031C2  0012               	return	
 13695  0031C4                     __end_of_ECANSendMessage:
 13696                           	opt stack 0
 13697                           tblptru	equ	0xFF8
 13698                           tblptrh	equ	0xFF7
 13699                           tblptrl	equ	0xFF6
 13700                           tablat	equ	0xFF5
 13701                           prodh	equ	0xFF4
 13702                           prodl	equ	0xFF3
 13703                           postinc0	equ	0xFEE
 13704                           wreg	equ	0xFE8
 13705                           indf1	equ	0xFE7
 13706                           fsr1h	equ	0xFE2
 13707                           fsr1l	equ	0xFE1
 13708                           indf2	equ	0xFDF
 13709                           postinc2	equ	0xFDE
 13710                           postdec2	equ	0xFDD
 13711                           plusw2	equ	0xFDB
 13712                           fsr2h	equ	0xFDA
 13713                           fsr2l	equ	0xFD9
 13714                           status	equ	0xFD8
 13715                           
 13716 ;; *************** function __CANIDToRegs *****************
 13717 ;; Defined at:
 13718 ;;		line 1099 in file "../ECAN.c"
 13719 ;; Parameters:    Size  Location     Type
 13720 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 13721 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13722 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13723 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
 13724 ;;  val             4    9[COMRAM] unsigned long 
 13725 ;;  type            1   13[COMRAM] unsigned char 
 13726 ;; Auto vars:     Size  Location     Type
 13727 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 13728 ;;		 -> _CANIDToRegs@val(4), 
 13729 ;; Return value:  Size  Location     Type
 13730 ;;		None               void
 13731 ;; Registers used:
 13732 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13733 ;; Tracked objects:
 13734 ;;		On entry : 0/F
 13735 ;;		On exit  : 0/0
 13736 ;;		Unchanged: 0/0
 13737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13738 ;;      Params:         7       0       0       0       0       0       0
 13739 ;;      Locals:         1       0       0       0       0       0       0
 13740 ;;      Temps:          2       0       0       0       0       0       0
 13741 ;;      Totals:        10       0       0       0       0       0       0
 13742 ;;Total ram usage:       10 bytes
 13743 ;; Hardware stack levels used:    1
 13744 ;; Hardware stack levels required when called:    2
 13745 ;; This function calls:
 13746 ;;		Nothing
 13747 ;; This function is called by:
 13748 ;;		_calculateSetFilterMask
 13749 ;;		_ECANSendMessage
 13750 ;; This function uses a non-reentrant model
 13751 ;;
 13752                           
 13753                           	psect	text55
 13754  00347A                     __ptext55:
 13755                           	opt stack 0
 13756  00347A                     __CANIDToRegs:
 13757                           	opt stack 23
 13758                           
 13759                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 13760                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 13761                           
 13762                           ;incstack = 0
 13763                           ;incstack = 0
 13764  00347A  0E0A               	movlw	low __CANIDToRegs@val
 13765  00347C  6E11               	movwf	__CANIDToRegs@Value,c
 13766                           
 13767                           ;ECAN.c: 1104: if ( type == 0 )
 13768  00347E  660E               	tstfsz	__CANIDToRegs@type,c
 13769  003480  D037               	goto	l9495
 13770                           
 13771                           ;ECAN.c: 1105: {
 13772                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 13773  003482  5011               	movf	__CANIDToRegs@Value,w,c
 13774  003484  6ED9               	movwf	fsr2l,c
 13775  003486  6ADA               	clrf	fsr2h,c
 13776  003488  50DF               	movf	indf2,w,c
 13777  00348A  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13778  00348C  90D8               	bcf	status,0,c
 13779  00348E  320F               	rrcf	??__CANIDToRegs,f,c
 13780  003490  90D8               	bcf	status,0,c
 13781  003492  320F               	rrcf	??__CANIDToRegs,f,c
 13782  003494  90D8               	bcf	status,0,c
 13783  003496  300F               	rrcf	??__CANIDToRegs,w,c
 13784  003498  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13785  00349C  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13786  0034A0  6EDF               	movwf	indf2,c
 13787                           
 13788                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 13789  0034A2  5011               	movf	__CANIDToRegs@Value,w,c
 13790  0034A4  6ED9               	movwf	fsr2l,c
 13791  0034A6  6ADA               	clrf	fsr2h,c
 13792  0034A8  2AD9               	incf	fsr2l,f,c
 13793  0034AA  6ADA               	clrf	fsr2h,c
 13794  0034AC  50DF               	movf	indf2,w,c
 13795  0034AE  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13796  0034B0  0E05               	movlw	5
 13797  0034B2  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13798  0034B4                     u10955:
 13799  0034B4  90D8               	bcf	status,0,c
 13800  0034B6  360F               	rlcf	??__CANIDToRegs,f,c
 13801  0034B8  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13802  0034BA  D7FC               	goto	u10955
 13803  0034BC  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13804  0034C0  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13805  0034C4  500F               	movf	??__CANIDToRegs,w,c
 13806  0034C6  12DF               	iorwf	indf2,f,c
 13807                           
 13808                           ;ECAN.c: 1109: ptr++;
 13809  0034C8  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13810  0034CA  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13811                           
 13812                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 13813  0034CC  5011               	movf	__CANIDToRegs@Value,w,c
 13814  0034CE  6ED9               	movwf	fsr2l,c
 13815  0034D0  6ADA               	clrf	fsr2h,c
 13816  0034D2  50DF               	movf	indf2,w,c
 13817  0034D4  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13818  0034D6  0E05               	movlw	5
 13819  0034D8  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13820  0034DA                     u10965:
 13821  0034DA  90D8               	bcf	status,0,c
 13822  0034DC  360F               	rlcf	??__CANIDToRegs,f,c
 13823  0034DE  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13824  0034E0  D7FC               	goto	u10965
 13825  0034E2  500F               	movf	??__CANIDToRegs,w,c
 13826  0034E4  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13827  0034E8  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13828  0034EC  6EDF               	movwf	indf2,c
 13829                           
 13830                           ;ECAN.c: 1111: }
 13831  0034EE  D06C               	goto	l925
 13832  0034F0                     l9495:
 13833                           
 13834                           ;ECAN.c: 1112: else
 13835                           ;ECAN.c: 1113: {
 13836                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 13837  0034F0  5011               	movf	__CANIDToRegs@Value,w,c
 13838  0034F2  6ED9               	movwf	fsr2l,c
 13839  0034F4  6ADA               	clrf	fsr2h,c
 13840  0034F6  0E02               	movlw	2
 13841  0034F8  26D9               	addwf	fsr2l,f,c
 13842  0034FA  6ADA               	clrf	fsr2h,c
 13843  0034FC  50DF               	movf	indf2,w,c
 13844  0034FE  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13845  003500  0E05               	movlw	5
 13846  003502  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13847  003504                     u10975:
 13848  003504  90D8               	bcf	status,0,c
 13849  003506  320F               	rrcf	??__CANIDToRegs,f,c
 13850  003508  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13851  00350A  D7FC               	goto	u10975
 13852  00350C  500F               	movf	??__CANIDToRegs,w,c
 13853  00350E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13854  003512  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13855  003516  6EDF               	movwf	indf2,c
 13856                           
 13857                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 13858  003518  5011               	movf	__CANIDToRegs@Value,w,c
 13859  00351A  6ED9               	movwf	fsr2l,c
 13860  00351C  6ADA               	clrf	fsr2h,c
 13861  00351E  0E03               	movlw	3
 13862  003520  26D9               	addwf	fsr2l,f,c
 13863  003522  6ADA               	clrf	fsr2h,c
 13864  003524  50DF               	movf	indf2,w,c
 13865  003526  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13866  003528  90D8               	bcf	status,0,c
 13867  00352A  360F               	rlcf	??__CANIDToRegs,f,c
 13868  00352C  90D8               	bcf	status,0,c
 13869  00352E  360F               	rlcf	??__CANIDToRegs,f,c
 13870  003530  90D8               	bcf	status,0,c
 13871  003532  360F               	rlcf	??__CANIDToRegs,f,c
 13872  003534  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13873  003538  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13874  00353C  500F               	movf	??__CANIDToRegs,w,c
 13875  00353E  12DF               	iorwf	indf2,f,c
 13876                           
 13877                           ;ECAN.c: 1117: ptr++;
 13878  003540  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13879  003542  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13880                           
 13881                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 13882  003544  5011               	movf	__CANIDToRegs@Value,w,c
 13883  003546  6ED9               	movwf	fsr2l,c
 13884  003548  6ADA               	clrf	fsr2h,c
 13885  00354A  0E02               	movlw	2
 13886  00354C  26D9               	addwf	fsr2l,f,c
 13887  00354E  6ADA               	clrf	fsr2h,c
 13888  003550  50DF               	movf	indf2,w,c
 13889  003552  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13890  003554  90D8               	bcf	status,0,c
 13891  003556  360F               	rlcf	??__CANIDToRegs,f,c
 13892  003558  90D8               	bcf	status,0,c
 13893  00355A  360F               	rlcf	??__CANIDToRegs,f,c
 13894  00355C  90D8               	bcf	status,0,c
 13895  00355E  340F               	rlcf	??__CANIDToRegs,w,c
 13896  003560  0BE0               	andlw	224
 13897  003562  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13898  003566  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13899  00356A  6EDF               	movwf	indf2,c
 13900                           
 13901                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 13902  00356C  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13903  003570  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13904  003574  0E00               	movlw	0
 13905  003576  86DB               	bsf	plusw2,3,c
 13906                           
 13907                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 13908  003578  5011               	movf	__CANIDToRegs@Value,w,c
 13909  00357A  6ED9               	movwf	fsr2l,c
 13910  00357C  6ADA               	clrf	fsr2h,c
 13911  00357E  0E02               	movlw	2
 13912  003580  26D9               	addwf	fsr2l,f,c
 13913  003582  6ADA               	clrf	fsr2h,c
 13914  003584  50DF               	movf	indf2,w,c
 13915  003586  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13916  003588  0E03               	movlw	3
 13917  00358A  160F               	andwf	??__CANIDToRegs,f,c
 13918  00358C  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13919  003590  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13920  003594  500F               	movf	??__CANIDToRegs,w,c
 13921  003596  12DF               	iorwf	indf2,f,c
 13922                           
 13923                           ;ECAN.c: 1122: ptr++;
 13924  003598  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13925  00359A  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13926                           
 13927                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 13928  00359C  5011               	movf	__CANIDToRegs@Value,w,c
 13929  00359E  6ED9               	movwf	fsr2l,c
 13930  0035A0  6ADA               	clrf	fsr2h,c
 13931  0035A2  2AD9               	incf	fsr2l,f,c
 13932  0035A4  6ADA               	clrf	fsr2h,c
 13933  0035A6  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13934  0035AA  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13935  0035AE  CFDF FFE7          	movff	indf2,indf1
 13936                           
 13937                           ;ECAN.c: 1124: ptr++;
 13938  0035B2  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13939  0035B4  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13940                           
 13941                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 13942  0035B6  5011               	movf	__CANIDToRegs@Value,w,c
 13943  0035B8  6ED9               	movwf	fsr2l,c
 13944  0035BA  6ADA               	clrf	fsr2h,c
 13945  0035BC  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13946  0035C0  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13947  0035C4  CFDF FFE7          	movff	indf2,indf1
 13948  0035C8                     l925:
 13949  0035C8  0012               	return	
 13950  0035CA                     __end_of__CANIDToRegs:
 13951                           	opt stack 0
 13952                           tblptru	equ	0xFF8
 13953                           tblptrh	equ	0xFF7
 13954                           tblptrl	equ	0xFF6
 13955                           tablat	equ	0xFF5
 13956                           prodh	equ	0xFF4
 13957                           prodl	equ	0xFF3
 13958                           postinc0	equ	0xFEE
 13959                           wreg	equ	0xFE8
 13960                           indf1	equ	0xFE7
 13961                           fsr1h	equ	0xFE2
 13962                           fsr1l	equ	0xFE1
 13963                           indf2	equ	0xFDF
 13964                           postinc2	equ	0xFDE
 13965                           postdec2	equ	0xFDD
 13966                           plusw2	equ	0xFDB
 13967                           fsr2h	equ	0xFDA
 13968                           fsr2l	equ	0xFD9
 13969                           status	equ	0xFD8
 13970                           
 13971 ;; *************** function _vscp_getEvent *****************
 13972 ;; Defined at:
 13973 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 13974 ;; Parameters:    Size  Location     Type
 13975 ;;		None
 13976 ;; Auto vars:     Size  Location     Type
 13977 ;;  rv              1   43[COMRAM] unsigned char 
 13978 ;; Return value:  Size  Location     Type
 13979 ;;                  1    wreg      unsigned char 
 13980 ;; Registers used:
 13981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13982 ;; Tracked objects:
 13983 ;;		On entry : F/0
 13984 ;;		On exit  : 0/0
 13985 ;;		Unchanged: 0/0
 13986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13987 ;;      Params:         0       0       0       0       0       0       0
 13988 ;;      Locals:         1       0       0       0       0       0       0
 13989 ;;      Temps:          0       0       0       0       0       0       0
 13990 ;;      Totals:         1       0       0       0       0       0       0
 13991 ;;Total ram usage:        1 bytes
 13992 ;; Hardware stack levels used:    1
 13993 ;; Hardware stack levels required when called:    6
 13994 ;; This function calls:
 13995 ;;		_getVSCPFrame
 13996 ;; This function is called by:
 13997 ;;		_main
 13998 ;; This function uses a non-reentrant model
 13999 ;;
 14000                           
 14001                           	psect	text56
 14002  004190                     __ptext56:
 14003                           	opt stack 0
 14004  004190                     _vscp_getEvent:
 14005                           	opt stack 24
 14006                           
 14007                           ; BSR set to: 0
 14008                           ;vscp_firmware.c: 1309: int8_t rv;
 14009                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 14010                           
 14011                           ;incstack = 0
 14012                           ;incstack = 0
 14013  004190  BF96               	btfsc	_vscp_imsg& (0+255),7,b
 14014  004192  D012               	goto	l1299
 14015                           
 14016                           ; BSR set to: 0
 14017                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 14018                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 14019                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 14020                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 14021                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 14022                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 14023  004194  0E9A               	movlw	low (_vscp_imsg+4)
 14024  004196  6E1E               	movwf	?_getVSCPFrame,c
 14025  004198  0E9B               	movlw	low (_vscp_imsg+5)
 14026  00419A  6E1F               	movwf	?_getVSCPFrame+1,c
 14027  00419C  0E97               	movlw	low (_vscp_imsg+1)
 14028  00419E  6E20               	movwf	?_getVSCPFrame+2,c
 14029  0041A0  0E96               	movlw	low _vscp_imsg
 14030  0041A2  6E21               	movwf	?_getVSCPFrame+3,c
 14031  0041A4  0E9C               	movlw	low (_vscp_imsg+6)
 14032  0041A6  6E22               	movwf	?_getVSCPFrame+4,c
 14033  0041A8  0E98               	movlw	(_vscp_imsg+2)& (0+255)
 14034  0041AA  EC1F  F01F         	call	_getVSCPFrame
 14035  0041AE  6E2C               	movwf	vscp_getEvent@rv,c
 14036  0041B0  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 14037  0041B2  E002               	bz	l1299
 14038                           
 14039                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 14040  0041B4  0100               	movlb	0	; () banked
 14041  0041B6  8F96               	bsf	_vscp_imsg& (0+255),7,b
 14042  0041B8                     l1299:
 14043  0041B8  0012               	return	
 14044  0041BA                     __end_of_vscp_getEvent:
 14045                           	opt stack 0
 14046                           tblptru	equ	0xFF8
 14047                           tblptrh	equ	0xFF7
 14048                           tblptrl	equ	0xFF6
 14049                           tablat	equ	0xFF5
 14050                           prodh	equ	0xFF4
 14051                           prodl	equ	0xFF3
 14052                           postinc0	equ	0xFEE
 14053                           wreg	equ	0xFE8
 14054                           indf1	equ	0xFE7
 14055                           fsr1h	equ	0xFE2
 14056                           fsr1l	equ	0xFE1
 14057                           indf2	equ	0xFDF
 14058                           postinc2	equ	0xFDE
 14059                           postdec2	equ	0xFDD
 14060                           plusw2	equ	0xFDB
 14061                           fsr2h	equ	0xFDA
 14062                           fsr2l	equ	0xFD9
 14063                           status	equ	0xFD8
 14064                           
 14065 ;; *************** function _getVSCPFrame *****************
 14066 ;; Defined at:
 14067 ;;		line 2609 in file "../main.c"
 14068 ;; Parameters:    Size  Location     Type
 14069 ;;  pvscpclass      1    wreg     PTR unsigned short 
 14070 ;;		 -> vscp_imsg(14), 
 14071 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 14072 ;;		 -> vscp_imsg(14), 
 14073 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 14074 ;;		 -> vscp_imsg(14), 
 14075 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 14076 ;;		 -> vscp_imsg(14), 
 14077 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 14078 ;;		 -> vscp_imsg(14), 
 14079 ;;  pData           1   33[COMRAM] PTR unsigned char 
 14080 ;;		 -> vscp_imsg(14), 
 14081 ;; Auto vars:     Size  Location     Type
 14082 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 14083 ;;		 -> vscp_imsg(14), 
 14084 ;;  id              4   39[COMRAM] unsigned long 
 14085 ;; Return value:  Size  Location     Type
 14086 ;;                  1    wreg      unsigned char 
 14087 ;; Registers used:
 14088 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14089 ;; Tracked objects:
 14090 ;;		On entry : F/0
 14091 ;;		On exit  : 0/0
 14092 ;;		Unchanged: 0/0
 14093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14094 ;;      Params:         5       0       0       0       0       0       0
 14095 ;;      Locals:         5       0       0       0       0       0       0
 14096 ;;      Temps:          4       0       0       0       0       0       0
 14097 ;;      Totals:        14       0       0       0       0       0       0
 14098 ;;Total ram usage:       14 bytes
 14099 ;; Hardware stack levels used:    1
 14100 ;; Hardware stack levels required when called:    5
 14101 ;; This function calls:
 14102 ;;		_getCANFrame
 14103 ;; This function is called by:
 14104 ;;		_vscp_getEvent
 14105 ;; This function uses a non-reentrant model
 14106 ;;
 14107                           
 14108                           	psect	text57
 14109  003E3E                     __ptext57:
 14110                           	opt stack 0
 14111  003E3E                     _getVSCPFrame:
 14112                           	opt stack 24
 14113                           
 14114                           ;incstack = 0
 14115                           ;incstack = 0
 14116                           ;getVSCPFrame@pvscpclass stored from wreg
 14117  003E3E  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 14118                           
 14119                           ; BSR set to: 0
 14120                           ;main.c: 2610: uint32_t id;
 14121                           ;main.c: 2612: if ( !getCANFrame(&id, pSize, pData) ) {
 14122  003E42  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 14123  003E46  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 14124  003E4A  0E28               	movlw	getVSCPFrame@id& (0+255)
 14125  003E4C  EC9D  F020         	call	_getCANFrame
 14126  003E50  0900               	iorlw	0
 14127  003E52  E102               	bnz	l6937
 14128                           
 14129                           ;main.c: 2613: return 0;
 14130  003E54  0E00               	movlw	0
 14131  003E56  D02E               	goto	l665
 14132  003E58                     l6937:
 14133                           
 14134                           ;main.c: 2614: }
 14135                           ;main.c: 2616: *pNodeId = id & 0x0ff;
 14136  003E58  501F               	movf	getVSCPFrame@pNodeId,w,c
 14137  003E5A  6ED9               	movwf	fsr2l,c
 14138  003E5C  6ADA               	clrf	fsr2h,c
 14139  003E5E  C028  FFDF         	movff	getVSCPFrame@id,indf2
 14140                           
 14141                           ;main.c: 2617: *pvscptype = (id >> 8) & 0xff;
 14142  003E62  501E               	movf	getVSCPFrame@pvscptype,w,c
 14143  003E64  6ED9               	movwf	fsr2l,c
 14144  003E66  6ADA               	clrf	fsr2h,c
 14145  003E68  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 14146                           
 14147                           ;main.c: 2618: *pvscpclass = (id >> 16) & 0x1ff;
 14148  003E6C  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 14149  003E6E  6E23               	movwf	??_getVSCPFrame& (0+255),c
 14150  003E70  0E01               	movlw	1
 14151  003E72  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 14152  003E74  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 14153  003E76  5027               	movf	getVSCPFrame@pvscpclass,w,c
 14154  003E78  6ED9               	movwf	fsr2l,c
 14155  003E7A  6ADA               	clrf	fsr2h,c
 14156  003E7C  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 14157  003E80  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 14158                           
 14159                           ;main.c: 2619: *pPriority = (uint16_t) (0x07 & (id >> 26));
 14160  003E84  5020               	movf	getVSCPFrame@pPriority,w,c
 14161  003E86  6ED9               	movwf	fsr2l,c
 14162  003E88  6ADA               	clrf	fsr2h,c
 14163  003E8A  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 14164  003E8E  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 14165  003E92  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 14166  003E96  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 14167  003E9A  0E1B               	movlw	27
 14168  003E9C  D005               	goto	u6940
 14169  003E9E                     u6945:
 14170  003E9E  90D8               	bcf	status,0,c
 14171  003EA0  3226               	rrcf	??_getVSCPFrame+3,f,c
 14172  003EA2  3225               	rrcf	??_getVSCPFrame+2,f,c
 14173  003EA4  3224               	rrcf	??_getVSCPFrame+1,f,c
 14174  003EA6  3223               	rrcf	??_getVSCPFrame,f,c
 14175  003EA8                     u6940:
 14176  003EA8  2EE8               	decfsz	wreg,f,c
 14177  003EAA  D7F9               	goto	u6945
 14178  003EAC  5023               	movf	??_getVSCPFrame,w,c
 14179  003EAE  0B07               	andlw	7
 14180  003EB0  6EDF               	movwf	indf2,c
 14181                           
 14182                           ;main.c: 2621: return 1;
 14183  003EB2  0E01               	movlw	1
 14184  003EB4                     l665:
 14185  003EB4  0012               	return	
 14186  003EB6                     __end_of_getVSCPFrame:
 14187                           	opt stack 0
 14188                           tblptru	equ	0xFF8
 14189                           tblptrh	equ	0xFF7
 14190                           tblptrl	equ	0xFF6
 14191                           tablat	equ	0xFF5
 14192                           prodh	equ	0xFF4
 14193                           prodl	equ	0xFF3
 14194                           postinc0	equ	0xFEE
 14195                           wreg	equ	0xFE8
 14196                           indf1	equ	0xFE7
 14197                           fsr1h	equ	0xFE2
 14198                           fsr1l	equ	0xFE1
 14199                           indf2	equ	0xFDF
 14200                           postinc2	equ	0xFDE
 14201                           postdec2	equ	0xFDD
 14202                           plusw2	equ	0xFDB
 14203                           fsr2h	equ	0xFDA
 14204                           fsr2l	equ	0xFD9
 14205                           status	equ	0xFD8
 14206                           
 14207 ;; *************** function _getCANFrame *****************
 14208 ;; Defined at:
 14209 ;;		line 2651 in file "../main.c"
 14210 ;; Parameters:    Size  Location     Type
 14211 ;;  pid             1    wreg     PTR unsigned long 
 14212 ;;		 -> getVSCPFrame@id(4), 
 14213 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 14214 ;;		 -> vscp_imsg(14), 
 14215 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 14216 ;;		 -> vscp_imsg(14), 
 14217 ;; Auto vars:     Size  Location     Type
 14218 ;;  pid             1   27[COMRAM] PTR unsigned long 
 14219 ;;		 -> getVSCPFrame@id(4), 
 14220 ;;  flags           1   28[COMRAM] enum E16332
 14221 ;; Return value:  Size  Location     Type
 14222 ;;                  1    wreg      unsigned char 
 14223 ;; Registers used:
 14224 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14225 ;; Tracked objects:
 14226 ;;		On entry : F/0
 14227 ;;		On exit  : 0/0
 14228 ;;		Unchanged: 0/0
 14229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14230 ;;      Params:         2       0       0       0       0       0       0
 14231 ;;      Locals:         2       0       0       0       0       0       0
 14232 ;;      Temps:          0       0       0       0       0       0       0
 14233 ;;      Totals:         4       0       0       0       0       0       0
 14234 ;;Total ram usage:        4 bytes
 14235 ;; Hardware stack levels used:    1
 14236 ;; Hardware stack levels required when called:    4
 14237 ;; This function calls:
 14238 ;;		_ECANReceiveMessage
 14239 ;; This function is called by:
 14240 ;;		_getVSCPFrame
 14241 ;; This function uses a non-reentrant model
 14242 ;;
 14243                           
 14244                           	psect	text58
 14245  00413A                     __ptext58:
 14246                           	opt stack 0
 14247  00413A                     _getCANFrame:
 14248                           	opt stack 24
 14249                           
 14250                           ;incstack = 0
 14251                           ;incstack = 0
 14252                           ;getCANFrame@pid stored from wreg
 14253  00413A  CFE8 F01C          	movff	wreg,getCANFrame@pid
 14254                           
 14255                           ; BSR set to: 0
 14256                           ;main.c: 2652: ECAN_RX_MSG_FLAGS flags;
 14257                           ;main.c: 2656: if (vscp_imsg.flags & 0x80) return 0;
 14258  00413E  AF96               	btfss	_vscp_imsg& (0+255),7,b
 14259  004140  D002               	goto	l6953
 14260  004142                     l6949:
 14261  004142  0E00               	movlw	0
 14262  004144  D00F               	goto	l676
 14263  004146                     l6953:
 14264                           
 14265                           ; BSR set to: 0
 14266                           ;main.c: 2658: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 14267  004146  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 14268  00414A  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 14269  00414E  0E1D               	movlw	low getCANFrame@flags
 14270  004150  6E11               	movwf	?_ECANReceiveMessage+2,c
 14271  004152  501C               	movf	getCANFrame@pid,w,c
 14272  004154  EC4F  F015         	call	_ECANReceiveMessage
 14273  004158  0900               	iorlw	0
 14274  00415A  E0F3               	bz	l6949
 14275                           
 14276                           ;main.c: 2661: if (flags & ECAN_RX_RTR_FRAME) return 0;
 14277  00415C  AC1D               	btfss	getCANFrame@flags,6,c
 14278                           
 14279                           ;main.c: 2664: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 14280  00415E  AA1D               	btfss	getCANFrame@flags,5,c
 14281  004160  D7F0               	goto	l6949
 14282                           
 14283                           ;main.c: 2666: return 1;
 14284  004162  0E01               	movlw	1
 14285  004164                     l676:
 14286  004164  0012               	return	
 14287  004166                     __end_of_getCANFrame:
 14288                           	opt stack 0
 14289                           tblptru	equ	0xFF8
 14290                           tblptrh	equ	0xFF7
 14291                           tblptrl	equ	0xFF6
 14292                           tablat	equ	0xFF5
 14293                           prodh	equ	0xFF4
 14294                           prodl	equ	0xFF3
 14295                           postinc0	equ	0xFEE
 14296                           wreg	equ	0xFE8
 14297                           indf1	equ	0xFE7
 14298                           fsr1h	equ	0xFE2
 14299                           fsr1l	equ	0xFE1
 14300                           indf2	equ	0xFDF
 14301                           postinc2	equ	0xFDE
 14302                           postdec2	equ	0xFDD
 14303                           plusw2	equ	0xFDB
 14304                           fsr2h	equ	0xFDA
 14305                           fsr2l	equ	0xFD9
 14306                           status	equ	0xFD8
 14307                           
 14308 ;; *************** function _ECANReceiveMessage *****************
 14309 ;; Defined at:
 14310 ;;		line 803 in file "../ECAN.c"
 14311 ;; Parameters:    Size  Location     Type
 14312 ;;  id              1    wreg     PTR unsigned long 
 14313 ;;		 -> getVSCPFrame@id(4), 
 14314 ;;  data            1   14[COMRAM] PTR unsigned char 
 14315 ;;		 -> vscp_imsg(14), 
 14316 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 14317 ;;		 -> vscp_imsg(14), 
 14318 ;;  msgFlags        1   16[COMRAM] PTR enum E16324
 14319 ;;		 -> getCANFrame@flags(1), 
 14320 ;; Auto vars:     Size  Location     Type
 14321 ;;  id              1   19[COMRAM] PTR unsigned long 
 14322 ;;		 -> getVSCPFrame@id(4), 
 14323 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 14324 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14325 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14326 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 14327 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14328 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14329 ;;  temp            1   22[COMRAM] struct .
 14330 ;;  mode            1   21[COMRAM] unsigned char 
 14331 ;;  i               1   20[COMRAM] unsigned char 
 14332 ;; Return value:  Size  Location     Type
 14333 ;;                  1    wreg      enum E15660
 14334 ;; Registers used:
 14335 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14336 ;; Tracked objects:
 14337 ;;		On entry : F/0
 14338 ;;		On exit  : 0/0
 14339 ;;		Unchanged: 0/0
 14340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14341 ;;      Params:         3       0       0       0       0       0       0
 14342 ;;      Locals:         8       0       0       0       0       0       0
 14343 ;;      Temps:          0       0       0       0       0       0       0
 14344 ;;      Totals:        11       0       0       0       0       0       0
 14345 ;;Total ram usage:       11 bytes
 14346 ;; Hardware stack levels used:    1
 14347 ;; Hardware stack levels required when called:    3
 14348 ;; This function calls:
 14349 ;;		__ECANPointBuffer
 14350 ;;		__RegsToCANID
 14351 ;; This function is called by:
 14352 ;;		_getCANFrame
 14353 ;; This function uses a non-reentrant model
 14354 ;;
 14355                           
 14356                           	psect	text59
 14357  002A9E                     __ptext59:
 14358                           	opt stack 0
 14359  002A9E                     _ECANReceiveMessage:
 14360                           	opt stack 24
 14361                           
 14362                           ;incstack = 0
 14363                           ;incstack = 0
 14364                           ;ECANReceiveMessage@id stored from wreg
 14365  002A9E  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 14366                           
 14367                           ; BSR set to: 0
 14368                           ;ECAN.c: 805: BYTE mode;
 14369                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 14370                           ;ECAN.c: 809: char i;
 14371                           ;ECAN.c: 810: BYTE_VAL temp;
 14372                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 14373  002AA2  6A54               	clrf	__ECANRxFilterHitInfo,c
 14374                           
 14375                           ; BSR set to: 0
 14376                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 14377  002AA4  5077               	movf	3959,w,c	;volatile
 14378  002AA6  0BC0               	andlw	192
 14379  002AA8  6E16               	movwf	ECANReceiveMessage@mode,c
 14380                           
 14381                           ; BSR set to: 0
 14382                           ;ECAN.c: 816: if ( mode == 0x00 )
 14383  002AAA  6616               	tstfsz	ECANReceiveMessage@mode,c
 14384  002AAC  D032               	goto	l7085
 14385                           
 14386                           ; BSR set to: 0
 14387                           ;ECAN.c: 822: {
 14388                           ;ECAN.c: 824: if ( RXB0FUL )
 14389  002AAE  AE60               	btfss	3936,7,c	;volatile
 14390  002AB0  D012               	goto	l876
 14391                           
 14392                           ; BSR set to: 0
 14393                           ;ECAN.c: 825: {
 14394                           ;ECAN.c: 827: RXB0IF = 0;
 14395  002AB2  90A4               	bcf	4004,0,c	;volatile
 14396                           
 14397                           ;ECAN.c: 830: if ( RXB0OVFL )
 14398  002AB4  AE74               	btfss	3956,7,c	;volatile
 14399  002AB6  D006               	goto	l7061
 14400                           
 14401                           ; BSR set to: 0
 14402                           ;ECAN.c: 831: {
 14403                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 14404  002AB8  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14405  002ABA  6ED9               	movwf	fsr2l,c
 14406  002ABC  6ADA               	clrf	fsr2h,c
 14407  002ABE  0E00               	movlw	0
 14408  002AC0  86DB               	bsf	plusw2,3,c
 14409                           
 14410                           ; BSR set to: 0
 14411                           ;ECAN.c: 833: RXB0OVFL = 0;
 14412  002AC2  9E74               	bcf	3956,7,c	;volatile
 14413  002AC4                     l7061:
 14414                           
 14415                           ; BSR set to: 0
 14416                           ;ECAN.c: 834: }
 14417                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 14418  002AC4  A060               	btfss	3936,0,c	;volatile
 14419  002AC6  D002               	bra	u7115
 14420  002AC8  8054               	bsf	__ECANRxFilterHitInfo,0,c
 14421  002ACA  D001               	bra	u7117
 14422  002ACC                     u7115:
 14423  002ACC  9054               	bcf	__ECANRxFilterHitInfo,0,c
 14424  002ACE                     u7117:
 14425                           
 14426                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 14427  002ACE  0E0F               	movlw	15	;volatile
 14428  002AD0  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14429  002AD2  0E60               	movlw	96	;volatile
 14430  002AD4  D01A               	goto	L42
 14431  002AD6                     l876:
 14432                           
 14433                           ; BSR set to: 0
 14434                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 14435  002AD6  010F               	movlb	15	; () banked
 14436  002AD8  AF50               	btfss	80,7,b	;volatile
 14437  002ADA  D019               	goto	l7079
 14438                           
 14439                           ; BSR set to: 15
 14440                           ;ECAN.c: 842: {
 14441                           ;ECAN.c: 844: RXB1IF = 0;
 14442  002ADC  92A4               	bcf	4004,1,c	;volatile
 14443                           
 14444                           ;ECAN.c: 847: if ( RXB1OVFL )
 14445  002ADE  AC74               	btfss	3956,6,c	;volatile
 14446  002AE0  D006               	goto	l7071
 14447                           
 14448                           ; BSR set to: 15
 14449                           ;ECAN.c: 848: {
 14450                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 14451  002AE2  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14452  002AE4  6ED9               	movwf	fsr2l,c
 14453  002AE6  6ADA               	clrf	fsr2h,c
 14454  002AE8  0E00               	movlw	0
 14455  002AEA  86DB               	bsf	plusw2,3,c
 14456                           
 14457                           ; BSR set to: 15
 14458                           ;ECAN.c: 850: RXB1OVFL = 0;
 14459  002AEC  9C74               	bcf	3956,6,c	;volatile
 14460  002AEE                     l7071:
 14461                           
 14462                           ; BSR set to: 15
 14463                           ;ECAN.c: 851: }
 14464                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 14465  002AEE  5150               	movf	80,w,b	;volatile
 14466  002AF0  0B07               	andlw	7
 14467  002AF2  6E54               	movwf	__ECANRxFilterHitInfo,c
 14468                           
 14469                           ; BSR set to: 15
 14470                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 14471  002AF4  0E02               	movlw	2
 14472  002AF6  6054               	cpfslt	__ECANRxFilterHitInfo,c
 14473  002AF8  D005               	goto	l7077
 14474                           
 14475                           ; BSR set to: 15
 14476                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 14477  002AFA  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14478  002AFC  6ED9               	movwf	fsr2l,c
 14479  002AFE  6ADA               	clrf	fsr2h,c
 14480  002B00  0E00               	movlw	0
 14481  002B02  8EDB               	bsf	plusw2,7,c
 14482  002B04                     l7077:
 14483                           
 14484                           ; BSR set to: 15
 14485                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 14486  002B04  0E0F               	movlw	15	;volatile
 14487  002B06  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14488  002B08  0E50               	movlw	80	;volatile
 14489  002B0A                     L42:
 14490  002B0A  6E18               	movwf	ECANReceiveMessage@ptr,c
 14491                           
 14492                           ;ECAN.c: 860: }
 14493  002B0C  D065               	goto	l7139
 14494  002B0E                     l7079:
 14495                           
 14496                           ;ECAN.c: 861: else
 14497                           ;ECAN.c: 862: return FALSE;
 14498  002B0E  0E00               	movlw	0
 14499  002B10  D0CC               	goto	l883
 14500  002B12                     l7085:
 14501                           
 14502                           ; BSR set to: 0
 14503                           ;ECAN.c: 869: else if ( mode == 0x40 )
 14504  002B12  5016               	movf	ECANReceiveMessage@mode,w,c
 14505  002B14  0A40               	xorlw	64
 14506  002B16  E146               	bnz	l886
 14507                           
 14508                           ; BSR set to: 0
 14509                           ;ECAN.c: 875: {
 14510                           ;ECAN.c: 876: if ( RXB0FUL )
 14511  002B18  AE60               	btfss	3936,7,c	;volatile
 14512  002B1A  D004               	goto	l887
 14513                           
 14514                           ; BSR set to: 0
 14515                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 14516  002B1C  0E0F               	movlw	15	;volatile
 14517  002B1E  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14518  002B20  0E60               	movlw	96	;volatile
 14519  002B22  D03E               	goto	L49
 14520  002B24                     l887:
 14521                           
 14522                           ; BSR set to: 0
 14523                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 14524  002B24  010F               	movlb	15	; () banked
 14525  002B26  AF50               	btfss	80,7,b	;volatile
 14526  002B28  D004               	goto	l889
 14527                           
 14528                           ; BSR set to: 15
 14529                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 14530  002B2A  0E0F               	movlw	15	;volatile
 14531  002B2C  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14532  002B2E  0E50               	movlw	80	;volatile
 14533  002B30  D037               	goto	L49
 14534  002B32                     l889:
 14535                           
 14536                           ; BSR set to: 15
 14537                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 14538  002B32  010D               	movlb	13
 14539  002B34  B5F8               	btfsc	248,2,b	;volatile
 14540  002B36  D007               	goto	l891
 14541  002B38  010E               	movlb	14
 14542  002B3A  AF20               	btfss	32,7,b	;volatile
 14543  002B3C  D004               	goto	l891
 14544                           
 14545                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 14546  002B3E  0E0E               	movlw	14	;volatile
 14547  002B40  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14548  002B42  0E20               	movlw	32	;volatile
 14549  002B44  D02D               	goto	L49
 14550  002B46                     l891:
 14551                           
 14552                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 14553  002B46  010D               	movlb	13
 14554  002B48  B7F8               	btfsc	248,3,b	;volatile
 14555  002B4A  D007               	goto	l893
 14556  002B4C  010E               	movlb	14
 14557  002B4E  AF30               	btfss	48,7,b	;volatile
 14558  002B50  D004               	goto	l893
 14559                           
 14560                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 14561  002B52  0E0E               	movlw	14	;volatile
 14562  002B54  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14563  002B56  0E30               	movlw	48	;volatile
 14564  002B58  D023               	goto	L49
 14565  002B5A                     l893:
 14566                           
 14567                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 14568  002B5A  010D               	movlb	13
 14569  002B5C  B9F8               	btfsc	248,4,b	;volatile
 14570  002B5E  D007               	goto	l895
 14571  002B60  010E               	movlb	14
 14572  002B62  AF40               	btfss	64,7,b	;volatile
 14573  002B64  D004               	goto	l895
 14574                           
 14575                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 14576  002B66  0E0E               	movlw	14	;volatile
 14577  002B68  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14578  002B6A  0E40               	movlw	64	;volatile
 14579  002B6C  D019               	goto	L49
 14580  002B6E                     l895:
 14581                           
 14582                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 14583  002B6E  010D               	movlb	13
 14584  002B70  BBF8               	btfsc	248,5,b	;volatile
 14585  002B72  D005               	goto	l897
 14586  002B74  010E               	movlb	14
 14587  002B76  AF50               	btfss	80,7,b	;volatile
 14588  002B78  D002               	goto	l897
 14589                           
 14590                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 14591  002B7A  0E0E               	movlw	14	;volatile
 14592  002B7C  D7D7               	goto	L50
 14593  002B7E                     l897:
 14594                           
 14595                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 14596  002B7E  010D               	movlb	13
 14597  002B80  BDF8               	btfsc	248,6,b	;volatile
 14598  002B82  D005               	goto	l899
 14599  002B84  010E               	movlb	14
 14600  002B86  AF60               	btfss	96,7,b	;volatile
 14601  002B88  D002               	goto	l899
 14602                           
 14603                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 14604  002B8A  0E0E               	movlw	14	;volatile
 14605  002B8C  D7C8               	goto	L51
 14606  002B8E                     l899:
 14607                           
 14608                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 14609  002B8E  010D               	movlb	13
 14610  002B90  BFF8               	btfsc	248,7,b	;volatile
 14611  002B92  D7BD               	goto	l7079
 14612  002B94  010E               	movlb	14
 14613  002B96  AF70               	btfss	112,7,b	;volatile
 14614  002B98  D7BA               	goto	l7079
 14615                           
 14616                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 14617  002B9A  0E0E               	movlw	14	;volatile
 14618  002B9C  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14619  002B9E  0E70               	movlw	112	;volatile
 14620  002BA0                     L49:
 14621  002BA0  6E18               	movwf	ECANReceiveMessage@ptr,c
 14622  002BA2  D00A               	goto	l7129
 14623  002BA4                     l886:
 14624                           
 14625                           ; BSR set to: 0
 14626                           ;ECAN.c: 910: else
 14627                           ;ECAN.c: 915: {
 14628                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 14629  002BA4  AE74               	btfss	3956,7,c	;volatile
 14630  002BA6  D7B3               	goto	l7079
 14631                           
 14632                           ; BSR set to: 0
 14633                           ;ECAN.c: 917: {
 14634                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 14635  002BA8  506F               	movf	3951,w,c	;volatile
 14636  002BAA  0B07               	andlw	7
 14637  002BAC  EC5B  F01F         	call	__ECANPointBuffer
 14638  002BB0  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 14639  002BB4  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 14640  002BB8                     l7129:
 14641                           
 14642                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 14643  002BB8  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14644  002BBC  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14645  002BC0  50DF               	movf	indf2,w,c
 14646  002BC2  0B1F               	andlw	31
 14647  002BC4  6E54               	movwf	__ECANRxFilterHitInfo,c
 14648                           
 14649                           ;ECAN.c: 932: RXB1IF = 0;
 14650  002BC6  92A4               	bcf	4004,1,c	;volatile
 14651                           
 14652                           ;ECAN.c: 934: if ( RXB1OVFL )
 14653  002BC8  AC74               	btfss	3956,6,c	;volatile
 14654  002BCA  D006               	goto	l7139
 14655                           
 14656                           ;ECAN.c: 935: {
 14657                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 14658  002BCC  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14659  002BCE  6ED9               	movwf	fsr2l,c
 14660  002BD0  6ADA               	clrf	fsr2h,c
 14661  002BD2  0E00               	movlw	0
 14662  002BD4  86DB               	bsf	plusw2,3,c
 14663                           
 14664                           ;ECAN.c: 937: RXB1OVFL = 0;
 14665  002BD6  9C74               	bcf	3956,6,c	;volatile
 14666  002BD8                     l7139:
 14667                           
 14668                           ;ECAN.c: 942: savedPtr = ptr;
 14669  002BD8  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 14670  002BDC  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 14671                           
 14672                           ;ECAN.c: 943: *msgFlags = 0;
 14673  002BE0  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14674  002BE2  6ED9               	movwf	fsr2l,c
 14675  002BE4  6ADA               	clrf	fsr2h,c
 14676  002BE6  6ADF               	clrf	indf2,c
 14677                           
 14678                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 14679  002BE8  EE20 F005          	lfsr	2,5
 14680  002BEC  5018               	movf	ECANReceiveMessage@ptr,w,c
 14681  002BEE  26D9               	addwf	fsr2l,f,c
 14682  002BF0  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14683  002BF2  22DA               	addwfc	fsr2h,f,c
 14684  002BF4  50DF               	movf	indf2,w,c
 14685  002BF6  6E17               	movwf	ECANReceiveMessage@temp,c
 14686                           
 14687                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 14688  002BF8  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14689  002BFA  6ED9               	movwf	fsr2l,c
 14690  002BFC  6ADA               	clrf	fsr2h,c
 14691  002BFE  5017               	movf	ECANReceiveMessage@temp,w,c
 14692  002C00  0B0F               	andlw	15
 14693  002C02  6EDF               	movwf	indf2,c
 14694                           
 14695                           ;ECAN.c: 950: if ( temp.bits.b6 )
 14696  002C04  AC17               	btfss	ECANReceiveMessage@temp,6,c
 14697  002C06  D005               	goto	l907
 14698                           
 14699                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 14700  002C08  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14701  002C0A  6ED9               	movwf	fsr2l,c
 14702  002C0C  6ADA               	clrf	fsr2h,c
 14703  002C0E  0E00               	movlw	0
 14704  002C10  8CDB               	bsf	plusw2,6,c
 14705  002C12                     l907:
 14706                           
 14707                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 14708  002C12  EE20 F002          	lfsr	2,2
 14709  002C16  5018               	movf	ECANReceiveMessage@ptr,w,c
 14710  002C18  26D9               	addwf	fsr2l,f,c
 14711  002C1A  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14712  002C1C  22DA               	addwfc	fsr2h,f,c
 14713  002C1E  50DF               	movf	indf2,w,c
 14714  002C20  6E17               	movwf	ECANReceiveMessage@temp,c
 14715                           
 14716                           ;ECAN.c: 955: if ( temp.bits.b3 )
 14717  002C22  A617               	btfss	ECANReceiveMessage@temp,3,c
 14718  002C24  D008               	goto	l908
 14719                           
 14720                           ;ECAN.c: 956: {
 14721                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 14722  002C26  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14723  002C28  6ED9               	movwf	fsr2l,c
 14724  002C2A  6ADA               	clrf	fsr2h,c
 14725  002C2C  0E00               	movlw	0
 14726  002C2E  8ADB               	bsf	plusw2,5,c
 14727                           
 14728                           ;ECAN.c: 958: temp.Val = 1;
 14729  002C30  0E01               	movlw	1
 14730  002C32  6E17               	movwf	ECANReceiveMessage@temp,c
 14731                           
 14732                           ;ECAN.c: 959: }
 14733  002C34  D001               	goto	l7157
 14734  002C36                     l908:
 14735                           
 14736                           ;ECAN.c: 960: else
 14737                           ;ECAN.c: 961: temp.Val = 0;
 14738  002C36  6A17               	clrf	ECANReceiveMessage@temp,c
 14739  002C38                     l7157:
 14740                           
 14741                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 14742  002C38  2818               	incf	ECANReceiveMessage@ptr,w,c
 14743  002C3A  6E08               	movwf	?__RegsToCANID,c
 14744  002C3C  0E00               	movlw	0
 14745  002C3E  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 14746  002C40  6E09               	movwf	?__RegsToCANID+1,c
 14747  002C42  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 14748  002C46  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 14749  002C4A  ECE2  F018         	call	__RegsToCANID	;wreg free
 14750                           
 14751                           ;ECAN.c: 966: ptr += 6;
 14752  002C4E  0E06               	movlw	6
 14753  002C50  2618               	addwf	ECANReceiveMessage@ptr,f,c
 14754  002C52  0E00               	movlw	0
 14755  002C54  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 14756                           
 14757                           ;ECAN.c: 967: temp.Val = *dataLen;
 14758  002C56  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14759  002C58  6ED9               	movwf	fsr2l,c
 14760  002C5A  6ADA               	clrf	fsr2h,c
 14761  002C5C  50DF               	movf	indf2,w,c
 14762  002C5E  6E17               	movwf	ECANReceiveMessage@temp,c
 14763                           
 14764                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 14765  002C60  6A15               	clrf	ECANReceiveMessage@i,c
 14766  002C62  D00D               	goto	l7173
 14767  002C64                     l7165:
 14768                           
 14769                           ;ECAN.c: 969: *data++ = *ptr++;
 14770  002C64  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14771  002C68  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14772  002C6C  500F               	movf	ECANReceiveMessage@data,w,c
 14773  002C6E  6EE1               	movwf	fsr1l,c
 14774  002C70  6AE2               	clrf	fsr1h,c
 14775  002C72  CFDF FFE7          	movff	indf2,indf1
 14776  002C76  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 14777  002C78  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 14778  002C7A  2A0F               	incf	ECANReceiveMessage@data,f,c
 14779  002C7C  2A15               	incf	ECANReceiveMessage@i,f,c
 14780  002C7E                     l7173:
 14781  002C7E  5017               	movf	ECANReceiveMessage@temp,w,c
 14782  002C80  5C15               	subwf	ECANReceiveMessage@i,w,c
 14783  002C82  E3F0               	bnc	l7165
 14784                           
 14785                           ;ECAN.c: 972: if ( IRXIF )
 14786  002C84  AEA4               	btfss	4004,7,c	;volatile
 14787  002C86  D006               	goto	l7179
 14788                           
 14789                           ;ECAN.c: 973: {
 14790                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 14791  002C88  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14792  002C8A  6ED9               	movwf	fsr2l,c
 14793  002C8C  6ADA               	clrf	fsr2h,c
 14794  002C8E  0E00               	movlw	0
 14795  002C90  88DB               	bsf	plusw2,4,c
 14796                           
 14797                           ;ECAN.c: 975: IRXIF = 0;
 14798  002C92  9EA4               	bcf	4004,7,c	;volatile
 14799  002C94                     l7179:
 14800                           
 14801                           ;ECAN.c: 976: }
 14802                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 14803  002C94  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 14804  002C98  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 14805  002C9C  0E7F               	movlw	127
 14806  002C9E  16DF               	andwf	indf2,f,c
 14807                           
 14808                           ;ECAN.c: 983: if ( mode == 0x80 )
 14809  002CA0  5016               	movf	ECANReceiveMessage@mode,w,c
 14810  002CA2  0A80               	xorlw	128
 14811  002CA4  B4D8               	btfsc	status,2,c
 14812                           
 14813                           ;ECAN.c: 984: FIFOEMPTY = 0;
 14814  002CA6  9E74               	bcf	3956,7,c	;volatile
 14815                           
 14816                           ;ECAN.c: 990: return TRUE;
 14817  002CA8  0E01               	movlw	1
 14818  002CAA                     l883:
 14819  002CAA  0012               	return	
 14820  002CAC                     __end_of_ECANReceiveMessage:
 14821                           	opt stack 0
 14822                           tblptru	equ	0xFF8
 14823                           tblptrh	equ	0xFF7
 14824                           tblptrl	equ	0xFF6
 14825                           tablat	equ	0xFF5
 14826                           prodh	equ	0xFF4
 14827                           prodl	equ	0xFF3
 14828                           postinc0	equ	0xFEE
 14829                           wreg	equ	0xFE8
 14830                           indf1	equ	0xFE7
 14831                           fsr1h	equ	0xFE2
 14832                           fsr1l	equ	0xFE1
 14833                           indf2	equ	0xFDF
 14834                           postinc2	equ	0xFDE
 14835                           postdec2	equ	0xFDD
 14836                           plusw2	equ	0xFDB
 14837                           fsr2h	equ	0xFDA
 14838                           fsr2l	equ	0xFD9
 14839                           status	equ	0xFD8
 14840                           
 14841 ;; *************** function __RegsToCANID *****************
 14842 ;; Defined at:
 14843 ;;		line 1156 in file "../ECAN.c"
 14844 ;; Parameters:    Size  Location     Type
 14845 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 14846 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14847 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14848 ;;  val             1    9[COMRAM] PTR unsigned long 
 14849 ;;		 -> getVSCPFrame@id(4), 
 14850 ;;  type            1   10[COMRAM] unsigned char 
 14851 ;; Auto vars:     Size  Location     Type
 14852 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 14853 ;;		 -> getVSCPFrame@id(4), 
 14854 ;; Return value:  Size  Location     Type
 14855 ;;		None               void
 14856 ;; Registers used:
 14857 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14858 ;; Tracked objects:
 14859 ;;		On entry : 0/0
 14860 ;;		On exit  : 0/0
 14861 ;;		Unchanged: 0/0
 14862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14863 ;;      Params:         4       0       0       0       0       0       0
 14864 ;;      Locals:         1       0       0       0       0       0       0
 14865 ;;      Temps:          2       0       0       0       0       0       0
 14866 ;;      Totals:         7       0       0       0       0       0       0
 14867 ;;Total ram usage:        7 bytes
 14868 ;; Hardware stack levels used:    1
 14869 ;; Hardware stack levels required when called:    2
 14870 ;; This function calls:
 14871 ;;		Nothing
 14872 ;; This function is called by:
 14873 ;;		_ECANReceiveMessage
 14874 ;; This function uses a non-reentrant model
 14875 ;;
 14876                           
 14877                           	psect	text60
 14878  0031C4                     __ptext60:
 14879                           	opt stack 0
 14880  0031C4                     __RegsToCANID:
 14881                           	opt stack 24
 14882                           
 14883                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 14884                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 14885                           
 14886                           ;incstack = 0
 14887                           ;incstack = 0
 14888  0031C4  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 14889                           
 14890                           ;ECAN.c: 1161: if ( type == 0 )
 14891  0031C8  660B               	tstfsz	__RegsToCANID@type,c
 14892  0031CA  D046               	goto	l7253
 14893                           
 14894                           ;ECAN.c: 1162: {
 14895                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 14896  0031CC  500E               	movf	__RegsToCANID@Value,w,c
 14897  0031CE  6ED9               	movwf	fsr2l,c
 14898  0031D0  6ADA               	clrf	fsr2h,c
 14899  0031D2  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14900  0031D6  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14901  0031DA  50E7               	movf	indf1,w,c
 14902  0031DC  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14903  0031DE  90D8               	bcf	status,0,c
 14904  0031E0  360C               	rlcf	??__RegsToCANID,f,c
 14905  0031E2  90D8               	bcf	status,0,c
 14906  0031E4  360C               	rlcf	??__RegsToCANID,f,c
 14907  0031E6  90D8               	bcf	status,0,c
 14908  0031E8  340C               	rlcf	??__RegsToCANID,w,c
 14909  0031EA  6EDF               	movwf	indf2,c
 14910                           
 14911                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 14912  0031EC  500E               	movf	__RegsToCANID@Value,w,c
 14913  0031EE  6ED9               	movwf	fsr2l,c
 14914  0031F0  6ADA               	clrf	fsr2h,c
 14915  0031F2  2AD9               	incf	fsr2l,f,c
 14916  0031F4  6ADA               	clrf	fsr2h,c
 14917  0031F6  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14918  0031FA  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14919  0031FE  50E7               	movf	indf1,w,c
 14920  003200  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14921  003202  0E05               	movlw	5
 14922  003204  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14923  003206                     u7435:
 14924  003206  90D8               	bcf	status,0,c
 14925  003208  320C               	rrcf	??__RegsToCANID,f,c
 14926  00320A  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14927  00320C  D7FC               	goto	u7435
 14928  00320E  500C               	movf	??__RegsToCANID,w,c
 14929  003210  6EDF               	movwf	indf2,c
 14930                           
 14931                           ;ECAN.c: 1166: ptr++;
 14932  003212  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14933  003214  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14934                           
 14935                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 14936  003216  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14937  00321A  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14938  00321E  50DF               	movf	indf2,w,c
 14939  003220  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14940  003222  0E05               	movlw	5
 14941  003224  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14942  003226                     u7445:
 14943  003226  90D8               	bcf	status,0,c
 14944  003228  320C               	rrcf	??__RegsToCANID,f,c
 14945  00322A  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14946  00322C  D7FC               	goto	u7445
 14947  00322E  500E               	movf	__RegsToCANID@Value,w,c
 14948  003230  6ED9               	movwf	fsr2l,c
 14949  003232  6ADA               	clrf	fsr2h,c
 14950  003234  500C               	movf	??__RegsToCANID,w,c
 14951  003236  12DF               	iorwf	indf2,f,c
 14952                           
 14953                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 14954  003238  500E               	movf	__RegsToCANID@Value,w,c
 14955  00323A  6ED9               	movwf	fsr2l,c
 14956  00323C  6ADA               	clrf	fsr2h,c
 14957  00323E  0E02               	movlw	2
 14958  003240  26D9               	addwf	fsr2l,f,c
 14959  003242  6ADA               	clrf	fsr2h,c
 14960  003244  6ADF               	clrf	indf2,c
 14961                           
 14962                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 14963  003246  500E               	movf	__RegsToCANID@Value,w,c
 14964  003248  6ED9               	movwf	fsr2l,c
 14965  00324A  6ADA               	clrf	fsr2h,c
 14966  00324C  0E03               	movlw	3
 14967  00324E  26D9               	addwf	fsr2l,f,c
 14968  003250  6ADA               	clrf	fsr2h,c
 14969  003252  0E00               	movlw	0
 14970  003254  6EDF               	movwf	indf2,c
 14971                           
 14972                           ;ECAN.c: 1170: }
 14973  003256  D067               	goto	l930
 14974  003258                     l7253:
 14975                           
 14976                           ;ECAN.c: 1171: else
 14977                           ;ECAN.c: 1172: {
 14978                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 14979  003258  500E               	movf	__RegsToCANID@Value,w,c
 14980  00325A  6ED9               	movwf	fsr2l,c
 14981  00325C  6ADA               	clrf	fsr2h,c
 14982  00325E  0E02               	movlw	2
 14983  003260  26D9               	addwf	fsr2l,f,c
 14984  003262  6ADA               	clrf	fsr2h,c
 14985  003264  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14986  003268  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14987  00326C  50E7               	movf	indf1,w,c
 14988  00326E  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14989  003270  0E05               	movlw	5
 14990  003272  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14991  003274                     u7455:
 14992  003274  90D8               	bcf	status,0,c
 14993  003276  360C               	rlcf	??__RegsToCANID,f,c
 14994  003278  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14995  00327A  D7FC               	goto	u7455
 14996  00327C  500C               	movf	??__RegsToCANID,w,c
 14997  00327E  6EDF               	movwf	indf2,c
 14998                           
 14999                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 15000  003280  500E               	movf	__RegsToCANID@Value,w,c
 15001  003282  6ED9               	movwf	fsr2l,c
 15002  003284  6ADA               	clrf	fsr2h,c
 15003  003286  0E03               	movlw	3
 15004  003288  26D9               	addwf	fsr2l,f,c
 15005  00328A  6ADA               	clrf	fsr2h,c
 15006  00328C  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 15007  003290  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 15008  003294  50E7               	movf	indf1,w,c
 15009  003296  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15010  003298  90D8               	bcf	status,0,c
 15011  00329A  320C               	rrcf	??__RegsToCANID,f,c
 15012  00329C  90D8               	bcf	status,0,c
 15013  00329E  320C               	rrcf	??__RegsToCANID,f,c
 15014  0032A0  90D8               	bcf	status,0,c
 15015  0032A2  300C               	rrcf	??__RegsToCANID,w,c
 15016  0032A4  6EDF               	movwf	indf2,c
 15017                           
 15018                           ;ECAN.c: 1176: ptr++;
 15019  0032A6  4A08               	infsnz	__RegsToCANID@ptr,f,c
 15020  0032A8  2A09               	incf	__RegsToCANID@ptr+1,f,c
 15021                           
 15022                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 15023  0032AA  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15024  0032AE  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15025  0032B2  50DF               	movf	indf2,w,c
 15026  0032B4  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15027  0032B6  0E03               	movlw	3
 15028  0032B8  160C               	andwf	??__RegsToCANID,f,c
 15029  0032BA  500E               	movf	__RegsToCANID@Value,w,c
 15030  0032BC  6ED9               	movwf	fsr2l,c
 15031  0032BE  6ADA               	clrf	fsr2h,c
 15032  0032C0  0E02               	movlw	2
 15033  0032C2  26D9               	addwf	fsr2l,f,c
 15034  0032C4  6ADA               	clrf	fsr2h,c
 15035  0032C6  500C               	movf	??__RegsToCANID,w,c
 15036  0032C8  12DF               	iorwf	indf2,f,c
 15037                           
 15038                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 15039  0032CA  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15040  0032CE  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15041  0032D2  50DF               	movf	indf2,w,c
 15042  0032D4  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15043  0032D6  90D8               	bcf	status,0,c
 15044  0032D8  320C               	rrcf	??__RegsToCANID,f,c
 15045  0032DA  90D8               	bcf	status,0,c
 15046  0032DC  320C               	rrcf	??__RegsToCANID,f,c
 15047  0032DE  90D8               	bcf	status,0,c
 15048  0032E0  320C               	rrcf	??__RegsToCANID,f,c
 15049  0032E2  0E1C               	movlw	28
 15050  0032E4  160C               	andwf	??__RegsToCANID,f,c
 15051  0032E6  500E               	movf	__RegsToCANID@Value,w,c
 15052  0032E8  6ED9               	movwf	fsr2l,c
 15053  0032EA  6ADA               	clrf	fsr2h,c
 15054  0032EC  0E02               	movlw	2
 15055  0032EE  26D9               	addwf	fsr2l,f,c
 15056  0032F0  6ADA               	clrf	fsr2h,c
 15057  0032F2  500C               	movf	??__RegsToCANID,w,c
 15058  0032F4  12DF               	iorwf	indf2,f,c
 15059                           
 15060                           ;ECAN.c: 1180: ptr++;
 15061  0032F6  4A08               	infsnz	__RegsToCANID@ptr,f,c
 15062  0032F8  2A09               	incf	__RegsToCANID@ptr+1,f,c
 15063                           
 15064                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 15065  0032FA  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15066  0032FE  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15067  003302  500E               	movf	__RegsToCANID@Value,w,c
 15068  003304  6EE1               	movwf	fsr1l,c
 15069  003306  6AE2               	clrf	fsr1h,c
 15070  003308  2AE1               	incf	fsr1l,f,c
 15071  00330A  6AE2               	clrf	fsr1h,c
 15072  00330C  CFDF FFE7          	movff	indf2,indf1
 15073                           
 15074                           ;ECAN.c: 1182: ptr++;
 15075  003310  4A08               	infsnz	__RegsToCANID@ptr,f,c
 15076  003312  2A09               	incf	__RegsToCANID@ptr+1,f,c
 15077                           
 15078                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 15079  003314  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15080  003318  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15081  00331C  500E               	movf	__RegsToCANID@Value,w,c
 15082  00331E  6EE1               	movwf	fsr1l,c
 15083  003320  6AE2               	clrf	fsr1h,c
 15084  003322  CFDF FFE7          	movff	indf2,indf1
 15085  003326                     l930:
 15086  003326  0012               	return	
 15087  003328                     __end_of__RegsToCANID:
 15088                           	opt stack 0
 15089                           tblptru	equ	0xFF8
 15090                           tblptrh	equ	0xFF7
 15091                           tblptrl	equ	0xFF6
 15092                           tablat	equ	0xFF5
 15093                           prodh	equ	0xFF4
 15094                           prodl	equ	0xFF3
 15095                           postinc0	equ	0xFEE
 15096                           wreg	equ	0xFE8
 15097                           indf1	equ	0xFE7
 15098                           fsr1h	equ	0xFE2
 15099                           fsr1l	equ	0xFE1
 15100                           indf2	equ	0xFDF
 15101                           postinc2	equ	0xFDE
 15102                           postdec2	equ	0xFDD
 15103                           plusw2	equ	0xFDB
 15104                           fsr2h	equ	0xFDA
 15105                           fsr2l	equ	0xFD9
 15106                           status	equ	0xFD8
 15107                           
 15108 ;; *************** function __ECANPointBuffer *****************
 15109 ;; Defined at:
 15110 ;;		line 1207 in file "../ECAN.c"
 15111 ;; Parameters:    Size  Location     Type
 15112 ;;  b               1    wreg     unsigned char 
 15113 ;; Auto vars:     Size  Location     Type
 15114 ;;  b               1   10[COMRAM] unsigned char 
 15115 ;;  pt              2   11[COMRAM] PTR unsigned char 
 15116 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 15117 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 15118 ;; Return value:  Size  Location     Type
 15119 ;;                  2    7[COMRAM] PTR unsigned char 
 15120 ;; Registers used:
 15121 ;;		wreg, status,2, status,0
 15122 ;; Tracked objects:
 15123 ;;		On entry : F/0
 15124 ;;		On exit  : 0/0
 15125 ;;		Unchanged: 0/0
 15126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15127 ;;      Params:         3       0       0       0       0       0       0
 15128 ;;      Locals:         3       0       0       0       0       0       0
 15129 ;;      Temps:          0       0       0       0       0       0       0
 15130 ;;      Totals:         6       0       0       0       0       0       0
 15131 ;;Total ram usage:        6 bytes
 15132 ;; Hardware stack levels used:    1
 15133 ;; Hardware stack levels required when called:    2
 15134 ;; This function calls:
 15135 ;;		Nothing
 15136 ;; This function is called by:
 15137 ;;		_ECANReceiveMessage
 15138 ;; This function uses a non-reentrant model
 15139 ;;
 15140                           
 15141                           	psect	text61
 15142  003EB6                     __ptext61:
 15143                           	opt stack 0
 15144  003EB6                     __ECANPointBuffer:
 15145                           	opt stack 24
 15146                           
 15147                           ;incstack = 0
 15148                           ;incstack = 0
 15149                           ;__ECANPointBuffer@b stored from wreg
 15150  003EB6  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 15151                           
 15152                           ; BSR set to: 0
 15153                           ;ECAN.c: 1208: BYTE* pt;
 15154                           ;ECAN.c: 1210: switch(b)
 15155  003EBA  D024               	goto	l7239
 15156  003EBC                     l7221:
 15157                           
 15158                           ; BSR set to: 0
 15159                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 15160  003EBC  0E0F               	movlw	15	;volatile
 15161  003EBE  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15162  003EC0  0E60               	movlw	96	;volatile
 15163  003EC2  D01E               	goto	L58
 15164  003EC4                     l7223:
 15165                           
 15166                           ; BSR set to: 0
 15167                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 15168  003EC4  010F               	movlb	15	; () banked
 15169  003EC6  0E0F               	movlw	15	;volatile
 15170  003EC8  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15171  003ECA  0E50               	movlw	80	;volatile
 15172  003ECC  D019               	goto	L58
 15173  003ECE                     l7225:
 15174                           
 15175                           ; BSR set to: 0
 15176                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 15177  003ECE  010E               	movlb	14	; () banked
 15178  003ED0  0E0E               	movlw	14	;volatile
 15179  003ED2  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15180  003ED4  0E20               	movlw	32	;volatile
 15181  003ED6  D014               	goto	L58
 15182  003ED8                     l7227:
 15183                           
 15184                           ; BSR set to: 0
 15185                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 15186  003ED8  010E               	movlb	14	; () banked
 15187  003EDA  0E0E               	movlw	14	;volatile
 15188  003EDC  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15189  003EDE  0E30               	movlw	48	;volatile
 15190  003EE0  D00F               	goto	L58
 15191  003EE2                     l7229:
 15192                           
 15193                           ; BSR set to: 0
 15194                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 15195  003EE2  010E               	movlb	14	; () banked
 15196  003EE4  0E0E               	movlw	14	;volatile
 15197  003EE6  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15198  003EE8  0E40               	movlw	64	;volatile
 15199  003EEA  D00A               	goto	L58
 15200  003EEC                     l7231:
 15201                           
 15202                           ; BSR set to: 0
 15203                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 15204  003EEC  010E               	movlb	14	; () banked
 15205  003EEE  0E0E               	movlw	14	;volatile
 15206  003EF0  D7EB               	goto	L59
 15207  003EF2                     l7233:
 15208                           
 15209                           ; BSR set to: 0
 15210                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 15211  003EF2  010E               	movlb	14	; () banked
 15212  003EF4  0E0E               	movlw	14	;volatile
 15213  003EF6  D7E3               	goto	L60
 15214  003EF8                     l7235:
 15215                           
 15216                           ; BSR set to: 0
 15217                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 15218  003EF8  010E               	movlb	14	; () banked
 15219  003EFA  0E0E               	movlw	14	;volatile
 15220  003EFC  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15221  003EFE  0E70               	movlw	112	;volatile
 15222  003F00                     L58:
 15223  003F00  6E0C               	movwf	__ECANPointBuffer@pt,c
 15224                           
 15225                           ;ECAN.c: 1235: break;
 15226  003F02  D00F               	goto	l935
 15227  003F04                     l7239:
 15228                           
 15229                           ; BSR set to: 0
 15230  003F04  500B               	movf	__ECANPointBuffer@b,w,c
 15231                           
 15232                           ; Switch size 1, requested type "speed"
 15233                           ; Number of cases is 7, Range of values is 0 to 6
 15234                           ; switch strategies available:
 15235                           ; Name         Instructions Cycles
 15236                           ; simple_byte           22    12 (average)
 15237                           ;	Chosen strategy is simple_byte
 15238  003F06  E0DA               	bz	l7221
 15239  003F08  0A01               	xorlw	1	; case 1
 15240  003F0A  E0DC               	bz	l7223
 15241  003F0C  0A03               	xorlw	3	; case 2
 15242  003F0E  E0DF               	bz	l7225
 15243  003F10  0A01               	xorlw	1	; case 3
 15244  003F12  E0E2               	bz	l7227
 15245  003F14  0A07               	xorlw	7	; case 4
 15246  003F16  E0E5               	bz	l7229
 15247  003F18  0A01               	xorlw	1	; case 5
 15248  003F1A  E0E8               	bz	l7231
 15249  003F1C  0A03               	xorlw	3	; case 6
 15250  003F1E  E0E9               	bz	l7233
 15251  003F20  D7EB               	goto	l7235
 15252  003F22                     l935:
 15253                           
 15254                           ;ECAN.c: 1237: return (pt);
 15255  003F22  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 15256  003F26  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 15257  003F2A  0012               	return	
 15258  003F2C                     __end_of__ECANPointBuffer:
 15259                           	opt stack 0
 15260                           tblptru	equ	0xFF8
 15261                           tblptrh	equ	0xFF7
 15262                           tblptrl	equ	0xFF6
 15263                           tablat	equ	0xFF5
 15264                           prodh	equ	0xFF4
 15265                           prodl	equ	0xFF3
 15266                           postinc0	equ	0xFEE
 15267                           wreg	equ	0xFE8
 15268                           indf1	equ	0xFE7
 15269                           fsr1h	equ	0xFE2
 15270                           fsr1l	equ	0xFE1
 15271                           indf2	equ	0xFDF
 15272                           postinc2	equ	0xFDE
 15273                           postdec2	equ	0xFDD
 15274                           plusw2	equ	0xFDB
 15275                           fsr2h	equ	0xFDA
 15276                           fsr2l	equ	0xFD9
 15277                           status	equ	0xFD8
 15278                           
 15279 ;; *************** function _vscp_check_pstorage *****************
 15280 ;; Defined at:
 15281 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 15282 ;; Parameters:    Size  Location     Type
 15283 ;;		None
 15284 ;; Auto vars:     Size  Location     Type
 15285 ;;		None
 15286 ;; Return value:  Size  Location     Type
 15287 ;;                  1    wreg      unsigned char 
 15288 ;; Registers used:
 15289 ;;		wreg, status,2, status,0, cstack
 15290 ;; Tracked objects:
 15291 ;;		On entry : 0/0
 15292 ;;		On exit  : 0/0
 15293 ;;		Unchanged: 0/0
 15294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15295 ;;      Params:         0       0       0       0       0       0       0
 15296 ;;      Locals:         0       0       0       0       0       0       0
 15297 ;;      Temps:          0       0       0       0       0       0       0
 15298 ;;      Totals:         0       0       0       0       0       0       0
 15299 ;;Total ram usage:        0 bytes
 15300 ;; Hardware stack levels used:    1
 15301 ;; Hardware stack levels required when called:    4
 15302 ;; This function calls:
 15303 ;;		_vscp_writeNicknamePermanent
 15304 ;;		_vscp_getSegmentCRC
 15305 ;;		_vscp_setSegmentCRC
 15306 ;;		_vscp_setControlByte
 15307 ;; This function is called by:
 15308 ;;		_main
 15309 ;; This function uses a non-reentrant model
 15310 ;;
 15311                           
 15312                           	psect	text62
 15313  00429E                     __ptext62:
 15314                           	opt stack 0
 15315  00429E                     _vscp_check_pstorage:
 15316                           	opt stack 26
 15317                           
 15318                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 15319                           
 15320                           ;incstack = 0
 15321                           ;incstack = 0
 15322  00429E  EC65  F022         	call	_vscp_getSegmentCRC	;wreg free
 15323  0042A2  0BC0               	andlw	192
 15324  0042A4  0A40               	xorlw	64
 15325  0042A6  E102               	bnz	l7715
 15326                           
 15327                           ;vscp_firmware.c: 172: return !0;
 15328  0042A8  0E01               	movlw	1
 15329  0042AA  D00A               	goto	l1055
 15330  0042AC                     l7715:
 15331                           
 15332                           ;vscp_firmware.c: 173: }
 15333                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 15334  0042AC  0EFF               	movlw	255
 15335  0042AE  EC08  F022         	call	_vscp_writeNicknamePermanent
 15336                           
 15337                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 15338  0042B2  0E00               	movlw	0
 15339  0042B4  ECFD  F021         	call	_vscp_setSegmentCRC
 15340                           
 15341                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 15342  0042B8  0EA0               	movlw	160
 15343  0042BA  ECF2  F021         	call	_vscp_setControlByte
 15344                           
 15345                           ;vscp_firmware.c: 185: return 0;
 15346  0042BE  0E00               	movlw	0
 15347  0042C0                     l1055:
 15348  0042C0  0012               	return	
 15349  0042C2                     __end_of_vscp_check_pstorage:
 15350                           	opt stack 0
 15351                           tblptru	equ	0xFF8
 15352                           tblptrh	equ	0xFF7
 15353                           tblptrl	equ	0xFF6
 15354                           tablat	equ	0xFF5
 15355                           prodh	equ	0xFF4
 15356                           prodl	equ	0xFF3
 15357                           postinc0	equ	0xFEE
 15358                           wreg	equ	0xFE8
 15359                           indf1	equ	0xFE7
 15360                           fsr1h	equ	0xFE2
 15361                           fsr1l	equ	0xFE1
 15362                           indf2	equ	0xFDF
 15363                           postinc2	equ	0xFDE
 15364                           postdec2	equ	0xFDD
 15365                           plusw2	equ	0xFDB
 15366                           fsr2h	equ	0xFDA
 15367                           fsr2l	equ	0xFD9
 15368                           status	equ	0xFD8
 15369                           
 15370 ;; *************** function _vscp_setControlByte *****************
 15371 ;; Defined at:
 15372 ;;		line 2450 in file "../main.c"
 15373 ;; Parameters:    Size  Location     Type
 15374 ;;  ctrl            1    wreg     unsigned char 
 15375 ;; Auto vars:     Size  Location     Type
 15376 ;;  ctrl            1   11[COMRAM] unsigned char 
 15377 ;; Return value:  Size  Location     Type
 15378 ;;		None               void
 15379 ;; Registers used:
 15380 ;;		wreg, status,2, cstack
 15381 ;; Tracked objects:
 15382 ;;		On entry : 0/0
 15383 ;;		On exit  : 0/0
 15384 ;;		Unchanged: 0/0
 15385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15386 ;;      Params:         0       0       0       0       0       0       0
 15387 ;;      Locals:         1       0       0       0       0       0       0
 15388 ;;      Temps:          0       0       0       0       0       0       0
 15389 ;;      Totals:         1       0       0       0       0       0       0
 15390 ;;Total ram usage:        1 bytes
 15391 ;; Hardware stack levels used:    1
 15392 ;; Hardware stack levels required when called:    3
 15393 ;; This function calls:
 15394 ;;		_Busy_eep
 15395 ;;		_Write_b_eep
 15396 ;; This function is called by:
 15397 ;;		_vscp_check_pstorage
 15398 ;; This function uses a non-reentrant model
 15399 ;;
 15400                           
 15401                           	psect	text63
 15402  0043E4                     __ptext63:
 15403                           	opt stack 0
 15404  0043E4                     _vscp_setControlByte:
 15405                           	opt stack 26
 15406                           
 15407                           ;incstack = 0
 15408                           ;incstack = 0
 15409                           ;vscp_setControlByte@ctrl stored from wreg
 15410  0043E4  CFE8 F00C          	movff	wreg,vscp_setControlByte@ctrl
 15411                           
 15412                           ;main.c: 2451: (Busy_eep(), Write_b_eep(0x03,ctrl));
 15413  0043E8  EC6E  F022         	call	_Busy_eep	;wreg free
 15414  0043EC  6A09               	clrf	?_Write_b_eep+1,c
 15415  0043EE  0E03               	movlw	3
 15416  0043F0  6E08               	movwf	?_Write_b_eep,c
 15417  0043F2  C00C  F00A         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 15418  0043F6  EF53  F020         	goto	_Write_b_eep	;wreg free
 15419  0043FA                     __end_of_vscp_setControlByte:
 15420                           	opt stack 0
 15421                           tblptru	equ	0xFF8
 15422                           tblptrh	equ	0xFF7
 15423                           tblptrl	equ	0xFF6
 15424                           tablat	equ	0xFF5
 15425                           prodh	equ	0xFF4
 15426                           prodl	equ	0xFF3
 15427                           postinc0	equ	0xFEE
 15428                           wreg	equ	0xFE8
 15429                           indf1	equ	0xFE7
 15430                           fsr1h	equ	0xFE2
 15431                           fsr1l	equ	0xFE1
 15432                           indf2	equ	0xFDF
 15433                           postinc2	equ	0xFDE
 15434                           postdec2	equ	0xFDD
 15435                           plusw2	equ	0xFDB
 15436                           fsr2h	equ	0xFDA
 15437                           fsr2l	equ	0xFD9
 15438                           status	equ	0xFD8
 15439                           
 15440 ;; *************** function _vscp_setSegmentCRC *****************
 15441 ;; Defined at:
 15442 ;;		line 2441 in file "../main.c"
 15443 ;; Parameters:    Size  Location     Type
 15444 ;;  crc             1    wreg     unsigned char 
 15445 ;; Auto vars:     Size  Location     Type
 15446 ;;  crc             1   11[COMRAM] unsigned char 
 15447 ;; Return value:  Size  Location     Type
 15448 ;;		None               void
 15449 ;; Registers used:
 15450 ;;		wreg, status,2, cstack
 15451 ;; Tracked objects:
 15452 ;;		On entry : 0/0
 15453 ;;		On exit  : 0/0
 15454 ;;		Unchanged: 0/0
 15455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15456 ;;      Params:         0       0       0       0       0       0       0
 15457 ;;      Locals:         1       0       0       0       0       0       0
 15458 ;;      Temps:          0       0       0       0       0       0       0
 15459 ;;      Totals:         1       0       0       0       0       0       0
 15460 ;;Total ram usage:        1 bytes
 15461 ;; Hardware stack levels used:    1
 15462 ;; Hardware stack levels required when called:    3
 15463 ;; This function calls:
 15464 ;;		_Busy_eep
 15465 ;;		_Write_b_eep
 15466 ;; This function is called by:
 15467 ;;		_vscp_check_pstorage
 15468 ;;		_vscp_handleProbeState
 15469 ;;		_vscp_handleHeartbeat
 15470 ;;		_vscp_handleSetNickname
 15471 ;; This function uses a non-reentrant model
 15472 ;;
 15473                           
 15474                           	psect	text64
 15475  0043FA                     __ptext64:
 15476                           	opt stack 0
 15477  0043FA                     _vscp_setSegmentCRC:
 15478                           	opt stack 25
 15479                           
 15480                           ;incstack = 0
 15481                           ;incstack = 0
 15482                           ;vscp_setSegmentCRC@crc stored from wreg
 15483  0043FA  CFE8 F00C          	movff	wreg,vscp_setSegmentCRC@crc
 15484                           
 15485                           ;main.c: 2442: (Busy_eep(), Write_b_eep(0x02,crc));
 15486  0043FE  EC6E  F022         	call	_Busy_eep	;wreg free
 15487  004402  6A09               	clrf	?_Write_b_eep+1,c
 15488  004404  0E02               	movlw	2
 15489  004406  6E08               	movwf	?_Write_b_eep,c
 15490  004408  C00C  F00A         	movff	vscp_setSegmentCRC@crc,?_Write_b_eep+2
 15491  00440C  EF53  F020         	goto	_Write_b_eep	;wreg free
 15492  004410                     __end_of_vscp_setSegmentCRC:
 15493                           	opt stack 0
 15494                           tblptru	equ	0xFF8
 15495                           tblptrh	equ	0xFF7
 15496                           tblptrl	equ	0xFF6
 15497                           tablat	equ	0xFF5
 15498                           prodh	equ	0xFF4
 15499                           prodl	equ	0xFF3
 15500                           postinc0	equ	0xFEE
 15501                           wreg	equ	0xFE8
 15502                           indf1	equ	0xFE7
 15503                           fsr1h	equ	0xFE2
 15504                           fsr1l	equ	0xFE1
 15505                           indf2	equ	0xFDF
 15506                           postinc2	equ	0xFDE
 15507                           postdec2	equ	0xFDD
 15508                           plusw2	equ	0xFDB
 15509                           fsr2h	equ	0xFDA
 15510                           fsr2l	equ	0xFD9
 15511                           status	equ	0xFD8
 15512                           
 15513 ;; *************** function _vscp_getSegmentCRC *****************
 15514 ;; Defined at:
 15515 ;;		line 2432 in file "../main.c"
 15516 ;; Parameters:    Size  Location     Type
 15517 ;;		None
 15518 ;; Auto vars:     Size  Location     Type
 15519 ;;		None
 15520 ;; Return value:  Size  Location     Type
 15521 ;;                  1    wreg      unsigned char 
 15522 ;; Registers used:
 15523 ;;		wreg, status,2, cstack
 15524 ;; Tracked objects:
 15525 ;;		On entry : 0/0
 15526 ;;		On exit  : 0/0
 15527 ;;		Unchanged: 0/0
 15528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15529 ;;      Params:         0       0       0       0       0       0       0
 15530 ;;      Locals:         0       0       0       0       0       0       0
 15531 ;;      Temps:          0       0       0       0       0       0       0
 15532 ;;      Totals:         0       0       0       0       0       0       0
 15533 ;;Total ram usage:        0 bytes
 15534 ;; Hardware stack levels used:    1
 15535 ;; Hardware stack levels required when called:    3
 15536 ;; This function calls:
 15537 ;;		_Read_b_eep
 15538 ;; This function is called by:
 15539 ;;		_vscp_check_pstorage
 15540 ;;		_vscp_handleHeartbeat
 15541 ;; This function uses a non-reentrant model
 15542 ;;
 15543                           
 15544                           	psect	text65
 15545  0044CA                     __ptext65:
 15546                           	opt stack 0
 15547  0044CA                     _vscp_getSegmentCRC:
 15548                           	opt stack 25
 15549                           
 15550                           ;main.c: 2433: return Read_b_eep(0x02);
 15551                           
 15552                           ;incstack = 0
 15553                           ;incstack = 0
 15554  0044CA  6A09               	clrf	?_Read_b_eep+1,c
 15555  0044CC  0E02               	movlw	2
 15556  0044CE  6E08               	movwf	?_Read_b_eep,c
 15557  0044D0  EF3A  F022         	goto	_Read_b_eep	;wreg free
 15558  0044D4                     __end_of_vscp_getSegmentCRC:
 15559                           	opt stack 0
 15560                           tblptru	equ	0xFF8
 15561                           tblptrh	equ	0xFF7
 15562                           tblptrl	equ	0xFF6
 15563                           tablat	equ	0xFF5
 15564                           prodh	equ	0xFF4
 15565                           prodl	equ	0xFF3
 15566                           postinc0	equ	0xFEE
 15567                           wreg	equ	0xFE8
 15568                           indf1	equ	0xFE7
 15569                           fsr1h	equ	0xFE2
 15570                           fsr1l	equ	0xFE1
 15571                           indf2	equ	0xFDF
 15572                           postinc2	equ	0xFDE
 15573                           postdec2	equ	0xFDD
 15574                           plusw2	equ	0xFDB
 15575                           fsr2h	equ	0xFDA
 15576                           fsr2l	equ	0xFD9
 15577                           status	equ	0xFD8
 15578                           
 15579 ;; *************** function _vscp_writeNicknamePermanent *****************
 15580 ;; Defined at:
 15581 ;;		line 856 in file "../main.c"
 15582 ;; Parameters:    Size  Location     Type
 15583 ;;  nickname        1    wreg     unsigned char 
 15584 ;; Auto vars:     Size  Location     Type
 15585 ;;  nickname        1   11[COMRAM] unsigned char 
 15586 ;; Return value:  Size  Location     Type
 15587 ;;		None               void
 15588 ;; Registers used:
 15589 ;;		wreg, status,2, cstack
 15590 ;; Tracked objects:
 15591 ;;		On entry : 0/0
 15592 ;;		On exit  : 0/0
 15593 ;;		Unchanged: 0/0
 15594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15595 ;;      Params:         0       0       0       0       0       0       0
 15596 ;;      Locals:         1       0       0       0       0       0       0
 15597 ;;      Temps:          0       0       0       0       0       0       0
 15598 ;;      Totals:         1       0       0       0       0       0       0
 15599 ;;Total ram usage:        1 bytes
 15600 ;; Hardware stack levels used:    1
 15601 ;; Hardware stack levels required when called:    3
 15602 ;; This function calls:
 15603 ;;		_Busy_eep
 15604 ;;		_Write_b_eep
 15605 ;; This function is called by:
 15606 ;;		_vscp_check_pstorage
 15607 ;;		_vscp_handleProbeState
 15608 ;;		_vscp_handleHeartbeat
 15609 ;;		_vscp_handleSetNickname
 15610 ;;		_vscp_handleDropNickname
 15611 ;; This function uses a non-reentrant model
 15612 ;;
 15613                           
 15614                           	psect	text66
 15615  004410                     __ptext66:
 15616                           	opt stack 0
 15617  004410                     _vscp_writeNicknamePermanent:
 15618                           	opt stack 25
 15619                           
 15620                           ;incstack = 0
 15621                           ;incstack = 0
 15622                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 15623  004410  CFE8 F00C          	movff	wreg,vscp_writeNicknamePermanent@nickname
 15624                           
 15625                           ;main.c: 857: (Busy_eep(), Write_b_eep(0x01,nickname));
 15626  004414  EC6E  F022         	call	_Busy_eep	;wreg free
 15627  004418  6A09               	clrf	?_Write_b_eep+1,c
 15628  00441A  0E01               	movlw	1
 15629  00441C  6E08               	movwf	?_Write_b_eep,c
 15630  00441E  C00C  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 15631  004422  EF53  F020         	goto	_Write_b_eep	;wreg free
 15632  004426                     __end_of_vscp_writeNicknamePermanent:
 15633                           	opt stack 0
 15634                           tblptru	equ	0xFF8
 15635                           tblptrh	equ	0xFF7
 15636                           tblptrl	equ	0xFF6
 15637                           tablat	equ	0xFF5
 15638                           prodh	equ	0xFF4
 15639                           prodl	equ	0xFF3
 15640                           postinc0	equ	0xFEE
 15641                           wreg	equ	0xFE8
 15642                           indf1	equ	0xFE7
 15643                           fsr1h	equ	0xFE2
 15644                           fsr1l	equ	0xFE1
 15645                           indf2	equ	0xFDF
 15646                           postinc2	equ	0xFDE
 15647                           postdec2	equ	0xFDD
 15648                           plusw2	equ	0xFDB
 15649                           fsr2h	equ	0xFDA
 15650                           fsr2l	equ	0xFD9
 15651                           status	equ	0xFD8
 15652                           
 15653 ;; *************** function _Write_b_eep *****************
 15654 ;; Defined at:
 15655 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 15656 ;; Parameters:    Size  Location     Type
 15657 ;;  badd            2    7[COMRAM] unsigned int 
 15658 ;;  bdat            1    9[COMRAM] unsigned char 
 15659 ;; Auto vars:     Size  Location     Type
 15660 ;;  GIE_BIT_VAL     1   10[COMRAM] unsigned char 
 15661 ;; Return value:  Size  Location     Type
 15662 ;;		None               void
 15663 ;; Registers used:
 15664 ;;		wreg, status,2
 15665 ;; Tracked objects:
 15666 ;;		On entry : 0/0
 15667 ;;		On exit  : 0/0
 15668 ;;		Unchanged: 0/0
 15669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15670 ;;      Params:         3       0       0       0       0       0       0
 15671 ;;      Locals:         1       0       0       0       0       0       0
 15672 ;;      Temps:          0       0       0       0       0       0       0
 15673 ;;      Totals:         4       0       0       0       0       0       0
 15674 ;;Total ram usage:        4 bytes
 15675 ;; Hardware stack levels used:    1
 15676 ;; Hardware stack levels required when called:    2
 15677 ;; This function calls:
 15678 ;;		Nothing
 15679 ;; This function is called by:
 15680 ;;		_main
 15681 ;;		_init_app_eeprom
 15682 ;;		_vscp_setGUID
 15683 ;;		_vscp_setManufacturerId
 15684 ;;		_vscp_writeNicknamePermanent
 15685 ;;		_vscp_writeAppReg
 15686 ;;		_doActionDisable
 15687 ;;		_vscp_setUserID
 15688 ;;		_vscp_setSegmentCRC
 15689 ;;		_vscp_setControlByte
 15690 ;;		_vscp_goBootloaderMode
 15691 ;; This function uses a non-reentrant model
 15692 ;;
 15693                           
 15694                           	psect	text67
 15695  0040A6                     __ptext67:
 15696                           	opt stack 0
 15697  0040A6                     _Write_b_eep:
 15698                           	opt stack 26
 15699                           
 15700                           ;incstack = 0
 15701                           ;incstack = 0
 15702  0040A6  C008  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 15703  0040AA  C00A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 15704  0040AE  9EA6               	bcf	4006,7,c	;volatile
 15705  0040B0  9CA6               	bcf	4006,6,c	;volatile
 15706  0040B2  84A6               	bsf	4006,2,c	;volatile
 15707  0040B4  0E00               	movlw	0
 15708  0040B6  BEF2               	btfsc	intcon,7,c	;volatile
 15709  0040B8  0E01               	movlw	1
 15710  0040BA  6E0B               	movwf	Write_b_eep@GIE_BIT_VAL,c
 15711  0040BC  9EF2               	bcf	intcon,7,c	;volatile
 15712  0040BE  0E55               	movlw	85
 15713  0040C0  6EA7               	movwf	4007,c	;volatile
 15714  0040C2  0EAA               	movlw	170
 15715  0040C4  6EA7               	movwf	4007,c	;volatile
 15716  0040C6  82A6               	bsf	4006,1,c	;volatile
 15717  0040C8                     l1330:
 15718  0040C8  B2A6               	btfsc	4006,1,c	;volatile
 15719  0040CA  D7FE               	goto	l1330
 15720  0040CC  B00B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 15721  0040CE  D002               	bra	u4275
 15722  0040D0  9EF2               	bcf	intcon,7,c	;volatile
 15723  0040D2  D001               	bra	u4276
 15724  0040D4                     u4275:
 15725  0040D4  8EF2               	bsf	intcon,7,c	;volatile
 15726  0040D6                     u4276:
 15727  0040D6  94A6               	bcf	4006,2,c	;volatile
 15728  0040D8  0012               	return	
 15729  0040DA                     __end_of_Write_b_eep:
 15730                           	opt stack 0
 15731                           tblptru	equ	0xFF8
 15732                           tblptrh	equ	0xFF7
 15733                           tblptrl	equ	0xFF6
 15734                           tablat	equ	0xFF5
 15735                           prodh	equ	0xFF4
 15736                           prodl	equ	0xFF3
 15737                           intcon	equ	0xFF2
 15738                           postinc0	equ	0xFEE
 15739                           wreg	equ	0xFE8
 15740                           indf1	equ	0xFE7
 15741                           fsr1h	equ	0xFE2
 15742                           fsr1l	equ	0xFE1
 15743                           indf2	equ	0xFDF
 15744                           postinc2	equ	0xFDE
 15745                           postdec2	equ	0xFDD
 15746                           plusw2	equ	0xFDB
 15747                           fsr2h	equ	0xFDA
 15748                           fsr2l	equ	0xFD9
 15749                           status	equ	0xFD8
 15750                           
 15751 ;; *************** function _Busy_eep *****************
 15752 ;; Defined at:
 15753 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 15754 ;; Parameters:    Size  Location     Type
 15755 ;;		None
 15756 ;; Auto vars:     Size  Location     Type
 15757 ;;		None
 15758 ;; Return value:  Size  Location     Type
 15759 ;;		None               void
 15760 ;; Registers used:
 15761 ;;		None
 15762 ;; Tracked objects:
 15763 ;;		On entry : 0/0
 15764 ;;		On exit  : 0/0
 15765 ;;		Unchanged: 0/0
 15766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15767 ;;      Params:         0       0       0       0       0       0       0
 15768 ;;      Locals:         0       0       0       0       0       0       0
 15769 ;;      Temps:          0       0       0       0       0       0       0
 15770 ;;      Totals:         0       0       0       0       0       0       0
 15771 ;;Total ram usage:        0 bytes
 15772 ;; Hardware stack levels used:    1
 15773 ;; Hardware stack levels required when called:    2
 15774 ;; This function calls:
 15775 ;;		Nothing
 15776 ;; This function is called by:
 15777 ;;		_main
 15778 ;;		_init_app_eeprom
 15779 ;;		_vscp_setGUID
 15780 ;;		_vscp_setManufacturerId
 15781 ;;		_vscp_writeNicknamePermanent
 15782 ;;		_vscp_writeAppReg
 15783 ;;		_doActionDisable
 15784 ;;		_vscp_setUserID
 15785 ;;		_vscp_setSegmentCRC
 15786 ;;		_vscp_setControlByte
 15787 ;;		_vscp_goBootloaderMode
 15788 ;; This function uses a non-reentrant model
 15789 ;;
 15790                           
 15791                           	psect	text68
 15792  0044DC                     __ptext68:
 15793                           	opt stack 0
 15794  0044DC                     _Busy_eep:
 15795                           	opt stack 26
 15796  0044DC                     l1305:
 15797  0044DC  A2A6               	btfss	4006,1,c	;volatile
 15798  0044DE  0012               	return	
 15799  0044E0  D7FD               	goto	l1305
 15800  0044E2                     __end_of_Busy_eep:
 15801                           	opt stack 0
 15802                           tblptru	equ	0xFF8
 15803                           tblptrh	equ	0xFF7
 15804                           tblptrl	equ	0xFF6
 15805                           tablat	equ	0xFF5
 15806                           prodh	equ	0xFF4
 15807                           prodl	equ	0xFF3
 15808                           intcon	equ	0xFF2
 15809                           postinc0	equ	0xFEE
 15810                           wreg	equ	0xFE8
 15811                           indf1	equ	0xFE7
 15812                           fsr1h	equ	0xFE2
 15813                           fsr1l	equ	0xFE1
 15814                           indf2	equ	0xFDF
 15815                           postinc2	equ	0xFDE
 15816                           postdec2	equ	0xFDD
 15817                           plusw2	equ	0xFDB
 15818                           fsr2h	equ	0xFDA
 15819                           fsr2l	equ	0xFD9
 15820                           status	equ	0xFD8
 15821                           
 15822 ;; *************** function _init *****************
 15823 ;; Defined at:
 15824 ;;		line 318 in file "../main.c"
 15825 ;; Parameters:    Size  Location     Type
 15826 ;;		None
 15827 ;; Auto vars:     Size  Location     Type
 15828 ;;		None
 15829 ;; Return value:  Size  Location     Type
 15830 ;;		None               void
 15831 ;; Registers used:
 15832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15833 ;; Tracked objects:
 15834 ;;		On entry : 0/0
 15835 ;;		On exit  : 0/0
 15836 ;;		Unchanged: 0/0
 15837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15838 ;;      Params:         0       0       0       0       0       0       0
 15839 ;;      Locals:         0       0       0       0       0       0       0
 15840 ;;      Temps:          0       0       0       0       0       0       0
 15841 ;;      Totals:         0       0       0       0       0       0       0
 15842 ;;Total ram usage:        0 bytes
 15843 ;; Hardware stack levels used:    1
 15844 ;; Hardware stack levels required when called:    4
 15845 ;; This function calls:
 15846 ;;		_WriteTimer0
 15847 ;;		_init_app_ram
 15848 ;;		_OpenTimer0
 15849 ;;		_ECANInitialize
 15850 ;; This function is called by:
 15851 ;;		_main
 15852 ;; This function uses a non-reentrant model
 15853 ;;
 15854                           
 15855                           	psect	text69
 15856  004068                     __ptext69:
 15857                           	opt stack 0
 15858  004068                     _init:
 15859                           	opt stack 26
 15860                           
 15861                           ;main.c: 323: init_app_ram();
 15862                           
 15863                           ;incstack = 0
 15864                           ;incstack = 0
 15865  004068  EC83  F01B         	call	_init_app_ram	;wreg free
 15866                           
 15867                           ;main.c: 334: TRISA = 0x00;
 15868  00406C  6A92               	clrf	3986,c	;volatile
 15869                           
 15870                           ;main.c: 335: PORTA = 0x00;
 15871  00406E  6A80               	clrf	3968,c	;volatile
 15872                           
 15873                           ;main.c: 347: TRISB = 0b00001000;
 15874  004070  0E08               	movlw	8
 15875  004072  6E93               	movwf	3987,c	;volatile
 15876                           
 15877                           ;main.c: 348: PORTB = 0x00;
 15878  004074  6A81               	clrf	3969,c	;volatile
 15879                           
 15880                           ;main.c: 358: TRISC = 0b00000001;
 15881  004076  0E01               	movlw	1
 15882  004078  6E94               	movwf	3988,c	;volatile
 15883                           
 15884                           ;main.c: 359: PORTC = 0x00;
 15885  00407A  6A82               	clrf	3970,c	;volatile
 15886                           
 15887                           ;main.c: 385: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 15888  00407C  0E92               	movlw	146
 15889  00407E  ECA2  F021         	call	_OpenTimer0
 15890                           
 15891                           ;main.c: 386: WriteTimer0( 0xfb1d );
 15892  004082  0EFB               	movlw	251
 15893  004084  6E09               	movwf	?_WriteTimer0+1,c
 15894  004086  0E1D               	movlw	29
 15895  004088  6E08               	movwf	?_WriteTimer0,c
 15896  00408A  EC31  F022         	call	_WriteTimer0	;wreg free
 15897                           
 15898                           ;main.c: 389: LATBbits.LATB4 = 0;
 15899  00408E  988A               	bcf	3978,4,c	;volatile
 15900                           
 15901                           ;main.c: 390: LATBbits.LATB1 = 0;
 15902  004090  928A               	bcf	3978,1,c	;volatile
 15903                           
 15904                           ;main.c: 391: LATBbits.LATB0 = 0;
 15905  004092  908A               	bcf	3978,0,c	;volatile
 15906                           
 15907                           ;main.c: 392: LATCbits.LATC7 = 0;
 15908  004094  9E8B               	bcf	3979,7,c	;volatile
 15909                           
 15910                           ;main.c: 393: LATCbits.LATC6 = 0;
 15911  004096  9C8B               	bcf	3979,6,c	;volatile
 15912                           
 15913                           ;main.c: 394: LATCbits.LATC5 = 0;
 15914  004098  9A8B               	bcf	3979,5,c	;volatile
 15915                           
 15916                           ;main.c: 395: LATCbits.LATC4 = 0;
 15917  00409A  988B               	bcf	3979,4,c	;volatile
 15918                           
 15919                           ;main.c: 398: ECANInitialize();
 15920  00409C  ECD4  F01E         	call	_ECANInitialize	;wreg free
 15921                           
 15922                           ;main.c: 419: INTCONbits.PEIE = 1;
 15923  0040A0  8CF2               	bsf	intcon,6,c	;volatile
 15924                           
 15925                           ;main.c: 422: INTCONbits.GIE = 1;
 15926  0040A2  8EF2               	bsf	intcon,7,c	;volatile
 15927  0040A4  0012               	return	
 15928  0040A6                     __end_of_init:
 15929                           	opt stack 0
 15930                           tblptru	equ	0xFF8
 15931                           tblptrh	equ	0xFF7
 15932                           tblptrl	equ	0xFF6
 15933                           tablat	equ	0xFF5
 15934                           prodh	equ	0xFF4
 15935                           prodl	equ	0xFF3
 15936                           intcon	equ	0xFF2
 15937                           postinc0	equ	0xFEE
 15938                           wreg	equ	0xFE8
 15939                           indf1	equ	0xFE7
 15940                           fsr1h	equ	0xFE2
 15941                           fsr1l	equ	0xFE1
 15942                           indf2	equ	0xFDF
 15943                           postinc2	equ	0xFDE
 15944                           postdec2	equ	0xFDD
 15945                           plusw2	equ	0xFDB
 15946                           fsr2h	equ	0xFDA
 15947                           fsr2l	equ	0xFD9
 15948                           status	equ	0xFD8
 15949                           
 15950 ;; *************** function _ECANInitialize *****************
 15951 ;; Defined at:
 15952 ;;		line 168 in file "../ECAN.c"
 15953 ;; Parameters:    Size  Location     Type
 15954 ;;		None
 15955 ;; Auto vars:     Size  Location     Type
 15956 ;;		None
 15957 ;; Return value:  Size  Location     Type
 15958 ;;		None               void
 15959 ;; Registers used:
 15960 ;;		wreg, status,2, status,0, cstack
 15961 ;; Tracked objects:
 15962 ;;		On entry : 0/0
 15963 ;;		On exit  : 0/0
 15964 ;;		Unchanged: 0/0
 15965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15966 ;;      Params:         0       0       0       0       0       0       0
 15967 ;;      Locals:         0       0       0       0       0       0       0
 15968 ;;      Temps:          0       0       0       0       0       0       0
 15969 ;;      Totals:         0       0       0       0       0       0       0
 15970 ;;Total ram usage:        0 bytes
 15971 ;; Hardware stack levels used:    1
 15972 ;; Hardware stack levels required when called:    3
 15973 ;; This function calls:
 15974 ;;		_ECANSetOperationMode
 15975 ;; This function is called by:
 15976 ;;		_init
 15977 ;; This function uses a non-reentrant model
 15978 ;;
 15979                           
 15980                           	psect	text70
 15981  003DA8                     __ptext70:
 15982                           	opt stack 0
 15983  003DA8                     _ECANInitialize:
 15984                           	opt stack 26
 15985                           
 15986                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 15987                           
 15988                           ;incstack = 0
 15989                           ;incstack = 0
 15990  003DA8  0E80               	movlw	128
 15991  003DAA  ECE6  F021         	call	_ECANSetOperationMode
 15992                           
 15993                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 15994  003DAE  0E09               	movlw	9
 15995  003DB0  6E70               	movwf	3952,c	;volatile
 15996                           
 15997                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 15998  003DB2  0EFC               	movlw	252
 15999  003DB4  6E71               	movwf	3953,c	;volatile
 16000                           
 16001                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 16002                           ;ECAN.c: 181: (0 << 6) |
 16003                           ;ECAN.c: 182: (2-1);
 16004  003DB6  0E01               	movlw	1
 16005  003DB8  6E72               	movwf	3954,c	;volatile
 16006                           
 16007                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 16008  003DBA  0E20               	movlw	32
 16009  003DBC  6E73               	movwf	3955,c	;volatile
 16010                           
 16011                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 16012  003DBE  8E77               	bsf	3959,7,c	;volatile
 16013                           
 16014                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 16015  003DC0  9C77               	bcf	3959,6,c	;volatile
 16016                           
 16017                           ;ECAN.c: 205: RXB0CON = 0;
 16018  003DC2  6A60               	clrf	3936,c	;volatile
 16019                           
 16020                           ;ECAN.c: 211: RXB1CON = 0;
 16021  003DC4  010F               	movlb	15	; () banked
 16022  003DC6  6B50               	clrf	80,b	;volatile
 16023                           
 16024                           ; BSR set to: 15
 16025                           ;ECAN.c: 221: B0CON = 0;
 16026  003DC8  010E               	movlb	14	; () banked
 16027  003DCA  6B20               	clrf	32,b	;volatile
 16028                           
 16029                           ; BSR set to: 14
 16030                           ;ECAN.c: 231: B1CON = 0;
 16031  003DCC  6B30               	clrf	48,b	;volatile
 16032                           
 16033                           ; BSR set to: 14
 16034                           ;ECAN.c: 241: B2CON = 0;
 16035  003DCE  6B40               	clrf	64,b	;volatile
 16036                           
 16037                           ; BSR set to: 14
 16038                           ;ECAN.c: 254: B3CON = 0 << 2;
 16039  003DD0  6B50               	clrf	80,b	;volatile
 16040                           
 16041                           ; BSR set to: 14
 16042                           ;ECAN.c: 264: B4CON = 0 << 2;
 16043  003DD2  6B60               	clrf	96,b	;volatile
 16044                           
 16045                           ; BSR set to: 14
 16046                           ;ECAN.c: 274: B5CON = 0 << 2;
 16047  003DD4  6B70               	clrf	112,b	;volatile
 16048                           
 16049                           ; BSR set to: 14
 16050                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 16051  003DD6  0EE0               	movlw	224
 16052  003DD8  010D               	movlb	13	; () banked
 16053  003DDA  6FF8               	movwf	248,b	;volatile
 16054                           
 16055                           ; BSR set to: 13
 16056                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 16057  003DDC  010F               	movlb	15	; () banked
 16058  003DDE  6B00               	clrf	0,b	;volatile
 16059                           
 16060                           ; BSR set to: 15
 16061  003DE0  0E08               	movlw	8
 16062  003DE2  6F01               	movwf	1,b	;volatile
 16063                           
 16064                           ; BSR set to: 15
 16065  003DE4  6B02               	clrf	2,b	;volatile
 16066                           
 16067                           ; BSR set to: 15
 16068  003DE6  6B03               	clrf	3,b	;volatile
 16069                           
 16070                           ; BSR set to: 15
 16071                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 16072  003DE8  6B04               	clrf	4,b	;volatile
 16073                           
 16074                           ; BSR set to: 15
 16075  003DEA  0EE8               	movlw	232
 16076  003DEC  6F05               	movwf	5,b	;volatile
 16077                           
 16078                           ; BSR set to: 15
 16079  003DEE  0E1A               	movlw	26
 16080  003DF0  6F06               	movwf	6,b	;volatile
 16081                           
 16082                           ; BSR set to: 15
 16083  003DF2  6B07               	clrf	7,b	;volatile
 16084                           
 16085                           ; BSR set to: 15
 16086                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 16087  003DF4  0E03               	movlw	3
 16088  003DF6  010D               	movlb	13	; () banked
 16089  003DF8  6FD4               	movwf	212,b	;volatile
 16090                           
 16091                           ; BSR set to: 13
 16092                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 16093  003DFA  6BD5               	clrf	213,b	;volatile
 16094                           
 16095                           ; BSR set to: 13
 16096                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 16097  003DFC  6BE0               	clrf	224,b	;volatile
 16098                           
 16099                           ; BSR set to: 13
 16100                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 16101  003DFE  0E11               	movlw	17
 16102  003E00  6FE1               	movwf	225,b	;volatile
 16103                           
 16104                           ; BSR set to: 13
 16105                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 16106  003E02  6FE2               	movwf	226,b	;volatile
 16107                           
 16108                           ; BSR set to: 13
 16109                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 16110  003E04  6BE3               	clrf	227,b	;volatile
 16111                           
 16112                           ; BSR set to: 13
 16113                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 16114  003E06  6BE4               	clrf	228,b	;volatile
 16115                           
 16116                           ; BSR set to: 13
 16117                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 16118  003E08  6BE5               	clrf	229,b	;volatile
 16119                           
 16120                           ; BSR set to: 13
 16121                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 16122  003E0A  6BE6               	clrf	230,b	;volatile
 16123                           
 16124                           ; BSR set to: 13
 16125                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 16126  003E0C  6BE7               	clrf	231,b	;volatile
 16127                           
 16128                           ; BSR set to: 13
 16129                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 16130  003E0E  0E54               	movlw	84
 16131  003E10  6FF0               	movwf	240,b	;volatile
 16132                           
 16133                           ; BSR set to: 13
 16134                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 16135  003E12  0E05               	movlw	5
 16136  003E14  6FF1               	movwf	241,b	;volatile
 16137                           
 16138                           ; BSR set to: 13
 16139                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 16140  003E16  6BF2               	clrf	242,b	;volatile
 16141                           
 16142                           ; BSR set to: 13
 16143                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 16144  003E18  6BF2               	clrf	242,b	;volatile
 16145                           
 16146                           ; BSR set to: 13
 16147                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 16148  003E1A  0E0F               	movlw	15
 16149  003E1C  010F               	movlb	15	; () banked
 16150  003E1E  6F18               	movwf	24,b	;volatile
 16151                           
 16152                           ; BSR set to: 15
 16153  003E20  0EE0               	movlw	224
 16154  003E22  6F19               	movwf	25,b	;volatile
 16155                           
 16156                           ; BSR set to: 15
 16157  003E24  6B1A               	clrf	26,b	;volatile
 16158                           
 16159                           ; BSR set to: 15
 16160  003E26  6B1B               	clrf	27,b	;volatile
 16161                           
 16162                           ; BSR set to: 15
 16163                           ;ECAN.c: 482: RXM0EXIDM = 1;
 16164  003E28  8719               	bsf	25,3,b	;volatile
 16165                           
 16166                           ; BSR set to: 15
 16167                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 16168  003E2A  0E0F               	movlw	15
 16169  003E2C  6F1C               	movwf	28,b	;volatile
 16170                           
 16171                           ; BSR set to: 15
 16172  003E2E  0EE0               	movlw	224
 16173  003E30  6F1D               	movwf	29,b	;volatile
 16174                           
 16175                           ; BSR set to: 15
 16176  003E32  691E               	setf	30,b	;volatile
 16177                           
 16178                           ; BSR set to: 15
 16179  003E34  6B1F               	clrf	31,b	;volatile
 16180                           
 16181                           ; BSR set to: 15
 16182                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 16183  003E36  871D               	bsf	29,3,b	;volatile
 16184                           
 16185                           ; BSR set to: 15
 16186                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 16187  003E38  0E00               	movlw	0
 16188  003E3A  EFE6  F021         	goto	_ECANSetOperationMode
 16189  003E3E                     __end_of_ECANInitialize:
 16190                           	opt stack 0
 16191                           tblptru	equ	0xFF8
 16192                           tblptrh	equ	0xFF7
 16193                           tblptrl	equ	0xFF6
 16194                           tablat	equ	0xFF5
 16195                           prodh	equ	0xFF4
 16196                           prodl	equ	0xFF3
 16197                           intcon	equ	0xFF2
 16198                           postinc0	equ	0xFEE
 16199                           wreg	equ	0xFE8
 16200                           indf1	equ	0xFE7
 16201                           fsr1h	equ	0xFE2
 16202                           fsr1l	equ	0xFE1
 16203                           indf2	equ	0xFDF
 16204                           postinc2	equ	0xFDE
 16205                           postdec2	equ	0xFDD
 16206                           plusw2	equ	0xFDB
 16207                           fsr2h	equ	0xFDA
 16208                           fsr2l	equ	0xFD9
 16209                           status	equ	0xFD8
 16210                           
 16211 ;; *************** function _ECANSetOperationMode *****************
 16212 ;; Defined at:
 16213 ;;		line 1012 in file "../ECAN.c"
 16214 ;; Parameters:    Size  Location     Type
 16215 ;;  mode            1    wreg     enum E16337
 16216 ;; Auto vars:     Size  Location     Type
 16217 ;;  mode            1    7[COMRAM] enum E16337
 16218 ;; Return value:  Size  Location     Type
 16219 ;;		None               void
 16220 ;; Registers used:
 16221 ;;		wreg, status,2, status,0
 16222 ;; Tracked objects:
 16223 ;;		On entry : 0/0
 16224 ;;		On exit  : 0/0
 16225 ;;		Unchanged: 0/0
 16226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16227 ;;      Params:         0       0       0       0       0       0       0
 16228 ;;      Locals:         1       0       0       0       0       0       0
 16229 ;;      Temps:          0       0       0       0       0       0       0
 16230 ;;      Totals:         1       0       0       0       0       0       0
 16231 ;;Total ram usage:        1 bytes
 16232 ;; Hardware stack levels used:    1
 16233 ;; Hardware stack levels required when called:    2
 16234 ;; This function calls:
 16235 ;;		Nothing
 16236 ;; This function is called by:
 16237 ;;		_calculateSetFilterMask
 16238 ;;		_ECANInitialize
 16239 ;; This function uses a non-reentrant model
 16240 ;;
 16241                           
 16242                           	psect	text71
 16243  0043CC                     __ptext71:
 16244                           	opt stack 0
 16245  0043CC                     _ECANSetOperationMode:
 16246                           	opt stack 24
 16247                           
 16248                           ;incstack = 0
 16249                           ;incstack = 0
 16250                           ;ECANSetOperationMode@mode stored from wreg
 16251  0043CC  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 16252                           
 16253                           ;ECAN.c: 1013: CANCON &= 0x1F;
 16254  0043D0  0E1F               	movlw	31
 16255  0043D2  166F               	andwf	3951,f,c	;volatile
 16256                           
 16257                           ;ECAN.c: 1014: CANCON |= mode;
 16258  0043D4  5008               	movf	ECANSetOperationMode@mode,w,c
 16259  0043D6  126F               	iorwf	3951,f,c	;volatile
 16260  0043D8                     l7191:
 16261  0043D8  506F               	movf	3951,w,c	;volatile
 16262  0043DA  0BE0               	andlw	224
 16263  0043DC  1808               	xorwf	ECANSetOperationMode@mode,w,c
 16264  0043DE  B4D8               	btfsc	status,2,c
 16265  0043E0  0012               	return	
 16266  0043E2  D7FA               	goto	l7191
 16267  0043E4                     __end_of_ECANSetOperationMode:
 16268                           	opt stack 0
 16269                           tblptru	equ	0xFF8
 16270                           tblptrh	equ	0xFF7
 16271                           tblptrl	equ	0xFF6
 16272                           tablat	equ	0xFF5
 16273                           prodh	equ	0xFF4
 16274                           prodl	equ	0xFF3
 16275                           intcon	equ	0xFF2
 16276                           postinc0	equ	0xFEE
 16277                           wreg	equ	0xFE8
 16278                           indf1	equ	0xFE7
 16279                           fsr1h	equ	0xFE2
 16280                           fsr1l	equ	0xFE1
 16281                           indf2	equ	0xFDF
 16282                           postinc2	equ	0xFDE
 16283                           postdec2	equ	0xFDD
 16284                           plusw2	equ	0xFDB
 16285                           fsr2h	equ	0xFDA
 16286                           fsr2l	equ	0xFD9
 16287                           status	equ	0xFD8
 16288                           
 16289 ;; *************** function _OpenTimer0 *****************
 16290 ;; Defined at:
 16291 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 16292 ;; Parameters:    Size  Location     Type
 16293 ;;  config          1    wreg     unsigned char 
 16294 ;; Auto vars:     Size  Location     Type
 16295 ;;  config          1    7[COMRAM] unsigned char 
 16296 ;; Return value:  Size  Location     Type
 16297 ;;		None               void
 16298 ;; Registers used:
 16299 ;;		wreg, status,2, status,0
 16300 ;; Tracked objects:
 16301 ;;		On entry : 0/0
 16302 ;;		On exit  : 0/0
 16303 ;;		Unchanged: 0/0
 16304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16305 ;;      Params:         0       0       0       0       0       0       0
 16306 ;;      Locals:         1       0       0       0       0       0       0
 16307 ;;      Temps:          0       0       0       0       0       0       0
 16308 ;;      Totals:         1       0       0       0       0       0       0
 16309 ;;Total ram usage:        1 bytes
 16310 ;; Hardware stack levels used:    1
 16311 ;; Hardware stack levels required when called:    2
 16312 ;; This function calls:
 16313 ;;		Nothing
 16314 ;; This function is called by:
 16315 ;;		_init
 16316 ;; This function uses a non-reentrant model
 16317 ;;
 16318                           
 16319                           	psect	text72
 16320  004344                     __ptext72:
 16321                           	opt stack 0
 16322  004344                     _OpenTimer0:
 16323                           	opt stack 27
 16324                           
 16325                           ;incstack = 0
 16326                           ;incstack = 0
 16327                           ;OpenTimer0@config stored from wreg
 16328  004344  CFE8 F008          	movff	wreg,OpenTimer0@config
 16329  004348  5008               	movf	OpenTimer0@config,w,c
 16330  00434A  0B7F               	andlw	127
 16331  00434C  6ED5               	movwf	4053,c	;volatile
 16332  00434E  6AD7               	clrf	4055,c	;volatile
 16333  004350  6AD6               	clrf	4054,c	;volatile
 16334  004352  94F2               	bcf	intcon,2,c	;volatile
 16335  004354  AE08               	btfss	OpenTimer0@config,7,c
 16336  004356  D002               	goto	l1346
 16337  004358  8AF2               	bsf	intcon,5,c	;volatile
 16338  00435A  D001               	goto	l1347
 16339  00435C                     l1346:
 16340  00435C  9AF2               	bcf	intcon,5,c	;volatile
 16341  00435E                     l1347:
 16342  00435E  8ED5               	bsf	4053,7,c	;volatile
 16343  004360  0012               	return	
 16344  004362                     __end_of_OpenTimer0:
 16345                           	opt stack 0
 16346                           tblptru	equ	0xFF8
 16347                           tblptrh	equ	0xFF7
 16348                           tblptrl	equ	0xFF6
 16349                           tablat	equ	0xFF5
 16350                           prodh	equ	0xFF4
 16351                           prodl	equ	0xFF3
 16352                           intcon	equ	0xFF2
 16353                           postinc0	equ	0xFEE
 16354                           wreg	equ	0xFE8
 16355                           indf1	equ	0xFE7
 16356                           fsr1h	equ	0xFE2
 16357                           fsr1l	equ	0xFE1
 16358                           indf2	equ	0xFDF
 16359                           postinc2	equ	0xFDE
 16360                           postdec2	equ	0xFDD
 16361                           plusw2	equ	0xFDB
 16362                           fsr2h	equ	0xFDA
 16363                           fsr2l	equ	0xFD9
 16364                           status	equ	0xFD8
 16365                           
 16366 ;; *************** function _init_app_ram *****************
 16367 ;; Defined at:
 16368 ;;		line 432 in file "../main.c"
 16369 ;; Parameters:    Size  Location     Type
 16370 ;;		None
 16371 ;; Auto vars:     Size  Location     Type
 16372 ;;  i               1   11[COMRAM] unsigned char 
 16373 ;; Return value:  Size  Location     Type
 16374 ;;		None               void
 16375 ;; Registers used:
 16376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16377 ;; Tracked objects:
 16378 ;;		On entry : 0/0
 16379 ;;		On exit  : 0/0
 16380 ;;		Unchanged: 0/0
 16381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16382 ;;      Params:         0       0       0       0       0       0       0
 16383 ;;      Locals:         1       0       0       0       0       0       0
 16384 ;;      Temps:          2       0       0       0       0       0       0
 16385 ;;      Totals:         3       0       0       0       0       0       0
 16386 ;;Total ram usage:        3 bytes
 16387 ;; Hardware stack levels used:    1
 16388 ;; Hardware stack levels required when called:    3
 16389 ;; This function calls:
 16390 ;;		_Read_b_eep
 16391 ;; This function is called by:
 16392 ;;		_main
 16393 ;;		_init
 16394 ;;		_vscp_restoreDefaults
 16395 ;; This function uses a non-reentrant model
 16396 ;;
 16397                           
 16398                           	psect	text73
 16399  003706                     __ptext73:
 16400                           	opt stack 0
 16401  003706                     _init_app_ram:
 16402                           	opt stack 24
 16403                           
 16404                           ;main.c: 433: uint8_t i;
 16405                           ;main.c: 435: measurement_clock = 0;
 16406                           
 16407                           ;incstack = 0
 16408                           ;incstack = 0
 16409  003706  0100               	movlb	0	; () banked
 16410  003708  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
 16411  00370A  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 16412  00370C  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 16413  00370E  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 16414                           
 16415                           ;main.c: 437: seconds = 0;
 16416  003710  6B8B               	clrf	_seconds& (0+255),b
 16417                           
 16418                           ;main.c: 438: minutes = 0;
 16419  003712  6B89               	clrf	_minutes& (0+255),b
 16420                           
 16421                           ;main.c: 439: hours = 0;
 16422  003714  6B88               	clrf	_hours& (0+255),b
 16423                           
 16424                           ;main.c: 441: relay_pulse_flags = 0;
 16425  003716  6B8A               	clrf	_relay_pulse_flags& (0+255),b
 16426                           
 16427                           ;main.c: 444: for ( i = 0; i < 8; i++ ) {
 16428  003718  6A0C               	clrf	init_app_ram@i,c
 16429  00371A                     l7727:
 16430                           
 16431                           ; BSR set to: 0
 16432                           ;main.c: 445: relay_pulse_timer[ i ] = 0;
 16433  00371A  500C               	movf	init_app_ram@i,w,c
 16434  00371C  0D02               	mullw	2
 16435  00371E  50F3               	movf	prodl,w,c
 16436  003720  0F70               	addlw	low _relay_pulse_timer
 16437  003722  6ED9               	movwf	fsr2l,c
 16438  003724  6ADA               	clrf	fsr2h,c
 16439  003726  6ADE               	clrf	postinc2,c
 16440  003728  6ADD               	clrf	postdec2,c
 16441                           
 16442                           ;main.c: 446: relay_protection_timer[ i ] = 0;
 16443  00372A  500C               	movf	init_app_ram@i,w,c
 16444  00372C  0D02               	mullw	2
 16445  00372E  50F3               	movf	prodl,w,c
 16446  003730  0F60               	addlw	low _relay_protection_timer
 16447  003732  6ED9               	movwf	fsr2l,c
 16448  003734  6ADA               	clrf	fsr2h,c
 16449  003736  6ADE               	clrf	postinc2,c
 16450  003738  6ADD               	clrf	postdec2,c
 16451                           
 16452                           ; BSR set to: 0
 16453  00373A  2A0C               	incf	init_app_ram@i,f,c
 16454                           
 16455                           ; BSR set to: 0
 16456  00373C  0E07               	movlw	7
 16457  00373E  640C               	cpfsgt	init_app_ram@i,c
 16458  003740  D7EC               	goto	l7727
 16459                           
 16460                           ; BSR set to: 0
 16461                           ;main.c: 447: }
 16462                           ;main.c: 449: for ( i=0; i<7; i++ ) {
 16463  003742  6A0C               	clrf	init_app_ram@i,c
 16464  003744                     l7737:
 16465                           
 16466                           ;main.c: 452: if ( Read_b_eep(0x43 + 10 + i) &
 16467                           ;main.c: 453: 0x01 ) {
 16468  003744  0E4D               	movlw	77
 16469  003746  240C               	addwf	init_app_ram@i,w,c
 16470  003748  6E08               	movwf	?_Read_b_eep,c
 16471  00374A  6A09               	clrf	?_Read_b_eep+1,c
 16472  00374C  0E00               	movlw	0
 16473  00374E  2209               	addwfc	?_Read_b_eep+1,f,c
 16474  003750  EC3A  F022         	call	_Read_b_eep	;wreg free
 16475  003754  6E0A               	movwf	??_init_app_ram& (0+255),c
 16476  003756  A00A               	btfss	??_init_app_ram,0,c
 16477  003758  D02D               	goto	l7743
 16478                           
 16479                           ;main.c: 455: relay_pulse_flags |= (1<<i);
 16480  00375A  C00C  F00A         	movff	init_app_ram@i,??_init_app_ram
 16481  00375E  0E01               	movlw	1
 16482  003760  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16483  003762  2A0A               	incf	??_init_app_ram,f,c
 16484  003764  D002               	goto	u8234
 16485  003766                     u8235:
 16486  003766  90D8               	bcf	status,0,c
 16487  003768  360B               	rlcf	??_init_app_ram+1,f,c
 16488  00376A                     u8234:
 16489  00376A  2E0A               	decfsz	??_init_app_ram,f,c
 16490  00376C  D7FC               	goto	u8235
 16491  00376E  500B               	movf	??_init_app_ram+1,w,c
 16492  003770  0100               	movlb	0	; () banked
 16493  003772  138A               	iorwf	_relay_pulse_flags& (0+255),f,b
 16494                           
 16495                           ; BSR set to: 0
 16496                           ;main.c: 456: relay_pulse_timer[ i ] =
 16497                           ;main.c: 457: Read_b_eep(0x43 + 18 + i) * 256 +
 16498                           ;main.c: 458: Read_b_eep(0x43 + 19 + i);
 16499  003774  0E55               	movlw	85
 16500  003776  240C               	addwf	init_app_ram@i,w,c
 16501  003778  6E08               	movwf	?_Read_b_eep,c
 16502  00377A  6A09               	clrf	?_Read_b_eep+1,c
 16503  00377C  0E00               	movlw	0
 16504  00377E  2209               	addwfc	?_Read_b_eep+1,f,c
 16505  003780  EC3A  F022         	call	_Read_b_eep	;wreg free
 16506  003784  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16507  003786  6A0A               	clrf	??_init_app_ram& (0+255),c
 16508  003788  0E56               	movlw	86
 16509  00378A  240C               	addwf	init_app_ram@i,w,c
 16510  00378C  6E08               	movwf	?_Read_b_eep,c
 16511  00378E  6A09               	clrf	?_Read_b_eep+1,c
 16512  003790  0E00               	movlw	0
 16513  003792  2209               	addwfc	?_Read_b_eep+1,f,c
 16514  003794  EC3A  F022         	call	_Read_b_eep	;wreg free
 16515  003798  260A               	addwf	??_init_app_ram,f,c
 16516  00379A  0E00               	movlw	0
 16517  00379C  220B               	addwfc	??_init_app_ram+1,f,c
 16518  00379E  500C               	movf	init_app_ram@i,w,c
 16519  0037A0  0D02               	mullw	2
 16520  0037A2  50F3               	movf	prodl,w,c
 16521  0037A4  0100               	movlb	0	; () banked
 16522  0037A6  0F70               	addlw	low _relay_pulse_timer
 16523  0037A8  6ED9               	movwf	fsr2l,c
 16524  0037AA  6ADA               	clrf	fsr2h,c
 16525  0037AC  C00A  FFDE         	movff	??_init_app_ram,postinc2
 16526  0037B0  C00B  FFDD         	movff	??_init_app_ram+1,postdec2
 16527  0037B4                     l7743:
 16528                           
 16529                           ;main.c: 459: }
 16530                           ;main.c: 462: if ( Read_b_eep(0x43 + 15 + i) & 0x04) {
 16531  0037B4  0E52               	movlw	82
 16532  0037B6  240C               	addwf	init_app_ram@i,w,c
 16533  0037B8  6E08               	movwf	?_Read_b_eep,c
 16534  0037BA  6A09               	clrf	?_Read_b_eep+1,c
 16535  0037BC  0E00               	movlw	0
 16536  0037BE  2209               	addwfc	?_Read_b_eep+1,f,c
 16537  0037C0  EC3A  F022         	call	_Read_b_eep	;wreg free
 16538  0037C4  6E0A               	movwf	??_init_app_ram& (0+255),c
 16539  0037C6  A40A               	btfss	??_init_app_ram,2,c
 16540  0037C8  D020               	goto	l7747
 16541                           
 16542                           ;main.c: 463: relay_protection_timer[ i ] =
 16543                           ;main.c: 464: Read_b_eep(0x43 + 44 + i) * 256 +
 16544                           ;main.c: 465: Read_b_eep(0x43 + 45 + i);
 16545  0037CA  0E6F               	movlw	111
 16546  0037CC  240C               	addwf	init_app_ram@i,w,c
 16547  0037CE  6E08               	movwf	?_Read_b_eep,c
 16548  0037D0  6A09               	clrf	?_Read_b_eep+1,c
 16549  0037D2  0E00               	movlw	0
 16550  0037D4  2209               	addwfc	?_Read_b_eep+1,f,c
 16551  0037D6  EC3A  F022         	call	_Read_b_eep	;wreg free
 16552  0037DA  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16553  0037DC  6A0A               	clrf	??_init_app_ram& (0+255),c
 16554  0037DE  0E70               	movlw	112
 16555  0037E0  240C               	addwf	init_app_ram@i,w,c
 16556  0037E2  6E08               	movwf	?_Read_b_eep,c
 16557  0037E4  6A09               	clrf	?_Read_b_eep+1,c
 16558  0037E6  0E00               	movlw	0
 16559  0037E8  2209               	addwfc	?_Read_b_eep+1,f,c
 16560  0037EA  EC3A  F022         	call	_Read_b_eep	;wreg free
 16561  0037EE  260A               	addwf	??_init_app_ram,f,c
 16562  0037F0  0E00               	movlw	0
 16563  0037F2  220B               	addwfc	??_init_app_ram+1,f,c
 16564  0037F4  500C               	movf	init_app_ram@i,w,c
 16565  0037F6  0D02               	mullw	2
 16566  0037F8  50F3               	movf	prodl,w,c
 16567  0037FA  0100               	movlb	0	; () banked
 16568  0037FC  0F60               	addlw	low _relay_protection_timer
 16569  0037FE  6ED9               	movwf	fsr2l,c
 16570  003800  6ADA               	clrf	fsr2h,c
 16571  003802  C00A  FFDE         	movff	??_init_app_ram,postinc2
 16572  003806  C00B  FFDD         	movff	??_init_app_ram+1,postdec2
 16573  00380A                     l7747:
 16574  00380A  2A0C               	incf	init_app_ram@i,f,c
 16575  00380C  0E06               	movlw	6
 16576  00380E  640C               	cpfsgt	init_app_ram@i,c
 16577  003810  D799               	goto	l7737
 16578  003812  0C06               	retlw	6
 16579  003814                     __end_of_init_app_ram:
 16580                           	opt stack 0
 16581                           tblptru	equ	0xFF8
 16582                           tblptrh	equ	0xFF7
 16583                           tblptrl	equ	0xFF6
 16584                           tablat	equ	0xFF5
 16585                           prodh	equ	0xFF4
 16586                           prodl	equ	0xFF3
 16587                           intcon	equ	0xFF2
 16588                           postinc0	equ	0xFEE
 16589                           wreg	equ	0xFE8
 16590                           indf1	equ	0xFE7
 16591                           fsr1h	equ	0xFE2
 16592                           fsr1l	equ	0xFE1
 16593                           indf2	equ	0xFDF
 16594                           postinc2	equ	0xFDE
 16595                           postdec2	equ	0xFDD
 16596                           plusw2	equ	0xFDB
 16597                           fsr2h	equ	0xFDA
 16598                           fsr2l	equ	0xFD9
 16599                           status	equ	0xFD8
 16600                           
 16601 ;; *************** function _WriteTimer0 *****************
 16602 ;; Defined at:
 16603 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16604 ;; Parameters:    Size  Location     Type
 16605 ;;  timer0          2    7[COMRAM] unsigned int 
 16606 ;; Auto vars:     Size  Location     Type
 16607 ;;  timer           2    9[COMRAM] struct Timers
 16608 ;; Return value:  Size  Location     Type
 16609 ;;		None               void
 16610 ;; Registers used:
 16611 ;;		None
 16612 ;; Tracked objects:
 16613 ;;		On entry : 0/0
 16614 ;;		On exit  : 0/0
 16615 ;;		Unchanged: 0/0
 16616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16617 ;;      Params:         2       0       0       0       0       0       0
 16618 ;;      Locals:         2       0       0       0       0       0       0
 16619 ;;      Temps:          0       0       0       0       0       0       0
 16620 ;;      Totals:         4       0       0       0       0       0       0
 16621 ;;Total ram usage:        4 bytes
 16622 ;; Hardware stack levels used:    1
 16623 ;; Hardware stack levels required when called:    2
 16624 ;; This function calls:
 16625 ;;		Nothing
 16626 ;; This function is called by:
 16627 ;;		_init
 16628 ;; This function uses a non-reentrant model
 16629 ;;
 16630                           
 16631                           	psect	text74
 16632  004462                     __ptext74:
 16633                           	opt stack 0
 16634  004462                     _WriteTimer0:
 16635                           	opt stack 27
 16636                           
 16637                           ;incstack = 0
 16638                           ;incstack = 0
 16639  004462  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 16640  004466  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 16641  00446A  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 16642  00446E  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 16643  004472  0012               	return	
 16644  004474                     __end_of_WriteTimer0:
 16645                           	opt stack 0
 16646                           tblptru	equ	0xFF8
 16647                           tblptrh	equ	0xFF7
 16648                           tblptrl	equ	0xFF6
 16649                           tablat	equ	0xFF5
 16650                           prodh	equ	0xFF4
 16651                           prodl	equ	0xFF3
 16652                           intcon	equ	0xFF2
 16653                           postinc0	equ	0xFEE
 16654                           wreg	equ	0xFE8
 16655                           indf1	equ	0xFE7
 16656                           fsr1h	equ	0xFE2
 16657                           fsr1l	equ	0xFE1
 16658                           indf2	equ	0xFDF
 16659                           postinc2	equ	0xFDE
 16660                           postdec2	equ	0xFDD
 16661                           plusw2	equ	0xFDB
 16662                           fsr2h	equ	0xFDA
 16663                           fsr2l	equ	0xFD9
 16664                           status	equ	0xFD8
 16665                           
 16666 ;; *************** function _vscp_readAppReg *****************
 16667 ;; Defined at:
 16668 ;;		line 896 in file "../main.c"
 16669 ;; Parameters:    Size  Location     Type
 16670 ;;  reg             1    wreg     unsigned char 
 16671 ;; Auto vars:     Size  Location     Type
 16672 ;;  reg             1   10[COMRAM] unsigned char 
 16673 ;;  rv              1    9[COMRAM] unsigned char 
 16674 ;; Return value:  Size  Location     Type
 16675 ;;                  1    wreg      unsigned char 
 16676 ;; Registers used:
 16677 ;;		wreg, status,2, status,0, cstack
 16678 ;; Tracked objects:
 16679 ;;		On entry : F/0
 16680 ;;		On exit  : 0/0
 16681 ;;		Unchanged: 0/0
 16682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16683 ;;      Params:         0       0       0       0       0       0       0
 16684 ;;      Locals:         2       0       0       0       0       0       0
 16685 ;;      Temps:          0       0       0       0       0       0       0
 16686 ;;      Totals:         2       0       0       0       0       0       0
 16687 ;;Total ram usage:        2 bytes
 16688 ;; Hardware stack levels used:    1
 16689 ;; Hardware stack levels required when called:    3
 16690 ;; This function calls:
 16691 ;;		_Read_b_eep
 16692 ;; This function is called by:
 16693 ;;		_vscp_readRegister
 16694 ;;		_vscp_handleProtocolEvent
 16695 ;; This function uses a non-reentrant model
 16696 ;;
 16697                           
 16698                           	psect	text75
 16699  003C54                     __ptext75:
 16700                           	opt stack 0
 16701  003C54                     _vscp_readAppReg:
 16702                           	opt stack 25
 16703                           
 16704                           ;incstack = 0
 16705                           ;incstack = 0
 16706                           ;vscp_readAppReg@reg stored from wreg
 16707  003C54  CFE8 F00B          	movff	wreg,vscp_readAppReg@reg
 16708                           
 16709                           ; BSR set to: 0
 16710                           ;main.c: 897: uint8_t rv;
 16711                           ;main.c: 899: rv = 0x00;
 16712  003C58  6A0A               	clrf	vscp_readAppReg@rv,c
 16713                           
 16714                           ; BSR set to: 0
 16715                           ;main.c: 902: if ( reg == 0x00 ) {
 16716  003C5A  660B               	tstfsz	vscp_readAppReg@reg,c
 16717  003C5C  D006               	goto	l8527
 16718                           
 16719                           ; BSR set to: 0
 16720                           ;main.c: 903: rv = Read_b_eep(0x43 + 0);
 16721  003C5E  6A09               	clrf	?_Read_b_eep+1,c
 16722  003C60  0E43               	movlw	67
 16723  003C62  6E08               	movwf	?_Read_b_eep,c
 16724  003C64  EC3A  F022         	call	_Read_b_eep	;wreg free
 16725  003C68  D04D               	goto	L63
 16726  003C6A                     l8527:
 16727                           
 16728                           ; BSR set to: 0
 16729                           ;main.c: 906: else if ( reg == 0x01 ) {
 16730  003C6A  040B               	decf	vscp_readAppReg@reg,w,c
 16731  003C6C  E106               	bnz	l8531
 16732                           
 16733                           ; BSR set to: 0
 16734                           ;main.c: 907: rv = Read_b_eep(0x43 + 1);
 16735  003C6E  6A09               	clrf	?_Read_b_eep+1,c
 16736  003C70  0E44               	movlw	68
 16737  003C72  6E08               	movwf	?_Read_b_eep,c
 16738  003C74  EC3A  F022         	call	_Read_b_eep	;wreg free
 16739  003C78  D045               	goto	L63
 16740  003C7A                     l8531:
 16741                           
 16742                           ; BSR set to: 0
 16743                           ;main.c: 909: else if ( (reg >= 2) && (reg < 10) ) {
 16744  003C7A  0E01               	movlw	1
 16745  003C7C  640B               	cpfsgt	vscp_readAppReg@reg,c
 16746  003C7E  D034               	goto	l8555
 16747                           
 16748                           ; BSR set to: 0
 16749  003C80  0E0A               	movlw	10
 16750  003C82  600B               	cpfslt	vscp_readAppReg@reg,c
 16751  003C84  D031               	goto	l8555
 16752  003C86  D01E               	goto	l8553
 16753  003C88                     l8537:
 16754                           
 16755                           ; BSR set to: 0
 16756                           ;main.c: 915: rv = LATBbits.LATB4;
 16757  003C88  0E00               	movlw	0
 16758  003C8A  B88A               	btfsc	3978,4,c	;volatile
 16759  003C8C  0E01               	movlw	1
 16760  003C8E  D03A               	goto	L63
 16761  003C90                     l8539:
 16762                           
 16763                           ; BSR set to: 0
 16764                           ;main.c: 920: rv = LATBbits.LATB1;
 16765  003C90  0E00               	movlw	0
 16766  003C92  B28A               	btfsc	3978,1,c	;volatile
 16767  003C94  0E01               	movlw	1
 16768  003C96  D036               	goto	L63
 16769  003C98                     l8541:
 16770                           
 16771                           ; BSR set to: 0
 16772                           ;main.c: 925: rv = LATBbits.LATB0;
 16773  003C98  0E00               	movlw	0
 16774  003C9A  B08A               	btfsc	3978,0,c	;volatile
 16775  003C9C  0E01               	movlw	1
 16776  003C9E  D032               	goto	L63
 16777  003CA0                     l8543:
 16778                           
 16779                           ; BSR set to: 0
 16780                           ;main.c: 930: rv = LATCbits.LATC7;
 16781  003CA0  0E00               	movlw	0
 16782  003CA2  BE8B               	btfsc	3979,7,c	;volatile
 16783  003CA4  0E01               	movlw	1
 16784  003CA6  D02E               	goto	L63
 16785  003CA8                     l8545:
 16786                           
 16787                           ; BSR set to: 0
 16788                           ;main.c: 935: rv = LATCbits.LATC6;
 16789  003CA8  0E00               	movlw	0
 16790  003CAA  BC8B               	btfsc	3979,6,c	;volatile
 16791  003CAC  0E01               	movlw	1
 16792  003CAE  D02A               	goto	L63
 16793  003CB0                     l8547:
 16794                           
 16795                           ; BSR set to: 0
 16796                           ;main.c: 940: rv = LATCbits.LATC5;
 16797  003CB0  0E00               	movlw	0
 16798  003CB2  BA8B               	btfsc	3979,5,c	;volatile
 16799  003CB4  0E01               	movlw	1
 16800  003CB6  D026               	goto	L63
 16801  003CB8                     l8549:
 16802                           
 16803                           ; BSR set to: 0
 16804                           ;main.c: 945: rv = LATCbits.LATC4;
 16805  003CB8  0E00               	movlw	0
 16806  003CBA  B88B               	btfsc	3979,4,c	;volatile
 16807  003CBC  0E01               	movlw	1
 16808  003CBE  D022               	goto	L63
 16809  003CC0                     l292:
 16810                           
 16811                           ; BSR set to: 0
 16812                           ;main.c: 950: rv = 0;
 16813  003CC0  6A0A               	clrf	vscp_readAppReg@rv,c
 16814                           
 16815                           ;main.c: 951: break;
 16816  003CC2  D021               	goto	l8561
 16817  003CC4                     l8553:
 16818                           
 16819                           ; BSR set to: 0
 16820  003CC4  500B               	movf	vscp_readAppReg@reg,w,c
 16821                           
 16822                           ; Switch size 1, requested type "speed"
 16823                           ; Number of cases is 8, Range of values is 2 to 9
 16824                           ; switch strategies available:
 16825                           ; Name         Instructions Cycles
 16826                           ; simple_byte           25    13 (average)
 16827                           ;	Chosen strategy is simple_byte
 16828  003CC6  0A02               	xorlw	2	; case 2
 16829  003CC8  E0DF               	bz	l8537
 16830  003CCA  0A01               	xorlw	1	; case 3
 16831  003CCC  E0E1               	bz	l8539
 16832  003CCE  0A07               	xorlw	7	; case 4
 16833  003CD0  E0E3               	bz	l8541
 16834  003CD2  0A01               	xorlw	1	; case 5
 16835  003CD4  E0E5               	bz	l8543
 16836  003CD6  0A03               	xorlw	3	; case 6
 16837  003CD8  E0E7               	bz	l8545
 16838  003CDA  0A01               	xorlw	1	; case 7
 16839  003CDC  E0E9               	bz	l8547
 16840  003CDE  0A0F               	xorlw	15	; case 8
 16841  003CE0  E0EB               	bz	l8549
 16842  003CE2  0A01               	xorlw	1	; case 9
 16843  003CE4  E0ED               	bz	l292
 16844  003CE6  D00F               	goto	l8561
 16845  003CE8                     l8555:
 16846                           
 16847                           ; BSR set to: 0
 16848                           ;main.c: 956: else if ( ( reg >= 10 ) &&
 16849                           ;main.c: 957: (reg < (72 + 7 * 8 ) ) ) {
 16850  003CE8  0E09               	movlw	9
 16851  003CEA  640B               	cpfsgt	vscp_readAppReg@reg,c
 16852  003CEC  D00C               	goto	l8561
 16853                           
 16854                           ; BSR set to: 0
 16855  003CEE  0E80               	movlw	128
 16856  003CF0  600B               	cpfslt	vscp_readAppReg@reg,c
 16857  003CF2  D009               	goto	l8561
 16858                           
 16859                           ; BSR set to: 0
 16860                           ;main.c: 958: rv = Read_b_eep(0x43 + reg);
 16861  003CF4  0E43               	movlw	67
 16862  003CF6  240B               	addwf	vscp_readAppReg@reg,w,c
 16863  003CF8  6E08               	movwf	?_Read_b_eep,c
 16864  003CFA  6A09               	clrf	?_Read_b_eep+1,c
 16865  003CFC  0E00               	movlw	0
 16866  003CFE  2209               	addwfc	?_Read_b_eep+1,f,c
 16867  003D00  EC3A  F022         	call	_Read_b_eep	;wreg free
 16868  003D04                     L63:
 16869  003D04  6E0A               	movwf	vscp_readAppReg@rv,c
 16870  003D06                     l8561:
 16871                           
 16872                           ;main.c: 959: }
 16873                           ;main.c: 961: return rv;
 16874  003D06  500A               	movf	vscp_readAppReg@rv,w,c
 16875  003D08  0012               	return	
 16876  003D0A                     __end_of_vscp_readAppReg:
 16877                           	opt stack 0
 16878                           tblptru	equ	0xFF8
 16879                           tblptrh	equ	0xFF7
 16880                           tblptrl	equ	0xFF6
 16881                           tablat	equ	0xFF5
 16882                           prodh	equ	0xFF4
 16883                           prodl	equ	0xFF3
 16884                           intcon	equ	0xFF2
 16885                           postinc0	equ	0xFEE
 16886                           wreg	equ	0xFE8
 16887                           indf1	equ	0xFE7
 16888                           fsr1h	equ	0xFE2
 16889                           fsr1l	equ	0xFE1
 16890                           indf2	equ	0xFDF
 16891                           postinc2	equ	0xFDE
 16892                           postdec2	equ	0xFDD
 16893                           plusw2	equ	0xFDB
 16894                           fsr2h	equ	0xFDA
 16895                           fsr2l	equ	0xFD9
 16896                           status	equ	0xFD8
 16897                           
 16898 ;; *************** function _Read_b_eep *****************
 16899 ;; Defined at:
 16900 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 16901 ;; Parameters:    Size  Location     Type
 16902 ;;  badd            2    7[COMRAM] unsigned int 
 16903 ;; Auto vars:     Size  Location     Type
 16904 ;;		None
 16905 ;; Return value:  Size  Location     Type
 16906 ;;                  1    wreg      unsigned char 
 16907 ;; Registers used:
 16908 ;;		wreg, status,2
 16909 ;; Tracked objects:
 16910 ;;		On entry : 0/0
 16911 ;;		On exit  : 0/0
 16912 ;;		Unchanged: 0/0
 16913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16914 ;;      Params:         2       0       0       0       0       0       0
 16915 ;;      Locals:         0       0       0       0       0       0       0
 16916 ;;      Temps:          0       0       0       0       0       0       0
 16917 ;;      Totals:         2       0       0       0       0       0       0
 16918 ;;Total ram usage:        2 bytes
 16919 ;; Hardware stack levels used:    1
 16920 ;; Hardware stack levels required when called:    2
 16921 ;; This function calls:
 16922 ;;		Nothing
 16923 ;; This function is called by:
 16924 ;;		_init_app_ram
 16925 ;;		_doApplicationOneSecondWork
 16926 ;;		_vscp_readNicknamePermanent
 16927 ;;		_vscp_getZone
 16928 ;;		_vscp_getSubzone
 16929 ;;		_vscp_readAppReg
 16930 ;;		_vscp_writeAppReg
 16931 ;;		_SendInformationEvent
 16932 ;;		_doDM
 16933 ;;		_doActionOn
 16934 ;;		_doActionOff
 16935 ;;		_doActionPulse
 16936 ;;		_doActionStatus
 16937 ;;		_doActionDisable
 16938 ;;		_doActionToggle
 16939 ;;		_vscp_getGUID
 16940 ;;		_vscp_getUserID
 16941 ;;		_vscp_getManufacturerId
 16942 ;;		_vscp_getSegmentCRC
 16943 ;;		_calculateSetFilterMask
 16944 ;; This function uses a non-reentrant model
 16945 ;;
 16946                           
 16947                           	psect	text76
 16948  004474                     __ptext76:
 16949                           	opt stack 0
 16950  004474                     _Read_b_eep:
 16951                           	opt stack 26
 16952                           
 16953                           ;incstack = 0
 16954                           ;incstack = 0
 16955  004474  C008  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 16956  004478  9CA6               	bcf	4006,6,c	;volatile
 16957  00447A  9EA6               	bcf	4006,7,c	;volatile
 16958  00447C  80A6               	bsf	4006,0,c	;volatile
 16959  00447E  F000               	nop		;# 
 16960  004480  F000               	nop		;# 
 16961  004482  50A8               	movf	4008,w,c	;volatile
 16962  004484  0012               	return	
 16963  004486                     __end_of_Read_b_eep:
 16964                           	opt stack 0
 16965                           tblptru	equ	0xFF8
 16966                           tblptrh	equ	0xFF7
 16967                           tblptrl	equ	0xFF6
 16968                           tablat	equ	0xFF5
 16969                           prodh	equ	0xFF4
 16970                           prodl	equ	0xFF3
 16971                           intcon	equ	0xFF2
 16972                           postinc0	equ	0xFEE
 16973                           wreg	equ	0xFE8
 16974                           indf1	equ	0xFE7
 16975                           fsr1h	equ	0xFE2
 16976                           fsr1l	equ	0xFE1
 16977                           indf2	equ	0xFDF
 16978                           postinc2	equ	0xFDE
 16979                           postdec2	equ	0xFDD
 16980                           plusw2	equ	0xFDB
 16981                           fsr2h	equ	0xFDA
 16982                           fsr2l	equ	0xFD9
 16983                           status	equ	0xFD8
 16984                           
 16985 ;; *************** function _interrupt_at_low_vector *****************
 16986 ;; Defined at:
 16987 ;;		line 133 in file "../main.c"
 16988 ;; Parameters:    Size  Location     Type
 16989 ;;		None
 16990 ;; Auto vars:     Size  Location     Type
 16991 ;;		None
 16992 ;; Return value:  Size  Location     Type
 16993 ;;		None               void
 16994 ;; Registers used:
 16995 ;;		wreg, status,2, status,0, cstack
 16996 ;; Tracked objects:
 16997 ;;		On entry : 0/0
 16998 ;;		On exit  : 0/0
 16999 ;;		Unchanged: 0/0
 17000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17001 ;;      Params:         0       0       0       0       0       0       0
 17002 ;;      Locals:         0       0       0       0       0       0       0
 17003 ;;      Temps:          3       0       0       0       0       0       0
 17004 ;;      Totals:         3       0       0       0       0       0       0
 17005 ;;Total ram usage:        3 bytes
 17006 ;; Hardware stack levels used:    1
 17007 ;; Hardware stack levels required when called:    1
 17008 ;; This function calls:
 17009 ;;		i1_WriteTimer0
 17010 ;; This function is called by:
 17011 ;;		Interrupt level 1
 17012 ;; This function uses a non-reentrant model
 17013 ;;
 17014                           
 17015                           	psect	intcodelo
 17016  000818                     __pintcodelo:
 17017                           	opt stack 0
 17018  000818                     _interrupt_at_low_vector:
 17019                           	opt stack 21
 17020                           
 17021                           ;incstack = 0
 17022  000818  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 17023  00081C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 17024  000820  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 17025  000824                     
 17026                           ;main.c: 135: if ( INTCONbits.TMR0IF ) {
 17027  000824  A4F2               	btfss	intcon,2,c	;volatile
 17028  000826  D001               	goto	i1u802_21
 17029  000828  D001               	goto	i1u802_20
 17030  00082A                     i1u802_21:
 17031  00082A  D03F               	goto	i1l147
 17032  00082C                     i1u802_20:
 17033  00082C                     
 17034                           ;main.c: 138: WriteTimer0(0xfb1d);
 17035  00082C  0EFB               	movlw	251
 17036  00082E  6E02               	movwf	?i1_WriteTimer0+1,c
 17037  000830  0E1D               	movlw	29
 17038  000832  6E01               	movwf	?i1_WriteTimer0,c
 17039  000834  EC43  F022         	call	i1_WriteTimer0	;wreg free
 17040  000838                     
 17041                           ;main.c: 140: vscp_timer++;
 17042  000838  0100               	movlb	0	; () banked
 17043  00083A  4B86               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 17044  00083C  2B87               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 17045  00083E                     
 17046                           ; BSR set to: 0
 17047                           ;main.c: 141: vscp_configtimer++;
 17048  00083E  4B84               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 17049  000840  2B85               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 17050  000842                     
 17051                           ; BSR set to: 0
 17052                           ;main.c: 142: measurement_clock++;
 17053  000842  0E01               	movlw	1
 17054  000844  2780               	addwf	_measurement_clock& (0+255),f,b	;volatile
 17055  000846  0E00               	movlw	0
 17056  000848  2381               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 17057  00084A  0E00               	movlw	0
 17058  00084C  2382               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 17059  00084E  0E00               	movlw	0
 17060  000850  2383               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 17061  000852                     
 17062                           ; BSR set to: 0
 17063                           ;main.c: 143: sendTimer++;
 17064  000852  2B8C               	incf	_sendTimer& (0+255),f,b	;volatile
 17065  000854                     
 17066                           ; BSR set to: 0
 17067                           ;main.c: 146: if ( PORTCbits.RC0 ) {
 17068  000854  A082               	btfss	3970,0,c	;volatile
 17069  000856  D001               	goto	i1u803_21
 17070  000858  D001               	goto	i1u803_20
 17071  00085A                     i1u803_21:
 17072  00085A  D002               	goto	i1l7549
 17073  00085C                     i1u803_20:
 17074  00085C                     
 17075                           ; BSR set to: 0
 17076                           ;main.c: 147: vscp_initbtncnt = 0;
 17077  00085C  6B8F               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 17078                           
 17079                           ;main.c: 148: } else {
 17080  00085E  D001               	goto	i1l139
 17081  000860                     i1l7549:
 17082                           
 17083                           ; BSR set to: 0
 17084                           ;main.c: 150: vscp_initbtncnt++;
 17085  000860  2B8F               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 17086  000862                     i1l139:
 17087                           
 17088                           ; BSR set to: 0
 17089                           ;main.c: 151: }
 17090                           ;main.c: 154: vscp_statuscnt++;
 17091  000862  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 17092  000864                     
 17093                           ; BSR set to: 0
 17094                           ;main.c: 155: if ( ( 0x02 == vscp_initledfunc ) &&
 17095                           ;main.c: 156: ( vscp_statuscnt > 100 ) ) {
 17096  000864  5056               	movf	_vscp_initledfunc,w,c
 17097  000866  0A02               	xorlw	2
 17098  000868  A4D8               	btfss	status,2,c
 17099  00086A  D001               	goto	i1u804_21
 17100  00086C  D001               	goto	i1u804_20
 17101  00086E                     i1u804_21:
 17102  00086E  D00E               	goto	i1l7559
 17103  000870                     i1u804_20:
 17104  000870                     
 17105                           ; BSR set to: 0
 17106  000870  0E64               	movlw	100
 17107  000872  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 17108  000874  D001               	goto	i1u805_21
 17109  000876  D001               	goto	i1u805_20
 17110  000878                     i1u805_21:
 17111  000878  D009               	goto	i1l7559
 17112  00087A                     i1u805_20:
 17113  00087A                     
 17114                           ; BSR set to: 0
 17115                           ;main.c: 158: if ( PORTCbits.RC1 ) {
 17116  00087A  A282               	btfss	3970,1,c	;volatile
 17117  00087C  D001               	goto	i1u806_21
 17118  00087E  D001               	goto	i1u806_20
 17119  000880                     i1u806_21:
 17120  000880  D002               	goto	i1l141
 17121  000882                     i1u806_20:
 17122  000882                     
 17123                           ; BSR set to: 0
 17124                           ;main.c: 159: PORTCbits.RC1 = 0;
 17125  000882  9282               	bcf	3970,1,c	;volatile
 17126                           
 17127                           ;main.c: 160: }
 17128  000884  D001               	goto	i1l142
 17129  000886                     i1l141:
 17130                           
 17131                           ; BSR set to: 0
 17132                           ;main.c: 161: else {
 17133                           ;main.c: 162: PORTCbits.RC1 = 1;
 17134  000886  8282               	bsf	3970,1,c	;volatile
 17135  000888                     i1l142:
 17136                           
 17137                           ; BSR set to: 0
 17138                           ;main.c: 163: }
 17139                           ;main.c: 165: vscp_statuscnt = 0;
 17140  000888  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17141                           
 17142                           ;main.c: 167: }
 17143  00088A  D00E               	goto	i1l143
 17144  00088C                     i1l7559:
 17145                           
 17146                           ; BSR set to: 0
 17147                           ;main.c: 168: else if (0x01 == vscp_initledfunc) {
 17148  00088C  0456               	decf	_vscp_initledfunc,w,c
 17149  00088E  A4D8               	btfss	status,2,c
 17150  000890  D001               	goto	i1u807_21
 17151  000892  D001               	goto	i1u807_20
 17152  000894                     i1u807_21:
 17153  000894  D003               	goto	i1l144
 17154  000896                     i1u807_20:
 17155  000896                     
 17156                           ; BSR set to: 0
 17157                           ;main.c: 169: PORTCbits.RC1 = 1;
 17158  000896  8282               	bsf	3970,1,c	;volatile
 17159                           
 17160                           ;main.c: 170: vscp_statuscnt = 0;
 17161  000898  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17162                           
 17163                           ;main.c: 171: }
 17164  00089A  D006               	goto	i1l143
 17165  00089C                     i1l144:
 17166                           
 17167                           ; BSR set to: 0
 17168                           ;main.c: 172: else if (0x00 == vscp_initledfunc) {
 17169  00089C  6656               	tstfsz	_vscp_initledfunc,c
 17170  00089E  D001               	goto	i1u808_21
 17171  0008A0  D001               	goto	i1u808_20
 17172  0008A2                     i1u808_21:
 17173  0008A2  D002               	goto	i1l143
 17174  0008A4                     i1u808_20:
 17175  0008A4                     
 17176                           ; BSR set to: 0
 17177                           ;main.c: 173: PORTCbits.RC1 = 0;
 17178  0008A4  9282               	bcf	3970,1,c	;volatile
 17179                           
 17180                           ;main.c: 174: vscp_statuscnt = 0;
 17181  0008A6  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17182  0008A8                     i1l143:
 17183                           
 17184                           ; BSR set to: 0
 17185                           ;main.c: 175: }
 17186                           ;main.c: 177: INTCONbits.TMR0IF = 0;
 17187  0008A8  94F2               	bcf	intcon,2,c	;volatile
 17188  0008AA                     i1l147:
 17189  0008AA  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 17190  0008AE  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 17191  0008B2  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 17192  0008B6  0010               	retfie	
 17193  0008B8                     __end_of_interrupt_at_low_vector:
 17194                           	opt stack 0
 17195                           tblptru	equ	0xFF8
 17196                           tblptrh	equ	0xFF7
 17197                           tblptrl	equ	0xFF6
 17198                           tablat	equ	0xFF5
 17199                           prodh	equ	0xFF4
 17200                           prodl	equ	0xFF3
 17201                           intcon	equ	0xFF2
 17202                           postinc0	equ	0xFEE
 17203                           wreg	equ	0xFE8
 17204                           indf1	equ	0xFE7
 17205                           fsr1h	equ	0xFE2
 17206                           fsr1l	equ	0xFE1
 17207                           bsr	equ	0xFE0
 17208                           indf2	equ	0xFDF
 17209                           postinc2	equ	0xFDE
 17210                           postdec2	equ	0xFDD
 17211                           plusw2	equ	0xFDB
 17212                           fsr2h	equ	0xFDA
 17213                           fsr2l	equ	0xFD9
 17214                           status	equ	0xFD8
 17215                           
 17216 ;; *************** function i1_WriteTimer0 *****************
 17217 ;; Defined at:
 17218 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 17219 ;; Parameters:    Size  Location     Type
 17220 ;;  timer0          2    0[COMRAM] unsigned int 
 17221 ;; Auto vars:     Size  Location     Type
 17222 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 17223 ;; Return value:  Size  Location     Type
 17224 ;;		None               void
 17225 ;; Registers used:
 17226 ;;		None
 17227 ;; Tracked objects:
 17228 ;;		On entry : 0/0
 17229 ;;		On exit  : 0/0
 17230 ;;		Unchanged: 0/0
 17231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17232 ;;      Params:         2       0       0       0       0       0       0
 17233 ;;      Locals:         2       0       0       0       0       0       0
 17234 ;;      Temps:          0       0       0       0       0       0       0
 17235 ;;      Totals:         4       0       0       0       0       0       0
 17236 ;;Total ram usage:        4 bytes
 17237 ;; Hardware stack levels used:    1
 17238 ;; This function calls:
 17239 ;;		Nothing
 17240 ;; This function is called by:
 17241 ;;		_interrupt_at_low_vector
 17242 ;; This function uses a non-reentrant model
 17243 ;;
 17244                           
 17245                           	psect	text78
 17246  004486                     __ptext78:
 17247                           	opt stack 0
 17248  004486                     i1_WriteTimer0:
 17249                           	opt stack 21
 17250                           
 17251                           ;incstack = 0
 17252                           ;incstack = 0
 17253  004486  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 17254  00448A  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 17255  00448E  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 17256  004492  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 17257  004496  0012               	return	
 17258  004498                     __end_ofi1_WriteTimer0:
 17259                           	opt stack 0
 17260                           tblptru	equ	0xFF8
 17261                           tblptrh	equ	0xFF7
 17262                           tblptrl	equ	0xFF6
 17263                           tablat	equ	0xFF5
 17264                           prodh	equ	0xFF4
 17265                           prodl	equ	0xFF3
 17266                           intcon	equ	0xFF2
 17267                           postinc0	equ	0xFEE
 17268                           wreg	equ	0xFE8
 17269                           indf1	equ	0xFE7
 17270                           fsr1h	equ	0xFE2
 17271                           fsr1l	equ	0xFE1
 17272                           bsr	equ	0xFE0
 17273                           indf2	equ	0xFDF
 17274                           postinc2	equ	0xFDE
 17275                           postdec2	equ	0xFDD
 17276                           plusw2	equ	0xFDB
 17277                           fsr2h	equ	0xFDA
 17278                           fsr2l	equ	0xFD9
 17279                           status	equ	0xFD8
 17280                           tblptru	equ	0xFF8
 17281                           tblptrh	equ	0xFF7
 17282                           tblptrl	equ	0xFF6
 17283                           tablat	equ	0xFF5
 17284                           prodh	equ	0xFF4
 17285                           prodl	equ	0xFF3
 17286                           intcon	equ	0xFF2
 17287                           postinc0	equ	0xFEE
 17288                           wreg	equ	0xFE8
 17289                           indf1	equ	0xFE7
 17290                           fsr1h	equ	0xFE2
 17291                           fsr1l	equ	0xFE1
 17292                           bsr	equ	0xFE0
 17293                           indf2	equ	0xFDF
 17294                           postinc2	equ	0xFDE
 17295                           postdec2	equ	0xFDD
 17296                           plusw2	equ	0xFDB
 17297                           fsr2h	equ	0xFDA
 17298                           fsr2l	equ	0xFD9
 17299                           status	equ	0xFD8
 17300                           
 17301                           	psect	rparam
 17302  0000                     tblptru	equ	0xFF8
 17303                           tblptrh	equ	0xFF7
 17304                           tblptrl	equ	0xFF6
 17305                           tablat	equ	0xFF5
 17306                           prodh	equ	0xFF4
 17307                           prodl	equ	0xFF3
 17308                           intcon	equ	0xFF2
 17309                           postinc0	equ	0xFEE
 17310                           wreg	equ	0xFE8
 17311                           indf1	equ	0xFE7
 17312                           fsr1h	equ	0xFE2
 17313                           fsr1l	equ	0xFE1
 17314                           bsr	equ	0xFE0
 17315                           indf2	equ	0xFDF
 17316                           postinc2	equ	0xFDE
 17317                           postdec2	equ	0xFDD
 17318                           plusw2	equ	0xFDB
 17319                           fsr2h	equ	0xFDA
 17320                           fsr2l	equ	0xFD9
 17321                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     60     141
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionDisable->_Write_b_eep
    _doActionStatus->_SendInformationEvent
    _doActionPulse->_Read_b_eep
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeAppReg
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _vscp_setUserID->_Write_b_eep
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_SendInformationEvent
    _calculateSetFilterMask->__CANIDToRegs
    _SendInformationEvent->_sendVSCPFrame
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_Read_b_eep
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_Write_b_eep
    _vscp_setSegmentCRC->_Write_b_eep
    _vscp_getSegmentCRC->_Read_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_Read_b_eep
    _vscp_readAppReg->_Read_b_eep

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   70033
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           6     6      0    7438
                                             27 BANK0      6     6      0
                         _Read_b_eep
                        _doActionOff
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2370
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                17    17      0   15731
                                             28 BANK0     17    17      0
                         _Read_b_eep
                        _doActionOff
                         _doActionOn
                      _doActionPulse
                     _doActionStatus
                    _doActionDisable
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       7     6      1    3470
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionDisable                                      6     5      1     449
                                             11 COMRAM     6     5      1
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _doActionStatus                                       7     6      1    3428
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulse                                        7     6      1     381
                                              9 COMRAM     7     6      1
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           7     6      1    3212
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          6     5      1    3212
                                             80 COMRAM     1     0      1
                                             22 BANK0      5     5      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   34199
                                             32 BANK0     28    28      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   11224
                                             30 BANK0      2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    2151
                                             15 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     712
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     204
                                             11 COMRAM     4     4      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     112
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     9     8      1    8863
                                             80 COMRAM     1     0      1
                                             22 BANK0      8     8      0
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (4) _calculateSetFilterMask                              50    50      0    1845
                                             17 COMRAM    50    50      0
                         _Read_b_eep
               _ECANSetOperationMode
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _SendInformationEvent                                 8     6      2    2533
                                             74 COMRAM     6     6      0
                                             20 BANK0      2     0      2
                         _Read_b_eep
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1773
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1334
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     217
                                             12 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      31
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     180
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     211
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4672
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     301
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _Write_b_eep                                          4     1      3      68
                                              7 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     666
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (5) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         3     3      0     508
                                              9 COMRAM     3     3      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     346
                                              9 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_getSegmentCRC
       _Read_b_eep
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
   _init_app_eeprom
     _Busy_eep
     _Write_b_eep
   _init_app_ram
     _Read_b_eep
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
     _vscp_readAppReg
       _Read_b_eep
     _vscp_writeAppReg
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _Read_b_eep
       _calculateSetFilterMask (ARG)
         _Read_b_eep
         _ECANSetOperationMode
         __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _Read_b_eep
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_getSegmentCRC
         _Read_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _Busy_eep
         _Write_b_eep
         _Read_b_eep
         _SendInformationEvent
           _Read_b_eep
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _Read_b_eep
         _calculateSetFilterMask (ARG)
           _Read_b_eep
           _ECANSetOperationMode
           __CANIDToRegs
       _vscp_writeStdReg
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_getGUID
           _Read_b_eep
         _vscp_getUserID
           _Read_b_eep
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _Busy_eep
             _Write_b_eep
           _init_app_ram
             _Read_b_eep
     _vscp_writeStdReg
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_getGUID
         _Read_b_eep
       _vscp_getUserID
         _Read_b_eep
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _Busy_eep
           _Write_b_eep
         _init_app_ram
           _Read_b_eep
     ___lbmod
   _doDM
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulse
       _Read_b_eep
     _doActionStatus
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionDisable
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
     _doActionToggle
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
     _vscp_getSubzone
       _Read_b_eep
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _Read_b_eep
       _vscp_getSubzone (ARG)
         _Read_b_eep
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _SendInformationEvent
       _Read_b_eep
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      8D       5       88.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E5       3        0.0%
DATA                 0      0      F1      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sun Sep 13 18:13:03 2015

                      doActionToggle@val 00CA                  __end_of_vscp_readAppReg 3D0A  
                  __end_of_sendVSCPFrame 3C54                              __CFG_CPB$ON 000000  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000C  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 305A  
                  doActionToggle@dmflags 00C9                              __CFG_LVP$ON 000000  
                            __CFG_WDT$ON 000000                                      l210 265E  
                                    l211 2666                                      l220 268A  
                                    l213 266A                                      l222 268E  
                                    l214 2672                                      l206 264E  
                                    l223 2696                                      l207 2656  
                                    l151 3A1A                                      l312 0A0C  
                                    l216 2676                                      l160 3A62  
                                    l225 269A                                      l217 267E  
                                    l322 0ADC                                      l306 09B2  
                                    l226 26A4                                      l219 2682  
                                    l404 12DC                                      l332 0BA4  
                                    l500 2D32                                      l420 2510  
                                    l228 279A                                      l236 2802  
                                    l164 3A7C                                      l317 0A76  
                                    l253 422C                                      l502 2D62  
                                    l327 0B40                                      l503 2D92  
                                    l504 2DC2                                      l337 0C08  
                                    l249 4252                                      l441 284C  
                                    l505 2DF2                       vscp_readStdReg@idx 0019  
                                    l450 28CC                                      l506 2E22  
                                    l187 21C8                                      l507 2E52  
                                    l515 3612                                      l292 3CC0  
                                    l460 2A0C                                      l452 290C  
                                    l541 3D4E                                      l454 294C  
                                    l471 395E                                      l447 288C  
                                    l640 4398                                      l480 39A4  
                                    l456 298C                                      l528 36D8  
                                    l552 3372                                      l481 39A8  
                                    l449 2A70                                      l561 33BC  
                                    l482 39AC                                      l458 29CC  
                                    l570 33E0                                      l562 33C4  
                                    l483 39B0                                      l571 33E8  
                                    l484 39B4                                      l564 33C8  
                                    l477 399C                                      l573 33EC  
                                    l565 33D0                                      l557 33AC  
                                    l478 39D4                                      l494 2CF4  
                                    l574 33F4                                      l558 33B4  
                                    l479 39A0                                      l567 33D4  
                                    l576 33F8                                      l568 33DC  
                                    l665 3EB4                                      l577 3402  
                                    l930 3326                                      l907 2C12  
                                    l579 344C                        doActionStatus@bOn 00CA  
                                    l908 2C36                                      l676 4164  
                                    l925 35C8                       vscp_readStdReg@reg 001C  
                                    l935 3F22                                      l871 31C2  
                                    l863 3126                                      l865 3144  
                                    l891 2B46                                      l883 2CAA  
                                    l876 2AD6                                      l893 2B5A  
                                    l886 2BA4                                      l895 2B6E  
                                    l887 2B24                                      l897 2B7E  
                                    l889 2B32                                      l899 2B8E  
         __size_of_vscp_handleProbeState 00BA                        doActionStatus@arg 0051  
                         getVSCPFrame@id 0028                        doActionStatus@val 00CB  
          __end_of_vscp_handleProbeState 3B9E                    ?_vscp_restoreDefaults 0001  
                   __size_of_WriteTimer0 0012                     __size_of_Write_b_eep 0034  
                 _calculateSetFilterMask 1946                                      wreg 000FE8  
            ?_doApplicationOneSecondWork 0001                                     l1102 429C  
                                   l1113 418E                                     l1050 3FF8  
                                   l1122 3FE4                                     l1108 40FC  
                                   l1109 4108                     __size_of_doActionOff 00E8  
                                   l1126 43B2                                     l1055 42C0  
                                   l1231 14CE                                     l1305 44DC  
                                   l1073 3B88                                     l1065 3B9A  
                                   l1330 40C8                                     l1074 3B68  
                                   l1066 3B26                                     l1171 4304  
                                   l1255 165E                                     l1256 1672  
                                   l1257 16B4                                     l1346 435C  
                                   l1098 4066                                     l1266 16F0  
                                   l1347 435E                                     l1291 1944  
                                   l1197 3914                                     l1299 41B8  
                                   l5011 21CA                      vscp_readStdReg@code 0011  
                                   l7221 3EBC                                     l7061 2AC4  
                                   l7231 3EEC                                     l7223 3EC4  
                                   l7071 2AEE                vscp_getManufacturerId@idx 000A  
                                   l7233 3EF2                                     l7225 3ECE  
                                   l7129 2BB8                                     l7235 3EF8  
                                   l7227 3ED8                                     l7139 2BD8  
                                   l7229 3EE2                                     l7253 3258  
                                   l7165 2C64                                     l7173 2C7E  
                                   l7157 2C38                                     l7077 2B04  
                                   l7085 2B12                                     l7191 43D8  
                                   l7239 3F04                                     l7079 2B0E  
                                   l7179 2C94                                     l9043 1BE4  
                                   l9035 1BD2                                     l9027 1958  
                                   l9061 1C90                                     l7525 41DA  
                                   l7517 41C4                                     l6903 4312  
                                   l9047 1C72                                     l9071 1D56  
                                   l8351 3FC4                                     l9065 1D24  
                                   l9217 2E82                                     l9305 3D9E  
                                   l8345 3FBA                                     l8531 3C7A  
                                   l7715 42AC                                     l9403 410C  
                                   l7811 3B44                                     l9067 1D2C  
                                   l9219 2EA2                                     l8355 3FCC  
                                   l8541 3C98                                     l7813 3B48  
                                   l5949 423A                                     l5957 4214  
                                   l9181 2D1A                                     l8543 3CA0  
                                   l8527 3C6A                                     l7743 37B4  
                                   l7727 371A                                     l7807 3B40  
                                   l8545 3CA8                                     l8537 3C88  
                                   l8553 3CC4                                     l8561 3D06  
                                   l7737 3744                                     l6953 4146  
                                   l6937 3E58                                     l9425 30C0  
                                   l9169 2CB2                                     l8547 3CB0  
                                   l8539 3C90                                     l8555 3CE8  
                                   l7747 380A                                     l9419 30B0  
                                   l7843 3B8C                                     l9603 2F02  
                                   l8549 3CB8                                     l6949 4142  
                                   l9453 3146                                     l9437 30EA  
                                   l7773 3AE6                                     l9533 405E  
                                   l9621 2F40                                     l9613 2F28  
                                   l9447 312A                                     l9607 2F12  
                                   l9711 3898                                     l9703 387A  
                                   l9287 3D10                                     l9473 31B4  
                                   l9633 2F62                                     l9625 2F4A  
                                   l9617 2F34                                     l9713 389C  
                                   l9459 3174                                     l9467 3192  
                                   l7787 3B04                                     l9715 38B2  
                                   l9299 3D72                                     l9811 3A5C  
                                   l9803 3A48                                     l9477 31B8  
                                   l7789 3B0A                                     l9637 2F6E  
                                   l9629 2F56                                     l9495 34F0  
                                   l9479 31BA                                     l9663 3046  
                                   l9647 2FD0                                     l9591 2EDE  
                                   l9583 2ECA                                     l9735 38FA  
                                   l9727 38E6                                     l9807 3A52  
                                   l9823 3A80                                     l9657 3030  
                                   l9569 43AC                                     l9745 3916  
                                   l9809 3A56                                     l9825 3A98  
                                   l9595 2EEA                                     l9587 2ED4  
                                   l9667 3056                                     l9579 2EC0  
                                   l9691 383E                                     l9851 3ADE  
                                   l9835 3AC2                                     l9819 3A76  
                                   l9933 13A2                                     l9861 131E  
                                   l9599 2EF6                                     l9919 1396  
                                   l9863 1324                                     l9847 3AD6  
                                   l9697 385E                                     l9865 132A  
                                   l9857 1312                                     l9785 3A16  
                                   l9883 1362                                     l9859 1318  
                                   l9949 13FE                                     l9885 1368  
                                   l9991 14D2                                     l9959 1432  
                                   l9799 3A40                                     l9969 1466  
                                   l9993 14F0                                     l9979 149A  
                                   l9899 1370                                     l9997 1500  
            __size_of_vscp_getMatrixInfo 0020                                     u4275 40D4  
                                   u4276 40D6                           sendCANFrame@id 0037  
                                   u7115 2ACC                                     u7117 2ACE  
                                   u8234 376A                                     u8235 3766  
                                   u7435 3206                                     u7445 3226  
                                   u7455 3274                                     u6940 3EA8  
                                   u6945 3E9E                         ??_ECANInitialize 0009  
              vscp_setManufacturerId@idx 000D                                     _doDM 2214  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 3A02                                     _init 4068  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 08DE                              _vscp_minute 0090  
                            _vscp_second 0095                                     prodh 000FF4  
                                   prodl 000FF3                                     start 08B8  
                   doActionPulse@dmflags 000F            __size_of_vscp_doOneSecondWork 004E  
                      vscp_getUserID@idx 000A                    __size_of_vscp_setGUID 0026  
                       _vscp_writeStdReg 3814                          _doActionDisable 3D0A  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 3EB6              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 002C                                    l10001 1518  
                                  l10011 1574                                    l10031 15B0  
                                  l10007 155E                                    l10201 1780  
                                  l10121 16A0                                    l11001 35D2  
                                  l10203 1786                                    l10027 15A4  
                                  l10125 16A8                                    l10117 1698  
                                  l10109 167A                                    l10045 15F6  
                                  l10029 15A6                                    l11021 366A  
                                  l11013 3636                                    l10301 2284  
                                  l10231 1802                                    l10223 17D4  
                                  l10135 16B6                                    l10039 15CA  
                                  l11023 3674                                    l11015 364C  
                                  l11031 3692                                    l11111 3438  
                                  l11103 3406                                    l10241 182C  
                                  l10161 16F8                                    l10073 1632  
                                  l10057 1612                                    l11025 367E  
                                  l11017 3656                                    l11033 36AE  
                                  l11105 3422                                    l11121 3470  
                                  l10321 23D8                                    l10313 2364  
                                  l10227 17EA                                    l10219 17BA  
                                  l10139 16D0                                    l11027 3688  
                                  l11019 3660                                    l10323 2412  
                                  l10501 095A                                    l11133 42FA  
                                  l10253 1882                                    l11045 36EA  
                                  l11117 345E                                    l10317 239E  
                                  l10405 26A8                                    l10175 1720  
                                  l11039 36C4                                    l11071 3396  
                                  l10327 244C                                    l10335 24C0  
                                  l10415 2774                                    l10407 26C4  
                                  l10431 27FE                                    l10343 2516  
                                  _B0CON 000E20                                    l10601 0B50  
                                  l10521 09C8                                    l10513 0984  
                                  l10249 185A                                    l10185 1742  
                                  l10089 1652                                    l10441 3920  
                                  l11049 36FC                                    l10329 2486  
                                  l10337 2506                                    l10425 27AC  
                                  l10275 18E2                                    l11075 33B6  
                                  l11059 3330                                    l10291 2220  
                                  l10419 2786                                    l10347 251E  
                                  l10621 0BB4                                    l10613 0B78  
                                  l10541 0A1E                                    l10533 09F2  
                                  l10197 176E                                    l10461 39B8  
                                  l10453 3982                                    l10429 27C0  
                                  l10365 25B6                                    l10519 09C2  
                                  l10367 25F8                                    _B1CON 000E30  
                                  l10713 0DC4                                    l10633 0BDC  
                                  l10561 0A88                                    l10553 0A48  
                                  l10465 39E6                                    l10377 2658  
                                  ?_doDM 0001                                    l10723 0DD0  
                                  l10651 0C50                                    l10643 0C18  
                                  l10821 0F98                                    l10581 0AEC  
                                  l10573 0AB0                                    l10645 0C42  
                                  l10493 0932                                    l10485 090E  
                                  l10469 39F8                                    l10815 0F92  
                                  l10743 0E3C                                    l10719 0DCA  
                                  l10671 0CBC                                    l10823 0FC4  
                                  _B2CON 000E40                                    l10921 12F0  
                                  l10841 10B2                                    l10833 1002  
                                  l10809 0F8C                                    l10761 0EA8  
                                  l10737 0E36                                    l10665 0CB6  
                                  l10593 0B14                                    l10905 1296  
                                  l10915 12C6                                    l10843 10DE  
                                  l10835 102E                                    l10851 1162  
                                  l10771 0EB4                                    l10747 0E42  
                                  l10675 0CC2                                    l10925 1304  
                                  l10845 110A                                    l10837 105A  
                                  l10853 118C                                    l10847 1136  
                                  l10839 1086                                    l10791 0F20  
                                  l10767 0EAE                                    l10695 0D2E  
                                  l10935 280A                                    _B3CON 000E50  
                                  l10881 11F6                                    l10785 0F1A  
                                  l10689 0D28                                    l10891 1252  
                                  l10883 122C                                    l10795 0F26  
                                  l10699 0D5E                                    l10947 2872  
                                  l10893 126A                                    l10877 11CA  
                                  l10983 2A4C                                    l10991 2A94  
                                  _B4CON 000E60            __size_of_SendInformationEvent 006C  
                                  l10987 2A82            __size_of_vscp_getMajorVersion 0002  
                                  _B5CON 000E70               __end_of_vscp_goActiveState 4344  
          ??_vscp_writeNicknamePermanent 000C                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                          i1_WriteTimer0 4486                                    _EEADR 000FA9  
                        __end_of___lbmod 41E2                  _vscp_handleDropNickname 40DA  
                                  _BSEL0 000DF8                                    u10104 1C4C  
                                  u10105 1C46                                    u10134 1CC6  
                                  u10070 1C04                                    u10135 1CC2  
                                  u10055 1A42                                    u10144 1CDE  
                                  u10080 1C2C                                    u10145 1CDA  
                                  u10075 1BFA                                    u11300 3028  
                                  u10164 1CFE                                    u10165 1CF8  
                                  u10085 1C22                                    _T0CON 000FD5  
                                  u11305 301E                                    u10195 3BDA  
                                  u11270 2FC6                                    u10384 2CC2  
                                  u10385 2CBE                                    u11275 2FBC  
                                  u10584 3D20                                    u12344 2594  
                                  u10585 3D1C                                    u12345 2590  
                                  u12364 2608                                    u12365 2604  
                                  u12534 3930                                    u12535 392C  
                                  u13194 281A                                    u10955 34B4  
                                  u13195 2816                                    u13364 35E2  
                                  u10965 34DA                                    u13365 35DE  
                                  u10975 3504                                    u13484 3340  
                                  u13485 333C                                    i1l141 0886  
                                  i1l142 0888                                    i1l143 08A8  
                                  i1l144 089C                                    i1l139 0862  
                                  i1l147 08AA                          sendCANFrame@dlc 003B  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 44CA               _vscp_readNicknamePermanent 44C0  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                             _vscp_getGUID 444E  
                                  doDM@i 00DD                            __CFG_WRTD$OFF 000000  
                         Read_b_eep@badd 0008                           __CFG_EBTRB$OFF 000000  
                 Write_b_eep@GIE_BIT_VAL 000B                             _vscp_getZone 44A2  
                     vscp_writeAppReg@rv 00CC                                    _hours 0088  
              _vscp_getRegisterPagesUsed 44E8                   __size_of_vscp_getEvent 002A  
                           _vscp_setGUID 422E                                    tablat 000FF5  
                _vscp_getSubMinorVersion 44EE                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 4208  
                   _ECANSetOperationMode 43CC                          __initialization 42C2  
                           __end_of_doDM 2512                             __end_of_main 3AE4  
                           __end_of_init 40A6                         ?_vscp_readAppReg 0001  
                             _Read_b_eep 4474                  _interrupt_at_low_vector 0818  
                       __end_of_Busy_eep 44E2                           doDM@class_mask 00D2  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00CD  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 0010                                   ??_main 0052  
                                 ??_init 000D            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 000A                 ??_vscp_setManufacturerId 000D  
               _vscp_handleProtocolEvent 1308                            __activetblptr 000002  
                      __RegsToCANID@type 000B               ECANReceiveMessage@msgFlags 0011  
          doApplicationOneSecondWork@bOn 00CF                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                 __size_of_doActionPulse 0200               ECANReceiveMessage@savedPtr 0012  
                                 _CANCON 000F6F                                   _EEDATA 000FA8  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                        __CFG_BBSIZ$2048 000000                            doDM@type_mask 00D5  
                     vscp_writeStdReg@rv 0015                            ?_init_app_ram 0001  
                                 _MDSEL0 007BBE                                   _MDSEL1 007BBF  
                             _OpenTimer0 4344                                   i1l7541 0842  
                                 i1l7533 0824                                   i1l7551 0864  
                                 i1l7543 0852                                   i1l7535 082C  
                                 i1l7561 0896                                   i1l7553 0870  
                                 i1l7545 0854                                   i1l7537 0838  
                                 i1l7563 08A4                                   i1l7555 087A  
                                 i1l7547 085C                                   i1l7539 083E  
                                 i1l7557 0882                                   i1l7549 0860  
                                 i1l7559 088C                          _init_app_eeprom 1DB2  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                __end_of_doActionDisable 3DA8                           __CFG_WDTPS$128 000000  
                                 _RXF1EN 006EA1                   ECANReceiveMessage@data 000F  
                 ECANReceiveMessage@mode 0016                   ECANReceiveMessage@temp 0017  
                      getVSCPFrame@pData 0022                        getVSCPFrame@pSize 0021  
                     _vscp_newNodeOnline 4166                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0011   vscp_handleProtocolEvent@page_save_1294 00DA  
                         getCANFrame@pid 001C                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0009                            _vscp_getEvent 4190  
                                 _doWork 44E6                         OpenTimer0@config 0008  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 000D  
                    vscp_writeAppReg@bOn 00CD          calculateSetFilterMask@rowfilter 003E  
             calculateSetFilterMask@mask 0036                      vscp_writeAppReg@reg 00CE  
             __end_of_vscp_setSegmentCRC 4410                      vscp_writeAppReg@val 0051  
                                 clear_0 42C8                                   clear_1 42D4  
                          ?_sendCANFrame 0037             vscp_handleProtocolEvent@byte 00E7  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 0091  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 000C                ??_vscp_getSubMinorVersion 0008  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 000A  
                   ??_vscp_newNodeOnline 004C                          ___lbmod@divisor 0008  
                        doActionToggle@i 00CC                               __accesstop 0060  
                __end_of__initialization 42DA                          ___lbmod@counter 000A  
          __size_of_vscp_getMinorVersion 0002                          doActionStatus@i 00CC  
                  __size_of_getVSCPFrame 0078                       _vscp_writeRegister 42E4  
              ??_interrupt_at_low_vector 0005                  __size_of_vscp_sendEvent 0026  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                          _doActionPulse 2CAC              __end_of_vscp_check_pstorage 42C2  
                __size_of_vscp_setUserID 001C                              ?_Read_b_eep 0008  
                        ??i1_WriteTimer0 0003                      ?_vscp_writeRegister 00CF  
                         ??_sendCANFrame 003E                               _doActionOn 2804  
                ?_calculateSetFilterMask 0001            calculateSetFilterMask@lastOID 0035  
             __end_of_vscp_getFamilyCode 44C0                            ?__RegsToCANID 0008  
            __size_of_ECANReceiveMessage 020E                       sendVSCPFrame@pData 0045  
             __end_of_vscp_getFamilyType 44B6          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 00CF          __size_of_vscp_setManufacturerId 0026  
               __end_of_vscp_writeAppReg 1308                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 2214              __end_of_vscp_setControlByte 43FA  
               __end_of_vscp_writeStdReg 391A            calculateSetFilterMask@rowmask 0031  
                     __RegsToCANID@Value 000E                     ??_vscp_writeRegister 0052  
        __end_of_vscp_handleDropNickname 410A                             _getVSCPFrame 3E3E  
                             __pbssBANK0 0060                              ?_OpenTimer0 0001  
             __end_of_vscp_getBufferSize 44EC                                ?_Busy_eep 0001  
                       ?_doActionDisable 000C                    vscp_writeRegister@reg 00D0  
                 ??_ECANSetOperationMode 0008       __size_of_vscp_getRegisterPagesUsed 0002  
                         ?_doActionPulse 000A          __end_of_vscp_getSubMinorVersion 44F0  
               ECANSetOperationMode@mode 0008                                  _B0RXFUL 007107  
                                _B1RXFUL 007187                     __ECANRxFilterHitInfo 0054  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 000C                                  _B5RXFUL 007387  
         __end_of_calculateSetFilterMask 1DB2                  __size_of_doActionToggle 0152  
                       WriteTimer0@timer 000A                  __size_of_doActionStatus 013C  
                                _ECANCON 000F77                            ??_WriteTimer0 000A  
                         ??__RegsToCANID 000C                            ??_Write_b_eep 000B  
                  sendVSCPFrame@priority 0043                                  _BRGCON1 000F70  
                                _BRGCON2 000F71                                  _BRGCON3 000F72  
         SendInformationEvent@eventClass 00C5                      vscp_writeStdReg@reg 0016  
           __end_of_vscp_doOneSecondWork 3FE6              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0041                            ??_doActionOff 00C7  
        __end_of_interrupt_at_low_vector 08B8                 vscp_readStdReg@code_1267 0015  
                      sendCANFrame@pdata 003C                    _vscp_handleProbeState 3AE4  
                                _RXB0CON 000F60                                  _RXB1CON 000F50  
                                _RXB0FUL 007B07                         __ECANPointBuffer 3EB6  
             __end_of_vscp_getMatrixInfo 4326                                  _TXB0CON 000F40  
                                _TXB1CON 000F30                                  _TXB2CON 000F20  
                                _RXFCON0 000DD4                                  _RXFCON1 000DD5  
                  doActionStatus@dmflags 00C9                       _vscp_goActiveState 4326  
                 __size_of_sendVSCPFrame 00B6             __end_of_SendInformationEvent 3F98  
           __end_of_vscp_getMajorVersion 44F4                      __size_of_Read_b_eep 0012  
                     __size_of_vscp_init 0044                               ??_Busy_eep 0008  
                SendInformationEvent@idx 0050                   _vscp_getManufacturerId 4426  
                 _vscp_setManufacturerId 4208                          _ECANSendMessage 305A  
                    ?_vscp_goActiveState 0001                                  __Hparam 0000  
                        ??_vscp_getEvent 002C                                  __Lparam 0000  
                     _vscp_node_substate 0093               __end_of_vscp_getSegmentCRC 44D4  
             ??_vscp_handleProtocolEvent 00D1                            ??_getCANFrame 001C  
                           doActionOff@i 00CB        __end_of_vscp_getRegisterPagesUsed 44EA  
               __size_of_vscp_getMDF_URL 0018                                  ___lbmod 41BA  
                        getCANFrame@pdlc 001A                  vscp_writeAppReg@val_682 00CB  
                              _FIFOEMPTY 007BA7                          __size_of_doWork 0002  
                           __psmallconst 08BC                     __end_of_init_app_ram 3814  
                     _vscp_sendHeartBeat 41E2                                  __pcinit 42C2  
                         _vscp_deviceURL 08BC                              ?_doActionOn 0051  
                                __ramtop 0600                      __size_of_OpenTimer0 001E  
                                __ptext0 3A02                                  __ptext1 44E6  
                                __ptext2 2512                                  __ptext3 3F98  
                                __ptext4 41E2                                  __ptext5 4498  
                                __ptext6 44A2                                  __ptext7 44E2  
                                __ptext8 2214                                  __ptext9 3328  
                         _vscp_getUserID 443A                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 004C                         doActionDisable@i 0011  
                  vscp_writeStdReg@value 0010                      ?_vscp_sendHeartBeat 00C5  
               ??_vscp_handleSetNickname 000D                                  _minutes 0089  
                                _seconds 008B                      __end_of_WriteTimer0 4474  
                       ?_init_app_eeprom 0001                      __end_of_Write_b_eep 40DA  
                      vscp_readAppReg@rv 000A                       vscp_getMDF_URL@idx 0009  
          vscp_handleProtocolEvent@bytes 00DE                     end_of_initialization 42DA  
                    __end_of_doActionOff 3A02             __end_of_vscp_handleHeartbeat 4068  
               __size_of_vscp_getSubzone 000A                            __Lmediumconst 0000  
                   __end_of_sendCANFrame 413A                vscp_handleProtocolEvent@i 00EB  
              vscp_handleProtocolEvent@j 00EC                vscp_handleProtocolEvent@k 00E5  
                        ??_doActionPulse 000B                   doActionDisable@dmflags 0010  
                   ??_vscp_sendHeartBeat 004C                           _vscp_sendEvent 4254  
                      ECANSendMessage@id 0012                        ECANSendMessage@pb 001B  
                                postdec2 000FDD                  __size_of_ECANInitialize 0096  
                         _vscp_setUserID 4362                                  postinc0 000FEE  
                                postinc2 000FDE                   __end_of_vscp_deviceURL 08DC  
    __end_of_vscp_writeNicknamePermanent 4426              _vscp_writeNicknamePermanent 4410  
                     __ECANPointBuffer@b 000B                            _sendVSCPFrame 3B9E  
                 __end_of_vscp_getUserID 444E             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0078CB                        __end_of_vscp_init 402A  
                         _vscp_probe_cnt 0094                                _PORTCbits 000F82  
                    __end_of_getCANFrame 4166            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                 __size_of_vscp_readAppReg 00B6  
                       ___lbmod@dividend 0009                         doActionPulse@arg 000A  
                         _vscp_statuscnt 0058                 __size_of_vscp_readStdReg 01AE  
                       doActionPulse@val 000E                       _vscp_setSegmentCRC 43FA  
             vscp_handleProtocolEvent@cb 00E3                  __end_of_ECANSendMessage 31C4  
                      vscp_readStdReg@rv 001B                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 00DC  
                   __end_of__RegsToCANID 3328                      __size_of_doActionOn 029A  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 427A  
                             _vscp_error 44E2                     _vscp_doOneSecondWork 3F98  
                     i1WriteTimer0@timer 0003                               _vscp_timer 0086  
                 __end_of_vscp_setUserID 437E                   vscp_sendHeartBeat@zone 004C  
                           ??_Read_b_eep 000A                           ?_sendVSCPFrame 003F  
            doApplicationOneSecondWork@i 00D1                           _doActionToggle 3328  
                         _doActionStatus 35CA                          ?_vscp_getUserID 0001  
                         __end_of_doWork 44E8             __end_of_vscp_getMinorVersion 44F2  
                            _WriteTimer0 4462                     _SendInformationEvent 3F2C  
                   _vscp_getMajorVersion 44F2                              _Write_b_eep 40A6  
                   ??_vscp_setSegmentCRC 000C                        ??_vscp_getMDF_URL 0008  
          ??_vscp_getBootLoaderAlgorithm 0008                        ?_vscp_writeAppReg 0051  
                    start_initialization 42C2                              _doActionOff 391A  
        __size_of_vscp_handleSetNickname 0024                       ??_vscp_writeAppReg 00C7  
                      ?_vscp_writeStdReg 0010                   _relay_protection_timer 0060  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 0008                       ??_vscp_writeStdReg 0011  
                     _vscp_getFamilyCode 44B6                           ??__CANIDToRegs 000F  
                     _vscp_getFamilyType 44AC                         doDM@class_filter 00D0  
                     __end_of_Read_b_eep 4486                      sendVSCPFrame@nodeid 0042  
                      _vscp_readRegister 439A                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 00E2                    ?_vscp_doOneSecondWork 0001  
                      __size_of_Busy_eep 0006                    ECANReceiveMessage@ptr 0018  
                    ?_vscp_getFamilyCode 0008                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 1946                                _doDM$2152 00D6  
                        ?_vscp_setUserID 000C                                _doDM$2153 00D7  
                              _doDM$2154 00D8                                _doDM$2155 00D9  
                              _doDM$2156 00DA                                _doDM$2157 00DB  
                    ?_vscp_getFamilyType 0008                    __size_of_init_app_ram 010E  
               ?_vscp_handleDropNickname 0001                   __end_of_doActionToggle 347A  
                      ??_vscp_getSubzone 000A                   __end_of_doActionStatus 3706  
               __end_of__ECANPointBuffer 3F2C                        __CANIDToRegs@type 000E  
                            _getCANFrame 413A                                 ??_doWork 0008  
                     _vscp_getBufferSize 44EA              vscp_handleProtocolEvent@len 00DF  
                         doActionOff@arg 0051              vscp_handleProtocolEvent@pos 00DD  
             __end_of_ECANReceiveMessage 2CAC                           doActionOff@val 00CA  
                    ??_vscp_readRegister 001D           __size_of_vscp_goBootloaderMode 001C  
                  ?_SendInformationEvent 00C5                    ?_vscp_getMajorVersion 0001  
                  __end_ofi1_WriteTimer0 4498            __end_of_vscp_goBootloaderMode 439A  
                   _vscp_handleHeartbeat 402A                       __end_of_OpenTimer0 4362  
    __size_of_doApplicationOneSecondWork 02F2                      ?_vscp_getBufferSize 0001  
                         doActionPulse@i 0010             __size_of_vscp_check_pstorage 0024  
                   ??_vscp_getFamilyCode 000C                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0052                     ??_vscp_getFamilyType 000C  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 00B1  
                       _vscp_alarmstatus 0055                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 0030                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 000C                            ?_vscp_setGUID 000C  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0012  
                      ??_vscp_readAppReg 000A                        sendVSCPFrame@size 0044  
              __end_of_vscp_readRegister 43B4                        _relay_pulse_flags 008A  
                           _init_app_ram 3706                        _relay_pulse_timer 0070  
           __size_of_vscp_setControlByte 0016                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 000C                     ??_vscp_getBufferSize 0008  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 4306  
                 _vscp_handleSetNickname 427A            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 00B1                          ?_doActionToggle 0051  
                         _ECANInitialize 3DA8                          ?_doActionStatus 0051  
               __size_of_doActionDisable 009E                                 ?___lbmod 0008  
                    ?_vscp_getMatrixInfo 0001                  calculateSetFilterMask@i 0043  
                calculateSetFilterMask@j 0042                          vscp_getGUID@idx 000A  
                            __pintcodelo 0818                             ??_doActionOn 00C7  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1284 00E1  
                vscp_readStdReg@idx_1268 001A               vscp_setManufacturerId@data 000C  
                           _sendCANFrame 410A                              __smallconst 08BC  
                      WriteTimer0@timer0 0008                       _vscp_getSegmentCRC 44CA  
                         ??_vscp_getGUID 000A                           ??_vscp_getZone 000A  
                            doActionOn@i 00CC           __end_of_vscp_getManufacturerId 443A  
         __end_of_vscp_setManufacturerId 422E                    __size_of__RegsToCANID 0164  
       vscp_handleProtocolEvent@pos_1283 00E0                          doDM@type_filter 00D4  
                         ??_vscp_setGUID 000D                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 0008                         _vscp_configtimer 0084  
                     doActionDisable@arg 000C                       doActionDisable@val 000F  
        SendInformationEvent@eventTypeId 00C6                   ??_vscp_doOneSecondWork 004D  
                 sendVSCPFrame@vscpclass 003F                                 _LATBbits 000F8A  
                   _vscp_getMinorVersion 44F0                                 _LATCbits 000F8B  
                              _sendTimer 008C                       __end_of_doActionOn 2A9E  
                 __end_of_ECANInitialize 3E3E                                 i1u802_20 082C  
                               i1u802_21 082A                                 i1u803_20 085C  
                               i1u803_21 085A                                 i1u804_20 0870  
                               i1u804_21 086E                                 i1u805_20 087A  
                               i1u805_21 0878                                 i1u806_20 0882  
                               i1u806_21 0880                                 i1u807_20 0896  
                               i1u807_21 0894                                 i1u808_20 08A4  
                               i1u808_21 08A2                         ECANSendMessage@i 0034  
                       ECANSendMessage@j 002F                    __end_of_vscp_getEvent 41BA  
                               _RXF0EIDH 000F02                                 _RXF0EIDL 000F03  
                               _RXB0OVFL 007BA7                                 _RXF1EIDH 000F06  
                               _RXF1EIDL 000F07                                 _RXB1OVFL 007BA6  
                               _RXF0SIDH 000F00                                 _RXF0SIDL 000F01  
                               _RXF1SIDH 000F04                                 _RXF1SIDL 000F05  
                               _RXM0EIDH 000F1A                                 _RXM0EIDL 000F1B  
                        vscp_getEvent@rv 002C                                 _RXM1EIDH 000F1E  
                               _RXM1EIDL 000F1F                     ??_vscp_getSegmentCRC 000A  
                               _RXFBCON0 000DE0                                 _RXFBCON1 000DE1  
                               _RXFBCON2 000DE2                                 _RXFBCON3 000DE3  
                               _RXFBCON4 000DE4                                 _RXFBCON5 000DE5  
                               _RXFBCON6 000DE6                                 _RXFBCON7 000DE7  
                               _RXM0SIDH 000F18                                 _RXM0SIDL 000F19  
                 ??_SendInformationEvent 004B                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 0008                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 004C  
                     vscp_setUserID@data 000C                     __end_of__CANIDToRegs 35CA  
                           __RegsToCANID 31C4                       _vscp_probe_address 0057  
                        Write_b_eep@badd 0008                          Write_b_eep@bdat 000A  
                     doActionOff@dmflags 00C9              __size_of_vscp_goActiveState 001E  
                    getVSCPFrame@pNodeId 001F                                _vscp_init 3FE6  
                              _vscp_imsg 0096                                _vscp_hour 008E  
                              _vscp_omsg 00A4                         vscp_setGUID@data 000C  
      __size_of_vscp_handleProtocolEvent 063E                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001                 SendInformationEvent@data 004D  
   __size_of_vscp_writeNicknamePermanent 0016       __end_of_doApplicationOneSecondWork 2804  
             _doApplicationOneSecondWork 2512                         _vscp_page_select 0052  
             __size_of_vscp_readRegister 001A                        _measurement_clock 0080  
                               _Busy_eep 44DC                    ?_vscp_getMinorVersion 0001  
               __size_of_init_app_eeprom 0462             __end_of_vscp_restoreDefaults 44DC  
                             _EECON1bits 000FA6                          ?_ECANInitialize 0001  
               ??_calculateSetFilterMask 0012                                 __Hrparam 0000  
                   ECANReceiveMessage@id 0014              __size_of_vscp_sendHeartBeat 0026  
                       ??_vscp_getUserID 000A                          _vscp_getMDF_URL 43B4  
                               __Lrparam 0000                    __end_of_doActionPulse 2EAC  
                       __CANIDToRegs@val 000A                         __CANIDToRegs@ptr 0008  
                          doActionOn@arg 0051                            doActionOn@val 00CB  
                       _vscp_initledfunc 0056                         __size_of___lbmod 0028  
                 ??_vscp_handleHeartbeat 000D                         getCANFrame@flags 001D  
                           ?_WriteTimer0 0008                         getCANFrame@pdata 001B  
                           ?_Write_b_eep 0008                        ??_doActionDisable 000D  
             vscp_writeAppReg@bInfoEvent 00CA                               ?_vscp_init 0001  
                           ?_doActionOff 0051                                 __ptext10 3D0A  
                               __ptext11 35CA                                 __ptext20 1DB2  
                               __ptext12 2CAC                                 __ptext21 4362  
                               __ptext13 2804                                 __ptext30 44AC  
                               __ptext22 4208                                 __ptext14 391A  
                               __ptext31 44B6                                 __ptext23 422E  
                               __ptext15 1308                                 __ptext40 44F2  
                               __ptext32 44EA                                 __ptext24 08DE  
                               __ptext16 41BA                                 __ptext41 4166  
                               __ptext33 44EC                                 __ptext25 1946  
                               __ptext17 42E4                                 __ptext50 4326  
                               __ptext42 40DA                                 __ptext34 4426  
                               __ptext26 3F2C                                 __ptext18 3814  
                               __ptext51 4254                                 __ptext43 3FE6  
                               __ptext35 443A                                 __ptext27 439A  
                               __ptext19 44D4                                 __ptext60 31C4  
                               __ptext52 3B9E                                 __ptext44 44C0  
                               __ptext36 43B4                                 __ptext28 2EAC  
                               __ptext61 3EB6                                 __ptext53 410A  
                               __ptext45 427A                                 __ptext37 444E  
                               __ptext29 44E8                                 __ptext70 3DA8  
                               __ptext62 429E                                 __ptext54 305A  
                               __ptext46 402A                                 __ptext38 44EE  
                               __ptext71 43CC                                 __ptext63 43E4  
                               __ptext55 347A                                 __ptext47 4306  
                               __ptext39 44F0                                 __ptext72 4344  
                               __ptext64 43FA                                 __ptext56 4190  
                               __ptext48 437E                                 __ptext73 3706  
                               __ptext65 44CA                                 __ptext57 3E3E  
                               __ptext49 3AE4                                 __ptext74 4462  
                               __ptext66 4410                                 __ptext58 413A  
                               __ptext75 3C54                                 __ptext67 40A6  
                               __ptext59 2A9E                                 __ptext76 4474  
                               __ptext68 44DC                                 __ptext69 4068  
                               __ptext78 4486           vscp_goBootloaderMode@algorithm 000C  
              vscp_sendHeartBeat@subzone 00C5                            ?_getVSCPFrame 001E  
                       ??_vscp_sendEvent 004B                          _vscp_getSubzone 4498  
           calculateSetFilterMask@filter 003A                         ??_vscp_setUserID 000D  
                          __size_of_doDM 02FE                            __size_of_main 00E2  
                          __size_of_init 003E                __size_of_vscp_writeAppReg 0A2A  
                    _vscp_check_pstorage 429E                            init_app_ram@i 000C  
         vscp_handleProtocolEvent@i_1282 00E6           vscp_handleProtocolEvent@i_1285 00EA  
         vscp_handleProtocolEvent@i_1293 00E4                     __end_of_vscp_getGUID 4462  
              __size_of_vscp_writeStdReg 0106                      ECANSendMessage@data 0016  
               ECANSendMessage@tempBSEL0 0030                             ?_getCANFrame 001A  
                    ECANSendMessage@mode 002D                     __end_of_vscp_getZone 44AC  
                    ECANSendMessage@temp 0033                        ?__ECANPointBuffer 0008  
                      doActionOn@dmflags 00CA                        vscp_setUserID@idx 000D  
                   __end_of_vscp_setGUID 4254                       vscp_readAppReg@reg 000B  
                     ??__ECANPointBuffer 000B           vscp_handleProtocolEvent@offset 00DC  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 000D  
                       init_app_eeprom@i 000E                         init_app_eeprom@j 000F  
                    _vscp_setControlByte 43E4              __size_of_vscp_setSegmentCRC 0016  
                        _vscp_readAppReg 3C54                     ?_vscp_check_pstorage 0001  
                            _RXB1CONbits 000F50         __size_of_vscp_handleDropNickname 0030  
                             _INTCONbits 000FF2             ??_vscp_readNicknamePermanent 000A  
                    ECANReceiveMessage@i 0015                          _vscp_guid_reset 008D  
                        _vscp_readStdReg 2EAC             vscp_handleDropNickname@bytes 000D  
             __end_of_vscp_newNodeOnline 4190                       _ECANReceiveMessage 2A9E  
                         ??_getVSCPFrame 0023                          _vscp_initbtncnt 008F  
                        sendVSCPFrame@id 0047                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 0008                  vscp_getMatrixInfo@pData 0001  
                __end_of_vscp_getMDF_URL 43CC                     ?_vscp_setControlByte 0001  
                    ?_ECANReceiveMessage 000F                  ?_vscp_handleSetNickname 0001  
                       ??_doActionToggle 00C7         __size_of_vscp_getSubMinorVersion 0002  
                       ??_doActionStatus 00C7                          _vscp_node_state 0092  
                           ??_vscp_error 0008                  ECANSendMessage@msgFlags 0019  
                    vscp_getMatrixInfo@i 0008          __size_of_calculateSetFilterMask 046C  
                vscp_setControlByte@ctrl 000C                       ECANSendMessage@ptr 0035  
                      ??_init_app_eeprom 000C                    __size_of__CANIDToRegs 0150  
    __size_of_vscp_readNicknamePermanent 000A      __end_of_vscp_getBootLoaderAlgorithm 44EE  
            _vscp_getBootLoaderAlgorithm 44EC         __size_of_interrupt_at_low_vector 00A0  
                 ECANSendMessage@dataLen 0018                      __ECANPointBuffer@pt 000C  
                   ??_ECANReceiveMessage 0012                    ??_vscp_check_pstorage 000D  
                 ECANSendMessage@buffers 002E                    _vscp_goBootloaderMode 437E  
           __end_of_ECANSetOperationMode 43E4                     _vscp_restoreDefaults 44D4  
            __size_of_vscp_getFamilyCode 000A                              ??_vscp_init 000A  
                __end_of_vscp_getSubzone 44A2              __size_of_vscp_getFamilyType 000A  
                             _RXM1EXIDEN 0078EB               __end_of_vscp_writeRegister 4306  
                     __end_of_vscp_error 44E6                   ECANSendMessage@tempPtr 0031  
         __end_of_vscp_handleSetNickname 429E       vscp_handleProtocolEvent@bytes_1289 00E8  
                  ??_vscp_setControlByte 000C                     vscp_readRegister@reg 001D  
           ??_doApplicationOneSecondWork 00CC                             __CANIDToRegs 347A  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00D8  
            __size_of_vscp_getBufferSize 0002        doApplicationOneSecondWork@ctrlreg 00D0  
               __size_of_ECANSendMessage 016A                        doActionToggle@bOn 00CB  
                      doActionToggle@arg 0051  
