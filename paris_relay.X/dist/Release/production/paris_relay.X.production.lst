

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Sun Mar 22 23:01:23 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    88                           	psect	text77,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    91  0000                     
    92                           	psect	smallconst
    93  000600                     __psmallconst:
    94                           	opt stack 0
    95  000600                     _vscp_deviceURL:
    96                           	opt stack 0
    97  000600  77                 	db	119
    98  000601  77                 	db	119
    99  000602  77                 	db	119
   100  000603  2E                 	db	46
   101  000604  65                 	db	101
   102  000605  75                 	db	117
   103  000606  72                 	db	114
   104  000607  6F                 	db	111
   105  000608  73                 	db	115
   106  000609  6F                 	db	111
   107  00060A  75                 	db	117
   108  00060B  72                 	db	114
   109  00060C  63                 	db	99
   110  00060D  65                 	db	101
   111  00060E  2E                 	db	46
   112  00060F  73                 	db	115
   113  000610  65                 	db	101
   114  000611  2F                 	db	47
   115  000612  70                 	db	112
   116  000613  61                 	db	97
   117  000614  72                 	db	114
   118  000615  69                 	db	105
   119  000616  73                 	db	115
   120  000617  5F                 	db	95
   121  000618  30                 	db	48
   122  000619  31                 	db	49
   123  00061A  30                 	db	48
   124  00061B  2E                 	db	46
   125  00061C  78                 	db	120
   126  00061D  6D                 	db	109
   127  00061E  6C                 	db	108
   128  00061F  00                 	db	0
   129  000620                     __end_of_vscp_deviceURL:
   130                           	opt stack 0
   131  0000                     _BRGCON1	set	3952
   132  0000                     _BRGCON2	set	3953
   133  0000                     _BRGCON3	set	3954
   134  0000                     _BSEL0	set	3576
   135  0000                     _CANCON	set	3951
   136  0000                     _CIOCON	set	3955
   137  0000                     _ECANCON	set	3959
   138  0000                     _EEADR	set	4009
   139  0000                     _EECON1bits	set	4006
   140  0000                     _EECON2	set	4007
   141  0000                     _EEDATA	set	4008
   142  0000                     _INTCONbits	set	4082
   143  0000                     _LATBbits	set	3978
   144  0000                     _LATCbits	set	3979
   145  0000                     _MSEL0	set	3568
   146  0000                     _MSEL1	set	3569
   147  0000                     _MSEL2	set	3570
   148  0000                     _PIR2bits	set	4001
   149  0000                     _PORTA	set	3968
   150  0000                     _PORTB	set	3969
   151  0000                     _PORTC	set	3970
   152  0000                     _PORTCbits	set	3970
   153  0000                     _RXB1CONbits	set	3920
   154  0000                     _RXF0EIDH	set	3842
   155  0000                     _RXF0EIDL	set	3843
   156  0000                     _RXF0SIDH	set	3840
   157  0000                     _RXF0SIDL	set	3841
   158  0000                     _RXF1EIDH	set	3846
   159  0000                     _RXF1EIDL	set	3847
   160  0000                     _RXF1SIDL	set	3845
   161  0000                     _RXFBCON0	set	3552
   162  0000                     _RXFBCON1	set	3553
   163  0000                     _RXFBCON2	set	3554
   164  0000                     _RXFBCON3	set	3555
   165  0000                     _RXFBCON4	set	3556
   166  0000                     _RXFBCON5	set	3557
   167  0000                     _RXFBCON6	set	3558
   168  0000                     _RXFBCON7	set	3559
   169  0000                     _RXFCON0	set	3540
   170  0000                     _RXFCON1	set	3541
   171  0000                     _RXM0EIDH	set	3866
   172  0000                     _RXM0EIDL	set	3867
   173  0000                     _RXM0SIDH	set	3864
   174  0000                     _RXM0SIDL	set	3865
   175  0000                     _RXM1EIDH	set	3870
   176  0000                     _RXM1EIDL	set	3871
   177  0000                     _RXM1SIDL	set	3869
   178  0000                     _T0CON	set	4053
   179  0000                     _T0CONbits	set	4053
   180  0000                     _TMR0H	set	4055
   181  0000                     _TMR0L	set	4054
   182  0000                     _TRISA	set	3986
   183  0000                     _TRISB	set	3987
   184  0000                     _TRISC	set	3988
   185  0000                     _B0RXFUL	set	28935
   186  0000                     _B0TXEN	set	28610
   187  0000                     _B1RXFUL	set	29063
   188  0000                     _B1TXEN	set	28611
   189  0000                     _B2RXFUL	set	29191
   190  0000                     _B2TXEN	set	28612
   191  0000                     _B3RXFUL	set	29319
   192  0000                     _B3TXEN	set	28613
   193  0000                     _B4RXFUL	set	29447
   194  0000                     _B4TXEN	set	28614
   195  0000                     _B5RXFUL	set	29575
   196  0000                     _B5TXEN	set	28615
   197  0000                     _FIFOEMPTY	set	31655
   198  0000                     _IRXIF	set	32039
   199  0000                     _MDSEL0	set	31678
   200  0000                     _MDSEL1	set	31679
   201  0000                     _RXB0FILHIT0	set	31488
   202  0000                     _RXB0FUL	set	31495
   203  0000                     _RXB0IF	set	32032
   204  0000                     _RXB0OVFL	set	31655
   205  0000                     _RXB1IF	set	32033
   206  0000                     _RXB1OVFL	set	31654
   207  0000                     _RXF1EN	set	28321
   208  0000                     _RXM0EXIDM	set	30923
   209  0000                     _RXM1EXIDEN	set	30955
   210  0000                     _B0CON	set	3616
   211  0000                     _B1CON	set	3632
   212  0000                     _B2CON	set	3648
   213  0000                     _B3CON	set	3664
   214  0000                     _B4CON	set	3680
   215  0000                     _B5CON	set	3696
   216  0000                     _RXB0CON	set	3936
   217  0000                     _RXB1CON	set	3920
   218  0000                     _RXF1SIDH	set	3844
   219  0000                     _RXM1SIDH	set	3868
   220  0000                     _TXB0CON	set	3904
   221  0000                     _TXB1CON	set	3888
   222  0000                     _TXB2CON	set	3872
   223                           
   224                           ; #config settings
   225  000620  00                 	db	0	; dummy byte at the end
   226  0000                     
   227                           	psect	cinit
   228  003D20                     __pcinit:
   229                           	opt stack 0
   230  003D20                     start_initialization:
   231                           	opt stack 0
   232  003D20                     __initialization:
   233                           	opt stack 0
   234                           
   235                           ; Clear objects allocated to BANK0 (81 bytes)
   236  003D20  EE00  F060         	lfsr	0,__pbssBANK0
   237  003D24  0E51               	movlw	81
   238  003D26                     clear_0:
   239  003D26  6AEE               	clrf	postinc0,c
   240  003D28  06E8               	decf	wreg,f,c
   241  003D2A  E1FD               	bnz	clear_0
   242                           
   243                           ; Clear objects allocated to COMRAM (7 bytes)
   244  003D2C  EE00  F052         	lfsr	0,__pbssCOMRAM
   245  003D30  0E07               	movlw	7
   246  003D32                     clear_1:
   247  003D32  6AEE               	clrf	postinc0,c
   248  003D34  06E8               	decf	wreg,f,c
   249  003D36  E1FD               	bnz	clear_1
   250  003D38                     end_of_initialization:
   251                           	opt stack 0
   252  003D38                     __end_of__initialization:
   253                           	opt stack 0
   254  003D38  0E00               	movlw	low (__Lmediumconst shr (0+16))
   255  003D3A  6EF8               	movwf	tblptru,c
   256  003D3C  0100               	movlb	0
   257  003D3E  EF12  F01A         	goto	_main	;jump to C main() function
   258                           tblptru	equ	0xFF8
   259                           postinc0	equ	0xFEE
   260                           wreg	equ	0xFE8
   261                           
   262                           	psect	bssCOMRAM
   263  000052                     __pbssCOMRAM:
   264                           	opt stack 0
   265  000052                     _vscp_page_select:
   266                           	opt stack 0
   267  000052                     	ds	2
   268  000054                     __ECANRxFilterHitInfo:
   269                           	opt stack 0
   270  000054                     	ds	1
   271  000055                     _sendTimer:
   272                           	opt stack 0
   273  000055                     	ds	1
   274  000056                     _vscp_initledfunc:
   275                           	opt stack 0
   276  000056                     	ds	1
   277  000057                     _vscp_probe_address:
   278                           	opt stack 0
   279  000057                     	ds	1
   280  000058                     _vscp_statuscnt:
   281                           	opt stack 0
   282  000058                     	ds	1
   283                           tblptru	equ	0xFF8
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287                           	psect	bssBANK0
   288  000060                     __pbssBANK0:
   289                           	opt stack 0
   290  000060                     _relay_protection_timer:
   291                           	opt stack 0
   292  000060                     	ds	16
   293  000070                     _relay_pulse_timer:
   294                           	opt stack 0
   295  000070                     	ds	16
   296  000080                     _measurement_clock:
   297                           	opt stack 0
   298  000080                     	ds	4
   299  000084                     _vscp_configtimer:
   300                           	opt stack 0
   301  000084                     	ds	2
   302  000086                     _vscp_timer:
   303                           	opt stack 0
   304  000086                     	ds	2
   305  000088                     _hours:
   306                           	opt stack 0
   307  000088                     	ds	1
   308  000089                     _minutes:
   309                           	opt stack 0
   310  000089                     	ds	1
   311  00008A                     _relay_pulse_flags:
   312                           	opt stack 0
   313  00008A                     	ds	1
   314  00008B                     _seconds:
   315                           	opt stack 0
   316  00008B                     	ds	1
   317  00008C                     _vscp_alarmstatus:
   318                           	opt stack 0
   319  00008C                     	ds	1
   320  00008D                     _vscp_guid_reset:
   321                           	opt stack 0
   322  00008D                     	ds	1
   323  00008E                     _vscp_hour:
   324                           	opt stack 0
   325  00008E                     	ds	1
   326  00008F                     _vscp_initbtncnt:
   327                           	opt stack 0
   328  00008F                     	ds	1
   329  000090                     _vscp_minute:
   330                           	opt stack 0
   331  000090                     	ds	1
   332  000091                     _vscp_nickname:
   333                           	opt stack 0
   334  000091                     	ds	1
   335  000092                     _vscp_node_state:
   336                           	opt stack 0
   337  000092                     	ds	1
   338  000093                     _vscp_node_substate:
   339                           	opt stack 0
   340  000093                     	ds	1
   341  000094                     _vscp_probe_cnt:
   342                           	opt stack 0
   343  000094                     	ds	1
   344  000095                     _vscp_second:
   345                           	opt stack 0
   346  000095                     	ds	1
   347  000096                     _vscp_imsg:
   348                           	opt stack 0
   349  000096                     	ds	14
   350  0000A4                     _vscp_omsg:
   351                           	opt stack 0
   352  0000A4                     	ds	13
   353                           tblptru	equ	0xFF8
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           
   357                           	psect	cstackBANK0
   358  0000B1                     __pcstackBANK0:
   359                           	opt stack 0
   360  0000B1                     ??_sendVSCPFrame:
   361                           
   362                           ; 0 bytes @ 0x0
   363  0000B1                     	ds	20
   364  0000C5                     ?_SendInformationEvent:
   365                           	opt stack 0
   366  0000C5                     ?_vscp_sendHeartBeat:
   367                           	opt stack 0
   368  0000C5                     SendInformationEvent@eventClass:
   369                           	opt stack 0
   370  0000C5                     vscp_sendHeartBeat@subzone:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x14
   374  0000C5                     	ds	1
   375  0000C6                     SendInformationEvent@eventTypeId:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x15
   379  0000C6                     	ds	1
   380  0000C7                     ??_doActionOff:
   381  0000C7                     ??_doActionOn:
   382  0000C7                     ??_doActionStatus:
   383  0000C7                     ??_doActionToggle:
   384  0000C7                     ??_vscp_writeAppReg:
   385                           
   386                           ; 0 bytes @ 0x16
   387  0000C7                     	ds	2
   388  0000C9                     doActionOff@dmflags:
   389                           	opt stack 0
   390  0000C9                     doActionStatus@dmflags:
   391                           	opt stack 0
   392  0000C9                     doActionToggle@dmflags:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x18
   396  0000C9                     	ds	1
   397  0000CA                     vscp_writeAppReg@bInfoEvent:
   398                           	opt stack 0
   399  0000CA                     doActionOn@dmflags:
   400                           	opt stack 0
   401  0000CA                     doActionOff@val:
   402                           	opt stack 0
   403  0000CA                     doActionStatus@bOn:
   404                           	opt stack 0
   405  0000CA                     doActionToggle@val:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x19
   409  0000CA                     	ds	1
   410  0000CB                     vscp_writeAppReg@val_678:
   411                           	opt stack 0
   412  0000CB                     doActionOn@val:
   413                           	opt stack 0
   414  0000CB                     doActionOff@i:
   415                           	opt stack 0
   416  0000CB                     doActionStatus@val:
   417                           	opt stack 0
   418  0000CB                     doActionToggle@bOn:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x1A
   422  0000CB                     	ds	1
   423  0000CC                     ??_doApplicationOneSecondWork:
   424  0000CC                     vscp_writeAppReg@bOn:
   425                           	opt stack 0
   426  0000CC                     doActionOn@i:
   427                           	opt stack 0
   428  0000CC                     doActionStatus@i:
   429                           	opt stack 0
   430  0000CC                     doActionToggle@i:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x1B
   434  0000CC                     	ds	1
   435  0000CD                     ??_doDM:
   436  0000CD                     vscp_writeAppReg@rv:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x1C
   440  0000CD                     	ds	1
   441  0000CE                     vscp_writeAppReg@reg:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x1D
   445  0000CE                     	ds	1
   446  0000CF                     ?_vscp_writeRegister:
   447                           	opt stack 0
   448  0000CF                     doApplicationOneSecondWork@bOn:
   449                           	opt stack 0
   450  0000CF                     vscp_writeRegister@value:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x1E
   454  0000CF                     	ds	1
   455  0000D0                     doApplicationOneSecondWork@ctrlreg:
   456                           	opt stack 0
   457  0000D0                     vscp_writeRegister@reg:
   458                           	opt stack 0
   459  0000D0                     doDM@class_filter:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x1F
   463  0000D0                     	ds	1
   464  0000D1                     ??_vscp_handleProtocolEvent:
   465  0000D1                     doApplicationOneSecondWork@i:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x20
   469  0000D1                     	ds	1
   470  0000D2                     doDM@class_mask:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x21
   474  0000D2                     	ds	2
   475  0000D4                     doDM@type_filter:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x23
   479  0000D4                     	ds	1
   480  0000D5                     doDM@type_mask:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x24
   484  0000D5                     	ds	1
   485  0000D6                     _doDM$2146:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x25
   489  0000D6                     	ds	1
   490  0000D7                     _doDM$2147:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0x26
   494  0000D7                     	ds	1
   495  0000D8                     _doDM$2148:
   496                           	opt stack 0
   497  0000D8                     vscp_handleProtocolEvent@page_save:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x27
   501  0000D8                     	ds	1
   502  0000D9                     _doDM$2149:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x28
   506  0000D9                     	ds	1
   507  0000DA                     _doDM$2150:
   508                           	opt stack 0
   509  0000DA                     vscp_handleProtocolEvent@page_save_1290:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x29
   513  0000DA                     	ds	1
   514  0000DB                     _doDM$2151:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x2A
   518  0000DB                     	ds	1
   519  0000DC                     doDM@dmflags:
   520                           	opt stack 0
   521  0000DC                     vscp_handleProtocolEvent@offset:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x2B
   525  0000DC                     	ds	1
   526  0000DD                     doDM@i:
   527                           	opt stack 0
   528  0000DD                     vscp_handleProtocolEvent@pos:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x2C
   532  0000DD                     	ds	1
   533  0000DE                     vscp_handleProtocolEvent@bytes:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x2D
   537  0000DE                     	ds	1
   538  0000DF                     vscp_handleProtocolEvent@len:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x2E
   542  0000DF                     	ds	1
   543  0000E0                     vscp_handleProtocolEvent@pos_1279:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x2F
   547  0000E0                     	ds	1
   548  0000E1                     vscp_handleProtocolEvent@len_1280:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x30
   552  0000E1                     	ds	1
   553  0000E2                     vscp_handleProtocolEvent@bytes_this_time:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x31
   557  0000E2                     	ds	1
   558  0000E3                     vscp_handleProtocolEvent@cb:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x32
   562  0000E3                     	ds	1
   563  0000E4                     vscp_handleProtocolEvent@i_1289:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x33
   567  0000E4                     	ds	1
   568  0000E5                     vscp_handleProtocolEvent@k:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x34
   572  0000E5                     	ds	1
   573  0000E6                     vscp_handleProtocolEvent@bytes_1286:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x35
   577  0000E6                     	ds	1
   578  0000E7                     vscp_handleProtocolEvent@i_1278:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x36
   582  0000E7                     	ds	1
   583  0000E8                     vscp_handleProtocolEvent@byte:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0x37
   587  0000E8                     	ds	1
   588  0000E9                     vscp_handleProtocolEvent@i_1281:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x38
   592  0000E9                     	ds	1
   593  0000EA                     vscp_handleProtocolEvent@i:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x39
   597  0000EA                     	ds	1
   598  0000EB                     vscp_handleProtocolEvent@j:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x3A
   602  0000EB                     	ds	1
   603                           tblptru	equ	0xFF8
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           
   607                           	psect	cstackCOMRAM
   608  000001                     __pcstackCOMRAM:
   609                           	opt stack 0
   610  000001                     ?i1_WriteTimer0:
   611                           	opt stack 0
   612  000001                     i1WriteTimer0@timer0:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x0
   616  000001                     	ds	2
   617  000003                     i1WriteTimer0@timer:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x2
   621  000003                     	ds	2
   622  000005                     ??_interrupt_at_low_vector:
   623                           
   624                           ; 0 bytes @ 0x4
   625  000005                     	ds	3
   626  000008                     ?_WriteTimer0:
   627                           	opt stack 0
   628  000008                     ?_writeEEPROM:
   629                           	opt stack 0
   630  000008                     ?__CANIDToRegs:
   631                           	opt stack 0
   632  000008                     ?__RegsToCANID:
   633                           	opt stack 0
   634  000008                     ??_vscp_getMDF_URL:
   635  000008                     ?_readEEPROM:
   636                           	opt stack 0
   637  000008                     ?___lbmod:
   638                           	opt stack 0
   639  000008                     ?__ECANPointBuffer:
   640                           	opt stack 0
   641  000008                     ?_vscp_getFamilyCode:
   642                           	opt stack 0
   643  000008                     ?_vscp_getFamilyType:
   644                           	opt stack 0
   645  000008                     vscp_getMatrixInfo@i:
   646                           	opt stack 0
   647  000008                     ECANSetOperationMode@mode:
   648                           	opt stack 0
   649  000008                     OpenTimer0@config:
   650                           	opt stack 0
   651  000008                     ___lbmod@divisor:
   652                           	opt stack 0
   653  000008                     __CANIDToRegs@ptr:
   654                           	opt stack 0
   655  000008                     __RegsToCANID@ptr:
   656                           	opt stack 0
   657  000008                     writeEEPROM@address:
   658                           	opt stack 0
   659  000008                     readEEPROM@address:
   660                           	opt stack 0
   661  000008                     WriteTimer0@timer0:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x7
   665  000008                     	ds	1
   666  000009                     vscp_getMDF_URL@idx:
   667                           	opt stack 0
   668  000009                     ___lbmod@dividend:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x8
   672  000009                     	ds	1
   673  00000A                     __RegsToCANID@val:
   674                           	opt stack 0
   675  00000A                     writeEEPROM@data:
   676                           	opt stack 0
   677  00000A                     readEEPROM@data:
   678                           	opt stack 0
   679  00000A                     ___lbmod@counter:
   680                           	opt stack 0
   681  00000A                     WriteTimer0@timer:
   682                           	opt stack 0
   683  00000A                     __CANIDToRegs@val:
   684                           	opt stack 0
   685                           
   686                           ; 4 bytes @ 0x9
   687  00000A                     	ds	1
   688  00000B                     ??_init_app_eeprom:
   689  00000B                     ??_init_app_ram:
   690  00000B                     ?_doActionPulse:
   691                           	opt stack 0
   692  00000B                     ?_doActionDisable:
   693                           	opt stack 0
   694  00000B                     ?_vscp_setGUID:
   695                           	opt stack 0
   696  00000B                     ?_vscp_setManufacturerId:
   697                           	opt stack 0
   698  00000B                     ?_vscp_setUserID:
   699                           	opt stack 0
   700  00000B                     vscp_setGUID@data:
   701                           	opt stack 0
   702  00000B                     vscp_setManufacturerId@data:
   703                           	opt stack 0
   704  00000B                     vscp_writeNicknamePermanent@nickname:
   705                           	opt stack 0
   706  00000B                     vscp_readAppReg@rv:
   707                           	opt stack 0
   708  00000B                     doActionPulse@arg:
   709                           	opt stack 0
   710  00000B                     doActionDisable@arg:
   711                           	opt stack 0
   712  00000B                     vscp_getGUID@idx:
   713                           	opt stack 0
   714  00000B                     vscp_getUserID@idx:
   715                           	opt stack 0
   716  00000B                     vscp_setUserID@data:
   717                           	opt stack 0
   718  00000B                     vscp_getManufacturerId@idx:
   719                           	opt stack 0
   720  00000B                     vscp_setSegmentCRC@crc:
   721                           	opt stack 0
   722  00000B                     vscp_setControlByte@ctrl:
   723                           	opt stack 0
   724  00000B                     vscp_goBootloaderMode@algorithm:
   725                           	opt stack 0
   726  00000B                     __RegsToCANID@type:
   727                           	opt stack 0
   728  00000B                     __ECANPointBuffer@b:
   729                           	opt stack 0
   730  00000B                     ___lbmod@rem:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0xA
   734  00000B                     	ds	1
   735  00000C                     ??_doActionPulse:
   736  00000C                     ??_doActionDisable:
   737  00000C                     ??__RegsToCANID:
   738  00000C                     vscp_setGUID@idx:
   739                           	opt stack 0
   740  00000C                     vscp_setManufacturerId@idx:
   741                           	opt stack 0
   742  00000C                     vscp_readAppReg@reg:
   743                           	opt stack 0
   744  00000C                     vscp_setUserID@idx:
   745                           	opt stack 0
   746  00000C                     vscp_handleDropNickname@bytes:
   747                           	opt stack 0
   748  00000C                     vscp_readStdReg@rv:
   749                           	opt stack 0
   750  00000C                     __ECANPointBuffer@pt:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0xB
   754  00000C                     	ds	1
   755  00000D                     init_app_ram@i:
   756                           	opt stack 0
   757  00000D                     init_app_eeprom@i:
   758                           	opt stack 0
   759  00000D                     vscp_readStdReg@reg:
   760                           	opt stack 0
   761                           
   762                           ; 1 bytes @ 0xC
   763  00000D                     	ds	1
   764  00000E                     init_app_eeprom@j:
   765                           	opt stack 0
   766  00000E                     doActionDisable@dmflags:
   767                           	opt stack 0
   768  00000E                     __CANIDToRegs@type:
   769                           	opt stack 0
   770  00000E                     __RegsToCANID@Value:
   771                           	opt stack 0
   772  00000E                     vscp_readRegister@reg:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0xD
   776  00000E                     	ds	1
   777  00000F                     ??__CANIDToRegs:
   778  00000F                     ?_ECANReceiveMessage:
   779                           	opt stack 0
   780  00000F                     ?_vscp_writeStdReg:
   781                           	opt stack 0
   782  00000F                     doActionPulse@dmflags:
   783                           	opt stack 0
   784  00000F                     doActionDisable@val:
   785                           	opt stack 0
   786  00000F                     ECANReceiveMessage@data:
   787                           	opt stack 0
   788  00000F                     vscp_writeStdReg@value:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0xE
   792  00000F                     	ds	1
   793  000010                     ??_vscp_writeStdReg:
   794  000010                     doActionPulse@val:
   795                           	opt stack 0
   796  000010                     doActionDisable@i:
   797                           	opt stack 0
   798  000010                     ECANReceiveMessage@dataLen:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0xF
   802  000010                     	ds	1
   803  000011                     doActionPulse@i:
   804                           	opt stack 0
   805  000011                     ECANReceiveMessage@msgFlags:
   806                           	opt stack 0
   807  000011                     __CANIDToRegs@Value:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x10
   811  000011                     	ds	1
   812  000012                     ??_calculateSetFilterMask:
   813  000012                     ?_ECANSendMessage:
   814                           	opt stack 0
   815  000012                     ECANReceiveMessage@savedPtr:
   816                           	opt stack 0
   817  000012                     ECANSendMessage@id:
   818                           	opt stack 0
   819                           
   820                           ; 4 bytes @ 0x11
   821  000012                     	ds	2
   822  000014                     ECANReceiveMessage@id:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0x13
   826  000014                     	ds	1
   827  000015                     ECANReceiveMessage@i:
   828                           	opt stack 0
   829  000015                     vscp_writeStdReg@code:
   830                           	opt stack 0
   831                           
   832                           ; 4 bytes @ 0x14
   833  000015                     	ds	1
   834  000016                     ECANReceiveMessage@mode:
   835                           	opt stack 0
   836  000016                     ECANSendMessage@data:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x15
   840  000016                     	ds	1
   841  000017                     ECANReceiveMessage@temp:
   842                           	opt stack 0
   843                           
   844                           ; 1 bytes @ 0x16
   845  000017                     	ds	1
   846  000018                     ECANSendMessage@dataLen:
   847                           	opt stack 0
   848  000018                     ECANReceiveMessage@ptr:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x17
   852  000018                     	ds	1
   853  000019                     ECANSendMessage@msgFlags:
   854                           	opt stack 0
   855  000019                     vscp_writeStdReg@code_1270:
   856                           	opt stack 0
   857                           
   858                           ; 4 bytes @ 0x18
   859  000019                     	ds	1
   860  00001A                     ??_ECANSendMessage:
   861  00001A                     ?_getCANFrame:
   862                           	opt stack 0
   863  00001A                     getCANFrame@pdlc:
   864                           	opt stack 0
   865                           
   866                           ; 1 bytes @ 0x19
   867  00001A                     	ds	1
   868  00001B                     getCANFrame@pdata:
   869                           	opt stack 0
   870  00001B                     ECANSendMessage@pb:
   871                           	opt stack 0
   872                           
   873                           ; 18 bytes @ 0x1A
   874  00001B                     	ds	1
   875  00001C                     getCANFrame@pid:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x1B
   879  00001C                     	ds	1
   880  00001D                     getCANFrame@flags:
   881                           	opt stack 0
   882  00001D                     vscp_writeStdReg@idx:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0x1C
   886  00001D                     	ds	1
   887  00001E                     ?_getVSCPFrame:
   888                           	opt stack 0
   889  00001E                     getVSCPFrame@pvscptype:
   890                           	opt stack 0
   891  00001E                     vscp_writeStdReg@idx_1271:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x1D
   895  00001E                     	ds	1
   896  00001F                     getVSCPFrame@pNodeId:
   897                           	opt stack 0
   898  00001F                     vscp_writeStdReg@rv:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x1E
   902  00001F                     	ds	1
   903  000020                     getVSCPFrame@pPriority:
   904                           	opt stack 0
   905  000020                     vscp_writeStdReg@reg:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x1F
   909  000020                     	ds	1
   910  000021                     getVSCPFrame@pSize:
   911                           	opt stack 0
   912                           
   913                           ; 1 bytes @ 0x20
   914  000021                     	ds	1
   915  000022                     getVSCPFrame@pData:
   916                           	opt stack 0
   917                           
   918                           ; 1 bytes @ 0x21
   919  000022                     	ds	1
   920  000023                     ??_getVSCPFrame:
   921                           
   922                           ; 0 bytes @ 0x22
   923  000023                     	ds	4
   924  000027                     getVSCPFrame@pvscpclass:
   925                           	opt stack 0
   926                           
   927                           ; 1 bytes @ 0x26
   928  000027                     	ds	1
   929  000028                     getVSCPFrame@id:
   930                           	opt stack 0
   931                           
   932                           ; 4 bytes @ 0x27
   933  000028                     	ds	4
   934  00002C                     vscp_getEvent@rv:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x2B
   938  00002C                     	ds	1
   939  00002D                     ECANSendMessage@mode:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x2C
   943  00002D                     	ds	1
   944  00002E                     ECANSendMessage@buffers:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x2D
   948  00002E                     	ds	1
   949  00002F                     ECANSendMessage@j:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x2E
   953  00002F                     	ds	1
   954  000030                     ECANSendMessage@tempBSEL0:
   955                           	opt stack 0
   956                           
   957                           ; 1 bytes @ 0x2F
   958  000030                     	ds	1
   959  000031                     ECANSendMessage@tempPtr:
   960                           	opt stack 0
   961  000031                     calculateSetFilterMask@rowmask:
   962                           	opt stack 0
   963                           
   964                           ; 4 bytes @ 0x30
   965  000031                     	ds	2
   966  000033                     ECANSendMessage@temp:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x32
   970  000033                     	ds	1
   971  000034                     ECANSendMessage@i:
   972                           	opt stack 0
   973                           
   974                           ; 1 bytes @ 0x33
   975  000034                     	ds	1
   976  000035                     calculateSetFilterMask@lastOID:
   977                           	opt stack 0
   978  000035                     ECANSendMessage@ptr:
   979                           	opt stack 0
   980                           
   981                           ; 2 bytes @ 0x34
   982  000035                     	ds	1
   983  000036                     calculateSetFilterMask@mask:
   984                           	opt stack 0
   985                           
   986                           ; 4 bytes @ 0x35
   987  000036                     	ds	1
   988  000037                     ?_sendCANFrame:
   989                           	opt stack 0
   990  000037                     sendCANFrame@id:
   991                           	opt stack 0
   992                           
   993                           ; 4 bytes @ 0x36
   994  000037                     	ds	3
   995  00003A                     calculateSetFilterMask@filter:
   996                           	opt stack 0
   997                           
   998                           ; 4 bytes @ 0x39
   999  00003A                     	ds	1
  1000  00003B                     sendCANFrame@dlc:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x3A
  1004  00003B                     	ds	1
  1005  00003C                     sendCANFrame@pdata:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0x3B
  1009  00003C                     	ds	2
  1010  00003E                     sendCANFrame@rv:
  1011                           	opt stack 0
  1012  00003E                     calculateSetFilterMask@rowfilter:
  1013                           	opt stack 0
  1014                           
  1015                           ; 4 bytes @ 0x3D
  1016  00003E                     	ds	1
  1017  00003F                     ?_sendVSCPFrame:
  1018                           	opt stack 0
  1019  00003F                     sendVSCPFrame@vscpclass:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x3E
  1023  00003F                     	ds	2
  1024  000041                     sendVSCPFrame@vscptype:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0x40
  1028  000041                     	ds	1
  1029  000042                     sendVSCPFrame@nodeid:
  1030                           	opt stack 0
  1031  000042                     calculateSetFilterMask@j:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x41
  1035  000042                     	ds	1
  1036  000043                     sendVSCPFrame@priority:
  1037                           	opt stack 0
  1038  000043                     calculateSetFilterMask@i:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x42
  1042  000043                     	ds	1
  1043  000044                     sendVSCPFrame@size:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x43
  1047  000044                     	ds	1
  1048  000045                     sendVSCPFrame@pData:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x44
  1052  000045                     	ds	2
  1053  000047                     sendVSCPFrame@id:
  1054                           	opt stack 0
  1055                           
  1056                           ; 4 bytes @ 0x46
  1057  000047                     	ds	4
  1058  00004B                     ??_SendInformationEvent:
  1059  00004B                     
  1060                           ; 0 bytes @ 0x4A
  1061  00004B                     	ds	1
  1062  00004C                     ??_vscp_newNodeOnline:
  1063  00004C                     vscp_sendHeartBeat@zone:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0x4B
  1067  00004C                     	ds	1
  1068  00004D                     ??_vscp_doOneSecondWork:
  1069  00004D                     SendInformationEvent@data:
  1070                           	opt stack 0
  1071                           
  1072                           ; 3 bytes @ 0x4C
  1073  00004D                     	ds	3
  1074  000050                     SendInformationEvent@idx:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x4F
  1078  000050                     	ds	1
  1079  000051                     ?_doActionOff:
  1080                           	opt stack 0
  1081  000051                     ?_doActionOn:
  1082                           	opt stack 0
  1083  000051                     ?_doActionStatus:
  1084                           	opt stack 0
  1085  000051                     ?_doActionToggle:
  1086                           	opt stack 0
  1087  000051                     ?_vscp_writeAppReg:
  1088                           	opt stack 0
  1089  000051                     vscp_writeAppReg@val:
  1090                           	opt stack 0
  1091  000051                     doActionOn@arg:
  1092                           	opt stack 0
  1093  000051                     doActionOff@arg:
  1094                           	opt stack 0
  1095  000051                     doActionStatus@arg:
  1096                           	opt stack 0
  1097  000051                     doActionToggle@arg:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x50
  1101  000051                     	ds	1
  1102  000052                     tblptru	equ	0xFF8
  1103                           postinc0	equ	0xFEE
  1104                           wreg	equ	0xFE8
  1105                           
  1106                           ; 0 bytes @ 0x51
  1107 ;;
  1108 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1109 ;;
  1110 ;; *************** function _main *****************
  1111 ;; Defined at:
  1112 ;;		line 190 in file "../main.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;		None
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;		None
  1117 ;; Return value:  Size  Location     Type
  1118 ;;		None               void
  1119 ;; Registers used:
  1120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : F/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1126 ;;      Params:         0       0       0       0       0       0       0
  1127 ;;      Locals:         0       0       0       0       0       0       0
  1128 ;;      Temps:          0       0       0       0       0       0       0
  1129 ;;      Totals:         0       0       0       0       0       0       0
  1130 ;;Total ram usage:        0 bytes
  1131 ;; Hardware stack levels required when called:   10
  1132 ;; This function calls:
  1133 ;;		_init
  1134 ;;		_vscp_check_pstorage
  1135 ;;		_init_app_eeprom
  1136 ;;		_init_app_ram
  1137 ;;		_vscp_init
  1138 ;;		_writeEEPROM
  1139 ;;		_vscp_getEvent
  1140 ;;		_vscp_goActiveState
  1141 ;;		_vscp_handleProbeState
  1142 ;;		_vscp_handleProtocolEvent
  1143 ;;		_doDM
  1144 ;;		_vscp_error
  1145 ;;		_vscp_doOneSecondWork
  1146 ;;		_doApplicationOneSecondWork
  1147 ;;		_doWork
  1148 ;; This function is called by:
  1149 ;;		Startup code after reset
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text0
  1154  003424                     __ptext0:
  1155                           	opt stack 0
  1156  003424                     _main:
  1157                           	opt stack 21
  1158                           
  1159                           ;main.c: 191: init();
  1160                           
  1161                           ;incstack = 0
  1162                           ;incstack = 0
  1163  003424  ECA8  F01D         	call	_init	;wreg free
  1164                           
  1165                           ;main.c: 195: if ( !vscp_check_pstorage() ) {
  1166  003428  EC7E  F01E         	call	_vscp_check_pstorage	;wreg free
  1167  00342C  0900               	iorlw	0
  1168  00342E  E104               	bnz	l9195
  1169                           
  1170                           ;main.c: 198: init_app_eeprom();
  1171  003430  EC2C  F00D         	call	_init_app_eeprom	;wreg free
  1172                           
  1173                           ;main.c: 199: init_app_ram();
  1174  003434  EC93  F018         	call	_init_app_ram	;wreg free
  1175  003438                     l9195:
  1176                           
  1177                           ;main.c: 202: }
  1178                           ;main.c: 204: vscp_init();
  1179  003438  EC47  F01D         	call	_vscp_init	;wreg free
  1180  00343C                     l149:
  1181                           
  1182                           ; BSR set to: 0
  1183  00343C  0004               	clrwdt		;# 
  1184                           
  1185                           ;main.c: 210: if ( ( vscp_initbtncnt > 250 ) &&
  1186                           ;main.c: 211: ( 0x01 != vscp_node_state ) ) {
  1187  00343E  0EFA               	movlw	250
  1188  003440  0100               	movlb	0	; () banked
  1189  003442  658F               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1190  003444  D00C               	goto	l9205
  1191                           
  1192                           ; BSR set to: 0
  1193  003446  0592               	decf	_vscp_node_state& (0+255),w,b
  1194  003448  E00A               	bz	l9205
  1195                           
  1196                           ; BSR set to: 0
  1197                           ;main.c: 214: vscp_nickname = 0xff;
  1198  00344A  6991               	setf	_vscp_nickname& (0+255),b
  1199                           
  1200                           ; BSR set to: 0
  1201                           ;main.c: 215: writeEEPROM( 0x01, 0xff );
  1202  00344C  6A09               	clrf	?_writeEEPROM+1,c
  1203  00344E  0E01               	movlw	1
  1204  003450  6E08               	movwf	?_writeEEPROM,c
  1205  003452  0EFF               	movlw	255
  1206  003454  680A               	setf	?_writeEEPROM+2,c
  1207  003456  EC59  F01E         	call	_writeEEPROM	;wreg free
  1208                           
  1209                           ;main.c: 216: vscp_init();
  1210  00345A  EC47  F01D         	call	_vscp_init	;wreg free
  1211  00345E                     l9205:
  1212                           
  1213                           ; BSR set to: 0
  1214                           ;main.c: 218: }
  1215                           ;main.c: 221: vscp_imsg.flags = 0;
  1216  00345E  6B96               	clrf	_vscp_imsg& (0+255),b
  1217                           
  1218                           ; BSR set to: 0
  1219                           ;main.c: 222: vscp_getEvent();
  1220  003460  EC0A  F01E         	call	_vscp_getEvent	;wreg free
  1221                           
  1222                           ;main.c: 224: switch ( vscp_node_state ) {
  1223  003464  D01C               	goto	l9229
  1224  003466                     l9209:
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;main.c: 229: if (0xff == vscp_nickname) {
  1228  003466  2991               	incf	_vscp_nickname& (0+255),w,b
  1229  003468  E103               	bnz	l9213
  1230                           
  1231                           ; BSR set to: 0
  1232                           ;main.c: 231: vscp_node_state = 0x01;
  1233  00346A  0E01               	movlw	1
  1234  00346C  6F92               	movwf	_vscp_node_state& (0+255),b
  1235                           
  1236                           ;main.c: 232: } else {
  1237  00346E  D023               	goto	l9231
  1238  003470                     l9213:
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;main.c: 234: vscp_node_state = 0x03;
  1242  003470  0E03               	movlw	3
  1243  003472  6F92               	movwf	_vscp_node_state& (0+255),b
  1244  003474                     l9215:
  1245                           
  1246                           ; BSR set to: 0
  1247                           ;main.c: 235: vscp_goActiveState();
  1248  003474  ECE4  F01E         	call	_vscp_goActiveState	;wreg free
  1249  003478  D01E               	goto	l9231
  1250  00347A                     l9217:
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;main.c: 240: vscp_handleProbeState();
  1254  00347A  ECDF  F01A         	call	_vscp_handleProbeState	;wreg free
  1255                           
  1256                           ;main.c: 241: break;
  1257  00347E  D01B               	goto	l9231
  1258  003480                     l158:
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;main.c: 250: if (vscp_imsg.flags & 0x80) {
  1262  003480  AF96               	btfss	_vscp_imsg& (0+255),7,b
  1263  003482  D019               	goto	l9231
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;main.c: 252: if ( 0 == vscp_imsg.vscp_class ) {
  1267  003484  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  1268  003486  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1269  003488  B4D8               	btfsc	status,2,c
  1270                           
  1271                           ; BSR set to: 0
  1272                           ;main.c: 255: vscp_handleProtocolEvent();
  1273  00348A  ECE8  F007         	call	_vscp_handleProtocolEvent	;wreg free
  1274                           
  1275                           ;main.c: 257: }
  1276                           ;main.c: 259: doDM();
  1277  00348E  ECE7  F00E         	call	_doDM	;wreg free
  1278  003492  D011               	goto	l9231
  1279  003494                     l9225:
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;main.c: 265: vscp_error();
  1283  003494  ECB5  F01F         	call	_vscp_error	;wreg free
  1284                           
  1285                           ;main.c: 266: break;
  1286  003498  D00E               	goto	l9231
  1287  00349A                     l162:
  1288                           
  1289                           ; BSR set to: 0
  1290                           ;main.c: 269: vscp_node_state = 0x00;
  1291  00349A  6B92               	clrf	_vscp_node_state& (0+255),b
  1292                           
  1293                           ;main.c: 270: break;
  1294  00349C  D00C               	goto	l9231
  1295  00349E                     l9229:
  1296  00349E  0100               	movlb	0	; () banked
  1297  0034A0  5192               	movf	_vscp_node_state& (0+255),w,b
  1298                           
  1299                           ; Switch size 1, requested type "speed"
  1300                           ; Number of cases is 5, Range of values is 0 to 4
  1301                           ; switch strategies available:
  1302                           ; Name         Instructions Cycles
  1303                           ; simple_byte           16     9 (average)
  1304                           ;	Chosen strategy is simple_byte
  1305  0034A2  E0E1               	bz	l9209
  1306  0034A4  0A01               	xorlw	1	; case 1
  1307  0034A6  E0E9               	bz	l9217
  1308  0034A8  0A03               	xorlw	3	; case 2
  1309  0034AA  E0E4               	bz	l9215
  1310  0034AC  0A01               	xorlw	1	; case 3
  1311  0034AE  E0E8               	bz	l158
  1312  0034B0  0A07               	xorlw	7	; case 4
  1313  0034B2  E0F0               	bz	l9225
  1314  0034B4  D7F2               	goto	l162
  1315  0034B6                     l9231:
  1316                           
  1317                           ;main.c: 275: if ( measurement_clock > 1000 ) {
  1318  0034B6  0EE9               	movlw	233
  1319  0034B8  0100               	movlb	0	; () banked
  1320  0034BA  5D80               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1321  0034BC  0E03               	movlw	3
  1322  0034BE  5981               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1323  0034C0  0E00               	movlw	0
  1324  0034C2  5982               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1325  0034C4  0E00               	movlw	0
  1326  0034C6  5983               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1327  0034C8  E30C               	bnc	l9243
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;main.c: 277: measurement_clock = 0;
  1331  0034CA  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
  1332  0034CC  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1333  0034CE  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1334  0034D0  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1335                           
  1336                           ; BSR set to: 0
  1337                           ;main.c: 279: sendTimer++;
  1338  0034D2  2A55               	incf	_sendTimer,f,c
  1339                           
  1340                           ; BSR set to: 0
  1341                           ;main.c: 282: vscp_doOneSecondWork();
  1342  0034D4  EC20  F01D         	call	_vscp_doOneSecondWork	;wreg free
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;main.c: 286: if ( 0x03 == vscp_node_state ) {
  1346  0034D8  5192               	movf	_vscp_node_state& (0+255),w,b
  1347  0034DA  0A03               	xorlw	3
  1348  0034DC  B4D8               	btfsc	status,2,c
  1349                           
  1350                           ; BSR set to: 0
  1351                           ;main.c: 289: doApplicationOneSecondWork();
  1352  0034DE  EC73  F010         	call	_doApplicationOneSecondWork	;wreg free
  1353  0034E2                     l9243:
  1354                           
  1355                           ; BSR set to: 0
  1356                           ;main.c: 291: }
  1357                           ;main.c: 293: }
  1358                           ;main.c: 296: if ( seconds > 59 ) {
  1359  0034E2  0E3B               	movlw	59
  1360  0034E4  658B               	cpfsgt	_seconds& (0+255),b
  1361  0034E6  D00B               	goto	l9259
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;main.c: 298: seconds = 0;
  1365  0034E8  6B8B               	clrf	_seconds& (0+255),b
  1366                           
  1367                           ; BSR set to: 0
  1368                           ;main.c: 299: minutes++;
  1369  0034EA  2B89               	incf	_minutes& (0+255),f,b
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;main.c: 301: if ( minutes > 59 ) {
  1373  0034EC  0E3B               	movlw	59
  1374  0034EE  6589               	cpfsgt	_minutes& (0+255),b
  1375  0034F0  D002               	goto	l9255
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;main.c: 302: minutes = 0;
  1379  0034F2  6B89               	clrf	_minutes& (0+255),b
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;main.c: 303: hours++;
  1383  0034F4  2B88               	incf	_hours& (0+255),f,b
  1384  0034F6                     l9255:
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;main.c: 304: }
  1388                           ;main.c: 306: if ( hours > 23 ) hours = 0;
  1389  0034F6  0E17               	movlw	23
  1390  0034F8  6588               	cpfsgt	_hours& (0+255),b
  1391  0034FA  D001               	goto	l9259
  1392                           
  1393                           ; BSR set to: 0
  1394  0034FC  6B88               	clrf	_hours& (0+255),b
  1395  0034FE                     l9259:
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;main.c: 308: }
  1399                           ;main.c: 310: doWork();
  1400  0034FE  ECB7  F01F         	call	_doWork	;wreg free
  1401  003502  D79C               	goto	l149
  1402  003504                     __end_of_main:
  1403                           	opt stack 0
  1404                           tblptru	equ	0xFF8
  1405                           postinc0	equ	0xFEE
  1406                           wreg	equ	0xFE8
  1407                           status	equ	0xFD8
  1408                           
  1409 ;; *************** function _doWork *****************
  1410 ;; Defined at:
  1411 ;;		line 887 in file "../main.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;		None
  1414 ;; Auto vars:     Size  Location     Type
  1415 ;;		None
  1416 ;; Return value:  Size  Location     Type
  1417 ;;		None               void
  1418 ;; Registers used:
  1419 ;;		wreg, status,2, status,0
  1420 ;; Tracked objects:
  1421 ;;		On entry : F/0
  1422 ;;		On exit  : F/0
  1423 ;;		Unchanged: F/0
  1424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1425 ;;      Params:         0       0       0       0       0       0       0
  1426 ;;      Locals:         0       0       0       0       0       0       0
  1427 ;;      Temps:          0       0       0       0       0       0       0
  1428 ;;      Totals:         0       0       0       0       0       0       0
  1429 ;;Total ram usage:        0 bytes
  1430 ;; Hardware stack levels used:    1
  1431 ;; Hardware stack levels required when called:    2
  1432 ;; This function calls:
  1433 ;;		Nothing
  1434 ;; This function is called by:
  1435 ;;		_main
  1436 ;; This function uses a non-reentrant model
  1437 ;;
  1438                           
  1439                           	psect	text1
  1440  003F6E                     __ptext1:
  1441                           	opt stack 0
  1442  003F6E                     _doWork:
  1443                           	opt stack 28
  1444                           
  1445                           ; BSR set to: 0
  1446                           
  1447                           ; BSR set to: 0
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;incstack = 0
  1451                           ;incstack = 0
  1452  003F6E  0012               	return	
  1453  003F70                     __end_of_doWork:
  1454                           	opt stack 0
  1455                           tblptru	equ	0xFF8
  1456                           postinc0	equ	0xFEE
  1457                           wreg	equ	0xFE8
  1458                           status	equ	0xFD8
  1459                           
  1460 ;; *************** function _doApplicationOneSecondWork *****************
  1461 ;; Defined at:
  1462 ;;		line 592 in file "../main.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;		None
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;  i               1   32[BANK0 ] unsigned char 
  1467 ;;  ctrlreg         1   31[BANK0 ] unsigned char 
  1468 ;;  bOn             1   30[BANK0 ] enum E15660
  1469 ;; Return value:  Size  Location     Type
  1470 ;;		None               void
  1471 ;; Registers used:
  1472 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1473 ;; Tracked objects:
  1474 ;;		On entry : F/0
  1475 ;;		On exit  : F/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1478 ;;      Params:         0       0       0       0       0       0       0
  1479 ;;      Locals:         0       3       0       0       0       0       0
  1480 ;;      Temps:          0       3       0       0       0       0       0
  1481 ;;      Totals:         0       6       0       0       0       0       0
  1482 ;;Total ram usage:        6 bytes
  1483 ;; Hardware stack levels used:    1
  1484 ;; Hardware stack levels required when called:    8
  1485 ;; This function calls:
  1486 ;;		_readEEPROM
  1487 ;;		_doActionOff
  1488 ;;		_SendInformationEvent
  1489 ;; This function is called by:
  1490 ;;		_main
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           	psect	text2
  1495  0020E6                     __ptext2:
  1496                           	opt stack 0
  1497  0020E6                     _doApplicationOneSecondWork:
  1498                           	opt stack 22
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;main.c: 594: uint8_t i;
  1502                           ;main.c: 595: uint8_t ctrlreg;
  1503                           ;main.c: 596: BOOL bOn = 0;
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;incstack = 0
  1507                           ;incstack = 0
  1508  0020E6  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1509                           
  1510                           ;main.c: 598: for ( i = 0; i < 8; i++ ) {
  1511  0020E8  6BD1               	clrf	doApplicationOneSecondWork@i& (0+255),b
  1512  0020EA                     l9751:
  1513                           
  1514                           ; BSR set to: 0
  1515  0020EA  0E07               	movlw	7
  1516  0020EC  65D1               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  1517  0020EE  D001               	goto	l9755
  1518  0020F0  D172               	goto	l234
  1519  0020F2                     l9755:
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;main.c: 601: ctrlreg = readEEPROM( 0x43 + 10 + i );
  1523  0020F2  0E4D               	movlw	77
  1524  0020F4  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1525  0020F6  6E08               	movwf	?_readEEPROM,c
  1526  0020F8  6A09               	clrf	?_readEEPROM+1,c
  1527  0020FA  0E00               	movlw	0
  1528  0020FC  2209               	addwfc	?_readEEPROM+1,f,c
  1529  0020FE  EC81  F01F         	call	_readEEPROM	;wreg free
  1530  002102  0100               	movlb	0	; () banked
  1531  002104  6FD0               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;main.c: 604: if ( !( ctrlreg & 0x80 ) ) continue;
  1535  002106  AFD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  1536  002108  D164               	goto	l9839
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;main.c: 608: if ( relay_protection_timer[ i ] ) {
  1540                           
  1541                           ; BSR set to: 0
  1542  00210A  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1543  00210C  0D02               	mullw	2
  1544  00210E  50F3               	movf	prodl,w,c
  1545  002110  0F60               	addlw	low _relay_protection_timer
  1546  002112  6ED9               	movwf	fsr2l,c
  1547  002114  6ADA               	clrf	fsr2h,c
  1548  002116  50DE               	movf	postinc2,w,c
  1549  002118  10DD               	iorwf	postdec2,w,c
  1550  00211A  E037               	bz	l9773
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;main.c: 610: relay_protection_timer[ i ]--;
  1554  00211C  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1555  00211E  0D02               	mullw	2
  1556  002120  50F3               	movf	prodl,w,c
  1557  002122  0F60               	addlw	low _relay_protection_timer
  1558  002124  6ED9               	movwf	fsr2l,c
  1559  002126  6ADA               	clrf	fsr2h,c
  1560  002128  06DE               	decf	postinc2,f,c
  1561  00212A  0E00               	movlw	0
  1562  00212C  5ADD               	subwfb	postdec2,f,c
  1563                           
  1564                           ;main.c: 613: if ( !relay_protection_timer[ i ] &&
  1565                           ;main.c: 614: ( readEEPROM( 0x43 + 10 + i ) &
  1566                           ;main.c: 615: 0x04 ) ) {
  1567  00212E  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1568  002130  0D02               	mullw	2
  1569  002132  50F3               	movf	prodl,w,c
  1570  002134  0F60               	addlw	low _relay_protection_timer
  1571  002136  6ED9               	movwf	fsr2l,c
  1572  002138  6ADA               	clrf	fsr2h,c
  1573  00213A  50DE               	movf	postinc2,w,c
  1574  00213C  10DD               	iorwf	postdec2,w,c
  1575  00213E  E146               	bnz	l9775
  1576                           
  1577                           ; BSR set to: 0
  1578  002140  0E4D               	movlw	77
  1579  002142  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1580  002144  6E08               	movwf	?_readEEPROM,c
  1581  002146  6A09               	clrf	?_readEEPROM+1,c
  1582  002148  0E00               	movlw	0
  1583  00214A  2209               	addwfc	?_readEEPROM+1,f,c
  1584  00214C  EC81  F01F         	call	_readEEPROM	;wreg free
  1585  002150  0100               	movlb	0	; () banked
  1586  002152  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1587  002154  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1588  002156  D03A               	goto	l9775
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;main.c: 618: doActionOff( 0, (1 << i) );
  1592  002158  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1593  00215C  0E01               	movlw	1
  1594  00215E  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1595  002160  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1596  002162  D002               	goto	u12024
  1597  002164                     u12025:
  1598  002164  90D8               	bcf	status,0,c
  1599  002166  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1600  002168                     u12024:
  1601  002168  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1602  00216A  D7FC               	goto	u12025
  1603  00216C  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1604  00216E  6E51               	movwf	?_doActionOff,c
  1605  002170  0E00               	movlw	0
  1606  002172  EC82  F01A         	call	_doActionOff
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;main.c: 621: if ( ctrlreg & 0x02 ) {
  1610  002176  A3D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  1611  002178  D029               	goto	l9775
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;main.c: 622: SendInformationEvent( i, 1,
  1615                           ;main.c: 623: 2 );
  1616  00217A  0E01               	movlw	1
  1617  00217C  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1618  00217E  0E02               	movlw	2
  1619  002180  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1620  002182  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1621  002184  ECEA  F01C         	call	_SendInformationEvent
  1622  002188  D021               	goto	l9775
  1623  00218A                     l9773:
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;main.c: 628: else {
  1627                           ;main.c: 630: relay_protection_timer[ i ] =
  1628                           ;main.c: 631: readEEPROM(0x43 + 34 + i ) * 256 +
  1629                           ;main.c: 632: readEEPROM(0x43 + 35 + i );
  1630  00218A  0E65               	movlw	101
  1631  00218C  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1632  00218E  6E08               	movwf	?_readEEPROM,c
  1633  002190  6A09               	clrf	?_readEEPROM+1,c
  1634  002192  0E00               	movlw	0
  1635  002194  2209               	addwfc	?_readEEPROM+1,f,c
  1636  002196  EC81  F01F         	call	_readEEPROM	;wreg free
  1637  00219A  0100               	movlb	0	; () banked
  1638  00219C  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1639  00219E  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1640  0021A0  0E66               	movlw	102
  1641  0021A2  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1642  0021A4  6E08               	movwf	?_readEEPROM,c
  1643  0021A6  6A09               	clrf	?_readEEPROM+1,c
  1644  0021A8  0E00               	movlw	0
  1645  0021AA  2209               	addwfc	?_readEEPROM+1,f,c
  1646  0021AC  EC81  F01F         	call	_readEEPROM	;wreg free
  1647  0021B0  0100               	movlb	0	; () banked
  1648  0021B2  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1649  0021B4  0E00               	movlw	0
  1650  0021B6  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1651  0021B8  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1652  0021BA  0D02               	mullw	2
  1653  0021BC  50F3               	movf	prodl,w,c
  1654  0021BE  0F60               	addlw	low _relay_protection_timer
  1655  0021C0  6ED9               	movwf	fsr2l,c
  1656  0021C2  6ADA               	clrf	fsr2h,c
  1657  0021C4  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1658  0021C8  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1659  0021CC                     l9775:
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;main.c: 633: }
  1663                           ;main.c: 636: if ( relay_pulse_flags & (1 << i) ) {
  1664  0021CC  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1665  0021D0  0E01               	movlw	1
  1666  0021D2  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1667  0021D4  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1668  0021D6  D002               	goto	u12044
  1669  0021D8                     u12045:
  1670  0021D8  90D8               	bcf	status,0,c
  1671  0021DA  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1672  0021DC                     u12044:
  1673  0021DC  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1674  0021DE  D7FC               	goto	u12045
  1675  0021E0  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1676  0021E2  158A               	andwf	_relay_pulse_flags& (0+255),w,b
  1677  0021E4  E101 D0F5          	bz	l9839
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;main.c: 638: if ( relay_pulse_timer[ i ] ) {
  1681  0021E8  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1682  0021EA  0D02               	mullw	2
  1683  0021EC  50F3               	movf	prodl,w,c
  1684  0021EE  0F70               	addlw	low _relay_pulse_timer
  1685  0021F0  6ED9               	movwf	fsr2l,c
  1686  0021F2  6ADA               	clrf	fsr2h,c
  1687  0021F4  50DE               	movf	postinc2,w,c
  1688  0021F6  10DD               	iorwf	postdec2,w,c
  1689  0021F8  E101 D0CC          	bz	l9837
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;main.c: 640: relay_pulse_timer[ i ]--;
  1693  0021FC  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1694  0021FE  0D02               	mullw	2
  1695  002200  50F3               	movf	prodl,w,c
  1696  002202  0F70               	addlw	low _relay_pulse_timer
  1697  002204  6ED9               	movwf	fsr2l,c
  1698  002206  6ADA               	clrf	fsr2h,c
  1699  002208  06DE               	decf	postinc2,f,c
  1700  00220A  0E00               	movlw	0
  1701  00220C  5ADD               	subwfb	postdec2,f,c
  1702                           
  1703                           ;main.c: 643: if ( !relay_pulse_timer[ i ] ) {
  1704  00220E  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1705  002210  0D02               	mullw	2
  1706  002212  50F3               	movf	prodl,w,c
  1707  002214  0F70               	addlw	low _relay_pulse_timer
  1708  002216  6ED9               	movwf	fsr2l,c
  1709  002218  6ADA               	clrf	fsr2h,c
  1710  00221A  50DE               	movf	postinc2,w,c
  1711  00221C  10DD               	iorwf	postdec2,w,c
  1712  00221E  E02E               	bz	l9813
  1713  002220  D0D8               	goto	l9839
  1714  002222                     l204:
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;main.c: 648: if ( LATBbits.LATB4 ) {
  1718  002222  A88A               	btfss	3978,4,c	;volatile
  1719  002224  D002               	goto	l205
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;main.c: 649: LATBbits.LATB4 = 0;
  1723  002226  988A               	bcf	3978,4,c	;volatile
  1724  002228  D025               	goto	L6
  1725  00222A                     l205:
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;main.c: 652: LATBbits.LATB4 = 1;
  1729  00222A  888A               	bsf	3978,4,c	;volatile
  1730  00222C                     l9785:
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;main.c: 653: bOn = 1;
  1734  00222C  0E01               	movlw	1
  1735  00222E  6FCF               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  1736  002230  D033               	goto	l9815
  1737  002232                     l208:
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;main.c: 658: if ( LATBbits.LATB1 ) {
  1741  002232  A28A               	btfss	3978,1,c	;volatile
  1742  002234  D002               	goto	l209
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;main.c: 659: LATBbits.LATB1 = 0;
  1746  002236  928A               	bcf	3978,1,c	;volatile
  1747  002238  D01D               	goto	L6
  1748  00223A                     l209:
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;main.c: 662: LATBbits.LATB1 = 1;
  1752  00223A  828A               	bsf	3978,1,c	;volatile
  1753  00223C  D7F7               	goto	l9785
  1754  00223E                     l211:
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;main.c: 668: if ( LATBbits.LATB0 ) {
  1758  00223E  A08A               	btfss	3978,0,c	;volatile
  1759  002240  D002               	goto	l212
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;main.c: 669: LATBbits.LATB0 = 0;
  1763  002242  908A               	bcf	3978,0,c	;volatile
  1764  002244  D017               	goto	L6
  1765  002246                     l212:
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;main.c: 672: LATBbits.LATB0 = 1;
  1769  002246  808A               	bsf	3978,0,c	;volatile
  1770  002248  D7F1               	goto	l9785
  1771  00224A                     l214:
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;main.c: 678: if ( LATCbits.LATC7 ) {
  1775  00224A  AE8B               	btfss	3979,7,c	;volatile
  1776  00224C  D002               	goto	l215
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;main.c: 679: LATCbits.LATC7 = 0;
  1780  00224E  9E8B               	bcf	3979,7,c	;volatile
  1781  002250  D011               	goto	L6
  1782  002252                     l215:
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;main.c: 682: LATCbits.LATC7 = 1;
  1786  002252  8E8B               	bsf	3979,7,c	;volatile
  1787  002254  D7EB               	goto	l9785
  1788  002256                     l217:
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;main.c: 688: if ( LATCbits.LATC6 ) {
  1792  002256  AC8B               	btfss	3979,6,c	;volatile
  1793  002258  D002               	goto	l218
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;main.c: 689: LATCbits.LATC6 = 0;
  1797  00225A  9C8B               	bcf	3979,6,c	;volatile
  1798  00225C  D00B               	goto	L6
  1799  00225E                     l218:
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;main.c: 692: LATCbits.LATC6 = 1;
  1803  00225E  8C8B               	bsf	3979,6,c	;volatile
  1804  002260  D7E5               	goto	l9785
  1805  002262                     l220:
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;main.c: 698: if ( LATCbits.LATC5 ) {
  1809  002262  AA8B               	btfss	3979,5,c	;volatile
  1810  002264  D002               	goto	l221
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;main.c: 699: LATCbits.LATC5 = 0;
  1814  002266  9A8B               	bcf	3979,5,c	;volatile
  1815  002268  D005               	goto	L6
  1816  00226A                     l221:
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;main.c: 702: LATCbits.LATC5 = 1;
  1820  00226A  8A8B               	bsf	3979,5,c	;volatile
  1821  00226C  D7DF               	goto	l9785
  1822  00226E                     l223:
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;main.c: 708: if ( LATCbits.LATC4 ) {
  1826  00226E  A88B               	btfss	3979,4,c	;volatile
  1827  002270  D003               	goto	l224
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;main.c: 709: LATCbits.LATC4 = 0;
  1831  002272  988B               	bcf	3979,4,c	;volatile
  1832  002274                     L6:
  1833                           
  1834                           ;main.c: 710: bOn = 0;
  1835  002274  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1836                           
  1837                           ;main.c: 711: } else {
  1838  002276  D010               	goto	l9815
  1839  002278                     l224:
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;main.c: 712: LATCbits.LATC4 = 1;
  1843  002278  888B               	bsf	3979,4,c	;volatile
  1844  00227A  D7D8               	goto	l9785
  1845  00227C                     l9813:
  1846                           
  1847                           ; BSR set to: 0
  1848  00227C  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1849                           
  1850                           ; Switch size 1, requested type "speed"
  1851                           ; Number of cases is 7, Range of values is 0 to 6
  1852                           ; switch strategies available:
  1853                           ; Name         Instructions Cycles
  1854                           ; simple_byte           22    12 (average)
  1855                           ;	Chosen strategy is simple_byte
  1856  00227E  E0D1               	bz	l204
  1857  002280  0A01               	xorlw	1	; case 1
  1858  002282  E0D7               	bz	l208
  1859  002284  0A03               	xorlw	3	; case 2
  1860  002286  E0DB               	bz	l211
  1861  002288  0A01               	xorlw	1	; case 3
  1862  00228A  E0DF               	bz	l214
  1863  00228C  0A07               	xorlw	7	; case 4
  1864  00228E  E0E3               	bz	l217
  1865  002290  0A01               	xorlw	1	; case 5
  1866  002292  E0E7               	bz	l220
  1867  002294  0A03               	xorlw	3	; case 6
  1868  002296  E0EB               	bz	l223
  1869  002298                     l9815:
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;main.c: 720: relay_pulse_timer[ i ] =
  1873                           ;main.c: 721: readEEPROM( 0x43 +
  1874                           ;main.c: 722: 18 + 2*i ) * 256 +
  1875                           ;main.c: 723: readEEPROM( 0x43 +
  1876                           ;main.c: 724: 19 + 2*i );
  1877  002298  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1878  00229A  0D02               	mullw	2
  1879  00229C  0E55               	movlw	85
  1880  00229E  24F3               	addwf	prodl,w,c
  1881  0022A0  6E08               	movwf	?_readEEPROM,c
  1882  0022A2  0E00               	movlw	0
  1883  0022A4  20F4               	addwfc	prodh,w,c
  1884  0022A6  6E09               	movwf	?_readEEPROM+1,c
  1885  0022A8  EC81  F01F         	call	_readEEPROM	;wreg free
  1886  0022AC  0100               	movlb	0	; () banked
  1887  0022AE  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1888  0022B0  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1889  0022B2  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1890  0022B4  0D02               	mullw	2
  1891  0022B6  0E56               	movlw	86
  1892  0022B8  24F3               	addwf	prodl,w,c
  1893  0022BA  6E08               	movwf	?_readEEPROM,c
  1894  0022BC  0E00               	movlw	0
  1895  0022BE  20F4               	addwfc	prodh,w,c
  1896  0022C0  6E09               	movwf	?_readEEPROM+1,c
  1897  0022C2  EC81  F01F         	call	_readEEPROM	;wreg free
  1898  0022C6  0100               	movlb	0	; () banked
  1899  0022C8  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1900  0022CA  0E00               	movlw	0
  1901  0022CC  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1902  0022CE  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1903  0022D0  0D02               	mullw	2
  1904  0022D2  50F3               	movf	prodl,w,c
  1905  0022D4  0F70               	addlw	low _relay_pulse_timer
  1906  0022D6  6ED9               	movwf	fsr2l,c
  1907  0022D8  6ADA               	clrf	fsr2h,c
  1908  0022DA  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1909  0022DE  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1910                           
  1911                           ; BSR set to: 0
  1912                           ;main.c: 726: if ( bOn ) {
  1913  0022E2  51CF               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  1914  0022E4  E044               	bz	l226
  1915                           
  1916                           ; BSR set to: 0
  1917                           ;main.c: 729: if ( readEEPROM( 0x43 + 10 + i ) & 0x04 ) {
  1918  0022E6  0E4D               	movlw	77
  1919  0022E8  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1920  0022EA  6E08               	movwf	?_readEEPROM,c
  1921  0022EC  6A09               	clrf	?_readEEPROM+1,c
  1922  0022EE  0E00               	movlw	0
  1923  0022F0  2209               	addwfc	?_readEEPROM+1,f,c
  1924  0022F2  EC81  F01F         	call	_readEEPROM	;wreg free
  1925  0022F6  0100               	movlb	0	; () banked
  1926  0022F8  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1927  0022FA  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1928  0022FC  D025               	goto	l9823
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;main.c: 730: relay_protection_timer[ i ] =
  1932                           ;main.c: 731: readEEPROM( 0x43 + 34 + 2*i ) * 256 +
  1933                           ;main.c: 732: readEEPROM( 0x43 + 35 + 2*i );
  1934  0022FE  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1935  002300  0D02               	mullw	2
  1936  002302  0E65               	movlw	101
  1937  002304  24F3               	addwf	prodl,w,c
  1938  002306  6E08               	movwf	?_readEEPROM,c
  1939  002308  0E00               	movlw	0
  1940  00230A  20F4               	addwfc	prodh,w,c
  1941  00230C  6E09               	movwf	?_readEEPROM+1,c
  1942  00230E  EC81  F01F         	call	_readEEPROM	;wreg free
  1943  002312  0100               	movlb	0	; () banked
  1944  002314  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1945  002316  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1946  002318  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1947  00231A  0D02               	mullw	2
  1948  00231C  0E66               	movlw	102
  1949  00231E  24F3               	addwf	prodl,w,c
  1950  002320  6E08               	movwf	?_readEEPROM,c
  1951  002322  0E00               	movlw	0
  1952  002324  20F4               	addwfc	prodh,w,c
  1953  002326  6E09               	movwf	?_readEEPROM+1,c
  1954  002328  EC81  F01F         	call	_readEEPROM	;wreg free
  1955  00232C  0100               	movlb	0	; () banked
  1956  00232E  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1957  002330  0E00               	movlw	0
  1958  002332  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1959  002334  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1960  002336  0D02               	mullw	2
  1961  002338  50F3               	movf	prodl,w,c
  1962  00233A  0F60               	addlw	low _relay_protection_timer
  1963  00233C  6ED9               	movwf	fsr2l,c
  1964  00233E  6ADA               	clrf	fsr2h,c
  1965  002340  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1966  002344  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1967  002348                     l9823:
  1968                           
  1969                           ; BSR set to: 0
  1970                           ;main.c: 733: }
  1971                           ;main.c: 735: if ( ctrlreg & 0x08 ) {
  1972  002348  A7D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  1973  00234A  D007               	goto	l9827
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;main.c: 736: SendInformationEvent( i, 20,
  1977                           ;main.c: 737: 3 );
  1978  00234C  0E14               	movlw	20
  1979  00234E  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1980  002350  0E03               	movlw	3
  1981  002352  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1982  002354  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1983  002356  ECEA  F01C         	call	_SendInformationEvent
  1984  00235A                     l9827:
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;main.c: 738: }
  1988                           ;main.c: 740: if ( ctrlreg & 0x20 ) {
  1989  00235A  ABD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  1990  00235C  D03A               	goto	l9839
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;main.c: 741: SendInformationEvent( i, 20,
  1994                           ;main.c: 742: 25 );
  1995  00235E  0E14               	movlw	20
  1996  002360  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1997  002362  0E19               	movlw	25
  1998  002364  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1999  002366  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2000  002368  ECEA  F01C         	call	_SendInformationEvent
  2001  00236C  D032               	goto	l9839
  2002  00236E                     l226:
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;main.c: 747: if ( ctrlreg & 0x10 ) {
  2006  00236E  A9D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2007  002370  D007               	goto	l9833
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;main.c: 748: SendInformationEvent( i, 20,
  2011                           ;main.c: 749: 4 );
  2012  002372  0E14               	movlw	20
  2013  002374  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2014  002376  0E04               	movlw	4
  2015  002378  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2016  00237A  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2017  00237C  ECEA  F01C         	call	_SendInformationEvent
  2018  002380                     l9833:
  2019                           
  2020                           ; BSR set to: 0
  2021                           ;main.c: 750: }
  2022                           ;main.c: 752: if (ctrlreg & 0x40) {
  2023  002380  ADD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),6,b
  2024  002382  D027               	goto	l9839
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;main.c: 753: SendInformationEvent( i, 20,
  2028                           ;main.c: 754: 24 );
  2029  002384  0E14               	movlw	20
  2030  002386  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2031  002388  0E18               	movlw	24
  2032  00238A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2033  00238C  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2034  00238E  ECEA  F01C         	call	_SendInformationEvent
  2035  002392  D01F               	goto	l9839
  2036  002394                     l9837:
  2037                           
  2038                           ; BSR set to: 0
  2039                           ;main.c: 761: else {
  2040                           ;main.c: 763: relay_pulse_timer[ 0 ] =
  2041                           ;main.c: 764: readEEPROM( 0x43 + 18 + 2*i ) * 256 +
  2042                           ;main.c: 765: readEEPROM( 0x43 + 19 + 2*i );
  2043  002394  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2044  002396  0D02               	mullw	2
  2045  002398  0E56               	movlw	86
  2046  00239A  24F3               	addwf	prodl,w,c
  2047  00239C  6E08               	movwf	?_readEEPROM,c
  2048  00239E  0E00               	movlw	0
  2049  0023A0  20F4               	addwfc	prodh,w,c
  2050  0023A2  6E09               	movwf	?_readEEPROM+1,c
  2051  0023A4  EC81  F01F         	call	_readEEPROM	;wreg free
  2052  0023A8  0100               	movlb	0	; () banked
  2053  0023AA  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2054  0023AC  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2055  0023AE  0D02               	mullw	2
  2056  0023B0  0E55               	movlw	85
  2057  0023B2  24F3               	addwf	prodl,w,c
  2058  0023B4  6E08               	movwf	?_readEEPROM,c
  2059  0023B6  0E00               	movlw	0
  2060  0023B8  20F4               	addwfc	prodh,w,c
  2061  0023BA  6E09               	movwf	?_readEEPROM+1,c
  2062  0023BC  EC81  F01F         	call	_readEEPROM	;wreg free
  2063  0023C0  0100               	movlb	0	; () banked
  2064  0023C2  6FCE               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2065  0023C4  6BCD               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2066  0023C6  51CC               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2067  0023C8  25CD               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2068  0023CA  6F70               	movwf	_relay_pulse_timer& (0+255),b
  2069  0023CC  0E00               	movlw	0
  2070  0023CE  21CE               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2071  0023D0  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  2072  0023D2                     l9839:
  2073                           
  2074                           ; BSR set to: 0
  2075  0023D2  2BD1               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  2076  0023D4  D68A               	goto	l9751
  2077  0023D6                     l234:
  2078                           
  2079                           ; BSR set to: 0
  2080  0023D6  0012               	return	
  2081  0023D8                     __end_of_doApplicationOneSecondWork:
  2082                           	opt stack 0
  2083                           tblptru	equ	0xFF8
  2084                           prodh	equ	0xFF4
  2085                           prodl	equ	0xFF3
  2086                           postinc0	equ	0xFEE
  2087                           wreg	equ	0xFE8
  2088                           postinc2	equ	0xFDE
  2089                           postdec2	equ	0xFDD
  2090                           fsr2h	equ	0xFDA
  2091                           fsr2l	equ	0xFD9
  2092                           status	equ	0xFD8
  2093                           
  2094 ;; *************** function _vscp_doOneSecondWork *****************
  2095 ;; Defined at:
  2096 ;;		line 516 in file "../../vscp_firmware/common/vscp_firmware.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;		None
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;		None
  2101 ;; Return value:  Size  Location     Type
  2102 ;;		None               void
  2103 ;; Registers used:
  2104 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2105 ;; Tracked objects:
  2106 ;;		On entry : F/0
  2107 ;;		On exit  : F/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2110 ;;      Params:         0       0       0       0       0       0       0
  2111 ;;      Locals:         0       0       0       0       0       0       0
  2112 ;;      Temps:          1       0       0       0       0       0       0
  2113 ;;      Totals:         1       0       0       0       0       0       0
  2114 ;;Total ram usage:        1 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; Hardware stack levels required when called:    8
  2117 ;; This function calls:
  2118 ;;		_vscp_getZone
  2119 ;;		_vscp_getSubzone
  2120 ;;		_vscp_sendHeartBeat
  2121 ;; This function is called by:
  2122 ;;		_main
  2123 ;; This function uses a non-reentrant model
  2124 ;;
  2125                           
  2126                           	psect	text3
  2127  003A40                     __ptext3:
  2128                           	opt stack 0
  2129  003A40                     _vscp_doOneSecondWork:
  2130                           	opt stack 22
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;vscp_firmware.c: 518: ++vscp_second;
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;incstack = 0
  2137                           ;incstack = 0
  2138  003A40  2B95               	incf	_vscp_second& (0+255),f,b
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;vscp_firmware.c: 520: if (vscp_second > 59) {
  2142  003A42  0E3B               	movlw	59
  2143  003A44  6595               	cpfsgt	_vscp_second& (0+255),b
  2144  003A46  D00D               	goto	l7875
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;vscp_firmware.c: 521: vscp_second = 0;
  2148  003A48  6B95               	clrf	_vscp_second& (0+255),b
  2149                           
  2150                           ; BSR set to: 0
  2151                           ;vscp_firmware.c: 522: vscp_minute++;
  2152  003A4A  2B90               	incf	_vscp_minute& (0+255),f,b
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;vscp_firmware.c: 525: if (0x03 == vscp_node_state) {
  2156  003A4C  5192               	movf	_vscp_node_state& (0+255),w,b
  2157  003A4E  0A03               	xorlw	3
  2158  003A50  E108               	bnz	l7875
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;vscp_firmware.c: 526: vscp_sendHeartBeat(vscp_getZone(),
  2162                           ;vscp_firmware.c: 527: vscp_getSubzone());
  2163  003A52  EC93  F01F         	call	_vscp_getSubzone	;wreg free
  2164  003A56  0100               	movlb	0	; () banked
  2165  003A58  6FC5               	movwf	?_vscp_sendHeartBeat& (0+255),b
  2166  003A5A  EC98  F01F         	call	_vscp_getZone	;wreg free
  2167  003A5E  EC33  F01E         	call	_vscp_sendHeartBeat
  2168  003A62                     l7875:
  2169                           
  2170                           ; BSR set to: 0
  2171                           ;vscp_firmware.c: 528: }
  2172                           ;vscp_firmware.c: 529: }
  2173                           ;vscp_firmware.c: 531: if (vscp_minute > 59) {
  2174  003A62  0E3B               	movlw	59
  2175  003A64  6590               	cpfsgt	_vscp_minute& (0+255),b
  2176  003A66  D002               	goto	l7881
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;vscp_firmware.c: 532: vscp_minute = 0;
  2180  003A68  6B90               	clrf	_vscp_minute& (0+255),b
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;vscp_firmware.c: 533: vscp_hour++;
  2184  003A6A  2B8E               	incf	_vscp_hour& (0+255),f,b
  2185  003A6C                     l7881:
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;vscp_firmware.c: 534: }
  2189                           ;vscp_firmware.c: 536: if (vscp_hour > 23) vscp_hour = 0;
  2190  003A6C  0E17               	movlw	23
  2191  003A6E  658E               	cpfsgt	_vscp_hour& (0+255),b
  2192  003A70  D001               	goto	l7885
  2193                           
  2194                           ; BSR set to: 0
  2195  003A72  6B8E               	clrf	_vscp_hour& (0+255),b
  2196  003A74                     l7885:
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;vscp_firmware.c: 540: if (0x03 == vscp_node_state) {
  2200  003A74  5192               	movf	_vscp_node_state& (0+255),w,b
  2201  003A76  0A03               	xorlw	3
  2202  003A78  E109               	bnz	l1104
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;vscp_firmware.c: 541: vscp_guid_reset++;
  2206  003A7A  2B8D               	incf	_vscp_guid_reset& (0+255),f,b
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;vscp_firmware.c: 542: if ((vscp_guid_reset & 0x0f) >= 2) {
  2210  003A7C  C08D  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  2211  003A80  0E0F               	movlw	15
  2212  003A82  164D               	andwf	??_vscp_doOneSecondWork,f,c
  2213  003A84  0E02               	movlw	2
  2214  003A86  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  2215  003A88  B0D8               	btfsc	status,0,c
  2216                           
  2217                           ; BSR set to: 0
  2218                           ;vscp_firmware.c: 543: vscp_guid_reset = 0;
  2219  003A8A  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  2220  003A8C                     l1104:
  2221                           
  2222                           ; BSR set to: 0
  2223  003A8C  0012               	return	
  2224  003A8E                     __end_of_vscp_doOneSecondWork:
  2225                           	opt stack 0
  2226                           tblptru	equ	0xFF8
  2227                           prodh	equ	0xFF4
  2228                           prodl	equ	0xFF3
  2229                           postinc0	equ	0xFEE
  2230                           wreg	equ	0xFE8
  2231                           postinc2	equ	0xFDE
  2232                           postdec2	equ	0xFDD
  2233                           fsr2h	equ	0xFDA
  2234                           fsr2l	equ	0xFD9
  2235                           status	equ	0xFD8
  2236                           
  2237 ;; *************** function _vscp_sendHeartBeat *****************
  2238 ;; Defined at:
  2239 ;;		line 370 in file "../../vscp_firmware/common/vscp_firmware.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;  zone            1    wreg     unsigned char 
  2242 ;;  subzone         1   20[BANK0 ] unsigned char 
  2243 ;; Auto vars:     Size  Location     Type
  2244 ;;  zone            1   75[COMRAM] unsigned char 
  2245 ;; Return value:  Size  Location     Type
  2246 ;;		None               void
  2247 ;; Registers used:
  2248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2249 ;; Tracked objects:
  2250 ;;		On entry : 0/0
  2251 ;;		On exit  : F/0
  2252 ;;		Unchanged: 0/0
  2253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2254 ;;      Params:         0       1       0       0       0       0       0
  2255 ;;      Locals:         1       0       0       0       0       0       0
  2256 ;;      Temps:          0       0       0       0       0       0       0
  2257 ;;      Totals:         1       1       0       0       0       0       0
  2258 ;;Total ram usage:        2 bytes
  2259 ;; Hardware stack levels used:    1
  2260 ;; Hardware stack levels required when called:    7
  2261 ;; This function calls:
  2262 ;;		_vscp_sendEvent
  2263 ;; This function is called by:
  2264 ;;		_vscp_doOneSecondWork
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268                           	psect	text4
  2269  003C66                     __ptext4:
  2270                           	opt stack 0
  2271  003C66                     _vscp_sendHeartBeat:
  2272                           	opt stack 22
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;incstack = 0
  2276                           ;incstack = 0
  2277                           ;vscp_sendHeartBeat@zone stored from wreg
  2278  003C66  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  2279                           
  2280                           ;vscp_firmware.c: 371: vscp_omsg.flags = 0x80 + 3;
  2281  003C6A  0E83               	movlw	131
  2282  003C6C  0100               	movlb	0	; () banked
  2283  003C6E  6FA4               	movwf	_vscp_omsg& (0+255),b
  2284                           
  2285                           ;vscp_firmware.c: 372: vscp_omsg.priority = 0x07;
  2286  003C70  0E07               	movlw	7
  2287  003C72  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  2288                           
  2289                           ;vscp_firmware.c: 373: vscp_omsg.vscp_class = 20;
  2290  003C74  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  2291  003C76  0E14               	movlw	20
  2292  003C78  6FA6               	movwf	(_vscp_omsg+2)& (0+255),b
  2293                           
  2294                           ;vscp_firmware.c: 374: vscp_omsg.vscp_type = 9;
  2295  003C7A  0E09               	movlw	9
  2296  003C7C  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;vscp_firmware.c: 375: vscp_omsg.data[ 0 ] = 0;
  2300  003C7E  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;vscp_firmware.c: 376: vscp_omsg.data[ 1 ] = zone;
  2304  003C80  C04C  F0AA         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;vscp_firmware.c: 377: vscp_omsg.data[ 2 ] = subzone;
  2308  003C84  C0C5  F0AB         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;vscp_firmware.c: 380: vscp_sendEvent();
  2312  003C88  EF46  F01E         	goto	_vscp_sendEvent	;wreg free
  2313  003C8C                     __end_of_vscp_sendHeartBeat:
  2314                           	opt stack 0
  2315                           tblptru	equ	0xFF8
  2316                           prodh	equ	0xFF4
  2317                           prodl	equ	0xFF3
  2318                           postinc0	equ	0xFEE
  2319                           wreg	equ	0xFE8
  2320                           postinc2	equ	0xFDE
  2321                           postdec2	equ	0xFDD
  2322                           fsr2h	equ	0xFDA
  2323                           fsr2l	equ	0xFD9
  2324                           status	equ	0xFD8
  2325                           
  2326 ;; *************** function _vscp_getSubzone *****************
  2327 ;; Defined at:
  2328 ;;		line 876 in file "../main.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;		None
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;		None
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      unsigned char 
  2335 ;; Registers used:
  2336 ;;		wreg, status,2, cstack
  2337 ;; Tracked objects:
  2338 ;;		On entry : F/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2342 ;;      Params:         0       0       0       0       0       0       0
  2343 ;;      Locals:         0       0       0       0       0       0       0
  2344 ;;      Temps:          0       0       0       0       0       0       0
  2345 ;;      Totals:         0       0       0       0       0       0       0
  2346 ;;Total ram usage:        0 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    3
  2349 ;; This function calls:
  2350 ;;		_readEEPROM
  2351 ;; This function is called by:
  2352 ;;		_vscp_doOneSecondWork
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           	psect	text5
  2357  003F26                     __ptext5:
  2358                           	opt stack 0
  2359  003F26                     _vscp_getSubzone:
  2360                           	opt stack 26
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;main.c: 877: return readEEPROM( 0x43 + 1 );
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;incstack = 0
  2367                           ;incstack = 0
  2368  003F26  6A09               	clrf	?_readEEPROM+1,c
  2369  003F28  0E44               	movlw	68
  2370  003F2A  6E08               	movwf	?_readEEPROM,c
  2371  003F2C  EF81  F01F         	goto	_readEEPROM	;wreg free
  2372  003F30                     __end_of_vscp_getSubzone:
  2373                           	opt stack 0
  2374                           tblptru	equ	0xFF8
  2375                           prodh	equ	0xFF4
  2376                           prodl	equ	0xFF3
  2377                           postinc0	equ	0xFEE
  2378                           wreg	equ	0xFE8
  2379                           postinc2	equ	0xFDE
  2380                           postdec2	equ	0xFDD
  2381                           fsr2h	equ	0xFDA
  2382                           fsr2l	equ	0xFD9
  2383                           status	equ	0xFD8
  2384                           
  2385 ;; *************** function _vscp_getZone *****************
  2386 ;; Defined at:
  2387 ;;		line 867 in file "../main.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;		None
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;		None
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      unsigned char 
  2394 ;; Registers used:
  2395 ;;		wreg, status,2, cstack
  2396 ;; Tracked objects:
  2397 ;;		On entry : F/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2401 ;;      Params:         0       0       0       0       0       0       0
  2402 ;;      Locals:         0       0       0       0       0       0       0
  2403 ;;      Temps:          0       0       0       0       0       0       0
  2404 ;;      Totals:         0       0       0       0       0       0       0
  2405 ;;Total ram usage:        0 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    3
  2408 ;; This function calls:
  2409 ;;		_readEEPROM
  2410 ;; This function is called by:
  2411 ;;		_vscp_doOneSecondWork
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text6
  2416  003F30                     __ptext6:
  2417                           	opt stack 0
  2418  003F30                     _vscp_getZone:
  2419                           	opt stack 26
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;main.c: 868: return readEEPROM( 0x43 + 0 );
  2423                           
  2424                           ;incstack = 0
  2425                           ;incstack = 0
  2426  003F30  6A09               	clrf	?_readEEPROM+1,c
  2427  003F32  0E43               	movlw	67
  2428  003F34  6E08               	movwf	?_readEEPROM,c
  2429  003F36  EF81  F01F         	goto	_readEEPROM	;wreg free
  2430  003F3A                     __end_of_vscp_getZone:
  2431                           	opt stack 0
  2432                           tblptru	equ	0xFF8
  2433                           prodh	equ	0xFF4
  2434                           prodl	equ	0xFF3
  2435                           postinc0	equ	0xFEE
  2436                           wreg	equ	0xFE8
  2437                           postinc2	equ	0xFDE
  2438                           postdec2	equ	0xFDD
  2439                           fsr2h	equ	0xFDA
  2440                           fsr2l	equ	0xFD9
  2441                           status	equ	0xFD8
  2442                           
  2443 ;; *************** function _vscp_error *****************
  2444 ;; Defined at:
  2445 ;;		line 191 in file "../../vscp_firmware/common/vscp_firmware.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;		None
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;		None
  2450 ;; Return value:  Size  Location     Type
  2451 ;;		None               void
  2452 ;; Registers used:
  2453 ;;		None
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2459 ;;      Params:         0       0       0       0       0       0       0
  2460 ;;      Locals:         0       0       0       0       0       0       0
  2461 ;;      Temps:          0       0       0       0       0       0       0
  2462 ;;      Totals:         0       0       0       0       0       0       0
  2463 ;;Total ram usage:        0 bytes
  2464 ;; Hardware stack levels used:    1
  2465 ;; Hardware stack levels required when called:    2
  2466 ;; This function calls:
  2467 ;;		Nothing
  2468 ;; This function is called by:
  2469 ;;		_main
  2470 ;; This function uses a non-reentrant model
  2471 ;;
  2472                           
  2473                           	psect	text7
  2474  003F6A                     __ptext7:
  2475                           	opt stack 0
  2476  003F6A                     _vscp_error:
  2477                           	opt stack 28
  2478                           
  2479                           ;vscp_firmware.c: 192: vscp_initledfunc = 0x00;
  2480                           
  2481                           ;incstack = 0
  2482                           ;incstack = 0
  2483  003F6A  6A56               	clrf	_vscp_initledfunc,c
  2484  003F6C  0012               	return	
  2485  003F6E                     __end_of_vscp_error:
  2486                           	opt stack 0
  2487                           tblptru	equ	0xFF8
  2488                           prodh	equ	0xFF4
  2489                           prodl	equ	0xFF3
  2490                           postinc0	equ	0xFEE
  2491                           wreg	equ	0xFE8
  2492                           postinc2	equ	0xFDE
  2493                           postdec2	equ	0xFDD
  2494                           fsr2h	equ	0xFDA
  2495                           fsr2l	equ	0xFD9
  2496                           status	equ	0xFD8
  2497                           
  2498 ;; *************** function _doDM *****************
  2499 ;; Defined at:
  2500 ;;		line 1596 in file "../main.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;		None
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  class_mask      2   33[BANK0 ] unsigned short 
  2505 ;;  class_filter    2   31[BANK0 ] unsigned short 
  2506 ;;  i               1   44[BANK0 ] unsigned char 
  2507 ;;  dmflags         1   43[BANK0 ] unsigned char 
  2508 ;;  type_mask       1   36[BANK0 ] unsigned char 
  2509 ;;  type_filter     1   35[BANK0 ] unsigned char 
  2510 ;; Return value:  Size  Location     Type
  2511 ;;		None               void
  2512 ;; Registers used:
  2513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : F/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2519 ;;      Params:         0       0       0       0       0       0       0
  2520 ;;      Locals:         0      14       0       0       0       0       0
  2521 ;;      Temps:          0       3       0       0       0       0       0
  2522 ;;      Totals:         0      17       0       0       0       0       0
  2523 ;;Total ram usage:       17 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    8
  2526 ;; This function calls:
  2527 ;;		_readEEPROM
  2528 ;;		_doActionOff
  2529 ;;		_doActionOn
  2530 ;;		_doActionPulse
  2531 ;;		_doActionStatus
  2532 ;;		_doActionDisable
  2533 ;;		_doActionToggle
  2534 ;; This function is called by:
  2535 ;;		_main
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538                           
  2539                           	psect	text8
  2540  001DCE                     __ptext8:
  2541                           	opt stack 0
  2542  001DCE                     _doDM:
  2543                           	opt stack 22
  2544                           
  2545                           ;main.c: 1597: unsigned char i;
  2546                           ;main.c: 1598: unsigned char dmflags;
  2547                           ;main.c: 1599: unsigned short class_filter;
  2548                           ;main.c: 1600: unsigned short class_mask;
  2549                           ;main.c: 1601: unsigned char type_filter;
  2550                           ;main.c: 1602: unsigned char type_mask;
  2551                           ;main.c: 1605: if ( 0 == vscp_imsg.vscp_class ) return;
  2552                           
  2553                           ;incstack = 0
  2554                           ;incstack = 0
  2555  001DCE  0100               	movlb	0	; () banked
  2556  001DD0  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  2557  001DD2  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2558  001DD4  E101 D186          	bz	l411
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;main.c: 1607: for (i = 0; i < 7; i++) {
  2562  001DD8  6BDD               	clrf	doDM@i& (0+255),b
  2563  001DDA                     l9693:
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;main.c: 1610: dmflags = readEEPROM( 0x43 + 72 + 1 + (8 * i) );
  2567  001DDA  51DD               	movf	doDM@i& (0+255),w,b
  2568  001DDC  6FCD               	movwf	??_doDM& (0+255),b
  2569  001DDE  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2570  001DE0  90D8               	bcf	status,0,c
  2571  001DE2  37CD               	rlcf	??_doDM& (0+255),f,b
  2572  001DE4  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2573  001DE6  90D8               	bcf	status,0,c
  2574  001DE8  37CD               	rlcf	??_doDM& (0+255),f,b
  2575  001DEA  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2576  001DEC  90D8               	bcf	status,0,c
  2577  001DEE  37CD               	rlcf	??_doDM& (0+255),f,b
  2578  001DF0  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2579  001DF2  0E8C               	movlw	140
  2580  001DF4  25CD               	addwf	??_doDM& (0+255),w,b
  2581  001DF6  6E08               	movwf	?_readEEPROM,c
  2582  001DF8  0E00               	movlw	0
  2583  001DFA  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2584  001DFC  6E09               	movwf	?_readEEPROM+1,c
  2585  001DFE  EC81  F01F         	call	_readEEPROM	;wreg free
  2586  001E02  0100               	movlb	0	; () banked
  2587  001E04  6FDC               	movwf	doDM@dmflags& (0+255),b
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;main.c: 1613: if ( dmflags & 0x80 ) {
  2591  001E06  AFDC               	btfss	doDM@dmflags& (0+255),7,b
  2592  001E08  D168               	goto	l9745
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;main.c: 1616: if ( ( dmflags & 0x40 ) &&
  2596                           ;main.c: 1617: ( vscp_imsg.oaddr != readEEPROM( 0x43 + 72 + (8 * i) ) ) ) {
  2597  001E0A  ADDC               	btfss	doDM@dmflags& (0+255),6,b
  2598  001E0C  D018               	goto	l415
  2599                           
  2600                           ; BSR set to: 0
  2601  001E0E  51DD               	movf	doDM@i& (0+255),w,b
  2602  001E10  6FCD               	movwf	??_doDM& (0+255),b
  2603  001E12  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2604  001E14  90D8               	bcf	status,0,c
  2605  001E16  37CD               	rlcf	??_doDM& (0+255),f,b
  2606  001E18  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2607  001E1A  90D8               	bcf	status,0,c
  2608  001E1C  37CD               	rlcf	??_doDM& (0+255),f,b
  2609  001E1E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2610  001E20  90D8               	bcf	status,0,c
  2611  001E22  37CD               	rlcf	??_doDM& (0+255),f,b
  2612  001E24  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2613  001E26  0E8B               	movlw	139
  2614  001E28  25CD               	addwf	??_doDM& (0+255),w,b
  2615  001E2A  6E08               	movwf	?_readEEPROM,c
  2616  001E2C  0E00               	movlw	0
  2617  001E2E  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2618  001E30  6E09               	movwf	?_readEEPROM+1,c
  2619  001E32  EC81  F01F         	call	_readEEPROM	;wreg free
  2620  001E36  0100               	movlb	0	; () banked
  2621  001E38  199B               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2622  001E3A  E001 D14E          	bnz	l9745
  2623  001E3E                     l415:
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;main.c: 1619: }
  2627                           ;main.c: 1622: if ( dmflags & 0x10 ) {
  2628  001E3E  A9DC               	btfss	doDM@dmflags& (0+255),4,b
  2629  001E40  D00B               	goto	l9709
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;main.c: 1623: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2633  001E42  299D               	incf	(_vscp_imsg+7)& (0+255),w,b
  2634  001E44  E009               	bz	l9709
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;main.c: 1624: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x43 + 0 ) ) {
  2638  001E46  6A09               	clrf	?_readEEPROM+1,c
  2639  001E48  0E43               	movlw	67
  2640  001E4A  6E08               	movwf	?_readEEPROM,c
  2641  001E4C  EC81  F01F         	call	_readEEPROM	;wreg free
  2642  001E50  0100               	movlb	0	; () banked
  2643  001E52  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2644  001E54  E001 D141          	bnz	l9745
  2645  001E58                     l9709:
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;main.c: 1626: }
  2649                           ;main.c: 1627: }
  2650                           ;main.c: 1628: }
  2651                           ;main.c: 1630: class_filter = ( dmflags & 0x01)*256 +
  2652                           ;main.c: 1631: readEEPROM( 0x43 +
  2653                           ;main.c: 1632: 72 +
  2654                           ;main.c: 1633: (8 * i) +
  2655                           ;main.c: 1634: 3);
  2656  001E58  51DD               	movf	doDM@i& (0+255),w,b
  2657  001E5A  0D08               	mullw	8
  2658  001E5C  0E8E               	movlw	142
  2659  001E5E  24F3               	addwf	prodl,w,c
  2660  001E60  6E08               	movwf	?_readEEPROM,c
  2661  001E62  0E00               	movlw	0
  2662  001E64  20F4               	addwfc	prodh,w,c
  2663  001E66  6E09               	movwf	?_readEEPROM+1,c
  2664  001E68  EC81  F01F         	call	_readEEPROM	;wreg free
  2665  001E6C  0100               	movlb	0	; () banked
  2666  001E6E  6FCD               	movwf	??_doDM& (0+255),b
  2667  001E70  51DC               	movf	doDM@dmflags& (0+255),w,b
  2668  001E72  0B01               	andlw	1
  2669  001E74  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2670  001E76  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2671  001E78  51CD               	movf	??_doDM& (0+255),w,b
  2672  001E7A  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2673  001E7C  6FD0               	movwf	doDM@class_filter& (0+255),b
  2674  001E7E  0E00               	movlw	0
  2675  001E80  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2676  001E82  6FD1               	movwf	(doDM@class_filter+1)& (0+255),b
  2677                           
  2678                           ;main.c: 1635: class_mask = ( dmflags & 0x02)*256 +
  2679                           ;main.c: 1636: readEEPROM( 0x43 +
  2680                           ;main.c: 1637: 72 +
  2681                           ;main.c: 1638: (8 * i) +
  2682                           ;main.c: 1639: 2);
  2683  001E84  51DD               	movf	doDM@i& (0+255),w,b
  2684  001E86  0D08               	mullw	8
  2685  001E88  0E8D               	movlw	141
  2686  001E8A  24F3               	addwf	prodl,w,c
  2687  001E8C  6E08               	movwf	?_readEEPROM,c
  2688  001E8E  0E00               	movlw	0
  2689  001E90  20F4               	addwfc	prodh,w,c
  2690  001E92  6E09               	movwf	?_readEEPROM+1,c
  2691  001E94  EC81  F01F         	call	_readEEPROM	;wreg free
  2692  001E98  0100               	movlb	0	; () banked
  2693  001E9A  6FCD               	movwf	??_doDM& (0+255),b
  2694  001E9C  51DC               	movf	doDM@dmflags& (0+255),w,b
  2695  001E9E  0B02               	andlw	2
  2696  001EA0  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2697  001EA2  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2698  001EA4  51CD               	movf	??_doDM& (0+255),w,b
  2699  001EA6  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2700  001EA8  6FD2               	movwf	doDM@class_mask& (0+255),b
  2701  001EAA  0E00               	movlw	0
  2702  001EAC  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2703  001EAE  6FD3               	movwf	(doDM@class_mask+1)& (0+255),b
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;main.c: 1640: type_filter = readEEPROM( 0x43 +
  2707                           ;main.c: 1641: 72 +
  2708                           ;main.c: 1642: (8 * i) +
  2709                           ;main.c: 1643: 5);
  2710  001EB0  51DD               	movf	doDM@i& (0+255),w,b
  2711  001EB2  6FCD               	movwf	??_doDM& (0+255),b
  2712  001EB4  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2713  001EB6  90D8               	bcf	status,0,c
  2714  001EB8  37CD               	rlcf	??_doDM& (0+255),f,b
  2715  001EBA  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2716  001EBC  90D8               	bcf	status,0,c
  2717  001EBE  37CD               	rlcf	??_doDM& (0+255),f,b
  2718  001EC0  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2719  001EC2  90D8               	bcf	status,0,c
  2720  001EC4  37CD               	rlcf	??_doDM& (0+255),f,b
  2721  001EC6  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2722  001EC8  0E90               	movlw	144
  2723  001ECA  25CD               	addwf	??_doDM& (0+255),w,b
  2724  001ECC  6E08               	movwf	?_readEEPROM,c
  2725  001ECE  0E00               	movlw	0
  2726  001ED0  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2727  001ED2  6E09               	movwf	?_readEEPROM+1,c
  2728  001ED4  EC81  F01F         	call	_readEEPROM	;wreg free
  2729  001ED8  0100               	movlb	0	; () banked
  2730  001EDA  6FD4               	movwf	doDM@type_filter& (0+255),b
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;main.c: 1644: type_mask = readEEPROM( 0x43 +
  2734                           ;main.c: 1645: 72 +
  2735                           ;main.c: 1646: (8 * i) +
  2736                           ;main.c: 1647: 4);
  2737  001EDC  51DD               	movf	doDM@i& (0+255),w,b
  2738  001EDE  6FCD               	movwf	??_doDM& (0+255),b
  2739  001EE0  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2740  001EE2  90D8               	bcf	status,0,c
  2741  001EE4  37CD               	rlcf	??_doDM& (0+255),f,b
  2742  001EE6  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2743  001EE8  90D8               	bcf	status,0,c
  2744  001EEA  37CD               	rlcf	??_doDM& (0+255),f,b
  2745  001EEC  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2746  001EEE  90D8               	bcf	status,0,c
  2747  001EF0  37CD               	rlcf	??_doDM& (0+255),f,b
  2748  001EF2  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2749  001EF4  0E8F               	movlw	143
  2750  001EF6  25CD               	addwf	??_doDM& (0+255),w,b
  2751  001EF8  6E08               	movwf	?_readEEPROM,c
  2752  001EFA  0E00               	movlw	0
  2753  001EFC  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2754  001EFE  6E09               	movwf	?_readEEPROM+1,c
  2755  001F00  EC81  F01F         	call	_readEEPROM	;wreg free
  2756  001F04  0100               	movlb	0	; () banked
  2757  001F06  6FD5               	movwf	doDM@type_mask& (0+255),b
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;main.c: 1649: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2761                           ;main.c: 1650: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2762  001F08  EE20  F098         	lfsr	2,_vscp_imsg+2
  2763  001F0C  CFDE F0CD          	movff	postinc2,??_doDM
  2764  001F10  CFDD F0CE          	movff	postdec2,??_doDM+1
  2765  001F14  51D0               	movf	doDM@class_filter& (0+255),w,b
  2766  001F16  1BCD               	xorwf	??_doDM& (0+255),f,b
  2767  001F18  51D1               	movf	(doDM@class_filter+1)& (0+255),w,b
  2768  001F1A  1BCE               	xorwf	(??_doDM+1)& (0+255),f,b
  2769  001F1C  51D2               	movf	doDM@class_mask& (0+255),w,b
  2770  001F1E  17CD               	andwf	??_doDM& (0+255),f,b
  2771  001F20  51D3               	movf	(doDM@class_mask+1)& (0+255),w,b
  2772  001F22  17CE               	andwf	(??_doDM+1)& (0+255),f,b
  2773  001F24  51CE               	movf	(??_doDM+1)& (0+255),w,b
  2774  001F26  11CD               	iorwf	??_doDM& (0+255),w,b
  2775  001F28  E001 D0D7          	bnz	l9745
  2776                           
  2777                           ; BSR set to: 0
  2778  001F2C  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  2779  001F2E  19D4               	xorwf	doDM@type_filter& (0+255),w,b
  2780  001F30  15D5               	andwf	doDM@type_mask& (0+255),w,b
  2781  001F32  E101 D0AF          	bz	l9743
  2782  001F36  D0D1               	goto	l9745
  2783  001F38                     l9721:
  2784                           
  2785                           ;main.c: 1656: doActionOn( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2786  001F38  0100               	movlb	0	; () banked
  2787  001F3A  51DD               	movf	doDM@i& (0+255),w,b
  2788  001F3C  6FCD               	movwf	??_doDM& (0+255),b
  2789  001F3E  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2790  001F40  90D8               	bcf	status,0,c
  2791  001F42  37CD               	rlcf	??_doDM& (0+255),f,b
  2792  001F44  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2793  001F46  90D8               	bcf	status,0,c
  2794  001F48  37CD               	rlcf	??_doDM& (0+255),f,b
  2795  001F4A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2796  001F4C  90D8               	bcf	status,0,c
  2797  001F4E  37CD               	rlcf	??_doDM& (0+255),f,b
  2798  001F50  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2799  001F52  0E92               	movlw	146
  2800  001F54  25CD               	addwf	??_doDM& (0+255),w,b
  2801  001F56  6E08               	movwf	?_readEEPROM,c
  2802  001F58  0E00               	movlw	0
  2803  001F5A  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2804  001F5C  6E09               	movwf	?_readEEPROM+1,c
  2805  001F5E  EC81  F01F         	call	_readEEPROM	;wreg free
  2806  001F62  0100               	movlb	0	; () banked
  2807  001F64  6FD6               	movwf	_doDM$2146& (0+255),b
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;main.c: 1656: doActionOn( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2811  001F66  C0D6  F051         	movff	_doDM$2146,?_doActionOn
  2812  001F6A  51DC               	movf	doDM@dmflags& (0+255),w,b
  2813  001F6C  ECEC  F011         	call	_doActionOn
  2814                           
  2815                           ;main.c: 1657: break;
  2816  001F70  D0B4               	goto	l9745
  2817  001F72                     l9725:
  2818                           
  2819                           ;main.c: 1660: doActionOff( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2820  001F72  0100               	movlb	0	; () banked
  2821  001F74  51DD               	movf	doDM@i& (0+255),w,b
  2822  001F76  6FCD               	movwf	??_doDM& (0+255),b
  2823  001F78  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2824  001F7A  90D8               	bcf	status,0,c
  2825  001F7C  37CD               	rlcf	??_doDM& (0+255),f,b
  2826  001F7E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2827  001F80  90D8               	bcf	status,0,c
  2828  001F82  37CD               	rlcf	??_doDM& (0+255),f,b
  2829  001F84  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2830  001F86  90D8               	bcf	status,0,c
  2831  001F88  37CD               	rlcf	??_doDM& (0+255),f,b
  2832  001F8A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2833  001F8C  0E92               	movlw	146
  2834  001F8E  25CD               	addwf	??_doDM& (0+255),w,b
  2835  001F90  6E08               	movwf	?_readEEPROM,c
  2836  001F92  0E00               	movlw	0
  2837  001F94  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2838  001F96  6E09               	movwf	?_readEEPROM+1,c
  2839  001F98  EC81  F01F         	call	_readEEPROM	;wreg free
  2840  001F9C  0100               	movlb	0	; () banked
  2841  001F9E  6FD7               	movwf	_doDM$2147& (0+255),b
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;main.c: 1660: doActionOff( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2845  001FA0  C0D7  F051         	movff	_doDM$2147,?_doActionOff
  2846  001FA4  51DC               	movf	doDM@dmflags& (0+255),w,b
  2847  001FA6  EC82  F01A         	call	_doActionOff
  2848                           
  2849                           ;main.c: 1661: break;
  2850  001FAA  D097               	goto	l9745
  2851  001FAC                     l9729:
  2852                           
  2853                           ;main.c: 1664: doActionPulse( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2854  001FAC  0100               	movlb	0	; () banked
  2855  001FAE  51DD               	movf	doDM@i& (0+255),w,b
  2856  001FB0  6FCD               	movwf	??_doDM& (0+255),b
  2857  001FB2  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2858  001FB4  90D8               	bcf	status,0,c
  2859  001FB6  37CD               	rlcf	??_doDM& (0+255),f,b
  2860  001FB8  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2861  001FBA  90D8               	bcf	status,0,c
  2862  001FBC  37CD               	rlcf	??_doDM& (0+255),f,b
  2863  001FBE  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2864  001FC0  90D8               	bcf	status,0,c
  2865  001FC2  37CD               	rlcf	??_doDM& (0+255),f,b
  2866  001FC4  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2867  001FC6  0E92               	movlw	146
  2868  001FC8  25CD               	addwf	??_doDM& (0+255),w,b
  2869  001FCA  6E08               	movwf	?_readEEPROM,c
  2870  001FCC  0E00               	movlw	0
  2871  001FCE  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2872  001FD0  6E09               	movwf	?_readEEPROM+1,c
  2873  001FD2  EC81  F01F         	call	_readEEPROM	;wreg free
  2874  001FD6  0100               	movlb	0	; () banked
  2875  001FD8  6FD8               	movwf	_doDM$2148& (0+255),b
  2876                           
  2877                           ;main.c: 1664: doActionPulse( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2878  001FDA  C0D8  F00B         	movff	_doDM$2148,?_doActionPulse
  2879  001FDE  51DC               	movf	doDM@dmflags& (0+255),w,b
  2880  001FE0  EC28  F014         	call	_doActionPulse
  2881                           
  2882                           ;main.c: 1665: break;
  2883  001FE4  D07A               	goto	l9745
  2884  001FE6                     l9731:
  2885                           
  2886                           ;main.c: 1668: doActionStatus( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2887  001FE6  0100               	movlb	0	; () banked
  2888  001FE8  51DD               	movf	doDM@i& (0+255),w,b
  2889  001FEA  6FCD               	movwf	??_doDM& (0+255),b
  2890  001FEC  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2891  001FEE  90D8               	bcf	status,0,c
  2892  001FF0  37CD               	rlcf	??_doDM& (0+255),f,b
  2893  001FF2  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2894  001FF4  90D8               	bcf	status,0,c
  2895  001FF6  37CD               	rlcf	??_doDM& (0+255),f,b
  2896  001FF8  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2897  001FFA  90D8               	bcf	status,0,c
  2898  001FFC  37CD               	rlcf	??_doDM& (0+255),f,b
  2899  001FFE  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2900  002000  0E92               	movlw	146
  2901  002002  25CD               	addwf	??_doDM& (0+255),w,b
  2902  002004  6E08               	movwf	?_readEEPROM,c
  2903  002006  0E00               	movlw	0
  2904  002008  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2905  00200A  6E09               	movwf	?_readEEPROM+1,c
  2906  00200C  EC81  F01F         	call	_readEEPROM	;wreg free
  2907  002010  0100               	movlb	0	; () banked
  2908  002012  6FD9               	movwf	_doDM$2149& (0+255),b
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;main.c: 1668: doActionStatus( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2912  002014  C0D9  F051         	movff	_doDM$2149,?_doActionStatus
  2913  002018  51DC               	movf	doDM@dmflags& (0+255),w,b
  2914  00201A  EC1A  F019         	call	_doActionStatus
  2915                           
  2916                           ;main.c: 1669: break;
  2917  00201E  D05D               	goto	l9745
  2918  002020                     l9735:
  2919                           
  2920                           ;main.c: 1672: doActionDisable( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2921  002020  0100               	movlb	0	; () banked
  2922  002022  51DD               	movf	doDM@i& (0+255),w,b
  2923  002024  6FCD               	movwf	??_doDM& (0+255),b
  2924  002026  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2925  002028  90D8               	bcf	status,0,c
  2926  00202A  37CD               	rlcf	??_doDM& (0+255),f,b
  2927  00202C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2928  00202E  90D8               	bcf	status,0,c
  2929  002030  37CD               	rlcf	??_doDM& (0+255),f,b
  2930  002032  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2931  002034  90D8               	bcf	status,0,c
  2932  002036  37CD               	rlcf	??_doDM& (0+255),f,b
  2933  002038  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2934  00203A  0E92               	movlw	146
  2935  00203C  25CD               	addwf	??_doDM& (0+255),w,b
  2936  00203E  6E08               	movwf	?_readEEPROM,c
  2937  002040  0E00               	movlw	0
  2938  002042  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2939  002044  6E09               	movwf	?_readEEPROM+1,c
  2940  002046  EC81  F01F         	call	_readEEPROM	;wreg free
  2941  00204A  0100               	movlb	0	; () banked
  2942  00204C  6FDA               	movwf	_doDM$2150& (0+255),b
  2943                           
  2944                           ;main.c: 1672: doActionDisable( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2945  00204E  C0DA  F00B         	movff	_doDM$2150,?_doActionDisable
  2946  002052  51DC               	movf	doDM@dmflags& (0+255),w,b
  2947  002054  ECB4  F01C         	call	_doActionDisable
  2948                           
  2949                           ;main.c: 1673: break;
  2950  002058  D040               	goto	l9745
  2951  00205A                     l9737:
  2952                           
  2953                           ;main.c: 1676: doActionToggle( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2954  00205A  0100               	movlb	0	; () banked
  2955  00205C  51DD               	movf	doDM@i& (0+255),w,b
  2956  00205E  6FCD               	movwf	??_doDM& (0+255),b
  2957  002060  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2958  002062  90D8               	bcf	status,0,c
  2959  002064  37CD               	rlcf	??_doDM& (0+255),f,b
  2960  002066  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2961  002068  90D8               	bcf	status,0,c
  2962  00206A  37CD               	rlcf	??_doDM& (0+255),f,b
  2963  00206C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2964  00206E  90D8               	bcf	status,0,c
  2965  002070  37CD               	rlcf	??_doDM& (0+255),f,b
  2966  002072  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2967  002074  0E92               	movlw	146
  2968  002076  25CD               	addwf	??_doDM& (0+255),w,b
  2969  002078  6E08               	movwf	?_readEEPROM,c
  2970  00207A  0E00               	movlw	0
  2971  00207C  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2972  00207E  6E09               	movwf	?_readEEPROM+1,c
  2973  002080  EC81  F01F         	call	_readEEPROM	;wreg free
  2974  002084  0100               	movlb	0	; () banked
  2975  002086  6FDB               	movwf	_doDM$2151& (0+255),b
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;main.c: 1676: doActionToggle( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2979  002088  C0DB  F051         	movff	_doDM$2151,?_doActionToggle
  2980  00208C  51DC               	movf	doDM@dmflags& (0+255),w,b
  2981  00208E  EC03  F018         	call	_doActionToggle
  2982                           
  2983                           ;main.c: 1677: break;
  2984  002092  D023               	goto	l9745
  2985  002094                     l9743:
  2986                           
  2987                           ; BSR set to: 0
  2988  002094  51DD               	movf	doDM@i& (0+255),w,b
  2989  002096  6FCD               	movwf	??_doDM& (0+255),b
  2990  002098  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2991  00209A  90D8               	bcf	status,0,c
  2992  00209C  37CD               	rlcf	??_doDM& (0+255),f,b
  2993  00209E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2994  0020A0  90D8               	bcf	status,0,c
  2995  0020A2  37CD               	rlcf	??_doDM& (0+255),f,b
  2996  0020A4  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2997  0020A6  90D8               	bcf	status,0,c
  2998  0020A8  37CD               	rlcf	??_doDM& (0+255),f,b
  2999  0020AA  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3000  0020AC  0E91               	movlw	145
  3001  0020AE  25CD               	addwf	??_doDM& (0+255),w,b
  3002  0020B0  6E08               	movwf	?_readEEPROM,c
  3003  0020B2  0E00               	movlw	0
  3004  0020B4  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  3005  0020B6  6E09               	movwf	?_readEEPROM+1,c
  3006  0020B8  EC81  F01F         	call	_readEEPROM	;wreg free
  3007                           
  3008                           ; Switch size 1, requested type "speed"
  3009                           ; Number of cases is 6, Range of values is 1 to 16
  3010                           ; switch strategies available:
  3011                           ; Name         Instructions Cycles
  3012                           ; simple_byte           19    10 (average)
  3013                           ;	Chosen strategy is simple_byte
  3014  0020BC  0A01               	xorlw	1	; case 1
  3015  0020BE  E101 D73B          	bz	l9721
  3016  0020C2  0A03               	xorlw	3	; case 2
  3017  0020C4  E101 D755          	bz	l9725
  3018  0020C8  0A01               	xorlw	1	; case 3
  3019  0020CA  E101 D76F          	bz	l9729
  3020  0020CE  0A07               	xorlw	7	; case 4
  3021  0020D0  E0C4               	bz	l9737
  3022  0020D2  0A0E               	xorlw	14	; case 10
  3023  0020D4  E088               	bz	l9731
  3024  0020D6  0A1A               	xorlw	26	; case 16
  3025  0020D8  E0A3               	bz	l9735
  3026  0020DA                     l9745:
  3027  0020DA  0100               	movlb	0	; () banked
  3028  0020DC  2BDD               	incf	doDM@i& (0+255),f,b
  3029                           
  3030                           ; BSR set to: 0
  3031  0020DE  0E06               	movlw	6
  3032  0020E0  65DD               	cpfsgt	doDM@i& (0+255),b
  3033  0020E2  D67B               	goto	l9693
  3034  0020E4                     l411:
  3035                           
  3036                           ; BSR set to: 0
  3037  0020E4  0012               	return	
  3038  0020E6                     __end_of_doDM:
  3039                           	opt stack 0
  3040                           tblptru	equ	0xFF8
  3041                           prodh	equ	0xFF4
  3042                           prodl	equ	0xFF3
  3043                           postinc0	equ	0xFEE
  3044                           wreg	equ	0xFE8
  3045                           postinc2	equ	0xFDE
  3046                           postdec2	equ	0xFDD
  3047                           fsr2h	equ	0xFDA
  3048                           fsr2l	equ	0xFD9
  3049                           status	equ	0xFD8
  3050                           
  3051 ;; *************** function _doActionToggle *****************
  3052 ;; Defined at:
  3053 ;;		line 2088 in file "../main.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;  dmflags         1    wreg     unsigned char 
  3056 ;;  arg             1   80[COMRAM] unsigned char 
  3057 ;; Auto vars:     Size  Location     Type
  3058 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3059 ;;  i               1   27[BANK0 ] unsigned char 
  3060 ;;  bOn             1   26[BANK0 ] enum E15660
  3061 ;;  val             1   25[BANK0 ] unsigned char 
  3062 ;; Return value:  Size  Location     Type
  3063 ;;		None               void
  3064 ;; Registers used:
  3065 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3066 ;; Tracked objects:
  3067 ;;		On entry : F/0
  3068 ;;		On exit  : F/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3071 ;;      Params:         1       0       0       0       0       0       0
  3072 ;;      Locals:         0       4       0       0       0       0       0
  3073 ;;      Temps:          0       2       0       0       0       0       0
  3074 ;;      Totals:         1       6       0       0       0       0       0
  3075 ;;Total ram usage:        7 bytes
  3076 ;; Hardware stack levels used:    1
  3077 ;; Hardware stack levels required when called:    7
  3078 ;; This function calls:
  3079 ;;		_readEEPROM
  3080 ;;		_SendInformationEvent
  3081 ;; This function is called by:
  3082 ;;		_doDM
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           	psect	text9
  3087  003006                     __ptext9:
  3088                           	opt stack 0
  3089  003006                     _doActionToggle:
  3090                           	opt stack 22
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;incstack = 0
  3094                           ;incstack = 0
  3095                           ;doActionToggle@dmflags stored from wreg
  3096  003006  CFE8 F0C9          	movff	wreg,doActionToggle@dmflags
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;main.c: 2090: unsigned char i;
  3100                           ;main.c: 2091: unsigned char val;
  3101                           ;main.c: 2092: BOOL bOn = 0;
  3102  00300A  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3103                           
  3104                           ;main.c: 2094: for ( i = 0; i < 8; i++ ) {
  3105  00300C  6BCC               	clrf	doActionToggle@i& (0+255),b
  3106  00300E                     l10363:
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;main.c: 2097: if ( !( arg & (1 << i) ) ) continue;
  3110  00300E  C0CC  F0C7         	movff	doActionToggle@i,??_doActionToggle
  3111  003012  0E01               	movlw	1
  3112  003014  6FC8               	movwf	(??_doActionToggle+1)& (0+255),b
  3113  003016  2BC7               	incf	??_doActionToggle& (0+255),f,b
  3114  003018  D002               	goto	u13104
  3115  00301A                     u13105:
  3116  00301A  90D8               	bcf	status,0,c
  3117  00301C  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3118  00301E                     u13104:
  3119  00301E  2FC7               	decfsz	??_doActionToggle& (0+255),f,b
  3120  003020  D7FC               	goto	u13105
  3121  003022  51C8               	movf	(??_doActionToggle+1)& (0+255),w,b
  3122  003024  1451               	andwf	doActionToggle@arg,w,c
  3123  003026  E07A               	bz	l10421
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;main.c: 2100: if ( dmflags & 0x08 ) {
  3127  003028  A7C9               	btfss	doActionToggle@dmflags& (0+255),3,b
  3128  00302A  D00B               	goto	l10371
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;main.c: 2101: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3132                           ;main.c: 2102: 53 +
  3133                           ;main.c: 2103: i ) ) {
  3134  00302C  0E78               	movlw	120
  3135  00302E  25CC               	addwf	doActionToggle@i& (0+255),w,b
  3136  003030  6E08               	movwf	?_readEEPROM,c
  3137  003032  6A09               	clrf	?_readEEPROM+1,c
  3138  003034  0E00               	movlw	0
  3139  003036  2209               	addwfc	?_readEEPROM+1,f,c
  3140  003038  EC81  F01F         	call	_readEEPROM	;wreg free
  3141  00303C  0100               	movlb	0	; () banked
  3142  00303E  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3143  003040  E16D               	bnz	l10421
  3144  003042                     l10371:
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;main.c: 2105: }
  3148                           ;main.c: 2106: }
  3149                           ;main.c: 2108: val = readEEPROM(0x43 + 10 + i);
  3150  003042  0E4D               	movlw	77
  3151  003044  25CC               	addwf	doActionToggle@i& (0+255),w,b
  3152  003046  6E08               	movwf	?_readEEPROM,c
  3153  003048  6A09               	clrf	?_readEEPROM+1,c
  3154  00304A  0E00               	movlw	0
  3155  00304C  2209               	addwfc	?_readEEPROM+1,f,c
  3156  00304E  EC81  F01F         	call	_readEEPROM	;wreg free
  3157  003052  0100               	movlb	0	; () banked
  3158  003054  6FCA               	movwf	doActionToggle@val& (0+255),b
  3159                           
  3160                           ;main.c: 2110: switch ( i ) {
  3161  003056  D02D               	goto	l10403
  3162  003058                     l539:
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;main.c: 2113: if ( LATBbits.LATB4 ) {
  3166  003058  A88A               	btfss	3978,4,c	;volatile
  3167  00305A  D002               	goto	l540
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;main.c: 2114: LATBbits.LATB4 = 0;
  3171  00305C  988A               	bcf	3978,4,c	;volatile
  3172  00305E  D025               	goto	L12
  3173  003060                     l540:
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;main.c: 2117: LATBbits.LATB4 = 1;
  3177  003060  888A               	bsf	3978,4,c	;volatile
  3178  003062                     l10375:
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;main.c: 2118: bOn = 1;
  3182  003062  0E01               	movlw	1
  3183  003064  6FCB               	movwf	doActionToggle@bOn& (0+255),b
  3184  003066  D033               	goto	l10405
  3185  003068                     l543:
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;main.c: 2123: if ( LATBbits.LATB1 ) {
  3189  003068  A28A               	btfss	3978,1,c	;volatile
  3190  00306A  D002               	goto	l544
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;main.c: 2124: LATBbits.LATB1 = 0;
  3194  00306C  928A               	bcf	3978,1,c	;volatile
  3195  00306E  D01D               	goto	L12
  3196  003070                     l544:
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;main.c: 2127: LATBbits.LATB1 = 1;
  3200  003070  828A               	bsf	3978,1,c	;volatile
  3201  003072  D7F7               	goto	l10375
  3202  003074                     l546:
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;main.c: 2133: if ( LATBbits.LATB0 ) {
  3206  003074  A08A               	btfss	3978,0,c	;volatile
  3207  003076  D002               	goto	l547
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;main.c: 2134: LATBbits.LATB0 = 0;
  3211  003078  908A               	bcf	3978,0,c	;volatile
  3212  00307A  D017               	goto	L12
  3213  00307C                     l547:
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;main.c: 2137: LATBbits.LATB0 = 1;
  3217  00307C  808A               	bsf	3978,0,c	;volatile
  3218  00307E  D7F1               	goto	l10375
  3219  003080                     l549:
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;main.c: 2143: if ( LATCbits.LATC7 ) {
  3223  003080  AE8B               	btfss	3979,7,c	;volatile
  3224  003082  D002               	goto	l550
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;main.c: 2144: LATCbits.LATC7 = 0;
  3228  003084  9E8B               	bcf	3979,7,c	;volatile
  3229  003086  D011               	goto	L12
  3230  003088                     l550:
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;main.c: 2147: LATCbits.LATC7 = 1;
  3234  003088  8E8B               	bsf	3979,7,c	;volatile
  3235  00308A  D7EB               	goto	l10375
  3236  00308C                     l552:
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;main.c: 2153: if ( LATCbits.LATC6 ) {
  3240  00308C  AC8B               	btfss	3979,6,c	;volatile
  3241  00308E  D002               	goto	l553
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;main.c: 2154: LATCbits.LATC6 = 0;
  3245  003090  9C8B               	bcf	3979,6,c	;volatile
  3246  003092  D00B               	goto	L12
  3247  003094                     l553:
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;main.c: 2157: LATCbits.LATC6 = 1;
  3251  003094  8C8B               	bsf	3979,6,c	;volatile
  3252  003096  D7E5               	goto	l10375
  3253  003098                     l555:
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;main.c: 2163: if ( LATCbits.LATC5 ) {
  3257  003098  AA8B               	btfss	3979,5,c	;volatile
  3258  00309A  D002               	goto	l556
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;main.c: 2164: LATCbits.LATC5 = 0;
  3262  00309C  9A8B               	bcf	3979,5,c	;volatile
  3263  00309E  D005               	goto	L12
  3264  0030A0                     l556:
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;main.c: 2167: LATCbits.LATC5 = 1;
  3268  0030A0  8A8B               	bsf	3979,5,c	;volatile
  3269  0030A2  D7DF               	goto	l10375
  3270  0030A4                     l558:
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;main.c: 2173: if ( LATCbits.LATC4 ) {
  3274  0030A4  A88B               	btfss	3979,4,c	;volatile
  3275  0030A6  D003               	goto	l559
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;main.c: 2174: LATCbits.LATC4 = 0;
  3279  0030A8  988B               	bcf	3979,4,c	;volatile
  3280  0030AA                     L12:
  3281                           
  3282                           ;main.c: 2175: bOn = 0;
  3283  0030AA  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3284                           
  3285                           ;main.c: 2176: } else {
  3286  0030AC  D010               	goto	l10405
  3287  0030AE                     l559:
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;main.c: 2177: LATCbits.LATC4 = 1;
  3291  0030AE  888B               	bsf	3979,4,c	;volatile
  3292  0030B0  D7D8               	goto	l10375
  3293  0030B2                     l10403:
  3294                           
  3295                           ; BSR set to: 0
  3296  0030B2  51CC               	movf	doActionToggle@i& (0+255),w,b
  3297                           
  3298                           ; Switch size 1, requested type "speed"
  3299                           ; Number of cases is 7, Range of values is 0 to 6
  3300                           ; switch strategies available:
  3301                           ; Name         Instructions Cycles
  3302                           ; simple_byte           22    12 (average)
  3303                           ;	Chosen strategy is simple_byte
  3304  0030B4  E0D1               	bz	l539
  3305  0030B6  0A01               	xorlw	1	; case 1
  3306  0030B8  E0D7               	bz	l543
  3307  0030BA  0A03               	xorlw	3	; case 2
  3308  0030BC  E0DB               	bz	l546
  3309  0030BE  0A01               	xorlw	1	; case 3
  3310  0030C0  E0DF               	bz	l549
  3311  0030C2  0A07               	xorlw	7	; case 4
  3312  0030C4  E0E3               	bz	l552
  3313  0030C6  0A01               	xorlw	1	; case 5
  3314  0030C8  E0E7               	bz	l555
  3315  0030CA  0A03               	xorlw	3	; case 6
  3316  0030CC  E0EB               	bz	l558
  3317  0030CE                     l10405:
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;main.c: 2184: if ( bOn ) {
  3321  0030CE  51CB               	movf	doActionToggle@bOn& (0+255),w,b
  3322  0030D0  E013               	bz	l561
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;main.c: 2187: if ( val & 0x08 ) {
  3326  0030D2  A7CA               	btfss	doActionToggle@val& (0+255),3,b
  3327  0030D4  D007               	goto	l10411
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;main.c: 2188: SendInformationEvent( i, 20, 3 );
  3331  0030D6  0E14               	movlw	20
  3332  0030D8  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3333  0030DA  0E03               	movlw	3
  3334  0030DC  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3335  0030DE  51CC               	movf	doActionToggle@i& (0+255),w,b
  3336  0030E0  ECEA  F01C         	call	_SendInformationEvent
  3337  0030E4                     l10411:
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;main.c: 2189: }
  3341                           ;main.c: 2192: if ( val & 0x20 ) {
  3342  0030E4  ABCA               	btfss	doActionToggle@val& (0+255),5,b
  3343  0030E6  D01A               	goto	l10421
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;main.c: 2193: SendInformationEvent( i, 20, 25 );
  3347  0030E8  0E14               	movlw	20
  3348  0030EA  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3349  0030EC  0E19               	movlw	25
  3350  0030EE  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3351  0030F0  51CC               	movf	doActionToggle@i& (0+255),w,b
  3352  0030F2  ECEA  F01C         	call	_SendInformationEvent
  3353  0030F6  D012               	goto	l10421
  3354  0030F8                     l561:
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;main.c: 2197: else {
  3358                           ;main.c: 2200: if ( val & 0x10 ) {
  3359  0030F8  A9CA               	btfss	doActionToggle@val& (0+255),4,b
  3360  0030FA  D007               	goto	l10417
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;main.c: 2201: SendInformationEvent( i, 20, 4 );
  3364  0030FC  0E14               	movlw	20
  3365  0030FE  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3366  003100  0E04               	movlw	4
  3367  003102  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3368  003104  51CC               	movf	doActionToggle@i& (0+255),w,b
  3369  003106  ECEA  F01C         	call	_SendInformationEvent
  3370  00310A                     l10417:
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;main.c: 2202: }
  3374                           ;main.c: 2205: if (val & 0x40 ) {
  3375  00310A  ADCA               	btfss	doActionToggle@val& (0+255),6,b
  3376  00310C  D007               	goto	l10421
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;main.c: 2206: SendInformationEvent( i, 20, 24 );
  3380  00310E  0E14               	movlw	20
  3381  003110  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3382  003112  0E18               	movlw	24
  3383  003114  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3384  003116  51CC               	movf	doActionToggle@i& (0+255),w,b
  3385  003118  ECEA  F01C         	call	_SendInformationEvent
  3386  00311C                     l10421:
  3387                           
  3388                           ; BSR set to: 0
  3389  00311C  2BCC               	incf	doActionToggle@i& (0+255),f,b
  3390                           
  3391                           ; BSR set to: 0
  3392  00311E  0E07               	movlw	7
  3393  003120  65CC               	cpfsgt	doActionToggle@i& (0+255),b
  3394  003122  D775               	goto	l10363
  3395                           
  3396                           ; BSR set to: 0
  3397  003124  0C07               	retlw	7
  3398  003126                     __end_of_doActionToggle:
  3399                           	opt stack 0
  3400                           tblptru	equ	0xFF8
  3401                           prodh	equ	0xFF4
  3402                           prodl	equ	0xFF3
  3403                           postinc0	equ	0xFEE
  3404                           wreg	equ	0xFE8
  3405                           postinc2	equ	0xFDE
  3406                           postdec2	equ	0xFDD
  3407                           fsr2h	equ	0xFDA
  3408                           fsr2l	equ	0xFD9
  3409                           status	equ	0xFD8
  3410                           
  3411 ;; *************** function _doActionDisable *****************
  3412 ;; Defined at:
  3413 ;;		line 2058 in file "../main.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;  dmflags         1    wreg     unsigned char 
  3416 ;;  arg             1   10[COMRAM] unsigned char 
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;  dmflags         1   13[COMRAM] unsigned char 
  3419 ;;  i               1   15[COMRAM] unsigned char 
  3420 ;;  val             1   14[COMRAM] unsigned char 
  3421 ;; Return value:  Size  Location     Type
  3422 ;;		None               void
  3423 ;; Registers used:
  3424 ;;		wreg, status,2, status,0, cstack
  3425 ;; Tracked objects:
  3426 ;;		On entry : F/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3430 ;;      Params:         1       0       0       0       0       0       0
  3431 ;;      Locals:         3       0       0       0       0       0       0
  3432 ;;      Temps:          2       0       0       0       0       0       0
  3433 ;;      Totals:         6       0       0       0       0       0       0
  3434 ;;Total ram usage:        6 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; Hardware stack levels required when called:    3
  3437 ;; This function calls:
  3438 ;;		_writeEEPROM
  3439 ;;		_readEEPROM
  3440 ;; This function is called by:
  3441 ;;		_doDM
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           	psect	text10
  3446  003968                     __ptext10:
  3447                           	opt stack 0
  3448  003968                     _doActionDisable:
  3449                           	opt stack 26
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;incstack = 0
  3453                           ;incstack = 0
  3454                           ;doActionDisable@dmflags stored from wreg
  3455  003968  CFE8 F00E          	movff	wreg,doActionDisable@dmflags
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;main.c: 2060: unsigned char i;
  3459                           ;main.c: 2061: unsigned char val;
  3460                           ;main.c: 2063: for ( i = 0; i < 8; i++ ) {
  3461  00396C  6A10               	clrf	doActionDisable@i,c
  3462  00396E                     l8709:
  3463                           
  3464                           ;main.c: 2066: if ( !( arg & (1 << i) ) ) continue;
  3465  00396E  C010  F00C         	movff	doActionDisable@i,??_doActionDisable
  3466  003972  0E01               	movlw	1
  3467  003974  6E0D               	movwf	(??_doActionDisable+1)& (0+255),c
  3468  003976  2A0C               	incf	??_doActionDisable,f,c
  3469  003978  D002               	goto	u10284
  3470  00397A                     u10285:
  3471  00397A  90D8               	bcf	status,0,c
  3472  00397C  360D               	rlcf	??_doActionDisable+1,f,c
  3473  00397E                     u10284:
  3474  00397E  2E0C               	decfsz	??_doActionDisable,f,c
  3475  003980  D7FC               	goto	u10285
  3476  003982  500D               	movf	??_doActionDisable+1,w,c
  3477  003984  140B               	andwf	doActionDisable@arg,w,c
  3478  003986  E021               	bz	l8719
  3479                           
  3480                           ;main.c: 2069: if ( dmflags & 0x08) {
  3481  003988  A60E               	btfss	doActionDisable@dmflags,3,c
  3482  00398A  D00B               	goto	l8717
  3483                           
  3484                           ;main.c: 2070: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3485                           ;main.c: 2071: 53 +
  3486                           ;main.c: 2072: i ) ) {
  3487  00398C  0E78               	movlw	120
  3488  00398E  2410               	addwf	doActionDisable@i,w,c
  3489  003990  6E08               	movwf	?_readEEPROM,c
  3490  003992  6A09               	clrf	?_readEEPROM+1,c
  3491  003994  0E00               	movlw	0
  3492  003996  2209               	addwfc	?_readEEPROM+1,f,c
  3493  003998  EC81  F01F         	call	_readEEPROM	;wreg free
  3494  00399C  0100               	movlb	0	; () banked
  3495  00399E  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3496  0039A0  E114               	bnz	l8719
  3497  0039A2                     l8717:
  3498                           
  3499                           ;main.c: 2074: }
  3500                           ;main.c: 2075: }
  3501                           ;main.c: 2077: val = readEEPROM( 0x43 + 10 + i );
  3502  0039A2  0E4D               	movlw	77
  3503  0039A4  2410               	addwf	doActionDisable@i,w,c
  3504  0039A6  6E08               	movwf	?_readEEPROM,c
  3505  0039A8  6A09               	clrf	?_readEEPROM+1,c
  3506  0039AA  0E00               	movlw	0
  3507  0039AC  2209               	addwfc	?_readEEPROM+1,f,c
  3508  0039AE  EC81  F01F         	call	_readEEPROM	;wreg free
  3509  0039B2  6E0F               	movwf	doActionDisable@val,c
  3510                           
  3511                           ;main.c: 2078: writeEEPROM( 0x43 + 10 + i, val & ~0x80 );
  3512  0039B4  0E4D               	movlw	77
  3513  0039B6  2410               	addwf	doActionDisable@i,w,c
  3514  0039B8  6E08               	movwf	?_writeEEPROM,c
  3515  0039BA  6A09               	clrf	?_writeEEPROM+1,c
  3516  0039BC  0E00               	movlw	0
  3517  0039BE  2209               	addwfc	?_writeEEPROM+1,f,c
  3518  0039C0  500F               	movf	doActionDisable@val,w,c
  3519  0039C2  0B7F               	andlw	127
  3520  0039C4  6E0A               	movwf	?_writeEEPROM+2,c
  3521  0039C6  EC59  F01E         	call	_writeEEPROM	;wreg free
  3522  0039CA                     l8719:
  3523  0039CA  2A10               	incf	doActionDisable@i,f,c
  3524  0039CC  0E07               	movlw	7
  3525  0039CE  6410               	cpfsgt	doActionDisable@i,c
  3526  0039D0  D7CE               	goto	l8709
  3527  0039D2  0C07               	retlw	7
  3528  0039D4                     __end_of_doActionDisable:
  3529                           	opt stack 0
  3530                           tblptru	equ	0xFF8
  3531                           prodh	equ	0xFF4
  3532                           prodl	equ	0xFF3
  3533                           postinc0	equ	0xFEE
  3534                           wreg	equ	0xFE8
  3535                           postinc2	equ	0xFDE
  3536                           postdec2	equ	0xFDD
  3537                           fsr2h	equ	0xFDA
  3538                           fsr2l	equ	0xFD9
  3539                           status	equ	0xFD8
  3540                           
  3541 ;; *************** function _doActionStatus *****************
  3542 ;; Defined at:
  3543 ;;		line 1969 in file "../main.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  dmflags         1    wreg     unsigned char 
  3546 ;;  arg             1   80[COMRAM] unsigned char 
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3549 ;;  i               1   27[BANK0 ] unsigned char 
  3550 ;;  val             1   26[BANK0 ] unsigned char 
  3551 ;;  bOn             1   25[BANK0 ] enum E15660
  3552 ;; Return value:  Size  Location     Type
  3553 ;;		None               void
  3554 ;; Registers used:
  3555 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3556 ;; Tracked objects:
  3557 ;;		On entry : F/0
  3558 ;;		On exit  : F/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3561 ;;      Params:         1       0       0       0       0       0       0
  3562 ;;      Locals:         0       4       0       0       0       0       0
  3563 ;;      Temps:          0       2       0       0       0       0       0
  3564 ;;      Totals:         1       6       0       0       0       0       0
  3565 ;;Total ram usage:        7 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    7
  3568 ;; This function calls:
  3569 ;;		_readEEPROM
  3570 ;;		_SendInformationEvent
  3571 ;; This function is called by:
  3572 ;;		_doDM
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           	psect	text11
  3577  003234                     __ptext11:
  3578                           	opt stack 0
  3579  003234                     _doActionStatus:
  3580                           	opt stack 22
  3581                           
  3582                           ;incstack = 0
  3583                           ;incstack = 0
  3584                           ;doActionStatus@dmflags stored from wreg
  3585  003234  CFE8 F0C9          	movff	wreg,doActionStatus@dmflags
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;main.c: 1971: unsigned char i;
  3589                           ;main.c: 1972: unsigned char val;
  3590                           ;main.c: 1973: BOOL bOn = 0;
  3591  003238  6BCA               	clrf	doActionStatus@bOn& (0+255),b
  3592                           
  3593                           ;main.c: 1975: for (i = 0; i < 8; i++) {
  3594  00323A  6BCC               	clrf	doActionStatus@i& (0+255),b
  3595  00323C                     l10309:
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;main.c: 1978: if (!(arg & (1 << i))) continue;
  3599  00323C  C0CC  F0C7         	movff	doActionStatus@i,??_doActionStatus
  3600  003240  0E01               	movlw	1
  3601  003242  6FC8               	movwf	(??_doActionStatus+1)& (0+255),b
  3602  003244  2BC7               	incf	??_doActionStatus& (0+255),f,b
  3603  003246  D002               	goto	u13004
  3604  003248                     u13005:
  3605  003248  90D8               	bcf	status,0,c
  3606  00324A  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3607  00324C                     u13004:
  3608  00324C  2FC7               	decfsz	??_doActionStatus& (0+255),f,b
  3609  00324E  D7FC               	goto	u13005
  3610  003250  51C8               	movf	(??_doActionStatus+1)& (0+255),w,b
  3611  003252  1451               	andwf	doActionStatus@arg,w,c
  3612  003254  E070               	bz	l10353
  3613                           
  3614                           ; BSR set to: 0
  3615                           ;main.c: 1981: if (dmflags & 0x08) {
  3616  003256  A7C9               	btfss	doActionStatus@dmflags& (0+255),3,b
  3617  003258  D00B               	goto	l10317
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;main.c: 1982: if (vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3621                           ;main.c: 1983: 53 +
  3622                           ;main.c: 1984: i ) ) {
  3623  00325A  0E78               	movlw	120
  3624  00325C  25CC               	addwf	doActionStatus@i& (0+255),w,b
  3625  00325E  6E08               	movwf	?_readEEPROM,c
  3626  003260  6A09               	clrf	?_readEEPROM+1,c
  3627  003262  0E00               	movlw	0
  3628  003264  2209               	addwfc	?_readEEPROM+1,f,c
  3629  003266  EC81  F01F         	call	_readEEPROM	;wreg free
  3630  00326A  0100               	movlb	0	; () banked
  3631  00326C  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3632  00326E  E163               	bnz	l10353
  3633  003270                     l10317:
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;main.c: 1986: }
  3637                           ;main.c: 1987: }
  3638                           ;main.c: 1989: val = readEEPROM( 0x43 + 10 + i );
  3639  003270  0E4D               	movlw	77
  3640  003272  25CC               	addwf	doActionStatus@i& (0+255),w,b
  3641  003274  6E08               	movwf	?_readEEPROM,c
  3642  003276  6A09               	clrf	?_readEEPROM+1,c
  3643  003278  0E00               	movlw	0
  3644  00327A  2209               	addwfc	?_readEEPROM+1,f,c
  3645  00327C  EC81  F01F         	call	_readEEPROM	;wreg free
  3646  003280  0100               	movlb	0	; () banked
  3647  003282  6FCB               	movwf	doActionStatus@val& (0+255),b
  3648                           
  3649                           ;main.c: 1991: switch (i) {
  3650  003284  D023               	goto	l10335
  3651  003286                     l10319:
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;main.c: 1994: bOn = LATBbits.LATB4;
  3655  003286  0E00               	movlw	0
  3656  003288  B88A               	btfsc	3978,4,c	;volatile
  3657  00328A  0E01               	movlw	1
  3658  00328C  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3659                           
  3660                           ;main.c: 1995: break;
  3661  00328E  D02C               	goto	l10337
  3662  003290                     l10321:
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;main.c: 1998: bOn = LATBbits.LATB1;
  3666  003290  0E00               	movlw	0
  3667  003292  B28A               	btfsc	3978,1,c	;volatile
  3668  003294  0E01               	movlw	1
  3669  003296  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3670                           
  3671                           ;main.c: 1999: break;
  3672  003298  D027               	goto	l10337
  3673  00329A                     l10323:
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;main.c: 2002: bOn = LATBbits.LATB0;
  3677  00329A  0E00               	movlw	0
  3678  00329C  B08A               	btfsc	3978,0,c	;volatile
  3679  00329E  0E01               	movlw	1
  3680  0032A0  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3681                           
  3682                           ;main.c: 2003: break;
  3683  0032A2  D022               	goto	l10337
  3684  0032A4                     l10325:
  3685                           
  3686                           ; BSR set to: 0
  3687                           ;main.c: 2006: bOn = LATCbits.LATC7;
  3688  0032A4  0E00               	movlw	0
  3689  0032A6  BE8B               	btfsc	3979,7,c	;volatile
  3690  0032A8  0E01               	movlw	1
  3691  0032AA  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3692                           
  3693                           ;main.c: 2007: break;
  3694  0032AC  D01D               	goto	l10337
  3695  0032AE                     l10327:
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;main.c: 2010: bOn = LATCbits.LATC6;
  3699  0032AE  0E00               	movlw	0
  3700  0032B0  BC8B               	btfsc	3979,6,c	;volatile
  3701  0032B2  0E01               	movlw	1
  3702  0032B4  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3703                           
  3704                           ;main.c: 2011: break;
  3705  0032B6  D018               	goto	l10337
  3706  0032B8                     l10329:
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;main.c: 2014: bOn = LATCbits.LATC5;
  3710  0032B8  0E00               	movlw	0
  3711  0032BA  BA8B               	btfsc	3979,5,c	;volatile
  3712  0032BC  0E01               	movlw	1
  3713  0032BE  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3714                           
  3715                           ;main.c: 2015: break;
  3716  0032C0  D013               	goto	l10337
  3717  0032C2                     l10331:
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;main.c: 2018: bOn = LATCbits.LATC4;
  3721  0032C2  0E00               	movlw	0
  3722  0032C4  B88B               	btfsc	3979,4,c	;volatile
  3723  0032C6  0E01               	movlw	1
  3724  0032C8  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3725                           
  3726                           ;main.c: 2019: break;
  3727  0032CA  D00E               	goto	l10337
  3728  0032CC                     l10335:
  3729                           
  3730                           ; BSR set to: 0
  3731  0032CC  51CC               	movf	doActionStatus@i& (0+255),w,b
  3732                           
  3733                           ; Switch size 1, requested type "speed"
  3734                           ; Number of cases is 7, Range of values is 0 to 6
  3735                           ; switch strategies available:
  3736                           ; Name         Instructions Cycles
  3737                           ; simple_byte           22    12 (average)
  3738                           ;	Chosen strategy is simple_byte
  3739  0032CE  E0DB               	bz	l10319
  3740  0032D0  0A01               	xorlw	1	; case 1
  3741  0032D2  E0DE               	bz	l10321
  3742  0032D4  0A03               	xorlw	3	; case 2
  3743  0032D6  E0E1               	bz	l10323
  3744  0032D8  0A01               	xorlw	1	; case 3
  3745  0032DA  E0E4               	bz	l10325
  3746  0032DC  0A07               	xorlw	7	; case 4
  3747  0032DE  E0E7               	bz	l10327
  3748  0032E0  0A01               	xorlw	1	; case 5
  3749  0032E2  E0EA               	bz	l10329
  3750  0032E4  0A03               	xorlw	3	; case 6
  3751  0032E6  E0ED               	bz	l10331
  3752  0032E8                     l10337:
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;main.c: 2023: if (bOn) {
  3756  0032E8  51CA               	movf	doActionStatus@bOn& (0+255),w,b
  3757  0032EA  E013               	bz	l514
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;main.c: 2026: if ( val & 0x10 ) {
  3761  0032EC  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3762  0032EE  D007               	goto	l10343
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;main.c: 2027: SendInformationEvent( i, 20, 4 );
  3766  0032F0  0E14               	movlw	20
  3767  0032F2  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3768  0032F4  0E04               	movlw	4
  3769  0032F6  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3770  0032F8  51CC               	movf	doActionStatus@i& (0+255),w,b
  3771  0032FA  ECEA  F01C         	call	_SendInformationEvent
  3772  0032FE                     l10343:
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;main.c: 2028: }
  3776                           ;main.c: 2031: if ( val & 0x40 ) {
  3777  0032FE  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3778  003300  D01A               	goto	l10353
  3779                           
  3780                           ; BSR set to: 0
  3781                           ;main.c: 2032: SendInformationEvent( i, 20, 24 );
  3782  003302  0E14               	movlw	20
  3783  003304  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3784  003306  0E18               	movlw	24
  3785  003308  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3786  00330A  51CC               	movf	doActionStatus@i& (0+255),w,b
  3787  00330C  ECEA  F01C         	call	_SendInformationEvent
  3788  003310  D012               	goto	l10353
  3789  003312                     l514:
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;main.c: 2036: else {
  3793                           ;main.c: 2039: if ( val & 0x10 ) {
  3794  003312  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3795  003314  D007               	goto	l10349
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;main.c: 2040: SendInformationEvent( i, 20, 4 );
  3799  003316  0E14               	movlw	20
  3800  003318  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3801  00331A  0E04               	movlw	4
  3802  00331C  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3803  00331E  51CC               	movf	doActionStatus@i& (0+255),w,b
  3804  003320  ECEA  F01C         	call	_SendInformationEvent
  3805  003324                     l10349:
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;main.c: 2041: }
  3809                           ;main.c: 2044: if ( val & 0x40 ) {
  3810  003324  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3811  003326  D007               	goto	l10353
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;main.c: 2045: SendInformationEvent( i, 20, 24 );
  3815  003328  0E14               	movlw	20
  3816  00332A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3817  00332C  0E18               	movlw	24
  3818  00332E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3819  003330  51CC               	movf	doActionStatus@i& (0+255),w,b
  3820  003332  ECEA  F01C         	call	_SendInformationEvent
  3821  003336                     l10353:
  3822                           
  3823                           ; BSR set to: 0
  3824  003336  2BCC               	incf	doActionStatus@i& (0+255),f,b
  3825                           
  3826                           ; BSR set to: 0
  3827  003338  0E07               	movlw	7
  3828  00333A  65CC               	cpfsgt	doActionStatus@i& (0+255),b
  3829  00333C  D77F               	goto	l10309
  3830                           
  3831                           ; BSR set to: 0
  3832  00333E  0C07               	retlw	7
  3833  003340                     __end_of_doActionStatus:
  3834                           	opt stack 0
  3835                           tblptru	equ	0xFF8
  3836                           prodh	equ	0xFF4
  3837                           prodl	equ	0xFF3
  3838                           postinc0	equ	0xFEE
  3839                           wreg	equ	0xFE8
  3840                           postinc2	equ	0xFDE
  3841                           postdec2	equ	0xFDD
  3842                           fsr2h	equ	0xFDA
  3843                           fsr2l	equ	0xFD9
  3844                           status	equ	0xFD8
  3845                           
  3846 ;; *************** function _doActionPulse *****************
  3847 ;; Defined at:
  3848 ;;		line 1878 in file "../main.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;  dmflags         1    wreg     unsigned char 
  3851 ;;  arg             1   10[COMRAM] unsigned char 
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;  dmflags         1   14[COMRAM] unsigned char 
  3854 ;;  i               1   16[COMRAM] unsigned char 
  3855 ;;  val             1   15[COMRAM] unsigned char 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;		None               void
  3858 ;; Registers used:
  3859 ;;		wreg, status,2, status,0, cstack
  3860 ;; Tracked objects:
  3861 ;;		On entry : F/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3865 ;;      Params:         1       0       0       0       0       0       0
  3866 ;;      Locals:         3       0       0       0       0       0       0
  3867 ;;      Temps:          3       0       0       0       0       0       0
  3868 ;;      Totals:         7       0       0       0       0       0       0
  3869 ;;Total ram usage:        7 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    3
  3872 ;; This function calls:
  3873 ;;		_readEEPROM
  3874 ;; This function is called by:
  3875 ;;		_doDM
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           	psect	text12
  3880  002850                     __ptext12:
  3881                           	opt stack 0
  3882  002850                     _doActionPulse:
  3883                           	opt stack 26
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;incstack = 0
  3887                           ;incstack = 0
  3888                           ;doActionPulse@dmflags stored from wreg
  3889  002850  CFE8 F00F          	movff	wreg,doActionPulse@dmflags
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;main.c: 1880: unsigned char i;
  3893                           ;main.c: 1881: unsigned char val;
  3894                           ;main.c: 1883: for ( i = 0; i < 8; i++ ) {
  3895  002854  6A11               	clrf	doActionPulse@i,c
  3896  002856                     l8599:
  3897                           
  3898                           ;main.c: 1886: if ( !( arg & ( 1 << i ) ) ) continue;
  3899  002856  C011  F00C         	movff	doActionPulse@i,??_doActionPulse
  3900  00285A  0E01               	movlw	1
  3901  00285C  6E0D               	movwf	(??_doActionPulse+1)& (0+255),c
  3902  00285E  2A0C               	incf	??_doActionPulse,f,c
  3903  002860  D002               	goto	u10124
  3904  002862                     u10125:
  3905  002862  90D8               	bcf	status,0,c
  3906  002864  360D               	rlcf	??_doActionPulse+1,f,c
  3907  002866                     u10124:
  3908  002866  2E0C               	decfsz	??_doActionPulse,f,c
  3909  002868  D7FC               	goto	u10125
  3910  00286A  500D               	movf	??_doActionPulse+1,w,c
  3911  00286C  140B               	andwf	doActionPulse@arg,w,c
  3912  00286E  E101 D0D2          	bz	l8645
  3913                           
  3914                           ;main.c: 1889: if (dmflags & 0x08) {
  3915  002872  A60F               	btfss	doActionPulse@dmflags,3,c
  3916  002874  D00C               	goto	l8607
  3917                           
  3918                           ;main.c: 1890: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3919                           ;main.c: 1891: 53 +
  3920                           ;main.c: 1892: i ) ) {
  3921  002876  0E78               	movlw	120
  3922  002878  2411               	addwf	doActionPulse@i,w,c
  3923  00287A  6E08               	movwf	?_readEEPROM,c
  3924  00287C  6A09               	clrf	?_readEEPROM+1,c
  3925  00287E  0E00               	movlw	0
  3926  002880  2209               	addwfc	?_readEEPROM+1,f,c
  3927  002882  EC81  F01F         	call	_readEEPROM	;wreg free
  3928  002886  0100               	movlb	0	; () banked
  3929  002888  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3930  00288A  E001 D0C4          	bnz	l8645
  3931  00288E                     l8607:
  3932                           
  3933                           ;main.c: 1894: }
  3934                           ;main.c: 1895: }
  3935                           ;main.c: 1897: val = readEEPROM( 0x43 + 10 + i );
  3936  00288E  0E4D               	movlw	77
  3937  002890  2411               	addwf	doActionPulse@i,w,c
  3938  002892  6E08               	movwf	?_readEEPROM,c
  3939  002894  6A09               	clrf	?_readEEPROM+1,c
  3940  002896  0E00               	movlw	0
  3941  002898  2209               	addwfc	?_readEEPROM+1,f,c
  3942  00289A  EC81  F01F         	call	_readEEPROM	;wreg free
  3943  00289E  6E10               	movwf	doActionPulse@val,c
  3944                           
  3945                           ;main.c: 1900: if ( !( val & 0x80 ) ) continue;
  3946  0028A0  AE10               	btfss	doActionPulse@val,7,c
  3947  0028A2  D0B9               	goto	l8645
  3948  0028A4  D0A8               	goto	l8643
  3949  0028A6                     l488:
  3950                           
  3951                           ;main.c: 1905: LATBbits.LATB4 = 0;
  3952  0028A6  988A               	bcf	3978,4,c	;volatile
  3953                           
  3954                           ;main.c: 1906: relay_pulse_flags |= 0x01;
  3955  0028A8  0100               	movlb	0	; () banked
  3956  0028AA  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;main.c: 1907: relay_pulse_timer[ 0 ] =
  3960                           ;main.c: 1908: readEEPROM( 0x43 + 18 ) * 256 +
  3961                           ;main.c: 1909: readEEPROM( 0x43 + 19 );
  3962  0028AC  6A09               	clrf	?_readEEPROM+1,c
  3963  0028AE  0E56               	movlw	86
  3964  0028B0  6E08               	movwf	?_readEEPROM,c
  3965  0028B2  EC81  F01F         	call	_readEEPROM	;wreg free
  3966  0028B6  6E0C               	movwf	??_doActionPulse& (0+255),c
  3967  0028B8  6A09               	clrf	?_readEEPROM+1,c
  3968  0028BA  0E55               	movlw	85
  3969  0028BC  6E08               	movwf	?_readEEPROM,c
  3970  0028BE  EC81  F01F         	call	_readEEPROM	;wreg free
  3971  0028C2  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  3972  0028C4  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  3973  0028C6  500C               	movf	??_doActionPulse,w,c
  3974  0028C8  240D               	addwf	??_doActionPulse+1,w,c
  3975  0028CA  0100               	movlb	0	; () banked
  3976  0028CC  6F70               	movwf	_relay_pulse_timer& (0+255),b
  3977  0028CE  0E00               	movlw	0
  3978  0028D0  200E               	addwfc	??_doActionPulse+2,w,c
  3979  0028D2  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  3980                           
  3981                           ;main.c: 1910: break;
  3982  0028D4  D0A0               	goto	l8645
  3983  0028D6                     l490:
  3984                           
  3985                           ;main.c: 1913: LATBbits.LATB1 = 0;
  3986  0028D6  928A               	bcf	3978,1,c	;volatile
  3987                           
  3988                           ;main.c: 1914: relay_pulse_flags |= 0x02;
  3989  0028D8  0100               	movlb	0	; () banked
  3990  0028DA  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;main.c: 1915: relay_pulse_timer[ 1 ] =
  3994                           ;main.c: 1916: readEEPROM( 0x43 + 20 ) * 256 +
  3995                           ;main.c: 1917: readEEPROM( 0x43 + 21 );
  3996  0028DC  6A09               	clrf	?_readEEPROM+1,c
  3997  0028DE  0E58               	movlw	88
  3998  0028E0  6E08               	movwf	?_readEEPROM,c
  3999  0028E2  EC81  F01F         	call	_readEEPROM	;wreg free
  4000  0028E6  6E0C               	movwf	??_doActionPulse& (0+255),c
  4001  0028E8  6A09               	clrf	?_readEEPROM+1,c
  4002  0028EA  0E57               	movlw	87
  4003  0028EC  6E08               	movwf	?_readEEPROM,c
  4004  0028EE  EC81  F01F         	call	_readEEPROM	;wreg free
  4005  0028F2  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4006  0028F4  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4007  0028F6  500C               	movf	??_doActionPulse,w,c
  4008  0028F8  240D               	addwf	??_doActionPulse+1,w,c
  4009  0028FA  0100               	movlb	0	; () banked
  4010  0028FC  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  4011  0028FE  0E00               	movlw	0
  4012  002900  200E               	addwfc	??_doActionPulse+2,w,c
  4013  002902  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  4014                           
  4015                           ;main.c: 1918: break;
  4016  002904  D088               	goto	l8645
  4017  002906                     l491:
  4018                           
  4019                           ;main.c: 1921: LATBbits.LATB0 = 0;
  4020  002906  908A               	bcf	3978,0,c	;volatile
  4021                           
  4022                           ;main.c: 1922: relay_pulse_flags |= 0x04;
  4023  002908  0100               	movlb	0	; () banked
  4024  00290A  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;main.c: 1923: relay_pulse_timer[ 2 ] =
  4028                           ;main.c: 1924: readEEPROM( 0x43 + 22 ) * 256 +
  4029                           ;main.c: 1925: readEEPROM( 0x43 + 23 );
  4030  00290C  6A09               	clrf	?_readEEPROM+1,c
  4031  00290E  0E5A               	movlw	90
  4032  002910  6E08               	movwf	?_readEEPROM,c
  4033  002912  EC81  F01F         	call	_readEEPROM	;wreg free
  4034  002916  6E0C               	movwf	??_doActionPulse& (0+255),c
  4035  002918  6A09               	clrf	?_readEEPROM+1,c
  4036  00291A  0E59               	movlw	89
  4037  00291C  6E08               	movwf	?_readEEPROM,c
  4038  00291E  EC81  F01F         	call	_readEEPROM	;wreg free
  4039  002922  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4040  002924  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4041  002926  500C               	movf	??_doActionPulse,w,c
  4042  002928  240D               	addwf	??_doActionPulse+1,w,c
  4043  00292A  0100               	movlb	0	; () banked
  4044  00292C  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  4045  00292E  0E00               	movlw	0
  4046  002930  200E               	addwfc	??_doActionPulse+2,w,c
  4047  002932  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  4048                           
  4049                           ;main.c: 1926: break;
  4050  002934  D070               	goto	l8645
  4051  002936                     l492:
  4052                           
  4053                           ;main.c: 1929: LATCbits.LATC7 = 0;
  4054  002936  9E8B               	bcf	3979,7,c	;volatile
  4055                           
  4056                           ;main.c: 1930: relay_pulse_flags |= 0x08;
  4057  002938  0100               	movlb	0	; () banked
  4058  00293A  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;main.c: 1931: relay_pulse_timer[ 3 ] =
  4062                           ;main.c: 1932: readEEPROM( 0x43 + 24 ) * 256 +
  4063                           ;main.c: 1933: readEEPROM( 0x43 + 25 );
  4064  00293C  6A09               	clrf	?_readEEPROM+1,c
  4065  00293E  0E5C               	movlw	92
  4066  002940  6E08               	movwf	?_readEEPROM,c
  4067  002942  EC81  F01F         	call	_readEEPROM	;wreg free
  4068  002946  6E0C               	movwf	??_doActionPulse& (0+255),c
  4069  002948  6A09               	clrf	?_readEEPROM+1,c
  4070  00294A  0E5B               	movlw	91
  4071  00294C  6E08               	movwf	?_readEEPROM,c
  4072  00294E  EC81  F01F         	call	_readEEPROM	;wreg free
  4073  002952  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4074  002954  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4075  002956  500C               	movf	??_doActionPulse,w,c
  4076  002958  240D               	addwf	??_doActionPulse+1,w,c
  4077  00295A  0100               	movlb	0	; () banked
  4078  00295C  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  4079  00295E  0E00               	movlw	0
  4080  002960  200E               	addwfc	??_doActionPulse+2,w,c
  4081  002962  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  4082                           
  4083                           ;main.c: 1934: break;
  4084  002964  D058               	goto	l8645
  4085  002966                     l493:
  4086                           
  4087                           ;main.c: 1937: LATCbits.LATC6 = 0;
  4088  002966  9C8B               	bcf	3979,6,c	;volatile
  4089                           
  4090                           ;main.c: 1938: relay_pulse_flags |= 0x10;
  4091  002968  0100               	movlb	0	; () banked
  4092  00296A  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;main.c: 1939: relay_pulse_timer[ 4 ] =
  4096                           ;main.c: 1940: readEEPROM( 0x43 + 26 ) * 256 +
  4097                           ;main.c: 1941: readEEPROM( 0x43 + 27 );
  4098  00296C  6A09               	clrf	?_readEEPROM+1,c
  4099  00296E  0E5E               	movlw	94
  4100  002970  6E08               	movwf	?_readEEPROM,c
  4101  002972  EC81  F01F         	call	_readEEPROM	;wreg free
  4102  002976  6E0C               	movwf	??_doActionPulse& (0+255),c
  4103  002978  6A09               	clrf	?_readEEPROM+1,c
  4104  00297A  0E5D               	movlw	93
  4105  00297C  6E08               	movwf	?_readEEPROM,c
  4106  00297E  EC81  F01F         	call	_readEEPROM	;wreg free
  4107  002982  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4108  002984  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4109  002986  500C               	movf	??_doActionPulse,w,c
  4110  002988  240D               	addwf	??_doActionPulse+1,w,c
  4111  00298A  0100               	movlb	0	; () banked
  4112  00298C  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  4113  00298E  0E00               	movlw	0
  4114  002990  200E               	addwfc	??_doActionPulse+2,w,c
  4115  002992  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  4116                           
  4117                           ;main.c: 1942: break;
  4118  002994  D040               	goto	l8645
  4119  002996                     l494:
  4120                           
  4121                           ;main.c: 1945: LATCbits.LATC5 = 0;
  4122  002996  9A8B               	bcf	3979,5,c	;volatile
  4123                           
  4124                           ;main.c: 1946: relay_pulse_flags |= 0x20;
  4125  002998  0100               	movlb	0	; () banked
  4126  00299A  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;main.c: 1947: relay_pulse_timer[ 5 ] =
  4130                           ;main.c: 1948: readEEPROM( 0x43 + 28 ) * 256 +
  4131                           ;main.c: 1949: readEEPROM( 0x43 + 29 );
  4132  00299C  6A09               	clrf	?_readEEPROM+1,c
  4133  00299E  0E60               	movlw	96
  4134  0029A0  6E08               	movwf	?_readEEPROM,c
  4135  0029A2  EC81  F01F         	call	_readEEPROM	;wreg free
  4136  0029A6  6E0C               	movwf	??_doActionPulse& (0+255),c
  4137  0029A8  6A09               	clrf	?_readEEPROM+1,c
  4138  0029AA  0E5F               	movlw	95
  4139  0029AC  6E08               	movwf	?_readEEPROM,c
  4140  0029AE  EC81  F01F         	call	_readEEPROM	;wreg free
  4141  0029B2  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4142  0029B4  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4143  0029B6  500C               	movf	??_doActionPulse,w,c
  4144  0029B8  240D               	addwf	??_doActionPulse+1,w,c
  4145  0029BA  0100               	movlb	0	; () banked
  4146  0029BC  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  4147  0029BE  0E00               	movlw	0
  4148  0029C0  200E               	addwfc	??_doActionPulse+2,w,c
  4149  0029C2  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  4150                           
  4151                           ;main.c: 1950: break;
  4152  0029C4  D028               	goto	l8645
  4153  0029C6                     l495:
  4154                           
  4155                           ;main.c: 1953: LATCbits.LATC4 = 0;
  4156  0029C6  988B               	bcf	3979,4,c	;volatile
  4157                           
  4158                           ;main.c: 1954: relay_pulse_flags |= 0x40;
  4159  0029C8  0100               	movlb	0	; () banked
  4160  0029CA  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;main.c: 1955: relay_pulse_timer[ 6 ] =
  4164                           ;main.c: 1956: readEEPROM( 0x43 + 30 ) * 256 +
  4165                           ;main.c: 1957: readEEPROM( 0x43 + 31 );
  4166  0029CC  6A09               	clrf	?_readEEPROM+1,c
  4167  0029CE  0E62               	movlw	98
  4168  0029D0  6E08               	movwf	?_readEEPROM,c
  4169  0029D2  EC81  F01F         	call	_readEEPROM	;wreg free
  4170  0029D6  6E0C               	movwf	??_doActionPulse& (0+255),c
  4171  0029D8  6A09               	clrf	?_readEEPROM+1,c
  4172  0029DA  0E61               	movlw	97
  4173  0029DC  6E08               	movwf	?_readEEPROM,c
  4174  0029DE  EC81  F01F         	call	_readEEPROM	;wreg free
  4175  0029E2  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4176  0029E4  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4177  0029E6  500C               	movf	??_doActionPulse,w,c
  4178  0029E8  240D               	addwf	??_doActionPulse+1,w,c
  4179  0029EA  0100               	movlb	0	; () banked
  4180  0029EC  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  4181  0029EE  0E00               	movlw	0
  4182  0029F0  200E               	addwfc	??_doActionPulse+2,w,c
  4183  0029F2  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  4184                           
  4185                           ;main.c: 1958: break;
  4186  0029F4  D010               	goto	l8645
  4187  0029F6                     l8643:
  4188  0029F6  5011               	movf	doActionPulse@i,w,c
  4189                           
  4190                           ; Switch size 1, requested type "speed"
  4191                           ; Number of cases is 7, Range of values is 0 to 6
  4192                           ; switch strategies available:
  4193                           ; Name         Instructions Cycles
  4194                           ; simple_byte           22    12 (average)
  4195                           ;	Chosen strategy is simple_byte
  4196  0029F8  E101 D755          	bz	l488
  4197  0029FC  0A01               	xorlw	1	; case 1
  4198  0029FE  E101 D76A          	bz	l490
  4199  002A02  0A03               	xorlw	3	; case 2
  4200  002A04  E080               	bz	l491
  4201  002A06  0A01               	xorlw	1	; case 3
  4202  002A08  E096               	bz	l492
  4203  002A0A  0A07               	xorlw	7	; case 4
  4204  002A0C  E0AC               	bz	l493
  4205  002A0E  0A01               	xorlw	1	; case 5
  4206  002A10  E0C2               	bz	l494
  4207  002A12  0A03               	xorlw	3	; case 6
  4208  002A14  E0D8               	bz	l495
  4209  002A16                     l8645:
  4210  002A16  2A11               	incf	doActionPulse@i,f,c
  4211  002A18  0E07               	movlw	7
  4212  002A1A  6411               	cpfsgt	doActionPulse@i,c
  4213  002A1C  D71C               	goto	l8599
  4214  002A1E  0C07               	retlw	7
  4215  002A20                     __end_of_doActionPulse:
  4216                           	opt stack 0
  4217                           tblptru	equ	0xFF8
  4218                           prodh	equ	0xFF4
  4219                           prodl	equ	0xFF3
  4220                           postinc0	equ	0xFEE
  4221                           wreg	equ	0xFE8
  4222                           postinc2	equ	0xFDE
  4223                           postdec2	equ	0xFDD
  4224                           fsr2h	equ	0xFDA
  4225                           fsr2l	equ	0xFD9
  4226                           status	equ	0xFD8
  4227                           
  4228 ;; *************** function _doActionOn *****************
  4229 ;; Defined at:
  4230 ;;		line 1690 in file "../main.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;  dmflags         1    wreg     unsigned char 
  4233 ;;  arg             1   80[COMRAM] unsigned char 
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;  dmflags         1   25[BANK0 ] unsigned char 
  4236 ;;  i               1   27[BANK0 ] unsigned char 
  4237 ;;  val             1   26[BANK0 ] unsigned char 
  4238 ;; Return value:  Size  Location     Type
  4239 ;;		None               void
  4240 ;; Registers used:
  4241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4242 ;; Tracked objects:
  4243 ;;		On entry : F/0
  4244 ;;		On exit  : F/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4247 ;;      Params:         1       0       0       0       0       0       0
  4248 ;;      Locals:         0       3       0       0       0       0       0
  4249 ;;      Temps:          0       3       0       0       0       0       0
  4250 ;;      Totals:         1       6       0       0       0       0       0
  4251 ;;Total ram usage:        7 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    7
  4254 ;; This function calls:
  4255 ;;		_readEEPROM
  4256 ;;		_SendInformationEvent
  4257 ;; This function is called by:
  4258 ;;		_doDM
  4259 ;; This function uses a non-reentrant model
  4260 ;;
  4261                           
  4262                           	psect	text13
  4263  0023D8                     __ptext13:
  4264                           	opt stack 0
  4265  0023D8                     _doActionOn:
  4266                           	opt stack 22
  4267                           
  4268                           ;incstack = 0
  4269                           ;incstack = 0
  4270                           ;doActionOn@dmflags stored from wreg
  4271  0023D8  CFE8 F0CA          	movff	wreg,doActionOn@dmflags
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;main.c: 1692: unsigned char i;
  4275                           ;main.c: 1693: unsigned char val;
  4276                           ;main.c: 1695: for (i = 0; i < 8; i++) {
  4277  0023DC  6BCC               	clrf	doActionOn@i& (0+255),b
  4278  0023DE                     l10247:
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;main.c: 1698: if ( !( arg & ( 1 << i ) ) ) continue;
  4282  0023DE  C0CC  F0C7         	movff	doActionOn@i,??_doActionOn
  4283  0023E2  0E01               	movlw	1
  4284  0023E4  6FC8               	movwf	(??_doActionOn+1)& (0+255),b
  4285  0023E6  2BC7               	incf	??_doActionOn& (0+255),f,b
  4286  0023E8  D002               	goto	u12854
  4287  0023EA                     u12855:
  4288  0023EA  90D8               	bcf	status,0,c
  4289  0023EC  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4290  0023EE                     u12854:
  4291  0023EE  2FC7               	decfsz	??_doActionOn& (0+255),f,b
  4292  0023F0  D7FC               	goto	u12855
  4293  0023F2  51C8               	movf	(??_doActionOn+1)& (0+255),w,b
  4294  0023F4  1451               	andwf	doActionOn@arg,w,c
  4295  0023F6  E101 D11F          	bz	l10299
  4296                           
  4297                           ; BSR set to: 0
  4298                           ;main.c: 1701: if ( dmflags & 0x08 ) {
  4299  0023FA  A7CA               	btfss	doActionOn@dmflags& (0+255),3,b
  4300  0023FC  D00C               	goto	l10255
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;main.c: 1702: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  4304                           ;main.c: 1703: 53 +
  4305                           ;main.c: 1704: i ) ) {
  4306  0023FE  0E78               	movlw	120
  4307  002400  25CC               	addwf	doActionOn@i& (0+255),w,b
  4308  002402  6E08               	movwf	?_readEEPROM,c
  4309  002404  6A09               	clrf	?_readEEPROM+1,c
  4310  002406  0E00               	movlw	0
  4311  002408  2209               	addwfc	?_readEEPROM+1,f,c
  4312  00240A  EC81  F01F         	call	_readEEPROM	;wreg free
  4313  00240E  0100               	movlb	0	; () banked
  4314  002410  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4315  002412  E001 D111          	bnz	l10299
  4316  002416                     l10255:
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;main.c: 1706: }
  4320                           ;main.c: 1707: }
  4321                           ;main.c: 1709: val = readEEPROM( 0x43 + 10 + i );
  4322  002416  0E4D               	movlw	77
  4323  002418  25CC               	addwf	doActionOn@i& (0+255),w,b
  4324  00241A  6E08               	movwf	?_readEEPROM,c
  4325  00241C  6A09               	clrf	?_readEEPROM+1,c
  4326  00241E  0E00               	movlw	0
  4327  002420  2209               	addwfc	?_readEEPROM+1,f,c
  4328  002422  EC81  F01F         	call	_readEEPROM	;wreg free
  4329  002426  0100               	movlb	0	; () banked
  4330  002428  6FCB               	movwf	doActionOn@val& (0+255),b
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;main.c: 1712: if ( !( val & 0x80 ) ) continue;
  4334  00242A  AFCB               	btfss	doActionOn@val& (0+255),7,b
  4335  00242C  D105               	goto	l10299
  4336  00242E  D0E0               	goto	l10291
  4337  002430                     l439:
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;main.c: 1717: LATBbits.LATB4 = 1;
  4341  002430  888A               	bsf	3978,4,c	;volatile
  4342                           
  4343                           ; BSR set to: 0
  4344                           ;main.c: 1719: if (readEEPROM( 0x43 + 10 ) & 0x04 ) {
  4345  002432  6A09               	clrf	?_readEEPROM+1,c
  4346  002434  0E4D               	movlw	77
  4347  002436  6E08               	movwf	?_readEEPROM,c
  4348  002438  EC81  F01F         	call	_readEEPROM	;wreg free
  4349  00243C  0100               	movlb	0	; () banked
  4350  00243E  6FC7               	movwf	??_doActionOn& (0+255),b
  4351  002440  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4352  002442  D0E8               	goto	l441
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;main.c: 1720: relay_protection_timer[ 0 ] =
  4356                           ;main.c: 1721: readEEPROM( 0x43 + 34 ) * 256 +
  4357                           ;main.c: 1722: readEEPROM( 0x43 + 35 );
  4358  002444  6A09               	clrf	?_readEEPROM+1,c
  4359  002446  0E66               	movlw	102
  4360  002448  6E08               	movwf	?_readEEPROM,c
  4361  00244A  EC81  F01F         	call	_readEEPROM	;wreg free
  4362  00244E  0100               	movlb	0	; () banked
  4363  002450  6FC7               	movwf	??_doActionOn& (0+255),b
  4364  002452  6A09               	clrf	?_readEEPROM+1,c
  4365  002454  0E65               	movlw	101
  4366  002456  6E08               	movwf	?_readEEPROM,c
  4367  002458  EC81  F01F         	call	_readEEPROM	;wreg free
  4368  00245C  0100               	movlb	0	; () banked
  4369  00245E  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4370  002460  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4371  002462  51C7               	movf	??_doActionOn& (0+255),w,b
  4372  002464  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4373  002466  6F60               	movwf	_relay_protection_timer& (0+255),b
  4374  002468  0E00               	movlw	0
  4375  00246A  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4376  00246C  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  4377  00246E  D0D2               	goto	l441
  4378  002470                     l442:
  4379                           
  4380                           ; BSR set to: 0
  4381                           ;main.c: 1727: LATBbits.LATB1 = 1;
  4382  002470  828A               	bsf	3978,1,c	;volatile
  4383                           
  4384                           ; BSR set to: 0
  4385                           ;main.c: 1729: if (readEEPROM( 0x43 + 11) & 0x04 ) {
  4386  002472  6A09               	clrf	?_readEEPROM+1,c
  4387  002474  0E4E               	movlw	78
  4388  002476  6E08               	movwf	?_readEEPROM,c
  4389  002478  EC81  F01F         	call	_readEEPROM	;wreg free
  4390  00247C  0100               	movlb	0	; () banked
  4391  00247E  6FC7               	movwf	??_doActionOn& (0+255),b
  4392  002480  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4393  002482  D0C8               	goto	l441
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;main.c: 1730: relay_protection_timer[ 1 ] =
  4397                           ;main.c: 1731: readEEPROM( 0x43 + 36 ) * 256 +
  4398                           ;main.c: 1732: readEEPROM( 0x43 + 37 );
  4399  002484  6A09               	clrf	?_readEEPROM+1,c
  4400  002486  0E68               	movlw	104
  4401  002488  6E08               	movwf	?_readEEPROM,c
  4402  00248A  EC81  F01F         	call	_readEEPROM	;wreg free
  4403  00248E  0100               	movlb	0	; () banked
  4404  002490  6FC7               	movwf	??_doActionOn& (0+255),b
  4405  002492  6A09               	clrf	?_readEEPROM+1,c
  4406  002494  0E67               	movlw	103
  4407  002496  6E08               	movwf	?_readEEPROM,c
  4408  002498  EC81  F01F         	call	_readEEPROM	;wreg free
  4409  00249C  0100               	movlb	0	; () banked
  4410  00249E  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4411  0024A0  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4412  0024A2  51C7               	movf	??_doActionOn& (0+255),w,b
  4413  0024A4  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4414  0024A6  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  4415  0024A8  0E00               	movlw	0
  4416  0024AA  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4417  0024AC  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  4418  0024AE  D0B2               	goto	l441
  4419  0024B0                     l444:
  4420                           
  4421                           ; BSR set to: 0
  4422                           ;main.c: 1737: LATBbits.LATB0 = 1;
  4423  0024B0  808A               	bsf	3978,0,c	;volatile
  4424                           
  4425                           ; BSR set to: 0
  4426                           ;main.c: 1739: if (readEEPROM( 0x43 + 12) & 0x04 ) {
  4427  0024B2  6A09               	clrf	?_readEEPROM+1,c
  4428  0024B4  0E4F               	movlw	79
  4429  0024B6  6E08               	movwf	?_readEEPROM,c
  4430  0024B8  EC81  F01F         	call	_readEEPROM	;wreg free
  4431  0024BC  0100               	movlb	0	; () banked
  4432  0024BE  6FC7               	movwf	??_doActionOn& (0+255),b
  4433  0024C0  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4434  0024C2  D0A8               	goto	l441
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;main.c: 1740: relay_protection_timer[ 2 ] =
  4438                           ;main.c: 1741: readEEPROM( 0x43 + 38 ) * 256 +
  4439                           ;main.c: 1742: readEEPROM( 0x43 + 39 );
  4440  0024C4  6A09               	clrf	?_readEEPROM+1,c
  4441  0024C6  0E6A               	movlw	106
  4442  0024C8  6E08               	movwf	?_readEEPROM,c
  4443  0024CA  EC81  F01F         	call	_readEEPROM	;wreg free
  4444  0024CE  0100               	movlb	0	; () banked
  4445  0024D0  6FC7               	movwf	??_doActionOn& (0+255),b
  4446  0024D2  6A09               	clrf	?_readEEPROM+1,c
  4447  0024D4  0E69               	movlw	105
  4448  0024D6  6E08               	movwf	?_readEEPROM,c
  4449  0024D8  EC81  F01F         	call	_readEEPROM	;wreg free
  4450  0024DC  0100               	movlb	0	; () banked
  4451  0024DE  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4452  0024E0  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4453  0024E2  51C7               	movf	??_doActionOn& (0+255),w,b
  4454  0024E4  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4455  0024E6  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  4456  0024E8  0E00               	movlw	0
  4457  0024EA  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4458  0024EC  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  4459  0024EE  D092               	goto	l441
  4460  0024F0                     l446:
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;main.c: 1747: LATCbits.LATC7 = 1;
  4464  0024F0  8E8B               	bsf	3979,7,c	;volatile
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;main.c: 1749: if ( readEEPROM( 0x43 + 13) & 0x04 ) {
  4468  0024F2  6A09               	clrf	?_readEEPROM+1,c
  4469  0024F4  0E50               	movlw	80
  4470  0024F6  6E08               	movwf	?_readEEPROM,c
  4471  0024F8  EC81  F01F         	call	_readEEPROM	;wreg free
  4472  0024FC  0100               	movlb	0	; () banked
  4473  0024FE  6FC7               	movwf	??_doActionOn& (0+255),b
  4474  002500  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4475  002502  D088               	goto	l441
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;main.c: 1750: relay_protection_timer[ 3 ] =
  4479                           ;main.c: 1751: readEEPROM( 0x43 + 40 ) * 256 +
  4480                           ;main.c: 1752: readEEPROM( 0x43 + 41 );
  4481  002504  6A09               	clrf	?_readEEPROM+1,c
  4482  002506  0E6C               	movlw	108
  4483  002508  6E08               	movwf	?_readEEPROM,c
  4484  00250A  EC81  F01F         	call	_readEEPROM	;wreg free
  4485  00250E  0100               	movlb	0	; () banked
  4486  002510  6FC7               	movwf	??_doActionOn& (0+255),b
  4487  002512  6A09               	clrf	?_readEEPROM+1,c
  4488  002514  0E6B               	movlw	107
  4489  002516  6E08               	movwf	?_readEEPROM,c
  4490  002518  EC81  F01F         	call	_readEEPROM	;wreg free
  4491  00251C  0100               	movlb	0	; () banked
  4492  00251E  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4493  002520  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4494  002522  51C7               	movf	??_doActionOn& (0+255),w,b
  4495  002524  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4496  002526  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  4497  002528  0E00               	movlw	0
  4498  00252A  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4499  00252C  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  4500  00252E  D072               	goto	l441
  4501  002530                     l448:
  4502                           
  4503                           ; BSR set to: 0
  4504                           ;main.c: 1757: LATCbits.LATC6 = 1;
  4505  002530  8C8B               	bsf	3979,6,c	;volatile
  4506                           
  4507                           ; BSR set to: 0
  4508                           ;main.c: 1759: if (readEEPROM( 0x43 + 14) & 0x04 ) {
  4509  002532  6A09               	clrf	?_readEEPROM+1,c
  4510  002534  0E51               	movlw	81
  4511  002536  6E08               	movwf	?_readEEPROM,c
  4512  002538  EC81  F01F         	call	_readEEPROM	;wreg free
  4513  00253C  0100               	movlb	0	; () banked
  4514  00253E  6FC7               	movwf	??_doActionOn& (0+255),b
  4515  002540  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4516  002542  D068               	goto	l441
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;main.c: 1760: relay_protection_timer[ 4 ] =
  4520                           ;main.c: 1761: readEEPROM( 0x43 + 42 ) * 256 +
  4521                           ;main.c: 1762: readEEPROM( 0x43 + 43 );
  4522  002544  6A09               	clrf	?_readEEPROM+1,c
  4523  002546  0E6E               	movlw	110
  4524  002548  6E08               	movwf	?_readEEPROM,c
  4525  00254A  EC81  F01F         	call	_readEEPROM	;wreg free
  4526  00254E  0100               	movlb	0	; () banked
  4527  002550  6FC7               	movwf	??_doActionOn& (0+255),b
  4528  002552  6A09               	clrf	?_readEEPROM+1,c
  4529  002554  0E6D               	movlw	109
  4530  002556  6E08               	movwf	?_readEEPROM,c
  4531  002558  EC81  F01F         	call	_readEEPROM	;wreg free
  4532  00255C  0100               	movlb	0	; () banked
  4533  00255E  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4534  002560  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4535  002562  51C7               	movf	??_doActionOn& (0+255),w,b
  4536  002564  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4537  002566  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  4538  002568  0E00               	movlw	0
  4539  00256A  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4540  00256C  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  4541  00256E  D052               	goto	l441
  4542  002570                     l450:
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;main.c: 1767: LATCbits.LATC5 = 1;
  4546  002570  8A8B               	bsf	3979,5,c	;volatile
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;main.c: 1769: if (readEEPROM( 0x43 + 15) & 0x04) {
  4550  002572  6A09               	clrf	?_readEEPROM+1,c
  4551  002574  0E52               	movlw	82
  4552  002576  6E08               	movwf	?_readEEPROM,c
  4553  002578  EC81  F01F         	call	_readEEPROM	;wreg free
  4554  00257C  0100               	movlb	0	; () banked
  4555  00257E  6FC7               	movwf	??_doActionOn& (0+255),b
  4556  002580  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4557  002582  D048               	goto	l441
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;main.c: 1770: relay_protection_timer[ 5 ] =
  4561                           ;main.c: 1771: readEEPROM( 0x43 + 44 ) * 256 +
  4562                           ;main.c: 1772: readEEPROM( 0x43 + 45 );
  4563  002584  6A09               	clrf	?_readEEPROM+1,c
  4564  002586  0E70               	movlw	112
  4565  002588  6E08               	movwf	?_readEEPROM,c
  4566  00258A  EC81  F01F         	call	_readEEPROM	;wreg free
  4567  00258E  0100               	movlb	0	; () banked
  4568  002590  6FC7               	movwf	??_doActionOn& (0+255),b
  4569  002592  6A09               	clrf	?_readEEPROM+1,c
  4570  002594  0E6F               	movlw	111
  4571  002596  6E08               	movwf	?_readEEPROM,c
  4572  002598  EC81  F01F         	call	_readEEPROM	;wreg free
  4573  00259C  0100               	movlb	0	; () banked
  4574  00259E  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4575  0025A0  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4576  0025A2  51C7               	movf	??_doActionOn& (0+255),w,b
  4577  0025A4  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4578  0025A6  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  4579  0025A8  0E00               	movlw	0
  4580  0025AA  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4581  0025AC  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  4582  0025AE  D032               	goto	l441
  4583  0025B0                     l452:
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;main.c: 1777: LATCbits.LATC4 = 1;
  4587  0025B0  888B               	bsf	3979,4,c	;volatile
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;main.c: 1779: if ( readEEPROM( 0x43 + 16) & 0x04) {
  4591  0025B2  6A09               	clrf	?_readEEPROM+1,c
  4592  0025B4  0E53               	movlw	83
  4593  0025B6  6E08               	movwf	?_readEEPROM,c
  4594  0025B8  EC81  F01F         	call	_readEEPROM	;wreg free
  4595  0025BC  0100               	movlb	0	; () banked
  4596  0025BE  6FC7               	movwf	??_doActionOn& (0+255),b
  4597  0025C0  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4598  0025C2  D028               	goto	l441
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;main.c: 1780: relay_protection_timer[ 6 ] =
  4602                           ;main.c: 1781: readEEPROM( 0x43 + 46 ) * 256 +
  4603                           ;main.c: 1782: readEEPROM( 0x43 + 47 );
  4604  0025C4  6A09               	clrf	?_readEEPROM+1,c
  4605  0025C6  0E72               	movlw	114
  4606  0025C8  6E08               	movwf	?_readEEPROM,c
  4607  0025CA  EC81  F01F         	call	_readEEPROM	;wreg free
  4608  0025CE  0100               	movlb	0	; () banked
  4609  0025D0  6FC7               	movwf	??_doActionOn& (0+255),b
  4610  0025D2  6A09               	clrf	?_readEEPROM+1,c
  4611  0025D4  0E71               	movlw	113
  4612  0025D6  6E08               	movwf	?_readEEPROM,c
  4613  0025D8  EC81  F01F         	call	_readEEPROM	;wreg free
  4614  0025DC  0100               	movlb	0	; () banked
  4615  0025DE  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4616  0025E0  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4617  0025E2  51C7               	movf	??_doActionOn& (0+255),w,b
  4618  0025E4  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4619  0025E6  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  4620  0025E8  0E00               	movlw	0
  4621  0025EA  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4622  0025EC  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  4623  0025EE  D012               	goto	l441
  4624  0025F0                     l10291:
  4625                           
  4626                           ; BSR set to: 0
  4627  0025F0  51CC               	movf	doActionOn@i& (0+255),w,b
  4628                           
  4629                           ; Switch size 1, requested type "speed"
  4630                           ; Number of cases is 7, Range of values is 0 to 6
  4631                           ; switch strategies available:
  4632                           ; Name         Instructions Cycles
  4633                           ; simple_byte           22    12 (average)
  4634                           ;	Chosen strategy is simple_byte
  4635  0025F2  E101 D71D          	bz	l439
  4636  0025F6  0A01               	xorlw	1	; case 1
  4637  0025F8  E101 D73A          	bz	l442
  4638  0025FC  0A03               	xorlw	3	; case 2
  4639  0025FE  E101 D757          	bz	l444
  4640  002602  0A01               	xorlw	1	; case 3
  4641  002604  E101 D774          	bz	l446
  4642  002608  0A07               	xorlw	7	; case 4
  4643  00260A  E092               	bz	l448
  4644  00260C  0A01               	xorlw	1	; case 5
  4645  00260E  E0B0               	bz	l450
  4646  002610  0A03               	xorlw	3	; case 6
  4647  002612  E0CE               	bz	l452
  4648  002614                     l441:
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;main.c: 1789: if ( val & 0x08 ) {
  4652  002614  A7CB               	btfss	doActionOn@val& (0+255),3,b
  4653  002616  D007               	goto	l10295
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;main.c: 1790: SendInformationEvent( i, 20, 3 );
  4657  002618  0E14               	movlw	20
  4658  00261A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4659  00261C  0E03               	movlw	3
  4660  00261E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4661  002620  51CC               	movf	doActionOn@i& (0+255),w,b
  4662  002622  ECEA  F01C         	call	_SendInformationEvent
  4663  002626                     l10295:
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;main.c: 1791: }
  4667                           ;main.c: 1794: if ( val & 0x20 ) {
  4668  002626  ABCB               	btfss	doActionOn@val& (0+255),5,b
  4669  002628  D007               	goto	l10299
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;main.c: 1795: SendInformationEvent( i, 20, 25 );
  4673  00262A  0E14               	movlw	20
  4674  00262C  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4675  00262E  0E19               	movlw	25
  4676  002630  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4677  002632  51CC               	movf	doActionOn@i& (0+255),w,b
  4678  002634  ECEA  F01C         	call	_SendInformationEvent
  4679  002638                     l10299:
  4680                           
  4681                           ; BSR set to: 0
  4682  002638  2BCC               	incf	doActionOn@i& (0+255),f,b
  4683                           
  4684                           ; BSR set to: 0
  4685  00263A  0E07               	movlw	7
  4686  00263C  65CC               	cpfsgt	doActionOn@i& (0+255),b
  4687  00263E  D6CF               	goto	l10247
  4688                           
  4689                           ; BSR set to: 0
  4690  002640  0C07               	retlw	7
  4691  002642                     __end_of_doActionOn:
  4692                           	opt stack 0
  4693                           tblptru	equ	0xFF8
  4694                           prodh	equ	0xFF4
  4695                           prodl	equ	0xFF3
  4696                           postinc0	equ	0xFEE
  4697                           wreg	equ	0xFE8
  4698                           postinc2	equ	0xFDE
  4699                           postdec2	equ	0xFDD
  4700                           fsr2h	equ	0xFDA
  4701                           fsr2l	equ	0xFD9
  4702                           status	equ	0xFD8
  4703                           
  4704 ;; *************** function _doActionOff *****************
  4705 ;; Defined at:
  4706 ;;		line 1805 in file "../main.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  dmflags         1    wreg     unsigned char 
  4709 ;;  arg             1   80[COMRAM] unsigned char 
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;  dmflags         1   24[BANK0 ] unsigned char 
  4712 ;;  i               1   26[BANK0 ] unsigned char 
  4713 ;;  val             1   25[BANK0 ] unsigned char 
  4714 ;; Return value:  Size  Location     Type
  4715 ;;		None               void
  4716 ;; Registers used:
  4717 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4718 ;; Tracked objects:
  4719 ;;		On entry : F/0
  4720 ;;		On exit  : F/0
  4721 ;;		Unchanged: 0/0
  4722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4723 ;;      Params:         1       0       0       0       0       0       0
  4724 ;;      Locals:         0       3       0       0       0       0       0
  4725 ;;      Temps:          0       2       0       0       0       0       0
  4726 ;;      Totals:         1       5       0       0       0       0       0
  4727 ;;Total ram usage:        6 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:    7
  4730 ;; This function calls:
  4731 ;;		_readEEPROM
  4732 ;;		_SendInformationEvent
  4733 ;; This function is called by:
  4734 ;;		_doApplicationOneSecondWork
  4735 ;;		_doDM
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           	psect	text14
  4740  003504                     __ptext14:
  4741                           	opt stack 0
  4742  003504                     _doActionOff:
  4743                           	opt stack 22
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;incstack = 0
  4747                           ;incstack = 0
  4748                           ;doActionOff@dmflags stored from wreg
  4749  003504  CFE8 F0C9          	movff	wreg,doActionOff@dmflags
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;main.c: 1807: unsigned char i;
  4753                           ;main.c: 1808: unsigned char val;
  4754                           ;main.c: 1810: for ( i = 0; i < 8; i++ ) {
  4755  003508  6BCB               	clrf	doActionOff@i& (0+255),b
  4756  00350A                     l9849:
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;main.c: 1813: if ( !( arg & ( 1 << i ) ) ) continue;
  4760  00350A  C0CB  F0C7         	movff	doActionOff@i,??_doActionOff
  4761  00350E  0E01               	movlw	1
  4762  003510  6FC8               	movwf	(??_doActionOff+1)& (0+255),b
  4763  003512  2BC7               	incf	??_doActionOff& (0+255),f,b
  4764  003514  D002               	goto	u12214
  4765  003516                     u12215:
  4766  003516  90D8               	bcf	status,0,c
  4767  003518  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4768  00351A                     u12214:
  4769  00351A  2FC7               	decfsz	??_doActionOff& (0+255),f,b
  4770  00351C  D7FC               	goto	u12215
  4771  00351E  51C8               	movf	(??_doActionOff+1)& (0+255),w,b
  4772  003520  1451               	andwf	doActionOff@arg,w,c
  4773  003522  E048               	bz	l9873
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;main.c: 1816: if ( dmflags & 0x08 ) {
  4777  003524  A7C9               	btfss	doActionOff@dmflags& (0+255),3,b
  4778  003526  D00B               	goto	l9857
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;main.c: 1817: if ( vscp_imsg.data[ 2 ] != readEEPROM(0x43 +
  4782                           ;main.c: 1818: 53 +
  4783                           ;main.c: 1819: i ) ) {
  4784  003528  0E78               	movlw	120
  4785  00352A  25CB               	addwf	doActionOff@i& (0+255),w,b
  4786  00352C  6E08               	movwf	?_readEEPROM,c
  4787  00352E  6A09               	clrf	?_readEEPROM+1,c
  4788  003530  0E00               	movlw	0
  4789  003532  2209               	addwfc	?_readEEPROM+1,f,c
  4790  003534  EC81  F01F         	call	_readEEPROM	;wreg free
  4791  003538  0100               	movlb	0	; () banked
  4792  00353A  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4793  00353C  E13B               	bnz	l9873
  4794  00353E                     l9857:
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;main.c: 1821: }
  4798                           ;main.c: 1822: }
  4799                           ;main.c: 1824: val = readEEPROM( 0x43 + 10 + i );
  4800  00353E  0E4D               	movlw	77
  4801  003540  25CB               	addwf	doActionOff@i& (0+255),w,b
  4802  003542  6E08               	movwf	?_readEEPROM,c
  4803  003544  6A09               	clrf	?_readEEPROM+1,c
  4804  003546  0E00               	movlw	0
  4805  003548  2209               	addwfc	?_readEEPROM+1,f,c
  4806  00354A  EC81  F01F         	call	_readEEPROM	;wreg free
  4807  00354E  0100               	movlb	0	; () banked
  4808  003550  6FCA               	movwf	doActionOff@val& (0+255),b
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;main.c: 1827: if ( !( val & 0x80 ) ) continue;
  4812  003552  AFCA               	btfss	doActionOff@val& (0+255),7,b
  4813  003554  D02F               	goto	l9873
  4814  003556  D00E               	goto	l9865
  4815  003558                     l467:
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;main.c: 1832: LATBbits.LATB4 = 0;
  4819  003558  988A               	bcf	3978,4,c	;volatile
  4820                           
  4821                           ;main.c: 1833: break;
  4822  00355A  D01A               	goto	l468
  4823  00355C                     l469:
  4824                           
  4825                           ; BSR set to: 0
  4826                           ;main.c: 1836: LATBbits.LATB1 = 0;
  4827  00355C  928A               	bcf	3978,1,c	;volatile
  4828                           
  4829                           ;main.c: 1837: break;
  4830  00355E  D018               	goto	l468
  4831  003560                     l470:
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;main.c: 1840: LATBbits.LATB0 = 0;
  4835  003560  908A               	bcf	3978,0,c	;volatile
  4836                           
  4837                           ;main.c: 1841: break;
  4838  003562  D016               	goto	l468
  4839  003564                     l471:
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;main.c: 1844: LATCbits.LATC7 = 0;
  4843  003564  9E8B               	bcf	3979,7,c	;volatile
  4844                           
  4845                           ;main.c: 1845: break;
  4846  003566  D014               	goto	l468
  4847  003568                     l472:
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;main.c: 1848: LATCbits.LATC6 = 0;
  4851  003568  9C8B               	bcf	3979,6,c	;volatile
  4852                           
  4853                           ;main.c: 1849: break;
  4854  00356A  D012               	goto	l468
  4855  00356C                     l473:
  4856                           
  4857                           ; BSR set to: 0
  4858                           ;main.c: 1852: LATCbits.LATC5 = 0;
  4859  00356C  9A8B               	bcf	3979,5,c	;volatile
  4860                           
  4861                           ;main.c: 1853: break;
  4862  00356E  D010               	goto	l468
  4863  003570                     l474:
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;main.c: 1856: LATCbits.LATC4 = 0;
  4867  003570  988B               	bcf	3979,4,c	;volatile
  4868                           
  4869                           ;main.c: 1857: break;
  4870  003572  D00E               	goto	l468
  4871  003574                     l9865:
  4872                           
  4873                           ; BSR set to: 0
  4874  003574  51CB               	movf	doActionOff@i& (0+255),w,b
  4875                           
  4876                           ; Switch size 1, requested type "speed"
  4877                           ; Number of cases is 7, Range of values is 0 to 6
  4878                           ; switch strategies available:
  4879                           ; Name         Instructions Cycles
  4880                           ; simple_byte           22    12 (average)
  4881                           ;	Chosen strategy is simple_byte
  4882  003576  E0F0               	bz	l467
  4883  003578  0A01               	xorlw	1	; case 1
  4884  00357A  E0F0               	bz	l469
  4885  00357C  0A03               	xorlw	3	; case 2
  4886  00357E  E0F0               	bz	l470
  4887  003580  0A01               	xorlw	1	; case 3
  4888  003582  E0F0               	bz	l471
  4889  003584  0A07               	xorlw	7	; case 4
  4890  003586  E0F0               	bz	l472
  4891  003588  0A01               	xorlw	1	; case 5
  4892  00358A  E0F0               	bz	l473
  4893  00358C  0A03               	xorlw	3	; case 6
  4894  00358E  E0F0               	bz	l474
  4895  003590                     l468:
  4896                           
  4897                           ; BSR set to: 0
  4898                           ;main.c: 1862: if ( val & 0x10 ) {
  4899  003590  A9CA               	btfss	doActionOff@val& (0+255),4,b
  4900  003592  D007               	goto	l9869
  4901                           
  4902                           ; BSR set to: 0
  4903                           ;main.c: 1863: SendInformationEvent( i, 20, 4 );
  4904  003594  0E14               	movlw	20
  4905  003596  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4906  003598  0E04               	movlw	4
  4907  00359A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4908  00359C  51CB               	movf	doActionOff@i& (0+255),w,b
  4909  00359E  ECEA  F01C         	call	_SendInformationEvent
  4910  0035A2                     l9869:
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;main.c: 1864: }
  4914                           ;main.c: 1867: if ( val & 0x40 ) {
  4915  0035A2  ADCA               	btfss	doActionOff@val& (0+255),6,b
  4916  0035A4  D007               	goto	l9873
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;main.c: 1868: SendInformationEvent( i, 20, 24 );
  4920  0035A6  0E14               	movlw	20
  4921  0035A8  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4922  0035AA  0E18               	movlw	24
  4923  0035AC  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4924  0035AE  51CB               	movf	doActionOff@i& (0+255),w,b
  4925  0035B0  ECEA  F01C         	call	_SendInformationEvent
  4926  0035B4                     l9873:
  4927                           
  4928                           ; BSR set to: 0
  4929  0035B4  2BCB               	incf	doActionOff@i& (0+255),f,b
  4930                           
  4931                           ; BSR set to: 0
  4932  0035B6  0E07               	movlw	7
  4933  0035B8  65CB               	cpfsgt	doActionOff@i& (0+255),b
  4934  0035BA  D7A7               	goto	l9849
  4935                           
  4936                           ; BSR set to: 0
  4937  0035BC  0C07               	retlw	7
  4938  0035BE                     __end_of_doActionOff:
  4939                           	opt stack 0
  4940                           tblptru	equ	0xFF8
  4941                           prodh	equ	0xFF4
  4942                           prodl	equ	0xFF3
  4943                           postinc0	equ	0xFEE
  4944                           wreg	equ	0xFE8
  4945                           postinc2	equ	0xFDE
  4946                           postdec2	equ	0xFDD
  4947                           fsr2h	equ	0xFDA
  4948                           fsr2l	equ	0xFD9
  4949                           status	equ	0xFD8
  4950                           
  4951 ;; *************** function _vscp_handleProtocolEvent *****************
  4952 ;; Defined at:
  4953 ;;		line 786 in file "../../vscp_firmware/common/vscp_firmware.c"
  4954 ;; Parameters:    Size  Location     Type
  4955 ;;		None
  4956 ;; Auto vars:     Size  Location     Type
  4957 ;;  bytes           1   45[BANK0 ] unsigned char 
  4958 ;;  page_save       2   41[BANK0 ] unsigned short 
  4959 ;;  i               1   51[BANK0 ] unsigned char 
  4960 ;;  page_save       2   39[BANK0 ] unsigned short 
  4961 ;;  byte            1   55[BANK0 ] unsigned char 
  4962 ;;  bytes           1   53[BANK0 ] unsigned char 
  4963 ;;  cb              1   50[BANK0 ] unsigned char 
  4964 ;;  bytes_this_t    1   49[BANK0 ] unsigned char 
  4965 ;;  j               1   58[BANK0 ] unsigned char 
  4966 ;;  i               1   56[BANK0 ] unsigned char 
  4967 ;;  k               1   52[BANK0 ] unsigned char 
  4968 ;;  i               1   54[BANK0 ] unsigned char 
  4969 ;;  len             1   48[BANK0 ] unsigned char 
  4970 ;;  pos             1   47[BANK0 ] unsigned char 
  4971 ;;  i               1   57[BANK0 ] unsigned char 
  4972 ;;  len             1   46[BANK0 ] unsigned char 
  4973 ;;  pos             1   44[BANK0 ] unsigned char 
  4974 ;;  offset          1   43[BANK0 ] unsigned char 
  4975 ;; Return value:  Size  Location     Type
  4976 ;;		None               void
  4977 ;; Registers used:
  4978 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4979 ;; Tracked objects:
  4980 ;;		On entry : F/0
  4981 ;;		On exit  : 0/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4984 ;;      Params:         0       0       0       0       0       0       0
  4985 ;;      Locals:         0      20       0       0       0       0       0
  4986 ;;      Temps:          0       7       0       0       0       0       0
  4987 ;;      Totals:         0      27       0       0       0       0       0
  4988 ;;Total ram usage:       27 bytes
  4989 ;; Hardware stack levels used:    1
  4990 ;; Hardware stack levels required when called:    9
  4991 ;; This function calls:
  4992 ;;		_vscp_init
  4993 ;;		_vscp_readAppReg
  4994 ;;		_vscp_writeAppReg
  4995 ;;		_vscp_sendEvent
  4996 ;;		_vscp_getGUID
  4997 ;;		_vscp_getMDF_URL
  4998 ;;		_vscp_goBootloaderMode
  4999 ;;		_vscp_getMatrixInfo
  5000 ;;		_vscp_handleHeartbeat
  5001 ;;		_vscp_handleSetNickname
  5002 ;;		_vscp_handleDropNickname
  5003 ;;		_vscp_newNodeOnline
  5004 ;;		_vscp_readRegister
  5005 ;;		_vscp_readStdReg
  5006 ;;		_vscp_writeRegister
  5007 ;;		_vscp_writeStdReg
  5008 ;;		___lbmod
  5009 ;; This function is called by:
  5010 ;;		_main
  5011 ;; This function uses a non-reentrant model
  5012 ;;
  5013                           
  5014                           	psect	text15
  5015  000FD0                     __ptext15:
  5016                           	opt stack 0
  5017  000FD0                     _vscp_handleProtocolEvent:
  5018                           	opt stack 21
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;vscp_firmware.c: 788: if (0 == vscp_imsg.vscp_class) {
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;incstack = 0
  5025                           ;incstack = 0
  5026  000FD0  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  5027  000FD2  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  5028  000FD4  E101 D2D8          	bz	l9677
  5029  000FD8  D308               	goto	l1271
  5030  000FDA                     l9265:
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;vscp_firmware.c: 795: vscp_handleHeartbeat();
  5034  000FDA  EC89  F01D         	call	_vscp_handleHeartbeat	;wreg free
  5035                           
  5036                           ;vscp_firmware.c: 796: break;
  5037  000FDE  D305               	goto	l1271
  5038  000FE0                     l9267:
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;vscp_firmware.c: 800: vscp_newNodeOnline();
  5042  000FE0  ECF5  F01D         	call	_vscp_newNodeOnline	;wreg free
  5043                           
  5044                           ;vscp_firmware.c: 801: break;
  5045  000FE4  D302               	goto	l1271
  5046  000FE6                     l9269:
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;vscp_firmware.c: 805: vscp_handleSetNickname();
  5050  000FE6  EC6C  F01E         	call	_vscp_handleSetNickname	;wreg free
  5051                           
  5052                           ;vscp_firmware.c: 806: break;
  5053  000FEA  D2FF               	goto	l1271
  5054  000FEC                     l9271:
  5055                           
  5056                           ; BSR set to: 0
  5057                           ;vscp_firmware.c: 810: vscp_handleDropNickname();
  5058  000FEC  ECC7  F01D         	call	_vscp_handleDropNickname	;wreg free
  5059                           
  5060                           ;vscp_firmware.c: 811: break;
  5061  000FF0  D2FC               	goto	l1271
  5062  000FF2                     l9273:
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;vscp_firmware.c: 815: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  5066                           ;vscp_firmware.c: 816: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5067  000FF2  5196               	movf	_vscp_imsg& (0+255),w,b
  5068  000FF4  0B0F               	andlw	15
  5069  000FF6  0A02               	xorlw	2
  5070  000FF8  E001 D2F7          	bnz	l1271
  5071                           
  5072                           ; BSR set to: 0
  5073  000FFC  5191               	movf	_vscp_nickname& (0+255),w,b
  5074  000FFE  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5075  001002  62DF               	cpfseq	indf2,c
  5076  001004  D2F2               	goto	l1271
  5077                           
  5078                           ; BSR set to: 0
  5079                           ;vscp_firmware.c: 818: if (vscp_imsg.data[ 1 ] < 0x80) {
  5080  001006  0E80               	movlw	128
  5081  001008  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5082  00100A  D012               	goto	l9293
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;vscp_firmware.c: 821: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  5086  00100C  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5087  00100E  EC97  F01B         	call	_vscp_readAppReg
  5088  001012                     L13:
  5089  001012  0100               	movlb	0	; () banked
  5090  001014                     L14:
  5091  001014  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;vscp_firmware.c: 824: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  5095  001016  C09D  F0A9         	movff	_vscp_imsg+7,_vscp_omsg+5
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;vscp_firmware.c: 826: vscp_omsg.priority = 0x03;
  5099  00101A  0E03               	movlw	3
  5100  00101C  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;vscp_firmware.c: 827: vscp_omsg.flags = 0x80 + 2;
  5104  00101E  0E82               	movlw	130
  5105  001020  6FA4               	movwf	_vscp_omsg& (0+255),b
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;vscp_firmware.c: 828: vscp_omsg.vscp_class = 0;
  5109  001022  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5110  001024  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;vscp_firmware.c: 829: vscp_omsg.vscp_type = 10;
  5114  001026  0E0A               	movlw	10
  5115  001028  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5116  00102A                     l9291:
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;vscp_firmware.c: 832: vscp_sendEvent();
  5120  00102A  EC46  F01E         	call	_vscp_sendEvent	;wreg free
  5121                           
  5122                           ;vscp_firmware.c: 833: } else {
  5123  00102E  D2DD               	goto	l1271
  5124  001030                     l9293:
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;vscp_firmware.c: 836: vscp_omsg.data[ 1 ] =
  5128                           ;vscp_firmware.c: 837: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  5129  001030  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5130  001032  ECA0  F019         	call	_vscp_readStdReg
  5131  001036  D7ED               	goto	L13
  5132  001038                     l9307:
  5133                           
  5134                           ; BSR set to: 0
  5135                           ;vscp_firmware.c: 855: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  5136                           ;vscp_firmware.c: 856: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5137  001038  5196               	movf	_vscp_imsg& (0+255),w,b
  5138  00103A  0B0F               	andlw	15
  5139  00103C  0A03               	xorlw	3
  5140  00103E  E001 D2D4          	bnz	l1271
  5141                           
  5142                           ; BSR set to: 0
  5143  001042  5191               	movf	_vscp_nickname& (0+255),w,b
  5144  001044  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5145  001048  62DF               	cpfseq	indf2,c
  5146  00104A  D2CF               	goto	l1271
  5147                           
  5148                           ; BSR set to: 0
  5149                           ;vscp_firmware.c: 858: if (vscp_imsg.data[ 1 ] < 0x80) {
  5150  00104C  0E80               	movlw	128
  5151  00104E  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5152  001050  D006               	goto	l9327
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;vscp_firmware.c: 861: vscp_omsg.data[ 1 ] =
  5156                           ;vscp_firmware.c: 862: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5157  001052  C09E  F051         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  5158  001056  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5159  001058  EC11  F003         	call	_vscp_writeAppReg
  5160  00105C  D7DB               	goto	L14
  5161  00105E                     l9327:
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;vscp_firmware.c: 878: vscp_omsg.data[ 1 ] =
  5165                           ;vscp_firmware.c: 879: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5166  00105E  C09E  F00F         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  5167  001062  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5168  001064  EC10  F015         	call	_vscp_writeStdReg
  5169  001068  D7D4               	goto	L13
  5170  00106A                     l9341:
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;vscp_firmware.c: 897: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  5174                           ;vscp_firmware.c: 899: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  5175                           ;vscp_firmware.c: 900: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  5176                           ;vscp_firmware.c: 901: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  5177                           ;vscp_firmware.c: 902: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  5178                           ;vscp_firmware.c: 903: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  5179                           ;vscp_firmware.c: 904: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  5180  00106A  5191               	movf	_vscp_nickname& (0+255),w,b
  5181  00106C  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5182  001070  62DF               	cpfseq	indf2,c
  5183  001072  D2BB               	goto	l1271
  5184                           
  5185                           ; BSR set to: 0
  5186  001074  0E00               	movlw	0
  5187  001076  EC53  F01F         	call	_vscp_getGUID
  5188  00107A  0100               	movlb	0	; () banked
  5189  00107C  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5190  00107E  E001 D2B4          	bnz	l1271
  5191                           
  5192                           ; BSR set to: 0
  5193  001082  0E03               	movlw	3
  5194  001084  EC53  F01F         	call	_vscp_getGUID
  5195  001088  0100               	movlb	0	; () banked
  5196  00108A  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5197  00108C  E001 D2AD          	bnz	l1271
  5198                           
  5199                           ; BSR set to: 0
  5200  001090  0E05               	movlw	5
  5201  001092  EC53  F01F         	call	_vscp_getGUID
  5202  001096  0100               	movlb	0	; () banked
  5203  001098  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5204  00109A  E001 D2A6          	bnz	l1271
  5205                           
  5206                           ; BSR set to: 0
  5207  00109E  0E07               	movlw	7
  5208  0010A0  EC53  F01F         	call	_vscp_getGUID
  5209  0010A4  0100               	movlb	0	; () banked
  5210  0010A6  19A1               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  5211  0010A8  E001 D29F          	bnz	l1271
  5212                           
  5213                           ; BSR set to: 0
  5214  0010AC  5053               	movf	_vscp_page_select+1,w,c
  5215  0010AE  19A2               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  5216  0010B0  E001 D29B          	bnz	l1271
  5217                           
  5218                           ; BSR set to: 0
  5219  0010B4  5052               	movf	_vscp_page_select,w,c
  5220  0010B6  EE20  F0A3         	lfsr	2,_vscp_imsg+13
  5221  0010BA  62DF               	cpfseq	indf2,c
  5222  0010BC  D296               	goto	l1271
  5223                           
  5224                           ; BSR set to: 0
  5225                           ;vscp_firmware.c: 906: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  5226  0010BE  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5227  0010C0  EC27  F01F         	call	_vscp_goBootloaderMode
  5228  0010C4  D292               	goto	l1271
  5229  0010C6                     l9357:
  5230                           
  5231                           ; BSR set to: 0
  5232                           ;vscp_firmware.c: 915: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  5233                           ;vscp_firmware.c: 916: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  5234                           ;vscp_firmware.c: 917: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  5235                           ;vscp_firmware.c: 918: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  5236  0010C6  0E00               	movlw	0
  5237  0010C8  EC53  F01F         	call	_vscp_getGUID
  5238  0010CC  0100               	movlb	0	; () banked
  5239  0010CE  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5240  0010D0  E173               	bnz	l9401
  5241                           
  5242                           ; BSR set to: 0
  5243  0010D2  0E01               	movlw	1
  5244  0010D4  EC53  F01F         	call	_vscp_getGUID
  5245  0010D8  0100               	movlb	0	; () banked
  5246  0010DA  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5247  0010DC  E16D               	bnz	l9401
  5248                           
  5249                           ; BSR set to: 0
  5250  0010DE  0E02               	movlw	2
  5251  0010E0  EC53  F01F         	call	_vscp_getGUID
  5252  0010E4  0100               	movlb	0	; () banked
  5253  0010E6  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5254  0010E8  E167               	bnz	l9401
  5255                           
  5256                           ; BSR set to: 0
  5257  0010EA  0E03               	movlw	3
  5258  0010EC  EC53  F01F         	call	_vscp_getGUID
  5259  0010F0  0100               	movlb	0	; () banked
  5260  0010F2  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5261  0010F4  E161               	bnz	l9401
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;vscp_firmware.c: 919: vscp_guid_reset |= 0x10;
  5265  0010F6  898D               	bsf	_vscp_guid_reset& (0+255),4,b
  5266  0010F8  D05F               	goto	l9401
  5267  0010FA                     l9367:
  5268                           
  5269                           ; BSR set to: 0
  5270                           ;vscp_firmware.c: 924: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  5271                           ;vscp_firmware.c: 925: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  5272                           ;vscp_firmware.c: 926: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  5273                           ;vscp_firmware.c: 927: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  5274  0010FA  0E04               	movlw	4
  5275  0010FC  EC53  F01F         	call	_vscp_getGUID
  5276  001100  0100               	movlb	0	; () banked
  5277  001102  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5278  001104  E159               	bnz	l9401
  5279                           
  5280                           ; BSR set to: 0
  5281  001106  0E05               	movlw	5
  5282  001108  EC53  F01F         	call	_vscp_getGUID
  5283  00110C  0100               	movlb	0	; () banked
  5284  00110E  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5285  001110  E153               	bnz	l9401
  5286                           
  5287                           ; BSR set to: 0
  5288  001112  0E06               	movlw	6
  5289  001114  EC53  F01F         	call	_vscp_getGUID
  5290  001118  0100               	movlb	0	; () banked
  5291  00111A  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5292  00111C  E14D               	bnz	l9401
  5293                           
  5294                           ; BSR set to: 0
  5295  00111E  0E07               	movlw	7
  5296  001120  EC53  F01F         	call	_vscp_getGUID
  5297  001124  0100               	movlb	0	; () banked
  5298  001126  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5299  001128  E147               	bnz	l9401
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;vscp_firmware.c: 928: vscp_guid_reset |= 0x20;
  5303  00112A  8B8D               	bsf	_vscp_guid_reset& (0+255),5,b
  5304  00112C  D045               	goto	l9401
  5305  00112E                     l9377:
  5306                           
  5307                           ; BSR set to: 0
  5308                           ;vscp_firmware.c: 933: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  5309                           ;vscp_firmware.c: 934: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  5310                           ;vscp_firmware.c: 935: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  5311                           ;vscp_firmware.c: 936: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  5312  00112E  0E08               	movlw	8
  5313  001130  EC53  F01F         	call	_vscp_getGUID
  5314  001134  0100               	movlb	0	; () banked
  5315  001136  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5316  001138  E13F               	bnz	l9401
  5317                           
  5318                           ; BSR set to: 0
  5319  00113A  0E09               	movlw	9
  5320  00113C  EC53  F01F         	call	_vscp_getGUID
  5321  001140  0100               	movlb	0	; () banked
  5322  001142  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5323  001144  E139               	bnz	l9401
  5324                           
  5325                           ; BSR set to: 0
  5326  001146  0E0A               	movlw	10
  5327  001148  EC53  F01F         	call	_vscp_getGUID
  5328  00114C  0100               	movlb	0	; () banked
  5329  00114E  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5330  001150  E133               	bnz	l9401
  5331                           
  5332                           ; BSR set to: 0
  5333  001152  0E0B               	movlw	11
  5334  001154  EC53  F01F         	call	_vscp_getGUID
  5335  001158  0100               	movlb	0	; () banked
  5336  00115A  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5337  00115C  E12D               	bnz	l9401
  5338                           
  5339                           ; BSR set to: 0
  5340                           ;vscp_firmware.c: 937: vscp_guid_reset |= 0x40;
  5341  00115E  8D8D               	bsf	_vscp_guid_reset& (0+255),6,b
  5342  001160  D02B               	goto	l9401
  5343  001162                     l9387:
  5344                           
  5345                           ; BSR set to: 0
  5346                           ;vscp_firmware.c: 942: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  5347                           ;vscp_firmware.c: 943: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  5348                           ;vscp_firmware.c: 944: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  5349                           ;vscp_firmware.c: 945: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  5350  001162  0E0C               	movlw	12
  5351  001164  EC53  F01F         	call	_vscp_getGUID
  5352  001168  0100               	movlb	0	; () banked
  5353  00116A  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5354  00116C  E125               	bnz	l9401
  5355                           
  5356                           ; BSR set to: 0
  5357  00116E  0E0D               	movlw	13
  5358  001170  EC53  F01F         	call	_vscp_getGUID
  5359  001174  0100               	movlb	0	; () banked
  5360  001176  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5361  001178  E11F               	bnz	l9401
  5362                           
  5363                           ; BSR set to: 0
  5364  00117A  0E0E               	movlw	14
  5365  00117C  EC53  F01F         	call	_vscp_getGUID
  5366  001180  0100               	movlb	0	; () banked
  5367  001182  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5368  001184  E119               	bnz	l9401
  5369                           
  5370                           ; BSR set to: 0
  5371  001186  0E0F               	movlw	15
  5372  001188  EC53  F01F         	call	_vscp_getGUID
  5373  00118C  0100               	movlb	0	; () banked
  5374  00118E  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5375  001190  E113               	bnz	l9401
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;vscp_firmware.c: 946: vscp_guid_reset |= 0x80;
  5379  001192  8F8D               	bsf	_vscp_guid_reset& (0+255),7,b
  5380  001194  D011               	goto	l9401
  5381  001196                     l1212:
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;vscp_firmware.c: 951: vscp_guid_reset = 0;
  5385  001196  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  5386                           
  5387                           ;vscp_firmware.c: 952: break;
  5388  001198  D00F               	goto	l9401
  5389  00119A                     l9399:
  5390                           
  5391                           ; BSR set to: 0
  5392  00119A  399C               	swapf	(_vscp_imsg+6)& (0+255),w,b
  5393  00119C  0B0F               	andlw	15
  5394  00119E  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5395  0011A0  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5396                           
  5397                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5398                           ; Switch size 1, requested type "speed"
  5399                           ; Number of cases is 1, Range of values is 0 to 0
  5400                           ; switch strategies available:
  5401                           ; Name         Instructions Cycles
  5402                           ; simple_byte            4     3 (average)
  5403                           ;	Chosen strategy is simple_byte
  5404  0011A2  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5405  0011A4  E1F8               	bnz	l1212
  5406                           
  5407                           ; BSR set to: 0
  5408                           ; Switch size 1, requested type "speed"
  5409                           ; Number of cases is 4, Range of values is 0 to 3
  5410                           ; switch strategies available:
  5411                           ; Name         Instructions Cycles
  5412                           ; simple_byte           13     7 (average)
  5413                           ;	Chosen strategy is simple_byte
  5414  0011A6  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5415  0011A8  E08E               	bz	l9357
  5416  0011AA  0A01               	xorlw	1	; case 1
  5417  0011AC  E0A6               	bz	l9367
  5418  0011AE  0A03               	xorlw	3	; case 2
  5419  0011B0  E0BE               	bz	l9377
  5420  0011B2  0A01               	xorlw	1	; case 3
  5421  0011B4  E0D6               	bz	l9387
  5422  0011B6  D7EF               	goto	l1212
  5423  0011B8                     l9401:
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;vscp_firmware.c: 955: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  5427  0011B8  518D               	movf	_vscp_guid_reset& (0+255),w,b
  5428  0011BA  0BF0               	andlw	240
  5429  0011BC  0AF0               	xorlw	240
  5430  0011BE  E001 D214          	bnz	l1271
  5431                           
  5432                           ; BSR set to: 0
  5433                           ;vscp_firmware.c: 957: vscp_init();
  5434  0011C2  EC47  F01D         	call	_vscp_init	;wreg free
  5435  0011C6  D211               	goto	l1271
  5436  0011C8                     l9405:
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;vscp_firmware.c: 963: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5440  0011C8  5191               	movf	_vscp_nickname& (0+255),w,b
  5441  0011CA  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5442  0011CE  62DF               	cpfseq	indf2,c
  5443  0011D0  D20C               	goto	l1271
  5444                           
  5445                           ; BSR set to: 0
  5446                           ;vscp_firmware.c: 965: uint8_t i;
  5447                           ;vscp_firmware.c: 966: uint8_t pos = 0;
  5448  0011D2  6BDD               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  5449                           
  5450                           ;vscp_firmware.c: 967: uint8_t offset = vscp_imsg.data[ 1 ];
  5451  0011D4  C09D  F0DC         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  5452                           
  5453                           ;vscp_firmware.c: 968: uint8_t len = vscp_imsg.data[ 2 ];
  5454  0011D8  C09E  F0DF         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  5455                           
  5456                           ;vscp_firmware.c: 970: for (i = 0; i < len; i++) {
  5457  0011DC  6BEA               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  5458  0011DE  D047               	goto	l9437
  5459  0011E0                     l9409:
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;vscp_firmware.c: 971: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  5463  0011E0  0E07               	movlw	7
  5464  0011E2  6E08               	movwf	?___lbmod,c
  5465  0011E4  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5466  0011E6  EC1F  F01E         	call	___lbmod
  5467  0011EA  0100               	movlb	0	; () banked
  5468  0011EC  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5469  0011EE  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5470  0011F0  0FAA               	addlw	low (_vscp_omsg+6)
  5471  0011F2  6ED9               	movwf	fsr2l,c
  5472  0011F4  6ADA               	clrf	fsr2h,c
  5473  0011F6  51DC               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  5474  0011F8  25EA               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5475  0011FA  EC02  F01F         	call	_vscp_readRegister
  5476  0011FE  6EDF               	movwf	indf2,c
  5477                           
  5478                           ;vscp_firmware.c: 973: if ((i % 7) == 6 || i == (len - 1)) {
  5479  001200  0E07               	movlw	7
  5480  001202  6E08               	movwf	?___lbmod,c
  5481  001204  0100               	movlb	0	; () banked
  5482  001206  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5483  001208  EC1F  F01E         	call	___lbmod
  5484  00120C  0A06               	xorlw	6
  5485  00120E  E00B               	bz	l9415
  5486  001210  0EFF               	movlw	255
  5487  001212  0100               	movlb	0	; () banked
  5488  001214  25DF               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  5489  001216  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5490  001218  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5491  00121A  0EFF               	movlw	255
  5492  00121C  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  5493  00121E  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5494  001220  19D1               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5495  001222  11D2               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5496  001224  E123               	bnz	l9435
  5497  001226                     l9415:
  5498                           
  5499                           ;vscp_firmware.c: 974: uint8_t bytes;
  5500                           ;vscp_firmware.c: 976: if ((i % 7) == 6) bytes = 7;
  5501  001226  0E07               	movlw	7
  5502  001228  6E08               	movwf	?___lbmod,c
  5503  00122A  0100               	movlb	0	; () banked
  5504  00122C  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5505  00122E  EC1F  F01E         	call	___lbmod
  5506  001232  0A06               	xorlw	6
  5507  001234  E103               	bnz	l9419
  5508  001236  0E07               	movlw	7
  5509  001238  0100               	movlb	0	; () banked
  5510  00123A  D009               	goto	L15
  5511  00123C                     l9419:
  5512                           
  5513                           ;vscp_firmware.c: 977: else bytes = (i % 7) + 1;
  5514  00123C  0E07               	movlw	7
  5515  00123E  6E08               	movwf	?___lbmod,c
  5516  001240  0100               	movlb	0	; () banked
  5517  001242  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5518  001244  EC1F  F01E         	call	___lbmod
  5519  001248  0100               	movlb	0	; () banked
  5520  00124A  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5521  00124C  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5522  00124E                     L15:
  5523  00124E  6FDE               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  5524                           
  5525                           ; BSR set to: 0
  5526                           ;vscp_firmware.c: 979: vscp_omsg.flags = 0x80 + bytes + 1;
  5527  001250  51DE               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  5528  001252  0F81               	addlw	129
  5529  001254  6FA4               	movwf	_vscp_omsg& (0+255),b
  5530                           
  5531                           ; BSR set to: 0
  5532                           ;vscp_firmware.c: 980: vscp_omsg.priority = 0x03;
  5533  001256  0E03               	movlw	3
  5534  001258  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;vscp_firmware.c: 981: vscp_omsg.vscp_class = 0;
  5538  00125A  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5539  00125C  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5540                           
  5541                           ; BSR set to: 0
  5542                           ;vscp_firmware.c: 982: vscp_omsg.vscp_type = 26;
  5543  00125E  0E1A               	movlw	26
  5544  001260  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5545                           
  5546                           ; BSR set to: 0
  5547                           ;vscp_firmware.c: 983: vscp_omsg.data[ 0 ] = pos;
  5548  001262  C0DD  F0A9         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  5549                           
  5550                           ; BSR set to: 0
  5551                           ;vscp_firmware.c: 986: vscp_sendEvent();
  5552  001266  EC46  F01E         	call	_vscp_sendEvent	;wreg free
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;vscp_firmware.c: 987: pos++;
  5556  00126A  2BDD               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  5557  00126C                     l9435:
  5558                           
  5559                           ; BSR set to: 0
  5560  00126C  2BEA               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  5561  00126E                     l9437:
  5562                           
  5563                           ; BSR set to: 0
  5564  00126E  51DF               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  5565  001270  5DEA               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5566  001272  E301 D1BA          	bc	l1271
  5567  001276  D7B4               	goto	l9409
  5568  001278                     l9439:
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;vscp_firmware.c: 995: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5572  001278  5191               	movf	_vscp_nickname& (0+255),w,b
  5573  00127A  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5574  00127E  62DF               	cpfseq	indf2,c
  5575  001280  D1B4               	goto	l1271
  5576                           
  5577                           ; BSR set to: 0
  5578                           ;vscp_firmware.c: 996: uint8_t i;
  5579                           ;vscp_firmware.c: 997: uint8_t pos = vscp_imsg.data[ 1 ];
  5580  001282  C09D  F0E0         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1279
  5581                           
  5582                           ; BSR set to: 0
  5583                           ;vscp_firmware.c: 998: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  5584  001286  5196               	movf	_vscp_imsg& (0+255),w,b
  5585  001288  0FFE               	addlw	254
  5586  00128A  0B07               	andlw	7
  5587  00128C  6FE1               	movwf	vscp_handleProtocolEvent@len_1280& (0+255),b
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;vscp_firmware.c: 1000: for (i = 0; i < len; i++) {
  5591  00128E  6BE7               	clrf	vscp_handleProtocolEvent@i_1278& (0+255),b
  5592  001290  D016               	goto	l9453
  5593  001292                     l9447:
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;vscp_firmware.c: 1002: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  5597  001292  51E7               	movf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5598  001294  0F9E               	addlw	low (_vscp_imsg+8)
  5599  001296  6ED9               	movwf	fsr2l,c
  5600  001298  6ADA               	clrf	fsr2h,c
  5601  00129A  50DF               	movf	indf2,w,c
  5602  00129C  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  5603  00129E  51E0               	movf	vscp_handleProtocolEvent@pos_1279& (0+255),w,b
  5604  0012A0  25E7               	addwf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5605  0012A2  ECA1  F01E         	call	_vscp_writeRegister
  5606                           
  5607                           ;vscp_firmware.c: 1003: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  5608  0012A6  0100               	movlb	0	; () banked
  5609  0012A8  51E7               	movf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5610  0012AA  0FAA               	addlw	low (_vscp_omsg+6)
  5611  0012AC  6ED9               	movwf	fsr2l,c
  5612  0012AE  6ADA               	clrf	fsr2h,c
  5613  0012B0  51E0               	movf	vscp_handleProtocolEvent@pos_1279& (0+255),w,b
  5614  0012B2  25E7               	addwf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5615  0012B4  EC02  F01F         	call	_vscp_readRegister
  5616  0012B8  6EDF               	movwf	indf2,c
  5617  0012BA  0100               	movlb	0	; () banked
  5618  0012BC  2BE7               	incf	vscp_handleProtocolEvent@i_1278& (0+255),f,b
  5619  0012BE                     l9453:
  5620                           
  5621                           ; BSR set to: 0
  5622  0012BE  51E1               	movf	vscp_handleProtocolEvent@len_1280& (0+255),w,b
  5623  0012C0  5DE7               	subwf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5624  0012C2  E3E7               	bnc	l9447
  5625                           
  5626                           ; BSR set to: 0
  5627                           ;vscp_firmware.c: 1004: }
  5628                           ;vscp_firmware.c: 1006: vscp_omsg.priority = 0x03;
  5629  0012C4  0E03               	movlw	3
  5630  0012C6  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;vscp_firmware.c: 1007: vscp_omsg.vscp_class = 0;
  5634  0012C8  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5635  0012CA  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5636                           
  5637                           ;vscp_firmware.c: 1008: vscp_omsg.vscp_type = 26;
  5638  0012CC  0E1A               	movlw	26
  5639  0012CE  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;vscp_firmware.c: 1009: vscp_omsg.data[ 0 ] = 0;
  5643  0012D0  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;vscp_firmware.c: 1010: vscp_omsg.flags = 0x80 + len + 1;
  5647  0012D2  51E1               	movf	vscp_handleProtocolEvent@len_1280& (0+255),w,b
  5648  0012D4  0F81               	addlw	129
  5649  0012D6  6FA4               	movwf	_vscp_omsg& (0+255),b
  5650  0012D8  D6A8               	goto	l9291
  5651  0012DA                     l9465:
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;vscp_firmware.c: 1020: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5655  0012DA  5191               	movf	_vscp_nickname& (0+255),w,b
  5656  0012DC  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5657  0012E0  62DF               	cpfseq	indf2,c
  5658  0012E2  D183               	goto	l1271
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;vscp_firmware.c: 1022: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5662                           ;vscp_firmware.c: 1023: vscp_imsg.data[ 1 ],
  5663                           ;vscp_firmware.c: 1024: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  5664  0012E4  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5665  0012E6  EC97  F01B         	call	_vscp_readAppReg
  5666  0012EA  0100               	movlb	0	; () banked
  5667  0012EC  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5668  0012EE  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5669  0012F0  6E51               	movwf	?_vscp_writeAppReg,c
  5670  0012F2  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5671  0012F4  EC11  F003         	call	_vscp_writeAppReg
  5672  0012F8  D68D               	goto	L14
  5673  0012FA                     l9481:
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;vscp_firmware.c: 1040: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5677  0012FA  5191               	movf	_vscp_nickname& (0+255),w,b
  5678  0012FC  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5679  001300  62DF               	cpfseq	indf2,c
  5680  001302  D173               	goto	l1271
  5681                           
  5682                           ; BSR set to: 0
  5683                           ;vscp_firmware.c: 1042: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5684                           ;vscp_firmware.c: 1043: vscp_imsg.data[ 1 ],
  5685                           ;vscp_firmware.c: 1044: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  5686  001304  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5687  001306  EC97  F01B         	call	_vscp_readAppReg
  5688  00130A  0100               	movlb	0	; () banked
  5689  00130C  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5690  00130E  05D1               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  5691  001310  6E51               	movwf	?_vscp_writeAppReg,c
  5692  001312  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5693  001314  EC11  F003         	call	_vscp_writeAppReg
  5694  001318  D67D               	goto	L14
  5695  00131A                     l9497:
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;vscp_firmware.c: 1060: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  5699                           ;vscp_firmware.c: 1061: (0xff == vscp_imsg.data[ 0 ])) {
  5700  00131A  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
  5701  00131C  1991               	xorwf	_vscp_nickname& (0+255),w,b
  5702  00131E  E003               	bz	l1236
  5703                           
  5704                           ; BSR set to: 0
  5705  001320  299C               	incf	(_vscp_imsg+6)& (0+255),w,b
  5706  001322  E001 D162          	bnz	l1271
  5707  001326                     l1236:
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;vscp_firmware.c: 1063: uint8_t i, j, k = 0;
  5711  001326  6BE5               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;vscp_firmware.c: 1067: vscp_omsg.priority = 0x03;
  5715  001328  0E03               	movlw	3
  5716  00132A  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5717                           
  5718                           ;vscp_firmware.c: 1068: vscp_omsg.flags = 0x80 + 8;
  5719  00132C  0E88               	movlw	136
  5720  00132E  6FA4               	movwf	_vscp_omsg& (0+255),b
  5721                           
  5722                           ; BSR set to: 0
  5723                           ;vscp_firmware.c: 1069: vscp_omsg.vscp_class = 0;
  5724  001330  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5725  001332  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5726                           
  5727                           ;vscp_firmware.c: 1070: vscp_omsg.vscp_type = 32;
  5728  001334  0E20               	movlw	32
  5729  001336  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5730                           
  5731                           ; BSR set to: 0
  5732                           ;vscp_firmware.c: 1072: for (i = 0; i < 3; i++)
  5733  001338  6BE9               	clrf	vscp_handleProtocolEvent@i_1281& (0+255),b
  5734  00133A                     l1237:
  5735                           
  5736                           ; BSR set to: 0
  5737                           ;vscp_firmware.c: 1073: {
  5738                           ;vscp_firmware.c: 1074: vscp_omsg.data[0] = i;
  5739  00133A  C0E9  F0A9         	movff	vscp_handleProtocolEvent@i_1281,_vscp_omsg+5
  5740                           
  5741                           ; BSR set to: 0
  5742                           ;vscp_firmware.c: 1076: for (j = 1; j < 8; j++) {
  5743  00133E  0E01               	movlw	1
  5744  001340  6FEB               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  5745  001342                     l9517:
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;vscp_firmware.c: 1077: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  5749  001342  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5750  001344  0FA9               	addlw	low (_vscp_omsg+5)
  5751  001346  6ED9               	movwf	fsr2l,c
  5752  001348  6ADA               	clrf	fsr2h,c
  5753  00134A  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5754  00134C  080F               	sublw	15
  5755  00134E  EC53  F01F         	call	_vscp_getGUID
  5756  001352  6EDF               	movwf	indf2,c
  5757  001354  0100               	movlb	0	; () banked
  5758  001356  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5759                           
  5760                           ; BSR set to: 0
  5761                           ;vscp_firmware.c: 1078: if (k > 16)
  5762  001358  0E10               	movlw	16
  5763  00135A  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5764  00135C  D001               	goto	l9525
  5765  00135E  D004               	goto	l9529
  5766  001360                     l9525:
  5767                           
  5768                           ; BSR set to: 0
  5769  001360  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5770                           
  5771                           ; BSR set to: 0
  5772  001362  0E07               	movlw	7
  5773  001364  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5774  001366  D7ED               	goto	l9517
  5775  001368                     l9529:
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;vscp_firmware.c: 1080: }
  5779                           ;vscp_firmware.c: 1082: if (k > 16)
  5780  001368  0E10               	movlw	16
  5781  00136A  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5782  00136C  D001               	goto	l9533
  5783  00136E  D006               	goto	l1238
  5784  001370                     l9533:
  5785                           
  5786                           ; BSR set to: 0
  5787                           ;vscp_firmware.c: 1085: vscp_sendEvent();
  5788  001370  EC46  F01E         	call	_vscp_sendEvent	;wreg free
  5789                           
  5790                           ; BSR set to: 0
  5791  001374  2BE9               	incf	vscp_handleProtocolEvent@i_1281& (0+255),f,b
  5792                           
  5793                           ; BSR set to: 0
  5794  001376  0E02               	movlw	2
  5795  001378  65E9               	cpfsgt	vscp_handleProtocolEvent@i_1281& (0+255),b
  5796  00137A  D7DF               	goto	l1237
  5797  00137C                     l1238:
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;vscp_firmware.c: 1086: }
  5801                           ;vscp_firmware.c: 1088: for (j = 0; j < 5; j++)
  5802  00137C  6BEB               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  5803  00137E                     l9543:
  5804                           
  5805                           ; BSR set to: 0
  5806                           ;vscp_firmware.c: 1089: {
  5807                           ;vscp_firmware.c: 1090: if (vscp_getMDF_URL(j) > 0)
  5808  00137E  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5809  001380  EC1B  F01F         	call	_vscp_getMDF_URL
  5810  001384  0900               	iorlw	0
  5811  001386  E008               	bz	l9547
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;vscp_firmware.c: 1091: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  5815  001388  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5816  00138A  0FAC               	addlw	low (_vscp_omsg+8)
  5817  00138C  6ED9               	movwf	fsr2l,c
  5818  00138E  6ADA               	clrf	fsr2h,c
  5819  001390  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5820  001392  EC1B  F01F         	call	_vscp_getMDF_URL
  5821  001396  D005               	goto	L16
  5822  001398                     l9547:
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;vscp_firmware.c: 1092: else
  5826                           ;vscp_firmware.c: 1093: vscp_omsg.data[3 + j] = 0;
  5827  001398  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5828  00139A  0FAC               	addlw	low (_vscp_omsg+8)
  5829  00139C  6ED9               	movwf	fsr2l,c
  5830  00139E  6ADA               	clrf	fsr2h,c
  5831  0013A0  0E00               	movlw	0
  5832  0013A2                     L16:
  5833  0013A2  6EDF               	movwf	indf2,c
  5834                           
  5835                           ; BSR set to: 0
  5836  0013A4  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5837                           
  5838                           ; BSR set to: 0
  5839  0013A6  0E04               	movlw	4
  5840  0013A8  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5841  0013AA  D7E9               	goto	l9543
  5842                           
  5843                           ; BSR set to: 0
  5844                           ;vscp_firmware.c: 1094: }
  5845                           ;vscp_firmware.c: 1096: vscp_sendEvent();
  5846  0013AC  EC46  F01E         	call	_vscp_sendEvent	;wreg free
  5847                           
  5848                           ; BSR set to: 0
  5849                           ;vscp_firmware.c: 1098: k = 5;
  5850  0013B0  0E05               	movlw	5
  5851  0013B2  6FE5               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;vscp_firmware.c: 1099: for (i = 3; i < 7; i++)
  5855  0013B4  0E03               	movlw	3
  5856  0013B6  6FE9               	movwf	vscp_handleProtocolEvent@i_1281& (0+255),b
  5857  0013B8                     l1247:
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;vscp_firmware.c: 1100: {
  5861                           ;vscp_firmware.c: 1101: vscp_omsg.data[0] = i;
  5862  0013B8  C0E9  F0A9         	movff	vscp_handleProtocolEvent@i_1281,_vscp_omsg+5
  5863                           
  5864                           ; BSR set to: 0
  5865                           ;vscp_firmware.c: 1103: for (j = 1; j < 8; j++) {
  5866  0013BC  0E01               	movlw	1
  5867  0013BE  6FEB               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  5868  0013C0                     l9569:
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;vscp_firmware.c: 1104: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  5872  0013C0  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5873  0013C2  0FA9               	addlw	low (_vscp_omsg+5)
  5874  0013C4  6ED9               	movwf	fsr2l,c
  5875  0013C6  6ADA               	clrf	fsr2h,c
  5876  0013C8  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5877  0013CA  EC1B  F01F         	call	_vscp_getMDF_URL
  5878  0013CE  6EDF               	movwf	indf2,c
  5879                           
  5880                           ; BSR set to: 0
  5881  0013D0  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5882                           
  5883                           ; BSR set to: 0
  5884  0013D2  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5885                           
  5886                           ; BSR set to: 0
  5887  0013D4  0E07               	movlw	7
  5888  0013D6  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5889  0013D8  D7F3               	goto	l9569
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;vscp_firmware.c: 1105: }
  5893                           ;vscp_firmware.c: 1106: vscp_sendEvent();
  5894  0013DA  EC46  F01E         	call	_vscp_sendEvent	;wreg free
  5895                           
  5896                           ; BSR set to: 0
  5897  0013DE  2BE9               	incf	vscp_handleProtocolEvent@i_1281& (0+255),f,b
  5898                           
  5899                           ; BSR set to: 0
  5900  0013E0  0E06               	movlw	6
  5901  0013E2  65E9               	cpfsgt	vscp_handleProtocolEvent@i_1281& (0+255),b
  5902  0013E4  D7E9               	goto	l1247
  5903  0013E6  D101               	goto	l1271
  5904  0013E8                     l9583:
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;vscp_firmware.c: 1115: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5908  0013E8  5191               	movf	_vscp_nickname& (0+255),w,b
  5909  0013EA  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5910  0013EE  62DF               	cpfseq	indf2,c
  5911  0013F0  D0FC               	goto	l1271
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;vscp_firmware.c: 1117: vscp_omsg.priority = 0x03;
  5915  0013F2  0E03               	movlw	3
  5916  0013F4  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5917                           
  5918                           ;vscp_firmware.c: 1118: vscp_omsg.flags = 0x80 + 7;
  5919  0013F6  0E87               	movlw	135
  5920  0013F8  6FA4               	movwf	_vscp_omsg& (0+255),b
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;vscp_firmware.c: 1119: vscp_omsg.vscp_class = 0;
  5924  0013FA  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5925  0013FC  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5926                           
  5927                           ;vscp_firmware.c: 1120: vscp_omsg.vscp_type = 34;
  5928  0013FE  0E22               	movlw	34
  5929  001400  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;vscp_firmware.c: 1122: vscp_getMatrixInfo((char *) vscp_omsg.data);
  5933  001402  0EA9               	movlw	(_vscp_omsg+5)& (0+255)
  5934  001404  ECD4  F01E         	call	_vscp_getMatrixInfo
  5935  001408  D610               	goto	l9291
  5936  00140A                     l9593:
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;vscp_firmware.c: 1138: if ( vscp_nickname == vscp_imsg.data[0] ) {
  5940  00140A  5191               	movf	_vscp_nickname& (0+255),w,b
  5941  00140C  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5942  001410  62DF               	cpfseq	indf2,c
  5943  001412  D0EB               	goto	l1271
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;vscp_firmware.c: 1140: uint16_t page_save;
  5947                           ;vscp_firmware.c: 1141: uint8_t byte = 0, bytes = 0;
  5948  001414  6BE8               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  5949                           
  5950                           ; BSR set to: 0
  5951                           ;vscp_firmware.c: 1142: uint8_t bytes_this_time, cb;
  5952                           ;vscp_firmware.c: 1146: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  5953  001416  C096  F0D1         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  5954  00141A  0E0F               	movlw	15
  5955  00141C  17D1               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  5956  00141E  0E04               	movlw	4
  5957  001420  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5958  001422  E304               	bnc	l9601
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;vscp_firmware.c: 1149: bytes = vscp_imsg.data[4];
  5962  001424  C0A0  F0E6         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1286
  5963                           
  5964                           ;vscp_firmware.c: 1151: if ( 0 == bytes ) {
  5965  001428  67E6               	tstfsz	vscp_handleProtocolEvent@bytes_1286& (0+255),b
  5966  00142A  D002               	goto	l9605
  5967  00142C                     l9601:
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;vscp_firmware.c: 1152: bytes = 1;
  5971  00142C  0E01               	movlw	1
  5972  00142E  6FE6               	movwf	vscp_handleProtocolEvent@bytes_1286& (0+255),b
  5973  001430                     l9605:
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;vscp_firmware.c: 1157: }
  5977                           ;vscp_firmware.c: 1160: page_save = vscp_page_select;
  5978  001430  C052  F0D8         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  5979  001434  C053  F0D9         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;vscp_firmware.c: 1165: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  5983  001438  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  5984  00143A  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  5985  00143E  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5986  001440  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  5987  001444  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  5988  001446  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5989  001448  6E52               	movwf	_vscp_page_select,c
  5990  00144A  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5991  00144C  6E53               	movwf	_vscp_page_select+1,c
  5992                           
  5993                           ; BSR set to: 0
  5994                           ;vscp_firmware.c: 1168: vscp_omsg.priority = 0x03;
  5995  00144E  0E03               	movlw	3
  5996  001450  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;vscp_firmware.c: 1169: vscp_omsg.vscp_class = 0;
  6000  001452  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6001  001454  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;vscp_firmware.c: 1170: vscp_omsg.vscp_type = 39;
  6005  001456  0E27               	movlw	39
  6006  001458  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;vscp_firmware.c: 1171: vscp_omsg.data[0] = 0;
  6010  00145A  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;vscp_firmware.c: 1172: vscp_omsg.data[1] = vscp_imsg.data[1];
  6014  00145C  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;vscp_firmware.c: 1173: vscp_omsg.data[2] = vscp_imsg.data[2];
  6018  001460  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6019  001464                     l9621:
  6020                           
  6021                           ; BSR set to: 0
  6022                           ;vscp_firmware.c: 1177: if ( ( bytes - byte ) >= 4 ) {
  6023  001464  51E8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6024  001466  C0E6  F0D1         	movff	vscp_handleProtocolEvent@bytes_1286,??_vscp_handleProtocolEvent
  6025  00146A  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6026  00146C  5FD1               	subwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6027  00146E  0E00               	movlw	0
  6028  001470  5BD2               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6029  001472  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6030  001474  0A80               	xorlw	128
  6031  001476  0F80               	addlw	-128
  6032  001478  0E04               	movlw	4
  6033  00147A  B4D8               	btfsc	status,2,c
  6034  00147C  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6035  00147E  E302               	bnc	l9625
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;vscp_firmware.c: 1178: bytes_this_time = 4;
  6039  001480  0E04               	movlw	4
  6040  001482  D002               	goto	L18
  6041  001484                     l9625:
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;vscp_firmware.c: 1180: else {
  6045                           ;vscp_firmware.c: 1181: bytes_this_time = (bytes - byte);
  6046  001484  51E8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6047  001486  5DE6               	subwf	vscp_handleProtocolEvent@bytes_1286& (0+255),w,b
  6048  001488                     L18:
  6049  001488  6FE2               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;vscp_firmware.c: 1182: }
  6053                           ;vscp_firmware.c: 1185: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  6054  00148A  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6055  00148C  0F84               	addlw	132
  6056  00148E  6FA4               	movwf	_vscp_omsg& (0+255),b
  6057                           
  6058                           ;vscp_firmware.c: 1186: vscp_omsg.data[3] =
  6059                           ;vscp_firmware.c: 1187: vscp_imsg.data[3] + byte;
  6060  001490  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6061  001492  25E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6062  001494  6FAC               	movwf	(_vscp_omsg+8)& (0+255),b
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;vscp_firmware.c: 1190: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  6066  001496  6BE3               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  6067  001498  D00C               	goto	l9633
  6068  00149A                     l9629:
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;vscp_firmware.c: 1191: vscp_omsg.data[ (4 + cb) ] =
  6072                           ;vscp_firmware.c: 1192: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  6073  00149A  51E3               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6074  00149C  0FAD               	addlw	low (_vscp_omsg+9)
  6075  00149E  6ED9               	movwf	fsr2l,c
  6076  0014A0  6ADA               	clrf	fsr2h,c
  6077  0014A2  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6078  0014A4  25E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6079  0014A6  25E3               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6080  0014A8  EC02  F01F         	call	_vscp_readRegister
  6081  0014AC  6EDF               	movwf	indf2,c
  6082  0014AE  0100               	movlb	0	; () banked
  6083  0014B0  2BE3               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  6084  0014B2                     l9633:
  6085                           
  6086                           ; BSR set to: 0
  6087  0014B2  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6088  0014B4  5DE3               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6089  0014B6  E3F1               	bnc	l9629
  6090                           
  6091                           ; BSR set to: 0
  6092                           ;vscp_firmware.c: 1193: }
  6093                           ;vscp_firmware.c: 1196: vscp_sendEvent();
  6094  0014B8  EC46  F01E         	call	_vscp_sendEvent	;wreg free
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;vscp_firmware.c: 1199: byte += bytes_this_time;
  6098  0014BC  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6099  0014BE  27E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;vscp_firmware.c: 1202: vscp_omsg.data[0] += 1;
  6103  0014C0  2BA9               	incf	(_vscp_omsg+5)& (0+255),f,b
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;vscp_firmware.c: 1204: } while (byte < bytes);
  6107  0014C2  51E6               	movf	vscp_handleProtocolEvent@bytes_1286& (0+255),w,b
  6108  0014C4  5DE8               	subwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6109  0014C6  E3CE               	bnc	l9621
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;vscp_firmware.c: 1207: vscp_page_select = page_save;
  6113  0014C8  C0D8  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  6114  0014CC  C0D9  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  6115  0014D0  D08C               	goto	l1271
  6116  0014D2                     l9643:
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;vscp_firmware.c: 1214: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  6120  0014D2  5191               	movf	_vscp_nickname& (0+255),w,b
  6121  0014D4  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6122  0014D8  62DF               	cpfseq	indf2,c
  6123  0014DA  D087               	goto	l1271
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;vscp_firmware.c: 1216: uint8_t i;
  6127                           ;vscp_firmware.c: 1217: uint16_t page_save;
  6128                           ;vscp_firmware.c: 1220: page_save = vscp_page_select;
  6129  0014DC  C052  F0DA         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1290
  6130  0014E0  C053  F0DB         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1290+1
  6131                           
  6132                           ; BSR set to: 0
  6133                           ;vscp_firmware.c: 1224: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  6134  0014E4  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  6135  0014E6  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6136  0014EA  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6137  0014EC  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6138  0014F0  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6139  0014F2  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6140  0014F4  6E52               	movwf	_vscp_page_select,c
  6141  0014F6  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6142  0014F8  6E53               	movwf	_vscp_page_select+1,c
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;vscp_firmware.c: 1226: for (i = vscp_imsg.data[ 3 ];
  6146  0014FA  C09F  F0E4         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1289
  6147                           
  6148                           ;vscp_firmware.c: 1229: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  6149                           ;vscp_firmware.c: 1230: i++) {
  6150  0014FE  D014               	goto	l9655
  6151  001500                     l9651:
  6152                           
  6153                           ; BSR set to: 0
  6154                           ;vscp_firmware.c: 1231: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  6155                           ;vscp_firmware.c: 1232: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  6156  001500  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6157  001502  08A0               	sublw	low (_vscp_imsg+10)
  6158  001504  25E4               	addwf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6159  001506  6ED9               	movwf	fsr2l,c
  6160  001508  6ADA               	clrf	fsr2h,c
  6161  00150A  50DF               	movf	indf2,w,c
  6162  00150C  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  6163  00150E  51E4               	movf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6164  001510  ECA1  F01E         	call	_vscp_writeRegister
  6165  001514  0100               	movlb	0	; () banked
  6166  001516  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6167  001518  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6168  00151A  08AD               	sublw	low (_vscp_omsg+9)
  6169  00151C  25E4               	addwf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6170  00151E  6ED9               	movwf	fsr2l,c
  6171  001520  6ADA               	clrf	fsr2h,c
  6172  001522  C0D1  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  6173                           
  6174                           ; BSR set to: 0
  6175  001526  2BE4               	incf	vscp_handleProtocolEvent@i_1289& (0+255),f,b
  6176  001528                     l9655:
  6177                           
  6178                           ; BSR set to: 0
  6179  001528  5196               	movf	_vscp_imsg& (0+255),w,b
  6180  00152A  0B0F               	andlw	15
  6181  00152C  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6182  00152E  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6183  001530  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6184  001532  27D1               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6185  001534  0E00               	movlw	0
  6186  001536  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6187  001538  0EFC               	movlw	252
  6188  00153A  25D1               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6189  00153C  6FD3               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  6190  00153E  0EFF               	movlw	255
  6191  001540  21D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6192  001542  6FD4               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  6193  001544  51E4               	movf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6194  001546  6FD5               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  6195  001548  6BD6               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  6196  00154A  51D6               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  6197  00154C  0A80               	xorlw	128
  6198  00154E  6FD7               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  6199  001550  51D3               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  6200  001552  5DD5               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  6201  001554  51D4               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  6202  001556  0A80               	xorlw	128
  6203  001558  59D7               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  6204  00155A  E3D2               	bnc	l9651
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;vscp_firmware.c: 1233: }
  6208                           ;vscp_firmware.c: 1236: vscp_page_select = page_save;
  6209  00155C  C0DA  F052         	movff	vscp_handleProtocolEvent@page_save_1290,_vscp_page_select
  6210  001560  C0DB  F053         	movff	vscp_handleProtocolEvent@page_save_1290+1,_vscp_page_select+1
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;vscp_firmware.c: 1238: vscp_omsg.priority = 0x03;
  6214  001564  0E03               	movlw	3
  6215  001566  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6216                           
  6217                           ; BSR set to: 0
  6218                           ;vscp_firmware.c: 1239: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  6219  001568  5196               	movf	_vscp_imsg& (0+255),w,b
  6220  00156A  0B0F               	andlw	15
  6221  00156C  0F80               	addlw	128
  6222  00156E  6FA4               	movwf	_vscp_omsg& (0+255),b
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;vscp_firmware.c: 1240: vscp_omsg.vscp_class = 0;
  6226  001570  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6227  001572  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;vscp_firmware.c: 1241: vscp_omsg.vscp_type = 39;
  6231  001574  0E27               	movlw	39
  6232  001576  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;vscp_firmware.c: 1242: vscp_omsg.data[0] = 0;
  6236  001578  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;vscp_firmware.c: 1243: vscp_omsg.data[1] = vscp_imsg.data[1];
  6240  00157A  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;vscp_firmware.c: 1244: vscp_omsg.data[2] = vscp_imsg.data[2];
  6244  00157E  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;vscp_firmware.c: 1245: vscp_omsg.data[3] = vscp_imsg.data[3];
  6248  001582  C09F  F0AC         	movff	_vscp_imsg+9,_vscp_omsg+8
  6249  001586  D551               	goto	l9291
  6250  001588                     l9677:
  6251                           
  6252                           ; BSR set to: 0
  6253  001588  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  6254                           
  6255                           ; Switch size 1, requested type "speed"
  6256                           ; Number of cases is 16, Range of values is 1 to 38
  6257                           ; switch strategies available:
  6258                           ; Name         Instructions Cycles
  6259                           ; simple_byte           49    25 (average)
  6260                           ;	Chosen strategy is simple_byte
  6261  00158A  0A01               	xorlw	1	; case 1
  6262  00158C  E101 D525          	bz	l9265
  6263  001590  0A03               	xorlw	3	; case 2
  6264  001592  E101 D525          	bz	l9267
  6265  001596  0A04               	xorlw	4	; case 6
  6266  001598  E101 D525          	bz	l9269
  6267  00159C  0A0E               	xorlw	14	; case 8
  6268  00159E  E101 D525          	bz	l9271
  6269  0015A2  0A01               	xorlw	1	; case 9
  6270  0015A4  E101 D525          	bz	l9273
  6271  0015A8  0A02               	xorlw	2	; case 11
  6272  0015AA  E101 D545          	bz	l9307
  6273  0015AE  0A07               	xorlw	7	; case 12
  6274  0015B0  E101 D55B          	bz	l9341
  6275  0015B4  0A1B               	xorlw	27	; case 23
  6276  0015B6  E101 D5F0          	bz	l9399
  6277  0015BA  0A0F               	xorlw	15	; case 24
  6278  0015BC  E101 D604          	bz	l9405
  6279  0015C0  0A01               	xorlw	1	; case 25
  6280  0015C2  E101 D659          	bz	l9439
  6281  0015C6  0A04               	xorlw	4	; case 29
  6282  0015C8  E101 D687          	bz	l9465
  6283  0015CC  0A03               	xorlw	3	; case 30
  6284  0015CE  E101 D694          	bz	l9481
  6285  0015D2  0A01               	xorlw	1	; case 31
  6286  0015D4  E101 D6A1          	bz	l9497
  6287  0015D8  0A3E               	xorlw	62	; case 33
  6288  0015DA  E101 D705          	bz	l9583
  6289  0015DE  0A04               	xorlw	4	; case 37
  6290  0015E0  E101 D713          	bz	l9593
  6291  0015E4  0A03               	xorlw	3	; case 38
  6292  0015E6  E101 D774          	bz	l9643
  6293  0015EA                     l1271:
  6294  0015EA  0012               	return	
  6295  0015EC                     __end_of_vscp_handleProtocolEvent:
  6296                           	opt stack 0
  6297                           tblptru	equ	0xFF8
  6298                           prodh	equ	0xFF4
  6299                           prodl	equ	0xFF3
  6300                           postinc0	equ	0xFEE
  6301                           wreg	equ	0xFE8
  6302                           indf2	equ	0xFDF
  6303                           postinc2	equ	0xFDE
  6304                           postdec2	equ	0xFDD
  6305                           fsr2h	equ	0xFDA
  6306                           fsr2l	equ	0xFD9
  6307                           status	equ	0xFD8
  6308                           
  6309 ;; *************** function ___lbmod *****************
  6310 ;; Defined at:
  6311 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  6312 ;; Parameters:    Size  Location     Type
  6313 ;;  dividend        1    wreg     unsigned char 
  6314 ;;  divisor         1    7[COMRAM] unsigned char 
  6315 ;; Auto vars:     Size  Location     Type
  6316 ;;  dividend        1    8[COMRAM] unsigned char 
  6317 ;;  rem             1   10[COMRAM] unsigned char 
  6318 ;;  counter         1    9[COMRAM] unsigned char 
  6319 ;; Return value:  Size  Location     Type
  6320 ;;                  1    wreg      unsigned char 
  6321 ;; Registers used:
  6322 ;;		wreg, status,2, status,0
  6323 ;; Tracked objects:
  6324 ;;		On entry : F/0
  6325 ;;		On exit  : 0/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6328 ;;      Params:         1       0       0       0       0       0       0
  6329 ;;      Locals:         3       0       0       0       0       0       0
  6330 ;;      Temps:          0       0       0       0       0       0       0
  6331 ;;      Totals:         4       0       0       0       0       0       0
  6332 ;;Total ram usage:        4 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; Hardware stack levels required when called:    2
  6335 ;; This function calls:
  6336 ;;		Nothing
  6337 ;; This function is called by:
  6338 ;;		_vscp_handleProtocolEvent
  6339 ;; This function uses a non-reentrant model
  6340 ;;
  6341                           
  6342                           	psect	text16
  6343  003C3E                     __ptext16:
  6344                           	opt stack 0
  6345  003C3E                     ___lbmod:
  6346                           	opt stack 27
  6347                           
  6348                           ;incstack = 0
  6349                           ;incstack = 0
  6350                           ;___lbmod@dividend stored from wreg
  6351  003C3E  CFE8 F009          	movff	wreg,___lbmod@dividend
  6352                           
  6353                           ; BSR set to: 0
  6354  003C42  0E08               	movlw	8
  6355  003C44  6E0A               	movwf	___lbmod@counter,c
  6356                           
  6357                           ; BSR set to: 0
  6358  003C46  6A0B               	clrf	___lbmod@rem,c
  6359  003C48                     l7051:
  6360  003C48  90D8               	bcf	status,0,c
  6361  003C4A  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  6362  003C4C  340B               	rlcf	___lbmod@rem& (0+255),w,c
  6363  003C4E  6E0B               	movwf	___lbmod@rem,c
  6364  003C50  90D8               	bcf	status,0,c
  6365  003C52  3609               	rlcf	___lbmod@dividend,f,c
  6366  003C54  5008               	movf	___lbmod@divisor,w,c
  6367  003C56  5C0B               	subwf	___lbmod@rem,w,c
  6368  003C58  E302               	bnc	l7059
  6369  003C5A  5008               	movf	___lbmod@divisor,w,c
  6370  003C5C  5E0B               	subwf	___lbmod@rem,f,c
  6371  003C5E                     l7059:
  6372  003C5E  2E0A               	decfsz	___lbmod@counter,f,c
  6373  003C60  D7F3               	goto	l7051
  6374  003C62  500B               	movf	___lbmod@rem,w,c
  6375  003C64  0012               	return	
  6376  003C66                     __end_of___lbmod:
  6377                           	opt stack 0
  6378                           tblptru	equ	0xFF8
  6379                           prodh	equ	0xFF4
  6380                           prodl	equ	0xFF3
  6381                           postinc0	equ	0xFEE
  6382                           wreg	equ	0xFE8
  6383                           indf2	equ	0xFDF
  6384                           postinc2	equ	0xFDE
  6385                           postdec2	equ	0xFDD
  6386                           fsr2h	equ	0xFDA
  6387                           fsr2l	equ	0xFD9
  6388                           status	equ	0xFD8
  6389                           
  6390 ;; *************** function _vscp_writeRegister *****************
  6391 ;; Defined at:
  6392 ;;		line 678 in file "../../vscp_firmware/common/vscp_firmware.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;  reg             1    wreg     unsigned char 
  6395 ;;  value           1   30[BANK0 ] unsigned char 
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;  reg             1   31[BANK0 ] unsigned char 
  6398 ;; Return value:  Size  Location     Type
  6399 ;;                  1    wreg      unsigned char 
  6400 ;; Registers used:
  6401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6402 ;; Tracked objects:
  6403 ;;		On entry : F/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6407 ;;      Params:         0       1       0       0       0       0       0
  6408 ;;      Locals:         0       1       0       0       0       0       0
  6409 ;;      Temps:          0       0       0       0       0       0       0
  6410 ;;      Totals:         0       2       0       0       0       0       0
  6411 ;;Total ram usage:        2 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:    8
  6414 ;; This function calls:
  6415 ;;		_vscp_writeAppReg
  6416 ;;		_vscp_writeStdReg
  6417 ;; This function is called by:
  6418 ;;		_vscp_handleProtocolEvent
  6419 ;; This function uses a non-reentrant model
  6420 ;;
  6421                           
  6422                           	psect	text17
  6423  003D42                     __ptext17:
  6424                           	opt stack 0
  6425  003D42                     _vscp_writeRegister:
  6426                           	opt stack 21
  6427                           
  6428                           ;incstack = 0
  6429                           ;incstack = 0
  6430                           ;vscp_writeRegister@reg stored from wreg
  6431  003D42  CFE8 F0D0          	movff	wreg,vscp_writeRegister@reg
  6432                           
  6433                           ; BSR set to: 0
  6434                           ;vscp_firmware.c: 679: if (reg >= 0x80) {
  6435  003D46  0E7F               	movlw	127
  6436  003D48  65D0               	cpfsgt	vscp_writeRegister@reg& (0+255),b
  6437  003D4A  D006               	goto	l10433
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;vscp_firmware.c: 680: return vscp_writeStdReg(reg, value);
  6441  003D4C  C0CF  F00F         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  6442  003D50  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6443  003D52  EC10  F015         	call	_vscp_writeStdReg
  6444  003D56  D005               	goto	l1148
  6445  003D58                     l10433:
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;vscp_firmware.c: 682: return vscp_writeAppReg(reg, value);
  6449  003D58  C0CF  F051         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  6450  003D5C  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6451  003D5E  EC11  F003         	call	_vscp_writeAppReg
  6452  003D62                     l1148:
  6453  003D62  0012               	return	
  6454  003D64                     __end_of_vscp_writeRegister:
  6455                           	opt stack 0
  6456                           tblptru	equ	0xFF8
  6457                           prodh	equ	0xFF4
  6458                           prodl	equ	0xFF3
  6459                           postinc0	equ	0xFEE
  6460                           wreg	equ	0xFE8
  6461                           indf2	equ	0xFDF
  6462                           postinc2	equ	0xFDE
  6463                           postdec2	equ	0xFDD
  6464                           fsr2h	equ	0xFDA
  6465                           fsr2l	equ	0xFD9
  6466                           status	equ	0xFD8
  6467                           
  6468 ;; *************** function _vscp_writeStdReg *****************
  6469 ;; Defined at:
  6470 ;;		line 691 in file "../../vscp_firmware/common/vscp_firmware.c"
  6471 ;; Parameters:    Size  Location     Type
  6472 ;;  reg             1    wreg     unsigned char 
  6473 ;;  value           1   14[COMRAM] unsigned char 
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;  reg             1   31[COMRAM] unsigned char 
  6476 ;;  code            4   24[COMRAM] unsigned long 
  6477 ;;  idx             1   29[COMRAM] unsigned char 
  6478 ;;  code            4   20[COMRAM] unsigned long 
  6479 ;;  idx             1   28[COMRAM] unsigned char 
  6480 ;;  rv              1   30[COMRAM] unsigned char 
  6481 ;; Return value:  Size  Location     Type
  6482 ;;                  1    wreg      unsigned char 
  6483 ;; Registers used:
  6484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6485 ;; Tracked objects:
  6486 ;;		On entry : F/0
  6487 ;;		On exit  : 0/0
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6490 ;;      Params:         1       0       0       0       0       0       0
  6491 ;;      Locals:        12       0       0       0       0       0       0
  6492 ;;      Temps:          5       0       0       0       0       0       0
  6493 ;;      Totals:        18       0       0       0       0       0       0
  6494 ;;Total ram usage:       18 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; Hardware stack levels required when called:    5
  6497 ;; This function calls:
  6498 ;;		_vscp_setGUID
  6499 ;;		_vscp_setManufacturerId
  6500 ;;		_vscp_getGUID
  6501 ;;		_vscp_getUserID
  6502 ;;		_vscp_setUserID
  6503 ;;		_vscp_getManufacturerId
  6504 ;;		_vscp_getFamilyCode
  6505 ;;		_vscp_getFamilyType
  6506 ;;		_vscp_restoreDefaults
  6507 ;; This function is called by:
  6508 ;;		_vscp_writeRegister
  6509 ;;		_vscp_handleProtocolEvent
  6510 ;; This function uses a non-reentrant model
  6511 ;;
  6512                           
  6513                           	psect	text18
  6514  002A20                     __ptext18:
  6515                           	opt stack 0
  6516  002A20                     _vscp_writeStdReg:
  6517                           	opt stack 24
  6518                           
  6519                           ;incstack = 0
  6520                           ;incstack = 0
  6521                           ;vscp_writeStdReg@reg stored from wreg
  6522  002A20  CFE8 F020          	movff	wreg,vscp_writeStdReg@reg
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;vscp_firmware.c: 692: uint8_t rv = ~value;
  6526  002A24  1C0F               	comf	vscp_writeStdReg@value,w,c
  6527  002A26  6E1F               	movwf	vscp_writeStdReg@rv,c
  6528                           
  6529                           ; BSR set to: 0
  6530                           ;vscp_firmware.c: 694: if ((reg > (0x82 + 1)) &&
  6531                           ;vscp_firmware.c: 695: (reg < 0x89)) {
  6532  002A28  0E83               	movlw	131
  6533  002A2A  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6534  002A2C  D00E               	goto	l9081
  6535                           
  6536                           ; BSR set to: 0
  6537  002A2E  0E89               	movlw	137
  6538  002A30  6020               	cpfslt	vscp_writeStdReg@reg,c
  6539  002A32  D00B               	goto	l9081
  6540                           
  6541                           ; BSR set to: 0
  6542                           ;vscp_firmware.c: 698: vscp_setUserID((reg - 0x84), value);
  6543  002A34  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  6544  002A38  5020               	movf	vscp_writeStdReg@reg,w,c
  6545  002A3A  0F7C               	addlw	124
  6546  002A3C  EC0F  F01F         	call	_vscp_setUserID
  6547                           
  6548                           ;vscp_firmware.c: 699: rv = vscp_getUserID((reg - 0x84));
  6549  002A40  5020               	movf	vscp_writeStdReg@reg,w,c
  6550  002A42  0F7C               	addlw	124
  6551  002A44  EC49  F01F         	call	_vscp_getUserID
  6552  002A48  D083               	goto	L23
  6553  002A4A                     l9081:
  6554                           
  6555                           ; BSR set to: 0
  6556                           ;vscp_firmware.c: 702: else if (0x92 == reg) {
  6557  002A4A  5020               	movf	vscp_writeStdReg@reg,w,c
  6558  002A4C  0A92               	xorlw	146
  6559  002A4E  E10D               	bnz	l9087
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;vscp_firmware.c: 705: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  6563  002A50  500F               	movf	vscp_writeStdReg@value,w,c
  6564  002A52  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6565  002A54  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  6566  002A56  5052               	movf	_vscp_page_select,w,c
  6567  002A58  6E12               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  6568  002A5A  6A13               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  6569  002A5C  1010               	iorwf	??_vscp_writeStdReg,w,c
  6570  002A5E  6E52               	movwf	_vscp_page_select,c
  6571  002A60  5011               	movf	??_vscp_writeStdReg+1,w,c
  6572  002A62  1013               	iorwf	??_vscp_writeStdReg+3,w,c
  6573  002A64  6E53               	movwf	_vscp_page_select+1,c
  6574                           
  6575                           ; BSR set to: 0
  6576                           ;vscp_firmware.c: 706: rv = (vscp_page_select >> 8) & 0xff;
  6577  002A66  5053               	movf	_vscp_page_select+1,w,c
  6578  002A68  D073               	goto	L23
  6579  002A6A                     l9087:
  6580                           
  6581                           ; BSR set to: 0
  6582                           ;vscp_firmware.c: 708: else if (0x93 == reg) {
  6583  002A6A  5020               	movf	vscp_writeStdReg@reg,w,c
  6584  002A6C  0A93               	xorlw	147
  6585  002A6E  E10B               	bnz	l9093
  6586                           
  6587                           ; BSR set to: 0
  6588                           ;vscp_firmware.c: 711: vscp_page_select = (vscp_page_select & 0xff00) | value;
  6589  002A70  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  6590  002A72  5053               	movf	_vscp_page_select+1,w,c
  6591  002A74  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6592  002A76  500F               	movf	vscp_writeStdReg@value,w,c
  6593  002A78  1010               	iorwf	??_vscp_writeStdReg,w,c
  6594  002A7A  6E52               	movwf	_vscp_page_select,c
  6595  002A7C  5011               	movf	??_vscp_writeStdReg+1,w,c
  6596  002A7E  6E53               	movwf	_vscp_page_select+1,c
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;vscp_firmware.c: 712: rv = (vscp_page_select & 0xff);
  6600  002A80  C052  F01F         	movff	_vscp_page_select,vscp_writeStdReg@rv
  6601                           
  6602                           ;vscp_firmware.c: 713: }
  6603  002A84  D0AF               	goto	l9155
  6604  002A86                     l9093:
  6605                           
  6606                           ; BSR set to: 0
  6607                           ;vscp_firmware.c: 718: else if ((reg > 0x88) && (reg < 0x91)) {
  6608  002A86  0E88               	movlw	136
  6609  002A88  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6610  002A8A  D019               	goto	l9105
  6611                           
  6612                           ; BSR set to: 0
  6613  002A8C  0E91               	movlw	145
  6614  002A8E  6020               	cpfslt	vscp_writeStdReg@reg,c
  6615  002A90  D016               	goto	l9105
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;vscp_firmware.c: 720: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6619                           ;vscp_firmware.c: 721: (0xff != (vscp_page_select & 0xff))) {
  6620  002A92  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6621  002A96  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6622  002A9A  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6623  002A9C  2811               	incf	??_vscp_writeStdReg+1,w,c
  6624  002A9E  E102               	bnz	l9101
  6625                           
  6626                           ; BSR set to: 0
  6627  002AA0  2852               	incf	_vscp_page_select,w,c
  6628  002AA2  E002               	bz	l9103
  6629  002AA4                     l9101:
  6630                           
  6631                           ; BSR set to: 0
  6632                           ;vscp_firmware.c: 723: rv = ~value;
  6633  002AA4  1C0F               	comf	vscp_writeStdReg@value,w,c
  6634  002AA6  D054               	goto	L23
  6635  002AA8                     l9103:
  6636                           
  6637                           ; BSR set to: 0
  6638                           ;vscp_firmware.c: 726: vscp_setManufacturerId(reg - 0x89, value);
  6639  002AA8  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  6640  002AAC  5020               	movf	vscp_writeStdReg@reg,w,c
  6641  002AAE  0F77               	addlw	119
  6642  002AB0  ECB2  F01E         	call	_vscp_setManufacturerId
  6643                           
  6644                           ;vscp_firmware.c: 727: rv = vscp_getManufacturerId(reg - 0x89);
  6645  002AB4  5020               	movf	vscp_writeStdReg@reg,w,c
  6646  002AB6  0F77               	addlw	119
  6647  002AB8  EC3F  F01F         	call	_vscp_getManufacturerId
  6648  002ABC  D049               	goto	L23
  6649  002ABE                     l9105:
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;vscp_firmware.c: 730: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  6653  002ABE  0ECF               	movlw	207
  6654  002AC0  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6655  002AC2  D017               	goto	l9117
  6656                           
  6657                           ; BSR set to: 0
  6658  002AC4  0EE0               	movlw	224
  6659  002AC6  6020               	cpfslt	vscp_writeStdReg@reg,c
  6660  002AC8  D014               	goto	l9117
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;vscp_firmware.c: 732: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6664                           ;vscp_firmware.c: 733: (0xff != (vscp_page_select & 0xff))) {
  6665  002ACA  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6666  002ACE  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6667  002AD2  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6668  002AD4  2811               	incf	??_vscp_writeStdReg+1,w,c
  6669  002AD6  E1E6               	bnz	l9101
  6670                           
  6671                           ; BSR set to: 0
  6672  002AD8  2852               	incf	_vscp_page_select,w,c
  6673  002ADA  E1E4               	bnz	l9101
  6674                           
  6675                           ; BSR set to: 0
  6676                           ;vscp_firmware.c: 737: else {
  6677                           ;vscp_firmware.c: 738: vscp_setGUID(reg - 0xD0, value);
  6678  002ADC  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  6679  002AE0  5020               	movf	vscp_writeStdReg@reg,w,c
  6680  002AE2  0F30               	addlw	48
  6681  002AE4  ECC3  F01E         	call	_vscp_setGUID
  6682                           
  6683                           ;vscp_firmware.c: 739: rv = vscp_getGUID(reg - 0xD0);
  6684  002AE8  5020               	movf	vscp_writeStdReg@reg,w,c
  6685  002AEA  0F30               	addlw	48
  6686  002AEC  EC53  F01F         	call	_vscp_getGUID
  6687  002AF0  D02F               	goto	L23
  6688  002AF2                     l9117:
  6689                           
  6690                           ; BSR set to: 0
  6691                           ;vscp_firmware.c: 743: else if ( ( reg >= 0x9A ) &&
  6692                           ;vscp_firmware.c: 744: ( reg < 0x9E ) ) {
  6693  002AF2  0E99               	movlw	153
  6694  002AF4  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6695  002AF6  D02E               	goto	l9127
  6696                           
  6697                           ; BSR set to: 0
  6698  002AF8  0E9E               	movlw	158
  6699  002AFA  6020               	cpfslt	vscp_writeStdReg@reg,c
  6700  002AFC  D02B               	goto	l9127
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;vscp_firmware.c: 746: uint32_t code = vscp_getFamilyCode();
  6704  002AFE  ECA2  F01F         	call	_vscp_getFamilyCode	;wreg free
  6705  002B02  C00B  F018         	movff	?_vscp_getFamilyCode+3,vscp_writeStdReg@code+3
  6706  002B06  C00A  F017         	movff	?_vscp_getFamilyCode+2,vscp_writeStdReg@code+2
  6707  002B0A  C009  F016         	movff	?_vscp_getFamilyCode+1,vscp_writeStdReg@code+1
  6708  002B0E  C008  F015         	movff	?_vscp_getFamilyCode,vscp_writeStdReg@code
  6709                           
  6710                           ; BSR set to: 0
  6711                           ;vscp_firmware.c: 747: uint8_t idx = reg - 0x9A;
  6712  002B12  5020               	movf	vscp_writeStdReg@reg,w,c
  6713  002B14  0F66               	addlw	102
  6714  002B16  6E1D               	movwf	vscp_writeStdReg@idx,c
  6715                           
  6716                           ; BSR set to: 0
  6717                           ;vscp_firmware.c: 748: rv = code >> (((3-idx)*8) & 0xff);
  6718  002B18  501D               	movf	vscp_writeStdReg@idx,w,c
  6719  002B1A  0803               	sublw	3
  6720  002B1C  6E10               	movwf	??_vscp_writeStdReg& (0+255),c
  6721  002B1E  90D8               	bcf	status,0,c
  6722  002B20  3610               	rlcf	??_vscp_writeStdReg,f,c
  6723  002B22  90D8               	bcf	status,0,c
  6724  002B24  3610               	rlcf	??_vscp_writeStdReg,f,c
  6725  002B26  90D8               	bcf	status,0,c
  6726  002B28  3610               	rlcf	??_vscp_writeStdReg,f,c
  6727  002B2A  5010               	movf	??_vscp_writeStdReg,w,c
  6728  002B2C  C015  F011         	movff	vscp_writeStdReg@code,??_vscp_writeStdReg+1
  6729  002B30  C016  F012         	movff	vscp_writeStdReg@code+1,??_vscp_writeStdReg+2
  6730  002B34  C017  F013         	movff	vscp_writeStdReg@code+2,??_vscp_writeStdReg+3
  6731  002B38  C018  F014         	movff	vscp_writeStdReg@code+3,??_vscp_writeStdReg+4
  6732  002B3C  2AE8               	incf	wreg,f,c
  6733  002B3E  D005               	goto	u11090
  6734  002B40                     u11095:
  6735  002B40  90D8               	bcf	status,0,c
  6736  002B42  3214               	rrcf	??_vscp_writeStdReg+4,f,c
  6737  002B44  3213               	rrcf	??_vscp_writeStdReg+3,f,c
  6738  002B46  3212               	rrcf	??_vscp_writeStdReg+2,f,c
  6739  002B48  3211               	rrcf	??_vscp_writeStdReg+1,f,c
  6740  002B4A                     u11090:
  6741  002B4A  2EE8               	decfsz	wreg,f,c
  6742  002B4C  D7F9               	goto	u11095
  6743  002B4E  D030               	goto	L24
  6744  002B50                     L23:
  6745  002B50  6E1F               	movwf	vscp_writeStdReg@rv,c
  6746                           
  6747                           ;vscp_firmware.c: 749: }
  6748  002B52  D048               	goto	l9155
  6749  002B54                     l9127:
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;vscp_firmware.c: 750: else if ( ( reg >= 0x9E ) &&
  6753                           ;vscp_firmware.c: 751: ( reg < 0xA2 ) ) {
  6754  002B54  0E9D               	movlw	157
  6755  002B56  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6756  002B58  D02D               	goto	l9137
  6757                           
  6758                           ; BSR set to: 0
  6759  002B5A  0EA2               	movlw	162
  6760  002B5C  6020               	cpfslt	vscp_writeStdReg@reg,c
  6761  002B5E  D02A               	goto	l9137
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;vscp_firmware.c: 753: uint32_t code = vscp_getFamilyType();
  6765  002B60  EC9D  F01F         	call	_vscp_getFamilyType	;wreg free
  6766  002B64  C00B  F01C         	movff	?_vscp_getFamilyType+3,vscp_writeStdReg@code_1270+3
  6767  002B68  C00A  F01B         	movff	?_vscp_getFamilyType+2,vscp_writeStdReg@code_1270+2
  6768  002B6C  C009  F01A         	movff	?_vscp_getFamilyType+1,vscp_writeStdReg@code_1270+1
  6769  002B70  C008  F019         	movff	?_vscp_getFamilyType,vscp_writeStdReg@code_1270
  6770                           
  6771                           ; BSR set to: 0
  6772                           ;vscp_firmware.c: 754: uint8_t idx = reg - 0x9E;
  6773  002B74  5020               	movf	vscp_writeStdReg@reg,w,c
  6774  002B76  0F62               	addlw	98
  6775  002B78  6E1E               	movwf	vscp_writeStdReg@idx_1271,c
  6776                           
  6777                           ; BSR set to: 0
  6778                           ;vscp_firmware.c: 755: rv = code >> (((3-idx)*8) & 0xff);
  6779  002B7A  501E               	movf	vscp_writeStdReg@idx_1271,w,c
  6780  002B7C  0803               	sublw	3
  6781  002B7E  6E10               	movwf	??_vscp_writeStdReg& (0+255),c
  6782  002B80  90D8               	bcf	status,0,c
  6783  002B82  3610               	rlcf	??_vscp_writeStdReg,f,c
  6784  002B84  90D8               	bcf	status,0,c
  6785  002B86  3610               	rlcf	??_vscp_writeStdReg,f,c
  6786  002B88  90D8               	bcf	status,0,c
  6787  002B8A  3610               	rlcf	??_vscp_writeStdReg,f,c
  6788  002B8C  5010               	movf	??_vscp_writeStdReg,w,c
  6789  002B8E  C019  F011         	movff	vscp_writeStdReg@code_1270,??_vscp_writeStdReg+1
  6790  002B92  C01A  F012         	movff	vscp_writeStdReg@code_1270+1,??_vscp_writeStdReg+2
  6791  002B96  C01B  F013         	movff	vscp_writeStdReg@code_1270+2,??_vscp_writeStdReg+3
  6792  002B9A  C01C  F014         	movff	vscp_writeStdReg@code_1270+3,??_vscp_writeStdReg+4
  6793  002B9E  2AE8               	incf	wreg,f,c
  6794  002BA0  D005               	goto	u11120
  6795  002BA2                     u11125:
  6796  002BA2  90D8               	bcf	status,0,c
  6797  002BA4  3214               	rrcf	??_vscp_writeStdReg+4,f,c
  6798  002BA6  3213               	rrcf	??_vscp_writeStdReg+3,f,c
  6799  002BA8  3212               	rrcf	??_vscp_writeStdReg+2,f,c
  6800  002BAA  3211               	rrcf	??_vscp_writeStdReg+1,f,c
  6801  002BAC                     u11120:
  6802  002BAC  2EE8               	decfsz	wreg,f,c
  6803  002BAE  D7F9               	goto	u11125
  6804  002BB0                     L24:
  6805  002BB0  5011               	movf	??_vscp_writeStdReg+1,w,c
  6806  002BB2  D7CE               	goto	L23
  6807  002BB4                     l9137:
  6808                           
  6809                           ; BSR set to: 0
  6810                           ;vscp_firmware.c: 757: else if ( 0xA2 == reg ) {
  6811  002BB4  5020               	movf	vscp_writeStdReg@reg,w,c
  6812  002BB6  0AA2               	xorlw	162
  6813  002BB8  E001 D774          	bnz	l9101
  6814                           
  6815                           ; BSR set to: 0
  6816                           ;vscp_firmware.c: 758: if ( 0x55 == value ) {
  6817  002BBC  500F               	movf	vscp_writeStdReg@value,w,c
  6818  002BBE  0A55               	xorlw	85
  6819  002BC0  E104               	bnz	l9145
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;vscp_firmware.c: 759: vscp_configtimer = 0;
  6823  002BC2  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
  6824  002BC4  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;vscp_firmware.c: 760: rv = 0x55;
  6828  002BC6  0E55               	movlw	85
  6829  002BC8  D7C3               	goto	L23
  6830  002BCA                     l9145:
  6831                           
  6832                           ; BSR set to: 0
  6833                           ;vscp_firmware.c: 762: else if ( 0xaa == value ) {
  6834  002BCA  500F               	movf	vscp_writeStdReg@value,w,c
  6835  002BCC  0AAA               	xorlw	170
  6836  002BCE  E10A               	bnz	l9155
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;vscp_firmware.c: 763: if ( vscp_configtimer < 1000 ) {
  6840  002BD0  0EE8               	movlw	232
  6841  002BD2  5D84               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  6842  002BD4  0E03               	movlw	3
  6843  002BD6  5985               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  6844  002BD8  E204               	bc	l1178
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;vscp_firmware.c: 764: vscp_restoreDefaults();
  6848  002BDA  ECB1  F01F         	call	_vscp_restoreDefaults	;wreg free
  6849                           
  6850                           ;vscp_firmware.c: 765: rv = 0xaa;
  6851  002BDE  0EAA               	movlw	170
  6852  002BE0  D7B7               	goto	L23
  6853  002BE2                     l1178:
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;vscp_firmware.c: 767: else {
  6857                           ;vscp_firmware.c: 768: rv = 0;
  6858  002BE2  6A1F               	clrf	vscp_writeStdReg@rv,c
  6859  002BE4                     l9155:
  6860                           
  6861                           ;vscp_firmware.c: 776: }
  6862                           ;vscp_firmware.c: 778: return rv;
  6863  002BE4  501F               	movf	vscp_writeStdReg@rv,w,c
  6864  002BE6  0012               	return	
  6865  002BE8                     __end_of_vscp_writeStdReg:
  6866                           	opt stack 0
  6867                           tblptru	equ	0xFF8
  6868                           prodh	equ	0xFF4
  6869                           prodl	equ	0xFF3
  6870                           postinc0	equ	0xFEE
  6871                           wreg	equ	0xFE8
  6872                           indf2	equ	0xFDF
  6873                           postinc2	equ	0xFDE
  6874                           postdec2	equ	0xFDD
  6875                           fsr2h	equ	0xFDA
  6876                           fsr2l	equ	0xFD9
  6877                           status	equ	0xFD8
  6878                           
  6879 ;; *************** function _vscp_restoreDefaults *****************
  6880 ;; Defined at:
  6881 ;;		line 2471 in file "../main.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;		None
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;		None
  6886 ;; Return value:  Size  Location     Type
  6887 ;;		None               void
  6888 ;; Registers used:
  6889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6890 ;; Tracked objects:
  6891 ;;		On entry : F/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6895 ;;      Params:         0       0       0       0       0       0       0
  6896 ;;      Locals:         0       0       0       0       0       0       0
  6897 ;;      Temps:          0       0       0       0       0       0       0
  6898 ;;      Totals:         0       0       0       0       0       0       0
  6899 ;;Total ram usage:        0 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    4
  6902 ;; This function calls:
  6903 ;;		_init_app_eeprom
  6904 ;;		_init_app_ram
  6905 ;; This function is called by:
  6906 ;;		_vscp_writeStdReg
  6907 ;; This function uses a non-reentrant model
  6908 ;;
  6909                           
  6910                           	psect	text19
  6911  003F62                     __ptext19:
  6912                           	opt stack 0
  6913  003F62                     _vscp_restoreDefaults:
  6914                           	opt stack 24
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;main.c: 2472: init_app_eeprom();
  6918                           
  6919                           ;incstack = 0
  6920                           ;incstack = 0
  6921  003F62  EC2C  F00D         	call	_init_app_eeprom	;wreg free
  6922                           
  6923                           ;main.c: 2473: init_app_ram();
  6924  003F66  EF93  F018         	goto	_init_app_ram	;wreg free
  6925  003F6A                     __end_of_vscp_restoreDefaults:
  6926                           	opt stack 0
  6927                           tblptru	equ	0xFF8
  6928                           prodh	equ	0xFF4
  6929                           prodl	equ	0xFF3
  6930                           postinc0	equ	0xFEE
  6931                           wreg	equ	0xFE8
  6932                           indf2	equ	0xFDF
  6933                           postinc2	equ	0xFDE
  6934                           postdec2	equ	0xFDD
  6935                           fsr2h	equ	0xFDA
  6936                           fsr2l	equ	0xFD9
  6937                           status	equ	0xFD8
  6938                           
  6939 ;; *************** function _init_app_eeprom *****************
  6940 ;; Defined at:
  6941 ;;		line 480 in file "../main.c"
  6942 ;; Parameters:    Size  Location     Type
  6943 ;;		None
  6944 ;; Auto vars:     Size  Location     Type
  6945 ;;  j               1   13[COMRAM] unsigned char 
  6946 ;;  i               1   12[COMRAM] unsigned char 
  6947 ;; Return value:  Size  Location     Type
  6948 ;;		None               void
  6949 ;; Registers used:
  6950 ;;		wreg, status,2, status,0, cstack
  6951 ;; Tracked objects:
  6952 ;;		On entry : 0/0
  6953 ;;		On exit  : 0/0
  6954 ;;		Unchanged: 0/0
  6955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6956 ;;      Params:         0       0       0       0       0       0       0
  6957 ;;      Locals:         2       0       0       0       0       0       0
  6958 ;;      Temps:          2       0       0       0       0       0       0
  6959 ;;      Totals:         4       0       0       0       0       0       0
  6960 ;;Total ram usage:        4 bytes
  6961 ;; Hardware stack levels used:    1
  6962 ;; Hardware stack levels required when called:    3
  6963 ;; This function calls:
  6964 ;;		_writeEEPROM
  6965 ;; This function is called by:
  6966 ;;		_main
  6967 ;;		_vscp_restoreDefaults
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           	psect	text20
  6972  001A58                     __ptext20:
  6973                           	opt stack 0
  6974  001A58                     _init_app_eeprom:
  6975                           	opt stack 24
  6976                           
  6977                           ;main.c: 481: unsigned char i, j;
  6978                           ;main.c: 483: writeEEPROM( 0x43 + 0, 0 );
  6979                           
  6980                           ;incstack = 0
  6981                           ;incstack = 0
  6982  001A58  6A09               	clrf	?_writeEEPROM+1,c
  6983  001A5A  0E43               	movlw	67
  6984  001A5C  6E08               	movwf	?_writeEEPROM,c
  6985  001A5E  0E00               	movlw	0
  6986  001A60  6A0A               	clrf	?_writeEEPROM+2,c
  6987  001A62  EC59  F01E         	call	_writeEEPROM	;wreg free
  6988                           
  6989                           ;main.c: 484: writeEEPROM( 0x43 + 1, 0 );
  6990  001A66  6A09               	clrf	?_writeEEPROM+1,c
  6991  001A68  0E44               	movlw	68
  6992  001A6A  6E08               	movwf	?_writeEEPROM,c
  6993  001A6C  0E00               	movlw	0
  6994  001A6E  6A0A               	clrf	?_writeEEPROM+2,c
  6995  001A70  EC59  F01E         	call	_writeEEPROM	;wreg free
  6996                           
  6997                           ;main.c: 486: writeEEPROM( 0x43 + 10,
  6998                           ;main.c: 487: 0x08 |
  6999                           ;main.c: 488: 0x10 |
  7000                           ;main.c: 489: 0x80 );
  7001  001A74  6A09               	clrf	?_writeEEPROM+1,c
  7002  001A76  0E4D               	movlw	77
  7003  001A78  6E08               	movwf	?_writeEEPROM,c
  7004  001A7A  0E98               	movlw	152
  7005  001A7C  6E0A               	movwf	?_writeEEPROM+2,c
  7006  001A7E  EC59  F01E         	call	_writeEEPROM	;wreg free
  7007                           
  7008                           ;main.c: 491: writeEEPROM( 0x43 + 11,
  7009                           ;main.c: 492: 0x08 |
  7010                           ;main.c: 493: 0x10 |
  7011                           ;main.c: 494: 0x80 );
  7012  001A82  6A09               	clrf	?_writeEEPROM+1,c
  7013  001A84  0E4E               	movlw	78
  7014  001A86  6E08               	movwf	?_writeEEPROM,c
  7015  001A88  0E98               	movlw	152
  7016  001A8A  6E0A               	movwf	?_writeEEPROM+2,c
  7017  001A8C  EC59  F01E         	call	_writeEEPROM	;wreg free
  7018                           
  7019                           ;main.c: 496: writeEEPROM( 0x43 + 12,
  7020                           ;main.c: 497: 0x08 |
  7021                           ;main.c: 498: 0x10 |
  7022                           ;main.c: 499: 0x80 );
  7023  001A90  6A09               	clrf	?_writeEEPROM+1,c
  7024  001A92  0E4F               	movlw	79
  7025  001A94  6E08               	movwf	?_writeEEPROM,c
  7026  001A96  0E98               	movlw	152
  7027  001A98  6E0A               	movwf	?_writeEEPROM+2,c
  7028  001A9A  EC59  F01E         	call	_writeEEPROM	;wreg free
  7029                           
  7030                           ;main.c: 501: writeEEPROM( 0x43 + 13,
  7031                           ;main.c: 502: 0x08 |
  7032                           ;main.c: 503: 0x10 |
  7033                           ;main.c: 504: 0x80 );
  7034  001A9E  6A09               	clrf	?_writeEEPROM+1,c
  7035  001AA0  0E50               	movlw	80
  7036  001AA2  6E08               	movwf	?_writeEEPROM,c
  7037  001AA4  0E98               	movlw	152
  7038  001AA6  6E0A               	movwf	?_writeEEPROM+2,c
  7039  001AA8  EC59  F01E         	call	_writeEEPROM	;wreg free
  7040                           
  7041                           ;main.c: 506: writeEEPROM( 0x43 + 14,
  7042                           ;main.c: 507: 0x08 |
  7043                           ;main.c: 508: 0x10 |
  7044                           ;main.c: 509: 0x80 );
  7045  001AAC  6A09               	clrf	?_writeEEPROM+1,c
  7046  001AAE  0E51               	movlw	81
  7047  001AB0  6E08               	movwf	?_writeEEPROM,c
  7048  001AB2  0E98               	movlw	152
  7049  001AB4  6E0A               	movwf	?_writeEEPROM+2,c
  7050  001AB6  EC59  F01E         	call	_writeEEPROM	;wreg free
  7051                           
  7052                           ;main.c: 511: writeEEPROM( 0x43 + 15,
  7053                           ;main.c: 512: 0x08 |
  7054                           ;main.c: 513: 0x10 |
  7055                           ;main.c: 514: 0x80 );
  7056  001ABA  6A09               	clrf	?_writeEEPROM+1,c
  7057  001ABC  0E52               	movlw	82
  7058  001ABE  6E08               	movwf	?_writeEEPROM,c
  7059  001AC0  0E98               	movlw	152
  7060  001AC2  6E0A               	movwf	?_writeEEPROM+2,c
  7061  001AC4  EC59  F01E         	call	_writeEEPROM	;wreg free
  7062                           
  7063                           ;main.c: 516: writeEEPROM( 0x43 + 16,
  7064                           ;main.c: 517: 0x08 |
  7065                           ;main.c: 518: 0x10 |
  7066                           ;main.c: 519: 0x80 );
  7067  001AC8  6A09               	clrf	?_writeEEPROM+1,c
  7068  001ACA  0E53               	movlw	83
  7069  001ACC  6E08               	movwf	?_writeEEPROM,c
  7070  001ACE  0E98               	movlw	152
  7071  001AD0  6E0A               	movwf	?_writeEEPROM+2,c
  7072  001AD2  EC59  F01E         	call	_writeEEPROM	;wreg free
  7073                           
  7074                           ;main.c: 521: writeEEPROM( 0x43 + 17,
  7075                           ;main.c: 522: 0x08 |
  7076                           ;main.c: 523: 0x10 |
  7077                           ;main.c: 524: 0x80 );
  7078  001AD6  6A09               	clrf	?_writeEEPROM+1,c
  7079  001AD8  0E54               	movlw	84
  7080  001ADA  6E08               	movwf	?_writeEEPROM,c
  7081  001ADC  0E98               	movlw	152
  7082  001ADE  6E0A               	movwf	?_writeEEPROM+2,c
  7083  001AE0  EC59  F01E         	call	_writeEEPROM	;wreg free
  7084                           
  7085                           ;main.c: 526: writeEEPROM( 0x43 + 18, 0 );
  7086  001AE4  6A09               	clrf	?_writeEEPROM+1,c
  7087  001AE6  0E55               	movlw	85
  7088  001AE8  6E08               	movwf	?_writeEEPROM,c
  7089  001AEA  0E00               	movlw	0
  7090  001AEC  6A0A               	clrf	?_writeEEPROM+2,c
  7091  001AEE  EC59  F01E         	call	_writeEEPROM	;wreg free
  7092                           
  7093                           ;main.c: 527: writeEEPROM( 0x43 + 19, 0 );
  7094  001AF2  6A09               	clrf	?_writeEEPROM+1,c
  7095  001AF4  0E56               	movlw	86
  7096  001AF6  6E08               	movwf	?_writeEEPROM,c
  7097  001AF8  0E00               	movlw	0
  7098  001AFA  6A0A               	clrf	?_writeEEPROM+2,c
  7099  001AFC  EC59  F01E         	call	_writeEEPROM	;wreg free
  7100                           
  7101                           ;main.c: 528: writeEEPROM( 0x43 + 20, 0 );
  7102  001B00  6A09               	clrf	?_writeEEPROM+1,c
  7103  001B02  0E57               	movlw	87
  7104  001B04  6E08               	movwf	?_writeEEPROM,c
  7105  001B06  0E00               	movlw	0
  7106  001B08  6A0A               	clrf	?_writeEEPROM+2,c
  7107  001B0A  EC59  F01E         	call	_writeEEPROM	;wreg free
  7108                           
  7109                           ;main.c: 529: writeEEPROM( 0x43 + 21, 0 );
  7110  001B0E  6A09               	clrf	?_writeEEPROM+1,c
  7111  001B10  0E58               	movlw	88
  7112  001B12  6E08               	movwf	?_writeEEPROM,c
  7113  001B14  0E00               	movlw	0
  7114  001B16  6A0A               	clrf	?_writeEEPROM+2,c
  7115  001B18  EC59  F01E         	call	_writeEEPROM	;wreg free
  7116                           
  7117                           ;main.c: 530: writeEEPROM( 0x43 + 22, 0 );
  7118  001B1C  6A09               	clrf	?_writeEEPROM+1,c
  7119  001B1E  0E59               	movlw	89
  7120  001B20  6E08               	movwf	?_writeEEPROM,c
  7121  001B22  0E00               	movlw	0
  7122  001B24  6A0A               	clrf	?_writeEEPROM+2,c
  7123  001B26  EC59  F01E         	call	_writeEEPROM	;wreg free
  7124                           
  7125                           ;main.c: 531: writeEEPROM( 0x43 + 23, 0 );
  7126  001B2A  6A09               	clrf	?_writeEEPROM+1,c
  7127  001B2C  0E5A               	movlw	90
  7128  001B2E  6E08               	movwf	?_writeEEPROM,c
  7129  001B30  0E00               	movlw	0
  7130  001B32  6A0A               	clrf	?_writeEEPROM+2,c
  7131  001B34  EC59  F01E         	call	_writeEEPROM	;wreg free
  7132                           
  7133                           ;main.c: 532: writeEEPROM( 0x43 + 24, 0 );
  7134  001B38  6A09               	clrf	?_writeEEPROM+1,c
  7135  001B3A  0E5B               	movlw	91
  7136  001B3C  6E08               	movwf	?_writeEEPROM,c
  7137  001B3E  0E00               	movlw	0
  7138  001B40  6A0A               	clrf	?_writeEEPROM+2,c
  7139  001B42  EC59  F01E         	call	_writeEEPROM	;wreg free
  7140                           
  7141                           ;main.c: 533: writeEEPROM( 0x43 + 25, 0 );
  7142  001B46  6A09               	clrf	?_writeEEPROM+1,c
  7143  001B48  0E5C               	movlw	92
  7144  001B4A  6E08               	movwf	?_writeEEPROM,c
  7145  001B4C  0E00               	movlw	0
  7146  001B4E  6A0A               	clrf	?_writeEEPROM+2,c
  7147  001B50  EC59  F01E         	call	_writeEEPROM	;wreg free
  7148                           
  7149                           ;main.c: 534: writeEEPROM( 0x43 + 26, 0 );
  7150  001B54  6A09               	clrf	?_writeEEPROM+1,c
  7151  001B56  0E5D               	movlw	93
  7152  001B58  6E08               	movwf	?_writeEEPROM,c
  7153  001B5A  0E00               	movlw	0
  7154  001B5C  6A0A               	clrf	?_writeEEPROM+2,c
  7155  001B5E  EC59  F01E         	call	_writeEEPROM	;wreg free
  7156                           
  7157                           ;main.c: 535: writeEEPROM( 0x43 + 27, 0 );
  7158  001B62  6A09               	clrf	?_writeEEPROM+1,c
  7159  001B64  0E5E               	movlw	94
  7160  001B66  6E08               	movwf	?_writeEEPROM,c
  7161  001B68  0E00               	movlw	0
  7162  001B6A  6A0A               	clrf	?_writeEEPROM+2,c
  7163  001B6C  EC59  F01E         	call	_writeEEPROM	;wreg free
  7164                           
  7165                           ;main.c: 536: writeEEPROM( 0x43 + 28, 0 );
  7166  001B70  6A09               	clrf	?_writeEEPROM+1,c
  7167  001B72  0E5F               	movlw	95
  7168  001B74  6E08               	movwf	?_writeEEPROM,c
  7169  001B76  0E00               	movlw	0
  7170  001B78  6A0A               	clrf	?_writeEEPROM+2,c
  7171  001B7A  EC59  F01E         	call	_writeEEPROM	;wreg free
  7172                           
  7173                           ;main.c: 537: writeEEPROM( 0x43 + 29, 0 );
  7174  001B7E  6A09               	clrf	?_writeEEPROM+1,c
  7175  001B80  0E60               	movlw	96
  7176  001B82  6E08               	movwf	?_writeEEPROM,c
  7177  001B84  0E00               	movlw	0
  7178  001B86  6A0A               	clrf	?_writeEEPROM+2,c
  7179  001B88  EC59  F01E         	call	_writeEEPROM	;wreg free
  7180                           
  7181                           ;main.c: 538: writeEEPROM( 0x43 + 30, 0 );
  7182  001B8C  6A09               	clrf	?_writeEEPROM+1,c
  7183  001B8E  0E61               	movlw	97
  7184  001B90  6E08               	movwf	?_writeEEPROM,c
  7185  001B92  0E00               	movlw	0
  7186  001B94  6A0A               	clrf	?_writeEEPROM+2,c
  7187  001B96  EC59  F01E         	call	_writeEEPROM	;wreg free
  7188                           
  7189                           ;main.c: 539: writeEEPROM( 0x43 + 31, 0 );
  7190  001B9A  6A09               	clrf	?_writeEEPROM+1,c
  7191  001B9C  0E62               	movlw	98
  7192  001B9E  6E08               	movwf	?_writeEEPROM,c
  7193  001BA0  0E00               	movlw	0
  7194  001BA2  6A0A               	clrf	?_writeEEPROM+2,c
  7195  001BA4  EC59  F01E         	call	_writeEEPROM	;wreg free
  7196                           
  7197                           ;main.c: 540: writeEEPROM( 0x43 + 32, 0 );
  7198  001BA8  6A09               	clrf	?_writeEEPROM+1,c
  7199  001BAA  0E63               	movlw	99
  7200  001BAC  6E08               	movwf	?_writeEEPROM,c
  7201  001BAE  0E00               	movlw	0
  7202  001BB0  6A0A               	clrf	?_writeEEPROM+2,c
  7203  001BB2  EC59  F01E         	call	_writeEEPROM	;wreg free
  7204                           
  7205                           ;main.c: 541: writeEEPROM( 0x43 + 33, 0 );
  7206  001BB6  6A09               	clrf	?_writeEEPROM+1,c
  7207  001BB8  0E64               	movlw	100
  7208  001BBA  6E08               	movwf	?_writeEEPROM,c
  7209  001BBC  0E00               	movlw	0
  7210  001BBE  6A0A               	clrf	?_writeEEPROM+2,c
  7211  001BC0  EC59  F01E         	call	_writeEEPROM	;wreg free
  7212                           
  7213                           ;main.c: 543: writeEEPROM( 0x43 + 34, 0 );
  7214  001BC4  6A09               	clrf	?_writeEEPROM+1,c
  7215  001BC6  0E65               	movlw	101
  7216  001BC8  6E08               	movwf	?_writeEEPROM,c
  7217  001BCA  0E00               	movlw	0
  7218  001BCC  6A0A               	clrf	?_writeEEPROM+2,c
  7219  001BCE  EC59  F01E         	call	_writeEEPROM	;wreg free
  7220                           
  7221                           ;main.c: 544: writeEEPROM( 0x43 + 35, 0 );
  7222  001BD2  6A09               	clrf	?_writeEEPROM+1,c
  7223  001BD4  0E66               	movlw	102
  7224  001BD6  6E08               	movwf	?_writeEEPROM,c
  7225  001BD8  0E00               	movlw	0
  7226  001BDA  6A0A               	clrf	?_writeEEPROM+2,c
  7227  001BDC  EC59  F01E         	call	_writeEEPROM	;wreg free
  7228                           
  7229                           ;main.c: 545: writeEEPROM( 0x43 + 36, 0 );
  7230  001BE0  6A09               	clrf	?_writeEEPROM+1,c
  7231  001BE2  0E67               	movlw	103
  7232  001BE4  6E08               	movwf	?_writeEEPROM,c
  7233  001BE6  0E00               	movlw	0
  7234  001BE8  6A0A               	clrf	?_writeEEPROM+2,c
  7235  001BEA  EC59  F01E         	call	_writeEEPROM	;wreg free
  7236                           
  7237                           ;main.c: 546: writeEEPROM( 0x43 + 37, 0 );
  7238  001BEE  6A09               	clrf	?_writeEEPROM+1,c
  7239  001BF0  0E68               	movlw	104
  7240  001BF2  6E08               	movwf	?_writeEEPROM,c
  7241  001BF4  0E00               	movlw	0
  7242  001BF6  6A0A               	clrf	?_writeEEPROM+2,c
  7243  001BF8  EC59  F01E         	call	_writeEEPROM	;wreg free
  7244                           
  7245                           ;main.c: 547: writeEEPROM( 0x43 + 38, 0 );
  7246  001BFC  6A09               	clrf	?_writeEEPROM+1,c
  7247  001BFE  0E69               	movlw	105
  7248  001C00  6E08               	movwf	?_writeEEPROM,c
  7249  001C02  0E00               	movlw	0
  7250  001C04  6A0A               	clrf	?_writeEEPROM+2,c
  7251  001C06  EC59  F01E         	call	_writeEEPROM	;wreg free
  7252                           
  7253                           ;main.c: 548: writeEEPROM( 0x43 + 39, 0 );
  7254  001C0A  6A09               	clrf	?_writeEEPROM+1,c
  7255  001C0C  0E6A               	movlw	106
  7256  001C0E  6E08               	movwf	?_writeEEPROM,c
  7257  001C10  0E00               	movlw	0
  7258  001C12  6A0A               	clrf	?_writeEEPROM+2,c
  7259  001C14  EC59  F01E         	call	_writeEEPROM	;wreg free
  7260                           
  7261                           ;main.c: 549: writeEEPROM( 0x43 + 40, 0 );
  7262  001C18  6A09               	clrf	?_writeEEPROM+1,c
  7263  001C1A  0E6B               	movlw	107
  7264  001C1C  6E08               	movwf	?_writeEEPROM,c
  7265  001C1E  0E00               	movlw	0
  7266  001C20  6A0A               	clrf	?_writeEEPROM+2,c
  7267  001C22  EC59  F01E         	call	_writeEEPROM	;wreg free
  7268                           
  7269                           ;main.c: 550: writeEEPROM( 0x43 + 41, 0 );
  7270  001C26  6A09               	clrf	?_writeEEPROM+1,c
  7271  001C28  0E6C               	movlw	108
  7272  001C2A  6E08               	movwf	?_writeEEPROM,c
  7273  001C2C  0E00               	movlw	0
  7274  001C2E  6A0A               	clrf	?_writeEEPROM+2,c
  7275  001C30  EC59  F01E         	call	_writeEEPROM	;wreg free
  7276                           
  7277                           ;main.c: 551: writeEEPROM( 0x43 + 42, 0 );
  7278  001C34  6A09               	clrf	?_writeEEPROM+1,c
  7279  001C36  0E6D               	movlw	109
  7280  001C38  6E08               	movwf	?_writeEEPROM,c
  7281  001C3A  0E00               	movlw	0
  7282  001C3C  6A0A               	clrf	?_writeEEPROM+2,c
  7283  001C3E  EC59  F01E         	call	_writeEEPROM	;wreg free
  7284                           
  7285                           ;main.c: 552: writeEEPROM( 0x43 + 43, 0 );
  7286  001C42  6A09               	clrf	?_writeEEPROM+1,c
  7287  001C44  0E6E               	movlw	110
  7288  001C46  6E08               	movwf	?_writeEEPROM,c
  7289  001C48  0E00               	movlw	0
  7290  001C4A  6A0A               	clrf	?_writeEEPROM+2,c
  7291  001C4C  EC59  F01E         	call	_writeEEPROM	;wreg free
  7292                           
  7293                           ;main.c: 553: writeEEPROM( 0x43 + 44, 0 );
  7294  001C50  6A09               	clrf	?_writeEEPROM+1,c
  7295  001C52  0E6F               	movlw	111
  7296  001C54  6E08               	movwf	?_writeEEPROM,c
  7297  001C56  0E00               	movlw	0
  7298  001C58  6A0A               	clrf	?_writeEEPROM+2,c
  7299  001C5A  EC59  F01E         	call	_writeEEPROM	;wreg free
  7300                           
  7301                           ;main.c: 554: writeEEPROM( 0x43 + 45, 0 );
  7302  001C5E  6A09               	clrf	?_writeEEPROM+1,c
  7303  001C60  0E70               	movlw	112
  7304  001C62  6E08               	movwf	?_writeEEPROM,c
  7305  001C64  0E00               	movlw	0
  7306  001C66  6A0A               	clrf	?_writeEEPROM+2,c
  7307  001C68  EC59  F01E         	call	_writeEEPROM	;wreg free
  7308                           
  7309                           ;main.c: 555: writeEEPROM( 0x43 + 46, 0 );
  7310  001C6C  6A09               	clrf	?_writeEEPROM+1,c
  7311  001C6E  0E71               	movlw	113
  7312  001C70  6E08               	movwf	?_writeEEPROM,c
  7313  001C72  0E00               	movlw	0
  7314  001C74  6A0A               	clrf	?_writeEEPROM+2,c
  7315  001C76  EC59  F01E         	call	_writeEEPROM	;wreg free
  7316                           
  7317                           ;main.c: 556: writeEEPROM( 0x43 + 47, 0 );
  7318  001C7A  6A09               	clrf	?_writeEEPROM+1,c
  7319  001C7C  0E72               	movlw	114
  7320  001C7E  6E08               	movwf	?_writeEEPROM,c
  7321  001C80  0E00               	movlw	0
  7322  001C82  6A0A               	clrf	?_writeEEPROM+2,c
  7323  001C84  EC59  F01E         	call	_writeEEPROM	;wreg free
  7324                           
  7325                           ;main.c: 557: writeEEPROM( 0x43 + 48, 0 );
  7326  001C88  6A09               	clrf	?_writeEEPROM+1,c
  7327  001C8A  0E73               	movlw	115
  7328  001C8C  6E08               	movwf	?_writeEEPROM,c
  7329  001C8E  0E00               	movlw	0
  7330  001C90  6A0A               	clrf	?_writeEEPROM+2,c
  7331  001C92  EC59  F01E         	call	_writeEEPROM	;wreg free
  7332                           
  7333                           ;main.c: 558: writeEEPROM( 0x43 + 49, 0 );
  7334  001C96  6A09               	clrf	?_writeEEPROM+1,c
  7335  001C98  0E74               	movlw	116
  7336  001C9A  6E08               	movwf	?_writeEEPROM,c
  7337  001C9C  0E00               	movlw	0
  7338  001C9E  6A0A               	clrf	?_writeEEPROM+2,c
  7339  001CA0  EC59  F01E         	call	_writeEEPROM	;wreg free
  7340                           
  7341                           ;main.c: 560: writeEEPROM( 0x43 + 50, 0 );
  7342  001CA4  6A09               	clrf	?_writeEEPROM+1,c
  7343  001CA6  0E75               	movlw	117
  7344  001CA8  6E08               	movwf	?_writeEEPROM,c
  7345  001CAA  0E00               	movlw	0
  7346  001CAC  6A0A               	clrf	?_writeEEPROM+2,c
  7347  001CAE  EC59  F01E         	call	_writeEEPROM	;wreg free
  7348                           
  7349                           ;main.c: 561: writeEEPROM( 0x43 + 51, 0 );
  7350  001CB2  6A09               	clrf	?_writeEEPROM+1,c
  7351  001CB4  0E76               	movlw	118
  7352  001CB6  6E08               	movwf	?_writeEEPROM,c
  7353  001CB8  0E00               	movlw	0
  7354  001CBA  6A0A               	clrf	?_writeEEPROM+2,c
  7355  001CBC  EC59  F01E         	call	_writeEEPROM	;wreg free
  7356                           
  7357                           ;main.c: 562: writeEEPROM( 0x43 + 52, 0 );
  7358  001CC0  6A09               	clrf	?_writeEEPROM+1,c
  7359  001CC2  0E77               	movlw	119
  7360  001CC4  6E08               	movwf	?_writeEEPROM,c
  7361  001CC6  0E00               	movlw	0
  7362  001CC8  6A0A               	clrf	?_writeEEPROM+2,c
  7363  001CCA  EC59  F01E         	call	_writeEEPROM	;wreg free
  7364                           
  7365                           ;main.c: 563: writeEEPROM( 0x43 + 53, 0 );
  7366  001CCE  6A09               	clrf	?_writeEEPROM+1,c
  7367  001CD0  0E78               	movlw	120
  7368  001CD2  6E08               	movwf	?_writeEEPROM,c
  7369  001CD4  0E00               	movlw	0
  7370  001CD6  6A0A               	clrf	?_writeEEPROM+2,c
  7371  001CD8  EC59  F01E         	call	_writeEEPROM	;wreg free
  7372                           
  7373                           ;main.c: 564: writeEEPROM( 0x43 + 54, 0 );
  7374  001CDC  6A09               	clrf	?_writeEEPROM+1,c
  7375  001CDE  0E79               	movlw	121
  7376  001CE0  6E08               	movwf	?_writeEEPROM,c
  7377  001CE2  0E00               	movlw	0
  7378  001CE4  6A0A               	clrf	?_writeEEPROM+2,c
  7379  001CE6  EC59  F01E         	call	_writeEEPROM	;wreg free
  7380                           
  7381                           ;main.c: 565: writeEEPROM( 0x43 + 55, 0 );
  7382  001CEA  6A09               	clrf	?_writeEEPROM+1,c
  7383  001CEC  0E7A               	movlw	122
  7384  001CEE  6E08               	movwf	?_writeEEPROM,c
  7385  001CF0  0E00               	movlw	0
  7386  001CF2  6A0A               	clrf	?_writeEEPROM+2,c
  7387  001CF4  EC59  F01E         	call	_writeEEPROM	;wreg free
  7388                           
  7389                           ;main.c: 566: writeEEPROM( 0x43 + 56, 0 );
  7390  001CF8  6A09               	clrf	?_writeEEPROM+1,c
  7391  001CFA  0E7B               	movlw	123
  7392  001CFC  6E08               	movwf	?_writeEEPROM,c
  7393  001CFE  0E00               	movlw	0
  7394  001D00  6A0A               	clrf	?_writeEEPROM+2,c
  7395  001D02  EC59  F01E         	call	_writeEEPROM	;wreg free
  7396                           
  7397                           ;main.c: 567: writeEEPROM( 0x43 + 57, 0 );
  7398  001D06  6A09               	clrf	?_writeEEPROM+1,c
  7399  001D08  0E7C               	movlw	124
  7400  001D0A  6E08               	movwf	?_writeEEPROM,c
  7401  001D0C  0E00               	movlw	0
  7402  001D0E  6A0A               	clrf	?_writeEEPROM+2,c
  7403  001D10  EC59  F01E         	call	_writeEEPROM	;wreg free
  7404                           
  7405                           ;main.c: 568: writeEEPROM( 0x43 + 58, 0 );
  7406  001D14  6A09               	clrf	?_writeEEPROM+1,c
  7407  001D16  0E7D               	movlw	125
  7408  001D18  6E08               	movwf	?_writeEEPROM,c
  7409  001D1A  0E00               	movlw	0
  7410  001D1C  6A0A               	clrf	?_writeEEPROM+2,c
  7411  001D1E  EC59  F01E         	call	_writeEEPROM	;wreg free
  7412                           
  7413                           ;main.c: 569: writeEEPROM( 0x43 + 59, 0 );
  7414  001D22  6A09               	clrf	?_writeEEPROM+1,c
  7415  001D24  0E7E               	movlw	126
  7416  001D26  6E08               	movwf	?_writeEEPROM,c
  7417  001D28  0E00               	movlw	0
  7418  001D2A  6A0A               	clrf	?_writeEEPROM+2,c
  7419  001D2C  EC59  F01E         	call	_writeEEPROM	;wreg free
  7420                           
  7421                           ;main.c: 570: writeEEPROM( 0x43 + 60, 0 );
  7422  001D30  6A09               	clrf	?_writeEEPROM+1,c
  7423  001D32  0E7F               	movlw	127
  7424  001D34  6E08               	movwf	?_writeEEPROM,c
  7425  001D36  0E00               	movlw	0
  7426  001D38  6A0A               	clrf	?_writeEEPROM+2,c
  7427  001D3A  EC59  F01E         	call	_writeEEPROM	;wreg free
  7428                           
  7429                           ;main.c: 571: writeEEPROM( 0x43 + 61, 0 );
  7430  001D3E  6A09               	clrf	?_writeEEPROM+1,c
  7431  001D40  0E80               	movlw	128
  7432  001D42  6E08               	movwf	?_writeEEPROM,c
  7433  001D44  0E00               	movlw	0
  7434  001D46  6A0A               	clrf	?_writeEEPROM+2,c
  7435  001D48  EC59  F01E         	call	_writeEEPROM	;wreg free
  7436                           
  7437                           ;main.c: 572: writeEEPROM( 0x43 + 62, 0 );
  7438  001D4C  6A09               	clrf	?_writeEEPROM+1,c
  7439  001D4E  0E81               	movlw	129
  7440  001D50  6E08               	movwf	?_writeEEPROM,c
  7441  001D52  0E00               	movlw	0
  7442  001D54  6A0A               	clrf	?_writeEEPROM+2,c
  7443  001D56  EC59  F01E         	call	_writeEEPROM	;wreg free
  7444                           
  7445                           ;main.c: 573: writeEEPROM( 0x43 + 63, 0 );
  7446  001D5A  6A09               	clrf	?_writeEEPROM+1,c
  7447  001D5C  0E82               	movlw	130
  7448  001D5E  6E08               	movwf	?_writeEEPROM,c
  7449  001D60  0E00               	movlw	0
  7450  001D62  6A0A               	clrf	?_writeEEPROM+2,c
  7451  001D64  EC59  F01E         	call	_writeEEPROM	;wreg free
  7452                           
  7453                           ;main.c: 574: writeEEPROM( 0x43 + 64, 0 );
  7454  001D68  6A09               	clrf	?_writeEEPROM+1,c
  7455  001D6A  0E83               	movlw	131
  7456  001D6C  6E08               	movwf	?_writeEEPROM,c
  7457  001D6E  0E00               	movlw	0
  7458  001D70  6A0A               	clrf	?_writeEEPROM+2,c
  7459  001D72  EC59  F01E         	call	_writeEEPROM	;wreg free
  7460                           
  7461                           ;main.c: 575: writeEEPROM( 0x43 + 65, 0 );
  7462  001D76  6A09               	clrf	?_writeEEPROM+1,c
  7463  001D78  0E84               	movlw	132
  7464  001D7A  6E08               	movwf	?_writeEEPROM,c
  7465  001D7C  0E00               	movlw	0
  7466  001D7E  6A0A               	clrf	?_writeEEPROM+2,c
  7467  001D80  EC59  F01E         	call	_writeEEPROM	;wreg free
  7468                           
  7469                           ;main.c: 579: for ( i = 0; i < 7; i++ ) {
  7470  001D84  6A0D               	clrf	init_app_eeprom@i,c
  7471  001D86                     l185:
  7472                           
  7473                           ;main.c: 580: for ( j = 0; j < 8; j++ ) {
  7474  001D86  6A0E               	clrf	init_app_eeprom@j,c
  7475  001D88                     l4685:
  7476                           
  7477                           ;main.c: 581: writeEEPROM( 0x43 + 72 + i * 8 + j, 0 );
  7478  001D88  500E               	movf	init_app_eeprom@j,w,c
  7479  001D8A  C00D  F00B         	movff	init_app_eeprom@i,??_init_app_eeprom
  7480  001D8E  6A0C               	clrf	(??_init_app_eeprom+1)& (0+255),c
  7481  001D90  90D8               	bcf	status,0,c
  7482  001D92  360B               	rlcf	??_init_app_eeprom,f,c
  7483  001D94  360C               	rlcf	??_init_app_eeprom+1,f,c
  7484  001D96  90D8               	bcf	status,0,c
  7485  001D98  360B               	rlcf	??_init_app_eeprom,f,c
  7486  001D9A  360C               	rlcf	??_init_app_eeprom+1,f,c
  7487  001D9C  90D8               	bcf	status,0,c
  7488  001D9E  360B               	rlcf	??_init_app_eeprom,f,c
  7489  001DA0  360C               	rlcf	??_init_app_eeprom+1,f,c
  7490  001DA2  260B               	addwf	??_init_app_eeprom,f,c
  7491  001DA4  0E00               	movlw	0
  7492  001DA6  220C               	addwfc	??_init_app_eeprom+1,f,c
  7493  001DA8  0E8B               	movlw	139
  7494  001DAA  240B               	addwf	??_init_app_eeprom,w,c
  7495  001DAC  6E08               	movwf	?_writeEEPROM,c
  7496  001DAE  0E00               	movlw	0
  7497  001DB0  200C               	addwfc	??_init_app_eeprom+1,w,c
  7498  001DB2  6E09               	movwf	?_writeEEPROM+1,c
  7499  001DB4  0E00               	movlw	0
  7500  001DB6  6A0A               	clrf	?_writeEEPROM+2,c
  7501  001DB8  EC59  F01E         	call	_writeEEPROM	;wreg free
  7502  001DBC  2A0E               	incf	init_app_eeprom@j,f,c
  7503  001DBE  0E07               	movlw	7
  7504  001DC0  640E               	cpfsgt	init_app_eeprom@j,c
  7505  001DC2  D7E2               	goto	l4685
  7506  001DC4  2A0D               	incf	init_app_eeprom@i,f,c
  7507  001DC6  0E06               	movlw	6
  7508  001DC8  640D               	cpfsgt	init_app_eeprom@i,c
  7509  001DCA  D7DD               	goto	l185
  7510  001DCC  0C06               	retlw	6
  7511  001DCE                     __end_of_init_app_eeprom:
  7512                           	opt stack 0
  7513                           tblptru	equ	0xFF8
  7514                           prodh	equ	0xFF4
  7515                           prodl	equ	0xFF3
  7516                           postinc0	equ	0xFEE
  7517                           wreg	equ	0xFE8
  7518                           indf2	equ	0xFDF
  7519                           postinc2	equ	0xFDE
  7520                           postdec2	equ	0xFDD
  7521                           fsr2h	equ	0xFDA
  7522                           fsr2l	equ	0xFD9
  7523                           status	equ	0xFD8
  7524                           
  7525 ;; *************** function _vscp_getFamilyType *****************
  7526 ;; Defined at:
  7527 ;;		line 2463 in file "../main.c"
  7528 ;; Parameters:    Size  Location     Type
  7529 ;;		None
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;		None
  7532 ;; Return value:  Size  Location     Type
  7533 ;;                  4    7[COMRAM] unsigned long 
  7534 ;; Registers used:
  7535 ;;		None
  7536 ;; Tracked objects:
  7537 ;;		On entry : F/0
  7538 ;;		On exit  : F/0
  7539 ;;		Unchanged: F/0
  7540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7541 ;;      Params:         4       0       0       0       0       0       0
  7542 ;;      Locals:         0       0       0       0       0       0       0
  7543 ;;      Temps:          0       0       0       0       0       0       0
  7544 ;;      Totals:         4       0       0       0       0       0       0
  7545 ;;Total ram usage:        4 bytes
  7546 ;; Hardware stack levels used:    1
  7547 ;; Hardware stack levels required when called:    2
  7548 ;; This function calls:
  7549 ;;		Nothing
  7550 ;; This function is called by:
  7551 ;;		_vscp_writeStdReg
  7552 ;; This function uses a non-reentrant model
  7553 ;;
  7554                           
  7555                           	psect	text21
  7556  003F3A                     __ptext21:
  7557                           	opt stack 0
  7558  003F3A                     _vscp_getFamilyType:
  7559                           	opt stack 26
  7560                           
  7561                           ; BSR set to: 0
  7562                           ;main.c: 2464: return 0;
  7563                           
  7564                           ;incstack = 0
  7565                           ;incstack = 0
  7566  003F3A  6A08               	clrf	?_vscp_getFamilyType,c
  7567  003F3C  6A09               	clrf	?_vscp_getFamilyType+1,c
  7568  003F3E  6A0A               	clrf	?_vscp_getFamilyType+2,c
  7569  003F40  6A0B               	clrf	?_vscp_getFamilyType+3,c
  7570                           
  7571                           ; BSR set to: 0
  7572  003F42  0012               	return	
  7573  003F44                     __end_of_vscp_getFamilyType:
  7574                           	opt stack 0
  7575                           tblptru	equ	0xFF8
  7576                           prodh	equ	0xFF4
  7577                           prodl	equ	0xFF3
  7578                           postinc0	equ	0xFEE
  7579                           wreg	equ	0xFE8
  7580                           indf2	equ	0xFDF
  7581                           postinc2	equ	0xFDE
  7582                           postdec2	equ	0xFDD
  7583                           fsr2h	equ	0xFDA
  7584                           fsr2l	equ	0xFD9
  7585                           status	equ	0xFD8
  7586                           
  7587 ;; *************** function _vscp_getFamilyCode *****************
  7588 ;; Defined at:
  7589 ;;		line 2454 in file "../main.c"
  7590 ;; Parameters:    Size  Location     Type
  7591 ;;		None
  7592 ;; Auto vars:     Size  Location     Type
  7593 ;;		None
  7594 ;; Return value:  Size  Location     Type
  7595 ;;                  4    7[COMRAM] unsigned long 
  7596 ;; Registers used:
  7597 ;;		None
  7598 ;; Tracked objects:
  7599 ;;		On entry : F/0
  7600 ;;		On exit  : F/0
  7601 ;;		Unchanged: F/0
  7602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7603 ;;      Params:         4       0       0       0       0       0       0
  7604 ;;      Locals:         0       0       0       0       0       0       0
  7605 ;;      Temps:          0       0       0       0       0       0       0
  7606 ;;      Totals:         4       0       0       0       0       0       0
  7607 ;;Total ram usage:        4 bytes
  7608 ;; Hardware stack levels used:    1
  7609 ;; Hardware stack levels required when called:    2
  7610 ;; This function calls:
  7611 ;;		Nothing
  7612 ;; This function is called by:
  7613 ;;		_vscp_writeStdReg
  7614 ;; This function uses a non-reentrant model
  7615 ;;
  7616                           
  7617                           	psect	text22
  7618  003F44                     __ptext22:
  7619                           	opt stack 0
  7620  003F44                     _vscp_getFamilyCode:
  7621                           	opt stack 26
  7622                           
  7623                           ; BSR set to: 0
  7624                           ;main.c: 2455: return 0L;
  7625                           
  7626                           ; BSR set to: 0
  7627                           ;incstack = 0
  7628                           ;incstack = 0
  7629  003F44  6A08               	clrf	?_vscp_getFamilyCode,c
  7630  003F46  6A09               	clrf	?_vscp_getFamilyCode+1,c
  7631  003F48  6A0A               	clrf	?_vscp_getFamilyCode+2,c
  7632  003F4A  6A0B               	clrf	?_vscp_getFamilyCode+3,c
  7633                           
  7634                           ; BSR set to: 0
  7635  003F4C  0012               	return	
  7636  003F4E                     __end_of_vscp_getFamilyCode:
  7637                           	opt stack 0
  7638                           tblptru	equ	0xFF8
  7639                           prodh	equ	0xFF4
  7640                           prodl	equ	0xFF3
  7641                           postinc0	equ	0xFEE
  7642                           wreg	equ	0xFE8
  7643                           indf2	equ	0xFDF
  7644                           postinc2	equ	0xFDE
  7645                           postdec2	equ	0xFDD
  7646                           fsr2h	equ	0xFDA
  7647                           fsr2l	equ	0xFD9
  7648                           status	equ	0xFD8
  7649                           
  7650 ;; *************** function _vscp_setUserID *****************
  7651 ;; Defined at:
  7652 ;;		line 2286 in file "../main.c"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;  idx             1    wreg     unsigned char 
  7655 ;;  data            1   10[COMRAM] unsigned char 
  7656 ;; Auto vars:     Size  Location     Type
  7657 ;;  idx             1   11[COMRAM] unsigned char 
  7658 ;; Return value:  Size  Location     Type
  7659 ;;		None               void
  7660 ;; Registers used:
  7661 ;;		wreg, status,2, status,0, cstack
  7662 ;; Tracked objects:
  7663 ;;		On entry : F/0
  7664 ;;		On exit  : 0/0
  7665 ;;		Unchanged: 0/0
  7666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7667 ;;      Params:         1       0       0       0       0       0       0
  7668 ;;      Locals:         1       0       0       0       0       0       0
  7669 ;;      Temps:          0       0       0       0       0       0       0
  7670 ;;      Totals:         2       0       0       0       0       0       0
  7671 ;;Total ram usage:        2 bytes
  7672 ;; Hardware stack levels used:    1
  7673 ;; Hardware stack levels required when called:    3
  7674 ;; This function calls:
  7675 ;;		_writeEEPROM
  7676 ;; This function is called by:
  7677 ;;		_vscp_writeStdReg
  7678 ;; This function uses a non-reentrant model
  7679 ;;
  7680                           
  7681                           	psect	text23
  7682  003E1E                     __ptext23:
  7683                           	opt stack 0
  7684  003E1E                     _vscp_setUserID:
  7685                           	opt stack 25
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;incstack = 0
  7689                           ;incstack = 0
  7690                           ;vscp_setUserID@idx stored from wreg
  7691  003E1E  CFE8 F00C          	movff	wreg,vscp_setUserID@idx
  7692                           
  7693                           ; BSR set to: 0
  7694                           ;main.c: 2287: writeEEPROM( idx + 0x06, data );
  7695  003E22  0E06               	movlw	6
  7696  003E24  240C               	addwf	vscp_setUserID@idx,w,c
  7697  003E26  6E08               	movwf	?_writeEEPROM,c
  7698  003E28  6A09               	clrf	?_writeEEPROM+1,c
  7699  003E2A  0E00               	movlw	0
  7700  003E2C  2209               	addwfc	?_writeEEPROM+1,f,c
  7701  003E2E  C00B  F00A         	movff	vscp_setUserID@data,?_writeEEPROM+2
  7702  003E32  EF59  F01E         	goto	_writeEEPROM	;wreg free
  7703  003E36                     __end_of_vscp_setUserID:
  7704                           	opt stack 0
  7705                           tblptru	equ	0xFF8
  7706                           prodh	equ	0xFF4
  7707                           prodl	equ	0xFF3
  7708                           postinc0	equ	0xFEE
  7709                           wreg	equ	0xFE8
  7710                           indf2	equ	0xFDF
  7711                           postinc2	equ	0xFDE
  7712                           postdec2	equ	0xFDD
  7713                           fsr2h	equ	0xFDA
  7714                           fsr2l	equ	0xFD9
  7715                           status	equ	0xFD8
  7716                           
  7717 ;; *************** function _vscp_setManufacturerId *****************
  7718 ;; Defined at:
  7719 ;;		line 820 in file "../main.c"
  7720 ;; Parameters:    Size  Location     Type
  7721 ;;  idx             1    wreg     unsigned char 
  7722 ;;  data            1   10[COMRAM] unsigned char 
  7723 ;; Auto vars:     Size  Location     Type
  7724 ;;  idx             1   11[COMRAM] unsigned char 
  7725 ;; Return value:  Size  Location     Type
  7726 ;;		None               void
  7727 ;; Registers used:
  7728 ;;		wreg, status,2, status,0, cstack
  7729 ;; Tracked objects:
  7730 ;;		On entry : F/0
  7731 ;;		On exit  : 0/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7734 ;;      Params:         1       0       0       0       0       0       0
  7735 ;;      Locals:         1       0       0       0       0       0       0
  7736 ;;      Temps:          0       0       0       0       0       0       0
  7737 ;;      Totals:         2       0       0       0       0       0       0
  7738 ;;Total ram usage:        2 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; Hardware stack levels required when called:    3
  7741 ;; This function calls:
  7742 ;;		_writeEEPROM
  7743 ;; This function is called by:
  7744 ;;		_vscp_writeStdReg
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           	psect	text24
  7749  003D64                     __ptext24:
  7750                           	opt stack 0
  7751  003D64                     _vscp_setManufacturerId:
  7752                           	opt stack 25
  7753                           
  7754                           ;incstack = 0
  7755                           ;incstack = 0
  7756                           ;vscp_setManufacturerId@idx stored from wreg
  7757  003D64  CFE8 F00C          	movff	wreg,vscp_setManufacturerId@idx
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;main.c: 821: if ( idx>7 ) return;
  7761  003D68  0E07               	movlw	7
  7762  003D6A  640C               	cpfsgt	vscp_setManufacturerId@idx,c
  7763  003D6C  D001               	goto	l5619
  7764  003D6E  D00A               	goto	l251
  7765  003D70                     l5619:
  7766                           
  7767                           ; BSR set to: 0
  7768                           ;main.c: 822: writeEEPROM(0x0B + idx, data);
  7769  003D70  0E0B               	movlw	11
  7770  003D72  240C               	addwf	vscp_setManufacturerId@idx,w,c
  7771  003D74  6E08               	movwf	?_writeEEPROM,c
  7772  003D76  6A09               	clrf	?_writeEEPROM+1,c
  7773  003D78  0E00               	movlw	0
  7774  003D7A  2209               	addwfc	?_writeEEPROM+1,f,c
  7775  003D7C  C00B  F00A         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
  7776  003D80  EC59  F01E         	call	_writeEEPROM	;wreg free
  7777  003D84                     l251:
  7778  003D84  0012               	return	
  7779  003D86                     __end_of_vscp_setManufacturerId:
  7780                           	opt stack 0
  7781                           tblptru	equ	0xFF8
  7782                           prodh	equ	0xFF4
  7783                           prodl	equ	0xFF3
  7784                           postinc0	equ	0xFEE
  7785                           wreg	equ	0xFE8
  7786                           indf2	equ	0xFDF
  7787                           postinc2	equ	0xFDE
  7788                           postdec2	equ	0xFDD
  7789                           fsr2h	equ	0xFDA
  7790                           fsr2l	equ	0xFD9
  7791                           status	equ	0xFD8
  7792                           
  7793 ;; *************** function _vscp_setGUID *****************
  7794 ;; Defined at:
  7795 ;;		line 808 in file "../main.c"
  7796 ;; Parameters:    Size  Location     Type
  7797 ;;  idx             1    wreg     unsigned char 
  7798 ;;  data            1   10[COMRAM] unsigned char 
  7799 ;; Auto vars:     Size  Location     Type
  7800 ;;  idx             1   11[COMRAM] unsigned char 
  7801 ;; Return value:  Size  Location     Type
  7802 ;;		None               void
  7803 ;; Registers used:
  7804 ;;		wreg, status,2, status,0, cstack
  7805 ;; Tracked objects:
  7806 ;;		On entry : F/0
  7807 ;;		On exit  : 0/0
  7808 ;;		Unchanged: 0/0
  7809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7810 ;;      Params:         1       0       0       0       0       0       0
  7811 ;;      Locals:         1       0       0       0       0       0       0
  7812 ;;      Temps:          0       0       0       0       0       0       0
  7813 ;;      Totals:         2       0       0       0       0       0       0
  7814 ;;Total ram usage:        2 bytes
  7815 ;; Hardware stack levels used:    1
  7816 ;; Hardware stack levels required when called:    3
  7817 ;; This function calls:
  7818 ;;		_writeEEPROM
  7819 ;; This function is called by:
  7820 ;;		_vscp_writeStdReg
  7821 ;; This function uses a non-reentrant model
  7822 ;;
  7823                           
  7824                           	psect	text25
  7825  003D86                     __ptext25:
  7826                           	opt stack 0
  7827  003D86                     _vscp_setGUID:
  7828                           	opt stack 25
  7829                           
  7830                           ;incstack = 0
  7831                           ;incstack = 0
  7832                           ;vscp_setGUID@idx stored from wreg
  7833  003D86  CFE8 F00C          	movff	wreg,vscp_setGUID@idx
  7834                           
  7835                           ; BSR set to: 0
  7836                           ;main.c: 809: if ( idx>15 ) return;
  7837  003D8A  0E0F               	movlw	15
  7838  003D8C  640C               	cpfsgt	vscp_setGUID@idx,c
  7839  003D8E  D001               	goto	l5613
  7840  003D90  D00A               	goto	l247
  7841  003D92                     l5613:
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;main.c: 810: writeEEPROM(0x13 + idx, data);
  7845  003D92  0E13               	movlw	19
  7846  003D94  240C               	addwf	vscp_setGUID@idx,w,c
  7847  003D96  6E08               	movwf	?_writeEEPROM,c
  7848  003D98  6A09               	clrf	?_writeEEPROM+1,c
  7849  003D9A  0E00               	movlw	0
  7850  003D9C  2209               	addwfc	?_writeEEPROM+1,f,c
  7851  003D9E  C00B  F00A         	movff	vscp_setGUID@data,?_writeEEPROM+2
  7852  003DA2  EC59  F01E         	call	_writeEEPROM	;wreg free
  7853  003DA6                     l247:
  7854  003DA6  0012               	return	
  7855  003DA8                     __end_of_vscp_setGUID:
  7856                           	opt stack 0
  7857                           tblptru	equ	0xFF8
  7858                           prodh	equ	0xFF4
  7859                           prodl	equ	0xFF3
  7860                           postinc0	equ	0xFEE
  7861                           wreg	equ	0xFE8
  7862                           indf2	equ	0xFDF
  7863                           postinc2	equ	0xFDE
  7864                           postdec2	equ	0xFDD
  7865                           fsr2h	equ	0xFDA
  7866                           fsr2l	equ	0xFD9
  7867                           status	equ	0xFD8
  7868                           
  7869 ;; *************** function _vscp_writeAppReg *****************
  7870 ;; Defined at:
  7871 ;;		line 971 in file "../main.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;  reg             1    wreg     unsigned char 
  7874 ;;  val             1   80[COMRAM] unsigned char 
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;  reg             1   29[BANK0 ] unsigned char 
  7877 ;;  val             1   26[BANK0 ] unsigned char 
  7878 ;;  rv              1   28[BANK0 ] unsigned char 
  7879 ;;  bOn             1   27[BANK0 ] enum E15660
  7880 ;;  bInfoEvent      1   25[BANK0 ] enum E15660
  7881 ;; Return value:  Size  Location     Type
  7882 ;;                  1    wreg      unsigned char 
  7883 ;; Registers used:
  7884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7885 ;; Tracked objects:
  7886 ;;		On entry : F/0
  7887 ;;		On exit  : F/0
  7888 ;;		Unchanged: 0/0
  7889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7890 ;;      Params:         1       0       0       0       0       0       0
  7891 ;;      Locals:         0       5       0       0       0       0       0
  7892 ;;      Temps:          0       3       0       0       0       0       0
  7893 ;;      Totals:         1       8       0       0       0       0       0
  7894 ;;Total ram usage:        9 bytes
  7895 ;; Hardware stack levels used:    1
  7896 ;; Hardware stack levels required when called:    7
  7897 ;; This function calls:
  7898 ;;		_writeEEPROM
  7899 ;;		_readEEPROM
  7900 ;;		_SendInformationEvent
  7901 ;;		_calculateSetFilterMask
  7902 ;; This function is called by:
  7903 ;;		_vscp_writeRegister
  7904 ;;		_vscp_handleProtocolEvent
  7905 ;; This function uses a non-reentrant model
  7906 ;;
  7907                           
  7908                           	psect	text26
  7909  000622                     __ptext26:
  7910                           	opt stack 0
  7911  000622                     _vscp_writeAppReg:
  7912                           	opt stack 21
  7913                           
  7914                           ;incstack = 0
  7915                           ;incstack = 0
  7916                           ;vscp_writeAppReg@reg stored from wreg
  7917  000622  CFE8 F0CE          	movff	wreg,vscp_writeAppReg@reg
  7918                           
  7919                           ; BSR set to: 0
  7920                           ;main.c: 972: uint8_t rv;
  7921                           ;main.c: 973: BOOL bInfoEvent = 0;
  7922  000626  6BCA               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7923                           
  7924                           ;main.c: 974: BOOL bOn = 0;
  7925  000628  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  7926                           
  7927                           ; BSR set to: 0
  7928                           ;main.c: 976: rv = ~val;
  7929  00062A  1C51               	comf	vscp_writeAppReg@val,w,c
  7930  00062C  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  7931                           
  7932                           ; BSR set to: 0
  7933                           ;main.c: 979: if ( reg == 0 ) {
  7934  00062E  67CE               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  7935  000630  D00E               	goto	l9885
  7936                           
  7937                           ; BSR set to: 0
  7938                           ;main.c: 980: writeEEPROM(0x43 + 0, val);
  7939  000632  6A09               	clrf	?_writeEEPROM+1,c
  7940  000634  0E43               	movlw	67
  7941  000636  6E08               	movwf	?_writeEEPROM,c
  7942  000638  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  7943  00063C  EC59  F01E         	call	_writeEEPROM	;wreg free
  7944                           
  7945                           ;main.c: 981: rv = readEEPROM(0x43 + 0);
  7946  000640  6A09               	clrf	?_readEEPROM+1,c
  7947  000642  0E43               	movlw	67
  7948  000644  6E08               	movwf	?_readEEPROM,c
  7949  000646  EC81  F01F         	call	_readEEPROM	;wreg free
  7950  00064A  EFAD  F007         	goto	L25
  7951  00064E                     l9885:
  7952                           
  7953                           ; BSR set to: 0
  7954                           ;main.c: 983: else if ( reg == 1 ) {
  7955  00064E  05CE               	decf	vscp_writeAppReg@reg& (0+255),w,b
  7956  000650  E10E               	bnz	l9889
  7957                           
  7958                           ; BSR set to: 0
  7959                           ;main.c: 985: writeEEPROM(0x43 + 1, val);
  7960  000652  6A09               	clrf	?_writeEEPROM+1,c
  7961  000654  0E44               	movlw	68
  7962  000656  6E08               	movwf	?_writeEEPROM,c
  7963  000658  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  7964  00065C  EC59  F01E         	call	_writeEEPROM	;wreg free
  7965                           
  7966                           ;main.c: 986: rv = readEEPROM(0x43 + 1);
  7967  000660  6A09               	clrf	?_readEEPROM+1,c
  7968  000662  0E44               	movlw	68
  7969  000664  6E08               	movwf	?_readEEPROM,c
  7970  000666  EC81  F01F         	call	_readEEPROM	;wreg free
  7971  00066A  EFAD  F007         	goto	L25
  7972  00066E                     l9889:
  7973                           
  7974                           ; BSR set to: 0
  7975                           ;main.c: 989: else if ( (reg >= 2) && (reg <= 9) ) {
  7976  00066E  0E01               	movlw	1
  7977  000670  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  7978  000672  D182               	goto	l10041
  7979                           
  7980                           ; BSR set to: 0
  7981  000674  0E0A               	movlw	10
  7982  000676  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  7983  000678  D17F               	goto	l10041
  7984                           
  7985                           ; BSR set to: 0
  7986                           ;main.c: 991: if ( readEEPROM( 0x43 +
  7987                           ;main.c: 992: 10 + reg - 2 ) &
  7988                           ;main.c: 993: 0x80 ) {
  7989  00067A  0E4B               	movlw	75
  7990  00067C  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  7991  00067E  6E08               	movwf	?_readEEPROM,c
  7992  000680  6A09               	clrf	?_readEEPROM+1,c
  7993  000682  0E00               	movlw	0
  7994  000684  2209               	addwfc	?_readEEPROM+1,f,c
  7995  000686  EC81  F01F         	call	_readEEPROM	;wreg free
  7996  00068A  0100               	movlb	0	; () banked
  7997  00068C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  7998  00068E  BFC7               	btfsc	??_vscp_writeAppReg& (0+255),7,b
  7999  000690  D15E               	goto	l10039
  8000  000692  EFAF  F007         	goto	l10217
  8001  000696                     l9897:
  8002                           
  8003                           ; BSR set to: 0
  8004                           ;main.c: 1000: bInfoEvent = 1;
  8005  000696  0E01               	movlw	1
  8006  000698  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8007                           
  8008                           ; BSR set to: 0
  8009                           ;main.c: 1002: if ( 1 == val ) {
  8010  00069A  0451               	decf	vscp_writeAppReg@val,w,c
  8011  00069C  E128               	bnz	l304
  8012                           
  8013                           ; BSR set to: 0
  8014                           ;main.c: 1004: LATBbits.LATB4 = 1;
  8015  00069E  888A               	bsf	3978,4,c	;volatile
  8016                           
  8017                           ; BSR set to: 0
  8018                           ;main.c: 1005: rv = LATBbits.LATB4;
  8019  0006A0  0E00               	movlw	0
  8020  0006A2  B88A               	btfsc	3978,4,c	;volatile
  8021  0006A4  0E01               	movlw	1
  8022  0006A6  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8023                           
  8024                           ; BSR set to: 0
  8025                           ;main.c: 1006: bOn = 1;
  8026  0006A8  0E01               	movlw	1
  8027  0006AA  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8028                           
  8029                           ; BSR set to: 0
  8030                           ;main.c: 1009: if ( readEEPROM( 0x43 + 10 ) & 0x04 ) {
  8031  0006AC  6A09               	clrf	?_readEEPROM+1,c
  8032  0006AE  0E4D               	movlw	77
  8033  0006B0  6E08               	movwf	?_readEEPROM,c
  8034  0006B2  EC81  F01F         	call	_readEEPROM	;wreg free
  8035  0006B6  0100               	movlb	0	; () banked
  8036  0006B8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8037  0006BA  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8038  0006BC  EFAF  F007         	goto	l10217
  8039  0006C0                     l9909:
  8040                           
  8041                           ; BSR set to: 0
  8042                           ;main.c: 1010: relay_protection_timer[ 0 ] =
  8043                           ;main.c: 1011: readEEPROM( 0x43 + 34 ) * 256 +
  8044                           ;main.c: 1012: readEEPROM( 0x43 + 35 );
  8045  0006C0  6A09               	clrf	?_readEEPROM+1,c
  8046  0006C2  0E66               	movlw	102
  8047  0006C4  6E08               	movwf	?_readEEPROM,c
  8048  0006C6  EC81  F01F         	call	_readEEPROM	;wreg free
  8049  0006CA  0100               	movlb	0	; () banked
  8050  0006CC  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8051  0006CE  6A09               	clrf	?_readEEPROM+1,c
  8052  0006D0  0E65               	movlw	101
  8053  0006D2  6E08               	movwf	?_readEEPROM,c
  8054  0006D4  EC81  F01F         	call	_readEEPROM	;wreg free
  8055  0006D8  0100               	movlb	0	; () banked
  8056  0006DA  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8057  0006DC  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8058  0006DE  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8059  0006E0  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8060  0006E2  6F60               	movwf	_relay_protection_timer& (0+255),b
  8061  0006E4  0E00               	movlw	0
  8062  0006E6  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8063  0006E8  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  8064  0006EA  EFAF  F007         	goto	l10217
  8065  0006EE                     l304:
  8066                           
  8067                           ; BSR set to: 0
  8068                           ;main.c: 1016: else if (0 == val) {
  8069  0006EE  6651               	tstfsz	vscp_writeAppReg@val,c
  8070  0006F0  EFAF  F007         	goto	l10217
  8071                           
  8072                           ; BSR set to: 0
  8073                           ;main.c: 1017: LATBbits.LATB4 = 0;
  8074  0006F4  988A               	bcf	3978,4,c	;volatile
  8075                           
  8076                           ; BSR set to: 0
  8077                           ;main.c: 1018: rv = LATBbits.LATB4;
  8078  0006F6  0E00               	movlw	0
  8079  0006F8  B88A               	btfsc	3978,4,c	;volatile
  8080  0006FA  0E01               	movlw	1
  8081  0006FC  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8082  0006FE                     l9915:
  8083                           
  8084                           ; BSR set to: 0
  8085                           ;main.c: 1019: bOn = 0;
  8086  0006FE  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8087  000700  EFAF  F007         	goto	l10217
  8088  000704                     l9917:
  8089                           
  8090                           ; BSR set to: 0
  8091                           ;main.c: 1026: bInfoEvent = 1;
  8092  000704  0E01               	movlw	1
  8093  000706  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8094                           
  8095                           ; BSR set to: 0
  8096                           ;main.c: 1028: if (1 == val) {
  8097  000708  0451               	decf	vscp_writeAppReg@val,w,c
  8098  00070A  E11E               	bnz	l310
  8099                           
  8100                           ; BSR set to: 0
  8101                           ;main.c: 1030: LATBbits.LATB1 = 1;
  8102  00070C  828A               	bsf	3978,1,c	;volatile
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;main.c: 1031: rv = LATBbits.LATB1;
  8106  00070E  0E00               	movlw	0
  8107  000710  B28A               	btfsc	3978,1,c	;volatile
  8108  000712  0E01               	movlw	1
  8109  000714  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8110                           
  8111                           ; BSR set to: 0
  8112                           ;main.c: 1032: bOn = 1;
  8113  000716  0E01               	movlw	1
  8114  000718  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8115                           
  8116                           ; BSR set to: 0
  8117                           ;main.c: 1034: if (readEEPROM(0x43 + 11) & 0x04) {
  8118  00071A  6A09               	clrf	?_readEEPROM+1,c
  8119  00071C  0E4E               	movlw	78
  8120  00071E  6E08               	movwf	?_readEEPROM,c
  8121  000720  EC81  F01F         	call	_readEEPROM	;wreg free
  8122  000724  0100               	movlb	0	; () banked
  8123  000726  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8124  000728  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8125  00072A  EFAF  F007         	goto	l10217
  8126  00072E                     l9929:
  8127                           
  8128                           ; BSR set to: 0
  8129                           ;main.c: 1035: relay_protection_timer[ 1 ] =
  8130                           ;main.c: 1036: readEEPROM(0x43 + 36) * 256 +
  8131                           ;main.c: 1037: readEEPROM(0x43 + 37);
  8132  00072E  6A09               	clrf	?_readEEPROM+1,c
  8133  000730  0E68               	movlw	104
  8134  000732  6E08               	movwf	?_readEEPROM,c
  8135  000734  EC81  F01F         	call	_readEEPROM	;wreg free
  8136  000738  0100               	movlb	0	; () banked
  8137  00073A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8138  00073C  6A09               	clrf	?_readEEPROM+1,c
  8139  00073E  0E67               	movlw	103
  8140  000740  6E08               	movwf	?_readEEPROM,c
  8141  000742  EC81  F01F         	call	_readEEPROM	;wreg free
  8142  000746  D18E               	goto	L26
  8143  000748                     l310:
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;main.c: 1041: else if (0 == val) {
  8147  000748  6651               	tstfsz	vscp_writeAppReg@val,c
  8148  00074A  EFAF  F007         	goto	l10217
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;main.c: 1042: LATBbits.LATB1 = 0;
  8152  00074E  928A               	bcf	3978,1,c	;volatile
  8153                           
  8154                           ; BSR set to: 0
  8155                           ;main.c: 1043: rv = LATBbits.LATB1;
  8156  000750  0E00               	movlw	0
  8157  000752  B28A               	btfsc	3978,1,c	;volatile
  8158  000754  0E01               	movlw	1
  8159  000756  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8160  000758  D7D2               	goto	l9915
  8161  00075A                     l9937:
  8162                           
  8163                           ; BSR set to: 0
  8164                           ;main.c: 1051: bInfoEvent = 1;
  8165  00075A  0E01               	movlw	1
  8166  00075C  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;main.c: 1053: if (1 == val) {
  8170  00075E  0451               	decf	vscp_writeAppReg@val,w,c
  8171  000760  E126               	bnz	l315
  8172                           
  8173                           ; BSR set to: 0
  8174                           ;main.c: 1055: LATBbits.LATB0 = 1;
  8175  000762  808A               	bsf	3978,0,c	;volatile
  8176                           
  8177                           ; BSR set to: 0
  8178                           ;main.c: 1056: rv = LATBbits.LATB0;
  8179  000764  0E00               	movlw	0
  8180  000766  B08A               	btfsc	3978,0,c	;volatile
  8181  000768  0E01               	movlw	1
  8182  00076A  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;main.c: 1057: bOn = 1;
  8186  00076C  0E01               	movlw	1
  8187  00076E  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8188                           
  8189                           ; BSR set to: 0
  8190                           ;main.c: 1059: if ( readEEPROM(0x43 + 12) & 0x04) {
  8191  000770  6A09               	clrf	?_readEEPROM+1,c
  8192  000772  0E4F               	movlw	79
  8193  000774  6E08               	movwf	?_readEEPROM,c
  8194  000776  EC81  F01F         	call	_readEEPROM	;wreg free
  8195  00077A  0100               	movlb	0	; () banked
  8196  00077C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8197  00077E  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8198  000780  D3EE               	goto	l10217
  8199  000782                     l9949:
  8200                           
  8201                           ; BSR set to: 0
  8202                           ;main.c: 1060: relay_protection_timer[ 2 ] =
  8203                           ;main.c: 1061: readEEPROM(0x43 + 38) * 256 +
  8204                           ;main.c: 1062: readEEPROM(0x43 + 39);
  8205  000782  6A09               	clrf	?_readEEPROM+1,c
  8206  000784  0E6A               	movlw	106
  8207  000786  6E08               	movwf	?_readEEPROM,c
  8208  000788  EC81  F01F         	call	_readEEPROM	;wreg free
  8209  00078C  0100               	movlb	0	; () banked
  8210  00078E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8211  000790  6A09               	clrf	?_readEEPROM+1,c
  8212  000792  0E69               	movlw	105
  8213  000794  6E08               	movwf	?_readEEPROM,c
  8214  000796  EC81  F01F         	call	_readEEPROM	;wreg free
  8215  00079A  0100               	movlb	0	; () banked
  8216  00079C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8217  00079E  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8218  0007A0  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8219  0007A2  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8220  0007A4  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  8221  0007A6  0E00               	movlw	0
  8222  0007A8  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8223  0007AA  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  8224  0007AC  D3D8               	goto	l10217
  8225  0007AE                     l315:
  8226                           
  8227                           ; BSR set to: 0
  8228                           ;main.c: 1066: else if (0 == val) {
  8229  0007AE  6651               	tstfsz	vscp_writeAppReg@val,c
  8230  0007B0  D3D6               	goto	l10217
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;main.c: 1067: LATBbits.LATB0 = 0;
  8234  0007B2  908A               	bcf	3978,0,c	;volatile
  8235                           
  8236                           ; BSR set to: 0
  8237                           ;main.c: 1068: rv = LATBbits.LATB0;
  8238  0007B4  0E00               	movlw	0
  8239  0007B6  B08A               	btfsc	3978,0,c	;volatile
  8240  0007B8  0E01               	movlw	1
  8241  0007BA  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8242  0007BC  D7A0               	goto	l9915
  8243  0007BE                     l9957:
  8244                           
  8245                           ; BSR set to: 0
  8246                           ;main.c: 1077: bInfoEvent = 1;
  8247  0007BE  0E01               	movlw	1
  8248  0007C0  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;main.c: 1079: if (1 == val) {
  8252  0007C2  0451               	decf	vscp_writeAppReg@val,w,c
  8253  0007C4  E126               	bnz	l320
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;main.c: 1081: LATCbits.LATC7 = 1;
  8257  0007C6  8E8B               	bsf	3979,7,c	;volatile
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;main.c: 1082: rv = LATCbits.LATC7;
  8261  0007C8  0E00               	movlw	0
  8262  0007CA  BE8B               	btfsc	3979,7,c	;volatile
  8263  0007CC  0E01               	movlw	1
  8264  0007CE  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8265                           
  8266                           ; BSR set to: 0
  8267                           ;main.c: 1083: bOn = 1;
  8268  0007D0  0E01               	movlw	1
  8269  0007D2  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8270                           
  8271                           ; BSR set to: 0
  8272                           ;main.c: 1085: if (readEEPROM(0x43 + 13) & 0x04) {
  8273  0007D4  6A09               	clrf	?_readEEPROM+1,c
  8274  0007D6  0E50               	movlw	80
  8275  0007D8  6E08               	movwf	?_readEEPROM,c
  8276  0007DA  EC81  F01F         	call	_readEEPROM	;wreg free
  8277  0007DE  0100               	movlb	0	; () banked
  8278  0007E0  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8279  0007E2  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8280  0007E4  D3BC               	goto	l10217
  8281  0007E6                     l9969:
  8282                           
  8283                           ; BSR set to: 0
  8284                           ;main.c: 1086: relay_protection_timer[ 3 ] =
  8285                           ;main.c: 1087: readEEPROM(0x43 + 40) * 256 +
  8286                           ;main.c: 1088: readEEPROM(0x43 + 41);
  8287  0007E6  6A09               	clrf	?_readEEPROM+1,c
  8288  0007E8  0E6C               	movlw	108
  8289  0007EA  6E08               	movwf	?_readEEPROM,c
  8290  0007EC  EC81  F01F         	call	_readEEPROM	;wreg free
  8291  0007F0  0100               	movlb	0	; () banked
  8292  0007F2  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8293  0007F4  6A09               	clrf	?_readEEPROM+1,c
  8294  0007F6  0E6B               	movlw	107
  8295  0007F8  6E08               	movwf	?_readEEPROM,c
  8296  0007FA  EC81  F01F         	call	_readEEPROM	;wreg free
  8297  0007FE  0100               	movlb	0	; () banked
  8298  000800  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8299  000802  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8300  000804  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8301  000806  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8302  000808  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  8303  00080A  0E00               	movlw	0
  8304  00080C  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8305  00080E  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  8306  000810  D3A6               	goto	l10217
  8307  000812                     l320:
  8308                           
  8309                           ; BSR set to: 0
  8310                           ;main.c: 1092: else if (0 == val) {
  8311  000812  6651               	tstfsz	vscp_writeAppReg@val,c
  8312  000814  D3A4               	goto	l10217
  8313                           
  8314                           ; BSR set to: 0
  8315                           ;main.c: 1093: LATCbits.LATC7 = 0;
  8316  000816  9E8B               	bcf	3979,7,c	;volatile
  8317                           
  8318                           ; BSR set to: 0
  8319                           ;main.c: 1094: rv = LATCbits.LATC7;
  8320  000818  0E00               	movlw	0
  8321  00081A  BE8B               	btfsc	3979,7,c	;volatile
  8322  00081C  0E01               	movlw	1
  8323  00081E  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8324  000820  D76E               	goto	l9915
  8325  000822                     l9977:
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;main.c: 1103: bInfoEvent = 1;
  8329  000822  0E01               	movlw	1
  8330  000824  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8331                           
  8332                           ; BSR set to: 0
  8333                           ;main.c: 1105: if (1 == val) {
  8334  000826  0451               	decf	vscp_writeAppReg@val,w,c
  8335  000828  E126               	bnz	l325
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;main.c: 1107: LATCbits.LATC6 = 1;
  8339  00082A  8C8B               	bsf	3979,6,c	;volatile
  8340                           
  8341                           ; BSR set to: 0
  8342                           ;main.c: 1108: rv = LATCbits.LATC6;
  8343  00082C  0E00               	movlw	0
  8344  00082E  BC8B               	btfsc	3979,6,c	;volatile
  8345  000830  0E01               	movlw	1
  8346  000832  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8347                           
  8348                           ; BSR set to: 0
  8349                           ;main.c: 1109: bOn = 1;
  8350  000834  0E01               	movlw	1
  8351  000836  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8352                           
  8353                           ; BSR set to: 0
  8354                           ;main.c: 1111: if (readEEPROM(0x43 + 14) & 0x04) {
  8355  000838  6A09               	clrf	?_readEEPROM+1,c
  8356  00083A  0E51               	movlw	81
  8357  00083C  6E08               	movwf	?_readEEPROM,c
  8358  00083E  EC81  F01F         	call	_readEEPROM	;wreg free
  8359  000842  0100               	movlb	0	; () banked
  8360  000844  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8361  000846  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8362  000848  D38A               	goto	l10217
  8363  00084A                     l9989:
  8364                           
  8365                           ; BSR set to: 0
  8366                           ;main.c: 1112: relay_protection_timer[ 4 ] =
  8367                           ;main.c: 1113: readEEPROM(0x43 + 42) * 256 +
  8368                           ;main.c: 1114: readEEPROM(0x43 + 43);
  8369  00084A  6A09               	clrf	?_readEEPROM+1,c
  8370  00084C  0E6E               	movlw	110
  8371  00084E  6E08               	movwf	?_readEEPROM,c
  8372  000850  EC81  F01F         	call	_readEEPROM	;wreg free
  8373  000854  0100               	movlb	0	; () banked
  8374  000856  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8375  000858  6A09               	clrf	?_readEEPROM+1,c
  8376  00085A  0E6D               	movlw	109
  8377  00085C  6E08               	movwf	?_readEEPROM,c
  8378  00085E  EC81  F01F         	call	_readEEPROM	;wreg free
  8379  000862  0100               	movlb	0	; () banked
  8380  000864  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8381  000866  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8382  000868  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8383  00086A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8384  00086C  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  8385  00086E  0E00               	movlw	0
  8386  000870  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8387  000872  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  8388  000874  D374               	goto	l10217
  8389  000876                     l325:
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;main.c: 1118: else if (0 == val) {
  8393  000876  6651               	tstfsz	vscp_writeAppReg@val,c
  8394  000878  D372               	goto	l10217
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;main.c: 1119: LATCbits.LATC6 = 0;
  8398  00087A  9C8B               	bcf	3979,6,c	;volatile
  8399                           
  8400                           ; BSR set to: 0
  8401                           ;main.c: 1120: rv = LATCbits.LATC6;
  8402  00087C  0E00               	movlw	0
  8403  00087E  BC8B               	btfsc	3979,6,c	;volatile
  8404  000880  0E01               	movlw	1
  8405  000882  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8406  000884  D73C               	goto	l9915
  8407  000886                     l9997:
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;main.c: 1129: bInfoEvent = 1;
  8411  000886  0E01               	movlw	1
  8412  000888  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8413                           
  8414                           ; BSR set to: 0
  8415                           ;main.c: 1131: if (1 == val) {
  8416  00088A  0451               	decf	vscp_writeAppReg@val,w,c
  8417  00088C  E126               	bnz	l330
  8418                           
  8419                           ; BSR set to: 0
  8420                           ;main.c: 1133: LATCbits.LATC5 = 1;
  8421  00088E  8A8B               	bsf	3979,5,c	;volatile
  8422                           
  8423                           ; BSR set to: 0
  8424                           ;main.c: 1134: rv = LATCbits.LATC5;
  8425  000890  0E00               	movlw	0
  8426  000892  BA8B               	btfsc	3979,5,c	;volatile
  8427  000894  0E01               	movlw	1
  8428  000896  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8429                           
  8430                           ; BSR set to: 0
  8431                           ;main.c: 1135: bOn = 1;
  8432  000898  0E01               	movlw	1
  8433  00089A  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8434                           
  8435                           ; BSR set to: 0
  8436                           ;main.c: 1137: if (readEEPROM(0x43 + 15) & 0x04) {
  8437  00089C  6A09               	clrf	?_readEEPROM+1,c
  8438  00089E  0E52               	movlw	82
  8439  0008A0  6E08               	movwf	?_readEEPROM,c
  8440  0008A2  EC81  F01F         	call	_readEEPROM	;wreg free
  8441  0008A6  0100               	movlb	0	; () banked
  8442  0008A8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8443  0008AA  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8444  0008AC  D358               	goto	l10217
  8445  0008AE                     l10009:
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;main.c: 1138: relay_protection_timer[ 5 ] =
  8449                           ;main.c: 1139: readEEPROM(0x43 + 44) * 256 +
  8450                           ;main.c: 1140: readEEPROM(0x43 + 45);
  8451  0008AE  6A09               	clrf	?_readEEPROM+1,c
  8452  0008B0  0E70               	movlw	112
  8453  0008B2  6E08               	movwf	?_readEEPROM,c
  8454  0008B4  EC81  F01F         	call	_readEEPROM	;wreg free
  8455  0008B8  0100               	movlb	0	; () banked
  8456  0008BA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8457  0008BC  6A09               	clrf	?_readEEPROM+1,c
  8458  0008BE  0E6F               	movlw	111
  8459  0008C0  6E08               	movwf	?_readEEPROM,c
  8460  0008C2  EC81  F01F         	call	_readEEPROM	;wreg free
  8461  0008C6  0100               	movlb	0	; () banked
  8462  0008C8  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8463  0008CA  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8464  0008CC  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8465  0008CE  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8466  0008D0  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  8467  0008D2  0E00               	movlw	0
  8468  0008D4  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8469  0008D6  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  8470  0008D8  D342               	goto	l10217
  8471  0008DA                     l330:
  8472                           
  8473                           ; BSR set to: 0
  8474                           ;main.c: 1144: else if (0 == val) {
  8475  0008DA  6651               	tstfsz	vscp_writeAppReg@val,c
  8476  0008DC  D340               	goto	l10217
  8477                           
  8478                           ; BSR set to: 0
  8479                           ;main.c: 1145: LATCbits.LATC5 = 0;
  8480  0008DE  9A8B               	bcf	3979,5,c	;volatile
  8481                           
  8482                           ; BSR set to: 0
  8483                           ;main.c: 1146: rv = LATCbits.LATC5;
  8484  0008E0  0E00               	movlw	0
  8485  0008E2  BA8B               	btfsc	3979,5,c	;volatile
  8486  0008E4  0E01               	movlw	1
  8487  0008E6  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8488  0008E8  D70A               	goto	l9915
  8489  0008EA                     l10017:
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;main.c: 1154: bInfoEvent = 1;
  8493  0008EA  0E01               	movlw	1
  8494  0008EC  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8495                           
  8496                           ; BSR set to: 0
  8497                           ;main.c: 1156: if (1 == val) {
  8498  0008EE  0451               	decf	vscp_writeAppReg@val,w,c
  8499  0008F0  E126               	bnz	l335
  8500                           
  8501                           ; BSR set to: 0
  8502                           ;main.c: 1158: LATCbits.LATC4 = 1;
  8503  0008F2  888B               	bsf	3979,4,c	;volatile
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;main.c: 1159: rv = LATCbits.LATC4;
  8507  0008F4  0E00               	movlw	0
  8508  0008F6  B88B               	btfsc	3979,4,c	;volatile
  8509  0008F8  0E01               	movlw	1
  8510  0008FA  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8511                           
  8512                           ; BSR set to: 0
  8513                           ;main.c: 1160: bOn = 1;
  8514  0008FC  0E01               	movlw	1
  8515  0008FE  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;main.c: 1162: if (readEEPROM(0x43 + 16) & 0x04) {
  8519  000900  6A09               	clrf	?_readEEPROM+1,c
  8520  000902  0E53               	movlw	83
  8521  000904  6E08               	movwf	?_readEEPROM,c
  8522  000906  EC81  F01F         	call	_readEEPROM	;wreg free
  8523  00090A  0100               	movlb	0	; () banked
  8524  00090C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8525  00090E  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8526  000910  D326               	goto	l10217
  8527  000912                     l10029:
  8528                           
  8529                           ; BSR set to: 0
  8530                           ;main.c: 1163: relay_protection_timer[ 6 ] =
  8531                           ;main.c: 1164: readEEPROM(0x43 + 46) * 256 +
  8532                           ;main.c: 1165: readEEPROM(0x43 + 47);
  8533  000912  6A09               	clrf	?_readEEPROM+1,c
  8534  000914  0E72               	movlw	114
  8535  000916  6E08               	movwf	?_readEEPROM,c
  8536  000918  EC81  F01F         	call	_readEEPROM	;wreg free
  8537  00091C  0100               	movlb	0	; () banked
  8538  00091E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8539  000920  6A09               	clrf	?_readEEPROM+1,c
  8540  000922  0E71               	movlw	113
  8541  000924  6E08               	movwf	?_readEEPROM,c
  8542  000926  EC81  F01F         	call	_readEEPROM	;wreg free
  8543  00092A  0100               	movlb	0	; () banked
  8544  00092C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8545  00092E  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8546  000930  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8547  000932  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8548  000934  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  8549  000936  0E00               	movlw	0
  8550  000938  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8551  00093A  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  8552  00093C  D310               	goto	l10217
  8553  00093E                     l335:
  8554                           
  8555                           ; BSR set to: 0
  8556                           ;main.c: 1169: else if (0 == val) {
  8557  00093E  6651               	tstfsz	vscp_writeAppReg@val,c
  8558  000940  D30E               	goto	l10217
  8559                           
  8560                           ; BSR set to: 0
  8561                           ;main.c: 1170: LATCbits.LATC4 = 0;
  8562  000942  988B               	bcf	3979,4,c	;volatile
  8563                           
  8564                           ; BSR set to: 0
  8565                           ;main.c: 1171: rv = LATCbits.LATC4;
  8566  000944  0E00               	movlw	0
  8567  000946  B88B               	btfsc	3979,4,c	;volatile
  8568  000948  0E01               	movlw	1
  8569  00094A  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8570  00094C  D6D8               	goto	l9915
  8571  00094E                     l10039:
  8572                           
  8573                           ; BSR set to: 0
  8574  00094E  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8575                           
  8576                           ; Switch size 1, requested type "speed"
  8577                           ; Number of cases is 7, Range of values is 2 to 8
  8578                           ; switch strategies available:
  8579                           ; Name         Instructions Cycles
  8580                           ; simple_byte           22    12 (average)
  8581                           ;	Chosen strategy is simple_byte
  8582  000950  0A02               	xorlw	2	; case 2
  8583  000952  E101 D6A0          	bz	l9897
  8584  000956  0A01               	xorlw	1	; case 3
  8585  000958  E101 D6D4          	bz	l9917
  8586  00095C  0A07               	xorlw	7	; case 4
  8587  00095E  E101 D6FC          	bz	l9937
  8588  000962  0A01               	xorlw	1	; case 5
  8589  000964  E101 D72B          	bz	l9957
  8590  000968  0A03               	xorlw	3	; case 6
  8591  00096A  E101 D75A          	bz	l9977
  8592  00096E  0A01               	xorlw	1	; case 7
  8593  000970  E08A               	bz	l9997
  8594  000972  0A0F               	xorlw	15	; case 8
  8595  000974  E0BA               	bz	l10017
  8596                           
  8597                           ; BSR set to: 0
  8598                           ;main.c: 1177: }
  8599                           ;main.c: 1178: }
  8600  000976  D2F3               	goto	l10217
  8601  000978                     l10041:
  8602                           
  8603                           ; BSR set to: 0
  8604                           ;main.c: 1181: else if ( (reg >= 10 ) &&
  8605                           ;main.c: 1182: (reg <= 17) ) {
  8606  000978  0E09               	movlw	9
  8607  00097A  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8608  00097C  D18C               	goto	l10149
  8609                           
  8610                           ; BSR set to: 0
  8611  00097E  0E12               	movlw	18
  8612  000980  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8613  000982  D189               	goto	l10149
  8614  000984  D173               	goto	l10147
  8615  000986                     l10047:
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;main.c: 1188: writeEEPROM( 0x43 + reg, val );
  8619  000986  0E43               	movlw	67
  8620  000988  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8621  00098A  6E08               	movwf	?_writeEEPROM,c
  8622  00098C  6A09               	clrf	?_writeEEPROM+1,c
  8623  00098E  0E00               	movlw	0
  8624  000990  2209               	addwfc	?_writeEEPROM+1,f,c
  8625  000992  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8626  000996  EC59  F01E         	call	_writeEEPROM	;wreg free
  8627                           
  8628                           ;main.c: 1189: rv = readEEPROM( 0x43 + reg );
  8629  00099A  0E43               	movlw	67
  8630  00099C  0100               	movlb	0	; () banked
  8631  00099E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8632  0009A0  6E08               	movwf	?_readEEPROM,c
  8633  0009A2  6A09               	clrf	?_readEEPROM+1,c
  8634  0009A4  0E00               	movlw	0
  8635  0009A6  2209               	addwfc	?_readEEPROM+1,f,c
  8636  0009A8  EC81  F01F         	call	_readEEPROM	;wreg free
  8637  0009AC  0100               	movlb	0	; () banked
  8638  0009AE  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;main.c: 1191: if ( val & 0x01 ) {
  8642  0009B0  A051               	btfss	vscp_writeAppReg@val,0,c
  8643  0009B2  D018               	goto	l10057
  8644                           
  8645                           ; BSR set to: 0
  8646                           ;main.c: 1193: LATBbits.LATB4 = 0;
  8647  0009B4  988A               	bcf	3978,4,c	;volatile
  8648                           
  8649                           ;main.c: 1194: bOn = 0;
  8650  0009B6  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;main.c: 1196: relay_pulse_flags |= 0x01;
  8654  0009B8  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  8655                           
  8656                           ; BSR set to: 0
  8657                           ;main.c: 1197: relay_pulse_timer[ 0 ] =
  8658                           ;main.c: 1198: readEEPROM( 0x43 + 18 ) * 256 +
  8659                           ;main.c: 1199: readEEPROM( 0x43 + 19 );
  8660  0009BA  6A09               	clrf	?_readEEPROM+1,c
  8661  0009BC  0E56               	movlw	86
  8662  0009BE  6E08               	movwf	?_readEEPROM,c
  8663  0009C0  EC81  F01F         	call	_readEEPROM	;wreg free
  8664  0009C4  0100               	movlb	0	; () banked
  8665  0009C6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8666  0009C8  6A09               	clrf	?_readEEPROM+1,c
  8667  0009CA  0E55               	movlw	85
  8668  0009CC  6E08               	movwf	?_readEEPROM,c
  8669  0009CE  EC81  F01F         	call	_readEEPROM	;wreg free
  8670  0009D2  0100               	movlb	0	; () banked
  8671  0009D4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8672  0009D6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8673  0009D8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8674  0009DA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8675  0009DC  6F70               	movwf	_relay_pulse_timer& (0+255),b
  8676  0009DE  0E00               	movlw	0
  8677  0009E0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8678  0009E2  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  8679  0009E4                     l10057:
  8680                           
  8681                           ; BSR set to: 0
  8682                           ;main.c: 1200: }
  8683                           ;main.c: 1202: if ( val & 0x04 ) {
  8684  0009E4  B451               	btfsc	vscp_writeAppReg@val,2,c
  8685  0009E6  D66C               	goto	l9909
  8686  0009E8  D2BA               	goto	l10217
  8687  0009EA                     l10061:
  8688                           
  8689                           ; BSR set to: 0
  8690                           ;main.c: 1211: writeEEPROM( 0x43 + reg, val );
  8691  0009EA  0E43               	movlw	67
  8692  0009EC  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8693  0009EE  6E08               	movwf	?_writeEEPROM,c
  8694  0009F0  6A09               	clrf	?_writeEEPROM+1,c
  8695  0009F2  0E00               	movlw	0
  8696  0009F4  2209               	addwfc	?_writeEEPROM+1,f,c
  8697  0009F6  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8698  0009FA  EC59  F01E         	call	_writeEEPROM	;wreg free
  8699                           
  8700                           ;main.c: 1212: rv = readEEPROM( 0x43 + reg );
  8701  0009FE  0E43               	movlw	67
  8702  000A00  0100               	movlb	0	; () banked
  8703  000A02  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8704  000A04  6E08               	movwf	?_readEEPROM,c
  8705  000A06  6A09               	clrf	?_readEEPROM+1,c
  8706  000A08  0E00               	movlw	0
  8707  000A0A  2209               	addwfc	?_readEEPROM+1,f,c
  8708  000A0C  EC81  F01F         	call	_readEEPROM	;wreg free
  8709  000A10  0100               	movlb	0	; () banked
  8710  000A12  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8711                           
  8712                           ; BSR set to: 0
  8713                           ;main.c: 1214: if ( val & 0x01 ) {
  8714  000A14  A051               	btfss	vscp_writeAppReg@val,0,c
  8715  000A16  D018               	goto	l10071
  8716                           
  8717                           ; BSR set to: 0
  8718                           ;main.c: 1216: LATBbits.LATB1 = 0;
  8719  000A18  928A               	bcf	3978,1,c	;volatile
  8720                           
  8721                           ;main.c: 1217: bOn = 0;
  8722  000A1A  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8723                           
  8724                           ; BSR set to: 0
  8725                           ;main.c: 1219: relay_pulse_flags |= 0x02;
  8726  000A1C  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  8727                           
  8728                           ; BSR set to: 0
  8729                           ;main.c: 1220: relay_pulse_timer[ 1 ] =
  8730                           ;main.c: 1221: readEEPROM( 0x43 + 18) * 256 +
  8731                           ;main.c: 1222: readEEPROM( 0x43 + 19);
  8732  000A1E  6A09               	clrf	?_readEEPROM+1,c
  8733  000A20  0E56               	movlw	86
  8734  000A22  6E08               	movwf	?_readEEPROM,c
  8735  000A24  EC81  F01F         	call	_readEEPROM	;wreg free
  8736  000A28  0100               	movlb	0	; () banked
  8737  000A2A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8738  000A2C  6A09               	clrf	?_readEEPROM+1,c
  8739  000A2E  0E55               	movlw	85
  8740  000A30  6E08               	movwf	?_readEEPROM,c
  8741  000A32  EC81  F01F         	call	_readEEPROM	;wreg free
  8742  000A36  0100               	movlb	0	; () banked
  8743  000A38  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8744  000A3A  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8745  000A3C  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8746  000A3E  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8747  000A40  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  8748  000A42  0E00               	movlw	0
  8749  000A44  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8750  000A46  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  8751  000A48                     l10071:
  8752                           
  8753                           ; BSR set to: 0
  8754                           ;main.c: 1223: }
  8755                           ;main.c: 1225: if ( val & 0x04 ) {
  8756  000A48  A451               	btfss	vscp_writeAppReg@val,2,c
  8757  000A4A  D289               	goto	l10217
  8758                           
  8759                           ; BSR set to: 0
  8760                           ;main.c: 1226: relay_protection_timer[ 1 ] =
  8761                           ;main.c: 1227: readEEPROM( 0x43 + 34 ) * 256 +
  8762                           ;main.c: 1228: readEEPROM( 0x43 + 35 );
  8763  000A4C  6A09               	clrf	?_readEEPROM+1,c
  8764  000A4E  0E66               	movlw	102
  8765  000A50  6E08               	movwf	?_readEEPROM,c
  8766  000A52  EC81  F01F         	call	_readEEPROM	;wreg free
  8767  000A56  0100               	movlb	0	; () banked
  8768  000A58  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8769  000A5A  6A09               	clrf	?_readEEPROM+1,c
  8770  000A5C  0E65               	movlw	101
  8771  000A5E  6E08               	movwf	?_readEEPROM,c
  8772  000A60  EC81  F01F         	call	_readEEPROM	;wreg free
  8773  000A64                     L26:
  8774  000A64  0100               	movlb	0	; () banked
  8775  000A66  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8776  000A68  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8777  000A6A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8778  000A6C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8779  000A6E  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  8780  000A70  0E00               	movlw	0
  8781  000A72  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8782  000A74  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  8783  000A76  D273               	goto	l10217
  8784  000A78                     l10075:
  8785                           
  8786                           ; BSR set to: 0
  8787                           ;main.c: 1234: writeEEPROM( 0x43 + reg, val );
  8788  000A78  0E43               	movlw	67
  8789  000A7A  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8790  000A7C  6E08               	movwf	?_writeEEPROM,c
  8791  000A7E  6A09               	clrf	?_writeEEPROM+1,c
  8792  000A80  0E00               	movlw	0
  8793  000A82  2209               	addwfc	?_writeEEPROM+1,f,c
  8794  000A84  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8795  000A88  EC59  F01E         	call	_writeEEPROM	;wreg free
  8796                           
  8797                           ;main.c: 1235: rv = readEEPROM( 0x43 + reg );
  8798  000A8C  0E43               	movlw	67
  8799  000A8E  0100               	movlb	0	; () banked
  8800  000A90  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8801  000A92  6E08               	movwf	?_readEEPROM,c
  8802  000A94  6A09               	clrf	?_readEEPROM+1,c
  8803  000A96  0E00               	movlw	0
  8804  000A98  2209               	addwfc	?_readEEPROM+1,f,c
  8805  000A9A  EC81  F01F         	call	_readEEPROM	;wreg free
  8806  000A9E  0100               	movlb	0	; () banked
  8807  000AA0  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8808                           
  8809                           ; BSR set to: 0
  8810                           ;main.c: 1237: if ( val & 0x01 ) {
  8811  000AA2  A051               	btfss	vscp_writeAppReg@val,0,c
  8812  000AA4  D018               	goto	l10085
  8813                           
  8814                           ; BSR set to: 0
  8815                           ;main.c: 1239: LATBbits.LATB0 = 0;
  8816  000AA6  908A               	bcf	3978,0,c	;volatile
  8817                           
  8818                           ;main.c: 1240: bOn = 0;
  8819  000AA8  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8820                           
  8821                           ; BSR set to: 0
  8822                           ;main.c: 1242: relay_pulse_flags |= 0x04;
  8823  000AAA  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  8824                           
  8825                           ; BSR set to: 0
  8826                           ;main.c: 1243: relay_pulse_timer[ 2 ] =
  8827                           ;main.c: 1244: readEEPROM( 0x43 + 22) * 256 +
  8828                           ;main.c: 1245: readEEPROM( 0x43 + 23);
  8829  000AAC  6A09               	clrf	?_readEEPROM+1,c
  8830  000AAE  0E5A               	movlw	90
  8831  000AB0  6E08               	movwf	?_readEEPROM,c
  8832  000AB2  EC81  F01F         	call	_readEEPROM	;wreg free
  8833  000AB6  0100               	movlb	0	; () banked
  8834  000AB8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8835  000ABA  6A09               	clrf	?_readEEPROM+1,c
  8836  000ABC  0E59               	movlw	89
  8837  000ABE  6E08               	movwf	?_readEEPROM,c
  8838  000AC0  EC81  F01F         	call	_readEEPROM	;wreg free
  8839  000AC4  0100               	movlb	0	; () banked
  8840  000AC6  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8841  000AC8  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8842  000ACA  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8843  000ACC  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8844  000ACE  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  8845  000AD0  0E00               	movlw	0
  8846  000AD2  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8847  000AD4  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  8848  000AD6                     l10085:
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;main.c: 1246: }
  8852                           ;main.c: 1248: if ( val & 0x04 ) {
  8853  000AD6  B451               	btfsc	vscp_writeAppReg@val,2,c
  8854  000AD8  D654               	goto	l9949
  8855  000ADA  D241               	goto	l10217
  8856  000ADC                     l10089:
  8857                           
  8858                           ; BSR set to: 0
  8859                           ;main.c: 1257: writeEEPROM( 0x43 + reg, val );
  8860  000ADC  0E43               	movlw	67
  8861  000ADE  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8862  000AE0  6E08               	movwf	?_writeEEPROM,c
  8863  000AE2  6A09               	clrf	?_writeEEPROM+1,c
  8864  000AE4  0E00               	movlw	0
  8865  000AE6  2209               	addwfc	?_writeEEPROM+1,f,c
  8866  000AE8  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8867  000AEC  EC59  F01E         	call	_writeEEPROM	;wreg free
  8868                           
  8869                           ;main.c: 1258: rv = readEEPROM( 0x43 + reg );
  8870  000AF0  0E43               	movlw	67
  8871  000AF2  0100               	movlb	0	; () banked
  8872  000AF4  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8873  000AF6  6E08               	movwf	?_readEEPROM,c
  8874  000AF8  6A09               	clrf	?_readEEPROM+1,c
  8875  000AFA  0E00               	movlw	0
  8876  000AFC  2209               	addwfc	?_readEEPROM+1,f,c
  8877  000AFE  EC81  F01F         	call	_readEEPROM	;wreg free
  8878  000B02  0100               	movlb	0	; () banked
  8879  000B04  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8880                           
  8881                           ; BSR set to: 0
  8882                           ;main.c: 1260: if ( val & 0x01 ) {
  8883  000B06  A051               	btfss	vscp_writeAppReg@val,0,c
  8884  000B08  D018               	goto	l10099
  8885                           
  8886                           ; BSR set to: 0
  8887                           ;main.c: 1262: LATCbits.LATC7 = 0;
  8888  000B0A  9E8B               	bcf	3979,7,c	;volatile
  8889                           
  8890                           ;main.c: 1263: bOn = 0;
  8891  000B0C  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8892                           
  8893                           ; BSR set to: 0
  8894                           ;main.c: 1265: relay_pulse_flags |= 0x08;
  8895  000B0E  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  8896                           
  8897                           ; BSR set to: 0
  8898                           ;main.c: 1266: relay_pulse_timer[ 3 ] =
  8899                           ;main.c: 1267: readEEPROM( 0x43 + 24) * 256 +
  8900                           ;main.c: 1268: readEEPROM( 0x43 + 25);
  8901  000B10  6A09               	clrf	?_readEEPROM+1,c
  8902  000B12  0E5C               	movlw	92
  8903  000B14  6E08               	movwf	?_readEEPROM,c
  8904  000B16  EC81  F01F         	call	_readEEPROM	;wreg free
  8905  000B1A  0100               	movlb	0	; () banked
  8906  000B1C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8907  000B1E  6A09               	clrf	?_readEEPROM+1,c
  8908  000B20  0E5B               	movlw	91
  8909  000B22  6E08               	movwf	?_readEEPROM,c
  8910  000B24  EC81  F01F         	call	_readEEPROM	;wreg free
  8911  000B28  0100               	movlb	0	; () banked
  8912  000B2A  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8913  000B2C  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8914  000B2E  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8915  000B30  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8916  000B32  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  8917  000B34  0E00               	movlw	0
  8918  000B36  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8919  000B38  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  8920  000B3A                     l10099:
  8921                           
  8922                           ; BSR set to: 0
  8923                           ;main.c: 1269: }
  8924                           ;main.c: 1271: if ( val & 0x04 ) {
  8925  000B3A  B451               	btfsc	vscp_writeAppReg@val,2,c
  8926  000B3C  D654               	goto	l9969
  8927  000B3E  D20F               	goto	l10217
  8928  000B40                     l10103:
  8929                           
  8930                           ; BSR set to: 0
  8931                           ;main.c: 1280: writeEEPROM( 0x43 + reg, val );
  8932  000B40  0E43               	movlw	67
  8933  000B42  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8934  000B44  6E08               	movwf	?_writeEEPROM,c
  8935  000B46  6A09               	clrf	?_writeEEPROM+1,c
  8936  000B48  0E00               	movlw	0
  8937  000B4A  2209               	addwfc	?_writeEEPROM+1,f,c
  8938  000B4C  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8939  000B50  EC59  F01E         	call	_writeEEPROM	;wreg free
  8940                           
  8941                           ;main.c: 1281: rv = readEEPROM( 0x43 + reg );
  8942  000B54  0E43               	movlw	67
  8943  000B56  0100               	movlb	0	; () banked
  8944  000B58  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8945  000B5A  6E08               	movwf	?_readEEPROM,c
  8946  000B5C  6A09               	clrf	?_readEEPROM+1,c
  8947  000B5E  0E00               	movlw	0
  8948  000B60  2209               	addwfc	?_readEEPROM+1,f,c
  8949  000B62  EC81  F01F         	call	_readEEPROM	;wreg free
  8950  000B66  0100               	movlb	0	; () banked
  8951  000B68  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;main.c: 1283: if ( val & 0x01 ) {
  8955  000B6A  A051               	btfss	vscp_writeAppReg@val,0,c
  8956  000B6C  D018               	goto	l10113
  8957                           
  8958                           ; BSR set to: 0
  8959                           ;main.c: 1285: LATCbits.LATC6 = 0;
  8960  000B6E  9C8B               	bcf	3979,6,c	;volatile
  8961                           
  8962                           ;main.c: 1286: bOn = 0;
  8963  000B70  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;main.c: 1288: relay_pulse_flags |= 0x10;
  8967  000B72  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  8968                           
  8969                           ; BSR set to: 0
  8970                           ;main.c: 1289: relay_pulse_timer[ 4 ] =
  8971                           ;main.c: 1290: readEEPROM( 0x43 + 26) * 256 +
  8972                           ;main.c: 1291: readEEPROM( 0x43 + 27);
  8973  000B74  6A09               	clrf	?_readEEPROM+1,c
  8974  000B76  0E5E               	movlw	94
  8975  000B78  6E08               	movwf	?_readEEPROM,c
  8976  000B7A  EC81  F01F         	call	_readEEPROM	;wreg free
  8977  000B7E  0100               	movlb	0	; () banked
  8978  000B80  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8979  000B82  6A09               	clrf	?_readEEPROM+1,c
  8980  000B84  0E5D               	movlw	93
  8981  000B86  6E08               	movwf	?_readEEPROM,c
  8982  000B88  EC81  F01F         	call	_readEEPROM	;wreg free
  8983  000B8C  0100               	movlb	0	; () banked
  8984  000B8E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8985  000B90  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8986  000B92  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8987  000B94  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8988  000B96  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  8989  000B98  0E00               	movlw	0
  8990  000B9A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8991  000B9C  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  8992  000B9E                     l10113:
  8993                           
  8994                           ; BSR set to: 0
  8995                           ;main.c: 1292: }
  8996                           ;main.c: 1294: if ( val & 0x04 ) {
  8997  000B9E  B451               	btfsc	vscp_writeAppReg@val,2,c
  8998  000BA0  D654               	goto	l9989
  8999  000BA2  D1DD               	goto	l10217
  9000  000BA4                     l10117:
  9001                           
  9002                           ; BSR set to: 0
  9003                           ;main.c: 1303: writeEEPROM( 0x43 + reg, val );
  9004  000BA4  0E43               	movlw	67
  9005  000BA6  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9006  000BA8  6E08               	movwf	?_writeEEPROM,c
  9007  000BAA  6A09               	clrf	?_writeEEPROM+1,c
  9008  000BAC  0E00               	movlw	0
  9009  000BAE  2209               	addwfc	?_writeEEPROM+1,f,c
  9010  000BB0  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9011  000BB4  EC59  F01E         	call	_writeEEPROM	;wreg free
  9012                           
  9013                           ;main.c: 1304: rv = readEEPROM( 0x43 + reg );
  9014  000BB8  0E43               	movlw	67
  9015  000BBA  0100               	movlb	0	; () banked
  9016  000BBC  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9017  000BBE  6E08               	movwf	?_readEEPROM,c
  9018  000BC0  6A09               	clrf	?_readEEPROM+1,c
  9019  000BC2  0E00               	movlw	0
  9020  000BC4  2209               	addwfc	?_readEEPROM+1,f,c
  9021  000BC6  EC81  F01F         	call	_readEEPROM	;wreg free
  9022  000BCA  0100               	movlb	0	; () banked
  9023  000BCC  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9024                           
  9025                           ; BSR set to: 0
  9026                           ;main.c: 1306: if ( val & 0x01 ) {
  9027  000BCE  A051               	btfss	vscp_writeAppReg@val,0,c
  9028  000BD0  D018               	goto	l10127
  9029                           
  9030                           ; BSR set to: 0
  9031                           ;main.c: 1308: LATCbits.LATC5 = 0;
  9032  000BD2  9A8B               	bcf	3979,5,c	;volatile
  9033                           
  9034                           ;main.c: 1309: bOn = 0;
  9035  000BD4  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9036                           
  9037                           ; BSR set to: 0
  9038                           ;main.c: 1311: relay_pulse_flags |= 0x20;
  9039  000BD6  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  9040                           
  9041                           ; BSR set to: 0
  9042                           ;main.c: 1312: relay_pulse_timer[ 5 ] =
  9043                           ;main.c: 1313: readEEPROM( 0x43 + 28) * 256 +
  9044                           ;main.c: 1314: readEEPROM( 0x43 + 29);
  9045  000BD8  6A09               	clrf	?_readEEPROM+1,c
  9046  000BDA  0E60               	movlw	96
  9047  000BDC  6E08               	movwf	?_readEEPROM,c
  9048  000BDE  EC81  F01F         	call	_readEEPROM	;wreg free
  9049  000BE2  0100               	movlb	0	; () banked
  9050  000BE4  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9051  000BE6  6A09               	clrf	?_readEEPROM+1,c
  9052  000BE8  0E5F               	movlw	95
  9053  000BEA  6E08               	movwf	?_readEEPROM,c
  9054  000BEC  EC81  F01F         	call	_readEEPROM	;wreg free
  9055  000BF0  0100               	movlb	0	; () banked
  9056  000BF2  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9057  000BF4  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9058  000BF6  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9059  000BF8  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9060  000BFA  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9061  000BFC  0E00               	movlw	0
  9062  000BFE  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9063  000C00  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9064  000C02                     l10127:
  9065                           
  9066                           ; BSR set to: 0
  9067                           ;main.c: 1315: }
  9068                           ;main.c: 1317: if ( val & 0x04 ) {
  9069  000C02  B451               	btfsc	vscp_writeAppReg@val,2,c
  9070  000C04  D654               	goto	l10009
  9071  000C06  D1AB               	goto	l10217
  9072  000C08                     l10131:
  9073                           
  9074                           ; BSR set to: 0
  9075                           ;main.c: 1326: writeEEPROM( 0x43 + reg, val );
  9076  000C08  0E43               	movlw	67
  9077  000C0A  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9078  000C0C  6E08               	movwf	?_writeEEPROM,c
  9079  000C0E  6A09               	clrf	?_writeEEPROM+1,c
  9080  000C10  0E00               	movlw	0
  9081  000C12  2209               	addwfc	?_writeEEPROM+1,f,c
  9082  000C14  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9083  000C18  EC59  F01E         	call	_writeEEPROM	;wreg free
  9084                           
  9085                           ;main.c: 1327: rv = readEEPROM( 0x43 + reg );
  9086  000C1C  0E43               	movlw	67
  9087  000C1E  0100               	movlb	0	; () banked
  9088  000C20  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9089  000C22  6E08               	movwf	?_readEEPROM,c
  9090  000C24  6A09               	clrf	?_readEEPROM+1,c
  9091  000C26  0E00               	movlw	0
  9092  000C28  2209               	addwfc	?_readEEPROM+1,f,c
  9093  000C2A  EC81  F01F         	call	_readEEPROM	;wreg free
  9094  000C2E  0100               	movlb	0	; () banked
  9095  000C30  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9096                           
  9097                           ; BSR set to: 0
  9098                           ;main.c: 1329: if ( val & 0x01 ) {
  9099  000C32  A051               	btfss	vscp_writeAppReg@val,0,c
  9100  000C34  D018               	goto	l10141
  9101                           
  9102                           ; BSR set to: 0
  9103                           ;main.c: 1331: LATCbits.LATC4 = 0;
  9104  000C36  988B               	bcf	3979,4,c	;volatile
  9105                           
  9106                           ;main.c: 1332: bOn = 0;
  9107  000C38  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9108                           
  9109                           ; BSR set to: 0
  9110                           ;main.c: 1334: relay_pulse_flags |= 0x40;
  9111  000C3A  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  9112                           
  9113                           ; BSR set to: 0
  9114                           ;main.c: 1335: relay_pulse_timer[ 6 ] =
  9115                           ;main.c: 1336: readEEPROM( 0x43 + 30) * 256 +
  9116                           ;main.c: 1337: readEEPROM( 0x43 + 31);
  9117  000C3C  6A09               	clrf	?_readEEPROM+1,c
  9118  000C3E  0E62               	movlw	98
  9119  000C40  6E08               	movwf	?_readEEPROM,c
  9120  000C42  EC81  F01F         	call	_readEEPROM	;wreg free
  9121  000C46  0100               	movlb	0	; () banked
  9122  000C48  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9123  000C4A  6A09               	clrf	?_readEEPROM+1,c
  9124  000C4C  0E61               	movlw	97
  9125  000C4E  6E08               	movwf	?_readEEPROM,c
  9126  000C50  EC81  F01F         	call	_readEEPROM	;wreg free
  9127  000C54  0100               	movlb	0	; () banked
  9128  000C56  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9129  000C58  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9130  000C5A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9131  000C5C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9132  000C5E  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9133  000C60  0E00               	movlw	0
  9134  000C62  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9135  000C64  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9136  000C66                     l10141:
  9137                           
  9138                           ; BSR set to: 0
  9139                           ;main.c: 1338: }
  9140                           ;main.c: 1340: if ( val & 0x04 ) {
  9141  000C66  B451               	btfsc	vscp_writeAppReg@val,2,c
  9142  000C68  D654               	goto	l10029
  9143  000C6A  D179               	goto	l10217
  9144  000C6C                     l10147:
  9145                           
  9146                           ; BSR set to: 0
  9147  000C6C  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9148                           
  9149                           ; Switch size 1, requested type "speed"
  9150                           ; Number of cases is 7, Range of values is 10 to 16
  9151                           ; switch strategies available:
  9152                           ; Name         Instructions Cycles
  9153                           ; simple_byte           22    12 (average)
  9154                           ;	Chosen strategy is simple_byte
  9155  000C6E  0A0A               	xorlw	10	; case 10
  9156  000C70  E101 D689          	bz	l10047
  9157  000C74  0A01               	xorlw	1	; case 11
  9158  000C76  E101 D6B8          	bz	l10061
  9159  000C7A  0A07               	xorlw	7	; case 12
  9160  000C7C  E101 D6FC          	bz	l10075
  9161  000C80  0A01               	xorlw	1	; case 13
  9162  000C82  E101 D72B          	bz	l10089
  9163  000C86  0A03               	xorlw	3	; case 14
  9164  000C88  E101 D75A          	bz	l10103
  9165  000C8C  0A01               	xorlw	1	; case 15
  9166  000C8E  E08A               	bz	l10117
  9167  000C90  0A1F               	xorlw	31	; case 16
  9168  000C92  E0BA               	bz	l10131
  9169  000C94  D164               	goto	l10217
  9170  000C96                     l10149:
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;main.c: 1351: else if ( (reg >= 18 ) &&
  9174                           ;main.c: 1352: (reg <= 33 ) ) {
  9175  000C96  0E11               	movlw	17
  9176  000C98  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9177  000C9A  D0DE               	goto	l10175
  9178                           
  9179                           ; BSR set to: 0
  9180  000C9C  0E22               	movlw	34
  9181  000C9E  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9182  000CA0  D0DB               	goto	l10175
  9183                           
  9184                           ; BSR set to: 0
  9185                           ;main.c: 1355: writeEEPROM( 0x43 + reg, val );
  9186  000CA2  0E43               	movlw	67
  9187  000CA4  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9188  000CA6  6E08               	movwf	?_writeEEPROM,c
  9189  000CA8  6A09               	clrf	?_writeEEPROM+1,c
  9190  000CAA  0E00               	movlw	0
  9191  000CAC  2209               	addwfc	?_writeEEPROM+1,f,c
  9192  000CAE  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9193  000CB2  EC59  F01E         	call	_writeEEPROM	;wreg free
  9194                           
  9195                           ;main.c: 1356: rv = readEEPROM( 0x43 + reg );
  9196  000CB6  0E43               	movlw	67
  9197  000CB8  0100               	movlb	0	; () banked
  9198  000CBA  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9199  000CBC  6E08               	movwf	?_readEEPROM,c
  9200  000CBE  6A09               	clrf	?_readEEPROM+1,c
  9201  000CC0  0E00               	movlw	0
  9202  000CC2  2209               	addwfc	?_readEEPROM+1,f,c
  9203  000CC4  EC81  F01F         	call	_readEEPROM	;wreg free
  9204  000CC8  0100               	movlb	0	; () banked
  9205  000CCA  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9206                           
  9207                           ;main.c: 1360: switch ( reg ) {
  9208  000CCC  D0B0               	goto	l10173
  9209  000CCE                     l10155:
  9210                           
  9211                           ; BSR set to: 0
  9212                           ;main.c: 1363: relay_pulse_timer[ 0 ] =
  9213                           ;main.c: 1364: readEEPROM( 0x43 + 18) * 256 +
  9214                           ;main.c: 1365: readEEPROM( 0x43 + 19);
  9215  000CCE  6A09               	clrf	?_readEEPROM+1,c
  9216  000CD0  0E56               	movlw	86
  9217  000CD2  6E08               	movwf	?_readEEPROM,c
  9218  000CD4  EC81  F01F         	call	_readEEPROM	;wreg free
  9219  000CD8  0100               	movlb	0	; () banked
  9220  000CDA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9221  000CDC  6A09               	clrf	?_readEEPROM+1,c
  9222  000CDE  0E55               	movlw	85
  9223  000CE0  6E08               	movwf	?_readEEPROM,c
  9224  000CE2  EC81  F01F         	call	_readEEPROM	;wreg free
  9225  000CE6  0100               	movlb	0	; () banked
  9226  000CE8  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9227  000CEA  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9228  000CEC  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9229  000CEE  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9230  000CF0  6F70               	movwf	_relay_pulse_timer& (0+255),b
  9231  000CF2  0E00               	movlw	0
  9232  000CF4  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9233  000CF6  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  9234                           
  9235                           ;main.c: 1366: break;
  9236  000CF8  D132               	goto	l10217
  9237  000CFA                     l10157:
  9238                           
  9239                           ; BSR set to: 0
  9240                           ;main.c: 1369: relay_pulse_timer[ 1 ] =
  9241                           ;main.c: 1370: readEEPROM( 0x43 + 20) * 256 +
  9242                           ;main.c: 1371: readEEPROM( 0x43 + 21);
  9243  000CFA  6A09               	clrf	?_readEEPROM+1,c
  9244  000CFC  0E58               	movlw	88
  9245  000CFE  6E08               	movwf	?_readEEPROM,c
  9246  000D00  EC81  F01F         	call	_readEEPROM	;wreg free
  9247  000D04  0100               	movlb	0	; () banked
  9248  000D06  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9249  000D08  6A09               	clrf	?_readEEPROM+1,c
  9250  000D0A  0E57               	movlw	87
  9251  000D0C  6E08               	movwf	?_readEEPROM,c
  9252  000D0E  EC81  F01F         	call	_readEEPROM	;wreg free
  9253  000D12  0100               	movlb	0	; () banked
  9254  000D14  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9255  000D16  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9256  000D18  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9257  000D1A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9258  000D1C  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  9259  000D1E  0E00               	movlw	0
  9260  000D20  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9261  000D22  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  9262                           
  9263                           ;main.c: 1372: break;
  9264  000D24  D11C               	goto	l10217
  9265  000D26                     l10159:
  9266                           
  9267                           ; BSR set to: 0
  9268                           ;main.c: 1375: relay_pulse_timer[ 2 ] =
  9269                           ;main.c: 1376: readEEPROM( 0x43 + 22) * 256 +
  9270                           ;main.c: 1377: readEEPROM( 0x43 + 23);
  9271  000D26  6A09               	clrf	?_readEEPROM+1,c
  9272  000D28  0E5A               	movlw	90
  9273  000D2A  6E08               	movwf	?_readEEPROM,c
  9274  000D2C  EC81  F01F         	call	_readEEPROM	;wreg free
  9275  000D30  0100               	movlb	0	; () banked
  9276  000D32  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9277  000D34  6A09               	clrf	?_readEEPROM+1,c
  9278  000D36  0E59               	movlw	89
  9279  000D38  6E08               	movwf	?_readEEPROM,c
  9280  000D3A  EC81  F01F         	call	_readEEPROM	;wreg free
  9281  000D3E  0100               	movlb	0	; () banked
  9282  000D40  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9283  000D42  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9284  000D44  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9285  000D46  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9286  000D48  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  9287  000D4A  0E00               	movlw	0
  9288  000D4C  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9289  000D4E  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  9290                           
  9291                           ;main.c: 1378: break;
  9292  000D50  D106               	goto	l10217
  9293  000D52                     l10161:
  9294                           
  9295                           ; BSR set to: 0
  9296                           ;main.c: 1381: relay_pulse_timer[ 3 ] =
  9297                           ;main.c: 1382: readEEPROM( 0x43 + 24) * 256 +
  9298                           ;main.c: 1383: readEEPROM( 0x43 + 25);
  9299  000D52  6A09               	clrf	?_readEEPROM+1,c
  9300  000D54  0E5C               	movlw	92
  9301  000D56  6E08               	movwf	?_readEEPROM,c
  9302  000D58  EC81  F01F         	call	_readEEPROM	;wreg free
  9303  000D5C  0100               	movlb	0	; () banked
  9304  000D5E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9305  000D60  6A09               	clrf	?_readEEPROM+1,c
  9306  000D62  0E5B               	movlw	91
  9307  000D64  6E08               	movwf	?_readEEPROM,c
  9308  000D66  EC81  F01F         	call	_readEEPROM	;wreg free
  9309  000D6A  0100               	movlb	0	; () banked
  9310  000D6C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9311  000D6E  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9312  000D70  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9313  000D72  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9314  000D74  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  9315  000D76  0E00               	movlw	0
  9316  000D78  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9317  000D7A  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  9318                           
  9319                           ;main.c: 1384: break;
  9320  000D7C  D0F0               	goto	l10217
  9321  000D7E                     l10163:
  9322                           
  9323                           ; BSR set to: 0
  9324                           ;main.c: 1387: relay_pulse_timer[ 4 ] =
  9325                           ;main.c: 1388: readEEPROM( 0x43 + 26) * 256 +
  9326                           ;main.c: 1389: readEEPROM( 0x43 + 27);
  9327  000D7E  6A09               	clrf	?_readEEPROM+1,c
  9328  000D80  0E5E               	movlw	94
  9329  000D82  6E08               	movwf	?_readEEPROM,c
  9330  000D84  EC81  F01F         	call	_readEEPROM	;wreg free
  9331  000D88  0100               	movlb	0	; () banked
  9332  000D8A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9333  000D8C  6A09               	clrf	?_readEEPROM+1,c
  9334  000D8E  0E5D               	movlw	93
  9335  000D90  6E08               	movwf	?_readEEPROM,c
  9336  000D92  EC81  F01F         	call	_readEEPROM	;wreg free
  9337  000D96  0100               	movlb	0	; () banked
  9338  000D98  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9339  000D9A  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9340  000D9C  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9341  000D9E  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9342  000DA0  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9343  000DA2  0E00               	movlw	0
  9344  000DA4  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9345  000DA6  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9346                           
  9347                           ;main.c: 1390: break;
  9348  000DA8  D0DA               	goto	l10217
  9349  000DAA                     l10165:
  9350                           
  9351                           ; BSR set to: 0
  9352                           ;main.c: 1393: relay_pulse_timer[ 5 ] =
  9353                           ;main.c: 1394: readEEPROM( 0x43 + 28) * 256 +
  9354                           ;main.c: 1395: readEEPROM( 0x43 + 29);
  9355  000DAA  6A09               	clrf	?_readEEPROM+1,c
  9356  000DAC  0E60               	movlw	96
  9357  000DAE  6E08               	movwf	?_readEEPROM,c
  9358  000DB0  EC81  F01F         	call	_readEEPROM	;wreg free
  9359  000DB4  0100               	movlb	0	; () banked
  9360  000DB6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9361  000DB8  6A09               	clrf	?_readEEPROM+1,c
  9362  000DBA  0E5F               	movlw	95
  9363  000DBC  6E08               	movwf	?_readEEPROM,c
  9364  000DBE  EC81  F01F         	call	_readEEPROM	;wreg free
  9365  000DC2  0100               	movlb	0	; () banked
  9366  000DC4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9367  000DC6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9368  000DC8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9369  000DCA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9370  000DCC  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9371  000DCE  0E00               	movlw	0
  9372  000DD0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9373  000DD2  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9374                           
  9375                           ;main.c: 1396: break;
  9376  000DD4  D0C4               	goto	l10217
  9377  000DD6                     l10167:
  9378                           
  9379                           ; BSR set to: 0
  9380                           ;main.c: 1399: relay_pulse_timer[ 6 ] =
  9381                           ;main.c: 1400: readEEPROM( 0x43 + 30) * 256 +
  9382                           ;main.c: 1401: readEEPROM( 0x43 + 31);
  9383  000DD6  6A09               	clrf	?_readEEPROM+1,c
  9384  000DD8  0E62               	movlw	98
  9385  000DDA  6E08               	movwf	?_readEEPROM,c
  9386  000DDC  EC81  F01F         	call	_readEEPROM	;wreg free
  9387  000DE0  0100               	movlb	0	; () banked
  9388  000DE2  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9389  000DE4  6A09               	clrf	?_readEEPROM+1,c
  9390  000DE6  0E61               	movlw	97
  9391  000DE8  6E08               	movwf	?_readEEPROM,c
  9392  000DEA  EC81  F01F         	call	_readEEPROM	;wreg free
  9393  000DEE  0100               	movlb	0	; () banked
  9394  000DF0  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9395  000DF2  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9396  000DF4  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9397  000DF6  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9398  000DF8  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9399  000DFA  0E00               	movlw	0
  9400  000DFC  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9401  000DFE  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9402                           
  9403                           ;main.c: 1402: break;
  9404  000E00  D0AE               	goto	l10217
  9405  000E02                     l10169:
  9406                           
  9407                           ; BSR set to: 0
  9408                           ;main.c: 1405: relay_pulse_timer[ 7 ] =
  9409                           ;main.c: 1406: readEEPROM( 0x43 + 32) * 256 +
  9410                           ;main.c: 1407: readEEPROM( 0x43 + 33);
  9411  000E02  6A09               	clrf	?_readEEPROM+1,c
  9412  000E04  0E64               	movlw	100
  9413  000E06  6E08               	movwf	?_readEEPROM,c
  9414  000E08  EC81  F01F         	call	_readEEPROM	;wreg free
  9415  000E0C  0100               	movlb	0	; () banked
  9416  000E0E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9417  000E10  6A09               	clrf	?_readEEPROM+1,c
  9418  000E12  0E63               	movlw	99
  9419  000E14  6E08               	movwf	?_readEEPROM,c
  9420  000E16  EC81  F01F         	call	_readEEPROM	;wreg free
  9421  000E1A  0100               	movlb	0	; () banked
  9422  000E1C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9423  000E1E  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9424  000E20  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9425  000E22  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9426  000E24  6F7E               	movwf	(_relay_pulse_timer+14)& (0+255),b
  9427  000E26  0E00               	movlw	0
  9428  000E28  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9429  000E2A  6F7F               	movwf	(_relay_pulse_timer+15)& (0+255),b
  9430                           
  9431                           ;main.c: 1408: break;
  9432  000E2C  D098               	goto	l10217
  9433  000E2E                     l10173:
  9434                           
  9435                           ; BSR set to: 0
  9436  000E2E  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9437                           
  9438                           ; Switch size 1, requested type "speed"
  9439                           ; Number of cases is 8, Range of values is 19 to 33
  9440                           ; switch strategies available:
  9441                           ; Name         Instructions Cycles
  9442                           ; simple_byte           25    13 (average)
  9443                           ;	Chosen strategy is simple_byte
  9444  000E30  0A13               	xorlw	19	; case 19
  9445  000E32  E101 D74C          	bz	l10155
  9446  000E36  0A06               	xorlw	6	; case 21
  9447  000E38  E101 D75F          	bz	l10157
  9448  000E3C  0A02               	xorlw	2	; case 23
  9449  000E3E  E101 D772          	bz	l10159
  9450  000E42  0A0E               	xorlw	14	; case 25
  9451  000E44  E086               	bz	l10161
  9452  000E46  0A02               	xorlw	2	; case 27
  9453  000E48  E09A               	bz	l10163
  9454  000E4A  0A06               	xorlw	6	; case 29
  9455  000E4C  E0AE               	bz	l10165
  9456  000E4E  0A02               	xorlw	2	; case 31
  9457  000E50  E0C2               	bz	l10167
  9458  000E52  0A3E               	xorlw	62	; case 33
  9459  000E54  E0D6               	bz	l10169
  9460  000E56  D083               	goto	l10217
  9461  000E58                     l10175:
  9462                           
  9463                           ; BSR set to: 0
  9464                           ;main.c: 1416: else if ( ( reg >= 34 ) &&
  9465                           ;main.c: 1417: ( reg <= 49 ) ) {
  9466  000E58  0E21               	movlw	33
  9467  000E5A  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9468  000E5C  D049               	goto	l10201
  9469                           
  9470                           ; BSR set to: 0
  9471  000E5E  0E32               	movlw	50
  9472  000E60  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9473  000E62  D046               	goto	l10201
  9474                           
  9475                           ; BSR set to: 0
  9476                           ;main.c: 1420: writeEEPROM( 0x43 + reg, val );
  9477  000E64  0E43               	movlw	67
  9478  000E66  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9479  000E68  6E08               	movwf	?_writeEEPROM,c
  9480  000E6A  6A09               	clrf	?_writeEEPROM+1,c
  9481  000E6C  0E00               	movlw	0
  9482  000E6E  2209               	addwfc	?_writeEEPROM+1,f,c
  9483  000E70  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9484  000E74  EC59  F01E         	call	_writeEEPROM	;wreg free
  9485                           
  9486                           ;main.c: 1421: rv = readEEPROM( 0x43 + reg );
  9487  000E78  0E43               	movlw	67
  9488  000E7A  0100               	movlb	0	; () banked
  9489  000E7C  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9490  000E7E  6E08               	movwf	?_readEEPROM,c
  9491  000E80  6A09               	clrf	?_readEEPROM+1,c
  9492  000E82  0E00               	movlw	0
  9493  000E84  2209               	addwfc	?_readEEPROM+1,f,c
  9494  000E86  EC81  F01F         	call	_readEEPROM	;wreg free
  9495  000E8A  0100               	movlb	0	; () banked
  9496  000E8C  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9497                           
  9498                           ;main.c: 1423: switch ( reg ) {
  9499  000E8E  D016               	goto	l10199
  9500  000E90                     l10195:
  9501                           
  9502                           ; BSR set to: 0
  9503                           ;main.c: 1468: relay_protection_timer[ 7 ] =
  9504                           ;main.c: 1469: readEEPROM( 0x43 + 48 ) * 256 +
  9505                           ;main.c: 1470: readEEPROM( 0x43 + 49 );
  9506  000E90  6A09               	clrf	?_readEEPROM+1,c
  9507  000E92  0E74               	movlw	116
  9508  000E94  6E08               	movwf	?_readEEPROM,c
  9509  000E96  EC81  F01F         	call	_readEEPROM	;wreg free
  9510  000E9A  0100               	movlb	0	; () banked
  9511  000E9C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9512  000E9E  6A09               	clrf	?_readEEPROM+1,c
  9513  000EA0  0E73               	movlw	115
  9514  000EA2  6E08               	movwf	?_readEEPROM,c
  9515  000EA4  EC81  F01F         	call	_readEEPROM	;wreg free
  9516  000EA8  0100               	movlb	0	; () banked
  9517  000EAA  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9518  000EAC  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9519  000EAE  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9520  000EB0  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9521  000EB2  6F6E               	movwf	(_relay_protection_timer+14)& (0+255),b
  9522  000EB4  0E00               	movlw	0
  9523  000EB6  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9524  000EB8  6F6F               	movwf	(_relay_protection_timer+15)& (0+255),b
  9525                           
  9526                           ;main.c: 1471: break;
  9527  000EBA  D051               	goto	l10217
  9528  000EBC                     l10199:
  9529                           
  9530                           ; BSR set to: 0
  9531  000EBC  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9532                           
  9533                           ; Switch size 1, requested type "speed"
  9534                           ; Number of cases is 8, Range of values is 35 to 49
  9535                           ; switch strategies available:
  9536                           ; Name         Instructions Cycles
  9537                           ; simple_byte           25    13 (average)
  9538                           ;	Chosen strategy is simple_byte
  9539  000EBE  0A23               	xorlw	35	; case 35
  9540  000EC0  E102 EF60  F003    	bz	l9909
  9541  000EC6  0A06               	xorlw	6	; case 37
  9542  000EC8  E101 D431          	bz	l9929
  9543  000ECC  0A02               	xorlw	2	; case 39
  9544  000ECE  E101 D458          	bz	l9949
  9545  000ED2  0A0E               	xorlw	14	; case 41
  9546  000ED4  E101 D487          	bz	l9969
  9547  000ED8  0A02               	xorlw	2	; case 43
  9548  000EDA  E101 D4B6          	bz	l9989
  9549  000EDE  0A06               	xorlw	6	; case 45
  9550  000EE0  E101 D4E5          	bz	l10009
  9551  000EE4  0A02               	xorlw	2	; case 47
  9552  000EE6  E101 D514          	bz	l10029
  9553  000EEA  0A1E               	xorlw	30	; case 49
  9554  000EEC  E0D1               	bz	l10195
  9555  000EEE  D037               	goto	l10217
  9556  000EF0                     l10201:
  9557                           
  9558                           ; BSR set to: 0
  9559                           ;main.c: 1479: else if ( (reg >= 50 ) && (reg <= 65) ) {
  9560  000EF0  0E31               	movlw	49
  9561  000EF2  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9562  000EF4  D017               	goto	l10207
  9563                           
  9564                           ; BSR set to: 0
  9565  000EF6  0E42               	movlw	66
  9566  000EF8  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9567  000EFA  D014               	goto	l10207
  9568                           
  9569                           ; BSR set to: 0
  9570                           ;main.c: 1482: writeEEPROM( 0x43 + reg, val );
  9571  000EFC  0E43               	movlw	67
  9572  000EFE  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9573  000F00  6E08               	movwf	?_writeEEPROM,c
  9574  000F02  6A09               	clrf	?_writeEEPROM+1,c
  9575  000F04  0E00               	movlw	0
  9576  000F06  2209               	addwfc	?_writeEEPROM+1,f,c
  9577  000F08  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9578  000F0C  EC59  F01E         	call	_writeEEPROM	;wreg free
  9579                           
  9580                           ;main.c: 1483: rv = readEEPROM( 0x43 + reg );
  9581  000F10  0E43               	movlw	67
  9582  000F12  0100               	movlb	0	; () banked
  9583  000F14  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9584  000F16  6E08               	movwf	?_readEEPROM,c
  9585  000F18  6A09               	clrf	?_readEEPROM+1,c
  9586  000F1A  0E00               	movlw	0
  9587  000F1C  2209               	addwfc	?_readEEPROM+1,f,c
  9588  000F1E  EC81  F01F         	call	_readEEPROM	;wreg free
  9589  000F22  D01B               	goto	L25
  9590  000F24                     l10207:
  9591                           
  9592                           ; BSR set to: 0
  9593                           ;main.c: 1486: else if ( (reg >= 72) &&
  9594                           ;main.c: 1487: (reg < (72 + 7 * 8)) ) {
  9595  000F24  0E47               	movlw	71
  9596  000F26  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9597  000F28  D01A               	goto	l10217
  9598                           
  9599                           ; BSR set to: 0
  9600  000F2A  0E80               	movlw	128
  9601  000F2C  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9602  000F2E  D017               	goto	l10217
  9603                           
  9604                           ; BSR set to: 0
  9605                           ;main.c: 1488: writeEEPROM( 0x43 + reg, val );
  9606  000F30  0E43               	movlw	67
  9607  000F32  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9608  000F34  6E08               	movwf	?_writeEEPROM,c
  9609  000F36  6A09               	clrf	?_writeEEPROM+1,c
  9610  000F38  0E00               	movlw	0
  9611  000F3A  2209               	addwfc	?_writeEEPROM+1,f,c
  9612  000F3C  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9613  000F40  EC59  F01E         	call	_writeEEPROM	;wreg free
  9614                           
  9615                           ;main.c: 1489: calculateSetFilterMask();
  9616  000F44  ECF6  F00A         	call	_calculateSetFilterMask	;wreg free
  9617                           
  9618                           ;main.c: 1490: rv = readEEPROM( 0x43 + reg );
  9619  000F48  0E43               	movlw	67
  9620  000F4A  0100               	movlb	0	; () banked
  9621  000F4C  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9622  000F4E  6E08               	movwf	?_readEEPROM,c
  9623  000F50  6A09               	clrf	?_readEEPROM+1,c
  9624  000F52  0E00               	movlw	0
  9625  000F54  2209               	addwfc	?_readEEPROM+1,f,c
  9626  000F56  EC81  F01F         	call	_readEEPROM	;wreg free
  9627  000F5A                     L25:
  9628  000F5A  0100               	movlb	0	; () banked
  9629  000F5C  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9630  000F5E                     l10217:
  9631                           
  9632                           ; BSR set to: 0
  9633                           ;main.c: 1491: }
  9634                           ;main.c: 1497: if ( bInfoEvent ) {
  9635  000F5E  51CA               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
  9636  000F60  E035               	bz	l10237
  9637                           
  9638                           ; BSR set to: 0
  9639                           ;main.c: 1499: unsigned char val;
  9640                           ;main.c: 1500: val = readEEPROM( 0x43 +
  9641                           ;main.c: 1501: 10 + (reg - 2) );
  9642  000F62  0E4B               	movlw	75
  9643  000F64  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9644  000F66  6E08               	movwf	?_readEEPROM,c
  9645  000F68  6A09               	clrf	?_readEEPROM+1,c
  9646  000F6A  0E00               	movlw	0
  9647  000F6C  2209               	addwfc	?_readEEPROM+1,f,c
  9648  000F6E  EC81  F01F         	call	_readEEPROM	;wreg free
  9649  000F72  0100               	movlb	0	; () banked
  9650  000F74  6FCB               	movwf	vscp_writeAppReg@val_678& (0+255),b
  9651                           
  9652                           ; BSR set to: 0
  9653                           ;main.c: 1503: if ( bOn ) {
  9654  000F76  51CC               	movf	vscp_writeAppReg@bOn& (0+255),w,b
  9655  000F78  E015               	bz	l395
  9656                           
  9657                           ; BSR set to: 0
  9658                           ;main.c: 1505: if ( val & 0x08 ) {
  9659  000F7A  A7CB               	btfss	vscp_writeAppReg@val_678& (0+255),3,b
  9660  000F7C  D008               	goto	l10227
  9661                           
  9662                           ; BSR set to: 0
  9663                           ;main.c: 1506: SendInformationEvent( reg - 2,
  9664                           ;main.c: 1507: 20,
  9665                           ;main.c: 1508: 3 );
  9666  000F7E  0E14               	movlw	20
  9667  000F80  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9668  000F82  0E03               	movlw	3
  9669  000F84  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9670  000F86  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9671  000F88  0FFE               	addlw	254
  9672  000F8A  ECEA  F01C         	call	_SendInformationEvent
  9673  000F8E                     l10227:
  9674                           
  9675                           ; BSR set to: 0
  9676                           ;main.c: 1509: }
  9677                           ;main.c: 1511: if ( val & 0x20 ) {
  9678  000F8E  ABCB               	btfss	vscp_writeAppReg@val_678& (0+255),5,b
  9679  000F90  D01D               	goto	l10237
  9680                           
  9681                           ; BSR set to: 0
  9682                           ;main.c: 1512: SendInformationEvent( reg - 2,
  9683                           ;main.c: 1513: 20,
  9684                           ;main.c: 1514: 25 );
  9685  000F92  0E14               	movlw	20
  9686  000F94  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9687  000F96  0E19               	movlw	25
  9688  000F98  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9689  000F9A  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9690  000F9C  0FFE               	addlw	254
  9691  000F9E  ECEA  F01C         	call	_SendInformationEvent
  9692  000FA2  D014               	goto	l10237
  9693  000FA4                     l395:
  9694                           
  9695                           ; BSR set to: 0
  9696                           ;main.c: 1518: else {
  9697                           ;main.c: 1520: if ( val & 0x10 ) {
  9698  000FA4  A9CB               	btfss	vscp_writeAppReg@val_678& (0+255),4,b
  9699  000FA6  D008               	goto	l10233
  9700                           
  9701                           ; BSR set to: 0
  9702                           ;main.c: 1521: SendInformationEvent( reg - 2,
  9703                           ;main.c: 1522: 20,
  9704                           ;main.c: 1523: 4 );
  9705  000FA8  0E14               	movlw	20
  9706  000FAA  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9707  000FAC  0E04               	movlw	4
  9708  000FAE  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9709  000FB0  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9710  000FB2  0FFE               	addlw	254
  9711  000FB4  ECEA  F01C         	call	_SendInformationEvent
  9712  000FB8                     l10233:
  9713                           
  9714                           ; BSR set to: 0
  9715                           ;main.c: 1524: }
  9716                           ;main.c: 1526: if ( val & 0x40 ) {
  9717  000FB8  ADCB               	btfss	vscp_writeAppReg@val_678& (0+255),6,b
  9718  000FBA  D008               	goto	l10237
  9719                           
  9720                           ; BSR set to: 0
  9721                           ;main.c: 1527: SendInformationEvent( reg - 2,
  9722                           ;main.c: 1528: 20,
  9723                           ;main.c: 1529: 24 );
  9724  000FBC  0E14               	movlw	20
  9725  000FBE  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9726  000FC0  0E18               	movlw	24
  9727  000FC2  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9728  000FC4  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9729  000FC6  0FFE               	addlw	254
  9730  000FC8  ECEA  F01C         	call	_SendInformationEvent
  9731  000FCC                     l10237:
  9732                           
  9733                           ; BSR set to: 0
  9734                           ;main.c: 1530: }
  9735                           ;main.c: 1531: }
  9736                           ;main.c: 1532: }
  9737                           ;main.c: 1534: return rv;
  9738  000FCC  51CD               	movf	vscp_writeAppReg@rv& (0+255),w,b
  9739                           
  9740                           ; BSR set to: 0
  9741  000FCE  0012               	return	
  9742  000FD0                     __end_of_vscp_writeAppReg:
  9743                           	opt stack 0
  9744                           tblptru	equ	0xFF8
  9745                           prodh	equ	0xFF4
  9746                           prodl	equ	0xFF3
  9747                           postinc0	equ	0xFEE
  9748                           wreg	equ	0xFE8
  9749                           indf2	equ	0xFDF
  9750                           postinc2	equ	0xFDE
  9751                           postdec2	equ	0xFDD
  9752                           fsr2h	equ	0xFDA
  9753                           fsr2l	equ	0xFD9
  9754                           status	equ	0xFD8
  9755                           
  9756 ;; *************** function _calculateSetFilterMask *****************
  9757 ;; Defined at:
  9758 ;;		line 2592 in file "../main.c"
  9759 ;; Parameters:    Size  Location     Type
  9760 ;;		None
  9761 ;; Auto vars:     Size  Location     Type
  9762 ;;  rowfilter       4   61[COMRAM] unsigned long 
  9763 ;;  filter          4   57[COMRAM] unsigned long 
  9764 ;;  mask            4   53[COMRAM] unsigned long 
  9765 ;;  rowmask         4   48[COMRAM] unsigned long 
  9766 ;;  i               1   66[COMRAM] unsigned char 
  9767 ;;  j               1   65[COMRAM] unsigned char 
  9768 ;;  lastOID         1   52[COMRAM] unsigned char 
  9769 ;; Return value:  Size  Location     Type
  9770 ;;		None               void
  9771 ;; Registers used:
  9772 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9773 ;; Tracked objects:
  9774 ;;		On entry : 0/0
  9775 ;;		On exit  : 0/0
  9776 ;;		Unchanged: 0/0
  9777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9778 ;;      Params:         0       0       0       0       0       0       0
  9779 ;;      Locals:        19       0       0       0       0       0       0
  9780 ;;      Temps:         31       0       0       0       0       0       0
  9781 ;;      Totals:        50       0       0       0       0       0       0
  9782 ;;Total ram usage:       50 bytes
  9783 ;; Hardware stack levels used:    1
  9784 ;; Hardware stack levels required when called:    3
  9785 ;; This function calls:
  9786 ;;		_readEEPROM
  9787 ;;		_ECANSetOperationMode
  9788 ;;		__CANIDToRegs
  9789 ;; This function is called by:
  9790 ;;		_vscp_writeAppReg
  9791 ;; This function uses a non-reentrant model
  9792 ;;
  9793                           
  9794                           	psect	text27
  9795  0015EC                     __ptext27:
  9796                           	opt stack 0
  9797  0015EC                     _calculateSetFilterMask:
  9798                           	opt stack 24
  9799                           
  9800                           ;main.c: 2593: uint8_t i,j;
  9801                           ;main.c: 2594: uint8_t lastOID;
  9802                           ;main.c: 2595: uint32_t rowmask;
  9803                           ;main.c: 2596: uint32_t rowfilter;
  9804                           ;main.c: 2599: uint32_t mask = 0xffffffff;
  9805                           
  9806                           ; BSR set to: 0
  9807                           ;incstack = 0
  9808                           ;incstack = 0
  9809  0015EC  6836               	setf	calculateSetFilterMask@mask,c
  9810  0015EE  6837               	setf	calculateSetFilterMask@mask+1,c
  9811  0015F0  6838               	setf	calculateSetFilterMask@mask+2,c
  9812  0015F2  6839               	setf	calculateSetFilterMask@mask+3,c
  9813                           
  9814                           ;main.c: 2600: uint32_t filter = 0;
  9815  0015F4  6A3A               	clrf	calculateSetFilterMask@filter,c
  9816  0015F6  6A3B               	clrf	calculateSetFilterMask@filter+1,c
  9817  0015F8  6A3C               	clrf	calculateSetFilterMask@filter+2,c
  9818  0015FA  6A3D               	clrf	calculateSetFilterMask@filter+3,c
  9819                           
  9820                           ;main.c: 2603: for ( i=0; i < 7; i++ ) {
  9821  0015FC  6A43               	clrf	calculateSetFilterMask@i,c
  9822  0015FE                     l8461:
  9823                           
  9824                           ;main.c: 2606: if ( readEEPROM( 0x43 + 8*i + 1 ) & 0x80 ) {
  9825  0015FE  5043               	movf	calculateSetFilterMask@i,w,c
  9826  001600  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
  9827  001602  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
  9828  001604  90D8               	bcf	status,0,c
  9829  001606  3612               	rlcf	??_calculateSetFilterMask,f,c
  9830  001608  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9831  00160A  90D8               	bcf	status,0,c
  9832  00160C  3612               	rlcf	??_calculateSetFilterMask,f,c
  9833  00160E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9834  001610  90D8               	bcf	status,0,c
  9835  001612  3612               	rlcf	??_calculateSetFilterMask,f,c
  9836  001614  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9837  001616  0E44               	movlw	68
  9838  001618  2412               	addwf	??_calculateSetFilterMask,w,c
  9839  00161A  6E08               	movwf	?_readEEPROM,c
  9840  00161C  0E00               	movlw	0
  9841  00161E  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9842  001620  6E09               	movwf	?_readEEPROM+1,c
  9843  001622  EC81  F01F         	call	_readEEPROM	;wreg free
  9844  001626  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9845  001628  AE14               	btfss	??_calculateSetFilterMask+2,7,c
  9846  00162A  D1E8               	goto	l8505
  9847                           
  9848                           ;main.c: 2615: rowmask =
  9849                           ;main.c: 2617: ( (uint32_t)( readEEPROM( 0x43 + 8*i + 1 ) & 2 ) << 23 ) |
  9850                           ;main.c: 2619: ( (uint32_t)readEEPROM( 0x43 + 8*i + 2 ) << 16 ) |
  9851                           ;main.c: 2621: ( (uint32_t)readEEPROM( 0x43 + 8*i + 4 ) << 8 ) |
  9852                           ;main.c: 2623: 0xff;
  9853  00162C  5043               	movf	calculateSetFilterMask@i,w,c
  9854  00162E  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
  9855  001630  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
  9856  001632  90D8               	bcf	status,0,c
  9857  001634  3612               	rlcf	??_calculateSetFilterMask,f,c
  9858  001636  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9859  001638  90D8               	bcf	status,0,c
  9860  00163A  3612               	rlcf	??_calculateSetFilterMask,f,c
  9861  00163C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9862  00163E  90D8               	bcf	status,0,c
  9863  001640  3612               	rlcf	??_calculateSetFilterMask,f,c
  9864  001642  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9865  001644  0E47               	movlw	71
  9866  001646  2412               	addwf	??_calculateSetFilterMask,w,c
  9867  001648  6E08               	movwf	?_readEEPROM,c
  9868  00164A  0E00               	movlw	0
  9869  00164C  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9870  00164E  6E09               	movwf	?_readEEPROM+1,c
  9871  001650  EC81  F01F         	call	_readEEPROM	;wreg free
  9872  001654  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9873  001656  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
  9874  00165A  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
  9875  00165C  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
  9876  00165E  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
  9877  001660  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
  9878  001664  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
  9879  001668  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
  9880  00166C  6A15               	clrf	??_calculateSetFilterMask+3,c
  9881  00166E  5043               	movf	calculateSetFilterMask@i,w,c
  9882  001670  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
  9883  001672  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
  9884  001674  90D8               	bcf	status,0,c
  9885  001676  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9886  001678  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9887  00167A  90D8               	bcf	status,0,c
  9888  00167C  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9889  00167E  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9890  001680  90D8               	bcf	status,0,c
  9891  001682  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9892  001684  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9893  001686  0E45               	movlw	69
  9894  001688  2419               	addwf	??_calculateSetFilterMask+7,w,c
  9895  00168A  6E08               	movwf	?_readEEPROM,c
  9896  00168C  0E00               	movlw	0
  9897  00168E  201A               	addwfc	??_calculateSetFilterMask+8,w,c
  9898  001690  6E09               	movwf	?_readEEPROM+1,c
  9899  001692  EC81  F01F         	call	_readEEPROM	;wreg free
  9900  001696  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
  9901  001698  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
  9902  00169C  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
  9903  00169E  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
  9904  0016A0  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
  9905  0016A2  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
  9906  0016A6  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
  9907  0016AA  6A1D               	clrf	??_calculateSetFilterMask+11,c
  9908  0016AC  6A1C               	clrf	??_calculateSetFilterMask+10,c
  9909  0016AE  5043               	movf	calculateSetFilterMask@i,w,c
  9910  0016B0  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
  9911  0016B2  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
  9912  0016B4  90D8               	bcf	status,0,c
  9913  0016B6  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9914  0016B8  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9915  0016BA  90D8               	bcf	status,0,c
  9916  0016BC  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9917  0016BE  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9918  0016C0  90D8               	bcf	status,0,c
  9919  0016C2  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9920  0016C4  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9921  0016C6  0E44               	movlw	68
  9922  0016C8  2420               	addwf	??_calculateSetFilterMask+14,w,c
  9923  0016CA  6E08               	movwf	?_readEEPROM,c
  9924  0016CC  0E00               	movlw	0
  9925  0016CE  2021               	addwfc	??_calculateSetFilterMask+15,w,c
  9926  0016D0  6E09               	movwf	?_readEEPROM+1,c
  9927  0016D2  EC81  F01F         	call	_readEEPROM	;wreg free
  9928  0016D6  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
  9929  0016D8  0E02               	movlw	2
  9930  0016DA  1622               	andwf	??_calculateSetFilterMask+16,f,c
  9931  0016DC  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
  9932  0016E0  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
  9933  0016E2  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
  9934  0016E4  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
  9935  0016E6  0E17               	movlw	23
  9936  0016E8                     u9815:
  9937  0016E8  90D8               	bcf	status,0,c
  9938  0016EA  3623               	rlcf	??_calculateSetFilterMask+17,f,c
  9939  0016EC  3624               	rlcf	??_calculateSetFilterMask+18,f,c
  9940  0016EE  3625               	rlcf	??_calculateSetFilterMask+19,f,c
  9941  0016F0  3626               	rlcf	??_calculateSetFilterMask+20,f,c
  9942  0016F2  2EE8               	decfsz	wreg,f,c
  9943  0016F4  D7F9               	goto	u9815
  9944  0016F6  501C               	movf	??_calculateSetFilterMask+10,w,c
  9945  0016F8  1023               	iorwf	??_calculateSetFilterMask+17,w,c
  9946  0016FA  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
  9947  0016FC  501D               	movf	??_calculateSetFilterMask+11,w,c
  9948  0016FE  1024               	iorwf	??_calculateSetFilterMask+18,w,c
  9949  001700  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
  9950  001702  501E               	movf	??_calculateSetFilterMask+12,w,c
  9951  001704  1025               	iorwf	??_calculateSetFilterMask+19,w,c
  9952  001706  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
  9953  001708  501F               	movf	??_calculateSetFilterMask+13,w,c
  9954  00170A  1026               	iorwf	??_calculateSetFilterMask+20,w,c
  9955  00170C  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
  9956  00170E  5015               	movf	??_calculateSetFilterMask+3,w,c
  9957  001710  1027               	iorwf	??_calculateSetFilterMask+21,w,c
  9958  001712  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
  9959  001714  5016               	movf	??_calculateSetFilterMask+4,w,c
  9960  001716  1028               	iorwf	??_calculateSetFilterMask+22,w,c
  9961  001718  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
  9962  00171A  5017               	movf	??_calculateSetFilterMask+5,w,c
  9963  00171C  1029               	iorwf	??_calculateSetFilterMask+23,w,c
  9964  00171E  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
  9965  001720  5018               	movf	??_calculateSetFilterMask+6,w,c
  9966  001722  102A               	iorwf	??_calculateSetFilterMask+24,w,c
  9967  001724  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
  9968  001726  0EFF               	movlw	255
  9969  001728  102B               	iorwf	??_calculateSetFilterMask+25,w,c
  9970  00172A  6E31               	movwf	calculateSetFilterMask@rowmask,c
  9971  00172C  502C               	movf	??_calculateSetFilterMask+26,w,c
  9972  00172E  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
  9973  001730  502D               	movf	??_calculateSetFilterMask+27,w,c
  9974  001732  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
  9975  001734  502E               	movf	??_calculateSetFilterMask+28,w,c
  9976  001736  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
  9977                           
  9978                           ;main.c: 2624: ;
  9979                           ;main.c: 2629: rowfilter =
  9980                           ;main.c: 2631: ( (uint32_t)( readEEPROM( 0x43 + 8*i + 1 ) & 1 ) << 24 ) |
  9981                           ;main.c: 2633: ( (uint32_t)readEEPROM( 0x43 + 8*i + 3 ) << 16 ) |
  9982                           ;main.c: 2635: ( (uint32_t)readEEPROM( 0x43 + 8*i + 5 ) << 8 ) |
  9983                           ;main.c: 2638: readEEPROM( 0x43 + 8*i );
  9984  001738  5043               	movf	calculateSetFilterMask@i,w,c
  9985  00173A  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
  9986  00173C  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
  9987  00173E  90D8               	bcf	status,0,c
  9988  001740  3612               	rlcf	??_calculateSetFilterMask,f,c
  9989  001742  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9990  001744  90D8               	bcf	status,0,c
  9991  001746  3612               	rlcf	??_calculateSetFilterMask,f,c
  9992  001748  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9993  00174A  90D8               	bcf	status,0,c
  9994  00174C  3612               	rlcf	??_calculateSetFilterMask,f,c
  9995  00174E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9996  001750  0E48               	movlw	72
  9997  001752  2412               	addwf	??_calculateSetFilterMask,w,c
  9998  001754  6E08               	movwf	?_readEEPROM,c
  9999  001756  0E00               	movlw	0
 10000  001758  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10001  00175A  6E09               	movwf	?_readEEPROM+1,c
 10002  00175C  EC81  F01F         	call	_readEEPROM	;wreg free
 10003  001760  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10004  001762  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 10005  001766  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 10006  001768  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10007  00176A  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 10008  00176C  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 10009  001770  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 10010  001774  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 10011  001778  6A15               	clrf	??_calculateSetFilterMask+3,c
 10012  00177A  5043               	movf	calculateSetFilterMask@i,w,c
 10013  00177C  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 10014  00177E  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 10015  001780  90D8               	bcf	status,0,c
 10016  001782  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10017  001784  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10018  001786  90D8               	bcf	status,0,c
 10019  001788  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10020  00178A  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10021  00178C  90D8               	bcf	status,0,c
 10022  00178E  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10023  001790  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10024  001792  0E46               	movlw	70
 10025  001794  2419               	addwf	??_calculateSetFilterMask+7,w,c
 10026  001796  6E08               	movwf	?_readEEPROM,c
 10027  001798  0E00               	movlw	0
 10028  00179A  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 10029  00179C  6E09               	movwf	?_readEEPROM+1,c
 10030  00179E  EC81  F01F         	call	_readEEPROM	;wreg free
 10031  0017A2  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 10032  0017A4  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 10033  0017A8  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 10034  0017AA  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 10035  0017AC  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 10036  0017AE  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 10037  0017B2  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 10038  0017B6  6A1D               	clrf	??_calculateSetFilterMask+11,c
 10039  0017B8  6A1C               	clrf	??_calculateSetFilterMask+10,c
 10040  0017BA  5043               	movf	calculateSetFilterMask@i,w,c
 10041  0017BC  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 10042  0017BE  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 10043  0017C0  90D8               	bcf	status,0,c
 10044  0017C2  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10045  0017C4  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10046  0017C6  90D8               	bcf	status,0,c
 10047  0017C8  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10048  0017CA  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10049  0017CC  90D8               	bcf	status,0,c
 10050  0017CE  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10051  0017D0  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10052  0017D2  0E44               	movlw	68
 10053  0017D4  2420               	addwf	??_calculateSetFilterMask+14,w,c
 10054  0017D6  6E08               	movwf	?_readEEPROM,c
 10055  0017D8  0E00               	movlw	0
 10056  0017DA  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 10057  0017DC  6E09               	movwf	?_readEEPROM+1,c
 10058  0017DE  EC81  F01F         	call	_readEEPROM	;wreg free
 10059  0017E2  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 10060  0017E4  0E01               	movlw	1
 10061  0017E6  1622               	andwf	??_calculateSetFilterMask+16,f,c
 10062  0017E8  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 10063  0017EC  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 10064  0017EE  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 10065  0017F0  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 10066  0017F2  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
 10067  0017F6  6A25               	clrf	??_calculateSetFilterMask+19,c
 10068  0017F8  6A24               	clrf	??_calculateSetFilterMask+18,c
 10069  0017FA  6A23               	clrf	??_calculateSetFilterMask+17,c
 10070  0017FC  501C               	movf	??_calculateSetFilterMask+10,w,c
 10071  0017FE  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 10072  001800  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 10073  001802  501D               	movf	??_calculateSetFilterMask+11,w,c
 10074  001804  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 10075  001806  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 10076  001808  501E               	movf	??_calculateSetFilterMask+12,w,c
 10077  00180A  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 10078  00180C  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 10079  00180E  501F               	movf	??_calculateSetFilterMask+13,w,c
 10080  001810  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 10081  001812  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 10082  001814  5015               	movf	??_calculateSetFilterMask+3,w,c
 10083  001816  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 10084  001818  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 10085  00181A  5016               	movf	??_calculateSetFilterMask+4,w,c
 10086  00181C  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 10087  00181E  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 10088  001820  5017               	movf	??_calculateSetFilterMask+5,w,c
 10089  001822  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 10090  001824  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 10091  001826  5018               	movf	??_calculateSetFilterMask+6,w,c
 10092  001828  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10093  00182A  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10094  00182C  5043               	movf	calculateSetFilterMask@i,w,c
 10095  00182E  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
 10096  001830  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
 10097  001832  90D8               	bcf	status,0,c
 10098  001834  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10099  001836  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10100  001838  90D8               	bcf	status,0,c
 10101  00183A  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10102  00183C  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10103  00183E  90D8               	bcf	status,0,c
 10104  001840  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10105  001842  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10106  001844  0E43               	movlw	67
 10107  001846  242F               	addwf	??_calculateSetFilterMask+29,w,c
 10108  001848  6E08               	movwf	?_readEEPROM,c
 10109  00184A  0E00               	movlw	0
 10110  00184C  2030               	addwfc	??_calculateSetFilterMask+30,w,c
 10111  00184E  6E09               	movwf	?_readEEPROM+1,c
 10112  001850  EC81  F01F         	call	_readEEPROM	;wreg free
 10113  001854  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10114  001856  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
 10115  001858  502C               	movf	??_calculateSetFilterMask+26,w,c
 10116  00185A  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
 10117  00185C  502D               	movf	??_calculateSetFilterMask+27,w,c
 10118  00185E  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
 10119  001860  502E               	movf	??_calculateSetFilterMask+28,w,c
 10120  001862  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
 10121                           
 10122                           ;main.c: 2640: if ( 0 == i ) filter = rowfilter;
 10123  001864  6643               	tstfsz	calculateSetFilterMask@i,c
 10124  001866  D008               	goto	l8469
 10125  001868  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
 10126  00186C  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
 10127  001870  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
 10128  001874  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
 10129  001878                     l8469:
 10130                           
 10131                           ;main.c: 2644: mask &= rowmask;
 10132  001878  5031               	movf	calculateSetFilterMask@rowmask,w,c
 10133  00187A  1636               	andwf	calculateSetFilterMask@mask,f,c
 10134  00187C  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
 10135  00187E  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10136  001880  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
 10137  001882  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10138  001884  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
 10139  001886  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10140                           
 10141                           ;main.c: 2649: for ( j=0; j<32; j++ ) {
 10142  001888  6A42               	clrf	calculateSetFilterMask@j,c
 10143  00188A                     l8477:
 10144                           
 10145                           ;main.c: 2651: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
 10146  00188A  5042               	movf	calculateSetFilterMask@j,w,c
 10147  00188C  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
 10148  001890  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
 10149  001894  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
 10150  001898  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
 10151  00189C  2AE8               	incf	wreg,f,c
 10152  00189E  D005               	goto	u9830
 10153  0018A0                     u9835:
 10154  0018A0  90D8               	bcf	status,0,c
 10155  0018A2  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10156  0018A4  3214               	rrcf	??_calculateSetFilterMask+2,f,c
 10157  0018A6  3213               	rrcf	??_calculateSetFilterMask+1,f,c
 10158  0018A8  3212               	rrcf	??_calculateSetFilterMask,f,c
 10159  0018AA                     u9830:
 10160  0018AA  2EE8               	decfsz	wreg,f,c
 10161  0018AC  D7F9               	goto	u9835
 10162  0018AE  0E01               	movlw	1
 10163  0018B0  1612               	andwf	??_calculateSetFilterMask,f,c
 10164  0018B2  5042               	movf	calculateSetFilterMask@j,w,c
 10165  0018B4  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
 10166  0018B8  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
 10167  0018BC  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
 10168  0018C0  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
 10169  0018C4  2AE8               	incf	wreg,f,c
 10170  0018C6  D005               	goto	u9840
 10171  0018C8                     u9845:
 10172  0018C8  90D8               	bcf	status,0,c
 10173  0018CA  3219               	rrcf	??_calculateSetFilterMask+7,f,c
 10174  0018CC  3218               	rrcf	??_calculateSetFilterMask+6,f,c
 10175  0018CE  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10176  0018D0  3216               	rrcf	??_calculateSetFilterMask+4,f,c
 10177  0018D2                     u9840:
 10178  0018D2  2EE8               	decfsz	wreg,f,c
 10179  0018D4  D7F9               	goto	u9845
 10180  0018D6  5016               	movf	??_calculateSetFilterMask+4,w,c
 10181  0018D8  0B01               	andlw	1
 10182  0018DA  1812               	xorwf	??_calculateSetFilterMask,w,c
 10183  0018DC  E01D               	bz	l8481
 10184                           
 10185                           ;main.c: 2652: mask &= ~(1<<j);
 10186  0018DE  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
 10187  0018E2  0E01               	movlw	1
 10188  0018E4  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10189  0018E6  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10190  0018E8  2A12               	incf	??_calculateSetFilterMask,f,c
 10191  0018EA  D003               	goto	u9864
 10192  0018EC                     u9865:
 10193  0018EC  90D8               	bcf	status,0,c
 10194  0018EE  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10195  0018F0  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10196  0018F2                     u9864:
 10197  0018F2  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10198  0018F4  D7FB               	goto	u9865
 10199  0018F6  1C13               	comf	??_calculateSetFilterMask+1,w,c
 10200  0018F8  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10201  0018FA  1C14               	comf	??_calculateSetFilterMask+2,w,c
 10202  0018FC  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
 10203  0018FE  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10204  001900  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10205  001902  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
 10206  001904  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
 10207  001906  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10208  001908  5015               	movf	??_calculateSetFilterMask+3,w,c
 10209  00190A  1636               	andwf	calculateSetFilterMask@mask,f,c
 10210  00190C  5016               	movf	??_calculateSetFilterMask+4,w,c
 10211  00190E  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10212  001910  5017               	movf	??_calculateSetFilterMask+5,w,c
 10213  001912  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10214  001914  5018               	movf	??_calculateSetFilterMask+6,w,c
 10215  001916  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10216  001918                     l8481:
 10217  001918  2A42               	incf	calculateSetFilterMask@j,f,c
 10218  00191A  0E1F               	movlw	31
 10219  00191C  6442               	cpfsgt	calculateSetFilterMask@j,c
 10220  00191E  D7B5               	goto	l8477
 10221                           
 10222                           ;main.c: 2653: }
 10223                           ;main.c: 2654: }
 10224                           ;main.c: 2660: filter &= rowfilter;
 10225  001920  503E               	movf	calculateSetFilterMask@rowfilter,w,c
 10226  001922  163A               	andwf	calculateSetFilterMask@filter,f,c
 10227  001924  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
 10228  001926  163B               	andwf	calculateSetFilterMask@filter+1,f,c
 10229  001928  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
 10230  00192A  163C               	andwf	calculateSetFilterMask@filter+2,f,c
 10231  00192C  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
 10232  00192E  163D               	andwf	calculateSetFilterMask@filter+3,f,c
 10233                           
 10234                           ;main.c: 2668: }
 10235                           ;main.c: 2670: if (i) {
 10236                           
 10237                           ;main.c: 2663: if ( !readEEPROM( 0x43 + 8*i + 1 ) & 0x40 ) {
 10238  001930  5043               	movf	calculateSetFilterMask@i,w,c
 10239  001932  E04F               	bz	l8501
 10240                           
 10241                           ;main.c: 2673: for (j = 0; j < 8; j++) {
 10242  001934  6A42               	clrf	calculateSetFilterMask@j,c
 10243  001936                     l8495:
 10244                           
 10245                           ;main.c: 2674: if ((lastOID >> i & 1)
 10246                           ;main.c: 2675: != (readEEPROM(0x43 + 8 * i) >> i & 1)) {
 10247  001936  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10248  00193A  5043               	movf	calculateSetFilterMask@i,w,c
 10249  00193C  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10250  00193E  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10251  001940  90D8               	bcf	status,0,c
 10252  001942  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10253  001944  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10254  001946  90D8               	bcf	status,0,c
 10255  001948  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10256  00194A  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10257  00194C  90D8               	bcf	status,0,c
 10258  00194E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10259  001950  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10260  001952  0E43               	movlw	67
 10261  001954  2413               	addwf	??_calculateSetFilterMask+1,w,c
 10262  001956  6E08               	movwf	?_readEEPROM,c
 10263  001958  0E00               	movlw	0
 10264  00195A  2014               	addwfc	??_calculateSetFilterMask+2,w,c
 10265  00195C  6E09               	movwf	?_readEEPROM+1,c
 10266  00195E  EC81  F01F         	call	_readEEPROM	;wreg free
 10267  001962  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10268  001964  2A12               	incf	??_calculateSetFilterMask,f,c
 10269  001966  D002               	goto	u9894
 10270  001968                     u9895:
 10271  001968  90D8               	bcf	status,0,c
 10272  00196A  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10273  00196C                     u9894:
 10274  00196C  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10275  00196E  D7FC               	goto	u9895
 10276  001970  0E01               	movlw	1
 10277  001972  1615               	andwf	??_calculateSetFilterMask+3,f,c
 10278  001974  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 10279  001978  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 10280  00197C  2A16               	incf	??_calculateSetFilterMask+4,f,c
 10281  00197E  D002               	goto	u9904
 10282  001980                     u9905:
 10283  001980  90D8               	bcf	status,0,c
 10284  001982  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10285  001984                     u9904:
 10286  001984  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 10287  001986  D7FC               	goto	u9905
 10288  001988  5017               	movf	??_calculateSetFilterMask+5,w,c
 10289  00198A  0B01               	andlw	1
 10290  00198C  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 10291  00198E  E01D               	bz	l8499
 10292                           
 10293                           ;main.c: 2676: mask &= (1 << i);
 10294  001990  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10295  001994  0E01               	movlw	1
 10296  001996  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10297  001998  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10298  00199A  2A12               	incf	??_calculateSetFilterMask,f,c
 10299  00199C  D003               	goto	u9924
 10300  00199E                     u9925:
 10301  00199E  90D8               	bcf	status,0,c
 10302  0019A0  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10303  0019A2  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10304  0019A4                     u9924:
 10305  0019A4  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10306  0019A6  D7FB               	goto	u9925
 10307  0019A8  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 10308  0019AC  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 10309  0019B0  0E00               	movlw	0
 10310  0019B2  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10311  0019B4  0EFF               	movlw	255
 10312  0019B6  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 10313  0019B8  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10314  0019BA  5015               	movf	??_calculateSetFilterMask+3,w,c
 10315  0019BC  1636               	andwf	calculateSetFilterMask@mask,f,c
 10316  0019BE  5016               	movf	??_calculateSetFilterMask+4,w,c
 10317  0019C0  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10318  0019C2  5017               	movf	??_calculateSetFilterMask+5,w,c
 10319  0019C4  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10320  0019C6  5018               	movf	??_calculateSetFilterMask+6,w,c
 10321  0019C8  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10322  0019CA                     l8499:
 10323  0019CA  2A42               	incf	calculateSetFilterMask@j,f,c
 10324  0019CC  0E07               	movlw	7
 10325  0019CE  6442               	cpfsgt	calculateSetFilterMask@j,c
 10326  0019D0  D7B2               	goto	l8495
 10327  0019D2                     l8501:
 10328                           
 10329                           ;main.c: 2677: }
 10330                           ;main.c: 2678: }
 10331                           ;main.c: 2680: lastOID = readEEPROM(0x43 + 8 * i);
 10332  0019D2  5043               	movf	calculateSetFilterMask@i,w,c
 10333  0019D4  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10334  0019D6  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10335  0019D8  90D8               	bcf	status,0,c
 10336  0019DA  3612               	rlcf	??_calculateSetFilterMask,f,c
 10337  0019DC  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10338  0019DE  90D8               	bcf	status,0,c
 10339  0019E0  3612               	rlcf	??_calculateSetFilterMask,f,c
 10340  0019E2  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10341  0019E4  90D8               	bcf	status,0,c
 10342  0019E6  3612               	rlcf	??_calculateSetFilterMask,f,c
 10343  0019E8  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10344  0019EA  0E43               	movlw	67
 10345  0019EC  2412               	addwf	??_calculateSetFilterMask,w,c
 10346  0019EE  6E08               	movwf	?_readEEPROM,c
 10347  0019F0  0E00               	movlw	0
 10348  0019F2  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10349  0019F4  6E09               	movwf	?_readEEPROM+1,c
 10350  0019F6  EC81  F01F         	call	_readEEPROM	;wreg free
 10351  0019FA  6E35               	movwf	calculateSetFilterMask@lastOID,c
 10352  0019FC                     l8505:
 10353  0019FC  2A43               	incf	calculateSetFilterMask@i,f,c
 10354  0019FE  0E06               	movlw	6
 10355  001A00  6443               	cpfsgt	calculateSetFilterMask@i,c
 10356  001A02  D5FD               	goto	l8461
 10357                           
 10358                           ;main.c: 2685: }
 10359                           ;main.c: 2687: }
 10360                           ;main.c: 2688: }
 10361                           ;main.c: 2691: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 10362  001A04  0E80               	movlw	128
 10363  001A06  EC33  F01F         	call	_ECANSetOperationMode
 10364                           
 10365                           ;main.c: 2694: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 10366  001A0A  010F               	movlb	15	; () banked
 10367  001A0C  0E0F               	movlw	15	;volatile
 10368  001A0E  6E09               	movwf	?__CANIDToRegs+1,c
 10369  001A10  0E1C               	movlw	28	;volatile
 10370  001A12  6E08               	movwf	?__CANIDToRegs,c
 10371  001A14  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 10372  001A18  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 10373  001A1C  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 10374  001A20  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 10375  001A24  0E01               	movlw	1
 10376  001A26  6E0E               	movwf	?__CANIDToRegs+6,c
 10377  001A28  EC5B  F017         	call	__CANIDToRegs	;wreg free
 10378                           
 10379                           ;main.c: 2697: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 10380  001A2C  010D               	movlb	13	; () banked
 10381  001A2E  83D4               	bsf	212,1,b	;volatile
 10382                           
 10383                           ; BSR set to: 13
 10384  001A30  010F               	movlb	15	; () banked
 10385  001A32  0E0F               	movlw	15	;volatile
 10386  001A34  6E09               	movwf	?__CANIDToRegs+1,c
 10387  001A36  0E04               	movlw	4	;volatile
 10388  001A38  6E08               	movwf	?__CANIDToRegs,c
 10389  001A3A  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 10390  001A3E  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 10391  001A42  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 10392  001A46  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 10393  001A4A  0E01               	movlw	1
 10394  001A4C  6E0E               	movwf	?__CANIDToRegs+6,c
 10395  001A4E  EC5B  F017         	call	__CANIDToRegs	;wreg free
 10396                           
 10397                           ;main.c: 2700: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 10398  001A52  0E00               	movlw	0
 10399  001A54  EF33  F01F         	goto	_ECANSetOperationMode
 10400  001A58                     __end_of_calculateSetFilterMask:
 10401                           	opt stack 0
 10402                           tblptru	equ	0xFF8
 10403                           prodh	equ	0xFF4
 10404                           prodl	equ	0xFF3
 10405                           postinc0	equ	0xFEE
 10406                           wreg	equ	0xFE8
 10407                           indf2	equ	0xFDF
 10408                           postinc2	equ	0xFDE
 10409                           postdec2	equ	0xFDD
 10410                           fsr2h	equ	0xFDA
 10411                           fsr2l	equ	0xFD9
 10412                           status	equ	0xFD8
 10413                           
 10414 ;; *************** function _SendInformationEvent *****************
 10415 ;; Defined at:
 10416 ;;		line 1564 in file "../main.c"
 10417 ;; Parameters:    Size  Location     Type
 10418 ;;  idx             1    wreg     unsigned char 
 10419 ;;  eventClass      1   20[BANK0 ] unsigned char 
 10420 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
 10421 ;; Auto vars:     Size  Location     Type
 10422 ;;  idx             1   79[COMRAM] unsigned char 
 10423 ;;  data            3   76[COMRAM] unsigned char [3]
 10424 ;; Return value:  Size  Location     Type
 10425 ;;		None               void
 10426 ;; Registers used:
 10427 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10428 ;; Tracked objects:
 10429 ;;		On entry : F/0
 10430 ;;		On exit  : F/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10433 ;;      Params:         0       2       0       0       0       0       0
 10434 ;;      Locals:         4       0       0       0       0       0       0
 10435 ;;      Temps:          2       0       0       0       0       0       0
 10436 ;;      Totals:         6       2       0       0       0       0       0
 10437 ;;Total ram usage:        8 bytes
 10438 ;; Hardware stack levels used:    1
 10439 ;; Hardware stack levels required when called:    6
 10440 ;; This function calls:
 10441 ;;		_readEEPROM
 10442 ;;		_sendVSCPFrame
 10443 ;; This function is called by:
 10444 ;;		_doApplicationOneSecondWork
 10445 ;;		_vscp_writeAppReg
 10446 ;;		_doActionOn
 10447 ;;		_doActionOff
 10448 ;;		_doActionStatus
 10449 ;;		_doActionToggle
 10450 ;; This function uses a non-reentrant model
 10451 ;;
 10452                           
 10453                           	psect	text28
 10454  0039D4                     __ptext28:
 10455                           	opt stack 0
 10456  0039D4                     _SendInformationEvent:
 10457                           	opt stack 23
 10458                           
 10459                           ;incstack = 0
 10460                           ;incstack = 0
 10461                           ;SendInformationEvent@idx stored from wreg
 10462  0039D4  CFE8 F050          	movff	wreg,SendInformationEvent@idx
 10463                           
 10464                           ; BSR set to: 0
 10465                           ;main.c: 1565: uint8_t data[3];
 10466                           ;main.c: 1578: data[ 0 ] = idx;
 10467  0039D8  C050  F04D         	movff	SendInformationEvent@idx,SendInformationEvent@data
 10468                           
 10469                           ; BSR set to: 0
 10470                           ;main.c: 1579: data[ 1 ] = readEEPROM( 0x43 + 50 + 2*idx );
 10471  0039DC  90D8               	bcf	status,0,c
 10472  0039DE  3450               	rlcf	SendInformationEvent@idx,w,c
 10473  0039E0  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10474  0039E2  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10475  0039E4  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10476  0039E6  0E75               	movlw	117
 10477  0039E8  244B               	addwf	??_SendInformationEvent,w,c
 10478  0039EA  6E08               	movwf	?_readEEPROM,c
 10479  0039EC  0E00               	movlw	0
 10480  0039EE  204C               	addwfc	??_SendInformationEvent+1,w,c
 10481  0039F0  6E09               	movwf	?_readEEPROM+1,c
 10482  0039F2  EC81  F01F         	call	_readEEPROM	;wreg free
 10483  0039F6  6E4E               	movwf	SendInformationEvent@data+1,c
 10484                           
 10485                           ;main.c: 1580: data[ 2 ] = readEEPROM( 0x43 + 51 + 2*idx );
 10486  0039F8  90D8               	bcf	status,0,c
 10487  0039FA  3450               	rlcf	SendInformationEvent@idx,w,c
 10488  0039FC  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10489  0039FE  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10490  003A00  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10491  003A02  0E76               	movlw	118
 10492  003A04  244B               	addwf	??_SendInformationEvent,w,c
 10493  003A06  6E08               	movwf	?_readEEPROM,c
 10494  003A08  0E00               	movlw	0
 10495  003A0A  204C               	addwfc	??_SendInformationEvent+1,w,c
 10496  003A0C  6E09               	movwf	?_readEEPROM+1,c
 10497  003A0E  EC81  F01F         	call	_readEEPROM	;wreg free
 10498  003A12  6E4F               	movwf	SendInformationEvent@data+2,c
 10499                           
 10500                           ;main.c: 1581: sendVSCPFrame( eventClass,
 10501                           ;main.c: 1582: eventTypeId,
 10502                           ;main.c: 1583: vscp_nickname,
 10503                           ;main.c: 1584: 0x03,
 10504                           ;main.c: 1585: 3,
 10505                           ;main.c: 1586: data );
 10506  003A14  0100               	movlb	0	; () banked
 10507  003A16  C0C5  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
 10508  003A1A  6A40               	clrf	?_sendVSCPFrame+1,c
 10509  003A1C  C0C6  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
 10510  003A20  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 10511  003A24  0E03               	movlw	3
 10512  003A26  6E43               	movwf	?_sendVSCPFrame+4,c
 10513  003A28  6E44               	movwf	?_sendVSCPFrame+5,c
 10514  003A2A  0E4D               	movlw	low SendInformationEvent@data
 10515  003A2C  6E45               	movwf	?_sendVSCPFrame+6,c
 10516  003A2E  0E00               	movlw	high SendInformationEvent@data
 10517  003A30  6E46               	movwf	?_sendVSCPFrame+7,c
 10518  003A32  0E0F               	movlw	15
 10519  003A34  6E46               	movwf	?_sendVSCPFrame+7,c
 10520  003A36  0E5F               	movlw	__accesstop+-1
 10521  003A38  6445               	cpfsgt	?_sendVSCPFrame+6,c
 10522  003A3A  6A46               	clrf	?_sendVSCPFrame+7,c
 10523  003A3C  EF3C  F01B         	goto	_sendVSCPFrame	;wreg free
 10524  003A40                     __end_of_SendInformationEvent:
 10525                           	opt stack 0
 10526                           tblptru	equ	0xFF8
 10527                           prodh	equ	0xFF4
 10528                           prodl	equ	0xFF3
 10529                           postinc0	equ	0xFEE
 10530                           wreg	equ	0xFE8
 10531                           indf2	equ	0xFDF
 10532                           postinc2	equ	0xFDE
 10533                           postdec2	equ	0xFDD
 10534                           fsr2h	equ	0xFDA
 10535                           fsr2l	equ	0xFD9
 10536                           status	equ	0xFD8
 10537                           
 10538 ;; *************** function _vscp_readRegister *****************
 10539 ;; Defined at:
 10540 ;;		line 553 in file "../../vscp_firmware/common/vscp_firmware.c"
 10541 ;; Parameters:    Size  Location     Type
 10542 ;;  reg             1    wreg     unsigned char 
 10543 ;; Auto vars:     Size  Location     Type
 10544 ;;  reg             1   13[COMRAM] unsigned char 
 10545 ;; Return value:  Size  Location     Type
 10546 ;;                  1    wreg      unsigned char 
 10547 ;; Registers used:
 10548 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10549 ;; Tracked objects:
 10550 ;;		On entry : F/0
 10551 ;;		On exit  : 0/0
 10552 ;;		Unchanged: 0/0
 10553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10554 ;;      Params:         0       0       0       0       0       0       0
 10555 ;;      Locals:         1       0       0       0       0       0       0
 10556 ;;      Temps:          0       0       0       0       0       0       0
 10557 ;;      Totals:         1       0       0       0       0       0       0
 10558 ;;Total ram usage:        1 bytes
 10559 ;; Hardware stack levels used:    1
 10560 ;; Hardware stack levels required when called:    5
 10561 ;; This function calls:
 10562 ;;		_vscp_readAppReg
 10563 ;;		_vscp_readStdReg
 10564 ;; This function is called by:
 10565 ;;		_vscp_handleProtocolEvent
 10566 ;; This function uses a non-reentrant model
 10567 ;;
 10568                           
 10569                           	psect	text29
 10570  003E04                     __ptext29:
 10571                           	opt stack 0
 10572  003E04                     _vscp_readRegister:
 10573                           	opt stack 24
 10574                           
 10575                           ; BSR set to: 0
 10576                           ;incstack = 0
 10577                           ;incstack = 0
 10578                           ;vscp_readRegister@reg stored from wreg
 10579  003E04  CFE8 F00E          	movff	wreg,vscp_readRegister@reg
 10580                           
 10581                           ; BSR set to: 0
 10582                           ;vscp_firmware.c: 554: if (reg >= 0x80) {
 10583  003E08  0E7F               	movlw	127
 10584  003E0A  640E               	cpfsgt	vscp_readRegister@reg,c
 10585  003E0C  D004               	goto	l8981
 10586                           
 10587                           ; BSR set to: 0
 10588                           ;vscp_firmware.c: 555: return vscp_readStdReg(reg);
 10589  003E0E  500E               	movf	vscp_readRegister@reg,w,c
 10590  003E10  ECA0  F019         	call	_vscp_readStdReg
 10591  003E14  D003               	goto	l1108
 10592  003E16                     l8981:
 10593                           
 10594                           ; BSR set to: 0
 10595                           ;vscp_firmware.c: 557: return vscp_readAppReg(reg);
 10596  003E16  500E               	movf	vscp_readRegister@reg,w,c
 10597  003E18  EC97  F01B         	call	_vscp_readAppReg
 10598  003E1C                     l1108:
 10599  003E1C  0012               	return	
 10600  003E1E                     __end_of_vscp_readRegister:
 10601                           	opt stack 0
 10602                           tblptru	equ	0xFF8
 10603                           prodh	equ	0xFF4
 10604                           prodl	equ	0xFF3
 10605                           postinc0	equ	0xFEE
 10606                           wreg	equ	0xFE8
 10607                           indf2	equ	0xFDF
 10608                           postinc2	equ	0xFDE
 10609                           postdec2	equ	0xFDD
 10610                           fsr2h	equ	0xFDA
 10611                           fsr2l	equ	0xFD9
 10612                           status	equ	0xFD8
 10613                           
 10614 ;; *************** function _vscp_readStdReg *****************
 10615 ;; Defined at:
 10616 ;;		line 566 in file "../../vscp_firmware/common/vscp_firmware.c"
 10617 ;; Parameters:    Size  Location     Type
 10618 ;;  reg             1    wreg     unsigned char 
 10619 ;; Auto vars:     Size  Location     Type
 10620 ;;  reg             1   12[COMRAM] unsigned char 
 10621 ;;  rv              1   11[COMRAM] unsigned char 
 10622 ;; Return value:  Size  Location     Type
 10623 ;;                  1    wreg      unsigned char 
 10624 ;; Registers used:
 10625 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10626 ;; Tracked objects:
 10627 ;;		On entry : F/0
 10628 ;;		On exit  : 0/0
 10629 ;;		Unchanged: 0/0
 10630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10631 ;;      Params:         0       0       0       0       0       0       0
 10632 ;;      Locals:         2       0       0       0       0       0       0
 10633 ;;      Temps:          0       0       0       0       0       0       0
 10634 ;;      Totals:         2       0       0       0       0       0       0
 10635 ;;Total ram usage:        2 bytes
 10636 ;; Hardware stack levels used:    1
 10637 ;; Hardware stack levels required when called:    4
 10638 ;; This function calls:
 10639 ;;		_vscp_getMajorVersion
 10640 ;;		_vscp_getMinorVersion
 10641 ;;		_vscp_getSubMinorVersion
 10642 ;;		_vscp_getGUID
 10643 ;;		_vscp_getMDF_URL
 10644 ;;		_vscp_getUserID
 10645 ;;		_vscp_getManufacturerId
 10646 ;;		_vscp_getBootLoaderAlgorithm
 10647 ;;		_vscp_getBufferSize
 10648 ;;		_vscp_getRegisterPagesUsed
 10649 ;; This function is called by:
 10650 ;;		_vscp_readRegister
 10651 ;;		_vscp_handleProtocolEvent
 10652 ;; This function uses a non-reentrant model
 10653 ;;
 10654                           
 10655                           	psect	text30
 10656  003340                     __ptext30:
 10657                           	opt stack 0
 10658  003340                     _vscp_readStdReg:
 10659                           	opt stack 25
 10660                           
 10661                           ;incstack = 0
 10662                           ;incstack = 0
 10663                           ;vscp_readStdReg@reg stored from wreg
 10664  003340  CFE8 F00D          	movff	wreg,vscp_readStdReg@reg
 10665                           
 10666                           ; BSR set to: 0
 10667                           ;vscp_firmware.c: 569: if (0x80 == reg) {
 10668                           
 10669                           ; BSR set to: 0
 10670  003344  500D               	movf	vscp_readStdReg@reg,w,c
 10671  003346  0A80               	xorlw	128
 10672  003348  E104               	bnz	l8991
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;vscp_firmware.c: 572: rv = vscp_alarmstatus;
 10676  00334A  C08C  F00C         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 10677                           
 10678                           ;vscp_firmware.c: 573: vscp_alarmstatus = 0x00;
 10679  00334E  6B8C               	clrf	_vscp_alarmstatus& (0+255),b
 10680                           
 10681                           ;vscp_firmware.c: 575: }
 10682  003350  D067               	goto	l9057
 10683  003352                     l8991:
 10684                           
 10685                           ; BSR set to: 0
 10686                           ;vscp_firmware.c: 576: else if (0x81 == reg) {
 10687  003352  500D               	movf	vscp_readStdReg@reg,w,c
 10688  003354  0A81               	xorlw	129
 10689  003356  E102               	bnz	l8995
 10690                           
 10691                           ; BSR set to: 0
 10692                           ;vscp_firmware.c: 579: rv = 1;
 10693  003358  0E01               	movlw	1
 10694  00335A  D061               	goto	L27
 10695  00335C                     l8995:
 10696                           
 10697                           ; BSR set to: 0
 10698                           ;vscp_firmware.c: 582: else if (0x82 == reg) {
 10699  00335C  500D               	movf	vscp_readStdReg@reg,w,c
 10700  00335E  0A82               	xorlw	130
 10701  003360  E102               	bnz	l8999
 10702                           
 10703                           ; BSR set to: 0
 10704                           ;vscp_firmware.c: 585: rv = 5;
 10705  003362  0E05               	movlw	5
 10706  003364  D05C               	goto	L27
 10707  003366                     l8999:
 10708                           
 10709                           ; BSR set to: 0
 10710                           ;vscp_firmware.c: 588: else if (0x83 == reg) {
 10711  003366  500D               	movf	vscp_readStdReg@reg,w,c
 10712  003368  0A83               	xorlw	131
 10713  00336A  E102               	bnz	l9003
 10714                           
 10715                           ; BSR set to: 0
 10716                           ;vscp_firmware.c: 591: rv = 0;
 10717  00336C  6A0C               	clrf	vscp_readStdReg@rv,c
 10718                           
 10719                           ;vscp_firmware.c: 593: }
 10720  00336E  D058               	goto	l9057
 10721  003370                     l9003:
 10722                           
 10723                           ; BSR set to: 0
 10724                           ;vscp_firmware.c: 594: else if (0x94 == reg) {
 10725  003370  500D               	movf	vscp_readStdReg@reg,w,c
 10726  003372  0A94               	xorlw	148
 10727  003374  E103               	bnz	l9007
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;vscp_firmware.c: 597: rv = vscp_getMajorVersion();
 10731  003376  ECBD  F01F         	call	_vscp_getMajorVersion	;wreg free
 10732  00337A  D051               	goto	L27
 10733  00337C                     l9007:
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;vscp_firmware.c: 600: else if (0x95 == reg) {
 10737  00337C  500D               	movf	vscp_readStdReg@reg,w,c
 10738  00337E  0A95               	xorlw	149
 10739  003380  E103               	bnz	l9011
 10740                           
 10741                           ; BSR set to: 0
 10742                           ;vscp_firmware.c: 603: rv = vscp_getMinorVersion();
 10743  003382  ECBC  F01F         	call	_vscp_getMinorVersion	;wreg free
 10744  003386  D04B               	goto	L27
 10745  003388                     l9011:
 10746                           
 10747                           ; BSR set to: 0
 10748                           ;vscp_firmware.c: 606: else if (0x96 == reg) {
 10749  003388  500D               	movf	vscp_readStdReg@reg,w,c
 10750  00338A  0A96               	xorlw	150
 10751  00338C  E103               	bnz	l9015
 10752                           
 10753                           ; BSR set to: 0
 10754                           ;vscp_firmware.c: 609: rv = vscp_getSubMinorVersion();
 10755  00338E  ECBB  F01F         	call	_vscp_getSubMinorVersion	;wreg free
 10756  003392  D045               	goto	L27
 10757  003394                     l9015:
 10758                           
 10759                           ; BSR set to: 0
 10760                           ;vscp_firmware.c: 612: else if (reg < 0x89) {
 10761  003394  0E89               	movlw	137
 10762  003396  600D               	cpfslt	vscp_readStdReg@reg,c
 10763  003398  D005               	goto	l9019
 10764                           
 10765                           ; BSR set to: 0
 10766                           ;vscp_firmware.c: 615: rv = vscp_getUserID(reg - 0x84);
 10767  00339A  500D               	movf	vscp_readStdReg@reg,w,c
 10768  00339C  0F7C               	addlw	124
 10769  00339E  EC49  F01F         	call	_vscp_getUserID
 10770  0033A2  D03D               	goto	L27
 10771  0033A4                     l9019:
 10772                           
 10773                           ; BSR set to: 0
 10774                           ;vscp_firmware.c: 618: else if ((reg > 0x88) &&
 10775                           ;vscp_firmware.c: 619: (reg < 0x91)) {
 10776  0033A4  0E88               	movlw	136
 10777  0033A6  640D               	cpfsgt	vscp_readStdReg@reg,c
 10778  0033A8  D008               	goto	l9025
 10779                           
 10780                           ; BSR set to: 0
 10781  0033AA  0E91               	movlw	145
 10782  0033AC  600D               	cpfslt	vscp_readStdReg@reg,c
 10783  0033AE  D005               	goto	l9025
 10784                           
 10785                           ; BSR set to: 0
 10786                           ;vscp_firmware.c: 622: rv = vscp_getManufacturerId(reg - 0x89);
 10787  0033B0  500D               	movf	vscp_readStdReg@reg,w,c
 10788  0033B2  0F77               	addlw	119
 10789  0033B4  EC3F  F01F         	call	_vscp_getManufacturerId
 10790  0033B8  D032               	goto	L27
 10791  0033BA                     l9025:
 10792                           
 10793                           ; BSR set to: 0
 10794                           ;vscp_firmware.c: 625: else if (0x91 == reg) {
 10795  0033BA  500D               	movf	vscp_readStdReg@reg,w,c
 10796  0033BC  0A91               	xorlw	145
 10797  0033BE  E103               	bnz	l9029
 10798                           
 10799                           ; BSR set to: 0
 10800                           ;vscp_firmware.c: 628: rv = vscp_nickname;
 10801  0033C0  C091  F00C         	movff	_vscp_nickname,vscp_readStdReg@rv
 10802                           
 10803                           ;vscp_firmware.c: 630: }
 10804  0033C4  D02D               	goto	l9057
 10805  0033C6                     l9029:
 10806                           
 10807                           ; BSR set to: 0
 10808                           ;vscp_firmware.c: 631: else if (0x93 == reg) {
 10809  0033C6  500D               	movf	vscp_readStdReg@reg,w,c
 10810  0033C8  0A93               	xorlw	147
 10811  0033CA  E103               	bnz	l9033
 10812                           
 10813                           ; BSR set to: 0
 10814                           ;vscp_firmware.c: 634: rv = (vscp_page_select & 0xff);
 10815  0033CC  C052  F00C         	movff	_vscp_page_select,vscp_readStdReg@rv
 10816                           
 10817                           ;vscp_firmware.c: 636: }
 10818  0033D0  D027               	goto	l9057
 10819  0033D2                     l9033:
 10820                           
 10821                           ; BSR set to: 0
 10822                           ;vscp_firmware.c: 638: else if (0x92 == reg) {
 10823  0033D2  500D               	movf	vscp_readStdReg@reg,w,c
 10824  0033D4  0A92               	xorlw	146
 10825  0033D6  E102               	bnz	l9037
 10826                           
 10827                           ; BSR set to: 0
 10828                           ;vscp_firmware.c: 641: rv = (vscp_page_select >> 8) & 0xff;
 10829  0033D8  5053               	movf	_vscp_page_select+1,w,c
 10830  0033DA  D021               	goto	L27
 10831  0033DC                     l9037:
 10832                           
 10833                           ; BSR set to: 0
 10834                           ;vscp_firmware.c: 644: else if (0x97 == reg) {
 10835  0033DC  500D               	movf	vscp_readStdReg@reg,w,c
 10836  0033DE  0A97               	xorlw	151
 10837  0033E0  E103               	bnz	l9041
 10838                           
 10839                           ; BSR set to: 0
 10840                           ;vscp_firmware.c: 646: rv = vscp_getBootLoaderAlgorithm();
 10841  0033E2  ECBA  F01F         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 10842  0033E6  D01B               	goto	L27
 10843  0033E8                     l9041:
 10844                           
 10845                           ; BSR set to: 0
 10846                           ;vscp_firmware.c: 648: else if (0x98 == reg) {
 10847  0033E8  500D               	movf	vscp_readStdReg@reg,w,c
 10848  0033EA  0A98               	xorlw	152
 10849  0033EC  E103               	bnz	l9045
 10850                           
 10851                           ; BSR set to: 0
 10852                           ;vscp_firmware.c: 650: rv = vscp_getBufferSize();
 10853  0033EE  ECB9  F01F         	call	_vscp_getBufferSize	;wreg free
 10854  0033F2  D015               	goto	L27
 10855  0033F4                     l9045:
 10856                           
 10857                           ; BSR set to: 0
 10858                           ;vscp_firmware.c: 652: else if (0x99 == reg) {
 10859  0033F4  500D               	movf	vscp_readStdReg@reg,w,c
 10860  0033F6  0A99               	xorlw	153
 10861  0033F8  E103               	bnz	l9049
 10862                           
 10863                           ; BSR set to: 0
 10864                           ;vscp_firmware.c: 654: rv = vscp_getRegisterPagesUsed();
 10865  0033FA  ECB8  F01F         	call	_vscp_getRegisterPagesUsed	;wreg free
 10866  0033FE  D00F               	goto	L27
 10867  003400                     l9049:
 10868                           
 10869                           ; BSR set to: 0
 10870                           ;vscp_firmware.c: 656: else if ((reg > (0xD0 - 1)) &&
 10871                           ;vscp_firmware.c: 657: (reg < 0xE0)) {
 10872  003400  0ECF               	movlw	207
 10873  003402  640D               	cpfsgt	vscp_readStdReg@reg,c
 10874  003404  D008               	goto	l9055
 10875                           
 10876                           ; BSR set to: 0
 10877  003406  0EE0               	movlw	224
 10878  003408  600D               	cpfslt	vscp_readStdReg@reg,c
 10879  00340A  D005               	goto	l9055
 10880                           
 10881                           ; BSR set to: 0
 10882                           ;vscp_firmware.c: 660: rv = vscp_getGUID(reg - 0xD0);
 10883  00340C  500D               	movf	vscp_readStdReg@reg,w,c
 10884  00340E  0F30               	addlw	48
 10885  003410  EC53  F01F         	call	_vscp_getGUID
 10886  003414  D004               	goto	L27
 10887  003416                     l9055:
 10888                           
 10889                           ; BSR set to: 0
 10890                           ;vscp_firmware.c: 663: else {
 10891                           ;vscp_firmware.c: 666: rv = vscp_getMDF_URL(reg - 0xE0);
 10892  003416  500D               	movf	vscp_readStdReg@reg,w,c
 10893  003418  0F20               	addlw	32
 10894  00341A  EC1B  F01F         	call	_vscp_getMDF_URL
 10895  00341E                     L27:
 10896  00341E  6E0C               	movwf	vscp_readStdReg@rv,c
 10897  003420                     l9057:
 10898                           
 10899                           ;vscp_firmware.c: 668: }
 10900                           ;vscp_firmware.c: 670: return rv;
 10901  003420  500C               	movf	vscp_readStdReg@rv,w,c
 10902  003422  0012               	return	
 10903  003424                     __end_of_vscp_readStdReg:
 10904                           	opt stack 0
 10905                           tblptru	equ	0xFF8
 10906                           prodh	equ	0xFF4
 10907                           prodl	equ	0xFF3
 10908                           postinc0	equ	0xFEE
 10909                           wreg	equ	0xFE8
 10910                           indf2	equ	0xFDF
 10911                           postinc2	equ	0xFDE
 10912                           postdec2	equ	0xFDD
 10913                           fsr2h	equ	0xFDA
 10914                           fsr2l	equ	0xFD9
 10915                           status	equ	0xFD8
 10916                           
 10917 ;; *************** function _vscp_getRegisterPagesUsed *****************
 10918 ;; Defined at:
 10919 ;;		line 2482 in file "../main.c"
 10920 ;; Parameters:    Size  Location     Type
 10921 ;;		None
 10922 ;; Auto vars:     Size  Location     Type
 10923 ;;		None
 10924 ;; Return value:  Size  Location     Type
 10925 ;;                  1    wreg      unsigned char 
 10926 ;; Registers used:
 10927 ;;		wreg
 10928 ;; Tracked objects:
 10929 ;;		On entry : F/0
 10930 ;;		On exit  : F/0
 10931 ;;		Unchanged: F/0
 10932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10933 ;;      Params:         0       0       0       0       0       0       0
 10934 ;;      Locals:         0       0       0       0       0       0       0
 10935 ;;      Temps:          0       0       0       0       0       0       0
 10936 ;;      Totals:         0       0       0       0       0       0       0
 10937 ;;Total ram usage:        0 bytes
 10938 ;; Hardware stack levels used:    1
 10939 ;; Hardware stack levels required when called:    2
 10940 ;; This function calls:
 10941 ;;		Nothing
 10942 ;; This function is called by:
 10943 ;;		_vscp_readStdReg
 10944 ;; This function uses a non-reentrant model
 10945 ;;
 10946                           
 10947                           	psect	text31
 10948  003F70                     __ptext31:
 10949                           	opt stack 0
 10950  003F70                     _vscp_getRegisterPagesUsed:
 10951                           	opt stack 26
 10952                           
 10953                           ; BSR set to: 0
 10954                           
 10955                           ; BSR set to: 0
 10956                           ;main.c: 2483: return 1;
 10957                           
 10958                           ;incstack = 0
 10959                           ;incstack = 0
 10960  003F70  0C01               	retlw	1
 10961  003F72                     __end_of_vscp_getRegisterPagesUsed:
 10962                           	opt stack 0
 10963                           tblptru	equ	0xFF8
 10964                           prodh	equ	0xFF4
 10965                           prodl	equ	0xFF3
 10966                           postinc0	equ	0xFEE
 10967                           wreg	equ	0xFE8
 10968                           indf2	equ	0xFDF
 10969                           postinc2	equ	0xFDE
 10970                           postdec2	equ	0xFDD
 10971                           fsr2h	equ	0xFDA
 10972                           fsr2l	equ	0xFD9
 10973                           status	equ	0xFD8
 10974                           
 10975 ;; *************** function _vscp_getBufferSize *****************
 10976 ;; Defined at:
 10977 ;;		line 2315 in file "../main.c"
 10978 ;; Parameters:    Size  Location     Type
 10979 ;;		None
 10980 ;; Auto vars:     Size  Location     Type
 10981 ;;		None
 10982 ;; Return value:  Size  Location     Type
 10983 ;;                  1    wreg      unsigned char 
 10984 ;; Registers used:
 10985 ;;		wreg
 10986 ;; Tracked objects:
 10987 ;;		On entry : F/0
 10988 ;;		On exit  : F/0
 10989 ;;		Unchanged: F/0
 10990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10991 ;;      Params:         0       0       0       0       0       0       0
 10992 ;;      Locals:         0       0       0       0       0       0       0
 10993 ;;      Temps:          0       0       0       0       0       0       0
 10994 ;;      Totals:         0       0       0       0       0       0       0
 10995 ;;Total ram usage:        0 bytes
 10996 ;; Hardware stack levels used:    1
 10997 ;; Hardware stack levels required when called:    2
 10998 ;; This function calls:
 10999 ;;		Nothing
 11000 ;; This function is called by:
 11001 ;;		_vscp_readStdReg
 11002 ;; This function uses a non-reentrant model
 11003 ;;
 11004                           
 11005                           	psect	text32
 11006  003F72                     __ptext32:
 11007                           	opt stack 0
 11008  003F72                     _vscp_getBufferSize:
 11009                           	opt stack 26
 11010                           
 11011                           ; BSR set to: 0
 11012                           
 11013                           ; BSR set to: 0
 11014                           ;main.c: 2316: return 8;
 11015                           
 11016                           ; BSR set to: 0
 11017                           ;incstack = 0
 11018                           ;incstack = 0
 11019  003F72  0C08               	retlw	8
 11020  003F74                     __end_of_vscp_getBufferSize:
 11021                           	opt stack 0
 11022                           tblptru	equ	0xFF8
 11023                           prodh	equ	0xFF4
 11024                           prodl	equ	0xFF3
 11025                           postinc0	equ	0xFEE
 11026                           wreg	equ	0xFE8
 11027                           indf2	equ	0xFDF
 11028                           postinc2	equ	0xFDE
 11029                           postdec2	equ	0xFDD
 11030                           fsr2h	equ	0xFDA
 11031                           fsr2l	equ	0xFD9
 11032                           status	equ	0xFD8
 11033                           
 11034 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 11035 ;; Defined at:
 11036 ;;		line 2306 in file "../main.c"
 11037 ;; Parameters:    Size  Location     Type
 11038 ;;		None
 11039 ;; Auto vars:     Size  Location     Type
 11040 ;;		None
 11041 ;; Return value:  Size  Location     Type
 11042 ;;                  1    wreg      unsigned char 
 11043 ;; Registers used:
 11044 ;;		wreg
 11045 ;; Tracked objects:
 11046 ;;		On entry : F/0
 11047 ;;		On exit  : F/0
 11048 ;;		Unchanged: F/0
 11049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11050 ;;      Params:         0       0       0       0       0       0       0
 11051 ;;      Locals:         0       0       0       0       0       0       0
 11052 ;;      Temps:          0       0       0       0       0       0       0
 11053 ;;      Totals:         0       0       0       0       0       0       0
 11054 ;;Total ram usage:        0 bytes
 11055 ;; Hardware stack levels used:    1
 11056 ;; Hardware stack levels required when called:    2
 11057 ;; This function calls:
 11058 ;;		Nothing
 11059 ;; This function is called by:
 11060 ;;		_vscp_readStdReg
 11061 ;; This function uses a non-reentrant model
 11062 ;;
 11063                           
 11064                           	psect	text33
 11065  003F74                     __ptext33:
 11066                           	opt stack 0
 11067  003F74                     _vscp_getBootLoaderAlgorithm:
 11068                           	opt stack 26
 11069                           
 11070                           ; BSR set to: 0
 11071                           
 11072                           ; BSR set to: 0
 11073                           ;main.c: 2307: return 0x01;
 11074                           
 11075                           ; BSR set to: 0
 11076                           ;incstack = 0
 11077                           ;incstack = 0
 11078  003F74  0C01               	retlw	1
 11079  003F76                     __end_of_vscp_getBootLoaderAlgorithm:
 11080                           	opt stack 0
 11081                           tblptru	equ	0xFF8
 11082                           prodh	equ	0xFF4
 11083                           prodl	equ	0xFF3
 11084                           postinc0	equ	0xFEE
 11085                           wreg	equ	0xFE8
 11086                           indf2	equ	0xFDF
 11087                           postinc2	equ	0xFDE
 11088                           postdec2	equ	0xFDD
 11089                           fsr2h	equ	0xFDA
 11090                           fsr2l	equ	0xFD9
 11091                           status	equ	0xFD8
 11092                           
 11093 ;; *************** function _vscp_getManufacturerId *****************
 11094 ;; Defined at:
 11095 ;;		line 2297 in file "../main.c"
 11096 ;; Parameters:    Size  Location     Type
 11097 ;;  idx             1    wreg     unsigned char 
 11098 ;; Auto vars:     Size  Location     Type
 11099 ;;  idx             1   10[COMRAM] unsigned char 
 11100 ;; Return value:  Size  Location     Type
 11101 ;;                  1    wreg      unsigned char 
 11102 ;; Registers used:
 11103 ;;		wreg, status,2, status,0, cstack
 11104 ;; Tracked objects:
 11105 ;;		On entry : 0/0
 11106 ;;		On exit  : 0/0
 11107 ;;		Unchanged: 0/0
 11108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11109 ;;      Params:         0       0       0       0       0       0       0
 11110 ;;      Locals:         1       0       0       0       0       0       0
 11111 ;;      Temps:          0       0       0       0       0       0       0
 11112 ;;      Totals:         1       0       0       0       0       0       0
 11113 ;;Total ram usage:        1 bytes
 11114 ;; Hardware stack levels used:    1
 11115 ;; Hardware stack levels required when called:    3
 11116 ;; This function calls:
 11117 ;;		_readEEPROM
 11118 ;; This function is called by:
 11119 ;;		_vscp_readStdReg
 11120 ;;		_vscp_writeStdReg
 11121 ;; This function uses a non-reentrant model
 11122 ;;
 11123                           
 11124                           	psect	text34
 11125  003E7E                     __ptext34:
 11126                           	opt stack 0
 11127  003E7E                     _vscp_getManufacturerId:
 11128                           	opt stack 25
 11129                           
 11130                           ; BSR set to: 0
 11131                           ;incstack = 0
 11132                           ;incstack = 0
 11133                           ;vscp_getManufacturerId@idx stored from wreg
 11134  003E7E  CFE8 F00B          	movff	wreg,vscp_getManufacturerId@idx
 11135                           
 11136                           ;main.c: 2298: return readEEPROM( 0x0B + idx );
 11137  003E82  0E0B               	movlw	11
 11138  003E84  240B               	addwf	vscp_getManufacturerId@idx,w,c
 11139  003E86  6E08               	movwf	?_readEEPROM,c
 11140  003E88  6A09               	clrf	?_readEEPROM+1,c
 11141  003E8A  0E00               	movlw	0
 11142  003E8C  2209               	addwfc	?_readEEPROM+1,f,c
 11143  003E8E  EF81  F01F         	goto	_readEEPROM	;wreg free
 11144  003E92                     __end_of_vscp_getManufacturerId:
 11145                           	opt stack 0
 11146                           tblptru	equ	0xFF8
 11147                           prodh	equ	0xFF4
 11148                           prodl	equ	0xFF3
 11149                           postinc0	equ	0xFEE
 11150                           wreg	equ	0xFE8
 11151                           indf2	equ	0xFDF
 11152                           postinc2	equ	0xFDE
 11153                           postdec2	equ	0xFDD
 11154                           fsr2h	equ	0xFDA
 11155                           fsr2l	equ	0xFD9
 11156                           status	equ	0xFD8
 11157                           
 11158 ;; *************** function _vscp_getUserID *****************
 11159 ;; Defined at:
 11160 ;;		line 2277 in file "../main.c"
 11161 ;; Parameters:    Size  Location     Type
 11162 ;;  idx             1    wreg     unsigned char 
 11163 ;; Auto vars:     Size  Location     Type
 11164 ;;  idx             1   10[COMRAM] unsigned char 
 11165 ;; Return value:  Size  Location     Type
 11166 ;;                  1    wreg      unsigned char 
 11167 ;; Registers used:
 11168 ;;		wreg, status,2, status,0, cstack
 11169 ;; Tracked objects:
 11170 ;;		On entry : 0/0
 11171 ;;		On exit  : 0/0
 11172 ;;		Unchanged: 0/0
 11173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11174 ;;      Params:         0       0       0       0       0       0       0
 11175 ;;      Locals:         1       0       0       0       0       0       0
 11176 ;;      Temps:          0       0       0       0       0       0       0
 11177 ;;      Totals:         1       0       0       0       0       0       0
 11178 ;;Total ram usage:        1 bytes
 11179 ;; Hardware stack levels used:    1
 11180 ;; Hardware stack levels required when called:    3
 11181 ;; This function calls:
 11182 ;;		_readEEPROM
 11183 ;; This function is called by:
 11184 ;;		_vscp_readStdReg
 11185 ;;		_vscp_writeStdReg
 11186 ;; This function uses a non-reentrant model
 11187 ;;
 11188                           
 11189                           	psect	text35
 11190  003E92                     __ptext35:
 11191                           	opt stack 0
 11192  003E92                     _vscp_getUserID:
 11193                           	opt stack 25
 11194                           
 11195                           ;incstack = 0
 11196                           ;incstack = 0
 11197                           ;vscp_getUserID@idx stored from wreg
 11198  003E92  CFE8 F00B          	movff	wreg,vscp_getUserID@idx
 11199                           
 11200                           ;main.c: 2278: return readEEPROM( 0x06 + idx );
 11201  003E96  0E06               	movlw	6
 11202  003E98  240B               	addwf	vscp_getUserID@idx,w,c
 11203  003E9A  6E08               	movwf	?_readEEPROM,c
 11204  003E9C  6A09               	clrf	?_readEEPROM+1,c
 11205  003E9E  0E00               	movlw	0
 11206  003EA0  2209               	addwfc	?_readEEPROM+1,f,c
 11207  003EA2  EF81  F01F         	goto	_readEEPROM	;wreg free
 11208  003EA6                     __end_of_vscp_getUserID:
 11209                           	opt stack 0
 11210                           tblptru	equ	0xFF8
 11211                           prodh	equ	0xFF4
 11212                           prodl	equ	0xFF3
 11213                           postinc0	equ	0xFEE
 11214                           wreg	equ	0xFE8
 11215                           indf2	equ	0xFDF
 11216                           postinc2	equ	0xFDE
 11217                           postdec2	equ	0xFDD
 11218                           fsr2h	equ	0xFDA
 11219                           fsr2l	equ	0xFD9
 11220                           status	equ	0xFD8
 11221                           
 11222 ;; *************** function _vscp_getMDF_URL *****************
 11223 ;; Defined at:
 11224 ;;		line 2268 in file "../main.c"
 11225 ;; Parameters:    Size  Location     Type
 11226 ;;  idx             1    wreg     unsigned char 
 11227 ;; Auto vars:     Size  Location     Type
 11228 ;;  idx             1    8[COMRAM] unsigned char 
 11229 ;; Return value:  Size  Location     Type
 11230 ;;                  1    wreg      unsigned char 
 11231 ;; Registers used:
 11232 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11233 ;; Tracked objects:
 11234 ;;		On entry : F/0
 11235 ;;		On exit  : F/0
 11236 ;;		Unchanged: F/0
 11237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11238 ;;      Params:         0       0       0       0       0       0       0
 11239 ;;      Locals:         1       0       0       0       0       0       0
 11240 ;;      Temps:          1       0       0       0       0       0       0
 11241 ;;      Totals:         2       0       0       0       0       0       0
 11242 ;;Total ram usage:        2 bytes
 11243 ;; Hardware stack levels used:    1
 11244 ;; Hardware stack levels required when called:    2
 11245 ;; This function calls:
 11246 ;;		Nothing
 11247 ;; This function is called by:
 11248 ;;		_vscp_readStdReg
 11249 ;;		_vscp_handleProtocolEvent
 11250 ;; This function uses a non-reentrant model
 11251 ;;
 11252                           
 11253                           	psect	text36
 11254  003E36                     __ptext36:
 11255                           	opt stack 0
 11256  003E36                     _vscp_getMDF_URL:
 11257                           	opt stack 26
 11258                           
 11259                           ;incstack = 0
 11260                           ;incstack = 0
 11261                           ;vscp_getMDF_URL@idx stored from wreg
 11262  003E36  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 11263                           
 11264                           ; BSR set to: 0
 11265                           ;main.c: 2269: return vscp_deviceURL[ idx ];
 11266  003E3A  5009               	movf	vscp_getMDF_URL@idx,w,c
 11267  003E3C  0F00               	addlw	low _vscp_deviceURL
 11268  003E3E  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 11269  003E40  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 11270  003E44  0E06               	movlw	high __smallconst
 11271  003E46  6EF7               	movwf	tblptrh,c
 11272  003E48  0008               	tblrd		*
 11273  003E4A  50F5               	movf	tablat,w,c
 11274                           
 11275                           ; BSR set to: 0
 11276  003E4C  0012               	return	
 11277  003E4E                     __end_of_vscp_getMDF_URL:
 11278                           	opt stack 0
 11279                           tblptru	equ	0xFF8
 11280                           tblptrh	equ	0xFF7
 11281                           tblptrl	equ	0xFF6
 11282                           tablat	equ	0xFF5
 11283                           prodh	equ	0xFF4
 11284                           prodl	equ	0xFF3
 11285                           postinc0	equ	0xFEE
 11286                           wreg	equ	0xFE8
 11287                           indf2	equ	0xFDF
 11288                           postinc2	equ	0xFDE
 11289                           postdec2	equ	0xFDD
 11290                           fsr2h	equ	0xFDA
 11291                           fsr2l	equ	0xFD9
 11292                           status	equ	0xFD8
 11293                           
 11294 ;; *************** function _vscp_getGUID *****************
 11295 ;; Defined at:
 11296 ;;		line 2256 in file "../main.c"
 11297 ;; Parameters:    Size  Location     Type
 11298 ;;  idx             1    wreg     unsigned char 
 11299 ;; Auto vars:     Size  Location     Type
 11300 ;;  idx             1   10[COMRAM] unsigned char 
 11301 ;; Return value:  Size  Location     Type
 11302 ;;                  1    wreg      unsigned char 
 11303 ;; Registers used:
 11304 ;;		wreg, status,2, status,0, cstack
 11305 ;; Tracked objects:
 11306 ;;		On entry : 0/0
 11307 ;;		On exit  : 0/0
 11308 ;;		Unchanged: 0/0
 11309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11310 ;;      Params:         0       0       0       0       0       0       0
 11311 ;;      Locals:         1       0       0       0       0       0       0
 11312 ;;      Temps:          0       0       0       0       0       0       0
 11313 ;;      Totals:         1       0       0       0       0       0       0
 11314 ;;Total ram usage:        1 bytes
 11315 ;; Hardware stack levels used:    1
 11316 ;; Hardware stack levels required when called:    3
 11317 ;; This function calls:
 11318 ;;		_readEEPROM
 11319 ;; This function is called by:
 11320 ;;		_vscp_readStdReg
 11321 ;;		_vscp_writeStdReg
 11322 ;;		_vscp_handleProtocolEvent
 11323 ;; This function uses a non-reentrant model
 11324 ;;
 11325                           
 11326                           	psect	text37
 11327  003EA6                     __ptext37:
 11328                           	opt stack 0
 11329  003EA6                     _vscp_getGUID:
 11330                           	opt stack 25
 11331                           
 11332                           ; BSR set to: 0
 11333                           ;incstack = 0
 11334                           ;incstack = 0
 11335                           ;vscp_getGUID@idx stored from wreg
 11336  003EA6  CFE8 F00B          	movff	wreg,vscp_getGUID@idx
 11337                           
 11338                           ;main.c: 2257: return readEEPROM( 0x13 + idx );
 11339  003EAA  0E13               	movlw	19
 11340  003EAC  240B               	addwf	vscp_getGUID@idx,w,c
 11341  003EAE  6E08               	movwf	?_readEEPROM,c
 11342  003EB0  6A09               	clrf	?_readEEPROM+1,c
 11343  003EB2  0E00               	movlw	0
 11344  003EB4  2209               	addwfc	?_readEEPROM+1,f,c
 11345  003EB6  EF81  F01F         	goto	_readEEPROM	;wreg free
 11346  003EBA                     __end_of_vscp_getGUID:
 11347                           	opt stack 0
 11348                           tblptru	equ	0xFF8
 11349                           tblptrh	equ	0xFF7
 11350                           tblptrl	equ	0xFF6
 11351                           tablat	equ	0xFF5
 11352                           prodh	equ	0xFF4
 11353                           prodl	equ	0xFF3
 11354                           postinc0	equ	0xFEE
 11355                           wreg	equ	0xFE8
 11356                           indf2	equ	0xFDF
 11357                           postinc2	equ	0xFDE
 11358                           postdec2	equ	0xFDD
 11359                           fsr2h	equ	0xFDA
 11360                           fsr2l	equ	0xFD9
 11361                           status	equ	0xFD8
 11362                           
 11363 ;; *************** function _vscp_getSubMinorVersion *****************
 11364 ;; Defined at:
 11365 ;;		line 2245 in file "../main.c"
 11366 ;; Parameters:    Size  Location     Type
 11367 ;;		None
 11368 ;; Auto vars:     Size  Location     Type
 11369 ;;		None
 11370 ;; Return value:  Size  Location     Type
 11371 ;;                  1    wreg      unsigned char 
 11372 ;; Registers used:
 11373 ;;		wreg
 11374 ;; Tracked objects:
 11375 ;;		On entry : F/0
 11376 ;;		On exit  : F/0
 11377 ;;		Unchanged: F/0
 11378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11379 ;;      Params:         0       0       0       0       0       0       0
 11380 ;;      Locals:         0       0       0       0       0       0       0
 11381 ;;      Temps:          0       0       0       0       0       0       0
 11382 ;;      Totals:         0       0       0       0       0       0       0
 11383 ;;Total ram usage:        0 bytes
 11384 ;; Hardware stack levels used:    1
 11385 ;; Hardware stack levels required when called:    2
 11386 ;; This function calls:
 11387 ;;		Nothing
 11388 ;; This function is called by:
 11389 ;;		_vscp_readStdReg
 11390 ;; This function uses a non-reentrant model
 11391 ;;
 11392                           
 11393                           	psect	text38
 11394  003F76                     __ptext38:
 11395                           	opt stack 0
 11396  003F76                     _vscp_getSubMinorVersion:
 11397                           	opt stack 26
 11398                           
 11399                           ; BSR set to: 0
 11400                           
 11401                           ; BSR set to: 0
 11402                           ;main.c: 2246: return 0;
 11403                           
 11404                           ;incstack = 0
 11405                           ;incstack = 0
 11406  003F76  0C00               	retlw	0
 11407  003F78                     __end_of_vscp_getSubMinorVersion:
 11408                           	opt stack 0
 11409                           tblptru	equ	0xFF8
 11410                           tblptrh	equ	0xFF7
 11411                           tblptrl	equ	0xFF6
 11412                           tablat	equ	0xFF5
 11413                           prodh	equ	0xFF4
 11414                           prodl	equ	0xFF3
 11415                           postinc0	equ	0xFEE
 11416                           wreg	equ	0xFE8
 11417                           indf2	equ	0xFDF
 11418                           postinc2	equ	0xFDE
 11419                           postdec2	equ	0xFDD
 11420                           fsr2h	equ	0xFDA
 11421                           fsr2l	equ	0xFD9
 11422                           status	equ	0xFD8
 11423                           
 11424 ;; *************** function _vscp_getMinorVersion *****************
 11425 ;; Defined at:
 11426 ;;		line 2236 in file "../main.c"
 11427 ;; Parameters:    Size  Location     Type
 11428 ;;		None
 11429 ;; Auto vars:     Size  Location     Type
 11430 ;;		None
 11431 ;; Return value:  Size  Location     Type
 11432 ;;                  1    wreg      unsigned char 
 11433 ;; Registers used:
 11434 ;;		wreg
 11435 ;; Tracked objects:
 11436 ;;		On entry : F/0
 11437 ;;		On exit  : F/0
 11438 ;;		Unchanged: F/0
 11439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11440 ;;      Params:         0       0       0       0       0       0       0
 11441 ;;      Locals:         0       0       0       0       0       0       0
 11442 ;;      Temps:          0       0       0       0       0       0       0
 11443 ;;      Totals:         0       0       0       0       0       0       0
 11444 ;;Total ram usage:        0 bytes
 11445 ;; Hardware stack levels used:    1
 11446 ;; Hardware stack levels required when called:    2
 11447 ;; This function calls:
 11448 ;;		Nothing
 11449 ;; This function is called by:
 11450 ;;		_vscp_readStdReg
 11451 ;; This function uses a non-reentrant model
 11452 ;;
 11453                           
 11454                           	psect	text39
 11455  003F78                     __ptext39:
 11456                           	opt stack 0
 11457  003F78                     _vscp_getMinorVersion:
 11458                           	opt stack 26
 11459                           
 11460                           ; BSR set to: 0
 11461                           
 11462                           ; BSR set to: 0
 11463                           ;main.c: 2237: return 1;
 11464                           
 11465                           ; BSR set to: 0
 11466                           ;incstack = 0
 11467                           ;incstack = 0
 11468  003F78  0C01               	retlw	1
 11469  003F7A                     __end_of_vscp_getMinorVersion:
 11470                           	opt stack 0
 11471                           tblptru	equ	0xFF8
 11472                           tblptrh	equ	0xFF7
 11473                           tblptrl	equ	0xFF6
 11474                           tablat	equ	0xFF5
 11475                           prodh	equ	0xFF4
 11476                           prodl	equ	0xFF3
 11477                           postinc0	equ	0xFEE
 11478                           wreg	equ	0xFE8
 11479                           indf2	equ	0xFDF
 11480                           postinc2	equ	0xFDE
 11481                           postdec2	equ	0xFDD
 11482                           fsr2h	equ	0xFDA
 11483                           fsr2l	equ	0xFD9
 11484                           status	equ	0xFD8
 11485                           
 11486 ;; *************** function _vscp_getMajorVersion *****************
 11487 ;; Defined at:
 11488 ;;		line 2227 in file "../main.c"
 11489 ;; Parameters:    Size  Location     Type
 11490 ;;		None
 11491 ;; Auto vars:     Size  Location     Type
 11492 ;;		None
 11493 ;; Return value:  Size  Location     Type
 11494 ;;                  1    wreg      unsigned char 
 11495 ;; Registers used:
 11496 ;;		wreg
 11497 ;; Tracked objects:
 11498 ;;		On entry : F/0
 11499 ;;		On exit  : F/0
 11500 ;;		Unchanged: F/0
 11501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11502 ;;      Params:         0       0       0       0       0       0       0
 11503 ;;      Locals:         0       0       0       0       0       0       0
 11504 ;;      Temps:          0       0       0       0       0       0       0
 11505 ;;      Totals:         0       0       0       0       0       0       0
 11506 ;;Total ram usage:        0 bytes
 11507 ;; Hardware stack levels used:    1
 11508 ;; Hardware stack levels required when called:    2
 11509 ;; This function calls:
 11510 ;;		Nothing
 11511 ;; This function is called by:
 11512 ;;		_vscp_readStdReg
 11513 ;; This function uses a non-reentrant model
 11514 ;;
 11515                           
 11516                           	psect	text40
 11517  003F7A                     __ptext40:
 11518                           	opt stack 0
 11519  003F7A                     _vscp_getMajorVersion:
 11520                           	opt stack 26
 11521                           
 11522                           ; BSR set to: 0
 11523                           
 11524                           ; BSR set to: 0
 11525                           ;main.c: 2228: return 1;
 11526                           
 11527                           ; BSR set to: 0
 11528                           ;incstack = 0
 11529                           ;incstack = 0
 11530  003F7A  0C01               	retlw	1
 11531  003F7C                     __end_of_vscp_getMajorVersion:
 11532                           	opt stack 0
 11533                           tblptru	equ	0xFF8
 11534                           tblptrh	equ	0xFF7
 11535                           tblptrl	equ	0xFF6
 11536                           tablat	equ	0xFF5
 11537                           prodh	equ	0xFF4
 11538                           prodl	equ	0xFF3
 11539                           postinc0	equ	0xFEE
 11540                           wreg	equ	0xFE8
 11541                           indf2	equ	0xFDF
 11542                           postinc2	equ	0xFDE
 11543                           postdec2	equ	0xFDD
 11544                           fsr2h	equ	0xFDA
 11545                           fsr2l	equ	0xFD9
 11546                           status	equ	0xFD8
 11547                           
 11548 ;; *************** function _vscp_newNodeOnline *****************
 11549 ;; Defined at:
 11550 ;;		line 494 in file "../../vscp_firmware/common/vscp_firmware.c"
 11551 ;; Parameters:    Size  Location     Type
 11552 ;;		None
 11553 ;; Auto vars:     Size  Location     Type
 11554 ;;		None
 11555 ;; Return value:  Size  Location     Type
 11556 ;;		None               void
 11557 ;; Registers used:
 11558 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11559 ;; Tracked objects:
 11560 ;;		On entry : F/0
 11561 ;;		On exit  : F/0
 11562 ;;		Unchanged: 0/0
 11563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11564 ;;      Params:         0       0       0       0       0       0       0
 11565 ;;      Locals:         0       0       0       0       0       0       0
 11566 ;;      Temps:          1       0       0       0       0       0       0
 11567 ;;      Totals:         1       0       0       0       0       0       0
 11568 ;;Total ram usage:        1 bytes
 11569 ;; Hardware stack levels used:    1
 11570 ;; Hardware stack levels required when called:    7
 11571 ;; This function calls:
 11572 ;;		_vscp_sendEvent
 11573 ;; This function is called by:
 11574 ;;		_vscp_handleProtocolEvent
 11575 ;; This function uses a non-reentrant model
 11576 ;;
 11577                           
 11578                           	psect	text41
 11579  003BEA                     __ptext41:
 11580                           	opt stack 0
 11581  003BEA                     _vscp_newNodeOnline:
 11582                           	opt stack 22
 11583                           
 11584                           ; BSR set to: 0
 11585                           ;vscp_firmware.c: 495: if ((1 == (vscp_imsg.flags & 0x0f)) &&
 11586                           ;vscp_firmware.c: 496: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11587                           
 11588                           ; BSR set to: 0
 11589                           ;incstack = 0
 11590                           ;incstack = 0
 11591  003BEA  C096  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 11592  003BEE  0E0F               	movlw	15
 11593  003BF0  164C               	andwf	??_vscp_newNodeOnline,f,c
 11594  003BF2  044C               	decf	??_vscp_newNodeOnline,w,c
 11595  003BF4  E10E               	bnz	l1095
 11596                           
 11597                           ; BSR set to: 0
 11598  003BF6  5191               	movf	_vscp_nickname& (0+255),w,b
 11599  003BF8  EE20  F09C         	lfsr	2,_vscp_imsg+6
 11600  003BFC  62DF               	cpfseq	indf2,c
 11601  003BFE  D009               	goto	l1095
 11602                           
 11603                           ; BSR set to: 0
 11604                           ;vscp_firmware.c: 502: vscp_omsg.flags = 0x80;
 11605  003C00  0E80               	movlw	128
 11606  003C02  6FA4               	movwf	_vscp_omsg& (0+255),b
 11607                           
 11608                           ; BSR set to: 0
 11609                           ;vscp_firmware.c: 503: vscp_omsg.priority = 0x00;
 11610  003C04  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 11611                           
 11612                           ; BSR set to: 0
 11613                           ;vscp_firmware.c: 504: vscp_omsg.vscp_class = 0;
 11614  003C06  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 11615  003C08  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 11616                           
 11617                           ;vscp_firmware.c: 505: vscp_omsg.vscp_type = 3;
 11618  003C0A  0E03               	movlw	3
 11619  003C0C  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 11620                           
 11621                           ; BSR set to: 0
 11622                           ;vscp_firmware.c: 506: vscp_sendEvent();
 11623  003C0E  EC46  F01E         	call	_vscp_sendEvent	;wreg free
 11624  003C12                     l1095:
 11625                           
 11626                           ; BSR set to: 0
 11627  003C12  0012               	return	
 11628  003C14                     __end_of_vscp_newNodeOnline:
 11629                           	opt stack 0
 11630                           tblptru	equ	0xFF8
 11631                           tblptrh	equ	0xFF7
 11632                           tblptrl	equ	0xFF6
 11633                           tablat	equ	0xFF5
 11634                           prodh	equ	0xFF4
 11635                           prodl	equ	0xFF3
 11636                           postinc0	equ	0xFEE
 11637                           wreg	equ	0xFE8
 11638                           indf2	equ	0xFDF
 11639                           postinc2	equ	0xFDE
 11640                           postdec2	equ	0xFDD
 11641                           fsr2h	equ	0xFDA
 11642                           fsr2l	equ	0xFD9
 11643                           status	equ	0xFD8
 11644                           
 11645 ;; *************** function _vscp_handleDropNickname *****************
 11646 ;; Defined at:
 11647 ;;		line 430 in file "../../vscp_firmware/common/vscp_firmware.c"
 11648 ;; Parameters:    Size  Location     Type
 11649 ;;		None
 11650 ;; Auto vars:     Size  Location     Type
 11651 ;;  bytes           1   11[COMRAM] unsigned char 
 11652 ;; Return value:  Size  Location     Type
 11653 ;;		None               void
 11654 ;; Registers used:
 11655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11656 ;; Tracked objects:
 11657 ;;		On entry : F/0
 11658 ;;		On exit  : F/0
 11659 ;;		Unchanged: 0/0
 11660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11661 ;;      Params:         0       0       0       0       0       0       0
 11662 ;;      Locals:         1       0       0       0       0       0       0
 11663 ;;      Temps:          0       0       0       0       0       0       0
 11664 ;;      Totals:         1       0       0       0       0       0       0
 11665 ;;Total ram usage:        1 bytes
 11666 ;; Hardware stack levels used:    1
 11667 ;; Hardware stack levels required when called:    5
 11668 ;; This function calls:
 11669 ;;		_vscp_init
 11670 ;;		_vscp_writeNicknamePermanent
 11671 ;; This function is called by:
 11672 ;;		_vscp_handleProtocolEvent
 11673 ;; This function uses a non-reentrant model
 11674 ;;
 11675                           
 11676                           	psect	text42
 11677  003B8E                     __ptext42:
 11678                           	opt stack 0
 11679  003B8E                     _vscp_handleDropNickname:
 11680                           	opt stack 24
 11681                           
 11682                           ; BSR set to: 0
 11683                           ;vscp_firmware.c: 431: uint8_t bytes = vscp_imsg.flags & 0x0f;
 11684                           
 11685                           ; BSR set to: 0
 11686                           ;incstack = 0
 11687                           ;incstack = 0
 11688  003B8E  5196               	movf	_vscp_imsg& (0+255),w,b
 11689  003B90  0B0F               	andlw	15
 11690  003B92  6E0C               	movwf	vscp_handleDropNickname@bytes,c
 11691                           
 11692                           ; BSR set to: 0
 11693                           ;vscp_firmware.c: 437: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11694  003B94  500C               	movf	vscp_handleDropNickname@bytes,w,c
 11695  003B96  E012               	bz	l1091
 11696                           
 11697                           ; BSR set to: 0
 11698  003B98  5191               	movf	_vscp_nickname& (0+255),w,b
 11699  003B9A  EE20  F09C         	lfsr	2,_vscp_imsg+6
 11700  003B9E  62DF               	cpfseq	indf2,c
 11701  003BA0  D00D               	goto	l1091
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;vscp_firmware.c: 469: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 11705  003BA2  040C               	decf	vscp_handleDropNickname@bytes,w,c
 11706  003BA4  E005               	bz	l1090
 11707                           
 11708                           ; BSR set to: 0
 11709  003BA6  0E01               	movlw	1
 11710  003BA8  640C               	cpfsgt	vscp_handleDropNickname@bytes,c
 11711  003BAA  D008               	goto	l1091
 11712                           
 11713                           ; BSR set to: 0
 11714  003BAC  679D               	tstfsz	(_vscp_imsg+7)& (0+255),b
 11715  003BAE  D006               	goto	l1091
 11716  003BB0                     l1090:
 11717                           
 11718                           ; BSR set to: 0
 11719                           ;vscp_firmware.c: 471: vscp_nickname = 0xff;
 11720  003BB0  6991               	setf	_vscp_nickname& (0+255),b
 11721                           
 11722                           ; BSR set to: 0
 11723                           ;vscp_firmware.c: 472: vscp_writeNicknamePermanent(0xff);
 11724  003BB2  0EFF               	movlw	255
 11725  003BB4  EC6F  F01F         	call	_vscp_writeNicknamePermanent
 11726                           
 11727                           ;vscp_firmware.c: 473: vscp_init();
 11728  003BB8  EC47  F01D         	call	_vscp_init	;wreg free
 11729  003BBC                     l1091:
 11730                           
 11731                           ; BSR set to: 0
 11732  003BBC  0012               	return	
 11733  003BBE                     __end_of_vscp_handleDropNickname:
 11734                           	opt stack 0
 11735                           tblptru	equ	0xFF8
 11736                           tblptrh	equ	0xFF7
 11737                           tblptrl	equ	0xFF6
 11738                           tablat	equ	0xFF5
 11739                           prodh	equ	0xFF4
 11740                           prodl	equ	0xFF3
 11741                           postinc0	equ	0xFEE
 11742                           wreg	equ	0xFE8
 11743                           indf2	equ	0xFDF
 11744                           postinc2	equ	0xFDE
 11745                           postdec2	equ	0xFDD
 11746                           fsr2h	equ	0xFDA
 11747                           fsr2l	equ	0xFD9
 11748                           status	equ	0xFD8
 11749                           
 11750 ;; *************** function _vscp_init *****************
 11751 ;; Defined at:
 11752 ;;		line 117 in file "../../vscp_firmware/common/vscp_firmware.c"
 11753 ;; Parameters:    Size  Location     Type
 11754 ;;		None
 11755 ;; Auto vars:     Size  Location     Type
 11756 ;;		None
 11757 ;; Return value:  Size  Location     Type
 11758 ;;		None               void
 11759 ;; Registers used:
 11760 ;;		wreg, status,2, cstack
 11761 ;; Tracked objects:
 11762 ;;		On entry : 0/0
 11763 ;;		On exit  : F/0
 11764 ;;		Unchanged: 0/0
 11765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11766 ;;      Params:         0       0       0       0       0       0       0
 11767 ;;      Locals:         0       0       0       0       0       0       0
 11768 ;;      Temps:          0       0       0       0       0       0       0
 11769 ;;      Totals:         0       0       0       0       0       0       0
 11770 ;;Total ram usage:        0 bytes
 11771 ;; Hardware stack levels used:    1
 11772 ;; Hardware stack levels required when called:    4
 11773 ;; This function calls:
 11774 ;;		_vscp_readNicknamePermanent
 11775 ;; This function is called by:
 11776 ;;		_main
 11777 ;;		_vscp_handleDropNickname
 11778 ;;		_vscp_handleProtocolEvent
 11779 ;; This function uses a non-reentrant model
 11780 ;;
 11781                           
 11782                           	psect	text43
 11783  003A8E                     __ptext43:
 11784                           	opt stack 0
 11785  003A8E                     _vscp_init:
 11786                           	opt stack 24
 11787                           
 11788                           ;vscp_firmware.c: 118: vscp_initledfunc = 0x02;
 11789                           
 11790                           ; BSR set to: 0
 11791                           ;incstack = 0
 11792                           ;incstack = 0
 11793  003A8E  0E02               	movlw	2
 11794  003A90  6E56               	movwf	_vscp_initledfunc,c
 11795                           
 11796                           ;vscp_firmware.c: 121: vscp_nickname = vscp_readNicknamePermanent();
 11797  003A92  ECA7  F01F         	call	_vscp_readNicknamePermanent	;wreg free
 11798  003A96  0100               	movlb	0	; () banked
 11799  003A98  6F91               	movwf	_vscp_nickname& (0+255),b
 11800                           
 11801                           ; BSR set to: 0
 11802                           ;vscp_firmware.c: 124: if (!vscp_nickname) vscp_nickname = 0xff;
 11803  003A9A  6791               	tstfsz	_vscp_nickname& (0+255),b
 11804  003A9C  D001               	goto	l1032
 11805                           
 11806                           ; BSR set to: 0
 11807  003A9E  6991               	setf	_vscp_nickname& (0+255),b
 11808  003AA0                     l1032:
 11809                           
 11810                           ; BSR set to: 0
 11811                           ;vscp_firmware.c: 127: vscp_imsg.flags = 0;
 11812  003AA0  6B96               	clrf	_vscp_imsg& (0+255),b
 11813                           
 11814                           ;vscp_firmware.c: 128: vscp_imsg.priority = 0;
 11815  003AA2  6B97               	clrf	(_vscp_imsg+1)& (0+255),b
 11816                           
 11817                           ;vscp_firmware.c: 129: vscp_imsg.vscp_class = 0;
 11818  003AA4  6B98               	clrf	(_vscp_imsg+2)& (0+255),b
 11819  003AA6  6B99               	clrf	(_vscp_imsg+3)& (0+255),b
 11820                           
 11821                           ;vscp_firmware.c: 130: vscp_imsg.vscp_type = 0;
 11822  003AA8  6B9A               	clrf	(_vscp_imsg+4)& (0+255),b
 11823                           
 11824                           ;vscp_firmware.c: 133: vscp_omsg.flags = 0;
 11825  003AAA  6BA4               	clrf	_vscp_omsg& (0+255),b
 11826                           
 11827                           ;vscp_firmware.c: 134: vscp_omsg.priority = 0;
 11828  003AAC  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 11829                           
 11830                           ;vscp_firmware.c: 135: vscp_omsg.vscp_class = 0;
 11831  003AAE  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 11832  003AB0  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 11833                           
 11834                           ;vscp_firmware.c: 138: vscp_errorcnt = 0;
 11835  003AB2  6BA8               	clrf	(_vscp_omsg+4)& (0+255),b
 11836                           
 11837                           ;vscp_firmware.c: 139: vscp_alarmstatus = 0;
 11838  003AB4  6B8C               	clrf	_vscp_alarmstatus& (0+255),b
 11839                           
 11840                           ;vscp_firmware.c: 141: vscp_probe_address = 0;
 11841  003AB6  6A57               	clrf	_vscp_probe_address,c
 11842                           
 11843                           ;vscp_firmware.c: 144: vscp_node_state = 0x00;
 11844  003AB8  6B92               	clrf	_vscp_node_state& (0+255),b
 11845                           
 11846                           ;vscp_firmware.c: 145: vscp_node_substate = 0x00;
 11847  003ABA  6B93               	clrf	_vscp_node_substate& (0+255),b
 11848                           
 11849                           ;vscp_firmware.c: 147: vscp_probe_cnt = 0;
 11850  003ABC  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 11851                           
 11852                           ;vscp_firmware.c: 148: vscp_page_select = 0;
 11853  003ABE  6A52               	clrf	_vscp_page_select,c
 11854  003AC0  6A53               	clrf	_vscp_page_select+1,c
 11855                           
 11856                           ;vscp_firmware.c: 151: vscp_timer = 0;
 11857  003AC2  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 11858  003AC4  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 11859                           
 11860                           ;vscp_firmware.c: 152: vscp_configtimer = 0;
 11861  003AC6  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
 11862  003AC8  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 11863                           
 11864                           ;vscp_firmware.c: 153: vscp_second = 0;
 11865  003ACA  6B95               	clrf	_vscp_second& (0+255),b
 11866                           
 11867                           ;vscp_firmware.c: 154: vscp_minute = 0;
 11868  003ACC  6B90               	clrf	_vscp_minute& (0+255),b
 11869                           
 11870                           ;vscp_firmware.c: 155: vscp_hour = 0;
 11871  003ACE  6B8E               	clrf	_vscp_hour& (0+255),b
 11872                           
 11873                           ; BSR set to: 0
 11874  003AD0  0012               	return	
 11875  003AD2                     __end_of_vscp_init:
 11876                           	opt stack 0
 11877                           tblptru	equ	0xFF8
 11878                           tblptrh	equ	0xFF7
 11879                           tblptrl	equ	0xFF6
 11880                           tablat	equ	0xFF5
 11881                           prodh	equ	0xFF4
 11882                           prodl	equ	0xFF3
 11883                           postinc0	equ	0xFEE
 11884                           wreg	equ	0xFE8
 11885                           indf2	equ	0xFDF
 11886                           postinc2	equ	0xFDE
 11887                           postdec2	equ	0xFDD
 11888                           fsr2h	equ	0xFDA
 11889                           fsr2l	equ	0xFD9
 11890                           status	equ	0xFD8
 11891                           
 11892 ;; *************** function _vscp_readNicknamePermanent *****************
 11893 ;; Defined at:
 11894 ;;		line 849 in file "../main.c"
 11895 ;; Parameters:    Size  Location     Type
 11896 ;;		None
 11897 ;; Auto vars:     Size  Location     Type
 11898 ;;		None
 11899 ;; Return value:  Size  Location     Type
 11900 ;;                  1    wreg      unsigned char 
 11901 ;; Registers used:
 11902 ;;		wreg, status,2, cstack
 11903 ;; Tracked objects:
 11904 ;;		On entry : 0/0
 11905 ;;		On exit  : 0/0
 11906 ;;		Unchanged: 0/0
 11907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11908 ;;      Params:         0       0       0       0       0       0       0
 11909 ;;      Locals:         0       0       0       0       0       0       0
 11910 ;;      Temps:          0       0       0       0       0       0       0
 11911 ;;      Totals:         0       0       0       0       0       0       0
 11912 ;;Total ram usage:        0 bytes
 11913 ;; Hardware stack levels used:    1
 11914 ;; Hardware stack levels required when called:    3
 11915 ;; This function calls:
 11916 ;;		_readEEPROM
 11917 ;; This function is called by:
 11918 ;;		_vscp_init
 11919 ;; This function uses a non-reentrant model
 11920 ;;
 11921                           
 11922                           	psect	text44
 11923  003F4E                     __ptext44:
 11924                           	opt stack 0
 11925  003F4E                     _vscp_readNicknamePermanent:
 11926                           	opt stack 24
 11927                           
 11928                           ;main.c: 850: return readEEPROM( 0x01 );
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;incstack = 0
 11932                           ;incstack = 0
 11933  003F4E  6A09               	clrf	?_readEEPROM+1,c
 11934  003F50  0E01               	movlw	1
 11935  003F52  6E08               	movwf	?_readEEPROM,c
 11936  003F54  EF81  F01F         	goto	_readEEPROM	;wreg free
 11937  003F58                     __end_of_vscp_readNicknamePermanent:
 11938                           	opt stack 0
 11939                           tblptru	equ	0xFF8
 11940                           tblptrh	equ	0xFF7
 11941                           tblptrl	equ	0xFF6
 11942                           tablat	equ	0xFF5
 11943                           prodh	equ	0xFF4
 11944                           prodl	equ	0xFF3
 11945                           postinc0	equ	0xFEE
 11946                           wreg	equ	0xFE8
 11947                           indf2	equ	0xFDF
 11948                           postinc2	equ	0xFDE
 11949                           postdec2	equ	0xFDD
 11950                           fsr2h	equ	0xFDA
 11951                           fsr2l	equ	0xFD9
 11952                           status	equ	0xFD8
 11953                           
 11954 ;; *************** function _vscp_handleSetNickname *****************
 11955 ;; Defined at:
 11956 ;;		line 414 in file "../../vscp_firmware/common/vscp_firmware.c"
 11957 ;; Parameters:    Size  Location     Type
 11958 ;;		None
 11959 ;; Auto vars:     Size  Location     Type
 11960 ;;		None
 11961 ;; Return value:  Size  Location     Type
 11962 ;;		None               void
 11963 ;; Registers used:
 11964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11965 ;; Tracked objects:
 11966 ;;		On entry : F/0
 11967 ;;		On exit  : 0/0
 11968 ;;		Unchanged: 0/0
 11969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11970 ;;      Params:         0       0       0       0       0       0       0
 11971 ;;      Locals:         0       0       0       0       0       0       0
 11972 ;;      Temps:          0       0       0       0       0       0       0
 11973 ;;      Totals:         0       0       0       0       0       0       0
 11974 ;;Total ram usage:        0 bytes
 11975 ;; Hardware stack levels used:    1
 11976 ;; Hardware stack levels required when called:    4
 11977 ;; This function calls:
 11978 ;;		_vscp_writeNicknamePermanent
 11979 ;;		_vscp_setSegmentCRC
 11980 ;; This function is called by:
 11981 ;;		_vscp_handleProtocolEvent
 11982 ;; This function uses a non-reentrant model
 11983 ;;
 11984                           
 11985                           	psect	text45
 11986  003CD8                     __ptext45:
 11987                           	opt stack 0
 11988  003CD8                     _vscp_handleSetNickname:
 11989                           	opt stack 25
 11990                           
 11991                           ; BSR set to: 0
 11992                           ;vscp_firmware.c: 415: if ((2 == (vscp_imsg.flags & 0x0f)) &&
 11993                           ;vscp_firmware.c: 416: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11994                           
 11995                           ;incstack = 0
 11996                           ;incstack = 0
 11997  003CD8  5196               	movf	_vscp_imsg& (0+255),w,b
 11998  003CDA  0B0F               	andlw	15
 11999  003CDC  0A02               	xorlw	2
 12000  003CDE  E10D               	bnz	l1084
 12001                           
 12002                           ; BSR set to: 0
 12003  003CE0  5191               	movf	_vscp_nickname& (0+255),w,b
 12004  003CE2  EE20  F09C         	lfsr	2,_vscp_imsg+6
 12005  003CE6  62DF               	cpfseq	indf2,c
 12006  003CE8  D008               	goto	l1084
 12007                           
 12008                           ; BSR set to: 0
 12009                           ;vscp_firmware.c: 419: vscp_nickname = vscp_imsg.data[ 1 ];
 12010  003CEA  C09D  F091         	movff	_vscp_imsg+7,_vscp_nickname
 12011                           
 12012                           ; BSR set to: 0
 12013                           ;vscp_firmware.c: 420: vscp_writeNicknamePermanent(vscp_nickname);
 12014  003CEE  5191               	movf	_vscp_nickname& (0+255),w,b
 12015  003CF0  EC6F  F01F         	call	_vscp_writeNicknamePermanent
 12016                           
 12017                           ;vscp_firmware.c: 421: vscp_setSegmentCRC(0x40);
 12018  003CF4  0E40               	movlw	64
 12019  003CF6  EC66  F01F         	call	_vscp_setSegmentCRC
 12020  003CFA                     l1084:
 12021  003CFA  0012               	return	
 12022  003CFC                     __end_of_vscp_handleSetNickname:
 12023                           	opt stack 0
 12024                           tblptru	equ	0xFF8
 12025                           tblptrh	equ	0xFF7
 12026                           tblptrl	equ	0xFF6
 12027                           tablat	equ	0xFF5
 12028                           prodh	equ	0xFF4
 12029                           prodl	equ	0xFF3
 12030                           postinc0	equ	0xFEE
 12031                           wreg	equ	0xFE8
 12032                           indf2	equ	0xFDF
 12033                           postinc2	equ	0xFDE
 12034                           postdec2	equ	0xFDD
 12035                           fsr2h	equ	0xFDA
 12036                           fsr2l	equ	0xFD9
 12037                           status	equ	0xFD8
 12038                           
 12039 ;; *************** function _vscp_handleHeartbeat *****************
 12040 ;; Defined at:
 12041 ;;		line 388 in file "../../vscp_firmware/common/vscp_firmware.c"
 12042 ;; Parameters:    Size  Location     Type
 12043 ;;		None
 12044 ;; Auto vars:     Size  Location     Type
 12045 ;;		None
 12046 ;; Return value:  Size  Location     Type
 12047 ;;		None               void
 12048 ;; Registers used:
 12049 ;;		wreg, status,2, status,0, cstack
 12050 ;; Tracked objects:
 12051 ;;		On entry : F/0
 12052 ;;		On exit  : 0/0
 12053 ;;		Unchanged: 0/0
 12054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12055 ;;      Params:         0       0       0       0       0       0       0
 12056 ;;      Locals:         0       0       0       0       0       0       0
 12057 ;;      Temps:          0       0       0       0       0       0       0
 12058 ;;      Totals:         0       0       0       0       0       0       0
 12059 ;;Total ram usage:        0 bytes
 12060 ;; Hardware stack levels used:    1
 12061 ;; Hardware stack levels required when called:    4
 12062 ;; This function calls:
 12063 ;;		_vscp_writeNicknamePermanent
 12064 ;;		_vscp_getSegmentCRC
 12065 ;;		_vscp_setSegmentCRC
 12066 ;; This function is called by:
 12067 ;;		_vscp_handleProtocolEvent
 12068 ;; This function uses a non-reentrant model
 12069 ;;
 12070                           
 12071                           	psect	text46
 12072  003B12                     __ptext46:
 12073                           	opt stack 0
 12074  003B12                     _vscp_handleHeartbeat:
 12075                           	opt stack 25
 12076                           
 12077                           ; BSR set to: 0
 12078                           ;vscp_firmware.c: 389: if ( !vscp_getSegmentCRC() ) {
 12079                           
 12080                           ;incstack = 0
 12081                           ;incstack = 0
 12082  003B12  ECAC  F01F         	call	_vscp_getSegmentCRC	;wreg free
 12083  003B16  0900               	iorlw	0
 12084  003B18  E116               	bnz	l8945
 12085                           
 12086                           ;vscp_firmware.c: 390: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 12087                           ;vscp_firmware.c: 391: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 12088  003B1A  0100               	movlb	0	; () banked
 12089  003B1C  5196               	movf	_vscp_imsg& (0+255),w,b
 12090  003B1E  0B0F               	andlw	15
 12091  003B20  0A05               	xorlw	5
 12092  003B22  E115               	bnz	l1080
 12093                           
 12094                           ; BSR set to: 0
 12095  003B24  ECAC  F01F         	call	_vscp_getSegmentCRC	;wreg free
 12096  003B28  0100               	movlb	0	; () banked
 12097  003B2A  199C               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 12098  003B2C  E010               	bz	l1080
 12099                           
 12100                           ; BSR set to: 0
 12101                           ;vscp_firmware.c: 395: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12102  003B2E  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12103  003B30  EC66  F01F         	call	_vscp_setSegmentCRC
 12104                           
 12105                           ;vscp_firmware.c: 398: vscp_nickname = 0xff;
 12106  003B34  0100               	movlb	0	; () banked
 12107  003B36  6991               	setf	_vscp_nickname& (0+255),b
 12108                           
 12109                           ;vscp_firmware.c: 399: vscp_writeNicknamePermanent(0xff);
 12110  003B38  0EFF               	movlw	255
 12111  003B3A  EC6F  F01F         	call	_vscp_writeNicknamePermanent
 12112                           
 12113                           ;vscp_firmware.c: 400: vscp_node_state = 0x01;
 12114  003B3E  0E01               	movlw	1
 12115  003B40  0100               	movlb	0	; () banked
 12116  003B42  6F92               	movwf	_vscp_node_state& (0+255),b
 12117  003B44  D004               	goto	l1080
 12118  003B46                     l8945:
 12119                           
 12120                           ;vscp_firmware.c: 403: else {
 12121                           ;vscp_firmware.c: 405: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12122  003B46  0100               	movlb	0	; () banked
 12123  003B48  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12124  003B4A  EC66  F01F         	call	_vscp_setSegmentCRC
 12125  003B4E                     l1080:
 12126  003B4E  0012               	return	
 12127  003B50                     __end_of_vscp_handleHeartbeat:
 12128                           	opt stack 0
 12129                           tblptru	equ	0xFF8
 12130                           tblptrh	equ	0xFF7
 12131                           tblptrl	equ	0xFF6
 12132                           tablat	equ	0xFF5
 12133                           prodh	equ	0xFF4
 12134                           prodl	equ	0xFF3
 12135                           postinc0	equ	0xFEE
 12136                           wreg	equ	0xFE8
 12137                           indf2	equ	0xFDF
 12138                           postinc2	equ	0xFDE
 12139                           postdec2	equ	0xFDD
 12140                           fsr2h	equ	0xFDA
 12141                           fsr2l	equ	0xFD9
 12142                           status	equ	0xFD8
 12143                           
 12144 ;; *************** function _vscp_getMatrixInfo *****************
 12145 ;; Defined at:
 12146 ;;		line 2437 in file "../main.c"
 12147 ;; Parameters:    Size  Location     Type
 12148 ;;  pData           1    wreg     PTR unsigned char 
 12149 ;;		 -> vscp_omsg(13), 
 12150 ;; Auto vars:     Size  Location     Type
 12151 ;;  pData           1    0[COMRAM] PTR unsigned char 
 12152 ;;		 -> vscp_omsg(13), 
 12153 ;;  i               1    7[COMRAM] unsigned char 
 12154 ;; Return value:  Size  Location     Type
 12155 ;;		None               void
 12156 ;; Registers used:
 12157 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12158 ;; Tracked objects:
 12159 ;;		On entry : F/0
 12160 ;;		On exit  : F/0
 12161 ;;		Unchanged: 0/0
 12162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12163 ;;      Params:         0       0       0       0       0       0       0
 12164 ;;      Locals:         1       0       0       0       0       0       0
 12165 ;;      Temps:          0       0       0       0       0       0       0
 12166 ;;      Totals:         1       0       0       0       0       0       0
 12167 ;;Total ram usage:        1 bytes
 12168 ;; Hardware stack levels used:    1
 12169 ;; Hardware stack levels required when called:    2
 12170 ;; This function calls:
 12171 ;;		Nothing
 12172 ;; This function is called by:
 12173 ;;		_vscp_handleProtocolEvent
 12174 ;; This function uses a non-reentrant model
 12175 ;;
 12176                           
 12177                           	psect	text47
 12178  003DA8                     __ptext47:
 12179                           	opt stack 0
 12180  003DA8                     _vscp_getMatrixInfo:
 12181                           	opt stack 27
 12182                           
 12183                           ; BSR set to: 0
 12184                           ;main.c: 2438: uint8_t i;
 12185                           ;main.c: 2440: vscp_omsg.data[ 0 ] = 7;
 12186                           
 12187                           ;incstack = 0
 12188                           ;incstack = 0
 12189  003DA8  0E07               	movlw	7
 12190  003DAA  6FA9               	movwf	(_vscp_omsg+5)& (0+255),b
 12191                           
 12192                           ;main.c: 2441: vscp_omsg.data[ 1 ] = 72;
 12193  003DAC  0E48               	movlw	72
 12194  003DAE  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
 12195                           
 12196                           ;main.c: 2444: for ( i = 2; i < 8; i++ ) {
 12197  003DB0  0E02               	movlw	2
 12198  003DB2  6E08               	movwf	vscp_getMatrixInfo@i,c
 12199  003DB4                     l6437:
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;main.c: 2445: vscp_omsg.data[ i ] = 0;
 12203  003DB4  5008               	movf	vscp_getMatrixInfo@i,w,c
 12204  003DB6  0FA9               	addlw	low (_vscp_omsg+5)
 12205  003DB8  6ED9               	movwf	fsr2l,c
 12206  003DBA  6ADA               	clrf	fsr2h,c
 12207  003DBC  6ADF               	clrf	indf2,c
 12208                           
 12209                           ; BSR set to: 0
 12210  003DBE  2A08               	incf	vscp_getMatrixInfo@i,f,c
 12211                           
 12212                           ; BSR set to: 0
 12213  003DC0  0E07               	movlw	7
 12214  003DC2  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 12215  003DC4  D7F7               	goto	l6437
 12216                           
 12217                           ; BSR set to: 0
 12218  003DC6  0C07               	retlw	7
 12219  003DC8                     __end_of_vscp_getMatrixInfo:
 12220                           	opt stack 0
 12221                           tblptru	equ	0xFF8
 12222                           tblptrh	equ	0xFF7
 12223                           tblptrl	equ	0xFF6
 12224                           tablat	equ	0xFF5
 12225                           prodh	equ	0xFF4
 12226                           prodl	equ	0xFF3
 12227                           postinc0	equ	0xFEE
 12228                           wreg	equ	0xFE8
 12229                           indf2	equ	0xFDF
 12230                           postinc2	equ	0xFDE
 12231                           postdec2	equ	0xFDD
 12232                           fsr2h	equ	0xFDA
 12233                           fsr2l	equ	0xFD9
 12234                           status	equ	0xFD8
 12235                           
 12236 ;; *************** function _vscp_goBootloaderMode *****************
 12237 ;; Defined at:
 12238 ;;		line 2421 in file "../main.c"
 12239 ;; Parameters:    Size  Location     Type
 12240 ;;  algorithm       1    wreg     unsigned char 
 12241 ;; Auto vars:     Size  Location     Type
 12242 ;;  algorithm       1   10[COMRAM] unsigned char 
 12243 ;; Return value:  Size  Location     Type
 12244 ;;		None               void
 12245 ;; Registers used:
 12246 ;;		wreg, status,2, status,0, cstack
 12247 ;; Tracked objects:
 12248 ;;		On entry : F/0
 12249 ;;		On exit  : 0/0
 12250 ;;		Unchanged: 0/0
 12251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12252 ;;      Params:         0       0       0       0       0       0       0
 12253 ;;      Locals:         1       0       0       0       0       0       0
 12254 ;;      Temps:          0       0       0       0       0       0       0
 12255 ;;      Totals:         1       0       0       0       0       0       0
 12256 ;;Total ram usage:        1 bytes
 12257 ;; Hardware stack levels used:    1
 12258 ;; Hardware stack levels required when called:    3
 12259 ;; This function calls:
 12260 ;;		_writeEEPROM
 12261 ;; This function is called by:
 12262 ;;		_vscp_handleProtocolEvent
 12263 ;; This function uses a non-reentrant model
 12264 ;;
 12265                           
 12266                           	psect	text48
 12267  003E4E                     __ptext48:
 12268                           	opt stack 0
 12269  003E4E                     _vscp_goBootloaderMode:
 12270                           	opt stack 26
 12271                           
 12272                           ; BSR set to: 0
 12273                           ;incstack = 0
 12274                           ;incstack = 0
 12275                           ;vscp_goBootloaderMode@algorithm stored from wreg
 12276  003E4E  CFE8 F00B          	movff	wreg,vscp_goBootloaderMode@algorithm
 12277                           
 12278                           ; BSR set to: 0
 12279                           ;main.c: 2422: if ( 0x01 != algorithm ) return;
 12280  003E52  040B               	decf	vscp_goBootloaderMode@algorithm,w,c
 12281  003E54  E107               	bnz	l622
 12282                           
 12283                           ; BSR set to: 0
 12284                           ;main.c: 2426: writeEEPROM(0x00, 0xff);
 12285  003E56  6A09               	clrf	?_writeEEPROM+1,c
 12286  003E58  6A08               	clrf	?_writeEEPROM,c
 12287  003E5A  0EFF               	movlw	255
 12288  003E5C  680A               	setf	?_writeEEPROM+2,c
 12289  003E5E  EC59  F01E         	call	_writeEEPROM	;wreg free
 12290  003E62  00FF               	reset		;# 
 12291  003E64                     l622:
 12292  003E64  0012               	return	
 12293  003E66                     __end_of_vscp_goBootloaderMode:
 12294                           	opt stack 0
 12295                           tblptru	equ	0xFF8
 12296                           tblptrh	equ	0xFF7
 12297                           tblptrl	equ	0xFF6
 12298                           tablat	equ	0xFF5
 12299                           prodh	equ	0xFF4
 12300                           prodl	equ	0xFF3
 12301                           postinc0	equ	0xFEE
 12302                           wreg	equ	0xFE8
 12303                           indf2	equ	0xFDF
 12304                           postinc2	equ	0xFDE
 12305                           postdec2	equ	0xFDD
 12306                           fsr2h	equ	0xFDA
 12307                           fsr2l	equ	0xFD9
 12308                           status	equ	0xFD8
 12309                           
 12310 ;; *************** function _vscp_handleProbeState *****************
 12311 ;; Defined at:
 12312 ;;		line 200 in file "../../vscp_firmware/common/vscp_firmware.c"
 12313 ;; Parameters:    Size  Location     Type
 12314 ;;		None
 12315 ;; Auto vars:     Size  Location     Type
 12316 ;;		None
 12317 ;; Return value:  Size  Location     Type
 12318 ;;		None               void
 12319 ;; Registers used:
 12320 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12321 ;; Tracked objects:
 12322 ;;		On entry : 0/0
 12323 ;;		On exit  : F/0
 12324 ;;		Unchanged: 0/0
 12325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12326 ;;      Params:         0       0       0       0       0       0       0
 12327 ;;      Locals:         0       0       0       0       0       0       0
 12328 ;;      Temps:          0       0       0       0       0       0       0
 12329 ;;      Totals:         0       0       0       0       0       0       0
 12330 ;;Total ram usage:        0 bytes
 12331 ;; Hardware stack levels used:    1
 12332 ;; Hardware stack levels required when called:    8
 12333 ;; This function calls:
 12334 ;;		_vscp_goActiveState
 12335 ;;		_vscp_writeNicknamePermanent
 12336 ;;		_vscp_sendEvent
 12337 ;;		_vscp_setSegmentCRC
 12338 ;; This function is called by:
 12339 ;;		_main
 12340 ;; This function uses a non-reentrant model
 12341 ;;
 12342                           
 12343                           	psect	text49
 12344  0035BE                     __ptext49:
 12345                           	opt stack 0
 12346  0035BE                     _vscp_handleProbeState:
 12347                           	opt stack 22
 12348                           
 12349                           ;vscp_firmware.c: 201: switch (vscp_node_substate) {
 12350                           
 12351                           ;incstack = 0
 12352                           ;incstack = 0
 12353  0035BE  D053               	goto	l7373
 12354  0035C0                     l7303:
 12355                           
 12356                           ; BSR set to: 0
 12357                           ;vscp_firmware.c: 205: if (0xff != vscp_probe_address) {
 12358  0035C0  2857               	incf	_vscp_probe_address,w,c
 12359  0035C2  E010               	bz	l7319
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;vscp_firmware.c: 207: vscp_omsg.flags = 0x80 + 1;
 12363  0035C4  0E81               	movlw	129
 12364  0035C6  6FA4               	movwf	_vscp_omsg& (0+255),b
 12365                           
 12366                           ; BSR set to: 0
 12367                           ;vscp_firmware.c: 208: vscp_omsg.priority = 0x00;
 12368  0035C8  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12369                           
 12370                           ; BSR set to: 0
 12371                           ;vscp_firmware.c: 209: vscp_omsg.vscp_class = 0;
 12372  0035CA  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12373  0035CC  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12374                           
 12375                           ;vscp_firmware.c: 210: vscp_omsg.vscp_type = 2;
 12376  0035CE  0E02               	movlw	2
 12377  0035D0  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12378                           
 12379                           ; BSR set to: 0
 12380                           ;vscp_firmware.c: 211: vscp_omsg.data[ 0 ] = vscp_probe_address;
 12381  0035D2  C057  F0A9         	movff	_vscp_probe_address,_vscp_omsg+5
 12382                           
 12383                           ; BSR set to: 0
 12384                           ;vscp_firmware.c: 214: vscp_sendEvent();
 12385  0035D6  EC46  F01E         	call	_vscp_sendEvent	;wreg free
 12386                           
 12387                           ; BSR set to: 0
 12388                           ;vscp_firmware.c: 216: vscp_node_substate = 0x01;
 12389  0035DA  0E01               	movlw	1
 12390  0035DC  6F93               	movwf	_vscp_node_substate& (0+255),b
 12391  0035DE                     l7317:
 12392                           
 12393                           ; BSR set to: 0
 12394                           ;vscp_firmware.c: 217: vscp_timer = 0;
 12395  0035DE  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12396  0035E0  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12397                           
 12398                           ;vscp_firmware.c: 219: } else {
 12399  0035E2  D048               	goto	l1047
 12400  0035E4                     l7319:
 12401                           
 12402                           ; BSR set to: 0
 12403                           ;vscp_firmware.c: 222: vscp_node_state = 0x04;
 12404  0035E4  0E04               	movlw	4
 12405  0035E6  6F92               	movwf	_vscp_node_state& (0+255),b
 12406                           
 12407                           ;vscp_firmware.c: 225: vscp_omsg.flags = 0x80 + 1;
 12408  0035E8  0E81               	movlw	129
 12409  0035EA  6FA4               	movwf	_vscp_omsg& (0+255),b
 12410                           
 12411                           ; BSR set to: 0
 12412                           ;vscp_firmware.c: 226: vscp_omsg.data[ 0 ] = 0xff;
 12413  0035EC  69A9               	setf	(_vscp_omsg+5)& (0+255),b
 12414                           
 12415                           ;vscp_firmware.c: 227: vscp_omsg.priority = 0x07;
 12416  0035EE  0E07               	movlw	7
 12417  0035F0  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
 12418                           
 12419                           ; BSR set to: 0
 12420                           ;vscp_firmware.c: 228: vscp_omsg.vscp_class = 0;
 12421  0035F2  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12422  0035F4  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12423                           
 12424                           ;vscp_firmware.c: 229: vscp_omsg.vscp_type = 3;
 12425  0035F6  0E03               	movlw	3
 12426  0035F8  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12427                           
 12428                           ; BSR set to: 0
 12429                           ;vscp_firmware.c: 232: vscp_sendEvent();
 12430  0035FA  EC46  F01E         	call	_vscp_sendEvent	;wreg free
 12431  0035FE  D03A               	goto	l1047
 12432  003600                     l1048:
 12433                           
 12434                           ; BSR set to: 0
 12435                           ;vscp_firmware.c: 239: if (vscp_imsg.flags & 0x80) {
 12436  003600  AF96               	btfss	_vscp_imsg& (0+255),7,b
 12437  003602  D00F               	goto	l7343
 12438                           
 12439                           ; BSR set to: 0
 12440                           ;vscp_firmware.c: 242: if ((0 == vscp_imsg.vscp_class) &&
 12441                           ;vscp_firmware.c: 243: (3 == vscp_imsg.vscp_type)) {
 12442  003604  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
 12443  003606  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 12444  003608  E135               	bnz	l1047
 12445                           
 12446                           ; BSR set to: 0
 12447  00360A  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
 12448  00360C  0A03               	xorlw	3
 12449  00360E  E132               	bnz	l1047
 12450                           
 12451                           ; BSR set to: 0
 12452                           ;vscp_firmware.c: 246: if (0 == vscp_probe_address) {
 12453  003610  6657               	tstfsz	_vscp_probe_address,c
 12454  003612  D003               	goto	l7337
 12455                           
 12456                           ; BSR set to: 0
 12457                           ;vscp_firmware.c: 250: vscp_node_state = 0x02;
 12458  003614  0E02               	movlw	2
 12459  003616  6F92               	movwf	_vscp_node_state& (0+255),b
 12460  003618  D7E2               	goto	l7317
 12461  00361A                     l7337:
 12462                           
 12463                           ; BSR set to: 0
 12464                           ;vscp_firmware.c: 256: vscp_probe_address++;
 12465  00361A  2A57               	incf	_vscp_probe_address,f,c
 12466                           
 12467                           ; BSR set to: 0
 12468                           ;vscp_firmware.c: 257: vscp_node_substate = 0x00;
 12469  00361C  6B93               	clrf	_vscp_node_substate& (0+255),b
 12470  00361E                     l7341:
 12471                           
 12472                           ; BSR set to: 0
 12473                           ;vscp_firmware.c: 258: vscp_probe_cnt = 0;
 12474  00361E  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12475  003620  D029               	goto	l1047
 12476  003622                     l7343:
 12477                           
 12478                           ; BSR set to: 0
 12479                           ;vscp_firmware.c: 264: if (vscp_timer > 1000) {
 12480  003622  0EE9               	movlw	233
 12481  003624  5D86               	subwf	_vscp_timer& (0+255),w,b	;volatile
 12482  003626  0E03               	movlw	3
 12483  003628  5987               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 12484  00362A  E324               	bnc	l1047
 12485                           
 12486                           ; BSR set to: 0
 12487                           ;vscp_firmware.c: 266: vscp_probe_cnt++;
 12488  00362C  2B94               	incf	_vscp_probe_cnt& (0+255),f,b
 12489                           
 12490                           ; BSR set to: 0
 12491                           ;vscp_firmware.c: 268: if (vscp_probe_cnt >= 3) {
 12492  00362E  0E02               	movlw	2
 12493  003630  6594               	cpfsgt	_vscp_probe_cnt& (0+255),b
 12494  003632  D017               	goto	l1055
 12495                           
 12496                           ; BSR set to: 0
 12497                           ;vscp_firmware.c: 271: if (0 == vscp_probe_address) {
 12498  003634  6657               	tstfsz	_vscp_probe_address,c
 12499  003636  D005               	goto	l1056
 12500                           
 12501                           ; BSR set to: 0
 12502                           ;vscp_firmware.c: 274: vscp_probe_address++;
 12503  003638  2A57               	incf	_vscp_probe_address,f,c
 12504                           
 12505                           ; BSR set to: 0
 12506                           ;vscp_firmware.c: 275: vscp_node_substate = 0x00;
 12507  00363A  6B93               	clrf	_vscp_node_substate& (0+255),b
 12508                           
 12509                           ; BSR set to: 0
 12510                           ;vscp_firmware.c: 276: vscp_timer = 0;
 12511  00363C  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12512  00363E  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12513  003640  D7EE               	goto	l7341
 12514  003642                     l1056:
 12515                           
 12516                           ; BSR set to: 0
 12517                           ;vscp_firmware.c: 282: vscp_nickname = vscp_probe_address;
 12518  003642  C057  F091         	movff	_vscp_probe_address,_vscp_nickname
 12519                           
 12520                           ; BSR set to: 0
 12521                           ;vscp_firmware.c: 283: vscp_node_state = 0x03;
 12522  003646  0E03               	movlw	3
 12523  003648  6F92               	movwf	_vscp_node_state& (0+255),b
 12524                           
 12525                           ; BSR set to: 0
 12526                           ;vscp_firmware.c: 284: vscp_node_substate = 0x00;
 12527  00364A  6B93               	clrf	_vscp_node_substate& (0+255),b
 12528                           
 12529                           ; BSR set to: 0
 12530                           ;vscp_firmware.c: 285: vscp_writeNicknamePermanent(vscp_nickname);
 12531  00364C  5191               	movf	_vscp_nickname& (0+255),w,b
 12532  00364E  EC6F  F01F         	call	_vscp_writeNicknamePermanent
 12533                           
 12534                           ;vscp_firmware.c: 286: vscp_setSegmentCRC(0x40);
 12535  003652  0E40               	movlw	64
 12536  003654  EC66  F01F         	call	_vscp_setSegmentCRC
 12537                           
 12538                           ;vscp_firmware.c: 289: vscp_probe_cnt = 0;
 12539  003658  0100               	movlb	0	; () banked
 12540  00365A  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12541                           
 12542                           ; BSR set to: 0
 12543                           ;vscp_firmware.c: 290: vscp_goActiveState();
 12544  00365C  ECE4  F01E         	call	_vscp_goActiveState	;wreg free
 12545  003660  D009               	goto	l1047
 12546  003662                     l1055:
 12547                           
 12548                           ; BSR set to: 0
 12549                           ;vscp_firmware.c: 294: vscp_node_substate = 0x00;
 12550  003662  6B93               	clrf	_vscp_node_substate& (0+255),b
 12551  003664  D007               	goto	l1047
 12552  003666                     l7373:
 12553  003666  0100               	movlb	0	; () banked
 12554  003668  5193               	movf	_vscp_node_substate& (0+255),w,b
 12555                           
 12556                           ; Switch size 1, requested type "speed"
 12557                           ; Number of cases is 3, Range of values is 0 to 2
 12558                           ; switch strategies available:
 12559                           ; Name         Instructions Cycles
 12560                           ; simple_byte           10     6 (average)
 12561                           ;	Chosen strategy is simple_byte
 12562  00366A  E0AA               	bz	l7303
 12563  00366C  0A01               	xorlw	1	; case 1
 12564  00366E  E0C8               	bz	l1048
 12565  003670  0A03               	xorlw	3	; case 2
 12566  003672  E1F7               	bnz	l1055
 12567  003674                     l1047:
 12568                           
 12569                           ; BSR set to: 0
 12570                           ;vscp_firmware.c: 309: vscp_imsg.flags = 0;
 12571  003674  6B96               	clrf	_vscp_imsg& (0+255),b
 12572                           
 12573                           ; BSR set to: 0
 12574  003676  0012               	return	
 12575  003678                     __end_of_vscp_handleProbeState:
 12576                           	opt stack 0
 12577                           tblptru	equ	0xFF8
 12578                           tblptrh	equ	0xFF7
 12579                           tblptrl	equ	0xFF6
 12580                           tablat	equ	0xFF5
 12581                           prodh	equ	0xFF4
 12582                           prodl	equ	0xFF3
 12583                           postinc0	equ	0xFEE
 12584                           wreg	equ	0xFE8
 12585                           indf2	equ	0xFDF
 12586                           postinc2	equ	0xFDE
 12587                           postdec2	equ	0xFDD
 12588                           fsr2h	equ	0xFDA
 12589                           fsr2l	equ	0xFD9
 12590                           status	equ	0xFD8
 12591                           
 12592 ;; *************** function _vscp_goActiveState *****************
 12593 ;; Defined at:
 12594 ;;		line 350 in file "../../vscp_firmware/common/vscp_firmware.c"
 12595 ;; Parameters:    Size  Location     Type
 12596 ;;		None
 12597 ;; Auto vars:     Size  Location     Type
 12598 ;;		None
 12599 ;; Return value:  Size  Location     Type
 12600 ;;		None               void
 12601 ;; Registers used:
 12602 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12603 ;; Tracked objects:
 12604 ;;		On entry : 0/0
 12605 ;;		On exit  : F/0
 12606 ;;		Unchanged: 0/0
 12607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12608 ;;      Params:         0       0       0       0       0       0       0
 12609 ;;      Locals:         0       0       0       0       0       0       0
 12610 ;;      Temps:          0       0       0       0       0       0       0
 12611 ;;      Totals:         0       0       0       0       0       0       0
 12612 ;;Total ram usage:        0 bytes
 12613 ;; Hardware stack levels used:    1
 12614 ;; Hardware stack levels required when called:    7
 12615 ;; This function calls:
 12616 ;;		_vscp_sendEvent
 12617 ;; This function is called by:
 12618 ;;		_main
 12619 ;;		_vscp_handleProbeState
 12620 ;; This function uses a non-reentrant model
 12621 ;;
 12622                           
 12623                           	psect	text50
 12624  003DC8                     __ptext50:
 12625                           	opt stack 0
 12626  003DC8                     _vscp_goActiveState:
 12627                           	opt stack 22
 12628                           
 12629                           ;vscp_firmware.c: 351: vscp_omsg.flags = 0x80 + 1;
 12630                           
 12631                           ; BSR set to: 0
 12632                           ;incstack = 0
 12633                           ;incstack = 0
 12634  003DC8  0E81               	movlw	129
 12635  003DCA  0100               	movlb	0	; () banked
 12636  003DCC  6FA4               	movwf	_vscp_omsg& (0+255),b
 12637                           
 12638                           ; BSR set to: 0
 12639                           ;vscp_firmware.c: 352: vscp_omsg.priority = 0x00;
 12640  003DCE  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12641                           
 12642                           ; BSR set to: 0
 12643                           ;vscp_firmware.c: 353: vscp_omsg.vscp_class = 0;
 12644  003DD0  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12645  003DD2  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12646                           
 12647                           ;vscp_firmware.c: 354: vscp_omsg.vscp_type = 2;
 12648  003DD4  0E02               	movlw	2
 12649  003DD6  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12650                           
 12651                           ; BSR set to: 0
 12652                           ;vscp_firmware.c: 355: vscp_omsg.data[ 0 ] = vscp_nickname;
 12653  003DD8  C091  F0A9         	movff	_vscp_nickname,_vscp_omsg+5
 12654                           
 12655                           ; BSR set to: 0
 12656                           ;vscp_firmware.c: 358: vscp_sendEvent();
 12657  003DDC  EC46  F01E         	call	_vscp_sendEvent	;wreg free
 12658                           
 12659                           ; BSR set to: 0
 12660                           ;vscp_firmware.c: 360: vscp_initledfunc = 0x01;
 12661  003DE0  0E01               	movlw	1
 12662  003DE2  6E56               	movwf	_vscp_initledfunc,c
 12663                           
 12664                           ; BSR set to: 0
 12665  003DE4  0C01               	retlw	1
 12666  003DE6                     __end_of_vscp_goActiveState:
 12667                           	opt stack 0
 12668                           tblptru	equ	0xFF8
 12669                           tblptrh	equ	0xFF7
 12670                           tblptrl	equ	0xFF6
 12671                           tablat	equ	0xFF5
 12672                           prodh	equ	0xFF4
 12673                           prodl	equ	0xFF3
 12674                           postinc0	equ	0xFEE
 12675                           wreg	equ	0xFE8
 12676                           indf2	equ	0xFDF
 12677                           postinc2	equ	0xFDE
 12678                           postdec2	equ	0xFDD
 12679                           fsr2h	equ	0xFDA
 12680                           fsr2l	equ	0xFD9
 12681                           status	equ	0xFD8
 12682                           
 12683 ;; *************** function _vscp_sendEvent *****************
 12684 ;; Defined at:
 12685 ;;		line 1270 in file "../../vscp_firmware/common/vscp_firmware.c"
 12686 ;; Parameters:    Size  Location     Type
 12687 ;;		None
 12688 ;; Auto vars:     Size  Location     Type
 12689 ;;  rv              1    0        unsigned char 
 12690 ;; Return value:  Size  Location     Type
 12691 ;;                  1    wreg      unsigned char 
 12692 ;; Registers used:
 12693 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12694 ;; Tracked objects:
 12695 ;;		On entry : F/0
 12696 ;;		On exit  : F/0
 12697 ;;		Unchanged: 0/0
 12698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12699 ;;      Params:         0       0       0       0       0       0       0
 12700 ;;      Locals:         1       0       0       0       0       0       0
 12701 ;;      Temps:          0       0       0       0       0       0       0
 12702 ;;      Totals:         1       0       0       0       0       0       0
 12703 ;;Total ram usage:        1 bytes
 12704 ;; Hardware stack levels used:    1
 12705 ;; Hardware stack levels required when called:    6
 12706 ;; This function calls:
 12707 ;;		_sendVSCPFrame
 12708 ;; This function is called by:
 12709 ;;		_vscp_handleProbeState
 12710 ;;		_vscp_goActiveState
 12711 ;;		_vscp_sendHeartBeat
 12712 ;;		_vscp_newNodeOnline
 12713 ;;		_vscp_handleProtocolEvent
 12714 ;; This function uses a non-reentrant model
 12715 ;;
 12716                           
 12717                           	psect	text51
 12718  003C8C                     __ptext51:
 12719                           	opt stack 0
 12720  003C8C                     _vscp_sendEvent:
 12721                           	opt stack 22
 12722                           
 12723                           ; BSR set to: 0
 12724                           
 12725                           ; BSR set to: 0
 12726                           ;incstack = 0
 12727                           ;incstack = 0
 12728  003C8C  C0A6  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 12729  003C90  C0A7  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 12730  003C94  C0A8  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 12731  003C98  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 12732  003C9C  C0A5  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 12733  003CA0  51A4               	movf	_vscp_omsg& (0+255),w,b
 12734  003CA2  0B0F               	andlw	15
 12735  003CA4  6E44               	movwf	?_sendVSCPFrame+5,c
 12736  003CA6  0E00               	movlw	high (_vscp_omsg+5)
 12737  003CA8  6E46               	movwf	?_sendVSCPFrame+7,c
 12738  003CAA  0EA9               	movlw	low (_vscp_omsg+5)
 12739  003CAC  6E45               	movwf	?_sendVSCPFrame+6,c
 12740  003CAE  EF3C  F01B         	goto	_sendVSCPFrame	;wreg free
 12741  003CB2                     __end_of_vscp_sendEvent:
 12742                           	opt stack 0
 12743                           tblptru	equ	0xFF8
 12744                           tblptrh	equ	0xFF7
 12745                           tblptrl	equ	0xFF6
 12746                           tablat	equ	0xFF5
 12747                           prodh	equ	0xFF4
 12748                           prodl	equ	0xFF3
 12749                           postinc0	equ	0xFEE
 12750                           wreg	equ	0xFE8
 12751                           indf2	equ	0xFDF
 12752                           postinc2	equ	0xFDE
 12753                           postdec2	equ	0xFDD
 12754                           fsr2h	equ	0xFDA
 12755                           fsr2l	equ	0xFD9
 12756                           status	equ	0xFD8
 12757                           
 12758 ;; *************** function _sendVSCPFrame *****************
 12759 ;; Defined at:
 12760 ;;		line 2496 in file "../main.c"
 12761 ;; Parameters:    Size  Location     Type
 12762 ;;  vscpclass       2   62[COMRAM] unsigned short 
 12763 ;;  vscptype        1   64[COMRAM] unsigned char 
 12764 ;;  nodeid          1   65[COMRAM] unsigned char 
 12765 ;;  priority        1   66[COMRAM] unsigned char 
 12766 ;;  size            1   67[COMRAM] unsigned char 
 12767 ;;  pData           2   68[COMRAM] PTR unsigned char 
 12768 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 12769 ;; Auto vars:     Size  Location     Type
 12770 ;;  id              4   70[COMRAM] unsigned long 
 12771 ;; Return value:  Size  Location     Type
 12772 ;;                  1    wreg      unsigned char 
 12773 ;; Registers used:
 12774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12775 ;; Tracked objects:
 12776 ;;		On entry : F/0
 12777 ;;		On exit  : F/0
 12778 ;;		Unchanged: 0/0
 12779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12780 ;;      Params:         8       0       0       0       0       0       0
 12781 ;;      Locals:         4       0       0       0       0       0       0
 12782 ;;      Temps:          0      20       0       0       0       0       0
 12783 ;;      Totals:        12      20       0       0       0       0       0
 12784 ;;Total ram usage:       32 bytes
 12785 ;; Hardware stack levels used:    1
 12786 ;; Hardware stack levels required when called:    5
 12787 ;; This function calls:
 12788 ;;		_sendCANFrame
 12789 ;; This function is called by:
 12790 ;;		_SendInformationEvent
 12791 ;;		_vscp_sendEvent
 12792 ;; This function uses a non-reentrant model
 12793 ;;
 12794                           
 12795                           	psect	text52
 12796  003678                     __ptext52:
 12797                           	opt stack 0
 12798  003678                     _sendVSCPFrame:
 12799                           	opt stack 23
 12800                           
 12801                           ; BSR set to: 0
 12802                           ;main.c: 2497: uint32_t id = ( (uint32_t)priority << 26 ) |
 12803                           ;main.c: 2498: ( (uint32_t)vscpclass << 16 ) |
 12804                           ;main.c: 2499: ( (uint32_t)vscptype << 8 ) |
 12805                           ;main.c: 2500: nodeid;
 12806                           
 12807                           ; BSR set to: 0
 12808                           ;incstack = 0
 12809                           ;incstack = 0
 12810  003678  C041  F0B1         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 12811  00367C  6BB2               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 12812  00367E  6BB3               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 12813  003680  6BB4               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 12814  003682  C0B3  F0B4         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 12815  003686  C0B2  F0B3         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 12816  00368A  C0B1  F0B2         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 12817  00368E  6BB1               	clrf	??_sendVSCPFrame& (0+255),b
 12818  003690  503F               	movf	sendVSCPFrame@vscpclass,w,c
 12819  003692  6FB5               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 12820  003694  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 12821  003696  6FB6               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 12822  003698  6BB7               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 12823  00369A  6BB8               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 12824  00369C  C0B6  F0B8         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 12825  0036A0  C0B5  F0B7         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 12826  0036A4  6BB6               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 12827  0036A6  6BB5               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 12828  0036A8  C043  F0B9         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 12829  0036AC  6BBA               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 12830  0036AE  6BBB               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 12831  0036B0  6BBC               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 12832  0036B2  0E1A               	movlw	26
 12833  0036B4                     u9955:
 12834  0036B4  90D8               	bcf	status,0,c
 12835  0036B6  37B9               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 12836  0036B8  37BA               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 12837  0036BA  37BB               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 12838  0036BC  37BC               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 12839  0036BE  2EE8               	decfsz	wreg,f,c
 12840  0036C0  D7F9               	goto	u9955
 12841  0036C2  51B5               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 12842  0036C4  11B9               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 12843  0036C6  6FBD               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 12844  0036C8  51B6               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 12845  0036CA  11BA               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 12846  0036CC  6FBE               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 12847  0036CE  51B7               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 12848  0036D0  11BB               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 12849  0036D2  6FBF               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 12850  0036D4  51B8               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 12851  0036D6  11BC               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 12852  0036D8  6FC0               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 12853  0036DA  51B1               	movf	??_sendVSCPFrame& (0+255),w,b
 12854  0036DC  11BD               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 12855  0036DE  6FC1               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 12856  0036E0  51B2               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 12857  0036E2  11BE               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 12858  0036E4  6FC2               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 12859  0036E6  51B3               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 12860  0036E8  11BF               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 12861  0036EA  6FC3               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 12862  0036EC  51B4               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 12863  0036EE  11C0               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 12864  0036F0  6FC4               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 12865  0036F2  5042               	movf	sendVSCPFrame@nodeid,w,c
 12866  0036F4  11C1               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 12867  0036F6  6E47               	movwf	sendVSCPFrame@id,c
 12868  0036F8  51C2               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 12869  0036FA  6E48               	movwf	sendVSCPFrame@id+1,c
 12870  0036FC  51C3               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 12871  0036FE  6E49               	movwf	sendVSCPFrame@id+2,c
 12872  003700  51C4               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 12873  003702  6E4A               	movwf	sendVSCPFrame@id+3,c
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;main.c: 2502: if ( !sendCANFrame( id, size, pData ) ) {
 12877  003704  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 12878  003708  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 12879  00370C  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 12880  003710  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 12881  003714  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 12882  003718  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 12883  00371C  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 12884  003720  EC69  F01D         	call	_sendCANFrame	;wreg free
 12885  003724  0900               	iorlw	0
 12886                           
 12887                           ; BSR set to: 0
 12888                           ;main.c: 2503: return 0;
 12889  003726  0E00               	movlw	0
 12890  003728  A4D8               	btfss	status,2,c
 12891                           
 12892                           ; BSR set to: 0
 12893                           ;main.c: 2504: }
 12894                           ;main.c: 2506: return 1;
 12895  00372A  0E01               	movlw	1
 12896                           
 12897                           ; BSR set to: 0
 12898  00372C  0012               	return	
 12899  00372E                     __end_of_sendVSCPFrame:
 12900                           	opt stack 0
 12901                           tblptru	equ	0xFF8
 12902                           tblptrh	equ	0xFF7
 12903                           tblptrl	equ	0xFF6
 12904                           tablat	equ	0xFF5
 12905                           prodh	equ	0xFF4
 12906                           prodl	equ	0xFF3
 12907                           postinc0	equ	0xFEE
 12908                           wreg	equ	0xFE8
 12909                           indf2	equ	0xFDF
 12910                           postinc2	equ	0xFDE
 12911                           postdec2	equ	0xFDD
 12912                           fsr2h	equ	0xFDA
 12913                           fsr2l	equ	0xFD9
 12914                           status	equ	0xFD8
 12915                           
 12916 ;; *************** function _sendCANFrame *****************
 12917 ;; Defined at:
 12918 ;;		line 2541 in file "../main.c"
 12919 ;; Parameters:    Size  Location     Type
 12920 ;;  id              4   54[COMRAM] unsigned long 
 12921 ;;  dlc             1   58[COMRAM] unsigned char 
 12922 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 12923 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 12924 ;; Auto vars:     Size  Location     Type
 12925 ;;  rv              1   61[COMRAM] unsigned char 
 12926 ;; Return value:  Size  Location     Type
 12927 ;;                  1    wreg      unsigned char 
 12928 ;; Registers used:
 12929 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12930 ;; Tracked objects:
 12931 ;;		On entry : F/0
 12932 ;;		On exit  : F/0
 12933 ;;		Unchanged: 0/0
 12934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12935 ;;      Params:         7       0       0       0       0       0       0
 12936 ;;      Locals:         1       0       0       0       0       0       0
 12937 ;;      Temps:          0       0       0       0       0       0       0
 12938 ;;      Totals:         8       0       0       0       0       0       0
 12939 ;;Total ram usage:        8 bytes
 12940 ;; Hardware stack levels used:    1
 12941 ;; Hardware stack levels required when called:    4
 12942 ;; This function calls:
 12943 ;;		_ECANSendMessage
 12944 ;; This function is called by:
 12945 ;;		_sendVSCPFrame
 12946 ;; This function uses a non-reentrant model
 12947 ;;
 12948                           
 12949                           	psect	text53
 12950  003AD2                     __ptext53:
 12951                           	opt stack 0
 12952  003AD2                     _sendCANFrame:
 12953                           	opt stack 23
 12954                           
 12955                           ; BSR set to: 0
 12956                           ;main.c: 2542: uint8_t rv = 0;
 12957                           
 12958                           ; BSR set to: 0
 12959                           ;incstack = 0
 12960                           ;incstack = 0
 12961  003AD2  6A3E               	clrf	sendCANFrame@rv,c
 12962                           
 12963                           ;main.c: 2543: sendTimer = 0;
 12964  003AD4  6A55               	clrf	_sendTimer,c
 12965                           
 12966                           ;main.c: 2545: while ( sendTimer < 1 ) {
 12967  003AD6  D017               	goto	l8817
 12968  003AD8                     l8813:
 12969                           
 12970                           ;main.c: 2546: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 12971  003AD8  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 12972  003ADC  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 12973  003AE0  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 12974  003AE4  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 12975  003AE8  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 12976  003AEC  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 12977  003AF0  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 12978  003AF4  0E20               	movlw	32
 12979  003AF6  6E19               	movwf	?_ECANSendMessage+7,c
 12980  003AF8  ECF4  F015         	call	_ECANSendMessage	;wreg free
 12981  003AFC  0900               	iorlw	0
 12982  003AFE  E003               	bz	l8817
 12983                           
 12984                           ;main.c: 2547: rv = 1;
 12985  003B00  0E01               	movlw	1
 12986  003B02  6E3E               	movwf	sendCANFrame@rv,c
 12987                           
 12988                           ;main.c: 2548: break;
 12989  003B04  D002               	goto	l653
 12990  003B06                     l8817:
 12991  003B06  5055               	movf	_sendTimer,w,c
 12992  003B08  E0E7               	bz	l8813
 12993  003B0A                     l653:
 12994                           
 12995                           ;main.c: 2549: }
 12996                           ;main.c: 2550: }
 12997                           ;main.c: 2552: vscp_omsg.flags = 0;
 12998  003B0A  0100               	movlb	0	; () banked
 12999  003B0C  6BA4               	clrf	_vscp_omsg& (0+255),b
 13000                           
 13001                           ; BSR set to: 0
 13002                           ;main.c: 2554: return rv;
 13003  003B0E  503E               	movf	sendCANFrame@rv,w,c
 13004                           
 13005                           ; BSR set to: 0
 13006  003B10  0012               	return	
 13007  003B12                     __end_of_sendCANFrame:
 13008                           	opt stack 0
 13009                           tblptru	equ	0xFF8
 13010                           tblptrh	equ	0xFF7
 13011                           tblptrl	equ	0xFF6
 13012                           tablat	equ	0xFF5
 13013                           prodh	equ	0xFF4
 13014                           prodl	equ	0xFF3
 13015                           postinc0	equ	0xFEE
 13016                           wreg	equ	0xFE8
 13017                           indf2	equ	0xFDF
 13018                           postinc2	equ	0xFDE
 13019                           postdec2	equ	0xFDD
 13020                           fsr2h	equ	0xFDA
 13021                           fsr2l	equ	0xFD9
 13022                           status	equ	0xFD8
 13023                           
 13024 ;; *************** function _ECANSendMessage *****************
 13025 ;; Defined at:
 13026 ;;		line 617 in file "../ECAN.c"
 13027 ;; Parameters:    Size  Location     Type
 13028 ;;  id              4   17[COMRAM] unsigned long 
 13029 ;;  data            2   21[COMRAM] PTR unsigned char 
 13030 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13031 ;;  dataLen         1   23[COMRAM] unsigned char 
 13032 ;;  msgFlags        1   24[COMRAM] enum E16306
 13033 ;; Auto vars:     Size  Location     Type
 13034 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 13035 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13036 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13037 ;;		 -> B0CON(1), 
 13038 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 13039 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13040 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13041 ;;		 -> B0CON(1), 
 13042 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 13043 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13044 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13045 ;;		 -> B0CON(1), 
 13046 ;;  i               1   51[COMRAM] unsigned char 
 13047 ;;  temp            1   50[COMRAM] unsigned char 
 13048 ;;  tempBSEL0       1   47[COMRAM] struct .
 13049 ;;  j               1   46[COMRAM] unsigned char 
 13050 ;;  buffers         1   45[COMRAM] unsigned char 
 13051 ;;  mode            1   44[COMRAM] unsigned char 
 13052 ;; Return value:  Size  Location     Type
 13053 ;;                  1    wreg      enum E15660
 13054 ;; Registers used:
 13055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13056 ;; Tracked objects:
 13057 ;;		On entry : 0/0
 13058 ;;		On exit  : 0/0
 13059 ;;		Unchanged: 0/0
 13060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13061 ;;      Params:         8       0       0       0       0       0       0
 13062 ;;      Locals:        28       0       0       0       0       0       0
 13063 ;;      Temps:          1       0       0       0       0       0       0
 13064 ;;      Totals:        37       0       0       0       0       0       0
 13065 ;;Total ram usage:       37 bytes
 13066 ;; Hardware stack levels used:    1
 13067 ;; Hardware stack levels required when called:    3
 13068 ;; This function calls:
 13069 ;;		__CANIDToRegs
 13070 ;; This function is called by:
 13071 ;;		_sendCANFrame
 13072 ;; This function uses a non-reentrant model
 13073 ;;
 13074                           
 13075                           	psect	text54
 13076  002BE8                     __ptext54:
 13077                           	opt stack 0
 13078  002BE8                     _ECANSendMessage:
 13079                           	opt stack 23
 13080                           
 13081                           ;ECAN.c: 619: BYTE mode;
 13082                           ;ECAN.c: 620: BYTE buffers;
 13083                           ;ECAN.c: 628: BYTE i,j;
 13084                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 13085                           ;ECAN.c: 630: BYTE* pb[9];
 13086                           ;ECAN.c: 631: BYTE temp;
 13087                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 13088                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 13089                           
 13090                           ; BSR set to: 0
 13091                           ;incstack = 0
 13092                           ;incstack = 0
 13093  002BE8  0E0F               	movlw	15	;volatile
 13094  002BEA  6E1C               	movwf	ECANSendMessage@pb+1,c
 13095  002BEC  0E40               	movlw	64	;volatile
 13096  002BEE  6E1B               	movwf	ECANSendMessage@pb,c
 13097                           
 13098                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 13099  002BF0  0E0F               	movlw	15	;volatile
 13100  002BF2  6E1E               	movwf	ECANSendMessage@pb+3,c
 13101  002BF4  0E30               	movlw	48	;volatile
 13102  002BF6  6E1D               	movwf	ECANSendMessage@pb+2,c
 13103                           
 13104                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 13105  002BF8  0E0F               	movlw	15	;volatile
 13106  002BFA  6E20               	movwf	ECANSendMessage@pb+5,c
 13107  002BFC  0E20               	movlw	32	;volatile
 13108  002BFE  6E1F               	movwf	ECANSendMessage@pb+4,c
 13109                           
 13110                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 13111  002C00  0E0E               	movlw	14	;volatile
 13112  002C02  6E22               	movwf	ECANSendMessage@pb+7,c
 13113  002C04  0E20               	movlw	32	;volatile
 13114  002C06  6E21               	movwf	ECANSendMessage@pb+6,c
 13115                           
 13116                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 13117  002C08  0E0E               	movlw	14	;volatile
 13118  002C0A  6E24               	movwf	ECANSendMessage@pb+9,c
 13119  002C0C  0E30               	movlw	48	;volatile
 13120  002C0E  6E23               	movwf	ECANSendMessage@pb+8,c
 13121                           
 13122                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 13123  002C10  0E0E               	movlw	14	;volatile
 13124  002C12  6E26               	movwf	ECANSendMessage@pb+11,c
 13125  002C14  0E40               	movlw	64	;volatile
 13126  002C16  6E25               	movwf	ECANSendMessage@pb+10,c
 13127                           
 13128                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 13129  002C18  0E0E               	movlw	14	;volatile
 13130  002C1A  6E28               	movwf	ECANSendMessage@pb+13,c
 13131  002C1C  0E50               	movlw	80	;volatile
 13132  002C1E  6E27               	movwf	ECANSendMessage@pb+12,c
 13133                           
 13134                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 13135  002C20  0E0E               	movlw	14	;volatile
 13136  002C22  6E2A               	movwf	ECANSendMessage@pb+15,c
 13137  002C24  0E60               	movlw	96	;volatile
 13138  002C26  6E29               	movwf	ECANSendMessage@pb+14,c
 13139                           
 13140                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 13141  002C28  0E0E               	movlw	14	;volatile
 13142  002C2A  6E2C               	movwf	ECANSendMessage@pb+17,c
 13143  002C2C  0E70               	movlw	112	;volatile
 13144  002C2E  6E2B               	movwf	ECANSendMessage@pb+16,c
 13145                           
 13146                           ; BSR set to: 14
 13147                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 13148  002C30  5077               	movf	3959,w,c	;volatile
 13149  002C32  0BC0               	andlw	192
 13150  002C34  6E2D               	movwf	ECANSendMessage@mode,c
 13151                           
 13152                           ; BSR set to: 14
 13153                           ;ECAN.c: 660: if ( mode == 0x00 )
 13154  002C36  662D               	tstfsz	ECANSendMessage@mode,c
 13155  002C38  D002               	goto	l8831
 13156                           
 13157                           ; BSR set to: 14
 13158                           ;ECAN.c: 661: buffers = 2;
 13159  002C3A  0E02               	movlw	2
 13160  002C3C  D001               	goto	L28
 13161  002C3E                     l8831:
 13162                           
 13163                           ; BSR set to: 14
 13164                           ;ECAN.c: 662: else
 13165                           ;ECAN.c: 663: buffers = 8;
 13166  002C3E  0E08               	movlw	8
 13167  002C40                     L28:
 13168  002C40  6E2E               	movwf	ECANSendMessage@buffers,c
 13169                           
 13170                           ; BSR set to: 14
 13171                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 13172  002C42  010D               	movlb	13	; () banked
 13173  002C44  90D8               	bcf	status,0,c
 13174  002C46  31F8               	rrcf	248,w,b	;volatile
 13175  002C48  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 13176                           
 13177                           ; BSR set to: 13
 13178                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 13179  002C4A  6A34               	clrf	ECANSendMessage@i,c
 13180  002C4C  D07D               	goto	l8891
 13181  002C4E                     l8837:
 13182                           
 13183                           ;ECAN.c: 688: {
 13184                           ;ECAN.c: 693: ptr = pb[i];
 13185  002C4E  5034               	movf	ECANSendMessage@i,w,c
 13186  002C50  0D02               	mullw	2
 13187  002C52  50F3               	movf	prodl,w,c
 13188  002C54  0F1B               	addlw	low ECANSendMessage@pb
 13189  002C56  6ED9               	movwf	fsr2l,c
 13190  002C58  6ADA               	clrf	fsr2h,c
 13191  002C5A  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 13192  002C5E  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 13193                           
 13194                           ;ECAN.c: 694: tempPtr = ptr;
 13195  002C62  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 13196  002C66  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 13197                           
 13198                           ;ECAN.c: 702: if ( i > 2 )
 13199  002C6A  0E02               	movlw	2
 13200  002C6C  6434               	cpfsgt	ECANSendMessage@i,c
 13201  002C6E  D004               	goto	l8849
 13202                           
 13203                           ;ECAN.c: 703: {
 13204                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 13205  002C70  90D8               	bcf	status,0,c
 13206  002C72  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 13207                           
 13208                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 13209  002C74  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 13210  002C76  D067               	goto	l8889
 13211  002C78                     l8849:
 13212                           
 13213                           ;ECAN.c: 714: }
 13214                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 13215  002C78  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13216  002C7C  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13217  002C80  50DF               	movf	indf2,w,c
 13218  002C82  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13219  002C84  B61A               	btfsc	??_ECANSendMessage,3,c
 13220  002C86  D05F               	goto	l8889
 13221                           
 13222                           ;ECAN.c: 721: {
 13223                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 13224  002C88  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13225  002C8C  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13226  002C90  0EFC               	movlw	252
 13227  002C92  16DF               	andwf	indf2,f,c
 13228                           
 13229                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 13230  002C94  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 13231  002C98  0E03               	movlw	3
 13232  002C9A  161A               	andwf	??_ECANSendMessage,f,c
 13233  002C9C  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13234  002CA0  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13235  002CA4  501A               	movf	??_ECANSendMessage,w,c
 13236  002CA6  12DF               	iorwf	indf2,f,c
 13237                           
 13238                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 13239  002CA8  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 13240  002CAA  D004               	goto	l845
 13241                           
 13242                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 13243  002CAC  5018               	movf	ECANSendMessage@dataLen,w,c
 13244  002CAE  0940               	iorlw	64
 13245  002CB0  6E33               	movwf	ECANSendMessage@temp,c
 13246  002CB2  D002               	goto	l8859
 13247  002CB4                     l845:
 13248                           
 13249                           ;ECAN.c: 729: else
 13250                           ;ECAN.c: 730: temp = dataLen;
 13251  002CB4  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 13252  002CB8                     l8859:
 13253                           
 13254                           ;ECAN.c: 732: *(ptr+5) = temp;
 13255  002CB8  EE20 F005          	lfsr	2,5
 13256  002CBC  5035               	movf	ECANSendMessage@ptr,w,c
 13257  002CBE  26D9               	addwf	fsr2l,f,c
 13258  002CC0  5036               	movf	ECANSendMessage@ptr+1,w,c
 13259  002CC2  22DA               	addwfc	fsr2h,f,c
 13260  002CC4  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 13261                           
 13262                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 13263  002CC8  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 13264  002CCA  D003               	goto	l847
 13265                           
 13266                           ;ECAN.c: 736: temp = 1;
 13267  002CCC  0E01               	movlw	1
 13268  002CCE  6E33               	movwf	ECANSendMessage@temp,c
 13269  002CD0  D001               	goto	l8865
 13270  002CD2                     l847:
 13271                           
 13272                           ;ECAN.c: 738: else
 13273                           ;ECAN.c: 739: temp = 0;
 13274  002CD2  6A33               	clrf	ECANSendMessage@temp,c
 13275  002CD4                     l8865:
 13276                           
 13277                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 13278  002CD4  2835               	incf	ECANSendMessage@ptr,w,c
 13279  002CD6  6E08               	movwf	?__CANIDToRegs,c
 13280  002CD8  0E00               	movlw	0
 13281  002CDA  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 13282  002CDC  6E09               	movwf	?__CANIDToRegs+1,c
 13283  002CDE  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 13284  002CE2  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 13285  002CE6  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 13286  002CEA  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 13287  002CEE  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 13288  002CF2  EC5B  F017         	call	__CANIDToRegs	;wreg free
 13289                           
 13290                           ;ECAN.c: 745: ptr += 6;
 13291  002CF6  0E06               	movlw	6
 13292  002CF8  2635               	addwf	ECANSendMessage@ptr,f,c
 13293  002CFA  0E00               	movlw	0
 13294  002CFC  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 13295                           
 13296                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 13297  002CFE  6A2F               	clrf	ECANSendMessage@j,c
 13298  002D00  D00F               	goto	l8879
 13299  002D02                     l8871:
 13300                           
 13301                           ;ECAN.c: 748: *ptr++ = *data++;
 13302  002D02  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 13303  002D06  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 13304  002D0A  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 13305  002D0E  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 13306  002D12  CFDF FFE7          	movff	indf2,indf1
 13307  002D16  4A16               	infsnz	ECANSendMessage@data,f,c
 13308  002D18  2A17               	incf	ECANSendMessage@data+1,f,c
 13309  002D1A  4A35               	infsnz	ECANSendMessage@ptr,f,c
 13310  002D1C  2A36               	incf	ECANSendMessage@ptr+1,f,c
 13311  002D1E  2A2F               	incf	ECANSendMessage@j,f,c
 13312  002D20                     l8879:
 13313  002D20  5018               	movf	ECANSendMessage@dataLen,w,c
 13314  002D22  5C2F               	subwf	ECANSendMessage@j,w,c
 13315  002D24  E3EE               	bnc	l8871
 13316                           
 13317                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 13318  002D26  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13319  002D2A  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13320  002D2E  50DF               	movf	indf2,w,c
 13321  002D30  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13322  002D32  B41A               	btfsc	??_ECANSendMessage,2,c
 13323  002D34  D006               	goto	l8885
 13324                           
 13325                           ;ECAN.c: 753: *tempPtr |= 0x08;
 13326  002D36  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13327  002D3A  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13328  002D3E  0E00               	movlw	0
 13329  002D40  86DB               	bsf	plusw2,3,c
 13330  002D42                     l8885:
 13331                           
 13332                           ;ECAN.c: 755: return TRUE;
 13333  002D42  0E01               	movlw	1
 13334  002D44  D005               	goto	l853
 13335  002D46                     l8889:
 13336  002D46  2A34               	incf	ECANSendMessage@i,f,c
 13337  002D48                     l8891:
 13338  002D48  502E               	movf	ECANSendMessage@buffers,w,c
 13339  002D4A  5C34               	subwf	ECANSendMessage@i,w,c
 13340  002D4C  E380               	bnc	l8837
 13341                           
 13342                           ;ECAN.c: 756: }
 13343                           ;ECAN.c: 757: }
 13344                           ;ECAN.c: 760: return FALSE;
 13345  002D4E  0E00               	movlw	0
 13346  002D50                     l853:
 13347  002D50  0012               	return	
 13348  002D52                     __end_of_ECANSendMessage:
 13349                           	opt stack 0
 13350                           tblptru	equ	0xFF8
 13351                           tblptrh	equ	0xFF7
 13352                           tblptrl	equ	0xFF6
 13353                           tablat	equ	0xFF5
 13354                           prodh	equ	0xFF4
 13355                           prodl	equ	0xFF3
 13356                           postinc0	equ	0xFEE
 13357                           wreg	equ	0xFE8
 13358                           indf1	equ	0xFE7
 13359                           fsr1h	equ	0xFE2
 13360                           fsr1l	equ	0xFE1
 13361                           indf2	equ	0xFDF
 13362                           postinc2	equ	0xFDE
 13363                           postdec2	equ	0xFDD
 13364                           plusw2	equ	0xFDB
 13365                           fsr2h	equ	0xFDA
 13366                           fsr2l	equ	0xFD9
 13367                           status	equ	0xFD8
 13368                           
 13369 ;; *************** function __CANIDToRegs *****************
 13370 ;; Defined at:
 13371 ;;		line 1099 in file "../ECAN.c"
 13372 ;; Parameters:    Size  Location     Type
 13373 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 13374 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13375 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13376 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
 13377 ;;  val             4    9[COMRAM] unsigned long 
 13378 ;;  type            1   13[COMRAM] unsigned char 
 13379 ;; Auto vars:     Size  Location     Type
 13380 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 13381 ;;		 -> _CANIDToRegs@val(4), 
 13382 ;; Return value:  Size  Location     Type
 13383 ;;		None               void
 13384 ;; Registers used:
 13385 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13386 ;; Tracked objects:
 13387 ;;		On entry : 0/F
 13388 ;;		On exit  : 0/0
 13389 ;;		Unchanged: 0/0
 13390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13391 ;;      Params:         7       0       0       0       0       0       0
 13392 ;;      Locals:         1       0       0       0       0       0       0
 13393 ;;      Temps:          2       0       0       0       0       0       0
 13394 ;;      Totals:        10       0       0       0       0       0       0
 13395 ;;Total ram usage:       10 bytes
 13396 ;; Hardware stack levels used:    1
 13397 ;; Hardware stack levels required when called:    2
 13398 ;; This function calls:
 13399 ;;		Nothing
 13400 ;; This function is called by:
 13401 ;;		_calculateSetFilterMask
 13402 ;;		_ECANSendMessage
 13403 ;; This function uses a non-reentrant model
 13404 ;;
 13405                           
 13406                           	psect	text55
 13407  002EB6                     __ptext55:
 13408                           	opt stack 0
 13409  002EB6                     __CANIDToRegs:
 13410                           	opt stack 23
 13411                           
 13412                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 13413                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 13414                           
 13415                           ;incstack = 0
 13416                           ;incstack = 0
 13417  002EB6  0E0A               	movlw	low __CANIDToRegs@val
 13418  002EB8  6E11               	movwf	__CANIDToRegs@Value,c
 13419                           
 13420                           ;ECAN.c: 1104: if ( type == 0 )
 13421  002EBA  660E               	tstfsz	__CANIDToRegs@type,c
 13422  002EBC  D037               	goto	l8907
 13423                           
 13424                           ;ECAN.c: 1105: {
 13425                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 13426  002EBE  5011               	movf	__CANIDToRegs@Value,w,c
 13427  002EC0  6ED9               	movwf	fsr2l,c
 13428  002EC2  6ADA               	clrf	fsr2h,c
 13429  002EC4  50DF               	movf	indf2,w,c
 13430  002EC6  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13431  002EC8  90D8               	bcf	status,0,c
 13432  002ECA  320F               	rrcf	??__CANIDToRegs,f,c
 13433  002ECC  90D8               	bcf	status,0,c
 13434  002ECE  320F               	rrcf	??__CANIDToRegs,f,c
 13435  002ED0  90D8               	bcf	status,0,c
 13436  002ED2  300F               	rrcf	??__CANIDToRegs,w,c
 13437  002ED4  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13438  002ED8  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13439  002EDC  6EDF               	movwf	indf2,c
 13440                           
 13441                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 13442  002EDE  5011               	movf	__CANIDToRegs@Value,w,c
 13443  002EE0  6ED9               	movwf	fsr2l,c
 13444  002EE2  6ADA               	clrf	fsr2h,c
 13445  002EE4  2AD9               	incf	fsr2l,f,c
 13446  002EE6  6ADA               	clrf	fsr2h,c
 13447  002EE8  50DF               	movf	indf2,w,c
 13448  002EEA  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13449  002EEC  0E05               	movlw	5
 13450  002EEE  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13451  002EF0                     u10625:
 13452  002EF0  90D8               	bcf	status,0,c
 13453  002EF2  360F               	rlcf	??__CANIDToRegs,f,c
 13454  002EF4  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13455  002EF6  D7FC               	goto	u10625
 13456  002EF8  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13457  002EFC  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13458  002F00  500F               	movf	??__CANIDToRegs,w,c
 13459  002F02  12DF               	iorwf	indf2,f,c
 13460                           
 13461                           ;ECAN.c: 1109: ptr++;
 13462  002F04  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13463  002F06  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13464                           
 13465                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 13466  002F08  5011               	movf	__CANIDToRegs@Value,w,c
 13467  002F0A  6ED9               	movwf	fsr2l,c
 13468  002F0C  6ADA               	clrf	fsr2h,c
 13469  002F0E  50DF               	movf	indf2,w,c
 13470  002F10  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13471  002F12  0E05               	movlw	5
 13472  002F14  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13473  002F16                     u10635:
 13474  002F16  90D8               	bcf	status,0,c
 13475  002F18  360F               	rlcf	??__CANIDToRegs,f,c
 13476  002F1A  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13477  002F1C  D7FC               	goto	u10635
 13478  002F1E  500F               	movf	??__CANIDToRegs,w,c
 13479  002F20  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13480  002F24  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13481  002F28  6EDF               	movwf	indf2,c
 13482                           
 13483                           ;ECAN.c: 1111: }
 13484  002F2A  D06C               	goto	l907
 13485  002F2C                     l8907:
 13486                           
 13487                           ;ECAN.c: 1112: else
 13488                           ;ECAN.c: 1113: {
 13489                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 13490  002F2C  5011               	movf	__CANIDToRegs@Value,w,c
 13491  002F2E  6ED9               	movwf	fsr2l,c
 13492  002F30  6ADA               	clrf	fsr2h,c
 13493  002F32  0E02               	movlw	2
 13494  002F34  26D9               	addwf	fsr2l,f,c
 13495  002F36  6ADA               	clrf	fsr2h,c
 13496  002F38  50DF               	movf	indf2,w,c
 13497  002F3A  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13498  002F3C  0E05               	movlw	5
 13499  002F3E  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13500  002F40                     u10645:
 13501  002F40  90D8               	bcf	status,0,c
 13502  002F42  320F               	rrcf	??__CANIDToRegs,f,c
 13503  002F44  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13504  002F46  D7FC               	goto	u10645
 13505  002F48  500F               	movf	??__CANIDToRegs,w,c
 13506  002F4A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13507  002F4E  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13508  002F52  6EDF               	movwf	indf2,c
 13509                           
 13510                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 13511  002F54  5011               	movf	__CANIDToRegs@Value,w,c
 13512  002F56  6ED9               	movwf	fsr2l,c
 13513  002F58  6ADA               	clrf	fsr2h,c
 13514  002F5A  0E03               	movlw	3
 13515  002F5C  26D9               	addwf	fsr2l,f,c
 13516  002F5E  6ADA               	clrf	fsr2h,c
 13517  002F60  50DF               	movf	indf2,w,c
 13518  002F62  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13519  002F64  90D8               	bcf	status,0,c
 13520  002F66  360F               	rlcf	??__CANIDToRegs,f,c
 13521  002F68  90D8               	bcf	status,0,c
 13522  002F6A  360F               	rlcf	??__CANIDToRegs,f,c
 13523  002F6C  90D8               	bcf	status,0,c
 13524  002F6E  360F               	rlcf	??__CANIDToRegs,f,c
 13525  002F70  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13526  002F74  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13527  002F78  500F               	movf	??__CANIDToRegs,w,c
 13528  002F7A  12DF               	iorwf	indf2,f,c
 13529                           
 13530                           ;ECAN.c: 1117: ptr++;
 13531  002F7C  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13532  002F7E  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13533                           
 13534                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 13535  002F80  5011               	movf	__CANIDToRegs@Value,w,c
 13536  002F82  6ED9               	movwf	fsr2l,c
 13537  002F84  6ADA               	clrf	fsr2h,c
 13538  002F86  0E02               	movlw	2
 13539  002F88  26D9               	addwf	fsr2l,f,c
 13540  002F8A  6ADA               	clrf	fsr2h,c
 13541  002F8C  50DF               	movf	indf2,w,c
 13542  002F8E  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13543  002F90  90D8               	bcf	status,0,c
 13544  002F92  360F               	rlcf	??__CANIDToRegs,f,c
 13545  002F94  90D8               	bcf	status,0,c
 13546  002F96  360F               	rlcf	??__CANIDToRegs,f,c
 13547  002F98  90D8               	bcf	status,0,c
 13548  002F9A  340F               	rlcf	??__CANIDToRegs,w,c
 13549  002F9C  0BE0               	andlw	224
 13550  002F9E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13551  002FA2  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13552  002FA6  6EDF               	movwf	indf2,c
 13553                           
 13554                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 13555  002FA8  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13556  002FAC  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13557  002FB0  0E00               	movlw	0
 13558  002FB2  86DB               	bsf	plusw2,3,c
 13559                           
 13560                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 13561  002FB4  5011               	movf	__CANIDToRegs@Value,w,c
 13562  002FB6  6ED9               	movwf	fsr2l,c
 13563  002FB8  6ADA               	clrf	fsr2h,c
 13564  002FBA  0E02               	movlw	2
 13565  002FBC  26D9               	addwf	fsr2l,f,c
 13566  002FBE  6ADA               	clrf	fsr2h,c
 13567  002FC0  50DF               	movf	indf2,w,c
 13568  002FC2  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13569  002FC4  0E03               	movlw	3
 13570  002FC6  160F               	andwf	??__CANIDToRegs,f,c
 13571  002FC8  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13572  002FCC  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13573  002FD0  500F               	movf	??__CANIDToRegs,w,c
 13574  002FD2  12DF               	iorwf	indf2,f,c
 13575                           
 13576                           ;ECAN.c: 1122: ptr++;
 13577  002FD4  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13578  002FD6  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13579                           
 13580                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 13581  002FD8  5011               	movf	__CANIDToRegs@Value,w,c
 13582  002FDA  6ED9               	movwf	fsr2l,c
 13583  002FDC  6ADA               	clrf	fsr2h,c
 13584  002FDE  2AD9               	incf	fsr2l,f,c
 13585  002FE0  6ADA               	clrf	fsr2h,c
 13586  002FE2  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13587  002FE6  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13588  002FEA  CFDF FFE7          	movff	indf2,indf1
 13589                           
 13590                           ;ECAN.c: 1124: ptr++;
 13591  002FEE  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13592  002FF0  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13593                           
 13594                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 13595  002FF2  5011               	movf	__CANIDToRegs@Value,w,c
 13596  002FF4  6ED9               	movwf	fsr2l,c
 13597  002FF6  6ADA               	clrf	fsr2h,c
 13598  002FF8  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13599  002FFC  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13600  003000  CFDF FFE7          	movff	indf2,indf1
 13601  003004                     l907:
 13602  003004  0012               	return	
 13603  003006                     __end_of__CANIDToRegs:
 13604                           	opt stack 0
 13605                           tblptru	equ	0xFF8
 13606                           tblptrh	equ	0xFF7
 13607                           tblptrl	equ	0xFF6
 13608                           tablat	equ	0xFF5
 13609                           prodh	equ	0xFF4
 13610                           prodl	equ	0xFF3
 13611                           postinc0	equ	0xFEE
 13612                           wreg	equ	0xFE8
 13613                           indf1	equ	0xFE7
 13614                           fsr1h	equ	0xFE2
 13615                           fsr1l	equ	0xFE1
 13616                           indf2	equ	0xFDF
 13617                           postinc2	equ	0xFDE
 13618                           postdec2	equ	0xFDD
 13619                           plusw2	equ	0xFDB
 13620                           fsr2h	equ	0xFDA
 13621                           fsr2l	equ	0xFD9
 13622                           status	equ	0xFD8
 13623                           
 13624 ;; *************** function _vscp_getEvent *****************
 13625 ;; Defined at:
 13626 ;;		line 1290 in file "../../vscp_firmware/common/vscp_firmware.c"
 13627 ;; Parameters:    Size  Location     Type
 13628 ;;		None
 13629 ;; Auto vars:     Size  Location     Type
 13630 ;;  rv              1   43[COMRAM] unsigned char 
 13631 ;; Return value:  Size  Location     Type
 13632 ;;                  1    wreg      unsigned char 
 13633 ;; Registers used:
 13634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13635 ;; Tracked objects:
 13636 ;;		On entry : F/0
 13637 ;;		On exit  : 0/0
 13638 ;;		Unchanged: 0/0
 13639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13640 ;;      Params:         0       0       0       0       0       0       0
 13641 ;;      Locals:         1       0       0       0       0       0       0
 13642 ;;      Temps:          0       0       0       0       0       0       0
 13643 ;;      Totals:         1       0       0       0       0       0       0
 13644 ;;Total ram usage:        1 bytes
 13645 ;; Hardware stack levels used:    1
 13646 ;; Hardware stack levels required when called:    6
 13647 ;; This function calls:
 13648 ;;		_getVSCPFrame
 13649 ;; This function is called by:
 13650 ;;		_main
 13651 ;; This function uses a non-reentrant model
 13652 ;;
 13653                           
 13654                           	psect	text56
 13655  003C14                     __ptext56:
 13656                           	opt stack 0
 13657  003C14                     _vscp_getEvent:
 13658                           	opt stack 24
 13659                           
 13660                           ; BSR set to: 0
 13661                           ;vscp_firmware.c: 1291: int8_t rv;
 13662                           ;vscp_firmware.c: 1297: if (vscp_imsg.flags & 0x80) return !0;
 13663                           
 13664                           ;incstack = 0
 13665                           ;incstack = 0
 13666  003C14  BF96               	btfsc	_vscp_imsg& (0+255),7,b
 13667  003C16  D012               	goto	l1279
 13668                           
 13669                           ; BSR set to: 0
 13670                           ;vscp_firmware.c: 1300: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
 13671                           ;vscp_firmware.c: 1301: &vscp_imsg.vscp_type,
 13672                           ;vscp_firmware.c: 1302: &vscp_imsg.oaddr,
 13673                           ;vscp_firmware.c: 1303: &vscp_imsg.priority,
 13674                           ;vscp_firmware.c: 1304: &vscp_imsg.flags,
 13675                           ;vscp_firmware.c: 1305: vscp_imsg.data))) {
 13676  003C18  0E9A               	movlw	low (_vscp_imsg+4)
 13677  003C1A  6E1E               	movwf	?_getVSCPFrame,c
 13678  003C1C  0E9B               	movlw	low (_vscp_imsg+5)
 13679  003C1E  6E1F               	movwf	?_getVSCPFrame+1,c
 13680  003C20  0E97               	movlw	low (_vscp_imsg+1)
 13681  003C22  6E20               	movwf	?_getVSCPFrame+2,c
 13682  003C24  0E96               	movlw	low _vscp_imsg
 13683  003C26  6E21               	movwf	?_getVSCPFrame+3,c
 13684  003C28  0E9C               	movlw	low (_vscp_imsg+6)
 13685  003C2A  6E22               	movwf	?_getVSCPFrame+4,c
 13686  003C2C  0E98               	movlw	(_vscp_imsg+2)& (0+255)
 13687  003C2E  EC3D  F01C         	call	_getVSCPFrame
 13688  003C32  6E2C               	movwf	vscp_getEvent@rv,c
 13689  003C34  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 13690  003C36  E002               	bz	l1279
 13691                           
 13692                           ;vscp_firmware.c: 1307: vscp_imsg.flags |= 0x80;
 13693  003C38  0100               	movlb	0	; () banked
 13694  003C3A  8F96               	bsf	_vscp_imsg& (0+255),7,b
 13695  003C3C                     l1279:
 13696  003C3C  0012               	return	
 13697  003C3E                     __end_of_vscp_getEvent:
 13698                           	opt stack 0
 13699                           tblptru	equ	0xFF8
 13700                           tblptrh	equ	0xFF7
 13701                           tblptrl	equ	0xFF6
 13702                           tablat	equ	0xFF5
 13703                           prodh	equ	0xFF4
 13704                           prodl	equ	0xFF3
 13705                           postinc0	equ	0xFEE
 13706                           wreg	equ	0xFE8
 13707                           indf1	equ	0xFE7
 13708                           fsr1h	equ	0xFE2
 13709                           fsr1l	equ	0xFE1
 13710                           indf2	equ	0xFDF
 13711                           postinc2	equ	0xFDE
 13712                           postdec2	equ	0xFDD
 13713                           plusw2	equ	0xFDB
 13714                           fsr2h	equ	0xFDA
 13715                           fsr2l	equ	0xFD9
 13716                           status	equ	0xFD8
 13717                           
 13718 ;; *************** function _getVSCPFrame *****************
 13719 ;; Defined at:
 13720 ;;		line 2520 in file "../main.c"
 13721 ;; Parameters:    Size  Location     Type
 13722 ;;  pvscpclass      1    wreg     PTR unsigned short 
 13723 ;;		 -> vscp_imsg(14), 
 13724 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 13725 ;;		 -> vscp_imsg(14), 
 13726 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 13727 ;;		 -> vscp_imsg(14), 
 13728 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 13729 ;;		 -> vscp_imsg(14), 
 13730 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 13731 ;;		 -> vscp_imsg(14), 
 13732 ;;  pData           1   33[COMRAM] PTR unsigned char 
 13733 ;;		 -> vscp_imsg(14), 
 13734 ;; Auto vars:     Size  Location     Type
 13735 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 13736 ;;		 -> vscp_imsg(14), 
 13737 ;;  id              4   39[COMRAM] unsigned long 
 13738 ;; Return value:  Size  Location     Type
 13739 ;;                  1    wreg      unsigned char 
 13740 ;; Registers used:
 13741 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13742 ;; Tracked objects:
 13743 ;;		On entry : F/0
 13744 ;;		On exit  : 0/0
 13745 ;;		Unchanged: 0/0
 13746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13747 ;;      Params:         5       0       0       0       0       0       0
 13748 ;;      Locals:         5       0       0       0       0       0       0
 13749 ;;      Temps:          4       0       0       0       0       0       0
 13750 ;;      Totals:        14       0       0       0       0       0       0
 13751 ;;Total ram usage:       14 bytes
 13752 ;; Hardware stack levels used:    1
 13753 ;; Hardware stack levels required when called:    5
 13754 ;; This function calls:
 13755 ;;		_getCANFrame
 13756 ;; This function is called by:
 13757 ;;		_vscp_getEvent
 13758 ;; This function uses a non-reentrant model
 13759 ;;
 13760                           
 13761                           	psect	text57
 13762  00387A                     __ptext57:
 13763                           	opt stack 0
 13764  00387A                     _getVSCPFrame:
 13765                           	opt stack 24
 13766                           
 13767                           ;incstack = 0
 13768                           ;incstack = 0
 13769                           ;getVSCPFrame@pvscpclass stored from wreg
 13770  00387A  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 13771                           
 13772                           ; BSR set to: 0
 13773                           ;main.c: 2521: uint32_t id;
 13774                           ;main.c: 2523: if ( !getCANFrame(&id, pSize, pData) ) {
 13775  00387E  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 13776  003882  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 13777  003886  0E28               	movlw	getVSCPFrame@id& (0+255)
 13778  003888  ECDF  F01D         	call	_getCANFrame
 13779  00388C  0900               	iorlw	0
 13780  00388E  E102               	bnz	l6473
 13781                           
 13782                           ;main.c: 2524: return 0;
 13783  003890  0E00               	movlw	0
 13784  003892  D02E               	goto	l647
 13785  003894                     l6473:
 13786                           
 13787                           ;main.c: 2525: }
 13788                           ;main.c: 2527: *pNodeId = id & 0x0ff;
 13789  003894  501F               	movf	getVSCPFrame@pNodeId,w,c
 13790  003896  6ED9               	movwf	fsr2l,c
 13791  003898  6ADA               	clrf	fsr2h,c
 13792  00389A  C028  FFDF         	movff	getVSCPFrame@id,indf2
 13793                           
 13794                           ;main.c: 2528: *pvscptype = (id >> 8) & 0xff;
 13795  00389E  501E               	movf	getVSCPFrame@pvscptype,w,c
 13796  0038A0  6ED9               	movwf	fsr2l,c
 13797  0038A2  6ADA               	clrf	fsr2h,c
 13798  0038A4  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 13799                           
 13800                           ;main.c: 2529: *pvscpclass = (id >> 16) & 0x1ff;
 13801  0038A8  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 13802  0038AA  6E23               	movwf	??_getVSCPFrame& (0+255),c
 13803  0038AC  0E01               	movlw	1
 13804  0038AE  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 13805  0038B0  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 13806  0038B2  5027               	movf	getVSCPFrame@pvscpclass,w,c
 13807  0038B4  6ED9               	movwf	fsr2l,c
 13808  0038B6  6ADA               	clrf	fsr2h,c
 13809  0038B8  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 13810  0038BC  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 13811                           
 13812                           ;main.c: 2530: *pPriority = (uint16_t) (0x07 & (id >> 26));
 13813  0038C0  5020               	movf	getVSCPFrame@pPriority,w,c
 13814  0038C2  6ED9               	movwf	fsr2l,c
 13815  0038C4  6ADA               	clrf	fsr2h,c
 13816  0038C6  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 13817  0038CA  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 13818  0038CE  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 13819  0038D2  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 13820  0038D6  0E1B               	movlw	27
 13821  0038D8  D005               	goto	u6710
 13822  0038DA                     u6715:
 13823  0038DA  90D8               	bcf	status,0,c
 13824  0038DC  3226               	rrcf	??_getVSCPFrame+3,f,c
 13825  0038DE  3225               	rrcf	??_getVSCPFrame+2,f,c
 13826  0038E0  3224               	rrcf	??_getVSCPFrame+1,f,c
 13827  0038E2  3223               	rrcf	??_getVSCPFrame,f,c
 13828  0038E4                     u6710:
 13829  0038E4  2EE8               	decfsz	wreg,f,c
 13830  0038E6  D7F9               	goto	u6715
 13831  0038E8  5023               	movf	??_getVSCPFrame,w,c
 13832  0038EA  0B07               	andlw	7
 13833  0038EC  6EDF               	movwf	indf2,c
 13834                           
 13835                           ;main.c: 2532: return 1;
 13836  0038EE  0E01               	movlw	1
 13837  0038F0                     l647:
 13838  0038F0  0012               	return	
 13839  0038F2                     __end_of_getVSCPFrame:
 13840                           	opt stack 0
 13841                           tblptru	equ	0xFF8
 13842                           tblptrh	equ	0xFF7
 13843                           tblptrl	equ	0xFF6
 13844                           tablat	equ	0xFF5
 13845                           prodh	equ	0xFF4
 13846                           prodl	equ	0xFF3
 13847                           postinc0	equ	0xFEE
 13848                           wreg	equ	0xFE8
 13849                           indf1	equ	0xFE7
 13850                           fsr1h	equ	0xFE2
 13851                           fsr1l	equ	0xFE1
 13852                           indf2	equ	0xFDF
 13853                           postinc2	equ	0xFDE
 13854                           postdec2	equ	0xFDD
 13855                           plusw2	equ	0xFDB
 13856                           fsr2h	equ	0xFDA
 13857                           fsr2l	equ	0xFD9
 13858                           status	equ	0xFD8
 13859                           
 13860 ;; *************** function _getCANFrame *****************
 13861 ;; Defined at:
 13862 ;;		line 2562 in file "../main.c"
 13863 ;; Parameters:    Size  Location     Type
 13864 ;;  pid             1    wreg     PTR unsigned long 
 13865 ;;		 -> getVSCPFrame@id(4), 
 13866 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 13867 ;;		 -> vscp_imsg(14), 
 13868 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 13869 ;;		 -> vscp_imsg(14), 
 13870 ;; Auto vars:     Size  Location     Type
 13871 ;;  pid             1   27[COMRAM] PTR unsigned long 
 13872 ;;		 -> getVSCPFrame@id(4), 
 13873 ;;  flags           1   28[COMRAM] enum E16349
 13874 ;; Return value:  Size  Location     Type
 13875 ;;                  1    wreg      unsigned char 
 13876 ;; Registers used:
 13877 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13878 ;; Tracked objects:
 13879 ;;		On entry : F/0
 13880 ;;		On exit  : 0/0
 13881 ;;		Unchanged: 0/0
 13882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13883 ;;      Params:         2       0       0       0       0       0       0
 13884 ;;      Locals:         2       0       0       0       0       0       0
 13885 ;;      Temps:          0       0       0       0       0       0       0
 13886 ;;      Totals:         4       0       0       0       0       0       0
 13887 ;;Total ram usage:        4 bytes
 13888 ;; Hardware stack levels used:    1
 13889 ;; Hardware stack levels required when called:    4
 13890 ;; This function calls:
 13891 ;;		_ECANReceiveMessage
 13892 ;; This function is called by:
 13893 ;;		_getVSCPFrame
 13894 ;; This function uses a non-reentrant model
 13895 ;;
 13896                           
 13897                           	psect	text58
 13898  003BBE                     __ptext58:
 13899                           	opt stack 0
 13900  003BBE                     _getCANFrame:
 13901                           	opt stack 24
 13902                           
 13903                           ;incstack = 0
 13904                           ;incstack = 0
 13905                           ;getCANFrame@pid stored from wreg
 13906  003BBE  CFE8 F01C          	movff	wreg,getCANFrame@pid
 13907                           
 13908                           ; BSR set to: 0
 13909                           ;main.c: 2563: ECAN_RX_MSG_FLAGS flags;
 13910                           ;main.c: 2567: if (vscp_imsg.flags & 0x80) return 0;
 13911  003BC2  AF96               	btfss	_vscp_imsg& (0+255),7,b
 13912  003BC4  D002               	goto	l6489
 13913  003BC6                     l6485:
 13914  003BC6  0E00               	movlw	0
 13915  003BC8  D00F               	goto	l658
 13916  003BCA                     l6489:
 13917                           
 13918                           ; BSR set to: 0
 13919                           ;main.c: 2569: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 13920  003BCA  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 13921  003BCE  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 13922  003BD2  0E1D               	movlw	low getCANFrame@flags
 13923  003BD4  6E11               	movwf	?_ECANReceiveMessage+2,c
 13924  003BD6  501C               	movf	getCANFrame@pid,w,c
 13925  003BD8  EC21  F013         	call	_ECANReceiveMessage
 13926  003BDC  0900               	iorlw	0
 13927  003BDE  E0F3               	bz	l6485
 13928                           
 13929                           ;main.c: 2572: if (flags & ECAN_RX_RTR_FRAME) return 0;
 13930  003BE0  AC1D               	btfss	getCANFrame@flags,6,c
 13931                           
 13932                           ;main.c: 2575: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 13933  003BE2  AA1D               	btfss	getCANFrame@flags,5,c
 13934  003BE4  D7F0               	goto	l6485
 13935                           
 13936                           ;main.c: 2577: return 1;
 13937  003BE6  0E01               	movlw	1
 13938  003BE8                     l658:
 13939  003BE8  0012               	return	
 13940  003BEA                     __end_of_getCANFrame:
 13941                           	opt stack 0
 13942                           tblptru	equ	0xFF8
 13943                           tblptrh	equ	0xFF7
 13944                           tblptrl	equ	0xFF6
 13945                           tablat	equ	0xFF5
 13946                           prodh	equ	0xFF4
 13947                           prodl	equ	0xFF3
 13948                           postinc0	equ	0xFEE
 13949                           wreg	equ	0xFE8
 13950                           indf1	equ	0xFE7
 13951                           fsr1h	equ	0xFE2
 13952                           fsr1l	equ	0xFE1
 13953                           indf2	equ	0xFDF
 13954                           postinc2	equ	0xFDE
 13955                           postdec2	equ	0xFDD
 13956                           plusw2	equ	0xFDB
 13957                           fsr2h	equ	0xFDA
 13958                           fsr2l	equ	0xFD9
 13959                           status	equ	0xFD8
 13960                           
 13961 ;; *************** function _ECANReceiveMessage *****************
 13962 ;; Defined at:
 13963 ;;		line 803 in file "../ECAN.c"
 13964 ;; Parameters:    Size  Location     Type
 13965 ;;  id              1    wreg     PTR unsigned long 
 13966 ;;		 -> getVSCPFrame@id(4), 
 13967 ;;  data            1   14[COMRAM] PTR unsigned char 
 13968 ;;		 -> vscp_imsg(14), 
 13969 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 13970 ;;		 -> vscp_imsg(14), 
 13971 ;;  msgFlags        1   16[COMRAM] PTR enum E16324
 13972 ;;		 -> getCANFrame@flags(1), 
 13973 ;; Auto vars:     Size  Location     Type
 13974 ;;  id              1   19[COMRAM] PTR unsigned long 
 13975 ;;		 -> getVSCPFrame@id(4), 
 13976 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 13977 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 13978 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 13979 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 13980 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 13981 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 13982 ;;  temp            1   22[COMRAM] struct .
 13983 ;;  mode            1   21[COMRAM] unsigned char 
 13984 ;;  i               1   20[COMRAM] unsigned char 
 13985 ;; Return value:  Size  Location     Type
 13986 ;;                  1    wreg      enum E15660
 13987 ;; Registers used:
 13988 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13989 ;; Tracked objects:
 13990 ;;		On entry : F/0
 13991 ;;		On exit  : 0/0
 13992 ;;		Unchanged: 0/0
 13993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13994 ;;      Params:         3       0       0       0       0       0       0
 13995 ;;      Locals:         8       0       0       0       0       0       0
 13996 ;;      Temps:          0       0       0       0       0       0       0
 13997 ;;      Totals:        11       0       0       0       0       0       0
 13998 ;;Total ram usage:       11 bytes
 13999 ;; Hardware stack levels used:    1
 14000 ;; Hardware stack levels required when called:    3
 14001 ;; This function calls:
 14002 ;;		__ECANPointBuffer
 14003 ;;		__RegsToCANID
 14004 ;; This function is called by:
 14005 ;;		_getCANFrame
 14006 ;; This function uses a non-reentrant model
 14007 ;;
 14008                           
 14009                           	psect	text59
 14010  002642                     __ptext59:
 14011                           	opt stack 0
 14012  002642                     _ECANReceiveMessage:
 14013                           	opt stack 24
 14014                           
 14015                           ;incstack = 0
 14016                           ;incstack = 0
 14017                           ;ECANReceiveMessage@id stored from wreg
 14018  002642  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 14019                           
 14020                           ; BSR set to: 0
 14021                           ;ECAN.c: 805: BYTE mode;
 14022                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 14023                           ;ECAN.c: 809: char i;
 14024                           ;ECAN.c: 810: BYTE_VAL temp;
 14025                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 14026  002646  6A54               	clrf	__ECANRxFilterHitInfo,c
 14027                           
 14028                           ; BSR set to: 0
 14029                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 14030  002648  5077               	movf	3959,w,c	;volatile
 14031  00264A  0BC0               	andlw	192
 14032  00264C  6E16               	movwf	ECANReceiveMessage@mode,c
 14033                           
 14034                           ; BSR set to: 0
 14035                           ;ECAN.c: 816: if ( mode == 0x00 )
 14036  00264E  6616               	tstfsz	ECANReceiveMessage@mode,c
 14037  002650  D032               	goto	l6621
 14038                           
 14039                           ; BSR set to: 0
 14040                           ;ECAN.c: 822: {
 14041                           ;ECAN.c: 824: if ( RXB0FUL )
 14042  002652  AE60               	btfss	3936,7,c	;volatile
 14043  002654  D012               	goto	l858
 14044                           
 14045                           ; BSR set to: 0
 14046                           ;ECAN.c: 825: {
 14047                           ;ECAN.c: 827: RXB0IF = 0;
 14048  002656  90A4               	bcf	4004,0,c	;volatile
 14049                           
 14050                           ;ECAN.c: 830: if ( RXB0OVFL )
 14051  002658  AE74               	btfss	3956,7,c	;volatile
 14052  00265A  D006               	goto	l6597
 14053                           
 14054                           ; BSR set to: 0
 14055                           ;ECAN.c: 831: {
 14056                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 14057  00265C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14058  00265E  6ED9               	movwf	fsr2l,c
 14059  002660  6ADA               	clrf	fsr2h,c
 14060  002662  0E00               	movlw	0
 14061  002664  86DB               	bsf	plusw2,3,c
 14062                           
 14063                           ; BSR set to: 0
 14064                           ;ECAN.c: 833: RXB0OVFL = 0;
 14065  002666  9E74               	bcf	3956,7,c	;volatile
 14066  002668                     l6597:
 14067                           
 14068                           ; BSR set to: 0
 14069                           ;ECAN.c: 834: }
 14070                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 14071  002668  A060               	btfss	3936,0,c	;volatile
 14072  00266A  D002               	bra	u6885
 14073  00266C  8054               	bsf	__ECANRxFilterHitInfo,0,c
 14074  00266E  D001               	bra	u6887
 14075  002670                     u6885:
 14076  002670  9054               	bcf	__ECANRxFilterHitInfo,0,c
 14077  002672                     u6887:
 14078                           
 14079                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 14080  002672  0E0F               	movlw	15	;volatile
 14081  002674  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14082  002676  0E60               	movlw	96	;volatile
 14083  002678  D01A               	goto	L29
 14084  00267A                     l858:
 14085                           
 14086                           ; BSR set to: 0
 14087                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 14088  00267A  010F               	movlb	15	; () banked
 14089  00267C  AF50               	btfss	80,7,b	;volatile
 14090  00267E  D019               	goto	l6615
 14091                           
 14092                           ; BSR set to: 15
 14093                           ;ECAN.c: 842: {
 14094                           ;ECAN.c: 844: RXB1IF = 0;
 14095  002680  92A4               	bcf	4004,1,c	;volatile
 14096                           
 14097                           ;ECAN.c: 847: if ( RXB1OVFL )
 14098  002682  AC74               	btfss	3956,6,c	;volatile
 14099  002684  D006               	goto	l6607
 14100                           
 14101                           ; BSR set to: 15
 14102                           ;ECAN.c: 848: {
 14103                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 14104  002686  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14105  002688  6ED9               	movwf	fsr2l,c
 14106  00268A  6ADA               	clrf	fsr2h,c
 14107  00268C  0E00               	movlw	0
 14108  00268E  86DB               	bsf	plusw2,3,c
 14109                           
 14110                           ; BSR set to: 15
 14111                           ;ECAN.c: 850: RXB1OVFL = 0;
 14112  002690  9C74               	bcf	3956,6,c	;volatile
 14113  002692                     l6607:
 14114                           
 14115                           ; BSR set to: 15
 14116                           ;ECAN.c: 851: }
 14117                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 14118  002692  5150               	movf	80,w,b	;volatile
 14119  002694  0B07               	andlw	7
 14120  002696  6E54               	movwf	__ECANRxFilterHitInfo,c
 14121                           
 14122                           ; BSR set to: 15
 14123                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 14124  002698  0E02               	movlw	2
 14125  00269A  6054               	cpfslt	__ECANRxFilterHitInfo,c
 14126  00269C  D005               	goto	l6613
 14127                           
 14128                           ; BSR set to: 15
 14129                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 14130  00269E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14131  0026A0  6ED9               	movwf	fsr2l,c
 14132  0026A2  6ADA               	clrf	fsr2h,c
 14133  0026A4  0E00               	movlw	0
 14134  0026A6  8EDB               	bsf	plusw2,7,c
 14135  0026A8                     l6613:
 14136                           
 14137                           ; BSR set to: 15
 14138                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 14139  0026A8  0E0F               	movlw	15	;volatile
 14140  0026AA  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14141  0026AC  0E50               	movlw	80	;volatile
 14142  0026AE                     L29:
 14143  0026AE  6E18               	movwf	ECANReceiveMessage@ptr,c
 14144                           
 14145                           ;ECAN.c: 860: }
 14146  0026B0  D065               	goto	l6675
 14147  0026B2                     l6615:
 14148                           
 14149                           ;ECAN.c: 861: else
 14150                           ;ECAN.c: 862: return FALSE;
 14151  0026B2  0E00               	movlw	0
 14152  0026B4  D0CC               	goto	l865
 14153  0026B6                     l6621:
 14154                           
 14155                           ; BSR set to: 0
 14156                           ;ECAN.c: 869: else if ( mode == 0x40 )
 14157  0026B6  5016               	movf	ECANReceiveMessage@mode,w,c
 14158  0026B8  0A40               	xorlw	64
 14159  0026BA  E146               	bnz	l868
 14160                           
 14161                           ; BSR set to: 0
 14162                           ;ECAN.c: 875: {
 14163                           ;ECAN.c: 876: if ( RXB0FUL )
 14164  0026BC  AE60               	btfss	3936,7,c	;volatile
 14165  0026BE  D004               	goto	l869
 14166                           
 14167                           ; BSR set to: 0
 14168                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 14169  0026C0  0E0F               	movlw	15	;volatile
 14170  0026C2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14171  0026C4  0E60               	movlw	96	;volatile
 14172  0026C6  D03E               	goto	L36
 14173  0026C8                     l869:
 14174                           
 14175                           ; BSR set to: 0
 14176                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 14177  0026C8  010F               	movlb	15	; () banked
 14178  0026CA  AF50               	btfss	80,7,b	;volatile
 14179  0026CC  D004               	goto	l871
 14180                           
 14181                           ; BSR set to: 15
 14182                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 14183  0026CE  0E0F               	movlw	15	;volatile
 14184  0026D0  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14185  0026D2  0E50               	movlw	80	;volatile
 14186  0026D4  D037               	goto	L36
 14187  0026D6                     l871:
 14188                           
 14189                           ; BSR set to: 15
 14190                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 14191  0026D6  010D               	movlb	13
 14192  0026D8  B5F8               	btfsc	248,2,b	;volatile
 14193  0026DA  D007               	goto	l873
 14194  0026DC  010E               	movlb	14
 14195  0026DE  AF20               	btfss	32,7,b	;volatile
 14196  0026E0  D004               	goto	l873
 14197                           
 14198                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 14199  0026E2  0E0E               	movlw	14	;volatile
 14200  0026E4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14201  0026E6  0E20               	movlw	32	;volatile
 14202  0026E8  D02D               	goto	L36
 14203  0026EA                     l873:
 14204                           
 14205                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 14206  0026EA  010D               	movlb	13
 14207  0026EC  B7F8               	btfsc	248,3,b	;volatile
 14208  0026EE  D007               	goto	l875
 14209  0026F0  010E               	movlb	14
 14210  0026F2  AF30               	btfss	48,7,b	;volatile
 14211  0026F4  D004               	goto	l875
 14212                           
 14213                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 14214  0026F6  0E0E               	movlw	14	;volatile
 14215  0026F8  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14216  0026FA  0E30               	movlw	48	;volatile
 14217  0026FC  D023               	goto	L36
 14218  0026FE                     l875:
 14219                           
 14220                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 14221  0026FE  010D               	movlb	13
 14222  002700  B9F8               	btfsc	248,4,b	;volatile
 14223  002702  D007               	goto	l877
 14224  002704  010E               	movlb	14
 14225  002706  AF40               	btfss	64,7,b	;volatile
 14226  002708  D004               	goto	l877
 14227                           
 14228                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 14229  00270A  0E0E               	movlw	14	;volatile
 14230  00270C  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14231  00270E  0E40               	movlw	64	;volatile
 14232  002710  D019               	goto	L36
 14233  002712                     l877:
 14234                           
 14235                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 14236  002712  010D               	movlb	13
 14237  002714  BBF8               	btfsc	248,5,b	;volatile
 14238  002716  D005               	goto	l879
 14239  002718  010E               	movlb	14
 14240  00271A  AF50               	btfss	80,7,b	;volatile
 14241  00271C  D002               	goto	l879
 14242                           
 14243                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 14244  00271E  0E0E               	movlw	14	;volatile
 14245  002720  D7D7               	goto	L37
 14246  002722                     l879:
 14247                           
 14248                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 14249  002722  010D               	movlb	13
 14250  002724  BDF8               	btfsc	248,6,b	;volatile
 14251  002726  D005               	goto	l881
 14252  002728  010E               	movlb	14
 14253  00272A  AF60               	btfss	96,7,b	;volatile
 14254  00272C  D002               	goto	l881
 14255                           
 14256                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 14257  00272E  0E0E               	movlw	14	;volatile
 14258  002730  D7C8               	goto	L38
 14259  002732                     l881:
 14260                           
 14261                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 14262  002732  010D               	movlb	13
 14263  002734  BFF8               	btfsc	248,7,b	;volatile
 14264  002736  D7BD               	goto	l6615
 14265  002738  010E               	movlb	14
 14266  00273A  AF70               	btfss	112,7,b	;volatile
 14267  00273C  D7BA               	goto	l6615
 14268                           
 14269                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 14270  00273E  0E0E               	movlw	14	;volatile
 14271  002740  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14272  002742  0E70               	movlw	112	;volatile
 14273  002744                     L36:
 14274  002744  6E18               	movwf	ECANReceiveMessage@ptr,c
 14275  002746  D00A               	goto	l6665
 14276  002748                     l868:
 14277                           
 14278                           ; BSR set to: 0
 14279                           ;ECAN.c: 910: else
 14280                           ;ECAN.c: 915: {
 14281                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 14282  002748  AE74               	btfss	3956,7,c	;volatile
 14283  00274A  D7B3               	goto	l6615
 14284                           
 14285                           ; BSR set to: 0
 14286                           ;ECAN.c: 917: {
 14287                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 14288  00274C  506F               	movf	3951,w,c	;volatile
 14289  00274E  0B07               	andlw	7
 14290  002750  EC79  F01C         	call	__ECANPointBuffer
 14291  002754  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 14292  002758  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 14293  00275C                     l6665:
 14294                           
 14295                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 14296  00275C  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14297  002760  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14298  002764  50DF               	movf	indf2,w,c
 14299  002766  0B1F               	andlw	31
 14300  002768  6E54               	movwf	__ECANRxFilterHitInfo,c
 14301                           
 14302                           ;ECAN.c: 932: RXB1IF = 0;
 14303  00276A  92A4               	bcf	4004,1,c	;volatile
 14304                           
 14305                           ;ECAN.c: 934: if ( RXB1OVFL )
 14306  00276C  AC74               	btfss	3956,6,c	;volatile
 14307  00276E  D006               	goto	l6675
 14308                           
 14309                           ;ECAN.c: 935: {
 14310                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 14311  002770  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14312  002772  6ED9               	movwf	fsr2l,c
 14313  002774  6ADA               	clrf	fsr2h,c
 14314  002776  0E00               	movlw	0
 14315  002778  86DB               	bsf	plusw2,3,c
 14316                           
 14317                           ;ECAN.c: 937: RXB1OVFL = 0;
 14318  00277A  9C74               	bcf	3956,6,c	;volatile
 14319  00277C                     l6675:
 14320                           
 14321                           ;ECAN.c: 942: savedPtr = ptr;
 14322  00277C  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 14323  002780  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 14324                           
 14325                           ;ECAN.c: 943: *msgFlags = 0;
 14326  002784  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14327  002786  6ED9               	movwf	fsr2l,c
 14328  002788  6ADA               	clrf	fsr2h,c
 14329  00278A  6ADF               	clrf	indf2,c
 14330                           
 14331                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 14332  00278C  EE20 F005          	lfsr	2,5
 14333  002790  5018               	movf	ECANReceiveMessage@ptr,w,c
 14334  002792  26D9               	addwf	fsr2l,f,c
 14335  002794  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14336  002796  22DA               	addwfc	fsr2h,f,c
 14337  002798  50DF               	movf	indf2,w,c
 14338  00279A  6E17               	movwf	ECANReceiveMessage@temp,c
 14339                           
 14340                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 14341  00279C  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14342  00279E  6ED9               	movwf	fsr2l,c
 14343  0027A0  6ADA               	clrf	fsr2h,c
 14344  0027A2  5017               	movf	ECANReceiveMessage@temp,w,c
 14345  0027A4  0B0F               	andlw	15
 14346  0027A6  6EDF               	movwf	indf2,c
 14347                           
 14348                           ;ECAN.c: 950: if ( temp.bits.b6 )
 14349  0027A8  AC17               	btfss	ECANReceiveMessage@temp,6,c
 14350  0027AA  D005               	goto	l889
 14351                           
 14352                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 14353  0027AC  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14354  0027AE  6ED9               	movwf	fsr2l,c
 14355  0027B0  6ADA               	clrf	fsr2h,c
 14356  0027B2  0E00               	movlw	0
 14357  0027B4  8CDB               	bsf	plusw2,6,c
 14358  0027B6                     l889:
 14359                           
 14360                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 14361  0027B6  EE20 F002          	lfsr	2,2
 14362  0027BA  5018               	movf	ECANReceiveMessage@ptr,w,c
 14363  0027BC  26D9               	addwf	fsr2l,f,c
 14364  0027BE  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14365  0027C0  22DA               	addwfc	fsr2h,f,c
 14366  0027C2  50DF               	movf	indf2,w,c
 14367  0027C4  6E17               	movwf	ECANReceiveMessage@temp,c
 14368                           
 14369                           ;ECAN.c: 955: if ( temp.bits.b3 )
 14370  0027C6  A617               	btfss	ECANReceiveMessage@temp,3,c
 14371  0027C8  D008               	goto	l890
 14372                           
 14373                           ;ECAN.c: 956: {
 14374                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 14375  0027CA  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14376  0027CC  6ED9               	movwf	fsr2l,c
 14377  0027CE  6ADA               	clrf	fsr2h,c
 14378  0027D0  0E00               	movlw	0
 14379  0027D2  8ADB               	bsf	plusw2,5,c
 14380                           
 14381                           ;ECAN.c: 958: temp.Val = 1;
 14382  0027D4  0E01               	movlw	1
 14383  0027D6  6E17               	movwf	ECANReceiveMessage@temp,c
 14384                           
 14385                           ;ECAN.c: 959: }
 14386  0027D8  D001               	goto	l6693
 14387  0027DA                     l890:
 14388                           
 14389                           ;ECAN.c: 960: else
 14390                           ;ECAN.c: 961: temp.Val = 0;
 14391  0027DA  6A17               	clrf	ECANReceiveMessage@temp,c
 14392  0027DC                     l6693:
 14393                           
 14394                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 14395  0027DC  2818               	incf	ECANReceiveMessage@ptr,w,c
 14396  0027DE  6E08               	movwf	?__RegsToCANID,c
 14397  0027E0  0E00               	movlw	0
 14398  0027E2  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 14399  0027E4  6E09               	movwf	?__RegsToCANID+1,c
 14400  0027E6  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 14401  0027EA  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 14402  0027EE  ECA9  F016         	call	__RegsToCANID	;wreg free
 14403                           
 14404                           ;ECAN.c: 966: ptr += 6;
 14405  0027F2  0E06               	movlw	6
 14406  0027F4  2618               	addwf	ECANReceiveMessage@ptr,f,c
 14407  0027F6  0E00               	movlw	0
 14408  0027F8  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 14409                           
 14410                           ;ECAN.c: 967: temp.Val = *dataLen;
 14411  0027FA  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14412  0027FC  6ED9               	movwf	fsr2l,c
 14413  0027FE  6ADA               	clrf	fsr2h,c
 14414  002800  50DF               	movf	indf2,w,c
 14415  002802  6E17               	movwf	ECANReceiveMessage@temp,c
 14416                           
 14417                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 14418  002804  6A15               	clrf	ECANReceiveMessage@i,c
 14419  002806  D00D               	goto	l6709
 14420  002808                     l6701:
 14421                           
 14422                           ;ECAN.c: 969: *data++ = *ptr++;
 14423  002808  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14424  00280C  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14425  002810  500F               	movf	ECANReceiveMessage@data,w,c
 14426  002812  6EE1               	movwf	fsr1l,c
 14427  002814  6AE2               	clrf	fsr1h,c
 14428  002816  CFDF FFE7          	movff	indf2,indf1
 14429  00281A  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 14430  00281C  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 14431  00281E  2A0F               	incf	ECANReceiveMessage@data,f,c
 14432  002820  2A15               	incf	ECANReceiveMessage@i,f,c
 14433  002822                     l6709:
 14434  002822  5017               	movf	ECANReceiveMessage@temp,w,c
 14435  002824  5C15               	subwf	ECANReceiveMessage@i,w,c
 14436  002826  E3F0               	bnc	l6701
 14437                           
 14438                           ;ECAN.c: 972: if ( IRXIF )
 14439  002828  AEA4               	btfss	4004,7,c	;volatile
 14440  00282A  D006               	goto	l6715
 14441                           
 14442                           ;ECAN.c: 973: {
 14443                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 14444  00282C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14445  00282E  6ED9               	movwf	fsr2l,c
 14446  002830  6ADA               	clrf	fsr2h,c
 14447  002832  0E00               	movlw	0
 14448  002834  88DB               	bsf	plusw2,4,c
 14449                           
 14450                           ;ECAN.c: 975: IRXIF = 0;
 14451  002836  9EA4               	bcf	4004,7,c	;volatile
 14452  002838                     l6715:
 14453                           
 14454                           ;ECAN.c: 976: }
 14455                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 14456  002838  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 14457  00283C  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 14458  002840  0E7F               	movlw	127
 14459  002842  16DF               	andwf	indf2,f,c
 14460                           
 14461                           ;ECAN.c: 983: if ( mode == 0x80 )
 14462  002844  5016               	movf	ECANReceiveMessage@mode,w,c
 14463  002846  0A80               	xorlw	128
 14464  002848  B4D8               	btfsc	status,2,c
 14465                           
 14466                           ;ECAN.c: 984: FIFOEMPTY = 0;
 14467  00284A  9E74               	bcf	3956,7,c	;volatile
 14468                           
 14469                           ;ECAN.c: 990: return TRUE;
 14470  00284C  0E01               	movlw	1
 14471  00284E                     l865:
 14472  00284E  0012               	return	
 14473  002850                     __end_of_ECANReceiveMessage:
 14474                           	opt stack 0
 14475                           tblptru	equ	0xFF8
 14476                           tblptrh	equ	0xFF7
 14477                           tblptrl	equ	0xFF6
 14478                           tablat	equ	0xFF5
 14479                           prodh	equ	0xFF4
 14480                           prodl	equ	0xFF3
 14481                           postinc0	equ	0xFEE
 14482                           wreg	equ	0xFE8
 14483                           indf1	equ	0xFE7
 14484                           fsr1h	equ	0xFE2
 14485                           fsr1l	equ	0xFE1
 14486                           indf2	equ	0xFDF
 14487                           postinc2	equ	0xFDE
 14488                           postdec2	equ	0xFDD
 14489                           plusw2	equ	0xFDB
 14490                           fsr2h	equ	0xFDA
 14491                           fsr2l	equ	0xFD9
 14492                           status	equ	0xFD8
 14493                           
 14494 ;; *************** function __RegsToCANID *****************
 14495 ;; Defined at:
 14496 ;;		line 1156 in file "../ECAN.c"
 14497 ;; Parameters:    Size  Location     Type
 14498 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 14499 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14500 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14501 ;;  val             1    9[COMRAM] PTR unsigned long 
 14502 ;;		 -> getVSCPFrame@id(4), 
 14503 ;;  type            1   10[COMRAM] unsigned char 
 14504 ;; Auto vars:     Size  Location     Type
 14505 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 14506 ;;		 -> getVSCPFrame@id(4), 
 14507 ;; Return value:  Size  Location     Type
 14508 ;;		None               void
 14509 ;; Registers used:
 14510 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14511 ;; Tracked objects:
 14512 ;;		On entry : 0/0
 14513 ;;		On exit  : 0/0
 14514 ;;		Unchanged: 0/0
 14515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14516 ;;      Params:         4       0       0       0       0       0       0
 14517 ;;      Locals:         1       0       0       0       0       0       0
 14518 ;;      Temps:          2       0       0       0       0       0       0
 14519 ;;      Totals:         7       0       0       0       0       0       0
 14520 ;;Total ram usage:        7 bytes
 14521 ;; Hardware stack levels used:    1
 14522 ;; Hardware stack levels required when called:    2
 14523 ;; This function calls:
 14524 ;;		Nothing
 14525 ;; This function is called by:
 14526 ;;		_ECANReceiveMessage
 14527 ;; This function uses a non-reentrant model
 14528 ;;
 14529                           
 14530                           	psect	text60
 14531  002D52                     __ptext60:
 14532                           	opt stack 0
 14533  002D52                     __RegsToCANID:
 14534                           	opt stack 24
 14535                           
 14536                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 14537                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 14538                           
 14539                           ;incstack = 0
 14540                           ;incstack = 0
 14541  002D52  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 14542                           
 14543                           ;ECAN.c: 1161: if ( type == 0 )
 14544  002D56  660B               	tstfsz	__RegsToCANID@type,c
 14545  002D58  D046               	goto	l6789
 14546                           
 14547                           ;ECAN.c: 1162: {
 14548                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 14549  002D5A  500E               	movf	__RegsToCANID@Value,w,c
 14550  002D5C  6ED9               	movwf	fsr2l,c
 14551  002D5E  6ADA               	clrf	fsr2h,c
 14552  002D60  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14553  002D64  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14554  002D68  50E7               	movf	indf1,w,c
 14555  002D6A  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14556  002D6C  90D8               	bcf	status,0,c
 14557  002D6E  360C               	rlcf	??__RegsToCANID,f,c
 14558  002D70  90D8               	bcf	status,0,c
 14559  002D72  360C               	rlcf	??__RegsToCANID,f,c
 14560  002D74  90D8               	bcf	status,0,c
 14561  002D76  340C               	rlcf	??__RegsToCANID,w,c
 14562  002D78  6EDF               	movwf	indf2,c
 14563                           
 14564                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 14565  002D7A  500E               	movf	__RegsToCANID@Value,w,c
 14566  002D7C  6ED9               	movwf	fsr2l,c
 14567  002D7E  6ADA               	clrf	fsr2h,c
 14568  002D80  2AD9               	incf	fsr2l,f,c
 14569  002D82  6ADA               	clrf	fsr2h,c
 14570  002D84  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14571  002D88  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14572  002D8C  50E7               	movf	indf1,w,c
 14573  002D8E  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14574  002D90  0E05               	movlw	5
 14575  002D92  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14576  002D94                     u7205:
 14577  002D94  90D8               	bcf	status,0,c
 14578  002D96  320C               	rrcf	??__RegsToCANID,f,c
 14579  002D98  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14580  002D9A  D7FC               	goto	u7205
 14581  002D9C  500C               	movf	??__RegsToCANID,w,c
 14582  002D9E  6EDF               	movwf	indf2,c
 14583                           
 14584                           ;ECAN.c: 1166: ptr++;
 14585  002DA0  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14586  002DA2  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14587                           
 14588                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 14589  002DA4  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14590  002DA8  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14591  002DAC  50DF               	movf	indf2,w,c
 14592  002DAE  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14593  002DB0  0E05               	movlw	5
 14594  002DB2  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14595  002DB4                     u7215:
 14596  002DB4  90D8               	bcf	status,0,c
 14597  002DB6  320C               	rrcf	??__RegsToCANID,f,c
 14598  002DB8  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14599  002DBA  D7FC               	goto	u7215
 14600  002DBC  500E               	movf	__RegsToCANID@Value,w,c
 14601  002DBE  6ED9               	movwf	fsr2l,c
 14602  002DC0  6ADA               	clrf	fsr2h,c
 14603  002DC2  500C               	movf	??__RegsToCANID,w,c
 14604  002DC4  12DF               	iorwf	indf2,f,c
 14605                           
 14606                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 14607  002DC6  500E               	movf	__RegsToCANID@Value,w,c
 14608  002DC8  6ED9               	movwf	fsr2l,c
 14609  002DCA  6ADA               	clrf	fsr2h,c
 14610  002DCC  0E02               	movlw	2
 14611  002DCE  26D9               	addwf	fsr2l,f,c
 14612  002DD0  6ADA               	clrf	fsr2h,c
 14613  002DD2  6ADF               	clrf	indf2,c
 14614                           
 14615                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 14616  002DD4  500E               	movf	__RegsToCANID@Value,w,c
 14617  002DD6  6ED9               	movwf	fsr2l,c
 14618  002DD8  6ADA               	clrf	fsr2h,c
 14619  002DDA  0E03               	movlw	3
 14620  002DDC  26D9               	addwf	fsr2l,f,c
 14621  002DDE  6ADA               	clrf	fsr2h,c
 14622  002DE0  0E00               	movlw	0
 14623  002DE2  6EDF               	movwf	indf2,c
 14624                           
 14625                           ;ECAN.c: 1170: }
 14626  002DE4  D067               	goto	l912
 14627  002DE6                     l6789:
 14628                           
 14629                           ;ECAN.c: 1171: else
 14630                           ;ECAN.c: 1172: {
 14631                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 14632  002DE6  500E               	movf	__RegsToCANID@Value,w,c
 14633  002DE8  6ED9               	movwf	fsr2l,c
 14634  002DEA  6ADA               	clrf	fsr2h,c
 14635  002DEC  0E02               	movlw	2
 14636  002DEE  26D9               	addwf	fsr2l,f,c
 14637  002DF0  6ADA               	clrf	fsr2h,c
 14638  002DF2  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14639  002DF6  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14640  002DFA  50E7               	movf	indf1,w,c
 14641  002DFC  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14642  002DFE  0E05               	movlw	5
 14643  002E00  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14644  002E02                     u7225:
 14645  002E02  90D8               	bcf	status,0,c
 14646  002E04  360C               	rlcf	??__RegsToCANID,f,c
 14647  002E06  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14648  002E08  D7FC               	goto	u7225
 14649  002E0A  500C               	movf	??__RegsToCANID,w,c
 14650  002E0C  6EDF               	movwf	indf2,c
 14651                           
 14652                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 14653  002E0E  500E               	movf	__RegsToCANID@Value,w,c
 14654  002E10  6ED9               	movwf	fsr2l,c
 14655  002E12  6ADA               	clrf	fsr2h,c
 14656  002E14  0E03               	movlw	3
 14657  002E16  26D9               	addwf	fsr2l,f,c
 14658  002E18  6ADA               	clrf	fsr2h,c
 14659  002E1A  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14660  002E1E  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14661  002E22  50E7               	movf	indf1,w,c
 14662  002E24  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14663  002E26  90D8               	bcf	status,0,c
 14664  002E28  320C               	rrcf	??__RegsToCANID,f,c
 14665  002E2A  90D8               	bcf	status,0,c
 14666  002E2C  320C               	rrcf	??__RegsToCANID,f,c
 14667  002E2E  90D8               	bcf	status,0,c
 14668  002E30  300C               	rrcf	??__RegsToCANID,w,c
 14669  002E32  6EDF               	movwf	indf2,c
 14670                           
 14671                           ;ECAN.c: 1176: ptr++;
 14672  002E34  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14673  002E36  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14674                           
 14675                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 14676  002E38  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14677  002E3C  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14678  002E40  50DF               	movf	indf2,w,c
 14679  002E42  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14680  002E44  0E03               	movlw	3
 14681  002E46  160C               	andwf	??__RegsToCANID,f,c
 14682  002E48  500E               	movf	__RegsToCANID@Value,w,c
 14683  002E4A  6ED9               	movwf	fsr2l,c
 14684  002E4C  6ADA               	clrf	fsr2h,c
 14685  002E4E  0E02               	movlw	2
 14686  002E50  26D9               	addwf	fsr2l,f,c
 14687  002E52  6ADA               	clrf	fsr2h,c
 14688  002E54  500C               	movf	??__RegsToCANID,w,c
 14689  002E56  12DF               	iorwf	indf2,f,c
 14690                           
 14691                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 14692  002E58  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14693  002E5C  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14694  002E60  50DF               	movf	indf2,w,c
 14695  002E62  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14696  002E64  90D8               	bcf	status,0,c
 14697  002E66  320C               	rrcf	??__RegsToCANID,f,c
 14698  002E68  90D8               	bcf	status,0,c
 14699  002E6A  320C               	rrcf	??__RegsToCANID,f,c
 14700  002E6C  90D8               	bcf	status,0,c
 14701  002E6E  320C               	rrcf	??__RegsToCANID,f,c
 14702  002E70  0E1C               	movlw	28
 14703  002E72  160C               	andwf	??__RegsToCANID,f,c
 14704  002E74  500E               	movf	__RegsToCANID@Value,w,c
 14705  002E76  6ED9               	movwf	fsr2l,c
 14706  002E78  6ADA               	clrf	fsr2h,c
 14707  002E7A  0E02               	movlw	2
 14708  002E7C  26D9               	addwf	fsr2l,f,c
 14709  002E7E  6ADA               	clrf	fsr2h,c
 14710  002E80  500C               	movf	??__RegsToCANID,w,c
 14711  002E82  12DF               	iorwf	indf2,f,c
 14712                           
 14713                           ;ECAN.c: 1180: ptr++;
 14714  002E84  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14715  002E86  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14716                           
 14717                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 14718  002E88  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14719  002E8C  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14720  002E90  500E               	movf	__RegsToCANID@Value,w,c
 14721  002E92  6EE1               	movwf	fsr1l,c
 14722  002E94  6AE2               	clrf	fsr1h,c
 14723  002E96  2AE1               	incf	fsr1l,f,c
 14724  002E98  6AE2               	clrf	fsr1h,c
 14725  002E9A  CFDF FFE7          	movff	indf2,indf1
 14726                           
 14727                           ;ECAN.c: 1182: ptr++;
 14728  002E9E  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14729  002EA0  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14730                           
 14731                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 14732  002EA2  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14733  002EA6  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14734  002EAA  500E               	movf	__RegsToCANID@Value,w,c
 14735  002EAC  6EE1               	movwf	fsr1l,c
 14736  002EAE  6AE2               	clrf	fsr1h,c
 14737  002EB0  CFDF FFE7          	movff	indf2,indf1
 14738  002EB4                     l912:
 14739  002EB4  0012               	return	
 14740  002EB6                     __end_of__RegsToCANID:
 14741                           	opt stack 0
 14742                           tblptru	equ	0xFF8
 14743                           tblptrh	equ	0xFF7
 14744                           tblptrl	equ	0xFF6
 14745                           tablat	equ	0xFF5
 14746                           prodh	equ	0xFF4
 14747                           prodl	equ	0xFF3
 14748                           postinc0	equ	0xFEE
 14749                           wreg	equ	0xFE8
 14750                           indf1	equ	0xFE7
 14751                           fsr1h	equ	0xFE2
 14752                           fsr1l	equ	0xFE1
 14753                           indf2	equ	0xFDF
 14754                           postinc2	equ	0xFDE
 14755                           postdec2	equ	0xFDD
 14756                           plusw2	equ	0xFDB
 14757                           fsr2h	equ	0xFDA
 14758                           fsr2l	equ	0xFD9
 14759                           status	equ	0xFD8
 14760                           
 14761 ;; *************** function __ECANPointBuffer *****************
 14762 ;; Defined at:
 14763 ;;		line 1207 in file "../ECAN.c"
 14764 ;; Parameters:    Size  Location     Type
 14765 ;;  b               1    wreg     unsigned char 
 14766 ;; Auto vars:     Size  Location     Type
 14767 ;;  b               1   10[COMRAM] unsigned char 
 14768 ;;  pt              2   11[COMRAM] PTR unsigned char 
 14769 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14770 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14771 ;; Return value:  Size  Location     Type
 14772 ;;                  2    7[COMRAM] PTR unsigned char 
 14773 ;; Registers used:
 14774 ;;		wreg, status,2, status,0
 14775 ;; Tracked objects:
 14776 ;;		On entry : F/0
 14777 ;;		On exit  : 0/0
 14778 ;;		Unchanged: 0/0
 14779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14780 ;;      Params:         3       0       0       0       0       0       0
 14781 ;;      Locals:         3       0       0       0       0       0       0
 14782 ;;      Temps:          0       0       0       0       0       0       0
 14783 ;;      Totals:         6       0       0       0       0       0       0
 14784 ;;Total ram usage:        6 bytes
 14785 ;; Hardware stack levels used:    1
 14786 ;; Hardware stack levels required when called:    2
 14787 ;; This function calls:
 14788 ;;		Nothing
 14789 ;; This function is called by:
 14790 ;;		_ECANReceiveMessage
 14791 ;; This function uses a non-reentrant model
 14792 ;;
 14793                           
 14794                           	psect	text61
 14795  0038F2                     __ptext61:
 14796                           	opt stack 0
 14797  0038F2                     __ECANPointBuffer:
 14798                           	opt stack 24
 14799                           
 14800                           ;incstack = 0
 14801                           ;incstack = 0
 14802                           ;__ECANPointBuffer@b stored from wreg
 14803  0038F2  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 14804                           
 14805                           ; BSR set to: 0
 14806                           ;ECAN.c: 1208: BYTE* pt;
 14807                           ;ECAN.c: 1210: switch(b)
 14808  0038F6  D024               	goto	l6775
 14809  0038F8                     l6757:
 14810                           
 14811                           ; BSR set to: 0
 14812                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 14813  0038F8  0E0F               	movlw	15	;volatile
 14814  0038FA  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14815  0038FC  0E60               	movlw	96	;volatile
 14816  0038FE  D01E               	goto	L45
 14817  003900                     l6759:
 14818                           
 14819                           ; BSR set to: 0
 14820                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 14821  003900  010F               	movlb	15	; () banked
 14822  003902  0E0F               	movlw	15	;volatile
 14823  003904  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14824  003906  0E50               	movlw	80	;volatile
 14825  003908  D019               	goto	L45
 14826  00390A                     l6761:
 14827                           
 14828                           ; BSR set to: 0
 14829                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 14830  00390A  010E               	movlb	14	; () banked
 14831  00390C  0E0E               	movlw	14	;volatile
 14832  00390E  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14833  003910  0E20               	movlw	32	;volatile
 14834  003912  D014               	goto	L45
 14835  003914                     l6763:
 14836                           
 14837                           ; BSR set to: 0
 14838                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 14839  003914  010E               	movlb	14	; () banked
 14840  003916  0E0E               	movlw	14	;volatile
 14841  003918  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14842  00391A  0E30               	movlw	48	;volatile
 14843  00391C  D00F               	goto	L45
 14844  00391E                     l6765:
 14845                           
 14846                           ; BSR set to: 0
 14847                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 14848  00391E  010E               	movlb	14	; () banked
 14849  003920  0E0E               	movlw	14	;volatile
 14850  003922  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14851  003924  0E40               	movlw	64	;volatile
 14852  003926  D00A               	goto	L45
 14853  003928                     l6767:
 14854                           
 14855                           ; BSR set to: 0
 14856                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 14857  003928  010E               	movlb	14	; () banked
 14858  00392A  0E0E               	movlw	14	;volatile
 14859  00392C  D7EB               	goto	L46
 14860  00392E                     l6769:
 14861                           
 14862                           ; BSR set to: 0
 14863                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 14864  00392E  010E               	movlb	14	; () banked
 14865  003930  0E0E               	movlw	14	;volatile
 14866  003932  D7E3               	goto	L47
 14867  003934                     l6771:
 14868                           
 14869                           ; BSR set to: 0
 14870                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 14871  003934  010E               	movlb	14	; () banked
 14872  003936  0E0E               	movlw	14	;volatile
 14873  003938  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14874  00393A  0E70               	movlw	112	;volatile
 14875  00393C                     L45:
 14876  00393C  6E0C               	movwf	__ECANPointBuffer@pt,c
 14877                           
 14878                           ;ECAN.c: 1235: break;
 14879  00393E  D00F               	goto	l917
 14880  003940                     l6775:
 14881                           
 14882                           ; BSR set to: 0
 14883  003940  500B               	movf	__ECANPointBuffer@b,w,c
 14884                           
 14885                           ; Switch size 1, requested type "speed"
 14886                           ; Number of cases is 7, Range of values is 0 to 6
 14887                           ; switch strategies available:
 14888                           ; Name         Instructions Cycles
 14889                           ; simple_byte           22    12 (average)
 14890                           ;	Chosen strategy is simple_byte
 14891  003942  E0DA               	bz	l6757
 14892  003944  0A01               	xorlw	1	; case 1
 14893  003946  E0DC               	bz	l6759
 14894  003948  0A03               	xorlw	3	; case 2
 14895  00394A  E0DF               	bz	l6761
 14896  00394C  0A01               	xorlw	1	; case 3
 14897  00394E  E0E2               	bz	l6763
 14898  003950  0A07               	xorlw	7	; case 4
 14899  003952  E0E5               	bz	l6765
 14900  003954  0A01               	xorlw	1	; case 5
 14901  003956  E0E8               	bz	l6767
 14902  003958  0A03               	xorlw	3	; case 6
 14903  00395A  E0E9               	bz	l6769
 14904  00395C  D7EB               	goto	l6771
 14905  00395E                     l917:
 14906                           
 14907                           ;ECAN.c: 1237: return (pt);
 14908  00395E  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 14909  003962  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 14910  003966  0012               	return	
 14911  003968                     __end_of__ECANPointBuffer:
 14912                           	opt stack 0
 14913                           tblptru	equ	0xFF8
 14914                           tblptrh	equ	0xFF7
 14915                           tblptrl	equ	0xFF6
 14916                           tablat	equ	0xFF5
 14917                           prodh	equ	0xFF4
 14918                           prodl	equ	0xFF3
 14919                           postinc0	equ	0xFEE
 14920                           wreg	equ	0xFE8
 14921                           indf1	equ	0xFE7
 14922                           fsr1h	equ	0xFE2
 14923                           fsr1l	equ	0xFE1
 14924                           indf2	equ	0xFDF
 14925                           postinc2	equ	0xFDE
 14926                           postdec2	equ	0xFDD
 14927                           plusw2	equ	0xFDB
 14928                           fsr2h	equ	0xFDA
 14929                           fsr2l	equ	0xFD9
 14930                           status	equ	0xFD8
 14931                           
 14932 ;; *************** function _vscp_check_pstorage *****************
 14933 ;; Defined at:
 14934 ;;		line 166 in file "../../vscp_firmware/common/vscp_firmware.c"
 14935 ;; Parameters:    Size  Location     Type
 14936 ;;		None
 14937 ;; Auto vars:     Size  Location     Type
 14938 ;;		None
 14939 ;; Return value:  Size  Location     Type
 14940 ;;                  1    wreg      unsigned char 
 14941 ;; Registers used:
 14942 ;;		wreg, status,2, status,0, cstack
 14943 ;; Tracked objects:
 14944 ;;		On entry : 0/0
 14945 ;;		On exit  : 0/0
 14946 ;;		Unchanged: 0/0
 14947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14948 ;;      Params:         0       0       0       0       0       0       0
 14949 ;;      Locals:         0       0       0       0       0       0       0
 14950 ;;      Temps:          0       0       0       0       0       0       0
 14951 ;;      Totals:         0       0       0       0       0       0       0
 14952 ;;Total ram usage:        0 bytes
 14953 ;; Hardware stack levels used:    1
 14954 ;; Hardware stack levels required when called:    4
 14955 ;; This function calls:
 14956 ;;		_vscp_writeNicknamePermanent
 14957 ;;		_vscp_getSegmentCRC
 14958 ;;		_vscp_setSegmentCRC
 14959 ;;		_vscp_setControlByte
 14960 ;; This function is called by:
 14961 ;;		_main
 14962 ;; This function uses a non-reentrant model
 14963 ;;
 14964                           
 14965                           	psect	text62
 14966  003CFC                     __ptext62:
 14967                           	opt stack 0
 14968  003CFC                     _vscp_check_pstorage:
 14969                           	opt stack 26
 14970                           
 14971                           ;vscp_firmware.c: 169: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 14972                           
 14973                           ;incstack = 0
 14974                           ;incstack = 0
 14975  003CFC  ECAC  F01F         	call	_vscp_getSegmentCRC	;wreg free
 14976  003D00  0BC0               	andlw	192
 14977  003D02  0A40               	xorlw	64
 14978  003D04  E102               	bnz	l7245
 14979                           
 14980                           ;vscp_firmware.c: 170: return !0;
 14981  003D06  0E01               	movlw	1
 14982  003D08  D00A               	goto	l1037
 14983  003D0A                     l7245:
 14984                           
 14985                           ;vscp_firmware.c: 171: }
 14986                           ;vscp_firmware.c: 174: vscp_writeNicknamePermanent(0xff);
 14987  003D0A  0EFF               	movlw	255
 14988  003D0C  EC6F  F01F         	call	_vscp_writeNicknamePermanent
 14989                           
 14990                           ;vscp_firmware.c: 177: vscp_setSegmentCRC(0x00);
 14991  003D10  0E00               	movlw	0
 14992  003D12  EC66  F01F         	call	_vscp_setSegmentCRC
 14993                           
 14994                           ;vscp_firmware.c: 181: vscp_setControlByte(0xA0);
 14995  003D16  0EA0               	movlw	160
 14996  003D18  EC5D  F01F         	call	_vscp_setControlByte
 14997                           
 14998                           ;vscp_firmware.c: 183: return 0;
 14999  003D1C  0E00               	movlw	0
 15000  003D1E                     l1037:
 15001  003D1E  0012               	return	
 15002  003D20                     __end_of_vscp_check_pstorage:
 15003                           	opt stack 0
 15004                           tblptru	equ	0xFF8
 15005                           tblptrh	equ	0xFF7
 15006                           tblptrl	equ	0xFF6
 15007                           tablat	equ	0xFF5
 15008                           prodh	equ	0xFF4
 15009                           prodl	equ	0xFF3
 15010                           postinc0	equ	0xFEE
 15011                           wreg	equ	0xFE8
 15012                           indf1	equ	0xFE7
 15013                           fsr1h	equ	0xFE2
 15014                           fsr1l	equ	0xFE1
 15015                           indf2	equ	0xFDF
 15016                           postinc2	equ	0xFDE
 15017                           postdec2	equ	0xFDD
 15018                           plusw2	equ	0xFDB
 15019                           fsr2h	equ	0xFDA
 15020                           fsr2l	equ	0xFD9
 15021                           status	equ	0xFD8
 15022                           
 15023 ;; *************** function _vscp_setControlByte *****************
 15024 ;; Defined at:
 15025 ;;		line 2361 in file "../main.c"
 15026 ;; Parameters:    Size  Location     Type
 15027 ;;  ctrl            1    wreg     unsigned char 
 15028 ;; Auto vars:     Size  Location     Type
 15029 ;;  ctrl            1   10[COMRAM] unsigned char 
 15030 ;; Return value:  Size  Location     Type
 15031 ;;		None               void
 15032 ;; Registers used:
 15033 ;;		wreg, status,2, cstack
 15034 ;; Tracked objects:
 15035 ;;		On entry : 0/0
 15036 ;;		On exit  : 0/0
 15037 ;;		Unchanged: 0/0
 15038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15039 ;;      Params:         0       0       0       0       0       0       0
 15040 ;;      Locals:         1       0       0       0       0       0       0
 15041 ;;      Temps:          0       0       0       0       0       0       0
 15042 ;;      Totals:         1       0       0       0       0       0       0
 15043 ;;Total ram usage:        1 bytes
 15044 ;; Hardware stack levels used:    1
 15045 ;; Hardware stack levels required when called:    3
 15046 ;; This function calls:
 15047 ;;		_writeEEPROM
 15048 ;; This function is called by:
 15049 ;;		_vscp_check_pstorage
 15050 ;; This function uses a non-reentrant model
 15051 ;;
 15052                           
 15053                           	psect	text63
 15054  003EBA                     __ptext63:
 15055                           	opt stack 0
 15056  003EBA                     _vscp_setControlByte:
 15057                           	opt stack 26
 15058                           
 15059                           ;incstack = 0
 15060                           ;incstack = 0
 15061                           ;vscp_setControlByte@ctrl stored from wreg
 15062  003EBA  CFE8 F00B          	movff	wreg,vscp_setControlByte@ctrl
 15063                           
 15064                           ;main.c: 2362: writeEEPROM(0x03, ctrl);
 15065  003EBE  6A09               	clrf	?_writeEEPROM+1,c
 15066  003EC0  0E03               	movlw	3
 15067  003EC2  6E08               	movwf	?_writeEEPROM,c
 15068  003EC4  C00B  F00A         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 15069  003EC8  EF59  F01E         	goto	_writeEEPROM	;wreg free
 15070  003ECC                     __end_of_vscp_setControlByte:
 15071                           	opt stack 0
 15072                           tblptru	equ	0xFF8
 15073                           tblptrh	equ	0xFF7
 15074                           tblptrl	equ	0xFF6
 15075                           tablat	equ	0xFF5
 15076                           prodh	equ	0xFF4
 15077                           prodl	equ	0xFF3
 15078                           postinc0	equ	0xFEE
 15079                           wreg	equ	0xFE8
 15080                           indf1	equ	0xFE7
 15081                           fsr1h	equ	0xFE2
 15082                           fsr1l	equ	0xFE1
 15083                           indf2	equ	0xFDF
 15084                           postinc2	equ	0xFDE
 15085                           postdec2	equ	0xFDD
 15086                           plusw2	equ	0xFDB
 15087                           fsr2h	equ	0xFDA
 15088                           fsr2l	equ	0xFD9
 15089                           status	equ	0xFD8
 15090                           
 15091 ;; *************** function _vscp_setSegmentCRC *****************
 15092 ;; Defined at:
 15093 ;;		line 2352 in file "../main.c"
 15094 ;; Parameters:    Size  Location     Type
 15095 ;;  crc             1    wreg     unsigned char 
 15096 ;; Auto vars:     Size  Location     Type
 15097 ;;  crc             1   10[COMRAM] unsigned char 
 15098 ;; Return value:  Size  Location     Type
 15099 ;;		None               void
 15100 ;; Registers used:
 15101 ;;		wreg, status,2, cstack
 15102 ;; Tracked objects:
 15103 ;;		On entry : 0/0
 15104 ;;		On exit  : 0/0
 15105 ;;		Unchanged: 0/0
 15106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15107 ;;      Params:         0       0       0       0       0       0       0
 15108 ;;      Locals:         1       0       0       0       0       0       0
 15109 ;;      Temps:          0       0       0       0       0       0       0
 15110 ;;      Totals:         1       0       0       0       0       0       0
 15111 ;;Total ram usage:        1 bytes
 15112 ;; Hardware stack levels used:    1
 15113 ;; Hardware stack levels required when called:    3
 15114 ;; This function calls:
 15115 ;;		_writeEEPROM
 15116 ;; This function is called by:
 15117 ;;		_vscp_check_pstorage
 15118 ;;		_vscp_handleProbeState
 15119 ;;		_vscp_handleHeartbeat
 15120 ;;		_vscp_handleSetNickname
 15121 ;; This function uses a non-reentrant model
 15122 ;;
 15123                           
 15124                           	psect	text64
 15125  003ECC                     __ptext64:
 15126                           	opt stack 0
 15127  003ECC                     _vscp_setSegmentCRC:
 15128                           	opt stack 25
 15129                           
 15130                           ;incstack = 0
 15131                           ;incstack = 0
 15132                           ;vscp_setSegmentCRC@crc stored from wreg
 15133  003ECC  CFE8 F00B          	movff	wreg,vscp_setSegmentCRC@crc
 15134                           
 15135                           ;main.c: 2353: writeEEPROM( 0x02, crc );
 15136  003ED0  6A09               	clrf	?_writeEEPROM+1,c
 15137  003ED2  0E02               	movlw	2
 15138  003ED4  6E08               	movwf	?_writeEEPROM,c
 15139  003ED6  C00B  F00A         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 15140  003EDA  EF59  F01E         	goto	_writeEEPROM	;wreg free
 15141  003EDE                     __end_of_vscp_setSegmentCRC:
 15142                           	opt stack 0
 15143                           tblptru	equ	0xFF8
 15144                           tblptrh	equ	0xFF7
 15145                           tblptrl	equ	0xFF6
 15146                           tablat	equ	0xFF5
 15147                           prodh	equ	0xFF4
 15148                           prodl	equ	0xFF3
 15149                           postinc0	equ	0xFEE
 15150                           wreg	equ	0xFE8
 15151                           indf1	equ	0xFE7
 15152                           fsr1h	equ	0xFE2
 15153                           fsr1l	equ	0xFE1
 15154                           indf2	equ	0xFDF
 15155                           postinc2	equ	0xFDE
 15156                           postdec2	equ	0xFDD
 15157                           plusw2	equ	0xFDB
 15158                           fsr2h	equ	0xFDA
 15159                           fsr2l	equ	0xFD9
 15160                           status	equ	0xFD8
 15161                           
 15162 ;; *************** function _vscp_getSegmentCRC *****************
 15163 ;; Defined at:
 15164 ;;		line 2343 in file "../main.c"
 15165 ;; Parameters:    Size  Location     Type
 15166 ;;		None
 15167 ;; Auto vars:     Size  Location     Type
 15168 ;;		None
 15169 ;; Return value:  Size  Location     Type
 15170 ;;                  1    wreg      unsigned char 
 15171 ;; Registers used:
 15172 ;;		wreg, status,2, cstack
 15173 ;; Tracked objects:
 15174 ;;		On entry : 0/0
 15175 ;;		On exit  : 0/0
 15176 ;;		Unchanged: 0/0
 15177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15178 ;;      Params:         0       0       0       0       0       0       0
 15179 ;;      Locals:         0       0       0       0       0       0       0
 15180 ;;      Temps:          0       0       0       0       0       0       0
 15181 ;;      Totals:         0       0       0       0       0       0       0
 15182 ;;Total ram usage:        0 bytes
 15183 ;; Hardware stack levels used:    1
 15184 ;; Hardware stack levels required when called:    3
 15185 ;; This function calls:
 15186 ;;		_readEEPROM
 15187 ;; This function is called by:
 15188 ;;		_vscp_check_pstorage
 15189 ;;		_vscp_handleHeartbeat
 15190 ;; This function uses a non-reentrant model
 15191 ;;
 15192                           
 15193                           	psect	text65
 15194  003F58                     __ptext65:
 15195                           	opt stack 0
 15196  003F58                     _vscp_getSegmentCRC:
 15197                           	opt stack 25
 15198                           
 15199                           ;main.c: 2344: return readEEPROM( 0x02 );
 15200                           
 15201                           ;incstack = 0
 15202                           ;incstack = 0
 15203  003F58  6A09               	clrf	?_readEEPROM+1,c
 15204  003F5A  0E02               	movlw	2
 15205  003F5C  6E08               	movwf	?_readEEPROM,c
 15206  003F5E  EF81  F01F         	goto	_readEEPROM	;wreg free
 15207  003F62                     __end_of_vscp_getSegmentCRC:
 15208                           	opt stack 0
 15209                           tblptru	equ	0xFF8
 15210                           tblptrh	equ	0xFF7
 15211                           tblptrl	equ	0xFF6
 15212                           tablat	equ	0xFF5
 15213                           prodh	equ	0xFF4
 15214                           prodl	equ	0xFF3
 15215                           postinc0	equ	0xFEE
 15216                           wreg	equ	0xFE8
 15217                           indf1	equ	0xFE7
 15218                           fsr1h	equ	0xFE2
 15219                           fsr1l	equ	0xFE1
 15220                           indf2	equ	0xFDF
 15221                           postinc2	equ	0xFDE
 15222                           postdec2	equ	0xFDD
 15223                           plusw2	equ	0xFDB
 15224                           fsr2h	equ	0xFDA
 15225                           fsr2l	equ	0xFD9
 15226                           status	equ	0xFD8
 15227                           
 15228 ;; *************** function _vscp_writeNicknamePermanent *****************
 15229 ;; Defined at:
 15230 ;;		line 858 in file "../main.c"
 15231 ;; Parameters:    Size  Location     Type
 15232 ;;  nickname        1    wreg     unsigned char 
 15233 ;; Auto vars:     Size  Location     Type
 15234 ;;  nickname        1   10[COMRAM] unsigned char 
 15235 ;; Return value:  Size  Location     Type
 15236 ;;		None               void
 15237 ;; Registers used:
 15238 ;;		wreg, status,2, cstack
 15239 ;; Tracked objects:
 15240 ;;		On entry : 0/0
 15241 ;;		On exit  : 0/0
 15242 ;;		Unchanged: 0/0
 15243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15244 ;;      Params:         0       0       0       0       0       0       0
 15245 ;;      Locals:         1       0       0       0       0       0       0
 15246 ;;      Temps:          0       0       0       0       0       0       0
 15247 ;;      Totals:         1       0       0       0       0       0       0
 15248 ;;Total ram usage:        1 bytes
 15249 ;; Hardware stack levels used:    1
 15250 ;; Hardware stack levels required when called:    3
 15251 ;; This function calls:
 15252 ;;		_writeEEPROM
 15253 ;; This function is called by:
 15254 ;;		_vscp_check_pstorage
 15255 ;;		_vscp_handleProbeState
 15256 ;;		_vscp_handleHeartbeat
 15257 ;;		_vscp_handleSetNickname
 15258 ;;		_vscp_handleDropNickname
 15259 ;; This function uses a non-reentrant model
 15260 ;;
 15261                           
 15262                           	psect	text66
 15263  003EDE                     __ptext66:
 15264                           	opt stack 0
 15265  003EDE                     _vscp_writeNicknamePermanent:
 15266                           	opt stack 25
 15267                           
 15268                           ;incstack = 0
 15269                           ;incstack = 0
 15270                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 15271  003EDE  CFE8 F00B          	movff	wreg,vscp_writeNicknamePermanent@nickname
 15272                           
 15273                           ;main.c: 859: writeEEPROM( 0x01, nickname );
 15274  003EE2  6A09               	clrf	?_writeEEPROM+1,c
 15275  003EE4  0E01               	movlw	1
 15276  003EE6  6E08               	movwf	?_writeEEPROM,c
 15277  003EE8  C00B  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 15278  003EEC  EF59  F01E         	goto	_writeEEPROM	;wreg free
 15279  003EF0                     __end_of_vscp_writeNicknamePermanent:
 15280                           	opt stack 0
 15281                           tblptru	equ	0xFF8
 15282                           tblptrh	equ	0xFF7
 15283                           tblptrl	equ	0xFF6
 15284                           tablat	equ	0xFF5
 15285                           prodh	equ	0xFF4
 15286                           prodl	equ	0xFF3
 15287                           postinc0	equ	0xFEE
 15288                           wreg	equ	0xFE8
 15289                           indf1	equ	0xFE7
 15290                           fsr1h	equ	0xFE2
 15291                           fsr1l	equ	0xFE1
 15292                           indf2	equ	0xFDF
 15293                           postinc2	equ	0xFDE
 15294                           postdec2	equ	0xFDD
 15295                           plusw2	equ	0xFDB
 15296                           fsr2h	equ	0xFDA
 15297                           fsr2l	equ	0xFD9
 15298                           status	equ	0xFD8
 15299                           
 15300 ;; *************** function _writeEEPROM *****************
 15301 ;; Defined at:
 15302 ;;		line 23 in file "../../vscp_firmware/pic/common/eeprom.c"
 15303 ;; Parameters:    Size  Location     Type
 15304 ;;  address         2    7[COMRAM] unsigned short 
 15305 ;;  data            1    9[COMRAM] unsigned char 
 15306 ;; Auto vars:     Size  Location     Type
 15307 ;;		None
 15308 ;; Return value:  Size  Location     Type
 15309 ;;		None               void
 15310 ;; Registers used:
 15311 ;;		wreg, status,2
 15312 ;; Tracked objects:
 15313 ;;		On entry : 0/0
 15314 ;;		On exit  : 0/0
 15315 ;;		Unchanged: 0/0
 15316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15317 ;;      Params:         3       0       0       0       0       0       0
 15318 ;;      Locals:         0       0       0       0       0       0       0
 15319 ;;      Temps:          0       0       0       0       0       0       0
 15320 ;;      Totals:         3       0       0       0       0       0       0
 15321 ;;Total ram usage:        3 bytes
 15322 ;; Hardware stack levels used:    1
 15323 ;; Hardware stack levels required when called:    2
 15324 ;; This function calls:
 15325 ;;		Nothing
 15326 ;; This function is called by:
 15327 ;;		_main
 15328 ;;		_init_app_eeprom
 15329 ;;		_vscp_setGUID
 15330 ;;		_vscp_setManufacturerId
 15331 ;;		_vscp_writeNicknamePermanent
 15332 ;;		_vscp_writeAppReg
 15333 ;;		_doActionDisable
 15334 ;;		_vscp_setUserID
 15335 ;;		_vscp_setSegmentCRC
 15336 ;;		_vscp_setControlByte
 15337 ;;		_vscp_goBootloaderMode
 15338 ;; This function uses a non-reentrant model
 15339 ;;
 15340                           
 15341                           	psect	text67
 15342  003CB2                     __ptext67:
 15343                           	opt stack 0
 15344  003CB2                     _writeEEPROM:
 15345                           	opt stack 26
 15346                           
 15347                           ;eeprom.c: 29: EEADR = address & 0xff;
 15348                           
 15349                           ;incstack = 0
 15350                           ;incstack = 0
 15351  003CB2  C008  FFA9         	movff	writeEEPROM@address,4009	;volatile
 15352                           
 15353                           ;eeprom.c: 30: EEDATA = data;
 15354  003CB6  C00A  FFA8         	movff	writeEEPROM@data,4008	;volatile
 15355                           
 15356                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 15357  003CBA  9EA6               	bcf	4006,7,c	;volatile
 15358                           
 15359                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 15360  003CBC  9CA6               	bcf	4006,6,c	;volatile
 15361                           
 15362                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 15363  003CBE  84A6               	bsf	4006,2,c	;volatile
 15364                           
 15365                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 15366  003CC0  9EF2               	bcf	intcon,7,c	;volatile
 15367                           
 15368                           ;eeprom.c: 37: EECON2 = 0x55;
 15369  003CC2  0E55               	movlw	85
 15370  003CC4  6EA7               	movwf	4007,c	;volatile
 15371                           
 15372                           ;eeprom.c: 38: EECON2 = 0xaa;
 15373  003CC6  0EAA               	movlw	170
 15374  003CC8  6EA7               	movwf	4007,c	;volatile
 15375                           
 15376                           ;eeprom.c: 39: EECON1bits.WR = 1;
 15377  003CCA  82A6               	bsf	4006,1,c	;volatile
 15378                           
 15379                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 15380  003CCC  8EF2               	bsf	intcon,7,c	;volatile
 15381  003CCE                     l1295:
 15382  003CCE  A8A1               	btfss	4001,4,c	;volatile
 15383  003CD0  D7FE               	goto	l1295
 15384                           
 15385                           ;eeprom.c: 47: PIR2bits.EEIF = 0;
 15386  003CD2  98A1               	bcf	4001,4,c	;volatile
 15387                           
 15388                           ;eeprom.c: 49: EECON1bits.WREN = 0;
 15389  003CD4  94A6               	bcf	4006,2,c	;volatile
 15390  003CD6  0012               	return	
 15391  003CD8                     __end_of_writeEEPROM:
 15392                           	opt stack 0
 15393                           tblptru	equ	0xFF8
 15394                           tblptrh	equ	0xFF7
 15395                           tblptrl	equ	0xFF6
 15396                           tablat	equ	0xFF5
 15397                           prodh	equ	0xFF4
 15398                           prodl	equ	0xFF3
 15399                           intcon	equ	0xFF2
 15400                           postinc0	equ	0xFEE
 15401                           wreg	equ	0xFE8
 15402                           indf1	equ	0xFE7
 15403                           fsr1h	equ	0xFE2
 15404                           fsr1l	equ	0xFE1
 15405                           indf2	equ	0xFDF
 15406                           postinc2	equ	0xFDE
 15407                           postdec2	equ	0xFDD
 15408                           plusw2	equ	0xFDB
 15409                           fsr2h	equ	0xFDA
 15410                           fsr2l	equ	0xFD9
 15411                           status	equ	0xFD8
 15412                           
 15413 ;; *************** function _init *****************
 15414 ;; Defined at:
 15415 ;;		line 320 in file "../main.c"
 15416 ;; Parameters:    Size  Location     Type
 15417 ;;		None
 15418 ;; Auto vars:     Size  Location     Type
 15419 ;;		None
 15420 ;; Return value:  Size  Location     Type
 15421 ;;		None               void
 15422 ;; Registers used:
 15423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15424 ;; Tracked objects:
 15425 ;;		On entry : 0/0
 15426 ;;		On exit  : 0/0
 15427 ;;		Unchanged: 0/0
 15428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15429 ;;      Params:         0       0       0       0       0       0       0
 15430 ;;      Locals:         0       0       0       0       0       0       0
 15431 ;;      Temps:          0       0       0       0       0       0       0
 15432 ;;      Totals:         0       0       0       0       0       0       0
 15433 ;;Total ram usage:        0 bytes
 15434 ;; Hardware stack levels used:    1
 15435 ;; Hardware stack levels required when called:    4
 15436 ;; This function calls:
 15437 ;;		_WriteTimer0
 15438 ;;		_init_app_ram
 15439 ;;		_OpenTimer0
 15440 ;;		_ECANInitialize
 15441 ;; This function is called by:
 15442 ;;		_main
 15443 ;; This function uses a non-reentrant model
 15444 ;;
 15445                           
 15446                           	psect	text68
 15447  003B50                     __ptext68:
 15448                           	opt stack 0
 15449  003B50                     _init:
 15450                           	opt stack 26
 15451                           
 15452                           ;main.c: 325: init_app_ram();
 15453                           
 15454                           ;incstack = 0
 15455                           ;incstack = 0
 15456  003B50  EC93  F018         	call	_init_app_ram	;wreg free
 15457                           
 15458                           ;main.c: 336: TRISA = 0x00;
 15459  003B54  6A92               	clrf	3986,c	;volatile
 15460                           
 15461                           ;main.c: 337: PORTA = 0x00;
 15462  003B56  6A80               	clrf	3968,c	;volatile
 15463                           
 15464                           ;main.c: 349: TRISB = 0b00001000;
 15465  003B58  0E08               	movlw	8
 15466  003B5A  6E93               	movwf	3987,c	;volatile
 15467                           
 15468                           ;main.c: 350: PORTB = 0x00;
 15469  003B5C  6A81               	clrf	3969,c	;volatile
 15470                           
 15471                           ;main.c: 360: TRISC = 0b00000001;
 15472  003B5E  0E01               	movlw	1
 15473  003B60  6E94               	movwf	3988,c	;volatile
 15474                           
 15475                           ;main.c: 361: PORTC = 0x00;
 15476  003B62  6A82               	clrf	3970,c	;volatile
 15477                           
 15478                           ;main.c: 387: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 15479  003B64  0E92               	movlw	146
 15480  003B66  ECF3  F01E         	call	_OpenTimer0
 15481                           
 15482                           ;main.c: 388: WriteTimer0( 0xfb1d );
 15483  003B6A  0EFB               	movlw	251
 15484  003B6C  6E09               	movwf	?_WriteTimer0+1,c
 15485  003B6E  0E1D               	movlw	29
 15486  003B70  6E08               	movwf	?_WriteTimer0,c
 15487  003B72  EC78  F01F         	call	_WriteTimer0	;wreg free
 15488                           
 15489                           ;main.c: 391: LATBbits.LATB4 = 0;
 15490  003B76  988A               	bcf	3978,4,c	;volatile
 15491                           
 15492                           ;main.c: 392: LATBbits.LATB1 = 0;
 15493  003B78  928A               	bcf	3978,1,c	;volatile
 15494                           
 15495                           ;main.c: 393: LATBbits.LATB0 = 0;
 15496  003B7A  908A               	bcf	3978,0,c	;volatile
 15497                           
 15498                           ;main.c: 394: LATCbits.LATC7 = 0;
 15499  003B7C  9E8B               	bcf	3979,7,c	;volatile
 15500                           
 15501                           ;main.c: 395: LATCbits.LATC6 = 0;
 15502  003B7E  9C8B               	bcf	3979,6,c	;volatile
 15503                           
 15504                           ;main.c: 396: LATCbits.LATC5 = 0;
 15505  003B80  9A8B               	bcf	3979,5,c	;volatile
 15506                           
 15507                           ;main.c: 397: LATCbits.LATC4 = 0;
 15508  003B82  988B               	bcf	3979,4,c	;volatile
 15509                           
 15510                           ;main.c: 400: ECANInitialize();
 15511  003B84  ECF2  F01B         	call	_ECANInitialize	;wreg free
 15512                           
 15513                           ;main.c: 421: INTCONbits.PEIE = 1;
 15514  003B88  8CF2               	bsf	intcon,6,c	;volatile
 15515                           
 15516                           ;main.c: 424: INTCONbits.GIE = 1;
 15517  003B8A  8EF2               	bsf	intcon,7,c	;volatile
 15518  003B8C  0012               	return	
 15519  003B8E                     __end_of_init:
 15520                           	opt stack 0
 15521                           tblptru	equ	0xFF8
 15522                           tblptrh	equ	0xFF7
 15523                           tblptrl	equ	0xFF6
 15524                           tablat	equ	0xFF5
 15525                           prodh	equ	0xFF4
 15526                           prodl	equ	0xFF3
 15527                           intcon	equ	0xFF2
 15528                           postinc0	equ	0xFEE
 15529                           wreg	equ	0xFE8
 15530                           indf1	equ	0xFE7
 15531                           fsr1h	equ	0xFE2
 15532                           fsr1l	equ	0xFE1
 15533                           indf2	equ	0xFDF
 15534                           postinc2	equ	0xFDE
 15535                           postdec2	equ	0xFDD
 15536                           plusw2	equ	0xFDB
 15537                           fsr2h	equ	0xFDA
 15538                           fsr2l	equ	0xFD9
 15539                           status	equ	0xFD8
 15540                           
 15541 ;; *************** function _ECANInitialize *****************
 15542 ;; Defined at:
 15543 ;;		line 168 in file "../ECAN.c"
 15544 ;; Parameters:    Size  Location     Type
 15545 ;;		None
 15546 ;; Auto vars:     Size  Location     Type
 15547 ;;		None
 15548 ;; Return value:  Size  Location     Type
 15549 ;;		None               void
 15550 ;; Registers used:
 15551 ;;		wreg, status,2, status,0, cstack
 15552 ;; Tracked objects:
 15553 ;;		On entry : 0/0
 15554 ;;		On exit  : 0/0
 15555 ;;		Unchanged: 0/0
 15556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15557 ;;      Params:         0       0       0       0       0       0       0
 15558 ;;      Locals:         0       0       0       0       0       0       0
 15559 ;;      Temps:          0       0       0       0       0       0       0
 15560 ;;      Totals:         0       0       0       0       0       0       0
 15561 ;;Total ram usage:        0 bytes
 15562 ;; Hardware stack levels used:    1
 15563 ;; Hardware stack levels required when called:    3
 15564 ;; This function calls:
 15565 ;;		_ECANSetOperationMode
 15566 ;; This function is called by:
 15567 ;;		_init
 15568 ;; This function uses a non-reentrant model
 15569 ;;
 15570                           
 15571                           	psect	text69
 15572  0037E4                     __ptext69:
 15573                           	opt stack 0
 15574  0037E4                     _ECANInitialize:
 15575                           	opt stack 26
 15576                           
 15577                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 15578                           
 15579                           ;incstack = 0
 15580                           ;incstack = 0
 15581  0037E4  0E80               	movlw	128
 15582  0037E6  EC33  F01F         	call	_ECANSetOperationMode
 15583                           
 15584                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 15585  0037EA  0E09               	movlw	9
 15586  0037EC  6E70               	movwf	3952,c	;volatile
 15587                           
 15588                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 15589  0037EE  0EFC               	movlw	252
 15590  0037F0  6E71               	movwf	3953,c	;volatile
 15591                           
 15592                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 15593                           ;ECAN.c: 181: (0 << 6) |
 15594                           ;ECAN.c: 182: (2-1);
 15595  0037F2  0E01               	movlw	1
 15596  0037F4  6E72               	movwf	3954,c	;volatile
 15597                           
 15598                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 15599  0037F6  0E20               	movlw	32
 15600  0037F8  6E73               	movwf	3955,c	;volatile
 15601                           
 15602                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 15603  0037FA  8E77               	bsf	3959,7,c	;volatile
 15604                           
 15605                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 15606  0037FC  9C77               	bcf	3959,6,c	;volatile
 15607                           
 15608                           ;ECAN.c: 205: RXB0CON = 0;
 15609  0037FE  6A60               	clrf	3936,c	;volatile
 15610                           
 15611                           ;ECAN.c: 211: RXB1CON = 0;
 15612  003800  010F               	movlb	15	; () banked
 15613  003802  6B50               	clrf	80,b	;volatile
 15614                           
 15615                           ; BSR set to: 15
 15616                           ;ECAN.c: 221: B0CON = 0;
 15617  003804  010E               	movlb	14	; () banked
 15618  003806  6B20               	clrf	32,b	;volatile
 15619                           
 15620                           ; BSR set to: 14
 15621                           ;ECAN.c: 231: B1CON = 0;
 15622  003808  6B30               	clrf	48,b	;volatile
 15623                           
 15624                           ; BSR set to: 14
 15625                           ;ECAN.c: 241: B2CON = 0;
 15626  00380A  6B40               	clrf	64,b	;volatile
 15627                           
 15628                           ; BSR set to: 14
 15629                           ;ECAN.c: 254: B3CON = 0 << 2;
 15630  00380C  6B50               	clrf	80,b	;volatile
 15631                           
 15632                           ; BSR set to: 14
 15633                           ;ECAN.c: 264: B4CON = 0 << 2;
 15634  00380E  6B60               	clrf	96,b	;volatile
 15635                           
 15636                           ; BSR set to: 14
 15637                           ;ECAN.c: 274: B5CON = 0 << 2;
 15638  003810  6B70               	clrf	112,b	;volatile
 15639                           
 15640                           ; BSR set to: 14
 15641                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 15642  003812  0EE0               	movlw	224
 15643  003814  010D               	movlb	13	; () banked
 15644  003816  6FF8               	movwf	248,b	;volatile
 15645                           
 15646                           ; BSR set to: 13
 15647                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 15648  003818  010F               	movlb	15	; () banked
 15649  00381A  6B00               	clrf	0,b	;volatile
 15650                           
 15651                           ; BSR set to: 15
 15652  00381C  0E08               	movlw	8
 15653  00381E  6F01               	movwf	1,b	;volatile
 15654                           
 15655                           ; BSR set to: 15
 15656  003820  6B02               	clrf	2,b	;volatile
 15657                           
 15658                           ; BSR set to: 15
 15659  003822  6B03               	clrf	3,b	;volatile
 15660                           
 15661                           ; BSR set to: 15
 15662                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 15663  003824  6B04               	clrf	4,b	;volatile
 15664                           
 15665                           ; BSR set to: 15
 15666  003826  0EE8               	movlw	232
 15667  003828  6F05               	movwf	5,b	;volatile
 15668                           
 15669                           ; BSR set to: 15
 15670  00382A  0E1A               	movlw	26
 15671  00382C  6F06               	movwf	6,b	;volatile
 15672                           
 15673                           ; BSR set to: 15
 15674  00382E  6B07               	clrf	7,b	;volatile
 15675                           
 15676                           ; BSR set to: 15
 15677                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 15678  003830  0E03               	movlw	3
 15679  003832  010D               	movlb	13	; () banked
 15680  003834  6FD4               	movwf	212,b	;volatile
 15681                           
 15682                           ; BSR set to: 13
 15683                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 15684  003836  6BD5               	clrf	213,b	;volatile
 15685                           
 15686                           ; BSR set to: 13
 15687                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 15688  003838  6BE0               	clrf	224,b	;volatile
 15689                           
 15690                           ; BSR set to: 13
 15691                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 15692  00383A  0E11               	movlw	17
 15693  00383C  6FE1               	movwf	225,b	;volatile
 15694                           
 15695                           ; BSR set to: 13
 15696                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 15697  00383E  6FE2               	movwf	226,b	;volatile
 15698                           
 15699                           ; BSR set to: 13
 15700                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 15701  003840  6BE3               	clrf	227,b	;volatile
 15702                           
 15703                           ; BSR set to: 13
 15704                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 15705  003842  6BE4               	clrf	228,b	;volatile
 15706                           
 15707                           ; BSR set to: 13
 15708                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 15709  003844  6BE5               	clrf	229,b	;volatile
 15710                           
 15711                           ; BSR set to: 13
 15712                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 15713  003846  6BE6               	clrf	230,b	;volatile
 15714                           
 15715                           ; BSR set to: 13
 15716                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 15717  003848  6BE7               	clrf	231,b	;volatile
 15718                           
 15719                           ; BSR set to: 13
 15720                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 15721  00384A  0E54               	movlw	84
 15722  00384C  6FF0               	movwf	240,b	;volatile
 15723                           
 15724                           ; BSR set to: 13
 15725                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 15726  00384E  0E05               	movlw	5
 15727  003850  6FF1               	movwf	241,b	;volatile
 15728                           
 15729                           ; BSR set to: 13
 15730                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15731  003852  6BF2               	clrf	242,b	;volatile
 15732                           
 15733                           ; BSR set to: 13
 15734                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15735  003854  6BF2               	clrf	242,b	;volatile
 15736                           
 15737                           ; BSR set to: 13
 15738                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 15739  003856  0E0F               	movlw	15
 15740  003858  010F               	movlb	15	; () banked
 15741  00385A  6F18               	movwf	24,b	;volatile
 15742                           
 15743                           ; BSR set to: 15
 15744  00385C  0EE0               	movlw	224
 15745  00385E  6F19               	movwf	25,b	;volatile
 15746                           
 15747                           ; BSR set to: 15
 15748  003860  6B1A               	clrf	26,b	;volatile
 15749                           
 15750                           ; BSR set to: 15
 15751  003862  6B1B               	clrf	27,b	;volatile
 15752                           
 15753                           ; BSR set to: 15
 15754                           ;ECAN.c: 482: RXM0EXIDM = 1;
 15755  003864  8719               	bsf	25,3,b	;volatile
 15756                           
 15757                           ; BSR set to: 15
 15758                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 15759  003866  0E0F               	movlw	15
 15760  003868  6F1C               	movwf	28,b	;volatile
 15761                           
 15762                           ; BSR set to: 15
 15763  00386A  0EE0               	movlw	224
 15764  00386C  6F1D               	movwf	29,b	;volatile
 15765                           
 15766                           ; BSR set to: 15
 15767  00386E  691E               	setf	30,b	;volatile
 15768                           
 15769                           ; BSR set to: 15
 15770  003870  6B1F               	clrf	31,b	;volatile
 15771                           
 15772                           ; BSR set to: 15
 15773                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 15774  003872  871D               	bsf	29,3,b	;volatile
 15775                           
 15776                           ; BSR set to: 15
 15777                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 15778  003874  0E00               	movlw	0
 15779  003876  EF33  F01F         	goto	_ECANSetOperationMode
 15780  00387A                     __end_of_ECANInitialize:
 15781                           	opt stack 0
 15782                           tblptru	equ	0xFF8
 15783                           tblptrh	equ	0xFF7
 15784                           tblptrl	equ	0xFF6
 15785                           tablat	equ	0xFF5
 15786                           prodh	equ	0xFF4
 15787                           prodl	equ	0xFF3
 15788                           intcon	equ	0xFF2
 15789                           postinc0	equ	0xFEE
 15790                           wreg	equ	0xFE8
 15791                           indf1	equ	0xFE7
 15792                           fsr1h	equ	0xFE2
 15793                           fsr1l	equ	0xFE1
 15794                           indf2	equ	0xFDF
 15795                           postinc2	equ	0xFDE
 15796                           postdec2	equ	0xFDD
 15797                           plusw2	equ	0xFDB
 15798                           fsr2h	equ	0xFDA
 15799                           fsr2l	equ	0xFD9
 15800                           status	equ	0xFD8
 15801                           
 15802 ;; *************** function _ECANSetOperationMode *****************
 15803 ;; Defined at:
 15804 ;;		line 1012 in file "../ECAN.c"
 15805 ;; Parameters:    Size  Location     Type
 15806 ;;  mode            1    wreg     enum E16337
 15807 ;; Auto vars:     Size  Location     Type
 15808 ;;  mode            1    7[COMRAM] enum E16337
 15809 ;; Return value:  Size  Location     Type
 15810 ;;		None               void
 15811 ;; Registers used:
 15812 ;;		wreg, status,2, status,0
 15813 ;; Tracked objects:
 15814 ;;		On entry : 0/0
 15815 ;;		On exit  : 0/0
 15816 ;;		Unchanged: 0/0
 15817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15818 ;;      Params:         0       0       0       0       0       0       0
 15819 ;;      Locals:         1       0       0       0       0       0       0
 15820 ;;      Temps:          0       0       0       0       0       0       0
 15821 ;;      Totals:         1       0       0       0       0       0       0
 15822 ;;Total ram usage:        1 bytes
 15823 ;; Hardware stack levels used:    1
 15824 ;; Hardware stack levels required when called:    2
 15825 ;; This function calls:
 15826 ;;		Nothing
 15827 ;; This function is called by:
 15828 ;;		_calculateSetFilterMask
 15829 ;;		_ECANInitialize
 15830 ;; This function uses a non-reentrant model
 15831 ;;
 15832                           
 15833                           	psect	text70
 15834  003E66                     __ptext70:
 15835                           	opt stack 0
 15836  003E66                     _ECANSetOperationMode:
 15837                           	opt stack 24
 15838                           
 15839                           ;incstack = 0
 15840                           ;incstack = 0
 15841                           ;ECANSetOperationMode@mode stored from wreg
 15842  003E66  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 15843                           
 15844                           ;ECAN.c: 1013: CANCON &= 0x1F;
 15845  003E6A  0E1F               	movlw	31
 15846  003E6C  166F               	andwf	3951,f,c	;volatile
 15847                           
 15848                           ;ECAN.c: 1014: CANCON |= mode;
 15849  003E6E  5008               	movf	ECANSetOperationMode@mode,w,c
 15850  003E70  126F               	iorwf	3951,f,c	;volatile
 15851  003E72                     l6727:
 15852  003E72  506F               	movf	3951,w,c	;volatile
 15853  003E74  0BE0               	andlw	224
 15854  003E76  1808               	xorwf	ECANSetOperationMode@mode,w,c
 15855  003E78  B4D8               	btfsc	status,2,c
 15856  003E7A  0012               	return	
 15857  003E7C  D7FA               	goto	l6727
 15858  003E7E                     __end_of_ECANSetOperationMode:
 15859                           	opt stack 0
 15860                           tblptru	equ	0xFF8
 15861                           tblptrh	equ	0xFF7
 15862                           tblptrl	equ	0xFF6
 15863                           tablat	equ	0xFF5
 15864                           prodh	equ	0xFF4
 15865                           prodl	equ	0xFF3
 15866                           intcon	equ	0xFF2
 15867                           postinc0	equ	0xFEE
 15868                           wreg	equ	0xFE8
 15869                           indf1	equ	0xFE7
 15870                           fsr1h	equ	0xFE2
 15871                           fsr1l	equ	0xFE1
 15872                           indf2	equ	0xFDF
 15873                           postinc2	equ	0xFDE
 15874                           postdec2	equ	0xFDD
 15875                           plusw2	equ	0xFDB
 15876                           fsr2h	equ	0xFDA
 15877                           fsr2l	equ	0xFD9
 15878                           status	equ	0xFD8
 15879                           
 15880 ;; *************** function _OpenTimer0 *****************
 15881 ;; Defined at:
 15882 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 15883 ;; Parameters:    Size  Location     Type
 15884 ;;  config          1    wreg     unsigned char 
 15885 ;; Auto vars:     Size  Location     Type
 15886 ;;  config          1    7[COMRAM] unsigned char 
 15887 ;; Return value:  Size  Location     Type
 15888 ;;		None               void
 15889 ;; Registers used:
 15890 ;;		wreg, status,2, status,0
 15891 ;; Tracked objects:
 15892 ;;		On entry : 0/0
 15893 ;;		On exit  : 0/0
 15894 ;;		Unchanged: 0/0
 15895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15896 ;;      Params:         0       0       0       0       0       0       0
 15897 ;;      Locals:         1       0       0       0       0       0       0
 15898 ;;      Temps:          0       0       0       0       0       0       0
 15899 ;;      Totals:         1       0       0       0       0       0       0
 15900 ;;Total ram usage:        1 bytes
 15901 ;; Hardware stack levels used:    1
 15902 ;; Hardware stack levels required when called:    2
 15903 ;; This function calls:
 15904 ;;		Nothing
 15905 ;; This function is called by:
 15906 ;;		_init
 15907 ;; This function uses a non-reentrant model
 15908 ;;
 15909                           
 15910                           	psect	text71
 15911  003DE6                     __ptext71:
 15912                           	opt stack 0
 15913  003DE6                     _OpenTimer0:
 15914                           	opt stack 27
 15915                           
 15916                           ;incstack = 0
 15917                           ;incstack = 0
 15918                           ;OpenTimer0@config stored from wreg
 15919  003DE6  CFE8 F008          	movff	wreg,OpenTimer0@config
 15920  003DEA  5008               	movf	OpenTimer0@config,w,c
 15921  003DEC  0B7F               	andlw	127
 15922  003DEE  6ED5               	movwf	4053,c	;volatile
 15923  003DF0  6AD7               	clrf	4055,c	;volatile
 15924  003DF2  6AD6               	clrf	4054,c	;volatile
 15925  003DF4  94F2               	bcf	intcon,2,c	;volatile
 15926  003DF6  AE08               	btfss	OpenTimer0@config,7,c
 15927  003DF8  D002               	goto	l1314
 15928  003DFA  8AF2               	bsf	intcon,5,c	;volatile
 15929  003DFC  D001               	goto	l1315
 15930  003DFE                     l1314:
 15931  003DFE  9AF2               	bcf	intcon,5,c	;volatile
 15932  003E00                     l1315:
 15933  003E00  8ED5               	bsf	4053,7,c	;volatile
 15934  003E02  0012               	return	
 15935  003E04                     __end_of_OpenTimer0:
 15936                           	opt stack 0
 15937                           tblptru	equ	0xFF8
 15938                           tblptrh	equ	0xFF7
 15939                           tblptrl	equ	0xFF6
 15940                           tablat	equ	0xFF5
 15941                           prodh	equ	0xFF4
 15942                           prodl	equ	0xFF3
 15943                           intcon	equ	0xFF2
 15944                           postinc0	equ	0xFEE
 15945                           wreg	equ	0xFE8
 15946                           indf1	equ	0xFE7
 15947                           fsr1h	equ	0xFE2
 15948                           fsr1l	equ	0xFE1
 15949                           indf2	equ	0xFDF
 15950                           postinc2	equ	0xFDE
 15951                           postdec2	equ	0xFDD
 15952                           plusw2	equ	0xFDB
 15953                           fsr2h	equ	0xFDA
 15954                           fsr2l	equ	0xFD9
 15955                           status	equ	0xFD8
 15956                           
 15957 ;; *************** function _init_app_ram *****************
 15958 ;; Defined at:
 15959 ;;		line 434 in file "../main.c"
 15960 ;; Parameters:    Size  Location     Type
 15961 ;;		None
 15962 ;; Auto vars:     Size  Location     Type
 15963 ;;  i               1   12[COMRAM] unsigned char 
 15964 ;; Return value:  Size  Location     Type
 15965 ;;		None               void
 15966 ;; Registers used:
 15967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15968 ;; Tracked objects:
 15969 ;;		On entry : 0/0
 15970 ;;		On exit  : 0/0
 15971 ;;		Unchanged: 0/0
 15972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15973 ;;      Params:         0       0       0       0       0       0       0
 15974 ;;      Locals:         1       0       0       0       0       0       0
 15975 ;;      Temps:          2       0       0       0       0       0       0
 15976 ;;      Totals:         3       0       0       0       0       0       0
 15977 ;;Total ram usage:        3 bytes
 15978 ;; Hardware stack levels used:    1
 15979 ;; Hardware stack levels required when called:    3
 15980 ;; This function calls:
 15981 ;;		_readEEPROM
 15982 ;; This function is called by:
 15983 ;;		_main
 15984 ;;		_init
 15985 ;;		_vscp_restoreDefaults
 15986 ;; This function uses a non-reentrant model
 15987 ;;
 15988                           
 15989                           	psect	text72
 15990  003126                     __ptext72:
 15991                           	opt stack 0
 15992  003126                     _init_app_ram:
 15993                           	opt stack 24
 15994                           
 15995                           ;main.c: 435: uint8_t i;
 15996                           ;main.c: 437: measurement_clock = 0;
 15997                           
 15998                           ;incstack = 0
 15999                           ;incstack = 0
 16000  003126  0100               	movlb	0	; () banked
 16001  003128  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
 16002  00312A  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 16003  00312C  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 16004  00312E  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 16005                           
 16006                           ;main.c: 439: seconds = 0;
 16007  003130  6B8B               	clrf	_seconds& (0+255),b
 16008                           
 16009                           ;main.c: 440: minutes = 0;
 16010  003132  6B89               	clrf	_minutes& (0+255),b
 16011                           
 16012                           ;main.c: 441: hours = 0;
 16013  003134  6B88               	clrf	_hours& (0+255),b
 16014                           
 16015                           ;main.c: 443: relay_pulse_flags = 0;
 16016  003136  6B8A               	clrf	_relay_pulse_flags& (0+255),b
 16017                           
 16018                           ;main.c: 446: for ( i = 0; i < 8; i++ ) {
 16019  003138  6A0D               	clrf	init_app_ram@i,c
 16020  00313A                     l7257:
 16021                           
 16022                           ; BSR set to: 0
 16023                           ;main.c: 447: relay_pulse_timer[ i ] = 0;
 16024  00313A  500D               	movf	init_app_ram@i,w,c
 16025  00313C  0D02               	mullw	2
 16026  00313E  50F3               	movf	prodl,w,c
 16027  003140  0F70               	addlw	low _relay_pulse_timer
 16028  003142  6ED9               	movwf	fsr2l,c
 16029  003144  6ADA               	clrf	fsr2h,c
 16030  003146  6ADE               	clrf	postinc2,c
 16031  003148  6ADD               	clrf	postdec2,c
 16032                           
 16033                           ;main.c: 448: relay_protection_timer[ i ] = 0;
 16034  00314A  500D               	movf	init_app_ram@i,w,c
 16035  00314C  0D02               	mullw	2
 16036  00314E  50F3               	movf	prodl,w,c
 16037  003150  0F60               	addlw	low _relay_protection_timer
 16038  003152  6ED9               	movwf	fsr2l,c
 16039  003154  6ADA               	clrf	fsr2h,c
 16040  003156  6ADE               	clrf	postinc2,c
 16041  003158  6ADD               	clrf	postdec2,c
 16042                           
 16043                           ; BSR set to: 0
 16044  00315A  2A0D               	incf	init_app_ram@i,f,c
 16045                           
 16046                           ; BSR set to: 0
 16047  00315C  0E07               	movlw	7
 16048  00315E  640D               	cpfsgt	init_app_ram@i,c
 16049  003160  D7EC               	goto	l7257
 16050                           
 16051                           ; BSR set to: 0
 16052                           ;main.c: 449: }
 16053                           ;main.c: 451: for ( i=0; i<7; i++ ) {
 16054  003162  6A0D               	clrf	init_app_ram@i,c
 16055  003164                     l7267:
 16056                           
 16057                           ;main.c: 454: if ( readEEPROM( 0x43 + 10 + i ) &
 16058                           ;main.c: 455: 0x01 ) {
 16059  003164  0E4D               	movlw	77
 16060  003166  240D               	addwf	init_app_ram@i,w,c
 16061  003168  6E08               	movwf	?_readEEPROM,c
 16062  00316A  6A09               	clrf	?_readEEPROM+1,c
 16063  00316C  0E00               	movlw	0
 16064  00316E  2209               	addwfc	?_readEEPROM+1,f,c
 16065  003170  EC81  F01F         	call	_readEEPROM	;wreg free
 16066  003174  6E0B               	movwf	??_init_app_ram& (0+255),c
 16067  003176  A00B               	btfss	??_init_app_ram,0,c
 16068  003178  D02D               	goto	l7273
 16069                           
 16070                           ;main.c: 457: relay_pulse_flags |= (1<<i);
 16071  00317A  C00D  F00B         	movff	init_app_ram@i,??_init_app_ram
 16072  00317E  0E01               	movlw	1
 16073  003180  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16074  003182  2A0B               	incf	??_init_app_ram,f,c
 16075  003184  D002               	goto	u7994
 16076  003186                     u7995:
 16077  003186  90D8               	bcf	status,0,c
 16078  003188  360C               	rlcf	??_init_app_ram+1,f,c
 16079  00318A                     u7994:
 16080  00318A  2E0B               	decfsz	??_init_app_ram,f,c
 16081  00318C  D7FC               	goto	u7995
 16082  00318E  500C               	movf	??_init_app_ram+1,w,c
 16083  003190  0100               	movlb	0	; () banked
 16084  003192  138A               	iorwf	_relay_pulse_flags& (0+255),f,b
 16085                           
 16086                           ; BSR set to: 0
 16087                           ;main.c: 458: relay_pulse_timer[ i ] =
 16088                           ;main.c: 459: readEEPROM( 0x43 + 18 + i ) * 256 +
 16089                           ;main.c: 460: readEEPROM( 0x43 + 19 + i );
 16090  003194  0E55               	movlw	85
 16091  003196  240D               	addwf	init_app_ram@i,w,c
 16092  003198  6E08               	movwf	?_readEEPROM,c
 16093  00319A  6A09               	clrf	?_readEEPROM+1,c
 16094  00319C  0E00               	movlw	0
 16095  00319E  2209               	addwfc	?_readEEPROM+1,f,c
 16096  0031A0  EC81  F01F         	call	_readEEPROM	;wreg free
 16097  0031A4  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16098  0031A6  6A0B               	clrf	??_init_app_ram& (0+255),c
 16099  0031A8  0E56               	movlw	86
 16100  0031AA  240D               	addwf	init_app_ram@i,w,c
 16101  0031AC  6E08               	movwf	?_readEEPROM,c
 16102  0031AE  6A09               	clrf	?_readEEPROM+1,c
 16103  0031B0  0E00               	movlw	0
 16104  0031B2  2209               	addwfc	?_readEEPROM+1,f,c
 16105  0031B4  EC81  F01F         	call	_readEEPROM	;wreg free
 16106  0031B8  260B               	addwf	??_init_app_ram,f,c
 16107  0031BA  0E00               	movlw	0
 16108  0031BC  220C               	addwfc	??_init_app_ram+1,f,c
 16109  0031BE  500D               	movf	init_app_ram@i,w,c
 16110  0031C0  0D02               	mullw	2
 16111  0031C2  50F3               	movf	prodl,w,c
 16112  0031C4  0100               	movlb	0	; () banked
 16113  0031C6  0F70               	addlw	low _relay_pulse_timer
 16114  0031C8  6ED9               	movwf	fsr2l,c
 16115  0031CA  6ADA               	clrf	fsr2h,c
 16116  0031CC  C00B  FFDE         	movff	??_init_app_ram,postinc2
 16117  0031D0  C00C  FFDD         	movff	??_init_app_ram+1,postdec2
 16118  0031D4                     l7273:
 16119                           
 16120                           ;main.c: 461: }
 16121                           ;main.c: 464: if ( readEEPROM(0x43 + 15 + i ) & 0x04) {
 16122  0031D4  0E52               	movlw	82
 16123  0031D6  240D               	addwf	init_app_ram@i,w,c
 16124  0031D8  6E08               	movwf	?_readEEPROM,c
 16125  0031DA  6A09               	clrf	?_readEEPROM+1,c
 16126  0031DC  0E00               	movlw	0
 16127  0031DE  2209               	addwfc	?_readEEPROM+1,f,c
 16128  0031E0  EC81  F01F         	call	_readEEPROM	;wreg free
 16129  0031E4  6E0B               	movwf	??_init_app_ram& (0+255),c
 16130  0031E6  A40B               	btfss	??_init_app_ram,2,c
 16131  0031E8  D020               	goto	l7277
 16132                           
 16133                           ;main.c: 465: relay_protection_timer[ i ] =
 16134                           ;main.c: 466: readEEPROM(0x43 + 44 + i ) * 256 +
 16135                           ;main.c: 467: readEEPROM(0x43 + 45 + i );
 16136  0031EA  0E6F               	movlw	111
 16137  0031EC  240D               	addwf	init_app_ram@i,w,c
 16138  0031EE  6E08               	movwf	?_readEEPROM,c
 16139  0031F0  6A09               	clrf	?_readEEPROM+1,c
 16140  0031F2  0E00               	movlw	0
 16141  0031F4  2209               	addwfc	?_readEEPROM+1,f,c
 16142  0031F6  EC81  F01F         	call	_readEEPROM	;wreg free
 16143  0031FA  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16144  0031FC  6A0B               	clrf	??_init_app_ram& (0+255),c
 16145  0031FE  0E70               	movlw	112
 16146  003200  240D               	addwf	init_app_ram@i,w,c
 16147  003202  6E08               	movwf	?_readEEPROM,c
 16148  003204  6A09               	clrf	?_readEEPROM+1,c
 16149  003206  0E00               	movlw	0
 16150  003208  2209               	addwfc	?_readEEPROM+1,f,c
 16151  00320A  EC81  F01F         	call	_readEEPROM	;wreg free
 16152  00320E  260B               	addwf	??_init_app_ram,f,c
 16153  003210  0E00               	movlw	0
 16154  003212  220C               	addwfc	??_init_app_ram+1,f,c
 16155  003214  500D               	movf	init_app_ram@i,w,c
 16156  003216  0D02               	mullw	2
 16157  003218  50F3               	movf	prodl,w,c
 16158  00321A  0100               	movlb	0	; () banked
 16159  00321C  0F60               	addlw	low _relay_protection_timer
 16160  00321E  6ED9               	movwf	fsr2l,c
 16161  003220  6ADA               	clrf	fsr2h,c
 16162  003222  C00B  FFDE         	movff	??_init_app_ram,postinc2
 16163  003226  C00C  FFDD         	movff	??_init_app_ram+1,postdec2
 16164  00322A                     l7277:
 16165  00322A  2A0D               	incf	init_app_ram@i,f,c
 16166  00322C  0E06               	movlw	6
 16167  00322E  640D               	cpfsgt	init_app_ram@i,c
 16168  003230  D799               	goto	l7267
 16169  003232  0C06               	retlw	6
 16170  003234                     __end_of_init_app_ram:
 16171                           	opt stack 0
 16172                           tblptru	equ	0xFF8
 16173                           tblptrh	equ	0xFF7
 16174                           tblptrl	equ	0xFF6
 16175                           tablat	equ	0xFF5
 16176                           prodh	equ	0xFF4
 16177                           prodl	equ	0xFF3
 16178                           intcon	equ	0xFF2
 16179                           postinc0	equ	0xFEE
 16180                           wreg	equ	0xFE8
 16181                           indf1	equ	0xFE7
 16182                           fsr1h	equ	0xFE2
 16183                           fsr1l	equ	0xFE1
 16184                           indf2	equ	0xFDF
 16185                           postinc2	equ	0xFDE
 16186                           postdec2	equ	0xFDD
 16187                           plusw2	equ	0xFDB
 16188                           fsr2h	equ	0xFDA
 16189                           fsr2l	equ	0xFD9
 16190                           status	equ	0xFD8
 16191                           
 16192 ;; *************** function _WriteTimer0 *****************
 16193 ;; Defined at:
 16194 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16195 ;; Parameters:    Size  Location     Type
 16196 ;;  timer0          2    7[COMRAM] unsigned int 
 16197 ;; Auto vars:     Size  Location     Type
 16198 ;;  timer           2    9[COMRAM] struct Timers
 16199 ;; Return value:  Size  Location     Type
 16200 ;;		None               void
 16201 ;; Registers used:
 16202 ;;		None
 16203 ;; Tracked objects:
 16204 ;;		On entry : 0/0
 16205 ;;		On exit  : 0/0
 16206 ;;		Unchanged: 0/0
 16207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16208 ;;      Params:         2       0       0       0       0       0       0
 16209 ;;      Locals:         2       0       0       0       0       0       0
 16210 ;;      Temps:          0       0       0       0       0       0       0
 16211 ;;      Totals:         4       0       0       0       0       0       0
 16212 ;;Total ram usage:        4 bytes
 16213 ;; Hardware stack levels used:    1
 16214 ;; Hardware stack levels required when called:    2
 16215 ;; This function calls:
 16216 ;;		Nothing
 16217 ;; This function is called by:
 16218 ;;		_init
 16219 ;; This function uses a non-reentrant model
 16220 ;;
 16221                           
 16222                           	psect	text73
 16223  003EF0                     __ptext73:
 16224                           	opt stack 0
 16225  003EF0                     _WriteTimer0:
 16226                           	opt stack 27
 16227                           
 16228                           ;incstack = 0
 16229                           ;incstack = 0
 16230  003EF0  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 16231  003EF4  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 16232  003EF8  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 16233  003EFC  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 16234  003F00  0012               	return	
 16235  003F02                     __end_of_WriteTimer0:
 16236                           	opt stack 0
 16237                           tblptru	equ	0xFF8
 16238                           tblptrh	equ	0xFF7
 16239                           tblptrl	equ	0xFF6
 16240                           tablat	equ	0xFF5
 16241                           prodh	equ	0xFF4
 16242                           prodl	equ	0xFF3
 16243                           intcon	equ	0xFF2
 16244                           postinc0	equ	0xFEE
 16245                           wreg	equ	0xFE8
 16246                           indf1	equ	0xFE7
 16247                           fsr1h	equ	0xFE2
 16248                           fsr1l	equ	0xFE1
 16249                           indf2	equ	0xFDF
 16250                           postinc2	equ	0xFDE
 16251                           postdec2	equ	0xFDD
 16252                           plusw2	equ	0xFDB
 16253                           fsr2h	equ	0xFDA
 16254                           fsr2l	equ	0xFD9
 16255                           status	equ	0xFD8
 16256                           
 16257 ;; *************** function _vscp_readAppReg *****************
 16258 ;; Defined at:
 16259 ;;		line 898 in file "../main.c"
 16260 ;; Parameters:    Size  Location     Type
 16261 ;;  reg             1    wreg     unsigned char 
 16262 ;; Auto vars:     Size  Location     Type
 16263 ;;  reg             1   11[COMRAM] unsigned char 
 16264 ;;  rv              1   10[COMRAM] unsigned char 
 16265 ;; Return value:  Size  Location     Type
 16266 ;;                  1    wreg      unsigned char 
 16267 ;; Registers used:
 16268 ;;		wreg, status,2, status,0, cstack
 16269 ;; Tracked objects:
 16270 ;;		On entry : F/0
 16271 ;;		On exit  : 0/0
 16272 ;;		Unchanged: 0/0
 16273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16274 ;;      Params:         0       0       0       0       0       0       0
 16275 ;;      Locals:         2       0       0       0       0       0       0
 16276 ;;      Temps:          0       0       0       0       0       0       0
 16277 ;;      Totals:         2       0       0       0       0       0       0
 16278 ;;Total ram usage:        2 bytes
 16279 ;; Hardware stack levels used:    1
 16280 ;; Hardware stack levels required when called:    3
 16281 ;; This function calls:
 16282 ;;		_readEEPROM
 16283 ;; This function is called by:
 16284 ;;		_vscp_readRegister
 16285 ;;		_vscp_handleProtocolEvent
 16286 ;; This function uses a non-reentrant model
 16287 ;;
 16288                           
 16289                           	psect	text74
 16290  00372E                     __ptext74:
 16291                           	opt stack 0
 16292  00372E                     _vscp_readAppReg:
 16293                           	opt stack 25
 16294                           
 16295                           ;incstack = 0
 16296                           ;incstack = 0
 16297                           ;vscp_readAppReg@reg stored from wreg
 16298  00372E  CFE8 F00C          	movff	wreg,vscp_readAppReg@reg
 16299                           
 16300                           ; BSR set to: 0
 16301                           ;main.c: 899: uint8_t rv;
 16302                           ;main.c: 901: rv = 0x00;
 16303  003732  6A0B               	clrf	vscp_readAppReg@rv,c
 16304                           
 16305                           ; BSR set to: 0
 16306                           ;main.c: 904: if ( reg == 0x00 ) {
 16307  003734  660C               	tstfsz	vscp_readAppReg@reg,c
 16308  003736  D006               	goto	l8053
 16309                           
 16310                           ; BSR set to: 0
 16311                           ;main.c: 905: rv = readEEPROM(0x43 + 0);
 16312  003738  6A09               	clrf	?_readEEPROM+1,c
 16313  00373A  0E43               	movlw	67
 16314  00373C  6E08               	movwf	?_readEEPROM,c
 16315  00373E  EC81  F01F         	call	_readEEPROM	;wreg free
 16316  003742  D04D               	goto	L50
 16317  003744                     l8053:
 16318                           
 16319                           ; BSR set to: 0
 16320                           ;main.c: 908: else if ( reg == 0x01 ) {
 16321  003744  040C               	decf	vscp_readAppReg@reg,w,c
 16322  003746  E106               	bnz	l8057
 16323                           
 16324                           ; BSR set to: 0
 16325                           ;main.c: 909: rv = readEEPROM(0x43 + 1);
 16326  003748  6A09               	clrf	?_readEEPROM+1,c
 16327  00374A  0E44               	movlw	68
 16328  00374C  6E08               	movwf	?_readEEPROM,c
 16329  00374E  EC81  F01F         	call	_readEEPROM	;wreg free
 16330  003752  D045               	goto	L50
 16331  003754                     l8057:
 16332                           
 16333                           ; BSR set to: 0
 16334                           ;main.c: 911: else if ( (reg >= 2) && (reg < 10) ) {
 16335  003754  0E01               	movlw	1
 16336  003756  640C               	cpfsgt	vscp_readAppReg@reg,c
 16337  003758  D034               	goto	l8081
 16338                           
 16339                           ; BSR set to: 0
 16340  00375A  0E0A               	movlw	10
 16341  00375C  600C               	cpfslt	vscp_readAppReg@reg,c
 16342  00375E  D031               	goto	l8081
 16343  003760  D01E               	goto	l8079
 16344  003762                     l8063:
 16345                           
 16346                           ; BSR set to: 0
 16347                           ;main.c: 917: rv = LATBbits.LATB4;
 16348  003762  0E00               	movlw	0
 16349  003764  B88A               	btfsc	3978,4,c	;volatile
 16350  003766  0E01               	movlw	1
 16351  003768  D03A               	goto	L50
 16352  00376A                     l8065:
 16353                           
 16354                           ; BSR set to: 0
 16355                           ;main.c: 922: rv = LATBbits.LATB1;
 16356  00376A  0E00               	movlw	0
 16357  00376C  B28A               	btfsc	3978,1,c	;volatile
 16358  00376E  0E01               	movlw	1
 16359  003770  D036               	goto	L50
 16360  003772                     l8067:
 16361                           
 16362                           ; BSR set to: 0
 16363                           ;main.c: 927: rv = LATBbits.LATB0;
 16364  003772  0E00               	movlw	0
 16365  003774  B08A               	btfsc	3978,0,c	;volatile
 16366  003776  0E01               	movlw	1
 16367  003778  D032               	goto	L50
 16368  00377A                     l8069:
 16369                           
 16370                           ; BSR set to: 0
 16371                           ;main.c: 932: rv = LATCbits.LATC7;
 16372  00377A  0E00               	movlw	0
 16373  00377C  BE8B               	btfsc	3979,7,c	;volatile
 16374  00377E  0E01               	movlw	1
 16375  003780  D02E               	goto	L50
 16376  003782                     l8071:
 16377                           
 16378                           ; BSR set to: 0
 16379                           ;main.c: 937: rv = LATCbits.LATC6;
 16380  003782  0E00               	movlw	0
 16381  003784  BC8B               	btfsc	3979,6,c	;volatile
 16382  003786  0E01               	movlw	1
 16383  003788  D02A               	goto	L50
 16384  00378A                     l8073:
 16385                           
 16386                           ; BSR set to: 0
 16387                           ;main.c: 942: rv = LATCbits.LATC5;
 16388  00378A  0E00               	movlw	0
 16389  00378C  BA8B               	btfsc	3979,5,c	;volatile
 16390  00378E  0E01               	movlw	1
 16391  003790  D026               	goto	L50
 16392  003792                     l8075:
 16393                           
 16394                           ; BSR set to: 0
 16395                           ;main.c: 947: rv = LATCbits.LATC4;
 16396  003792  0E00               	movlw	0
 16397  003794  B88B               	btfsc	3979,4,c	;volatile
 16398  003796  0E01               	movlw	1
 16399  003798  D022               	goto	L50
 16400  00379A                     l290:
 16401                           
 16402                           ; BSR set to: 0
 16403                           ;main.c: 952: rv = 0;
 16404  00379A  6A0B               	clrf	vscp_readAppReg@rv,c
 16405                           
 16406                           ;main.c: 953: break;
 16407  00379C  D021               	goto	l8087
 16408  00379E                     l8079:
 16409                           
 16410                           ; BSR set to: 0
 16411  00379E  500C               	movf	vscp_readAppReg@reg,w,c
 16412                           
 16413                           ; Switch size 1, requested type "speed"
 16414                           ; Number of cases is 8, Range of values is 2 to 9
 16415                           ; switch strategies available:
 16416                           ; Name         Instructions Cycles
 16417                           ; simple_byte           25    13 (average)
 16418                           ;	Chosen strategy is simple_byte
 16419  0037A0  0A02               	xorlw	2	; case 2
 16420  0037A2  E0DF               	bz	l8063
 16421  0037A4  0A01               	xorlw	1	; case 3
 16422  0037A6  E0E1               	bz	l8065
 16423  0037A8  0A07               	xorlw	7	; case 4
 16424  0037AA  E0E3               	bz	l8067
 16425  0037AC  0A01               	xorlw	1	; case 5
 16426  0037AE  E0E5               	bz	l8069
 16427  0037B0  0A03               	xorlw	3	; case 6
 16428  0037B2  E0E7               	bz	l8071
 16429  0037B4  0A01               	xorlw	1	; case 7
 16430  0037B6  E0E9               	bz	l8073
 16431  0037B8  0A0F               	xorlw	15	; case 8
 16432  0037BA  E0EB               	bz	l8075
 16433  0037BC  0A01               	xorlw	1	; case 9
 16434  0037BE  E0ED               	bz	l290
 16435  0037C0  D00F               	goto	l8087
 16436  0037C2                     l8081:
 16437                           
 16438                           ; BSR set to: 0
 16439                           ;main.c: 957: else if ( ( reg >= 10 ) &&
 16440                           ;main.c: 958: (reg < (72 + 7 * 8 ) ) ) {
 16441  0037C2  0E09               	movlw	9
 16442  0037C4  640C               	cpfsgt	vscp_readAppReg@reg,c
 16443  0037C6  D00C               	goto	l8087
 16444                           
 16445                           ; BSR set to: 0
 16446  0037C8  0E80               	movlw	128
 16447  0037CA  600C               	cpfslt	vscp_readAppReg@reg,c
 16448  0037CC  D009               	goto	l8087
 16449                           
 16450                           ; BSR set to: 0
 16451                           ;main.c: 959: rv = readEEPROM( 0x43 + reg );
 16452  0037CE  0E43               	movlw	67
 16453  0037D0  240C               	addwf	vscp_readAppReg@reg,w,c
 16454  0037D2  6E08               	movwf	?_readEEPROM,c
 16455  0037D4  6A09               	clrf	?_readEEPROM+1,c
 16456  0037D6  0E00               	movlw	0
 16457  0037D8  2209               	addwfc	?_readEEPROM+1,f,c
 16458  0037DA  EC81  F01F         	call	_readEEPROM	;wreg free
 16459  0037DE                     L50:
 16460  0037DE  6E0B               	movwf	vscp_readAppReg@rv,c
 16461  0037E0                     l8087:
 16462                           
 16463                           ;main.c: 960: }
 16464                           ;main.c: 962: return rv;
 16465  0037E0  500B               	movf	vscp_readAppReg@rv,w,c
 16466  0037E2  0012               	return	
 16467  0037E4                     __end_of_vscp_readAppReg:
 16468                           	opt stack 0
 16469                           tblptru	equ	0xFF8
 16470                           tblptrh	equ	0xFF7
 16471                           tblptrl	equ	0xFF6
 16472                           tablat	equ	0xFF5
 16473                           prodh	equ	0xFF4
 16474                           prodl	equ	0xFF3
 16475                           intcon	equ	0xFF2
 16476                           postinc0	equ	0xFEE
 16477                           wreg	equ	0xFE8
 16478                           indf1	equ	0xFE7
 16479                           fsr1h	equ	0xFE2
 16480                           fsr1l	equ	0xFE1
 16481                           indf2	equ	0xFDF
 16482                           postinc2	equ	0xFDE
 16483                           postdec2	equ	0xFDD
 16484                           plusw2	equ	0xFDB
 16485                           fsr2h	equ	0xFDA
 16486                           fsr2l	equ	0xFD9
 16487                           status	equ	0xFD8
 16488                           
 16489 ;; *************** function _readEEPROM *****************
 16490 ;; Defined at:
 16491 ;;		line 92 in file "../../vscp_firmware/pic/common/eeprom.c"
 16492 ;; Parameters:    Size  Location     Type
 16493 ;;  address         2    7[COMRAM] unsigned short 
 16494 ;; Auto vars:     Size  Location     Type
 16495 ;;  data            1    9[COMRAM] unsigned char 
 16496 ;; Return value:  Size  Location     Type
 16497 ;;                  1    wreg      unsigned char 
 16498 ;; Registers used:
 16499 ;;		wreg, status,2
 16500 ;; Tracked objects:
 16501 ;;		On entry : 0/0
 16502 ;;		On exit  : 0/0
 16503 ;;		Unchanged: 0/0
 16504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16505 ;;      Params:         2       0       0       0       0       0       0
 16506 ;;      Locals:         1       0       0       0       0       0       0
 16507 ;;      Temps:          0       0       0       0       0       0       0
 16508 ;;      Totals:         3       0       0       0       0       0       0
 16509 ;;Total ram usage:        3 bytes
 16510 ;; Hardware stack levels used:    1
 16511 ;; Hardware stack levels required when called:    2
 16512 ;; This function calls:
 16513 ;;		Nothing
 16514 ;; This function is called by:
 16515 ;;		_init_app_ram
 16516 ;;		_doApplicationOneSecondWork
 16517 ;;		_vscp_readNicknamePermanent
 16518 ;;		_vscp_getZone
 16519 ;;		_vscp_getSubzone
 16520 ;;		_vscp_readAppReg
 16521 ;;		_vscp_writeAppReg
 16522 ;;		_SendInformationEvent
 16523 ;;		_doDM
 16524 ;;		_doActionOn
 16525 ;;		_doActionOff
 16526 ;;		_doActionPulse
 16527 ;;		_doActionStatus
 16528 ;;		_doActionDisable
 16529 ;;		_doActionToggle
 16530 ;;		_vscp_getGUID
 16531 ;;		_vscp_getUserID
 16532 ;;		_vscp_getManufacturerId
 16533 ;;		_vscp_getSegmentCRC
 16534 ;;		_calculateSetFilterMask
 16535 ;; This function uses a non-reentrant model
 16536 ;;
 16537                           
 16538                           	psect	text75
 16539  003F02                     __ptext75:
 16540                           	opt stack 0
 16541  003F02                     _readEEPROM:
 16542                           	opt stack 26
 16543                           
 16544                           ;eeprom.c: 93: uint8_t data;
 16545                           ;eeprom.c: 98: EEADR = address & 0xff;
 16546                           
 16547                           ;incstack = 0
 16548                           ;incstack = 0
 16549  003F02  C008  FFA9         	movff	readEEPROM@address,4009	;volatile
 16550                           
 16551                           ;eeprom.c: 99: EECON1bits.EEPGD= 0;
 16552  003F06  9EA6               	bcf	4006,7,c	;volatile
 16553                           
 16554                           ;eeprom.c: 100: EECON1bits.CFGS = 0;
 16555  003F08  9CA6               	bcf	4006,6,c	;volatile
 16556                           
 16557                           ;eeprom.c: 101: EECON1bits.RD = 1;
 16558  003F0A  80A6               	bsf	4006,0,c	;volatile
 16559                           
 16560                           ;eeprom.c: 102: data = EEDATA;
 16561  003F0C  CFA8 F00A          	movff	4008,readEEPROM@data	;volatile
 16562                           
 16563                           ;eeprom.c: 104: return data;
 16564  003F10  500A               	movf	readEEPROM@data,w,c
 16565  003F12  0012               	return	
 16566  003F14                     __end_of_readEEPROM:
 16567                           	opt stack 0
 16568                           tblptru	equ	0xFF8
 16569                           tblptrh	equ	0xFF7
 16570                           tblptrl	equ	0xFF6
 16571                           tablat	equ	0xFF5
 16572                           prodh	equ	0xFF4
 16573                           prodl	equ	0xFF3
 16574                           intcon	equ	0xFF2
 16575                           postinc0	equ	0xFEE
 16576                           wreg	equ	0xFE8
 16577                           indf1	equ	0xFE7
 16578                           fsr1h	equ	0xFE2
 16579                           fsr1l	equ	0xFE1
 16580                           indf2	equ	0xFDF
 16581                           postinc2	equ	0xFDE
 16582                           postdec2	equ	0xFDD
 16583                           plusw2	equ	0xFDB
 16584                           fsr2h	equ	0xFDA
 16585                           fsr2l	equ	0xFD9
 16586                           status	equ	0xFD8
 16587                           
 16588 ;; *************** function _interrupt_at_low_vector *****************
 16589 ;; Defined at:
 16590 ;;		line 134 in file "../main.c"
 16591 ;; Parameters:    Size  Location     Type
 16592 ;;		None
 16593 ;; Auto vars:     Size  Location     Type
 16594 ;;		None
 16595 ;; Return value:  Size  Location     Type
 16596 ;;		None               void
 16597 ;; Registers used:
 16598 ;;		wreg, status,2, status,0, cstack
 16599 ;; Tracked objects:
 16600 ;;		On entry : 0/0
 16601 ;;		On exit  : 0/0
 16602 ;;		Unchanged: 0/0
 16603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16604 ;;      Params:         0       0       0       0       0       0       0
 16605 ;;      Locals:         0       0       0       0       0       0       0
 16606 ;;      Temps:          3       0       0       0       0       0       0
 16607 ;;      Totals:         3       0       0       0       0       0       0
 16608 ;;Total ram usage:        3 bytes
 16609 ;; Hardware stack levels used:    1
 16610 ;; Hardware stack levels required when called:    1
 16611 ;; This function calls:
 16612 ;;		i1_WriteTimer0
 16613 ;; This function is called by:
 16614 ;;		Interrupt level 1
 16615 ;; This function uses a non-reentrant model
 16616 ;;
 16617                           
 16618                           	psect	intcodelo
 16619  000018                     __pintcodelo:
 16620                           	opt stack 0
 16621  000018                     _interrupt_at_low_vector:
 16622                           	opt stack 21
 16623                           
 16624                           ;incstack = 0
 16625  000018  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 16626  00001C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 16627  000020  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 16628  000024                     
 16629                           ;main.c: 136: if ( INTCONbits.TMR0IF ) {
 16630  000024  A4F2               	btfss	intcon,2,c	;volatile
 16631  000026  D001               	goto	i1u778_21
 16632  000028  D001               	goto	i1u778_20
 16633  00002A                     i1u778_21:
 16634  00002A  D03E               	goto	i1l145
 16635  00002C                     i1u778_20:
 16636  00002C                     
 16637                           ;main.c: 139: WriteTimer0(0xfb1d);
 16638  00002C  0EFB               	movlw	251
 16639  00002E  6E02               	movwf	?i1_WriteTimer0+1,c
 16640  000030  0E1D               	movlw	29
 16641  000032  6E01               	movwf	?i1_WriteTimer0,c
 16642  000034  EC8A  F01F         	call	i1_WriteTimer0	;wreg free
 16643  000038                     
 16644                           ;main.c: 141: vscp_timer++;
 16645  000038  0100               	movlb	0	; () banked
 16646  00003A  4B86               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 16647  00003C  2B87               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 16648  00003E                     
 16649                           ; BSR set to: 0
 16650                           ;main.c: 142: vscp_configtimer++;
 16651  00003E  4B84               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 16652  000040  2B85               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 16653  000042                     
 16654                           ; BSR set to: 0
 16655                           ;main.c: 143: measurement_clock++;
 16656  000042  0E01               	movlw	1
 16657  000044  2780               	addwf	_measurement_clock& (0+255),f,b	;volatile
 16658  000046  0E00               	movlw	0
 16659  000048  2381               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 16660  00004A  0E00               	movlw	0
 16661  00004C  2382               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 16662  00004E  0E00               	movlw	0
 16663  000050  2383               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 16664  000052                     
 16665                           ; BSR set to: 0
 16666                           ;main.c: 146: if ( PORTCbits.RC0 ) {
 16667  000052  A082               	btfss	3970,0,c	;volatile
 16668  000054  D001               	goto	i1u779_21
 16669  000056  D001               	goto	i1u779_20
 16670  000058                     i1u779_21:
 16671  000058  D002               	goto	i1l7081
 16672  00005A                     i1u779_20:
 16673  00005A                     
 16674                           ; BSR set to: 0
 16675                           ;main.c: 147: vscp_initbtncnt = 0;
 16676  00005A  6B8F               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 16677                           
 16678                           ;main.c: 148: } else {
 16679  00005C  D001               	goto	i1l137
 16680  00005E                     i1l7081:
 16681                           
 16682                           ; BSR set to: 0
 16683                           ;main.c: 150: vscp_initbtncnt++;
 16684  00005E  2B8F               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 16685  000060                     i1l137:
 16686                           
 16687                           ; BSR set to: 0
 16688                           ;main.c: 151: }
 16689                           ;main.c: 154: vscp_statuscnt++;
 16690  000060  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 16691  000062                     
 16692                           ; BSR set to: 0
 16693                           ;main.c: 155: if ( ( 0x02 == vscp_initledfunc ) &&
 16694                           ;main.c: 156: ( vscp_statuscnt > 100 ) ) {
 16695  000062  5056               	movf	_vscp_initledfunc,w,c
 16696  000064  0A02               	xorlw	2
 16697  000066  A4D8               	btfss	status,2,c
 16698  000068  D001               	goto	i1u780_21
 16699  00006A  D001               	goto	i1u780_20
 16700  00006C                     i1u780_21:
 16701  00006C  D00E               	goto	i1l7091
 16702  00006E                     i1u780_20:
 16703  00006E                     
 16704                           ; BSR set to: 0
 16705  00006E  0E64               	movlw	100
 16706  000070  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 16707  000072  D001               	goto	i1u781_21
 16708  000074  D001               	goto	i1u781_20
 16709  000076                     i1u781_21:
 16710  000076  D009               	goto	i1l7091
 16711  000078                     i1u781_20:
 16712  000078                     
 16713                           ; BSR set to: 0
 16714                           ;main.c: 158: if ( PORTCbits.RC1 ) {
 16715  000078  A282               	btfss	3970,1,c	;volatile
 16716  00007A  D001               	goto	i1u782_21
 16717  00007C  D001               	goto	i1u782_20
 16718  00007E                     i1u782_21:
 16719  00007E  D002               	goto	i1l139
 16720  000080                     i1u782_20:
 16721  000080                     
 16722                           ; BSR set to: 0
 16723                           ;main.c: 159: PORTCbits.RC1 = 0;
 16724  000080  9282               	bcf	3970,1,c	;volatile
 16725                           
 16726                           ;main.c: 160: }
 16727  000082  D001               	goto	i1l140
 16728  000084                     i1l139:
 16729                           
 16730                           ; BSR set to: 0
 16731                           ;main.c: 161: else {
 16732                           ;main.c: 162: PORTCbits.RC1 = 1;
 16733  000084  8282               	bsf	3970,1,c	;volatile
 16734  000086                     i1l140:
 16735                           
 16736                           ; BSR set to: 0
 16737                           ;main.c: 163: }
 16738                           ;main.c: 165: vscp_statuscnt = 0;
 16739  000086  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16740                           
 16741                           ;main.c: 167: }
 16742  000088  D00E               	goto	i1l141
 16743  00008A                     i1l7091:
 16744                           
 16745                           ; BSR set to: 0
 16746                           ;main.c: 168: else if (0x01 == vscp_initledfunc) {
 16747  00008A  0456               	decf	_vscp_initledfunc,w,c
 16748  00008C  A4D8               	btfss	status,2,c
 16749  00008E  D001               	goto	i1u783_21
 16750  000090  D001               	goto	i1u783_20
 16751  000092                     i1u783_21:
 16752  000092  D003               	goto	i1l142
 16753  000094                     i1u783_20:
 16754  000094                     
 16755                           ; BSR set to: 0
 16756                           ;main.c: 169: PORTCbits.RC1 = 1;
 16757  000094  8282               	bsf	3970,1,c	;volatile
 16758                           
 16759                           ;main.c: 170: vscp_statuscnt = 0;
 16760  000096  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16761                           
 16762                           ;main.c: 171: }
 16763  000098  D006               	goto	i1l141
 16764  00009A                     i1l142:
 16765                           
 16766                           ; BSR set to: 0
 16767                           ;main.c: 172: else if (0x00 == vscp_initledfunc) {
 16768  00009A  6656               	tstfsz	_vscp_initledfunc,c
 16769  00009C  D001               	goto	i1u784_21
 16770  00009E  D001               	goto	i1u784_20
 16771  0000A0                     i1u784_21:
 16772  0000A0  D002               	goto	i1l141
 16773  0000A2                     i1u784_20:
 16774  0000A2                     
 16775                           ; BSR set to: 0
 16776                           ;main.c: 173: PORTCbits.RC1 = 0;
 16777  0000A2  9282               	bcf	3970,1,c	;volatile
 16778                           
 16779                           ;main.c: 174: vscp_statuscnt = 0;
 16780  0000A4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16781  0000A6                     i1l141:
 16782                           
 16783                           ; BSR set to: 0
 16784                           ;main.c: 175: }
 16785                           ;main.c: 177: INTCONbits.TMR0IF = 0;
 16786  0000A6  94F2               	bcf	intcon,2,c	;volatile
 16787  0000A8                     i1l145:
 16788  0000A8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 16789  0000AC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 16790  0000B0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 16791  0000B4  0010               	retfie	
 16792  0000B6                     __end_of_interrupt_at_low_vector:
 16793                           	opt stack 0
 16794                           tblptru	equ	0xFF8
 16795                           tblptrh	equ	0xFF7
 16796                           tblptrl	equ	0xFF6
 16797                           tablat	equ	0xFF5
 16798                           prodh	equ	0xFF4
 16799                           prodl	equ	0xFF3
 16800                           intcon	equ	0xFF2
 16801                           postinc0	equ	0xFEE
 16802                           wreg	equ	0xFE8
 16803                           indf1	equ	0xFE7
 16804                           fsr1h	equ	0xFE2
 16805                           fsr1l	equ	0xFE1
 16806                           bsr	equ	0xFE0
 16807                           indf2	equ	0xFDF
 16808                           postinc2	equ	0xFDE
 16809                           postdec2	equ	0xFDD
 16810                           plusw2	equ	0xFDB
 16811                           fsr2h	equ	0xFDA
 16812                           fsr2l	equ	0xFD9
 16813                           status	equ	0xFD8
 16814                           
 16815 ;; *************** function i1_WriteTimer0 *****************
 16816 ;; Defined at:
 16817 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16818 ;; Parameters:    Size  Location     Type
 16819 ;;  timer0          2    0[COMRAM] unsigned int 
 16820 ;; Auto vars:     Size  Location     Type
 16821 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 16822 ;; Return value:  Size  Location     Type
 16823 ;;		None               void
 16824 ;; Registers used:
 16825 ;;		None
 16826 ;; Tracked objects:
 16827 ;;		On entry : 0/0
 16828 ;;		On exit  : 0/0
 16829 ;;		Unchanged: 0/0
 16830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16831 ;;      Params:         2       0       0       0       0       0       0
 16832 ;;      Locals:         2       0       0       0       0       0       0
 16833 ;;      Temps:          0       0       0       0       0       0       0
 16834 ;;      Totals:         4       0       0       0       0       0       0
 16835 ;;Total ram usage:        4 bytes
 16836 ;; Hardware stack levels used:    1
 16837 ;; This function calls:
 16838 ;;		Nothing
 16839 ;; This function is called by:
 16840 ;;		_interrupt_at_low_vector
 16841 ;; This function uses a non-reentrant model
 16842 ;;
 16843                           
 16844                           	psect	text77
 16845  003F14                     __ptext77:
 16846                           	opt stack 0
 16847  003F14                     i1_WriteTimer0:
 16848                           	opt stack 21
 16849                           
 16850                           ;incstack = 0
 16851                           ;incstack = 0
 16852  003F14  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 16853  003F18  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 16854  003F1C  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 16855  003F20  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 16856  003F24  0012               	return	
 16857  003F26                     __end_ofi1_WriteTimer0:
 16858                           	opt stack 0
 16859                           tblptru	equ	0xFF8
 16860                           tblptrh	equ	0xFF7
 16861                           tblptrl	equ	0xFF6
 16862                           tablat	equ	0xFF5
 16863                           prodh	equ	0xFF4
 16864                           prodl	equ	0xFF3
 16865                           intcon	equ	0xFF2
 16866                           postinc0	equ	0xFEE
 16867                           wreg	equ	0xFE8
 16868                           indf1	equ	0xFE7
 16869                           fsr1h	equ	0xFE2
 16870                           fsr1l	equ	0xFE1
 16871                           bsr	equ	0xFE0
 16872                           indf2	equ	0xFDF
 16873                           postinc2	equ	0xFDE
 16874                           postdec2	equ	0xFDD
 16875                           plusw2	equ	0xFDB
 16876                           fsr2h	equ	0xFDA
 16877                           fsr2l	equ	0xFD9
 16878                           status	equ	0xFD8
 16879                           tblptru	equ	0xFF8
 16880                           tblptrh	equ	0xFF7
 16881                           tblptrl	equ	0xFF6
 16882                           tablat	equ	0xFF5
 16883                           prodh	equ	0xFF4
 16884                           prodl	equ	0xFF3
 16885                           intcon	equ	0xFF2
 16886                           postinc0	equ	0xFEE
 16887                           wreg	equ	0xFE8
 16888                           indf1	equ	0xFE7
 16889                           fsr1h	equ	0xFE2
 16890                           fsr1l	equ	0xFE1
 16891                           bsr	equ	0xFE0
 16892                           indf2	equ	0xFDF
 16893                           postinc2	equ	0xFDE
 16894                           postdec2	equ	0xFDD
 16895                           plusw2	equ	0xFDB
 16896                           fsr2h	equ	0xFDA
 16897                           fsr2l	equ	0xFD9
 16898                           status	equ	0xFD8
 16899                           
 16900                           	psect	rparam
 16901  0000                     tblptru	equ	0xFF8
 16902                           tblptrh	equ	0xFF7
 16903                           tblptrl	equ	0xFF6
 16904                           tablat	equ	0xFF5
 16905                           prodh	equ	0xFF4
 16906                           prodl	equ	0xFF3
 16907                           intcon	equ	0xFF2
 16908                           postinc0	equ	0xFEE
 16909                           wreg	equ	0xFE8
 16910                           indf1	equ	0xFE7
 16911                           fsr1h	equ	0xFE2
 16912                           fsr1l	equ	0xFE1
 16913                           bsr	equ	0xFE0
 16914                           indf2	equ	0xFDF
 16915                           postinc2	equ	0xFDE
 16916                           postdec2	equ	0xFDD
 16917                           plusw2	equ	0xFDB
 16918                           fsr2h	equ	0xFDA
 16919                           fsr2l	equ	0xFD9
 16920                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     59     140
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionDisable->_writeEEPROM
    _doActionDisable->_readEEPROM
    _doActionStatus->_SendInformationEvent
    _doActionPulse->_readEEPROM
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeAppReg
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_SendInformationEvent
    _calculateSetFilterMask->__CANIDToRegs
    _SendInformationEvent->_sendVSCPFrame
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_readEEPROM
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   70359
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           6     6      0    7490
                                             27 BANK0      6     6      0
                         _readEEPROM
                        _doActionOff
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2438
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                17    17      0   15663
                                             28 BANK0     17    17      0
                         _readEEPROM
                        _doActionOff
                         _doActionOn
                      _doActionPulse
                     _doActionStatus
                    _doActionDisable
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       7     6      1    3454
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionDisable                                      6     5      1     397
                                             10 COMRAM     6     5      1
                        _writeEEPROM
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _doActionStatus                                       7     6      1    3412
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulse                                        7     6      1     353
                                             10 COMRAM     7     6      1
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           7     6      1    3196
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          6     5      1    3196
                                             80 COMRAM     1     0      1
                                             22 BANK0      5     5      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            27    27      0   34505
                                             32 BANK0     27    27      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   11628
                                             30 BANK0      2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                    18    17      1    2519
                                             14 COMRAM    18    17      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     722
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     180
                                             10 COMRAM     4     4      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     9     8      1    8899
                                             80 COMRAM     1     0      1
                                             22 BANK0      8     8      0
                        _writeEEPROM
                         _readEEPROM
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (4) _calculateSetFilterMask                              50    50      0    1879
                                             17 COMRAM    50    50      0
                         _readEEPROM
               _ECANSetOperationMode
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _SendInformationEvent                                 8     6      2    2567
                                             74 COMRAM     6     6      0
                                             20 BANK0      2     0      2
                         _readEEPROM
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1550
                                             13 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                      2     2      0    1077
                                             11 COMRAM     2     2      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     227
                                             11 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     132
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     197
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4624
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     263
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _writeEEPROM                                          3     0      3      44
                                              7 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     700
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (5) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         3     3      0     542
                                             10 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     380
                                             10 COMRAM     2     2      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _init_app_ram
     _readEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _readEEPROM
       _calculateSetFilterMask (ARG)
         _readEEPROM
         _ECANSetOperationMode
         __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _SendInformationEvent
           _readEEPROM
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _readEEPROM
         _calculateSetFilterMask (ARG)
           _readEEPROM
           _ECANSetOperationMode
           __CANIDToRegs
       _vscp_writeStdReg
         _vscp_setGUID
           _writeEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_getGUID
           _readEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
             _readEEPROM
     _vscp_writeStdReg
       _vscp_setGUID
         _writeEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_getGUID
         _readEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
           _readEEPROM
     ___lbmod
   _doDM
     _readEEPROM
     _doActionOff
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulse
       _readEEPROM
     _doActionStatus
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionDisable
       _writeEEPROM
       _readEEPROM
     _doActionToggle
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _readEEPROM
     _doActionOff
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _SendInformationEvent
       _readEEPROM
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3B      8C       5       87.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E4       3        0.0%
DATA                 0      0      F0      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sun Mar 22 23:01:23 2015

                      doActionToggle@val 00CA                  __end_of_vscp_readAppReg 37E4  
                  __end_of_sendVSCPFrame 372E                              __CFG_CPB$ON 000000  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000B  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 3424  
                  doActionToggle@dmflags 00C9                              __CFG_LVP$ON 000000  
                            __CFG_WDT$ON 000000                                      l211 223E  
                                    l220 2262                                      l212 2246  
                                    l204 2222                                      l221 226A  
                                    l205 222A                                      l310 0748  
                                    l214 224A                                      l223 226E  
                                    l215 2252                                      l320 0812  
                                    l304 06EE                                      l224 2278  
                                    l208 2232                                      l217 2256  
                                    l209 223A                                      l330 08DA  
                                    l226 236E                                      l218 225E  
                                    l234 23D6                                      l162 349A  
                                    l315 07AE                                      l251 3D84  
                                    l411 20E4                                      l325 0876  
                                    l149 343C                                      l158 3480  
                                    l335 093E                                      l247 3DA6  
                                    l415 1E3E                                      l185 1D86  
                                    l441 2614                                      l290 379A  
                                    l450 2570                                      l442 2470  
                                    l514 3312                                      l452 25B0  
                                    l444 24B0                                      l540 3060  
                                    l622 3E64                                      l470 3560  
                                    l446 24F0                                      l550 3088  
                                    l471 3564                                      l439 2430  
                                    l543 3068                                      l472 3568  
                                    l448 2530                                      l552 308C  
                                    l544 3070                                      l473 356C  
                                    l561 30F8                                      l553 3094  
                                    l474 3570                                      l490 28D6  
                                    l546 3074                                      l395 0FA4  
                                    l467 3558                                      l491 2906  
                                    l555 3098                                      l547 307C  
                                    l539 3058                                      l468 3590  
                                    l492 2936                                      l556 30A0  
                                    l653 3B0A                                      l469 355C  
                                    l493 2966                                      l549 3080  
                                    l494 2996                                      l558 30A4  
                                    l647 38F0                                      l495 29C6  
                                    l559 30AE                                      l912 2EB4  
                                    l488 28A6                                      l658 3BE8  
                                    l907 3004                        doActionStatus@bOn 00CA  
                                    l917 395E                                      l853 2D50  
                                    l845 2CB4                       vscp_readStdReg@reg 000D  
                                    l871 26D6                                      l847 2CD2  
                                    l881 2732                                      l873 26EA  
                                    l865 284E                                      l890 27DA  
                                    l858 267A                                      l875 26FE  
                                    l868 2748                                      l877 2712  
                                    l869 26C8                                      l879 2722  
                                    l889 27B6           __size_of_vscp_handleProbeState 00BA  
                      doActionStatus@arg 0051                           getVSCPFrame@id 0028  
                      doActionStatus@val 00CB            __end_of_vscp_handleProbeState 3678  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                 _calculateSetFilterMask 15EC                                      wreg 000FE8  
            ?_doApplicationOneSecondWork 0001                                     l1032 3AA0  
                                   l1104 3A8C                                     l1108 3E1C  
                                   l1212 1196                                     l1037 3D1E  
                   __size_of_doActionOff 00BA                                     l1055 3662  
                                   l1047 3674                                     l1056 3642  
                                   l1048 3600                                     l1080 3B4E  
                                   l1314 3DFE                                     l1090 3BB0  
                                   l1315 3E00                                     l1091 3BBC  
                                   l1084 3CFA                                     l1148 3D62  
                                   l1236 1326                                     l1237 133A  
                                   l1238 137C                                     l1095 3C12  
                                   l1247 13B8                                     l1271 15EA  
                                   l1178 2BE2                                     l1295 3CCE  
                                   l1279 3C3C                                     l7051 3C48  
                                   l5613 3D92                                     l7303 35C0  
              vscp_getManufacturerId@idx 000B                                     l9011 3388  
                                   l9003 3370                                     l5619 3D70  
                                   l7059 3C5E                                     l8053 3744  
                                   l7245 3D0A                                     l6701 2808  
                                   l6613 26A8                                     l6621 26B6  
                                   l7341 361E                                     l7317 35DE  
                                   l6437 3DB4                                     l4685 1D88  
                                   l9101 2AA4                                     l8071 3782  
                                   l8063 3762                                     l6607 2692  
                                   l6615 26B2                                     l7343 3622  
                                   l7319 35E4                                     l9015 3394  
                                   l9007 337C                                     l9103 2AA8  
                                   l8073 378A                                     l8065 376A  
                                   l8081 37C2                                     l8057 3754  
                                   l7273 31D4                                     l7257 313A  
                                   l6473 3894                                     l7337 361A  
                                   l9041 33E8                                     l9033 33D2  
                                   l9025 33BA                                     l9105 2ABE  
                                   l8075 3792                                     l8067 3772  
                                   l7267 3164                                     l6715 2838  
                                   l9019 33A4                                     l8069 377A  
                                   l7277 322A                                     l6709 2822  
                                   l6485 3BC6                                     l7373 3666  
                                   l9045 33F4                                     l9037 33DC  
                                   l9029 33C6                                     l8501 19D2  
                                   l9117 2AF2                                     l9213 3470  
                                   l9205 345E                                     l8079 379E  
                                   l8087 37E0                                     l6727 3E72  
                                   l9055 3416                                     l9127 2B54  
                                   l9215 3474                                     l9231 34B6  
                                   l6761 390A                                     l6665 275C  
                                   l6489 3BCA                                     l9049 3400  
                                   l9057 3420                                     l8505 19FC  
                                   l9145 2BCA                                     l9137 2BB4  
                                   l9081 2A4A                                     l9401 11B8  
                                   l9225 3494                                     l9217 347A  
                                   l9209 3466                                     l6771 3934  
                                   l6763 3914                                     l6675 277C  
                                   l9155 2BE4                                     l9307 1038  
                                   l9243 34E2                                     l6765 391E  
                                   l6757 38F8                                     l6693 27DC  
                                   l6597 2668                                     l8461 15FE  
                                   l9093 2A86                                     l9405 11C8  
                                   l9341 106A                                     l9229 349E  
                                   l6767 3928                                     l6759 3900  
                                   l6775 3940                                     l9087 2A6A  
                                   l9415 1226                                     l9327 105E  
                                   l9271 0FEC                                     l8607 288E  
                                   l9255 34F6                                     l6769 392E  
                                   l8481 1918                                     l9601 142C  
                                   l9409 11E0                                     l9273 0FF2  
                                   l9265 0FDA                                     l9419 123C  
                                   l9435 126C                                     l9291 102A  
                                   l9267 0FE0                                     l8643 29F6  
                                   l9259 34FE                                     l9195 3438  
                                   l6789 2DE6                                     l8813 3AD8  
                                   l8477 188A                                     l8469 1878  
                                   l9621 1464                                     l9605 1430  
                                   l9533 1370                                     l9525 1360  
                                   l9517 1342                                     l9453 12BE  
                                   l9437 126E                                     l9357 10C6  
                                   l9293 1030                                     l9269 0FE6  
                                   l8645 2A16                                     l8717 39A2  
                                   l8709 396E                                     l8831 2C3E  
                                   l8495 1936                                     l9543 137E  
                                   l9447 1292                                     l9439 1278  
                                   l9367 10FA                                     l8719 39CA  
                                   l8817 3B06                                     l9633 14B2  
                                   l9625 1484                                     l9529 1368  
                                   l9481 12FA                                     l9465 12DA  
                                   l9377 112E                                     l9721 1F38  
                                   l7881 3A6C                                     l8907 2F2C  
                                   l8499 19CA                                     l9651 1500  
                                   l9643 14D2                                     l9547 1398  
                                   l9387 1162                                     l9731 1FE6  
                                   l7875 3A62                                     l8837 2C4E  
                                   l9629 149A                                     l9725 1F72  
                                   l9709 1E58                                     l7885 3A74  
                                   l9813 227C                                     l8871 2D02  
                                   l9655 1528                                     l9583 13E8  
                                   l9399 119A                                     l8599 2856  
                                   l9735 2020                                     l9743 2094  
                                   l9823 2348                                     l9815 2298  
                                   l9751 20EA                                     l8865 2CD4  
                                   l8849 2C78                                     l8945 3B46  
                                   l9593 140A                                     l9569 13C0  
                                   l9497 131A                                     l9737 205A  
                                   l9729 1FAC                                     l9745 20DA  
                                   l9833 2380                                     l8859 2CB8  
                                   l8891 2D48                                     l9915 06FE  
                                   l9827 235A                                     l9755 20F2  
                                   l8885 2D42                                     l8981 3E16  
                                   l9917 0704                                     l9909 06C0  
                                   l9677 1588                                     l9693 1DDA  
                                   l9837 2394                                     l9773 218A  
                                   l8879 2D20                                     l8991 3352  
                                   l9775 21CC                                     l9839 23D2  
                                   l8889 2D46                                     l9937 075A  
                                   l9929 072E                                     l9865 3574  
                                   l9857 353E                                     l9873 35B4  
                                   l9849 350A                                     l9785 222C  
                                   l8995 335C                                     l9957 07BE  
                                   l9949 0782                                     l9885 064E  
                                   l9869 35A2                                     l8999 3366  
                                   l9977 0822                                     l9969 07E6  
                                   l9897 0696                                     l9889 066E  
                                   l9997 0886                                     l9989 084A  
            __size_of_vscp_getMatrixInfo 0020                           sendCANFrame@id 0037  
                                   u7205 2D94                                     u7215 2DB4  
                                   u7225 2E02                                     u6710 38E4  
                                   u6715 38DA                           sendCANFrame@rv 003E  
                                   u6885 2670                                     u6887 2672  
                                   u9830 18AA                                     u9815 16E8  
                                   u9904 1984                                     u9840 18D2  
                                   u9905 1980                                     u7994 318A  
                                   u7995 3186                                     u9835 18A0  
                                   u9924 19A4                                     u9925 199E  
                                   u9845 18C8                                     u9864 18F2  
                                   u9865 18EC                                     u9955 36B4  
                                   u9894 196C                                     u9895 1968  
                       ??_ECANInitialize 0009                vscp_setManufacturerId@idx 000C  
                                   _doDM 1DCE                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 3424  
                                   _init 3B50                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                    __size_of_vscp_getZone 000A  
                    i1WriteTimer0@timer0 0001                         _vscp_writeAppReg 0622  
                            _vscp_minute 0090                              _vscp_second 0095  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 00B6                     doActionPulse@dmflags 000F  
          __size_of_vscp_doOneSecondWork 004E                        vscp_getUserID@idx 000B  
                  __size_of_vscp_setGUID 0022                         _vscp_writeStdReg 2A20  
                        _doActionDisable 3968                              _writeEEPROM 3CB2  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 38F2              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 002C                                    l10103 0B40  
                                  l10201 0EF0                                    l10113 0B9E  
                                  l10017 08EA                                    l10009 08AE  
                                  l10041 0978                                    l10131 0C08  
                                  l10141 0C66                                    l10117 0BA4  
                                  l10061 09EA                                    l10029 0912  
                                  l10207 0F24                                    l10127 0C02  
                                  l10071 0A48                                    l10047 0986  
                                  l10039 094E                                    l10233 0FB8  
                                  l10161 0D52                                    l10057 09E4  
                                  l10217 0F5E                                    l10321 3290  
                                  l10227 0F8E                                    l10163 0D7E  
                                  l10155 0CCE                                    l10075 0A78  
                                  l10147 0C6C                                    l10331 32C2  
                                  l10323 329A                                    l10411 30E4  
                                  l10403 30B2                                    l10237 0FCC  
                                  l10165 0DAA                                    l10157 0CFA  
                                  l10173 0E2E                                    l10085 0AD6  
                                  l10149 0C96                                    l10325 32A4  
                                  l10317 3270                                    l10309 323C  
                                  l10405 30CE                                    l10421 311C  
                                  l10167 0DD6                                    l10159 0D26  
                                  l10175 0E58                                    l10255 2416  
                                  l10247 23DE                                    l10343 32FE  
                                  l10327 32AE                                    l10319 3286  
                                  l10335 32CC                                    _B0CON 000E20  
                                  l10169 0E02                                    l10089 0ADC  
                                  l10433 3D58                                    l10329 32B8  
                                  l10337 32E8                                    l10353 3336  
                                  l10417 310A                                    l10195 0E90  
                                  l10099 0B3A                                    l10291 25F0  
                                  l10371 3042                                    l10363 300E  
                                  l10349 3324                                    l10199 0EBC  
                                  l10295 2626                                    l10375 3062  
                                  _B1CON 000E30                                    ?_doDM 0001  
                                  l10299 2638                                    _B2CON 000E40  
                                  _B3CON 000E50                                    _B4CON 000E60  
          __size_of_SendInformationEvent 006C            __size_of_vscp_getMajorVersion 0002  
                                  _B5CON 000E70               __end_of_vscp_goActiveState 3DE6  
          ??_vscp_writeNicknamePermanent 000B                       writeEEPROM@address 0008  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                            i1_WriteTimer0 3F14  
                                  _EEADR 000FA9                          __end_of___lbmod 3C66  
                _vscp_handleDropNickname 3B8E                                    _BSEL0 000DF8  
                                  u10124 2866                                    u10125 2862  
                                  u11120 2BAC                                    u11125 2BA2  
                                  u12024 2168                                    _T0CON 000FD5  
                                  u12025 2164                                    u11090 2B4A  
                                  u13004 324C                                    u10284 397E  
                                  u12044 21DC                                    u13005 3248  
                                  u10285 397A                                    u12045 21D8  
                                  u12214 351A                                    u11095 2B40  
                                  u12215 3516                                    u13104 301E  
                                  u10625 2EF0                                    u13105 301A  
                                  u10635 2F16                                    u10645 2F40  
                                  u12854 23EE                                    u12855 23EA  
                                  i1l140 0086                                    i1l141 00A6  
                                  i1l142 009A                                    i1l137 0060  
                                  i1l145 00A8                                    i1l139 0084  
                        sendCANFrame@dlc 003B                                    _MSEL0 000DF0  
                                  _MSEL1 000DF1                                    _MSEL2 000DF2  
                                  _IRXIF 007D27                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 3F58  
             _vscp_readNicknamePermanent 3F4E                                    _PORTA 000F80  
                                  _PORTB 000F81                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                         ?_vscp_getSubzone 0001  
                         __CFG_EBTR0$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                           _vscp_getGUID 3EA6                                    doDM@i 00DD  
                          __CFG_WRTD$OFF 000000                           __CFG_EBTRB$OFF 000000  
                           _vscp_getZone 3F30                       vscp_writeAppReg@rv 00CD  
                                  _hours 0088                _vscp_getRegisterPagesUsed 3F70  
                 __size_of_vscp_getEvent 002A                             _vscp_setGUID 3D86  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 3F76  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 3C8C                     _ECANSetOperationMode 3E66  
                        __initialization 3D20                             __end_of_doDM 20E6  
                           __end_of_main 3504                             __end_of_init 3B8E  
                       ?_vscp_readAppReg 0001                  _interrupt_at_low_vector 0018  
                         doDM@class_mask 00D2                           __CFG_OSC$HSPLL 000000  
                      ??_ECANSendMessage 001A                           ?i1_WriteTimer0 0001  
                                 ??_doDM 00CD                         ?_vscp_readStdReg 0001  
                  getVSCPFrame@pvscptype 001E                   ??_vscp_restoreDefaults 000F  
                                 ??_main 0052                                   ??_init 000E  
          __size_of_vscp_handleHeartbeat 003E                 ??_vscp_getManufacturerId 000B  
               ??_vscp_setManufacturerId 000C                 _vscp_handleProtocolEvent 0FD0  
                          __activetblptr 000002                        __RegsToCANID@type 000B  
             ECANReceiveMessage@msgFlags 0011            doApplicationOneSecondWork@bOn 00CF  
              __size_of__ECANPointBuffer 0076                                   _B0TXEN 006FC2  
                                 _B1TXEN 006FC3                                   _B2TXEN 006FC4  
                                 _B3TXEN 006FC5                                   _B4TXEN 006FC6  
                                 _B5TXEN 006FC7                   __size_of_doActionPulse 01D0  
             ECANReceiveMessage@savedPtr 0012                                   _CANCON 000F6F  
                                 _EEDATA 000FA8                                   _EECON2 000FA7  
                                 _CIOCON 000F73                          __CFG_BBSIZ$2048 000000  
                          doDM@type_mask 00D5                       vscp_writeStdReg@rv 001F  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                                   i1l7071 0038  
                                 i1l7081 005E                                   i1l7073 003E  
                             _OpenTimer0 3DE6                                   i1l7091 008A  
                                 i1l7083 0062                                   i1l7075 0042  
                                 i1l7067 0024                                   i1l7093 0094  
                                 i1l7085 006E                                   i1l7077 0052  
                                 i1l7069 002C                                   i1l7095 00A2  
                                 i1l7087 0078                                   i1l7079 005A  
                                 i1l7089 0080                          _init_app_eeprom 1A58  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                __end_of_doActionDisable 39D4                           __CFG_WDTPS$128 000000  
                                 _RXF1EN 006EA1                   ECANReceiveMessage@data 000F  
                 ECANReceiveMessage@mode 0016                   ECANReceiveMessage@temp 0017  
                      getVSCPFrame@pData 0022                        getVSCPFrame@pSize 0021  
                     _vscp_newNodeOnline 3BEA                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0011   vscp_handleProtocolEvent@page_save_1290 00DA  
                         getCANFrame@pid 001C                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0009                            _vscp_getEvent 3C14  
                                 _doWork 3F6E                         OpenTimer0@config 0008  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 000C  
                    vscp_writeAppReg@bOn 00CC          calculateSetFilterMask@rowfilter 003E  
             calculateSetFilterMask@mask 0036                      vscp_writeAppReg@reg 00CE  
             __end_of_vscp_setSegmentCRC 3EDE                      vscp_writeAppReg@val 0051  
                                 clear_0 3D26                                   clear_1 3D32  
                          ?_sendCANFrame 0037             vscp_handleProtocolEvent@byte 00E8  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 0091  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 000B                ??_vscp_getSubMinorVersion 0008  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 000B  
                   ??_vscp_newNodeOnline 004C                          ___lbmod@divisor 0008  
                        doActionToggle@i 00CC                               __accesstop 0060  
                __end_of__initialization 3D38                          ___lbmod@counter 000A  
          __size_of_vscp_getMinorVersion 0002                          doActionStatus@i 00CC  
                        writeEEPROM@data 000A                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 3D42                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0026                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001                            _doActionPulse 2850  
            __end_of_vscp_check_pstorage 3D20                  __size_of_vscp_setUserID 0018  
                        ??i1_WriteTimer0 0003                      ?_vscp_writeRegister 00CF  
                         ??_sendCANFrame 003E                               _doActionOn 23D8  
                ?_calculateSetFilterMask 0001            calculateSetFilterMask@lastOID 0035  
             __end_of_vscp_getFamilyCode 3F4E                            ?__RegsToCANID 0008  
            __size_of_ECANReceiveMessage 020E                       sendVSCPFrame@pData 0045  
             __end_of_vscp_getFamilyType 3F44          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 00CF          __size_of_vscp_setManufacturerId 0022  
               __end_of_vscp_writeAppReg 0FD0                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 1DCE              __end_of_vscp_setControlByte 3ECC  
               __end_of_vscp_writeStdReg 2BE8            calculateSetFilterMask@rowmask 0031  
                     __RegsToCANID@Value 000E                     ??_vscp_writeRegister 0052  
        __end_of_vscp_handleDropNickname 3BBE                             _getVSCPFrame 387A  
                             __pbssBANK0 0060                              ?_OpenTimer0 0001  
             __end_of_vscp_getBufferSize 3F74                         ?_doActionDisable 000B  
                  vscp_writeRegister@reg 00D0                   ??_ECANSetOperationMode 0008  
     __size_of_vscp_getRegisterPagesUsed 0002                             ?_writeEEPROM 0008  
                         ?_doActionPulse 000B          __end_of_vscp_getSubMinorVersion 3F78  
               ECANSetOperationMode@mode 0008                                  _B0RXFUL 007107  
                                _B1RXFUL 007187                     __ECANRxFilterHitInfo 0054  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 000B                                  _B5RXFUL 007387  
         __end_of_calculateSetFilterMask 1A58                  __size_of_doActionToggle 0120  
                       WriteTimer0@timer 000A                  __size_of_doActionStatus 010C  
                                _ECANCON 000F77                            ??_WriteTimer0 000A  
                         ??__RegsToCANID 000C                    sendVSCPFrame@priority 0043  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72           SendInformationEvent@eventClass 00C5  
                    vscp_writeStdReg@idx 001D                      vscp_writeStdReg@reg 0020  
           __end_of_vscp_doOneSecondWork 3A8E              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0041                            ??_doActionOff 00C7  
        __end_of_interrupt_at_low_vector 00B6                        sendCANFrame@pdata 003C  
                  _vscp_handleProbeState 35BE                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 38F2               __end_of_vscp_getMatrixInfo 3DC8  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                    doActionStatus@dmflags 00C9  
                     _vscp_goActiveState 3DC8                   __size_of_sendVSCPFrame 00B6  
           __end_of_SendInformationEvent 3A40             __end_of_vscp_getMajorVersion 3F7C  
                     __size_of_vscp_init 0044                  SendInformationEvent@idx 0050  
              vscp_writeStdReg@code_1270 0019                               _readEEPROM 3F02  
                 _vscp_getManufacturerId 3E7E                   _vscp_setManufacturerId 3D64  
                        _ECANSendMessage 2BE8                      ?_vscp_goActiveState 0001  
                                __Hparam 0000                          ??_vscp_getEvent 002C  
                                __Lparam 0000                       _vscp_node_substate 0093  
             __end_of_vscp_getSegmentCRC 3F62               ??_vscp_handleProtocolEvent 00D1  
                          ??_getCANFrame 001C                             doActionOff@i 00CB  
               vscp_writeStdReg@idx_1271 001E        __end_of_vscp_getRegisterPagesUsed 3F72  
               __size_of_vscp_getMDF_URL 0018                                  ___lbmod 3C3E  
                        getCANFrame@pdlc 001A                  vscp_writeAppReg@val_678 00CB  
                              _FIFOEMPTY 007BA7                          __size_of_doWork 0002  
                           __psmallconst 0600                     __end_of_init_app_ram 3234  
                     _vscp_sendHeartBeat 3C66                                  __pcinit 3D20  
                         _vscp_deviceURL 0600                              ?_doActionOn 0051  
                                __ramtop 0600                      __size_of_OpenTimer0 001E  
                                __ptext0 3424                                  __ptext1 3F6E  
                                __ptext2 20E6                                  __ptext3 3A40  
                                __ptext4 3C66                                  __ptext5 3F26  
                                __ptext6 3F30                                  __ptext7 3F6A  
                                __ptext8 1DCE                                  __ptext9 3006  
                         _vscp_getUserID 3E92                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 004C                         doActionDisable@i 0010  
                  vscp_writeStdReg@value 000F                      ?_vscp_sendHeartBeat 00C5  
               ??_vscp_handleSetNickname 000C                                  _minutes 0089  
                                _seconds 008B                      __end_of_WriteTimer0 3F02  
                       ?_init_app_eeprom 0001                        vscp_readAppReg@rv 000B  
                     vscp_getMDF_URL@idx 0009            vscp_handleProtocolEvent@bytes 00DE  
                   end_of_initialization 3D38                      __end_of_doActionOff 35BE  
           __end_of_vscp_handleHeartbeat 3B50                 __size_of_vscp_getSubzone 000A  
                          __Lmediumconst 0000                     __end_of_sendCANFrame 3B12  
              vscp_handleProtocolEvent@i 00EA                vscp_handleProtocolEvent@j 00EB  
              vscp_handleProtocolEvent@k 00E5                          ??_doActionPulse 000C  
                 doActionDisable@dmflags 000E                     ??_vscp_sendHeartBeat 004C  
                         _vscp_sendEvent 3C8C                        ECANSendMessage@id 0012  
                      ECANSendMessage@pb 001B                                  postdec2 000FDD  
                __size_of_ECANInitialize 0096                           _vscp_setUserID 3E1E  
                                postinc0 000FEE                                  postinc2 000FDE  
                 __end_of_vscp_deviceURL 0620      __end_of_vscp_writeNicknamePermanent 3EF0  
            _vscp_writeNicknamePermanent 3EDE                       __ECANPointBuffer@b 000B  
                          _sendVSCPFrame 3678                   __end_of_vscp_getUserID 3EA6  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0078CB  
                      __end_of_vscp_init 3AD2                           _vscp_probe_cnt 0094  
                              _PORTCbits 000F82                      __end_of_getCANFrame 3BEA  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
               __size_of_vscp_readAppReg 00B6                         ___lbmod@dividend 0009  
                       doActionPulse@arg 000B                           _vscp_statuscnt 0058  
               __size_of_vscp_readStdReg 00E4                         doActionPulse@val 0010  
                     _vscp_setSegmentCRC 3ECC                        readEEPROM@address 0008  
             vscp_handleProtocolEvent@cb 00E3                  __end_of_ECANSendMessage 2D52  
                      vscp_readStdReg@rv 000C                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 00DC  
                   __end_of__RegsToCANID 2EB6                              ?_readEEPROM 0008  
                    __size_of_doActionOn 026A                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 3CB2                               _vscp_error 3F6A  
                   _vscp_doOneSecondWork 3A40                       i1WriteTimer0@timer 0003  
                             _vscp_timer 0086                   __end_of_vscp_setUserID 3E36  
                 vscp_sendHeartBeat@zone 004C                           ?_sendVSCPFrame 003F  
            doApplicationOneSecondWork@i 00D1                           _doActionToggle 3006  
                   __size_of_writeEEPROM 0026                           _doActionStatus 3234  
                        ?_vscp_getUserID 0001                           __end_of_doWork 3F70  
           __end_of_vscp_getMinorVersion 3F7A                              _WriteTimer0 3EF0  
                   _SendInformationEvent 39D4                     _vscp_getMajorVersion 3F7A  
                   ??_vscp_setSegmentCRC 000B                        ??_vscp_getMDF_URL 0008  
          ??_vscp_getBootLoaderAlgorithm 0008                        ?_vscp_writeAppReg 0051  
                    start_initialization 3D20                              _doActionOff 3504  
        __size_of_vscp_handleSetNickname 0024                       ??_vscp_writeAppReg 00C7  
                      ?_vscp_writeStdReg 000F                   _relay_protection_timer 0060  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 0008                       ??_vscp_writeStdReg 0010  
                     _vscp_getFamilyCode 3F44                           ??__CANIDToRegs 000F  
                     _vscp_getFamilyType 3F3A                         doDM@class_filter 00D0  
                    sendVSCPFrame@nodeid 0042                        _vscp_readRegister 3E04  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 00E2  
                  ?_vscp_doOneSecondWork 0001                    ECANReceiveMessage@ptr 0018  
                    ?_vscp_getFamilyCode 0008                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 15EC                                _doDM$2150 00DA  
                              _doDM$2151 00DB                          ?_vscp_setUserID 000B  
                              _doDM$2146 00D6                                _doDM$2147 00D7  
                              _doDM$2148 00D8                                _doDM$2149 00D9  
                    ?_vscp_getFamilyType 0008                    __size_of_init_app_ram 010E  
               ?_vscp_handleDropNickname 0001                   __end_of_doActionToggle 3126  
                      ??_vscp_getSubzone 000B                   __end_of_doActionStatus 3340  
               __end_of__ECANPointBuffer 3968                        __CANIDToRegs@type 000E  
                            _getCANFrame 3BBE                                 ??_doWork 0008  
                     _vscp_getBufferSize 3F72              vscp_handleProtocolEvent@len 00DF  
                         doActionOff@arg 0051              vscp_handleProtocolEvent@pos 00DD  
             __end_of_ECANReceiveMessage 2850                           doActionOff@val 00CA  
                    ??_vscp_readRegister 000E           __size_of_vscp_goBootloaderMode 0018  
                  ?_SendInformationEvent 00C5                    ?_vscp_getMajorVersion 0001  
                  __end_ofi1_WriteTimer0 3F26            __end_of_vscp_goBootloaderMode 3E66  
                   _vscp_handleHeartbeat 3B12                       __end_of_OpenTimer0 3E04  
    __size_of_doApplicationOneSecondWork 02F2                      ?_vscp_getBufferSize 0001  
                    __size_of_readEEPROM 0012                           doActionPulse@i 0011  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 000C  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0052  
                   ??_vscp_getFamilyType 000C                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 00B1                         _vscp_alarmstatus 008C  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0040  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 000B  
                          ?_vscp_setGUID 000B              __size_of_vscp_writeRegister 0022  
                       ?_ECANSendMessage 0012                        ??_vscp_readAppReg 000B  
                      sendVSCPFrame@size 0044                __end_of_vscp_readRegister 3E1E  
                      _relay_pulse_flags 008A                             _init_app_ram 3126  
                      _relay_pulse_timer 0070             __size_of_vscp_setControlByte 0012  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 000C  
                   ??_vscp_getBufferSize 0008                              ?_vscp_error 0001  
                     _vscp_getMatrixInfo 3DA8                   _vscp_handleSetNickname 3CD8  
          __size_of_ECANSetOperationMode 0018                          ??_sendVSCPFrame 00B1  
                        ?_doActionToggle 0051                           _ECANInitialize 37E4  
                        ?_doActionStatus 0051                 __size_of_doActionDisable 006C  
                               ?___lbmod 0008                      ?_vscp_getMatrixInfo 0001  
                calculateSetFilterMask@i 0043                  calculateSetFilterMask@j 0042  
                        vscp_getGUID@idx 000B                              __pintcodelo 0018  
                           ??_doActionOn 00C7                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1280 00E1               vscp_setManufacturerId@data 000B  
                           _sendCANFrame 3AD2                              __smallconst 0600  
                      WriteTimer0@timer0 0008                       _vscp_getSegmentCRC 3F58  
                         ??_vscp_getGUID 000B                           ??_vscp_getZone 000B  
                            doActionOn@i 00CC           __end_of_vscp_getManufacturerId 3E92  
         __end_of_vscp_setManufacturerId 3D86                    __size_of__RegsToCANID 0164  
       vscp_handleProtocolEvent@pos_1279 00E0                          doDM@type_filter 00D4  
                         ??_vscp_setGUID 000C                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 0008                         _vscp_configtimer 0084  
                   vscp_writeStdReg@code 0015                       doActionDisable@arg 000B  
                     doActionDisable@val 000F          SendInformationEvent@eventTypeId 00C6  
                 ??_vscp_doOneSecondWork 004D                   sendVSCPFrame@vscpclass 003F  
                               _LATBbits 000F8A                     _vscp_getMinorVersion 3F78  
                               _LATCbits 000F8B                                _sendTimer 0055  
                     __end_of_doActionOn 2642                   __end_of_ECANInitialize 387A  
                               _PIR2bits 000FA1                                 i1u780_20 006E  
                               i1u780_21 006C                                 i1u781_20 0078  
                               i1u781_21 0076                                 i1u782_20 0080  
                               i1u782_21 007E                                 i1u783_20 0094  
                               i1u783_21 0092                                 i1u784_20 00A2  
                               i1u784_21 00A0                                 i1u778_20 002C  
                               i1u778_21 002A                                 i1u779_20 005A  
                               i1u779_21 0058                         ECANSendMessage@i 0034  
                       ECANSendMessage@j 002F                    __end_of_vscp_getEvent 3C3E  
                               _RXF0EIDH 000F02                                 _RXF0EIDL 000F03  
                               _RXB0OVFL 007BA7                                 _RXF1EIDH 000F06  
                               _RXF1EIDL 000F07                                 _RXB1OVFL 007BA6  
                               _RXF0SIDH 000F00                                 _RXF0SIDL 000F01  
                               _RXF1SIDH 000F04                                 _RXF1SIDL 000F05  
                               _RXM0EIDH 000F1A                                 _RXM0EIDL 000F1B  
                        vscp_getEvent@rv 002C                                 _RXM1EIDH 000F1E  
                               _RXM1EIDL 000F1F                     ??_vscp_getSegmentCRC 000B  
                               _RXFBCON0 000DE0                                 _RXFBCON1 000DE1  
                               _RXFBCON2 000DE2                                 _RXFBCON3 000DE3  
                               _RXFBCON4 000DE4                                 _RXFBCON5 000DE5  
                               _RXFBCON6 000DE6                                 _RXFBCON7 000DE7  
                               _RXM0SIDH 000F18                                 _RXM0SIDL 000F19  
                 ??_SendInformationEvent 004B                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 0008                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 004C  
                     vscp_setUserID@data 000B                     __end_of__CANIDToRegs 3006  
                           __RegsToCANID 2D52                       _vscp_probe_address 0057  
                     doActionOff@dmflags 00C9              __size_of_vscp_goActiveState 001E  
                    getVSCPFrame@pNodeId 001F                                _vscp_init 3A8E  
                              _vscp_imsg 0096                                _vscp_hour 008E  
                              _vscp_omsg 00A4                         vscp_setGUID@data 000B  
      __size_of_vscp_handleProtocolEvent 061C                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001                 SendInformationEvent@data 004D  
   __size_of_vscp_writeNicknamePermanent 0012       __end_of_doApplicationOneSecondWork 23D8  
             _doApplicationOneSecondWork 20E6                         _vscp_page_select 0052  
             __size_of_vscp_readRegister 001A                        _measurement_clock 0080  
                  ?_vscp_getMinorVersion 0001                             ??_readEEPROM 000A  
               __size_of_init_app_eeprom 0376             __end_of_vscp_restoreDefaults 3F6A  
                             _EECON1bits 000FA6                          ?_ECANInitialize 0001  
               ??_calculateSetFilterMask 0012                                 __Hrparam 0000  
                   ECANReceiveMessage@id 0014              __size_of_vscp_sendHeartBeat 0026  
                       ??_vscp_getUserID 000B                          _vscp_getMDF_URL 3E36  
                               __Lrparam 0000                    __end_of_doActionPulse 2A20  
                       __CANIDToRegs@val 000A                         __CANIDToRegs@ptr 0008  
                          doActionOn@arg 0051                            doActionOn@val 00CB  
                       _vscp_initledfunc 0056                         __size_of___lbmod 0028  
                 ??_vscp_handleHeartbeat 000C                         getCANFrame@flags 001D  
                           ?_WriteTimer0 0008                         getCANFrame@pdata 001B  
                      ??_doActionDisable 000C               vscp_writeAppReg@bInfoEvent 00CA  
                     __end_of_readEEPROM 3F14                               ?_vscp_init 0001  
                           ?_doActionOff 0051                                 __ptext10 3968  
                               __ptext11 3234                                 __ptext20 1A58  
                               __ptext12 2850                                 __ptext21 3F3A  
                               __ptext13 23D8                                 __ptext30 3340  
                               __ptext22 3F44                                 __ptext14 3504  
                               __ptext31 3F70                                 __ptext23 3E1E  
                               __ptext15 0FD0                                 __ptext40 3F7A  
                               __ptext32 3F72                                 __ptext24 3D64  
                               __ptext16 3C3E                                 __ptext41 3BEA  
                               __ptext33 3F74                                 __ptext25 3D86  
                               __ptext17 3D42                                 __ptext50 3DC8  
                               __ptext42 3B8E                                 __ptext34 3E7E  
                               __ptext26 0622                                 __ptext18 2A20  
                               __ptext51 3C8C                                 __ptext43 3A8E  
                               __ptext35 3E92                                 __ptext27 15EC  
                               __ptext19 3F62                                 __ptext60 2D52  
                               __ptext52 3678                                 __ptext44 3F4E  
                               __ptext36 3E36                                 __ptext28 39D4  
                               __ptext61 38F2                                 __ptext53 3AD2  
                               __ptext45 3CD8                                 __ptext37 3EA6  
                               __ptext29 3E04                                 __ptext70 3E66  
                               __ptext62 3CFC                                 __ptext54 2BE8  
                               __ptext46 3B12                                 __ptext38 3F76  
                               __ptext71 3DE6                                 __ptext63 3EBA  
                               __ptext55 2EB6                                 __ptext47 3DA8  
                               __ptext39 3F78                                 __ptext72 3126  
                               __ptext64 3ECC                                 __ptext56 3C14  
                               __ptext48 3E4E                                 __ptext73 3EF0  
                               __ptext65 3F58                                 __ptext57 387A  
                               __ptext49 35BE                                 __ptext74 372E  
                               __ptext66 3EDE                                 __ptext58 3BBE  
                               __ptext75 3F02                                 __ptext67 3CB2  
                               __ptext59 2642                                 __ptext68 3B50  
                               __ptext77 3F14                                 __ptext69 37E4  
         vscp_goBootloaderMode@algorithm 000B                vscp_sendHeartBeat@subzone 00C5  
                          ?_getVSCPFrame 001E                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 3F26             calculateSetFilterMask@filter 003A  
                       ??_vscp_setUserID 000C                            __size_of_doDM 0318  
                          __size_of_main 00E0                            __size_of_init 003E  
              __size_of_vscp_writeAppReg 09AE                      _vscp_check_pstorage 3CFC  
                          init_app_ram@i 000D           vscp_handleProtocolEvent@i_1281 00E9  
         vscp_handleProtocolEvent@i_1278 00E7           vscp_handleProtocolEvent@i_1289 00E4  
                   __end_of_vscp_getGUID 3EBA                            ??_writeEEPROM 000B  
              __size_of_vscp_writeStdReg 01C8                      ECANSendMessage@data 0016  
               ECANSendMessage@tempBSEL0 0030                             ?_getCANFrame 001A  
                    ECANSendMessage@mode 002D                     __end_of_vscp_getZone 3F3A  
                    ECANSendMessage@temp 0033                        ?__ECANPointBuffer 0008  
                      doActionOn@dmflags 00CA                        vscp_setUserID@idx 000C  
                   __end_of_vscp_setGUID 3DA8                       vscp_readAppReg@reg 000C  
                     ??__ECANPointBuffer 000B           vscp_handleProtocolEvent@offset 00DC  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 000C  
                       init_app_eeprom@i 000D                         init_app_eeprom@j 000E  
                    _vscp_setControlByte 3EBA              __size_of_vscp_setSegmentCRC 0012  
                        _vscp_readAppReg 372E                     ?_vscp_check_pstorage 0001  
                            _RXB1CONbits 000F50         __size_of_vscp_handleDropNickname 0030  
                             _INTCONbits 000FF2             ??_vscp_readNicknamePermanent 000B  
                    ECANReceiveMessage@i 0015                          _vscp_guid_reset 008D  
                        _vscp_readStdReg 3340             vscp_handleDropNickname@bytes 000C  
             __end_of_vscp_newNodeOnline 3C14                       _ECANReceiveMessage 2642  
                         ??_getVSCPFrame 0023                          _vscp_initbtncnt 008F  
                        sendVSCPFrame@id 0047                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 0008                  vscp_getMatrixInfo@pData 0001  
                __end_of_vscp_getMDF_URL 3E4E                     ?_vscp_setControlByte 0001  
                    ?_ECANReceiveMessage 000F                  ?_vscp_handleSetNickname 0001  
                       ??_doActionToggle 00C7         __size_of_vscp_getSubMinorVersion 0002  
                       ??_doActionStatus 00C7                          _vscp_node_state 0092  
                           ??_vscp_error 0008                  ECANSendMessage@msgFlags 0019  
                    vscp_getMatrixInfo@i 0008          __size_of_calculateSetFilterMask 046C  
                vscp_setControlByte@ctrl 000B                       ECANSendMessage@ptr 0035  
                      ??_init_app_eeprom 000B                    __size_of__CANIDToRegs 0150  
                         readEEPROM@data 000A      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 3F76              _vscp_getBootLoaderAlgorithm 3F74  
       __size_of_interrupt_at_low_vector 009E                   ECANSendMessage@dataLen 0018  
                    __end_of_writeEEPROM 3CD8                      __ECANPointBuffer@pt 000C  
                   ??_ECANReceiveMessage 0012                    ??_vscp_check_pstorage 000C  
                 ECANSendMessage@buffers 002E                    _vscp_goBootloaderMode 3E4E  
           __end_of_ECANSetOperationMode 3E7E                     _vscp_restoreDefaults 3F62  
            __size_of_vscp_getFamilyCode 000A                              ??_vscp_init 000B  
                __end_of_vscp_getSubzone 3F30              __size_of_vscp_getFamilyType 000A  
                             _RXM1EXIDEN 0078EB               __end_of_vscp_writeRegister 3D64  
                     __end_of_vscp_error 3F6E                   ECANSendMessage@tempPtr 0031  
         __end_of_vscp_handleSetNickname 3CFC       vscp_handleProtocolEvent@bytes_1286 00E6  
                  ??_vscp_setControlByte 000B                     vscp_readRegister@reg 000E  
           ??_doApplicationOneSecondWork 00CC                             __CANIDToRegs 2EB6  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00D8  
            __size_of_vscp_getBufferSize 0002        doApplicationOneSecondWork@ctrlreg 00D0  
               __size_of_ECANSendMessage 016A                        doActionToggle@bOn 00CB  
                      doActionToggle@arg 0051  
