

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Thu Feb 12 23:21:25 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    88                           	psect	text77,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    91  0000                     
    92                           	psect	smallconst
    93  000600                     __psmallconst:
    94                           	opt stack 0
    95  000600                     _vscp_deviceURL:
    96                           	opt stack 0
    97  000600  77                 	db	119
    98  000601  77                 	db	119
    99  000602  77                 	db	119
   100  000603  2E                 	db	46
   101  000604  65                 	db	101
   102  000605  75                 	db	117
   103  000606  72                 	db	114
   104  000607  6F                 	db	111
   105  000608  73                 	db	115
   106  000609  6F                 	db	111
   107  00060A  75                 	db	117
   108  00060B  72                 	db	114
   109  00060C  63                 	db	99
   110  00060D  65                 	db	101
   111  00060E  2E                 	db	46
   112  00060F  73                 	db	115
   113  000610  65                 	db	101
   114  000611  2F                 	db	47
   115  000612  70                 	db	112
   116  000613  61                 	db	97
   117  000614  72                 	db	114
   118  000615  69                 	db	105
   119  000616  73                 	db	115
   120  000617  5F                 	db	95
   121  000618  30                 	db	48
   122  000619  31                 	db	49
   123  00061A  30                 	db	48
   124  00061B  2E                 	db	46
   125  00061C  78                 	db	120
   126  00061D  6D                 	db	109
   127  00061E  6C                 	db	108
   128  00061F  00                 	db	0
   129  000620                     __end_of_vscp_deviceURL:
   130                           	opt stack 0
   131  0000                     _BRGCON1	set	3952
   132  0000                     _BRGCON2	set	3953
   133  0000                     _BRGCON3	set	3954
   134  0000                     _BSEL0	set	3576
   135  0000                     _CANCON	set	3951
   136  0000                     _CIOCON	set	3955
   137  0000                     _ECANCON	set	3959
   138  0000                     _EEADR	set	4009
   139  0000                     _EECON1bits	set	4006
   140  0000                     _EECON2	set	4007
   141  0000                     _EEDATA	set	4008
   142  0000                     _INTCONbits	set	4082
   143  0000                     _LATBbits	set	3978
   144  0000                     _LATCbits	set	3979
   145  0000                     _MSEL0	set	3568
   146  0000                     _MSEL1	set	3569
   147  0000                     _MSEL2	set	3570
   148  0000                     _PIR2bits	set	4001
   149  0000                     _PORTA	set	3968
   150  0000                     _PORTB	set	3969
   151  0000                     _PORTC	set	3970
   152  0000                     _PORTCbits	set	3970
   153  0000                     _RXB1CONbits	set	3920
   154  0000                     _RXF0EIDH	set	3842
   155  0000                     _RXF0EIDL	set	3843
   156  0000                     _RXF0SIDH	set	3840
   157  0000                     _RXF0SIDL	set	3841
   158  0000                     _RXF1EIDH	set	3846
   159  0000                     _RXF1EIDL	set	3847
   160  0000                     _RXF1SIDL	set	3845
   161  0000                     _RXFBCON0	set	3552
   162  0000                     _RXFBCON1	set	3553
   163  0000                     _RXFBCON2	set	3554
   164  0000                     _RXFBCON3	set	3555
   165  0000                     _RXFBCON4	set	3556
   166  0000                     _RXFBCON5	set	3557
   167  0000                     _RXFBCON6	set	3558
   168  0000                     _RXFBCON7	set	3559
   169  0000                     _RXFCON0	set	3540
   170  0000                     _RXFCON1	set	3541
   171  0000                     _RXM0EIDH	set	3866
   172  0000                     _RXM0EIDL	set	3867
   173  0000                     _RXM0SIDH	set	3864
   174  0000                     _RXM0SIDL	set	3865
   175  0000                     _RXM1EIDH	set	3870
   176  0000                     _RXM1EIDL	set	3871
   177  0000                     _RXM1SIDL	set	3869
   178  0000                     _T0CON	set	4053
   179  0000                     _T0CONbits	set	4053
   180  0000                     _TMR0H	set	4055
   181  0000                     _TMR0L	set	4054
   182  0000                     _TRISA	set	3986
   183  0000                     _TRISB	set	3987
   184  0000                     _TRISC	set	3988
   185  0000                     _B0RXFUL	set	28935
   186  0000                     _B0TXEN	set	28610
   187  0000                     _B1RXFUL	set	29063
   188  0000                     _B1TXEN	set	28611
   189  0000                     _B2RXFUL	set	29191
   190  0000                     _B2TXEN	set	28612
   191  0000                     _B3RXFUL	set	29319
   192  0000                     _B3TXEN	set	28613
   193  0000                     _B4RXFUL	set	29447
   194  0000                     _B4TXEN	set	28614
   195  0000                     _B5RXFUL	set	29575
   196  0000                     _B5TXEN	set	28615
   197  0000                     _FIFOEMPTY	set	31655
   198  0000                     _IRXIF	set	32039
   199  0000                     _MDSEL0	set	31678
   200  0000                     _MDSEL1	set	31679
   201  0000                     _RXB0FILHIT0	set	31488
   202  0000                     _RXB0FUL	set	31495
   203  0000                     _RXB0IF	set	32032
   204  0000                     _RXB0OVFL	set	31655
   205  0000                     _RXB1IF	set	32033
   206  0000                     _RXB1OVFL	set	31654
   207  0000                     _RXF1EN	set	28321
   208  0000                     _RXM0EXIDM	set	30923
   209  0000                     _RXM1EXIDEN	set	30955
   210  0000                     _B0CON	set	3616
   211  0000                     _B1CON	set	3632
   212  0000                     _B2CON	set	3648
   213  0000                     _B3CON	set	3664
   214  0000                     _B4CON	set	3680
   215  0000                     _B5CON	set	3696
   216  0000                     _RXB0CON	set	3936
   217  0000                     _RXB1CON	set	3920
   218  0000                     _RXF1SIDH	set	3844
   219  0000                     _RXM1SIDH	set	3868
   220  0000                     _TXB0CON	set	3904
   221  0000                     _TXB1CON	set	3888
   222  0000                     _TXB2CON	set	3872
   223                           
   224                           ; #config settings
   225  000620  00                 	db	0	; dummy byte at the end
   226  0000                     
   227                           	psect	cinit
   228  003D42                     __pcinit:
   229                           	opt stack 0
   230  003D42                     start_initialization:
   231                           	opt stack 0
   232  003D42                     __initialization:
   233                           	opt stack 0
   234                           
   235                           ; Clear objects allocated to BANK0 (81 bytes)
   236  003D42  EE00  F060         	lfsr	0,__pbssBANK0
   237  003D46  0E51               	movlw	81
   238  003D48                     clear_0:
   239  003D48  6AEE               	clrf	postinc0,c
   240  003D4A  06E8               	decf	wreg,f,c
   241  003D4C  E1FD               	bnz	clear_0
   242                           
   243                           ; Clear objects allocated to COMRAM (7 bytes)
   244  003D4E  EE00  F052         	lfsr	0,__pbssCOMRAM
   245  003D52  0E07               	movlw	7
   246  003D54                     clear_1:
   247  003D54  6AEE               	clrf	postinc0,c
   248  003D56  06E8               	decf	wreg,f,c
   249  003D58  E1FD               	bnz	clear_1
   250  003D5A                     end_of_initialization:
   251                           	opt stack 0
   252  003D5A                     __end_of__initialization:
   253                           	opt stack 0
   254  003D5A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   255  003D5C  6EF8               	movwf	tblptru,c
   256  003D5E  0100               	movlb	0
   257  003D60  EF23  F01A         	goto	_main	;jump to C main() function
   258                           tblptru	equ	0xFF8
   259                           postinc0	equ	0xFEE
   260                           wreg	equ	0xFE8
   261                           
   262                           	psect	bssCOMRAM
   263  000052                     __pbssCOMRAM:
   264                           	opt stack 0
   265  000052                     _vscp_page_select:
   266                           	opt stack 0
   267  000052                     	ds	2
   268  000054                     __ECANRxFilterHitInfo:
   269                           	opt stack 0
   270  000054                     	ds	1
   271  000055                     _sendTimer:
   272                           	opt stack 0
   273  000055                     	ds	1
   274  000056                     _vscp_initledfunc:
   275                           	opt stack 0
   276  000056                     	ds	1
   277  000057                     _vscp_probe_address:
   278                           	opt stack 0
   279  000057                     	ds	1
   280  000058                     _vscp_statuscnt:
   281                           	opt stack 0
   282  000058                     	ds	1
   283                           tblptru	equ	0xFF8
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287                           	psect	bssBANK0
   288  000060                     __pbssBANK0:
   289                           	opt stack 0
   290  000060                     _relay_protection_timer:
   291                           	opt stack 0
   292  000060                     	ds	16
   293  000070                     _relay_pulse_timer:
   294                           	opt stack 0
   295  000070                     	ds	16
   296  000080                     _measurement_clock:
   297                           	opt stack 0
   298  000080                     	ds	4
   299  000084                     _vscp_configtimer:
   300                           	opt stack 0
   301  000084                     	ds	2
   302  000086                     _vscp_timer:
   303                           	opt stack 0
   304  000086                     	ds	2
   305  000088                     _hours:
   306                           	opt stack 0
   307  000088                     	ds	1
   308  000089                     _minutes:
   309                           	opt stack 0
   310  000089                     	ds	1
   311  00008A                     _relay_pulse_flags:
   312                           	opt stack 0
   313  00008A                     	ds	1
   314  00008B                     _seconds:
   315                           	opt stack 0
   316  00008B                     	ds	1
   317  00008C                     _vscp_alarmstatus:
   318                           	opt stack 0
   319  00008C                     	ds	1
   320  00008D                     _vscp_guid_reset:
   321                           	opt stack 0
   322  00008D                     	ds	1
   323  00008E                     _vscp_hour:
   324                           	opt stack 0
   325  00008E                     	ds	1
   326  00008F                     _vscp_initbtncnt:
   327                           	opt stack 0
   328  00008F                     	ds	1
   329  000090                     _vscp_minute:
   330                           	opt stack 0
   331  000090                     	ds	1
   332  000091                     _vscp_nickname:
   333                           	opt stack 0
   334  000091                     	ds	1
   335  000092                     _vscp_node_state:
   336                           	opt stack 0
   337  000092                     	ds	1
   338  000093                     _vscp_node_substate:
   339                           	opt stack 0
   340  000093                     	ds	1
   341  000094                     _vscp_probe_cnt:
   342                           	opt stack 0
   343  000094                     	ds	1
   344  000095                     _vscp_second:
   345                           	opt stack 0
   346  000095                     	ds	1
   347  000096                     _vscp_imsg:
   348                           	opt stack 0
   349  000096                     	ds	14
   350  0000A4                     _vscp_omsg:
   351                           	opt stack 0
   352  0000A4                     	ds	13
   353                           tblptru	equ	0xFF8
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           
   357                           	psect	cstackBANK0
   358  0000B1                     __pcstackBANK0:
   359                           	opt stack 0
   360  0000B1                     ??_sendVSCPFrame:
   361                           
   362                           ; 0 bytes @ 0x0
   363  0000B1                     	ds	20
   364  0000C5                     ?_SendInformationEvent:
   365                           	opt stack 0
   366  0000C5                     ?_vscp_sendHeartBeat:
   367                           	opt stack 0
   368  0000C5                     SendInformationEvent@eventClass:
   369                           	opt stack 0
   370  0000C5                     vscp_sendHeartBeat@subzone:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x14
   374  0000C5                     	ds	1
   375  0000C6                     SendInformationEvent@eventTypeId:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x15
   379  0000C6                     	ds	1
   380  0000C7                     ??_doActionOff:
   381  0000C7                     ??_doActionOn:
   382  0000C7                     ??_doActionStatus:
   383  0000C7                     ??_doActionToggle:
   384  0000C7                     ??_vscp_writeAppReg:
   385                           
   386                           ; 0 bytes @ 0x16
   387  0000C7                     	ds	2
   388  0000C9                     doActionOff@dmflags:
   389                           	opt stack 0
   390  0000C9                     doActionStatus@dmflags:
   391                           	opt stack 0
   392  0000C9                     doActionToggle@dmflags:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x18
   396  0000C9                     	ds	1
   397  0000CA                     vscp_writeAppReg@bInfoEvent:
   398                           	opt stack 0
   399  0000CA                     doActionOn@dmflags:
   400                           	opt stack 0
   401  0000CA                     doActionOff@val:
   402                           	opt stack 0
   403  0000CA                     doActionStatus@bOn:
   404                           	opt stack 0
   405  0000CA                     doActionToggle@val:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x19
   409  0000CA                     	ds	1
   410  0000CB                     vscp_writeAppReg@val_677:
   411                           	opt stack 0
   412  0000CB                     doActionOn@val:
   413                           	opt stack 0
   414  0000CB                     doActionOff@i:
   415                           	opt stack 0
   416  0000CB                     doActionStatus@val:
   417                           	opt stack 0
   418  0000CB                     doActionToggle@bOn:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x1A
   422  0000CB                     	ds	1
   423  0000CC                     ??_doApplicationOneSecondWork:
   424  0000CC                     vscp_writeAppReg@bOn:
   425                           	opt stack 0
   426  0000CC                     doActionOn@i:
   427                           	opt stack 0
   428  0000CC                     doActionStatus@i:
   429                           	opt stack 0
   430  0000CC                     doActionToggle@i:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x1B
   434  0000CC                     	ds	1
   435  0000CD                     ??_doDM:
   436  0000CD                     vscp_writeAppReg@rv:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x1C
   440  0000CD                     	ds	1
   441  0000CE                     vscp_writeAppReg@reg:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x1D
   445  0000CE                     	ds	1
   446  0000CF                     ?_vscp_writeRegister:
   447                           	opt stack 0
   448  0000CF                     doApplicationOneSecondWork@bOn:
   449                           	opt stack 0
   450  0000CF                     vscp_writeRegister@value:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x1E
   454  0000CF                     	ds	1
   455  0000D0                     doApplicationOneSecondWork@ctrlreg:
   456                           	opt stack 0
   457  0000D0                     vscp_writeRegister@reg:
   458                           	opt stack 0
   459  0000D0                     doDM@class_filter:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x1F
   463  0000D0                     	ds	1
   464  0000D1                     ??_vscp_handleProtocolEvent:
   465  0000D1                     doApplicationOneSecondWork@i:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x20
   469  0000D1                     	ds	1
   470  0000D2                     doDM@class_mask:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x21
   474  0000D2                     	ds	2
   475  0000D4                     doDM@type_filter:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x23
   479  0000D4                     	ds	1
   480  0000D5                     doDM@type_mask:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x24
   484  0000D5                     	ds	1
   485  0000D6                     _doDM$2144:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x25
   489  0000D6                     	ds	1
   490  0000D7                     _doDM$2145:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0x26
   494  0000D7                     	ds	1
   495  0000D8                     _doDM$2146:
   496                           	opt stack 0
   497  0000D8                     vscp_handleProtocolEvent@page_save:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x27
   501  0000D8                     	ds	1
   502  0000D9                     _doDM$2147:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x28
   506  0000D9                     	ds	1
   507  0000DA                     _doDM$2148:
   508                           	opt stack 0
   509  0000DA                     vscp_handleProtocolEvent@page_save_1288:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x29
   513  0000DA                     	ds	1
   514  0000DB                     _doDM$2149:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x2A
   518  0000DB                     	ds	1
   519  0000DC                     doDM@dmflags:
   520                           	opt stack 0
   521  0000DC                     vscp_handleProtocolEvent@offset:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x2B
   525  0000DC                     	ds	1
   526  0000DD                     doDM@i:
   527                           	opt stack 0
   528  0000DD                     vscp_handleProtocolEvent@pos:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x2C
   532  0000DD                     	ds	1
   533  0000DE                     vscp_handleProtocolEvent@bytes:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x2D
   537  0000DE                     	ds	1
   538  0000DF                     vscp_handleProtocolEvent@len:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x2E
   542  0000DF                     	ds	1
   543  0000E0                     vscp_handleProtocolEvent@pos_1277:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x2F
   547  0000E0                     	ds	1
   548  0000E1                     vscp_handleProtocolEvent@len_1278:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x30
   552  0000E1                     	ds	1
   553  0000E2                     vscp_handleProtocolEvent@bytes_this_time:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x31
   557  0000E2                     	ds	1
   558  0000E3                     vscp_handleProtocolEvent@cb:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x32
   562  0000E3                     	ds	1
   563  0000E4                     vscp_handleProtocolEvent@i_1287:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x33
   567  0000E4                     	ds	1
   568  0000E5                     vscp_handleProtocolEvent@k:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x34
   572  0000E5                     	ds	1
   573  0000E6                     vscp_handleProtocolEvent@bytes_1284:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x35
   577  0000E6                     	ds	1
   578  0000E7                     vscp_handleProtocolEvent@i_1276:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x36
   582  0000E7                     	ds	1
   583  0000E8                     vscp_handleProtocolEvent@byte:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0x37
   587  0000E8                     	ds	1
   588  0000E9                     vscp_handleProtocolEvent@i_1279:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x38
   592  0000E9                     	ds	1
   593  0000EA                     vscp_handleProtocolEvent@i:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x39
   597  0000EA                     	ds	1
   598  0000EB                     vscp_handleProtocolEvent@j:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x3A
   602  0000EB                     	ds	1
   603                           tblptru	equ	0xFF8
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           
   607                           	psect	cstackCOMRAM
   608  000001                     __pcstackCOMRAM:
   609                           	opt stack 0
   610  000001                     ?i1_WriteTimer0:
   611                           	opt stack 0
   612  000001                     i1WriteTimer0@timer0:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x0
   616  000001                     	ds	2
   617  000003                     i1WriteTimer0@timer:
   618                           	opt stack 0
   619                           
   620                           ; 2 bytes @ 0x2
   621  000003                     	ds	2
   622  000005                     ??_interrupt_at_low_vector:
   623                           
   624                           ; 0 bytes @ 0x4
   625  000005                     	ds	3
   626  000008                     ?_WriteTimer0:
   627                           	opt stack 0
   628  000008                     ?_writeEEPROM:
   629                           	opt stack 0
   630  000008                     ?__CANIDToRegs:
   631                           	opt stack 0
   632  000008                     ?__RegsToCANID:
   633                           	opt stack 0
   634  000008                     ??_vscp_getMDF_URL:
   635  000008                     ?_readEEPROM:
   636                           	opt stack 0
   637  000008                     ?___lbmod:
   638                           	opt stack 0
   639  000008                     ?__ECANPointBuffer:
   640                           	opt stack 0
   641  000008                     ?_vscp_getFamilyCode:
   642                           	opt stack 0
   643  000008                     ?_vscp_getFamilyType:
   644                           	opt stack 0
   645  000008                     vscp_getMatrixInfo@i:
   646                           	opt stack 0
   647  000008                     ECANSetOperationMode@mode:
   648                           	opt stack 0
   649  000008                     OpenTimer0@config:
   650                           	opt stack 0
   651  000008                     ___lbmod@divisor:
   652                           	opt stack 0
   653  000008                     __CANIDToRegs@ptr:
   654                           	opt stack 0
   655  000008                     __RegsToCANID@ptr:
   656                           	opt stack 0
   657  000008                     writeEEPROM@address:
   658                           	opt stack 0
   659  000008                     readEEPROM@address:
   660                           	opt stack 0
   661  000008                     WriteTimer0@timer0:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x7
   665  000008                     	ds	1
   666  000009                     vscp_getMDF_URL@idx:
   667                           	opt stack 0
   668  000009                     ___lbmod@dividend:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x8
   672  000009                     	ds	1
   673  00000A                     __RegsToCANID@val:
   674                           	opt stack 0
   675  00000A                     writeEEPROM@data:
   676                           	opt stack 0
   677  00000A                     readEEPROM@data:
   678                           	opt stack 0
   679  00000A                     ___lbmod@counter:
   680                           	opt stack 0
   681  00000A                     WriteTimer0@timer:
   682                           	opt stack 0
   683  00000A                     __CANIDToRegs@val:
   684                           	opt stack 0
   685                           
   686                           ; 4 bytes @ 0x9
   687  00000A                     	ds	1
   688  00000B                     ??_init_app_eeprom:
   689  00000B                     ??_init_app_ram:
   690  00000B                     ?_doActionPulse:
   691                           	opt stack 0
   692  00000B                     ?_doActionDisable:
   693                           	opt stack 0
   694  00000B                     ?_vscp_setGUID:
   695                           	opt stack 0
   696  00000B                     ?_vscp_setManufacturerId:
   697                           	opt stack 0
   698  00000B                     ?_vscp_setUserID:
   699                           	opt stack 0
   700  00000B                     vscp_setGUID@data:
   701                           	opt stack 0
   702  00000B                     vscp_setManufacturerId@data:
   703                           	opt stack 0
   704  00000B                     vscp_writeNicknamePermanent@nickname:
   705                           	opt stack 0
   706  00000B                     vscp_readAppReg@rv:
   707                           	opt stack 0
   708  00000B                     doActionPulse@arg:
   709                           	opt stack 0
   710  00000B                     doActionDisable@arg:
   711                           	opt stack 0
   712  00000B                     vscp_getGUID@idx:
   713                           	opt stack 0
   714  00000B                     vscp_getUserID@idx:
   715                           	opt stack 0
   716  00000B                     vscp_setUserID@data:
   717                           	opt stack 0
   718  00000B                     vscp_getManufacturerId@idx:
   719                           	opt stack 0
   720  00000B                     vscp_setSegmentCRC@crc:
   721                           	opt stack 0
   722  00000B                     vscp_setControlByte@ctrl:
   723                           	opt stack 0
   724  00000B                     __RegsToCANID@type:
   725                           	opt stack 0
   726  00000B                     __ECANPointBuffer@b:
   727                           	opt stack 0
   728  00000B                     ___lbmod@rem:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0xA
   732  00000B                     	ds	1
   733  00000C                     ??_doActionPulse:
   734  00000C                     ??_doActionDisable:
   735  00000C                     ??__RegsToCANID:
   736  00000C                     vscp_setGUID@idx:
   737                           	opt stack 0
   738  00000C                     vscp_setManufacturerId@idx:
   739                           	opt stack 0
   740  00000C                     vscp_readAppReg@reg:
   741                           	opt stack 0
   742  00000C                     vscp_setUserID@idx:
   743                           	opt stack 0
   744  00000C                     vscp_handleDropNickname@bytes:
   745                           	opt stack 0
   746  00000C                     vscp_readStdReg@rv:
   747                           	opt stack 0
   748  00000C                     __ECANPointBuffer@pt:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0xB
   752  00000C                     	ds	1
   753  00000D                     init_app_ram@i:
   754                           	opt stack 0
   755  00000D                     init_app_eeprom@i:
   756                           	opt stack 0
   757  00000D                     vscp_readStdReg@reg:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0xC
   761  00000D                     	ds	1
   762  00000E                     init_app_eeprom@j:
   763                           	opt stack 0
   764  00000E                     doActionDisable@dmflags:
   765                           	opt stack 0
   766  00000E                     __CANIDToRegs@type:
   767                           	opt stack 0
   768  00000E                     __RegsToCANID@Value:
   769                           	opt stack 0
   770  00000E                     vscp_readRegister@reg:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0xD
   774  00000E                     	ds	1
   775  00000F                     ??__CANIDToRegs:
   776  00000F                     ?_ECANReceiveMessage:
   777                           	opt stack 0
   778  00000F                     ?_vscp_writeStdReg:
   779                           	opt stack 0
   780  00000F                     doActionPulse@dmflags:
   781                           	opt stack 0
   782  00000F                     doActionDisable@val:
   783                           	opt stack 0
   784  00000F                     ECANReceiveMessage@data:
   785                           	opt stack 0
   786  00000F                     vscp_writeStdReg@value:
   787                           	opt stack 0
   788                           
   789                           ; 1 bytes @ 0xE
   790  00000F                     	ds	1
   791  000010                     ??_vscp_writeStdReg:
   792  000010                     doActionPulse@val:
   793                           	opt stack 0
   794  000010                     doActionDisable@i:
   795                           	opt stack 0
   796  000010                     ECANReceiveMessage@dataLen:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0xF
   800  000010                     	ds	1
   801  000011                     doActionPulse@i:
   802                           	opt stack 0
   803  000011                     ECANReceiveMessage@msgFlags:
   804                           	opt stack 0
   805  000011                     __CANIDToRegs@Value:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x10
   809  000011                     	ds	1
   810  000012                     ??_calculateSetFilterMask:
   811  000012                     ?_ECANSendMessage:
   812                           	opt stack 0
   813  000012                     ECANReceiveMessage@savedPtr:
   814                           	opt stack 0
   815  000012                     ECANSendMessage@id:
   816                           	opt stack 0
   817                           
   818                           ; 4 bytes @ 0x11
   819  000012                     	ds	2
   820  000014                     ECANReceiveMessage@id:
   821                           	opt stack 0
   822                           
   823                           ; 1 bytes @ 0x13
   824  000014                     	ds	1
   825  000015                     ECANReceiveMessage@i:
   826                           	opt stack 0
   827  000015                     vscp_writeStdReg@code:
   828                           	opt stack 0
   829                           
   830                           ; 4 bytes @ 0x14
   831  000015                     	ds	1
   832  000016                     ECANReceiveMessage@mode:
   833                           	opt stack 0
   834  000016                     ECANSendMessage@data:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x15
   838  000016                     	ds	1
   839  000017                     ECANReceiveMessage@temp:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0x16
   843  000017                     	ds	1
   844  000018                     ECANSendMessage@dataLen:
   845                           	opt stack 0
   846  000018                     ECANReceiveMessage@ptr:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x17
   850  000018                     	ds	1
   851  000019                     ECANSendMessage@msgFlags:
   852                           	opt stack 0
   853  000019                     vscp_writeStdReg@code_1268:
   854                           	opt stack 0
   855                           
   856                           ; 4 bytes @ 0x18
   857  000019                     	ds	1
   858  00001A                     ??_ECANSendMessage:
   859  00001A                     ?_getCANFrame:
   860                           	opt stack 0
   861  00001A                     getCANFrame@pdlc:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0x19
   865  00001A                     	ds	1
   866  00001B                     getCANFrame@pdata:
   867                           	opt stack 0
   868  00001B                     ECANSendMessage@pb:
   869                           	opt stack 0
   870                           
   871                           ; 18 bytes @ 0x1A
   872  00001B                     	ds	1
   873  00001C                     getCANFrame@pid:
   874                           	opt stack 0
   875                           
   876                           ; 1 bytes @ 0x1B
   877  00001C                     	ds	1
   878  00001D                     getCANFrame@flags:
   879                           	opt stack 0
   880  00001D                     vscp_writeStdReg@idx:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x1C
   884  00001D                     	ds	1
   885  00001E                     ?_getVSCPFrame:
   886                           	opt stack 0
   887  00001E                     getVSCPFrame@pvscptype:
   888                           	opt stack 0
   889  00001E                     vscp_writeStdReg@idx_1269:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x1D
   893  00001E                     	ds	1
   894  00001F                     getVSCPFrame@pNodeId:
   895                           	opt stack 0
   896  00001F                     vscp_writeStdReg@rv:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x1E
   900  00001F                     	ds	1
   901  000020                     getVSCPFrame@pPriority:
   902                           	opt stack 0
   903  000020                     vscp_writeStdReg@reg:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x1F
   907  000020                     	ds	1
   908  000021                     getVSCPFrame@pSize:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0x20
   912  000021                     	ds	1
   913  000022                     getVSCPFrame@pData:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x21
   917  000022                     	ds	1
   918  000023                     ??_getVSCPFrame:
   919                           
   920                           ; 0 bytes @ 0x22
   921  000023                     	ds	4
   922  000027                     getVSCPFrame@pvscpclass:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x26
   926  000027                     	ds	1
   927  000028                     getVSCPFrame@id:
   928                           	opt stack 0
   929                           
   930                           ; 4 bytes @ 0x27
   931  000028                     	ds	4
   932  00002C                     vscp_getEvent@rv:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x2B
   936  00002C                     	ds	1
   937  00002D                     ECANSendMessage@mode:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x2C
   941  00002D                     	ds	1
   942  00002E                     ECANSendMessage@buffers:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0x2D
   946  00002E                     	ds	1
   947  00002F                     ECANSendMessage@j:
   948                           	opt stack 0
   949                           
   950                           ; 1 bytes @ 0x2E
   951  00002F                     	ds	1
   952  000030                     ECANSendMessage@tempBSEL0:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x2F
   956  000030                     	ds	1
   957  000031                     ECANSendMessage@tempPtr:
   958                           	opt stack 0
   959  000031                     calculateSetFilterMask@rowmask:
   960                           	opt stack 0
   961                           
   962                           ; 4 bytes @ 0x30
   963  000031                     	ds	2
   964  000033                     ECANSendMessage@temp:
   965                           	opt stack 0
   966                           
   967                           ; 1 bytes @ 0x32
   968  000033                     	ds	1
   969  000034                     ECANSendMessage@i:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x33
   973  000034                     	ds	1
   974  000035                     calculateSetFilterMask@lastOID:
   975                           	opt stack 0
   976  000035                     ECANSendMessage@ptr:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x34
   980  000035                     	ds	1
   981  000036                     calculateSetFilterMask@mask:
   982                           	opt stack 0
   983                           
   984                           ; 4 bytes @ 0x35
   985  000036                     	ds	1
   986  000037                     ?_sendCANFrame:
   987                           	opt stack 0
   988  000037                     sendCANFrame@id:
   989                           	opt stack 0
   990                           
   991                           ; 4 bytes @ 0x36
   992  000037                     	ds	3
   993  00003A                     calculateSetFilterMask@filter:
   994                           	opt stack 0
   995                           
   996                           ; 4 bytes @ 0x39
   997  00003A                     	ds	1
   998  00003B                     sendCANFrame@dlc:
   999                           	opt stack 0
  1000                           
  1001                           ; 1 bytes @ 0x3A
  1002  00003B                     	ds	1
  1003  00003C                     sendCANFrame@pdata:
  1004                           	opt stack 0
  1005                           
  1006                           ; 2 bytes @ 0x3B
  1007  00003C                     	ds	2
  1008  00003E                     sendCANFrame@rv:
  1009                           	opt stack 0
  1010  00003E                     calculateSetFilterMask@rowfilter:
  1011                           	opt stack 0
  1012                           
  1013                           ; 4 bytes @ 0x3D
  1014  00003E                     	ds	1
  1015  00003F                     ?_sendVSCPFrame:
  1016                           	opt stack 0
  1017  00003F                     sendVSCPFrame@vscpclass:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x3E
  1021  00003F                     	ds	2
  1022  000041                     sendVSCPFrame@vscptype:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x40
  1026  000041                     	ds	1
  1027  000042                     sendVSCPFrame@nodeid:
  1028                           	opt stack 0
  1029  000042                     calculateSetFilterMask@j:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x41
  1033  000042                     	ds	1
  1034  000043                     sendVSCPFrame@priority:
  1035                           	opt stack 0
  1036  000043                     calculateSetFilterMask@i:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0x42
  1040  000043                     	ds	1
  1041  000044                     sendVSCPFrame@size:
  1042                           	opt stack 0
  1043                           
  1044                           ; 1 bytes @ 0x43
  1045  000044                     	ds	1
  1046  000045                     sendVSCPFrame@pData:
  1047                           	opt stack 0
  1048                           
  1049                           ; 2 bytes @ 0x44
  1050  000045                     	ds	2
  1051  000047                     sendVSCPFrame@id:
  1052                           	opt stack 0
  1053                           
  1054                           ; 4 bytes @ 0x46
  1055  000047                     	ds	4
  1056  00004B                     ??_SendInformationEvent:
  1057  00004B                     
  1058                           ; 0 bytes @ 0x4A
  1059  00004B                     	ds	1
  1060  00004C                     ??_vscp_newNodeOnline:
  1061  00004C                     vscp_sendHeartBeat@zone:
  1062                           	opt stack 0
  1063                           
  1064                           ; 1 bytes @ 0x4B
  1065  00004C                     	ds	1
  1066  00004D                     ??_vscp_doOneSecondWork:
  1067  00004D                     SendInformationEvent@data:
  1068                           	opt stack 0
  1069                           
  1070                           ; 3 bytes @ 0x4C
  1071  00004D                     	ds	3
  1072  000050                     SendInformationEvent@idx:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0x4F
  1076  000050                     	ds	1
  1077  000051                     ?_doActionOff:
  1078                           	opt stack 0
  1079  000051                     ?_doActionOn:
  1080                           	opt stack 0
  1081  000051                     ?_doActionStatus:
  1082                           	opt stack 0
  1083  000051                     ?_doActionToggle:
  1084                           	opt stack 0
  1085  000051                     ?_vscp_writeAppReg:
  1086                           	opt stack 0
  1087  000051                     vscp_writeAppReg@val:
  1088                           	opt stack 0
  1089  000051                     doActionOn@arg:
  1090                           	opt stack 0
  1091  000051                     doActionOff@arg:
  1092                           	opt stack 0
  1093  000051                     doActionStatus@arg:
  1094                           	opt stack 0
  1095  000051                     doActionToggle@arg:
  1096                           	opt stack 0
  1097                           
  1098                           ; 1 bytes @ 0x50
  1099  000051                     	ds	1
  1100  000052                     tblptru	equ	0xFF8
  1101                           postinc0	equ	0xFEE
  1102                           wreg	equ	0xFE8
  1103                           
  1104                           ; 0 bytes @ 0x51
  1105 ;;
  1106 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1107 ;;
  1108 ;; *************** function _main *****************
  1109 ;; Defined at:
  1110 ;;		line 194 in file "../main.c"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;		None
  1113 ;; Auto vars:     Size  Location     Type
  1114 ;;		None
  1115 ;; Return value:  Size  Location     Type
  1116 ;;		None               void
  1117 ;; Registers used:
  1118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : F/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1124 ;;      Params:         0       0       0       0       0       0       0
  1125 ;;      Locals:         0       0       0       0       0       0       0
  1126 ;;      Temps:          0       0       0       0       0       0       0
  1127 ;;      Totals:         0       0       0       0       0       0       0
  1128 ;;Total ram usage:        0 bytes
  1129 ;; Hardware stack levels required when called:   10
  1130 ;; This function calls:
  1131 ;;		_init
  1132 ;;		_vscp_check_pstorage
  1133 ;;		_init_app_eeprom
  1134 ;;		_init_app_ram
  1135 ;;		_vscp_init
  1136 ;;		_writeEEPROM
  1137 ;;		_vscp_getEvent
  1138 ;;		_vscp_goActiveState
  1139 ;;		_vscp_handleProbeState
  1140 ;;		_vscp_handleProtocolEvent
  1141 ;;		_doDM
  1142 ;;		_vscp_error
  1143 ;;		_vscp_doOneSecondWork
  1144 ;;		_doApplicationOneSecondWork
  1145 ;;		_doWork
  1146 ;; This function is called by:
  1147 ;;		Startup code after reset
  1148 ;; This function uses a non-reentrant model
  1149 ;;
  1150                           
  1151                           	psect	text0
  1152  003446                     __ptext0:
  1153                           	opt stack 0
  1154  003446                     _main:
  1155                           	opt stack 21
  1156                           
  1157                           ;main.c: 195: init();
  1158                           
  1159                           ;incstack = 0
  1160                           ;incstack = 0
  1161  003446  ECB9  F01D         	call	_init	;wreg free
  1162                           
  1163                           ;main.c: 199: if ( !vscp_check_pstorage() ) {
  1164  00344A  EC8F  F01E         	call	_vscp_check_pstorage	;wreg free
  1165  00344E  0900               	iorlw	0
  1166  003450  E104               	bnz	l9205
  1167                           
  1168                           ;main.c: 202: init_app_eeprom();
  1169  003452  EC39  F00D         	call	_init_app_eeprom	;wreg free
  1170                           
  1171                           ;main.c: 203: init_app_ram();
  1172  003456  ECA4  F018         	call	_init_app_ram	;wreg free
  1173  00345A                     l9205:
  1174                           
  1175                           ;main.c: 206: }
  1176                           ;main.c: 208: vscp_init();
  1177  00345A  EC58  F01D         	call	_vscp_init	;wreg free
  1178  00345E                     l147:
  1179                           
  1180                           ; BSR set to: 0
  1181  00345E  0004               	clrwdt		;# 
  1182                           
  1183                           ;main.c: 214: if ( ( vscp_initbtncnt > 250 ) &&
  1184                           ;main.c: 215: ( 0x01 != vscp_node_state ) ) {
  1185  003460  0EFA               	movlw	250
  1186  003462  0100               	movlb	0	; () banked
  1187  003464  658F               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1188  003466  D00C               	goto	l9215
  1189                           
  1190                           ; BSR set to: 0
  1191  003468  0592               	decf	_vscp_node_state& (0+255),w,b
  1192  00346A  E00A               	bz	l9215
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;main.c: 218: vscp_nickname = 0xff;
  1196  00346C  6991               	setf	_vscp_nickname& (0+255),b
  1197                           
  1198                           ; BSR set to: 0
  1199                           ;main.c: 219: writeEEPROM( 0x01, 0xff );
  1200  00346E  6A09               	clrf	?_writeEEPROM+1,c
  1201  003470  0E01               	movlw	1
  1202  003472  6E08               	movwf	?_writeEEPROM,c
  1203  003474  0EFF               	movlw	255
  1204  003476  680A               	setf	?_writeEEPROM+2,c
  1205  003478  EC6A  F01E         	call	_writeEEPROM	;wreg free
  1206                           
  1207                           ;main.c: 220: vscp_init();
  1208  00347C  EC58  F01D         	call	_vscp_init	;wreg free
  1209  003480                     l9215:
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;main.c: 222: }
  1213                           ;main.c: 225: vscp_imsg.flags = 0;
  1214  003480  6B96               	clrf	_vscp_imsg& (0+255),b
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;main.c: 226: vscp_getEvent();
  1218  003482  EC1B  F01E         	call	_vscp_getEvent	;wreg free
  1219                           
  1220                           ;main.c: 228: switch ( vscp_node_state ) {
  1221  003486  D01C               	goto	l9239
  1222  003488                     l9219:
  1223                           
  1224                           ; BSR set to: 0
  1225                           ;main.c: 233: if (0xff == vscp_nickname) {
  1226  003488  2991               	incf	_vscp_nickname& (0+255),w,b
  1227  00348A  E103               	bnz	l9223
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;main.c: 235: vscp_node_state = 0x01;
  1231  00348C  0E01               	movlw	1
  1232  00348E  6F92               	movwf	_vscp_node_state& (0+255),b
  1233                           
  1234                           ;main.c: 236: } else {
  1235  003490  D023               	goto	l9241
  1236  003492                     l9223:
  1237                           
  1238                           ; BSR set to: 0
  1239                           ;main.c: 238: vscp_node_state = 0x03;
  1240  003492  0E03               	movlw	3
  1241  003494  6F92               	movwf	_vscp_node_state& (0+255),b
  1242  003496                     l9225:
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;main.c: 239: vscp_goActiveState();
  1246  003496  ECF5  F01E         	call	_vscp_goActiveState	;wreg free
  1247  00349A  D01E               	goto	l9241
  1248  00349C                     l9227:
  1249                           
  1250                           ; BSR set to: 0
  1251                           ;main.c: 244: vscp_handleProbeState();
  1252  00349C  ECF0  F01A         	call	_vscp_handleProbeState	;wreg free
  1253                           
  1254                           ;main.c: 245: break;
  1255  0034A0  D01B               	goto	l9241
  1256  0034A2                     l156:
  1257                           
  1258                           ; BSR set to: 0
  1259                           ;main.c: 254: if (vscp_imsg.flags & 0x80) {
  1260  0034A2  AF96               	btfss	_vscp_imsg& (0+255),7,b
  1261  0034A4  D019               	goto	l9241
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;main.c: 256: if ( 0 == vscp_imsg.vscp_class ) {
  1265  0034A6  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  1266  0034A8  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1267  0034AA  B4D8               	btfsc	status,2,c
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;main.c: 259: vscp_handleProtocolEvent();
  1271  0034AC  ECE8  F007         	call	_vscp_handleProtocolEvent	;wreg free
  1272                           
  1273                           ;main.c: 261: }
  1274                           ;main.c: 263: doDM();
  1275  0034B0  ECF4  F00E         	call	_doDM	;wreg free
  1276  0034B4  D011               	goto	l9241
  1277  0034B6                     l9235:
  1278                           
  1279                           ; BSR set to: 0
  1280                           ;main.c: 269: vscp_error();
  1281  0034B6  ECC2  F01F         	call	_vscp_error	;wreg free
  1282                           
  1283                           ;main.c: 270: break;
  1284  0034BA  D00E               	goto	l9241
  1285  0034BC                     l160:
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;main.c: 273: vscp_node_state = 0x00;
  1289  0034BC  6B92               	clrf	_vscp_node_state& (0+255),b
  1290                           
  1291                           ;main.c: 274: break;
  1292  0034BE  D00C               	goto	l9241
  1293  0034C0                     l9239:
  1294  0034C0  0100               	movlb	0	; () banked
  1295  0034C2  5192               	movf	_vscp_node_state& (0+255),w,b
  1296                           
  1297                           ; Switch size 1, requested type "speed"
  1298                           ; Number of cases is 5, Range of values is 0 to 4
  1299                           ; switch strategies available:
  1300                           ; Name         Instructions Cycles
  1301                           ; simple_byte           16     9 (average)
  1302                           ;	Chosen strategy is simple_byte
  1303  0034C4  E0E1               	bz	l9219
  1304  0034C6  0A01               	xorlw	1	; case 1
  1305  0034C8  E0E9               	bz	l9227
  1306  0034CA  0A03               	xorlw	3	; case 2
  1307  0034CC  E0E4               	bz	l9225
  1308  0034CE  0A01               	xorlw	1	; case 3
  1309  0034D0  E0E8               	bz	l156
  1310  0034D2  0A07               	xorlw	7	; case 4
  1311  0034D4  E0F0               	bz	l9235
  1312  0034D6  D7F2               	goto	l160
  1313  0034D8                     l9241:
  1314                           
  1315                           ;main.c: 279: if ( measurement_clock > 1000 ) {
  1316  0034D8  0EE9               	movlw	233
  1317  0034DA  0100               	movlb	0	; () banked
  1318  0034DC  5D80               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1319  0034DE  0E03               	movlw	3
  1320  0034E0  5981               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1321  0034E2  0E00               	movlw	0
  1322  0034E4  5982               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1323  0034E6  0E00               	movlw	0
  1324  0034E8  5983               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1325  0034EA  E30C               	bnc	l9253
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;main.c: 281: measurement_clock = 0;
  1329  0034EC  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
  1330  0034EE  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1331  0034F0  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1332  0034F2  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1333                           
  1334                           ; BSR set to: 0
  1335                           ;main.c: 283: sendTimer++;
  1336  0034F4  2A55               	incf	_sendTimer,f,c
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;main.c: 286: vscp_doOneSecondWork();
  1340  0034F6  EC31  F01D         	call	_vscp_doOneSecondWork	;wreg free
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;main.c: 290: if ( 0x03 == vscp_node_state ) {
  1344  0034FA  5192               	movf	_vscp_node_state& (0+255),w,b
  1345  0034FC  0A03               	xorlw	3
  1346  0034FE  B4D8               	btfsc	status,2,c
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;main.c: 293: doApplicationOneSecondWork();
  1350  003500  EC84  F010         	call	_doApplicationOneSecondWork	;wreg free
  1351  003504                     l9253:
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;main.c: 295: }
  1355                           ;main.c: 297: }
  1356                           ;main.c: 300: if ( seconds > 59 ) {
  1357  003504  0E3B               	movlw	59
  1358  003506  658B               	cpfsgt	_seconds& (0+255),b
  1359  003508  D00B               	goto	l9269
  1360                           
  1361                           ; BSR set to: 0
  1362                           ;main.c: 302: seconds = 0;
  1363  00350A  6B8B               	clrf	_seconds& (0+255),b
  1364                           
  1365                           ; BSR set to: 0
  1366                           ;main.c: 303: minutes++;
  1367  00350C  2B89               	incf	_minutes& (0+255),f,b
  1368                           
  1369                           ; BSR set to: 0
  1370                           ;main.c: 305: if ( minutes > 59 ) {
  1371  00350E  0E3B               	movlw	59
  1372  003510  6589               	cpfsgt	_minutes& (0+255),b
  1373  003512  D002               	goto	l9265
  1374                           
  1375                           ; BSR set to: 0
  1376                           ;main.c: 306: minutes = 0;
  1377  003514  6B89               	clrf	_minutes& (0+255),b
  1378                           
  1379                           ; BSR set to: 0
  1380                           ;main.c: 307: hours++;
  1381  003516  2B88               	incf	_hours& (0+255),f,b
  1382  003518                     l9265:
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;main.c: 308: }
  1386                           ;main.c: 310: if ( hours > 23 ) hours = 0;
  1387  003518  0E17               	movlw	23
  1388  00351A  6588               	cpfsgt	_hours& (0+255),b
  1389  00351C  D001               	goto	l9269
  1390                           
  1391                           ; BSR set to: 0
  1392  00351E  6B88               	clrf	_hours& (0+255),b
  1393  003520                     l9269:
  1394                           
  1395                           ; BSR set to: 0
  1396                           ;main.c: 312: }
  1397                           ;main.c: 314: doWork();
  1398  003520  ECC4  F01F         	call	_doWork	;wreg free
  1399  003524  D79C               	goto	l147
  1400  003526                     __end_of_main:
  1401                           	opt stack 0
  1402                           tblptru	equ	0xFF8
  1403                           postinc0	equ	0xFEE
  1404                           wreg	equ	0xFE8
  1405                           status	equ	0xFD8
  1406                           
  1407 ;; *************** function _doWork *****************
  1408 ;; Defined at:
  1409 ;;		line 892 in file "../main.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;		None
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;		None
  1414 ;; Return value:  Size  Location     Type
  1415 ;;		None               void
  1416 ;; Registers used:
  1417 ;;		wreg, status,2, status,0
  1418 ;; Tracked objects:
  1419 ;;		On entry : F/0
  1420 ;;		On exit  : F/0
  1421 ;;		Unchanged: F/0
  1422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1423 ;;      Params:         0       0       0       0       0       0       0
  1424 ;;      Locals:         0       0       0       0       0       0       0
  1425 ;;      Temps:          0       0       0       0       0       0       0
  1426 ;;      Totals:         0       0       0       0       0       0       0
  1427 ;;Total ram usage:        0 bytes
  1428 ;; Hardware stack levels used:    1
  1429 ;; Hardware stack levels required when called:    2
  1430 ;; This function calls:
  1431 ;;		Nothing
  1432 ;; This function is called by:
  1433 ;;		_main
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           	psect	text1
  1438  003F88                     __ptext1:
  1439                           	opt stack 0
  1440  003F88                     _doWork:
  1441                           	opt stack 28
  1442                           
  1443                           ; BSR set to: 0
  1444                           
  1445                           ; BSR set to: 0
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;incstack = 0
  1449                           ;incstack = 0
  1450  003F88  0012               	return	
  1451  003F8A                     __end_of_doWork:
  1452                           	opt stack 0
  1453                           tblptru	equ	0xFF8
  1454                           postinc0	equ	0xFEE
  1455                           wreg	equ	0xFE8
  1456                           status	equ	0xFD8
  1457                           
  1458 ;; *************** function _doApplicationOneSecondWork *****************
  1459 ;; Defined at:
  1460 ;;		line 597 in file "../main.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;		None
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;  i               1   32[BANK0 ] unsigned char 
  1465 ;;  ctrlreg         1   31[BANK0 ] unsigned char 
  1466 ;;  bOn             1   30[BANK0 ] enum E15660
  1467 ;; Return value:  Size  Location     Type
  1468 ;;		None               void
  1469 ;; Registers used:
  1470 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1471 ;; Tracked objects:
  1472 ;;		On entry : F/0
  1473 ;;		On exit  : F/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1476 ;;      Params:         0       0       0       0       0       0       0
  1477 ;;      Locals:         0       3       0       0       0       0       0
  1478 ;;      Temps:          0       3       0       0       0       0       0
  1479 ;;      Totals:         0       6       0       0       0       0       0
  1480 ;;Total ram usage:        6 bytes
  1481 ;; Hardware stack levels used:    1
  1482 ;; Hardware stack levels required when called:    8
  1483 ;; This function calls:
  1484 ;;		_readEEPROM
  1485 ;;		_doActionOff
  1486 ;;		_SendInformationEvent
  1487 ;; This function is called by:
  1488 ;;		_main
  1489 ;; This function uses a non-reentrant model
  1490 ;;
  1491                           
  1492                           	psect	text2
  1493  002108                     __ptext2:
  1494                           	opt stack 0
  1495  002108                     _doApplicationOneSecondWork:
  1496                           	opt stack 22
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;main.c: 599: uint8_t i;
  1500                           ;main.c: 600: uint8_t ctrlreg;
  1501                           ;main.c: 601: BOOL bOn = 0;
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;incstack = 0
  1505                           ;incstack = 0
  1506  002108  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1507                           
  1508                           ;main.c: 603: for ( i = 0; i < 8; i++ ) {
  1509  00210A  6BD1               	clrf	doApplicationOneSecondWork@i& (0+255),b
  1510  00210C                     l9769:
  1511                           
  1512                           ; BSR set to: 0
  1513  00210C  0E07               	movlw	7
  1514  00210E  65D1               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  1515  002110  D001               	goto	l9773
  1516  002112  D172               	goto	l232
  1517  002114                     l9773:
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;main.c: 606: ctrlreg = readEEPROM( 0x43 + 10 + i );
  1521  002114  0E4D               	movlw	77
  1522  002116  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1523  002118  6E08               	movwf	?_readEEPROM,c
  1524  00211A  6A09               	clrf	?_readEEPROM+1,c
  1525  00211C  0E00               	movlw	0
  1526  00211E  2209               	addwfc	?_readEEPROM+1,f,c
  1527  002120  EC86  F01F         	call	_readEEPROM	;wreg free
  1528  002124  0100               	movlb	0	; () banked
  1529  002126  6FD0               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;main.c: 609: if ( !( ctrlreg & 0x80 ) ) continue;
  1533  002128  AFD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  1534  00212A  D164               	goto	l9857
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;main.c: 613: if ( relay_protection_timer[ i ] ) {
  1538                           
  1539                           ; BSR set to: 0
  1540  00212C  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1541  00212E  0D02               	mullw	2
  1542  002130  50F3               	movf	prodl,w,c
  1543  002132  0F60               	addlw	low _relay_protection_timer
  1544  002134  6ED9               	movwf	fsr2l,c
  1545  002136  6ADA               	clrf	fsr2h,c
  1546  002138  50DE               	movf	postinc2,w,c
  1547  00213A  10DD               	iorwf	postdec2,w,c
  1548  00213C  E037               	bz	l9791
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;main.c: 615: relay_protection_timer[ i ]--;
  1552  00213E  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1553  002140  0D02               	mullw	2
  1554  002142  50F3               	movf	prodl,w,c
  1555  002144  0F60               	addlw	low _relay_protection_timer
  1556  002146  6ED9               	movwf	fsr2l,c
  1557  002148  6ADA               	clrf	fsr2h,c
  1558  00214A  06DE               	decf	postinc2,f,c
  1559  00214C  0E00               	movlw	0
  1560  00214E  5ADD               	subwfb	postdec2,f,c
  1561                           
  1562                           ;main.c: 618: if ( !relay_protection_timer[ i ] &&
  1563                           ;main.c: 619: ( readEEPROM( 0x43 + 10 + i ) &
  1564                           ;main.c: 620: 0x04 ) ) {
  1565  002150  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1566  002152  0D02               	mullw	2
  1567  002154  50F3               	movf	prodl,w,c
  1568  002156  0F60               	addlw	low _relay_protection_timer
  1569  002158  6ED9               	movwf	fsr2l,c
  1570  00215A  6ADA               	clrf	fsr2h,c
  1571  00215C  50DE               	movf	postinc2,w,c
  1572  00215E  10DD               	iorwf	postdec2,w,c
  1573  002160  E146               	bnz	l9793
  1574                           
  1575                           ; BSR set to: 0
  1576  002162  0E4D               	movlw	77
  1577  002164  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1578  002166  6E08               	movwf	?_readEEPROM,c
  1579  002168  6A09               	clrf	?_readEEPROM+1,c
  1580  00216A  0E00               	movlw	0
  1581  00216C  2209               	addwfc	?_readEEPROM+1,f,c
  1582  00216E  EC86  F01F         	call	_readEEPROM	;wreg free
  1583  002172  0100               	movlb	0	; () banked
  1584  002174  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1585  002176  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1586  002178  D03A               	goto	l9793
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;main.c: 623: doActionOff( 0, (1 << i) );
  1590  00217A  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1591  00217E  0E01               	movlw	1
  1592  002180  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1593  002182  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1594  002184  D002               	goto	u12124
  1595  002186                     u12125:
  1596  002186  90D8               	bcf	status,0,c
  1597  002188  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1598  00218A                     u12124:
  1599  00218A  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1600  00218C  D7FC               	goto	u12125
  1601  00218E  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1602  002190  6E51               	movwf	?_doActionOff,c
  1603  002192  0E00               	movlw	0
  1604  002194  EC93  F01A         	call	_doActionOff
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;main.c: 626: if ( ctrlreg & 0x02 ) {
  1608  002198  A3D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  1609  00219A  D029               	goto	l9793
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;main.c: 627: SendInformationEvent( i, 1,
  1613                           ;main.c: 628: 2 );
  1614  00219C  0E01               	movlw	1
  1615  00219E  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1616  0021A0  0E02               	movlw	2
  1617  0021A2  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1618  0021A4  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1619  0021A6  ECFB  F01C         	call	_SendInformationEvent
  1620  0021AA  D021               	goto	l9793
  1621  0021AC                     l9791:
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;main.c: 633: else {
  1625                           ;main.c: 635: relay_protection_timer[ i ] =
  1626                           ;main.c: 636: readEEPROM(0x43 + 34 + i ) * 256 +
  1627                           ;main.c: 637: readEEPROM(0x43 + 35 + i );
  1628  0021AC  0E65               	movlw	101
  1629  0021AE  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1630  0021B0  6E08               	movwf	?_readEEPROM,c
  1631  0021B2  6A09               	clrf	?_readEEPROM+1,c
  1632  0021B4  0E00               	movlw	0
  1633  0021B6  2209               	addwfc	?_readEEPROM+1,f,c
  1634  0021B8  EC86  F01F         	call	_readEEPROM	;wreg free
  1635  0021BC  0100               	movlb	0	; () banked
  1636  0021BE  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1637  0021C0  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1638  0021C2  0E66               	movlw	102
  1639  0021C4  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1640  0021C6  6E08               	movwf	?_readEEPROM,c
  1641  0021C8  6A09               	clrf	?_readEEPROM+1,c
  1642  0021CA  0E00               	movlw	0
  1643  0021CC  2209               	addwfc	?_readEEPROM+1,f,c
  1644  0021CE  EC86  F01F         	call	_readEEPROM	;wreg free
  1645  0021D2  0100               	movlb	0	; () banked
  1646  0021D4  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1647  0021D6  0E00               	movlw	0
  1648  0021D8  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1649  0021DA  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1650  0021DC  0D02               	mullw	2
  1651  0021DE  50F3               	movf	prodl,w,c
  1652  0021E0  0F60               	addlw	low _relay_protection_timer
  1653  0021E2  6ED9               	movwf	fsr2l,c
  1654  0021E4  6ADA               	clrf	fsr2h,c
  1655  0021E6  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1656  0021EA  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1657  0021EE                     l9793:
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;main.c: 638: }
  1661                           ;main.c: 641: if ( relay_pulse_flags & (1 << i) ) {
  1662  0021EE  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1663  0021F2  0E01               	movlw	1
  1664  0021F4  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1665  0021F6  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1666  0021F8  D002               	goto	u12144
  1667  0021FA                     u12145:
  1668  0021FA  90D8               	bcf	status,0,c
  1669  0021FC  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1670  0021FE                     u12144:
  1671  0021FE  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1672  002200  D7FC               	goto	u12145
  1673  002202  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1674  002204  158A               	andwf	_relay_pulse_flags& (0+255),w,b
  1675  002206  E101 D0F5          	bz	l9857
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;main.c: 643: if ( relay_pulse_timer[ i ] ) {
  1679  00220A  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1680  00220C  0D02               	mullw	2
  1681  00220E  50F3               	movf	prodl,w,c
  1682  002210  0F70               	addlw	low _relay_pulse_timer
  1683  002212  6ED9               	movwf	fsr2l,c
  1684  002214  6ADA               	clrf	fsr2h,c
  1685  002216  50DE               	movf	postinc2,w,c
  1686  002218  10DD               	iorwf	postdec2,w,c
  1687  00221A  E101 D0CC          	bz	l9855
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;main.c: 645: relay_pulse_timer[ i ]--;
  1691  00221E  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1692  002220  0D02               	mullw	2
  1693  002222  50F3               	movf	prodl,w,c
  1694  002224  0F70               	addlw	low _relay_pulse_timer
  1695  002226  6ED9               	movwf	fsr2l,c
  1696  002228  6ADA               	clrf	fsr2h,c
  1697  00222A  06DE               	decf	postinc2,f,c
  1698  00222C  0E00               	movlw	0
  1699  00222E  5ADD               	subwfb	postdec2,f,c
  1700                           
  1701                           ;main.c: 648: if ( !relay_pulse_timer[ i ] ) {
  1702  002230  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1703  002232  0D02               	mullw	2
  1704  002234  50F3               	movf	prodl,w,c
  1705  002236  0F70               	addlw	low _relay_pulse_timer
  1706  002238  6ED9               	movwf	fsr2l,c
  1707  00223A  6ADA               	clrf	fsr2h,c
  1708  00223C  50DE               	movf	postinc2,w,c
  1709  00223E  10DD               	iorwf	postdec2,w,c
  1710  002240  E02E               	bz	l9831
  1711  002242  D0D8               	goto	l9857
  1712  002244                     l202:
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;main.c: 653: if ( LATBbits.LATB4 ) {
  1716  002244  A88A               	btfss	3978,4,c	;volatile
  1717  002246  D002               	goto	l203
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;main.c: 654: LATBbits.LATB4 = 0;
  1721  002248  988A               	bcf	3978,4,c	;volatile
  1722  00224A  D025               	goto	L6
  1723  00224C                     l203:
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;main.c: 657: LATBbits.LATB4 = 1;
  1727  00224C  888A               	bsf	3978,4,c	;volatile
  1728  00224E                     l9803:
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;main.c: 658: bOn = 1;
  1732  00224E  0E01               	movlw	1
  1733  002250  6FCF               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  1734  002252  D033               	goto	l9833
  1735  002254                     l206:
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;main.c: 663: if ( LATBbits.LATB1 ) {
  1739  002254  A28A               	btfss	3978,1,c	;volatile
  1740  002256  D002               	goto	l207
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;main.c: 664: LATBbits.LATB1 = 0;
  1744  002258  928A               	bcf	3978,1,c	;volatile
  1745  00225A  D01D               	goto	L6
  1746  00225C                     l207:
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;main.c: 667: LATBbits.LATB1 = 1;
  1750  00225C  828A               	bsf	3978,1,c	;volatile
  1751  00225E  D7F7               	goto	l9803
  1752  002260                     l209:
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;main.c: 673: if ( LATBbits.LATB0 ) {
  1756  002260  A08A               	btfss	3978,0,c	;volatile
  1757  002262  D002               	goto	l210
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;main.c: 674: LATBbits.LATB0 = 0;
  1761  002264  908A               	bcf	3978,0,c	;volatile
  1762  002266  D017               	goto	L6
  1763  002268                     l210:
  1764                           
  1765                           ; BSR set to: 0
  1766                           ;main.c: 677: LATBbits.LATB0 = 1;
  1767  002268  808A               	bsf	3978,0,c	;volatile
  1768  00226A  D7F1               	goto	l9803
  1769  00226C                     l212:
  1770                           
  1771                           ; BSR set to: 0
  1772                           ;main.c: 683: if ( LATCbits.LATC7 ) {
  1773  00226C  AE8B               	btfss	3979,7,c	;volatile
  1774  00226E  D002               	goto	l213
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;main.c: 684: LATCbits.LATC7 = 0;
  1778  002270  9E8B               	bcf	3979,7,c	;volatile
  1779  002272  D011               	goto	L6
  1780  002274                     l213:
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;main.c: 687: LATCbits.LATC7 = 1;
  1784  002274  8E8B               	bsf	3979,7,c	;volatile
  1785  002276  D7EB               	goto	l9803
  1786  002278                     l215:
  1787                           
  1788                           ; BSR set to: 0
  1789                           ;main.c: 693: if ( LATCbits.LATC6 ) {
  1790  002278  AC8B               	btfss	3979,6,c	;volatile
  1791  00227A  D002               	goto	l216
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;main.c: 694: LATCbits.LATC6 = 0;
  1795  00227C  9C8B               	bcf	3979,6,c	;volatile
  1796  00227E  D00B               	goto	L6
  1797  002280                     l216:
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;main.c: 697: LATCbits.LATC6 = 1;
  1801  002280  8C8B               	bsf	3979,6,c	;volatile
  1802  002282  D7E5               	goto	l9803
  1803  002284                     l218:
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;main.c: 703: if ( LATCbits.LATC5 ) {
  1807  002284  AA8B               	btfss	3979,5,c	;volatile
  1808  002286  D002               	goto	l219
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;main.c: 704: LATCbits.LATC5 = 0;
  1812  002288  9A8B               	bcf	3979,5,c	;volatile
  1813  00228A  D005               	goto	L6
  1814  00228C                     l219:
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;main.c: 707: LATCbits.LATC5 = 1;
  1818  00228C  8A8B               	bsf	3979,5,c	;volatile
  1819  00228E  D7DF               	goto	l9803
  1820  002290                     l221:
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;main.c: 713: if ( LATCbits.LATC4 ) {
  1824  002290  A88B               	btfss	3979,4,c	;volatile
  1825  002292  D003               	goto	l222
  1826                           
  1827                           ; BSR set to: 0
  1828                           ;main.c: 714: LATCbits.LATC4 = 0;
  1829  002294  988B               	bcf	3979,4,c	;volatile
  1830  002296                     L6:
  1831                           
  1832                           ;main.c: 715: bOn = 0;
  1833  002296  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1834                           
  1835                           ;main.c: 716: } else {
  1836  002298  D010               	goto	l9833
  1837  00229A                     l222:
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;main.c: 717: LATCbits.LATC4 = 1;
  1841  00229A  888B               	bsf	3979,4,c	;volatile
  1842  00229C  D7D8               	goto	l9803
  1843  00229E                     l9831:
  1844                           
  1845                           ; BSR set to: 0
  1846  00229E  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1847                           
  1848                           ; Switch size 1, requested type "speed"
  1849                           ; Number of cases is 7, Range of values is 0 to 6
  1850                           ; switch strategies available:
  1851                           ; Name         Instructions Cycles
  1852                           ; simple_byte           22    12 (average)
  1853                           ;	Chosen strategy is simple_byte
  1854  0022A0  E0D1               	bz	l202
  1855  0022A2  0A01               	xorlw	1	; case 1
  1856  0022A4  E0D7               	bz	l206
  1857  0022A6  0A03               	xorlw	3	; case 2
  1858  0022A8  E0DB               	bz	l209
  1859  0022AA  0A01               	xorlw	1	; case 3
  1860  0022AC  E0DF               	bz	l212
  1861  0022AE  0A07               	xorlw	7	; case 4
  1862  0022B0  E0E3               	bz	l215
  1863  0022B2  0A01               	xorlw	1	; case 5
  1864  0022B4  E0E7               	bz	l218
  1865  0022B6  0A03               	xorlw	3	; case 6
  1866  0022B8  E0EB               	bz	l221
  1867  0022BA                     l9833:
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;main.c: 725: relay_pulse_timer[ i ] =
  1871                           ;main.c: 726: readEEPROM( 0x43 +
  1872                           ;main.c: 727: 18 + 2*i ) * 256 +
  1873                           ;main.c: 728: readEEPROM( 0x43 +
  1874                           ;main.c: 729: 19 + 2*i );
  1875  0022BA  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1876  0022BC  0D02               	mullw	2
  1877  0022BE  0E55               	movlw	85
  1878  0022C0  24F3               	addwf	prodl,w,c
  1879  0022C2  6E08               	movwf	?_readEEPROM,c
  1880  0022C4  0E00               	movlw	0
  1881  0022C6  20F4               	addwfc	prodh,w,c
  1882  0022C8  6E09               	movwf	?_readEEPROM+1,c
  1883  0022CA  EC86  F01F         	call	_readEEPROM	;wreg free
  1884  0022CE  0100               	movlb	0	; () banked
  1885  0022D0  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1886  0022D2  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1887  0022D4  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1888  0022D6  0D02               	mullw	2
  1889  0022D8  0E56               	movlw	86
  1890  0022DA  24F3               	addwf	prodl,w,c
  1891  0022DC  6E08               	movwf	?_readEEPROM,c
  1892  0022DE  0E00               	movlw	0
  1893  0022E0  20F4               	addwfc	prodh,w,c
  1894  0022E2  6E09               	movwf	?_readEEPROM+1,c
  1895  0022E4  EC86  F01F         	call	_readEEPROM	;wreg free
  1896  0022E8  0100               	movlb	0	; () banked
  1897  0022EA  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1898  0022EC  0E00               	movlw	0
  1899  0022EE  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1900  0022F0  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1901  0022F2  0D02               	mullw	2
  1902  0022F4  50F3               	movf	prodl,w,c
  1903  0022F6  0F70               	addlw	low _relay_pulse_timer
  1904  0022F8  6ED9               	movwf	fsr2l,c
  1905  0022FA  6ADA               	clrf	fsr2h,c
  1906  0022FC  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1907  002300  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;main.c: 731: if ( bOn ) {
  1911  002304  51CF               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  1912  002306  E044               	bz	l224
  1913                           
  1914                           ; BSR set to: 0
  1915                           ;main.c: 734: if ( readEEPROM( 0x43 + 10 + i ) & 0x04 ) {
  1916  002308  0E4D               	movlw	77
  1917  00230A  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1918  00230C  6E08               	movwf	?_readEEPROM,c
  1919  00230E  6A09               	clrf	?_readEEPROM+1,c
  1920  002310  0E00               	movlw	0
  1921  002312  2209               	addwfc	?_readEEPROM+1,f,c
  1922  002314  EC86  F01F         	call	_readEEPROM	;wreg free
  1923  002318  0100               	movlb	0	; () banked
  1924  00231A  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1925  00231C  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1926  00231E  D025               	goto	l9841
  1927                           
  1928                           ; BSR set to: 0
  1929                           ;main.c: 735: relay_protection_timer[ i ] =
  1930                           ;main.c: 736: readEEPROM( 0x43 + 34 + 2*i ) * 256 +
  1931                           ;main.c: 737: readEEPROM( 0x43 + 35 + 2*i );
  1932  002320  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1933  002322  0D02               	mullw	2
  1934  002324  0E65               	movlw	101
  1935  002326  24F3               	addwf	prodl,w,c
  1936  002328  6E08               	movwf	?_readEEPROM,c
  1937  00232A  0E00               	movlw	0
  1938  00232C  20F4               	addwfc	prodh,w,c
  1939  00232E  6E09               	movwf	?_readEEPROM+1,c
  1940  002330  EC86  F01F         	call	_readEEPROM	;wreg free
  1941  002334  0100               	movlb	0	; () banked
  1942  002336  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1943  002338  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1944  00233A  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1945  00233C  0D02               	mullw	2
  1946  00233E  0E66               	movlw	102
  1947  002340  24F3               	addwf	prodl,w,c
  1948  002342  6E08               	movwf	?_readEEPROM,c
  1949  002344  0E00               	movlw	0
  1950  002346  20F4               	addwfc	prodh,w,c
  1951  002348  6E09               	movwf	?_readEEPROM+1,c
  1952  00234A  EC86  F01F         	call	_readEEPROM	;wreg free
  1953  00234E  0100               	movlb	0	; () banked
  1954  002350  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1955  002352  0E00               	movlw	0
  1956  002354  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1957  002356  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1958  002358  0D02               	mullw	2
  1959  00235A  50F3               	movf	prodl,w,c
  1960  00235C  0F60               	addlw	low _relay_protection_timer
  1961  00235E  6ED9               	movwf	fsr2l,c
  1962  002360  6ADA               	clrf	fsr2h,c
  1963  002362  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1964  002366  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1965  00236A                     l9841:
  1966                           
  1967                           ; BSR set to: 0
  1968                           ;main.c: 738: }
  1969                           ;main.c: 740: if ( ctrlreg & 0x08 ) {
  1970  00236A  A7D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  1971  00236C  D007               	goto	l9845
  1972                           
  1973                           ; BSR set to: 0
  1974                           ;main.c: 741: SendInformationEvent( i, 20,
  1975                           ;main.c: 742: 3 );
  1976  00236E  0E14               	movlw	20
  1977  002370  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1978  002372  0E03               	movlw	3
  1979  002374  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1980  002376  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1981  002378  ECFB  F01C         	call	_SendInformationEvent
  1982  00237C                     l9845:
  1983                           
  1984                           ; BSR set to: 0
  1985                           ;main.c: 743: }
  1986                           ;main.c: 745: if ( ctrlreg & 0x20 ) {
  1987  00237C  ABD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  1988  00237E  D03A               	goto	l9857
  1989                           
  1990                           ; BSR set to: 0
  1991                           ;main.c: 746: SendInformationEvent( i, 20,
  1992                           ;main.c: 747: 25 );
  1993  002380  0E14               	movlw	20
  1994  002382  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1995  002384  0E19               	movlw	25
  1996  002386  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1997  002388  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1998  00238A  ECFB  F01C         	call	_SendInformationEvent
  1999  00238E  D032               	goto	l9857
  2000  002390                     l224:
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;main.c: 752: if ( ctrlreg & 0x10 ) {
  2004  002390  A9D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2005  002392  D007               	goto	l9851
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;main.c: 753: SendInformationEvent( i, 20,
  2009                           ;main.c: 754: 4 );
  2010  002394  0E14               	movlw	20
  2011  002396  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2012  002398  0E04               	movlw	4
  2013  00239A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2014  00239C  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2015  00239E  ECFB  F01C         	call	_SendInformationEvent
  2016  0023A2                     l9851:
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;main.c: 755: }
  2020                           ;main.c: 757: if (ctrlreg & 0x40) {
  2021  0023A2  ADD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),6,b
  2022  0023A4  D027               	goto	l9857
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;main.c: 758: SendInformationEvent( i, 20,
  2026                           ;main.c: 759: 24 );
  2027  0023A6  0E14               	movlw	20
  2028  0023A8  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2029  0023AA  0E18               	movlw	24
  2030  0023AC  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2031  0023AE  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2032  0023B0  ECFB  F01C         	call	_SendInformationEvent
  2033  0023B4  D01F               	goto	l9857
  2034  0023B6                     l9855:
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;main.c: 766: else {
  2038                           ;main.c: 768: relay_pulse_timer[ 0 ] =
  2039                           ;main.c: 769: readEEPROM( 0x43 + 18 + 2*i ) * 256 +
  2040                           ;main.c: 770: readEEPROM( 0x43 + 19 + 2*i );
  2041  0023B6  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2042  0023B8  0D02               	mullw	2
  2043  0023BA  0E56               	movlw	86
  2044  0023BC  24F3               	addwf	prodl,w,c
  2045  0023BE  6E08               	movwf	?_readEEPROM,c
  2046  0023C0  0E00               	movlw	0
  2047  0023C2  20F4               	addwfc	prodh,w,c
  2048  0023C4  6E09               	movwf	?_readEEPROM+1,c
  2049  0023C6  EC86  F01F         	call	_readEEPROM	;wreg free
  2050  0023CA  0100               	movlb	0	; () banked
  2051  0023CC  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2052  0023CE  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2053  0023D0  0D02               	mullw	2
  2054  0023D2  0E55               	movlw	85
  2055  0023D4  24F3               	addwf	prodl,w,c
  2056  0023D6  6E08               	movwf	?_readEEPROM,c
  2057  0023D8  0E00               	movlw	0
  2058  0023DA  20F4               	addwfc	prodh,w,c
  2059  0023DC  6E09               	movwf	?_readEEPROM+1,c
  2060  0023DE  EC86  F01F         	call	_readEEPROM	;wreg free
  2061  0023E2  0100               	movlb	0	; () banked
  2062  0023E4  6FCE               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2063  0023E6  6BCD               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2064  0023E8  51CC               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2065  0023EA  25CD               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2066  0023EC  6F70               	movwf	_relay_pulse_timer& (0+255),b
  2067  0023EE  0E00               	movlw	0
  2068  0023F0  21CE               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2069  0023F2  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  2070  0023F4                     l9857:
  2071                           
  2072                           ; BSR set to: 0
  2073  0023F4  2BD1               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  2074  0023F6  D68A               	goto	l9769
  2075  0023F8                     l232:
  2076                           
  2077                           ; BSR set to: 0
  2078  0023F8  0012               	return	
  2079  0023FA                     __end_of_doApplicationOneSecondWork:
  2080                           	opt stack 0
  2081                           tblptru	equ	0xFF8
  2082                           prodh	equ	0xFF4
  2083                           prodl	equ	0xFF3
  2084                           postinc0	equ	0xFEE
  2085                           wreg	equ	0xFE8
  2086                           postinc2	equ	0xFDE
  2087                           postdec2	equ	0xFDD
  2088                           fsr2h	equ	0xFDA
  2089                           fsr2l	equ	0xFD9
  2090                           status	equ	0xFD8
  2091                           
  2092 ;; *************** function _vscp_doOneSecondWork *****************
  2093 ;; Defined at:
  2094 ;;		line 513 in file "../../vscp_firmware/common/vscp_firmware.c"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;		None
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;		None
  2099 ;; Return value:  Size  Location     Type
  2100 ;;		None               void
  2101 ;; Registers used:
  2102 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2103 ;; Tracked objects:
  2104 ;;		On entry : F/0
  2105 ;;		On exit  : F/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2108 ;;      Params:         0       0       0       0       0       0       0
  2109 ;;      Locals:         0       0       0       0       0       0       0
  2110 ;;      Temps:          1       0       0       0       0       0       0
  2111 ;;      Totals:         1       0       0       0       0       0       0
  2112 ;;Total ram usage:        1 bytes
  2113 ;; Hardware stack levels used:    1
  2114 ;; Hardware stack levels required when called:    8
  2115 ;; This function calls:
  2116 ;;		_vscp_getZone
  2117 ;;		_vscp_getSubzone
  2118 ;;		_vscp_sendHeartBeat
  2119 ;; This function is called by:
  2120 ;;		_main
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           	psect	text3
  2125  003A62                     __ptext3:
  2126                           	opt stack 0
  2127  003A62                     _vscp_doOneSecondWork:
  2128                           	opt stack 22
  2129                           
  2130                           ; BSR set to: 0
  2131                           ;vscp_firmware.c: 515: ++vscp_second;
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;incstack = 0
  2135                           ;incstack = 0
  2136  003A62  2B95               	incf	_vscp_second& (0+255),f,b
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;vscp_firmware.c: 517: if (vscp_second > 59) {
  2140  003A64  0E3B               	movlw	59
  2141  003A66  6595               	cpfsgt	_vscp_second& (0+255),b
  2142  003A68  D00D               	goto	l7885
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;vscp_firmware.c: 518: vscp_second = 0;
  2146  003A6A  6B95               	clrf	_vscp_second& (0+255),b
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;vscp_firmware.c: 519: vscp_minute++;
  2150  003A6C  2B90               	incf	_vscp_minute& (0+255),f,b
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;vscp_firmware.c: 522: if (0x03 == vscp_node_state) {
  2154  003A6E  5192               	movf	_vscp_node_state& (0+255),w,b
  2155  003A70  0A03               	xorlw	3
  2156  003A72  E108               	bnz	l7885
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;vscp_firmware.c: 523: vscp_sendHeartBeat(vscp_getZone(),
  2160                           ;vscp_firmware.c: 524: vscp_getSubzone());
  2161  003A74  ECA0  F01F         	call	_vscp_getSubzone	;wreg free
  2162  003A78  0100               	movlb	0	; () banked
  2163  003A7A  6FC5               	movwf	?_vscp_sendHeartBeat& (0+255),b
  2164  003A7C  ECA5  F01F         	call	_vscp_getZone	;wreg free
  2165  003A80  EC44  F01E         	call	_vscp_sendHeartBeat
  2166  003A84                     l7885:
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;vscp_firmware.c: 525: }
  2170                           ;vscp_firmware.c: 526: }
  2171                           ;vscp_firmware.c: 528: if (vscp_minute > 59) {
  2172  003A84  0E3B               	movlw	59
  2173  003A86  6590               	cpfsgt	_vscp_minute& (0+255),b
  2174  003A88  D002               	goto	l7891
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;vscp_firmware.c: 529: vscp_minute = 0;
  2178  003A8A  6B90               	clrf	_vscp_minute& (0+255),b
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;vscp_firmware.c: 530: vscp_hour++;
  2182  003A8C  2B8E               	incf	_vscp_hour& (0+255),f,b
  2183  003A8E                     l7891:
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;vscp_firmware.c: 531: }
  2187                           ;vscp_firmware.c: 533: if (vscp_hour > 23) vscp_hour = 0;
  2188  003A8E  0E17               	movlw	23
  2189  003A90  658E               	cpfsgt	_vscp_hour& (0+255),b
  2190  003A92  D001               	goto	l7895
  2191                           
  2192                           ; BSR set to: 0
  2193  003A94  6B8E               	clrf	_vscp_hour& (0+255),b
  2194  003A96                     l7895:
  2195                           
  2196                           ; BSR set to: 0
  2197                           ;vscp_firmware.c: 537: if (0x03 == vscp_node_state) {
  2198  003A96  5192               	movf	_vscp_node_state& (0+255),w,b
  2199  003A98  0A03               	xorlw	3
  2200  003A9A  E109               	bnz	l1101
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;vscp_firmware.c: 538: vscp_guid_reset++;
  2204  003A9C  2B8D               	incf	_vscp_guid_reset& (0+255),f,b
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;vscp_firmware.c: 539: if ((vscp_guid_reset & 0x0f) >= 2) {
  2208  003A9E  C08D  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  2209  003AA2  0E0F               	movlw	15
  2210  003AA4  164D               	andwf	??_vscp_doOneSecondWork,f,c
  2211  003AA6  0E02               	movlw	2
  2212  003AA8  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  2213  003AAA  B0D8               	btfsc	status,0,c
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;vscp_firmware.c: 540: vscp_guid_reset = 0;
  2217  003AAC  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  2218  003AAE                     l1101:
  2219                           
  2220                           ; BSR set to: 0
  2221  003AAE  0012               	return	
  2222  003AB0                     __end_of_vscp_doOneSecondWork:
  2223                           	opt stack 0
  2224                           tblptru	equ	0xFF8
  2225                           prodh	equ	0xFF4
  2226                           prodl	equ	0xFF3
  2227                           postinc0	equ	0xFEE
  2228                           wreg	equ	0xFE8
  2229                           postinc2	equ	0xFDE
  2230                           postdec2	equ	0xFDD
  2231                           fsr2h	equ	0xFDA
  2232                           fsr2l	equ	0xFD9
  2233                           status	equ	0xFD8
  2234                           
  2235 ;; *************** function _vscp_sendHeartBeat *****************
  2236 ;; Defined at:
  2237 ;;		line 367 in file "../../vscp_firmware/common/vscp_firmware.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;  zone            1    wreg     unsigned char 
  2240 ;;  subzone         1   20[BANK0 ] unsigned char 
  2241 ;; Auto vars:     Size  Location     Type
  2242 ;;  zone            1   75[COMRAM] unsigned char 
  2243 ;; Return value:  Size  Location     Type
  2244 ;;		None               void
  2245 ;; Registers used:
  2246 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2247 ;; Tracked objects:
  2248 ;;		On entry : 0/0
  2249 ;;		On exit  : F/0
  2250 ;;		Unchanged: 0/0
  2251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2252 ;;      Params:         0       1       0       0       0       0       0
  2253 ;;      Locals:         1       0       0       0       0       0       0
  2254 ;;      Temps:          0       0       0       0       0       0       0
  2255 ;;      Totals:         1       1       0       0       0       0       0
  2256 ;;Total ram usage:        2 bytes
  2257 ;; Hardware stack levels used:    1
  2258 ;; Hardware stack levels required when called:    7
  2259 ;; This function calls:
  2260 ;;		_vscp_sendEvent
  2261 ;; This function is called by:
  2262 ;;		_vscp_doOneSecondWork
  2263 ;; This function uses a non-reentrant model
  2264 ;;
  2265                           
  2266                           	psect	text4
  2267  003C88                     __ptext4:
  2268                           	opt stack 0
  2269  003C88                     _vscp_sendHeartBeat:
  2270                           	opt stack 22
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;incstack = 0
  2274                           ;incstack = 0
  2275                           ;vscp_sendHeartBeat@zone stored from wreg
  2276  003C88  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  2277                           
  2278                           ;vscp_firmware.c: 368: vscp_omsg.flags = 0x80 + 3;
  2279  003C8C  0E83               	movlw	131
  2280  003C8E  0100               	movlb	0	; () banked
  2281  003C90  6FA4               	movwf	_vscp_omsg& (0+255),b
  2282                           
  2283                           ;vscp_firmware.c: 369: vscp_omsg.priority = 0x07;
  2284  003C92  0E07               	movlw	7
  2285  003C94  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  2286                           
  2287                           ;vscp_firmware.c: 370: vscp_omsg.vscp_class = 20;
  2288  003C96  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  2289  003C98  0E14               	movlw	20
  2290  003C9A  6FA6               	movwf	(_vscp_omsg+2)& (0+255),b
  2291                           
  2292                           ;vscp_firmware.c: 371: vscp_omsg.vscp_type = 9;
  2293  003C9C  0E09               	movlw	9
  2294  003C9E  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;vscp_firmware.c: 372: vscp_omsg.data[ 0 ] = 0;
  2298  003CA0  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  2299                           
  2300                           ; BSR set to: 0
  2301                           ;vscp_firmware.c: 373: vscp_omsg.data[ 1 ] = zone;
  2302  003CA2  C04C  F0AA         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;vscp_firmware.c: 374: vscp_omsg.data[ 2 ] = subzone;
  2306  003CA6  C0C5  F0AB         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  2307                           
  2308                           ; BSR set to: 0
  2309                           ;vscp_firmware.c: 377: vscp_sendEvent();
  2310  003CAA  EF57  F01E         	goto	_vscp_sendEvent	;wreg free
  2311  003CAE                     __end_of_vscp_sendHeartBeat:
  2312                           	opt stack 0
  2313                           tblptru	equ	0xFF8
  2314                           prodh	equ	0xFF4
  2315                           prodl	equ	0xFF3
  2316                           postinc0	equ	0xFEE
  2317                           wreg	equ	0xFE8
  2318                           postinc2	equ	0xFDE
  2319                           postdec2	equ	0xFDD
  2320                           fsr2h	equ	0xFDA
  2321                           fsr2l	equ	0xFD9
  2322                           status	equ	0xFD8
  2323                           
  2324 ;; *************** function _vscp_getSubzone *****************
  2325 ;; Defined at:
  2326 ;;		line 881 in file "../main.c"
  2327 ;; Parameters:    Size  Location     Type
  2328 ;;		None
  2329 ;; Auto vars:     Size  Location     Type
  2330 ;;		None
  2331 ;; Return value:  Size  Location     Type
  2332 ;;                  1    wreg      unsigned char 
  2333 ;; Registers used:
  2334 ;;		wreg, status,2, cstack
  2335 ;; Tracked objects:
  2336 ;;		On entry : F/0
  2337 ;;		On exit  : 0/0
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2340 ;;      Params:         0       0       0       0       0       0       0
  2341 ;;      Locals:         0       0       0       0       0       0       0
  2342 ;;      Temps:          0       0       0       0       0       0       0
  2343 ;;      Totals:         0       0       0       0       0       0       0
  2344 ;;Total ram usage:        0 bytes
  2345 ;; Hardware stack levels used:    1
  2346 ;; Hardware stack levels required when called:    3
  2347 ;; This function calls:
  2348 ;;		_readEEPROM
  2349 ;; This function is called by:
  2350 ;;		_vscp_doOneSecondWork
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           	psect	text5
  2355  003F40                     __ptext5:
  2356                           	opt stack 0
  2357  003F40                     _vscp_getSubzone:
  2358                           	opt stack 26
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;main.c: 882: return readEEPROM( 0x43 + 1 );
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;incstack = 0
  2365                           ;incstack = 0
  2366  003F40  6A09               	clrf	?_readEEPROM+1,c
  2367  003F42  0E44               	movlw	68
  2368  003F44  6E08               	movwf	?_readEEPROM,c
  2369  003F46  EF86  F01F         	goto	_readEEPROM	;wreg free
  2370  003F4A                     __end_of_vscp_getSubzone:
  2371                           	opt stack 0
  2372                           tblptru	equ	0xFF8
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           postinc0	equ	0xFEE
  2376                           wreg	equ	0xFE8
  2377                           postinc2	equ	0xFDE
  2378                           postdec2	equ	0xFDD
  2379                           fsr2h	equ	0xFDA
  2380                           fsr2l	equ	0xFD9
  2381                           status	equ	0xFD8
  2382                           
  2383 ;; *************** function _vscp_getZone *****************
  2384 ;; Defined at:
  2385 ;;		line 872 in file "../main.c"
  2386 ;; Parameters:    Size  Location     Type
  2387 ;;		None
  2388 ;; Auto vars:     Size  Location     Type
  2389 ;;		None
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  1    wreg      unsigned char 
  2392 ;; Registers used:
  2393 ;;		wreg, status,2, cstack
  2394 ;; Tracked objects:
  2395 ;;		On entry : F/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2399 ;;      Params:         0       0       0       0       0       0       0
  2400 ;;      Locals:         0       0       0       0       0       0       0
  2401 ;;      Temps:          0       0       0       0       0       0       0
  2402 ;;      Totals:         0       0       0       0       0       0       0
  2403 ;;Total ram usage:        0 bytes
  2404 ;; Hardware stack levels used:    1
  2405 ;; Hardware stack levels required when called:    3
  2406 ;; This function calls:
  2407 ;;		_readEEPROM
  2408 ;; This function is called by:
  2409 ;;		_vscp_doOneSecondWork
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           	psect	text6
  2414  003F4A                     __ptext6:
  2415                           	opt stack 0
  2416  003F4A                     _vscp_getZone:
  2417                           	opt stack 26
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;main.c: 873: return readEEPROM( 0x43 + 0 );
  2421                           
  2422                           ;incstack = 0
  2423                           ;incstack = 0
  2424  003F4A  6A09               	clrf	?_readEEPROM+1,c
  2425  003F4C  0E43               	movlw	67
  2426  003F4E  6E08               	movwf	?_readEEPROM,c
  2427  003F50  EF86  F01F         	goto	_readEEPROM	;wreg free
  2428  003F54                     __end_of_vscp_getZone:
  2429                           	opt stack 0
  2430                           tblptru	equ	0xFF8
  2431                           prodh	equ	0xFF4
  2432                           prodl	equ	0xFF3
  2433                           postinc0	equ	0xFEE
  2434                           wreg	equ	0xFE8
  2435                           postinc2	equ	0xFDE
  2436                           postdec2	equ	0xFDD
  2437                           fsr2h	equ	0xFDA
  2438                           fsr2l	equ	0xFD9
  2439                           status	equ	0xFD8
  2440                           
  2441 ;; *************** function _vscp_error *****************
  2442 ;; Defined at:
  2443 ;;		line 188 in file "../../vscp_firmware/common/vscp_firmware.c"
  2444 ;; Parameters:    Size  Location     Type
  2445 ;;		None
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;		None
  2448 ;; Return value:  Size  Location     Type
  2449 ;;		None               void
  2450 ;; Registers used:
  2451 ;;		None
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2457 ;;      Params:         0       0       0       0       0       0       0
  2458 ;;      Locals:         0       0       0       0       0       0       0
  2459 ;;      Temps:          0       0       0       0       0       0       0
  2460 ;;      Totals:         0       0       0       0       0       0       0
  2461 ;;Total ram usage:        0 bytes
  2462 ;; Hardware stack levels used:    1
  2463 ;; Hardware stack levels required when called:    2
  2464 ;; This function calls:
  2465 ;;		Nothing
  2466 ;; This function is called by:
  2467 ;;		_main
  2468 ;; This function uses a non-reentrant model
  2469 ;;
  2470                           
  2471                           	psect	text7
  2472  003F84                     __ptext7:
  2473                           	opt stack 0
  2474  003F84                     _vscp_error:
  2475                           	opt stack 28
  2476                           
  2477                           ;vscp_firmware.c: 189: vscp_initledfunc = 0x00;
  2478                           
  2479                           ;incstack = 0
  2480                           ;incstack = 0
  2481  003F84  6A56               	clrf	_vscp_initledfunc,c
  2482  003F86  0012               	return	
  2483  003F88                     __end_of_vscp_error:
  2484                           	opt stack 0
  2485                           tblptru	equ	0xFF8
  2486                           prodh	equ	0xFF4
  2487                           prodl	equ	0xFF3
  2488                           postinc0	equ	0xFEE
  2489                           wreg	equ	0xFE8
  2490                           postinc2	equ	0xFDE
  2491                           postdec2	equ	0xFDD
  2492                           fsr2h	equ	0xFDA
  2493                           fsr2l	equ	0xFD9
  2494                           status	equ	0xFD8
  2495                           
  2496 ;; *************** function _doDM *****************
  2497 ;; Defined at:
  2498 ;;		line 1601 in file "../main.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;		None
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;  class_mask      2   33[BANK0 ] unsigned short 
  2503 ;;  class_filter    2   31[BANK0 ] unsigned short 
  2504 ;;  i               1   44[BANK0 ] unsigned char 
  2505 ;;  dmflags         1   43[BANK0 ] unsigned char 
  2506 ;;  type_mask       1   36[BANK0 ] unsigned char 
  2507 ;;  type_filter     1   35[BANK0 ] unsigned char 
  2508 ;; Return value:  Size  Location     Type
  2509 ;;		None               void
  2510 ;; Registers used:
  2511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2512 ;; Tracked objects:
  2513 ;;		On entry : 0/0
  2514 ;;		On exit  : F/0
  2515 ;;		Unchanged: 0/0
  2516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2517 ;;      Params:         0       0       0       0       0       0       0
  2518 ;;      Locals:         0      14       0       0       0       0       0
  2519 ;;      Temps:          0       3       0       0       0       0       0
  2520 ;;      Totals:         0      17       0       0       0       0       0
  2521 ;;Total ram usage:       17 bytes
  2522 ;; Hardware stack levels used:    1
  2523 ;; Hardware stack levels required when called:    8
  2524 ;; This function calls:
  2525 ;;		_readEEPROM
  2526 ;;		_doActionOff
  2527 ;;		_doActionOn
  2528 ;;		_doActionPulse
  2529 ;;		_doActionStatus
  2530 ;;		_doActionDisable
  2531 ;;		_doActionToggle
  2532 ;; This function is called by:
  2533 ;;		_main
  2534 ;; This function uses a non-reentrant model
  2535 ;;
  2536                           
  2537                           	psect	text8
  2538  001DE8                     __ptext8:
  2539                           	opt stack 0
  2540  001DE8                     _doDM:
  2541                           	opt stack 22
  2542                           
  2543                           ;main.c: 1603: unsigned char i;
  2544                           ;main.c: 1604: unsigned char dmflags;
  2545                           ;main.c: 1605: unsigned short class_filter;
  2546                           ;main.c: 1606: unsigned short class_mask;
  2547                           ;main.c: 1607: unsigned char type_filter;
  2548                           ;main.c: 1608: unsigned char type_mask;
  2549                           ;main.c: 1611: if ( 0 == vscp_imsg.vscp_class ) return;
  2550                           
  2551                           ;incstack = 0
  2552                           ;incstack = 0
  2553  001DE8  0100               	movlb	0	; () banked
  2554  001DEA  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  2555  001DEC  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2556  001DEE  E101 D18A          	bz	l409
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;main.c: 1612: LATBbits.LATB4 = 1;
  2560  001DF2  888A               	bsf	3978,4,c	;volatile
  2561                           
  2562                           ;main.c: 1615: for (i = 0; i < 7; i++) {
  2563  001DF4  6BDD               	clrf	doDM@i& (0+255),b
  2564  001DF6                     l9711:
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;main.c: 1618: dmflags = readEEPROM( 0x43 + 72 + 1 + (8 * i) );
  2568  001DF6  51DD               	movf	doDM@i& (0+255),w,b
  2569  001DF8  6FCD               	movwf	??_doDM& (0+255),b
  2570  001DFA  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2571  001DFC  90D8               	bcf	status,0,c
  2572  001DFE  37CD               	rlcf	??_doDM& (0+255),f,b
  2573  001E00  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2574  001E02  90D8               	bcf	status,0,c
  2575  001E04  37CD               	rlcf	??_doDM& (0+255),f,b
  2576  001E06  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2577  001E08  90D8               	bcf	status,0,c
  2578  001E0A  37CD               	rlcf	??_doDM& (0+255),f,b
  2579  001E0C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2580  001E0E  0E8C               	movlw	140
  2581  001E10  25CD               	addwf	??_doDM& (0+255),w,b
  2582  001E12  6E08               	movwf	?_readEEPROM,c
  2583  001E14  0E00               	movlw	0
  2584  001E16  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2585  001E18  6E09               	movwf	?_readEEPROM+1,c
  2586  001E1A  EC86  F01F         	call	_readEEPROM	;wreg free
  2587  001E1E  0100               	movlb	0	; () banked
  2588  001E20  6FDC               	movwf	doDM@dmflags& (0+255),b
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;main.c: 1621: if ( dmflags & 0x80 ) {
  2592  001E22  AFDC               	btfss	doDM@dmflags& (0+255),7,b
  2593  001E24  D16B               	goto	l9763
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;main.c: 1622: LATBbits.LATB1 = 1;
  2597  001E26  828A               	bsf	3978,1,c	;volatile
  2598                           
  2599                           ;main.c: 1626: if ( ( dmflags & 0x40 ) &&
  2600                           ;main.c: 1627: ( vscp_imsg.oaddr != readEEPROM( 0x43 + 72 + (8 * i) ) ) ) {
  2601  001E28  ADDC               	btfss	doDM@dmflags& (0+255),6,b
  2602  001E2A  D018               	goto	l413
  2603                           
  2604                           ; BSR set to: 0
  2605  001E2C  51DD               	movf	doDM@i& (0+255),w,b
  2606  001E2E  6FCD               	movwf	??_doDM& (0+255),b
  2607  001E30  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2608  001E32  90D8               	bcf	status,0,c
  2609  001E34  37CD               	rlcf	??_doDM& (0+255),f,b
  2610  001E36  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2611  001E38  90D8               	bcf	status,0,c
  2612  001E3A  37CD               	rlcf	??_doDM& (0+255),f,b
  2613  001E3C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2614  001E3E  90D8               	bcf	status,0,c
  2615  001E40  37CD               	rlcf	??_doDM& (0+255),f,b
  2616  001E42  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2617  001E44  0E8B               	movlw	139
  2618  001E46  25CD               	addwf	??_doDM& (0+255),w,b
  2619  001E48  6E08               	movwf	?_readEEPROM,c
  2620  001E4A  0E00               	movlw	0
  2621  001E4C  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2622  001E4E  6E09               	movwf	?_readEEPROM+1,c
  2623  001E50  EC86  F01F         	call	_readEEPROM	;wreg free
  2624  001E54  0100               	movlb	0	; () banked
  2625  001E56  199B               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2626  001E58  E001 D150          	bnz	l9763
  2627  001E5C                     l413:
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;main.c: 1629: }
  2631                           ;main.c: 1630: LATBbits.LATB0 = 1;
  2632  001E5C  808A               	bsf	3978,0,c	;volatile
  2633                           
  2634                           ;main.c: 1634: if ( dmflags & 0x10 ) {
  2635  001E5E  A9DC               	btfss	doDM@dmflags& (0+255),4,b
  2636  001E60  D00B               	goto	l415
  2637                           
  2638                           ; BSR set to: 0
  2639                           ;main.c: 1635: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2640  001E62  299D               	incf	(_vscp_imsg+7)& (0+255),w,b
  2641  001E64  E009               	bz	l415
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;main.c: 1636: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x43 + 0 ) ) {
  2645  001E66  6A09               	clrf	?_readEEPROM+1,c
  2646  001E68  0E43               	movlw	67
  2647  001E6A  6E08               	movwf	?_readEEPROM,c
  2648  001E6C  EC86  F01F         	call	_readEEPROM	;wreg free
  2649  001E70  0100               	movlb	0	; () banked
  2650  001E72  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2651  001E74  E001 D142          	bnz	l9763
  2652  001E78                     l415:
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;main.c: 1638: }
  2656                           ;main.c: 1639: }
  2657                           ;main.c: 1640: }
  2658                           ;main.c: 1641: LATCbits.LATC7 = 1;
  2659  001E78  8E8B               	bsf	3979,7,c	;volatile
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;main.c: 1644: class_filter = ( dmflags & 0x01)*256 +
  2663                           ;main.c: 1645: readEEPROM( 0x43 +
  2664                           ;main.c: 1646: 72 +
  2665                           ;main.c: 1647: (8 * i) +
  2666                           ;main.c: 1648: 3);
  2667  001E7A  51DD               	movf	doDM@i& (0+255),w,b
  2668  001E7C  0D08               	mullw	8
  2669  001E7E  0E8E               	movlw	142
  2670  001E80  24F3               	addwf	prodl,w,c
  2671  001E82  6E08               	movwf	?_readEEPROM,c
  2672  001E84  0E00               	movlw	0
  2673  001E86  20F4               	addwfc	prodh,w,c
  2674  001E88  6E09               	movwf	?_readEEPROM+1,c
  2675  001E8A  EC86  F01F         	call	_readEEPROM	;wreg free
  2676  001E8E  0100               	movlb	0	; () banked
  2677  001E90  6FCD               	movwf	??_doDM& (0+255),b
  2678  001E92  51DC               	movf	doDM@dmflags& (0+255),w,b
  2679  001E94  0B01               	andlw	1
  2680  001E96  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2681  001E98  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2682  001E9A  51CD               	movf	??_doDM& (0+255),w,b
  2683  001E9C  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2684  001E9E  6FD0               	movwf	doDM@class_filter& (0+255),b
  2685  001EA0  0E00               	movlw	0
  2686  001EA2  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2687  001EA4  6FD1               	movwf	(doDM@class_filter+1)& (0+255),b
  2688                           
  2689                           ;main.c: 1649: class_mask = ( dmflags & 0x02)*256 +
  2690                           ;main.c: 1650: readEEPROM( 0x43 +
  2691                           ;main.c: 1651: 72 +
  2692                           ;main.c: 1652: (8 * i) +
  2693                           ;main.c: 1653: 2);
  2694  001EA6  51DD               	movf	doDM@i& (0+255),w,b
  2695  001EA8  0D08               	mullw	8
  2696  001EAA  0E8D               	movlw	141
  2697  001EAC  24F3               	addwf	prodl,w,c
  2698  001EAE  6E08               	movwf	?_readEEPROM,c
  2699  001EB0  0E00               	movlw	0
  2700  001EB2  20F4               	addwfc	prodh,w,c
  2701  001EB4  6E09               	movwf	?_readEEPROM+1,c
  2702  001EB6  EC86  F01F         	call	_readEEPROM	;wreg free
  2703  001EBA  0100               	movlb	0	; () banked
  2704  001EBC  6FCD               	movwf	??_doDM& (0+255),b
  2705  001EBE  51DC               	movf	doDM@dmflags& (0+255),w,b
  2706  001EC0  0B02               	andlw	2
  2707  001EC2  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2708  001EC4  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2709  001EC6  51CD               	movf	??_doDM& (0+255),w,b
  2710  001EC8  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2711  001ECA  6FD2               	movwf	doDM@class_mask& (0+255),b
  2712  001ECC  0E00               	movlw	0
  2713  001ECE  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2714  001ED0  6FD3               	movwf	(doDM@class_mask+1)& (0+255),b
  2715                           
  2716                           ; BSR set to: 0
  2717                           ;main.c: 1654: type_filter = readEEPROM( 0x43 +
  2718                           ;main.c: 1655: 72 +
  2719                           ;main.c: 1656: (8 * i) +
  2720                           ;main.c: 1657: 5);
  2721  001ED2  51DD               	movf	doDM@i& (0+255),w,b
  2722  001ED4  6FCD               	movwf	??_doDM& (0+255),b
  2723  001ED6  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2724  001ED8  90D8               	bcf	status,0,c
  2725  001EDA  37CD               	rlcf	??_doDM& (0+255),f,b
  2726  001EDC  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2727  001EDE  90D8               	bcf	status,0,c
  2728  001EE0  37CD               	rlcf	??_doDM& (0+255),f,b
  2729  001EE2  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2730  001EE4  90D8               	bcf	status,0,c
  2731  001EE6  37CD               	rlcf	??_doDM& (0+255),f,b
  2732  001EE8  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2733  001EEA  0E90               	movlw	144
  2734  001EEC  25CD               	addwf	??_doDM& (0+255),w,b
  2735  001EEE  6E08               	movwf	?_readEEPROM,c
  2736  001EF0  0E00               	movlw	0
  2737  001EF2  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2738  001EF4  6E09               	movwf	?_readEEPROM+1,c
  2739  001EF6  EC86  F01F         	call	_readEEPROM	;wreg free
  2740  001EFA  0100               	movlb	0	; () banked
  2741  001EFC  6FD4               	movwf	doDM@type_filter& (0+255),b
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;main.c: 1658: type_mask = readEEPROM( 0x43 +
  2745                           ;main.c: 1659: 72 +
  2746                           ;main.c: 1660: (8 * i) +
  2747                           ;main.c: 1661: 4);
  2748  001EFE  51DD               	movf	doDM@i& (0+255),w,b
  2749  001F00  6FCD               	movwf	??_doDM& (0+255),b
  2750  001F02  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2751  001F04  90D8               	bcf	status,0,c
  2752  001F06  37CD               	rlcf	??_doDM& (0+255),f,b
  2753  001F08  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2754  001F0A  90D8               	bcf	status,0,c
  2755  001F0C  37CD               	rlcf	??_doDM& (0+255),f,b
  2756  001F0E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2757  001F10  90D8               	bcf	status,0,c
  2758  001F12  37CD               	rlcf	??_doDM& (0+255),f,b
  2759  001F14  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2760  001F16  0E8F               	movlw	143
  2761  001F18  25CD               	addwf	??_doDM& (0+255),w,b
  2762  001F1A  6E08               	movwf	?_readEEPROM,c
  2763  001F1C  0E00               	movlw	0
  2764  001F1E  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2765  001F20  6E09               	movwf	?_readEEPROM+1,c
  2766  001F22  EC86  F01F         	call	_readEEPROM	;wreg free
  2767  001F26  0100               	movlb	0	; () banked
  2768  001F28  6FD5               	movwf	doDM@type_mask& (0+255),b
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;main.c: 1663: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2772                           ;main.c: 1664: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2773  001F2A  EE20  F098         	lfsr	2,_vscp_imsg+2
  2774  001F2E  CFDE F0CD          	movff	postinc2,??_doDM
  2775  001F32  CFDD F0CE          	movff	postdec2,??_doDM+1
  2776  001F36  51D0               	movf	doDM@class_filter& (0+255),w,b
  2777  001F38  1BCD               	xorwf	??_doDM& (0+255),f,b
  2778  001F3A  51D1               	movf	(doDM@class_filter+1)& (0+255),w,b
  2779  001F3C  1BCE               	xorwf	(??_doDM+1)& (0+255),f,b
  2780  001F3E  51D2               	movf	doDM@class_mask& (0+255),w,b
  2781  001F40  17CD               	andwf	??_doDM& (0+255),f,b
  2782  001F42  51D3               	movf	(doDM@class_mask+1)& (0+255),w,b
  2783  001F44  17CE               	andwf	(??_doDM+1)& (0+255),f,b
  2784  001F46  51CE               	movf	(??_doDM+1)& (0+255),w,b
  2785  001F48  11CD               	iorwf	??_doDM& (0+255),w,b
  2786  001F4A  E001 D0D7          	bnz	l9763
  2787                           
  2788                           ; BSR set to: 0
  2789  001F4E  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  2790  001F50  19D4               	xorwf	doDM@type_filter& (0+255),w,b
  2791  001F52  15D5               	andwf	doDM@type_mask& (0+255),w,b
  2792  001F54  E101 D0AF          	bz	l9761
  2793  001F58  D0D1               	goto	l9763
  2794  001F5A                     l9739:
  2795                           
  2796                           ;main.c: 1670: doActionOn( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2797  001F5A  0100               	movlb	0	; () banked
  2798  001F5C  51DD               	movf	doDM@i& (0+255),w,b
  2799  001F5E  6FCD               	movwf	??_doDM& (0+255),b
  2800  001F60  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2801  001F62  90D8               	bcf	status,0,c
  2802  001F64  37CD               	rlcf	??_doDM& (0+255),f,b
  2803  001F66  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2804  001F68  90D8               	bcf	status,0,c
  2805  001F6A  37CD               	rlcf	??_doDM& (0+255),f,b
  2806  001F6C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2807  001F6E  90D8               	bcf	status,0,c
  2808  001F70  37CD               	rlcf	??_doDM& (0+255),f,b
  2809  001F72  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2810  001F74  0E92               	movlw	146
  2811  001F76  25CD               	addwf	??_doDM& (0+255),w,b
  2812  001F78  6E08               	movwf	?_readEEPROM,c
  2813  001F7A  0E00               	movlw	0
  2814  001F7C  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2815  001F7E  6E09               	movwf	?_readEEPROM+1,c
  2816  001F80  EC86  F01F         	call	_readEEPROM	;wreg free
  2817  001F84  0100               	movlb	0	; () banked
  2818  001F86  6FD6               	movwf	_doDM$2144& (0+255),b
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;main.c: 1670: doActionOn( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2822  001F88  C0D6  F051         	movff	_doDM$2144,?_doActionOn
  2823  001F8C  51DC               	movf	doDM@dmflags& (0+255),w,b
  2824  001F8E  ECFD  F011         	call	_doActionOn
  2825                           
  2826                           ;main.c: 1671: break;
  2827  001F92  D0B4               	goto	l9763
  2828  001F94                     l9743:
  2829                           
  2830                           ;main.c: 1674: doActionOff( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2831  001F94  0100               	movlb	0	; () banked
  2832  001F96  51DD               	movf	doDM@i& (0+255),w,b
  2833  001F98  6FCD               	movwf	??_doDM& (0+255),b
  2834  001F9A  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2835  001F9C  90D8               	bcf	status,0,c
  2836  001F9E  37CD               	rlcf	??_doDM& (0+255),f,b
  2837  001FA0  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2838  001FA2  90D8               	bcf	status,0,c
  2839  001FA4  37CD               	rlcf	??_doDM& (0+255),f,b
  2840  001FA6  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2841  001FA8  90D8               	bcf	status,0,c
  2842  001FAA  37CD               	rlcf	??_doDM& (0+255),f,b
  2843  001FAC  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2844  001FAE  0E92               	movlw	146
  2845  001FB0  25CD               	addwf	??_doDM& (0+255),w,b
  2846  001FB2  6E08               	movwf	?_readEEPROM,c
  2847  001FB4  0E00               	movlw	0
  2848  001FB6  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2849  001FB8  6E09               	movwf	?_readEEPROM+1,c
  2850  001FBA  EC86  F01F         	call	_readEEPROM	;wreg free
  2851  001FBE  0100               	movlb	0	; () banked
  2852  001FC0  6FD7               	movwf	_doDM$2145& (0+255),b
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;main.c: 1674: doActionOff( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2856  001FC2  C0D7  F051         	movff	_doDM$2145,?_doActionOff
  2857  001FC6  51DC               	movf	doDM@dmflags& (0+255),w,b
  2858  001FC8  EC93  F01A         	call	_doActionOff
  2859                           
  2860                           ;main.c: 1675: break;
  2861  001FCC  D097               	goto	l9763
  2862  001FCE                     l9747:
  2863                           
  2864                           ;main.c: 1678: doActionPulse( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2865  001FCE  0100               	movlb	0	; () banked
  2866  001FD0  51DD               	movf	doDM@i& (0+255),w,b
  2867  001FD2  6FCD               	movwf	??_doDM& (0+255),b
  2868  001FD4  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2869  001FD6  90D8               	bcf	status,0,c
  2870  001FD8  37CD               	rlcf	??_doDM& (0+255),f,b
  2871  001FDA  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2872  001FDC  90D8               	bcf	status,0,c
  2873  001FDE  37CD               	rlcf	??_doDM& (0+255),f,b
  2874  001FE0  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2875  001FE2  90D8               	bcf	status,0,c
  2876  001FE4  37CD               	rlcf	??_doDM& (0+255),f,b
  2877  001FE6  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2878  001FE8  0E92               	movlw	146
  2879  001FEA  25CD               	addwf	??_doDM& (0+255),w,b
  2880  001FEC  6E08               	movwf	?_readEEPROM,c
  2881  001FEE  0E00               	movlw	0
  2882  001FF0  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2883  001FF2  6E09               	movwf	?_readEEPROM+1,c
  2884  001FF4  EC86  F01F         	call	_readEEPROM	;wreg free
  2885  001FF8  0100               	movlb	0	; () banked
  2886  001FFA  6FD8               	movwf	_doDM$2146& (0+255),b
  2887                           
  2888                           ;main.c: 1678: doActionPulse( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2889  001FFC  C0D8  F00B         	movff	_doDM$2146,?_doActionPulse
  2890  002000  51DC               	movf	doDM@dmflags& (0+255),w,b
  2891  002002  EC39  F014         	call	_doActionPulse
  2892                           
  2893                           ;main.c: 1679: break;
  2894  002006  D07A               	goto	l9763
  2895  002008                     l9749:
  2896                           
  2897                           ;main.c: 1682: doActionStatus( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2898  002008  0100               	movlb	0	; () banked
  2899  00200A  51DD               	movf	doDM@i& (0+255),w,b
  2900  00200C  6FCD               	movwf	??_doDM& (0+255),b
  2901  00200E  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2902  002010  90D8               	bcf	status,0,c
  2903  002012  37CD               	rlcf	??_doDM& (0+255),f,b
  2904  002014  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2905  002016  90D8               	bcf	status,0,c
  2906  002018  37CD               	rlcf	??_doDM& (0+255),f,b
  2907  00201A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2908  00201C  90D8               	bcf	status,0,c
  2909  00201E  37CD               	rlcf	??_doDM& (0+255),f,b
  2910  002020  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2911  002022  0E92               	movlw	146
  2912  002024  25CD               	addwf	??_doDM& (0+255),w,b
  2913  002026  6E08               	movwf	?_readEEPROM,c
  2914  002028  0E00               	movlw	0
  2915  00202A  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2916  00202C  6E09               	movwf	?_readEEPROM+1,c
  2917  00202E  EC86  F01F         	call	_readEEPROM	;wreg free
  2918  002032  0100               	movlb	0	; () banked
  2919  002034  6FD9               	movwf	_doDM$2147& (0+255),b
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;main.c: 1682: doActionStatus( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2923  002036  C0D9  F051         	movff	_doDM$2147,?_doActionStatus
  2924  00203A  51DC               	movf	doDM@dmflags& (0+255),w,b
  2925  00203C  EC2B  F019         	call	_doActionStatus
  2926                           
  2927                           ;main.c: 1683: break;
  2928  002040  D05D               	goto	l9763
  2929  002042                     l9753:
  2930                           
  2931                           ;main.c: 1686: doActionDisable( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2932  002042  0100               	movlb	0	; () banked
  2933  002044  51DD               	movf	doDM@i& (0+255),w,b
  2934  002046  6FCD               	movwf	??_doDM& (0+255),b
  2935  002048  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2936  00204A  90D8               	bcf	status,0,c
  2937  00204C  37CD               	rlcf	??_doDM& (0+255),f,b
  2938  00204E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2939  002050  90D8               	bcf	status,0,c
  2940  002052  37CD               	rlcf	??_doDM& (0+255),f,b
  2941  002054  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2942  002056  90D8               	bcf	status,0,c
  2943  002058  37CD               	rlcf	??_doDM& (0+255),f,b
  2944  00205A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2945  00205C  0E92               	movlw	146
  2946  00205E  25CD               	addwf	??_doDM& (0+255),w,b
  2947  002060  6E08               	movwf	?_readEEPROM,c
  2948  002062  0E00               	movlw	0
  2949  002064  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2950  002066  6E09               	movwf	?_readEEPROM+1,c
  2951  002068  EC86  F01F         	call	_readEEPROM	;wreg free
  2952  00206C  0100               	movlb	0	; () banked
  2953  00206E  6FDA               	movwf	_doDM$2148& (0+255),b
  2954                           
  2955                           ;main.c: 1686: doActionDisable( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2956  002070  C0DA  F00B         	movff	_doDM$2148,?_doActionDisable
  2957  002074  51DC               	movf	doDM@dmflags& (0+255),w,b
  2958  002076  ECC5  F01C         	call	_doActionDisable
  2959                           
  2960                           ;main.c: 1687: break;
  2961  00207A  D040               	goto	l9763
  2962  00207C                     l9755:
  2963                           
  2964                           ;main.c: 1690: doActionToggle( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2965  00207C  0100               	movlb	0	; () banked
  2966  00207E  51DD               	movf	doDM@i& (0+255),w,b
  2967  002080  6FCD               	movwf	??_doDM& (0+255),b
  2968  002082  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2969  002084  90D8               	bcf	status,0,c
  2970  002086  37CD               	rlcf	??_doDM& (0+255),f,b
  2971  002088  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2972  00208A  90D8               	bcf	status,0,c
  2973  00208C  37CD               	rlcf	??_doDM& (0+255),f,b
  2974  00208E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2975  002090  90D8               	bcf	status,0,c
  2976  002092  37CD               	rlcf	??_doDM& (0+255),f,b
  2977  002094  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2978  002096  0E92               	movlw	146
  2979  002098  25CD               	addwf	??_doDM& (0+255),w,b
  2980  00209A  6E08               	movwf	?_readEEPROM,c
  2981  00209C  0E00               	movlw	0
  2982  00209E  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2983  0020A0  6E09               	movwf	?_readEEPROM+1,c
  2984  0020A2  EC86  F01F         	call	_readEEPROM	;wreg free
  2985  0020A6  0100               	movlb	0	; () banked
  2986  0020A8  6FDB               	movwf	_doDM$2149& (0+255),b
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;main.c: 1690: doActionToggle( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2990  0020AA  C0DB  F051         	movff	_doDM$2149,?_doActionToggle
  2991  0020AE  51DC               	movf	doDM@dmflags& (0+255),w,b
  2992  0020B0  EC14  F018         	call	_doActionToggle
  2993                           
  2994                           ;main.c: 1691: break;
  2995  0020B4  D023               	goto	l9763
  2996  0020B6                     l9761:
  2997                           
  2998                           ; BSR set to: 0
  2999  0020B6  51DD               	movf	doDM@i& (0+255),w,b
  3000  0020B8  6FCD               	movwf	??_doDM& (0+255),b
  3001  0020BA  6BCE               	clrf	(??_doDM+1)& (0+255),b
  3002  0020BC  90D8               	bcf	status,0,c
  3003  0020BE  37CD               	rlcf	??_doDM& (0+255),f,b
  3004  0020C0  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3005  0020C2  90D8               	bcf	status,0,c
  3006  0020C4  37CD               	rlcf	??_doDM& (0+255),f,b
  3007  0020C6  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3008  0020C8  90D8               	bcf	status,0,c
  3009  0020CA  37CD               	rlcf	??_doDM& (0+255),f,b
  3010  0020CC  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3011  0020CE  0E91               	movlw	145
  3012  0020D0  25CD               	addwf	??_doDM& (0+255),w,b
  3013  0020D2  6E08               	movwf	?_readEEPROM,c
  3014  0020D4  0E00               	movlw	0
  3015  0020D6  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  3016  0020D8  6E09               	movwf	?_readEEPROM+1,c
  3017  0020DA  EC86  F01F         	call	_readEEPROM	;wreg free
  3018                           
  3019                           ; Switch size 1, requested type "speed"
  3020                           ; Number of cases is 6, Range of values is 1 to 16
  3021                           ; switch strategies available:
  3022                           ; Name         Instructions Cycles
  3023                           ; simple_byte           19    10 (average)
  3024                           ;	Chosen strategy is simple_byte
  3025  0020DE  0A01               	xorlw	1	; case 1
  3026  0020E0  E101 D73B          	bz	l9739
  3027  0020E4  0A03               	xorlw	3	; case 2
  3028  0020E6  E101 D755          	bz	l9743
  3029  0020EA  0A01               	xorlw	1	; case 3
  3030  0020EC  E101 D76F          	bz	l9747
  3031  0020F0  0A07               	xorlw	7	; case 4
  3032  0020F2  E0C4               	bz	l9755
  3033  0020F4  0A0E               	xorlw	14	; case 10
  3034  0020F6  E088               	bz	l9749
  3035  0020F8  0A1A               	xorlw	26	; case 16
  3036  0020FA  E0A3               	bz	l9753
  3037  0020FC                     l9763:
  3038  0020FC  0100               	movlb	0	; () banked
  3039  0020FE  2BDD               	incf	doDM@i& (0+255),f,b
  3040                           
  3041                           ; BSR set to: 0
  3042  002100  0E06               	movlw	6
  3043  002102  65DD               	cpfsgt	doDM@i& (0+255),b
  3044  002104  D678               	goto	l9711
  3045  002106                     l409:
  3046                           
  3047                           ; BSR set to: 0
  3048  002106  0012               	return	
  3049  002108                     __end_of_doDM:
  3050                           	opt stack 0
  3051                           tblptru	equ	0xFF8
  3052                           prodh	equ	0xFF4
  3053                           prodl	equ	0xFF3
  3054                           postinc0	equ	0xFEE
  3055                           wreg	equ	0xFE8
  3056                           postinc2	equ	0xFDE
  3057                           postdec2	equ	0xFDD
  3058                           fsr2h	equ	0xFDA
  3059                           fsr2l	equ	0xFD9
  3060                           status	equ	0xFD8
  3061                           
  3062 ;; *************** function _doActionToggle *****************
  3063 ;; Defined at:
  3064 ;;		line 2102 in file "../main.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;  dmflags         1    wreg     unsigned char 
  3067 ;;  arg             1   80[COMRAM] unsigned char 
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3070 ;;  i               1   27[BANK0 ] unsigned char 
  3071 ;;  bOn             1   26[BANK0 ] enum E15660
  3072 ;;  val             1   25[BANK0 ] unsigned char 
  3073 ;; Return value:  Size  Location     Type
  3074 ;;		None               void
  3075 ;; Registers used:
  3076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3077 ;; Tracked objects:
  3078 ;;		On entry : F/0
  3079 ;;		On exit  : F/0
  3080 ;;		Unchanged: 0/0
  3081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3082 ;;      Params:         1       0       0       0       0       0       0
  3083 ;;      Locals:         0       4       0       0       0       0       0
  3084 ;;      Temps:          0       2       0       0       0       0       0
  3085 ;;      Totals:         1       6       0       0       0       0       0
  3086 ;;Total ram usage:        7 bytes
  3087 ;; Hardware stack levels used:    1
  3088 ;; Hardware stack levels required when called:    7
  3089 ;; This function calls:
  3090 ;;		_readEEPROM
  3091 ;;		_SendInformationEvent
  3092 ;; This function is called by:
  3093 ;;		_doDM
  3094 ;; This function uses a non-reentrant model
  3095 ;;
  3096                           
  3097                           	psect	text9
  3098  003028                     __ptext9:
  3099                           	opt stack 0
  3100  003028                     _doActionToggle:
  3101                           	opt stack 22
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;incstack = 0
  3105                           ;incstack = 0
  3106                           ;doActionToggle@dmflags stored from wreg
  3107  003028  CFE8 F0C9          	movff	wreg,doActionToggle@dmflags
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;main.c: 2104: unsigned char i;
  3111                           ;main.c: 2105: unsigned char val;
  3112                           ;main.c: 2106: BOOL bOn = 0;
  3113  00302C  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3114                           
  3115                           ;main.c: 2108: for ( i = 0; i < 8; i++ ) {
  3116  00302E  6BCC               	clrf	doActionToggle@i& (0+255),b
  3117  003030                     l10381:
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;main.c: 2111: if ( !( arg & (1 << i) ) ) continue;
  3121  003030  C0CC  F0C7         	movff	doActionToggle@i,??_doActionToggle
  3122  003034  0E01               	movlw	1
  3123  003036  6FC8               	movwf	(??_doActionToggle+1)& (0+255),b
  3124  003038  2BC7               	incf	??_doActionToggle& (0+255),f,b
  3125  00303A  D002               	goto	u13204
  3126  00303C                     u13205:
  3127  00303C  90D8               	bcf	status,0,c
  3128  00303E  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3129  003040                     u13204:
  3130  003040  2FC7               	decfsz	??_doActionToggle& (0+255),f,b
  3131  003042  D7FC               	goto	u13205
  3132  003044  51C8               	movf	(??_doActionToggle+1)& (0+255),w,b
  3133  003046  1451               	andwf	doActionToggle@arg,w,c
  3134  003048  E07A               	bz	l10439
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;main.c: 2114: if ( dmflags & 0x08 ) {
  3138  00304A  A7C9               	btfss	doActionToggle@dmflags& (0+255),3,b
  3139  00304C  D00B               	goto	l10389
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;main.c: 2115: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3143                           ;main.c: 2116: 53 +
  3144                           ;main.c: 2117: i ) ) {
  3145  00304E  0E78               	movlw	120
  3146  003050  25CC               	addwf	doActionToggle@i& (0+255),w,b
  3147  003052  6E08               	movwf	?_readEEPROM,c
  3148  003054  6A09               	clrf	?_readEEPROM+1,c
  3149  003056  0E00               	movlw	0
  3150  003058  2209               	addwfc	?_readEEPROM+1,f,c
  3151  00305A  EC86  F01F         	call	_readEEPROM	;wreg free
  3152  00305E  0100               	movlb	0	; () banked
  3153  003060  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3154  003062  E16D               	bnz	l10439
  3155  003064                     l10389:
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;main.c: 2119: }
  3159                           ;main.c: 2120: }
  3160                           ;main.c: 2122: val = readEEPROM(0x43 + 10 + i);
  3161  003064  0E4D               	movlw	77
  3162  003066  25CC               	addwf	doActionToggle@i& (0+255),w,b
  3163  003068  6E08               	movwf	?_readEEPROM,c
  3164  00306A  6A09               	clrf	?_readEEPROM+1,c
  3165  00306C  0E00               	movlw	0
  3166  00306E  2209               	addwfc	?_readEEPROM+1,f,c
  3167  003070  EC86  F01F         	call	_readEEPROM	;wreg free
  3168  003074  0100               	movlb	0	; () banked
  3169  003076  6FCA               	movwf	doActionToggle@val& (0+255),b
  3170                           
  3171                           ;main.c: 2124: switch ( i ) {
  3172  003078  D02D               	goto	l10421
  3173  00307A                     l537:
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;main.c: 2127: if ( LATBbits.LATB4 ) {
  3177  00307A  A88A               	btfss	3978,4,c	;volatile
  3178  00307C  D002               	goto	l538
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;main.c: 2128: LATBbits.LATB4 = 0;
  3182  00307E  988A               	bcf	3978,4,c	;volatile
  3183  003080  D025               	goto	L12
  3184  003082                     l538:
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;main.c: 2131: LATBbits.LATB4 = 1;
  3188  003082  888A               	bsf	3978,4,c	;volatile
  3189  003084                     l10393:
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;main.c: 2132: bOn = 1;
  3193  003084  0E01               	movlw	1
  3194  003086  6FCB               	movwf	doActionToggle@bOn& (0+255),b
  3195  003088  D033               	goto	l10423
  3196  00308A                     l541:
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;main.c: 2137: if ( LATBbits.LATB1 ) {
  3200  00308A  A28A               	btfss	3978,1,c	;volatile
  3201  00308C  D002               	goto	l542
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;main.c: 2138: LATBbits.LATB1 = 0;
  3205  00308E  928A               	bcf	3978,1,c	;volatile
  3206  003090  D01D               	goto	L12
  3207  003092                     l542:
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;main.c: 2141: LATBbits.LATB1 = 1;
  3211  003092  828A               	bsf	3978,1,c	;volatile
  3212  003094  D7F7               	goto	l10393
  3213  003096                     l544:
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;main.c: 2147: if ( LATBbits.LATB0 ) {
  3217  003096  A08A               	btfss	3978,0,c	;volatile
  3218  003098  D002               	goto	l545
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;main.c: 2148: LATBbits.LATB0 = 0;
  3222  00309A  908A               	bcf	3978,0,c	;volatile
  3223  00309C  D017               	goto	L12
  3224  00309E                     l545:
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;main.c: 2151: LATBbits.LATB0 = 1;
  3228  00309E  808A               	bsf	3978,0,c	;volatile
  3229  0030A0  D7F1               	goto	l10393
  3230  0030A2                     l547:
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;main.c: 2157: if ( LATCbits.LATC7 ) {
  3234  0030A2  AE8B               	btfss	3979,7,c	;volatile
  3235  0030A4  D002               	goto	l548
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;main.c: 2158: LATCbits.LATC7 = 0;
  3239  0030A6  9E8B               	bcf	3979,7,c	;volatile
  3240  0030A8  D011               	goto	L12
  3241  0030AA                     l548:
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;main.c: 2161: LATCbits.LATC7 = 1;
  3245  0030AA  8E8B               	bsf	3979,7,c	;volatile
  3246  0030AC  D7EB               	goto	l10393
  3247  0030AE                     l550:
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;main.c: 2167: if ( LATCbits.LATC6 ) {
  3251  0030AE  AC8B               	btfss	3979,6,c	;volatile
  3252  0030B0  D002               	goto	l551
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;main.c: 2168: LATCbits.LATC6 = 0;
  3256  0030B2  9C8B               	bcf	3979,6,c	;volatile
  3257  0030B4  D00B               	goto	L12
  3258  0030B6                     l551:
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;main.c: 2171: LATCbits.LATC6 = 1;
  3262  0030B6  8C8B               	bsf	3979,6,c	;volatile
  3263  0030B8  D7E5               	goto	l10393
  3264  0030BA                     l553:
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;main.c: 2177: if ( LATCbits.LATC5 ) {
  3268  0030BA  AA8B               	btfss	3979,5,c	;volatile
  3269  0030BC  D002               	goto	l554
  3270                           
  3271                           ; BSR set to: 0
  3272                           ;main.c: 2178: LATCbits.LATC5 = 0;
  3273  0030BE  9A8B               	bcf	3979,5,c	;volatile
  3274  0030C0  D005               	goto	L12
  3275  0030C2                     l554:
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;main.c: 2181: LATCbits.LATC5 = 1;
  3279  0030C2  8A8B               	bsf	3979,5,c	;volatile
  3280  0030C4  D7DF               	goto	l10393
  3281  0030C6                     l556:
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;main.c: 2187: if ( LATCbits.LATC4 ) {
  3285  0030C6  A88B               	btfss	3979,4,c	;volatile
  3286  0030C8  D003               	goto	l557
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;main.c: 2188: LATCbits.LATC4 = 0;
  3290  0030CA  988B               	bcf	3979,4,c	;volatile
  3291  0030CC                     L12:
  3292                           
  3293                           ;main.c: 2189: bOn = 0;
  3294  0030CC  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3295                           
  3296                           ;main.c: 2190: } else {
  3297  0030CE  D010               	goto	l10423
  3298  0030D0                     l557:
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;main.c: 2191: LATCbits.LATC4 = 1;
  3302  0030D0  888B               	bsf	3979,4,c	;volatile
  3303  0030D2  D7D8               	goto	l10393
  3304  0030D4                     l10421:
  3305                           
  3306                           ; BSR set to: 0
  3307  0030D4  51CC               	movf	doActionToggle@i& (0+255),w,b
  3308                           
  3309                           ; Switch size 1, requested type "speed"
  3310                           ; Number of cases is 7, Range of values is 0 to 6
  3311                           ; switch strategies available:
  3312                           ; Name         Instructions Cycles
  3313                           ; simple_byte           22    12 (average)
  3314                           ;	Chosen strategy is simple_byte
  3315  0030D6  E0D1               	bz	l537
  3316  0030D8  0A01               	xorlw	1	; case 1
  3317  0030DA  E0D7               	bz	l541
  3318  0030DC  0A03               	xorlw	3	; case 2
  3319  0030DE  E0DB               	bz	l544
  3320  0030E0  0A01               	xorlw	1	; case 3
  3321  0030E2  E0DF               	bz	l547
  3322  0030E4  0A07               	xorlw	7	; case 4
  3323  0030E6  E0E3               	bz	l550
  3324  0030E8  0A01               	xorlw	1	; case 5
  3325  0030EA  E0E7               	bz	l553
  3326  0030EC  0A03               	xorlw	3	; case 6
  3327  0030EE  E0EB               	bz	l556
  3328  0030F0                     l10423:
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;main.c: 2198: if ( bOn ) {
  3332  0030F0  51CB               	movf	doActionToggle@bOn& (0+255),w,b
  3333  0030F2  E013               	bz	l559
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;main.c: 2201: if ( val & 0x08 ) {
  3337  0030F4  A7CA               	btfss	doActionToggle@val& (0+255),3,b
  3338  0030F6  D007               	goto	l10429
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;main.c: 2202: SendInformationEvent( i, 20, 3 );
  3342  0030F8  0E14               	movlw	20
  3343  0030FA  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3344  0030FC  0E03               	movlw	3
  3345  0030FE  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3346  003100  51CC               	movf	doActionToggle@i& (0+255),w,b
  3347  003102  ECFB  F01C         	call	_SendInformationEvent
  3348  003106                     l10429:
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;main.c: 2203: }
  3352                           ;main.c: 2206: if ( val & 0x20 ) {
  3353  003106  ABCA               	btfss	doActionToggle@val& (0+255),5,b
  3354  003108  D01A               	goto	l10439
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;main.c: 2207: SendInformationEvent( i, 20, 25 );
  3358  00310A  0E14               	movlw	20
  3359  00310C  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3360  00310E  0E19               	movlw	25
  3361  003110  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3362  003112  51CC               	movf	doActionToggle@i& (0+255),w,b
  3363  003114  ECFB  F01C         	call	_SendInformationEvent
  3364  003118  D012               	goto	l10439
  3365  00311A                     l559:
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;main.c: 2211: else {
  3369                           ;main.c: 2214: if ( val & 0x10 ) {
  3370  00311A  A9CA               	btfss	doActionToggle@val& (0+255),4,b
  3371  00311C  D007               	goto	l10435
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;main.c: 2215: SendInformationEvent( i, 20, 4 );
  3375  00311E  0E14               	movlw	20
  3376  003120  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3377  003122  0E04               	movlw	4
  3378  003124  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3379  003126  51CC               	movf	doActionToggle@i& (0+255),w,b
  3380  003128  ECFB  F01C         	call	_SendInformationEvent
  3381  00312C                     l10435:
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;main.c: 2216: }
  3385                           ;main.c: 2219: if (val & 0x40 ) {
  3386  00312C  ADCA               	btfss	doActionToggle@val& (0+255),6,b
  3387  00312E  D007               	goto	l10439
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;main.c: 2220: SendInformationEvent( i, 20, 24 );
  3391  003130  0E14               	movlw	20
  3392  003132  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3393  003134  0E18               	movlw	24
  3394  003136  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3395  003138  51CC               	movf	doActionToggle@i& (0+255),w,b
  3396  00313A  ECFB  F01C         	call	_SendInformationEvent
  3397  00313E                     l10439:
  3398                           
  3399                           ; BSR set to: 0
  3400  00313E  2BCC               	incf	doActionToggle@i& (0+255),f,b
  3401                           
  3402                           ; BSR set to: 0
  3403  003140  0E07               	movlw	7
  3404  003142  65CC               	cpfsgt	doActionToggle@i& (0+255),b
  3405  003144  D775               	goto	l10381
  3406                           
  3407                           ; BSR set to: 0
  3408  003146  0C07               	retlw	7
  3409  003148                     __end_of_doActionToggle:
  3410                           	opt stack 0
  3411                           tblptru	equ	0xFF8
  3412                           prodh	equ	0xFF4
  3413                           prodl	equ	0xFF3
  3414                           postinc0	equ	0xFEE
  3415                           wreg	equ	0xFE8
  3416                           postinc2	equ	0xFDE
  3417                           postdec2	equ	0xFDD
  3418                           fsr2h	equ	0xFDA
  3419                           fsr2l	equ	0xFD9
  3420                           status	equ	0xFD8
  3421                           
  3422 ;; *************** function _doActionDisable *****************
  3423 ;; Defined at:
  3424 ;;		line 2072 in file "../main.c"
  3425 ;; Parameters:    Size  Location     Type
  3426 ;;  dmflags         1    wreg     unsigned char 
  3427 ;;  arg             1   10[COMRAM] unsigned char 
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;  dmflags         1   13[COMRAM] unsigned char 
  3430 ;;  i               1   15[COMRAM] unsigned char 
  3431 ;;  val             1   14[COMRAM] unsigned char 
  3432 ;; Return value:  Size  Location     Type
  3433 ;;		None               void
  3434 ;; Registers used:
  3435 ;;		wreg, status,2, status,0, cstack
  3436 ;; Tracked objects:
  3437 ;;		On entry : F/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3441 ;;      Params:         1       0       0       0       0       0       0
  3442 ;;      Locals:         3       0       0       0       0       0       0
  3443 ;;      Temps:          2       0       0       0       0       0       0
  3444 ;;      Totals:         6       0       0       0       0       0       0
  3445 ;;Total ram usage:        6 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    3
  3448 ;; This function calls:
  3449 ;;		_writeEEPROM
  3450 ;;		_readEEPROM
  3451 ;; This function is called by:
  3452 ;;		_doDM
  3453 ;; This function uses a non-reentrant model
  3454 ;;
  3455                           
  3456                           	psect	text10
  3457  00398A                     __ptext10:
  3458                           	opt stack 0
  3459  00398A                     _doActionDisable:
  3460                           	opt stack 26
  3461                           
  3462                           ; BSR set to: 0
  3463                           ;incstack = 0
  3464                           ;incstack = 0
  3465                           ;doActionDisable@dmflags stored from wreg
  3466  00398A  CFE8 F00E          	movff	wreg,doActionDisable@dmflags
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;main.c: 2074: unsigned char i;
  3470                           ;main.c: 2075: unsigned char val;
  3471                           ;main.c: 2077: for ( i = 0; i < 8; i++ ) {
  3472  00398E  6A10               	clrf	doActionDisable@i,c
  3473  003990                     l8719:
  3474                           
  3475                           ;main.c: 2080: if ( !( arg & (1 << i) ) ) continue;
  3476  003990  C010  F00C         	movff	doActionDisable@i,??_doActionDisable
  3477  003994  0E01               	movlw	1
  3478  003996  6E0D               	movwf	(??_doActionDisable+1)& (0+255),c
  3479  003998  2A0C               	incf	??_doActionDisable,f,c
  3480  00399A  D002               	goto	u10354
  3481  00399C                     u10355:
  3482  00399C  90D8               	bcf	status,0,c
  3483  00399E  360D               	rlcf	??_doActionDisable+1,f,c
  3484  0039A0                     u10354:
  3485  0039A0  2E0C               	decfsz	??_doActionDisable,f,c
  3486  0039A2  D7FC               	goto	u10355
  3487  0039A4  500D               	movf	??_doActionDisable+1,w,c
  3488  0039A6  140B               	andwf	doActionDisable@arg,w,c
  3489  0039A8  E021               	bz	l8729
  3490                           
  3491                           ;main.c: 2083: if ( dmflags & 0x08) {
  3492  0039AA  A60E               	btfss	doActionDisable@dmflags,3,c
  3493  0039AC  D00B               	goto	l8727
  3494                           
  3495                           ;main.c: 2084: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3496                           ;main.c: 2085: 53 +
  3497                           ;main.c: 2086: i ) ) {
  3498  0039AE  0E78               	movlw	120
  3499  0039B0  2410               	addwf	doActionDisable@i,w,c
  3500  0039B2  6E08               	movwf	?_readEEPROM,c
  3501  0039B4  6A09               	clrf	?_readEEPROM+1,c
  3502  0039B6  0E00               	movlw	0
  3503  0039B8  2209               	addwfc	?_readEEPROM+1,f,c
  3504  0039BA  EC86  F01F         	call	_readEEPROM	;wreg free
  3505  0039BE  0100               	movlb	0	; () banked
  3506  0039C0  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3507  0039C2  E114               	bnz	l8729
  3508  0039C4                     l8727:
  3509                           
  3510                           ;main.c: 2088: }
  3511                           ;main.c: 2089: }
  3512                           ;main.c: 2091: val = readEEPROM( 0x43 + 10 + i );
  3513  0039C4  0E4D               	movlw	77
  3514  0039C6  2410               	addwf	doActionDisable@i,w,c
  3515  0039C8  6E08               	movwf	?_readEEPROM,c
  3516  0039CA  6A09               	clrf	?_readEEPROM+1,c
  3517  0039CC  0E00               	movlw	0
  3518  0039CE  2209               	addwfc	?_readEEPROM+1,f,c
  3519  0039D0  EC86  F01F         	call	_readEEPROM	;wreg free
  3520  0039D4  6E0F               	movwf	doActionDisable@val,c
  3521                           
  3522                           ;main.c: 2092: writeEEPROM( 0x43 + 10 + i, val & ~0x80 );
  3523  0039D6  0E4D               	movlw	77
  3524  0039D8  2410               	addwf	doActionDisable@i,w,c
  3525  0039DA  6E08               	movwf	?_writeEEPROM,c
  3526  0039DC  6A09               	clrf	?_writeEEPROM+1,c
  3527  0039DE  0E00               	movlw	0
  3528  0039E0  2209               	addwfc	?_writeEEPROM+1,f,c
  3529  0039E2  500F               	movf	doActionDisable@val,w,c
  3530  0039E4  0B7F               	andlw	127
  3531  0039E6  6E0A               	movwf	?_writeEEPROM+2,c
  3532  0039E8  EC6A  F01E         	call	_writeEEPROM	;wreg free
  3533  0039EC                     l8729:
  3534  0039EC  2A10               	incf	doActionDisable@i,f,c
  3535  0039EE  0E07               	movlw	7
  3536  0039F0  6410               	cpfsgt	doActionDisable@i,c
  3537  0039F2  D7CE               	goto	l8719
  3538  0039F4  0C07               	retlw	7
  3539  0039F6                     __end_of_doActionDisable:
  3540                           	opt stack 0
  3541                           tblptru	equ	0xFF8
  3542                           prodh	equ	0xFF4
  3543                           prodl	equ	0xFF3
  3544                           postinc0	equ	0xFEE
  3545                           wreg	equ	0xFE8
  3546                           postinc2	equ	0xFDE
  3547                           postdec2	equ	0xFDD
  3548                           fsr2h	equ	0xFDA
  3549                           fsr2l	equ	0xFD9
  3550                           status	equ	0xFD8
  3551                           
  3552 ;; *************** function _doActionStatus *****************
  3553 ;; Defined at:
  3554 ;;		line 1983 in file "../main.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;  dmflags         1    wreg     unsigned char 
  3557 ;;  arg             1   80[COMRAM] unsigned char 
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3560 ;;  i               1   27[BANK0 ] unsigned char 
  3561 ;;  val             1   26[BANK0 ] unsigned char 
  3562 ;;  bOn             1   25[BANK0 ] enum E15660
  3563 ;; Return value:  Size  Location     Type
  3564 ;;		None               void
  3565 ;; Registers used:
  3566 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3567 ;; Tracked objects:
  3568 ;;		On entry : F/0
  3569 ;;		On exit  : F/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3572 ;;      Params:         1       0       0       0       0       0       0
  3573 ;;      Locals:         0       4       0       0       0       0       0
  3574 ;;      Temps:          0       2       0       0       0       0       0
  3575 ;;      Totals:         1       6       0       0       0       0       0
  3576 ;;Total ram usage:        7 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    7
  3579 ;; This function calls:
  3580 ;;		_readEEPROM
  3581 ;;		_SendInformationEvent
  3582 ;; This function is called by:
  3583 ;;		_doDM
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text11
  3588  003256                     __ptext11:
  3589                           	opt stack 0
  3590  003256                     _doActionStatus:
  3591                           	opt stack 22
  3592                           
  3593                           ;incstack = 0
  3594                           ;incstack = 0
  3595                           ;doActionStatus@dmflags stored from wreg
  3596  003256  CFE8 F0C9          	movff	wreg,doActionStatus@dmflags
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;main.c: 1985: unsigned char i;
  3600                           ;main.c: 1986: unsigned char val;
  3601                           ;main.c: 1987: BOOL bOn = 0;
  3602  00325A  6BCA               	clrf	doActionStatus@bOn& (0+255),b
  3603                           
  3604                           ;main.c: 1989: for (i = 0; i < 8; i++) {
  3605  00325C  6BCC               	clrf	doActionStatus@i& (0+255),b
  3606  00325E                     l10327:
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;main.c: 1992: if (!(arg & (1 << i))) continue;
  3610  00325E  C0CC  F0C7         	movff	doActionStatus@i,??_doActionStatus
  3611  003262  0E01               	movlw	1
  3612  003264  6FC8               	movwf	(??_doActionStatus+1)& (0+255),b
  3613  003266  2BC7               	incf	??_doActionStatus& (0+255),f,b
  3614  003268  D002               	goto	u13104
  3615  00326A                     u13105:
  3616  00326A  90D8               	bcf	status,0,c
  3617  00326C  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3618  00326E                     u13104:
  3619  00326E  2FC7               	decfsz	??_doActionStatus& (0+255),f,b
  3620  003270  D7FC               	goto	u13105
  3621  003272  51C8               	movf	(??_doActionStatus+1)& (0+255),w,b
  3622  003274  1451               	andwf	doActionStatus@arg,w,c
  3623  003276  E070               	bz	l10371
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;main.c: 1995: if (dmflags & 0x08) {
  3627  003278  A7C9               	btfss	doActionStatus@dmflags& (0+255),3,b
  3628  00327A  D00B               	goto	l10335
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;main.c: 1996: if (vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3632                           ;main.c: 1997: 53 +
  3633                           ;main.c: 1998: i ) ) {
  3634  00327C  0E78               	movlw	120
  3635  00327E  25CC               	addwf	doActionStatus@i& (0+255),w,b
  3636  003280  6E08               	movwf	?_readEEPROM,c
  3637  003282  6A09               	clrf	?_readEEPROM+1,c
  3638  003284  0E00               	movlw	0
  3639  003286  2209               	addwfc	?_readEEPROM+1,f,c
  3640  003288  EC86  F01F         	call	_readEEPROM	;wreg free
  3641  00328C  0100               	movlb	0	; () banked
  3642  00328E  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3643  003290  E163               	bnz	l10371
  3644  003292                     l10335:
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;main.c: 2000: }
  3648                           ;main.c: 2001: }
  3649                           ;main.c: 2003: val = readEEPROM( 0x43 + 10 + i );
  3650  003292  0E4D               	movlw	77
  3651  003294  25CC               	addwf	doActionStatus@i& (0+255),w,b
  3652  003296  6E08               	movwf	?_readEEPROM,c
  3653  003298  6A09               	clrf	?_readEEPROM+1,c
  3654  00329A  0E00               	movlw	0
  3655  00329C  2209               	addwfc	?_readEEPROM+1,f,c
  3656  00329E  EC86  F01F         	call	_readEEPROM	;wreg free
  3657  0032A2  0100               	movlb	0	; () banked
  3658  0032A4  6FCB               	movwf	doActionStatus@val& (0+255),b
  3659                           
  3660                           ;main.c: 2005: switch (i) {
  3661  0032A6  D023               	goto	l10353
  3662  0032A8                     l10337:
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;main.c: 2008: bOn = LATBbits.LATB4;
  3666  0032A8  0E00               	movlw	0
  3667  0032AA  B88A               	btfsc	3978,4,c	;volatile
  3668  0032AC  0E01               	movlw	1
  3669  0032AE  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3670                           
  3671                           ;main.c: 2009: break;
  3672  0032B0  D02C               	goto	l10355
  3673  0032B2                     l10339:
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;main.c: 2012: bOn = LATBbits.LATB1;
  3677  0032B2  0E00               	movlw	0
  3678  0032B4  B28A               	btfsc	3978,1,c	;volatile
  3679  0032B6  0E01               	movlw	1
  3680  0032B8  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3681                           
  3682                           ;main.c: 2013: break;
  3683  0032BA  D027               	goto	l10355
  3684  0032BC                     l10341:
  3685                           
  3686                           ; BSR set to: 0
  3687                           ;main.c: 2016: bOn = LATBbits.LATB0;
  3688  0032BC  0E00               	movlw	0
  3689  0032BE  B08A               	btfsc	3978,0,c	;volatile
  3690  0032C0  0E01               	movlw	1
  3691  0032C2  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3692                           
  3693                           ;main.c: 2017: break;
  3694  0032C4  D022               	goto	l10355
  3695  0032C6                     l10343:
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;main.c: 2020: bOn = LATCbits.LATC7;
  3699  0032C6  0E00               	movlw	0
  3700  0032C8  BE8B               	btfsc	3979,7,c	;volatile
  3701  0032CA  0E01               	movlw	1
  3702  0032CC  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3703                           
  3704                           ;main.c: 2021: break;
  3705  0032CE  D01D               	goto	l10355
  3706  0032D0                     l10345:
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;main.c: 2024: bOn = LATCbits.LATC6;
  3710  0032D0  0E00               	movlw	0
  3711  0032D2  BC8B               	btfsc	3979,6,c	;volatile
  3712  0032D4  0E01               	movlw	1
  3713  0032D6  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3714                           
  3715                           ;main.c: 2025: break;
  3716  0032D8  D018               	goto	l10355
  3717  0032DA                     l10347:
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;main.c: 2028: bOn = LATCbits.LATC5;
  3721  0032DA  0E00               	movlw	0
  3722  0032DC  BA8B               	btfsc	3979,5,c	;volatile
  3723  0032DE  0E01               	movlw	1
  3724  0032E0  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3725                           
  3726                           ;main.c: 2029: break;
  3727  0032E2  D013               	goto	l10355
  3728  0032E4                     l10349:
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;main.c: 2032: bOn = LATCbits.LATC4;
  3732  0032E4  0E00               	movlw	0
  3733  0032E6  B88B               	btfsc	3979,4,c	;volatile
  3734  0032E8  0E01               	movlw	1
  3735  0032EA  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3736                           
  3737                           ;main.c: 2033: break;
  3738  0032EC  D00E               	goto	l10355
  3739  0032EE                     l10353:
  3740                           
  3741                           ; BSR set to: 0
  3742  0032EE  51CC               	movf	doActionStatus@i& (0+255),w,b
  3743                           
  3744                           ; Switch size 1, requested type "speed"
  3745                           ; Number of cases is 7, Range of values is 0 to 6
  3746                           ; switch strategies available:
  3747                           ; Name         Instructions Cycles
  3748                           ; simple_byte           22    12 (average)
  3749                           ;	Chosen strategy is simple_byte
  3750  0032F0  E0DB               	bz	l10337
  3751  0032F2  0A01               	xorlw	1	; case 1
  3752  0032F4  E0DE               	bz	l10339
  3753  0032F6  0A03               	xorlw	3	; case 2
  3754  0032F8  E0E1               	bz	l10341
  3755  0032FA  0A01               	xorlw	1	; case 3
  3756  0032FC  E0E4               	bz	l10343
  3757  0032FE  0A07               	xorlw	7	; case 4
  3758  003300  E0E7               	bz	l10345
  3759  003302  0A01               	xorlw	1	; case 5
  3760  003304  E0EA               	bz	l10347
  3761  003306  0A03               	xorlw	3	; case 6
  3762  003308  E0ED               	bz	l10349
  3763  00330A                     l10355:
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;main.c: 2037: if (bOn) {
  3767  00330A  51CA               	movf	doActionStatus@bOn& (0+255),w,b
  3768  00330C  E013               	bz	l512
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;main.c: 2040: if ( val & 0x10 ) {
  3772  00330E  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3773  003310  D007               	goto	l10361
  3774                           
  3775                           ; BSR set to: 0
  3776                           ;main.c: 2041: SendInformationEvent( i, 20, 4 );
  3777  003312  0E14               	movlw	20
  3778  003314  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3779  003316  0E04               	movlw	4
  3780  003318  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3781  00331A  51CC               	movf	doActionStatus@i& (0+255),w,b
  3782  00331C  ECFB  F01C         	call	_SendInformationEvent
  3783  003320                     l10361:
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;main.c: 2042: }
  3787                           ;main.c: 2045: if ( val & 0x40 ) {
  3788  003320  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3789  003322  D01A               	goto	l10371
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;main.c: 2046: SendInformationEvent( i, 20, 24 );
  3793  003324  0E14               	movlw	20
  3794  003326  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3795  003328  0E18               	movlw	24
  3796  00332A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3797  00332C  51CC               	movf	doActionStatus@i& (0+255),w,b
  3798  00332E  ECFB  F01C         	call	_SendInformationEvent
  3799  003332  D012               	goto	l10371
  3800  003334                     l512:
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;main.c: 2050: else {
  3804                           ;main.c: 2053: if ( val & 0x10 ) {
  3805  003334  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3806  003336  D007               	goto	l10367
  3807                           
  3808                           ; BSR set to: 0
  3809                           ;main.c: 2054: SendInformationEvent( i, 20, 4 );
  3810  003338  0E14               	movlw	20
  3811  00333A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3812  00333C  0E04               	movlw	4
  3813  00333E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3814  003340  51CC               	movf	doActionStatus@i& (0+255),w,b
  3815  003342  ECFB  F01C         	call	_SendInformationEvent
  3816  003346                     l10367:
  3817                           
  3818                           ; BSR set to: 0
  3819                           ;main.c: 2055: }
  3820                           ;main.c: 2058: if ( val & 0x40 ) {
  3821  003346  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3822  003348  D007               	goto	l10371
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;main.c: 2059: SendInformationEvent( i, 20, 24 );
  3826  00334A  0E14               	movlw	20
  3827  00334C  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3828  00334E  0E18               	movlw	24
  3829  003350  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3830  003352  51CC               	movf	doActionStatus@i& (0+255),w,b
  3831  003354  ECFB  F01C         	call	_SendInformationEvent
  3832  003358                     l10371:
  3833                           
  3834                           ; BSR set to: 0
  3835  003358  2BCC               	incf	doActionStatus@i& (0+255),f,b
  3836                           
  3837                           ; BSR set to: 0
  3838  00335A  0E07               	movlw	7
  3839  00335C  65CC               	cpfsgt	doActionStatus@i& (0+255),b
  3840  00335E  D77F               	goto	l10327
  3841                           
  3842                           ; BSR set to: 0
  3843  003360  0C07               	retlw	7
  3844  003362                     __end_of_doActionStatus:
  3845                           	opt stack 0
  3846                           tblptru	equ	0xFF8
  3847                           prodh	equ	0xFF4
  3848                           prodl	equ	0xFF3
  3849                           postinc0	equ	0xFEE
  3850                           wreg	equ	0xFE8
  3851                           postinc2	equ	0xFDE
  3852                           postdec2	equ	0xFDD
  3853                           fsr2h	equ	0xFDA
  3854                           fsr2l	equ	0xFD9
  3855                           status	equ	0xFD8
  3856                           
  3857 ;; *************** function _doActionPulse *****************
  3858 ;; Defined at:
  3859 ;;		line 1892 in file "../main.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;  dmflags         1    wreg     unsigned char 
  3862 ;;  arg             1   10[COMRAM] unsigned char 
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;  dmflags         1   14[COMRAM] unsigned char 
  3865 ;;  i               1   16[COMRAM] unsigned char 
  3866 ;;  val             1   15[COMRAM] unsigned char 
  3867 ;; Return value:  Size  Location     Type
  3868 ;;		None               void
  3869 ;; Registers used:
  3870 ;;		wreg, status,2, status,0, cstack
  3871 ;; Tracked objects:
  3872 ;;		On entry : F/0
  3873 ;;		On exit  : 0/0
  3874 ;;		Unchanged: 0/0
  3875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3876 ;;      Params:         1       0       0       0       0       0       0
  3877 ;;      Locals:         3       0       0       0       0       0       0
  3878 ;;      Temps:          3       0       0       0       0       0       0
  3879 ;;      Totals:         7       0       0       0       0       0       0
  3880 ;;Total ram usage:        7 bytes
  3881 ;; Hardware stack levels used:    1
  3882 ;; Hardware stack levels required when called:    3
  3883 ;; This function calls:
  3884 ;;		_readEEPROM
  3885 ;; This function is called by:
  3886 ;;		_doDM
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           	psect	text12
  3891  002872                     __ptext12:
  3892                           	opt stack 0
  3893  002872                     _doActionPulse:
  3894                           	opt stack 26
  3895                           
  3896                           ; BSR set to: 0
  3897                           ;incstack = 0
  3898                           ;incstack = 0
  3899                           ;doActionPulse@dmflags stored from wreg
  3900  002872  CFE8 F00F          	movff	wreg,doActionPulse@dmflags
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;main.c: 1894: unsigned char i;
  3904                           ;main.c: 1895: unsigned char val;
  3905                           ;main.c: 1897: for ( i = 0; i < 8; i++ ) {
  3906  002876  6A11               	clrf	doActionPulse@i,c
  3907  002878                     l8609:
  3908                           
  3909                           ;main.c: 1900: if ( !( arg & ( 1 << i ) ) ) continue;
  3910  002878  C011  F00C         	movff	doActionPulse@i,??_doActionPulse
  3911  00287C  0E01               	movlw	1
  3912  00287E  6E0D               	movwf	(??_doActionPulse+1)& (0+255),c
  3913  002880  2A0C               	incf	??_doActionPulse,f,c
  3914  002882  D002               	goto	u10194
  3915  002884                     u10195:
  3916  002884  90D8               	bcf	status,0,c
  3917  002886  360D               	rlcf	??_doActionPulse+1,f,c
  3918  002888                     u10194:
  3919  002888  2E0C               	decfsz	??_doActionPulse,f,c
  3920  00288A  D7FC               	goto	u10195
  3921  00288C  500D               	movf	??_doActionPulse+1,w,c
  3922  00288E  140B               	andwf	doActionPulse@arg,w,c
  3923  002890  E101 D0D2          	bz	l8655
  3924                           
  3925                           ;main.c: 1903: if (dmflags & 0x08) {
  3926  002894  A60F               	btfss	doActionPulse@dmflags,3,c
  3927  002896  D00C               	goto	l8617
  3928                           
  3929                           ;main.c: 1904: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3930                           ;main.c: 1905: 53 +
  3931                           ;main.c: 1906: i ) ) {
  3932  002898  0E78               	movlw	120
  3933  00289A  2411               	addwf	doActionPulse@i,w,c
  3934  00289C  6E08               	movwf	?_readEEPROM,c
  3935  00289E  6A09               	clrf	?_readEEPROM+1,c
  3936  0028A0  0E00               	movlw	0
  3937  0028A2  2209               	addwfc	?_readEEPROM+1,f,c
  3938  0028A4  EC86  F01F         	call	_readEEPROM	;wreg free
  3939  0028A8  0100               	movlb	0	; () banked
  3940  0028AA  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3941  0028AC  E001 D0C4          	bnz	l8655
  3942  0028B0                     l8617:
  3943                           
  3944                           ;main.c: 1908: }
  3945                           ;main.c: 1909: }
  3946                           ;main.c: 1911: val = readEEPROM( 0x43 + 10 + i );
  3947  0028B0  0E4D               	movlw	77
  3948  0028B2  2411               	addwf	doActionPulse@i,w,c
  3949  0028B4  6E08               	movwf	?_readEEPROM,c
  3950  0028B6  6A09               	clrf	?_readEEPROM+1,c
  3951  0028B8  0E00               	movlw	0
  3952  0028BA  2209               	addwfc	?_readEEPROM+1,f,c
  3953  0028BC  EC86  F01F         	call	_readEEPROM	;wreg free
  3954  0028C0  6E10               	movwf	doActionPulse@val,c
  3955                           
  3956                           ;main.c: 1914: if ( !( val & 0x80 ) ) continue;
  3957  0028C2  AE10               	btfss	doActionPulse@val,7,c
  3958  0028C4  D0B9               	goto	l8655
  3959  0028C6  D0A8               	goto	l8653
  3960  0028C8                     l486:
  3961                           
  3962                           ;main.c: 1919: LATBbits.LATB4 = 0;
  3963  0028C8  988A               	bcf	3978,4,c	;volatile
  3964                           
  3965                           ;main.c: 1920: relay_pulse_flags |= 0x01;
  3966  0028CA  0100               	movlb	0	; () banked
  3967  0028CC  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;main.c: 1921: relay_pulse_timer[ 0 ] =
  3971                           ;main.c: 1922: readEEPROM( 0x43 + 18 ) * 256 +
  3972                           ;main.c: 1923: readEEPROM( 0x43 + 19 );
  3973  0028CE  6A09               	clrf	?_readEEPROM+1,c
  3974  0028D0  0E56               	movlw	86
  3975  0028D2  6E08               	movwf	?_readEEPROM,c
  3976  0028D4  EC86  F01F         	call	_readEEPROM	;wreg free
  3977  0028D8  6E0C               	movwf	??_doActionPulse& (0+255),c
  3978  0028DA  6A09               	clrf	?_readEEPROM+1,c
  3979  0028DC  0E55               	movlw	85
  3980  0028DE  6E08               	movwf	?_readEEPROM,c
  3981  0028E0  EC86  F01F         	call	_readEEPROM	;wreg free
  3982  0028E4  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  3983  0028E6  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  3984  0028E8  500C               	movf	??_doActionPulse,w,c
  3985  0028EA  240D               	addwf	??_doActionPulse+1,w,c
  3986  0028EC  0100               	movlb	0	; () banked
  3987  0028EE  6F70               	movwf	_relay_pulse_timer& (0+255),b
  3988  0028F0  0E00               	movlw	0
  3989  0028F2  200E               	addwfc	??_doActionPulse+2,w,c
  3990  0028F4  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  3991                           
  3992                           ;main.c: 1924: break;
  3993  0028F6  D0A0               	goto	l8655
  3994  0028F8                     l488:
  3995                           
  3996                           ;main.c: 1927: LATBbits.LATB1 = 0;
  3997  0028F8  928A               	bcf	3978,1,c	;volatile
  3998                           
  3999                           ;main.c: 1928: relay_pulse_flags |= 0x02;
  4000  0028FA  0100               	movlb	0	; () banked
  4001  0028FC  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;main.c: 1929: relay_pulse_timer[ 1 ] =
  4005                           ;main.c: 1930: readEEPROM( 0x43 + 20 ) * 256 +
  4006                           ;main.c: 1931: readEEPROM( 0x43 + 21 );
  4007  0028FE  6A09               	clrf	?_readEEPROM+1,c
  4008  002900  0E58               	movlw	88
  4009  002902  6E08               	movwf	?_readEEPROM,c
  4010  002904  EC86  F01F         	call	_readEEPROM	;wreg free
  4011  002908  6E0C               	movwf	??_doActionPulse& (0+255),c
  4012  00290A  6A09               	clrf	?_readEEPROM+1,c
  4013  00290C  0E57               	movlw	87
  4014  00290E  6E08               	movwf	?_readEEPROM,c
  4015  002910  EC86  F01F         	call	_readEEPROM	;wreg free
  4016  002914  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4017  002916  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4018  002918  500C               	movf	??_doActionPulse,w,c
  4019  00291A  240D               	addwf	??_doActionPulse+1,w,c
  4020  00291C  0100               	movlb	0	; () banked
  4021  00291E  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  4022  002920  0E00               	movlw	0
  4023  002922  200E               	addwfc	??_doActionPulse+2,w,c
  4024  002924  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  4025                           
  4026                           ;main.c: 1932: break;
  4027  002926  D088               	goto	l8655
  4028  002928                     l489:
  4029                           
  4030                           ;main.c: 1935: LATBbits.LATB0 = 0;
  4031  002928  908A               	bcf	3978,0,c	;volatile
  4032                           
  4033                           ;main.c: 1936: relay_pulse_flags |= 0x04;
  4034  00292A  0100               	movlb	0	; () banked
  4035  00292C  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  4036                           
  4037                           ; BSR set to: 0
  4038                           ;main.c: 1937: relay_pulse_timer[ 2 ] =
  4039                           ;main.c: 1938: readEEPROM( 0x43 + 22 ) * 256 +
  4040                           ;main.c: 1939: readEEPROM( 0x43 + 23 );
  4041  00292E  6A09               	clrf	?_readEEPROM+1,c
  4042  002930  0E5A               	movlw	90
  4043  002932  6E08               	movwf	?_readEEPROM,c
  4044  002934  EC86  F01F         	call	_readEEPROM	;wreg free
  4045  002938  6E0C               	movwf	??_doActionPulse& (0+255),c
  4046  00293A  6A09               	clrf	?_readEEPROM+1,c
  4047  00293C  0E59               	movlw	89
  4048  00293E  6E08               	movwf	?_readEEPROM,c
  4049  002940  EC86  F01F         	call	_readEEPROM	;wreg free
  4050  002944  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4051  002946  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4052  002948  500C               	movf	??_doActionPulse,w,c
  4053  00294A  240D               	addwf	??_doActionPulse+1,w,c
  4054  00294C  0100               	movlb	0	; () banked
  4055  00294E  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  4056  002950  0E00               	movlw	0
  4057  002952  200E               	addwfc	??_doActionPulse+2,w,c
  4058  002954  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  4059                           
  4060                           ;main.c: 1940: break;
  4061  002956  D070               	goto	l8655
  4062  002958                     l490:
  4063                           
  4064                           ;main.c: 1943: LATCbits.LATC7 = 0;
  4065  002958  9E8B               	bcf	3979,7,c	;volatile
  4066                           
  4067                           ;main.c: 1944: relay_pulse_flags |= 0x08;
  4068  00295A  0100               	movlb	0	; () banked
  4069  00295C  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;main.c: 1945: relay_pulse_timer[ 3 ] =
  4073                           ;main.c: 1946: readEEPROM( 0x43 + 24 ) * 256 +
  4074                           ;main.c: 1947: readEEPROM( 0x43 + 25 );
  4075  00295E  6A09               	clrf	?_readEEPROM+1,c
  4076  002960  0E5C               	movlw	92
  4077  002962  6E08               	movwf	?_readEEPROM,c
  4078  002964  EC86  F01F         	call	_readEEPROM	;wreg free
  4079  002968  6E0C               	movwf	??_doActionPulse& (0+255),c
  4080  00296A  6A09               	clrf	?_readEEPROM+1,c
  4081  00296C  0E5B               	movlw	91
  4082  00296E  6E08               	movwf	?_readEEPROM,c
  4083  002970  EC86  F01F         	call	_readEEPROM	;wreg free
  4084  002974  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4085  002976  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4086  002978  500C               	movf	??_doActionPulse,w,c
  4087  00297A  240D               	addwf	??_doActionPulse+1,w,c
  4088  00297C  0100               	movlb	0	; () banked
  4089  00297E  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  4090  002980  0E00               	movlw	0
  4091  002982  200E               	addwfc	??_doActionPulse+2,w,c
  4092  002984  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  4093                           
  4094                           ;main.c: 1948: break;
  4095  002986  D058               	goto	l8655
  4096  002988                     l491:
  4097                           
  4098                           ;main.c: 1951: LATCbits.LATC6 = 0;
  4099  002988  9C8B               	bcf	3979,6,c	;volatile
  4100                           
  4101                           ;main.c: 1952: relay_pulse_flags |= 0x10;
  4102  00298A  0100               	movlb	0	; () banked
  4103  00298C  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;main.c: 1953: relay_pulse_timer[ 4 ] =
  4107                           ;main.c: 1954: readEEPROM( 0x43 + 26 ) * 256 +
  4108                           ;main.c: 1955: readEEPROM( 0x43 + 27 );
  4109  00298E  6A09               	clrf	?_readEEPROM+1,c
  4110  002990  0E5E               	movlw	94
  4111  002992  6E08               	movwf	?_readEEPROM,c
  4112  002994  EC86  F01F         	call	_readEEPROM	;wreg free
  4113  002998  6E0C               	movwf	??_doActionPulse& (0+255),c
  4114  00299A  6A09               	clrf	?_readEEPROM+1,c
  4115  00299C  0E5D               	movlw	93
  4116  00299E  6E08               	movwf	?_readEEPROM,c
  4117  0029A0  EC86  F01F         	call	_readEEPROM	;wreg free
  4118  0029A4  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4119  0029A6  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4120  0029A8  500C               	movf	??_doActionPulse,w,c
  4121  0029AA  240D               	addwf	??_doActionPulse+1,w,c
  4122  0029AC  0100               	movlb	0	; () banked
  4123  0029AE  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  4124  0029B0  0E00               	movlw	0
  4125  0029B2  200E               	addwfc	??_doActionPulse+2,w,c
  4126  0029B4  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  4127                           
  4128                           ;main.c: 1956: break;
  4129  0029B6  D040               	goto	l8655
  4130  0029B8                     l492:
  4131                           
  4132                           ;main.c: 1959: LATCbits.LATC5 = 0;
  4133  0029B8  9A8B               	bcf	3979,5,c	;volatile
  4134                           
  4135                           ;main.c: 1960: relay_pulse_flags |= 0x20;
  4136  0029BA  0100               	movlb	0	; () banked
  4137  0029BC  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  4138                           
  4139                           ; BSR set to: 0
  4140                           ;main.c: 1961: relay_pulse_timer[ 5 ] =
  4141                           ;main.c: 1962: readEEPROM( 0x43 + 28 ) * 256 +
  4142                           ;main.c: 1963: readEEPROM( 0x43 + 29 );
  4143  0029BE  6A09               	clrf	?_readEEPROM+1,c
  4144  0029C0  0E60               	movlw	96
  4145  0029C2  6E08               	movwf	?_readEEPROM,c
  4146  0029C4  EC86  F01F         	call	_readEEPROM	;wreg free
  4147  0029C8  6E0C               	movwf	??_doActionPulse& (0+255),c
  4148  0029CA  6A09               	clrf	?_readEEPROM+1,c
  4149  0029CC  0E5F               	movlw	95
  4150  0029CE  6E08               	movwf	?_readEEPROM,c
  4151  0029D0  EC86  F01F         	call	_readEEPROM	;wreg free
  4152  0029D4  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4153  0029D6  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4154  0029D8  500C               	movf	??_doActionPulse,w,c
  4155  0029DA  240D               	addwf	??_doActionPulse+1,w,c
  4156  0029DC  0100               	movlb	0	; () banked
  4157  0029DE  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  4158  0029E0  0E00               	movlw	0
  4159  0029E2  200E               	addwfc	??_doActionPulse+2,w,c
  4160  0029E4  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  4161                           
  4162                           ;main.c: 1964: break;
  4163  0029E6  D028               	goto	l8655
  4164  0029E8                     l493:
  4165                           
  4166                           ;main.c: 1967: LATCbits.LATC4 = 0;
  4167  0029E8  988B               	bcf	3979,4,c	;volatile
  4168                           
  4169                           ;main.c: 1968: relay_pulse_flags |= 0x40;
  4170  0029EA  0100               	movlb	0	; () banked
  4171  0029EC  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;main.c: 1969: relay_pulse_timer[ 6 ] =
  4175                           ;main.c: 1970: readEEPROM( 0x43 + 30 ) * 256 +
  4176                           ;main.c: 1971: readEEPROM( 0x43 + 31 );
  4177  0029EE  6A09               	clrf	?_readEEPROM+1,c
  4178  0029F0  0E62               	movlw	98
  4179  0029F2  6E08               	movwf	?_readEEPROM,c
  4180  0029F4  EC86  F01F         	call	_readEEPROM	;wreg free
  4181  0029F8  6E0C               	movwf	??_doActionPulse& (0+255),c
  4182  0029FA  6A09               	clrf	?_readEEPROM+1,c
  4183  0029FC  0E61               	movlw	97
  4184  0029FE  6E08               	movwf	?_readEEPROM,c
  4185  002A00  EC86  F01F         	call	_readEEPROM	;wreg free
  4186  002A04  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4187  002A06  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4188  002A08  500C               	movf	??_doActionPulse,w,c
  4189  002A0A  240D               	addwf	??_doActionPulse+1,w,c
  4190  002A0C  0100               	movlb	0	; () banked
  4191  002A0E  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  4192  002A10  0E00               	movlw	0
  4193  002A12  200E               	addwfc	??_doActionPulse+2,w,c
  4194  002A14  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  4195                           
  4196                           ;main.c: 1972: break;
  4197  002A16  D010               	goto	l8655
  4198  002A18                     l8653:
  4199  002A18  5011               	movf	doActionPulse@i,w,c
  4200                           
  4201                           ; Switch size 1, requested type "speed"
  4202                           ; Number of cases is 7, Range of values is 0 to 6
  4203                           ; switch strategies available:
  4204                           ; Name         Instructions Cycles
  4205                           ; simple_byte           22    12 (average)
  4206                           ;	Chosen strategy is simple_byte
  4207  002A1A  E101 D755          	bz	l486
  4208  002A1E  0A01               	xorlw	1	; case 1
  4209  002A20  E101 D76A          	bz	l488
  4210  002A24  0A03               	xorlw	3	; case 2
  4211  002A26  E080               	bz	l489
  4212  002A28  0A01               	xorlw	1	; case 3
  4213  002A2A  E096               	bz	l490
  4214  002A2C  0A07               	xorlw	7	; case 4
  4215  002A2E  E0AC               	bz	l491
  4216  002A30  0A01               	xorlw	1	; case 5
  4217  002A32  E0C2               	bz	l492
  4218  002A34  0A03               	xorlw	3	; case 6
  4219  002A36  E0D8               	bz	l493
  4220  002A38                     l8655:
  4221  002A38  2A11               	incf	doActionPulse@i,f,c
  4222  002A3A  0E07               	movlw	7
  4223  002A3C  6411               	cpfsgt	doActionPulse@i,c
  4224  002A3E  D71C               	goto	l8609
  4225  002A40  0C07               	retlw	7
  4226  002A42                     __end_of_doActionPulse:
  4227                           	opt stack 0
  4228                           tblptru	equ	0xFF8
  4229                           prodh	equ	0xFF4
  4230                           prodl	equ	0xFF3
  4231                           postinc0	equ	0xFEE
  4232                           wreg	equ	0xFE8
  4233                           postinc2	equ	0xFDE
  4234                           postdec2	equ	0xFDD
  4235                           fsr2h	equ	0xFDA
  4236                           fsr2l	equ	0xFD9
  4237                           status	equ	0xFD8
  4238                           
  4239 ;; *************** function _doActionOn *****************
  4240 ;; Defined at:
  4241 ;;		line 1704 in file "../main.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;  dmflags         1    wreg     unsigned char 
  4244 ;;  arg             1   80[COMRAM] unsigned char 
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;  dmflags         1   25[BANK0 ] unsigned char 
  4247 ;;  i               1   27[BANK0 ] unsigned char 
  4248 ;;  val             1   26[BANK0 ] unsigned char 
  4249 ;; Return value:  Size  Location     Type
  4250 ;;		None               void
  4251 ;; Registers used:
  4252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : F/0
  4255 ;;		On exit  : F/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4258 ;;      Params:         1       0       0       0       0       0       0
  4259 ;;      Locals:         0       3       0       0       0       0       0
  4260 ;;      Temps:          0       3       0       0       0       0       0
  4261 ;;      Totals:         1       6       0       0       0       0       0
  4262 ;;Total ram usage:        7 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:    7
  4265 ;; This function calls:
  4266 ;;		_readEEPROM
  4267 ;;		_SendInformationEvent
  4268 ;; This function is called by:
  4269 ;;		_doDM
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           	psect	text13
  4274  0023FA                     __ptext13:
  4275                           	opt stack 0
  4276  0023FA                     _doActionOn:
  4277                           	opt stack 22
  4278                           
  4279                           ;incstack = 0
  4280                           ;incstack = 0
  4281                           ;doActionOn@dmflags stored from wreg
  4282  0023FA  CFE8 F0CA          	movff	wreg,doActionOn@dmflags
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;main.c: 1706: unsigned char i;
  4286                           ;main.c: 1707: unsigned char val;
  4287                           ;main.c: 1709: for (i = 0; i < 8; i++) {
  4288  0023FE  6BCC               	clrf	doActionOn@i& (0+255),b
  4289  002400                     l10265:
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;main.c: 1712: if ( !( arg & ( 1 << i ) ) ) continue;
  4293  002400  C0CC  F0C7         	movff	doActionOn@i,??_doActionOn
  4294  002404  0E01               	movlw	1
  4295  002406  6FC8               	movwf	(??_doActionOn+1)& (0+255),b
  4296  002408  2BC7               	incf	??_doActionOn& (0+255),f,b
  4297  00240A  D002               	goto	u12954
  4298  00240C                     u12955:
  4299  00240C  90D8               	bcf	status,0,c
  4300  00240E  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4301  002410                     u12954:
  4302  002410  2FC7               	decfsz	??_doActionOn& (0+255),f,b
  4303  002412  D7FC               	goto	u12955
  4304  002414  51C8               	movf	(??_doActionOn+1)& (0+255),w,b
  4305  002416  1451               	andwf	doActionOn@arg,w,c
  4306  002418  E101 D11F          	bz	l10317
  4307                           
  4308                           ; BSR set to: 0
  4309                           ;main.c: 1715: if ( dmflags & 0x08 ) {
  4310  00241C  A7CA               	btfss	doActionOn@dmflags& (0+255),3,b
  4311  00241E  D00C               	goto	l10273
  4312                           
  4313                           ; BSR set to: 0
  4314                           ;main.c: 1716: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  4315                           ;main.c: 1717: 53 +
  4316                           ;main.c: 1718: i ) ) {
  4317  002420  0E78               	movlw	120
  4318  002422  25CC               	addwf	doActionOn@i& (0+255),w,b
  4319  002424  6E08               	movwf	?_readEEPROM,c
  4320  002426  6A09               	clrf	?_readEEPROM+1,c
  4321  002428  0E00               	movlw	0
  4322  00242A  2209               	addwfc	?_readEEPROM+1,f,c
  4323  00242C  EC86  F01F         	call	_readEEPROM	;wreg free
  4324  002430  0100               	movlb	0	; () banked
  4325  002432  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4326  002434  E001 D111          	bnz	l10317
  4327  002438                     l10273:
  4328                           
  4329                           ; BSR set to: 0
  4330                           ;main.c: 1720: }
  4331                           ;main.c: 1721: }
  4332                           ;main.c: 1723: val = readEEPROM( 0x43 + 10 + i );
  4333  002438  0E4D               	movlw	77
  4334  00243A  25CC               	addwf	doActionOn@i& (0+255),w,b
  4335  00243C  6E08               	movwf	?_readEEPROM,c
  4336  00243E  6A09               	clrf	?_readEEPROM+1,c
  4337  002440  0E00               	movlw	0
  4338  002442  2209               	addwfc	?_readEEPROM+1,f,c
  4339  002444  EC86  F01F         	call	_readEEPROM	;wreg free
  4340  002448  0100               	movlb	0	; () banked
  4341  00244A  6FCB               	movwf	doActionOn@val& (0+255),b
  4342                           
  4343                           ; BSR set to: 0
  4344                           ;main.c: 1726: if ( !( val & 0x80 ) ) continue;
  4345  00244C  AFCB               	btfss	doActionOn@val& (0+255),7,b
  4346  00244E  D105               	goto	l10317
  4347  002450  D0E0               	goto	l10309
  4348  002452                     l437:
  4349                           
  4350                           ; BSR set to: 0
  4351                           ;main.c: 1731: LATBbits.LATB4 = 1;
  4352  002452  888A               	bsf	3978,4,c	;volatile
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;main.c: 1733: if (readEEPROM( 0x43 + 10 ) & 0x04 ) {
  4356  002454  6A09               	clrf	?_readEEPROM+1,c
  4357  002456  0E4D               	movlw	77
  4358  002458  6E08               	movwf	?_readEEPROM,c
  4359  00245A  EC86  F01F         	call	_readEEPROM	;wreg free
  4360  00245E  0100               	movlb	0	; () banked
  4361  002460  6FC7               	movwf	??_doActionOn& (0+255),b
  4362  002462  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4363  002464  D0E8               	goto	l439
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;main.c: 1734: relay_protection_timer[ 0 ] =
  4367                           ;main.c: 1735: readEEPROM( 0x43 + 34 ) * 256 +
  4368                           ;main.c: 1736: readEEPROM( 0x43 + 35 );
  4369  002466  6A09               	clrf	?_readEEPROM+1,c
  4370  002468  0E66               	movlw	102
  4371  00246A  6E08               	movwf	?_readEEPROM,c
  4372  00246C  EC86  F01F         	call	_readEEPROM	;wreg free
  4373  002470  0100               	movlb	0	; () banked
  4374  002472  6FC7               	movwf	??_doActionOn& (0+255),b
  4375  002474  6A09               	clrf	?_readEEPROM+1,c
  4376  002476  0E65               	movlw	101
  4377  002478  6E08               	movwf	?_readEEPROM,c
  4378  00247A  EC86  F01F         	call	_readEEPROM	;wreg free
  4379  00247E  0100               	movlb	0	; () banked
  4380  002480  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4381  002482  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4382  002484  51C7               	movf	??_doActionOn& (0+255),w,b
  4383  002486  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4384  002488  6F60               	movwf	_relay_protection_timer& (0+255),b
  4385  00248A  0E00               	movlw	0
  4386  00248C  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4387  00248E  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  4388  002490  D0D2               	goto	l439
  4389  002492                     l440:
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;main.c: 1741: LATBbits.LATB1 = 1;
  4393  002492  828A               	bsf	3978,1,c	;volatile
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;main.c: 1743: if (readEEPROM( 0x43 + 11) & 0x04 ) {
  4397  002494  6A09               	clrf	?_readEEPROM+1,c
  4398  002496  0E4E               	movlw	78
  4399  002498  6E08               	movwf	?_readEEPROM,c
  4400  00249A  EC86  F01F         	call	_readEEPROM	;wreg free
  4401  00249E  0100               	movlb	0	; () banked
  4402  0024A0  6FC7               	movwf	??_doActionOn& (0+255),b
  4403  0024A2  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4404  0024A4  D0C8               	goto	l439
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;main.c: 1744: relay_protection_timer[ 1 ] =
  4408                           ;main.c: 1745: readEEPROM( 0x43 + 36 ) * 256 +
  4409                           ;main.c: 1746: readEEPROM( 0x43 + 37 );
  4410  0024A6  6A09               	clrf	?_readEEPROM+1,c
  4411  0024A8  0E68               	movlw	104
  4412  0024AA  6E08               	movwf	?_readEEPROM,c
  4413  0024AC  EC86  F01F         	call	_readEEPROM	;wreg free
  4414  0024B0  0100               	movlb	0	; () banked
  4415  0024B2  6FC7               	movwf	??_doActionOn& (0+255),b
  4416  0024B4  6A09               	clrf	?_readEEPROM+1,c
  4417  0024B6  0E67               	movlw	103
  4418  0024B8  6E08               	movwf	?_readEEPROM,c
  4419  0024BA  EC86  F01F         	call	_readEEPROM	;wreg free
  4420  0024BE  0100               	movlb	0	; () banked
  4421  0024C0  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4422  0024C2  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4423  0024C4  51C7               	movf	??_doActionOn& (0+255),w,b
  4424  0024C6  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4425  0024C8  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  4426  0024CA  0E00               	movlw	0
  4427  0024CC  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4428  0024CE  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  4429  0024D0  D0B2               	goto	l439
  4430  0024D2                     l442:
  4431                           
  4432                           ; BSR set to: 0
  4433                           ;main.c: 1751: LATBbits.LATB0 = 1;
  4434  0024D2  808A               	bsf	3978,0,c	;volatile
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;main.c: 1753: if (readEEPROM( 0x43 + 12) & 0x04 ) {
  4438  0024D4  6A09               	clrf	?_readEEPROM+1,c
  4439  0024D6  0E4F               	movlw	79
  4440  0024D8  6E08               	movwf	?_readEEPROM,c
  4441  0024DA  EC86  F01F         	call	_readEEPROM	;wreg free
  4442  0024DE  0100               	movlb	0	; () banked
  4443  0024E0  6FC7               	movwf	??_doActionOn& (0+255),b
  4444  0024E2  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4445  0024E4  D0A8               	goto	l439
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;main.c: 1754: relay_protection_timer[ 2 ] =
  4449                           ;main.c: 1755: readEEPROM( 0x43 + 38 ) * 256 +
  4450                           ;main.c: 1756: readEEPROM( 0x43 + 39 );
  4451  0024E6  6A09               	clrf	?_readEEPROM+1,c
  4452  0024E8  0E6A               	movlw	106
  4453  0024EA  6E08               	movwf	?_readEEPROM,c
  4454  0024EC  EC86  F01F         	call	_readEEPROM	;wreg free
  4455  0024F0  0100               	movlb	0	; () banked
  4456  0024F2  6FC7               	movwf	??_doActionOn& (0+255),b
  4457  0024F4  6A09               	clrf	?_readEEPROM+1,c
  4458  0024F6  0E69               	movlw	105
  4459  0024F8  6E08               	movwf	?_readEEPROM,c
  4460  0024FA  EC86  F01F         	call	_readEEPROM	;wreg free
  4461  0024FE  0100               	movlb	0	; () banked
  4462  002500  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4463  002502  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4464  002504  51C7               	movf	??_doActionOn& (0+255),w,b
  4465  002506  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4466  002508  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  4467  00250A  0E00               	movlw	0
  4468  00250C  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4469  00250E  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  4470  002510  D092               	goto	l439
  4471  002512                     l444:
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;main.c: 1761: LATCbits.LATC7 = 1;
  4475  002512  8E8B               	bsf	3979,7,c	;volatile
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;main.c: 1763: if ( readEEPROM( 0x43 + 13) & 0x04 ) {
  4479  002514  6A09               	clrf	?_readEEPROM+1,c
  4480  002516  0E50               	movlw	80
  4481  002518  6E08               	movwf	?_readEEPROM,c
  4482  00251A  EC86  F01F         	call	_readEEPROM	;wreg free
  4483  00251E  0100               	movlb	0	; () banked
  4484  002520  6FC7               	movwf	??_doActionOn& (0+255),b
  4485  002522  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4486  002524  D088               	goto	l439
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;main.c: 1764: relay_protection_timer[ 3 ] =
  4490                           ;main.c: 1765: readEEPROM( 0x43 + 40 ) * 256 +
  4491                           ;main.c: 1766: readEEPROM( 0x43 + 41 );
  4492  002526  6A09               	clrf	?_readEEPROM+1,c
  4493  002528  0E6C               	movlw	108
  4494  00252A  6E08               	movwf	?_readEEPROM,c
  4495  00252C  EC86  F01F         	call	_readEEPROM	;wreg free
  4496  002530  0100               	movlb	0	; () banked
  4497  002532  6FC7               	movwf	??_doActionOn& (0+255),b
  4498  002534  6A09               	clrf	?_readEEPROM+1,c
  4499  002536  0E6B               	movlw	107
  4500  002538  6E08               	movwf	?_readEEPROM,c
  4501  00253A  EC86  F01F         	call	_readEEPROM	;wreg free
  4502  00253E  0100               	movlb	0	; () banked
  4503  002540  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4504  002542  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4505  002544  51C7               	movf	??_doActionOn& (0+255),w,b
  4506  002546  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4507  002548  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  4508  00254A  0E00               	movlw	0
  4509  00254C  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4510  00254E  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  4511  002550  D072               	goto	l439
  4512  002552                     l446:
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;main.c: 1771: LATCbits.LATC6 = 1;
  4516  002552  8C8B               	bsf	3979,6,c	;volatile
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;main.c: 1773: if (readEEPROM( 0x43 + 14) & 0x04 ) {
  4520  002554  6A09               	clrf	?_readEEPROM+1,c
  4521  002556  0E51               	movlw	81
  4522  002558  6E08               	movwf	?_readEEPROM,c
  4523  00255A  EC86  F01F         	call	_readEEPROM	;wreg free
  4524  00255E  0100               	movlb	0	; () banked
  4525  002560  6FC7               	movwf	??_doActionOn& (0+255),b
  4526  002562  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4527  002564  D068               	goto	l439
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;main.c: 1774: relay_protection_timer[ 4 ] =
  4531                           ;main.c: 1775: readEEPROM( 0x43 + 42 ) * 256 +
  4532                           ;main.c: 1776: readEEPROM( 0x43 + 43 );
  4533  002566  6A09               	clrf	?_readEEPROM+1,c
  4534  002568  0E6E               	movlw	110
  4535  00256A  6E08               	movwf	?_readEEPROM,c
  4536  00256C  EC86  F01F         	call	_readEEPROM	;wreg free
  4537  002570  0100               	movlb	0	; () banked
  4538  002572  6FC7               	movwf	??_doActionOn& (0+255),b
  4539  002574  6A09               	clrf	?_readEEPROM+1,c
  4540  002576  0E6D               	movlw	109
  4541  002578  6E08               	movwf	?_readEEPROM,c
  4542  00257A  EC86  F01F         	call	_readEEPROM	;wreg free
  4543  00257E  0100               	movlb	0	; () banked
  4544  002580  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4545  002582  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4546  002584  51C7               	movf	??_doActionOn& (0+255),w,b
  4547  002586  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4548  002588  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  4549  00258A  0E00               	movlw	0
  4550  00258C  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4551  00258E  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  4552  002590  D052               	goto	l439
  4553  002592                     l448:
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;main.c: 1781: LATCbits.LATC5 = 1;
  4557  002592  8A8B               	bsf	3979,5,c	;volatile
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;main.c: 1783: if (readEEPROM( 0x43 + 15) & 0x04) {
  4561  002594  6A09               	clrf	?_readEEPROM+1,c
  4562  002596  0E52               	movlw	82
  4563  002598  6E08               	movwf	?_readEEPROM,c
  4564  00259A  EC86  F01F         	call	_readEEPROM	;wreg free
  4565  00259E  0100               	movlb	0	; () banked
  4566  0025A0  6FC7               	movwf	??_doActionOn& (0+255),b
  4567  0025A2  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4568  0025A4  D048               	goto	l439
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;main.c: 1784: relay_protection_timer[ 5 ] =
  4572                           ;main.c: 1785: readEEPROM( 0x43 + 44 ) * 256 +
  4573                           ;main.c: 1786: readEEPROM( 0x43 + 45 );
  4574  0025A6  6A09               	clrf	?_readEEPROM+1,c
  4575  0025A8  0E70               	movlw	112
  4576  0025AA  6E08               	movwf	?_readEEPROM,c
  4577  0025AC  EC86  F01F         	call	_readEEPROM	;wreg free
  4578  0025B0  0100               	movlb	0	; () banked
  4579  0025B2  6FC7               	movwf	??_doActionOn& (0+255),b
  4580  0025B4  6A09               	clrf	?_readEEPROM+1,c
  4581  0025B6  0E6F               	movlw	111
  4582  0025B8  6E08               	movwf	?_readEEPROM,c
  4583  0025BA  EC86  F01F         	call	_readEEPROM	;wreg free
  4584  0025BE  0100               	movlb	0	; () banked
  4585  0025C0  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4586  0025C2  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4587  0025C4  51C7               	movf	??_doActionOn& (0+255),w,b
  4588  0025C6  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4589  0025C8  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  4590  0025CA  0E00               	movlw	0
  4591  0025CC  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4592  0025CE  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  4593  0025D0  D032               	goto	l439
  4594  0025D2                     l450:
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;main.c: 1791: LATCbits.LATC4 = 1;
  4598  0025D2  888B               	bsf	3979,4,c	;volatile
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;main.c: 1793: if ( readEEPROM( 0x43 + 16) & 0x04) {
  4602  0025D4  6A09               	clrf	?_readEEPROM+1,c
  4603  0025D6  0E53               	movlw	83
  4604  0025D8  6E08               	movwf	?_readEEPROM,c
  4605  0025DA  EC86  F01F         	call	_readEEPROM	;wreg free
  4606  0025DE  0100               	movlb	0	; () banked
  4607  0025E0  6FC7               	movwf	??_doActionOn& (0+255),b
  4608  0025E2  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4609  0025E4  D028               	goto	l439
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;main.c: 1794: relay_protection_timer[ 6 ] =
  4613                           ;main.c: 1795: readEEPROM( 0x43 + 46 ) * 256 +
  4614                           ;main.c: 1796: readEEPROM( 0x43 + 47 );
  4615  0025E6  6A09               	clrf	?_readEEPROM+1,c
  4616  0025E8  0E72               	movlw	114
  4617  0025EA  6E08               	movwf	?_readEEPROM,c
  4618  0025EC  EC86  F01F         	call	_readEEPROM	;wreg free
  4619  0025F0  0100               	movlb	0	; () banked
  4620  0025F2  6FC7               	movwf	??_doActionOn& (0+255),b
  4621  0025F4  6A09               	clrf	?_readEEPROM+1,c
  4622  0025F6  0E71               	movlw	113
  4623  0025F8  6E08               	movwf	?_readEEPROM,c
  4624  0025FA  EC86  F01F         	call	_readEEPROM	;wreg free
  4625  0025FE  0100               	movlb	0	; () banked
  4626  002600  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4627  002602  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4628  002604  51C7               	movf	??_doActionOn& (0+255),w,b
  4629  002606  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4630  002608  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  4631  00260A  0E00               	movlw	0
  4632  00260C  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4633  00260E  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  4634  002610  D012               	goto	l439
  4635  002612                     l10309:
  4636                           
  4637                           ; BSR set to: 0
  4638  002612  51CC               	movf	doActionOn@i& (0+255),w,b
  4639                           
  4640                           ; Switch size 1, requested type "speed"
  4641                           ; Number of cases is 7, Range of values is 0 to 6
  4642                           ; switch strategies available:
  4643                           ; Name         Instructions Cycles
  4644                           ; simple_byte           22    12 (average)
  4645                           ;	Chosen strategy is simple_byte
  4646  002614  E101 D71D          	bz	l437
  4647  002618  0A01               	xorlw	1	; case 1
  4648  00261A  E101 D73A          	bz	l440
  4649  00261E  0A03               	xorlw	3	; case 2
  4650  002620  E101 D757          	bz	l442
  4651  002624  0A01               	xorlw	1	; case 3
  4652  002626  E101 D774          	bz	l444
  4653  00262A  0A07               	xorlw	7	; case 4
  4654  00262C  E092               	bz	l446
  4655  00262E  0A01               	xorlw	1	; case 5
  4656  002630  E0B0               	bz	l448
  4657  002632  0A03               	xorlw	3	; case 6
  4658  002634  E0CE               	bz	l450
  4659  002636                     l439:
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;main.c: 1803: if ( val & 0x08 ) {
  4663  002636  A7CB               	btfss	doActionOn@val& (0+255),3,b
  4664  002638  D007               	goto	l10313
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;main.c: 1804: SendInformationEvent( i, 20, 3 );
  4668  00263A  0E14               	movlw	20
  4669  00263C  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4670  00263E  0E03               	movlw	3
  4671  002640  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4672  002642  51CC               	movf	doActionOn@i& (0+255),w,b
  4673  002644  ECFB  F01C         	call	_SendInformationEvent
  4674  002648                     l10313:
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;main.c: 1805: }
  4678                           ;main.c: 1808: if ( val & 0x20 ) {
  4679  002648  ABCB               	btfss	doActionOn@val& (0+255),5,b
  4680  00264A  D007               	goto	l10317
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;main.c: 1809: SendInformationEvent( i, 20, 25 );
  4684  00264C  0E14               	movlw	20
  4685  00264E  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4686  002650  0E19               	movlw	25
  4687  002652  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4688  002654  51CC               	movf	doActionOn@i& (0+255),w,b
  4689  002656  ECFB  F01C         	call	_SendInformationEvent
  4690  00265A                     l10317:
  4691                           
  4692                           ; BSR set to: 0
  4693  00265A  2BCC               	incf	doActionOn@i& (0+255),f,b
  4694                           
  4695                           ; BSR set to: 0
  4696  00265C  0E07               	movlw	7
  4697  00265E  65CC               	cpfsgt	doActionOn@i& (0+255),b
  4698  002660  D6CF               	goto	l10265
  4699                           
  4700                           ; BSR set to: 0
  4701  002662  0C07               	retlw	7
  4702  002664                     __end_of_doActionOn:
  4703                           	opt stack 0
  4704                           tblptru	equ	0xFF8
  4705                           prodh	equ	0xFF4
  4706                           prodl	equ	0xFF3
  4707                           postinc0	equ	0xFEE
  4708                           wreg	equ	0xFE8
  4709                           postinc2	equ	0xFDE
  4710                           postdec2	equ	0xFDD
  4711                           fsr2h	equ	0xFDA
  4712                           fsr2l	equ	0xFD9
  4713                           status	equ	0xFD8
  4714                           
  4715 ;; *************** function _doActionOff *****************
  4716 ;; Defined at:
  4717 ;;		line 1819 in file "../main.c"
  4718 ;; Parameters:    Size  Location     Type
  4719 ;;  dmflags         1    wreg     unsigned char 
  4720 ;;  arg             1   80[COMRAM] unsigned char 
  4721 ;; Auto vars:     Size  Location     Type
  4722 ;;  dmflags         1   24[BANK0 ] unsigned char 
  4723 ;;  i               1   26[BANK0 ] unsigned char 
  4724 ;;  val             1   25[BANK0 ] unsigned char 
  4725 ;; Return value:  Size  Location     Type
  4726 ;;		None               void
  4727 ;; Registers used:
  4728 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4729 ;; Tracked objects:
  4730 ;;		On entry : F/0
  4731 ;;		On exit  : F/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4734 ;;      Params:         1       0       0       0       0       0       0
  4735 ;;      Locals:         0       3       0       0       0       0       0
  4736 ;;      Temps:          0       2       0       0       0       0       0
  4737 ;;      Totals:         1       5       0       0       0       0       0
  4738 ;;Total ram usage:        6 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    7
  4741 ;; This function calls:
  4742 ;;		_readEEPROM
  4743 ;;		_SendInformationEvent
  4744 ;; This function is called by:
  4745 ;;		_doApplicationOneSecondWork
  4746 ;;		_doDM
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           	psect	text14
  4751  003526                     __ptext14:
  4752                           	opt stack 0
  4753  003526                     _doActionOff:
  4754                           	opt stack 22
  4755                           
  4756                           ; BSR set to: 0
  4757                           ;incstack = 0
  4758                           ;incstack = 0
  4759                           ;doActionOff@dmflags stored from wreg
  4760  003526  CFE8 F0C9          	movff	wreg,doActionOff@dmflags
  4761                           
  4762                           ; BSR set to: 0
  4763                           ;main.c: 1821: unsigned char i;
  4764                           ;main.c: 1822: unsigned char val;
  4765                           ;main.c: 1824: for ( i = 0; i < 8; i++ ) {
  4766  00352A  6BCB               	clrf	doActionOff@i& (0+255),b
  4767  00352C                     l9867:
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;main.c: 1827: if ( !( arg & ( 1 << i ) ) ) continue;
  4771  00352C  C0CB  F0C7         	movff	doActionOff@i,??_doActionOff
  4772  003530  0E01               	movlw	1
  4773  003532  6FC8               	movwf	(??_doActionOff+1)& (0+255),b
  4774  003534  2BC7               	incf	??_doActionOff& (0+255),f,b
  4775  003536  D002               	goto	u12314
  4776  003538                     u12315:
  4777  003538  90D8               	bcf	status,0,c
  4778  00353A  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4779  00353C                     u12314:
  4780  00353C  2FC7               	decfsz	??_doActionOff& (0+255),f,b
  4781  00353E  D7FC               	goto	u12315
  4782  003540  51C8               	movf	(??_doActionOff+1)& (0+255),w,b
  4783  003542  1451               	andwf	doActionOff@arg,w,c
  4784  003544  E048               	bz	l9891
  4785                           
  4786                           ; BSR set to: 0
  4787                           ;main.c: 1830: if ( dmflags & 0x08 ) {
  4788  003546  A7C9               	btfss	doActionOff@dmflags& (0+255),3,b
  4789  003548  D00B               	goto	l9875
  4790                           
  4791                           ; BSR set to: 0
  4792                           ;main.c: 1831: if ( vscp_imsg.data[ 2 ] != readEEPROM(0x43 +
  4793                           ;main.c: 1832: 53 +
  4794                           ;main.c: 1833: i ) ) {
  4795  00354A  0E78               	movlw	120
  4796  00354C  25CB               	addwf	doActionOff@i& (0+255),w,b
  4797  00354E  6E08               	movwf	?_readEEPROM,c
  4798  003550  6A09               	clrf	?_readEEPROM+1,c
  4799  003552  0E00               	movlw	0
  4800  003554  2209               	addwfc	?_readEEPROM+1,f,c
  4801  003556  EC86  F01F         	call	_readEEPROM	;wreg free
  4802  00355A  0100               	movlb	0	; () banked
  4803  00355C  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4804  00355E  E13B               	bnz	l9891
  4805  003560                     l9875:
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;main.c: 1835: }
  4809                           ;main.c: 1836: }
  4810                           ;main.c: 1838: val = readEEPROM( 0x43 + 10 + i );
  4811  003560  0E4D               	movlw	77
  4812  003562  25CB               	addwf	doActionOff@i& (0+255),w,b
  4813  003564  6E08               	movwf	?_readEEPROM,c
  4814  003566  6A09               	clrf	?_readEEPROM+1,c
  4815  003568  0E00               	movlw	0
  4816  00356A  2209               	addwfc	?_readEEPROM+1,f,c
  4817  00356C  EC86  F01F         	call	_readEEPROM	;wreg free
  4818  003570  0100               	movlb	0	; () banked
  4819  003572  6FCA               	movwf	doActionOff@val& (0+255),b
  4820                           
  4821                           ; BSR set to: 0
  4822                           ;main.c: 1841: if ( !( val & 0x80 ) ) continue;
  4823  003574  AFCA               	btfss	doActionOff@val& (0+255),7,b
  4824  003576  D02F               	goto	l9891
  4825  003578  D00E               	goto	l9883
  4826  00357A                     l465:
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;main.c: 1846: LATBbits.LATB4 = 0;
  4830  00357A  988A               	bcf	3978,4,c	;volatile
  4831                           
  4832                           ;main.c: 1847: break;
  4833  00357C  D01A               	goto	l466
  4834  00357E                     l467:
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;main.c: 1850: LATBbits.LATB1 = 0;
  4838  00357E  928A               	bcf	3978,1,c	;volatile
  4839                           
  4840                           ;main.c: 1851: break;
  4841  003580  D018               	goto	l466
  4842  003582                     l468:
  4843                           
  4844                           ; BSR set to: 0
  4845                           ;main.c: 1854: LATBbits.LATB0 = 0;
  4846  003582  908A               	bcf	3978,0,c	;volatile
  4847                           
  4848                           ;main.c: 1855: break;
  4849  003584  D016               	goto	l466
  4850  003586                     l469:
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;main.c: 1858: LATCbits.LATC7 = 0;
  4854  003586  9E8B               	bcf	3979,7,c	;volatile
  4855                           
  4856                           ;main.c: 1859: break;
  4857  003588  D014               	goto	l466
  4858  00358A                     l470:
  4859                           
  4860                           ; BSR set to: 0
  4861                           ;main.c: 1862: LATCbits.LATC6 = 0;
  4862  00358A  9C8B               	bcf	3979,6,c	;volatile
  4863                           
  4864                           ;main.c: 1863: break;
  4865  00358C  D012               	goto	l466
  4866  00358E                     l471:
  4867                           
  4868                           ; BSR set to: 0
  4869                           ;main.c: 1866: LATCbits.LATC5 = 0;
  4870  00358E  9A8B               	bcf	3979,5,c	;volatile
  4871                           
  4872                           ;main.c: 1867: break;
  4873  003590  D010               	goto	l466
  4874  003592                     l472:
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;main.c: 1870: LATCbits.LATC4 = 0;
  4878  003592  988B               	bcf	3979,4,c	;volatile
  4879                           
  4880                           ;main.c: 1871: break;
  4881  003594  D00E               	goto	l466
  4882  003596                     l9883:
  4883                           
  4884                           ; BSR set to: 0
  4885  003596  51CB               	movf	doActionOff@i& (0+255),w,b
  4886                           
  4887                           ; Switch size 1, requested type "speed"
  4888                           ; Number of cases is 7, Range of values is 0 to 6
  4889                           ; switch strategies available:
  4890                           ; Name         Instructions Cycles
  4891                           ; simple_byte           22    12 (average)
  4892                           ;	Chosen strategy is simple_byte
  4893  003598  E0F0               	bz	l465
  4894  00359A  0A01               	xorlw	1	; case 1
  4895  00359C  E0F0               	bz	l467
  4896  00359E  0A03               	xorlw	3	; case 2
  4897  0035A0  E0F0               	bz	l468
  4898  0035A2  0A01               	xorlw	1	; case 3
  4899  0035A4  E0F0               	bz	l469
  4900  0035A6  0A07               	xorlw	7	; case 4
  4901  0035A8  E0F0               	bz	l470
  4902  0035AA  0A01               	xorlw	1	; case 5
  4903  0035AC  E0F0               	bz	l471
  4904  0035AE  0A03               	xorlw	3	; case 6
  4905  0035B0  E0F0               	bz	l472
  4906  0035B2                     l466:
  4907                           
  4908                           ; BSR set to: 0
  4909                           ;main.c: 1876: if ( val & 0x10 ) {
  4910  0035B2  A9CA               	btfss	doActionOff@val& (0+255),4,b
  4911  0035B4  D007               	goto	l9887
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;main.c: 1877: SendInformationEvent( i, 20, 4 );
  4915  0035B6  0E14               	movlw	20
  4916  0035B8  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4917  0035BA  0E04               	movlw	4
  4918  0035BC  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4919  0035BE  51CB               	movf	doActionOff@i& (0+255),w,b
  4920  0035C0  ECFB  F01C         	call	_SendInformationEvent
  4921  0035C4                     l9887:
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;main.c: 1878: }
  4925                           ;main.c: 1881: if ( val & 0x40 ) {
  4926  0035C4  ADCA               	btfss	doActionOff@val& (0+255),6,b
  4927  0035C6  D007               	goto	l9891
  4928                           
  4929                           ; BSR set to: 0
  4930                           ;main.c: 1882: SendInformationEvent( i, 20, 24 );
  4931  0035C8  0E14               	movlw	20
  4932  0035CA  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4933  0035CC  0E18               	movlw	24
  4934  0035CE  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4935  0035D0  51CB               	movf	doActionOff@i& (0+255),w,b
  4936  0035D2  ECFB  F01C         	call	_SendInformationEvent
  4937  0035D6                     l9891:
  4938                           
  4939                           ; BSR set to: 0
  4940  0035D6  2BCB               	incf	doActionOff@i& (0+255),f,b
  4941                           
  4942                           ; BSR set to: 0
  4943  0035D8  0E07               	movlw	7
  4944  0035DA  65CB               	cpfsgt	doActionOff@i& (0+255),b
  4945  0035DC  D7A7               	goto	l9867
  4946                           
  4947                           ; BSR set to: 0
  4948  0035DE  0C07               	retlw	7
  4949  0035E0                     __end_of_doActionOff:
  4950                           	opt stack 0
  4951                           tblptru	equ	0xFF8
  4952                           prodh	equ	0xFF4
  4953                           prodl	equ	0xFF3
  4954                           postinc0	equ	0xFEE
  4955                           wreg	equ	0xFE8
  4956                           postinc2	equ	0xFDE
  4957                           postdec2	equ	0xFDD
  4958                           fsr2h	equ	0xFDA
  4959                           fsr2l	equ	0xFD9
  4960                           status	equ	0xFD8
  4961                           
  4962 ;; *************** function _vscp_handleProtocolEvent *****************
  4963 ;; Defined at:
  4964 ;;		line 782 in file "../../vscp_firmware/common/vscp_firmware.c"
  4965 ;; Parameters:    Size  Location     Type
  4966 ;;		None
  4967 ;; Auto vars:     Size  Location     Type
  4968 ;;  bytes           1   45[BANK0 ] unsigned char 
  4969 ;;  page_save       2   41[BANK0 ] unsigned short 
  4970 ;;  i               1   51[BANK0 ] unsigned char 
  4971 ;;  page_save       2   39[BANK0 ] unsigned short 
  4972 ;;  byte            1   55[BANK0 ] unsigned char 
  4973 ;;  bytes           1   53[BANK0 ] unsigned char 
  4974 ;;  cb              1   50[BANK0 ] unsigned char 
  4975 ;;  bytes_this_t    1   49[BANK0 ] unsigned char 
  4976 ;;  j               1   58[BANK0 ] unsigned char 
  4977 ;;  i               1   56[BANK0 ] unsigned char 
  4978 ;;  k               1   52[BANK0 ] unsigned char 
  4979 ;;  i               1   54[BANK0 ] unsigned char 
  4980 ;;  len             1   48[BANK0 ] unsigned char 
  4981 ;;  pos             1   47[BANK0 ] unsigned char 
  4982 ;;  i               1   57[BANK0 ] unsigned char 
  4983 ;;  len             1   46[BANK0 ] unsigned char 
  4984 ;;  pos             1   44[BANK0 ] unsigned char 
  4985 ;;  offset          1   43[BANK0 ] unsigned char 
  4986 ;; Return value:  Size  Location     Type
  4987 ;;		None               void
  4988 ;; Registers used:
  4989 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4990 ;; Tracked objects:
  4991 ;;		On entry : F/0
  4992 ;;		On exit  : 0/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4995 ;;      Params:         0       0       0       0       0       0       0
  4996 ;;      Locals:         0      20       0       0       0       0       0
  4997 ;;      Temps:          0       7       0       0       0       0       0
  4998 ;;      Totals:         0      27       0       0       0       0       0
  4999 ;;Total ram usage:       27 bytes
  5000 ;; Hardware stack levels used:    1
  5001 ;; Hardware stack levels required when called:    9
  5002 ;; This function calls:
  5003 ;;		_vscp_init
  5004 ;;		_vscp_readAppReg
  5005 ;;		_vscp_writeAppReg
  5006 ;;		_vscp_sendEvent
  5007 ;;		_vscp_getGUID
  5008 ;;		_vscp_getMDF_URL
  5009 ;;		_vscp_goBootloaderMode
  5010 ;;		_vscp_getMatrixInfo
  5011 ;;		_vscp_handleHeartbeat
  5012 ;;		_vscp_handleSetNickname
  5013 ;;		_vscp_handleDropNickname
  5014 ;;		_vscp_newNodeOnline
  5015 ;;		_vscp_readRegister
  5016 ;;		_vscp_readStdReg
  5017 ;;		_vscp_writeRegister
  5018 ;;		_vscp_writeStdReg
  5019 ;;		___lbmod
  5020 ;; This function is called by:
  5021 ;;		_main
  5022 ;; This function uses a non-reentrant model
  5023 ;;
  5024                           
  5025                           	psect	text15
  5026  000FD0                     __ptext15:
  5027                           	opt stack 0
  5028  000FD0                     _vscp_handleProtocolEvent:
  5029                           	opt stack 21
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;vscp_firmware.c: 784: if (0 == vscp_imsg.vscp_class) {
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;incstack = 0
  5036                           ;incstack = 0
  5037  000FD0  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  5038  000FD2  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  5039  000FD4  E101 D2E5          	bz	l9695
  5040  000FD8  D315               	goto	l1269
  5041  000FDA                     l9275:
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;vscp_firmware.c: 791: vscp_handleHeartbeat();
  5045  000FDA  EC9A  F01D         	call	_vscp_handleHeartbeat	;wreg free
  5046                           
  5047                           ;vscp_firmware.c: 792: break;
  5048  000FDE  D312               	goto	l1269
  5049  000FE0                     l9277:
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;vscp_firmware.c: 796: vscp_newNodeOnline();
  5053  000FE0  EC06  F01E         	call	_vscp_newNodeOnline	;wreg free
  5054                           
  5055                           ;vscp_firmware.c: 797: break;
  5056  000FE4  D30F               	goto	l1269
  5057  000FE6                     l9279:
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;vscp_firmware.c: 801: vscp_handleSetNickname();
  5061  000FE6  EC7D  F01E         	call	_vscp_handleSetNickname	;wreg free
  5062                           
  5063                           ;vscp_firmware.c: 802: break;
  5064  000FEA  D30C               	goto	l1269
  5065  000FEC                     l9281:
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;vscp_firmware.c: 806: vscp_handleDropNickname();
  5069  000FEC  ECD8  F01D         	call	_vscp_handleDropNickname	;wreg free
  5070                           
  5071                           ;vscp_firmware.c: 807: break;
  5072  000FF0  D309               	goto	l1269
  5073  000FF2                     l9283:
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;vscp_firmware.c: 811: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  5077                           ;vscp_firmware.c: 812: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5078  000FF2  5196               	movf	_vscp_imsg& (0+255),w,b
  5079  000FF4  0B0F               	andlw	15
  5080  000FF6  0A02               	xorlw	2
  5081  000FF8  E001 D304          	bnz	l1269
  5082                           
  5083                           ; BSR set to: 0
  5084  000FFC  5191               	movf	_vscp_nickname& (0+255),w,b
  5085  000FFE  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5086  001002  62DF               	cpfseq	indf2,c
  5087  001004  D2FF               	goto	l1269
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;vscp_firmware.c: 814: if (vscp_imsg.data[ 1 ] < 0x80) {
  5091  001006  0E80               	movlw	128
  5092  001008  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5093  00100A  D012               	goto	l9303
  5094                           
  5095                           ; BSR set to: 0
  5096                           ;vscp_firmware.c: 817: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  5097  00100C  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5098  00100E  ECA8  F01B         	call	_vscp_readAppReg
  5099  001012                     L13:
  5100  001012  0100               	movlb	0	; () banked
  5101  001014                     L14:
  5102  001014  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;vscp_firmware.c: 820: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  5106  001016  C09D  F0A9         	movff	_vscp_imsg+7,_vscp_omsg+5
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;vscp_firmware.c: 822: vscp_omsg.priority = 0x03;
  5110  00101A  0E03               	movlw	3
  5111  00101C  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;vscp_firmware.c: 823: vscp_omsg.flags = 0x80 + 2;
  5115  00101E  0E82               	movlw	130
  5116  001020  6FA4               	movwf	_vscp_omsg& (0+255),b
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;vscp_firmware.c: 824: vscp_omsg.vscp_class = 0;
  5120  001022  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5121  001024  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5122                           
  5123                           ; BSR set to: 0
  5124                           ;vscp_firmware.c: 825: vscp_omsg.vscp_type = 10;
  5125  001026  0E0A               	movlw	10
  5126  001028  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5127  00102A                     l9301:
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;vscp_firmware.c: 828: vscp_sendEvent();
  5131  00102A  EC57  F01E         	call	_vscp_sendEvent	;wreg free
  5132                           
  5133                           ;vscp_firmware.c: 829: } else {
  5134  00102E  D2EA               	goto	l1269
  5135  001030                     l9303:
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] =
  5139                           ;vscp_firmware.c: 833: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  5140  001030  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5141  001032  ECB1  F019         	call	_vscp_readStdReg
  5142  001036  D7ED               	goto	L13
  5143  001038                     l9317:
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;vscp_firmware.c: 851: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  5147                           ;vscp_firmware.c: 852: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5148  001038  5196               	movf	_vscp_imsg& (0+255),w,b
  5149  00103A  0B0F               	andlw	15
  5150  00103C  0A03               	xorlw	3
  5151  00103E  E001 D2E1          	bnz	l1269
  5152                           
  5153                           ; BSR set to: 0
  5154  001042  5191               	movf	_vscp_nickname& (0+255),w,b
  5155  001044  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5156  001048  62DF               	cpfseq	indf2,c
  5157  00104A  D2DC               	goto	l1269
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;vscp_firmware.c: 854: if (vscp_imsg.data[ 1 ] < 0x80) {
  5161  00104C  0E80               	movlw	128
  5162  00104E  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5163  001050  D006               	goto	l9337
  5164                           
  5165                           ; BSR set to: 0
  5166                           ;vscp_firmware.c: 857: vscp_omsg.data[ 1 ] =
  5167                           ;vscp_firmware.c: 858: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5168  001052  C09E  F051         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  5169  001056  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5170  001058  EC11  F003         	call	_vscp_writeAppReg
  5171  00105C  D7DB               	goto	L14
  5172  00105E                     l9337:
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;vscp_firmware.c: 874: vscp_omsg.data[ 1 ] =
  5176                           ;vscp_firmware.c: 875: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5177  00105E  C09E  F00F         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  5178  001062  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5179  001064  EC21  F015         	call	_vscp_writeStdReg
  5180  001068  D7D4               	goto	L13
  5181  00106A                     l9351:
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;vscp_firmware.c: 892: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  5185                           ;vscp_firmware.c: 893: (9 == vscp_imsg.data[ 1 ]))
  5186  00106A  5191               	movf	_vscp_nickname& (0+255),w,b
  5187  00106C  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5188  001070  62DF               	cpfseq	indf2,c
  5189  001072  D005               	goto	l9357
  5190                           
  5191                           ; BSR set to: 0
  5192  001074  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5193  001076  0A09               	xorlw	9
  5194  001078  B4D8               	btfsc	status,2,c
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;vscp_firmware.c: 894: {
  5198                           ;vscp_firmware.c: 895: vscp_goBootloaderMode();
  5199  00107A  EC98  F01F         	call	_vscp_goBootloaderMode	;wreg free
  5200  00107E                     l9357:
  5201                           
  5202                           ;vscp_firmware.c: 896: }
  5203                           ;vscp_firmware.c: 898: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  5204                           ;vscp_firmware.c: 899: (1 == vscp_imsg.data[ 1 ]) &&
  5205                           ;vscp_firmware.c: 900: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  5206                           ;vscp_firmware.c: 901: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  5207                           ;vscp_firmware.c: 902: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  5208                           ;vscp_firmware.c: 903: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  5209                           ;vscp_firmware.c: 904: ((vscp_page_select >> 8) == vscp_imsg.data[ 6 ]) &&
  5210                           ;vscp_firmware.c: 905: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  5211  00107E  0100               	movlb	0	; () banked
  5212  001080  5191               	movf	_vscp_nickname& (0+255),w,b
  5213  001082  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5214  001086  62DF               	cpfseq	indf2,c
  5215  001088  D2BD               	goto	l1269
  5216                           
  5217                           ; BSR set to: 0
  5218  00108A  059D               	decf	(_vscp_imsg+7)& (0+255),w,b
  5219  00108C  E001 D2BA          	bnz	l1269
  5220                           
  5221                           ; BSR set to: 0
  5222  001090  0E00               	movlw	0
  5223  001092  EC58  F01F         	call	_vscp_getGUID
  5224  001096  0100               	movlb	0	; () banked
  5225  001098  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5226  00109A  E001 D2B3          	bnz	l1269
  5227                           
  5228                           ; BSR set to: 0
  5229  00109E  0E03               	movlw	3
  5230  0010A0  EC58  F01F         	call	_vscp_getGUID
  5231  0010A4  0100               	movlb	0	; () banked
  5232  0010A6  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5233  0010A8  E001 D2AC          	bnz	l1269
  5234                           
  5235                           ; BSR set to: 0
  5236  0010AC  0E05               	movlw	5
  5237  0010AE  EC58  F01F         	call	_vscp_getGUID
  5238  0010B2  0100               	movlb	0	; () banked
  5239  0010B4  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5240  0010B6  E001 D2A5          	bnz	l1269
  5241                           
  5242                           ; BSR set to: 0
  5243  0010BA  0E07               	movlw	7
  5244  0010BC  EC58  F01F         	call	_vscp_getGUID
  5245  0010C0  0100               	movlb	0	; () banked
  5246  0010C2  19A1               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  5247  0010C4  E001 D29E          	bnz	l1269
  5248                           
  5249                           ; BSR set to: 0
  5250  0010C8  5053               	movf	_vscp_page_select+1,w,c
  5251  0010CA  19A2               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  5252  0010CC  E001 D29A          	bnz	l1269
  5253                           
  5254                           ; BSR set to: 0
  5255  0010D0  5052               	movf	_vscp_page_select,w,c
  5256  0010D2  EE20  F0A3         	lfsr	2,_vscp_imsg+13
  5257  0010D6  62DF               	cpfseq	indf2,c
  5258  0010D8  D295               	goto	l1269
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;vscp_firmware.c: 907: vscp_goBootloaderMode();
  5262  0010DA  EC98  F01F         	call	_vscp_goBootloaderMode	;wreg free
  5263  0010DE  D292               	goto	l1269
  5264  0010E0                     l9375:
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;vscp_firmware.c: 917: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  5268                           ;vscp_firmware.c: 918: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  5269                           ;vscp_firmware.c: 919: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  5270                           ;vscp_firmware.c: 920: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  5271  0010E0  0E00               	movlw	0
  5272  0010E2  EC58  F01F         	call	_vscp_getGUID
  5273  0010E6  0100               	movlb	0	; () banked
  5274  0010E8  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5275  0010EA  E173               	bnz	l9419
  5276                           
  5277                           ; BSR set to: 0
  5278  0010EC  0E01               	movlw	1
  5279  0010EE  EC58  F01F         	call	_vscp_getGUID
  5280  0010F2  0100               	movlb	0	; () banked
  5281  0010F4  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5282  0010F6  E16D               	bnz	l9419
  5283                           
  5284                           ; BSR set to: 0
  5285  0010F8  0E02               	movlw	2
  5286  0010FA  EC58  F01F         	call	_vscp_getGUID
  5287  0010FE  0100               	movlb	0	; () banked
  5288  001100  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5289  001102  E167               	bnz	l9419
  5290                           
  5291                           ; BSR set to: 0
  5292  001104  0E03               	movlw	3
  5293  001106  EC58  F01F         	call	_vscp_getGUID
  5294  00110A  0100               	movlb	0	; () banked
  5295  00110C  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5296  00110E  E161               	bnz	l9419
  5297                           
  5298                           ; BSR set to: 0
  5299                           ;vscp_firmware.c: 921: vscp_guid_reset |= 0x10;
  5300  001110  898D               	bsf	_vscp_guid_reset& (0+255),4,b
  5301  001112  D05F               	goto	l9419
  5302  001114                     l9385:
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;vscp_firmware.c: 926: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  5306                           ;vscp_firmware.c: 927: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  5307                           ;vscp_firmware.c: 928: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  5308                           ;vscp_firmware.c: 929: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  5309  001114  0E04               	movlw	4
  5310  001116  EC58  F01F         	call	_vscp_getGUID
  5311  00111A  0100               	movlb	0	; () banked
  5312  00111C  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5313  00111E  E159               	bnz	l9419
  5314                           
  5315                           ; BSR set to: 0
  5316  001120  0E05               	movlw	5
  5317  001122  EC58  F01F         	call	_vscp_getGUID
  5318  001126  0100               	movlb	0	; () banked
  5319  001128  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5320  00112A  E153               	bnz	l9419
  5321                           
  5322                           ; BSR set to: 0
  5323  00112C  0E06               	movlw	6
  5324  00112E  EC58  F01F         	call	_vscp_getGUID
  5325  001132  0100               	movlb	0	; () banked
  5326  001134  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5327  001136  E14D               	bnz	l9419
  5328                           
  5329                           ; BSR set to: 0
  5330  001138  0E07               	movlw	7
  5331  00113A  EC58  F01F         	call	_vscp_getGUID
  5332  00113E  0100               	movlb	0	; () banked
  5333  001140  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5334  001142  E147               	bnz	l9419
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;vscp_firmware.c: 930: vscp_guid_reset |= 0x20;
  5338  001144  8B8D               	bsf	_vscp_guid_reset& (0+255),5,b
  5339  001146  D045               	goto	l9419
  5340  001148                     l9395:
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;vscp_firmware.c: 935: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  5344                           ;vscp_firmware.c: 936: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  5345                           ;vscp_firmware.c: 937: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  5346                           ;vscp_firmware.c: 938: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  5347  001148  0E08               	movlw	8
  5348  00114A  EC58  F01F         	call	_vscp_getGUID
  5349  00114E  0100               	movlb	0	; () banked
  5350  001150  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5351  001152  E13F               	bnz	l9419
  5352                           
  5353                           ; BSR set to: 0
  5354  001154  0E09               	movlw	9
  5355  001156  EC58  F01F         	call	_vscp_getGUID
  5356  00115A  0100               	movlb	0	; () banked
  5357  00115C  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5358  00115E  E139               	bnz	l9419
  5359                           
  5360                           ; BSR set to: 0
  5361  001160  0E0A               	movlw	10
  5362  001162  EC58  F01F         	call	_vscp_getGUID
  5363  001166  0100               	movlb	0	; () banked
  5364  001168  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5365  00116A  E133               	bnz	l9419
  5366                           
  5367                           ; BSR set to: 0
  5368  00116C  0E0B               	movlw	11
  5369  00116E  EC58  F01F         	call	_vscp_getGUID
  5370  001172  0100               	movlb	0	; () banked
  5371  001174  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5372  001176  E12D               	bnz	l9419
  5373                           
  5374                           ; BSR set to: 0
  5375                           ;vscp_firmware.c: 939: vscp_guid_reset |= 0x40;
  5376  001178  8D8D               	bsf	_vscp_guid_reset& (0+255),6,b
  5377  00117A  D02B               	goto	l9419
  5378  00117C                     l9405:
  5379                           
  5380                           ; BSR set to: 0
  5381                           ;vscp_firmware.c: 944: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  5382                           ;vscp_firmware.c: 945: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  5383                           ;vscp_firmware.c: 946: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  5384                           ;vscp_firmware.c: 947: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  5385  00117C  0E0C               	movlw	12
  5386  00117E  EC58  F01F         	call	_vscp_getGUID
  5387  001182  0100               	movlb	0	; () banked
  5388  001184  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5389  001186  E125               	bnz	l9419
  5390                           
  5391                           ; BSR set to: 0
  5392  001188  0E0D               	movlw	13
  5393  00118A  EC58  F01F         	call	_vscp_getGUID
  5394  00118E  0100               	movlb	0	; () banked
  5395  001190  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5396  001192  E11F               	bnz	l9419
  5397                           
  5398                           ; BSR set to: 0
  5399  001194  0E0E               	movlw	14
  5400  001196  EC58  F01F         	call	_vscp_getGUID
  5401  00119A  0100               	movlb	0	; () banked
  5402  00119C  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5403  00119E  E119               	bnz	l9419
  5404                           
  5405                           ; BSR set to: 0
  5406  0011A0  0E0F               	movlw	15
  5407  0011A2  EC58  F01F         	call	_vscp_getGUID
  5408  0011A6  0100               	movlb	0	; () banked
  5409  0011A8  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5410  0011AA  E113               	bnz	l9419
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;vscp_firmware.c: 948: vscp_guid_reset |= 0x80;
  5414  0011AC  8F8D               	bsf	_vscp_guid_reset& (0+255),7,b
  5415  0011AE  D011               	goto	l9419
  5416  0011B0                     l1210:
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;vscp_firmware.c: 953: vscp_guid_reset = 0;
  5420  0011B0  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  5421                           
  5422                           ;vscp_firmware.c: 954: break;
  5423  0011B2  D00F               	goto	l9419
  5424  0011B4                     l9417:
  5425                           
  5426                           ; BSR set to: 0
  5427  0011B4  399C               	swapf	(_vscp_imsg+6)& (0+255),w,b
  5428  0011B6  0B0F               	andlw	15
  5429  0011B8  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5430  0011BA  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5431                           
  5432                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5433                           ; Switch size 1, requested type "speed"
  5434                           ; Number of cases is 1, Range of values is 0 to 0
  5435                           ; switch strategies available:
  5436                           ; Name         Instructions Cycles
  5437                           ; simple_byte            4     3 (average)
  5438                           ;	Chosen strategy is simple_byte
  5439  0011BC  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5440  0011BE  E1F8               	bnz	l1210
  5441                           
  5442                           ; BSR set to: 0
  5443                           ; Switch size 1, requested type "speed"
  5444                           ; Number of cases is 4, Range of values is 0 to 3
  5445                           ; switch strategies available:
  5446                           ; Name         Instructions Cycles
  5447                           ; simple_byte           13     7 (average)
  5448                           ;	Chosen strategy is simple_byte
  5449  0011C0  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5450  0011C2  E08E               	bz	l9375
  5451  0011C4  0A01               	xorlw	1	; case 1
  5452  0011C6  E0A6               	bz	l9385
  5453  0011C8  0A03               	xorlw	3	; case 2
  5454  0011CA  E0BE               	bz	l9395
  5455  0011CC  0A01               	xorlw	1	; case 3
  5456  0011CE  E0D6               	bz	l9405
  5457  0011D0  D7EF               	goto	l1210
  5458  0011D2                     l9419:
  5459                           
  5460                           ; BSR set to: 0
  5461                           ;vscp_firmware.c: 957: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  5462  0011D2  518D               	movf	_vscp_guid_reset& (0+255),w,b
  5463  0011D4  0BF0               	andlw	240
  5464  0011D6  0AF0               	xorlw	240
  5465  0011D8  E001 D214          	bnz	l1269
  5466                           
  5467                           ; BSR set to: 0
  5468                           ;vscp_firmware.c: 959: vscp_init();
  5469  0011DC  EC58  F01D         	call	_vscp_init	;wreg free
  5470  0011E0  D211               	goto	l1269
  5471  0011E2                     l9423:
  5472                           
  5473                           ; BSR set to: 0
  5474                           ;vscp_firmware.c: 965: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5475  0011E2  5191               	movf	_vscp_nickname& (0+255),w,b
  5476  0011E4  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5477  0011E8  62DF               	cpfseq	indf2,c
  5478  0011EA  D20C               	goto	l1269
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;vscp_firmware.c: 967: uint8_t i;
  5482                           ;vscp_firmware.c: 968: uint8_t pos = 0;
  5483  0011EC  6BDD               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  5484                           
  5485                           ;vscp_firmware.c: 969: uint8_t offset = vscp_imsg.data[ 1 ];
  5486  0011EE  C09D  F0DC         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  5487                           
  5488                           ;vscp_firmware.c: 970: uint8_t len = vscp_imsg.data[ 2 ];
  5489  0011F2  C09E  F0DF         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  5490                           
  5491                           ;vscp_firmware.c: 972: for (i = 0; i < len; i++) {
  5492  0011F6  6BEA               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  5493  0011F8  D047               	goto	l9455
  5494  0011FA                     l9427:
  5495                           
  5496                           ; BSR set to: 0
  5497                           ;vscp_firmware.c: 973: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  5498  0011FA  0E07               	movlw	7
  5499  0011FC  6E08               	movwf	?___lbmod,c
  5500  0011FE  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5501  001200  EC30  F01E         	call	___lbmod
  5502  001204  0100               	movlb	0	; () banked
  5503  001206  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5504  001208  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5505  00120A  0FAA               	addlw	low (_vscp_omsg+6)
  5506  00120C  6ED9               	movwf	fsr2l,c
  5507  00120E  6ADA               	clrf	fsr2h,c
  5508  001210  51DC               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  5509  001212  25EA               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5510  001214  EC13  F01F         	call	_vscp_readRegister
  5511  001218  6EDF               	movwf	indf2,c
  5512                           
  5513                           ;vscp_firmware.c: 975: if ((i % 7) == 6 || i == (len - 1)) {
  5514  00121A  0E07               	movlw	7
  5515  00121C  6E08               	movwf	?___lbmod,c
  5516  00121E  0100               	movlb	0	; () banked
  5517  001220  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5518  001222  EC30  F01E         	call	___lbmod
  5519  001226  0A06               	xorlw	6
  5520  001228  E00B               	bz	l9433
  5521  00122A  0EFF               	movlw	255
  5522  00122C  0100               	movlb	0	; () banked
  5523  00122E  25DF               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  5524  001230  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5525  001232  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5526  001234  0EFF               	movlw	255
  5527  001236  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  5528  001238  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5529  00123A  19D1               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5530  00123C  11D2               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5531  00123E  E123               	bnz	l9453
  5532  001240                     l9433:
  5533                           
  5534                           ;vscp_firmware.c: 976: uint8_t bytes;
  5535                           ;vscp_firmware.c: 978: if ((i % 7) == 6) bytes = 7;
  5536  001240  0E07               	movlw	7
  5537  001242  6E08               	movwf	?___lbmod,c
  5538  001244  0100               	movlb	0	; () banked
  5539  001246  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5540  001248  EC30  F01E         	call	___lbmod
  5541  00124C  0A06               	xorlw	6
  5542  00124E  E103               	bnz	l9437
  5543  001250  0E07               	movlw	7
  5544  001252  0100               	movlb	0	; () banked
  5545  001254  D009               	goto	L15
  5546  001256                     l9437:
  5547                           
  5548                           ;vscp_firmware.c: 979: else bytes = (i % 7) + 1;
  5549  001256  0E07               	movlw	7
  5550  001258  6E08               	movwf	?___lbmod,c
  5551  00125A  0100               	movlb	0	; () banked
  5552  00125C  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5553  00125E  EC30  F01E         	call	___lbmod
  5554  001262  0100               	movlb	0	; () banked
  5555  001264  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5556  001266  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5557  001268                     L15:
  5558  001268  6FDE               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;vscp_firmware.c: 981: vscp_omsg.flags = 0x80 + bytes + 1;
  5562  00126A  51DE               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  5563  00126C  0F81               	addlw	129
  5564  00126E  6FA4               	movwf	_vscp_omsg& (0+255),b
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;vscp_firmware.c: 982: vscp_omsg.priority = 0x03;
  5568  001270  0E03               	movlw	3
  5569  001272  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5570                           
  5571                           ; BSR set to: 0
  5572                           ;vscp_firmware.c: 983: vscp_omsg.vscp_class = 0;
  5573  001274  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5574  001276  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;vscp_firmware.c: 984: vscp_omsg.vscp_type = 26;
  5578  001278  0E1A               	movlw	26
  5579  00127A  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;vscp_firmware.c: 985: vscp_omsg.data[ 0 ] = pos;
  5583  00127C  C0DD  F0A9         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  5584                           
  5585                           ; BSR set to: 0
  5586                           ;vscp_firmware.c: 988: vscp_sendEvent();
  5587  001280  EC57  F01E         	call	_vscp_sendEvent	;wreg free
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;vscp_firmware.c: 989: pos++;
  5591  001284  2BDD               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  5592  001286                     l9453:
  5593                           
  5594                           ; BSR set to: 0
  5595  001286  2BEA               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  5596  001288                     l9455:
  5597                           
  5598                           ; BSR set to: 0
  5599  001288  51DF               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  5600  00128A  5DEA               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5601  00128C  E301 D1BA          	bc	l1269
  5602  001290  D7B4               	goto	l9427
  5603  001292                     l9457:
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;vscp_firmware.c: 997: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5607  001292  5191               	movf	_vscp_nickname& (0+255),w,b
  5608  001294  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5609  001298  62DF               	cpfseq	indf2,c
  5610  00129A  D1B4               	goto	l1269
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;vscp_firmware.c: 998: uint8_t i;
  5614                           ;vscp_firmware.c: 999: uint8_t pos = vscp_imsg.data[ 1 ];
  5615  00129C  C09D  F0E0         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1277
  5616                           
  5617                           ; BSR set to: 0
  5618                           ;vscp_firmware.c: 1000: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  5619  0012A0  5196               	movf	_vscp_imsg& (0+255),w,b
  5620  0012A2  0FFE               	addlw	254
  5621  0012A4  0B07               	andlw	7
  5622  0012A6  6FE1               	movwf	vscp_handleProtocolEvent@len_1278& (0+255),b
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;vscp_firmware.c: 1002: for (i = 0; i < len; i++) {
  5626  0012A8  6BE7               	clrf	vscp_handleProtocolEvent@i_1276& (0+255),b
  5627  0012AA  D016               	goto	l9471
  5628  0012AC                     l9465:
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;vscp_firmware.c: 1004: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  5632  0012AC  51E7               	movf	vscp_handleProtocolEvent@i_1276& (0+255),w,b
  5633  0012AE  0F9E               	addlw	low (_vscp_imsg+8)
  5634  0012B0  6ED9               	movwf	fsr2l,c
  5635  0012B2  6ADA               	clrf	fsr2h,c
  5636  0012B4  50DF               	movf	indf2,w,c
  5637  0012B6  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  5638  0012B8  51E0               	movf	vscp_handleProtocolEvent@pos_1277& (0+255),w,b
  5639  0012BA  25E7               	addwf	vscp_handleProtocolEvent@i_1276& (0+255),w,b
  5640  0012BC  ECB2  F01E         	call	_vscp_writeRegister
  5641                           
  5642                           ;vscp_firmware.c: 1005: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  5643  0012C0  0100               	movlb	0	; () banked
  5644  0012C2  51E7               	movf	vscp_handleProtocolEvent@i_1276& (0+255),w,b
  5645  0012C4  0FAA               	addlw	low (_vscp_omsg+6)
  5646  0012C6  6ED9               	movwf	fsr2l,c
  5647  0012C8  6ADA               	clrf	fsr2h,c
  5648  0012CA  51E0               	movf	vscp_handleProtocolEvent@pos_1277& (0+255),w,b
  5649  0012CC  25E7               	addwf	vscp_handleProtocolEvent@i_1276& (0+255),w,b
  5650  0012CE  EC13  F01F         	call	_vscp_readRegister
  5651  0012D2  6EDF               	movwf	indf2,c
  5652  0012D4  0100               	movlb	0	; () banked
  5653  0012D6  2BE7               	incf	vscp_handleProtocolEvent@i_1276& (0+255),f,b
  5654  0012D8                     l9471:
  5655                           
  5656                           ; BSR set to: 0
  5657  0012D8  51E1               	movf	vscp_handleProtocolEvent@len_1278& (0+255),w,b
  5658  0012DA  5DE7               	subwf	vscp_handleProtocolEvent@i_1276& (0+255),w,b
  5659  0012DC  E3E7               	bnc	l9465
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;vscp_firmware.c: 1006: }
  5663                           ;vscp_firmware.c: 1008: vscp_omsg.priority = 0x03;
  5664  0012DE  0E03               	movlw	3
  5665  0012E0  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;vscp_firmware.c: 1009: vscp_omsg.vscp_class = 0;
  5669  0012E2  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5670  0012E4  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5671                           
  5672                           ;vscp_firmware.c: 1010: vscp_omsg.vscp_type = 26;
  5673  0012E6  0E1A               	movlw	26
  5674  0012E8  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;vscp_firmware.c: 1011: vscp_omsg.data[ 0 ] = 0;
  5678  0012EA  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  5679                           
  5680                           ; BSR set to: 0
  5681                           ;vscp_firmware.c: 1012: vscp_omsg.flags = 0x80 + len + 1;
  5682  0012EC  51E1               	movf	vscp_handleProtocolEvent@len_1278& (0+255),w,b
  5683  0012EE  0F81               	addlw	129
  5684  0012F0  6FA4               	movwf	_vscp_omsg& (0+255),b
  5685  0012F2  D69B               	goto	l9301
  5686  0012F4                     l9483:
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;vscp_firmware.c: 1022: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5690  0012F4  5191               	movf	_vscp_nickname& (0+255),w,b
  5691  0012F6  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5692  0012FA  62DF               	cpfseq	indf2,c
  5693  0012FC  D183               	goto	l1269
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;vscp_firmware.c: 1024: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5697                           ;vscp_firmware.c: 1025: vscp_imsg.data[ 1 ],
  5698                           ;vscp_firmware.c: 1026: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  5699  0012FE  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5700  001300  ECA8  F01B         	call	_vscp_readAppReg
  5701  001304  0100               	movlb	0	; () banked
  5702  001306  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5703  001308  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5704  00130A  6E51               	movwf	?_vscp_writeAppReg,c
  5705  00130C  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5706  00130E  EC11  F003         	call	_vscp_writeAppReg
  5707  001312  D680               	goto	L14
  5708  001314                     l9499:
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;vscp_firmware.c: 1042: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5712  001314  5191               	movf	_vscp_nickname& (0+255),w,b
  5713  001316  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5714  00131A  62DF               	cpfseq	indf2,c
  5715  00131C  D173               	goto	l1269
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;vscp_firmware.c: 1044: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5719                           ;vscp_firmware.c: 1045: vscp_imsg.data[ 1 ],
  5720                           ;vscp_firmware.c: 1046: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  5721  00131E  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5722  001320  ECA8  F01B         	call	_vscp_readAppReg
  5723  001324  0100               	movlb	0	; () banked
  5724  001326  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5725  001328  05D1               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  5726  00132A  6E51               	movwf	?_vscp_writeAppReg,c
  5727  00132C  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5728  00132E  EC11  F003         	call	_vscp_writeAppReg
  5729  001332  D670               	goto	L14
  5730  001334                     l9515:
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;vscp_firmware.c: 1062: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  5734                           ;vscp_firmware.c: 1063: (0xff == vscp_imsg.data[ 0 ])) {
  5735  001334  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
  5736  001336  1991               	xorwf	_vscp_nickname& (0+255),w,b
  5737  001338  E003               	bz	l1234
  5738                           
  5739                           ; BSR set to: 0
  5740  00133A  299C               	incf	(_vscp_imsg+6)& (0+255),w,b
  5741  00133C  E001 D162          	bnz	l1269
  5742  001340                     l1234:
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;vscp_firmware.c: 1065: uint8_t i, j, k = 0;
  5746  001340  6BE5               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  5747                           
  5748                           ; BSR set to: 0
  5749                           ;vscp_firmware.c: 1069: vscp_omsg.priority = 0x03;
  5750  001342  0E03               	movlw	3
  5751  001344  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5752                           
  5753                           ;vscp_firmware.c: 1070: vscp_omsg.flags = 0x80 + 8;
  5754  001346  0E88               	movlw	136
  5755  001348  6FA4               	movwf	_vscp_omsg& (0+255),b
  5756                           
  5757                           ; BSR set to: 0
  5758                           ;vscp_firmware.c: 1071: vscp_omsg.vscp_class = 0;
  5759  00134A  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5760  00134C  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5761                           
  5762                           ;vscp_firmware.c: 1072: vscp_omsg.vscp_type = 32;
  5763  00134E  0E20               	movlw	32
  5764  001350  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;vscp_firmware.c: 1074: for (i = 0; i < 3; i++)
  5768  001352  6BE9               	clrf	vscp_handleProtocolEvent@i_1279& (0+255),b
  5769  001354                     l1235:
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;vscp_firmware.c: 1075: {
  5773                           ;vscp_firmware.c: 1076: vscp_omsg.data[0] = i;
  5774  001354  C0E9  F0A9         	movff	vscp_handleProtocolEvent@i_1279,_vscp_omsg+5
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;vscp_firmware.c: 1078: for (j = 1; j < 8; j++) {
  5778  001358  0E01               	movlw	1
  5779  00135A  6FEB               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  5780  00135C                     l9535:
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;vscp_firmware.c: 1079: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  5784  00135C  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5785  00135E  0FA9               	addlw	low (_vscp_omsg+5)
  5786  001360  6ED9               	movwf	fsr2l,c
  5787  001362  6ADA               	clrf	fsr2h,c
  5788  001364  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5789  001366  080F               	sublw	15
  5790  001368  EC58  F01F         	call	_vscp_getGUID
  5791  00136C  6EDF               	movwf	indf2,c
  5792  00136E  0100               	movlb	0	; () banked
  5793  001370  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5794                           
  5795                           ; BSR set to: 0
  5796                           ;vscp_firmware.c: 1080: if (k > 16)
  5797  001372  0E10               	movlw	16
  5798  001374  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5799  001376  D001               	goto	l9543
  5800  001378  D004               	goto	l9547
  5801  00137A                     l9543:
  5802                           
  5803                           ; BSR set to: 0
  5804  00137A  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5805                           
  5806                           ; BSR set to: 0
  5807  00137C  0E07               	movlw	7
  5808  00137E  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5809  001380  D7ED               	goto	l9535
  5810  001382                     l9547:
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;vscp_firmware.c: 1082: }
  5814                           ;vscp_firmware.c: 1084: if (k > 16)
  5815  001382  0E10               	movlw	16
  5816  001384  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5817  001386  D001               	goto	l9551
  5818  001388  D006               	goto	l1236
  5819  00138A                     l9551:
  5820                           
  5821                           ; BSR set to: 0
  5822                           ;vscp_firmware.c: 1087: vscp_sendEvent();
  5823  00138A  EC57  F01E         	call	_vscp_sendEvent	;wreg free
  5824                           
  5825                           ; BSR set to: 0
  5826  00138E  2BE9               	incf	vscp_handleProtocolEvent@i_1279& (0+255),f,b
  5827                           
  5828                           ; BSR set to: 0
  5829  001390  0E02               	movlw	2
  5830  001392  65E9               	cpfsgt	vscp_handleProtocolEvent@i_1279& (0+255),b
  5831  001394  D7DF               	goto	l1235
  5832  001396                     l1236:
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;vscp_firmware.c: 1088: }
  5836                           ;vscp_firmware.c: 1090: for (j = 0; j < 5; j++)
  5837  001396  6BEB               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  5838  001398                     l9561:
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;vscp_firmware.c: 1091: {
  5842                           ;vscp_firmware.c: 1092: if (vscp_getMDF_URL(j) > 0)
  5843  001398  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5844  00139A  EC2C  F01F         	call	_vscp_getMDF_URL
  5845  00139E  0900               	iorlw	0
  5846  0013A0  E008               	bz	l9565
  5847                           
  5848                           ; BSR set to: 0
  5849                           ;vscp_firmware.c: 1093: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  5850  0013A2  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5851  0013A4  0FAC               	addlw	low (_vscp_omsg+8)
  5852  0013A6  6ED9               	movwf	fsr2l,c
  5853  0013A8  6ADA               	clrf	fsr2h,c
  5854  0013AA  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5855  0013AC  EC2C  F01F         	call	_vscp_getMDF_URL
  5856  0013B0  D005               	goto	L16
  5857  0013B2                     l9565:
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;vscp_firmware.c: 1094: else
  5861                           ;vscp_firmware.c: 1095: vscp_omsg.data[3 + j] = 0;
  5862  0013B2  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5863  0013B4  0FAC               	addlw	low (_vscp_omsg+8)
  5864  0013B6  6ED9               	movwf	fsr2l,c
  5865  0013B8  6ADA               	clrf	fsr2h,c
  5866  0013BA  0E00               	movlw	0
  5867  0013BC                     L16:
  5868  0013BC  6EDF               	movwf	indf2,c
  5869                           
  5870                           ; BSR set to: 0
  5871  0013BE  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5872                           
  5873                           ; BSR set to: 0
  5874  0013C0  0E04               	movlw	4
  5875  0013C2  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5876  0013C4  D7E9               	goto	l9561
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;vscp_firmware.c: 1096: }
  5880                           ;vscp_firmware.c: 1098: vscp_sendEvent();
  5881  0013C6  EC57  F01E         	call	_vscp_sendEvent	;wreg free
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;vscp_firmware.c: 1100: k = 5;
  5885  0013CA  0E05               	movlw	5
  5886  0013CC  6FE5               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;vscp_firmware.c: 1101: for (i = 3; i < 7; i++)
  5890  0013CE  0E03               	movlw	3
  5891  0013D0  6FE9               	movwf	vscp_handleProtocolEvent@i_1279& (0+255),b
  5892  0013D2                     l1245:
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;vscp_firmware.c: 1102: {
  5896                           ;vscp_firmware.c: 1103: vscp_omsg.data[0] = i;
  5897  0013D2  C0E9  F0A9         	movff	vscp_handleProtocolEvent@i_1279,_vscp_omsg+5
  5898                           
  5899                           ; BSR set to: 0
  5900                           ;vscp_firmware.c: 1105: for (j = 1; j < 8; j++) {
  5901  0013D6  0E01               	movlw	1
  5902  0013D8  6FEB               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  5903  0013DA                     l9587:
  5904                           
  5905                           ; BSR set to: 0
  5906                           ;vscp_firmware.c: 1106: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  5907  0013DA  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5908  0013DC  0FA9               	addlw	low (_vscp_omsg+5)
  5909  0013DE  6ED9               	movwf	fsr2l,c
  5910  0013E0  6ADA               	clrf	fsr2h,c
  5911  0013E2  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5912  0013E4  EC2C  F01F         	call	_vscp_getMDF_URL
  5913  0013E8  6EDF               	movwf	indf2,c
  5914                           
  5915                           ; BSR set to: 0
  5916  0013EA  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5917                           
  5918                           ; BSR set to: 0
  5919  0013EC  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5920                           
  5921                           ; BSR set to: 0
  5922  0013EE  0E07               	movlw	7
  5923  0013F0  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5924  0013F2  D7F3               	goto	l9587
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;vscp_firmware.c: 1107: }
  5928                           ;vscp_firmware.c: 1108: vscp_sendEvent();
  5929  0013F4  EC57  F01E         	call	_vscp_sendEvent	;wreg free
  5930                           
  5931                           ; BSR set to: 0
  5932  0013F8  2BE9               	incf	vscp_handleProtocolEvent@i_1279& (0+255),f,b
  5933                           
  5934                           ; BSR set to: 0
  5935  0013FA  0E06               	movlw	6
  5936  0013FC  65E9               	cpfsgt	vscp_handleProtocolEvent@i_1279& (0+255),b
  5937  0013FE  D7E9               	goto	l1245
  5938  001400  D101               	goto	l1269
  5939  001402                     l9601:
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;vscp_firmware.c: 1117: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5943  001402  5191               	movf	_vscp_nickname& (0+255),w,b
  5944  001404  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5945  001408  62DF               	cpfseq	indf2,c
  5946  00140A  D0FC               	goto	l1269
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;vscp_firmware.c: 1119: vscp_omsg.priority = 0x03;
  5950  00140C  0E03               	movlw	3
  5951  00140E  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5952                           
  5953                           ;vscp_firmware.c: 1120: vscp_omsg.flags = 0x80 + 7;
  5954  001410  0E87               	movlw	135
  5955  001412  6FA4               	movwf	_vscp_omsg& (0+255),b
  5956                           
  5957                           ; BSR set to: 0
  5958                           ;vscp_firmware.c: 1121: vscp_omsg.vscp_class = 0;
  5959  001414  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5960  001416  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5961                           
  5962                           ;vscp_firmware.c: 1122: vscp_omsg.vscp_type = 34;
  5963  001418  0E22               	movlw	34
  5964  00141A  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;vscp_firmware.c: 1124: vscp_getMatrixInfo((char *) vscp_omsg.data);
  5968  00141C  0EA9               	movlw	(_vscp_omsg+5)& (0+255)
  5969  00141E  ECE5  F01E         	call	_vscp_getMatrixInfo
  5970  001422  D603               	goto	l9301
  5971  001424                     l9611:
  5972                           
  5973                           ; BSR set to: 0
  5974                           ;vscp_firmware.c: 1140: if ( vscp_nickname == vscp_imsg.data[0] ) {
  5975  001424  5191               	movf	_vscp_nickname& (0+255),w,b
  5976  001426  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5977  00142A  62DF               	cpfseq	indf2,c
  5978  00142C  D0EB               	goto	l1269
  5979                           
  5980                           ; BSR set to: 0
  5981                           ;vscp_firmware.c: 1142: uint16_t page_save;
  5982                           ;vscp_firmware.c: 1143: uint8_t byte = 0, bytes = 0;
  5983  00142E  6BE8               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;vscp_firmware.c: 1144: uint8_t bytes_this_time, cb;
  5987                           ;vscp_firmware.c: 1148: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  5988  001430  C096  F0D1         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  5989  001434  0E0F               	movlw	15
  5990  001436  17D1               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  5991  001438  0E04               	movlw	4
  5992  00143A  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5993  00143C  E304               	bnc	l9619
  5994                           
  5995                           ; BSR set to: 0
  5996                           ;vscp_firmware.c: 1151: bytes = vscp_imsg.data[4];
  5997  00143E  C0A0  F0E6         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1284
  5998                           
  5999                           ;vscp_firmware.c: 1153: if ( 0 == bytes ) {
  6000  001442  67E6               	tstfsz	vscp_handleProtocolEvent@bytes_1284& (0+255),b
  6001  001444  D002               	goto	l9623
  6002  001446                     l9619:
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;vscp_firmware.c: 1154: bytes = 1;
  6006  001446  0E01               	movlw	1
  6007  001448  6FE6               	movwf	vscp_handleProtocolEvent@bytes_1284& (0+255),b
  6008  00144A                     l9623:
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;vscp_firmware.c: 1159: }
  6012                           ;vscp_firmware.c: 1162: page_save = vscp_page_select;
  6013  00144A  C052  F0D8         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  6014  00144E  C053  F0D9         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;vscp_firmware.c: 1167: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  6018  001452  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  6019  001454  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6020  001458  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6021  00145A  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6022  00145E  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6023  001460  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6024  001462  6E52               	movwf	_vscp_page_select,c
  6025  001464  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6026  001466  6E53               	movwf	_vscp_page_select+1,c
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;vscp_firmware.c: 1170: vscp_omsg.priority = 0x03;
  6030  001468  0E03               	movlw	3
  6031  00146A  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6032                           
  6033                           ; BSR set to: 0
  6034                           ;vscp_firmware.c: 1171: vscp_omsg.vscp_class = 0;
  6035  00146C  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6036  00146E  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6037                           
  6038                           ; BSR set to: 0
  6039                           ;vscp_firmware.c: 1172: vscp_omsg.vscp_type = 39;
  6040  001470  0E27               	movlw	39
  6041  001472  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;vscp_firmware.c: 1173: vscp_omsg.data[0] = 0;
  6045  001474  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;vscp_firmware.c: 1174: vscp_omsg.data[1] = vscp_imsg.data[1];
  6049  001476  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;vscp_firmware.c: 1175: vscp_omsg.data[2] = vscp_imsg.data[2];
  6053  00147A  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6054  00147E                     l9639:
  6055                           
  6056                           ; BSR set to: 0
  6057                           ;vscp_firmware.c: 1179: if ( ( bytes - byte ) >= 4 ) {
  6058  00147E  51E8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6059  001480  C0E6  F0D1         	movff	vscp_handleProtocolEvent@bytes_1284,??_vscp_handleProtocolEvent
  6060  001484  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6061  001486  5FD1               	subwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6062  001488  0E00               	movlw	0
  6063  00148A  5BD2               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6064  00148C  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6065  00148E  0A80               	xorlw	128
  6066  001490  0F80               	addlw	-128
  6067  001492  0E04               	movlw	4
  6068  001494  B4D8               	btfsc	status,2,c
  6069  001496  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6070  001498  E302               	bnc	l9643
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;vscp_firmware.c: 1180: bytes_this_time = 4;
  6074  00149A  0E04               	movlw	4
  6075  00149C  D002               	goto	L18
  6076  00149E                     l9643:
  6077                           
  6078                           ; BSR set to: 0
  6079                           ;vscp_firmware.c: 1182: else {
  6080                           ;vscp_firmware.c: 1183: bytes_this_time = (bytes - byte);
  6081  00149E  51E8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6082  0014A0  5DE6               	subwf	vscp_handleProtocolEvent@bytes_1284& (0+255),w,b
  6083  0014A2                     L18:
  6084  0014A2  6FE2               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;vscp_firmware.c: 1184: }
  6088                           ;vscp_firmware.c: 1187: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  6089  0014A4  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6090  0014A6  0F84               	addlw	132
  6091  0014A8  6FA4               	movwf	_vscp_omsg& (0+255),b
  6092                           
  6093                           ;vscp_firmware.c: 1188: vscp_omsg.data[3] =
  6094                           ;vscp_firmware.c: 1189: vscp_imsg.data[3] + byte;
  6095  0014AA  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6096  0014AC  25E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6097  0014AE  6FAC               	movwf	(_vscp_omsg+8)& (0+255),b
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;vscp_firmware.c: 1192: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  6101  0014B0  6BE3               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  6102  0014B2  D00C               	goto	l9651
  6103  0014B4                     l9647:
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;vscp_firmware.c: 1193: vscp_omsg.data[ (4 + cb) ] =
  6107                           ;vscp_firmware.c: 1194: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  6108  0014B4  51E3               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6109  0014B6  0FAD               	addlw	low (_vscp_omsg+9)
  6110  0014B8  6ED9               	movwf	fsr2l,c
  6111  0014BA  6ADA               	clrf	fsr2h,c
  6112  0014BC  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6113  0014BE  25E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6114  0014C0  25E3               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6115  0014C2  EC13  F01F         	call	_vscp_readRegister
  6116  0014C6  6EDF               	movwf	indf2,c
  6117  0014C8  0100               	movlb	0	; () banked
  6118  0014CA  2BE3               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  6119  0014CC                     l9651:
  6120                           
  6121                           ; BSR set to: 0
  6122  0014CC  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6123  0014CE  5DE3               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6124  0014D0  E3F1               	bnc	l9647
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;vscp_firmware.c: 1195: }
  6128                           ;vscp_firmware.c: 1198: vscp_sendEvent();
  6129  0014D2  EC57  F01E         	call	_vscp_sendEvent	;wreg free
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;vscp_firmware.c: 1201: byte += bytes_this_time;
  6133  0014D6  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6134  0014D8  27E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  6135                           
  6136                           ; BSR set to: 0
  6137                           ;vscp_firmware.c: 1204: vscp_omsg.data[0] += 1;
  6138  0014DA  2BA9               	incf	(_vscp_omsg+5)& (0+255),f,b
  6139                           
  6140                           ; BSR set to: 0
  6141                           ;vscp_firmware.c: 1206: } while (byte < bytes);
  6142  0014DC  51E6               	movf	vscp_handleProtocolEvent@bytes_1284& (0+255),w,b
  6143  0014DE  5DE8               	subwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6144  0014E0  E3CE               	bnc	l9639
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;vscp_firmware.c: 1209: vscp_page_select = page_save;
  6148  0014E2  C0D8  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  6149  0014E6  C0D9  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  6150  0014EA  D08C               	goto	l1269
  6151  0014EC                     l9661:
  6152                           
  6153                           ; BSR set to: 0
  6154                           ;vscp_firmware.c: 1216: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  6155  0014EC  5191               	movf	_vscp_nickname& (0+255),w,b
  6156  0014EE  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6157  0014F2  62DF               	cpfseq	indf2,c
  6158  0014F4  D087               	goto	l1269
  6159                           
  6160                           ; BSR set to: 0
  6161                           ;vscp_firmware.c: 1218: uint8_t i;
  6162                           ;vscp_firmware.c: 1219: uint16_t page_save;
  6163                           ;vscp_firmware.c: 1222: page_save = vscp_page_select;
  6164  0014F6  C052  F0DA         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1288
  6165  0014FA  C053  F0DB         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1288+1
  6166                           
  6167                           ; BSR set to: 0
  6168                           ;vscp_firmware.c: 1226: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  6169  0014FE  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  6170  001500  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6171  001504  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6172  001506  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6173  00150A  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6174  00150C  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6175  00150E  6E52               	movwf	_vscp_page_select,c
  6176  001510  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6177  001512  6E53               	movwf	_vscp_page_select+1,c
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;vscp_firmware.c: 1228: for (i = vscp_imsg.data[ 3 ];
  6181  001514  C09F  F0E4         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1287
  6182                           
  6183                           ;vscp_firmware.c: 1231: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  6184                           ;vscp_firmware.c: 1232: i++) {
  6185  001518  D014               	goto	l9673
  6186  00151A                     l9669:
  6187                           
  6188                           ; BSR set to: 0
  6189                           ;vscp_firmware.c: 1233: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  6190                           ;vscp_firmware.c: 1234: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  6191  00151A  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6192  00151C  08A0               	sublw	low (_vscp_imsg+10)
  6193  00151E  25E4               	addwf	vscp_handleProtocolEvent@i_1287& (0+255),w,b
  6194  001520  6ED9               	movwf	fsr2l,c
  6195  001522  6ADA               	clrf	fsr2h,c
  6196  001524  50DF               	movf	indf2,w,c
  6197  001526  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  6198  001528  51E4               	movf	vscp_handleProtocolEvent@i_1287& (0+255),w,b
  6199  00152A  ECB2  F01E         	call	_vscp_writeRegister
  6200  00152E  0100               	movlb	0	; () banked
  6201  001530  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6202  001532  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6203  001534  08AD               	sublw	low (_vscp_omsg+9)
  6204  001536  25E4               	addwf	vscp_handleProtocolEvent@i_1287& (0+255),w,b
  6205  001538  6ED9               	movwf	fsr2l,c
  6206  00153A  6ADA               	clrf	fsr2h,c
  6207  00153C  C0D1  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  6208                           
  6209                           ; BSR set to: 0
  6210  001540  2BE4               	incf	vscp_handleProtocolEvent@i_1287& (0+255),f,b
  6211  001542                     l9673:
  6212                           
  6213                           ; BSR set to: 0
  6214  001542  5196               	movf	_vscp_imsg& (0+255),w,b
  6215  001544  0B0F               	andlw	15
  6216  001546  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6217  001548  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6218  00154A  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6219  00154C  27D1               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6220  00154E  0E00               	movlw	0
  6221  001550  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6222  001552  0EFC               	movlw	252
  6223  001554  25D1               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6224  001556  6FD3               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  6225  001558  0EFF               	movlw	255
  6226  00155A  21D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6227  00155C  6FD4               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  6228  00155E  51E4               	movf	vscp_handleProtocolEvent@i_1287& (0+255),w,b
  6229  001560  6FD5               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  6230  001562  6BD6               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  6231  001564  51D6               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  6232  001566  0A80               	xorlw	128
  6233  001568  6FD7               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  6234  00156A  51D3               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  6235  00156C  5DD5               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  6236  00156E  51D4               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  6237  001570  0A80               	xorlw	128
  6238  001572  59D7               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  6239  001574  E3D2               	bnc	l9669
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;vscp_firmware.c: 1235: }
  6243                           ;vscp_firmware.c: 1238: vscp_page_select = page_save;
  6244  001576  C0DA  F052         	movff	vscp_handleProtocolEvent@page_save_1288,_vscp_page_select
  6245  00157A  C0DB  F053         	movff	vscp_handleProtocolEvent@page_save_1288+1,_vscp_page_select+1
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;vscp_firmware.c: 1240: vscp_omsg.priority = 0x03;
  6249  00157E  0E03               	movlw	3
  6250  001580  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;vscp_firmware.c: 1241: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  6254  001582  5196               	movf	_vscp_imsg& (0+255),w,b
  6255  001584  0B0F               	andlw	15
  6256  001586  0F80               	addlw	128
  6257  001588  6FA4               	movwf	_vscp_omsg& (0+255),b
  6258                           
  6259                           ; BSR set to: 0
  6260                           ;vscp_firmware.c: 1242: vscp_omsg.vscp_class = 0;
  6261  00158A  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6262  00158C  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;vscp_firmware.c: 1243: vscp_omsg.vscp_type = 39;
  6266  00158E  0E27               	movlw	39
  6267  001590  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;vscp_firmware.c: 1244: vscp_omsg.data[0] = 0;
  6271  001592  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;vscp_firmware.c: 1245: vscp_omsg.data[1] = vscp_imsg.data[1];
  6275  001594  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;vscp_firmware.c: 1246: vscp_omsg.data[2] = vscp_imsg.data[2];
  6279  001598  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;vscp_firmware.c: 1247: vscp_omsg.data[3] = vscp_imsg.data[3];
  6283  00159C  C09F  F0AC         	movff	_vscp_imsg+9,_vscp_omsg+8
  6284  0015A0  D544               	goto	l9301
  6285  0015A2                     l9695:
  6286                           
  6287                           ; BSR set to: 0
  6288  0015A2  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  6289                           
  6290                           ; Switch size 1, requested type "speed"
  6291                           ; Number of cases is 16, Range of values is 1 to 38
  6292                           ; switch strategies available:
  6293                           ; Name         Instructions Cycles
  6294                           ; simple_byte           49    25 (average)
  6295                           ;	Chosen strategy is simple_byte
  6296  0015A4  0A01               	xorlw	1	; case 1
  6297  0015A6  E101 D518          	bz	l9275
  6298  0015AA  0A03               	xorlw	3	; case 2
  6299  0015AC  E101 D518          	bz	l9277
  6300  0015B0  0A04               	xorlw	4	; case 6
  6301  0015B2  E101 D518          	bz	l9279
  6302  0015B6  0A0E               	xorlw	14	; case 8
  6303  0015B8  E101 D518          	bz	l9281
  6304  0015BC  0A01               	xorlw	1	; case 9
  6305  0015BE  E101 D518          	bz	l9283
  6306  0015C2  0A02               	xorlw	2	; case 11
  6307  0015C4  E101 D538          	bz	l9317
  6308  0015C8  0A07               	xorlw	7	; case 12
  6309  0015CA  E101 D54E          	bz	l9351
  6310  0015CE  0A1B               	xorlw	27	; case 23
  6311  0015D0  E101 D5F0          	bz	l9417
  6312  0015D4  0A0F               	xorlw	15	; case 24
  6313  0015D6  E101 D604          	bz	l9423
  6314  0015DA  0A01               	xorlw	1	; case 25
  6315  0015DC  E101 D659          	bz	l9457
  6316  0015E0  0A04               	xorlw	4	; case 29
  6317  0015E2  E101 D687          	bz	l9483
  6318  0015E6  0A03               	xorlw	3	; case 30
  6319  0015E8  E101 D694          	bz	l9499
  6320  0015EC  0A01               	xorlw	1	; case 31
  6321  0015EE  E101 D6A1          	bz	l9515
  6322  0015F2  0A3E               	xorlw	62	; case 33
  6323  0015F4  E101 D705          	bz	l9601
  6324  0015F8  0A04               	xorlw	4	; case 37
  6325  0015FA  E101 D713          	bz	l9611
  6326  0015FE  0A03               	xorlw	3	; case 38
  6327  001600  E101 D774          	bz	l9661
  6328  001604                     l1269:
  6329  001604  0012               	return	
  6330  001606                     __end_of_vscp_handleProtocolEvent:
  6331                           	opt stack 0
  6332                           tblptru	equ	0xFF8
  6333                           prodh	equ	0xFF4
  6334                           prodl	equ	0xFF3
  6335                           postinc0	equ	0xFEE
  6336                           wreg	equ	0xFE8
  6337                           indf2	equ	0xFDF
  6338                           postinc2	equ	0xFDE
  6339                           postdec2	equ	0xFDD
  6340                           fsr2h	equ	0xFDA
  6341                           fsr2l	equ	0xFD9
  6342                           status	equ	0xFD8
  6343                           
  6344 ;; *************** function ___lbmod *****************
  6345 ;; Defined at:
  6346 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  6347 ;; Parameters:    Size  Location     Type
  6348 ;;  dividend        1    wreg     unsigned char 
  6349 ;;  divisor         1    7[COMRAM] unsigned char 
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;  dividend        1    8[COMRAM] unsigned char 
  6352 ;;  rem             1   10[COMRAM] unsigned char 
  6353 ;;  counter         1    9[COMRAM] unsigned char 
  6354 ;; Return value:  Size  Location     Type
  6355 ;;                  1    wreg      unsigned char 
  6356 ;; Registers used:
  6357 ;;		wreg, status,2, status,0
  6358 ;; Tracked objects:
  6359 ;;		On entry : F/0
  6360 ;;		On exit  : 0/0
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6363 ;;      Params:         1       0       0       0       0       0       0
  6364 ;;      Locals:         3       0       0       0       0       0       0
  6365 ;;      Temps:          0       0       0       0       0       0       0
  6366 ;;      Totals:         4       0       0       0       0       0       0
  6367 ;;Total ram usage:        4 bytes
  6368 ;; Hardware stack levels used:    1
  6369 ;; Hardware stack levels required when called:    2
  6370 ;; This function calls:
  6371 ;;		Nothing
  6372 ;; This function is called by:
  6373 ;;		_vscp_handleProtocolEvent
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           	psect	text16
  6378  003C60                     __ptext16:
  6379                           	opt stack 0
  6380  003C60                     ___lbmod:
  6381                           	opt stack 27
  6382                           
  6383                           ;incstack = 0
  6384                           ;incstack = 0
  6385                           ;___lbmod@dividend stored from wreg
  6386  003C60  CFE8 F009          	movff	wreg,___lbmod@dividend
  6387                           
  6388                           ; BSR set to: 0
  6389  003C64  0E08               	movlw	8
  6390  003C66  6E0A               	movwf	___lbmod@counter,c
  6391                           
  6392                           ; BSR set to: 0
  6393  003C68  6A0B               	clrf	___lbmod@rem,c
  6394  003C6A                     l7055:
  6395  003C6A  90D8               	bcf	status,0,c
  6396  003C6C  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  6397  003C6E  340B               	rlcf	___lbmod@rem& (0+255),w,c
  6398  003C70  6E0B               	movwf	___lbmod@rem,c
  6399  003C72  90D8               	bcf	status,0,c
  6400  003C74  3609               	rlcf	___lbmod@dividend,f,c
  6401  003C76  5008               	movf	___lbmod@divisor,w,c
  6402  003C78  5C0B               	subwf	___lbmod@rem,w,c
  6403  003C7A  E302               	bnc	l7063
  6404  003C7C  5008               	movf	___lbmod@divisor,w,c
  6405  003C7E  5E0B               	subwf	___lbmod@rem,f,c
  6406  003C80                     l7063:
  6407  003C80  2E0A               	decfsz	___lbmod@counter,f,c
  6408  003C82  D7F3               	goto	l7055
  6409  003C84  500B               	movf	___lbmod@rem,w,c
  6410  003C86  0012               	return	
  6411  003C88                     __end_of___lbmod:
  6412                           	opt stack 0
  6413                           tblptru	equ	0xFF8
  6414                           prodh	equ	0xFF4
  6415                           prodl	equ	0xFF3
  6416                           postinc0	equ	0xFEE
  6417                           wreg	equ	0xFE8
  6418                           indf2	equ	0xFDF
  6419                           postinc2	equ	0xFDE
  6420                           postdec2	equ	0xFDD
  6421                           fsr2h	equ	0xFDA
  6422                           fsr2l	equ	0xFD9
  6423                           status	equ	0xFD8
  6424                           
  6425 ;; *************** function _vscp_writeRegister *****************
  6426 ;; Defined at:
  6427 ;;		line 675 in file "../../vscp_firmware/common/vscp_firmware.c"
  6428 ;; Parameters:    Size  Location     Type
  6429 ;;  reg             1    wreg     unsigned char 
  6430 ;;  value           1   30[BANK0 ] unsigned char 
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;  reg             1   31[BANK0 ] unsigned char 
  6433 ;; Return value:  Size  Location     Type
  6434 ;;                  1    wreg      unsigned char 
  6435 ;; Registers used:
  6436 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6437 ;; Tracked objects:
  6438 ;;		On entry : F/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6442 ;;      Params:         0       1       0       0       0       0       0
  6443 ;;      Locals:         0       1       0       0       0       0       0
  6444 ;;      Temps:          0       0       0       0       0       0       0
  6445 ;;      Totals:         0       2       0       0       0       0       0
  6446 ;;Total ram usage:        2 bytes
  6447 ;; Hardware stack levels used:    1
  6448 ;; Hardware stack levels required when called:    8
  6449 ;; This function calls:
  6450 ;;		_vscp_writeAppReg
  6451 ;;		_vscp_writeStdReg
  6452 ;; This function is called by:
  6453 ;;		_vscp_handleProtocolEvent
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           	psect	text17
  6458  003D64                     __ptext17:
  6459                           	opt stack 0
  6460  003D64                     _vscp_writeRegister:
  6461                           	opt stack 21
  6462                           
  6463                           ;incstack = 0
  6464                           ;incstack = 0
  6465                           ;vscp_writeRegister@reg stored from wreg
  6466  003D64  CFE8 F0D0          	movff	wreg,vscp_writeRegister@reg
  6467                           
  6468                           ; BSR set to: 0
  6469                           ;vscp_firmware.c: 676: if (reg >= 0x80) {
  6470  003D68  0E7F               	movlw	127
  6471  003D6A  65D0               	cpfsgt	vscp_writeRegister@reg& (0+255),b
  6472  003D6C  D006               	goto	l10451
  6473                           
  6474                           ; BSR set to: 0
  6475                           ;vscp_firmware.c: 677: return vscp_writeStdReg(reg, value);
  6476  003D6E  C0CF  F00F         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  6477  003D72  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6478  003D74  EC21  F015         	call	_vscp_writeStdReg
  6479  003D78  D005               	goto	l1145
  6480  003D7A                     l10451:
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;vscp_firmware.c: 679: return vscp_writeAppReg(reg, value);
  6484  003D7A  C0CF  F051         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  6485  003D7E  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6486  003D80  EC11  F003         	call	_vscp_writeAppReg
  6487  003D84                     l1145:
  6488  003D84  0012               	return	
  6489  003D86                     __end_of_vscp_writeRegister:
  6490                           	opt stack 0
  6491                           tblptru	equ	0xFF8
  6492                           prodh	equ	0xFF4
  6493                           prodl	equ	0xFF3
  6494                           postinc0	equ	0xFEE
  6495                           wreg	equ	0xFE8
  6496                           indf2	equ	0xFDF
  6497                           postinc2	equ	0xFDE
  6498                           postdec2	equ	0xFDD
  6499                           fsr2h	equ	0xFDA
  6500                           fsr2l	equ	0xFD9
  6501                           status	equ	0xFD8
  6502                           
  6503 ;; *************** function _vscp_writeStdReg *****************
  6504 ;; Defined at:
  6505 ;;		line 688 in file "../../vscp_firmware/common/vscp_firmware.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;  reg             1    wreg     unsigned char 
  6508 ;;  value           1   14[COMRAM] unsigned char 
  6509 ;; Auto vars:     Size  Location     Type
  6510 ;;  reg             1   31[COMRAM] unsigned char 
  6511 ;;  code            4   24[COMRAM] unsigned long 
  6512 ;;  idx             1   29[COMRAM] unsigned char 
  6513 ;;  code            4   20[COMRAM] unsigned long 
  6514 ;;  idx             1   28[COMRAM] unsigned char 
  6515 ;;  rv              1   30[COMRAM] unsigned char 
  6516 ;; Return value:  Size  Location     Type
  6517 ;;                  1    wreg      unsigned char 
  6518 ;; Registers used:
  6519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6520 ;; Tracked objects:
  6521 ;;		On entry : F/0
  6522 ;;		On exit  : 0/0
  6523 ;;		Unchanged: 0/0
  6524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6525 ;;      Params:         1       0       0       0       0       0       0
  6526 ;;      Locals:        12       0       0       0       0       0       0
  6527 ;;      Temps:          5       0       0       0       0       0       0
  6528 ;;      Totals:        18       0       0       0       0       0       0
  6529 ;;Total ram usage:       18 bytes
  6530 ;; Hardware stack levels used:    1
  6531 ;; Hardware stack levels required when called:    5
  6532 ;; This function calls:
  6533 ;;		_vscp_setGUID
  6534 ;;		_vscp_setManufacturerId
  6535 ;;		_vscp_getGUID
  6536 ;;		_vscp_getUserID
  6537 ;;		_vscp_setUserID
  6538 ;;		_vscp_getManufacturerId
  6539 ;;		_vscp_getFamilyCode
  6540 ;;		_vscp_getFamilyType
  6541 ;;		_vscp_restoreDefaults
  6542 ;; This function is called by:
  6543 ;;		_vscp_writeRegister
  6544 ;;		_vscp_handleProtocolEvent
  6545 ;; This function uses a non-reentrant model
  6546 ;;
  6547                           
  6548                           	psect	text18
  6549  002A42                     __ptext18:
  6550                           	opt stack 0
  6551  002A42                     _vscp_writeStdReg:
  6552                           	opt stack 24
  6553                           
  6554                           ;incstack = 0
  6555                           ;incstack = 0
  6556                           ;vscp_writeStdReg@reg stored from wreg
  6557  002A42  CFE8 F020          	movff	wreg,vscp_writeStdReg@reg
  6558                           
  6559                           ; BSR set to: 0
  6560                           ;vscp_firmware.c: 689: uint8_t rv = ~value;
  6561  002A46  1C0F               	comf	vscp_writeStdReg@value,w,c
  6562  002A48  6E1F               	movwf	vscp_writeStdReg@rv,c
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;vscp_firmware.c: 691: if ((reg > (0x82 + 1)) &&
  6566                           ;vscp_firmware.c: 692: (reg < 0x89)) {
  6567  002A4A  0E83               	movlw	131
  6568  002A4C  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6569  002A4E  D00E               	goto	l9091
  6570                           
  6571                           ; BSR set to: 0
  6572  002A50  0E89               	movlw	137
  6573  002A52  6020               	cpfslt	vscp_writeStdReg@reg,c
  6574  002A54  D00B               	goto	l9091
  6575                           
  6576                           ; BSR set to: 0
  6577                           ;vscp_firmware.c: 695: vscp_setUserID((reg - 0x84), value);
  6578  002A56  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  6579  002A5A  5020               	movf	vscp_writeStdReg@reg,w,c
  6580  002A5C  0F7C               	addlw	124
  6581  002A5E  EC20  F01F         	call	_vscp_setUserID
  6582                           
  6583                           ;vscp_firmware.c: 696: rv = vscp_getUserID((reg - 0x84));
  6584  002A62  5020               	movf	vscp_writeStdReg@reg,w,c
  6585  002A64  0F7C               	addlw	124
  6586  002A66  EC4E  F01F         	call	_vscp_getUserID
  6587  002A6A  D083               	goto	L23
  6588  002A6C                     l9091:
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;vscp_firmware.c: 699: else if (0x92 == reg) {
  6592  002A6C  5020               	movf	vscp_writeStdReg@reg,w,c
  6593  002A6E  0A92               	xorlw	146
  6594  002A70  E10D               	bnz	l9097
  6595                           
  6596                           ; BSR set to: 0
  6597                           ;vscp_firmware.c: 702: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  6598  002A72  500F               	movf	vscp_writeStdReg@value,w,c
  6599  002A74  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6600  002A76  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  6601  002A78  5052               	movf	_vscp_page_select,w,c
  6602  002A7A  6E12               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  6603  002A7C  6A13               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  6604  002A7E  1010               	iorwf	??_vscp_writeStdReg,w,c
  6605  002A80  6E52               	movwf	_vscp_page_select,c
  6606  002A82  5011               	movf	??_vscp_writeStdReg+1,w,c
  6607  002A84  1013               	iorwf	??_vscp_writeStdReg+3,w,c
  6608  002A86  6E53               	movwf	_vscp_page_select+1,c
  6609                           
  6610                           ; BSR set to: 0
  6611                           ;vscp_firmware.c: 703: rv = (vscp_page_select >> 8) & 0xff;
  6612  002A88  5053               	movf	_vscp_page_select+1,w,c
  6613  002A8A  D073               	goto	L23
  6614  002A8C                     l9097:
  6615                           
  6616                           ; BSR set to: 0
  6617                           ;vscp_firmware.c: 705: else if (0x93 == reg) {
  6618  002A8C  5020               	movf	vscp_writeStdReg@reg,w,c
  6619  002A8E  0A93               	xorlw	147
  6620  002A90  E10B               	bnz	l9103
  6621                           
  6622                           ; BSR set to: 0
  6623                           ;vscp_firmware.c: 708: vscp_page_select = (vscp_page_select & 0xff00) | value;
  6624  002A92  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  6625  002A94  5053               	movf	_vscp_page_select+1,w,c
  6626  002A96  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6627  002A98  500F               	movf	vscp_writeStdReg@value,w,c
  6628  002A9A  1010               	iorwf	??_vscp_writeStdReg,w,c
  6629  002A9C  6E52               	movwf	_vscp_page_select,c
  6630  002A9E  5011               	movf	??_vscp_writeStdReg+1,w,c
  6631  002AA0  6E53               	movwf	_vscp_page_select+1,c
  6632                           
  6633                           ; BSR set to: 0
  6634                           ;vscp_firmware.c: 709: rv = (vscp_page_select & 0xff);
  6635  002AA2  C052  F01F         	movff	_vscp_page_select,vscp_writeStdReg@rv
  6636                           
  6637                           ;vscp_firmware.c: 710: }
  6638  002AA6  D0AF               	goto	l9165
  6639  002AA8                     l9103:
  6640                           
  6641                           ; BSR set to: 0
  6642                           ;vscp_firmware.c: 715: else if ((reg > 0x88) && (reg < 0x91)) {
  6643  002AA8  0E88               	movlw	136
  6644  002AAA  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6645  002AAC  D019               	goto	l9115
  6646                           
  6647                           ; BSR set to: 0
  6648  002AAE  0E91               	movlw	145
  6649  002AB0  6020               	cpfslt	vscp_writeStdReg@reg,c
  6650  002AB2  D016               	goto	l9115
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;vscp_firmware.c: 717: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6654                           ;vscp_firmware.c: 718: (0xff != (vscp_page_select & 0xff))) {
  6655  002AB4  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6656  002AB8  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6657  002ABC  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6658  002ABE  2811               	incf	??_vscp_writeStdReg+1,w,c
  6659  002AC0  E102               	bnz	l9111
  6660                           
  6661                           ; BSR set to: 0
  6662  002AC2  2852               	incf	_vscp_page_select,w,c
  6663  002AC4  E002               	bz	l9113
  6664  002AC6                     l9111:
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;vscp_firmware.c: 720: rv = ~value;
  6668  002AC6  1C0F               	comf	vscp_writeStdReg@value,w,c
  6669  002AC8  D054               	goto	L23
  6670  002ACA                     l9113:
  6671                           
  6672                           ; BSR set to: 0
  6673                           ;vscp_firmware.c: 723: vscp_setManufacturerId(reg - 0x89, value);
  6674  002ACA  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  6675  002ACE  5020               	movf	vscp_writeStdReg@reg,w,c
  6676  002AD0  0F77               	addlw	119
  6677  002AD2  ECC3  F01E         	call	_vscp_setManufacturerId
  6678                           
  6679                           ;vscp_firmware.c: 724: rv = vscp_getManufacturerId(reg - 0x89);
  6680  002AD6  5020               	movf	vscp_writeStdReg@reg,w,c
  6681  002AD8  0F77               	addlw	119
  6682  002ADA  EC44  F01F         	call	_vscp_getManufacturerId
  6683  002ADE  D049               	goto	L23
  6684  002AE0                     l9115:
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;vscp_firmware.c: 727: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  6688  002AE0  0ECF               	movlw	207
  6689  002AE2  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6690  002AE4  D017               	goto	l9127
  6691                           
  6692                           ; BSR set to: 0
  6693  002AE6  0EE0               	movlw	224
  6694  002AE8  6020               	cpfslt	vscp_writeStdReg@reg,c
  6695  002AEA  D014               	goto	l9127
  6696                           
  6697                           ; BSR set to: 0
  6698                           ;vscp_firmware.c: 729: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6699                           ;vscp_firmware.c: 730: (0xff != (vscp_page_select & 0xff))) {
  6700  002AEC  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6701  002AF0  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6702  002AF4  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6703  002AF6  2811               	incf	??_vscp_writeStdReg+1,w,c
  6704  002AF8  E1E6               	bnz	l9111
  6705                           
  6706                           ; BSR set to: 0
  6707  002AFA  2852               	incf	_vscp_page_select,w,c
  6708  002AFC  E1E4               	bnz	l9111
  6709                           
  6710                           ; BSR set to: 0
  6711                           ;vscp_firmware.c: 734: vscp_setGUID(reg - 0xD0, value);
  6712  002AFE  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  6713  002B02  5020               	movf	vscp_writeStdReg@reg,w,c
  6714  002B04  0F30               	addlw	48
  6715  002B06  ECD4  F01E         	call	_vscp_setGUID
  6716                           
  6717                           ;vscp_firmware.c: 735: rv = vscp_getGUID(reg - 0xD0);
  6718  002B0A  5020               	movf	vscp_writeStdReg@reg,w,c
  6719  002B0C  0F30               	addlw	48
  6720  002B0E  EC58  F01F         	call	_vscp_getGUID
  6721  002B12  D02F               	goto	L23
  6722  002B14                     l9127:
  6723                           
  6724                           ; BSR set to: 0
  6725                           ;vscp_firmware.c: 739: else if ( ( reg >= 0x9A ) &&
  6726                           ;vscp_firmware.c: 740: ( reg < 0x9E ) ) {
  6727  002B14  0E99               	movlw	153
  6728  002B16  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6729  002B18  D02E               	goto	l9137
  6730                           
  6731                           ; BSR set to: 0
  6732  002B1A  0E9E               	movlw	158
  6733  002B1C  6020               	cpfslt	vscp_writeStdReg@reg,c
  6734  002B1E  D02B               	goto	l9137
  6735                           
  6736                           ; BSR set to: 0
  6737                           ;vscp_firmware.c: 742: uint32_t code = vscp_getFamilyCode();
  6738  002B20  ECAF  F01F         	call	_vscp_getFamilyCode	;wreg free
  6739  002B24  C00B  F018         	movff	?_vscp_getFamilyCode+3,vscp_writeStdReg@code+3
  6740  002B28  C00A  F017         	movff	?_vscp_getFamilyCode+2,vscp_writeStdReg@code+2
  6741  002B2C  C009  F016         	movff	?_vscp_getFamilyCode+1,vscp_writeStdReg@code+1
  6742  002B30  C008  F015         	movff	?_vscp_getFamilyCode,vscp_writeStdReg@code
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;vscp_firmware.c: 743: uint8_t idx = reg - 0x9A;
  6746  002B34  5020               	movf	vscp_writeStdReg@reg,w,c
  6747  002B36  0F66               	addlw	102
  6748  002B38  6E1D               	movwf	vscp_writeStdReg@idx,c
  6749                           
  6750                           ; BSR set to: 0
  6751                           ;vscp_firmware.c: 744: rv = code >> (((3-idx)*8) & 0xff);
  6752  002B3A  501D               	movf	vscp_writeStdReg@idx,w,c
  6753  002B3C  0803               	sublw	3
  6754  002B3E  6E10               	movwf	??_vscp_writeStdReg& (0+255),c
  6755  002B40  90D8               	bcf	status,0,c
  6756  002B42  3610               	rlcf	??_vscp_writeStdReg,f,c
  6757  002B44  90D8               	bcf	status,0,c
  6758  002B46  3610               	rlcf	??_vscp_writeStdReg,f,c
  6759  002B48  90D8               	bcf	status,0,c
  6760  002B4A  3610               	rlcf	??_vscp_writeStdReg,f,c
  6761  002B4C  5010               	movf	??_vscp_writeStdReg,w,c
  6762  002B4E  C015  F011         	movff	vscp_writeStdReg@code,??_vscp_writeStdReg+1
  6763  002B52  C016  F012         	movff	vscp_writeStdReg@code+1,??_vscp_writeStdReg+2
  6764  002B56  C017  F013         	movff	vscp_writeStdReg@code+2,??_vscp_writeStdReg+3
  6765  002B5A  C018  F014         	movff	vscp_writeStdReg@code+3,??_vscp_writeStdReg+4
  6766  002B5E  2AE8               	incf	wreg,f,c
  6767  002B60  D005               	goto	u11160
  6768  002B62                     u11165:
  6769  002B62  90D8               	bcf	status,0,c
  6770  002B64  3214               	rrcf	??_vscp_writeStdReg+4,f,c
  6771  002B66  3213               	rrcf	??_vscp_writeStdReg+3,f,c
  6772  002B68  3212               	rrcf	??_vscp_writeStdReg+2,f,c
  6773  002B6A  3211               	rrcf	??_vscp_writeStdReg+1,f,c
  6774  002B6C                     u11160:
  6775  002B6C  2EE8               	decfsz	wreg,f,c
  6776  002B6E  D7F9               	goto	u11165
  6777  002B70  D030               	goto	L24
  6778  002B72                     L23:
  6779  002B72  6E1F               	movwf	vscp_writeStdReg@rv,c
  6780                           
  6781                           ;vscp_firmware.c: 745: }
  6782  002B74  D048               	goto	l9165
  6783  002B76                     l9137:
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;vscp_firmware.c: 746: else if ( ( reg >= 0x9E ) &&
  6787                           ;vscp_firmware.c: 747: ( reg < 0xA2 ) ) {
  6788  002B76  0E9D               	movlw	157
  6789  002B78  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6790  002B7A  D02D               	goto	l9147
  6791                           
  6792                           ; BSR set to: 0
  6793  002B7C  0EA2               	movlw	162
  6794  002B7E  6020               	cpfslt	vscp_writeStdReg@reg,c
  6795  002B80  D02A               	goto	l9147
  6796                           
  6797                           ; BSR set to: 0
  6798                           ;vscp_firmware.c: 749: uint32_t code = vscp_getFamilyType();
  6799  002B82  ECAA  F01F         	call	_vscp_getFamilyType	;wreg free
  6800  002B86  C00B  F01C         	movff	?_vscp_getFamilyType+3,vscp_writeStdReg@code_1268+3
  6801  002B8A  C00A  F01B         	movff	?_vscp_getFamilyType+2,vscp_writeStdReg@code_1268+2
  6802  002B8E  C009  F01A         	movff	?_vscp_getFamilyType+1,vscp_writeStdReg@code_1268+1
  6803  002B92  C008  F019         	movff	?_vscp_getFamilyType,vscp_writeStdReg@code_1268
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;vscp_firmware.c: 750: uint8_t idx = reg - 0x9E;
  6807  002B96  5020               	movf	vscp_writeStdReg@reg,w,c
  6808  002B98  0F62               	addlw	98
  6809  002B9A  6E1E               	movwf	vscp_writeStdReg@idx_1269,c
  6810                           
  6811                           ; BSR set to: 0
  6812                           ;vscp_firmware.c: 751: rv = code >> (((3-idx)*8) & 0xff);
  6813  002B9C  501E               	movf	vscp_writeStdReg@idx_1269,w,c
  6814  002B9E  0803               	sublw	3
  6815  002BA0  6E10               	movwf	??_vscp_writeStdReg& (0+255),c
  6816  002BA2  90D8               	bcf	status,0,c
  6817  002BA4  3610               	rlcf	??_vscp_writeStdReg,f,c
  6818  002BA6  90D8               	bcf	status,0,c
  6819  002BA8  3610               	rlcf	??_vscp_writeStdReg,f,c
  6820  002BAA  90D8               	bcf	status,0,c
  6821  002BAC  3610               	rlcf	??_vscp_writeStdReg,f,c
  6822  002BAE  5010               	movf	??_vscp_writeStdReg,w,c
  6823  002BB0  C019  F011         	movff	vscp_writeStdReg@code_1268,??_vscp_writeStdReg+1
  6824  002BB4  C01A  F012         	movff	vscp_writeStdReg@code_1268+1,??_vscp_writeStdReg+2
  6825  002BB8  C01B  F013         	movff	vscp_writeStdReg@code_1268+2,??_vscp_writeStdReg+3
  6826  002BBC  C01C  F014         	movff	vscp_writeStdReg@code_1268+3,??_vscp_writeStdReg+4
  6827  002BC0  2AE8               	incf	wreg,f,c
  6828  002BC2  D005               	goto	u11190
  6829  002BC4                     u11195:
  6830  002BC4  90D8               	bcf	status,0,c
  6831  002BC6  3214               	rrcf	??_vscp_writeStdReg+4,f,c
  6832  002BC8  3213               	rrcf	??_vscp_writeStdReg+3,f,c
  6833  002BCA  3212               	rrcf	??_vscp_writeStdReg+2,f,c
  6834  002BCC  3211               	rrcf	??_vscp_writeStdReg+1,f,c
  6835  002BCE                     u11190:
  6836  002BCE  2EE8               	decfsz	wreg,f,c
  6837  002BD0  D7F9               	goto	u11195
  6838  002BD2                     L24:
  6839  002BD2  5011               	movf	??_vscp_writeStdReg+1,w,c
  6840  002BD4  D7CE               	goto	L23
  6841  002BD6                     l9147:
  6842                           
  6843                           ; BSR set to: 0
  6844                           ;vscp_firmware.c: 753: else if ( 0xA2 == reg ) {
  6845  002BD6  5020               	movf	vscp_writeStdReg@reg,w,c
  6846  002BD8  0AA2               	xorlw	162
  6847  002BDA  E001 D774          	bnz	l9111
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;vscp_firmware.c: 754: if ( 0x55 == value ) {
  6851  002BDE  500F               	movf	vscp_writeStdReg@value,w,c
  6852  002BE0  0A55               	xorlw	85
  6853  002BE2  E104               	bnz	l9155
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;vscp_firmware.c: 755: vscp_configtimer = 0;
  6857  002BE4  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
  6858  002BE6  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;vscp_firmware.c: 756: rv = 0x55;
  6862  002BE8  0E55               	movlw	85
  6863  002BEA  D7C3               	goto	L23
  6864  002BEC                     l9155:
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;vscp_firmware.c: 758: else if ( 0xaa == value ) {
  6868  002BEC  500F               	movf	vscp_writeStdReg@value,w,c
  6869  002BEE  0AAA               	xorlw	170
  6870  002BF0  E10A               	bnz	l9165
  6871                           
  6872                           ; BSR set to: 0
  6873                           ;vscp_firmware.c: 759: if ( vscp_configtimer < 1000 ) {
  6874  002BF2  0EE8               	movlw	232
  6875  002BF4  5D84               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  6876  002BF6  0E03               	movlw	3
  6877  002BF8  5985               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  6878  002BFA  E204               	bc	l1175
  6879                           
  6880                           ; BSR set to: 0
  6881                           ;vscp_firmware.c: 760: vscp_restoreDefaults();
  6882  002BFC  ECBE  F01F         	call	_vscp_restoreDefaults	;wreg free
  6883                           
  6884                           ;vscp_firmware.c: 761: rv = 0xaa;
  6885  002C00  0EAA               	movlw	170
  6886  002C02  D7B7               	goto	L23
  6887  002C04                     l1175:
  6888                           
  6889                           ; BSR set to: 0
  6890                           ;vscp_firmware.c: 763: else {
  6891                           ;vscp_firmware.c: 764: rv = 0;
  6892  002C04  6A1F               	clrf	vscp_writeStdReg@rv,c
  6893  002C06                     l9165:
  6894                           
  6895                           ;vscp_firmware.c: 772: }
  6896                           ;vscp_firmware.c: 774: return rv;
  6897  002C06  501F               	movf	vscp_writeStdReg@rv,w,c
  6898  002C08  0012               	return	
  6899  002C0A                     __end_of_vscp_writeStdReg:
  6900                           	opt stack 0
  6901                           tblptru	equ	0xFF8
  6902                           prodh	equ	0xFF4
  6903                           prodl	equ	0xFF3
  6904                           postinc0	equ	0xFEE
  6905                           wreg	equ	0xFE8
  6906                           indf2	equ	0xFDF
  6907                           postinc2	equ	0xFDE
  6908                           postdec2	equ	0xFDD
  6909                           fsr2h	equ	0xFDA
  6910                           fsr2l	equ	0xFD9
  6911                           status	equ	0xFD8
  6912                           
  6913 ;; *************** function _vscp_restoreDefaults *****************
  6914 ;; Defined at:
  6915 ;;		line 2483 in file "../main.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;		None
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;		None
  6920 ;; Return value:  Size  Location     Type
  6921 ;;		None               void
  6922 ;; Registers used:
  6923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6924 ;; Tracked objects:
  6925 ;;		On entry : F/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6929 ;;      Params:         0       0       0       0       0       0       0
  6930 ;;      Locals:         0       0       0       0       0       0       0
  6931 ;;      Temps:          0       0       0       0       0       0       0
  6932 ;;      Totals:         0       0       0       0       0       0       0
  6933 ;;Total ram usage:        0 bytes
  6934 ;; Hardware stack levels used:    1
  6935 ;; Hardware stack levels required when called:    4
  6936 ;; This function calls:
  6937 ;;		_init_app_eeprom
  6938 ;;		_init_app_ram
  6939 ;; This function is called by:
  6940 ;;		_vscp_writeStdReg
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           	psect	text19
  6945  003F7C                     __ptext19:
  6946                           	opt stack 0
  6947  003F7C                     _vscp_restoreDefaults:
  6948                           	opt stack 24
  6949                           
  6950                           ; BSR set to: 0
  6951                           ;main.c: 2484: init_app_eeprom();
  6952                           
  6953                           ;incstack = 0
  6954                           ;incstack = 0
  6955  003F7C  EC39  F00D         	call	_init_app_eeprom	;wreg free
  6956                           
  6957                           ;main.c: 2485: init_app_ram();
  6958  003F80  EFA4  F018         	goto	_init_app_ram	;wreg free
  6959  003F84                     __end_of_vscp_restoreDefaults:
  6960                           	opt stack 0
  6961                           tblptru	equ	0xFF8
  6962                           prodh	equ	0xFF4
  6963                           prodl	equ	0xFF3
  6964                           postinc0	equ	0xFEE
  6965                           wreg	equ	0xFE8
  6966                           indf2	equ	0xFDF
  6967                           postinc2	equ	0xFDE
  6968                           postdec2	equ	0xFDD
  6969                           fsr2h	equ	0xFDA
  6970                           fsr2l	equ	0xFD9
  6971                           status	equ	0xFD8
  6972                           
  6973 ;; *************** function _init_app_eeprom *****************
  6974 ;; Defined at:
  6975 ;;		line 484 in file "../main.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;		None
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;  j               1   13[COMRAM] unsigned char 
  6980 ;;  i               1   12[COMRAM] unsigned char 
  6981 ;; Return value:  Size  Location     Type
  6982 ;;		None               void
  6983 ;; Registers used:
  6984 ;;		wreg, status,2, status,0, cstack
  6985 ;; Tracked objects:
  6986 ;;		On entry : 0/0
  6987 ;;		On exit  : 0/0
  6988 ;;		Unchanged: 0/0
  6989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6990 ;;      Params:         0       0       0       0       0       0       0
  6991 ;;      Locals:         2       0       0       0       0       0       0
  6992 ;;      Temps:          2       0       0       0       0       0       0
  6993 ;;      Totals:         4       0       0       0       0       0       0
  6994 ;;Total ram usage:        4 bytes
  6995 ;; Hardware stack levels used:    1
  6996 ;; Hardware stack levels required when called:    3
  6997 ;; This function calls:
  6998 ;;		_writeEEPROM
  6999 ;; This function is called by:
  7000 ;;		_main
  7001 ;;		_vscp_restoreDefaults
  7002 ;; This function uses a non-reentrant model
  7003 ;;
  7004                           
  7005                           	psect	text20
  7006  001A72                     __ptext20:
  7007                           	opt stack 0
  7008  001A72                     _init_app_eeprom:
  7009                           	opt stack 24
  7010                           
  7011                           ;main.c: 486: unsigned char i, j;
  7012                           ;main.c: 488: writeEEPROM( 0x43 + 0, 0 );
  7013                           
  7014                           ;incstack = 0
  7015                           ;incstack = 0
  7016  001A72  6A09               	clrf	?_writeEEPROM+1,c
  7017  001A74  0E43               	movlw	67
  7018  001A76  6E08               	movwf	?_writeEEPROM,c
  7019  001A78  0E00               	movlw	0
  7020  001A7A  6A0A               	clrf	?_writeEEPROM+2,c
  7021  001A7C  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7022                           
  7023                           ;main.c: 489: writeEEPROM( 0x43 + 1, 0 );
  7024  001A80  6A09               	clrf	?_writeEEPROM+1,c
  7025  001A82  0E44               	movlw	68
  7026  001A84  6E08               	movwf	?_writeEEPROM,c
  7027  001A86  0E00               	movlw	0
  7028  001A88  6A0A               	clrf	?_writeEEPROM+2,c
  7029  001A8A  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7030                           
  7031                           ;main.c: 491: writeEEPROM( 0x43 + 10,
  7032                           ;main.c: 492: 0x08 |
  7033                           ;main.c: 493: 0x10 |
  7034                           ;main.c: 494: 0x80 );
  7035  001A8E  6A09               	clrf	?_writeEEPROM+1,c
  7036  001A90  0E4D               	movlw	77
  7037  001A92  6E08               	movwf	?_writeEEPROM,c
  7038  001A94  0E98               	movlw	152
  7039  001A96  6E0A               	movwf	?_writeEEPROM+2,c
  7040  001A98  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7041                           
  7042                           ;main.c: 496: writeEEPROM( 0x43 + 11,
  7043                           ;main.c: 497: 0x08 |
  7044                           ;main.c: 498: 0x10 |
  7045                           ;main.c: 499: 0x80 );
  7046  001A9C  6A09               	clrf	?_writeEEPROM+1,c
  7047  001A9E  0E4E               	movlw	78
  7048  001AA0  6E08               	movwf	?_writeEEPROM,c
  7049  001AA2  0E98               	movlw	152
  7050  001AA4  6E0A               	movwf	?_writeEEPROM+2,c
  7051  001AA6  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7052                           
  7053                           ;main.c: 501: writeEEPROM( 0x43 + 12,
  7054                           ;main.c: 502: 0x08 |
  7055                           ;main.c: 503: 0x10 |
  7056                           ;main.c: 504: 0x80 );
  7057  001AAA  6A09               	clrf	?_writeEEPROM+1,c
  7058  001AAC  0E4F               	movlw	79
  7059  001AAE  6E08               	movwf	?_writeEEPROM,c
  7060  001AB0  0E98               	movlw	152
  7061  001AB2  6E0A               	movwf	?_writeEEPROM+2,c
  7062  001AB4  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7063                           
  7064                           ;main.c: 506: writeEEPROM( 0x43 + 13,
  7065                           ;main.c: 507: 0x08 |
  7066                           ;main.c: 508: 0x10 |
  7067                           ;main.c: 509: 0x80 );
  7068  001AB8  6A09               	clrf	?_writeEEPROM+1,c
  7069  001ABA  0E50               	movlw	80
  7070  001ABC  6E08               	movwf	?_writeEEPROM,c
  7071  001ABE  0E98               	movlw	152
  7072  001AC0  6E0A               	movwf	?_writeEEPROM+2,c
  7073  001AC2  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7074                           
  7075                           ;main.c: 511: writeEEPROM( 0x43 + 14,
  7076                           ;main.c: 512: 0x08 |
  7077                           ;main.c: 513: 0x10 |
  7078                           ;main.c: 514: 0x80 );
  7079  001AC6  6A09               	clrf	?_writeEEPROM+1,c
  7080  001AC8  0E51               	movlw	81
  7081  001ACA  6E08               	movwf	?_writeEEPROM,c
  7082  001ACC  0E98               	movlw	152
  7083  001ACE  6E0A               	movwf	?_writeEEPROM+2,c
  7084  001AD0  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7085                           
  7086                           ;main.c: 516: writeEEPROM( 0x43 + 15,
  7087                           ;main.c: 517: 0x08 |
  7088                           ;main.c: 518: 0x10 |
  7089                           ;main.c: 519: 0x80 );
  7090  001AD4  6A09               	clrf	?_writeEEPROM+1,c
  7091  001AD6  0E52               	movlw	82
  7092  001AD8  6E08               	movwf	?_writeEEPROM,c
  7093  001ADA  0E98               	movlw	152
  7094  001ADC  6E0A               	movwf	?_writeEEPROM+2,c
  7095  001ADE  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7096                           
  7097                           ;main.c: 521: writeEEPROM( 0x43 + 16,
  7098                           ;main.c: 522: 0x08 |
  7099                           ;main.c: 523: 0x10 |
  7100                           ;main.c: 524: 0x80 );
  7101  001AE2  6A09               	clrf	?_writeEEPROM+1,c
  7102  001AE4  0E53               	movlw	83
  7103  001AE6  6E08               	movwf	?_writeEEPROM,c
  7104  001AE8  0E98               	movlw	152
  7105  001AEA  6E0A               	movwf	?_writeEEPROM+2,c
  7106  001AEC  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7107                           
  7108                           ;main.c: 526: writeEEPROM( 0x43 + 17,
  7109                           ;main.c: 527: 0x08 |
  7110                           ;main.c: 528: 0x10 |
  7111                           ;main.c: 529: 0x80 );
  7112  001AF0  6A09               	clrf	?_writeEEPROM+1,c
  7113  001AF2  0E54               	movlw	84
  7114  001AF4  6E08               	movwf	?_writeEEPROM,c
  7115  001AF6  0E98               	movlw	152
  7116  001AF8  6E0A               	movwf	?_writeEEPROM+2,c
  7117  001AFA  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7118                           
  7119                           ;main.c: 531: writeEEPROM( 0x43 + 18, 0 );
  7120  001AFE  6A09               	clrf	?_writeEEPROM+1,c
  7121  001B00  0E55               	movlw	85
  7122  001B02  6E08               	movwf	?_writeEEPROM,c
  7123  001B04  0E00               	movlw	0
  7124  001B06  6A0A               	clrf	?_writeEEPROM+2,c
  7125  001B08  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7126                           
  7127                           ;main.c: 532: writeEEPROM( 0x43 + 19, 0 );
  7128  001B0C  6A09               	clrf	?_writeEEPROM+1,c
  7129  001B0E  0E56               	movlw	86
  7130  001B10  6E08               	movwf	?_writeEEPROM,c
  7131  001B12  0E00               	movlw	0
  7132  001B14  6A0A               	clrf	?_writeEEPROM+2,c
  7133  001B16  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7134                           
  7135                           ;main.c: 533: writeEEPROM( 0x43 + 20, 0 );
  7136  001B1A  6A09               	clrf	?_writeEEPROM+1,c
  7137  001B1C  0E57               	movlw	87
  7138  001B1E  6E08               	movwf	?_writeEEPROM,c
  7139  001B20  0E00               	movlw	0
  7140  001B22  6A0A               	clrf	?_writeEEPROM+2,c
  7141  001B24  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7142                           
  7143                           ;main.c: 534: writeEEPROM( 0x43 + 21, 0 );
  7144  001B28  6A09               	clrf	?_writeEEPROM+1,c
  7145  001B2A  0E58               	movlw	88
  7146  001B2C  6E08               	movwf	?_writeEEPROM,c
  7147  001B2E  0E00               	movlw	0
  7148  001B30  6A0A               	clrf	?_writeEEPROM+2,c
  7149  001B32  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7150                           
  7151                           ;main.c: 535: writeEEPROM( 0x43 + 22, 0 );
  7152  001B36  6A09               	clrf	?_writeEEPROM+1,c
  7153  001B38  0E59               	movlw	89
  7154  001B3A  6E08               	movwf	?_writeEEPROM,c
  7155  001B3C  0E00               	movlw	0
  7156  001B3E  6A0A               	clrf	?_writeEEPROM+2,c
  7157  001B40  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7158                           
  7159                           ;main.c: 536: writeEEPROM( 0x43 + 23, 0 );
  7160  001B44  6A09               	clrf	?_writeEEPROM+1,c
  7161  001B46  0E5A               	movlw	90
  7162  001B48  6E08               	movwf	?_writeEEPROM,c
  7163  001B4A  0E00               	movlw	0
  7164  001B4C  6A0A               	clrf	?_writeEEPROM+2,c
  7165  001B4E  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7166                           
  7167                           ;main.c: 537: writeEEPROM( 0x43 + 24, 0 );
  7168  001B52  6A09               	clrf	?_writeEEPROM+1,c
  7169  001B54  0E5B               	movlw	91
  7170  001B56  6E08               	movwf	?_writeEEPROM,c
  7171  001B58  0E00               	movlw	0
  7172  001B5A  6A0A               	clrf	?_writeEEPROM+2,c
  7173  001B5C  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7174                           
  7175                           ;main.c: 538: writeEEPROM( 0x43 + 25, 0 );
  7176  001B60  6A09               	clrf	?_writeEEPROM+1,c
  7177  001B62  0E5C               	movlw	92
  7178  001B64  6E08               	movwf	?_writeEEPROM,c
  7179  001B66  0E00               	movlw	0
  7180  001B68  6A0A               	clrf	?_writeEEPROM+2,c
  7181  001B6A  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7182                           
  7183                           ;main.c: 539: writeEEPROM( 0x43 + 26, 0 );
  7184  001B6E  6A09               	clrf	?_writeEEPROM+1,c
  7185  001B70  0E5D               	movlw	93
  7186  001B72  6E08               	movwf	?_writeEEPROM,c
  7187  001B74  0E00               	movlw	0
  7188  001B76  6A0A               	clrf	?_writeEEPROM+2,c
  7189  001B78  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7190                           
  7191                           ;main.c: 540: writeEEPROM( 0x43 + 27, 0 );
  7192  001B7C  6A09               	clrf	?_writeEEPROM+1,c
  7193  001B7E  0E5E               	movlw	94
  7194  001B80  6E08               	movwf	?_writeEEPROM,c
  7195  001B82  0E00               	movlw	0
  7196  001B84  6A0A               	clrf	?_writeEEPROM+2,c
  7197  001B86  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7198                           
  7199                           ;main.c: 541: writeEEPROM( 0x43 + 28, 0 );
  7200  001B8A  6A09               	clrf	?_writeEEPROM+1,c
  7201  001B8C  0E5F               	movlw	95
  7202  001B8E  6E08               	movwf	?_writeEEPROM,c
  7203  001B90  0E00               	movlw	0
  7204  001B92  6A0A               	clrf	?_writeEEPROM+2,c
  7205  001B94  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7206                           
  7207                           ;main.c: 542: writeEEPROM( 0x43 + 29, 0 );
  7208  001B98  6A09               	clrf	?_writeEEPROM+1,c
  7209  001B9A  0E60               	movlw	96
  7210  001B9C  6E08               	movwf	?_writeEEPROM,c
  7211  001B9E  0E00               	movlw	0
  7212  001BA0  6A0A               	clrf	?_writeEEPROM+2,c
  7213  001BA2  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7214                           
  7215                           ;main.c: 543: writeEEPROM( 0x43 + 30, 0 );
  7216  001BA6  6A09               	clrf	?_writeEEPROM+1,c
  7217  001BA8  0E61               	movlw	97
  7218  001BAA  6E08               	movwf	?_writeEEPROM,c
  7219  001BAC  0E00               	movlw	0
  7220  001BAE  6A0A               	clrf	?_writeEEPROM+2,c
  7221  001BB0  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7222                           
  7223                           ;main.c: 544: writeEEPROM( 0x43 + 31, 0 );
  7224  001BB4  6A09               	clrf	?_writeEEPROM+1,c
  7225  001BB6  0E62               	movlw	98
  7226  001BB8  6E08               	movwf	?_writeEEPROM,c
  7227  001BBA  0E00               	movlw	0
  7228  001BBC  6A0A               	clrf	?_writeEEPROM+2,c
  7229  001BBE  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7230                           
  7231                           ;main.c: 545: writeEEPROM( 0x43 + 32, 0 );
  7232  001BC2  6A09               	clrf	?_writeEEPROM+1,c
  7233  001BC4  0E63               	movlw	99
  7234  001BC6  6E08               	movwf	?_writeEEPROM,c
  7235  001BC8  0E00               	movlw	0
  7236  001BCA  6A0A               	clrf	?_writeEEPROM+2,c
  7237  001BCC  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7238                           
  7239                           ;main.c: 546: writeEEPROM( 0x43 + 33, 0 );
  7240  001BD0  6A09               	clrf	?_writeEEPROM+1,c
  7241  001BD2  0E64               	movlw	100
  7242  001BD4  6E08               	movwf	?_writeEEPROM,c
  7243  001BD6  0E00               	movlw	0
  7244  001BD8  6A0A               	clrf	?_writeEEPROM+2,c
  7245  001BDA  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7246                           
  7247                           ;main.c: 548: writeEEPROM( 0x43 + 34, 0 );
  7248  001BDE  6A09               	clrf	?_writeEEPROM+1,c
  7249  001BE0  0E65               	movlw	101
  7250  001BE2  6E08               	movwf	?_writeEEPROM,c
  7251  001BE4  0E00               	movlw	0
  7252  001BE6  6A0A               	clrf	?_writeEEPROM+2,c
  7253  001BE8  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7254                           
  7255                           ;main.c: 549: writeEEPROM( 0x43 + 35, 0 );
  7256  001BEC  6A09               	clrf	?_writeEEPROM+1,c
  7257  001BEE  0E66               	movlw	102
  7258  001BF0  6E08               	movwf	?_writeEEPROM,c
  7259  001BF2  0E00               	movlw	0
  7260  001BF4  6A0A               	clrf	?_writeEEPROM+2,c
  7261  001BF6  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7262                           
  7263                           ;main.c: 550: writeEEPROM( 0x43 + 36, 0 );
  7264  001BFA  6A09               	clrf	?_writeEEPROM+1,c
  7265  001BFC  0E67               	movlw	103
  7266  001BFE  6E08               	movwf	?_writeEEPROM,c
  7267  001C00  0E00               	movlw	0
  7268  001C02  6A0A               	clrf	?_writeEEPROM+2,c
  7269  001C04  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7270                           
  7271                           ;main.c: 551: writeEEPROM( 0x43 + 37, 0 );
  7272  001C08  6A09               	clrf	?_writeEEPROM+1,c
  7273  001C0A  0E68               	movlw	104
  7274  001C0C  6E08               	movwf	?_writeEEPROM,c
  7275  001C0E  0E00               	movlw	0
  7276  001C10  6A0A               	clrf	?_writeEEPROM+2,c
  7277  001C12  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7278                           
  7279                           ;main.c: 552: writeEEPROM( 0x43 + 38, 0 );
  7280  001C16  6A09               	clrf	?_writeEEPROM+1,c
  7281  001C18  0E69               	movlw	105
  7282  001C1A  6E08               	movwf	?_writeEEPROM,c
  7283  001C1C  0E00               	movlw	0
  7284  001C1E  6A0A               	clrf	?_writeEEPROM+2,c
  7285  001C20  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7286                           
  7287                           ;main.c: 553: writeEEPROM( 0x43 + 39, 0 );
  7288  001C24  6A09               	clrf	?_writeEEPROM+1,c
  7289  001C26  0E6A               	movlw	106
  7290  001C28  6E08               	movwf	?_writeEEPROM,c
  7291  001C2A  0E00               	movlw	0
  7292  001C2C  6A0A               	clrf	?_writeEEPROM+2,c
  7293  001C2E  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7294                           
  7295                           ;main.c: 554: writeEEPROM( 0x43 + 40, 0 );
  7296  001C32  6A09               	clrf	?_writeEEPROM+1,c
  7297  001C34  0E6B               	movlw	107
  7298  001C36  6E08               	movwf	?_writeEEPROM,c
  7299  001C38  0E00               	movlw	0
  7300  001C3A  6A0A               	clrf	?_writeEEPROM+2,c
  7301  001C3C  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7302                           
  7303                           ;main.c: 555: writeEEPROM( 0x43 + 41, 0 );
  7304  001C40  6A09               	clrf	?_writeEEPROM+1,c
  7305  001C42  0E6C               	movlw	108
  7306  001C44  6E08               	movwf	?_writeEEPROM,c
  7307  001C46  0E00               	movlw	0
  7308  001C48  6A0A               	clrf	?_writeEEPROM+2,c
  7309  001C4A  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7310                           
  7311                           ;main.c: 556: writeEEPROM( 0x43 + 42, 0 );
  7312  001C4E  6A09               	clrf	?_writeEEPROM+1,c
  7313  001C50  0E6D               	movlw	109
  7314  001C52  6E08               	movwf	?_writeEEPROM,c
  7315  001C54  0E00               	movlw	0
  7316  001C56  6A0A               	clrf	?_writeEEPROM+2,c
  7317  001C58  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7318                           
  7319                           ;main.c: 557: writeEEPROM( 0x43 + 43, 0 );
  7320  001C5C  6A09               	clrf	?_writeEEPROM+1,c
  7321  001C5E  0E6E               	movlw	110
  7322  001C60  6E08               	movwf	?_writeEEPROM,c
  7323  001C62  0E00               	movlw	0
  7324  001C64  6A0A               	clrf	?_writeEEPROM+2,c
  7325  001C66  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7326                           
  7327                           ;main.c: 558: writeEEPROM( 0x43 + 44, 0 );
  7328  001C6A  6A09               	clrf	?_writeEEPROM+1,c
  7329  001C6C  0E6F               	movlw	111
  7330  001C6E  6E08               	movwf	?_writeEEPROM,c
  7331  001C70  0E00               	movlw	0
  7332  001C72  6A0A               	clrf	?_writeEEPROM+2,c
  7333  001C74  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7334                           
  7335                           ;main.c: 559: writeEEPROM( 0x43 + 45, 0 );
  7336  001C78  6A09               	clrf	?_writeEEPROM+1,c
  7337  001C7A  0E70               	movlw	112
  7338  001C7C  6E08               	movwf	?_writeEEPROM,c
  7339  001C7E  0E00               	movlw	0
  7340  001C80  6A0A               	clrf	?_writeEEPROM+2,c
  7341  001C82  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7342                           
  7343                           ;main.c: 560: writeEEPROM( 0x43 + 46, 0 );
  7344  001C86  6A09               	clrf	?_writeEEPROM+1,c
  7345  001C88  0E71               	movlw	113
  7346  001C8A  6E08               	movwf	?_writeEEPROM,c
  7347  001C8C  0E00               	movlw	0
  7348  001C8E  6A0A               	clrf	?_writeEEPROM+2,c
  7349  001C90  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7350                           
  7351                           ;main.c: 561: writeEEPROM( 0x43 + 47, 0 );
  7352  001C94  6A09               	clrf	?_writeEEPROM+1,c
  7353  001C96  0E72               	movlw	114
  7354  001C98  6E08               	movwf	?_writeEEPROM,c
  7355  001C9A  0E00               	movlw	0
  7356  001C9C  6A0A               	clrf	?_writeEEPROM+2,c
  7357  001C9E  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7358                           
  7359                           ;main.c: 562: writeEEPROM( 0x43 + 48, 0 );
  7360  001CA2  6A09               	clrf	?_writeEEPROM+1,c
  7361  001CA4  0E73               	movlw	115
  7362  001CA6  6E08               	movwf	?_writeEEPROM,c
  7363  001CA8  0E00               	movlw	0
  7364  001CAA  6A0A               	clrf	?_writeEEPROM+2,c
  7365  001CAC  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7366                           
  7367                           ;main.c: 563: writeEEPROM( 0x43 + 49, 0 );
  7368  001CB0  6A09               	clrf	?_writeEEPROM+1,c
  7369  001CB2  0E74               	movlw	116
  7370  001CB4  6E08               	movwf	?_writeEEPROM,c
  7371  001CB6  0E00               	movlw	0
  7372  001CB8  6A0A               	clrf	?_writeEEPROM+2,c
  7373  001CBA  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7374                           
  7375                           ;main.c: 565: writeEEPROM( 0x43 + 50, 0 );
  7376  001CBE  6A09               	clrf	?_writeEEPROM+1,c
  7377  001CC0  0E75               	movlw	117
  7378  001CC2  6E08               	movwf	?_writeEEPROM,c
  7379  001CC4  0E00               	movlw	0
  7380  001CC6  6A0A               	clrf	?_writeEEPROM+2,c
  7381  001CC8  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7382                           
  7383                           ;main.c: 566: writeEEPROM( 0x43 + 51, 0 );
  7384  001CCC  6A09               	clrf	?_writeEEPROM+1,c
  7385  001CCE  0E76               	movlw	118
  7386  001CD0  6E08               	movwf	?_writeEEPROM,c
  7387  001CD2  0E00               	movlw	0
  7388  001CD4  6A0A               	clrf	?_writeEEPROM+2,c
  7389  001CD6  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7390                           
  7391                           ;main.c: 567: writeEEPROM( 0x43 + 52, 0 );
  7392  001CDA  6A09               	clrf	?_writeEEPROM+1,c
  7393  001CDC  0E77               	movlw	119
  7394  001CDE  6E08               	movwf	?_writeEEPROM,c
  7395  001CE0  0E00               	movlw	0
  7396  001CE2  6A0A               	clrf	?_writeEEPROM+2,c
  7397  001CE4  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7398                           
  7399                           ;main.c: 568: writeEEPROM( 0x43 + 53, 0 );
  7400  001CE8  6A09               	clrf	?_writeEEPROM+1,c
  7401  001CEA  0E78               	movlw	120
  7402  001CEC  6E08               	movwf	?_writeEEPROM,c
  7403  001CEE  0E00               	movlw	0
  7404  001CF0  6A0A               	clrf	?_writeEEPROM+2,c
  7405  001CF2  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7406                           
  7407                           ;main.c: 569: writeEEPROM( 0x43 + 54, 0 );
  7408  001CF6  6A09               	clrf	?_writeEEPROM+1,c
  7409  001CF8  0E79               	movlw	121
  7410  001CFA  6E08               	movwf	?_writeEEPROM,c
  7411  001CFC  0E00               	movlw	0
  7412  001CFE  6A0A               	clrf	?_writeEEPROM+2,c
  7413  001D00  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7414                           
  7415                           ;main.c: 570: writeEEPROM( 0x43 + 55, 0 );
  7416  001D04  6A09               	clrf	?_writeEEPROM+1,c
  7417  001D06  0E7A               	movlw	122
  7418  001D08  6E08               	movwf	?_writeEEPROM,c
  7419  001D0A  0E00               	movlw	0
  7420  001D0C  6A0A               	clrf	?_writeEEPROM+2,c
  7421  001D0E  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7422                           
  7423                           ;main.c: 571: writeEEPROM( 0x43 + 56, 0 );
  7424  001D12  6A09               	clrf	?_writeEEPROM+1,c
  7425  001D14  0E7B               	movlw	123
  7426  001D16  6E08               	movwf	?_writeEEPROM,c
  7427  001D18  0E00               	movlw	0
  7428  001D1A  6A0A               	clrf	?_writeEEPROM+2,c
  7429  001D1C  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7430                           
  7431                           ;main.c: 572: writeEEPROM( 0x43 + 57, 0 );
  7432  001D20  6A09               	clrf	?_writeEEPROM+1,c
  7433  001D22  0E7C               	movlw	124
  7434  001D24  6E08               	movwf	?_writeEEPROM,c
  7435  001D26  0E00               	movlw	0
  7436  001D28  6A0A               	clrf	?_writeEEPROM+2,c
  7437  001D2A  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7438                           
  7439                           ;main.c: 573: writeEEPROM( 0x43 + 58, 0 );
  7440  001D2E  6A09               	clrf	?_writeEEPROM+1,c
  7441  001D30  0E7D               	movlw	125
  7442  001D32  6E08               	movwf	?_writeEEPROM,c
  7443  001D34  0E00               	movlw	0
  7444  001D36  6A0A               	clrf	?_writeEEPROM+2,c
  7445  001D38  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7446                           
  7447                           ;main.c: 574: writeEEPROM( 0x43 + 59, 0 );
  7448  001D3C  6A09               	clrf	?_writeEEPROM+1,c
  7449  001D3E  0E7E               	movlw	126
  7450  001D40  6E08               	movwf	?_writeEEPROM,c
  7451  001D42  0E00               	movlw	0
  7452  001D44  6A0A               	clrf	?_writeEEPROM+2,c
  7453  001D46  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7454                           
  7455                           ;main.c: 575: writeEEPROM( 0x43 + 60, 0 );
  7456  001D4A  6A09               	clrf	?_writeEEPROM+1,c
  7457  001D4C  0E7F               	movlw	127
  7458  001D4E  6E08               	movwf	?_writeEEPROM,c
  7459  001D50  0E00               	movlw	0
  7460  001D52  6A0A               	clrf	?_writeEEPROM+2,c
  7461  001D54  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7462                           
  7463                           ;main.c: 576: writeEEPROM( 0x43 + 61, 0 );
  7464  001D58  6A09               	clrf	?_writeEEPROM+1,c
  7465  001D5A  0E80               	movlw	128
  7466  001D5C  6E08               	movwf	?_writeEEPROM,c
  7467  001D5E  0E00               	movlw	0
  7468  001D60  6A0A               	clrf	?_writeEEPROM+2,c
  7469  001D62  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7470                           
  7471                           ;main.c: 577: writeEEPROM( 0x43 + 62, 0 );
  7472  001D66  6A09               	clrf	?_writeEEPROM+1,c
  7473  001D68  0E81               	movlw	129
  7474  001D6A  6E08               	movwf	?_writeEEPROM,c
  7475  001D6C  0E00               	movlw	0
  7476  001D6E  6A0A               	clrf	?_writeEEPROM+2,c
  7477  001D70  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7478                           
  7479                           ;main.c: 578: writeEEPROM( 0x43 + 63, 0 );
  7480  001D74  6A09               	clrf	?_writeEEPROM+1,c
  7481  001D76  0E82               	movlw	130
  7482  001D78  6E08               	movwf	?_writeEEPROM,c
  7483  001D7A  0E00               	movlw	0
  7484  001D7C  6A0A               	clrf	?_writeEEPROM+2,c
  7485  001D7E  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7486                           
  7487                           ;main.c: 579: writeEEPROM( 0x43 + 64, 0 );
  7488  001D82  6A09               	clrf	?_writeEEPROM+1,c
  7489  001D84  0E83               	movlw	131
  7490  001D86  6E08               	movwf	?_writeEEPROM,c
  7491  001D88  0E00               	movlw	0
  7492  001D8A  6A0A               	clrf	?_writeEEPROM+2,c
  7493  001D8C  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7494                           
  7495                           ;main.c: 580: writeEEPROM( 0x43 + 65, 0 );
  7496  001D90  6A09               	clrf	?_writeEEPROM+1,c
  7497  001D92  0E84               	movlw	132
  7498  001D94  6E08               	movwf	?_writeEEPROM,c
  7499  001D96  0E00               	movlw	0
  7500  001D98  6A0A               	clrf	?_writeEEPROM+2,c
  7501  001D9A  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7502                           
  7503                           ;main.c: 584: for ( i = 0; i < 7; i++ ) {
  7504  001D9E  6A0D               	clrf	init_app_eeprom@i,c
  7505  001DA0                     l183:
  7506                           
  7507                           ;main.c: 585: for ( j = 0; j < 8; j++ ) {
  7508  001DA0  6A0E               	clrf	init_app_eeprom@j,c
  7509  001DA2                     l4685:
  7510                           
  7511                           ;main.c: 586: writeEEPROM( 0x43 + 72 + i * 8 + j, 0 );
  7512  001DA2  500E               	movf	init_app_eeprom@j,w,c
  7513  001DA4  C00D  F00B         	movff	init_app_eeprom@i,??_init_app_eeprom
  7514  001DA8  6A0C               	clrf	(??_init_app_eeprom+1)& (0+255),c
  7515  001DAA  90D8               	bcf	status,0,c
  7516  001DAC  360B               	rlcf	??_init_app_eeprom,f,c
  7517  001DAE  360C               	rlcf	??_init_app_eeprom+1,f,c
  7518  001DB0  90D8               	bcf	status,0,c
  7519  001DB2  360B               	rlcf	??_init_app_eeprom,f,c
  7520  001DB4  360C               	rlcf	??_init_app_eeprom+1,f,c
  7521  001DB6  90D8               	bcf	status,0,c
  7522  001DB8  360B               	rlcf	??_init_app_eeprom,f,c
  7523  001DBA  360C               	rlcf	??_init_app_eeprom+1,f,c
  7524  001DBC  260B               	addwf	??_init_app_eeprom,f,c
  7525  001DBE  0E00               	movlw	0
  7526  001DC0  220C               	addwfc	??_init_app_eeprom+1,f,c
  7527  001DC2  0E8B               	movlw	139
  7528  001DC4  240B               	addwf	??_init_app_eeprom,w,c
  7529  001DC6  6E08               	movwf	?_writeEEPROM,c
  7530  001DC8  0E00               	movlw	0
  7531  001DCA  200C               	addwfc	??_init_app_eeprom+1,w,c
  7532  001DCC  6E09               	movwf	?_writeEEPROM+1,c
  7533  001DCE  0E00               	movlw	0
  7534  001DD0  6A0A               	clrf	?_writeEEPROM+2,c
  7535  001DD2  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7536  001DD6  2A0E               	incf	init_app_eeprom@j,f,c
  7537  001DD8  0E07               	movlw	7
  7538  001DDA  640E               	cpfsgt	init_app_eeprom@j,c
  7539  001DDC  D7E2               	goto	l4685
  7540  001DDE  2A0D               	incf	init_app_eeprom@i,f,c
  7541  001DE0  0E06               	movlw	6
  7542  001DE2  640D               	cpfsgt	init_app_eeprom@i,c
  7543  001DE4  D7DD               	goto	l183
  7544  001DE6  0C06               	retlw	6
  7545  001DE8                     __end_of_init_app_eeprom:
  7546                           	opt stack 0
  7547                           tblptru	equ	0xFF8
  7548                           prodh	equ	0xFF4
  7549                           prodl	equ	0xFF3
  7550                           postinc0	equ	0xFEE
  7551                           wreg	equ	0xFE8
  7552                           indf2	equ	0xFDF
  7553                           postinc2	equ	0xFDE
  7554                           postdec2	equ	0xFDD
  7555                           fsr2h	equ	0xFDA
  7556                           fsr2l	equ	0xFD9
  7557                           status	equ	0xFD8
  7558                           
  7559 ;; *************** function _vscp_getFamilyType *****************
  7560 ;; Defined at:
  7561 ;;		line 2475 in file "../main.c"
  7562 ;; Parameters:    Size  Location     Type
  7563 ;;		None
  7564 ;; Auto vars:     Size  Location     Type
  7565 ;;		None
  7566 ;; Return value:  Size  Location     Type
  7567 ;;                  4    7[COMRAM] unsigned long 
  7568 ;; Registers used:
  7569 ;;		None
  7570 ;; Tracked objects:
  7571 ;;		On entry : F/0
  7572 ;;		On exit  : F/0
  7573 ;;		Unchanged: F/0
  7574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7575 ;;      Params:         4       0       0       0       0       0       0
  7576 ;;      Locals:         0       0       0       0       0       0       0
  7577 ;;      Temps:          0       0       0       0       0       0       0
  7578 ;;      Totals:         4       0       0       0       0       0       0
  7579 ;;Total ram usage:        4 bytes
  7580 ;; Hardware stack levels used:    1
  7581 ;; Hardware stack levels required when called:    2
  7582 ;; This function calls:
  7583 ;;		Nothing
  7584 ;; This function is called by:
  7585 ;;		_vscp_writeStdReg
  7586 ;; This function uses a non-reentrant model
  7587 ;;
  7588                           
  7589                           	psect	text21
  7590  003F54                     __ptext21:
  7591                           	opt stack 0
  7592  003F54                     _vscp_getFamilyType:
  7593                           	opt stack 26
  7594                           
  7595                           ; BSR set to: 0
  7596                           ;main.c: 2476: return 0;
  7597                           
  7598                           ;incstack = 0
  7599                           ;incstack = 0
  7600  003F54  6A08               	clrf	?_vscp_getFamilyType,c
  7601  003F56  6A09               	clrf	?_vscp_getFamilyType+1,c
  7602  003F58  6A0A               	clrf	?_vscp_getFamilyType+2,c
  7603  003F5A  6A0B               	clrf	?_vscp_getFamilyType+3,c
  7604                           
  7605                           ; BSR set to: 0
  7606  003F5C  0012               	return	
  7607  003F5E                     __end_of_vscp_getFamilyType:
  7608                           	opt stack 0
  7609                           tblptru	equ	0xFF8
  7610                           prodh	equ	0xFF4
  7611                           prodl	equ	0xFF3
  7612                           postinc0	equ	0xFEE
  7613                           wreg	equ	0xFE8
  7614                           indf2	equ	0xFDF
  7615                           postinc2	equ	0xFDE
  7616                           postdec2	equ	0xFDD
  7617                           fsr2h	equ	0xFDA
  7618                           fsr2l	equ	0xFD9
  7619                           status	equ	0xFD8
  7620                           
  7621 ;; *************** function _vscp_getFamilyCode *****************
  7622 ;; Defined at:
  7623 ;;		line 2466 in file "../main.c"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;		None
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;		None
  7628 ;; Return value:  Size  Location     Type
  7629 ;;                  4    7[COMRAM] unsigned long 
  7630 ;; Registers used:
  7631 ;;		None
  7632 ;; Tracked objects:
  7633 ;;		On entry : F/0
  7634 ;;		On exit  : F/0
  7635 ;;		Unchanged: F/0
  7636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7637 ;;      Params:         4       0       0       0       0       0       0
  7638 ;;      Locals:         0       0       0       0       0       0       0
  7639 ;;      Temps:          0       0       0       0       0       0       0
  7640 ;;      Totals:         4       0       0       0       0       0       0
  7641 ;;Total ram usage:        4 bytes
  7642 ;; Hardware stack levels used:    1
  7643 ;; Hardware stack levels required when called:    2
  7644 ;; This function calls:
  7645 ;;		Nothing
  7646 ;; This function is called by:
  7647 ;;		_vscp_writeStdReg
  7648 ;; This function uses a non-reentrant model
  7649 ;;
  7650                           
  7651                           	psect	text22
  7652  003F5E                     __ptext22:
  7653                           	opt stack 0
  7654  003F5E                     _vscp_getFamilyCode:
  7655                           	opt stack 26
  7656                           
  7657                           ; BSR set to: 0
  7658                           ;main.c: 2467: return 0L;
  7659                           
  7660                           ; BSR set to: 0
  7661                           ;incstack = 0
  7662                           ;incstack = 0
  7663  003F5E  6A08               	clrf	?_vscp_getFamilyCode,c
  7664  003F60  6A09               	clrf	?_vscp_getFamilyCode+1,c
  7665  003F62  6A0A               	clrf	?_vscp_getFamilyCode+2,c
  7666  003F64  6A0B               	clrf	?_vscp_getFamilyCode+3,c
  7667                           
  7668                           ; BSR set to: 0
  7669  003F66  0012               	return	
  7670  003F68                     __end_of_vscp_getFamilyCode:
  7671                           	opt stack 0
  7672                           tblptru	equ	0xFF8
  7673                           prodh	equ	0xFF4
  7674                           prodl	equ	0xFF3
  7675                           postinc0	equ	0xFEE
  7676                           wreg	equ	0xFE8
  7677                           indf2	equ	0xFDF
  7678                           postinc2	equ	0xFDE
  7679                           postdec2	equ	0xFDD
  7680                           fsr2h	equ	0xFDA
  7681                           fsr2l	equ	0xFD9
  7682                           status	equ	0xFD8
  7683                           
  7684 ;; *************** function _vscp_setUserID *****************
  7685 ;; Defined at:
  7686 ;;		line 2300 in file "../main.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;  idx             1    wreg     unsigned char 
  7689 ;;  data            1   10[COMRAM] unsigned char 
  7690 ;; Auto vars:     Size  Location     Type
  7691 ;;  idx             1   11[COMRAM] unsigned char 
  7692 ;; Return value:  Size  Location     Type
  7693 ;;		None               void
  7694 ;; Registers used:
  7695 ;;		wreg, status,2, status,0, cstack
  7696 ;; Tracked objects:
  7697 ;;		On entry : F/0
  7698 ;;		On exit  : 0/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7701 ;;      Params:         1       0       0       0       0       0       0
  7702 ;;      Locals:         1       0       0       0       0       0       0
  7703 ;;      Temps:          0       0       0       0       0       0       0
  7704 ;;      Totals:         2       0       0       0       0       0       0
  7705 ;;Total ram usage:        2 bytes
  7706 ;; Hardware stack levels used:    1
  7707 ;; Hardware stack levels required when called:    3
  7708 ;; This function calls:
  7709 ;;		_writeEEPROM
  7710 ;; This function is called by:
  7711 ;;		_vscp_writeStdReg
  7712 ;; This function uses a non-reentrant model
  7713 ;;
  7714                           
  7715                           	psect	text23
  7716  003E40                     __ptext23:
  7717                           	opt stack 0
  7718  003E40                     _vscp_setUserID:
  7719                           	opt stack 25
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;incstack = 0
  7723                           ;incstack = 0
  7724                           ;vscp_setUserID@idx stored from wreg
  7725  003E40  CFE8 F00C          	movff	wreg,vscp_setUserID@idx
  7726                           
  7727                           ; BSR set to: 0
  7728                           ;main.c: 2301: writeEEPROM( idx + 0x06, data );
  7729  003E44  0E06               	movlw	6
  7730  003E46  240C               	addwf	vscp_setUserID@idx,w,c
  7731  003E48  6E08               	movwf	?_writeEEPROM,c
  7732  003E4A  6A09               	clrf	?_writeEEPROM+1,c
  7733  003E4C  0E00               	movlw	0
  7734  003E4E  2209               	addwfc	?_writeEEPROM+1,f,c
  7735  003E50  C00B  F00A         	movff	vscp_setUserID@data,?_writeEEPROM+2
  7736  003E54  EF6A  F01E         	goto	_writeEEPROM	;wreg free
  7737  003E58                     __end_of_vscp_setUserID:
  7738                           	opt stack 0
  7739                           tblptru	equ	0xFF8
  7740                           prodh	equ	0xFF4
  7741                           prodl	equ	0xFF3
  7742                           postinc0	equ	0xFEE
  7743                           wreg	equ	0xFE8
  7744                           indf2	equ	0xFDF
  7745                           postinc2	equ	0xFDE
  7746                           postdec2	equ	0xFDD
  7747                           fsr2h	equ	0xFDA
  7748                           fsr2l	equ	0xFD9
  7749                           status	equ	0xFD8
  7750                           
  7751 ;; *************** function _vscp_setManufacturerId *****************
  7752 ;; Defined at:
  7753 ;;		line 825 in file "../main.c"
  7754 ;; Parameters:    Size  Location     Type
  7755 ;;  idx             1    wreg     unsigned char 
  7756 ;;  data            1   10[COMRAM] unsigned char 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  idx             1   11[COMRAM] unsigned char 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;		None               void
  7761 ;; Registers used:
  7762 ;;		wreg, status,2, status,0, cstack
  7763 ;; Tracked objects:
  7764 ;;		On entry : F/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7768 ;;      Params:         1       0       0       0       0       0       0
  7769 ;;      Locals:         1       0       0       0       0       0       0
  7770 ;;      Temps:          0       0       0       0       0       0       0
  7771 ;;      Totals:         2       0       0       0       0       0       0
  7772 ;;Total ram usage:        2 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    3
  7775 ;; This function calls:
  7776 ;;		_writeEEPROM
  7777 ;; This function is called by:
  7778 ;;		_vscp_writeStdReg
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           	psect	text24
  7783  003D86                     __ptext24:
  7784                           	opt stack 0
  7785  003D86                     _vscp_setManufacturerId:
  7786                           	opt stack 25
  7787                           
  7788                           ;incstack = 0
  7789                           ;incstack = 0
  7790                           ;vscp_setManufacturerId@idx stored from wreg
  7791  003D86  CFE8 F00C          	movff	wreg,vscp_setManufacturerId@idx
  7792                           
  7793                           ; BSR set to: 0
  7794                           ;main.c: 826: if ( idx>7 ) return;
  7795  003D8A  0E07               	movlw	7
  7796  003D8C  640C               	cpfsgt	vscp_setManufacturerId@idx,c
  7797  003D8E  D001               	goto	l5627
  7798  003D90  D00A               	goto	l249
  7799  003D92                     l5627:
  7800                           
  7801                           ; BSR set to: 0
  7802                           ;main.c: 827: writeEEPROM(0x0B + idx, data);
  7803  003D92  0E0B               	movlw	11
  7804  003D94  240C               	addwf	vscp_setManufacturerId@idx,w,c
  7805  003D96  6E08               	movwf	?_writeEEPROM,c
  7806  003D98  6A09               	clrf	?_writeEEPROM+1,c
  7807  003D9A  0E00               	movlw	0
  7808  003D9C  2209               	addwfc	?_writeEEPROM+1,f,c
  7809  003D9E  C00B  F00A         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
  7810  003DA2  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7811  003DA6                     l249:
  7812  003DA6  0012               	return	
  7813  003DA8                     __end_of_vscp_setManufacturerId:
  7814                           	opt stack 0
  7815                           tblptru	equ	0xFF8
  7816                           prodh	equ	0xFF4
  7817                           prodl	equ	0xFF3
  7818                           postinc0	equ	0xFEE
  7819                           wreg	equ	0xFE8
  7820                           indf2	equ	0xFDF
  7821                           postinc2	equ	0xFDE
  7822                           postdec2	equ	0xFDD
  7823                           fsr2h	equ	0xFDA
  7824                           fsr2l	equ	0xFD9
  7825                           status	equ	0xFD8
  7826                           
  7827 ;; *************** function _vscp_setGUID *****************
  7828 ;; Defined at:
  7829 ;;		line 813 in file "../main.c"
  7830 ;; Parameters:    Size  Location     Type
  7831 ;;  idx             1    wreg     unsigned char 
  7832 ;;  data            1   10[COMRAM] unsigned char 
  7833 ;; Auto vars:     Size  Location     Type
  7834 ;;  idx             1   11[COMRAM] unsigned char 
  7835 ;; Return value:  Size  Location     Type
  7836 ;;		None               void
  7837 ;; Registers used:
  7838 ;;		wreg, status,2, status,0, cstack
  7839 ;; Tracked objects:
  7840 ;;		On entry : F/0
  7841 ;;		On exit  : 0/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7844 ;;      Params:         1       0       0       0       0       0       0
  7845 ;;      Locals:         1       0       0       0       0       0       0
  7846 ;;      Temps:          0       0       0       0       0       0       0
  7847 ;;      Totals:         2       0       0       0       0       0       0
  7848 ;;Total ram usage:        2 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; Hardware stack levels required when called:    3
  7851 ;; This function calls:
  7852 ;;		_writeEEPROM
  7853 ;; This function is called by:
  7854 ;;		_vscp_writeStdReg
  7855 ;; This function uses a non-reentrant model
  7856 ;;
  7857                           
  7858                           	psect	text25
  7859  003DA8                     __ptext25:
  7860                           	opt stack 0
  7861  003DA8                     _vscp_setGUID:
  7862                           	opt stack 25
  7863                           
  7864                           ;incstack = 0
  7865                           ;incstack = 0
  7866                           ;vscp_setGUID@idx stored from wreg
  7867  003DA8  CFE8 F00C          	movff	wreg,vscp_setGUID@idx
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;main.c: 814: if ( idx>15 ) return;
  7871  003DAC  0E0F               	movlw	15
  7872  003DAE  640C               	cpfsgt	vscp_setGUID@idx,c
  7873  003DB0  D001               	goto	l5621
  7874  003DB2  D00A               	goto	l245
  7875  003DB4                     l5621:
  7876                           
  7877                           ; BSR set to: 0
  7878                           ;main.c: 815: writeEEPROM(0x13 + idx, data);
  7879  003DB4  0E13               	movlw	19
  7880  003DB6  240C               	addwf	vscp_setGUID@idx,w,c
  7881  003DB8  6E08               	movwf	?_writeEEPROM,c
  7882  003DBA  6A09               	clrf	?_writeEEPROM+1,c
  7883  003DBC  0E00               	movlw	0
  7884  003DBE  2209               	addwfc	?_writeEEPROM+1,f,c
  7885  003DC0  C00B  F00A         	movff	vscp_setGUID@data,?_writeEEPROM+2
  7886  003DC4  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7887  003DC8                     l245:
  7888  003DC8  0012               	return	
  7889  003DCA                     __end_of_vscp_setGUID:
  7890                           	opt stack 0
  7891                           tblptru	equ	0xFF8
  7892                           prodh	equ	0xFF4
  7893                           prodl	equ	0xFF3
  7894                           postinc0	equ	0xFEE
  7895                           wreg	equ	0xFE8
  7896                           indf2	equ	0xFDF
  7897                           postinc2	equ	0xFDE
  7898                           postdec2	equ	0xFDD
  7899                           fsr2h	equ	0xFDA
  7900                           fsr2l	equ	0xFD9
  7901                           status	equ	0xFD8
  7902                           
  7903 ;; *************** function _vscp_writeAppReg *****************
  7904 ;; Defined at:
  7905 ;;		line 976 in file "../main.c"
  7906 ;; Parameters:    Size  Location     Type
  7907 ;;  reg             1    wreg     unsigned char 
  7908 ;;  val             1   80[COMRAM] unsigned char 
  7909 ;; Auto vars:     Size  Location     Type
  7910 ;;  reg             1   29[BANK0 ] unsigned char 
  7911 ;;  val             1   26[BANK0 ] unsigned char 
  7912 ;;  rv              1   28[BANK0 ] unsigned char 
  7913 ;;  bOn             1   27[BANK0 ] enum E15660
  7914 ;;  bInfoEvent      1   25[BANK0 ] enum E15660
  7915 ;; Return value:  Size  Location     Type
  7916 ;;                  1    wreg      unsigned char 
  7917 ;; Registers used:
  7918 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7919 ;; Tracked objects:
  7920 ;;		On entry : F/0
  7921 ;;		On exit  : F/0
  7922 ;;		Unchanged: 0/0
  7923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7924 ;;      Params:         1       0       0       0       0       0       0
  7925 ;;      Locals:         0       5       0       0       0       0       0
  7926 ;;      Temps:          0       3       0       0       0       0       0
  7927 ;;      Totals:         1       8       0       0       0       0       0
  7928 ;;Total ram usage:        9 bytes
  7929 ;; Hardware stack levels used:    1
  7930 ;; Hardware stack levels required when called:    7
  7931 ;; This function calls:
  7932 ;;		_writeEEPROM
  7933 ;;		_readEEPROM
  7934 ;;		_SendInformationEvent
  7935 ;;		_calculateSetFilterMask
  7936 ;; This function is called by:
  7937 ;;		_vscp_writeRegister
  7938 ;;		_vscp_handleProtocolEvent
  7939 ;; This function uses a non-reentrant model
  7940 ;;
  7941                           
  7942                           	psect	text26
  7943  000622                     __ptext26:
  7944                           	opt stack 0
  7945  000622                     _vscp_writeAppReg:
  7946                           	opt stack 21
  7947                           
  7948                           ;incstack = 0
  7949                           ;incstack = 0
  7950                           ;vscp_writeAppReg@reg stored from wreg
  7951  000622  CFE8 F0CE          	movff	wreg,vscp_writeAppReg@reg
  7952                           
  7953                           ; BSR set to: 0
  7954                           ;main.c: 977: uint8_t rv;
  7955                           ;main.c: 978: BOOL bInfoEvent = 0;
  7956  000626  6BCA               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7957                           
  7958                           ;main.c: 979: BOOL bOn = 0;
  7959  000628  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  7960                           
  7961                           ; BSR set to: 0
  7962                           ;main.c: 981: rv = ~val;
  7963  00062A  1C51               	comf	vscp_writeAppReg@val,w,c
  7964  00062C  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  7965                           
  7966                           ; BSR set to: 0
  7967                           ;main.c: 984: if ( reg == 0 ) {
  7968  00062E  67CE               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  7969  000630  D00E               	goto	l9903
  7970                           
  7971                           ; BSR set to: 0
  7972                           ;main.c: 985: writeEEPROM(0x43 + 0, val);
  7973  000632  6A09               	clrf	?_writeEEPROM+1,c
  7974  000634  0E43               	movlw	67
  7975  000636  6E08               	movwf	?_writeEEPROM,c
  7976  000638  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  7977  00063C  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7978                           
  7979                           ;main.c: 986: rv = readEEPROM(0x43 + 0);
  7980  000640  6A09               	clrf	?_readEEPROM+1,c
  7981  000642  0E43               	movlw	67
  7982  000644  6E08               	movwf	?_readEEPROM,c
  7983  000646  EC86  F01F         	call	_readEEPROM	;wreg free
  7984  00064A  EFAD  F007         	goto	L25
  7985  00064E                     l9903:
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;main.c: 988: else if ( reg == 1 ) {
  7989  00064E  05CE               	decf	vscp_writeAppReg@reg& (0+255),w,b
  7990  000650  E10E               	bnz	l9907
  7991                           
  7992                           ; BSR set to: 0
  7993                           ;main.c: 990: writeEEPROM(0x43 + 1, val);
  7994  000652  6A09               	clrf	?_writeEEPROM+1,c
  7995  000654  0E44               	movlw	68
  7996  000656  6E08               	movwf	?_writeEEPROM,c
  7997  000658  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  7998  00065C  EC6A  F01E         	call	_writeEEPROM	;wreg free
  7999                           
  8000                           ;main.c: 991: rv = readEEPROM(0x43 + 1);
  8001  000660  6A09               	clrf	?_readEEPROM+1,c
  8002  000662  0E44               	movlw	68
  8003  000664  6E08               	movwf	?_readEEPROM,c
  8004  000666  EC86  F01F         	call	_readEEPROM	;wreg free
  8005  00066A  EFAD  F007         	goto	L25
  8006  00066E                     l9907:
  8007                           
  8008                           ; BSR set to: 0
  8009                           ;main.c: 994: else if ( (reg >= 2) && (reg <= 9) ) {
  8010  00066E  0E01               	movlw	1
  8011  000670  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8012  000672  D182               	goto	l10059
  8013                           
  8014                           ; BSR set to: 0
  8015  000674  0E0A               	movlw	10
  8016  000676  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8017  000678  D17F               	goto	l10059
  8018                           
  8019                           ; BSR set to: 0
  8020                           ;main.c: 996: if ( readEEPROM( 0x43 +
  8021                           ;main.c: 997: 10 + reg - 2 ) &
  8022                           ;main.c: 998: 0x80 ) {
  8023  00067A  0E4B               	movlw	75
  8024  00067C  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8025  00067E  6E08               	movwf	?_readEEPROM,c
  8026  000680  6A09               	clrf	?_readEEPROM+1,c
  8027  000682  0E00               	movlw	0
  8028  000684  2209               	addwfc	?_readEEPROM+1,f,c
  8029  000686  EC86  F01F         	call	_readEEPROM	;wreg free
  8030  00068A  0100               	movlb	0	; () banked
  8031  00068C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8032  00068E  BFC7               	btfsc	??_vscp_writeAppReg& (0+255),7,b
  8033  000690  D15E               	goto	l10057
  8034  000692  EFAF  F007         	goto	l10235
  8035  000696                     l9915:
  8036                           
  8037                           ; BSR set to: 0
  8038                           ;main.c: 1005: bInfoEvent = 1;
  8039  000696  0E01               	movlw	1
  8040  000698  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8041                           
  8042                           ; BSR set to: 0
  8043                           ;main.c: 1007: if ( 1 == val ) {
  8044  00069A  0451               	decf	vscp_writeAppReg@val,w,c
  8045  00069C  E128               	bnz	l302
  8046                           
  8047                           ; BSR set to: 0
  8048                           ;main.c: 1009: LATBbits.LATB4 = 1;
  8049  00069E  888A               	bsf	3978,4,c	;volatile
  8050                           
  8051                           ; BSR set to: 0
  8052                           ;main.c: 1010: rv = LATBbits.LATB4;
  8053  0006A0  0E00               	movlw	0
  8054  0006A2  B88A               	btfsc	3978,4,c	;volatile
  8055  0006A4  0E01               	movlw	1
  8056  0006A6  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8057                           
  8058                           ; BSR set to: 0
  8059                           ;main.c: 1011: bOn = 1;
  8060  0006A8  0E01               	movlw	1
  8061  0006AA  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;main.c: 1014: if ( readEEPROM( 0x43 + 10 ) & 0x04 ) {
  8065  0006AC  6A09               	clrf	?_readEEPROM+1,c
  8066  0006AE  0E4D               	movlw	77
  8067  0006B0  6E08               	movwf	?_readEEPROM,c
  8068  0006B2  EC86  F01F         	call	_readEEPROM	;wreg free
  8069  0006B6  0100               	movlb	0	; () banked
  8070  0006B8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8071  0006BA  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8072  0006BC  EFAF  F007         	goto	l10235
  8073  0006C0                     l9927:
  8074                           
  8075                           ; BSR set to: 0
  8076                           ;main.c: 1015: relay_protection_timer[ 0 ] =
  8077                           ;main.c: 1016: readEEPROM( 0x43 + 34 ) * 256 +
  8078                           ;main.c: 1017: readEEPROM( 0x43 + 35 );
  8079  0006C0  6A09               	clrf	?_readEEPROM+1,c
  8080  0006C2  0E66               	movlw	102
  8081  0006C4  6E08               	movwf	?_readEEPROM,c
  8082  0006C6  EC86  F01F         	call	_readEEPROM	;wreg free
  8083  0006CA  0100               	movlb	0	; () banked
  8084  0006CC  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8085  0006CE  6A09               	clrf	?_readEEPROM+1,c
  8086  0006D0  0E65               	movlw	101
  8087  0006D2  6E08               	movwf	?_readEEPROM,c
  8088  0006D4  EC86  F01F         	call	_readEEPROM	;wreg free
  8089  0006D8  0100               	movlb	0	; () banked
  8090  0006DA  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8091  0006DC  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8092  0006DE  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8093  0006E0  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8094  0006E2  6F60               	movwf	_relay_protection_timer& (0+255),b
  8095  0006E4  0E00               	movlw	0
  8096  0006E6  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8097  0006E8  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  8098  0006EA  EFAF  F007         	goto	l10235
  8099  0006EE                     l302:
  8100                           
  8101                           ; BSR set to: 0
  8102                           ;main.c: 1021: else if (0 == val) {
  8103  0006EE  6651               	tstfsz	vscp_writeAppReg@val,c
  8104  0006F0  EFAF  F007         	goto	l10235
  8105                           
  8106                           ; BSR set to: 0
  8107                           ;main.c: 1022: LATBbits.LATB4 = 0;
  8108  0006F4  988A               	bcf	3978,4,c	;volatile
  8109                           
  8110                           ; BSR set to: 0
  8111                           ;main.c: 1023: rv = LATBbits.LATB4;
  8112  0006F6  0E00               	movlw	0
  8113  0006F8  B88A               	btfsc	3978,4,c	;volatile
  8114  0006FA  0E01               	movlw	1
  8115  0006FC  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8116  0006FE                     l9933:
  8117                           
  8118                           ; BSR set to: 0
  8119                           ;main.c: 1024: bOn = 0;
  8120  0006FE  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8121  000700  EFAF  F007         	goto	l10235
  8122  000704                     l9935:
  8123                           
  8124                           ; BSR set to: 0
  8125                           ;main.c: 1031: bInfoEvent = 1;
  8126  000704  0E01               	movlw	1
  8127  000706  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8128                           
  8129                           ; BSR set to: 0
  8130                           ;main.c: 1033: if (1 == val) {
  8131  000708  0451               	decf	vscp_writeAppReg@val,w,c
  8132  00070A  E11E               	bnz	l308
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;main.c: 1035: LATBbits.LATB1 = 1;
  8136  00070C  828A               	bsf	3978,1,c	;volatile
  8137                           
  8138                           ; BSR set to: 0
  8139                           ;main.c: 1036: rv = LATBbits.LATB1;
  8140  00070E  0E00               	movlw	0
  8141  000710  B28A               	btfsc	3978,1,c	;volatile
  8142  000712  0E01               	movlw	1
  8143  000714  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;main.c: 1037: bOn = 1;
  8147  000716  0E01               	movlw	1
  8148  000718  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;main.c: 1039: if (readEEPROM(0x43 + 11) & 0x04) {
  8152  00071A  6A09               	clrf	?_readEEPROM+1,c
  8153  00071C  0E4E               	movlw	78
  8154  00071E  6E08               	movwf	?_readEEPROM,c
  8155  000720  EC86  F01F         	call	_readEEPROM	;wreg free
  8156  000724  0100               	movlb	0	; () banked
  8157  000726  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8158  000728  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8159  00072A  EFAF  F007         	goto	l10235
  8160  00072E                     l9947:
  8161                           
  8162                           ; BSR set to: 0
  8163                           ;main.c: 1040: relay_protection_timer[ 1 ] =
  8164                           ;main.c: 1041: readEEPROM(0x43 + 36) * 256 +
  8165                           ;main.c: 1042: readEEPROM(0x43 + 37);
  8166  00072E  6A09               	clrf	?_readEEPROM+1,c
  8167  000730  0E68               	movlw	104
  8168  000732  6E08               	movwf	?_readEEPROM,c
  8169  000734  EC86  F01F         	call	_readEEPROM	;wreg free
  8170  000738  0100               	movlb	0	; () banked
  8171  00073A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8172  00073C  6A09               	clrf	?_readEEPROM+1,c
  8173  00073E  0E67               	movlw	103
  8174  000740  6E08               	movwf	?_readEEPROM,c
  8175  000742  EC86  F01F         	call	_readEEPROM	;wreg free
  8176  000746  D18E               	goto	L26
  8177  000748                     l308:
  8178                           
  8179                           ; BSR set to: 0
  8180                           ;main.c: 1046: else if (0 == val) {
  8181  000748  6651               	tstfsz	vscp_writeAppReg@val,c
  8182  00074A  EFAF  F007         	goto	l10235
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;main.c: 1047: LATBbits.LATB1 = 0;
  8186  00074E  928A               	bcf	3978,1,c	;volatile
  8187                           
  8188                           ; BSR set to: 0
  8189                           ;main.c: 1048: rv = LATBbits.LATB1;
  8190  000750  0E00               	movlw	0
  8191  000752  B28A               	btfsc	3978,1,c	;volatile
  8192  000754  0E01               	movlw	1
  8193  000756  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8194  000758  D7D2               	goto	l9933
  8195  00075A                     l9955:
  8196                           
  8197                           ; BSR set to: 0
  8198                           ;main.c: 1056: bInfoEvent = 1;
  8199  00075A  0E01               	movlw	1
  8200  00075C  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;main.c: 1058: if (1 == val) {
  8204  00075E  0451               	decf	vscp_writeAppReg@val,w,c
  8205  000760  E126               	bnz	l313
  8206                           
  8207                           ; BSR set to: 0
  8208                           ;main.c: 1060: LATBbits.LATB0 = 1;
  8209  000762  808A               	bsf	3978,0,c	;volatile
  8210                           
  8211                           ; BSR set to: 0
  8212                           ;main.c: 1061: rv = LATBbits.LATB0;
  8213  000764  0E00               	movlw	0
  8214  000766  B08A               	btfsc	3978,0,c	;volatile
  8215  000768  0E01               	movlw	1
  8216  00076A  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8217                           
  8218                           ; BSR set to: 0
  8219                           ;main.c: 1062: bOn = 1;
  8220  00076C  0E01               	movlw	1
  8221  00076E  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8222                           
  8223                           ; BSR set to: 0
  8224                           ;main.c: 1064: if ( readEEPROM(0x43 + 12) & 0x04) {
  8225  000770  6A09               	clrf	?_readEEPROM+1,c
  8226  000772  0E4F               	movlw	79
  8227  000774  6E08               	movwf	?_readEEPROM,c
  8228  000776  EC86  F01F         	call	_readEEPROM	;wreg free
  8229  00077A  0100               	movlb	0	; () banked
  8230  00077C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8231  00077E  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8232  000780  D3EE               	goto	l10235
  8233  000782                     l9967:
  8234                           
  8235                           ; BSR set to: 0
  8236                           ;main.c: 1065: relay_protection_timer[ 2 ] =
  8237                           ;main.c: 1066: readEEPROM(0x43 + 38) * 256 +
  8238                           ;main.c: 1067: readEEPROM(0x43 + 39);
  8239  000782  6A09               	clrf	?_readEEPROM+1,c
  8240  000784  0E6A               	movlw	106
  8241  000786  6E08               	movwf	?_readEEPROM,c
  8242  000788  EC86  F01F         	call	_readEEPROM	;wreg free
  8243  00078C  0100               	movlb	0	; () banked
  8244  00078E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8245  000790  6A09               	clrf	?_readEEPROM+1,c
  8246  000792  0E69               	movlw	105
  8247  000794  6E08               	movwf	?_readEEPROM,c
  8248  000796  EC86  F01F         	call	_readEEPROM	;wreg free
  8249  00079A  0100               	movlb	0	; () banked
  8250  00079C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8251  00079E  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8252  0007A0  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8253  0007A2  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8254  0007A4  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  8255  0007A6  0E00               	movlw	0
  8256  0007A8  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8257  0007AA  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  8258  0007AC  D3D8               	goto	l10235
  8259  0007AE                     l313:
  8260                           
  8261                           ; BSR set to: 0
  8262                           ;main.c: 1071: else if (0 == val) {
  8263  0007AE  6651               	tstfsz	vscp_writeAppReg@val,c
  8264  0007B0  D3D6               	goto	l10235
  8265                           
  8266                           ; BSR set to: 0
  8267                           ;main.c: 1072: LATBbits.LATB0 = 0;
  8268  0007B2  908A               	bcf	3978,0,c	;volatile
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;main.c: 1073: rv = LATBbits.LATB0;
  8272  0007B4  0E00               	movlw	0
  8273  0007B6  B08A               	btfsc	3978,0,c	;volatile
  8274  0007B8  0E01               	movlw	1
  8275  0007BA  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8276  0007BC  D7A0               	goto	l9933
  8277  0007BE                     l9975:
  8278                           
  8279                           ; BSR set to: 0
  8280                           ;main.c: 1082: bInfoEvent = 1;
  8281  0007BE  0E01               	movlw	1
  8282  0007C0  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;main.c: 1084: if (1 == val) {
  8286  0007C2  0451               	decf	vscp_writeAppReg@val,w,c
  8287  0007C4  E126               	bnz	l318
  8288                           
  8289                           ; BSR set to: 0
  8290                           ;main.c: 1086: LATCbits.LATC7 = 1;
  8291  0007C6  8E8B               	bsf	3979,7,c	;volatile
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;main.c: 1087: rv = LATCbits.LATC7;
  8295  0007C8  0E00               	movlw	0
  8296  0007CA  BE8B               	btfsc	3979,7,c	;volatile
  8297  0007CC  0E01               	movlw	1
  8298  0007CE  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8299                           
  8300                           ; BSR set to: 0
  8301                           ;main.c: 1088: bOn = 1;
  8302  0007D0  0E01               	movlw	1
  8303  0007D2  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8304                           
  8305                           ; BSR set to: 0
  8306                           ;main.c: 1090: if (readEEPROM(0x43 + 13) & 0x04) {
  8307  0007D4  6A09               	clrf	?_readEEPROM+1,c
  8308  0007D6  0E50               	movlw	80
  8309  0007D8  6E08               	movwf	?_readEEPROM,c
  8310  0007DA  EC86  F01F         	call	_readEEPROM	;wreg free
  8311  0007DE  0100               	movlb	0	; () banked
  8312  0007E0  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8313  0007E2  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8314  0007E4  D3BC               	goto	l10235
  8315  0007E6                     l9987:
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;main.c: 1091: relay_protection_timer[ 3 ] =
  8319                           ;main.c: 1092: readEEPROM(0x43 + 40) * 256 +
  8320                           ;main.c: 1093: readEEPROM(0x43 + 41);
  8321  0007E6  6A09               	clrf	?_readEEPROM+1,c
  8322  0007E8  0E6C               	movlw	108
  8323  0007EA  6E08               	movwf	?_readEEPROM,c
  8324  0007EC  EC86  F01F         	call	_readEEPROM	;wreg free
  8325  0007F0  0100               	movlb	0	; () banked
  8326  0007F2  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8327  0007F4  6A09               	clrf	?_readEEPROM+1,c
  8328  0007F6  0E6B               	movlw	107
  8329  0007F8  6E08               	movwf	?_readEEPROM,c
  8330  0007FA  EC86  F01F         	call	_readEEPROM	;wreg free
  8331  0007FE  0100               	movlb	0	; () banked
  8332  000800  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8333  000802  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8334  000804  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8335  000806  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8336  000808  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  8337  00080A  0E00               	movlw	0
  8338  00080C  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8339  00080E  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  8340  000810  D3A6               	goto	l10235
  8341  000812                     l318:
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;main.c: 1097: else if (0 == val) {
  8345  000812  6651               	tstfsz	vscp_writeAppReg@val,c
  8346  000814  D3A4               	goto	l10235
  8347                           
  8348                           ; BSR set to: 0
  8349                           ;main.c: 1098: LATCbits.LATC7 = 0;
  8350  000816  9E8B               	bcf	3979,7,c	;volatile
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;main.c: 1099: rv = LATCbits.LATC7;
  8354  000818  0E00               	movlw	0
  8355  00081A  BE8B               	btfsc	3979,7,c	;volatile
  8356  00081C  0E01               	movlw	1
  8357  00081E  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8358  000820  D76E               	goto	l9933
  8359  000822                     l9995:
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;main.c: 1108: bInfoEvent = 1;
  8363  000822  0E01               	movlw	1
  8364  000824  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8365                           
  8366                           ; BSR set to: 0
  8367                           ;main.c: 1110: if (1 == val) {
  8368  000826  0451               	decf	vscp_writeAppReg@val,w,c
  8369  000828  E126               	bnz	l323
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;main.c: 1112: LATCbits.LATC6 = 1;
  8373  00082A  8C8B               	bsf	3979,6,c	;volatile
  8374                           
  8375                           ; BSR set to: 0
  8376                           ;main.c: 1113: rv = LATCbits.LATC6;
  8377  00082C  0E00               	movlw	0
  8378  00082E  BC8B               	btfsc	3979,6,c	;volatile
  8379  000830  0E01               	movlw	1
  8380  000832  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8381                           
  8382                           ; BSR set to: 0
  8383                           ;main.c: 1114: bOn = 1;
  8384  000834  0E01               	movlw	1
  8385  000836  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;main.c: 1116: if (readEEPROM(0x43 + 14) & 0x04) {
  8389  000838  6A09               	clrf	?_readEEPROM+1,c
  8390  00083A  0E51               	movlw	81
  8391  00083C  6E08               	movwf	?_readEEPROM,c
  8392  00083E  EC86  F01F         	call	_readEEPROM	;wreg free
  8393  000842  0100               	movlb	0	; () banked
  8394  000844  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8395  000846  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8396  000848  D38A               	goto	l10235
  8397  00084A                     l10007:
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;main.c: 1117: relay_protection_timer[ 4 ] =
  8401                           ;main.c: 1118: readEEPROM(0x43 + 42) * 256 +
  8402                           ;main.c: 1119: readEEPROM(0x43 + 43);
  8403  00084A  6A09               	clrf	?_readEEPROM+1,c
  8404  00084C  0E6E               	movlw	110
  8405  00084E  6E08               	movwf	?_readEEPROM,c
  8406  000850  EC86  F01F         	call	_readEEPROM	;wreg free
  8407  000854  0100               	movlb	0	; () banked
  8408  000856  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8409  000858  6A09               	clrf	?_readEEPROM+1,c
  8410  00085A  0E6D               	movlw	109
  8411  00085C  6E08               	movwf	?_readEEPROM,c
  8412  00085E  EC86  F01F         	call	_readEEPROM	;wreg free
  8413  000862  0100               	movlb	0	; () banked
  8414  000864  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8415  000866  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8416  000868  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8417  00086A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8418  00086C  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  8419  00086E  0E00               	movlw	0
  8420  000870  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8421  000872  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  8422  000874  D374               	goto	l10235
  8423  000876                     l323:
  8424                           
  8425                           ; BSR set to: 0
  8426                           ;main.c: 1123: else if (0 == val) {
  8427  000876  6651               	tstfsz	vscp_writeAppReg@val,c
  8428  000878  D372               	goto	l10235
  8429                           
  8430                           ; BSR set to: 0
  8431                           ;main.c: 1124: LATCbits.LATC6 = 0;
  8432  00087A  9C8B               	bcf	3979,6,c	;volatile
  8433                           
  8434                           ; BSR set to: 0
  8435                           ;main.c: 1125: rv = LATCbits.LATC6;
  8436  00087C  0E00               	movlw	0
  8437  00087E  BC8B               	btfsc	3979,6,c	;volatile
  8438  000880  0E01               	movlw	1
  8439  000882  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8440  000884  D73C               	goto	l9933
  8441  000886                     l10015:
  8442                           
  8443                           ; BSR set to: 0
  8444                           ;main.c: 1134: bInfoEvent = 1;
  8445  000886  0E01               	movlw	1
  8446  000888  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;main.c: 1136: if (1 == val) {
  8450  00088A  0451               	decf	vscp_writeAppReg@val,w,c
  8451  00088C  E126               	bnz	l328
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;main.c: 1138: LATCbits.LATC5 = 1;
  8455  00088E  8A8B               	bsf	3979,5,c	;volatile
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;main.c: 1139: rv = LATCbits.LATC5;
  8459  000890  0E00               	movlw	0
  8460  000892  BA8B               	btfsc	3979,5,c	;volatile
  8461  000894  0E01               	movlw	1
  8462  000896  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8463                           
  8464                           ; BSR set to: 0
  8465                           ;main.c: 1140: bOn = 1;
  8466  000898  0E01               	movlw	1
  8467  00089A  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8468                           
  8469                           ; BSR set to: 0
  8470                           ;main.c: 1142: if (readEEPROM(0x43 + 15) & 0x04) {
  8471  00089C  6A09               	clrf	?_readEEPROM+1,c
  8472  00089E  0E52               	movlw	82
  8473  0008A0  6E08               	movwf	?_readEEPROM,c
  8474  0008A2  EC86  F01F         	call	_readEEPROM	;wreg free
  8475  0008A6  0100               	movlb	0	; () banked
  8476  0008A8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8477  0008AA  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8478  0008AC  D358               	goto	l10235
  8479  0008AE                     l10027:
  8480                           
  8481                           ; BSR set to: 0
  8482                           ;main.c: 1143: relay_protection_timer[ 5 ] =
  8483                           ;main.c: 1144: readEEPROM(0x43 + 44) * 256 +
  8484                           ;main.c: 1145: readEEPROM(0x43 + 45);
  8485  0008AE  6A09               	clrf	?_readEEPROM+1,c
  8486  0008B0  0E70               	movlw	112
  8487  0008B2  6E08               	movwf	?_readEEPROM,c
  8488  0008B4  EC86  F01F         	call	_readEEPROM	;wreg free
  8489  0008B8  0100               	movlb	0	; () banked
  8490  0008BA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8491  0008BC  6A09               	clrf	?_readEEPROM+1,c
  8492  0008BE  0E6F               	movlw	111
  8493  0008C0  6E08               	movwf	?_readEEPROM,c
  8494  0008C2  EC86  F01F         	call	_readEEPROM	;wreg free
  8495  0008C6  0100               	movlb	0	; () banked
  8496  0008C8  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8497  0008CA  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8498  0008CC  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8499  0008CE  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8500  0008D0  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  8501  0008D2  0E00               	movlw	0
  8502  0008D4  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8503  0008D6  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  8504  0008D8  D342               	goto	l10235
  8505  0008DA                     l328:
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;main.c: 1149: else if (0 == val) {
  8509  0008DA  6651               	tstfsz	vscp_writeAppReg@val,c
  8510  0008DC  D340               	goto	l10235
  8511                           
  8512                           ; BSR set to: 0
  8513                           ;main.c: 1150: LATCbits.LATC5 = 0;
  8514  0008DE  9A8B               	bcf	3979,5,c	;volatile
  8515                           
  8516                           ; BSR set to: 0
  8517                           ;main.c: 1151: rv = LATCbits.LATC5;
  8518  0008E0  0E00               	movlw	0
  8519  0008E2  BA8B               	btfsc	3979,5,c	;volatile
  8520  0008E4  0E01               	movlw	1
  8521  0008E6  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8522  0008E8  D70A               	goto	l9933
  8523  0008EA                     l10035:
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;main.c: 1159: bInfoEvent = 1;
  8527  0008EA  0E01               	movlw	1
  8528  0008EC  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;main.c: 1161: if (1 == val) {
  8532  0008EE  0451               	decf	vscp_writeAppReg@val,w,c
  8533  0008F0  E126               	bnz	l333
  8534                           
  8535                           ; BSR set to: 0
  8536                           ;main.c: 1163: LATCbits.LATC4 = 1;
  8537  0008F2  888B               	bsf	3979,4,c	;volatile
  8538                           
  8539                           ; BSR set to: 0
  8540                           ;main.c: 1164: rv = LATCbits.LATC4;
  8541  0008F4  0E00               	movlw	0
  8542  0008F6  B88B               	btfsc	3979,4,c	;volatile
  8543  0008F8  0E01               	movlw	1
  8544  0008FA  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8545                           
  8546                           ; BSR set to: 0
  8547                           ;main.c: 1165: bOn = 1;
  8548  0008FC  0E01               	movlw	1
  8549  0008FE  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8550                           
  8551                           ; BSR set to: 0
  8552                           ;main.c: 1167: if (readEEPROM(0x43 + 16) & 0x04) {
  8553  000900  6A09               	clrf	?_readEEPROM+1,c
  8554  000902  0E53               	movlw	83
  8555  000904  6E08               	movwf	?_readEEPROM,c
  8556  000906  EC86  F01F         	call	_readEEPROM	;wreg free
  8557  00090A  0100               	movlb	0	; () banked
  8558  00090C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8559  00090E  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8560  000910  D326               	goto	l10235
  8561  000912                     l10047:
  8562                           
  8563                           ; BSR set to: 0
  8564                           ;main.c: 1168: relay_protection_timer[ 6 ] =
  8565                           ;main.c: 1169: readEEPROM(0x43 + 46) * 256 +
  8566                           ;main.c: 1170: readEEPROM(0x43 + 47);
  8567  000912  6A09               	clrf	?_readEEPROM+1,c
  8568  000914  0E72               	movlw	114
  8569  000916  6E08               	movwf	?_readEEPROM,c
  8570  000918  EC86  F01F         	call	_readEEPROM	;wreg free
  8571  00091C  0100               	movlb	0	; () banked
  8572  00091E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8573  000920  6A09               	clrf	?_readEEPROM+1,c
  8574  000922  0E71               	movlw	113
  8575  000924  6E08               	movwf	?_readEEPROM,c
  8576  000926  EC86  F01F         	call	_readEEPROM	;wreg free
  8577  00092A  0100               	movlb	0	; () banked
  8578  00092C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8579  00092E  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8580  000930  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8581  000932  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8582  000934  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  8583  000936  0E00               	movlw	0
  8584  000938  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8585  00093A  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  8586  00093C  D310               	goto	l10235
  8587  00093E                     l333:
  8588                           
  8589                           ; BSR set to: 0
  8590                           ;main.c: 1174: else if (0 == val) {
  8591  00093E  6651               	tstfsz	vscp_writeAppReg@val,c
  8592  000940  D30E               	goto	l10235
  8593                           
  8594                           ; BSR set to: 0
  8595                           ;main.c: 1175: LATCbits.LATC4 = 0;
  8596  000942  988B               	bcf	3979,4,c	;volatile
  8597                           
  8598                           ; BSR set to: 0
  8599                           ;main.c: 1176: rv = LATCbits.LATC4;
  8600  000944  0E00               	movlw	0
  8601  000946  B88B               	btfsc	3979,4,c	;volatile
  8602  000948  0E01               	movlw	1
  8603  00094A  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8604  00094C  D6D8               	goto	l9933
  8605  00094E                     l10057:
  8606                           
  8607                           ; BSR set to: 0
  8608  00094E  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8609                           
  8610                           ; Switch size 1, requested type "speed"
  8611                           ; Number of cases is 7, Range of values is 2 to 8
  8612                           ; switch strategies available:
  8613                           ; Name         Instructions Cycles
  8614                           ; simple_byte           22    12 (average)
  8615                           ;	Chosen strategy is simple_byte
  8616  000950  0A02               	xorlw	2	; case 2
  8617  000952  E101 D6A0          	bz	l9915
  8618  000956  0A01               	xorlw	1	; case 3
  8619  000958  E101 D6D4          	bz	l9935
  8620  00095C  0A07               	xorlw	7	; case 4
  8621  00095E  E101 D6FC          	bz	l9955
  8622  000962  0A01               	xorlw	1	; case 5
  8623  000964  E101 D72B          	bz	l9975
  8624  000968  0A03               	xorlw	3	; case 6
  8625  00096A  E101 D75A          	bz	l9995
  8626  00096E  0A01               	xorlw	1	; case 7
  8627  000970  E08A               	bz	l10015
  8628  000972  0A0F               	xorlw	15	; case 8
  8629  000974  E0BA               	bz	l10035
  8630                           
  8631                           ; BSR set to: 0
  8632                           ;main.c: 1182: }
  8633                           ;main.c: 1183: }
  8634  000976  D2F3               	goto	l10235
  8635  000978                     l10059:
  8636                           
  8637                           ; BSR set to: 0
  8638                           ;main.c: 1186: else if ( (reg >= 10 ) &&
  8639                           ;main.c: 1187: (reg <= 17) ) {
  8640  000978  0E09               	movlw	9
  8641  00097A  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8642  00097C  D18C               	goto	l10167
  8643                           
  8644                           ; BSR set to: 0
  8645  00097E  0E12               	movlw	18
  8646  000980  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8647  000982  D189               	goto	l10167
  8648  000984  D173               	goto	l10165
  8649  000986                     l10065:
  8650                           
  8651                           ; BSR set to: 0
  8652                           ;main.c: 1193: writeEEPROM( 0x43 + reg, val );
  8653  000986  0E43               	movlw	67
  8654  000988  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8655  00098A  6E08               	movwf	?_writeEEPROM,c
  8656  00098C  6A09               	clrf	?_writeEEPROM+1,c
  8657  00098E  0E00               	movlw	0
  8658  000990  2209               	addwfc	?_writeEEPROM+1,f,c
  8659  000992  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8660  000996  EC6A  F01E         	call	_writeEEPROM	;wreg free
  8661                           
  8662                           ;main.c: 1194: rv = readEEPROM( 0x43 + reg );
  8663  00099A  0E43               	movlw	67
  8664  00099C  0100               	movlb	0	; () banked
  8665  00099E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8666  0009A0  6E08               	movwf	?_readEEPROM,c
  8667  0009A2  6A09               	clrf	?_readEEPROM+1,c
  8668  0009A4  0E00               	movlw	0
  8669  0009A6  2209               	addwfc	?_readEEPROM+1,f,c
  8670  0009A8  EC86  F01F         	call	_readEEPROM	;wreg free
  8671  0009AC  0100               	movlb	0	; () banked
  8672  0009AE  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8673                           
  8674                           ; BSR set to: 0
  8675                           ;main.c: 1196: if ( val & 0x01 ) {
  8676  0009B0  A051               	btfss	vscp_writeAppReg@val,0,c
  8677  0009B2  D018               	goto	l10075
  8678                           
  8679                           ; BSR set to: 0
  8680                           ;main.c: 1198: LATBbits.LATB4 = 0;
  8681  0009B4  988A               	bcf	3978,4,c	;volatile
  8682                           
  8683                           ;main.c: 1199: bOn = 0;
  8684  0009B6  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8685                           
  8686                           ; BSR set to: 0
  8687                           ;main.c: 1201: relay_pulse_flags |= 0x01;
  8688  0009B8  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  8689                           
  8690                           ; BSR set to: 0
  8691                           ;main.c: 1202: relay_pulse_timer[ 0 ] =
  8692                           ;main.c: 1203: readEEPROM( 0x43 + 18 ) * 256 +
  8693                           ;main.c: 1204: readEEPROM( 0x43 + 19 );
  8694  0009BA  6A09               	clrf	?_readEEPROM+1,c
  8695  0009BC  0E56               	movlw	86
  8696  0009BE  6E08               	movwf	?_readEEPROM,c
  8697  0009C0  EC86  F01F         	call	_readEEPROM	;wreg free
  8698  0009C4  0100               	movlb	0	; () banked
  8699  0009C6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8700  0009C8  6A09               	clrf	?_readEEPROM+1,c
  8701  0009CA  0E55               	movlw	85
  8702  0009CC  6E08               	movwf	?_readEEPROM,c
  8703  0009CE  EC86  F01F         	call	_readEEPROM	;wreg free
  8704  0009D2  0100               	movlb	0	; () banked
  8705  0009D4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8706  0009D6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8707  0009D8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8708  0009DA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8709  0009DC  6F70               	movwf	_relay_pulse_timer& (0+255),b
  8710  0009DE  0E00               	movlw	0
  8711  0009E0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8712  0009E2  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  8713  0009E4                     l10075:
  8714                           
  8715                           ; BSR set to: 0
  8716                           ;main.c: 1205: }
  8717                           ;main.c: 1207: if ( val & 0x04 ) {
  8718  0009E4  B451               	btfsc	vscp_writeAppReg@val,2,c
  8719  0009E6  D66C               	goto	l9927
  8720  0009E8  D2BA               	goto	l10235
  8721  0009EA                     l10079:
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;main.c: 1216: writeEEPROM( 0x43 + reg, val );
  8725  0009EA  0E43               	movlw	67
  8726  0009EC  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8727  0009EE  6E08               	movwf	?_writeEEPROM,c
  8728  0009F0  6A09               	clrf	?_writeEEPROM+1,c
  8729  0009F2  0E00               	movlw	0
  8730  0009F4  2209               	addwfc	?_writeEEPROM+1,f,c
  8731  0009F6  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8732  0009FA  EC6A  F01E         	call	_writeEEPROM	;wreg free
  8733                           
  8734                           ;main.c: 1217: rv = readEEPROM( 0x43 + reg );
  8735  0009FE  0E43               	movlw	67
  8736  000A00  0100               	movlb	0	; () banked
  8737  000A02  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8738  000A04  6E08               	movwf	?_readEEPROM,c
  8739  000A06  6A09               	clrf	?_readEEPROM+1,c
  8740  000A08  0E00               	movlw	0
  8741  000A0A  2209               	addwfc	?_readEEPROM+1,f,c
  8742  000A0C  EC86  F01F         	call	_readEEPROM	;wreg free
  8743  000A10  0100               	movlb	0	; () banked
  8744  000A12  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8745                           
  8746                           ; BSR set to: 0
  8747                           ;main.c: 1219: if ( val & 0x01 ) {
  8748  000A14  A051               	btfss	vscp_writeAppReg@val,0,c
  8749  000A16  D018               	goto	l10089
  8750                           
  8751                           ; BSR set to: 0
  8752                           ;main.c: 1221: LATBbits.LATB1 = 0;
  8753  000A18  928A               	bcf	3978,1,c	;volatile
  8754                           
  8755                           ;main.c: 1222: bOn = 0;
  8756  000A1A  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8757                           
  8758                           ; BSR set to: 0
  8759                           ;main.c: 1224: relay_pulse_flags |= 0x02;
  8760  000A1C  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  8761                           
  8762                           ; BSR set to: 0
  8763                           ;main.c: 1225: relay_pulse_timer[ 1 ] =
  8764                           ;main.c: 1226: readEEPROM( 0x43 + 18) * 256 +
  8765                           ;main.c: 1227: readEEPROM( 0x43 + 19);
  8766  000A1E  6A09               	clrf	?_readEEPROM+1,c
  8767  000A20  0E56               	movlw	86
  8768  000A22  6E08               	movwf	?_readEEPROM,c
  8769  000A24  EC86  F01F         	call	_readEEPROM	;wreg free
  8770  000A28  0100               	movlb	0	; () banked
  8771  000A2A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8772  000A2C  6A09               	clrf	?_readEEPROM+1,c
  8773  000A2E  0E55               	movlw	85
  8774  000A30  6E08               	movwf	?_readEEPROM,c
  8775  000A32  EC86  F01F         	call	_readEEPROM	;wreg free
  8776  000A36  0100               	movlb	0	; () banked
  8777  000A38  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8778  000A3A  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8779  000A3C  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8780  000A3E  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8781  000A40  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  8782  000A42  0E00               	movlw	0
  8783  000A44  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8784  000A46  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  8785  000A48                     l10089:
  8786                           
  8787                           ; BSR set to: 0
  8788                           ;main.c: 1228: }
  8789                           ;main.c: 1230: if ( val & 0x04 ) {
  8790  000A48  A451               	btfss	vscp_writeAppReg@val,2,c
  8791  000A4A  D289               	goto	l10235
  8792                           
  8793                           ; BSR set to: 0
  8794                           ;main.c: 1231: relay_protection_timer[ 1 ] =
  8795                           ;main.c: 1232: readEEPROM( 0x43 + 34 ) * 256 +
  8796                           ;main.c: 1233: readEEPROM( 0x43 + 35 );
  8797  000A4C  6A09               	clrf	?_readEEPROM+1,c
  8798  000A4E  0E66               	movlw	102
  8799  000A50  6E08               	movwf	?_readEEPROM,c
  8800  000A52  EC86  F01F         	call	_readEEPROM	;wreg free
  8801  000A56  0100               	movlb	0	; () banked
  8802  000A58  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8803  000A5A  6A09               	clrf	?_readEEPROM+1,c
  8804  000A5C  0E65               	movlw	101
  8805  000A5E  6E08               	movwf	?_readEEPROM,c
  8806  000A60  EC86  F01F         	call	_readEEPROM	;wreg free
  8807  000A64                     L26:
  8808  000A64  0100               	movlb	0	; () banked
  8809  000A66  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8810  000A68  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8811  000A6A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8812  000A6C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8813  000A6E  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  8814  000A70  0E00               	movlw	0
  8815  000A72  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8816  000A74  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  8817  000A76  D273               	goto	l10235
  8818  000A78                     l10093:
  8819                           
  8820                           ; BSR set to: 0
  8821                           ;main.c: 1239: writeEEPROM( 0x43 + reg, val );
  8822  000A78  0E43               	movlw	67
  8823  000A7A  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8824  000A7C  6E08               	movwf	?_writeEEPROM,c
  8825  000A7E  6A09               	clrf	?_writeEEPROM+1,c
  8826  000A80  0E00               	movlw	0
  8827  000A82  2209               	addwfc	?_writeEEPROM+1,f,c
  8828  000A84  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8829  000A88  EC6A  F01E         	call	_writeEEPROM	;wreg free
  8830                           
  8831                           ;main.c: 1240: rv = readEEPROM( 0x43 + reg );
  8832  000A8C  0E43               	movlw	67
  8833  000A8E  0100               	movlb	0	; () banked
  8834  000A90  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8835  000A92  6E08               	movwf	?_readEEPROM,c
  8836  000A94  6A09               	clrf	?_readEEPROM+1,c
  8837  000A96  0E00               	movlw	0
  8838  000A98  2209               	addwfc	?_readEEPROM+1,f,c
  8839  000A9A  EC86  F01F         	call	_readEEPROM	;wreg free
  8840  000A9E  0100               	movlb	0	; () banked
  8841  000AA0  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8842                           
  8843                           ; BSR set to: 0
  8844                           ;main.c: 1242: if ( val & 0x01 ) {
  8845  000AA2  A051               	btfss	vscp_writeAppReg@val,0,c
  8846  000AA4  D018               	goto	l10103
  8847                           
  8848                           ; BSR set to: 0
  8849                           ;main.c: 1244: LATBbits.LATB0 = 0;
  8850  000AA6  908A               	bcf	3978,0,c	;volatile
  8851                           
  8852                           ;main.c: 1245: bOn = 0;
  8853  000AA8  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8854                           
  8855                           ; BSR set to: 0
  8856                           ;main.c: 1247: relay_pulse_flags |= 0x04;
  8857  000AAA  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  8858                           
  8859                           ; BSR set to: 0
  8860                           ;main.c: 1248: relay_pulse_timer[ 2 ] =
  8861                           ;main.c: 1249: readEEPROM( 0x43 + 22) * 256 +
  8862                           ;main.c: 1250: readEEPROM( 0x43 + 23);
  8863  000AAC  6A09               	clrf	?_readEEPROM+1,c
  8864  000AAE  0E5A               	movlw	90
  8865  000AB0  6E08               	movwf	?_readEEPROM,c
  8866  000AB2  EC86  F01F         	call	_readEEPROM	;wreg free
  8867  000AB6  0100               	movlb	0	; () banked
  8868  000AB8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8869  000ABA  6A09               	clrf	?_readEEPROM+1,c
  8870  000ABC  0E59               	movlw	89
  8871  000ABE  6E08               	movwf	?_readEEPROM,c
  8872  000AC0  EC86  F01F         	call	_readEEPROM	;wreg free
  8873  000AC4  0100               	movlb	0	; () banked
  8874  000AC6  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8875  000AC8  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8876  000ACA  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8877  000ACC  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8878  000ACE  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  8879  000AD0  0E00               	movlw	0
  8880  000AD2  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8881  000AD4  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  8882  000AD6                     l10103:
  8883                           
  8884                           ; BSR set to: 0
  8885                           ;main.c: 1251: }
  8886                           ;main.c: 1253: if ( val & 0x04 ) {
  8887  000AD6  B451               	btfsc	vscp_writeAppReg@val,2,c
  8888  000AD8  D654               	goto	l9967
  8889  000ADA  D241               	goto	l10235
  8890  000ADC                     l10107:
  8891                           
  8892                           ; BSR set to: 0
  8893                           ;main.c: 1262: writeEEPROM( 0x43 + reg, val );
  8894  000ADC  0E43               	movlw	67
  8895  000ADE  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8896  000AE0  6E08               	movwf	?_writeEEPROM,c
  8897  000AE2  6A09               	clrf	?_writeEEPROM+1,c
  8898  000AE4  0E00               	movlw	0
  8899  000AE6  2209               	addwfc	?_writeEEPROM+1,f,c
  8900  000AE8  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8901  000AEC  EC6A  F01E         	call	_writeEEPROM	;wreg free
  8902                           
  8903                           ;main.c: 1263: rv = readEEPROM( 0x43 + reg );
  8904  000AF0  0E43               	movlw	67
  8905  000AF2  0100               	movlb	0	; () banked
  8906  000AF4  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8907  000AF6  6E08               	movwf	?_readEEPROM,c
  8908  000AF8  6A09               	clrf	?_readEEPROM+1,c
  8909  000AFA  0E00               	movlw	0
  8910  000AFC  2209               	addwfc	?_readEEPROM+1,f,c
  8911  000AFE  EC86  F01F         	call	_readEEPROM	;wreg free
  8912  000B02  0100               	movlb	0	; () banked
  8913  000B04  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8914                           
  8915                           ; BSR set to: 0
  8916                           ;main.c: 1265: if ( val & 0x01 ) {
  8917  000B06  A051               	btfss	vscp_writeAppReg@val,0,c
  8918  000B08  D018               	goto	l10117
  8919                           
  8920                           ; BSR set to: 0
  8921                           ;main.c: 1267: LATCbits.LATC7 = 0;
  8922  000B0A  9E8B               	bcf	3979,7,c	;volatile
  8923                           
  8924                           ;main.c: 1268: bOn = 0;
  8925  000B0C  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;main.c: 1270: relay_pulse_flags |= 0x08;
  8929  000B0E  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  8930                           
  8931                           ; BSR set to: 0
  8932                           ;main.c: 1271: relay_pulse_timer[ 3 ] =
  8933                           ;main.c: 1272: readEEPROM( 0x43 + 24) * 256 +
  8934                           ;main.c: 1273: readEEPROM( 0x43 + 25);
  8935  000B10  6A09               	clrf	?_readEEPROM+1,c
  8936  000B12  0E5C               	movlw	92
  8937  000B14  6E08               	movwf	?_readEEPROM,c
  8938  000B16  EC86  F01F         	call	_readEEPROM	;wreg free
  8939  000B1A  0100               	movlb	0	; () banked
  8940  000B1C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8941  000B1E  6A09               	clrf	?_readEEPROM+1,c
  8942  000B20  0E5B               	movlw	91
  8943  000B22  6E08               	movwf	?_readEEPROM,c
  8944  000B24  EC86  F01F         	call	_readEEPROM	;wreg free
  8945  000B28  0100               	movlb	0	; () banked
  8946  000B2A  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8947  000B2C  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8948  000B2E  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8949  000B30  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8950  000B32  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  8951  000B34  0E00               	movlw	0
  8952  000B36  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8953  000B38  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  8954  000B3A                     l10117:
  8955                           
  8956                           ; BSR set to: 0
  8957                           ;main.c: 1274: }
  8958                           ;main.c: 1276: if ( val & 0x04 ) {
  8959  000B3A  B451               	btfsc	vscp_writeAppReg@val,2,c
  8960  000B3C  D654               	goto	l9987
  8961  000B3E  D20F               	goto	l10235
  8962  000B40                     l10121:
  8963                           
  8964                           ; BSR set to: 0
  8965                           ;main.c: 1285: writeEEPROM( 0x43 + reg, val );
  8966  000B40  0E43               	movlw	67
  8967  000B42  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8968  000B44  6E08               	movwf	?_writeEEPROM,c
  8969  000B46  6A09               	clrf	?_writeEEPROM+1,c
  8970  000B48  0E00               	movlw	0
  8971  000B4A  2209               	addwfc	?_writeEEPROM+1,f,c
  8972  000B4C  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8973  000B50  EC6A  F01E         	call	_writeEEPROM	;wreg free
  8974                           
  8975                           ;main.c: 1286: rv = readEEPROM( 0x43 + reg );
  8976  000B54  0E43               	movlw	67
  8977  000B56  0100               	movlb	0	; () banked
  8978  000B58  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8979  000B5A  6E08               	movwf	?_readEEPROM,c
  8980  000B5C  6A09               	clrf	?_readEEPROM+1,c
  8981  000B5E  0E00               	movlw	0
  8982  000B60  2209               	addwfc	?_readEEPROM+1,f,c
  8983  000B62  EC86  F01F         	call	_readEEPROM	;wreg free
  8984  000B66  0100               	movlb	0	; () banked
  8985  000B68  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8986                           
  8987                           ; BSR set to: 0
  8988                           ;main.c: 1288: if ( val & 0x01 ) {
  8989  000B6A  A051               	btfss	vscp_writeAppReg@val,0,c
  8990  000B6C  D018               	goto	l10131
  8991                           
  8992                           ; BSR set to: 0
  8993                           ;main.c: 1290: LATCbits.LATC6 = 0;
  8994  000B6E  9C8B               	bcf	3979,6,c	;volatile
  8995                           
  8996                           ;main.c: 1291: bOn = 0;
  8997  000B70  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8998                           
  8999                           ; BSR set to: 0
  9000                           ;main.c: 1293: relay_pulse_flags |= 0x10;
  9001  000B72  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  9002                           
  9003                           ; BSR set to: 0
  9004                           ;main.c: 1294: relay_pulse_timer[ 4 ] =
  9005                           ;main.c: 1295: readEEPROM( 0x43 + 26) * 256 +
  9006                           ;main.c: 1296: readEEPROM( 0x43 + 27);
  9007  000B74  6A09               	clrf	?_readEEPROM+1,c
  9008  000B76  0E5E               	movlw	94
  9009  000B78  6E08               	movwf	?_readEEPROM,c
  9010  000B7A  EC86  F01F         	call	_readEEPROM	;wreg free
  9011  000B7E  0100               	movlb	0	; () banked
  9012  000B80  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9013  000B82  6A09               	clrf	?_readEEPROM+1,c
  9014  000B84  0E5D               	movlw	93
  9015  000B86  6E08               	movwf	?_readEEPROM,c
  9016  000B88  EC86  F01F         	call	_readEEPROM	;wreg free
  9017  000B8C  0100               	movlb	0	; () banked
  9018  000B8E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9019  000B90  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9020  000B92  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9021  000B94  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9022  000B96  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9023  000B98  0E00               	movlw	0
  9024  000B9A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9025  000B9C  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9026  000B9E                     l10131:
  9027                           
  9028                           ; BSR set to: 0
  9029                           ;main.c: 1297: }
  9030                           ;main.c: 1299: if ( val & 0x04 ) {
  9031  000B9E  B451               	btfsc	vscp_writeAppReg@val,2,c
  9032  000BA0  D654               	goto	l10007
  9033  000BA2  D1DD               	goto	l10235
  9034  000BA4                     l10135:
  9035                           
  9036                           ; BSR set to: 0
  9037                           ;main.c: 1308: writeEEPROM( 0x43 + reg, val );
  9038  000BA4  0E43               	movlw	67
  9039  000BA6  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9040  000BA8  6E08               	movwf	?_writeEEPROM,c
  9041  000BAA  6A09               	clrf	?_writeEEPROM+1,c
  9042  000BAC  0E00               	movlw	0
  9043  000BAE  2209               	addwfc	?_writeEEPROM+1,f,c
  9044  000BB0  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9045  000BB4  EC6A  F01E         	call	_writeEEPROM	;wreg free
  9046                           
  9047                           ;main.c: 1309: rv = readEEPROM( 0x43 + reg );
  9048  000BB8  0E43               	movlw	67
  9049  000BBA  0100               	movlb	0	; () banked
  9050  000BBC  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9051  000BBE  6E08               	movwf	?_readEEPROM,c
  9052  000BC0  6A09               	clrf	?_readEEPROM+1,c
  9053  000BC2  0E00               	movlw	0
  9054  000BC4  2209               	addwfc	?_readEEPROM+1,f,c
  9055  000BC6  EC86  F01F         	call	_readEEPROM	;wreg free
  9056  000BCA  0100               	movlb	0	; () banked
  9057  000BCC  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9058                           
  9059                           ; BSR set to: 0
  9060                           ;main.c: 1311: if ( val & 0x01 ) {
  9061  000BCE  A051               	btfss	vscp_writeAppReg@val,0,c
  9062  000BD0  D018               	goto	l10145
  9063                           
  9064                           ; BSR set to: 0
  9065                           ;main.c: 1313: LATCbits.LATC5 = 0;
  9066  000BD2  9A8B               	bcf	3979,5,c	;volatile
  9067                           
  9068                           ;main.c: 1314: bOn = 0;
  9069  000BD4  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9070                           
  9071                           ; BSR set to: 0
  9072                           ;main.c: 1316: relay_pulse_flags |= 0x20;
  9073  000BD6  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  9074                           
  9075                           ; BSR set to: 0
  9076                           ;main.c: 1317: relay_pulse_timer[ 5 ] =
  9077                           ;main.c: 1318: readEEPROM( 0x43 + 28) * 256 +
  9078                           ;main.c: 1319: readEEPROM( 0x43 + 29);
  9079  000BD8  6A09               	clrf	?_readEEPROM+1,c
  9080  000BDA  0E60               	movlw	96
  9081  000BDC  6E08               	movwf	?_readEEPROM,c
  9082  000BDE  EC86  F01F         	call	_readEEPROM	;wreg free
  9083  000BE2  0100               	movlb	0	; () banked
  9084  000BE4  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9085  000BE6  6A09               	clrf	?_readEEPROM+1,c
  9086  000BE8  0E5F               	movlw	95
  9087  000BEA  6E08               	movwf	?_readEEPROM,c
  9088  000BEC  EC86  F01F         	call	_readEEPROM	;wreg free
  9089  000BF0  0100               	movlb	0	; () banked
  9090  000BF2  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9091  000BF4  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9092  000BF6  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9093  000BF8  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9094  000BFA  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9095  000BFC  0E00               	movlw	0
  9096  000BFE  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9097  000C00  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9098  000C02                     l10145:
  9099                           
  9100                           ; BSR set to: 0
  9101                           ;main.c: 1320: }
  9102                           ;main.c: 1322: if ( val & 0x04 ) {
  9103  000C02  B451               	btfsc	vscp_writeAppReg@val,2,c
  9104  000C04  D654               	goto	l10027
  9105  000C06  D1AB               	goto	l10235
  9106  000C08                     l10149:
  9107                           
  9108                           ; BSR set to: 0
  9109                           ;main.c: 1331: writeEEPROM( 0x43 + reg, val );
  9110  000C08  0E43               	movlw	67
  9111  000C0A  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9112  000C0C  6E08               	movwf	?_writeEEPROM,c
  9113  000C0E  6A09               	clrf	?_writeEEPROM+1,c
  9114  000C10  0E00               	movlw	0
  9115  000C12  2209               	addwfc	?_writeEEPROM+1,f,c
  9116  000C14  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9117  000C18  EC6A  F01E         	call	_writeEEPROM	;wreg free
  9118                           
  9119                           ;main.c: 1332: rv = readEEPROM( 0x43 + reg );
  9120  000C1C  0E43               	movlw	67
  9121  000C1E  0100               	movlb	0	; () banked
  9122  000C20  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9123  000C22  6E08               	movwf	?_readEEPROM,c
  9124  000C24  6A09               	clrf	?_readEEPROM+1,c
  9125  000C26  0E00               	movlw	0
  9126  000C28  2209               	addwfc	?_readEEPROM+1,f,c
  9127  000C2A  EC86  F01F         	call	_readEEPROM	;wreg free
  9128  000C2E  0100               	movlb	0	; () banked
  9129  000C30  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9130                           
  9131                           ; BSR set to: 0
  9132                           ;main.c: 1334: if ( val & 0x01 ) {
  9133  000C32  A051               	btfss	vscp_writeAppReg@val,0,c
  9134  000C34  D018               	goto	l10159
  9135                           
  9136                           ; BSR set to: 0
  9137                           ;main.c: 1336: LATCbits.LATC4 = 0;
  9138  000C36  988B               	bcf	3979,4,c	;volatile
  9139                           
  9140                           ;main.c: 1337: bOn = 0;
  9141  000C38  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9142                           
  9143                           ; BSR set to: 0
  9144                           ;main.c: 1339: relay_pulse_flags |= 0x40;
  9145  000C3A  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  9146                           
  9147                           ; BSR set to: 0
  9148                           ;main.c: 1340: relay_pulse_timer[ 6 ] =
  9149                           ;main.c: 1341: readEEPROM( 0x43 + 30) * 256 +
  9150                           ;main.c: 1342: readEEPROM( 0x43 + 31);
  9151  000C3C  6A09               	clrf	?_readEEPROM+1,c
  9152  000C3E  0E62               	movlw	98
  9153  000C40  6E08               	movwf	?_readEEPROM,c
  9154  000C42  EC86  F01F         	call	_readEEPROM	;wreg free
  9155  000C46  0100               	movlb	0	; () banked
  9156  000C48  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9157  000C4A  6A09               	clrf	?_readEEPROM+1,c
  9158  000C4C  0E61               	movlw	97
  9159  000C4E  6E08               	movwf	?_readEEPROM,c
  9160  000C50  EC86  F01F         	call	_readEEPROM	;wreg free
  9161  000C54  0100               	movlb	0	; () banked
  9162  000C56  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9163  000C58  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9164  000C5A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9165  000C5C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9166  000C5E  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9167  000C60  0E00               	movlw	0
  9168  000C62  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9169  000C64  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9170  000C66                     l10159:
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;main.c: 1343: }
  9174                           ;main.c: 1345: if ( val & 0x04 ) {
  9175  000C66  B451               	btfsc	vscp_writeAppReg@val,2,c
  9176  000C68  D654               	goto	l10047
  9177  000C6A  D179               	goto	l10235
  9178  000C6C                     l10165:
  9179                           
  9180                           ; BSR set to: 0
  9181  000C6C  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9182                           
  9183                           ; Switch size 1, requested type "speed"
  9184                           ; Number of cases is 7, Range of values is 10 to 16
  9185                           ; switch strategies available:
  9186                           ; Name         Instructions Cycles
  9187                           ; simple_byte           22    12 (average)
  9188                           ;	Chosen strategy is simple_byte
  9189  000C6E  0A0A               	xorlw	10	; case 10
  9190  000C70  E101 D689          	bz	l10065
  9191  000C74  0A01               	xorlw	1	; case 11
  9192  000C76  E101 D6B8          	bz	l10079
  9193  000C7A  0A07               	xorlw	7	; case 12
  9194  000C7C  E101 D6FC          	bz	l10093
  9195  000C80  0A01               	xorlw	1	; case 13
  9196  000C82  E101 D72B          	bz	l10107
  9197  000C86  0A03               	xorlw	3	; case 14
  9198  000C88  E101 D75A          	bz	l10121
  9199  000C8C  0A01               	xorlw	1	; case 15
  9200  000C8E  E08A               	bz	l10135
  9201  000C90  0A1F               	xorlw	31	; case 16
  9202  000C92  E0BA               	bz	l10149
  9203  000C94  D164               	goto	l10235
  9204  000C96                     l10167:
  9205                           
  9206                           ; BSR set to: 0
  9207                           ;main.c: 1356: else if ( (reg >= 18 ) &&
  9208                           ;main.c: 1357: (reg <= 33 ) ) {
  9209  000C96  0E11               	movlw	17
  9210  000C98  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9211  000C9A  D0DE               	goto	l10193
  9212                           
  9213                           ; BSR set to: 0
  9214  000C9C  0E22               	movlw	34
  9215  000C9E  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9216  000CA0  D0DB               	goto	l10193
  9217                           
  9218                           ; BSR set to: 0
  9219                           ;main.c: 1360: writeEEPROM( 0x43 + reg, val );
  9220  000CA2  0E43               	movlw	67
  9221  000CA4  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9222  000CA6  6E08               	movwf	?_writeEEPROM,c
  9223  000CA8  6A09               	clrf	?_writeEEPROM+1,c
  9224  000CAA  0E00               	movlw	0
  9225  000CAC  2209               	addwfc	?_writeEEPROM+1,f,c
  9226  000CAE  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9227  000CB2  EC6A  F01E         	call	_writeEEPROM	;wreg free
  9228                           
  9229                           ;main.c: 1361: rv = readEEPROM( 0x43 + reg );
  9230  000CB6  0E43               	movlw	67
  9231  000CB8  0100               	movlb	0	; () banked
  9232  000CBA  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9233  000CBC  6E08               	movwf	?_readEEPROM,c
  9234  000CBE  6A09               	clrf	?_readEEPROM+1,c
  9235  000CC0  0E00               	movlw	0
  9236  000CC2  2209               	addwfc	?_readEEPROM+1,f,c
  9237  000CC4  EC86  F01F         	call	_readEEPROM	;wreg free
  9238  000CC8  0100               	movlb	0	; () banked
  9239  000CCA  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9240                           
  9241                           ;main.c: 1365: switch ( reg ) {
  9242  000CCC  D0B0               	goto	l10191
  9243  000CCE                     l10173:
  9244                           
  9245                           ; BSR set to: 0
  9246                           ;main.c: 1368: relay_pulse_timer[ 0 ] =
  9247                           ;main.c: 1369: readEEPROM( 0x43 + 18) * 256 +
  9248                           ;main.c: 1370: readEEPROM( 0x43 + 19);
  9249  000CCE  6A09               	clrf	?_readEEPROM+1,c
  9250  000CD0  0E56               	movlw	86
  9251  000CD2  6E08               	movwf	?_readEEPROM,c
  9252  000CD4  EC86  F01F         	call	_readEEPROM	;wreg free
  9253  000CD8  0100               	movlb	0	; () banked
  9254  000CDA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9255  000CDC  6A09               	clrf	?_readEEPROM+1,c
  9256  000CDE  0E55               	movlw	85
  9257  000CE0  6E08               	movwf	?_readEEPROM,c
  9258  000CE2  EC86  F01F         	call	_readEEPROM	;wreg free
  9259  000CE6  0100               	movlb	0	; () banked
  9260  000CE8  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9261  000CEA  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9262  000CEC  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9263  000CEE  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9264  000CF0  6F70               	movwf	_relay_pulse_timer& (0+255),b
  9265  000CF2  0E00               	movlw	0
  9266  000CF4  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9267  000CF6  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  9268                           
  9269                           ;main.c: 1371: break;
  9270  000CF8  D132               	goto	l10235
  9271  000CFA                     l10175:
  9272                           
  9273                           ; BSR set to: 0
  9274                           ;main.c: 1374: relay_pulse_timer[ 1 ] =
  9275                           ;main.c: 1375: readEEPROM( 0x43 + 20) * 256 +
  9276                           ;main.c: 1376: readEEPROM( 0x43 + 21);
  9277  000CFA  6A09               	clrf	?_readEEPROM+1,c
  9278  000CFC  0E58               	movlw	88
  9279  000CFE  6E08               	movwf	?_readEEPROM,c
  9280  000D00  EC86  F01F         	call	_readEEPROM	;wreg free
  9281  000D04  0100               	movlb	0	; () banked
  9282  000D06  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9283  000D08  6A09               	clrf	?_readEEPROM+1,c
  9284  000D0A  0E57               	movlw	87
  9285  000D0C  6E08               	movwf	?_readEEPROM,c
  9286  000D0E  EC86  F01F         	call	_readEEPROM	;wreg free
  9287  000D12  0100               	movlb	0	; () banked
  9288  000D14  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9289  000D16  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9290  000D18  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9291  000D1A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9292  000D1C  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  9293  000D1E  0E00               	movlw	0
  9294  000D20  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9295  000D22  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  9296                           
  9297                           ;main.c: 1377: break;
  9298  000D24  D11C               	goto	l10235
  9299  000D26                     l10177:
  9300                           
  9301                           ; BSR set to: 0
  9302                           ;main.c: 1380: relay_pulse_timer[ 2 ] =
  9303                           ;main.c: 1381: readEEPROM( 0x43 + 22) * 256 +
  9304                           ;main.c: 1382: readEEPROM( 0x43 + 23);
  9305  000D26  6A09               	clrf	?_readEEPROM+1,c
  9306  000D28  0E5A               	movlw	90
  9307  000D2A  6E08               	movwf	?_readEEPROM,c
  9308  000D2C  EC86  F01F         	call	_readEEPROM	;wreg free
  9309  000D30  0100               	movlb	0	; () banked
  9310  000D32  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9311  000D34  6A09               	clrf	?_readEEPROM+1,c
  9312  000D36  0E59               	movlw	89
  9313  000D38  6E08               	movwf	?_readEEPROM,c
  9314  000D3A  EC86  F01F         	call	_readEEPROM	;wreg free
  9315  000D3E  0100               	movlb	0	; () banked
  9316  000D40  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9317  000D42  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9318  000D44  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9319  000D46  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9320  000D48  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  9321  000D4A  0E00               	movlw	0
  9322  000D4C  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9323  000D4E  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  9324                           
  9325                           ;main.c: 1383: break;
  9326  000D50  D106               	goto	l10235
  9327  000D52                     l10179:
  9328                           
  9329                           ; BSR set to: 0
  9330                           ;main.c: 1386: relay_pulse_timer[ 3 ] =
  9331                           ;main.c: 1387: readEEPROM( 0x43 + 24) * 256 +
  9332                           ;main.c: 1388: readEEPROM( 0x43 + 25);
  9333  000D52  6A09               	clrf	?_readEEPROM+1,c
  9334  000D54  0E5C               	movlw	92
  9335  000D56  6E08               	movwf	?_readEEPROM,c
  9336  000D58  EC86  F01F         	call	_readEEPROM	;wreg free
  9337  000D5C  0100               	movlb	0	; () banked
  9338  000D5E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9339  000D60  6A09               	clrf	?_readEEPROM+1,c
  9340  000D62  0E5B               	movlw	91
  9341  000D64  6E08               	movwf	?_readEEPROM,c
  9342  000D66  EC86  F01F         	call	_readEEPROM	;wreg free
  9343  000D6A  0100               	movlb	0	; () banked
  9344  000D6C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9345  000D6E  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9346  000D70  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9347  000D72  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9348  000D74  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  9349  000D76  0E00               	movlw	0
  9350  000D78  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9351  000D7A  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  9352                           
  9353                           ;main.c: 1389: break;
  9354  000D7C  D0F0               	goto	l10235
  9355  000D7E                     l10181:
  9356                           
  9357                           ; BSR set to: 0
  9358                           ;main.c: 1392: relay_pulse_timer[ 4 ] =
  9359                           ;main.c: 1393: readEEPROM( 0x43 + 26) * 256 +
  9360                           ;main.c: 1394: readEEPROM( 0x43 + 27);
  9361  000D7E  6A09               	clrf	?_readEEPROM+1,c
  9362  000D80  0E5E               	movlw	94
  9363  000D82  6E08               	movwf	?_readEEPROM,c
  9364  000D84  EC86  F01F         	call	_readEEPROM	;wreg free
  9365  000D88  0100               	movlb	0	; () banked
  9366  000D8A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9367  000D8C  6A09               	clrf	?_readEEPROM+1,c
  9368  000D8E  0E5D               	movlw	93
  9369  000D90  6E08               	movwf	?_readEEPROM,c
  9370  000D92  EC86  F01F         	call	_readEEPROM	;wreg free
  9371  000D96  0100               	movlb	0	; () banked
  9372  000D98  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9373  000D9A  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9374  000D9C  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9375  000D9E  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9376  000DA0  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9377  000DA2  0E00               	movlw	0
  9378  000DA4  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9379  000DA6  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9380                           
  9381                           ;main.c: 1395: break;
  9382  000DA8  D0DA               	goto	l10235
  9383  000DAA                     l10183:
  9384                           
  9385                           ; BSR set to: 0
  9386                           ;main.c: 1398: relay_pulse_timer[ 5 ] =
  9387                           ;main.c: 1399: readEEPROM( 0x43 + 28) * 256 +
  9388                           ;main.c: 1400: readEEPROM( 0x43 + 29);
  9389  000DAA  6A09               	clrf	?_readEEPROM+1,c
  9390  000DAC  0E60               	movlw	96
  9391  000DAE  6E08               	movwf	?_readEEPROM,c
  9392  000DB0  EC86  F01F         	call	_readEEPROM	;wreg free
  9393  000DB4  0100               	movlb	0	; () banked
  9394  000DB6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9395  000DB8  6A09               	clrf	?_readEEPROM+1,c
  9396  000DBA  0E5F               	movlw	95
  9397  000DBC  6E08               	movwf	?_readEEPROM,c
  9398  000DBE  EC86  F01F         	call	_readEEPROM	;wreg free
  9399  000DC2  0100               	movlb	0	; () banked
  9400  000DC4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9401  000DC6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9402  000DC8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9403  000DCA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9404  000DCC  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9405  000DCE  0E00               	movlw	0
  9406  000DD0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9407  000DD2  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9408                           
  9409                           ;main.c: 1401: break;
  9410  000DD4  D0C4               	goto	l10235
  9411  000DD6                     l10185:
  9412                           
  9413                           ; BSR set to: 0
  9414                           ;main.c: 1404: relay_pulse_timer[ 6 ] =
  9415                           ;main.c: 1405: readEEPROM( 0x43 + 30) * 256 +
  9416                           ;main.c: 1406: readEEPROM( 0x43 + 31);
  9417  000DD6  6A09               	clrf	?_readEEPROM+1,c
  9418  000DD8  0E62               	movlw	98
  9419  000DDA  6E08               	movwf	?_readEEPROM,c
  9420  000DDC  EC86  F01F         	call	_readEEPROM	;wreg free
  9421  000DE0  0100               	movlb	0	; () banked
  9422  000DE2  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9423  000DE4  6A09               	clrf	?_readEEPROM+1,c
  9424  000DE6  0E61               	movlw	97
  9425  000DE8  6E08               	movwf	?_readEEPROM,c
  9426  000DEA  EC86  F01F         	call	_readEEPROM	;wreg free
  9427  000DEE  0100               	movlb	0	; () banked
  9428  000DF0  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9429  000DF2  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9430  000DF4  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9431  000DF6  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9432  000DF8  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9433  000DFA  0E00               	movlw	0
  9434  000DFC  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9435  000DFE  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9436                           
  9437                           ;main.c: 1407: break;
  9438  000E00  D0AE               	goto	l10235
  9439  000E02                     l10187:
  9440                           
  9441                           ; BSR set to: 0
  9442                           ;main.c: 1410: relay_pulse_timer[ 7 ] =
  9443                           ;main.c: 1411: readEEPROM( 0x43 + 32) * 256 +
  9444                           ;main.c: 1412: readEEPROM( 0x43 + 33);
  9445  000E02  6A09               	clrf	?_readEEPROM+1,c
  9446  000E04  0E64               	movlw	100
  9447  000E06  6E08               	movwf	?_readEEPROM,c
  9448  000E08  EC86  F01F         	call	_readEEPROM	;wreg free
  9449  000E0C  0100               	movlb	0	; () banked
  9450  000E0E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9451  000E10  6A09               	clrf	?_readEEPROM+1,c
  9452  000E12  0E63               	movlw	99
  9453  000E14  6E08               	movwf	?_readEEPROM,c
  9454  000E16  EC86  F01F         	call	_readEEPROM	;wreg free
  9455  000E1A  0100               	movlb	0	; () banked
  9456  000E1C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9457  000E1E  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9458  000E20  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9459  000E22  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9460  000E24  6F7E               	movwf	(_relay_pulse_timer+14)& (0+255),b
  9461  000E26  0E00               	movlw	0
  9462  000E28  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9463  000E2A  6F7F               	movwf	(_relay_pulse_timer+15)& (0+255),b
  9464                           
  9465                           ;main.c: 1413: break;
  9466  000E2C  D098               	goto	l10235
  9467  000E2E                     l10191:
  9468                           
  9469                           ; BSR set to: 0
  9470  000E2E  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9471                           
  9472                           ; Switch size 1, requested type "speed"
  9473                           ; Number of cases is 8, Range of values is 19 to 33
  9474                           ; switch strategies available:
  9475                           ; Name         Instructions Cycles
  9476                           ; simple_byte           25    13 (average)
  9477                           ;	Chosen strategy is simple_byte
  9478  000E30  0A13               	xorlw	19	; case 19
  9479  000E32  E101 D74C          	bz	l10173
  9480  000E36  0A06               	xorlw	6	; case 21
  9481  000E38  E101 D75F          	bz	l10175
  9482  000E3C  0A02               	xorlw	2	; case 23
  9483  000E3E  E101 D772          	bz	l10177
  9484  000E42  0A0E               	xorlw	14	; case 25
  9485  000E44  E086               	bz	l10179
  9486  000E46  0A02               	xorlw	2	; case 27
  9487  000E48  E09A               	bz	l10181
  9488  000E4A  0A06               	xorlw	6	; case 29
  9489  000E4C  E0AE               	bz	l10183
  9490  000E4E  0A02               	xorlw	2	; case 31
  9491  000E50  E0C2               	bz	l10185
  9492  000E52  0A3E               	xorlw	62	; case 33
  9493  000E54  E0D6               	bz	l10187
  9494  000E56  D083               	goto	l10235
  9495  000E58                     l10193:
  9496                           
  9497                           ; BSR set to: 0
  9498                           ;main.c: 1421: else if ( ( reg >= 34 ) &&
  9499                           ;main.c: 1422: ( reg <= 49 ) ) {
  9500  000E58  0E21               	movlw	33
  9501  000E5A  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9502  000E5C  D049               	goto	l10219
  9503                           
  9504                           ; BSR set to: 0
  9505  000E5E  0E32               	movlw	50
  9506  000E60  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9507  000E62  D046               	goto	l10219
  9508                           
  9509                           ; BSR set to: 0
  9510                           ;main.c: 1425: writeEEPROM( 0x43 + reg, val );
  9511  000E64  0E43               	movlw	67
  9512  000E66  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9513  000E68  6E08               	movwf	?_writeEEPROM,c
  9514  000E6A  6A09               	clrf	?_writeEEPROM+1,c
  9515  000E6C  0E00               	movlw	0
  9516  000E6E  2209               	addwfc	?_writeEEPROM+1,f,c
  9517  000E70  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9518  000E74  EC6A  F01E         	call	_writeEEPROM	;wreg free
  9519                           
  9520                           ;main.c: 1426: rv = readEEPROM( 0x43 + reg );
  9521  000E78  0E43               	movlw	67
  9522  000E7A  0100               	movlb	0	; () banked
  9523  000E7C  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9524  000E7E  6E08               	movwf	?_readEEPROM,c
  9525  000E80  6A09               	clrf	?_readEEPROM+1,c
  9526  000E82  0E00               	movlw	0
  9527  000E84  2209               	addwfc	?_readEEPROM+1,f,c
  9528  000E86  EC86  F01F         	call	_readEEPROM	;wreg free
  9529  000E8A  0100               	movlb	0	; () banked
  9530  000E8C  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9531                           
  9532                           ;main.c: 1428: switch ( reg ) {
  9533  000E8E  D016               	goto	l10217
  9534  000E90                     l10213:
  9535                           
  9536                           ; BSR set to: 0
  9537                           ;main.c: 1473: relay_protection_timer[ 7 ] =
  9538                           ;main.c: 1474: readEEPROM( 0x43 + 48 ) * 256 +
  9539                           ;main.c: 1475: readEEPROM( 0x43 + 49 );
  9540  000E90  6A09               	clrf	?_readEEPROM+1,c
  9541  000E92  0E74               	movlw	116
  9542  000E94  6E08               	movwf	?_readEEPROM,c
  9543  000E96  EC86  F01F         	call	_readEEPROM	;wreg free
  9544  000E9A  0100               	movlb	0	; () banked
  9545  000E9C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9546  000E9E  6A09               	clrf	?_readEEPROM+1,c
  9547  000EA0  0E73               	movlw	115
  9548  000EA2  6E08               	movwf	?_readEEPROM,c
  9549  000EA4  EC86  F01F         	call	_readEEPROM	;wreg free
  9550  000EA8  0100               	movlb	0	; () banked
  9551  000EAA  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9552  000EAC  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9553  000EAE  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9554  000EB0  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9555  000EB2  6F6E               	movwf	(_relay_protection_timer+14)& (0+255),b
  9556  000EB4  0E00               	movlw	0
  9557  000EB6  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9558  000EB8  6F6F               	movwf	(_relay_protection_timer+15)& (0+255),b
  9559                           
  9560                           ;main.c: 1476: break;
  9561  000EBA  D051               	goto	l10235
  9562  000EBC                     l10217:
  9563                           
  9564                           ; BSR set to: 0
  9565  000EBC  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9566                           
  9567                           ; Switch size 1, requested type "speed"
  9568                           ; Number of cases is 8, Range of values is 35 to 49
  9569                           ; switch strategies available:
  9570                           ; Name         Instructions Cycles
  9571                           ; simple_byte           25    13 (average)
  9572                           ;	Chosen strategy is simple_byte
  9573  000EBE  0A23               	xorlw	35	; case 35
  9574  000EC0  E102 EF60  F003    	bz	l9927
  9575  000EC6  0A06               	xorlw	6	; case 37
  9576  000EC8  E101 D431          	bz	l9947
  9577  000ECC  0A02               	xorlw	2	; case 39
  9578  000ECE  E101 D458          	bz	l9967
  9579  000ED2  0A0E               	xorlw	14	; case 41
  9580  000ED4  E101 D487          	bz	l9987
  9581  000ED8  0A02               	xorlw	2	; case 43
  9582  000EDA  E101 D4B6          	bz	l10007
  9583  000EDE  0A06               	xorlw	6	; case 45
  9584  000EE0  E101 D4E5          	bz	l10027
  9585  000EE4  0A02               	xorlw	2	; case 47
  9586  000EE6  E101 D514          	bz	l10047
  9587  000EEA  0A1E               	xorlw	30	; case 49
  9588  000EEC  E0D1               	bz	l10213
  9589  000EEE  D037               	goto	l10235
  9590  000EF0                     l10219:
  9591                           
  9592                           ; BSR set to: 0
  9593                           ;main.c: 1484: else if ( (reg >= 50 ) && (reg <= 65) ) {
  9594  000EF0  0E31               	movlw	49
  9595  000EF2  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9596  000EF4  D017               	goto	l10225
  9597                           
  9598                           ; BSR set to: 0
  9599  000EF6  0E42               	movlw	66
  9600  000EF8  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9601  000EFA  D014               	goto	l10225
  9602                           
  9603                           ; BSR set to: 0
  9604                           ;main.c: 1487: writeEEPROM( 0x43 + reg, val );
  9605  000EFC  0E43               	movlw	67
  9606  000EFE  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9607  000F00  6E08               	movwf	?_writeEEPROM,c
  9608  000F02  6A09               	clrf	?_writeEEPROM+1,c
  9609  000F04  0E00               	movlw	0
  9610  000F06  2209               	addwfc	?_writeEEPROM+1,f,c
  9611  000F08  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9612  000F0C  EC6A  F01E         	call	_writeEEPROM	;wreg free
  9613                           
  9614                           ;main.c: 1488: rv = readEEPROM( 0x43 + reg );
  9615  000F10  0E43               	movlw	67
  9616  000F12  0100               	movlb	0	; () banked
  9617  000F14  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9618  000F16  6E08               	movwf	?_readEEPROM,c
  9619  000F18  6A09               	clrf	?_readEEPROM+1,c
  9620  000F1A  0E00               	movlw	0
  9621  000F1C  2209               	addwfc	?_readEEPROM+1,f,c
  9622  000F1E  EC86  F01F         	call	_readEEPROM	;wreg free
  9623  000F22  D01B               	goto	L25
  9624  000F24                     l10225:
  9625                           
  9626                           ; BSR set to: 0
  9627                           ;main.c: 1491: else if ( (reg >= 72) &&
  9628                           ;main.c: 1492: (reg < (72 + 7 * 8)) ) {
  9629  000F24  0E47               	movlw	71
  9630  000F26  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9631  000F28  D01A               	goto	l10235
  9632                           
  9633                           ; BSR set to: 0
  9634  000F2A  0E80               	movlw	128
  9635  000F2C  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9636  000F2E  D017               	goto	l10235
  9637                           
  9638                           ; BSR set to: 0
  9639                           ;main.c: 1493: writeEEPROM( 0x43 + reg, val );
  9640  000F30  0E43               	movlw	67
  9641  000F32  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9642  000F34  6E08               	movwf	?_writeEEPROM,c
  9643  000F36  6A09               	clrf	?_writeEEPROM+1,c
  9644  000F38  0E00               	movlw	0
  9645  000F3A  2209               	addwfc	?_writeEEPROM+1,f,c
  9646  000F3C  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9647  000F40  EC6A  F01E         	call	_writeEEPROM	;wreg free
  9648                           
  9649                           ;main.c: 1494: calculateSetFilterMask();
  9650  000F44  EC03  F00B         	call	_calculateSetFilterMask	;wreg free
  9651                           
  9652                           ;main.c: 1495: rv = readEEPROM( 0x43 + reg );
  9653  000F48  0E43               	movlw	67
  9654  000F4A  0100               	movlb	0	; () banked
  9655  000F4C  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9656  000F4E  6E08               	movwf	?_readEEPROM,c
  9657  000F50  6A09               	clrf	?_readEEPROM+1,c
  9658  000F52  0E00               	movlw	0
  9659  000F54  2209               	addwfc	?_readEEPROM+1,f,c
  9660  000F56  EC86  F01F         	call	_readEEPROM	;wreg free
  9661  000F5A                     L25:
  9662  000F5A  0100               	movlb	0	; () banked
  9663  000F5C  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9664  000F5E                     l10235:
  9665                           
  9666                           ; BSR set to: 0
  9667                           ;main.c: 1496: }
  9668                           ;main.c: 1502: if ( bInfoEvent ) {
  9669  000F5E  51CA               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
  9670  000F60  E035               	bz	l10255
  9671                           
  9672                           ; BSR set to: 0
  9673                           ;main.c: 1504: unsigned char val;
  9674                           ;main.c: 1505: val = readEEPROM( 0x43 +
  9675                           ;main.c: 1506: 10 + (reg - 2) );
  9676  000F62  0E4B               	movlw	75
  9677  000F64  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9678  000F66  6E08               	movwf	?_readEEPROM,c
  9679  000F68  6A09               	clrf	?_readEEPROM+1,c
  9680  000F6A  0E00               	movlw	0
  9681  000F6C  2209               	addwfc	?_readEEPROM+1,f,c
  9682  000F6E  EC86  F01F         	call	_readEEPROM	;wreg free
  9683  000F72  0100               	movlb	0	; () banked
  9684  000F74  6FCB               	movwf	vscp_writeAppReg@val_677& (0+255),b
  9685                           
  9686                           ; BSR set to: 0
  9687                           ;main.c: 1508: if ( bOn ) {
  9688  000F76  51CC               	movf	vscp_writeAppReg@bOn& (0+255),w,b
  9689  000F78  E015               	bz	l393
  9690                           
  9691                           ; BSR set to: 0
  9692                           ;main.c: 1510: if ( val & 0x08 ) {
  9693  000F7A  A7CB               	btfss	vscp_writeAppReg@val_677& (0+255),3,b
  9694  000F7C  D008               	goto	l10245
  9695                           
  9696                           ; BSR set to: 0
  9697                           ;main.c: 1511: SendInformationEvent( reg - 2,
  9698                           ;main.c: 1512: 20,
  9699                           ;main.c: 1513: 3 );
  9700  000F7E  0E14               	movlw	20
  9701  000F80  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9702  000F82  0E03               	movlw	3
  9703  000F84  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9704  000F86  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9705  000F88  0FFE               	addlw	254
  9706  000F8A  ECFB  F01C         	call	_SendInformationEvent
  9707  000F8E                     l10245:
  9708                           
  9709                           ; BSR set to: 0
  9710                           ;main.c: 1514: }
  9711                           ;main.c: 1516: if ( val & 0x20 ) {
  9712  000F8E  ABCB               	btfss	vscp_writeAppReg@val_677& (0+255),5,b
  9713  000F90  D01D               	goto	l10255
  9714                           
  9715                           ; BSR set to: 0
  9716                           ;main.c: 1517: SendInformationEvent( reg - 2,
  9717                           ;main.c: 1518: 20,
  9718                           ;main.c: 1519: 25 );
  9719  000F92  0E14               	movlw	20
  9720  000F94  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9721  000F96  0E19               	movlw	25
  9722  000F98  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9723  000F9A  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9724  000F9C  0FFE               	addlw	254
  9725  000F9E  ECFB  F01C         	call	_SendInformationEvent
  9726  000FA2  D014               	goto	l10255
  9727  000FA4                     l393:
  9728                           
  9729                           ; BSR set to: 0
  9730                           ;main.c: 1523: else {
  9731                           ;main.c: 1525: if ( val & 0x10 ) {
  9732  000FA4  A9CB               	btfss	vscp_writeAppReg@val_677& (0+255),4,b
  9733  000FA6  D008               	goto	l10251
  9734                           
  9735                           ; BSR set to: 0
  9736                           ;main.c: 1526: SendInformationEvent( reg - 2,
  9737                           ;main.c: 1527: 20,
  9738                           ;main.c: 1528: 4 );
  9739  000FA8  0E14               	movlw	20
  9740  000FAA  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9741  000FAC  0E04               	movlw	4
  9742  000FAE  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9743  000FB0  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9744  000FB2  0FFE               	addlw	254
  9745  000FB4  ECFB  F01C         	call	_SendInformationEvent
  9746  000FB8                     l10251:
  9747                           
  9748                           ; BSR set to: 0
  9749                           ;main.c: 1529: }
  9750                           ;main.c: 1531: if ( val & 0x40 ) {
  9751  000FB8  ADCB               	btfss	vscp_writeAppReg@val_677& (0+255),6,b
  9752  000FBA  D008               	goto	l10255
  9753                           
  9754                           ; BSR set to: 0
  9755                           ;main.c: 1532: SendInformationEvent( reg - 2,
  9756                           ;main.c: 1533: 20,
  9757                           ;main.c: 1534: 24 );
  9758  000FBC  0E14               	movlw	20
  9759  000FBE  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9760  000FC0  0E18               	movlw	24
  9761  000FC2  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9762  000FC4  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9763  000FC6  0FFE               	addlw	254
  9764  000FC8  ECFB  F01C         	call	_SendInformationEvent
  9765  000FCC                     l10255:
  9766                           
  9767                           ; BSR set to: 0
  9768                           ;main.c: 1535: }
  9769                           ;main.c: 1536: }
  9770                           ;main.c: 1537: }
  9771                           ;main.c: 1539: return rv;
  9772  000FCC  51CD               	movf	vscp_writeAppReg@rv& (0+255),w,b
  9773                           
  9774                           ; BSR set to: 0
  9775  000FCE  0012               	return	
  9776  000FD0                     __end_of_vscp_writeAppReg:
  9777                           	opt stack 0
  9778                           tblptru	equ	0xFF8
  9779                           prodh	equ	0xFF4
  9780                           prodl	equ	0xFF3
  9781                           postinc0	equ	0xFEE
  9782                           wreg	equ	0xFE8
  9783                           indf2	equ	0xFDF
  9784                           postinc2	equ	0xFDE
  9785                           postdec2	equ	0xFDD
  9786                           fsr2h	equ	0xFDA
  9787                           fsr2l	equ	0xFD9
  9788                           status	equ	0xFD8
  9789                           
  9790 ;; *************** function _calculateSetFilterMask *****************
  9791 ;; Defined at:
  9792 ;;		line 2604 in file "../main.c"
  9793 ;; Parameters:    Size  Location     Type
  9794 ;;		None
  9795 ;; Auto vars:     Size  Location     Type
  9796 ;;  rowfilter       4   61[COMRAM] unsigned long 
  9797 ;;  filter          4   57[COMRAM] unsigned long 
  9798 ;;  mask            4   53[COMRAM] unsigned long 
  9799 ;;  rowmask         4   48[COMRAM] unsigned long 
  9800 ;;  i               1   66[COMRAM] unsigned char 
  9801 ;;  j               1   65[COMRAM] unsigned char 
  9802 ;;  lastOID         1   52[COMRAM] unsigned char 
  9803 ;; Return value:  Size  Location     Type
  9804 ;;		None               void
  9805 ;; Registers used:
  9806 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9807 ;; Tracked objects:
  9808 ;;		On entry : 0/0
  9809 ;;		On exit  : 0/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9812 ;;      Params:         0       0       0       0       0       0       0
  9813 ;;      Locals:        19       0       0       0       0       0       0
  9814 ;;      Temps:         31       0       0       0       0       0       0
  9815 ;;      Totals:        50       0       0       0       0       0       0
  9816 ;;Total ram usage:       50 bytes
  9817 ;; Hardware stack levels used:    1
  9818 ;; Hardware stack levels required when called:    3
  9819 ;; This function calls:
  9820 ;;		_readEEPROM
  9821 ;;		_ECANSetOperationMode
  9822 ;;		__CANIDToRegs
  9823 ;; This function is called by:
  9824 ;;		_vscp_writeAppReg
  9825 ;; This function uses a non-reentrant model
  9826 ;;
  9827                           
  9828                           	psect	text27
  9829  001606                     __ptext27:
  9830                           	opt stack 0
  9831  001606                     _calculateSetFilterMask:
  9832                           	opt stack 24
  9833                           
  9834                           ;main.c: 2605: uint8_t i,j;
  9835                           ;main.c: 2606: uint8_t lastOID;
  9836                           ;main.c: 2607: uint32_t rowmask;
  9837                           ;main.c: 2608: uint32_t rowfilter;
  9838                           ;main.c: 2611: uint32_t mask = 0xffffffff;
  9839                           
  9840                           ; BSR set to: 0
  9841                           ;incstack = 0
  9842                           ;incstack = 0
  9843  001606  6836               	setf	calculateSetFilterMask@mask,c
  9844  001608  6837               	setf	calculateSetFilterMask@mask+1,c
  9845  00160A  6838               	setf	calculateSetFilterMask@mask+2,c
  9846  00160C  6839               	setf	calculateSetFilterMask@mask+3,c
  9847                           
  9848                           ;main.c: 2612: uint32_t filter = 0;
  9849  00160E  6A3A               	clrf	calculateSetFilterMask@filter,c
  9850  001610  6A3B               	clrf	calculateSetFilterMask@filter+1,c
  9851  001612  6A3C               	clrf	calculateSetFilterMask@filter+2,c
  9852  001614  6A3D               	clrf	calculateSetFilterMask@filter+3,c
  9853                           
  9854                           ;main.c: 2615: for ( i=0; i < 7; i++ ) {
  9855  001616  6A43               	clrf	calculateSetFilterMask@i,c
  9856  001618                     l8471:
  9857                           
  9858                           ;main.c: 2618: if ( readEEPROM( 0x43 + 8*i + 1 ) & 0x80 ) {
  9859  001618  5043               	movf	calculateSetFilterMask@i,w,c
  9860  00161A  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
  9861  00161C  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
  9862  00161E  90D8               	bcf	status,0,c
  9863  001620  3612               	rlcf	??_calculateSetFilterMask,f,c
  9864  001622  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9865  001624  90D8               	bcf	status,0,c
  9866  001626  3612               	rlcf	??_calculateSetFilterMask,f,c
  9867  001628  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9868  00162A  90D8               	bcf	status,0,c
  9869  00162C  3612               	rlcf	??_calculateSetFilterMask,f,c
  9870  00162E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9871  001630  0E44               	movlw	68
  9872  001632  2412               	addwf	??_calculateSetFilterMask,w,c
  9873  001634  6E08               	movwf	?_readEEPROM,c
  9874  001636  0E00               	movlw	0
  9875  001638  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9876  00163A  6E09               	movwf	?_readEEPROM+1,c
  9877  00163C  EC86  F01F         	call	_readEEPROM	;wreg free
  9878  001640  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9879  001642  AE14               	btfss	??_calculateSetFilterMask+2,7,c
  9880  001644  D1E8               	goto	l8515
  9881                           
  9882                           ;main.c: 2627: rowmask =
  9883                           ;main.c: 2629: ( (uint32_t)( readEEPROM( 0x43 + 8*i + 1 ) & 2 ) << 23 ) |
  9884                           ;main.c: 2631: ( (uint32_t)readEEPROM( 0x43 + 8*i + 2 ) << 16 ) |
  9885                           ;main.c: 2633: ( (uint32_t)readEEPROM( 0x43 + 8*i + 4 ) << 8 ) |
  9886                           ;main.c: 2635: 0xff;
  9887  001646  5043               	movf	calculateSetFilterMask@i,w,c
  9888  001648  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
  9889  00164A  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
  9890  00164C  90D8               	bcf	status,0,c
  9891  00164E  3612               	rlcf	??_calculateSetFilterMask,f,c
  9892  001650  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9893  001652  90D8               	bcf	status,0,c
  9894  001654  3612               	rlcf	??_calculateSetFilterMask,f,c
  9895  001656  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9896  001658  90D8               	bcf	status,0,c
  9897  00165A  3612               	rlcf	??_calculateSetFilterMask,f,c
  9898  00165C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9899  00165E  0E47               	movlw	71
  9900  001660  2412               	addwf	??_calculateSetFilterMask,w,c
  9901  001662  6E08               	movwf	?_readEEPROM,c
  9902  001664  0E00               	movlw	0
  9903  001666  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9904  001668  6E09               	movwf	?_readEEPROM+1,c
  9905  00166A  EC86  F01F         	call	_readEEPROM	;wreg free
  9906  00166E  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9907  001670  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
  9908  001674  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
  9909  001676  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
  9910  001678  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
  9911  00167A  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
  9912  00167E  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
  9913  001682  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
  9914  001686  6A15               	clrf	??_calculateSetFilterMask+3,c
  9915  001688  5043               	movf	calculateSetFilterMask@i,w,c
  9916  00168A  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
  9917  00168C  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
  9918  00168E  90D8               	bcf	status,0,c
  9919  001690  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9920  001692  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9921  001694  90D8               	bcf	status,0,c
  9922  001696  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9923  001698  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9924  00169A  90D8               	bcf	status,0,c
  9925  00169C  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9926  00169E  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9927  0016A0  0E45               	movlw	69
  9928  0016A2  2419               	addwf	??_calculateSetFilterMask+7,w,c
  9929  0016A4  6E08               	movwf	?_readEEPROM,c
  9930  0016A6  0E00               	movlw	0
  9931  0016A8  201A               	addwfc	??_calculateSetFilterMask+8,w,c
  9932  0016AA  6E09               	movwf	?_readEEPROM+1,c
  9933  0016AC  EC86  F01F         	call	_readEEPROM	;wreg free
  9934  0016B0  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
  9935  0016B2  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
  9936  0016B6  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
  9937  0016B8  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
  9938  0016BA  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
  9939  0016BC  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
  9940  0016C0  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
  9941  0016C4  6A1D               	clrf	??_calculateSetFilterMask+11,c
  9942  0016C6  6A1C               	clrf	??_calculateSetFilterMask+10,c
  9943  0016C8  5043               	movf	calculateSetFilterMask@i,w,c
  9944  0016CA  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
  9945  0016CC  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
  9946  0016CE  90D8               	bcf	status,0,c
  9947  0016D0  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9948  0016D2  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9949  0016D4  90D8               	bcf	status,0,c
  9950  0016D6  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9951  0016D8  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9952  0016DA  90D8               	bcf	status,0,c
  9953  0016DC  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9954  0016DE  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9955  0016E0  0E44               	movlw	68
  9956  0016E2  2420               	addwf	??_calculateSetFilterMask+14,w,c
  9957  0016E4  6E08               	movwf	?_readEEPROM,c
  9958  0016E6  0E00               	movlw	0
  9959  0016E8  2021               	addwfc	??_calculateSetFilterMask+15,w,c
  9960  0016EA  6E09               	movwf	?_readEEPROM+1,c
  9961  0016EC  EC86  F01F         	call	_readEEPROM	;wreg free
  9962  0016F0  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
  9963  0016F2  0E02               	movlw	2
  9964  0016F4  1622               	andwf	??_calculateSetFilterMask+16,f,c
  9965  0016F6  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
  9966  0016FA  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
  9967  0016FC  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
  9968  0016FE  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
  9969  001700  0E17               	movlw	23
  9970  001702                     u9885:
  9971  001702  90D8               	bcf	status,0,c
  9972  001704  3623               	rlcf	??_calculateSetFilterMask+17,f,c
  9973  001706  3624               	rlcf	??_calculateSetFilterMask+18,f,c
  9974  001708  3625               	rlcf	??_calculateSetFilterMask+19,f,c
  9975  00170A  3626               	rlcf	??_calculateSetFilterMask+20,f,c
  9976  00170C  2EE8               	decfsz	wreg,f,c
  9977  00170E  D7F9               	goto	u9885
  9978  001710  501C               	movf	??_calculateSetFilterMask+10,w,c
  9979  001712  1023               	iorwf	??_calculateSetFilterMask+17,w,c
  9980  001714  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
  9981  001716  501D               	movf	??_calculateSetFilterMask+11,w,c
  9982  001718  1024               	iorwf	??_calculateSetFilterMask+18,w,c
  9983  00171A  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
  9984  00171C  501E               	movf	??_calculateSetFilterMask+12,w,c
  9985  00171E  1025               	iorwf	??_calculateSetFilterMask+19,w,c
  9986  001720  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
  9987  001722  501F               	movf	??_calculateSetFilterMask+13,w,c
  9988  001724  1026               	iorwf	??_calculateSetFilterMask+20,w,c
  9989  001726  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
  9990  001728  5015               	movf	??_calculateSetFilterMask+3,w,c
  9991  00172A  1027               	iorwf	??_calculateSetFilterMask+21,w,c
  9992  00172C  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
  9993  00172E  5016               	movf	??_calculateSetFilterMask+4,w,c
  9994  001730  1028               	iorwf	??_calculateSetFilterMask+22,w,c
  9995  001732  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
  9996  001734  5017               	movf	??_calculateSetFilterMask+5,w,c
  9997  001736  1029               	iorwf	??_calculateSetFilterMask+23,w,c
  9998  001738  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
  9999  00173A  5018               	movf	??_calculateSetFilterMask+6,w,c
 10000  00173C  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10001  00173E  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10002  001740  0EFF               	movlw	255
 10003  001742  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10004  001744  6E31               	movwf	calculateSetFilterMask@rowmask,c
 10005  001746  502C               	movf	??_calculateSetFilterMask+26,w,c
 10006  001748  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
 10007  00174A  502D               	movf	??_calculateSetFilterMask+27,w,c
 10008  00174C  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
 10009  00174E  502E               	movf	??_calculateSetFilterMask+28,w,c
 10010  001750  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
 10011                           
 10012                           ;main.c: 2636: ;
 10013                           ;main.c: 2641: rowfilter =
 10014                           ;main.c: 2643: ( (uint32_t)( readEEPROM( 0x43 + 8*i + 1 ) & 1 ) << 24 ) |
 10015                           ;main.c: 2645: ( (uint32_t)readEEPROM( 0x43 + 8*i + 3 ) << 16 ) |
 10016                           ;main.c: 2647: ( (uint32_t)readEEPROM( 0x43 + 8*i + 5 ) << 8 ) |
 10017                           ;main.c: 2650: readEEPROM( 0x43 + 8*i );
 10018  001752  5043               	movf	calculateSetFilterMask@i,w,c
 10019  001754  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10020  001756  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10021  001758  90D8               	bcf	status,0,c
 10022  00175A  3612               	rlcf	??_calculateSetFilterMask,f,c
 10023  00175C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10024  00175E  90D8               	bcf	status,0,c
 10025  001760  3612               	rlcf	??_calculateSetFilterMask,f,c
 10026  001762  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10027  001764  90D8               	bcf	status,0,c
 10028  001766  3612               	rlcf	??_calculateSetFilterMask,f,c
 10029  001768  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10030  00176A  0E48               	movlw	72
 10031  00176C  2412               	addwf	??_calculateSetFilterMask,w,c
 10032  00176E  6E08               	movwf	?_readEEPROM,c
 10033  001770  0E00               	movlw	0
 10034  001772  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10035  001774  6E09               	movwf	?_readEEPROM+1,c
 10036  001776  EC86  F01F         	call	_readEEPROM	;wreg free
 10037  00177A  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10038  00177C  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 10039  001780  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 10040  001782  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10041  001784  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 10042  001786  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 10043  00178A  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 10044  00178E  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 10045  001792  6A15               	clrf	??_calculateSetFilterMask+3,c
 10046  001794  5043               	movf	calculateSetFilterMask@i,w,c
 10047  001796  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 10048  001798  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 10049  00179A  90D8               	bcf	status,0,c
 10050  00179C  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10051  00179E  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10052  0017A0  90D8               	bcf	status,0,c
 10053  0017A2  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10054  0017A4  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10055  0017A6  90D8               	bcf	status,0,c
 10056  0017A8  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10057  0017AA  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10058  0017AC  0E46               	movlw	70
 10059  0017AE  2419               	addwf	??_calculateSetFilterMask+7,w,c
 10060  0017B0  6E08               	movwf	?_readEEPROM,c
 10061  0017B2  0E00               	movlw	0
 10062  0017B4  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 10063  0017B6  6E09               	movwf	?_readEEPROM+1,c
 10064  0017B8  EC86  F01F         	call	_readEEPROM	;wreg free
 10065  0017BC  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 10066  0017BE  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 10067  0017C2  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 10068  0017C4  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 10069  0017C6  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 10070  0017C8  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 10071  0017CC  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 10072  0017D0  6A1D               	clrf	??_calculateSetFilterMask+11,c
 10073  0017D2  6A1C               	clrf	??_calculateSetFilterMask+10,c
 10074  0017D4  5043               	movf	calculateSetFilterMask@i,w,c
 10075  0017D6  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 10076  0017D8  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 10077  0017DA  90D8               	bcf	status,0,c
 10078  0017DC  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10079  0017DE  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10080  0017E0  90D8               	bcf	status,0,c
 10081  0017E2  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10082  0017E4  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10083  0017E6  90D8               	bcf	status,0,c
 10084  0017E8  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10085  0017EA  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10086  0017EC  0E44               	movlw	68
 10087  0017EE  2420               	addwf	??_calculateSetFilterMask+14,w,c
 10088  0017F0  6E08               	movwf	?_readEEPROM,c
 10089  0017F2  0E00               	movlw	0
 10090  0017F4  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 10091  0017F6  6E09               	movwf	?_readEEPROM+1,c
 10092  0017F8  EC86  F01F         	call	_readEEPROM	;wreg free
 10093  0017FC  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 10094  0017FE  0E01               	movlw	1
 10095  001800  1622               	andwf	??_calculateSetFilterMask+16,f,c
 10096  001802  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 10097  001806  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 10098  001808  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 10099  00180A  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 10100  00180C  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
 10101  001810  6A25               	clrf	??_calculateSetFilterMask+19,c
 10102  001812  6A24               	clrf	??_calculateSetFilterMask+18,c
 10103  001814  6A23               	clrf	??_calculateSetFilterMask+17,c
 10104  001816  501C               	movf	??_calculateSetFilterMask+10,w,c
 10105  001818  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 10106  00181A  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 10107  00181C  501D               	movf	??_calculateSetFilterMask+11,w,c
 10108  00181E  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 10109  001820  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 10110  001822  501E               	movf	??_calculateSetFilterMask+12,w,c
 10111  001824  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 10112  001826  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 10113  001828  501F               	movf	??_calculateSetFilterMask+13,w,c
 10114  00182A  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 10115  00182C  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 10116  00182E  5015               	movf	??_calculateSetFilterMask+3,w,c
 10117  001830  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 10118  001832  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 10119  001834  5016               	movf	??_calculateSetFilterMask+4,w,c
 10120  001836  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 10121  001838  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 10122  00183A  5017               	movf	??_calculateSetFilterMask+5,w,c
 10123  00183C  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 10124  00183E  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 10125  001840  5018               	movf	??_calculateSetFilterMask+6,w,c
 10126  001842  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10127  001844  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10128  001846  5043               	movf	calculateSetFilterMask@i,w,c
 10129  001848  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
 10130  00184A  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
 10131  00184C  90D8               	bcf	status,0,c
 10132  00184E  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10133  001850  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10134  001852  90D8               	bcf	status,0,c
 10135  001854  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10136  001856  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10137  001858  90D8               	bcf	status,0,c
 10138  00185A  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10139  00185C  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10140  00185E  0E43               	movlw	67
 10141  001860  242F               	addwf	??_calculateSetFilterMask+29,w,c
 10142  001862  6E08               	movwf	?_readEEPROM,c
 10143  001864  0E00               	movlw	0
 10144  001866  2030               	addwfc	??_calculateSetFilterMask+30,w,c
 10145  001868  6E09               	movwf	?_readEEPROM+1,c
 10146  00186A  EC86  F01F         	call	_readEEPROM	;wreg free
 10147  00186E  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10148  001870  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
 10149  001872  502C               	movf	??_calculateSetFilterMask+26,w,c
 10150  001874  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
 10151  001876  502D               	movf	??_calculateSetFilterMask+27,w,c
 10152  001878  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
 10153  00187A  502E               	movf	??_calculateSetFilterMask+28,w,c
 10154  00187C  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
 10155                           
 10156                           ;main.c: 2652: if ( 0 == i ) filter = rowfilter;
 10157  00187E  6643               	tstfsz	calculateSetFilterMask@i,c
 10158  001880  D008               	goto	l8479
 10159  001882  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
 10160  001886  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
 10161  00188A  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
 10162  00188E  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
 10163  001892                     l8479:
 10164                           
 10165                           ;main.c: 2656: mask &= rowmask;
 10166  001892  5031               	movf	calculateSetFilterMask@rowmask,w,c
 10167  001894  1636               	andwf	calculateSetFilterMask@mask,f,c
 10168  001896  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
 10169  001898  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10170  00189A  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
 10171  00189C  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10172  00189E  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
 10173  0018A0  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10174                           
 10175                           ;main.c: 2661: for ( j=0; j<32; j++ ) {
 10176  0018A2  6A42               	clrf	calculateSetFilterMask@j,c
 10177  0018A4                     l8487:
 10178                           
 10179                           ;main.c: 2663: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
 10180  0018A4  5042               	movf	calculateSetFilterMask@j,w,c
 10181  0018A6  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
 10182  0018AA  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
 10183  0018AE  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
 10184  0018B2  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
 10185  0018B6  2AE8               	incf	wreg,f,c
 10186  0018B8  D005               	goto	u9900
 10187  0018BA                     u9905:
 10188  0018BA  90D8               	bcf	status,0,c
 10189  0018BC  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10190  0018BE  3214               	rrcf	??_calculateSetFilterMask+2,f,c
 10191  0018C0  3213               	rrcf	??_calculateSetFilterMask+1,f,c
 10192  0018C2  3212               	rrcf	??_calculateSetFilterMask,f,c
 10193  0018C4                     u9900:
 10194  0018C4  2EE8               	decfsz	wreg,f,c
 10195  0018C6  D7F9               	goto	u9905
 10196  0018C8  0E01               	movlw	1
 10197  0018CA  1612               	andwf	??_calculateSetFilterMask,f,c
 10198  0018CC  5042               	movf	calculateSetFilterMask@j,w,c
 10199  0018CE  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
 10200  0018D2  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
 10201  0018D6  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
 10202  0018DA  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
 10203  0018DE  2AE8               	incf	wreg,f,c
 10204  0018E0  D005               	goto	u9910
 10205  0018E2                     u9915:
 10206  0018E2  90D8               	bcf	status,0,c
 10207  0018E4  3219               	rrcf	??_calculateSetFilterMask+7,f,c
 10208  0018E6  3218               	rrcf	??_calculateSetFilterMask+6,f,c
 10209  0018E8  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10210  0018EA  3216               	rrcf	??_calculateSetFilterMask+4,f,c
 10211  0018EC                     u9910:
 10212  0018EC  2EE8               	decfsz	wreg,f,c
 10213  0018EE  D7F9               	goto	u9915
 10214  0018F0  5016               	movf	??_calculateSetFilterMask+4,w,c
 10215  0018F2  0B01               	andlw	1
 10216  0018F4  1812               	xorwf	??_calculateSetFilterMask,w,c
 10217  0018F6  E01D               	bz	l8491
 10218                           
 10219                           ;main.c: 2664: mask &= ~(1<<j);
 10220  0018F8  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
 10221  0018FC  0E01               	movlw	1
 10222  0018FE  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10223  001900  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10224  001902  2A12               	incf	??_calculateSetFilterMask,f,c
 10225  001904  D003               	goto	u9934
 10226  001906                     u9935:
 10227  001906  90D8               	bcf	status,0,c
 10228  001908  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10229  00190A  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10230  00190C                     u9934:
 10231  00190C  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10232  00190E  D7FB               	goto	u9935
 10233  001910  1C13               	comf	??_calculateSetFilterMask+1,w,c
 10234  001912  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10235  001914  1C14               	comf	??_calculateSetFilterMask+2,w,c
 10236  001916  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
 10237  001918  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10238  00191A  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10239  00191C  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
 10240  00191E  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
 10241  001920  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10242  001922  5015               	movf	??_calculateSetFilterMask+3,w,c
 10243  001924  1636               	andwf	calculateSetFilterMask@mask,f,c
 10244  001926  5016               	movf	??_calculateSetFilterMask+4,w,c
 10245  001928  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10246  00192A  5017               	movf	??_calculateSetFilterMask+5,w,c
 10247  00192C  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10248  00192E  5018               	movf	??_calculateSetFilterMask+6,w,c
 10249  001930  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10250  001932                     l8491:
 10251  001932  2A42               	incf	calculateSetFilterMask@j,f,c
 10252  001934  0E1F               	movlw	31
 10253  001936  6442               	cpfsgt	calculateSetFilterMask@j,c
 10254  001938  D7B5               	goto	l8487
 10255                           
 10256                           ;main.c: 2665: }
 10257                           ;main.c: 2666: }
 10258                           ;main.c: 2672: filter &= rowfilter;
 10259  00193A  503E               	movf	calculateSetFilterMask@rowfilter,w,c
 10260  00193C  163A               	andwf	calculateSetFilterMask@filter,f,c
 10261  00193E  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
 10262  001940  163B               	andwf	calculateSetFilterMask@filter+1,f,c
 10263  001942  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
 10264  001944  163C               	andwf	calculateSetFilterMask@filter+2,f,c
 10265  001946  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
 10266  001948  163D               	andwf	calculateSetFilterMask@filter+3,f,c
 10267                           
 10268                           ;main.c: 2680: }
 10269                           ;main.c: 2682: if ( i ) {
 10270                           
 10271                           ;main.c: 2675: if ( !readEEPROM( 0x43 + 8*i + 1 ) & 0x40 ) {
 10272  00194A  5043               	movf	calculateSetFilterMask@i,w,c
 10273  00194C  E04F               	bz	l8511
 10274                           
 10275                           ;main.c: 2685: for (j=0; j<8; j++ ) {
 10276  00194E  6A42               	clrf	calculateSetFilterMask@j,c
 10277  001950                     l8505:
 10278                           
 10279                           ;main.c: 2686: if ( (lastOID>>i & 1 )
 10280                           ;main.c: 2687: != (readEEPROM( 0x43 + 8*i )>>i & 1) ) {
 10281  001950  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10282  001954  5043               	movf	calculateSetFilterMask@i,w,c
 10283  001956  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10284  001958  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10285  00195A  90D8               	bcf	status,0,c
 10286  00195C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10287  00195E  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10288  001960  90D8               	bcf	status,0,c
 10289  001962  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10290  001964  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10291  001966  90D8               	bcf	status,0,c
 10292  001968  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10293  00196A  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10294  00196C  0E43               	movlw	67
 10295  00196E  2413               	addwf	??_calculateSetFilterMask+1,w,c
 10296  001970  6E08               	movwf	?_readEEPROM,c
 10297  001972  0E00               	movlw	0
 10298  001974  2014               	addwfc	??_calculateSetFilterMask+2,w,c
 10299  001976  6E09               	movwf	?_readEEPROM+1,c
 10300  001978  EC86  F01F         	call	_readEEPROM	;wreg free
 10301  00197C  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10302  00197E  2A12               	incf	??_calculateSetFilterMask,f,c
 10303  001980  D002               	goto	u9964
 10304  001982                     u9965:
 10305  001982  90D8               	bcf	status,0,c
 10306  001984  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10307  001986                     u9964:
 10308  001986  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10309  001988  D7FC               	goto	u9965
 10310  00198A  0E01               	movlw	1
 10311  00198C  1615               	andwf	??_calculateSetFilterMask+3,f,c
 10312  00198E  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 10313  001992  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 10314  001996  2A16               	incf	??_calculateSetFilterMask+4,f,c
 10315  001998  D002               	goto	u9974
 10316  00199A                     u9975:
 10317  00199A  90D8               	bcf	status,0,c
 10318  00199C  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10319  00199E                     u9974:
 10320  00199E  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 10321  0019A0  D7FC               	goto	u9975
 10322  0019A2  5017               	movf	??_calculateSetFilterMask+5,w,c
 10323  0019A4  0B01               	andlw	1
 10324  0019A6  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 10325  0019A8  E01D               	bz	l8509
 10326                           
 10327                           ;main.c: 2688: mask &= (1<<i);
 10328  0019AA  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10329  0019AE  0E01               	movlw	1
 10330  0019B0  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10331  0019B2  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10332  0019B4  2A12               	incf	??_calculateSetFilterMask,f,c
 10333  0019B6  D003               	goto	u9994
 10334  0019B8                     u9995:
 10335  0019B8  90D8               	bcf	status,0,c
 10336  0019BA  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10337  0019BC  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10338  0019BE                     u9994:
 10339  0019BE  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10340  0019C0  D7FB               	goto	u9995
 10341  0019C2  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 10342  0019C6  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 10343  0019CA  0E00               	movlw	0
 10344  0019CC  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10345  0019CE  0EFF               	movlw	255
 10346  0019D0  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 10347  0019D2  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10348  0019D4  5015               	movf	??_calculateSetFilterMask+3,w,c
 10349  0019D6  1636               	andwf	calculateSetFilterMask@mask,f,c
 10350  0019D8  5016               	movf	??_calculateSetFilterMask+4,w,c
 10351  0019DA  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10352  0019DC  5017               	movf	??_calculateSetFilterMask+5,w,c
 10353  0019DE  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10354  0019E0  5018               	movf	??_calculateSetFilterMask+6,w,c
 10355  0019E2  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10356  0019E4                     l8509:
 10357  0019E4  2A42               	incf	calculateSetFilterMask@j,f,c
 10358  0019E6  0E07               	movlw	7
 10359  0019E8  6442               	cpfsgt	calculateSetFilterMask@j,c
 10360  0019EA  D7B2               	goto	l8505
 10361  0019EC                     l8511:
 10362                           
 10363                           ;main.c: 2689: }
 10364                           ;main.c: 2690: }
 10365                           ;main.c: 2692: lastOID = readEEPROM( 0x43 + 8*i );
 10366  0019EC  5043               	movf	calculateSetFilterMask@i,w,c
 10367  0019EE  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10368  0019F0  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10369  0019F2  90D8               	bcf	status,0,c
 10370  0019F4  3612               	rlcf	??_calculateSetFilterMask,f,c
 10371  0019F6  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10372  0019F8  90D8               	bcf	status,0,c
 10373  0019FA  3612               	rlcf	??_calculateSetFilterMask,f,c
 10374  0019FC  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10375  0019FE  90D8               	bcf	status,0,c
 10376  001A00  3612               	rlcf	??_calculateSetFilterMask,f,c
 10377  001A02  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10378  001A04  0E43               	movlw	67
 10379  001A06  2412               	addwf	??_calculateSetFilterMask,w,c
 10380  001A08  6E08               	movwf	?_readEEPROM,c
 10381  001A0A  0E00               	movlw	0
 10382  001A0C  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10383  001A0E  6E09               	movwf	?_readEEPROM+1,c
 10384  001A10  EC86  F01F         	call	_readEEPROM	;wreg free
 10385  001A14  6E35               	movwf	calculateSetFilterMask@lastOID,c
 10386  001A16                     l8515:
 10387  001A16  2A43               	incf	calculateSetFilterMask@i,f,c
 10388  001A18  0E06               	movlw	6
 10389  001A1A  6443               	cpfsgt	calculateSetFilterMask@i,c
 10390  001A1C  D5FD               	goto	l8471
 10391                           
 10392                           ;main.c: 2698: }
 10393                           ;main.c: 2700: }
 10394                           ;main.c: 2701: }
 10395                           ;main.c: 2704: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 10396  001A1E  0E80               	movlw	128
 10397  001A20  EC38  F01F         	call	_ECANSetOperationMode
 10398                           
 10399                           ;main.c: 2707: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 10400  001A24  010F               	movlb	15	; () banked
 10401  001A26  0E0F               	movlw	15	;volatile
 10402  001A28  6E09               	movwf	?__CANIDToRegs+1,c
 10403  001A2A  0E1C               	movlw	28	;volatile
 10404  001A2C  6E08               	movwf	?__CANIDToRegs,c
 10405  001A2E  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 10406  001A32  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 10407  001A36  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 10408  001A3A  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 10409  001A3E  0E01               	movlw	1
 10410  001A40  6E0E               	movwf	?__CANIDToRegs+6,c
 10411  001A42  EC6C  F017         	call	__CANIDToRegs	;wreg free
 10412                           
 10413                           ;main.c: 2710: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 10414  001A46  010D               	movlb	13	; () banked
 10415  001A48  83D4               	bsf	212,1,b	;volatile
 10416                           
 10417                           ; BSR set to: 13
 10418  001A4A  010F               	movlb	15	; () banked
 10419  001A4C  0E0F               	movlw	15	;volatile
 10420  001A4E  6E09               	movwf	?__CANIDToRegs+1,c
 10421  001A50  0E04               	movlw	4	;volatile
 10422  001A52  6E08               	movwf	?__CANIDToRegs,c
 10423  001A54  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 10424  001A58  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 10425  001A5C  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 10426  001A60  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 10427  001A64  0E01               	movlw	1
 10428  001A66  6E0E               	movwf	?__CANIDToRegs+6,c
 10429  001A68  EC6C  F017         	call	__CANIDToRegs	;wreg free
 10430                           
 10431                           ;main.c: 2713: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 10432  001A6C  0E00               	movlw	0
 10433  001A6E  EF38  F01F         	goto	_ECANSetOperationMode
 10434  001A72                     __end_of_calculateSetFilterMask:
 10435                           	opt stack 0
 10436                           tblptru	equ	0xFF8
 10437                           prodh	equ	0xFF4
 10438                           prodl	equ	0xFF3
 10439                           postinc0	equ	0xFEE
 10440                           wreg	equ	0xFE8
 10441                           indf2	equ	0xFDF
 10442                           postinc2	equ	0xFDE
 10443                           postdec2	equ	0xFDD
 10444                           fsr2h	equ	0xFDA
 10445                           fsr2l	equ	0xFD9
 10446                           status	equ	0xFD8
 10447                           
 10448 ;; *************** function _SendInformationEvent *****************
 10449 ;; Defined at:
 10450 ;;		line 1569 in file "../main.c"
 10451 ;; Parameters:    Size  Location     Type
 10452 ;;  idx             1    wreg     unsigned char 
 10453 ;;  eventClass      1   20[BANK0 ] unsigned char 
 10454 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
 10455 ;; Auto vars:     Size  Location     Type
 10456 ;;  idx             1   79[COMRAM] unsigned char 
 10457 ;;  data            3   76[COMRAM] unsigned char [3]
 10458 ;; Return value:  Size  Location     Type
 10459 ;;		None               void
 10460 ;; Registers used:
 10461 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10462 ;; Tracked objects:
 10463 ;;		On entry : F/0
 10464 ;;		On exit  : F/0
 10465 ;;		Unchanged: 0/0
 10466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10467 ;;      Params:         0       2       0       0       0       0       0
 10468 ;;      Locals:         4       0       0       0       0       0       0
 10469 ;;      Temps:          2       0       0       0       0       0       0
 10470 ;;      Totals:         6       2       0       0       0       0       0
 10471 ;;Total ram usage:        8 bytes
 10472 ;; Hardware stack levels used:    1
 10473 ;; Hardware stack levels required when called:    6
 10474 ;; This function calls:
 10475 ;;		_readEEPROM
 10476 ;;		_sendVSCPFrame
 10477 ;; This function is called by:
 10478 ;;		_doApplicationOneSecondWork
 10479 ;;		_vscp_writeAppReg
 10480 ;;		_doActionOn
 10481 ;;		_doActionOff
 10482 ;;		_doActionStatus
 10483 ;;		_doActionToggle
 10484 ;; This function uses a non-reentrant model
 10485 ;;
 10486                           
 10487                           	psect	text28
 10488  0039F6                     __ptext28:
 10489                           	opt stack 0
 10490  0039F6                     _SendInformationEvent:
 10491                           	opt stack 23
 10492                           
 10493                           ;incstack = 0
 10494                           ;incstack = 0
 10495                           ;SendInformationEvent@idx stored from wreg
 10496  0039F6  CFE8 F050          	movff	wreg,SendInformationEvent@idx
 10497                           
 10498                           ; BSR set to: 0
 10499                           ;main.c: 1570: uint8_t data[3];
 10500                           ;main.c: 1583: data[ 0 ] = idx;
 10501  0039FA  C050  F04D         	movff	SendInformationEvent@idx,SendInformationEvent@data
 10502                           
 10503                           ; BSR set to: 0
 10504                           ;main.c: 1584: data[ 1 ] = readEEPROM( 0x43 + 50 + 2*idx );
 10505  0039FE  90D8               	bcf	status,0,c
 10506  003A00  3450               	rlcf	SendInformationEvent@idx,w,c
 10507  003A02  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10508  003A04  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10509  003A06  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10510  003A08  0E75               	movlw	117
 10511  003A0A  244B               	addwf	??_SendInformationEvent,w,c
 10512  003A0C  6E08               	movwf	?_readEEPROM,c
 10513  003A0E  0E00               	movlw	0
 10514  003A10  204C               	addwfc	??_SendInformationEvent+1,w,c
 10515  003A12  6E09               	movwf	?_readEEPROM+1,c
 10516  003A14  EC86  F01F         	call	_readEEPROM	;wreg free
 10517  003A18  6E4E               	movwf	SendInformationEvent@data+1,c
 10518                           
 10519                           ;main.c: 1585: data[ 2 ] = readEEPROM( 0x43 + 51 + 2*idx );
 10520  003A1A  90D8               	bcf	status,0,c
 10521  003A1C  3450               	rlcf	SendInformationEvent@idx,w,c
 10522  003A1E  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10523  003A20  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10524  003A22  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10525  003A24  0E76               	movlw	118
 10526  003A26  244B               	addwf	??_SendInformationEvent,w,c
 10527  003A28  6E08               	movwf	?_readEEPROM,c
 10528  003A2A  0E00               	movlw	0
 10529  003A2C  204C               	addwfc	??_SendInformationEvent+1,w,c
 10530  003A2E  6E09               	movwf	?_readEEPROM+1,c
 10531  003A30  EC86  F01F         	call	_readEEPROM	;wreg free
 10532  003A34  6E4F               	movwf	SendInformationEvent@data+2,c
 10533                           
 10534                           ;main.c: 1586: sendVSCPFrame( eventClass,
 10535                           ;main.c: 1587: eventTypeId,
 10536                           ;main.c: 1588: vscp_nickname,
 10537                           ;main.c: 1589: 0x03,
 10538                           ;main.c: 1590: 3,
 10539                           ;main.c: 1591: data );
 10540  003A36  0100               	movlb	0	; () banked
 10541  003A38  C0C5  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
 10542  003A3C  6A40               	clrf	?_sendVSCPFrame+1,c
 10543  003A3E  C0C6  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
 10544  003A42  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 10545  003A46  0E03               	movlw	3
 10546  003A48  6E43               	movwf	?_sendVSCPFrame+4,c
 10547  003A4A  6E44               	movwf	?_sendVSCPFrame+5,c
 10548  003A4C  0E4D               	movlw	low SendInformationEvent@data
 10549  003A4E  6E45               	movwf	?_sendVSCPFrame+6,c
 10550  003A50  0E00               	movlw	high SendInformationEvent@data
 10551  003A52  6E46               	movwf	?_sendVSCPFrame+7,c
 10552  003A54  0E0F               	movlw	15
 10553  003A56  6E46               	movwf	?_sendVSCPFrame+7,c
 10554  003A58  0E5F               	movlw	__accesstop+-1
 10555  003A5A  6445               	cpfsgt	?_sendVSCPFrame+6,c
 10556  003A5C  6A46               	clrf	?_sendVSCPFrame+7,c
 10557  003A5E  EF4D  F01B         	goto	_sendVSCPFrame	;wreg free
 10558  003A62                     __end_of_SendInformationEvent:
 10559                           	opt stack 0
 10560                           tblptru	equ	0xFF8
 10561                           prodh	equ	0xFF4
 10562                           prodl	equ	0xFF3
 10563                           postinc0	equ	0xFEE
 10564                           wreg	equ	0xFE8
 10565                           indf2	equ	0xFDF
 10566                           postinc2	equ	0xFDE
 10567                           postdec2	equ	0xFDD
 10568                           fsr2h	equ	0xFDA
 10569                           fsr2l	equ	0xFD9
 10570                           status	equ	0xFD8
 10571                           
 10572 ;; *************** function _vscp_readRegister *****************
 10573 ;; Defined at:
 10574 ;;		line 550 in file "../../vscp_firmware/common/vscp_firmware.c"
 10575 ;; Parameters:    Size  Location     Type
 10576 ;;  reg             1    wreg     unsigned char 
 10577 ;; Auto vars:     Size  Location     Type
 10578 ;;  reg             1   13[COMRAM] unsigned char 
 10579 ;; Return value:  Size  Location     Type
 10580 ;;                  1    wreg      unsigned char 
 10581 ;; Registers used:
 10582 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10583 ;; Tracked objects:
 10584 ;;		On entry : F/0
 10585 ;;		On exit  : 0/0
 10586 ;;		Unchanged: 0/0
 10587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10588 ;;      Params:         0       0       0       0       0       0       0
 10589 ;;      Locals:         1       0       0       0       0       0       0
 10590 ;;      Temps:          0       0       0       0       0       0       0
 10591 ;;      Totals:         1       0       0       0       0       0       0
 10592 ;;Total ram usage:        1 bytes
 10593 ;; Hardware stack levels used:    1
 10594 ;; Hardware stack levels required when called:    5
 10595 ;; This function calls:
 10596 ;;		_vscp_readAppReg
 10597 ;;		_vscp_readStdReg
 10598 ;; This function is called by:
 10599 ;;		_vscp_handleProtocolEvent
 10600 ;; This function uses a non-reentrant model
 10601 ;;
 10602                           
 10603                           	psect	text29
 10604  003E26                     __ptext29:
 10605                           	opt stack 0
 10606  003E26                     _vscp_readRegister:
 10607                           	opt stack 24
 10608                           
 10609                           ; BSR set to: 0
 10610                           ;incstack = 0
 10611                           ;incstack = 0
 10612                           ;vscp_readRegister@reg stored from wreg
 10613  003E26  CFE8 F00E          	movff	wreg,vscp_readRegister@reg
 10614                           
 10615                           ; BSR set to: 0
 10616                           ;vscp_firmware.c: 551: if (reg >= 0x80) {
 10617  003E2A  0E7F               	movlw	127
 10618  003E2C  640E               	cpfsgt	vscp_readRegister@reg,c
 10619  003E2E  D004               	goto	l8991
 10620                           
 10621                           ; BSR set to: 0
 10622                           ;vscp_firmware.c: 552: return vscp_readStdReg(reg);
 10623  003E30  500E               	movf	vscp_readRegister@reg,w,c
 10624  003E32  ECB1  F019         	call	_vscp_readStdReg
 10625  003E36  D003               	goto	l1105
 10626  003E38                     l8991:
 10627                           
 10628                           ; BSR set to: 0
 10629                           ;vscp_firmware.c: 554: return vscp_readAppReg(reg);
 10630  003E38  500E               	movf	vscp_readRegister@reg,w,c
 10631  003E3A  ECA8  F01B         	call	_vscp_readAppReg
 10632  003E3E                     l1105:
 10633  003E3E  0012               	return	
 10634  003E40                     __end_of_vscp_readRegister:
 10635                           	opt stack 0
 10636                           tblptru	equ	0xFF8
 10637                           prodh	equ	0xFF4
 10638                           prodl	equ	0xFF3
 10639                           postinc0	equ	0xFEE
 10640                           wreg	equ	0xFE8
 10641                           indf2	equ	0xFDF
 10642                           postinc2	equ	0xFDE
 10643                           postdec2	equ	0xFDD
 10644                           fsr2h	equ	0xFDA
 10645                           fsr2l	equ	0xFD9
 10646                           status	equ	0xFD8
 10647                           
 10648 ;; *************** function _vscp_readStdReg *****************
 10649 ;; Defined at:
 10650 ;;		line 563 in file "../../vscp_firmware/common/vscp_firmware.c"
 10651 ;; Parameters:    Size  Location     Type
 10652 ;;  reg             1    wreg     unsigned char 
 10653 ;; Auto vars:     Size  Location     Type
 10654 ;;  reg             1   12[COMRAM] unsigned char 
 10655 ;;  rv              1   11[COMRAM] unsigned char 
 10656 ;; Return value:  Size  Location     Type
 10657 ;;                  1    wreg      unsigned char 
 10658 ;; Registers used:
 10659 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10660 ;; Tracked objects:
 10661 ;;		On entry : F/0
 10662 ;;		On exit  : 0/0
 10663 ;;		Unchanged: 0/0
 10664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10665 ;;      Params:         0       0       0       0       0       0       0
 10666 ;;      Locals:         2       0       0       0       0       0       0
 10667 ;;      Temps:          0       0       0       0       0       0       0
 10668 ;;      Totals:         2       0       0       0       0       0       0
 10669 ;;Total ram usage:        2 bytes
 10670 ;; Hardware stack levels used:    1
 10671 ;; Hardware stack levels required when called:    4
 10672 ;; This function calls:
 10673 ;;		_vscp_getMajorVersion
 10674 ;;		_vscp_getMinorVersion
 10675 ;;		_vscp_getSubMinorVersion
 10676 ;;		_vscp_getGUID
 10677 ;;		_vscp_getMDF_URL
 10678 ;;		_vscp_getUserID
 10679 ;;		_vscp_getManufacturerId
 10680 ;;		_vscp_getBootLoaderAlgorithm
 10681 ;;		_vscp_getBufferSize
 10682 ;;		_vscp_getRegisterPagesUsed
 10683 ;; This function is called by:
 10684 ;;		_vscp_readRegister
 10685 ;;		_vscp_handleProtocolEvent
 10686 ;; This function uses a non-reentrant model
 10687 ;;
 10688                           
 10689                           	psect	text30
 10690  003362                     __ptext30:
 10691                           	opt stack 0
 10692  003362                     _vscp_readStdReg:
 10693                           	opt stack 25
 10694                           
 10695                           ;incstack = 0
 10696                           ;incstack = 0
 10697                           ;vscp_readStdReg@reg stored from wreg
 10698  003362  CFE8 F00D          	movff	wreg,vscp_readStdReg@reg
 10699                           
 10700                           ; BSR set to: 0
 10701                           ;vscp_firmware.c: 566: if (0x80 == reg) {
 10702                           
 10703                           ; BSR set to: 0
 10704  003366  500D               	movf	vscp_readStdReg@reg,w,c
 10705  003368  0A80               	xorlw	128
 10706  00336A  E104               	bnz	l9001
 10707                           
 10708                           ; BSR set to: 0
 10709                           ;vscp_firmware.c: 569: rv = vscp_alarmstatus;
 10710  00336C  C08C  F00C         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 10711                           
 10712                           ;vscp_firmware.c: 570: vscp_alarmstatus = 0x00;
 10713  003370  6B8C               	clrf	_vscp_alarmstatus& (0+255),b
 10714                           
 10715                           ;vscp_firmware.c: 572: }
 10716  003372  D067               	goto	l9067
 10717  003374                     l9001:
 10718                           
 10719                           ; BSR set to: 0
 10720                           ;vscp_firmware.c: 573: else if (0x81 == reg) {
 10721  003374  500D               	movf	vscp_readStdReg@reg,w,c
 10722  003376  0A81               	xorlw	129
 10723  003378  E102               	bnz	l9005
 10724                           
 10725                           ; BSR set to: 0
 10726                           ;vscp_firmware.c: 576: rv = 1;
 10727  00337A  0E01               	movlw	1
 10728  00337C  D061               	goto	L27
 10729  00337E                     l9005:
 10730                           
 10731                           ; BSR set to: 0
 10732                           ;vscp_firmware.c: 579: else if (0x82 == reg) {
 10733  00337E  500D               	movf	vscp_readStdReg@reg,w,c
 10734  003380  0A82               	xorlw	130
 10735  003382  E102               	bnz	l9009
 10736                           
 10737                           ; BSR set to: 0
 10738                           ;vscp_firmware.c: 582: rv = 5;
 10739  003384  0E05               	movlw	5
 10740  003386  D05C               	goto	L27
 10741  003388                     l9009:
 10742                           
 10743                           ; BSR set to: 0
 10744                           ;vscp_firmware.c: 585: else if (0x83 == reg) {
 10745  003388  500D               	movf	vscp_readStdReg@reg,w,c
 10746  00338A  0A83               	xorlw	131
 10747  00338C  E102               	bnz	l9013
 10748                           
 10749                           ; BSR set to: 0
 10750                           ;vscp_firmware.c: 588: rv = 0;
 10751  00338E  6A0C               	clrf	vscp_readStdReg@rv,c
 10752                           
 10753                           ;vscp_firmware.c: 590: }
 10754  003390  D058               	goto	l9067
 10755  003392                     l9013:
 10756                           
 10757                           ; BSR set to: 0
 10758                           ;vscp_firmware.c: 591: else if (0x94 == reg) {
 10759  003392  500D               	movf	vscp_readStdReg@reg,w,c
 10760  003394  0A94               	xorlw	148
 10761  003396  E103               	bnz	l9017
 10762                           
 10763                           ; BSR set to: 0
 10764                           ;vscp_firmware.c: 594: rv = vscp_getMajorVersion();
 10765  003398  ECCA  F01F         	call	_vscp_getMajorVersion	;wreg free
 10766  00339C  D051               	goto	L27
 10767  00339E                     l9017:
 10768                           
 10769                           ; BSR set to: 0
 10770                           ;vscp_firmware.c: 597: else if (0x95 == reg) {
 10771  00339E  500D               	movf	vscp_readStdReg@reg,w,c
 10772  0033A0  0A95               	xorlw	149
 10773  0033A2  E103               	bnz	l9021
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;vscp_firmware.c: 600: rv = vscp_getMinorVersion();
 10777  0033A4  ECC9  F01F         	call	_vscp_getMinorVersion	;wreg free
 10778  0033A8  D04B               	goto	L27
 10779  0033AA                     l9021:
 10780                           
 10781                           ; BSR set to: 0
 10782                           ;vscp_firmware.c: 603: else if (0x96 == reg) {
 10783  0033AA  500D               	movf	vscp_readStdReg@reg,w,c
 10784  0033AC  0A96               	xorlw	150
 10785  0033AE  E103               	bnz	l9025
 10786                           
 10787                           ; BSR set to: 0
 10788                           ;vscp_firmware.c: 606: rv = vscp_getSubMinorVersion();
 10789  0033B0  ECC8  F01F         	call	_vscp_getSubMinorVersion	;wreg free
 10790  0033B4  D045               	goto	L27
 10791  0033B6                     l9025:
 10792                           
 10793                           ; BSR set to: 0
 10794                           ;vscp_firmware.c: 609: else if (reg < 0x89) {
 10795  0033B6  0E89               	movlw	137
 10796  0033B8  600D               	cpfslt	vscp_readStdReg@reg,c
 10797  0033BA  D005               	goto	l9029
 10798                           
 10799                           ; BSR set to: 0
 10800                           ;vscp_firmware.c: 612: rv = vscp_getUserID(reg - 0x84);
 10801  0033BC  500D               	movf	vscp_readStdReg@reg,w,c
 10802  0033BE  0F7C               	addlw	124
 10803  0033C0  EC4E  F01F         	call	_vscp_getUserID
 10804  0033C4  D03D               	goto	L27
 10805  0033C6                     l9029:
 10806                           
 10807                           ; BSR set to: 0
 10808                           ;vscp_firmware.c: 615: else if ((reg > 0x88) &&
 10809                           ;vscp_firmware.c: 616: (reg < 0x91)) {
 10810  0033C6  0E88               	movlw	136
 10811  0033C8  640D               	cpfsgt	vscp_readStdReg@reg,c
 10812  0033CA  D008               	goto	l9035
 10813                           
 10814                           ; BSR set to: 0
 10815  0033CC  0E91               	movlw	145
 10816  0033CE  600D               	cpfslt	vscp_readStdReg@reg,c
 10817  0033D0  D005               	goto	l9035
 10818                           
 10819                           ; BSR set to: 0
 10820                           ;vscp_firmware.c: 619: rv = vscp_getManufacturerId(reg - 0x89);
 10821  0033D2  500D               	movf	vscp_readStdReg@reg,w,c
 10822  0033D4  0F77               	addlw	119
 10823  0033D6  EC44  F01F         	call	_vscp_getManufacturerId
 10824  0033DA  D032               	goto	L27
 10825  0033DC                     l9035:
 10826                           
 10827                           ; BSR set to: 0
 10828                           ;vscp_firmware.c: 622: else if (0x91 == reg) {
 10829  0033DC  500D               	movf	vscp_readStdReg@reg,w,c
 10830  0033DE  0A91               	xorlw	145
 10831  0033E0  E103               	bnz	l9039
 10832                           
 10833                           ; BSR set to: 0
 10834                           ;vscp_firmware.c: 625: rv = vscp_nickname;
 10835  0033E2  C091  F00C         	movff	_vscp_nickname,vscp_readStdReg@rv
 10836                           
 10837                           ;vscp_firmware.c: 627: }
 10838  0033E6  D02D               	goto	l9067
 10839  0033E8                     l9039:
 10840                           
 10841                           ; BSR set to: 0
 10842                           ;vscp_firmware.c: 628: else if (0x93 == reg) {
 10843  0033E8  500D               	movf	vscp_readStdReg@reg,w,c
 10844  0033EA  0A93               	xorlw	147
 10845  0033EC  E103               	bnz	l9043
 10846                           
 10847                           ; BSR set to: 0
 10848                           ;vscp_firmware.c: 631: rv = (vscp_page_select & 0xff);
 10849  0033EE  C052  F00C         	movff	_vscp_page_select,vscp_readStdReg@rv
 10850                           
 10851                           ;vscp_firmware.c: 633: }
 10852  0033F2  D027               	goto	l9067
 10853  0033F4                     l9043:
 10854                           
 10855                           ; BSR set to: 0
 10856                           ;vscp_firmware.c: 635: else if (0x92 == reg) {
 10857  0033F4  500D               	movf	vscp_readStdReg@reg,w,c
 10858  0033F6  0A92               	xorlw	146
 10859  0033F8  E102               	bnz	l9047
 10860                           
 10861                           ; BSR set to: 0
 10862                           ;vscp_firmware.c: 638: rv = (vscp_page_select >> 8) & 0xff;
 10863  0033FA  5053               	movf	_vscp_page_select+1,w,c
 10864  0033FC  D021               	goto	L27
 10865  0033FE                     l9047:
 10866                           
 10867                           ; BSR set to: 0
 10868                           ;vscp_firmware.c: 641: else if (0x97 == reg) {
 10869  0033FE  500D               	movf	vscp_readStdReg@reg,w,c
 10870  003400  0A97               	xorlw	151
 10871  003402  E103               	bnz	l9051
 10872                           
 10873                           ; BSR set to: 0
 10874                           ;vscp_firmware.c: 643: rv = vscp_getBootLoaderAlgorithm();
 10875  003404  ECC7  F01F         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 10876  003408  D01B               	goto	L27
 10877  00340A                     l9051:
 10878                           
 10879                           ; BSR set to: 0
 10880                           ;vscp_firmware.c: 645: else if (0x98 == reg) {
 10881  00340A  500D               	movf	vscp_readStdReg@reg,w,c
 10882  00340C  0A98               	xorlw	152
 10883  00340E  E103               	bnz	l9055
 10884                           
 10885                           ; BSR set to: 0
 10886                           ;vscp_firmware.c: 647: rv = vscp_getBufferSize();
 10887  003410  ECC6  F01F         	call	_vscp_getBufferSize	;wreg free
 10888  003414  D015               	goto	L27
 10889  003416                     l9055:
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;vscp_firmware.c: 649: else if (0x99 == reg) {
 10893  003416  500D               	movf	vscp_readStdReg@reg,w,c
 10894  003418  0A99               	xorlw	153
 10895  00341A  E103               	bnz	l9059
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;vscp_firmware.c: 651: rv = vscp_getRegisterPagesUsed();
 10899  00341C  ECC5  F01F         	call	_vscp_getRegisterPagesUsed	;wreg free
 10900  003420  D00F               	goto	L27
 10901  003422                     l9059:
 10902                           
 10903                           ; BSR set to: 0
 10904                           ;vscp_firmware.c: 653: else if ((reg > (0xD0 - 1)) &&
 10905                           ;vscp_firmware.c: 654: (reg < 0xE0)) {
 10906  003422  0ECF               	movlw	207
 10907  003424  640D               	cpfsgt	vscp_readStdReg@reg,c
 10908  003426  D008               	goto	l9065
 10909                           
 10910                           ; BSR set to: 0
 10911  003428  0EE0               	movlw	224
 10912  00342A  600D               	cpfslt	vscp_readStdReg@reg,c
 10913  00342C  D005               	goto	l9065
 10914                           
 10915                           ; BSR set to: 0
 10916                           ;vscp_firmware.c: 657: rv = vscp_getGUID(reg - 0xD0);
 10917  00342E  500D               	movf	vscp_readStdReg@reg,w,c
 10918  003430  0F30               	addlw	48
 10919  003432  EC58  F01F         	call	_vscp_getGUID
 10920  003436  D004               	goto	L27
 10921  003438                     l9065:
 10922                           
 10923                           ; BSR set to: 0
 10924                           ;vscp_firmware.c: 660: else {
 10925                           ;vscp_firmware.c: 663: rv = vscp_getMDF_URL(reg - 0xE0);
 10926  003438  500D               	movf	vscp_readStdReg@reg,w,c
 10927  00343A  0F20               	addlw	32
 10928  00343C  EC2C  F01F         	call	_vscp_getMDF_URL
 10929  003440                     L27:
 10930  003440  6E0C               	movwf	vscp_readStdReg@rv,c
 10931  003442                     l9067:
 10932                           
 10933                           ;vscp_firmware.c: 665: }
 10934                           ;vscp_firmware.c: 667: return rv;
 10935  003442  500C               	movf	vscp_readStdReg@rv,w,c
 10936  003444  0012               	return	
 10937  003446                     __end_of_vscp_readStdReg:
 10938                           	opt stack 0
 10939                           tblptru	equ	0xFF8
 10940                           prodh	equ	0xFF4
 10941                           prodl	equ	0xFF3
 10942                           postinc0	equ	0xFEE
 10943                           wreg	equ	0xFE8
 10944                           indf2	equ	0xFDF
 10945                           postinc2	equ	0xFDE
 10946                           postdec2	equ	0xFDD
 10947                           fsr2h	equ	0xFDA
 10948                           fsr2l	equ	0xFD9
 10949                           status	equ	0xFD8
 10950                           
 10951 ;; *************** function _vscp_getRegisterPagesUsed *****************
 10952 ;; Defined at:
 10953 ;;		line 2494 in file "../main.c"
 10954 ;; Parameters:    Size  Location     Type
 10955 ;;		None
 10956 ;; Auto vars:     Size  Location     Type
 10957 ;;		None
 10958 ;; Return value:  Size  Location     Type
 10959 ;;                  1    wreg      unsigned char 
 10960 ;; Registers used:
 10961 ;;		wreg
 10962 ;; Tracked objects:
 10963 ;;		On entry : F/0
 10964 ;;		On exit  : F/0
 10965 ;;		Unchanged: F/0
 10966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10967 ;;      Params:         0       0       0       0       0       0       0
 10968 ;;      Locals:         0       0       0       0       0       0       0
 10969 ;;      Temps:          0       0       0       0       0       0       0
 10970 ;;      Totals:         0       0       0       0       0       0       0
 10971 ;;Total ram usage:        0 bytes
 10972 ;; Hardware stack levels used:    1
 10973 ;; Hardware stack levels required when called:    2
 10974 ;; This function calls:
 10975 ;;		Nothing
 10976 ;; This function is called by:
 10977 ;;		_vscp_readStdReg
 10978 ;; This function uses a non-reentrant model
 10979 ;;
 10980                           
 10981                           	psect	text31
 10982  003F8A                     __ptext31:
 10983                           	opt stack 0
 10984  003F8A                     _vscp_getRegisterPagesUsed:
 10985                           	opt stack 26
 10986                           
 10987                           ; BSR set to: 0
 10988                           
 10989                           ; BSR set to: 0
 10990                           ;main.c: 2495: return 1;
 10991                           
 10992                           ;incstack = 0
 10993                           ;incstack = 0
 10994  003F8A  0C01               	retlw	1
 10995  003F8C                     __end_of_vscp_getRegisterPagesUsed:
 10996                           	opt stack 0
 10997                           tblptru	equ	0xFF8
 10998                           prodh	equ	0xFF4
 10999                           prodl	equ	0xFF3
 11000                           postinc0	equ	0xFEE
 11001                           wreg	equ	0xFE8
 11002                           indf2	equ	0xFDF
 11003                           postinc2	equ	0xFDE
 11004                           postdec2	equ	0xFDD
 11005                           fsr2h	equ	0xFDA
 11006                           fsr2l	equ	0xFD9
 11007                           status	equ	0xFD8
 11008                           
 11009 ;; *************** function _vscp_getBufferSize *****************
 11010 ;; Defined at:
 11011 ;;		line 2329 in file "../main.c"
 11012 ;; Parameters:    Size  Location     Type
 11013 ;;		None
 11014 ;; Auto vars:     Size  Location     Type
 11015 ;;		None
 11016 ;; Return value:  Size  Location     Type
 11017 ;;                  1    wreg      unsigned char 
 11018 ;; Registers used:
 11019 ;;		wreg
 11020 ;; Tracked objects:
 11021 ;;		On entry : F/0
 11022 ;;		On exit  : F/0
 11023 ;;		Unchanged: F/0
 11024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11025 ;;      Params:         0       0       0       0       0       0       0
 11026 ;;      Locals:         0       0       0       0       0       0       0
 11027 ;;      Temps:          0       0       0       0       0       0       0
 11028 ;;      Totals:         0       0       0       0       0       0       0
 11029 ;;Total ram usage:        0 bytes
 11030 ;; Hardware stack levels used:    1
 11031 ;; Hardware stack levels required when called:    2
 11032 ;; This function calls:
 11033 ;;		Nothing
 11034 ;; This function is called by:
 11035 ;;		_vscp_readStdReg
 11036 ;; This function uses a non-reentrant model
 11037 ;;
 11038                           
 11039                           	psect	text32
 11040  003F8C                     __ptext32:
 11041                           	opt stack 0
 11042  003F8C                     _vscp_getBufferSize:
 11043                           	opt stack 26
 11044                           
 11045                           ; BSR set to: 0
 11046                           
 11047                           ; BSR set to: 0
 11048                           ;main.c: 2330: return 8;
 11049                           
 11050                           ; BSR set to: 0
 11051                           ;incstack = 0
 11052                           ;incstack = 0
 11053  003F8C  0C08               	retlw	8
 11054  003F8E                     __end_of_vscp_getBufferSize:
 11055                           	opt stack 0
 11056                           tblptru	equ	0xFF8
 11057                           prodh	equ	0xFF4
 11058                           prodl	equ	0xFF3
 11059                           postinc0	equ	0xFEE
 11060                           wreg	equ	0xFE8
 11061                           indf2	equ	0xFDF
 11062                           postinc2	equ	0xFDE
 11063                           postdec2	equ	0xFDD
 11064                           fsr2h	equ	0xFDA
 11065                           fsr2l	equ	0xFD9
 11066                           status	equ	0xFD8
 11067                           
 11068 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 11069 ;; Defined at:
 11070 ;;		line 2320 in file "../main.c"
 11071 ;; Parameters:    Size  Location     Type
 11072 ;;		None
 11073 ;; Auto vars:     Size  Location     Type
 11074 ;;		None
 11075 ;; Return value:  Size  Location     Type
 11076 ;;                  1    wreg      unsigned char 
 11077 ;; Registers used:
 11078 ;;		wreg
 11079 ;; Tracked objects:
 11080 ;;		On entry : F/0
 11081 ;;		On exit  : F/0
 11082 ;;		Unchanged: F/0
 11083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11084 ;;      Params:         0       0       0       0       0       0       0
 11085 ;;      Locals:         0       0       0       0       0       0       0
 11086 ;;      Temps:          0       0       0       0       0       0       0
 11087 ;;      Totals:         0       0       0       0       0       0       0
 11088 ;;Total ram usage:        0 bytes
 11089 ;; Hardware stack levels used:    1
 11090 ;; Hardware stack levels required when called:    2
 11091 ;; This function calls:
 11092 ;;		Nothing
 11093 ;; This function is called by:
 11094 ;;		_vscp_readStdReg
 11095 ;; This function uses a non-reentrant model
 11096 ;;
 11097                           
 11098                           	psect	text33
 11099  003F8E                     __ptext33:
 11100                           	opt stack 0
 11101  003F8E                     _vscp_getBootLoaderAlgorithm:
 11102                           	opt stack 26
 11103                           
 11104                           ; BSR set to: 0
 11105                           
 11106                           ; BSR set to: 0
 11107                           ;main.c: 2321: return 0x01;
 11108                           
 11109                           ; BSR set to: 0
 11110                           ;incstack = 0
 11111                           ;incstack = 0
 11112  003F8E  0C01               	retlw	1
 11113  003F90                     __end_of_vscp_getBootLoaderAlgorithm:
 11114                           	opt stack 0
 11115                           tblptru	equ	0xFF8
 11116                           prodh	equ	0xFF4
 11117                           prodl	equ	0xFF3
 11118                           postinc0	equ	0xFEE
 11119                           wreg	equ	0xFE8
 11120                           indf2	equ	0xFDF
 11121                           postinc2	equ	0xFDE
 11122                           postdec2	equ	0xFDD
 11123                           fsr2h	equ	0xFDA
 11124                           fsr2l	equ	0xFD9
 11125                           status	equ	0xFD8
 11126                           
 11127 ;; *************** function _vscp_getManufacturerId *****************
 11128 ;; Defined at:
 11129 ;;		line 2311 in file "../main.c"
 11130 ;; Parameters:    Size  Location     Type
 11131 ;;  idx             1    wreg     unsigned char 
 11132 ;; Auto vars:     Size  Location     Type
 11133 ;;  idx             1   10[COMRAM] unsigned char 
 11134 ;; Return value:  Size  Location     Type
 11135 ;;                  1    wreg      unsigned char 
 11136 ;; Registers used:
 11137 ;;		wreg, status,2, status,0, cstack
 11138 ;; Tracked objects:
 11139 ;;		On entry : 0/0
 11140 ;;		On exit  : 0/0
 11141 ;;		Unchanged: 0/0
 11142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11143 ;;      Params:         0       0       0       0       0       0       0
 11144 ;;      Locals:         1       0       0       0       0       0       0
 11145 ;;      Temps:          0       0       0       0       0       0       0
 11146 ;;      Totals:         1       0       0       0       0       0       0
 11147 ;;Total ram usage:        1 bytes
 11148 ;; Hardware stack levels used:    1
 11149 ;; Hardware stack levels required when called:    3
 11150 ;; This function calls:
 11151 ;;		_readEEPROM
 11152 ;; This function is called by:
 11153 ;;		_vscp_readStdReg
 11154 ;;		_vscp_writeStdReg
 11155 ;; This function uses a non-reentrant model
 11156 ;;
 11157                           
 11158                           	psect	text34
 11159  003E88                     __ptext34:
 11160                           	opt stack 0
 11161  003E88                     _vscp_getManufacturerId:
 11162                           	opt stack 25
 11163                           
 11164                           ; BSR set to: 0
 11165                           ;incstack = 0
 11166                           ;incstack = 0
 11167                           ;vscp_getManufacturerId@idx stored from wreg
 11168  003E88  CFE8 F00B          	movff	wreg,vscp_getManufacturerId@idx
 11169                           
 11170                           ;main.c: 2312: return readEEPROM( 0x0B + idx );
 11171  003E8C  0E0B               	movlw	11
 11172  003E8E  240B               	addwf	vscp_getManufacturerId@idx,w,c
 11173  003E90  6E08               	movwf	?_readEEPROM,c
 11174  003E92  6A09               	clrf	?_readEEPROM+1,c
 11175  003E94  0E00               	movlw	0
 11176  003E96  2209               	addwfc	?_readEEPROM+1,f,c
 11177  003E98  EF86  F01F         	goto	_readEEPROM	;wreg free
 11178  003E9C                     __end_of_vscp_getManufacturerId:
 11179                           	opt stack 0
 11180                           tblptru	equ	0xFF8
 11181                           prodh	equ	0xFF4
 11182                           prodl	equ	0xFF3
 11183                           postinc0	equ	0xFEE
 11184                           wreg	equ	0xFE8
 11185                           indf2	equ	0xFDF
 11186                           postinc2	equ	0xFDE
 11187                           postdec2	equ	0xFDD
 11188                           fsr2h	equ	0xFDA
 11189                           fsr2l	equ	0xFD9
 11190                           status	equ	0xFD8
 11191                           
 11192 ;; *************** function _vscp_getUserID *****************
 11193 ;; Defined at:
 11194 ;;		line 2291 in file "../main.c"
 11195 ;; Parameters:    Size  Location     Type
 11196 ;;  idx             1    wreg     unsigned char 
 11197 ;; Auto vars:     Size  Location     Type
 11198 ;;  idx             1   10[COMRAM] unsigned char 
 11199 ;; Return value:  Size  Location     Type
 11200 ;;                  1    wreg      unsigned char 
 11201 ;; Registers used:
 11202 ;;		wreg, status,2, status,0, cstack
 11203 ;; Tracked objects:
 11204 ;;		On entry : 0/0
 11205 ;;		On exit  : 0/0
 11206 ;;		Unchanged: 0/0
 11207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11208 ;;      Params:         0       0       0       0       0       0       0
 11209 ;;      Locals:         1       0       0       0       0       0       0
 11210 ;;      Temps:          0       0       0       0       0       0       0
 11211 ;;      Totals:         1       0       0       0       0       0       0
 11212 ;;Total ram usage:        1 bytes
 11213 ;; Hardware stack levels used:    1
 11214 ;; Hardware stack levels required when called:    3
 11215 ;; This function calls:
 11216 ;;		_readEEPROM
 11217 ;; This function is called by:
 11218 ;;		_vscp_readStdReg
 11219 ;;		_vscp_writeStdReg
 11220 ;; This function uses a non-reentrant model
 11221 ;;
 11222                           
 11223                           	psect	text35
 11224  003E9C                     __ptext35:
 11225                           	opt stack 0
 11226  003E9C                     _vscp_getUserID:
 11227                           	opt stack 25
 11228                           
 11229                           ;incstack = 0
 11230                           ;incstack = 0
 11231                           ;vscp_getUserID@idx stored from wreg
 11232  003E9C  CFE8 F00B          	movff	wreg,vscp_getUserID@idx
 11233                           
 11234                           ;main.c: 2292: return readEEPROM( 0x06 + idx );
 11235  003EA0  0E06               	movlw	6
 11236  003EA2  240B               	addwf	vscp_getUserID@idx,w,c
 11237  003EA4  6E08               	movwf	?_readEEPROM,c
 11238  003EA6  6A09               	clrf	?_readEEPROM+1,c
 11239  003EA8  0E00               	movlw	0
 11240  003EAA  2209               	addwfc	?_readEEPROM+1,f,c
 11241  003EAC  EF86  F01F         	goto	_readEEPROM	;wreg free
 11242  003EB0                     __end_of_vscp_getUserID:
 11243                           	opt stack 0
 11244                           tblptru	equ	0xFF8
 11245                           prodh	equ	0xFF4
 11246                           prodl	equ	0xFF3
 11247                           postinc0	equ	0xFEE
 11248                           wreg	equ	0xFE8
 11249                           indf2	equ	0xFDF
 11250                           postinc2	equ	0xFDE
 11251                           postdec2	equ	0xFDD
 11252                           fsr2h	equ	0xFDA
 11253                           fsr2l	equ	0xFD9
 11254                           status	equ	0xFD8
 11255                           
 11256 ;; *************** function _vscp_getMDF_URL *****************
 11257 ;; Defined at:
 11258 ;;		line 2282 in file "../main.c"
 11259 ;; Parameters:    Size  Location     Type
 11260 ;;  idx             1    wreg     unsigned char 
 11261 ;; Auto vars:     Size  Location     Type
 11262 ;;  idx             1    8[COMRAM] unsigned char 
 11263 ;; Return value:  Size  Location     Type
 11264 ;;                  1    wreg      unsigned char 
 11265 ;; Registers used:
 11266 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11267 ;; Tracked objects:
 11268 ;;		On entry : F/0
 11269 ;;		On exit  : F/0
 11270 ;;		Unchanged: F/0
 11271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11272 ;;      Params:         0       0       0       0       0       0       0
 11273 ;;      Locals:         1       0       0       0       0       0       0
 11274 ;;      Temps:          1       0       0       0       0       0       0
 11275 ;;      Totals:         2       0       0       0       0       0       0
 11276 ;;Total ram usage:        2 bytes
 11277 ;; Hardware stack levels used:    1
 11278 ;; Hardware stack levels required when called:    2
 11279 ;; This function calls:
 11280 ;;		Nothing
 11281 ;; This function is called by:
 11282 ;;		_vscp_readStdReg
 11283 ;;		_vscp_handleProtocolEvent
 11284 ;; This function uses a non-reentrant model
 11285 ;;
 11286                           
 11287                           	psect	text36
 11288  003E58                     __ptext36:
 11289                           	opt stack 0
 11290  003E58                     _vscp_getMDF_URL:
 11291                           	opt stack 26
 11292                           
 11293                           ;incstack = 0
 11294                           ;incstack = 0
 11295                           ;vscp_getMDF_URL@idx stored from wreg
 11296  003E58  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 11297                           
 11298                           ; BSR set to: 0
 11299                           ;main.c: 2283: return vscp_deviceURL[ idx ];
 11300  003E5C  5009               	movf	vscp_getMDF_URL@idx,w,c
 11301  003E5E  0F00               	addlw	low _vscp_deviceURL
 11302  003E60  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 11303  003E62  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 11304  003E66  0E06               	movlw	high __smallconst
 11305  003E68  6EF7               	movwf	tblptrh,c
 11306  003E6A  0008               	tblrd		*
 11307  003E6C  50F5               	movf	tablat,w,c
 11308                           
 11309                           ; BSR set to: 0
 11310  003E6E  0012               	return	
 11311  003E70                     __end_of_vscp_getMDF_URL:
 11312                           	opt stack 0
 11313                           tblptru	equ	0xFF8
 11314                           tblptrh	equ	0xFF7
 11315                           tblptrl	equ	0xFF6
 11316                           tablat	equ	0xFF5
 11317                           prodh	equ	0xFF4
 11318                           prodl	equ	0xFF3
 11319                           postinc0	equ	0xFEE
 11320                           wreg	equ	0xFE8
 11321                           indf2	equ	0xFDF
 11322                           postinc2	equ	0xFDE
 11323                           postdec2	equ	0xFDD
 11324                           fsr2h	equ	0xFDA
 11325                           fsr2l	equ	0xFD9
 11326                           status	equ	0xFD8
 11327                           
 11328 ;; *************** function _vscp_getGUID *****************
 11329 ;; Defined at:
 11330 ;;		line 2270 in file "../main.c"
 11331 ;; Parameters:    Size  Location     Type
 11332 ;;  idx             1    wreg     unsigned char 
 11333 ;; Auto vars:     Size  Location     Type
 11334 ;;  idx             1   10[COMRAM] unsigned char 
 11335 ;; Return value:  Size  Location     Type
 11336 ;;                  1    wreg      unsigned char 
 11337 ;; Registers used:
 11338 ;;		wreg, status,2, status,0, cstack
 11339 ;; Tracked objects:
 11340 ;;		On entry : 0/0
 11341 ;;		On exit  : 0/0
 11342 ;;		Unchanged: 0/0
 11343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11344 ;;      Params:         0       0       0       0       0       0       0
 11345 ;;      Locals:         1       0       0       0       0       0       0
 11346 ;;      Temps:          0       0       0       0       0       0       0
 11347 ;;      Totals:         1       0       0       0       0       0       0
 11348 ;;Total ram usage:        1 bytes
 11349 ;; Hardware stack levels used:    1
 11350 ;; Hardware stack levels required when called:    3
 11351 ;; This function calls:
 11352 ;;		_readEEPROM
 11353 ;; This function is called by:
 11354 ;;		_vscp_readStdReg
 11355 ;;		_vscp_writeStdReg
 11356 ;;		_vscp_handleProtocolEvent
 11357 ;; This function uses a non-reentrant model
 11358 ;;
 11359                           
 11360                           	psect	text37
 11361  003EB0                     __ptext37:
 11362                           	opt stack 0
 11363  003EB0                     _vscp_getGUID:
 11364                           	opt stack 25
 11365                           
 11366                           ; BSR set to: 0
 11367                           ;incstack = 0
 11368                           ;incstack = 0
 11369                           ;vscp_getGUID@idx stored from wreg
 11370  003EB0  CFE8 F00B          	movff	wreg,vscp_getGUID@idx
 11371                           
 11372                           ;main.c: 2271: return readEEPROM( 0x13 + idx );
 11373  003EB4  0E13               	movlw	19
 11374  003EB6  240B               	addwf	vscp_getGUID@idx,w,c
 11375  003EB8  6E08               	movwf	?_readEEPROM,c
 11376  003EBA  6A09               	clrf	?_readEEPROM+1,c
 11377  003EBC  0E00               	movlw	0
 11378  003EBE  2209               	addwfc	?_readEEPROM+1,f,c
 11379  003EC0  EF86  F01F         	goto	_readEEPROM	;wreg free
 11380  003EC4                     __end_of_vscp_getGUID:
 11381                           	opt stack 0
 11382                           tblptru	equ	0xFF8
 11383                           tblptrh	equ	0xFF7
 11384                           tblptrl	equ	0xFF6
 11385                           tablat	equ	0xFF5
 11386                           prodh	equ	0xFF4
 11387                           prodl	equ	0xFF3
 11388                           postinc0	equ	0xFEE
 11389                           wreg	equ	0xFE8
 11390                           indf2	equ	0xFDF
 11391                           postinc2	equ	0xFDE
 11392                           postdec2	equ	0xFDD
 11393                           fsr2h	equ	0xFDA
 11394                           fsr2l	equ	0xFD9
 11395                           status	equ	0xFD8
 11396                           
 11397 ;; *************** function _vscp_getSubMinorVersion *****************
 11398 ;; Defined at:
 11399 ;;		line 2259 in file "../main.c"
 11400 ;; Parameters:    Size  Location     Type
 11401 ;;		None
 11402 ;; Auto vars:     Size  Location     Type
 11403 ;;		None
 11404 ;; Return value:  Size  Location     Type
 11405 ;;                  1    wreg      unsigned char 
 11406 ;; Registers used:
 11407 ;;		wreg
 11408 ;; Tracked objects:
 11409 ;;		On entry : F/0
 11410 ;;		On exit  : F/0
 11411 ;;		Unchanged: F/0
 11412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11413 ;;      Params:         0       0       0       0       0       0       0
 11414 ;;      Locals:         0       0       0       0       0       0       0
 11415 ;;      Temps:          0       0       0       0       0       0       0
 11416 ;;      Totals:         0       0       0       0       0       0       0
 11417 ;;Total ram usage:        0 bytes
 11418 ;; Hardware stack levels used:    1
 11419 ;; Hardware stack levels required when called:    2
 11420 ;; This function calls:
 11421 ;;		Nothing
 11422 ;; This function is called by:
 11423 ;;		_vscp_readStdReg
 11424 ;; This function uses a non-reentrant model
 11425 ;;
 11426                           
 11427                           	psect	text38
 11428  003F90                     __ptext38:
 11429                           	opt stack 0
 11430  003F90                     _vscp_getSubMinorVersion:
 11431                           	opt stack 26
 11432                           
 11433                           ; BSR set to: 0
 11434                           
 11435                           ; BSR set to: 0
 11436                           ;main.c: 2260: return 0;
 11437                           
 11438                           ;incstack = 0
 11439                           ;incstack = 0
 11440  003F90  0C00               	retlw	0
 11441  003F92                     __end_of_vscp_getSubMinorVersion:
 11442                           	opt stack 0
 11443                           tblptru	equ	0xFF8
 11444                           tblptrh	equ	0xFF7
 11445                           tblptrl	equ	0xFF6
 11446                           tablat	equ	0xFF5
 11447                           prodh	equ	0xFF4
 11448                           prodl	equ	0xFF3
 11449                           postinc0	equ	0xFEE
 11450                           wreg	equ	0xFE8
 11451                           indf2	equ	0xFDF
 11452                           postinc2	equ	0xFDE
 11453                           postdec2	equ	0xFDD
 11454                           fsr2h	equ	0xFDA
 11455                           fsr2l	equ	0xFD9
 11456                           status	equ	0xFD8
 11457                           
 11458 ;; *************** function _vscp_getMinorVersion *****************
 11459 ;; Defined at:
 11460 ;;		line 2250 in file "../main.c"
 11461 ;; Parameters:    Size  Location     Type
 11462 ;;		None
 11463 ;; Auto vars:     Size  Location     Type
 11464 ;;		None
 11465 ;; Return value:  Size  Location     Type
 11466 ;;                  1    wreg      unsigned char 
 11467 ;; Registers used:
 11468 ;;		wreg
 11469 ;; Tracked objects:
 11470 ;;		On entry : F/0
 11471 ;;		On exit  : F/0
 11472 ;;		Unchanged: F/0
 11473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11474 ;;      Params:         0       0       0       0       0       0       0
 11475 ;;      Locals:         0       0       0       0       0       0       0
 11476 ;;      Temps:          0       0       0       0       0       0       0
 11477 ;;      Totals:         0       0       0       0       0       0       0
 11478 ;;Total ram usage:        0 bytes
 11479 ;; Hardware stack levels used:    1
 11480 ;; Hardware stack levels required when called:    2
 11481 ;; This function calls:
 11482 ;;		Nothing
 11483 ;; This function is called by:
 11484 ;;		_vscp_readStdReg
 11485 ;; This function uses a non-reentrant model
 11486 ;;
 11487                           
 11488                           	psect	text39
 11489  003F92                     __ptext39:
 11490                           	opt stack 0
 11491  003F92                     _vscp_getMinorVersion:
 11492                           	opt stack 26
 11493                           
 11494                           ; BSR set to: 0
 11495                           
 11496                           ; BSR set to: 0
 11497                           ;main.c: 2251: return 0;
 11498                           
 11499                           ; BSR set to: 0
 11500                           ;incstack = 0
 11501                           ;incstack = 0
 11502  003F92  0C00               	retlw	0
 11503  003F94                     __end_of_vscp_getMinorVersion:
 11504                           	opt stack 0
 11505                           tblptru	equ	0xFF8
 11506                           tblptrh	equ	0xFF7
 11507                           tblptrl	equ	0xFF6
 11508                           tablat	equ	0xFF5
 11509                           prodh	equ	0xFF4
 11510                           prodl	equ	0xFF3
 11511                           postinc0	equ	0xFEE
 11512                           wreg	equ	0xFE8
 11513                           indf2	equ	0xFDF
 11514                           postinc2	equ	0xFDE
 11515                           postdec2	equ	0xFDD
 11516                           fsr2h	equ	0xFDA
 11517                           fsr2l	equ	0xFD9
 11518                           status	equ	0xFD8
 11519                           
 11520 ;; *************** function _vscp_getMajorVersion *****************
 11521 ;; Defined at:
 11522 ;;		line 2241 in file "../main.c"
 11523 ;; Parameters:    Size  Location     Type
 11524 ;;		None
 11525 ;; Auto vars:     Size  Location     Type
 11526 ;;		None
 11527 ;; Return value:  Size  Location     Type
 11528 ;;                  1    wreg      unsigned char 
 11529 ;; Registers used:
 11530 ;;		wreg
 11531 ;; Tracked objects:
 11532 ;;		On entry : F/0
 11533 ;;		On exit  : F/0
 11534 ;;		Unchanged: F/0
 11535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11536 ;;      Params:         0       0       0       0       0       0       0
 11537 ;;      Locals:         0       0       0       0       0       0       0
 11538 ;;      Temps:          0       0       0       0       0       0       0
 11539 ;;      Totals:         0       0       0       0       0       0       0
 11540 ;;Total ram usage:        0 bytes
 11541 ;; Hardware stack levels used:    1
 11542 ;; Hardware stack levels required when called:    2
 11543 ;; This function calls:
 11544 ;;		Nothing
 11545 ;; This function is called by:
 11546 ;;		_vscp_readStdReg
 11547 ;; This function uses a non-reentrant model
 11548 ;;
 11549                           
 11550                           	psect	text40
 11551  003F94                     __ptext40:
 11552                           	opt stack 0
 11553  003F94                     _vscp_getMajorVersion:
 11554                           	opt stack 26
 11555                           
 11556                           ; BSR set to: 0
 11557                           
 11558                           ; BSR set to: 0
 11559                           ;main.c: 2242: return 1;
 11560                           
 11561                           ; BSR set to: 0
 11562                           ;incstack = 0
 11563                           ;incstack = 0
 11564  003F94  0C01               	retlw	1
 11565  003F96                     __end_of_vscp_getMajorVersion:
 11566                           	opt stack 0
 11567                           tblptru	equ	0xFF8
 11568                           tblptrh	equ	0xFF7
 11569                           tblptrl	equ	0xFF6
 11570                           tablat	equ	0xFF5
 11571                           prodh	equ	0xFF4
 11572                           prodl	equ	0xFF3
 11573                           postinc0	equ	0xFEE
 11574                           wreg	equ	0xFE8
 11575                           indf2	equ	0xFDF
 11576                           postinc2	equ	0xFDE
 11577                           postdec2	equ	0xFDD
 11578                           fsr2h	equ	0xFDA
 11579                           fsr2l	equ	0xFD9
 11580                           status	equ	0xFD8
 11581                           
 11582 ;; *************** function _vscp_newNodeOnline *****************
 11583 ;; Defined at:
 11584 ;;		line 491 in file "../../vscp_firmware/common/vscp_firmware.c"
 11585 ;; Parameters:    Size  Location     Type
 11586 ;;		None
 11587 ;; Auto vars:     Size  Location     Type
 11588 ;;		None
 11589 ;; Return value:  Size  Location     Type
 11590 ;;		None               void
 11591 ;; Registers used:
 11592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11593 ;; Tracked objects:
 11594 ;;		On entry : F/0
 11595 ;;		On exit  : F/0
 11596 ;;		Unchanged: 0/0
 11597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11598 ;;      Params:         0       0       0       0       0       0       0
 11599 ;;      Locals:         0       0       0       0       0       0       0
 11600 ;;      Temps:          1       0       0       0       0       0       0
 11601 ;;      Totals:         1       0       0       0       0       0       0
 11602 ;;Total ram usage:        1 bytes
 11603 ;; Hardware stack levels used:    1
 11604 ;; Hardware stack levels required when called:    7
 11605 ;; This function calls:
 11606 ;;		_vscp_sendEvent
 11607 ;; This function is called by:
 11608 ;;		_vscp_handleProtocolEvent
 11609 ;; This function uses a non-reentrant model
 11610 ;;
 11611                           
 11612                           	psect	text41
 11613  003C0C                     __ptext41:
 11614                           	opt stack 0
 11615  003C0C                     _vscp_newNodeOnline:
 11616                           	opt stack 22
 11617                           
 11618                           ; BSR set to: 0
 11619                           ;vscp_firmware.c: 492: if ((1 == (vscp_imsg.flags & 0x0f)) &&
 11620                           ;vscp_firmware.c: 493: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11621                           
 11622                           ; BSR set to: 0
 11623                           ;incstack = 0
 11624                           ;incstack = 0
 11625  003C0C  C096  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 11626  003C10  0E0F               	movlw	15
 11627  003C12  164C               	andwf	??_vscp_newNodeOnline,f,c
 11628  003C14  044C               	decf	??_vscp_newNodeOnline,w,c
 11629  003C16  E10E               	bnz	l1092
 11630                           
 11631                           ; BSR set to: 0
 11632  003C18  5191               	movf	_vscp_nickname& (0+255),w,b
 11633  003C1A  EE20  F09C         	lfsr	2,_vscp_imsg+6
 11634  003C1E  62DF               	cpfseq	indf2,c
 11635  003C20  D009               	goto	l1092
 11636                           
 11637                           ; BSR set to: 0
 11638                           ;vscp_firmware.c: 499: vscp_omsg.flags = 0x80;
 11639  003C22  0E80               	movlw	128
 11640  003C24  6FA4               	movwf	_vscp_omsg& (0+255),b
 11641                           
 11642                           ; BSR set to: 0
 11643                           ;vscp_firmware.c: 500: vscp_omsg.priority = 0x00;
 11644  003C26  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 11645                           
 11646                           ; BSR set to: 0
 11647                           ;vscp_firmware.c: 501: vscp_omsg.vscp_class = 0;
 11648  003C28  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 11649  003C2A  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 11650                           
 11651                           ;vscp_firmware.c: 502: vscp_omsg.vscp_type = 3;
 11652  003C2C  0E03               	movlw	3
 11653  003C2E  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 11654                           
 11655                           ; BSR set to: 0
 11656                           ;vscp_firmware.c: 503: vscp_sendEvent();
 11657  003C30  EC57  F01E         	call	_vscp_sendEvent	;wreg free
 11658  003C34                     l1092:
 11659                           
 11660                           ; BSR set to: 0
 11661  003C34  0012               	return	
 11662  003C36                     __end_of_vscp_newNodeOnline:
 11663                           	opt stack 0
 11664                           tblptru	equ	0xFF8
 11665                           tblptrh	equ	0xFF7
 11666                           tblptrl	equ	0xFF6
 11667                           tablat	equ	0xFF5
 11668                           prodh	equ	0xFF4
 11669                           prodl	equ	0xFF3
 11670                           postinc0	equ	0xFEE
 11671                           wreg	equ	0xFE8
 11672                           indf2	equ	0xFDF
 11673                           postinc2	equ	0xFDE
 11674                           postdec2	equ	0xFDD
 11675                           fsr2h	equ	0xFDA
 11676                           fsr2l	equ	0xFD9
 11677                           status	equ	0xFD8
 11678                           
 11679 ;; *************** function _vscp_handleDropNickname *****************
 11680 ;; Defined at:
 11681 ;;		line 427 in file "../../vscp_firmware/common/vscp_firmware.c"
 11682 ;; Parameters:    Size  Location     Type
 11683 ;;		None
 11684 ;; Auto vars:     Size  Location     Type
 11685 ;;  bytes           1   11[COMRAM] unsigned char 
 11686 ;; Return value:  Size  Location     Type
 11687 ;;		None               void
 11688 ;; Registers used:
 11689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11690 ;; Tracked objects:
 11691 ;;		On entry : F/0
 11692 ;;		On exit  : F/0
 11693 ;;		Unchanged: 0/0
 11694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11695 ;;      Params:         0       0       0       0       0       0       0
 11696 ;;      Locals:         1       0       0       0       0       0       0
 11697 ;;      Temps:          0       0       0       0       0       0       0
 11698 ;;      Totals:         1       0       0       0       0       0       0
 11699 ;;Total ram usage:        1 bytes
 11700 ;; Hardware stack levels used:    1
 11701 ;; Hardware stack levels required when called:    5
 11702 ;; This function calls:
 11703 ;;		_vscp_init
 11704 ;;		_vscp_writeNicknamePermanent
 11705 ;; This function is called by:
 11706 ;;		_vscp_handleProtocolEvent
 11707 ;; This function uses a non-reentrant model
 11708 ;;
 11709                           
 11710                           	psect	text42
 11711  003BB0                     __ptext42:
 11712                           	opt stack 0
 11713  003BB0                     _vscp_handleDropNickname:
 11714                           	opt stack 24
 11715                           
 11716                           ; BSR set to: 0
 11717                           ;vscp_firmware.c: 428: uint8_t bytes = vscp_imsg.flags & 0x0f;
 11718                           
 11719                           ; BSR set to: 0
 11720                           ;incstack = 0
 11721                           ;incstack = 0
 11722  003BB0  5196               	movf	_vscp_imsg& (0+255),w,b
 11723  003BB2  0B0F               	andlw	15
 11724  003BB4  6E0C               	movwf	vscp_handleDropNickname@bytes,c
 11725                           
 11726                           ; BSR set to: 0
 11727                           ;vscp_firmware.c: 434: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11728  003BB6  500C               	movf	vscp_handleDropNickname@bytes,w,c
 11729  003BB8  E012               	bz	l1088
 11730                           
 11731                           ; BSR set to: 0
 11732  003BBA  5191               	movf	_vscp_nickname& (0+255),w,b
 11733  003BBC  EE20  F09C         	lfsr	2,_vscp_imsg+6
 11734  003BC0  62DF               	cpfseq	indf2,c
 11735  003BC2  D00D               	goto	l1088
 11736                           
 11737                           ; BSR set to: 0
 11738                           ;vscp_firmware.c: 466: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 11739  003BC4  040C               	decf	vscp_handleDropNickname@bytes,w,c
 11740  003BC6  E005               	bz	l1087
 11741                           
 11742                           ; BSR set to: 0
 11743  003BC8  0E01               	movlw	1
 11744  003BCA  640C               	cpfsgt	vscp_handleDropNickname@bytes,c
 11745  003BCC  D008               	goto	l1088
 11746                           
 11747                           ; BSR set to: 0
 11748  003BCE  679D               	tstfsz	(_vscp_imsg+7)& (0+255),b
 11749  003BD0  D006               	goto	l1088
 11750  003BD2                     l1087:
 11751                           
 11752                           ; BSR set to: 0
 11753                           ;vscp_firmware.c: 468: vscp_nickname = 0xff;
 11754  003BD2  6991               	setf	_vscp_nickname& (0+255),b
 11755                           
 11756                           ; BSR set to: 0
 11757                           ;vscp_firmware.c: 469: vscp_writeNicknamePermanent(0xff);
 11758  003BD4  0EFF               	movlw	255
 11759  003BD6  EC74  F01F         	call	_vscp_writeNicknamePermanent
 11760                           
 11761                           ;vscp_firmware.c: 470: vscp_init();
 11762  003BDA  EC58  F01D         	call	_vscp_init	;wreg free
 11763  003BDE                     l1088:
 11764                           
 11765                           ; BSR set to: 0
 11766  003BDE  0012               	return	
 11767  003BE0                     __end_of_vscp_handleDropNickname:
 11768                           	opt stack 0
 11769                           tblptru	equ	0xFF8
 11770                           tblptrh	equ	0xFF7
 11771                           tblptrl	equ	0xFF6
 11772                           tablat	equ	0xFF5
 11773                           prodh	equ	0xFF4
 11774                           prodl	equ	0xFF3
 11775                           postinc0	equ	0xFEE
 11776                           wreg	equ	0xFE8
 11777                           indf2	equ	0xFDF
 11778                           postinc2	equ	0xFDE
 11779                           postdec2	equ	0xFDD
 11780                           fsr2h	equ	0xFDA
 11781                           fsr2l	equ	0xFD9
 11782                           status	equ	0xFD8
 11783                           
 11784 ;; *************** function _vscp_init *****************
 11785 ;; Defined at:
 11786 ;;		line 114 in file "../../vscp_firmware/common/vscp_firmware.c"
 11787 ;; Parameters:    Size  Location     Type
 11788 ;;		None
 11789 ;; Auto vars:     Size  Location     Type
 11790 ;;		None
 11791 ;; Return value:  Size  Location     Type
 11792 ;;		None               void
 11793 ;; Registers used:
 11794 ;;		wreg, status,2, cstack
 11795 ;; Tracked objects:
 11796 ;;		On entry : 0/0
 11797 ;;		On exit  : F/0
 11798 ;;		Unchanged: 0/0
 11799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11800 ;;      Params:         0       0       0       0       0       0       0
 11801 ;;      Locals:         0       0       0       0       0       0       0
 11802 ;;      Temps:          0       0       0       0       0       0       0
 11803 ;;      Totals:         0       0       0       0       0       0       0
 11804 ;;Total ram usage:        0 bytes
 11805 ;; Hardware stack levels used:    1
 11806 ;; Hardware stack levels required when called:    4
 11807 ;; This function calls:
 11808 ;;		_vscp_readNicknamePermanent
 11809 ;; This function is called by:
 11810 ;;		_main
 11811 ;;		_vscp_handleDropNickname
 11812 ;;		_vscp_handleProtocolEvent
 11813 ;; This function uses a non-reentrant model
 11814 ;;
 11815                           
 11816                           	psect	text43
 11817  003AB0                     __ptext43:
 11818                           	opt stack 0
 11819  003AB0                     _vscp_init:
 11820                           	opt stack 24
 11821                           
 11822                           ;vscp_firmware.c: 115: vscp_initledfunc = 0x02;
 11823                           
 11824                           ; BSR set to: 0
 11825                           ;incstack = 0
 11826                           ;incstack = 0
 11827  003AB0  0E02               	movlw	2
 11828  003AB2  6E56               	movwf	_vscp_initledfunc,c
 11829                           
 11830                           ;vscp_firmware.c: 118: vscp_nickname = vscp_readNicknamePermanent();
 11831  003AB4  ECB4  F01F         	call	_vscp_readNicknamePermanent	;wreg free
 11832  003AB8  0100               	movlb	0	; () banked
 11833  003ABA  6F91               	movwf	_vscp_nickname& (0+255),b
 11834                           
 11835                           ; BSR set to: 0
 11836                           ;vscp_firmware.c: 121: if (!vscp_nickname) vscp_nickname = 0xff;
 11837  003ABC  6791               	tstfsz	_vscp_nickname& (0+255),b
 11838  003ABE  D001               	goto	l1029
 11839                           
 11840                           ; BSR set to: 0
 11841  003AC0  6991               	setf	_vscp_nickname& (0+255),b
 11842  003AC2                     l1029:
 11843                           
 11844                           ; BSR set to: 0
 11845                           ;vscp_firmware.c: 124: vscp_imsg.flags = 0;
 11846  003AC2  6B96               	clrf	_vscp_imsg& (0+255),b
 11847                           
 11848                           ;vscp_firmware.c: 125: vscp_imsg.priority = 0;
 11849  003AC4  6B97               	clrf	(_vscp_imsg+1)& (0+255),b
 11850                           
 11851                           ;vscp_firmware.c: 126: vscp_imsg.vscp_class = 0;
 11852  003AC6  6B98               	clrf	(_vscp_imsg+2)& (0+255),b
 11853  003AC8  6B99               	clrf	(_vscp_imsg+3)& (0+255),b
 11854                           
 11855                           ;vscp_firmware.c: 127: vscp_imsg.vscp_type = 0;
 11856  003ACA  6B9A               	clrf	(_vscp_imsg+4)& (0+255),b
 11857                           
 11858                           ;vscp_firmware.c: 130: vscp_omsg.flags = 0;
 11859  003ACC  6BA4               	clrf	_vscp_omsg& (0+255),b
 11860                           
 11861                           ;vscp_firmware.c: 131: vscp_omsg.priority = 0;
 11862  003ACE  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 11863                           
 11864                           ;vscp_firmware.c: 132: vscp_omsg.vscp_class = 0;
 11865  003AD0  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 11866  003AD2  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 11867                           
 11868                           ;vscp_firmware.c: 135: vscp_errorcnt = 0;
 11869  003AD4  6BA8               	clrf	(_vscp_omsg+4)& (0+255),b
 11870                           
 11871                           ;vscp_firmware.c: 136: vscp_alarmstatus = 0;
 11872  003AD6  6B8C               	clrf	_vscp_alarmstatus& (0+255),b
 11873                           
 11874                           ;vscp_firmware.c: 138: vscp_probe_address = 0;
 11875  003AD8  6A57               	clrf	_vscp_probe_address,c
 11876                           
 11877                           ;vscp_firmware.c: 141: vscp_node_state = 0x00;
 11878  003ADA  6B92               	clrf	_vscp_node_state& (0+255),b
 11879                           
 11880                           ;vscp_firmware.c: 142: vscp_node_substate = 0x00;
 11881  003ADC  6B93               	clrf	_vscp_node_substate& (0+255),b
 11882                           
 11883                           ;vscp_firmware.c: 144: vscp_probe_cnt = 0;
 11884  003ADE  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 11885                           
 11886                           ;vscp_firmware.c: 145: vscp_page_select = 0;
 11887  003AE0  6A52               	clrf	_vscp_page_select,c
 11888  003AE2  6A53               	clrf	_vscp_page_select+1,c
 11889                           
 11890                           ;vscp_firmware.c: 148: vscp_timer = 0;
 11891  003AE4  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 11892  003AE6  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 11893                           
 11894                           ;vscp_firmware.c: 149: vscp_configtimer = 0;
 11895  003AE8  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
 11896  003AEA  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 11897                           
 11898                           ;vscp_firmware.c: 150: vscp_second = 0;
 11899  003AEC  6B95               	clrf	_vscp_second& (0+255),b
 11900                           
 11901                           ;vscp_firmware.c: 151: vscp_minute = 0;
 11902  003AEE  6B90               	clrf	_vscp_minute& (0+255),b
 11903                           
 11904                           ;vscp_firmware.c: 152: vscp_hour = 0;
 11905  003AF0  6B8E               	clrf	_vscp_hour& (0+255),b
 11906                           
 11907                           ; BSR set to: 0
 11908  003AF2  0012               	return	
 11909  003AF4                     __end_of_vscp_init:
 11910                           	opt stack 0
 11911                           tblptru	equ	0xFF8
 11912                           tblptrh	equ	0xFF7
 11913                           tblptrl	equ	0xFF6
 11914                           tablat	equ	0xFF5
 11915                           prodh	equ	0xFF4
 11916                           prodl	equ	0xFF3
 11917                           postinc0	equ	0xFEE
 11918                           wreg	equ	0xFE8
 11919                           indf2	equ	0xFDF
 11920                           postinc2	equ	0xFDE
 11921                           postdec2	equ	0xFDD
 11922                           fsr2h	equ	0xFDA
 11923                           fsr2l	equ	0xFD9
 11924                           status	equ	0xFD8
 11925                           
 11926 ;; *************** function _vscp_readNicknamePermanent *****************
 11927 ;; Defined at:
 11928 ;;		line 854 in file "../main.c"
 11929 ;; Parameters:    Size  Location     Type
 11930 ;;		None
 11931 ;; Auto vars:     Size  Location     Type
 11932 ;;		None
 11933 ;; Return value:  Size  Location     Type
 11934 ;;                  1    wreg      unsigned char 
 11935 ;; Registers used:
 11936 ;;		wreg, status,2, cstack
 11937 ;; Tracked objects:
 11938 ;;		On entry : 0/0
 11939 ;;		On exit  : 0/0
 11940 ;;		Unchanged: 0/0
 11941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11942 ;;      Params:         0       0       0       0       0       0       0
 11943 ;;      Locals:         0       0       0       0       0       0       0
 11944 ;;      Temps:          0       0       0       0       0       0       0
 11945 ;;      Totals:         0       0       0       0       0       0       0
 11946 ;;Total ram usage:        0 bytes
 11947 ;; Hardware stack levels used:    1
 11948 ;; Hardware stack levels required when called:    3
 11949 ;; This function calls:
 11950 ;;		_readEEPROM
 11951 ;; This function is called by:
 11952 ;;		_vscp_init
 11953 ;; This function uses a non-reentrant model
 11954 ;;
 11955                           
 11956                           	psect	text44
 11957  003F68                     __ptext44:
 11958                           	opt stack 0
 11959  003F68                     _vscp_readNicknamePermanent:
 11960                           	opt stack 24
 11961                           
 11962                           ;main.c: 855: return readEEPROM( 0x01 );
 11963                           
 11964                           ; BSR set to: 0
 11965                           ;incstack = 0
 11966                           ;incstack = 0
 11967  003F68  6A09               	clrf	?_readEEPROM+1,c
 11968  003F6A  0E01               	movlw	1
 11969  003F6C  6E08               	movwf	?_readEEPROM,c
 11970  003F6E  EF86  F01F         	goto	_readEEPROM	;wreg free
 11971  003F72                     __end_of_vscp_readNicknamePermanent:
 11972                           	opt stack 0
 11973                           tblptru	equ	0xFF8
 11974                           tblptrh	equ	0xFF7
 11975                           tblptrl	equ	0xFF6
 11976                           tablat	equ	0xFF5
 11977                           prodh	equ	0xFF4
 11978                           prodl	equ	0xFF3
 11979                           postinc0	equ	0xFEE
 11980                           wreg	equ	0xFE8
 11981                           indf2	equ	0xFDF
 11982                           postinc2	equ	0xFDE
 11983                           postdec2	equ	0xFDD
 11984                           fsr2h	equ	0xFDA
 11985                           fsr2l	equ	0xFD9
 11986                           status	equ	0xFD8
 11987                           
 11988 ;; *************** function _vscp_handleSetNickname *****************
 11989 ;; Defined at:
 11990 ;;		line 411 in file "../../vscp_firmware/common/vscp_firmware.c"
 11991 ;; Parameters:    Size  Location     Type
 11992 ;;		None
 11993 ;; Auto vars:     Size  Location     Type
 11994 ;;		None
 11995 ;; Return value:  Size  Location     Type
 11996 ;;		None               void
 11997 ;; Registers used:
 11998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11999 ;; Tracked objects:
 12000 ;;		On entry : F/0
 12001 ;;		On exit  : 0/0
 12002 ;;		Unchanged: 0/0
 12003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12004 ;;      Params:         0       0       0       0       0       0       0
 12005 ;;      Locals:         0       0       0       0       0       0       0
 12006 ;;      Temps:          0       0       0       0       0       0       0
 12007 ;;      Totals:         0       0       0       0       0       0       0
 12008 ;;Total ram usage:        0 bytes
 12009 ;; Hardware stack levels used:    1
 12010 ;; Hardware stack levels required when called:    4
 12011 ;; This function calls:
 12012 ;;		_vscp_writeNicknamePermanent
 12013 ;;		_vscp_setSegmentCRC
 12014 ;; This function is called by:
 12015 ;;		_vscp_handleProtocolEvent
 12016 ;; This function uses a non-reentrant model
 12017 ;;
 12018                           
 12019                           	psect	text45
 12020  003CFA                     __ptext45:
 12021                           	opt stack 0
 12022  003CFA                     _vscp_handleSetNickname:
 12023                           	opt stack 25
 12024                           
 12025                           ; BSR set to: 0
 12026                           ;vscp_firmware.c: 412: if ((2 == (vscp_imsg.flags & 0x0f)) &&
 12027                           ;vscp_firmware.c: 413: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12028                           
 12029                           ;incstack = 0
 12030                           ;incstack = 0
 12031  003CFA  5196               	movf	_vscp_imsg& (0+255),w,b
 12032  003CFC  0B0F               	andlw	15
 12033  003CFE  0A02               	xorlw	2
 12034  003D00  E10D               	bnz	l1081
 12035                           
 12036                           ; BSR set to: 0
 12037  003D02  5191               	movf	_vscp_nickname& (0+255),w,b
 12038  003D04  EE20  F09C         	lfsr	2,_vscp_imsg+6
 12039  003D08  62DF               	cpfseq	indf2,c
 12040  003D0A  D008               	goto	l1081
 12041                           
 12042                           ; BSR set to: 0
 12043                           ;vscp_firmware.c: 416: vscp_nickname = vscp_imsg.data[ 1 ];
 12044  003D0C  C09D  F091         	movff	_vscp_imsg+7,_vscp_nickname
 12045                           
 12046                           ; BSR set to: 0
 12047                           ;vscp_firmware.c: 417: vscp_writeNicknamePermanent(vscp_nickname);
 12048  003D10  5191               	movf	_vscp_nickname& (0+255),w,b
 12049  003D12  EC74  F01F         	call	_vscp_writeNicknamePermanent
 12050                           
 12051                           ;vscp_firmware.c: 418: vscp_setSegmentCRC(0x40);
 12052  003D16  0E40               	movlw	64
 12053  003D18  EC6B  F01F         	call	_vscp_setSegmentCRC
 12054  003D1C                     l1081:
 12055  003D1C  0012               	return	
 12056  003D1E                     __end_of_vscp_handleSetNickname:
 12057                           	opt stack 0
 12058                           tblptru	equ	0xFF8
 12059                           tblptrh	equ	0xFF7
 12060                           tblptrl	equ	0xFF6
 12061                           tablat	equ	0xFF5
 12062                           prodh	equ	0xFF4
 12063                           prodl	equ	0xFF3
 12064                           postinc0	equ	0xFEE
 12065                           wreg	equ	0xFE8
 12066                           indf2	equ	0xFDF
 12067                           postinc2	equ	0xFDE
 12068                           postdec2	equ	0xFDD
 12069                           fsr2h	equ	0xFDA
 12070                           fsr2l	equ	0xFD9
 12071                           status	equ	0xFD8
 12072                           
 12073 ;; *************** function _vscp_handleHeartbeat *****************
 12074 ;; Defined at:
 12075 ;;		line 385 in file "../../vscp_firmware/common/vscp_firmware.c"
 12076 ;; Parameters:    Size  Location     Type
 12077 ;;		None
 12078 ;; Auto vars:     Size  Location     Type
 12079 ;;		None
 12080 ;; Return value:  Size  Location     Type
 12081 ;;		None               void
 12082 ;; Registers used:
 12083 ;;		wreg, status,2, status,0, cstack
 12084 ;; Tracked objects:
 12085 ;;		On entry : F/0
 12086 ;;		On exit  : 0/0
 12087 ;;		Unchanged: 0/0
 12088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12089 ;;      Params:         0       0       0       0       0       0       0
 12090 ;;      Locals:         0       0       0       0       0       0       0
 12091 ;;      Temps:          0       0       0       0       0       0       0
 12092 ;;      Totals:         0       0       0       0       0       0       0
 12093 ;;Total ram usage:        0 bytes
 12094 ;; Hardware stack levels used:    1
 12095 ;; Hardware stack levels required when called:    4
 12096 ;; This function calls:
 12097 ;;		_vscp_writeNicknamePermanent
 12098 ;;		_vscp_getSegmentCRC
 12099 ;;		_vscp_setSegmentCRC
 12100 ;; This function is called by:
 12101 ;;		_vscp_handleProtocolEvent
 12102 ;; This function uses a non-reentrant model
 12103 ;;
 12104                           
 12105                           	psect	text46
 12106  003B34                     __ptext46:
 12107                           	opt stack 0
 12108  003B34                     _vscp_handleHeartbeat:
 12109                           	opt stack 25
 12110                           
 12111                           ; BSR set to: 0
 12112                           ;vscp_firmware.c: 386: if ( !vscp_getSegmentCRC() ) {
 12113                           
 12114                           ;incstack = 0
 12115                           ;incstack = 0
 12116  003B34  ECB9  F01F         	call	_vscp_getSegmentCRC	;wreg free
 12117  003B38  0900               	iorlw	0
 12118  003B3A  E116               	bnz	l8955
 12119                           
 12120                           ;vscp_firmware.c: 387: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 12121                           ;vscp_firmware.c: 388: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 12122  003B3C  0100               	movlb	0	; () banked
 12123  003B3E  5196               	movf	_vscp_imsg& (0+255),w,b
 12124  003B40  0B0F               	andlw	15
 12125  003B42  0A05               	xorlw	5
 12126  003B44  E115               	bnz	l1077
 12127                           
 12128                           ; BSR set to: 0
 12129  003B46  ECB9  F01F         	call	_vscp_getSegmentCRC	;wreg free
 12130  003B4A  0100               	movlb	0	; () banked
 12131  003B4C  199C               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 12132  003B4E  E010               	bz	l1077
 12133                           
 12134                           ; BSR set to: 0
 12135                           ;vscp_firmware.c: 392: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12136  003B50  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12137  003B52  EC6B  F01F         	call	_vscp_setSegmentCRC
 12138                           
 12139                           ;vscp_firmware.c: 395: vscp_nickname = 0xff;
 12140  003B56  0100               	movlb	0	; () banked
 12141  003B58  6991               	setf	_vscp_nickname& (0+255),b
 12142                           
 12143                           ;vscp_firmware.c: 396: vscp_writeNicknamePermanent(0xff);
 12144  003B5A  0EFF               	movlw	255
 12145  003B5C  EC74  F01F         	call	_vscp_writeNicknamePermanent
 12146                           
 12147                           ;vscp_firmware.c: 397: vscp_node_state = 0x01;
 12148  003B60  0E01               	movlw	1
 12149  003B62  0100               	movlb	0	; () banked
 12150  003B64  6F92               	movwf	_vscp_node_state& (0+255),b
 12151  003B66  D004               	goto	l1077
 12152  003B68                     l8955:
 12153                           
 12154                           ;vscp_firmware.c: 400: else {
 12155                           ;vscp_firmware.c: 402: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12156  003B68  0100               	movlb	0	; () banked
 12157  003B6A  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12158  003B6C  EC6B  F01F         	call	_vscp_setSegmentCRC
 12159  003B70                     l1077:
 12160  003B70  0012               	return	
 12161  003B72                     __end_of_vscp_handleHeartbeat:
 12162                           	opt stack 0
 12163                           tblptru	equ	0xFF8
 12164                           tblptrh	equ	0xFF7
 12165                           tblptrl	equ	0xFF6
 12166                           tablat	equ	0xFF5
 12167                           prodh	equ	0xFF4
 12168                           prodl	equ	0xFF3
 12169                           postinc0	equ	0xFEE
 12170                           wreg	equ	0xFE8
 12171                           indf2	equ	0xFDF
 12172                           postinc2	equ	0xFDE
 12173                           postdec2	equ	0xFDD
 12174                           fsr2h	equ	0xFDA
 12175                           fsr2l	equ	0xFD9
 12176                           status	equ	0xFD8
 12177                           
 12178 ;; *************** function _vscp_getMatrixInfo *****************
 12179 ;; Defined at:
 12180 ;;		line 2449 in file "../main.c"
 12181 ;; Parameters:    Size  Location     Type
 12182 ;;  pData           1    wreg     PTR unsigned char 
 12183 ;;		 -> vscp_omsg(13), 
 12184 ;; Auto vars:     Size  Location     Type
 12185 ;;  pData           1    0[COMRAM] PTR unsigned char 
 12186 ;;		 -> vscp_omsg(13), 
 12187 ;;  i               1    7[COMRAM] unsigned char 
 12188 ;; Return value:  Size  Location     Type
 12189 ;;		None               void
 12190 ;; Registers used:
 12191 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12192 ;; Tracked objects:
 12193 ;;		On entry : F/0
 12194 ;;		On exit  : F/0
 12195 ;;		Unchanged: 0/0
 12196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12197 ;;      Params:         0       0       0       0       0       0       0
 12198 ;;      Locals:         1       0       0       0       0       0       0
 12199 ;;      Temps:          0       0       0       0       0       0       0
 12200 ;;      Totals:         1       0       0       0       0       0       0
 12201 ;;Total ram usage:        1 bytes
 12202 ;; Hardware stack levels used:    1
 12203 ;; Hardware stack levels required when called:    2
 12204 ;; This function calls:
 12205 ;;		Nothing
 12206 ;; This function is called by:
 12207 ;;		_vscp_handleProtocolEvent
 12208 ;; This function uses a non-reentrant model
 12209 ;;
 12210                           
 12211                           	psect	text47
 12212  003DCA                     __ptext47:
 12213                           	opt stack 0
 12214  003DCA                     _vscp_getMatrixInfo:
 12215                           	opt stack 27
 12216                           
 12217                           ; BSR set to: 0
 12218                           ;main.c: 2450: uint8_t i;
 12219                           ;main.c: 2452: vscp_omsg.data[ 0 ] = 7;
 12220                           
 12221                           ;incstack = 0
 12222                           ;incstack = 0
 12223  003DCA  0E07               	movlw	7
 12224  003DCC  6FA9               	movwf	(_vscp_omsg+5)& (0+255),b
 12225                           
 12226                           ;main.c: 2453: vscp_omsg.data[ 1 ] = 72;
 12227  003DCE  0E48               	movlw	72
 12228  003DD0  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
 12229                           
 12230                           ;main.c: 2456: for ( i = 2; i < 8; i++ ) {
 12231  003DD2  0E02               	movlw	2
 12232  003DD4  6E08               	movwf	vscp_getMatrixInfo@i,c
 12233  003DD6                     l6441:
 12234                           
 12235                           ; BSR set to: 0
 12236                           ;main.c: 2457: vscp_omsg.data[ i ] = 0;
 12237  003DD6  5008               	movf	vscp_getMatrixInfo@i,w,c
 12238  003DD8  0FA9               	addlw	low (_vscp_omsg+5)
 12239  003DDA  6ED9               	movwf	fsr2l,c
 12240  003DDC  6ADA               	clrf	fsr2h,c
 12241  003DDE  6ADF               	clrf	indf2,c
 12242                           
 12243                           ; BSR set to: 0
 12244  003DE0  2A08               	incf	vscp_getMatrixInfo@i,f,c
 12245                           
 12246                           ; BSR set to: 0
 12247  003DE2  0E07               	movlw	7
 12248  003DE4  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 12249  003DE6  D7F7               	goto	l6441
 12250                           
 12251                           ; BSR set to: 0
 12252  003DE8  0C07               	retlw	7
 12253  003DEA                     __end_of_vscp_getMatrixInfo:
 12254                           	opt stack 0
 12255                           tblptru	equ	0xFF8
 12256                           tblptrh	equ	0xFF7
 12257                           tblptrl	equ	0xFF6
 12258                           tablat	equ	0xFF5
 12259                           prodh	equ	0xFF4
 12260                           prodl	equ	0xFF3
 12261                           postinc0	equ	0xFEE
 12262                           wreg	equ	0xFE8
 12263                           indf2	equ	0xFDF
 12264                           postinc2	equ	0xFDE
 12265                           postdec2	equ	0xFDD
 12266                           fsr2h	equ	0xFDA
 12267                           fsr2l	equ	0xFD9
 12268                           status	equ	0xFD8
 12269                           
 12270 ;; *************** function _vscp_goBootloaderMode *****************
 12271 ;; Defined at:
 12272 ;;		line 2435 in file "../main.c"
 12273 ;; Parameters:    Size  Location     Type
 12274 ;;		None
 12275 ;; Auto vars:     Size  Location     Type
 12276 ;;		None
 12277 ;; Return value:  Size  Location     Type
 12278 ;;		None               void
 12279 ;; Registers used:
 12280 ;;		wreg, status,2, cstack
 12281 ;; Tracked objects:
 12282 ;;		On entry : F/0
 12283 ;;		On exit  : 0/0
 12284 ;;		Unchanged: 0/0
 12285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12286 ;;      Params:         0       0       0       0       0       0       0
 12287 ;;      Locals:         0       0       0       0       0       0       0
 12288 ;;      Temps:          0       0       0       0       0       0       0
 12289 ;;      Totals:         0       0       0       0       0       0       0
 12290 ;;Total ram usage:        0 bytes
 12291 ;; Hardware stack levels used:    1
 12292 ;; Hardware stack levels required when called:    3
 12293 ;; This function calls:
 12294 ;;		_writeEEPROM
 12295 ;; This function is called by:
 12296 ;;		_vscp_handleProtocolEvent
 12297 ;; This function uses a non-reentrant model
 12298 ;;
 12299                           
 12300                           	psect	text48
 12301  003F30                     __ptext48:
 12302                           	opt stack 0
 12303  003F30                     _vscp_goBootloaderMode:
 12304                           	opt stack 26
 12305                           
 12306                           ; BSR set to: 0
 12307                           ;main.c: 2438: writeEEPROM(0x00, 0xff);
 12308                           
 12309                           ; BSR set to: 0
 12310                           ;incstack = 0
 12311                           ;incstack = 0
 12312  003F30  6A09               	clrf	?_writeEEPROM+1,c
 12313  003F32  6A08               	clrf	?_writeEEPROM,c
 12314  003F34  0EFF               	movlw	255
 12315  003F36  680A               	setf	?_writeEEPROM+2,c
 12316  003F38  EC6A  F01E         	call	_writeEEPROM	;wreg free
 12317  003F3C  00FF               	reset		;# 
 12318  003F3E  0012               	return	
 12319  003F40                     __end_of_vscp_goBootloaderMode:
 12320                           	opt stack 0
 12321                           tblptru	equ	0xFF8
 12322                           tblptrh	equ	0xFF7
 12323                           tblptrl	equ	0xFF6
 12324                           tablat	equ	0xFF5
 12325                           prodh	equ	0xFF4
 12326                           prodl	equ	0xFF3
 12327                           postinc0	equ	0xFEE
 12328                           wreg	equ	0xFE8
 12329                           indf2	equ	0xFDF
 12330                           postinc2	equ	0xFDE
 12331                           postdec2	equ	0xFDD
 12332                           fsr2h	equ	0xFDA
 12333                           fsr2l	equ	0xFD9
 12334                           status	equ	0xFD8
 12335                           
 12336 ;; *************** function _vscp_handleProbeState *****************
 12337 ;; Defined at:
 12338 ;;		line 197 in file "../../vscp_firmware/common/vscp_firmware.c"
 12339 ;; Parameters:    Size  Location     Type
 12340 ;;		None
 12341 ;; Auto vars:     Size  Location     Type
 12342 ;;		None
 12343 ;; Return value:  Size  Location     Type
 12344 ;;		None               void
 12345 ;; Registers used:
 12346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12347 ;; Tracked objects:
 12348 ;;		On entry : 0/0
 12349 ;;		On exit  : F/0
 12350 ;;		Unchanged: 0/0
 12351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12352 ;;      Params:         0       0       0       0       0       0       0
 12353 ;;      Locals:         0       0       0       0       0       0       0
 12354 ;;      Temps:          0       0       0       0       0       0       0
 12355 ;;      Totals:         0       0       0       0       0       0       0
 12356 ;;Total ram usage:        0 bytes
 12357 ;; Hardware stack levels used:    1
 12358 ;; Hardware stack levels required when called:    8
 12359 ;; This function calls:
 12360 ;;		_vscp_goActiveState
 12361 ;;		_vscp_writeNicknamePermanent
 12362 ;;		_vscp_sendEvent
 12363 ;;		_vscp_setSegmentCRC
 12364 ;; This function is called by:
 12365 ;;		_main
 12366 ;; This function uses a non-reentrant model
 12367 ;;
 12368                           
 12369                           	psect	text49
 12370  0035E0                     __ptext49:
 12371                           	opt stack 0
 12372  0035E0                     _vscp_handleProbeState:
 12373                           	opt stack 22
 12374                           
 12375                           ;vscp_firmware.c: 198: switch (vscp_node_substate) {
 12376                           
 12377                           ;incstack = 0
 12378                           ;incstack = 0
 12379  0035E0  D053               	goto	l7375
 12380  0035E2                     l7305:
 12381                           
 12382                           ; BSR set to: 0
 12383                           ;vscp_firmware.c: 202: if (0xff != vscp_probe_address) {
 12384  0035E2  2857               	incf	_vscp_probe_address,w,c
 12385  0035E4  E010               	bz	l7321
 12386                           
 12387                           ; BSR set to: 0
 12388                           ;vscp_firmware.c: 204: vscp_omsg.flags = 0x80 + 1;
 12389  0035E6  0E81               	movlw	129
 12390  0035E8  6FA4               	movwf	_vscp_omsg& (0+255),b
 12391                           
 12392                           ; BSR set to: 0
 12393                           ;vscp_firmware.c: 205: vscp_omsg.priority = 0x00;
 12394  0035EA  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12395                           
 12396                           ; BSR set to: 0
 12397                           ;vscp_firmware.c: 206: vscp_omsg.vscp_class = 0;
 12398  0035EC  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12399  0035EE  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12400                           
 12401                           ;vscp_firmware.c: 207: vscp_omsg.vscp_type = 2;
 12402  0035F0  0E02               	movlw	2
 12403  0035F2  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12404                           
 12405                           ; BSR set to: 0
 12406                           ;vscp_firmware.c: 208: vscp_omsg.data[ 0 ] = vscp_probe_address;
 12407  0035F4  C057  F0A9         	movff	_vscp_probe_address,_vscp_omsg+5
 12408                           
 12409                           ; BSR set to: 0
 12410                           ;vscp_firmware.c: 211: vscp_sendEvent();
 12411  0035F8  EC57  F01E         	call	_vscp_sendEvent	;wreg free
 12412                           
 12413                           ; BSR set to: 0
 12414                           ;vscp_firmware.c: 213: vscp_node_substate = 0x01;
 12415  0035FC  0E01               	movlw	1
 12416  0035FE  6F93               	movwf	_vscp_node_substate& (0+255),b
 12417  003600                     l7319:
 12418                           
 12419                           ; BSR set to: 0
 12420                           ;vscp_firmware.c: 214: vscp_timer = 0;
 12421  003600  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12422  003602  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12423                           
 12424                           ;vscp_firmware.c: 216: } else {
 12425  003604  D048               	goto	l1044
 12426  003606                     l7321:
 12427                           
 12428                           ; BSR set to: 0
 12429                           ;vscp_firmware.c: 219: vscp_node_state = 0x04;
 12430  003606  0E04               	movlw	4
 12431  003608  6F92               	movwf	_vscp_node_state& (0+255),b
 12432                           
 12433                           ;vscp_firmware.c: 222: vscp_omsg.flags = 0x80 + 1;
 12434  00360A  0E81               	movlw	129
 12435  00360C  6FA4               	movwf	_vscp_omsg& (0+255),b
 12436                           
 12437                           ; BSR set to: 0
 12438                           ;vscp_firmware.c: 223: vscp_omsg.data[ 0 ] = 0xff;
 12439  00360E  69A9               	setf	(_vscp_omsg+5)& (0+255),b
 12440                           
 12441                           ;vscp_firmware.c: 224: vscp_omsg.priority = 0x07;
 12442  003610  0E07               	movlw	7
 12443  003612  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
 12444                           
 12445                           ; BSR set to: 0
 12446                           ;vscp_firmware.c: 225: vscp_omsg.vscp_class = 0;
 12447  003614  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12448  003616  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12449                           
 12450                           ;vscp_firmware.c: 226: vscp_omsg.vscp_type = 3;
 12451  003618  0E03               	movlw	3
 12452  00361A  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12453                           
 12454                           ; BSR set to: 0
 12455                           ;vscp_firmware.c: 229: vscp_sendEvent();
 12456  00361C  EC57  F01E         	call	_vscp_sendEvent	;wreg free
 12457  003620  D03A               	goto	l1044
 12458  003622                     l1045:
 12459                           
 12460                           ; BSR set to: 0
 12461                           ;vscp_firmware.c: 236: if (vscp_imsg.flags & 0x80) {
 12462  003622  AF96               	btfss	_vscp_imsg& (0+255),7,b
 12463  003624  D00F               	goto	l7345
 12464                           
 12465                           ; BSR set to: 0
 12466                           ;vscp_firmware.c: 239: if ((0 == vscp_imsg.vscp_class) &&
 12467                           ;vscp_firmware.c: 240: (3 == vscp_imsg.vscp_type)) {
 12468  003626  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
 12469  003628  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 12470  00362A  E135               	bnz	l1044
 12471                           
 12472                           ; BSR set to: 0
 12473  00362C  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
 12474  00362E  0A03               	xorlw	3
 12475  003630  E132               	bnz	l1044
 12476                           
 12477                           ; BSR set to: 0
 12478                           ;vscp_firmware.c: 243: if (0 == vscp_probe_address) {
 12479  003632  6657               	tstfsz	_vscp_probe_address,c
 12480  003634  D003               	goto	l7339
 12481                           
 12482                           ; BSR set to: 0
 12483                           ;vscp_firmware.c: 247: vscp_node_state = 0x02;
 12484  003636  0E02               	movlw	2
 12485  003638  6F92               	movwf	_vscp_node_state& (0+255),b
 12486  00363A  D7E2               	goto	l7319
 12487  00363C                     l7339:
 12488                           
 12489                           ; BSR set to: 0
 12490                           ;vscp_firmware.c: 253: vscp_probe_address++;
 12491  00363C  2A57               	incf	_vscp_probe_address,f,c
 12492                           
 12493                           ; BSR set to: 0
 12494                           ;vscp_firmware.c: 254: vscp_node_substate = 0x00;
 12495  00363E  6B93               	clrf	_vscp_node_substate& (0+255),b
 12496  003640                     l7343:
 12497                           
 12498                           ; BSR set to: 0
 12499                           ;vscp_firmware.c: 255: vscp_probe_cnt = 0;
 12500  003640  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12501  003642  D029               	goto	l1044
 12502  003644                     l7345:
 12503                           
 12504                           ; BSR set to: 0
 12505                           ;vscp_firmware.c: 261: if (vscp_timer > 1000) {
 12506  003644  0EE9               	movlw	233
 12507  003646  5D86               	subwf	_vscp_timer& (0+255),w,b	;volatile
 12508  003648  0E03               	movlw	3
 12509  00364A  5987               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 12510  00364C  E324               	bnc	l1044
 12511                           
 12512                           ; BSR set to: 0
 12513                           ;vscp_firmware.c: 263: vscp_probe_cnt++;
 12514  00364E  2B94               	incf	_vscp_probe_cnt& (0+255),f,b
 12515                           
 12516                           ; BSR set to: 0
 12517                           ;vscp_firmware.c: 265: if (vscp_probe_cnt >= 3) {
 12518  003650  0E02               	movlw	2
 12519  003652  6594               	cpfsgt	_vscp_probe_cnt& (0+255),b
 12520  003654  D017               	goto	l1052
 12521                           
 12522                           ; BSR set to: 0
 12523                           ;vscp_firmware.c: 268: if (0 == vscp_probe_address) {
 12524  003656  6657               	tstfsz	_vscp_probe_address,c
 12525  003658  D005               	goto	l1053
 12526                           
 12527                           ; BSR set to: 0
 12528                           ;vscp_firmware.c: 271: vscp_probe_address++;
 12529  00365A  2A57               	incf	_vscp_probe_address,f,c
 12530                           
 12531                           ; BSR set to: 0
 12532                           ;vscp_firmware.c: 272: vscp_node_substate = 0x00;
 12533  00365C  6B93               	clrf	_vscp_node_substate& (0+255),b
 12534                           
 12535                           ; BSR set to: 0
 12536                           ;vscp_firmware.c: 273: vscp_timer = 0;
 12537  00365E  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12538  003660  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12539  003662  D7EE               	goto	l7343
 12540  003664                     l1053:
 12541                           
 12542                           ; BSR set to: 0
 12543                           ;vscp_firmware.c: 279: vscp_nickname = vscp_probe_address;
 12544  003664  C057  F091         	movff	_vscp_probe_address,_vscp_nickname
 12545                           
 12546                           ; BSR set to: 0
 12547                           ;vscp_firmware.c: 280: vscp_node_state = 0x03;
 12548  003668  0E03               	movlw	3
 12549  00366A  6F92               	movwf	_vscp_node_state& (0+255),b
 12550                           
 12551                           ; BSR set to: 0
 12552                           ;vscp_firmware.c: 281: vscp_node_substate = 0x00;
 12553  00366C  6B93               	clrf	_vscp_node_substate& (0+255),b
 12554                           
 12555                           ; BSR set to: 0
 12556                           ;vscp_firmware.c: 282: vscp_writeNicknamePermanent(vscp_nickname);
 12557  00366E  5191               	movf	_vscp_nickname& (0+255),w,b
 12558  003670  EC74  F01F         	call	_vscp_writeNicknamePermanent
 12559                           
 12560                           ;vscp_firmware.c: 283: vscp_setSegmentCRC(0x40);
 12561  003674  0E40               	movlw	64
 12562  003676  EC6B  F01F         	call	_vscp_setSegmentCRC
 12563                           
 12564                           ;vscp_firmware.c: 286: vscp_probe_cnt = 0;
 12565  00367A  0100               	movlb	0	; () banked
 12566  00367C  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12567                           
 12568                           ; BSR set to: 0
 12569                           ;vscp_firmware.c: 287: vscp_goActiveState();
 12570  00367E  ECF5  F01E         	call	_vscp_goActiveState	;wreg free
 12571  003682  D009               	goto	l1044
 12572  003684                     l1052:
 12573                           
 12574                           ; BSR set to: 0
 12575                           ;vscp_firmware.c: 291: vscp_node_substate = 0x00;
 12576  003684  6B93               	clrf	_vscp_node_substate& (0+255),b
 12577  003686  D007               	goto	l1044
 12578  003688                     l7375:
 12579  003688  0100               	movlb	0	; () banked
 12580  00368A  5193               	movf	_vscp_node_substate& (0+255),w,b
 12581                           
 12582                           ; Switch size 1, requested type "speed"
 12583                           ; Number of cases is 3, Range of values is 0 to 2
 12584                           ; switch strategies available:
 12585                           ; Name         Instructions Cycles
 12586                           ; simple_byte           10     6 (average)
 12587                           ;	Chosen strategy is simple_byte
 12588  00368C  E0AA               	bz	l7305
 12589  00368E  0A01               	xorlw	1	; case 1
 12590  003690  E0C8               	bz	l1045
 12591  003692  0A03               	xorlw	3	; case 2
 12592  003694  E1F7               	bnz	l1052
 12593  003696                     l1044:
 12594                           
 12595                           ; BSR set to: 0
 12596                           ;vscp_firmware.c: 306: vscp_imsg.flags = 0;
 12597  003696  6B96               	clrf	_vscp_imsg& (0+255),b
 12598                           
 12599                           ; BSR set to: 0
 12600  003698  0012               	return	
 12601  00369A                     __end_of_vscp_handleProbeState:
 12602                           	opt stack 0
 12603                           tblptru	equ	0xFF8
 12604                           tblptrh	equ	0xFF7
 12605                           tblptrl	equ	0xFF6
 12606                           tablat	equ	0xFF5
 12607                           prodh	equ	0xFF4
 12608                           prodl	equ	0xFF3
 12609                           postinc0	equ	0xFEE
 12610                           wreg	equ	0xFE8
 12611                           indf2	equ	0xFDF
 12612                           postinc2	equ	0xFDE
 12613                           postdec2	equ	0xFDD
 12614                           fsr2h	equ	0xFDA
 12615                           fsr2l	equ	0xFD9
 12616                           status	equ	0xFD8
 12617                           
 12618 ;; *************** function _vscp_goActiveState *****************
 12619 ;; Defined at:
 12620 ;;		line 347 in file "../../vscp_firmware/common/vscp_firmware.c"
 12621 ;; Parameters:    Size  Location     Type
 12622 ;;		None
 12623 ;; Auto vars:     Size  Location     Type
 12624 ;;		None
 12625 ;; Return value:  Size  Location     Type
 12626 ;;		None               void
 12627 ;; Registers used:
 12628 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12629 ;; Tracked objects:
 12630 ;;		On entry : 0/0
 12631 ;;		On exit  : F/0
 12632 ;;		Unchanged: 0/0
 12633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12634 ;;      Params:         0       0       0       0       0       0       0
 12635 ;;      Locals:         0       0       0       0       0       0       0
 12636 ;;      Temps:          0       0       0       0       0       0       0
 12637 ;;      Totals:         0       0       0       0       0       0       0
 12638 ;;Total ram usage:        0 bytes
 12639 ;; Hardware stack levels used:    1
 12640 ;; Hardware stack levels required when called:    7
 12641 ;; This function calls:
 12642 ;;		_vscp_sendEvent
 12643 ;; This function is called by:
 12644 ;;		_main
 12645 ;;		_vscp_handleProbeState
 12646 ;; This function uses a non-reentrant model
 12647 ;;
 12648                           
 12649                           	psect	text50
 12650  003DEA                     __ptext50:
 12651                           	opt stack 0
 12652  003DEA                     _vscp_goActiveState:
 12653                           	opt stack 22
 12654                           
 12655                           ;vscp_firmware.c: 348: vscp_omsg.flags = 0x80 + 1;
 12656                           
 12657                           ; BSR set to: 0
 12658                           ;incstack = 0
 12659                           ;incstack = 0
 12660  003DEA  0E81               	movlw	129
 12661  003DEC  0100               	movlb	0	; () banked
 12662  003DEE  6FA4               	movwf	_vscp_omsg& (0+255),b
 12663                           
 12664                           ; BSR set to: 0
 12665                           ;vscp_firmware.c: 349: vscp_omsg.priority = 0x00;
 12666  003DF0  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12667                           
 12668                           ; BSR set to: 0
 12669                           ;vscp_firmware.c: 350: vscp_omsg.vscp_class = 0;
 12670  003DF2  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12671  003DF4  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12672                           
 12673                           ;vscp_firmware.c: 351: vscp_omsg.vscp_type = 2;
 12674  003DF6  0E02               	movlw	2
 12675  003DF8  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12676                           
 12677                           ; BSR set to: 0
 12678                           ;vscp_firmware.c: 352: vscp_omsg.data[ 0 ] = vscp_nickname;
 12679  003DFA  C091  F0A9         	movff	_vscp_nickname,_vscp_omsg+5
 12680                           
 12681                           ; BSR set to: 0
 12682                           ;vscp_firmware.c: 355: vscp_sendEvent();
 12683  003DFE  EC57  F01E         	call	_vscp_sendEvent	;wreg free
 12684                           
 12685                           ; BSR set to: 0
 12686                           ;vscp_firmware.c: 357: vscp_initledfunc = 0x01;
 12687  003E02  0E01               	movlw	1
 12688  003E04  6E56               	movwf	_vscp_initledfunc,c
 12689                           
 12690                           ; BSR set to: 0
 12691  003E06  0C01               	retlw	1
 12692  003E08                     __end_of_vscp_goActiveState:
 12693                           	opt stack 0
 12694                           tblptru	equ	0xFF8
 12695                           tblptrh	equ	0xFF7
 12696                           tblptrl	equ	0xFF6
 12697                           tablat	equ	0xFF5
 12698                           prodh	equ	0xFF4
 12699                           prodl	equ	0xFF3
 12700                           postinc0	equ	0xFEE
 12701                           wreg	equ	0xFE8
 12702                           indf2	equ	0xFDF
 12703                           postinc2	equ	0xFDE
 12704                           postdec2	equ	0xFDD
 12705                           fsr2h	equ	0xFDA
 12706                           fsr2l	equ	0xFD9
 12707                           status	equ	0xFD8
 12708                           
 12709 ;; *************** function _vscp_sendEvent *****************
 12710 ;; Defined at:
 12711 ;;		line 1272 in file "../../vscp_firmware/common/vscp_firmware.c"
 12712 ;; Parameters:    Size  Location     Type
 12713 ;;		None
 12714 ;; Auto vars:     Size  Location     Type
 12715 ;;  rv              1    0        unsigned char 
 12716 ;; Return value:  Size  Location     Type
 12717 ;;                  1    wreg      unsigned char 
 12718 ;; Registers used:
 12719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12720 ;; Tracked objects:
 12721 ;;		On entry : F/0
 12722 ;;		On exit  : F/0
 12723 ;;		Unchanged: 0/0
 12724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12725 ;;      Params:         0       0       0       0       0       0       0
 12726 ;;      Locals:         1       0       0       0       0       0       0
 12727 ;;      Temps:          0       0       0       0       0       0       0
 12728 ;;      Totals:         1       0       0       0       0       0       0
 12729 ;;Total ram usage:        1 bytes
 12730 ;; Hardware stack levels used:    1
 12731 ;; Hardware stack levels required when called:    6
 12732 ;; This function calls:
 12733 ;;		_sendVSCPFrame
 12734 ;; This function is called by:
 12735 ;;		_vscp_handleProbeState
 12736 ;;		_vscp_goActiveState
 12737 ;;		_vscp_sendHeartBeat
 12738 ;;		_vscp_newNodeOnline
 12739 ;;		_vscp_handleProtocolEvent
 12740 ;; This function uses a non-reentrant model
 12741 ;;
 12742                           
 12743                           	psect	text51
 12744  003CAE                     __ptext51:
 12745                           	opt stack 0
 12746  003CAE                     _vscp_sendEvent:
 12747                           	opt stack 22
 12748                           
 12749                           ; BSR set to: 0
 12750                           
 12751                           ; BSR set to: 0
 12752                           ;incstack = 0
 12753                           ;incstack = 0
 12754  003CAE  C0A6  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 12755  003CB2  C0A7  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 12756  003CB6  C0A8  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 12757  003CBA  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 12758  003CBE  C0A5  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 12759  003CC2  51A4               	movf	_vscp_omsg& (0+255),w,b
 12760  003CC4  0B0F               	andlw	15
 12761  003CC6  6E44               	movwf	?_sendVSCPFrame+5,c
 12762  003CC8  0E00               	movlw	high (_vscp_omsg+5)
 12763  003CCA  6E46               	movwf	?_sendVSCPFrame+7,c
 12764  003CCC  0EA9               	movlw	low (_vscp_omsg+5)
 12765  003CCE  6E45               	movwf	?_sendVSCPFrame+6,c
 12766  003CD0  EF4D  F01B         	goto	_sendVSCPFrame	;wreg free
 12767  003CD4                     __end_of_vscp_sendEvent:
 12768                           	opt stack 0
 12769                           tblptru	equ	0xFF8
 12770                           tblptrh	equ	0xFF7
 12771                           tblptrl	equ	0xFF6
 12772                           tablat	equ	0xFF5
 12773                           prodh	equ	0xFF4
 12774                           prodl	equ	0xFF3
 12775                           postinc0	equ	0xFEE
 12776                           wreg	equ	0xFE8
 12777                           indf2	equ	0xFDF
 12778                           postinc2	equ	0xFDE
 12779                           postdec2	equ	0xFDD
 12780                           fsr2h	equ	0xFDA
 12781                           fsr2l	equ	0xFD9
 12782                           status	equ	0xFD8
 12783                           
 12784 ;; *************** function _sendVSCPFrame *****************
 12785 ;; Defined at:
 12786 ;;		line 2508 in file "../main.c"
 12787 ;; Parameters:    Size  Location     Type
 12788 ;;  vscpclass       2   62[COMRAM] unsigned short 
 12789 ;;  vscptype        1   64[COMRAM] unsigned char 
 12790 ;;  nodeid          1   65[COMRAM] unsigned char 
 12791 ;;  priority        1   66[COMRAM] unsigned char 
 12792 ;;  size            1   67[COMRAM] unsigned char 
 12793 ;;  pData           2   68[COMRAM] PTR unsigned char 
 12794 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 12795 ;; Auto vars:     Size  Location     Type
 12796 ;;  id              4   70[COMRAM] unsigned long 
 12797 ;; Return value:  Size  Location     Type
 12798 ;;                  1    wreg      unsigned char 
 12799 ;; Registers used:
 12800 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12801 ;; Tracked objects:
 12802 ;;		On entry : F/0
 12803 ;;		On exit  : F/0
 12804 ;;		Unchanged: 0/0
 12805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12806 ;;      Params:         8       0       0       0       0       0       0
 12807 ;;      Locals:         4       0       0       0       0       0       0
 12808 ;;      Temps:          0      20       0       0       0       0       0
 12809 ;;      Totals:        12      20       0       0       0       0       0
 12810 ;;Total ram usage:       32 bytes
 12811 ;; Hardware stack levels used:    1
 12812 ;; Hardware stack levels required when called:    5
 12813 ;; This function calls:
 12814 ;;		_sendCANFrame
 12815 ;; This function is called by:
 12816 ;;		_SendInformationEvent
 12817 ;;		_vscp_sendEvent
 12818 ;; This function uses a non-reentrant model
 12819 ;;
 12820                           
 12821                           	psect	text52
 12822  00369A                     __ptext52:
 12823                           	opt stack 0
 12824  00369A                     _sendVSCPFrame:
 12825                           	opt stack 23
 12826                           
 12827                           ; BSR set to: 0
 12828                           ;main.c: 2509: uint32_t id = ( (uint32_t)priority << 26 ) |
 12829                           ;main.c: 2510: ( (uint32_t)vscpclass << 16 ) |
 12830                           ;main.c: 2511: ( (uint32_t)vscptype << 8 ) |
 12831                           ;main.c: 2512: nodeid;
 12832                           
 12833                           ; BSR set to: 0
 12834                           ;incstack = 0
 12835                           ;incstack = 0
 12836  00369A  C041  F0B1         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 12837  00369E  6BB2               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 12838  0036A0  6BB3               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 12839  0036A2  6BB4               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 12840  0036A4  C0B3  F0B4         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 12841  0036A8  C0B2  F0B3         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 12842  0036AC  C0B1  F0B2         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 12843  0036B0  6BB1               	clrf	??_sendVSCPFrame& (0+255),b
 12844  0036B2  503F               	movf	sendVSCPFrame@vscpclass,w,c
 12845  0036B4  6FB5               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 12846  0036B6  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 12847  0036B8  6FB6               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 12848  0036BA  6BB7               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 12849  0036BC  6BB8               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 12850  0036BE  C0B6  F0B8         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 12851  0036C2  C0B5  F0B7         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 12852  0036C6  6BB6               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 12853  0036C8  6BB5               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 12854  0036CA  C043  F0B9         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 12855  0036CE  6BBA               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 12856  0036D0  6BBB               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 12857  0036D2  6BBC               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 12858  0036D4  0E1A               	movlw	26
 12859  0036D6                     u10025:
 12860  0036D6  90D8               	bcf	status,0,c
 12861  0036D8  37B9               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 12862  0036DA  37BA               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 12863  0036DC  37BB               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 12864  0036DE  37BC               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 12865  0036E0  2EE8               	decfsz	wreg,f,c
 12866  0036E2  D7F9               	goto	u10025
 12867  0036E4  51B5               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 12868  0036E6  11B9               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 12869  0036E8  6FBD               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 12870  0036EA  51B6               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 12871  0036EC  11BA               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 12872  0036EE  6FBE               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 12873  0036F0  51B7               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 12874  0036F2  11BB               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 12875  0036F4  6FBF               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 12876  0036F6  51B8               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 12877  0036F8  11BC               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 12878  0036FA  6FC0               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 12879  0036FC  51B1               	movf	??_sendVSCPFrame& (0+255),w,b
 12880  0036FE  11BD               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 12881  003700  6FC1               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 12882  003702  51B2               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 12883  003704  11BE               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 12884  003706  6FC2               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 12885  003708  51B3               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 12886  00370A  11BF               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 12887  00370C  6FC3               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 12888  00370E  51B4               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 12889  003710  11C0               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 12890  003712  6FC4               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 12891  003714  5042               	movf	sendVSCPFrame@nodeid,w,c
 12892  003716  11C1               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 12893  003718  6E47               	movwf	sendVSCPFrame@id,c
 12894  00371A  51C2               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 12895  00371C  6E48               	movwf	sendVSCPFrame@id+1,c
 12896  00371E  51C3               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 12897  003720  6E49               	movwf	sendVSCPFrame@id+2,c
 12898  003722  51C4               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 12899  003724  6E4A               	movwf	sendVSCPFrame@id+3,c
 12900                           
 12901                           ; BSR set to: 0
 12902                           ;main.c: 2514: if ( !sendCANFrame( id, size, pData ) ) {
 12903  003726  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 12904  00372A  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 12905  00372E  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 12906  003732  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 12907  003736  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 12908  00373A  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 12909  00373E  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 12910  003742  EC7A  F01D         	call	_sendCANFrame	;wreg free
 12911  003746  0900               	iorlw	0
 12912                           
 12913                           ; BSR set to: 0
 12914                           ;main.c: 2515: return 0;
 12915  003748  0E00               	movlw	0
 12916  00374A  A4D8               	btfss	status,2,c
 12917                           
 12918                           ; BSR set to: 0
 12919                           ;main.c: 2516: }
 12920                           ;main.c: 2518: return 1;
 12921  00374C  0E01               	movlw	1
 12922                           
 12923                           ; BSR set to: 0
 12924  00374E  0012               	return	
 12925  003750                     __end_of_sendVSCPFrame:
 12926                           	opt stack 0
 12927                           tblptru	equ	0xFF8
 12928                           tblptrh	equ	0xFF7
 12929                           tblptrl	equ	0xFF6
 12930                           tablat	equ	0xFF5
 12931                           prodh	equ	0xFF4
 12932                           prodl	equ	0xFF3
 12933                           postinc0	equ	0xFEE
 12934                           wreg	equ	0xFE8
 12935                           indf2	equ	0xFDF
 12936                           postinc2	equ	0xFDE
 12937                           postdec2	equ	0xFDD
 12938                           fsr2h	equ	0xFDA
 12939                           fsr2l	equ	0xFD9
 12940                           status	equ	0xFD8
 12941                           
 12942 ;; *************** function _sendCANFrame *****************
 12943 ;; Defined at:
 12944 ;;		line 2553 in file "../main.c"
 12945 ;; Parameters:    Size  Location     Type
 12946 ;;  id              4   54[COMRAM] unsigned long 
 12947 ;;  dlc             1   58[COMRAM] unsigned char 
 12948 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 12949 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 12950 ;; Auto vars:     Size  Location     Type
 12951 ;;  rv              1   61[COMRAM] unsigned char 
 12952 ;; Return value:  Size  Location     Type
 12953 ;;                  1    wreg      unsigned char 
 12954 ;; Registers used:
 12955 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12956 ;; Tracked objects:
 12957 ;;		On entry : F/0
 12958 ;;		On exit  : F/0
 12959 ;;		Unchanged: 0/0
 12960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12961 ;;      Params:         7       0       0       0       0       0       0
 12962 ;;      Locals:         1       0       0       0       0       0       0
 12963 ;;      Temps:          0       0       0       0       0       0       0
 12964 ;;      Totals:         8       0       0       0       0       0       0
 12965 ;;Total ram usage:        8 bytes
 12966 ;; Hardware stack levels used:    1
 12967 ;; Hardware stack levels required when called:    4
 12968 ;; This function calls:
 12969 ;;		_ECANSendMessage
 12970 ;; This function is called by:
 12971 ;;		_sendVSCPFrame
 12972 ;; This function uses a non-reentrant model
 12973 ;;
 12974                           
 12975                           	psect	text53
 12976  003AF4                     __ptext53:
 12977                           	opt stack 0
 12978  003AF4                     _sendCANFrame:
 12979                           	opt stack 23
 12980                           
 12981                           ; BSR set to: 0
 12982                           ;main.c: 2554: uint8_t rv = 0;
 12983                           
 12984                           ; BSR set to: 0
 12985                           ;incstack = 0
 12986                           ;incstack = 0
 12987  003AF4  6A3E               	clrf	sendCANFrame@rv,c
 12988                           
 12989                           ;main.c: 2555: sendTimer = 0;
 12990  003AF6  6A55               	clrf	_sendTimer,c
 12991                           
 12992                           ;main.c: 2557: while ( sendTimer < 1 ) {
 12993  003AF8  D017               	goto	l8827
 12994  003AFA                     l8823:
 12995                           
 12996                           ;main.c: 2558: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 12997  003AFA  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 12998  003AFE  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 12999  003B02  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 13000  003B06  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 13001  003B0A  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 13002  003B0E  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 13003  003B12  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 13004  003B16  0E20               	movlw	32
 13005  003B18  6E19               	movwf	?_ECANSendMessage+7,c
 13006  003B1A  EC05  F016         	call	_ECANSendMessage	;wreg free
 13007  003B1E  0900               	iorlw	0
 13008  003B20  E003               	bz	l8827
 13009                           
 13010                           ;main.c: 2559: rv = 1;
 13011  003B22  0E01               	movlw	1
 13012  003B24  6E3E               	movwf	sendCANFrame@rv,c
 13013                           
 13014                           ;main.c: 2560: break;
 13015  003B26  D002               	goto	l650
 13016  003B28                     l8827:
 13017  003B28  5055               	movf	_sendTimer,w,c
 13018  003B2A  E0E7               	bz	l8823
 13019  003B2C                     l650:
 13020                           
 13021                           ;main.c: 2561: }
 13022                           ;main.c: 2562: }
 13023                           ;main.c: 2564: vscp_omsg.flags = 0;
 13024  003B2C  0100               	movlb	0	; () banked
 13025  003B2E  6BA4               	clrf	_vscp_omsg& (0+255),b
 13026                           
 13027                           ; BSR set to: 0
 13028                           ;main.c: 2566: return rv;
 13029  003B30  503E               	movf	sendCANFrame@rv,w,c
 13030                           
 13031                           ; BSR set to: 0
 13032  003B32  0012               	return	
 13033  003B34                     __end_of_sendCANFrame:
 13034                           	opt stack 0
 13035                           tblptru	equ	0xFF8
 13036                           tblptrh	equ	0xFF7
 13037                           tblptrl	equ	0xFF6
 13038                           tablat	equ	0xFF5
 13039                           prodh	equ	0xFF4
 13040                           prodl	equ	0xFF3
 13041                           postinc0	equ	0xFEE
 13042                           wreg	equ	0xFE8
 13043                           indf2	equ	0xFDF
 13044                           postinc2	equ	0xFDE
 13045                           postdec2	equ	0xFDD
 13046                           fsr2h	equ	0xFDA
 13047                           fsr2l	equ	0xFD9
 13048                           status	equ	0xFD8
 13049                           
 13050 ;; *************** function _ECANSendMessage *****************
 13051 ;; Defined at:
 13052 ;;		line 617 in file "../ECAN.c"
 13053 ;; Parameters:    Size  Location     Type
 13054 ;;  id              4   17[COMRAM] unsigned long 
 13055 ;;  data            2   21[COMRAM] PTR unsigned char 
 13056 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13057 ;;  dataLen         1   23[COMRAM] unsigned char 
 13058 ;;  msgFlags        1   24[COMRAM] enum E16306
 13059 ;; Auto vars:     Size  Location     Type
 13060 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 13061 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13062 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13063 ;;		 -> B0CON(1), 
 13064 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 13065 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13066 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13067 ;;		 -> B0CON(1), 
 13068 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 13069 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13070 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13071 ;;		 -> B0CON(1), 
 13072 ;;  i               1   51[COMRAM] unsigned char 
 13073 ;;  temp            1   50[COMRAM] unsigned char 
 13074 ;;  tempBSEL0       1   47[COMRAM] struct .
 13075 ;;  j               1   46[COMRAM] unsigned char 
 13076 ;;  buffers         1   45[COMRAM] unsigned char 
 13077 ;;  mode            1   44[COMRAM] unsigned char 
 13078 ;; Return value:  Size  Location     Type
 13079 ;;                  1    wreg      enum E15660
 13080 ;; Registers used:
 13081 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13082 ;; Tracked objects:
 13083 ;;		On entry : 0/0
 13084 ;;		On exit  : 0/0
 13085 ;;		Unchanged: 0/0
 13086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13087 ;;      Params:         8       0       0       0       0       0       0
 13088 ;;      Locals:        28       0       0       0       0       0       0
 13089 ;;      Temps:          1       0       0       0       0       0       0
 13090 ;;      Totals:        37       0       0       0       0       0       0
 13091 ;;Total ram usage:       37 bytes
 13092 ;; Hardware stack levels used:    1
 13093 ;; Hardware stack levels required when called:    3
 13094 ;; This function calls:
 13095 ;;		__CANIDToRegs
 13096 ;; This function is called by:
 13097 ;;		_sendCANFrame
 13098 ;; This function uses a non-reentrant model
 13099 ;;
 13100                           
 13101                           	psect	text54
 13102  002C0A                     __ptext54:
 13103                           	opt stack 0
 13104  002C0A                     _ECANSendMessage:
 13105                           	opt stack 23
 13106                           
 13107                           ;ECAN.c: 619: BYTE mode;
 13108                           ;ECAN.c: 620: BYTE buffers;
 13109                           ;ECAN.c: 628: BYTE i,j;
 13110                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 13111                           ;ECAN.c: 630: BYTE* pb[9];
 13112                           ;ECAN.c: 631: BYTE temp;
 13113                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 13114                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 13115                           
 13116                           ; BSR set to: 0
 13117                           ;incstack = 0
 13118                           ;incstack = 0
 13119  002C0A  0E0F               	movlw	15	;volatile
 13120  002C0C  6E1C               	movwf	ECANSendMessage@pb+1,c
 13121  002C0E  0E40               	movlw	64	;volatile
 13122  002C10  6E1B               	movwf	ECANSendMessage@pb,c
 13123                           
 13124                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 13125  002C12  0E0F               	movlw	15	;volatile
 13126  002C14  6E1E               	movwf	ECANSendMessage@pb+3,c
 13127  002C16  0E30               	movlw	48	;volatile
 13128  002C18  6E1D               	movwf	ECANSendMessage@pb+2,c
 13129                           
 13130                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 13131  002C1A  0E0F               	movlw	15	;volatile
 13132  002C1C  6E20               	movwf	ECANSendMessage@pb+5,c
 13133  002C1E  0E20               	movlw	32	;volatile
 13134  002C20  6E1F               	movwf	ECANSendMessage@pb+4,c
 13135                           
 13136                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 13137  002C22  0E0E               	movlw	14	;volatile
 13138  002C24  6E22               	movwf	ECANSendMessage@pb+7,c
 13139  002C26  0E20               	movlw	32	;volatile
 13140  002C28  6E21               	movwf	ECANSendMessage@pb+6,c
 13141                           
 13142                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 13143  002C2A  0E0E               	movlw	14	;volatile
 13144  002C2C  6E24               	movwf	ECANSendMessage@pb+9,c
 13145  002C2E  0E30               	movlw	48	;volatile
 13146  002C30  6E23               	movwf	ECANSendMessage@pb+8,c
 13147                           
 13148                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 13149  002C32  0E0E               	movlw	14	;volatile
 13150  002C34  6E26               	movwf	ECANSendMessage@pb+11,c
 13151  002C36  0E40               	movlw	64	;volatile
 13152  002C38  6E25               	movwf	ECANSendMessage@pb+10,c
 13153                           
 13154                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 13155  002C3A  0E0E               	movlw	14	;volatile
 13156  002C3C  6E28               	movwf	ECANSendMessage@pb+13,c
 13157  002C3E  0E50               	movlw	80	;volatile
 13158  002C40  6E27               	movwf	ECANSendMessage@pb+12,c
 13159                           
 13160                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 13161  002C42  0E0E               	movlw	14	;volatile
 13162  002C44  6E2A               	movwf	ECANSendMessage@pb+15,c
 13163  002C46  0E60               	movlw	96	;volatile
 13164  002C48  6E29               	movwf	ECANSendMessage@pb+14,c
 13165                           
 13166                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 13167  002C4A  0E0E               	movlw	14	;volatile
 13168  002C4C  6E2C               	movwf	ECANSendMessage@pb+17,c
 13169  002C4E  0E70               	movlw	112	;volatile
 13170  002C50  6E2B               	movwf	ECANSendMessage@pb+16,c
 13171                           
 13172                           ; BSR set to: 14
 13173                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 13174  002C52  5077               	movf	3959,w,c	;volatile
 13175  002C54  0BC0               	andlw	192
 13176  002C56  6E2D               	movwf	ECANSendMessage@mode,c
 13177                           
 13178                           ; BSR set to: 14
 13179                           ;ECAN.c: 660: if ( mode == 0x00 )
 13180  002C58  662D               	tstfsz	ECANSendMessage@mode,c
 13181  002C5A  D002               	goto	l8841
 13182                           
 13183                           ; BSR set to: 14
 13184                           ;ECAN.c: 661: buffers = 2;
 13185  002C5C  0E02               	movlw	2
 13186  002C5E  D001               	goto	L28
 13187  002C60                     l8841:
 13188                           
 13189                           ; BSR set to: 14
 13190                           ;ECAN.c: 662: else
 13191                           ;ECAN.c: 663: buffers = 8;
 13192  002C60  0E08               	movlw	8
 13193  002C62                     L28:
 13194  002C62  6E2E               	movwf	ECANSendMessage@buffers,c
 13195                           
 13196                           ; BSR set to: 14
 13197                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 13198  002C64  010D               	movlb	13	; () banked
 13199  002C66  90D8               	bcf	status,0,c
 13200  002C68  31F8               	rrcf	248,w,b	;volatile
 13201  002C6A  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 13202                           
 13203                           ; BSR set to: 13
 13204                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 13205  002C6C  6A34               	clrf	ECANSendMessage@i,c
 13206  002C6E  D07D               	goto	l8901
 13207  002C70                     l8847:
 13208                           
 13209                           ;ECAN.c: 688: {
 13210                           ;ECAN.c: 693: ptr = pb[i];
 13211  002C70  5034               	movf	ECANSendMessage@i,w,c
 13212  002C72  0D02               	mullw	2
 13213  002C74  50F3               	movf	prodl,w,c
 13214  002C76  0F1B               	addlw	low ECANSendMessage@pb
 13215  002C78  6ED9               	movwf	fsr2l,c
 13216  002C7A  6ADA               	clrf	fsr2h,c
 13217  002C7C  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 13218  002C80  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 13219                           
 13220                           ;ECAN.c: 694: tempPtr = ptr;
 13221  002C84  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 13222  002C88  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 13223                           
 13224                           ;ECAN.c: 702: if ( i > 2 )
 13225  002C8C  0E02               	movlw	2
 13226  002C8E  6434               	cpfsgt	ECANSendMessage@i,c
 13227  002C90  D004               	goto	l8859
 13228                           
 13229                           ;ECAN.c: 703: {
 13230                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 13231  002C92  90D8               	bcf	status,0,c
 13232  002C94  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 13233                           
 13234                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 13235  002C96  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 13236  002C98  D067               	goto	l8899
 13237  002C9A                     l8859:
 13238                           
 13239                           ;ECAN.c: 714: }
 13240                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 13241  002C9A  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13242  002C9E  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13243  002CA2  50DF               	movf	indf2,w,c
 13244  002CA4  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13245  002CA6  B61A               	btfsc	??_ECANSendMessage,3,c
 13246  002CA8  D05F               	goto	l8899
 13247                           
 13248                           ;ECAN.c: 721: {
 13249                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 13250  002CAA  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13251  002CAE  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13252  002CB2  0EFC               	movlw	252
 13253  002CB4  16DF               	andwf	indf2,f,c
 13254                           
 13255                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 13256  002CB6  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 13257  002CBA  0E03               	movlw	3
 13258  002CBC  161A               	andwf	??_ECANSendMessage,f,c
 13259  002CBE  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13260  002CC2  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13261  002CC6  501A               	movf	??_ECANSendMessage,w,c
 13262  002CC8  12DF               	iorwf	indf2,f,c
 13263                           
 13264                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 13265  002CCA  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 13266  002CCC  D004               	goto	l842
 13267                           
 13268                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 13269  002CCE  5018               	movf	ECANSendMessage@dataLen,w,c
 13270  002CD0  0940               	iorlw	64
 13271  002CD2  6E33               	movwf	ECANSendMessage@temp,c
 13272  002CD4  D002               	goto	l8869
 13273  002CD6                     l842:
 13274                           
 13275                           ;ECAN.c: 729: else
 13276                           ;ECAN.c: 730: temp = dataLen;
 13277  002CD6  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 13278  002CDA                     l8869:
 13279                           
 13280                           ;ECAN.c: 732: *(ptr+5) = temp;
 13281  002CDA  EE20 F005          	lfsr	2,5
 13282  002CDE  5035               	movf	ECANSendMessage@ptr,w,c
 13283  002CE0  26D9               	addwf	fsr2l,f,c
 13284  002CE2  5036               	movf	ECANSendMessage@ptr+1,w,c
 13285  002CE4  22DA               	addwfc	fsr2h,f,c
 13286  002CE6  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 13287                           
 13288                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 13289  002CEA  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 13290  002CEC  D003               	goto	l844
 13291                           
 13292                           ;ECAN.c: 736: temp = 1;
 13293  002CEE  0E01               	movlw	1
 13294  002CF0  6E33               	movwf	ECANSendMessage@temp,c
 13295  002CF2  D001               	goto	l8875
 13296  002CF4                     l844:
 13297                           
 13298                           ;ECAN.c: 738: else
 13299                           ;ECAN.c: 739: temp = 0;
 13300  002CF4  6A33               	clrf	ECANSendMessage@temp,c
 13301  002CF6                     l8875:
 13302                           
 13303                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 13304  002CF6  2835               	incf	ECANSendMessage@ptr,w,c
 13305  002CF8  6E08               	movwf	?__CANIDToRegs,c
 13306  002CFA  0E00               	movlw	0
 13307  002CFC  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 13308  002CFE  6E09               	movwf	?__CANIDToRegs+1,c
 13309  002D00  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 13310  002D04  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 13311  002D08  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 13312  002D0C  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 13313  002D10  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 13314  002D14  EC6C  F017         	call	__CANIDToRegs	;wreg free
 13315                           
 13316                           ;ECAN.c: 745: ptr += 6;
 13317  002D18  0E06               	movlw	6
 13318  002D1A  2635               	addwf	ECANSendMessage@ptr,f,c
 13319  002D1C  0E00               	movlw	0
 13320  002D1E  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 13321                           
 13322                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 13323  002D20  6A2F               	clrf	ECANSendMessage@j,c
 13324  002D22  D00F               	goto	l8889
 13325  002D24                     l8881:
 13326                           
 13327                           ;ECAN.c: 748: *ptr++ = *data++;
 13328  002D24  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 13329  002D28  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 13330  002D2C  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 13331  002D30  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 13332  002D34  CFDF FFE7          	movff	indf2,indf1
 13333  002D38  4A16               	infsnz	ECANSendMessage@data,f,c
 13334  002D3A  2A17               	incf	ECANSendMessage@data+1,f,c
 13335  002D3C  4A35               	infsnz	ECANSendMessage@ptr,f,c
 13336  002D3E  2A36               	incf	ECANSendMessage@ptr+1,f,c
 13337  002D40  2A2F               	incf	ECANSendMessage@j,f,c
 13338  002D42                     l8889:
 13339  002D42  5018               	movf	ECANSendMessage@dataLen,w,c
 13340  002D44  5C2F               	subwf	ECANSendMessage@j,w,c
 13341  002D46  E3EE               	bnc	l8881
 13342                           
 13343                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 13344  002D48  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13345  002D4C  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13346  002D50  50DF               	movf	indf2,w,c
 13347  002D52  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13348  002D54  B41A               	btfsc	??_ECANSendMessage,2,c
 13349  002D56  D006               	goto	l8895
 13350                           
 13351                           ;ECAN.c: 753: *tempPtr |= 0x08;
 13352  002D58  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13353  002D5C  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13354  002D60  0E00               	movlw	0
 13355  002D62  86DB               	bsf	plusw2,3,c
 13356  002D64                     l8895:
 13357                           
 13358                           ;ECAN.c: 755: return TRUE;
 13359  002D64  0E01               	movlw	1
 13360  002D66  D005               	goto	l850
 13361  002D68                     l8899:
 13362  002D68  2A34               	incf	ECANSendMessage@i,f,c
 13363  002D6A                     l8901:
 13364  002D6A  502E               	movf	ECANSendMessage@buffers,w,c
 13365  002D6C  5C34               	subwf	ECANSendMessage@i,w,c
 13366  002D6E  E380               	bnc	l8847
 13367                           
 13368                           ;ECAN.c: 756: }
 13369                           ;ECAN.c: 757: }
 13370                           ;ECAN.c: 760: return FALSE;
 13371  002D70  0E00               	movlw	0
 13372  002D72                     l850:
 13373  002D72  0012               	return	
 13374  002D74                     __end_of_ECANSendMessage:
 13375                           	opt stack 0
 13376                           tblptru	equ	0xFF8
 13377                           tblptrh	equ	0xFF7
 13378                           tblptrl	equ	0xFF6
 13379                           tablat	equ	0xFF5
 13380                           prodh	equ	0xFF4
 13381                           prodl	equ	0xFF3
 13382                           postinc0	equ	0xFEE
 13383                           wreg	equ	0xFE8
 13384                           indf1	equ	0xFE7
 13385                           fsr1h	equ	0xFE2
 13386                           fsr1l	equ	0xFE1
 13387                           indf2	equ	0xFDF
 13388                           postinc2	equ	0xFDE
 13389                           postdec2	equ	0xFDD
 13390                           plusw2	equ	0xFDB
 13391                           fsr2h	equ	0xFDA
 13392                           fsr2l	equ	0xFD9
 13393                           status	equ	0xFD8
 13394                           
 13395 ;; *************** function __CANIDToRegs *****************
 13396 ;; Defined at:
 13397 ;;		line 1099 in file "../ECAN.c"
 13398 ;; Parameters:    Size  Location     Type
 13399 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 13400 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13401 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13402 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
 13403 ;;  val             4    9[COMRAM] unsigned long 
 13404 ;;  type            1   13[COMRAM] unsigned char 
 13405 ;; Auto vars:     Size  Location     Type
 13406 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 13407 ;;		 -> _CANIDToRegs@val(4), 
 13408 ;; Return value:  Size  Location     Type
 13409 ;;		None               void
 13410 ;; Registers used:
 13411 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13412 ;; Tracked objects:
 13413 ;;		On entry : 0/F
 13414 ;;		On exit  : 0/0
 13415 ;;		Unchanged: 0/0
 13416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13417 ;;      Params:         7       0       0       0       0       0       0
 13418 ;;      Locals:         1       0       0       0       0       0       0
 13419 ;;      Temps:          2       0       0       0       0       0       0
 13420 ;;      Totals:        10       0       0       0       0       0       0
 13421 ;;Total ram usage:       10 bytes
 13422 ;; Hardware stack levels used:    1
 13423 ;; Hardware stack levels required when called:    2
 13424 ;; This function calls:
 13425 ;;		Nothing
 13426 ;; This function is called by:
 13427 ;;		_calculateSetFilterMask
 13428 ;;		_ECANSendMessage
 13429 ;; This function uses a non-reentrant model
 13430 ;;
 13431                           
 13432                           	psect	text55
 13433  002ED8                     __ptext55:
 13434                           	opt stack 0
 13435  002ED8                     __CANIDToRegs:
 13436                           	opt stack 23
 13437                           
 13438                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 13439                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 13440                           
 13441                           ;incstack = 0
 13442                           ;incstack = 0
 13443  002ED8  0E0A               	movlw	low __CANIDToRegs@val
 13444  002EDA  6E11               	movwf	__CANIDToRegs@Value,c
 13445                           
 13446                           ;ECAN.c: 1104: if ( type == 0 )
 13447  002EDC  660E               	tstfsz	__CANIDToRegs@type,c
 13448  002EDE  D037               	goto	l8917
 13449                           
 13450                           ;ECAN.c: 1105: {
 13451                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 13452  002EE0  5011               	movf	__CANIDToRegs@Value,w,c
 13453  002EE2  6ED9               	movwf	fsr2l,c
 13454  002EE4  6ADA               	clrf	fsr2h,c
 13455  002EE6  50DF               	movf	indf2,w,c
 13456  002EE8  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13457  002EEA  90D8               	bcf	status,0,c
 13458  002EEC  320F               	rrcf	??__CANIDToRegs,f,c
 13459  002EEE  90D8               	bcf	status,0,c
 13460  002EF0  320F               	rrcf	??__CANIDToRegs,f,c
 13461  002EF2  90D8               	bcf	status,0,c
 13462  002EF4  300F               	rrcf	??__CANIDToRegs,w,c
 13463  002EF6  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13464  002EFA  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13465  002EFE  6EDF               	movwf	indf2,c
 13466                           
 13467                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 13468  002F00  5011               	movf	__CANIDToRegs@Value,w,c
 13469  002F02  6ED9               	movwf	fsr2l,c
 13470  002F04  6ADA               	clrf	fsr2h,c
 13471  002F06  2AD9               	incf	fsr2l,f,c
 13472  002F08  6ADA               	clrf	fsr2h,c
 13473  002F0A  50DF               	movf	indf2,w,c
 13474  002F0C  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13475  002F0E  0E05               	movlw	5
 13476  002F10  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13477  002F12                     u10695:
 13478  002F12  90D8               	bcf	status,0,c
 13479  002F14  360F               	rlcf	??__CANIDToRegs,f,c
 13480  002F16  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13481  002F18  D7FC               	goto	u10695
 13482  002F1A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13483  002F1E  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13484  002F22  500F               	movf	??__CANIDToRegs,w,c
 13485  002F24  12DF               	iorwf	indf2,f,c
 13486                           
 13487                           ;ECAN.c: 1109: ptr++;
 13488  002F26  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13489  002F28  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13490                           
 13491                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 13492  002F2A  5011               	movf	__CANIDToRegs@Value,w,c
 13493  002F2C  6ED9               	movwf	fsr2l,c
 13494  002F2E  6ADA               	clrf	fsr2h,c
 13495  002F30  50DF               	movf	indf2,w,c
 13496  002F32  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13497  002F34  0E05               	movlw	5
 13498  002F36  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13499  002F38                     u10705:
 13500  002F38  90D8               	bcf	status,0,c
 13501  002F3A  360F               	rlcf	??__CANIDToRegs,f,c
 13502  002F3C  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13503  002F3E  D7FC               	goto	u10705
 13504  002F40  500F               	movf	??__CANIDToRegs,w,c
 13505  002F42  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13506  002F46  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13507  002F4A  6EDF               	movwf	indf2,c
 13508                           
 13509                           ;ECAN.c: 1111: }
 13510  002F4C  D06C               	goto	l904
 13511  002F4E                     l8917:
 13512                           
 13513                           ;ECAN.c: 1112: else
 13514                           ;ECAN.c: 1113: {
 13515                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 13516  002F4E  5011               	movf	__CANIDToRegs@Value,w,c
 13517  002F50  6ED9               	movwf	fsr2l,c
 13518  002F52  6ADA               	clrf	fsr2h,c
 13519  002F54  0E02               	movlw	2
 13520  002F56  26D9               	addwf	fsr2l,f,c
 13521  002F58  6ADA               	clrf	fsr2h,c
 13522  002F5A  50DF               	movf	indf2,w,c
 13523  002F5C  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13524  002F5E  0E05               	movlw	5
 13525  002F60  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13526  002F62                     u10715:
 13527  002F62  90D8               	bcf	status,0,c
 13528  002F64  320F               	rrcf	??__CANIDToRegs,f,c
 13529  002F66  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13530  002F68  D7FC               	goto	u10715
 13531  002F6A  500F               	movf	??__CANIDToRegs,w,c
 13532  002F6C  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13533  002F70  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13534  002F74  6EDF               	movwf	indf2,c
 13535                           
 13536                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 13537  002F76  5011               	movf	__CANIDToRegs@Value,w,c
 13538  002F78  6ED9               	movwf	fsr2l,c
 13539  002F7A  6ADA               	clrf	fsr2h,c
 13540  002F7C  0E03               	movlw	3
 13541  002F7E  26D9               	addwf	fsr2l,f,c
 13542  002F80  6ADA               	clrf	fsr2h,c
 13543  002F82  50DF               	movf	indf2,w,c
 13544  002F84  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13545  002F86  90D8               	bcf	status,0,c
 13546  002F88  360F               	rlcf	??__CANIDToRegs,f,c
 13547  002F8A  90D8               	bcf	status,0,c
 13548  002F8C  360F               	rlcf	??__CANIDToRegs,f,c
 13549  002F8E  90D8               	bcf	status,0,c
 13550  002F90  360F               	rlcf	??__CANIDToRegs,f,c
 13551  002F92  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13552  002F96  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13553  002F9A  500F               	movf	??__CANIDToRegs,w,c
 13554  002F9C  12DF               	iorwf	indf2,f,c
 13555                           
 13556                           ;ECAN.c: 1117: ptr++;
 13557  002F9E  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13558  002FA0  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13559                           
 13560                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 13561  002FA2  5011               	movf	__CANIDToRegs@Value,w,c
 13562  002FA4  6ED9               	movwf	fsr2l,c
 13563  002FA6  6ADA               	clrf	fsr2h,c
 13564  002FA8  0E02               	movlw	2
 13565  002FAA  26D9               	addwf	fsr2l,f,c
 13566  002FAC  6ADA               	clrf	fsr2h,c
 13567  002FAE  50DF               	movf	indf2,w,c
 13568  002FB0  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13569  002FB2  90D8               	bcf	status,0,c
 13570  002FB4  360F               	rlcf	??__CANIDToRegs,f,c
 13571  002FB6  90D8               	bcf	status,0,c
 13572  002FB8  360F               	rlcf	??__CANIDToRegs,f,c
 13573  002FBA  90D8               	bcf	status,0,c
 13574  002FBC  340F               	rlcf	??__CANIDToRegs,w,c
 13575  002FBE  0BE0               	andlw	224
 13576  002FC0  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13577  002FC4  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13578  002FC8  6EDF               	movwf	indf2,c
 13579                           
 13580                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 13581  002FCA  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13582  002FCE  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13583  002FD2  0E00               	movlw	0
 13584  002FD4  86DB               	bsf	plusw2,3,c
 13585                           
 13586                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 13587  002FD6  5011               	movf	__CANIDToRegs@Value,w,c
 13588  002FD8  6ED9               	movwf	fsr2l,c
 13589  002FDA  6ADA               	clrf	fsr2h,c
 13590  002FDC  0E02               	movlw	2
 13591  002FDE  26D9               	addwf	fsr2l,f,c
 13592  002FE0  6ADA               	clrf	fsr2h,c
 13593  002FE2  50DF               	movf	indf2,w,c
 13594  002FE4  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13595  002FE6  0E03               	movlw	3
 13596  002FE8  160F               	andwf	??__CANIDToRegs,f,c
 13597  002FEA  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13598  002FEE  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13599  002FF2  500F               	movf	??__CANIDToRegs,w,c
 13600  002FF4  12DF               	iorwf	indf2,f,c
 13601                           
 13602                           ;ECAN.c: 1122: ptr++;
 13603  002FF6  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13604  002FF8  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13605                           
 13606                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 13607  002FFA  5011               	movf	__CANIDToRegs@Value,w,c
 13608  002FFC  6ED9               	movwf	fsr2l,c
 13609  002FFE  6ADA               	clrf	fsr2h,c
 13610  003000  2AD9               	incf	fsr2l,f,c
 13611  003002  6ADA               	clrf	fsr2h,c
 13612  003004  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13613  003008  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13614  00300C  CFDF FFE7          	movff	indf2,indf1
 13615                           
 13616                           ;ECAN.c: 1124: ptr++;
 13617  003010  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13618  003012  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13619                           
 13620                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 13621  003014  5011               	movf	__CANIDToRegs@Value,w,c
 13622  003016  6ED9               	movwf	fsr2l,c
 13623  003018  6ADA               	clrf	fsr2h,c
 13624  00301A  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13625  00301E  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13626  003022  CFDF FFE7          	movff	indf2,indf1
 13627  003026                     l904:
 13628  003026  0012               	return	
 13629  003028                     __end_of__CANIDToRegs:
 13630                           	opt stack 0
 13631                           tblptru	equ	0xFF8
 13632                           tblptrh	equ	0xFF7
 13633                           tblptrl	equ	0xFF6
 13634                           tablat	equ	0xFF5
 13635                           prodh	equ	0xFF4
 13636                           prodl	equ	0xFF3
 13637                           postinc0	equ	0xFEE
 13638                           wreg	equ	0xFE8
 13639                           indf1	equ	0xFE7
 13640                           fsr1h	equ	0xFE2
 13641                           fsr1l	equ	0xFE1
 13642                           indf2	equ	0xFDF
 13643                           postinc2	equ	0xFDE
 13644                           postdec2	equ	0xFDD
 13645                           plusw2	equ	0xFDB
 13646                           fsr2h	equ	0xFDA
 13647                           fsr2l	equ	0xFD9
 13648                           status	equ	0xFD8
 13649                           
 13650 ;; *************** function _vscp_getEvent *****************
 13651 ;; Defined at:
 13652 ;;		line 1292 in file "../../vscp_firmware/common/vscp_firmware.c"
 13653 ;; Parameters:    Size  Location     Type
 13654 ;;		None
 13655 ;; Auto vars:     Size  Location     Type
 13656 ;;  rv              1   43[COMRAM] unsigned char 
 13657 ;; Return value:  Size  Location     Type
 13658 ;;                  1    wreg      unsigned char 
 13659 ;; Registers used:
 13660 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13661 ;; Tracked objects:
 13662 ;;		On entry : F/0
 13663 ;;		On exit  : 0/0
 13664 ;;		Unchanged: 0/0
 13665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13666 ;;      Params:         0       0       0       0       0       0       0
 13667 ;;      Locals:         1       0       0       0       0       0       0
 13668 ;;      Temps:          0       0       0       0       0       0       0
 13669 ;;      Totals:         1       0       0       0       0       0       0
 13670 ;;Total ram usage:        1 bytes
 13671 ;; Hardware stack levels used:    1
 13672 ;; Hardware stack levels required when called:    6
 13673 ;; This function calls:
 13674 ;;		_getVSCPFrame
 13675 ;; This function is called by:
 13676 ;;		_main
 13677 ;; This function uses a non-reentrant model
 13678 ;;
 13679                           
 13680                           	psect	text56
 13681  003C36                     __ptext56:
 13682                           	opt stack 0
 13683  003C36                     _vscp_getEvent:
 13684                           	opt stack 24
 13685                           
 13686                           ; BSR set to: 0
 13687                           ;vscp_firmware.c: 1293: int8_t rv;
 13688                           ;vscp_firmware.c: 1299: if (vscp_imsg.flags & 0x80) return !0;
 13689                           
 13690                           ;incstack = 0
 13691                           ;incstack = 0
 13692  003C36  BF96               	btfsc	_vscp_imsg& (0+255),7,b
 13693  003C38  D012               	goto	l1277
 13694                           
 13695                           ; BSR set to: 0
 13696                           ;vscp_firmware.c: 1302: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
 13697                           ;vscp_firmware.c: 1303: &vscp_imsg.vscp_type,
 13698                           ;vscp_firmware.c: 1304: &vscp_imsg.oaddr,
 13699                           ;vscp_firmware.c: 1305: &vscp_imsg.priority,
 13700                           ;vscp_firmware.c: 1306: &vscp_imsg.flags,
 13701                           ;vscp_firmware.c: 1307: vscp_imsg.data))) {
 13702  003C3A  0E9A               	movlw	low (_vscp_imsg+4)
 13703  003C3C  6E1E               	movwf	?_getVSCPFrame,c
 13704  003C3E  0E9B               	movlw	low (_vscp_imsg+5)
 13705  003C40  6E1F               	movwf	?_getVSCPFrame+1,c
 13706  003C42  0E97               	movlw	low (_vscp_imsg+1)
 13707  003C44  6E20               	movwf	?_getVSCPFrame+2,c
 13708  003C46  0E96               	movlw	low _vscp_imsg
 13709  003C48  6E21               	movwf	?_getVSCPFrame+3,c
 13710  003C4A  0E9C               	movlw	low (_vscp_imsg+6)
 13711  003C4C  6E22               	movwf	?_getVSCPFrame+4,c
 13712  003C4E  0E98               	movlw	(_vscp_imsg+2)& (0+255)
 13713  003C50  EC4E  F01C         	call	_getVSCPFrame
 13714  003C54  6E2C               	movwf	vscp_getEvent@rv,c
 13715  003C56  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 13716  003C58  E002               	bz	l1277
 13717                           
 13718                           ;vscp_firmware.c: 1309: vscp_imsg.flags |= 0x80;
 13719  003C5A  0100               	movlb	0	; () banked
 13720  003C5C  8F96               	bsf	_vscp_imsg& (0+255),7,b
 13721  003C5E                     l1277:
 13722  003C5E  0012               	return	
 13723  003C60                     __end_of_vscp_getEvent:
 13724                           	opt stack 0
 13725                           tblptru	equ	0xFF8
 13726                           tblptrh	equ	0xFF7
 13727                           tblptrl	equ	0xFF6
 13728                           tablat	equ	0xFF5
 13729                           prodh	equ	0xFF4
 13730                           prodl	equ	0xFF3
 13731                           postinc0	equ	0xFEE
 13732                           wreg	equ	0xFE8
 13733                           indf1	equ	0xFE7
 13734                           fsr1h	equ	0xFE2
 13735                           fsr1l	equ	0xFE1
 13736                           indf2	equ	0xFDF
 13737                           postinc2	equ	0xFDE
 13738                           postdec2	equ	0xFDD
 13739                           plusw2	equ	0xFDB
 13740                           fsr2h	equ	0xFDA
 13741                           fsr2l	equ	0xFD9
 13742                           status	equ	0xFD8
 13743                           
 13744 ;; *************** function _getVSCPFrame *****************
 13745 ;; Defined at:
 13746 ;;		line 2532 in file "../main.c"
 13747 ;; Parameters:    Size  Location     Type
 13748 ;;  pvscpclass      1    wreg     PTR unsigned short 
 13749 ;;		 -> vscp_imsg(14), 
 13750 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 13751 ;;		 -> vscp_imsg(14), 
 13752 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 13753 ;;		 -> vscp_imsg(14), 
 13754 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 13755 ;;		 -> vscp_imsg(14), 
 13756 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 13757 ;;		 -> vscp_imsg(14), 
 13758 ;;  pData           1   33[COMRAM] PTR unsigned char 
 13759 ;;		 -> vscp_imsg(14), 
 13760 ;; Auto vars:     Size  Location     Type
 13761 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 13762 ;;		 -> vscp_imsg(14), 
 13763 ;;  id              4   39[COMRAM] unsigned long 
 13764 ;; Return value:  Size  Location     Type
 13765 ;;                  1    wreg      unsigned char 
 13766 ;; Registers used:
 13767 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13768 ;; Tracked objects:
 13769 ;;		On entry : F/0
 13770 ;;		On exit  : 0/0
 13771 ;;		Unchanged: 0/0
 13772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13773 ;;      Params:         5       0       0       0       0       0       0
 13774 ;;      Locals:         5       0       0       0       0       0       0
 13775 ;;      Temps:          4       0       0       0       0       0       0
 13776 ;;      Totals:        14       0       0       0       0       0       0
 13777 ;;Total ram usage:       14 bytes
 13778 ;; Hardware stack levels used:    1
 13779 ;; Hardware stack levels required when called:    5
 13780 ;; This function calls:
 13781 ;;		_getCANFrame
 13782 ;; This function is called by:
 13783 ;;		_vscp_getEvent
 13784 ;; This function uses a non-reentrant model
 13785 ;;
 13786                           
 13787                           	psect	text57
 13788  00389C                     __ptext57:
 13789                           	opt stack 0
 13790  00389C                     _getVSCPFrame:
 13791                           	opt stack 24
 13792                           
 13793                           ;incstack = 0
 13794                           ;incstack = 0
 13795                           ;getVSCPFrame@pvscpclass stored from wreg
 13796  00389C  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 13797                           
 13798                           ; BSR set to: 0
 13799                           ;main.c: 2533: uint32_t id;
 13800                           ;main.c: 2535: if ( !getCANFrame(&id, pSize, pData) ) {
 13801  0038A0  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 13802  0038A4  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 13803  0038A8  0E28               	movlw	getVSCPFrame@id& (0+255)
 13804  0038AA  ECF0  F01D         	call	_getCANFrame
 13805  0038AE  0900               	iorlw	0
 13806  0038B0  E102               	bnz	l6477
 13807                           
 13808                           ;main.c: 2536: return 0;
 13809  0038B2  0E00               	movlw	0
 13810  0038B4  D02E               	goto	l644
 13811  0038B6                     l6477:
 13812                           
 13813                           ;main.c: 2537: }
 13814                           ;main.c: 2539: *pNodeId = id & 0x0ff;
 13815  0038B6  501F               	movf	getVSCPFrame@pNodeId,w,c
 13816  0038B8  6ED9               	movwf	fsr2l,c
 13817  0038BA  6ADA               	clrf	fsr2h,c
 13818  0038BC  C028  FFDF         	movff	getVSCPFrame@id,indf2
 13819                           
 13820                           ;main.c: 2540: *pvscptype = (id >> 8) & 0xff;
 13821  0038C0  501E               	movf	getVSCPFrame@pvscptype,w,c
 13822  0038C2  6ED9               	movwf	fsr2l,c
 13823  0038C4  6ADA               	clrf	fsr2h,c
 13824  0038C6  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 13825                           
 13826                           ;main.c: 2541: *pvscpclass = (id >> 16) & 0x1ff;
 13827  0038CA  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 13828  0038CC  6E23               	movwf	??_getVSCPFrame& (0+255),c
 13829  0038CE  0E01               	movlw	1
 13830  0038D0  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 13831  0038D2  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 13832  0038D4  5027               	movf	getVSCPFrame@pvscpclass,w,c
 13833  0038D6  6ED9               	movwf	fsr2l,c
 13834  0038D8  6ADA               	clrf	fsr2h,c
 13835  0038DA  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 13836  0038DE  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 13837                           
 13838                           ;main.c: 2542: *pPriority = (uint16_t) (0x07 & (id >> 26));
 13839  0038E2  5020               	movf	getVSCPFrame@pPriority,w,c
 13840  0038E4  6ED9               	movwf	fsr2l,c
 13841  0038E6  6ADA               	clrf	fsr2h,c
 13842  0038E8  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 13843  0038EC  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 13844  0038F0  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 13845  0038F4  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 13846  0038F8  0E1B               	movlw	27
 13847  0038FA  D005               	goto	u6750
 13848  0038FC                     u6755:
 13849  0038FC  90D8               	bcf	status,0,c
 13850  0038FE  3226               	rrcf	??_getVSCPFrame+3,f,c
 13851  003900  3225               	rrcf	??_getVSCPFrame+2,f,c
 13852  003902  3224               	rrcf	??_getVSCPFrame+1,f,c
 13853  003904  3223               	rrcf	??_getVSCPFrame,f,c
 13854  003906                     u6750:
 13855  003906  2EE8               	decfsz	wreg,f,c
 13856  003908  D7F9               	goto	u6755
 13857  00390A  5023               	movf	??_getVSCPFrame,w,c
 13858  00390C  0B07               	andlw	7
 13859  00390E  6EDF               	movwf	indf2,c
 13860                           
 13861                           ;main.c: 2544: return 1;
 13862  003910  0E01               	movlw	1
 13863  003912                     l644:
 13864  003912  0012               	return	
 13865  003914                     __end_of_getVSCPFrame:
 13866                           	opt stack 0
 13867                           tblptru	equ	0xFF8
 13868                           tblptrh	equ	0xFF7
 13869                           tblptrl	equ	0xFF6
 13870                           tablat	equ	0xFF5
 13871                           prodh	equ	0xFF4
 13872                           prodl	equ	0xFF3
 13873                           postinc0	equ	0xFEE
 13874                           wreg	equ	0xFE8
 13875                           indf1	equ	0xFE7
 13876                           fsr1h	equ	0xFE2
 13877                           fsr1l	equ	0xFE1
 13878                           indf2	equ	0xFDF
 13879                           postinc2	equ	0xFDE
 13880                           postdec2	equ	0xFDD
 13881                           plusw2	equ	0xFDB
 13882                           fsr2h	equ	0xFDA
 13883                           fsr2l	equ	0xFD9
 13884                           status	equ	0xFD8
 13885                           
 13886 ;; *************** function _getCANFrame *****************
 13887 ;; Defined at:
 13888 ;;		line 2574 in file "../main.c"
 13889 ;; Parameters:    Size  Location     Type
 13890 ;;  pid             1    wreg     PTR unsigned long 
 13891 ;;		 -> getVSCPFrame@id(4), 
 13892 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 13893 ;;		 -> vscp_imsg(14), 
 13894 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 13895 ;;		 -> vscp_imsg(14), 
 13896 ;; Auto vars:     Size  Location     Type
 13897 ;;  pid             1   27[COMRAM] PTR unsigned long 
 13898 ;;		 -> getVSCPFrame@id(4), 
 13899 ;;  flags           1   28[COMRAM] enum E16349
 13900 ;; Return value:  Size  Location     Type
 13901 ;;                  1    wreg      unsigned char 
 13902 ;; Registers used:
 13903 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13904 ;; Tracked objects:
 13905 ;;		On entry : F/0
 13906 ;;		On exit  : 0/0
 13907 ;;		Unchanged: 0/0
 13908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13909 ;;      Params:         2       0       0       0       0       0       0
 13910 ;;      Locals:         2       0       0       0       0       0       0
 13911 ;;      Temps:          0       0       0       0       0       0       0
 13912 ;;      Totals:         4       0       0       0       0       0       0
 13913 ;;Total ram usage:        4 bytes
 13914 ;; Hardware stack levels used:    1
 13915 ;; Hardware stack levels required when called:    4
 13916 ;; This function calls:
 13917 ;;		_ECANReceiveMessage
 13918 ;; This function is called by:
 13919 ;;		_getVSCPFrame
 13920 ;; This function uses a non-reentrant model
 13921 ;;
 13922                           
 13923                           	psect	text58
 13924  003BE0                     __ptext58:
 13925                           	opt stack 0
 13926  003BE0                     _getCANFrame:
 13927                           	opt stack 24
 13928                           
 13929                           ;incstack = 0
 13930                           ;incstack = 0
 13931                           ;getCANFrame@pid stored from wreg
 13932  003BE0  CFE8 F01C          	movff	wreg,getCANFrame@pid
 13933                           
 13934                           ; BSR set to: 0
 13935                           ;main.c: 2575: ECAN_RX_MSG_FLAGS flags;
 13936                           ;main.c: 2579: if (vscp_imsg.flags & 0x80) return 0;
 13937  003BE4  AF96               	btfss	_vscp_imsg& (0+255),7,b
 13938  003BE6  D002               	goto	l6493
 13939  003BE8                     l6489:
 13940  003BE8  0E00               	movlw	0
 13941  003BEA  D00F               	goto	l655
 13942  003BEC                     l6493:
 13943                           
 13944                           ; BSR set to: 0
 13945                           ;main.c: 2581: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 13946  003BEC  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 13947  003BF0  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 13948  003BF4  0E1D               	movlw	low getCANFrame@flags
 13949  003BF6  6E11               	movwf	?_ECANReceiveMessage+2,c
 13950  003BF8  501C               	movf	getCANFrame@pid,w,c
 13951  003BFA  EC32  F013         	call	_ECANReceiveMessage
 13952  003BFE  0900               	iorlw	0
 13953  003C00  E0F3               	bz	l6489
 13954                           
 13955                           ;main.c: 2584: if (flags & ECAN_RX_RTR_FRAME) return 0;
 13956  003C02  AC1D               	btfss	getCANFrame@flags,6,c
 13957                           
 13958                           ;main.c: 2587: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 13959  003C04  AA1D               	btfss	getCANFrame@flags,5,c
 13960  003C06  D7F0               	goto	l6489
 13961                           
 13962                           ;main.c: 2589: return 1;
 13963  003C08  0E01               	movlw	1
 13964  003C0A                     l655:
 13965  003C0A  0012               	return	
 13966  003C0C                     __end_of_getCANFrame:
 13967                           	opt stack 0
 13968                           tblptru	equ	0xFF8
 13969                           tblptrh	equ	0xFF7
 13970                           tblptrl	equ	0xFF6
 13971                           tablat	equ	0xFF5
 13972                           prodh	equ	0xFF4
 13973                           prodl	equ	0xFF3
 13974                           postinc0	equ	0xFEE
 13975                           wreg	equ	0xFE8
 13976                           indf1	equ	0xFE7
 13977                           fsr1h	equ	0xFE2
 13978                           fsr1l	equ	0xFE1
 13979                           indf2	equ	0xFDF
 13980                           postinc2	equ	0xFDE
 13981                           postdec2	equ	0xFDD
 13982                           plusw2	equ	0xFDB
 13983                           fsr2h	equ	0xFDA
 13984                           fsr2l	equ	0xFD9
 13985                           status	equ	0xFD8
 13986                           
 13987 ;; *************** function _ECANReceiveMessage *****************
 13988 ;; Defined at:
 13989 ;;		line 803 in file "../ECAN.c"
 13990 ;; Parameters:    Size  Location     Type
 13991 ;;  id              1    wreg     PTR unsigned long 
 13992 ;;		 -> getVSCPFrame@id(4), 
 13993 ;;  data            1   14[COMRAM] PTR unsigned char 
 13994 ;;		 -> vscp_imsg(14), 
 13995 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 13996 ;;		 -> vscp_imsg(14), 
 13997 ;;  msgFlags        1   16[COMRAM] PTR enum E16324
 13998 ;;		 -> getCANFrame@flags(1), 
 13999 ;; Auto vars:     Size  Location     Type
 14000 ;;  id              1   19[COMRAM] PTR unsigned long 
 14001 ;;		 -> getVSCPFrame@id(4), 
 14002 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 14003 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14004 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14005 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 14006 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14007 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14008 ;;  temp            1   22[COMRAM] struct .
 14009 ;;  mode            1   21[COMRAM] unsigned char 
 14010 ;;  i               1   20[COMRAM] unsigned char 
 14011 ;; Return value:  Size  Location     Type
 14012 ;;                  1    wreg      enum E15660
 14013 ;; Registers used:
 14014 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14015 ;; Tracked objects:
 14016 ;;		On entry : F/0
 14017 ;;		On exit  : 0/0
 14018 ;;		Unchanged: 0/0
 14019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14020 ;;      Params:         3       0       0       0       0       0       0
 14021 ;;      Locals:         8       0       0       0       0       0       0
 14022 ;;      Temps:          0       0       0       0       0       0       0
 14023 ;;      Totals:        11       0       0       0       0       0       0
 14024 ;;Total ram usage:       11 bytes
 14025 ;; Hardware stack levels used:    1
 14026 ;; Hardware stack levels required when called:    3
 14027 ;; This function calls:
 14028 ;;		__ECANPointBuffer
 14029 ;;		__RegsToCANID
 14030 ;; This function is called by:
 14031 ;;		_getCANFrame
 14032 ;; This function uses a non-reentrant model
 14033 ;;
 14034                           
 14035                           	psect	text59
 14036  002664                     __ptext59:
 14037                           	opt stack 0
 14038  002664                     _ECANReceiveMessage:
 14039                           	opt stack 24
 14040                           
 14041                           ;incstack = 0
 14042                           ;incstack = 0
 14043                           ;ECANReceiveMessage@id stored from wreg
 14044  002664  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 14045                           
 14046                           ; BSR set to: 0
 14047                           ;ECAN.c: 805: BYTE mode;
 14048                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 14049                           ;ECAN.c: 809: char i;
 14050                           ;ECAN.c: 810: BYTE_VAL temp;
 14051                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 14052  002668  6A54               	clrf	__ECANRxFilterHitInfo,c
 14053                           
 14054                           ; BSR set to: 0
 14055                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 14056  00266A  5077               	movf	3959,w,c	;volatile
 14057  00266C  0BC0               	andlw	192
 14058  00266E  6E16               	movwf	ECANReceiveMessage@mode,c
 14059                           
 14060                           ; BSR set to: 0
 14061                           ;ECAN.c: 816: if ( mode == 0x00 )
 14062  002670  6616               	tstfsz	ECANReceiveMessage@mode,c
 14063  002672  D032               	goto	l6625
 14064                           
 14065                           ; BSR set to: 0
 14066                           ;ECAN.c: 822: {
 14067                           ;ECAN.c: 824: if ( RXB0FUL )
 14068  002674  AE60               	btfss	3936,7,c	;volatile
 14069  002676  D012               	goto	l855
 14070                           
 14071                           ; BSR set to: 0
 14072                           ;ECAN.c: 825: {
 14073                           ;ECAN.c: 827: RXB0IF = 0;
 14074  002678  90A4               	bcf	4004,0,c	;volatile
 14075                           
 14076                           ;ECAN.c: 830: if ( RXB0OVFL )
 14077  00267A  AE74               	btfss	3956,7,c	;volatile
 14078  00267C  D006               	goto	l6601
 14079                           
 14080                           ; BSR set to: 0
 14081                           ;ECAN.c: 831: {
 14082                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 14083  00267E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14084  002680  6ED9               	movwf	fsr2l,c
 14085  002682  6ADA               	clrf	fsr2h,c
 14086  002684  0E00               	movlw	0
 14087  002686  86DB               	bsf	plusw2,3,c
 14088                           
 14089                           ; BSR set to: 0
 14090                           ;ECAN.c: 833: RXB0OVFL = 0;
 14091  002688  9E74               	bcf	3956,7,c	;volatile
 14092  00268A                     l6601:
 14093                           
 14094                           ; BSR set to: 0
 14095                           ;ECAN.c: 834: }
 14096                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 14097  00268A  A060               	btfss	3936,0,c	;volatile
 14098  00268C  D002               	bra	u6925
 14099  00268E  8054               	bsf	__ECANRxFilterHitInfo,0,c
 14100  002690  D001               	bra	u6927
 14101  002692                     u6925:
 14102  002692  9054               	bcf	__ECANRxFilterHitInfo,0,c
 14103  002694                     u6927:
 14104                           
 14105                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 14106  002694  0E0F               	movlw	15	;volatile
 14107  002696  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14108  002698  0E60               	movlw	96	;volatile
 14109  00269A  D01A               	goto	L29
 14110  00269C                     l855:
 14111                           
 14112                           ; BSR set to: 0
 14113                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 14114  00269C  010F               	movlb	15	; () banked
 14115  00269E  AF50               	btfss	80,7,b	;volatile
 14116  0026A0  D019               	goto	l6619
 14117                           
 14118                           ; BSR set to: 15
 14119                           ;ECAN.c: 842: {
 14120                           ;ECAN.c: 844: RXB1IF = 0;
 14121  0026A2  92A4               	bcf	4004,1,c	;volatile
 14122                           
 14123                           ;ECAN.c: 847: if ( RXB1OVFL )
 14124  0026A4  AC74               	btfss	3956,6,c	;volatile
 14125  0026A6  D006               	goto	l6611
 14126                           
 14127                           ; BSR set to: 15
 14128                           ;ECAN.c: 848: {
 14129                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 14130  0026A8  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14131  0026AA  6ED9               	movwf	fsr2l,c
 14132  0026AC  6ADA               	clrf	fsr2h,c
 14133  0026AE  0E00               	movlw	0
 14134  0026B0  86DB               	bsf	plusw2,3,c
 14135                           
 14136                           ; BSR set to: 15
 14137                           ;ECAN.c: 850: RXB1OVFL = 0;
 14138  0026B2  9C74               	bcf	3956,6,c	;volatile
 14139  0026B4                     l6611:
 14140                           
 14141                           ; BSR set to: 15
 14142                           ;ECAN.c: 851: }
 14143                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 14144  0026B4  5150               	movf	80,w,b	;volatile
 14145  0026B6  0B07               	andlw	7
 14146  0026B8  6E54               	movwf	__ECANRxFilterHitInfo,c
 14147                           
 14148                           ; BSR set to: 15
 14149                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 14150  0026BA  0E02               	movlw	2
 14151  0026BC  6054               	cpfslt	__ECANRxFilterHitInfo,c
 14152  0026BE  D005               	goto	l6617
 14153                           
 14154                           ; BSR set to: 15
 14155                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 14156  0026C0  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14157  0026C2  6ED9               	movwf	fsr2l,c
 14158  0026C4  6ADA               	clrf	fsr2h,c
 14159  0026C6  0E00               	movlw	0
 14160  0026C8  8EDB               	bsf	plusw2,7,c
 14161  0026CA                     l6617:
 14162                           
 14163                           ; BSR set to: 15
 14164                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 14165  0026CA  0E0F               	movlw	15	;volatile
 14166  0026CC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14167  0026CE  0E50               	movlw	80	;volatile
 14168  0026D0                     L29:
 14169  0026D0  6E18               	movwf	ECANReceiveMessage@ptr,c
 14170                           
 14171                           ;ECAN.c: 860: }
 14172  0026D2  D065               	goto	l6679
 14173  0026D4                     l6619:
 14174                           
 14175                           ;ECAN.c: 861: else
 14176                           ;ECAN.c: 862: return FALSE;
 14177  0026D4  0E00               	movlw	0
 14178  0026D6  D0CC               	goto	l862
 14179  0026D8                     l6625:
 14180                           
 14181                           ; BSR set to: 0
 14182                           ;ECAN.c: 869: else if ( mode == 0x40 )
 14183  0026D8  5016               	movf	ECANReceiveMessage@mode,w,c
 14184  0026DA  0A40               	xorlw	64
 14185  0026DC  E146               	bnz	l865
 14186                           
 14187                           ; BSR set to: 0
 14188                           ;ECAN.c: 875: {
 14189                           ;ECAN.c: 876: if ( RXB0FUL )
 14190  0026DE  AE60               	btfss	3936,7,c	;volatile
 14191  0026E0  D004               	goto	l866
 14192                           
 14193                           ; BSR set to: 0
 14194                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 14195  0026E2  0E0F               	movlw	15	;volatile
 14196  0026E4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14197  0026E6  0E60               	movlw	96	;volatile
 14198  0026E8  D03E               	goto	L36
 14199  0026EA                     l866:
 14200                           
 14201                           ; BSR set to: 0
 14202                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 14203  0026EA  010F               	movlb	15	; () banked
 14204  0026EC  AF50               	btfss	80,7,b	;volatile
 14205  0026EE  D004               	goto	l868
 14206                           
 14207                           ; BSR set to: 15
 14208                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 14209  0026F0  0E0F               	movlw	15	;volatile
 14210  0026F2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14211  0026F4  0E50               	movlw	80	;volatile
 14212  0026F6  D037               	goto	L36
 14213  0026F8                     l868:
 14214                           
 14215                           ; BSR set to: 15
 14216                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 14217  0026F8  010D               	movlb	13
 14218  0026FA  B5F8               	btfsc	248,2,b	;volatile
 14219  0026FC  D007               	goto	l870
 14220  0026FE  010E               	movlb	14
 14221  002700  AF20               	btfss	32,7,b	;volatile
 14222  002702  D004               	goto	l870
 14223                           
 14224                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 14225  002704  0E0E               	movlw	14	;volatile
 14226  002706  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14227  002708  0E20               	movlw	32	;volatile
 14228  00270A  D02D               	goto	L36
 14229  00270C                     l870:
 14230                           
 14231                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 14232  00270C  010D               	movlb	13
 14233  00270E  B7F8               	btfsc	248,3,b	;volatile
 14234  002710  D007               	goto	l872
 14235  002712  010E               	movlb	14
 14236  002714  AF30               	btfss	48,7,b	;volatile
 14237  002716  D004               	goto	l872
 14238                           
 14239                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 14240  002718  0E0E               	movlw	14	;volatile
 14241  00271A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14242  00271C  0E30               	movlw	48	;volatile
 14243  00271E  D023               	goto	L36
 14244  002720                     l872:
 14245                           
 14246                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 14247  002720  010D               	movlb	13
 14248  002722  B9F8               	btfsc	248,4,b	;volatile
 14249  002724  D007               	goto	l874
 14250  002726  010E               	movlb	14
 14251  002728  AF40               	btfss	64,7,b	;volatile
 14252  00272A  D004               	goto	l874
 14253                           
 14254                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 14255  00272C  0E0E               	movlw	14	;volatile
 14256  00272E  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14257  002730  0E40               	movlw	64	;volatile
 14258  002732  D019               	goto	L36
 14259  002734                     l874:
 14260                           
 14261                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 14262  002734  010D               	movlb	13
 14263  002736  BBF8               	btfsc	248,5,b	;volatile
 14264  002738  D005               	goto	l876
 14265  00273A  010E               	movlb	14
 14266  00273C  AF50               	btfss	80,7,b	;volatile
 14267  00273E  D002               	goto	l876
 14268                           
 14269                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 14270  002740  0E0E               	movlw	14	;volatile
 14271  002742  D7D7               	goto	L37
 14272  002744                     l876:
 14273                           
 14274                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 14275  002744  010D               	movlb	13
 14276  002746  BDF8               	btfsc	248,6,b	;volatile
 14277  002748  D005               	goto	l878
 14278  00274A  010E               	movlb	14
 14279  00274C  AF60               	btfss	96,7,b	;volatile
 14280  00274E  D002               	goto	l878
 14281                           
 14282                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 14283  002750  0E0E               	movlw	14	;volatile
 14284  002752  D7C8               	goto	L38
 14285  002754                     l878:
 14286                           
 14287                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 14288  002754  010D               	movlb	13
 14289  002756  BFF8               	btfsc	248,7,b	;volatile
 14290  002758  D7BD               	goto	l6619
 14291  00275A  010E               	movlb	14
 14292  00275C  AF70               	btfss	112,7,b	;volatile
 14293  00275E  D7BA               	goto	l6619
 14294                           
 14295                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 14296  002760  0E0E               	movlw	14	;volatile
 14297  002762  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14298  002764  0E70               	movlw	112	;volatile
 14299  002766                     L36:
 14300  002766  6E18               	movwf	ECANReceiveMessage@ptr,c
 14301  002768  D00A               	goto	l6669
 14302  00276A                     l865:
 14303                           
 14304                           ; BSR set to: 0
 14305                           ;ECAN.c: 910: else
 14306                           ;ECAN.c: 915: {
 14307                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 14308  00276A  AE74               	btfss	3956,7,c	;volatile
 14309  00276C  D7B3               	goto	l6619
 14310                           
 14311                           ; BSR set to: 0
 14312                           ;ECAN.c: 917: {
 14313                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 14314  00276E  506F               	movf	3951,w,c	;volatile
 14315  002770  0B07               	andlw	7
 14316  002772  EC8A  F01C         	call	__ECANPointBuffer
 14317  002776  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 14318  00277A  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 14319  00277E                     l6669:
 14320                           
 14321                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 14322  00277E  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14323  002782  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14324  002786  50DF               	movf	indf2,w,c
 14325  002788  0B1F               	andlw	31
 14326  00278A  6E54               	movwf	__ECANRxFilterHitInfo,c
 14327                           
 14328                           ;ECAN.c: 932: RXB1IF = 0;
 14329  00278C  92A4               	bcf	4004,1,c	;volatile
 14330                           
 14331                           ;ECAN.c: 934: if ( RXB1OVFL )
 14332  00278E  AC74               	btfss	3956,6,c	;volatile
 14333  002790  D006               	goto	l6679
 14334                           
 14335                           ;ECAN.c: 935: {
 14336                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 14337  002792  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14338  002794  6ED9               	movwf	fsr2l,c
 14339  002796  6ADA               	clrf	fsr2h,c
 14340  002798  0E00               	movlw	0
 14341  00279A  86DB               	bsf	plusw2,3,c
 14342                           
 14343                           ;ECAN.c: 937: RXB1OVFL = 0;
 14344  00279C  9C74               	bcf	3956,6,c	;volatile
 14345  00279E                     l6679:
 14346                           
 14347                           ;ECAN.c: 942: savedPtr = ptr;
 14348  00279E  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 14349  0027A2  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 14350                           
 14351                           ;ECAN.c: 943: *msgFlags = 0;
 14352  0027A6  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14353  0027A8  6ED9               	movwf	fsr2l,c
 14354  0027AA  6ADA               	clrf	fsr2h,c
 14355  0027AC  6ADF               	clrf	indf2,c
 14356                           
 14357                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 14358  0027AE  EE20 F005          	lfsr	2,5
 14359  0027B2  5018               	movf	ECANReceiveMessage@ptr,w,c
 14360  0027B4  26D9               	addwf	fsr2l,f,c
 14361  0027B6  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14362  0027B8  22DA               	addwfc	fsr2h,f,c
 14363  0027BA  50DF               	movf	indf2,w,c
 14364  0027BC  6E17               	movwf	ECANReceiveMessage@temp,c
 14365                           
 14366                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 14367  0027BE  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14368  0027C0  6ED9               	movwf	fsr2l,c
 14369  0027C2  6ADA               	clrf	fsr2h,c
 14370  0027C4  5017               	movf	ECANReceiveMessage@temp,w,c
 14371  0027C6  0B0F               	andlw	15
 14372  0027C8  6EDF               	movwf	indf2,c
 14373                           
 14374                           ;ECAN.c: 950: if ( temp.bits.b6 )
 14375  0027CA  AC17               	btfss	ECANReceiveMessage@temp,6,c
 14376  0027CC  D005               	goto	l886
 14377                           
 14378                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 14379  0027CE  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14380  0027D0  6ED9               	movwf	fsr2l,c
 14381  0027D2  6ADA               	clrf	fsr2h,c
 14382  0027D4  0E00               	movlw	0
 14383  0027D6  8CDB               	bsf	plusw2,6,c
 14384  0027D8                     l886:
 14385                           
 14386                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 14387  0027D8  EE20 F002          	lfsr	2,2
 14388  0027DC  5018               	movf	ECANReceiveMessage@ptr,w,c
 14389  0027DE  26D9               	addwf	fsr2l,f,c
 14390  0027E0  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14391  0027E2  22DA               	addwfc	fsr2h,f,c
 14392  0027E4  50DF               	movf	indf2,w,c
 14393  0027E6  6E17               	movwf	ECANReceiveMessage@temp,c
 14394                           
 14395                           ;ECAN.c: 955: if ( temp.bits.b3 )
 14396  0027E8  A617               	btfss	ECANReceiveMessage@temp,3,c
 14397  0027EA  D008               	goto	l887
 14398                           
 14399                           ;ECAN.c: 956: {
 14400                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 14401  0027EC  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14402  0027EE  6ED9               	movwf	fsr2l,c
 14403  0027F0  6ADA               	clrf	fsr2h,c
 14404  0027F2  0E00               	movlw	0
 14405  0027F4  8ADB               	bsf	plusw2,5,c
 14406                           
 14407                           ;ECAN.c: 958: temp.Val = 1;
 14408  0027F6  0E01               	movlw	1
 14409  0027F8  6E17               	movwf	ECANReceiveMessage@temp,c
 14410                           
 14411                           ;ECAN.c: 959: }
 14412  0027FA  D001               	goto	l6697
 14413  0027FC                     l887:
 14414                           
 14415                           ;ECAN.c: 960: else
 14416                           ;ECAN.c: 961: temp.Val = 0;
 14417  0027FC  6A17               	clrf	ECANReceiveMessage@temp,c
 14418  0027FE                     l6697:
 14419                           
 14420                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 14421  0027FE  2818               	incf	ECANReceiveMessage@ptr,w,c
 14422  002800  6E08               	movwf	?__RegsToCANID,c
 14423  002802  0E00               	movlw	0
 14424  002804  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 14425  002806  6E09               	movwf	?__RegsToCANID+1,c
 14426  002808  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 14427  00280C  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 14428  002810  ECBA  F016         	call	__RegsToCANID	;wreg free
 14429                           
 14430                           ;ECAN.c: 966: ptr += 6;
 14431  002814  0E06               	movlw	6
 14432  002816  2618               	addwf	ECANReceiveMessage@ptr,f,c
 14433  002818  0E00               	movlw	0
 14434  00281A  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 14435                           
 14436                           ;ECAN.c: 967: temp.Val = *dataLen;
 14437  00281C  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14438  00281E  6ED9               	movwf	fsr2l,c
 14439  002820  6ADA               	clrf	fsr2h,c
 14440  002822  50DF               	movf	indf2,w,c
 14441  002824  6E17               	movwf	ECANReceiveMessage@temp,c
 14442                           
 14443                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 14444  002826  6A15               	clrf	ECANReceiveMessage@i,c
 14445  002828  D00D               	goto	l6713
 14446  00282A                     l6705:
 14447                           
 14448                           ;ECAN.c: 969: *data++ = *ptr++;
 14449  00282A  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14450  00282E  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14451  002832  500F               	movf	ECANReceiveMessage@data,w,c
 14452  002834  6EE1               	movwf	fsr1l,c
 14453  002836  6AE2               	clrf	fsr1h,c
 14454  002838  CFDF FFE7          	movff	indf2,indf1
 14455  00283C  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 14456  00283E  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 14457  002840  2A0F               	incf	ECANReceiveMessage@data,f,c
 14458  002842  2A15               	incf	ECANReceiveMessage@i,f,c
 14459  002844                     l6713:
 14460  002844  5017               	movf	ECANReceiveMessage@temp,w,c
 14461  002846  5C15               	subwf	ECANReceiveMessage@i,w,c
 14462  002848  E3F0               	bnc	l6705
 14463                           
 14464                           ;ECAN.c: 972: if ( IRXIF )
 14465  00284A  AEA4               	btfss	4004,7,c	;volatile
 14466  00284C  D006               	goto	l6719
 14467                           
 14468                           ;ECAN.c: 973: {
 14469                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 14470  00284E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14471  002850  6ED9               	movwf	fsr2l,c
 14472  002852  6ADA               	clrf	fsr2h,c
 14473  002854  0E00               	movlw	0
 14474  002856  88DB               	bsf	plusw2,4,c
 14475                           
 14476                           ;ECAN.c: 975: IRXIF = 0;
 14477  002858  9EA4               	bcf	4004,7,c	;volatile
 14478  00285A                     l6719:
 14479                           
 14480                           ;ECAN.c: 976: }
 14481                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 14482  00285A  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 14483  00285E  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 14484  002862  0E7F               	movlw	127
 14485  002864  16DF               	andwf	indf2,f,c
 14486                           
 14487                           ;ECAN.c: 983: if ( mode == 0x80 )
 14488  002866  5016               	movf	ECANReceiveMessage@mode,w,c
 14489  002868  0A80               	xorlw	128
 14490  00286A  B4D8               	btfsc	status,2,c
 14491                           
 14492                           ;ECAN.c: 984: FIFOEMPTY = 0;
 14493  00286C  9E74               	bcf	3956,7,c	;volatile
 14494                           
 14495                           ;ECAN.c: 990: return TRUE;
 14496  00286E  0E01               	movlw	1
 14497  002870                     l862:
 14498  002870  0012               	return	
 14499  002872                     __end_of_ECANReceiveMessage:
 14500                           	opt stack 0
 14501                           tblptru	equ	0xFF8
 14502                           tblptrh	equ	0xFF7
 14503                           tblptrl	equ	0xFF6
 14504                           tablat	equ	0xFF5
 14505                           prodh	equ	0xFF4
 14506                           prodl	equ	0xFF3
 14507                           postinc0	equ	0xFEE
 14508                           wreg	equ	0xFE8
 14509                           indf1	equ	0xFE7
 14510                           fsr1h	equ	0xFE2
 14511                           fsr1l	equ	0xFE1
 14512                           indf2	equ	0xFDF
 14513                           postinc2	equ	0xFDE
 14514                           postdec2	equ	0xFDD
 14515                           plusw2	equ	0xFDB
 14516                           fsr2h	equ	0xFDA
 14517                           fsr2l	equ	0xFD9
 14518                           status	equ	0xFD8
 14519                           
 14520 ;; *************** function __RegsToCANID *****************
 14521 ;; Defined at:
 14522 ;;		line 1156 in file "../ECAN.c"
 14523 ;; Parameters:    Size  Location     Type
 14524 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 14525 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14526 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14527 ;;  val             1    9[COMRAM] PTR unsigned long 
 14528 ;;		 -> getVSCPFrame@id(4), 
 14529 ;;  type            1   10[COMRAM] unsigned char 
 14530 ;; Auto vars:     Size  Location     Type
 14531 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 14532 ;;		 -> getVSCPFrame@id(4), 
 14533 ;; Return value:  Size  Location     Type
 14534 ;;		None               void
 14535 ;; Registers used:
 14536 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14537 ;; Tracked objects:
 14538 ;;		On entry : 0/0
 14539 ;;		On exit  : 0/0
 14540 ;;		Unchanged: 0/0
 14541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14542 ;;      Params:         4       0       0       0       0       0       0
 14543 ;;      Locals:         1       0       0       0       0       0       0
 14544 ;;      Temps:          2       0       0       0       0       0       0
 14545 ;;      Totals:         7       0       0       0       0       0       0
 14546 ;;Total ram usage:        7 bytes
 14547 ;; Hardware stack levels used:    1
 14548 ;; Hardware stack levels required when called:    2
 14549 ;; This function calls:
 14550 ;;		Nothing
 14551 ;; This function is called by:
 14552 ;;		_ECANReceiveMessage
 14553 ;; This function uses a non-reentrant model
 14554 ;;
 14555                           
 14556                           	psect	text60
 14557  002D74                     __ptext60:
 14558                           	opt stack 0
 14559  002D74                     __RegsToCANID:
 14560                           	opt stack 24
 14561                           
 14562                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 14563                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 14564                           
 14565                           ;incstack = 0
 14566                           ;incstack = 0
 14567  002D74  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 14568                           
 14569                           ;ECAN.c: 1161: if ( type == 0 )
 14570  002D78  660B               	tstfsz	__RegsToCANID@type,c
 14571  002D7A  D046               	goto	l6793
 14572                           
 14573                           ;ECAN.c: 1162: {
 14574                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 14575  002D7C  500E               	movf	__RegsToCANID@Value,w,c
 14576  002D7E  6ED9               	movwf	fsr2l,c
 14577  002D80  6ADA               	clrf	fsr2h,c
 14578  002D82  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14579  002D86  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14580  002D8A  50E7               	movf	indf1,w,c
 14581  002D8C  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14582  002D8E  90D8               	bcf	status,0,c
 14583  002D90  360C               	rlcf	??__RegsToCANID,f,c
 14584  002D92  90D8               	bcf	status,0,c
 14585  002D94  360C               	rlcf	??__RegsToCANID,f,c
 14586  002D96  90D8               	bcf	status,0,c
 14587  002D98  340C               	rlcf	??__RegsToCANID,w,c
 14588  002D9A  6EDF               	movwf	indf2,c
 14589                           
 14590                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 14591  002D9C  500E               	movf	__RegsToCANID@Value,w,c
 14592  002D9E  6ED9               	movwf	fsr2l,c
 14593  002DA0  6ADA               	clrf	fsr2h,c
 14594  002DA2  2AD9               	incf	fsr2l,f,c
 14595  002DA4  6ADA               	clrf	fsr2h,c
 14596  002DA6  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14597  002DAA  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14598  002DAE  50E7               	movf	indf1,w,c
 14599  002DB0  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14600  002DB2  0E05               	movlw	5
 14601  002DB4  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14602  002DB6                     u7245:
 14603  002DB6  90D8               	bcf	status,0,c
 14604  002DB8  320C               	rrcf	??__RegsToCANID,f,c
 14605  002DBA  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14606  002DBC  D7FC               	goto	u7245
 14607  002DBE  500C               	movf	??__RegsToCANID,w,c
 14608  002DC0  6EDF               	movwf	indf2,c
 14609                           
 14610                           ;ECAN.c: 1166: ptr++;
 14611  002DC2  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14612  002DC4  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14613                           
 14614                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 14615  002DC6  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14616  002DCA  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14617  002DCE  50DF               	movf	indf2,w,c
 14618  002DD0  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14619  002DD2  0E05               	movlw	5
 14620  002DD4  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14621  002DD6                     u7255:
 14622  002DD6  90D8               	bcf	status,0,c
 14623  002DD8  320C               	rrcf	??__RegsToCANID,f,c
 14624  002DDA  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14625  002DDC  D7FC               	goto	u7255
 14626  002DDE  500E               	movf	__RegsToCANID@Value,w,c
 14627  002DE0  6ED9               	movwf	fsr2l,c
 14628  002DE2  6ADA               	clrf	fsr2h,c
 14629  002DE4  500C               	movf	??__RegsToCANID,w,c
 14630  002DE6  12DF               	iorwf	indf2,f,c
 14631                           
 14632                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 14633  002DE8  500E               	movf	__RegsToCANID@Value,w,c
 14634  002DEA  6ED9               	movwf	fsr2l,c
 14635  002DEC  6ADA               	clrf	fsr2h,c
 14636  002DEE  0E02               	movlw	2
 14637  002DF0  26D9               	addwf	fsr2l,f,c
 14638  002DF2  6ADA               	clrf	fsr2h,c
 14639  002DF4  6ADF               	clrf	indf2,c
 14640                           
 14641                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 14642  002DF6  500E               	movf	__RegsToCANID@Value,w,c
 14643  002DF8  6ED9               	movwf	fsr2l,c
 14644  002DFA  6ADA               	clrf	fsr2h,c
 14645  002DFC  0E03               	movlw	3
 14646  002DFE  26D9               	addwf	fsr2l,f,c
 14647  002E00  6ADA               	clrf	fsr2h,c
 14648  002E02  0E00               	movlw	0
 14649  002E04  6EDF               	movwf	indf2,c
 14650                           
 14651                           ;ECAN.c: 1170: }
 14652  002E06  D067               	goto	l909
 14653  002E08                     l6793:
 14654                           
 14655                           ;ECAN.c: 1171: else
 14656                           ;ECAN.c: 1172: {
 14657                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 14658  002E08  500E               	movf	__RegsToCANID@Value,w,c
 14659  002E0A  6ED9               	movwf	fsr2l,c
 14660  002E0C  6ADA               	clrf	fsr2h,c
 14661  002E0E  0E02               	movlw	2
 14662  002E10  26D9               	addwf	fsr2l,f,c
 14663  002E12  6ADA               	clrf	fsr2h,c
 14664  002E14  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14665  002E18  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14666  002E1C  50E7               	movf	indf1,w,c
 14667  002E1E  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14668  002E20  0E05               	movlw	5
 14669  002E22  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14670  002E24                     u7265:
 14671  002E24  90D8               	bcf	status,0,c
 14672  002E26  360C               	rlcf	??__RegsToCANID,f,c
 14673  002E28  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14674  002E2A  D7FC               	goto	u7265
 14675  002E2C  500C               	movf	??__RegsToCANID,w,c
 14676  002E2E  6EDF               	movwf	indf2,c
 14677                           
 14678                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 14679  002E30  500E               	movf	__RegsToCANID@Value,w,c
 14680  002E32  6ED9               	movwf	fsr2l,c
 14681  002E34  6ADA               	clrf	fsr2h,c
 14682  002E36  0E03               	movlw	3
 14683  002E38  26D9               	addwf	fsr2l,f,c
 14684  002E3A  6ADA               	clrf	fsr2h,c
 14685  002E3C  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14686  002E40  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14687  002E44  50E7               	movf	indf1,w,c
 14688  002E46  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14689  002E48  90D8               	bcf	status,0,c
 14690  002E4A  320C               	rrcf	??__RegsToCANID,f,c
 14691  002E4C  90D8               	bcf	status,0,c
 14692  002E4E  320C               	rrcf	??__RegsToCANID,f,c
 14693  002E50  90D8               	bcf	status,0,c
 14694  002E52  300C               	rrcf	??__RegsToCANID,w,c
 14695  002E54  6EDF               	movwf	indf2,c
 14696                           
 14697                           ;ECAN.c: 1176: ptr++;
 14698  002E56  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14699  002E58  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14700                           
 14701                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 14702  002E5A  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14703  002E5E  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14704  002E62  50DF               	movf	indf2,w,c
 14705  002E64  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14706  002E66  0E03               	movlw	3
 14707  002E68  160C               	andwf	??__RegsToCANID,f,c
 14708  002E6A  500E               	movf	__RegsToCANID@Value,w,c
 14709  002E6C  6ED9               	movwf	fsr2l,c
 14710  002E6E  6ADA               	clrf	fsr2h,c
 14711  002E70  0E02               	movlw	2
 14712  002E72  26D9               	addwf	fsr2l,f,c
 14713  002E74  6ADA               	clrf	fsr2h,c
 14714  002E76  500C               	movf	??__RegsToCANID,w,c
 14715  002E78  12DF               	iorwf	indf2,f,c
 14716                           
 14717                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 14718  002E7A  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14719  002E7E  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14720  002E82  50DF               	movf	indf2,w,c
 14721  002E84  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14722  002E86  90D8               	bcf	status,0,c
 14723  002E88  320C               	rrcf	??__RegsToCANID,f,c
 14724  002E8A  90D8               	bcf	status,0,c
 14725  002E8C  320C               	rrcf	??__RegsToCANID,f,c
 14726  002E8E  90D8               	bcf	status,0,c
 14727  002E90  320C               	rrcf	??__RegsToCANID,f,c
 14728  002E92  0E1C               	movlw	28
 14729  002E94  160C               	andwf	??__RegsToCANID,f,c
 14730  002E96  500E               	movf	__RegsToCANID@Value,w,c
 14731  002E98  6ED9               	movwf	fsr2l,c
 14732  002E9A  6ADA               	clrf	fsr2h,c
 14733  002E9C  0E02               	movlw	2
 14734  002E9E  26D9               	addwf	fsr2l,f,c
 14735  002EA0  6ADA               	clrf	fsr2h,c
 14736  002EA2  500C               	movf	??__RegsToCANID,w,c
 14737  002EA4  12DF               	iorwf	indf2,f,c
 14738                           
 14739                           ;ECAN.c: 1180: ptr++;
 14740  002EA6  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14741  002EA8  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14742                           
 14743                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 14744  002EAA  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14745  002EAE  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14746  002EB2  500E               	movf	__RegsToCANID@Value,w,c
 14747  002EB4  6EE1               	movwf	fsr1l,c
 14748  002EB6  6AE2               	clrf	fsr1h,c
 14749  002EB8  2AE1               	incf	fsr1l,f,c
 14750  002EBA  6AE2               	clrf	fsr1h,c
 14751  002EBC  CFDF FFE7          	movff	indf2,indf1
 14752                           
 14753                           ;ECAN.c: 1182: ptr++;
 14754  002EC0  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14755  002EC2  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14756                           
 14757                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 14758  002EC4  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14759  002EC8  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14760  002ECC  500E               	movf	__RegsToCANID@Value,w,c
 14761  002ECE  6EE1               	movwf	fsr1l,c
 14762  002ED0  6AE2               	clrf	fsr1h,c
 14763  002ED2  CFDF FFE7          	movff	indf2,indf1
 14764  002ED6                     l909:
 14765  002ED6  0012               	return	
 14766  002ED8                     __end_of__RegsToCANID:
 14767                           	opt stack 0
 14768                           tblptru	equ	0xFF8
 14769                           tblptrh	equ	0xFF7
 14770                           tblptrl	equ	0xFF6
 14771                           tablat	equ	0xFF5
 14772                           prodh	equ	0xFF4
 14773                           prodl	equ	0xFF3
 14774                           postinc0	equ	0xFEE
 14775                           wreg	equ	0xFE8
 14776                           indf1	equ	0xFE7
 14777                           fsr1h	equ	0xFE2
 14778                           fsr1l	equ	0xFE1
 14779                           indf2	equ	0xFDF
 14780                           postinc2	equ	0xFDE
 14781                           postdec2	equ	0xFDD
 14782                           plusw2	equ	0xFDB
 14783                           fsr2h	equ	0xFDA
 14784                           fsr2l	equ	0xFD9
 14785                           status	equ	0xFD8
 14786                           
 14787 ;; *************** function __ECANPointBuffer *****************
 14788 ;; Defined at:
 14789 ;;		line 1207 in file "../ECAN.c"
 14790 ;; Parameters:    Size  Location     Type
 14791 ;;  b               1    wreg     unsigned char 
 14792 ;; Auto vars:     Size  Location     Type
 14793 ;;  b               1   10[COMRAM] unsigned char 
 14794 ;;  pt              2   11[COMRAM] PTR unsigned char 
 14795 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14796 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14797 ;; Return value:  Size  Location     Type
 14798 ;;                  2    7[COMRAM] PTR unsigned char 
 14799 ;; Registers used:
 14800 ;;		wreg, status,2, status,0
 14801 ;; Tracked objects:
 14802 ;;		On entry : F/0
 14803 ;;		On exit  : 0/0
 14804 ;;		Unchanged: 0/0
 14805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14806 ;;      Params:         3       0       0       0       0       0       0
 14807 ;;      Locals:         3       0       0       0       0       0       0
 14808 ;;      Temps:          0       0       0       0       0       0       0
 14809 ;;      Totals:         6       0       0       0       0       0       0
 14810 ;;Total ram usage:        6 bytes
 14811 ;; Hardware stack levels used:    1
 14812 ;; Hardware stack levels required when called:    2
 14813 ;; This function calls:
 14814 ;;		Nothing
 14815 ;; This function is called by:
 14816 ;;		_ECANReceiveMessage
 14817 ;; This function uses a non-reentrant model
 14818 ;;
 14819                           
 14820                           	psect	text61
 14821  003914                     __ptext61:
 14822                           	opt stack 0
 14823  003914                     __ECANPointBuffer:
 14824                           	opt stack 24
 14825                           
 14826                           ;incstack = 0
 14827                           ;incstack = 0
 14828                           ;__ECANPointBuffer@b stored from wreg
 14829  003914  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 14830                           
 14831                           ; BSR set to: 0
 14832                           ;ECAN.c: 1208: BYTE* pt;
 14833                           ;ECAN.c: 1210: switch(b)
 14834  003918  D024               	goto	l6779
 14835  00391A                     l6761:
 14836                           
 14837                           ; BSR set to: 0
 14838                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 14839  00391A  0E0F               	movlw	15	;volatile
 14840  00391C  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14841  00391E  0E60               	movlw	96	;volatile
 14842  003920  D01E               	goto	L45
 14843  003922                     l6763:
 14844                           
 14845                           ; BSR set to: 0
 14846                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 14847  003922  010F               	movlb	15	; () banked
 14848  003924  0E0F               	movlw	15	;volatile
 14849  003926  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14850  003928  0E50               	movlw	80	;volatile
 14851  00392A  D019               	goto	L45
 14852  00392C                     l6765:
 14853                           
 14854                           ; BSR set to: 0
 14855                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 14856  00392C  010E               	movlb	14	; () banked
 14857  00392E  0E0E               	movlw	14	;volatile
 14858  003930  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14859  003932  0E20               	movlw	32	;volatile
 14860  003934  D014               	goto	L45
 14861  003936                     l6767:
 14862                           
 14863                           ; BSR set to: 0
 14864                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 14865  003936  010E               	movlb	14	; () banked
 14866  003938  0E0E               	movlw	14	;volatile
 14867  00393A  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14868  00393C  0E30               	movlw	48	;volatile
 14869  00393E  D00F               	goto	L45
 14870  003940                     l6769:
 14871                           
 14872                           ; BSR set to: 0
 14873                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 14874  003940  010E               	movlb	14	; () banked
 14875  003942  0E0E               	movlw	14	;volatile
 14876  003944  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14877  003946  0E40               	movlw	64	;volatile
 14878  003948  D00A               	goto	L45
 14879  00394A                     l6771:
 14880                           
 14881                           ; BSR set to: 0
 14882                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 14883  00394A  010E               	movlb	14	; () banked
 14884  00394C  0E0E               	movlw	14	;volatile
 14885  00394E  D7EB               	goto	L46
 14886  003950                     l6773:
 14887                           
 14888                           ; BSR set to: 0
 14889                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 14890  003950  010E               	movlb	14	; () banked
 14891  003952  0E0E               	movlw	14	;volatile
 14892  003954  D7E3               	goto	L47
 14893  003956                     l6775:
 14894                           
 14895                           ; BSR set to: 0
 14896                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 14897  003956  010E               	movlb	14	; () banked
 14898  003958  0E0E               	movlw	14	;volatile
 14899  00395A  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14900  00395C  0E70               	movlw	112	;volatile
 14901  00395E                     L45:
 14902  00395E  6E0C               	movwf	__ECANPointBuffer@pt,c
 14903                           
 14904                           ;ECAN.c: 1235: break;
 14905  003960  D00F               	goto	l914
 14906  003962                     l6779:
 14907                           
 14908                           ; BSR set to: 0
 14909  003962  500B               	movf	__ECANPointBuffer@b,w,c
 14910                           
 14911                           ; Switch size 1, requested type "speed"
 14912                           ; Number of cases is 7, Range of values is 0 to 6
 14913                           ; switch strategies available:
 14914                           ; Name         Instructions Cycles
 14915                           ; simple_byte           22    12 (average)
 14916                           ;	Chosen strategy is simple_byte
 14917  003964  E0DA               	bz	l6761
 14918  003966  0A01               	xorlw	1	; case 1
 14919  003968  E0DC               	bz	l6763
 14920  00396A  0A03               	xorlw	3	; case 2
 14921  00396C  E0DF               	bz	l6765
 14922  00396E  0A01               	xorlw	1	; case 3
 14923  003970  E0E2               	bz	l6767
 14924  003972  0A07               	xorlw	7	; case 4
 14925  003974  E0E5               	bz	l6769
 14926  003976  0A01               	xorlw	1	; case 5
 14927  003978  E0E8               	bz	l6771
 14928  00397A  0A03               	xorlw	3	; case 6
 14929  00397C  E0E9               	bz	l6773
 14930  00397E  D7EB               	goto	l6775
 14931  003980                     l914:
 14932                           
 14933                           ;ECAN.c: 1237: return (pt);
 14934  003980  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 14935  003984  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 14936  003988  0012               	return	
 14937  00398A                     __end_of__ECANPointBuffer:
 14938                           	opt stack 0
 14939                           tblptru	equ	0xFF8
 14940                           tblptrh	equ	0xFF7
 14941                           tblptrl	equ	0xFF6
 14942                           tablat	equ	0xFF5
 14943                           prodh	equ	0xFF4
 14944                           prodl	equ	0xFF3
 14945                           postinc0	equ	0xFEE
 14946                           wreg	equ	0xFE8
 14947                           indf1	equ	0xFE7
 14948                           fsr1h	equ	0xFE2
 14949                           fsr1l	equ	0xFE1
 14950                           indf2	equ	0xFDF
 14951                           postinc2	equ	0xFDE
 14952                           postdec2	equ	0xFDD
 14953                           plusw2	equ	0xFDB
 14954                           fsr2h	equ	0xFDA
 14955                           fsr2l	equ	0xFD9
 14956                           status	equ	0xFD8
 14957                           
 14958 ;; *************** function _vscp_check_pstorage *****************
 14959 ;; Defined at:
 14960 ;;		line 163 in file "../../vscp_firmware/common/vscp_firmware.c"
 14961 ;; Parameters:    Size  Location     Type
 14962 ;;		None
 14963 ;; Auto vars:     Size  Location     Type
 14964 ;;		None
 14965 ;; Return value:  Size  Location     Type
 14966 ;;                  1    wreg      unsigned char 
 14967 ;; Registers used:
 14968 ;;		wreg, status,2, status,0, cstack
 14969 ;; Tracked objects:
 14970 ;;		On entry : 0/0
 14971 ;;		On exit  : 0/0
 14972 ;;		Unchanged: 0/0
 14973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14974 ;;      Params:         0       0       0       0       0       0       0
 14975 ;;      Locals:         0       0       0       0       0       0       0
 14976 ;;      Temps:          0       0       0       0       0       0       0
 14977 ;;      Totals:         0       0       0       0       0       0       0
 14978 ;;Total ram usage:        0 bytes
 14979 ;; Hardware stack levels used:    1
 14980 ;; Hardware stack levels required when called:    4
 14981 ;; This function calls:
 14982 ;;		_vscp_writeNicknamePermanent
 14983 ;;		_vscp_getSegmentCRC
 14984 ;;		_vscp_setSegmentCRC
 14985 ;;		_vscp_setControlByte
 14986 ;; This function is called by:
 14987 ;;		_main
 14988 ;; This function uses a non-reentrant model
 14989 ;;
 14990                           
 14991                           	psect	text62
 14992  003D1E                     __ptext62:
 14993                           	opt stack 0
 14994  003D1E                     _vscp_check_pstorage:
 14995                           	opt stack 26
 14996                           
 14997                           ;vscp_firmware.c: 166: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 14998                           
 14999                           ;incstack = 0
 15000                           ;incstack = 0
 15001  003D1E  ECB9  F01F         	call	_vscp_getSegmentCRC	;wreg free
 15002  003D22  0BC0               	andlw	192
 15003  003D24  0A40               	xorlw	64
 15004  003D26  E102               	bnz	l7247
 15005                           
 15006                           ;vscp_firmware.c: 167: return !0;
 15007  003D28  0E01               	movlw	1
 15008  003D2A  D00A               	goto	l1034
 15009  003D2C                     l7247:
 15010                           
 15011                           ;vscp_firmware.c: 168: }
 15012                           ;vscp_firmware.c: 171: vscp_writeNicknamePermanent(0xff);
 15013  003D2C  0EFF               	movlw	255
 15014  003D2E  EC74  F01F         	call	_vscp_writeNicknamePermanent
 15015                           
 15016                           ;vscp_firmware.c: 174: vscp_setSegmentCRC(0x00);
 15017  003D32  0E00               	movlw	0
 15018  003D34  EC6B  F01F         	call	_vscp_setSegmentCRC
 15019                           
 15020                           ;vscp_firmware.c: 178: vscp_setControlByte(0xA0);
 15021  003D38  0EA0               	movlw	160
 15022  003D3A  EC62  F01F         	call	_vscp_setControlByte
 15023                           
 15024                           ;vscp_firmware.c: 180: return 0;
 15025  003D3E  0E00               	movlw	0
 15026  003D40                     l1034:
 15027  003D40  0012               	return	
 15028  003D42                     __end_of_vscp_check_pstorage:
 15029                           	opt stack 0
 15030                           tblptru	equ	0xFF8
 15031                           tblptrh	equ	0xFF7
 15032                           tblptrl	equ	0xFF6
 15033                           tablat	equ	0xFF5
 15034                           prodh	equ	0xFF4
 15035                           prodl	equ	0xFF3
 15036                           postinc0	equ	0xFEE
 15037                           wreg	equ	0xFE8
 15038                           indf1	equ	0xFE7
 15039                           fsr1h	equ	0xFE2
 15040                           fsr1l	equ	0xFE1
 15041                           indf2	equ	0xFDF
 15042                           postinc2	equ	0xFDE
 15043                           postdec2	equ	0xFDD
 15044                           plusw2	equ	0xFDB
 15045                           fsr2h	equ	0xFDA
 15046                           fsr2l	equ	0xFD9
 15047                           status	equ	0xFD8
 15048                           
 15049 ;; *************** function _vscp_setControlByte *****************
 15050 ;; Defined at:
 15051 ;;		line 2375 in file "../main.c"
 15052 ;; Parameters:    Size  Location     Type
 15053 ;;  ctrl            1    wreg     unsigned char 
 15054 ;; Auto vars:     Size  Location     Type
 15055 ;;  ctrl            1   10[COMRAM] unsigned char 
 15056 ;; Return value:  Size  Location     Type
 15057 ;;		None               void
 15058 ;; Registers used:
 15059 ;;		wreg, status,2, cstack
 15060 ;; Tracked objects:
 15061 ;;		On entry : 0/0
 15062 ;;		On exit  : 0/0
 15063 ;;		Unchanged: 0/0
 15064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15065 ;;      Params:         0       0       0       0       0       0       0
 15066 ;;      Locals:         1       0       0       0       0       0       0
 15067 ;;      Temps:          0       0       0       0       0       0       0
 15068 ;;      Totals:         1       0       0       0       0       0       0
 15069 ;;Total ram usage:        1 bytes
 15070 ;; Hardware stack levels used:    1
 15071 ;; Hardware stack levels required when called:    3
 15072 ;; This function calls:
 15073 ;;		_writeEEPROM
 15074 ;; This function is called by:
 15075 ;;		_vscp_check_pstorage
 15076 ;; This function uses a non-reentrant model
 15077 ;;
 15078                           
 15079                           	psect	text63
 15080  003EC4                     __ptext63:
 15081                           	opt stack 0
 15082  003EC4                     _vscp_setControlByte:
 15083                           	opt stack 26
 15084                           
 15085                           ;incstack = 0
 15086                           ;incstack = 0
 15087                           ;vscp_setControlByte@ctrl stored from wreg
 15088  003EC4  CFE8 F00B          	movff	wreg,vscp_setControlByte@ctrl
 15089                           
 15090                           ;main.c: 2376: writeEEPROM(0x03, ctrl);
 15091  003EC8  6A09               	clrf	?_writeEEPROM+1,c
 15092  003ECA  0E03               	movlw	3
 15093  003ECC  6E08               	movwf	?_writeEEPROM,c
 15094  003ECE  C00B  F00A         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 15095  003ED2  EF6A  F01E         	goto	_writeEEPROM	;wreg free
 15096  003ED6                     __end_of_vscp_setControlByte:
 15097                           	opt stack 0
 15098                           tblptru	equ	0xFF8
 15099                           tblptrh	equ	0xFF7
 15100                           tblptrl	equ	0xFF6
 15101                           tablat	equ	0xFF5
 15102                           prodh	equ	0xFF4
 15103                           prodl	equ	0xFF3
 15104                           postinc0	equ	0xFEE
 15105                           wreg	equ	0xFE8
 15106                           indf1	equ	0xFE7
 15107                           fsr1h	equ	0xFE2
 15108                           fsr1l	equ	0xFE1
 15109                           indf2	equ	0xFDF
 15110                           postinc2	equ	0xFDE
 15111                           postdec2	equ	0xFDD
 15112                           plusw2	equ	0xFDB
 15113                           fsr2h	equ	0xFDA
 15114                           fsr2l	equ	0xFD9
 15115                           status	equ	0xFD8
 15116                           
 15117 ;; *************** function _vscp_setSegmentCRC *****************
 15118 ;; Defined at:
 15119 ;;		line 2366 in file "../main.c"
 15120 ;; Parameters:    Size  Location     Type
 15121 ;;  crc             1    wreg     unsigned char 
 15122 ;; Auto vars:     Size  Location     Type
 15123 ;;  crc             1   10[COMRAM] unsigned char 
 15124 ;; Return value:  Size  Location     Type
 15125 ;;		None               void
 15126 ;; Registers used:
 15127 ;;		wreg, status,2, cstack
 15128 ;; Tracked objects:
 15129 ;;		On entry : 0/0
 15130 ;;		On exit  : 0/0
 15131 ;;		Unchanged: 0/0
 15132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15133 ;;      Params:         0       0       0       0       0       0       0
 15134 ;;      Locals:         1       0       0       0       0       0       0
 15135 ;;      Temps:          0       0       0       0       0       0       0
 15136 ;;      Totals:         1       0       0       0       0       0       0
 15137 ;;Total ram usage:        1 bytes
 15138 ;; Hardware stack levels used:    1
 15139 ;; Hardware stack levels required when called:    3
 15140 ;; This function calls:
 15141 ;;		_writeEEPROM
 15142 ;; This function is called by:
 15143 ;;		_vscp_check_pstorage
 15144 ;;		_vscp_handleProbeState
 15145 ;;		_vscp_handleHeartbeat
 15146 ;;		_vscp_handleSetNickname
 15147 ;; This function uses a non-reentrant model
 15148 ;;
 15149                           
 15150                           	psect	text64
 15151  003ED6                     __ptext64:
 15152                           	opt stack 0
 15153  003ED6                     _vscp_setSegmentCRC:
 15154                           	opt stack 25
 15155                           
 15156                           ;incstack = 0
 15157                           ;incstack = 0
 15158                           ;vscp_setSegmentCRC@crc stored from wreg
 15159  003ED6  CFE8 F00B          	movff	wreg,vscp_setSegmentCRC@crc
 15160                           
 15161                           ;main.c: 2367: writeEEPROM( 0x02, crc );
 15162  003EDA  6A09               	clrf	?_writeEEPROM+1,c
 15163  003EDC  0E02               	movlw	2
 15164  003EDE  6E08               	movwf	?_writeEEPROM,c
 15165  003EE0  C00B  F00A         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 15166  003EE4  EF6A  F01E         	goto	_writeEEPROM	;wreg free
 15167  003EE8                     __end_of_vscp_setSegmentCRC:
 15168                           	opt stack 0
 15169                           tblptru	equ	0xFF8
 15170                           tblptrh	equ	0xFF7
 15171                           tblptrl	equ	0xFF6
 15172                           tablat	equ	0xFF5
 15173                           prodh	equ	0xFF4
 15174                           prodl	equ	0xFF3
 15175                           postinc0	equ	0xFEE
 15176                           wreg	equ	0xFE8
 15177                           indf1	equ	0xFE7
 15178                           fsr1h	equ	0xFE2
 15179                           fsr1l	equ	0xFE1
 15180                           indf2	equ	0xFDF
 15181                           postinc2	equ	0xFDE
 15182                           postdec2	equ	0xFDD
 15183                           plusw2	equ	0xFDB
 15184                           fsr2h	equ	0xFDA
 15185                           fsr2l	equ	0xFD9
 15186                           status	equ	0xFD8
 15187                           
 15188 ;; *************** function _vscp_getSegmentCRC *****************
 15189 ;; Defined at:
 15190 ;;		line 2357 in file "../main.c"
 15191 ;; Parameters:    Size  Location     Type
 15192 ;;		None
 15193 ;; Auto vars:     Size  Location     Type
 15194 ;;		None
 15195 ;; Return value:  Size  Location     Type
 15196 ;;                  1    wreg      unsigned char 
 15197 ;; Registers used:
 15198 ;;		wreg, status,2, cstack
 15199 ;; Tracked objects:
 15200 ;;		On entry : 0/0
 15201 ;;		On exit  : 0/0
 15202 ;;		Unchanged: 0/0
 15203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15204 ;;      Params:         0       0       0       0       0       0       0
 15205 ;;      Locals:         0       0       0       0       0       0       0
 15206 ;;      Temps:          0       0       0       0       0       0       0
 15207 ;;      Totals:         0       0       0       0       0       0       0
 15208 ;;Total ram usage:        0 bytes
 15209 ;; Hardware stack levels used:    1
 15210 ;; Hardware stack levels required when called:    3
 15211 ;; This function calls:
 15212 ;;		_readEEPROM
 15213 ;; This function is called by:
 15214 ;;		_vscp_check_pstorage
 15215 ;;		_vscp_handleHeartbeat
 15216 ;; This function uses a non-reentrant model
 15217 ;;
 15218                           
 15219                           	psect	text65
 15220  003F72                     __ptext65:
 15221                           	opt stack 0
 15222  003F72                     _vscp_getSegmentCRC:
 15223                           	opt stack 25
 15224                           
 15225                           ;main.c: 2358: return readEEPROM( 0x02 );
 15226                           
 15227                           ;incstack = 0
 15228                           ;incstack = 0
 15229  003F72  6A09               	clrf	?_readEEPROM+1,c
 15230  003F74  0E02               	movlw	2
 15231  003F76  6E08               	movwf	?_readEEPROM,c
 15232  003F78  EF86  F01F         	goto	_readEEPROM	;wreg free
 15233  003F7C                     __end_of_vscp_getSegmentCRC:
 15234                           	opt stack 0
 15235                           tblptru	equ	0xFF8
 15236                           tblptrh	equ	0xFF7
 15237                           tblptrl	equ	0xFF6
 15238                           tablat	equ	0xFF5
 15239                           prodh	equ	0xFF4
 15240                           prodl	equ	0xFF3
 15241                           postinc0	equ	0xFEE
 15242                           wreg	equ	0xFE8
 15243                           indf1	equ	0xFE7
 15244                           fsr1h	equ	0xFE2
 15245                           fsr1l	equ	0xFE1
 15246                           indf2	equ	0xFDF
 15247                           postinc2	equ	0xFDE
 15248                           postdec2	equ	0xFDD
 15249                           plusw2	equ	0xFDB
 15250                           fsr2h	equ	0xFDA
 15251                           fsr2l	equ	0xFD9
 15252                           status	equ	0xFD8
 15253                           
 15254 ;; *************** function _vscp_writeNicknamePermanent *****************
 15255 ;; Defined at:
 15256 ;;		line 863 in file "../main.c"
 15257 ;; Parameters:    Size  Location     Type
 15258 ;;  nickname        1    wreg     unsigned char 
 15259 ;; Auto vars:     Size  Location     Type
 15260 ;;  nickname        1   10[COMRAM] unsigned char 
 15261 ;; Return value:  Size  Location     Type
 15262 ;;		None               void
 15263 ;; Registers used:
 15264 ;;		wreg, status,2, cstack
 15265 ;; Tracked objects:
 15266 ;;		On entry : 0/0
 15267 ;;		On exit  : 0/0
 15268 ;;		Unchanged: 0/0
 15269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15270 ;;      Params:         0       0       0       0       0       0       0
 15271 ;;      Locals:         1       0       0       0       0       0       0
 15272 ;;      Temps:          0       0       0       0       0       0       0
 15273 ;;      Totals:         1       0       0       0       0       0       0
 15274 ;;Total ram usage:        1 bytes
 15275 ;; Hardware stack levels used:    1
 15276 ;; Hardware stack levels required when called:    3
 15277 ;; This function calls:
 15278 ;;		_writeEEPROM
 15279 ;; This function is called by:
 15280 ;;		_vscp_check_pstorage
 15281 ;;		_vscp_handleProbeState
 15282 ;;		_vscp_handleHeartbeat
 15283 ;;		_vscp_handleSetNickname
 15284 ;;		_vscp_handleDropNickname
 15285 ;; This function uses a non-reentrant model
 15286 ;;
 15287                           
 15288                           	psect	text66
 15289  003EE8                     __ptext66:
 15290                           	opt stack 0
 15291  003EE8                     _vscp_writeNicknamePermanent:
 15292                           	opt stack 25
 15293                           
 15294                           ;incstack = 0
 15295                           ;incstack = 0
 15296                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 15297  003EE8  CFE8 F00B          	movff	wreg,vscp_writeNicknamePermanent@nickname
 15298                           
 15299                           ;main.c: 864: writeEEPROM( 0x01, nickname );
 15300  003EEC  6A09               	clrf	?_writeEEPROM+1,c
 15301  003EEE  0E01               	movlw	1
 15302  003EF0  6E08               	movwf	?_writeEEPROM,c
 15303  003EF2  C00B  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 15304  003EF6  EF6A  F01E         	goto	_writeEEPROM	;wreg free
 15305  003EFA                     __end_of_vscp_writeNicknamePermanent:
 15306                           	opt stack 0
 15307                           tblptru	equ	0xFF8
 15308                           tblptrh	equ	0xFF7
 15309                           tblptrl	equ	0xFF6
 15310                           tablat	equ	0xFF5
 15311                           prodh	equ	0xFF4
 15312                           prodl	equ	0xFF3
 15313                           postinc0	equ	0xFEE
 15314                           wreg	equ	0xFE8
 15315                           indf1	equ	0xFE7
 15316                           fsr1h	equ	0xFE2
 15317                           fsr1l	equ	0xFE1
 15318                           indf2	equ	0xFDF
 15319                           postinc2	equ	0xFDE
 15320                           postdec2	equ	0xFDD
 15321                           plusw2	equ	0xFDB
 15322                           fsr2h	equ	0xFDA
 15323                           fsr2l	equ	0xFD9
 15324                           status	equ	0xFD8
 15325                           
 15326 ;; *************** function _writeEEPROM *****************
 15327 ;; Defined at:
 15328 ;;		line 23 in file "../../vscp_firmware/pic/common/eeprom.c"
 15329 ;; Parameters:    Size  Location     Type
 15330 ;;  address         2    7[COMRAM] unsigned short 
 15331 ;;  data            1    9[COMRAM] unsigned char 
 15332 ;; Auto vars:     Size  Location     Type
 15333 ;;		None
 15334 ;; Return value:  Size  Location     Type
 15335 ;;		None               void
 15336 ;; Registers used:
 15337 ;;		wreg, status,2
 15338 ;; Tracked objects:
 15339 ;;		On entry : 0/0
 15340 ;;		On exit  : 0/0
 15341 ;;		Unchanged: 0/0
 15342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15343 ;;      Params:         3       0       0       0       0       0       0
 15344 ;;      Locals:         0       0       0       0       0       0       0
 15345 ;;      Temps:          0       0       0       0       0       0       0
 15346 ;;      Totals:         3       0       0       0       0       0       0
 15347 ;;Total ram usage:        3 bytes
 15348 ;; Hardware stack levels used:    1
 15349 ;; Hardware stack levels required when called:    2
 15350 ;; This function calls:
 15351 ;;		Nothing
 15352 ;; This function is called by:
 15353 ;;		_main
 15354 ;;		_init_app_eeprom
 15355 ;;		_vscp_setGUID
 15356 ;;		_vscp_setManufacturerId
 15357 ;;		_vscp_writeNicknamePermanent
 15358 ;;		_vscp_writeAppReg
 15359 ;;		_doActionDisable
 15360 ;;		_vscp_setUserID
 15361 ;;		_vscp_setSegmentCRC
 15362 ;;		_vscp_setControlByte
 15363 ;;		_vscp_goBootloaderMode
 15364 ;; This function uses a non-reentrant model
 15365 ;;
 15366                           
 15367                           	psect	text67
 15368  003CD4                     __ptext67:
 15369                           	opt stack 0
 15370  003CD4                     _writeEEPROM:
 15371                           	opt stack 26
 15372                           
 15373                           ;eeprom.c: 29: EEADR = address & 0xff;
 15374                           
 15375                           ;incstack = 0
 15376                           ;incstack = 0
 15377  003CD4  C008  FFA9         	movff	writeEEPROM@address,4009	;volatile
 15378                           
 15379                           ;eeprom.c: 30: EEDATA = data;
 15380  003CD8  C00A  FFA8         	movff	writeEEPROM@data,4008	;volatile
 15381                           
 15382                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 15383  003CDC  9EA6               	bcf	4006,7,c	;volatile
 15384                           
 15385                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 15386  003CDE  9CA6               	bcf	4006,6,c	;volatile
 15387                           
 15388                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 15389  003CE0  84A6               	bsf	4006,2,c	;volatile
 15390                           
 15391                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 15392  003CE2  9EF2               	bcf	intcon,7,c	;volatile
 15393                           
 15394                           ;eeprom.c: 37: EECON2 = 0x55;
 15395  003CE4  0E55               	movlw	85
 15396  003CE6  6EA7               	movwf	4007,c	;volatile
 15397                           
 15398                           ;eeprom.c: 38: EECON2 = 0xaa;
 15399  003CE8  0EAA               	movlw	170
 15400  003CEA  6EA7               	movwf	4007,c	;volatile
 15401                           
 15402                           ;eeprom.c: 39: EECON1bits.WR = 1;
 15403  003CEC  82A6               	bsf	4006,1,c	;volatile
 15404                           
 15405                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 15406  003CEE  8EF2               	bsf	intcon,7,c	;volatile
 15407  003CF0                     l1293:
 15408  003CF0  A8A1               	btfss	4001,4,c	;volatile
 15409  003CF2  D7FE               	goto	l1293
 15410                           
 15411                           ;eeprom.c: 47: PIR2bits.EEIF = 0;
 15412  003CF4  98A1               	bcf	4001,4,c	;volatile
 15413                           
 15414                           ;eeprom.c: 49: EECON1bits.WREN = 0;
 15415  003CF6  94A6               	bcf	4006,2,c	;volatile
 15416  003CF8  0012               	return	
 15417  003CFA                     __end_of_writeEEPROM:
 15418                           	opt stack 0
 15419                           tblptru	equ	0xFF8
 15420                           tblptrh	equ	0xFF7
 15421                           tblptrl	equ	0xFF6
 15422                           tablat	equ	0xFF5
 15423                           prodh	equ	0xFF4
 15424                           prodl	equ	0xFF3
 15425                           intcon	equ	0xFF2
 15426                           postinc0	equ	0xFEE
 15427                           wreg	equ	0xFE8
 15428                           indf1	equ	0xFE7
 15429                           fsr1h	equ	0xFE2
 15430                           fsr1l	equ	0xFE1
 15431                           indf2	equ	0xFDF
 15432                           postinc2	equ	0xFDE
 15433                           postdec2	equ	0xFDD
 15434                           plusw2	equ	0xFDB
 15435                           fsr2h	equ	0xFDA
 15436                           fsr2l	equ	0xFD9
 15437                           status	equ	0xFD8
 15438                           
 15439 ;; *************** function _init *****************
 15440 ;; Defined at:
 15441 ;;		line 324 in file "../main.c"
 15442 ;; Parameters:    Size  Location     Type
 15443 ;;		None
 15444 ;; Auto vars:     Size  Location     Type
 15445 ;;		None
 15446 ;; Return value:  Size  Location     Type
 15447 ;;		None               void
 15448 ;; Registers used:
 15449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15450 ;; Tracked objects:
 15451 ;;		On entry : 0/0
 15452 ;;		On exit  : 0/0
 15453 ;;		Unchanged: 0/0
 15454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15455 ;;      Params:         0       0       0       0       0       0       0
 15456 ;;      Locals:         0       0       0       0       0       0       0
 15457 ;;      Temps:          0       0       0       0       0       0       0
 15458 ;;      Totals:         0       0       0       0       0       0       0
 15459 ;;Total ram usage:        0 bytes
 15460 ;; Hardware stack levels used:    1
 15461 ;; Hardware stack levels required when called:    4
 15462 ;; This function calls:
 15463 ;;		_WriteTimer0
 15464 ;;		_init_app_ram
 15465 ;;		_OpenTimer0
 15466 ;;		_ECANInitialize
 15467 ;; This function is called by:
 15468 ;;		_main
 15469 ;; This function uses a non-reentrant model
 15470 ;;
 15471                           
 15472                           	psect	text68
 15473  003B72                     __ptext68:
 15474                           	opt stack 0
 15475  003B72                     _init:
 15476                           	opt stack 26
 15477                           
 15478                           ;main.c: 329: init_app_ram();
 15479                           
 15480                           ;incstack = 0
 15481                           ;incstack = 0
 15482  003B72  ECA4  F018         	call	_init_app_ram	;wreg free
 15483                           
 15484                           ;main.c: 340: TRISA = 0x00;
 15485  003B76  6A92               	clrf	3986,c	;volatile
 15486                           
 15487                           ;main.c: 341: PORTA = 0x00;
 15488  003B78  6A80               	clrf	3968,c	;volatile
 15489                           
 15490                           ;main.c: 353: TRISB = 0b00001000;
 15491  003B7A  0E08               	movlw	8
 15492  003B7C  6E93               	movwf	3987,c	;volatile
 15493                           
 15494                           ;main.c: 354: PORTB = 0x00;
 15495  003B7E  6A81               	clrf	3969,c	;volatile
 15496                           
 15497                           ;main.c: 364: TRISC = 0b00000001;
 15498  003B80  0E01               	movlw	1
 15499  003B82  6E94               	movwf	3988,c	;volatile
 15500                           
 15501                           ;main.c: 365: PORTC = 0x00;
 15502  003B84  6A82               	clrf	3970,c	;volatile
 15503                           
 15504                           ;main.c: 391: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 15505  003B86  0E92               	movlw	146
 15506  003B88  EC04  F01F         	call	_OpenTimer0
 15507                           
 15508                           ;main.c: 392: WriteTimer0( 0xfb1d );
 15509  003B8C  0EFB               	movlw	251
 15510  003B8E  6E09               	movwf	?_WriteTimer0+1,c
 15511  003B90  0E1D               	movlw	29
 15512  003B92  6E08               	movwf	?_WriteTimer0,c
 15513  003B94  EC7D  F01F         	call	_WriteTimer0	;wreg free
 15514                           
 15515                           ;main.c: 395: LATBbits.LATB4 = 0;
 15516  003B98  988A               	bcf	3978,4,c	;volatile
 15517                           
 15518                           ;main.c: 396: LATBbits.LATB1 = 0;
 15519  003B9A  928A               	bcf	3978,1,c	;volatile
 15520                           
 15521                           ;main.c: 397: LATBbits.LATB0 = 0;
 15522  003B9C  908A               	bcf	3978,0,c	;volatile
 15523                           
 15524                           ;main.c: 398: LATCbits.LATC7 = 0;
 15525  003B9E  9E8B               	bcf	3979,7,c	;volatile
 15526                           
 15527                           ;main.c: 399: LATCbits.LATC6 = 0;
 15528  003BA0  9C8B               	bcf	3979,6,c	;volatile
 15529                           
 15530                           ;main.c: 400: LATCbits.LATC5 = 0;
 15531  003BA2  9A8B               	bcf	3979,5,c	;volatile
 15532                           
 15533                           ;main.c: 401: LATCbits.LATC4 = 0;
 15534  003BA4  988B               	bcf	3979,4,c	;volatile
 15535                           
 15536                           ;main.c: 404: ECANInitialize();
 15537  003BA6  EC03  F01C         	call	_ECANInitialize	;wreg free
 15538                           
 15539                           ;main.c: 425: INTCONbits.PEIE = 1;
 15540  003BAA  8CF2               	bsf	intcon,6,c	;volatile
 15541                           
 15542                           ;main.c: 428: INTCONbits.GIE = 1;
 15543  003BAC  8EF2               	bsf	intcon,7,c	;volatile
 15544  003BAE  0012               	return	
 15545  003BB0                     __end_of_init:
 15546                           	opt stack 0
 15547                           tblptru	equ	0xFF8
 15548                           tblptrh	equ	0xFF7
 15549                           tblptrl	equ	0xFF6
 15550                           tablat	equ	0xFF5
 15551                           prodh	equ	0xFF4
 15552                           prodl	equ	0xFF3
 15553                           intcon	equ	0xFF2
 15554                           postinc0	equ	0xFEE
 15555                           wreg	equ	0xFE8
 15556                           indf1	equ	0xFE7
 15557                           fsr1h	equ	0xFE2
 15558                           fsr1l	equ	0xFE1
 15559                           indf2	equ	0xFDF
 15560                           postinc2	equ	0xFDE
 15561                           postdec2	equ	0xFDD
 15562                           plusw2	equ	0xFDB
 15563                           fsr2h	equ	0xFDA
 15564                           fsr2l	equ	0xFD9
 15565                           status	equ	0xFD8
 15566                           
 15567 ;; *************** function _ECANInitialize *****************
 15568 ;; Defined at:
 15569 ;;		line 168 in file "../ECAN.c"
 15570 ;; Parameters:    Size  Location     Type
 15571 ;;		None
 15572 ;; Auto vars:     Size  Location     Type
 15573 ;;		None
 15574 ;; Return value:  Size  Location     Type
 15575 ;;		None               void
 15576 ;; Registers used:
 15577 ;;		wreg, status,2, status,0, cstack
 15578 ;; Tracked objects:
 15579 ;;		On entry : 0/0
 15580 ;;		On exit  : 0/0
 15581 ;;		Unchanged: 0/0
 15582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15583 ;;      Params:         0       0       0       0       0       0       0
 15584 ;;      Locals:         0       0       0       0       0       0       0
 15585 ;;      Temps:          0       0       0       0       0       0       0
 15586 ;;      Totals:         0       0       0       0       0       0       0
 15587 ;;Total ram usage:        0 bytes
 15588 ;; Hardware stack levels used:    1
 15589 ;; Hardware stack levels required when called:    3
 15590 ;; This function calls:
 15591 ;;		_ECANSetOperationMode
 15592 ;; This function is called by:
 15593 ;;		_init
 15594 ;; This function uses a non-reentrant model
 15595 ;;
 15596                           
 15597                           	psect	text69
 15598  003806                     __ptext69:
 15599                           	opt stack 0
 15600  003806                     _ECANInitialize:
 15601                           	opt stack 26
 15602                           
 15603                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 15604                           
 15605                           ;incstack = 0
 15606                           ;incstack = 0
 15607  003806  0E80               	movlw	128
 15608  003808  EC38  F01F         	call	_ECANSetOperationMode
 15609                           
 15610                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 15611  00380C  0E09               	movlw	9
 15612  00380E  6E70               	movwf	3952,c	;volatile
 15613                           
 15614                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 15615  003810  0EFC               	movlw	252
 15616  003812  6E71               	movwf	3953,c	;volatile
 15617                           
 15618                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 15619                           ;ECAN.c: 181: (0 << 6) |
 15620                           ;ECAN.c: 182: (2-1);
 15621  003814  0E01               	movlw	1
 15622  003816  6E72               	movwf	3954,c	;volatile
 15623                           
 15624                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 15625  003818  0E20               	movlw	32
 15626  00381A  6E73               	movwf	3955,c	;volatile
 15627                           
 15628                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 15629  00381C  8E77               	bsf	3959,7,c	;volatile
 15630                           
 15631                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 15632  00381E  9C77               	bcf	3959,6,c	;volatile
 15633                           
 15634                           ;ECAN.c: 205: RXB0CON = 0;
 15635  003820  6A60               	clrf	3936,c	;volatile
 15636                           
 15637                           ;ECAN.c: 211: RXB1CON = 0;
 15638  003822  010F               	movlb	15	; () banked
 15639  003824  6B50               	clrf	80,b	;volatile
 15640                           
 15641                           ; BSR set to: 15
 15642                           ;ECAN.c: 221: B0CON = 0;
 15643  003826  010E               	movlb	14	; () banked
 15644  003828  6B20               	clrf	32,b	;volatile
 15645                           
 15646                           ; BSR set to: 14
 15647                           ;ECAN.c: 231: B1CON = 0;
 15648  00382A  6B30               	clrf	48,b	;volatile
 15649                           
 15650                           ; BSR set to: 14
 15651                           ;ECAN.c: 241: B2CON = 0;
 15652  00382C  6B40               	clrf	64,b	;volatile
 15653                           
 15654                           ; BSR set to: 14
 15655                           ;ECAN.c: 254: B3CON = 0 << 2;
 15656  00382E  6B50               	clrf	80,b	;volatile
 15657                           
 15658                           ; BSR set to: 14
 15659                           ;ECAN.c: 264: B4CON = 0 << 2;
 15660  003830  6B60               	clrf	96,b	;volatile
 15661                           
 15662                           ; BSR set to: 14
 15663                           ;ECAN.c: 274: B5CON = 0 << 2;
 15664  003832  6B70               	clrf	112,b	;volatile
 15665                           
 15666                           ; BSR set to: 14
 15667                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 15668  003834  0EE0               	movlw	224
 15669  003836  010D               	movlb	13	; () banked
 15670  003838  6FF8               	movwf	248,b	;volatile
 15671                           
 15672                           ; BSR set to: 13
 15673                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 15674  00383A  010F               	movlb	15	; () banked
 15675  00383C  6B00               	clrf	0,b	;volatile
 15676                           
 15677                           ; BSR set to: 15
 15678  00383E  0E08               	movlw	8
 15679  003840  6F01               	movwf	1,b	;volatile
 15680                           
 15681                           ; BSR set to: 15
 15682  003842  6B02               	clrf	2,b	;volatile
 15683                           
 15684                           ; BSR set to: 15
 15685  003844  6B03               	clrf	3,b	;volatile
 15686                           
 15687                           ; BSR set to: 15
 15688                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 15689  003846  6B04               	clrf	4,b	;volatile
 15690                           
 15691                           ; BSR set to: 15
 15692  003848  0EE8               	movlw	232
 15693  00384A  6F05               	movwf	5,b	;volatile
 15694                           
 15695                           ; BSR set to: 15
 15696  00384C  0E1A               	movlw	26
 15697  00384E  6F06               	movwf	6,b	;volatile
 15698                           
 15699                           ; BSR set to: 15
 15700  003850  6B07               	clrf	7,b	;volatile
 15701                           
 15702                           ; BSR set to: 15
 15703                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 15704  003852  0E03               	movlw	3
 15705  003854  010D               	movlb	13	; () banked
 15706  003856  6FD4               	movwf	212,b	;volatile
 15707                           
 15708                           ; BSR set to: 13
 15709                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 15710  003858  6BD5               	clrf	213,b	;volatile
 15711                           
 15712                           ; BSR set to: 13
 15713                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 15714  00385A  6BE0               	clrf	224,b	;volatile
 15715                           
 15716                           ; BSR set to: 13
 15717                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 15718  00385C  0E11               	movlw	17
 15719  00385E  6FE1               	movwf	225,b	;volatile
 15720                           
 15721                           ; BSR set to: 13
 15722                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 15723  003860  6FE2               	movwf	226,b	;volatile
 15724                           
 15725                           ; BSR set to: 13
 15726                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 15727  003862  6BE3               	clrf	227,b	;volatile
 15728                           
 15729                           ; BSR set to: 13
 15730                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 15731  003864  6BE4               	clrf	228,b	;volatile
 15732                           
 15733                           ; BSR set to: 13
 15734                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 15735  003866  6BE5               	clrf	229,b	;volatile
 15736                           
 15737                           ; BSR set to: 13
 15738                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 15739  003868  6BE6               	clrf	230,b	;volatile
 15740                           
 15741                           ; BSR set to: 13
 15742                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 15743  00386A  6BE7               	clrf	231,b	;volatile
 15744                           
 15745                           ; BSR set to: 13
 15746                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 15747  00386C  0E54               	movlw	84
 15748  00386E  6FF0               	movwf	240,b	;volatile
 15749                           
 15750                           ; BSR set to: 13
 15751                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 15752  003870  0E05               	movlw	5
 15753  003872  6FF1               	movwf	241,b	;volatile
 15754                           
 15755                           ; BSR set to: 13
 15756                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15757  003874  6BF2               	clrf	242,b	;volatile
 15758                           
 15759                           ; BSR set to: 13
 15760                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15761  003876  6BF2               	clrf	242,b	;volatile
 15762                           
 15763                           ; BSR set to: 13
 15764                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 15765  003878  0E0F               	movlw	15
 15766  00387A  010F               	movlb	15	; () banked
 15767  00387C  6F18               	movwf	24,b	;volatile
 15768                           
 15769                           ; BSR set to: 15
 15770  00387E  0EE0               	movlw	224
 15771  003880  6F19               	movwf	25,b	;volatile
 15772                           
 15773                           ; BSR set to: 15
 15774  003882  6B1A               	clrf	26,b	;volatile
 15775                           
 15776                           ; BSR set to: 15
 15777  003884  6B1B               	clrf	27,b	;volatile
 15778                           
 15779                           ; BSR set to: 15
 15780                           ;ECAN.c: 482: RXM0EXIDM = 1;
 15781  003886  8719               	bsf	25,3,b	;volatile
 15782                           
 15783                           ; BSR set to: 15
 15784                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 15785  003888  0E0F               	movlw	15
 15786  00388A  6F1C               	movwf	28,b	;volatile
 15787                           
 15788                           ; BSR set to: 15
 15789  00388C  0EE0               	movlw	224
 15790  00388E  6F1D               	movwf	29,b	;volatile
 15791                           
 15792                           ; BSR set to: 15
 15793  003890  691E               	setf	30,b	;volatile
 15794                           
 15795                           ; BSR set to: 15
 15796  003892  6B1F               	clrf	31,b	;volatile
 15797                           
 15798                           ; BSR set to: 15
 15799                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 15800  003894  871D               	bsf	29,3,b	;volatile
 15801                           
 15802                           ; BSR set to: 15
 15803                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 15804  003896  0E00               	movlw	0
 15805  003898  EF38  F01F         	goto	_ECANSetOperationMode
 15806  00389C                     __end_of_ECANInitialize:
 15807                           	opt stack 0
 15808                           tblptru	equ	0xFF8
 15809                           tblptrh	equ	0xFF7
 15810                           tblptrl	equ	0xFF6
 15811                           tablat	equ	0xFF5
 15812                           prodh	equ	0xFF4
 15813                           prodl	equ	0xFF3
 15814                           intcon	equ	0xFF2
 15815                           postinc0	equ	0xFEE
 15816                           wreg	equ	0xFE8
 15817                           indf1	equ	0xFE7
 15818                           fsr1h	equ	0xFE2
 15819                           fsr1l	equ	0xFE1
 15820                           indf2	equ	0xFDF
 15821                           postinc2	equ	0xFDE
 15822                           postdec2	equ	0xFDD
 15823                           plusw2	equ	0xFDB
 15824                           fsr2h	equ	0xFDA
 15825                           fsr2l	equ	0xFD9
 15826                           status	equ	0xFD8
 15827                           
 15828 ;; *************** function _ECANSetOperationMode *****************
 15829 ;; Defined at:
 15830 ;;		line 1012 in file "../ECAN.c"
 15831 ;; Parameters:    Size  Location     Type
 15832 ;;  mode            1    wreg     enum E16337
 15833 ;; Auto vars:     Size  Location     Type
 15834 ;;  mode            1    7[COMRAM] enum E16337
 15835 ;; Return value:  Size  Location     Type
 15836 ;;		None               void
 15837 ;; Registers used:
 15838 ;;		wreg, status,2, status,0
 15839 ;; Tracked objects:
 15840 ;;		On entry : 0/0
 15841 ;;		On exit  : 0/0
 15842 ;;		Unchanged: 0/0
 15843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15844 ;;      Params:         0       0       0       0       0       0       0
 15845 ;;      Locals:         1       0       0       0       0       0       0
 15846 ;;      Temps:          0       0       0       0       0       0       0
 15847 ;;      Totals:         1       0       0       0       0       0       0
 15848 ;;Total ram usage:        1 bytes
 15849 ;; Hardware stack levels used:    1
 15850 ;; Hardware stack levels required when called:    2
 15851 ;; This function calls:
 15852 ;;		Nothing
 15853 ;; This function is called by:
 15854 ;;		_calculateSetFilterMask
 15855 ;;		_ECANInitialize
 15856 ;; This function uses a non-reentrant model
 15857 ;;
 15858                           
 15859                           	psect	text70
 15860  003E70                     __ptext70:
 15861                           	opt stack 0
 15862  003E70                     _ECANSetOperationMode:
 15863                           	opt stack 24
 15864                           
 15865                           ;incstack = 0
 15866                           ;incstack = 0
 15867                           ;ECANSetOperationMode@mode stored from wreg
 15868  003E70  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 15869                           
 15870                           ;ECAN.c: 1013: CANCON &= 0x1F;
 15871  003E74  0E1F               	movlw	31
 15872  003E76  166F               	andwf	3951,f,c	;volatile
 15873                           
 15874                           ;ECAN.c: 1014: CANCON |= mode;
 15875  003E78  5008               	movf	ECANSetOperationMode@mode,w,c
 15876  003E7A  126F               	iorwf	3951,f,c	;volatile
 15877  003E7C                     l6731:
 15878  003E7C  506F               	movf	3951,w,c	;volatile
 15879  003E7E  0BE0               	andlw	224
 15880  003E80  1808               	xorwf	ECANSetOperationMode@mode,w,c
 15881  003E82  B4D8               	btfsc	status,2,c
 15882  003E84  0012               	return	
 15883  003E86  D7FA               	goto	l6731
 15884  003E88                     __end_of_ECANSetOperationMode:
 15885                           	opt stack 0
 15886                           tblptru	equ	0xFF8
 15887                           tblptrh	equ	0xFF7
 15888                           tblptrl	equ	0xFF6
 15889                           tablat	equ	0xFF5
 15890                           prodh	equ	0xFF4
 15891                           prodl	equ	0xFF3
 15892                           intcon	equ	0xFF2
 15893                           postinc0	equ	0xFEE
 15894                           wreg	equ	0xFE8
 15895                           indf1	equ	0xFE7
 15896                           fsr1h	equ	0xFE2
 15897                           fsr1l	equ	0xFE1
 15898                           indf2	equ	0xFDF
 15899                           postinc2	equ	0xFDE
 15900                           postdec2	equ	0xFDD
 15901                           plusw2	equ	0xFDB
 15902                           fsr2h	equ	0xFDA
 15903                           fsr2l	equ	0xFD9
 15904                           status	equ	0xFD8
 15905                           
 15906 ;; *************** function _OpenTimer0 *****************
 15907 ;; Defined at:
 15908 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 15909 ;; Parameters:    Size  Location     Type
 15910 ;;  config          1    wreg     unsigned char 
 15911 ;; Auto vars:     Size  Location     Type
 15912 ;;  config          1    7[COMRAM] unsigned char 
 15913 ;; Return value:  Size  Location     Type
 15914 ;;		None               void
 15915 ;; Registers used:
 15916 ;;		wreg, status,2, status,0
 15917 ;; Tracked objects:
 15918 ;;		On entry : 0/0
 15919 ;;		On exit  : 0/0
 15920 ;;		Unchanged: 0/0
 15921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15922 ;;      Params:         0       0       0       0       0       0       0
 15923 ;;      Locals:         1       0       0       0       0       0       0
 15924 ;;      Temps:          0       0       0       0       0       0       0
 15925 ;;      Totals:         1       0       0       0       0       0       0
 15926 ;;Total ram usage:        1 bytes
 15927 ;; Hardware stack levels used:    1
 15928 ;; Hardware stack levels required when called:    2
 15929 ;; This function calls:
 15930 ;;		Nothing
 15931 ;; This function is called by:
 15932 ;;		_init
 15933 ;; This function uses a non-reentrant model
 15934 ;;
 15935                           
 15936                           	psect	text71
 15937  003E08                     __ptext71:
 15938                           	opt stack 0
 15939  003E08                     _OpenTimer0:
 15940                           	opt stack 27
 15941                           
 15942                           ;incstack = 0
 15943                           ;incstack = 0
 15944                           ;OpenTimer0@config stored from wreg
 15945  003E08  CFE8 F008          	movff	wreg,OpenTimer0@config
 15946  003E0C  5008               	movf	OpenTimer0@config,w,c
 15947  003E0E  0B7F               	andlw	127
 15948  003E10  6ED5               	movwf	4053,c	;volatile
 15949  003E12  6AD7               	clrf	4055,c	;volatile
 15950  003E14  6AD6               	clrf	4054,c	;volatile
 15951  003E16  94F2               	bcf	intcon,2,c	;volatile
 15952  003E18  AE08               	btfss	OpenTimer0@config,7,c
 15953  003E1A  D002               	goto	l1312
 15954  003E1C  8AF2               	bsf	intcon,5,c	;volatile
 15955  003E1E  D001               	goto	l1313
 15956  003E20                     l1312:
 15957  003E20  9AF2               	bcf	intcon,5,c	;volatile
 15958  003E22                     l1313:
 15959  003E22  8ED5               	bsf	4053,7,c	;volatile
 15960  003E24  0012               	return	
 15961  003E26                     __end_of_OpenTimer0:
 15962                           	opt stack 0
 15963                           tblptru	equ	0xFF8
 15964                           tblptrh	equ	0xFF7
 15965                           tblptrl	equ	0xFF6
 15966                           tablat	equ	0xFF5
 15967                           prodh	equ	0xFF4
 15968                           prodl	equ	0xFF3
 15969                           intcon	equ	0xFF2
 15970                           postinc0	equ	0xFEE
 15971                           wreg	equ	0xFE8
 15972                           indf1	equ	0xFE7
 15973                           fsr1h	equ	0xFE2
 15974                           fsr1l	equ	0xFE1
 15975                           indf2	equ	0xFDF
 15976                           postinc2	equ	0xFDE
 15977                           postdec2	equ	0xFDD
 15978                           plusw2	equ	0xFDB
 15979                           fsr2h	equ	0xFDA
 15980                           fsr2l	equ	0xFD9
 15981                           status	equ	0xFD8
 15982                           
 15983 ;; *************** function _init_app_ram *****************
 15984 ;; Defined at:
 15985 ;;		line 438 in file "../main.c"
 15986 ;; Parameters:    Size  Location     Type
 15987 ;;		None
 15988 ;; Auto vars:     Size  Location     Type
 15989 ;;  i               1   12[COMRAM] unsigned char 
 15990 ;; Return value:  Size  Location     Type
 15991 ;;		None               void
 15992 ;; Registers used:
 15993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15994 ;; Tracked objects:
 15995 ;;		On entry : 0/0
 15996 ;;		On exit  : 0/0
 15997 ;;		Unchanged: 0/0
 15998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15999 ;;      Params:         0       0       0       0       0       0       0
 16000 ;;      Locals:         1       0       0       0       0       0       0
 16001 ;;      Temps:          2       0       0       0       0       0       0
 16002 ;;      Totals:         3       0       0       0       0       0       0
 16003 ;;Total ram usage:        3 bytes
 16004 ;; Hardware stack levels used:    1
 16005 ;; Hardware stack levels required when called:    3
 16006 ;; This function calls:
 16007 ;;		_readEEPROM
 16008 ;; This function is called by:
 16009 ;;		_main
 16010 ;;		_init
 16011 ;;		_vscp_restoreDefaults
 16012 ;; This function uses a non-reentrant model
 16013 ;;
 16014                           
 16015                           	psect	text72
 16016  003148                     __ptext72:
 16017                           	opt stack 0
 16018  003148                     _init_app_ram:
 16019                           	opt stack 24
 16020                           
 16021                           ;main.c: 439: uint8_t i;
 16022                           ;main.c: 441: measurement_clock = 0;
 16023                           
 16024                           ;incstack = 0
 16025                           ;incstack = 0
 16026  003148  0100               	movlb	0	; () banked
 16027  00314A  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
 16028  00314C  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 16029  00314E  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 16030  003150  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 16031                           
 16032                           ;main.c: 443: seconds = 0;
 16033  003152  6B8B               	clrf	_seconds& (0+255),b
 16034                           
 16035                           ;main.c: 444: minutes = 0;
 16036  003154  6B89               	clrf	_minutes& (0+255),b
 16037                           
 16038                           ;main.c: 445: hours = 0;
 16039  003156  6B88               	clrf	_hours& (0+255),b
 16040                           
 16041                           ;main.c: 447: relay_pulse_flags = 0;
 16042  003158  6B8A               	clrf	_relay_pulse_flags& (0+255),b
 16043                           
 16044                           ;main.c: 450: for ( i = 0; i < 8; i++ ) {
 16045  00315A  6A0D               	clrf	init_app_ram@i,c
 16046  00315C                     l7259:
 16047                           
 16048                           ; BSR set to: 0
 16049                           ;main.c: 451: relay_pulse_timer[ i ] = 0;
 16050  00315C  500D               	movf	init_app_ram@i,w,c
 16051  00315E  0D02               	mullw	2
 16052  003160  50F3               	movf	prodl,w,c
 16053  003162  0F70               	addlw	low _relay_pulse_timer
 16054  003164  6ED9               	movwf	fsr2l,c
 16055  003166  6ADA               	clrf	fsr2h,c
 16056  003168  6ADE               	clrf	postinc2,c
 16057  00316A  6ADD               	clrf	postdec2,c
 16058                           
 16059                           ;main.c: 452: relay_protection_timer[ i ] = 0;
 16060  00316C  500D               	movf	init_app_ram@i,w,c
 16061  00316E  0D02               	mullw	2
 16062  003170  50F3               	movf	prodl,w,c
 16063  003172  0F60               	addlw	low _relay_protection_timer
 16064  003174  6ED9               	movwf	fsr2l,c
 16065  003176  6ADA               	clrf	fsr2h,c
 16066  003178  6ADE               	clrf	postinc2,c
 16067  00317A  6ADD               	clrf	postdec2,c
 16068                           
 16069                           ; BSR set to: 0
 16070  00317C  2A0D               	incf	init_app_ram@i,f,c
 16071                           
 16072                           ; BSR set to: 0
 16073  00317E  0E07               	movlw	7
 16074  003180  640D               	cpfsgt	init_app_ram@i,c
 16075  003182  D7EC               	goto	l7259
 16076                           
 16077                           ; BSR set to: 0
 16078                           ;main.c: 453: }
 16079                           ;main.c: 455: for ( i=0; i<7; i++ ) {
 16080  003184  6A0D               	clrf	init_app_ram@i,c
 16081  003186                     l7269:
 16082                           
 16083                           ;main.c: 458: if ( readEEPROM( 0x43 + 10 + i ) &
 16084                           ;main.c: 459: 0x01 ) {
 16085  003186  0E4D               	movlw	77
 16086  003188  240D               	addwf	init_app_ram@i,w,c
 16087  00318A  6E08               	movwf	?_readEEPROM,c
 16088  00318C  6A09               	clrf	?_readEEPROM+1,c
 16089  00318E  0E00               	movlw	0
 16090  003190  2209               	addwfc	?_readEEPROM+1,f,c
 16091  003192  EC86  F01F         	call	_readEEPROM	;wreg free
 16092  003196  6E0B               	movwf	??_init_app_ram& (0+255),c
 16093  003198  A00B               	btfss	??_init_app_ram,0,c
 16094  00319A  D02D               	goto	l7275
 16095                           
 16096                           ;main.c: 461: relay_pulse_flags |= (1<<i);
 16097  00319C  C00D  F00B         	movff	init_app_ram@i,??_init_app_ram
 16098  0031A0  0E01               	movlw	1
 16099  0031A2  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16100  0031A4  2A0B               	incf	??_init_app_ram,f,c
 16101  0031A6  D002               	goto	u8034
 16102  0031A8                     u8035:
 16103  0031A8  90D8               	bcf	status,0,c
 16104  0031AA  360C               	rlcf	??_init_app_ram+1,f,c
 16105  0031AC                     u8034:
 16106  0031AC  2E0B               	decfsz	??_init_app_ram,f,c
 16107  0031AE  D7FC               	goto	u8035
 16108  0031B0  500C               	movf	??_init_app_ram+1,w,c
 16109  0031B2  0100               	movlb	0	; () banked
 16110  0031B4  138A               	iorwf	_relay_pulse_flags& (0+255),f,b
 16111                           
 16112                           ; BSR set to: 0
 16113                           ;main.c: 462: relay_pulse_timer[ i ] =
 16114                           ;main.c: 463: readEEPROM( 0x43 + 18 + i ) * 256 +
 16115                           ;main.c: 464: readEEPROM( 0x43 + 19 + i );
 16116  0031B6  0E55               	movlw	85
 16117  0031B8  240D               	addwf	init_app_ram@i,w,c
 16118  0031BA  6E08               	movwf	?_readEEPROM,c
 16119  0031BC  6A09               	clrf	?_readEEPROM+1,c
 16120  0031BE  0E00               	movlw	0
 16121  0031C0  2209               	addwfc	?_readEEPROM+1,f,c
 16122  0031C2  EC86  F01F         	call	_readEEPROM	;wreg free
 16123  0031C6  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16124  0031C8  6A0B               	clrf	??_init_app_ram& (0+255),c
 16125  0031CA  0E56               	movlw	86
 16126  0031CC  240D               	addwf	init_app_ram@i,w,c
 16127  0031CE  6E08               	movwf	?_readEEPROM,c
 16128  0031D0  6A09               	clrf	?_readEEPROM+1,c
 16129  0031D2  0E00               	movlw	0
 16130  0031D4  2209               	addwfc	?_readEEPROM+1,f,c
 16131  0031D6  EC86  F01F         	call	_readEEPROM	;wreg free
 16132  0031DA  260B               	addwf	??_init_app_ram,f,c
 16133  0031DC  0E00               	movlw	0
 16134  0031DE  220C               	addwfc	??_init_app_ram+1,f,c
 16135  0031E0  500D               	movf	init_app_ram@i,w,c
 16136  0031E2  0D02               	mullw	2
 16137  0031E4  50F3               	movf	prodl,w,c
 16138  0031E6  0100               	movlb	0	; () banked
 16139  0031E8  0F70               	addlw	low _relay_pulse_timer
 16140  0031EA  6ED9               	movwf	fsr2l,c
 16141  0031EC  6ADA               	clrf	fsr2h,c
 16142  0031EE  C00B  FFDE         	movff	??_init_app_ram,postinc2
 16143  0031F2  C00C  FFDD         	movff	??_init_app_ram+1,postdec2
 16144  0031F6                     l7275:
 16145                           
 16146                           ;main.c: 465: }
 16147                           ;main.c: 468: if ( readEEPROM(0x43 + 15 + i ) & 0x04) {
 16148  0031F6  0E52               	movlw	82
 16149  0031F8  240D               	addwf	init_app_ram@i,w,c
 16150  0031FA  6E08               	movwf	?_readEEPROM,c
 16151  0031FC  6A09               	clrf	?_readEEPROM+1,c
 16152  0031FE  0E00               	movlw	0
 16153  003200  2209               	addwfc	?_readEEPROM+1,f,c
 16154  003202  EC86  F01F         	call	_readEEPROM	;wreg free
 16155  003206  6E0B               	movwf	??_init_app_ram& (0+255),c
 16156  003208  A40B               	btfss	??_init_app_ram,2,c
 16157  00320A  D020               	goto	l7279
 16158                           
 16159                           ;main.c: 469: relay_protection_timer[ i ] =
 16160                           ;main.c: 470: readEEPROM(0x43 + 44 + i ) * 256 +
 16161                           ;main.c: 471: readEEPROM(0x43 + 45 + i );
 16162  00320C  0E6F               	movlw	111
 16163  00320E  240D               	addwf	init_app_ram@i,w,c
 16164  003210  6E08               	movwf	?_readEEPROM,c
 16165  003212  6A09               	clrf	?_readEEPROM+1,c
 16166  003214  0E00               	movlw	0
 16167  003216  2209               	addwfc	?_readEEPROM+1,f,c
 16168  003218  EC86  F01F         	call	_readEEPROM	;wreg free
 16169  00321C  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16170  00321E  6A0B               	clrf	??_init_app_ram& (0+255),c
 16171  003220  0E70               	movlw	112
 16172  003222  240D               	addwf	init_app_ram@i,w,c
 16173  003224  6E08               	movwf	?_readEEPROM,c
 16174  003226  6A09               	clrf	?_readEEPROM+1,c
 16175  003228  0E00               	movlw	0
 16176  00322A  2209               	addwfc	?_readEEPROM+1,f,c
 16177  00322C  EC86  F01F         	call	_readEEPROM	;wreg free
 16178  003230  260B               	addwf	??_init_app_ram,f,c
 16179  003232  0E00               	movlw	0
 16180  003234  220C               	addwfc	??_init_app_ram+1,f,c
 16181  003236  500D               	movf	init_app_ram@i,w,c
 16182  003238  0D02               	mullw	2
 16183  00323A  50F3               	movf	prodl,w,c
 16184  00323C  0100               	movlb	0	; () banked
 16185  00323E  0F60               	addlw	low _relay_protection_timer
 16186  003240  6ED9               	movwf	fsr2l,c
 16187  003242  6ADA               	clrf	fsr2h,c
 16188  003244  C00B  FFDE         	movff	??_init_app_ram,postinc2
 16189  003248  C00C  FFDD         	movff	??_init_app_ram+1,postdec2
 16190  00324C                     l7279:
 16191  00324C  2A0D               	incf	init_app_ram@i,f,c
 16192  00324E  0E06               	movlw	6
 16193  003250  640D               	cpfsgt	init_app_ram@i,c
 16194  003252  D799               	goto	l7269
 16195  003254  0C06               	retlw	6
 16196  003256                     __end_of_init_app_ram:
 16197                           	opt stack 0
 16198                           tblptru	equ	0xFF8
 16199                           tblptrh	equ	0xFF7
 16200                           tblptrl	equ	0xFF6
 16201                           tablat	equ	0xFF5
 16202                           prodh	equ	0xFF4
 16203                           prodl	equ	0xFF3
 16204                           intcon	equ	0xFF2
 16205                           postinc0	equ	0xFEE
 16206                           wreg	equ	0xFE8
 16207                           indf1	equ	0xFE7
 16208                           fsr1h	equ	0xFE2
 16209                           fsr1l	equ	0xFE1
 16210                           indf2	equ	0xFDF
 16211                           postinc2	equ	0xFDE
 16212                           postdec2	equ	0xFDD
 16213                           plusw2	equ	0xFDB
 16214                           fsr2h	equ	0xFDA
 16215                           fsr2l	equ	0xFD9
 16216                           status	equ	0xFD8
 16217                           
 16218 ;; *************** function _WriteTimer0 *****************
 16219 ;; Defined at:
 16220 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16221 ;; Parameters:    Size  Location     Type
 16222 ;;  timer0          2    7[COMRAM] unsigned int 
 16223 ;; Auto vars:     Size  Location     Type
 16224 ;;  timer           2    9[COMRAM] struct Timers
 16225 ;; Return value:  Size  Location     Type
 16226 ;;		None               void
 16227 ;; Registers used:
 16228 ;;		None
 16229 ;; Tracked objects:
 16230 ;;		On entry : 0/0
 16231 ;;		On exit  : 0/0
 16232 ;;		Unchanged: 0/0
 16233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16234 ;;      Params:         2       0       0       0       0       0       0
 16235 ;;      Locals:         2       0       0       0       0       0       0
 16236 ;;      Temps:          0       0       0       0       0       0       0
 16237 ;;      Totals:         4       0       0       0       0       0       0
 16238 ;;Total ram usage:        4 bytes
 16239 ;; Hardware stack levels used:    1
 16240 ;; Hardware stack levels required when called:    2
 16241 ;; This function calls:
 16242 ;;		Nothing
 16243 ;; This function is called by:
 16244 ;;		_init
 16245 ;; This function uses a non-reentrant model
 16246 ;;
 16247                           
 16248                           	psect	text73
 16249  003EFA                     __ptext73:
 16250                           	opt stack 0
 16251  003EFA                     _WriteTimer0:
 16252                           	opt stack 27
 16253                           
 16254                           ;incstack = 0
 16255                           ;incstack = 0
 16256  003EFA  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 16257  003EFE  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 16258  003F02  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 16259  003F06  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 16260  003F0A  0012               	return	
 16261  003F0C                     __end_of_WriteTimer0:
 16262                           	opt stack 0
 16263                           tblptru	equ	0xFF8
 16264                           tblptrh	equ	0xFF7
 16265                           tblptrl	equ	0xFF6
 16266                           tablat	equ	0xFF5
 16267                           prodh	equ	0xFF4
 16268                           prodl	equ	0xFF3
 16269                           intcon	equ	0xFF2
 16270                           postinc0	equ	0xFEE
 16271                           wreg	equ	0xFE8
 16272                           indf1	equ	0xFE7
 16273                           fsr1h	equ	0xFE2
 16274                           fsr1l	equ	0xFE1
 16275                           indf2	equ	0xFDF
 16276                           postinc2	equ	0xFDE
 16277                           postdec2	equ	0xFDD
 16278                           plusw2	equ	0xFDB
 16279                           fsr2h	equ	0xFDA
 16280                           fsr2l	equ	0xFD9
 16281                           status	equ	0xFD8
 16282                           
 16283 ;; *************** function _vscp_readAppReg *****************
 16284 ;; Defined at:
 16285 ;;		line 903 in file "../main.c"
 16286 ;; Parameters:    Size  Location     Type
 16287 ;;  reg             1    wreg     unsigned char 
 16288 ;; Auto vars:     Size  Location     Type
 16289 ;;  reg             1   11[COMRAM] unsigned char 
 16290 ;;  rv              1   10[COMRAM] unsigned char 
 16291 ;; Return value:  Size  Location     Type
 16292 ;;                  1    wreg      unsigned char 
 16293 ;; Registers used:
 16294 ;;		wreg, status,2, status,0, cstack
 16295 ;; Tracked objects:
 16296 ;;		On entry : F/0
 16297 ;;		On exit  : 0/0
 16298 ;;		Unchanged: 0/0
 16299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16300 ;;      Params:         0       0       0       0       0       0       0
 16301 ;;      Locals:         2       0       0       0       0       0       0
 16302 ;;      Temps:          0       0       0       0       0       0       0
 16303 ;;      Totals:         2       0       0       0       0       0       0
 16304 ;;Total ram usage:        2 bytes
 16305 ;; Hardware stack levels used:    1
 16306 ;; Hardware stack levels required when called:    3
 16307 ;; This function calls:
 16308 ;;		_readEEPROM
 16309 ;; This function is called by:
 16310 ;;		_vscp_readRegister
 16311 ;;		_vscp_handleProtocolEvent
 16312 ;; This function uses a non-reentrant model
 16313 ;;
 16314                           
 16315                           	psect	text74
 16316  003750                     __ptext74:
 16317                           	opt stack 0
 16318  003750                     _vscp_readAppReg:
 16319                           	opt stack 25
 16320                           
 16321                           ;incstack = 0
 16322                           ;incstack = 0
 16323                           ;vscp_readAppReg@reg stored from wreg
 16324  003750  CFE8 F00C          	movff	wreg,vscp_readAppReg@reg
 16325                           
 16326                           ; BSR set to: 0
 16327                           ;main.c: 904: uint8_t rv;
 16328                           ;main.c: 906: rv = 0x00;
 16329  003754  6A0B               	clrf	vscp_readAppReg@rv,c
 16330                           
 16331                           ; BSR set to: 0
 16332                           ;main.c: 909: if ( reg == 0x00 ) {
 16333  003756  660C               	tstfsz	vscp_readAppReg@reg,c
 16334  003758  D006               	goto	l8063
 16335                           
 16336                           ; BSR set to: 0
 16337                           ;main.c: 910: rv = readEEPROM(0x43 + 0);
 16338  00375A  6A09               	clrf	?_readEEPROM+1,c
 16339  00375C  0E43               	movlw	67
 16340  00375E  6E08               	movwf	?_readEEPROM,c
 16341  003760  EC86  F01F         	call	_readEEPROM	;wreg free
 16342  003764  D04D               	goto	L50
 16343  003766                     l8063:
 16344                           
 16345                           ; BSR set to: 0
 16346                           ;main.c: 913: else if ( reg == 0x01 ) {
 16347  003766  040C               	decf	vscp_readAppReg@reg,w,c
 16348  003768  E106               	bnz	l8067
 16349                           
 16350                           ; BSR set to: 0
 16351                           ;main.c: 914: rv = readEEPROM(0x43 + 1);
 16352  00376A  6A09               	clrf	?_readEEPROM+1,c
 16353  00376C  0E44               	movlw	68
 16354  00376E  6E08               	movwf	?_readEEPROM,c
 16355  003770  EC86  F01F         	call	_readEEPROM	;wreg free
 16356  003774  D045               	goto	L50
 16357  003776                     l8067:
 16358                           
 16359                           ; BSR set to: 0
 16360                           ;main.c: 916: else if ( (reg >= 2) && (reg < 10) ) {
 16361  003776  0E01               	movlw	1
 16362  003778  640C               	cpfsgt	vscp_readAppReg@reg,c
 16363  00377A  D034               	goto	l8091
 16364                           
 16365                           ; BSR set to: 0
 16366  00377C  0E0A               	movlw	10
 16367  00377E  600C               	cpfslt	vscp_readAppReg@reg,c
 16368  003780  D031               	goto	l8091
 16369  003782  D01E               	goto	l8089
 16370  003784                     l8073:
 16371                           
 16372                           ; BSR set to: 0
 16373                           ;main.c: 922: rv = LATBbits.LATB4;
 16374  003784  0E00               	movlw	0
 16375  003786  B88A               	btfsc	3978,4,c	;volatile
 16376  003788  0E01               	movlw	1
 16377  00378A  D03A               	goto	L50
 16378  00378C                     l8075:
 16379                           
 16380                           ; BSR set to: 0
 16381                           ;main.c: 927: rv = LATBbits.LATB1;
 16382  00378C  0E00               	movlw	0
 16383  00378E  B28A               	btfsc	3978,1,c	;volatile
 16384  003790  0E01               	movlw	1
 16385  003792  D036               	goto	L50
 16386  003794                     l8077:
 16387                           
 16388                           ; BSR set to: 0
 16389                           ;main.c: 932: rv = LATBbits.LATB0;
 16390  003794  0E00               	movlw	0
 16391  003796  B08A               	btfsc	3978,0,c	;volatile
 16392  003798  0E01               	movlw	1
 16393  00379A  D032               	goto	L50
 16394  00379C                     l8079:
 16395                           
 16396                           ; BSR set to: 0
 16397                           ;main.c: 937: rv = LATCbits.LATC7;
 16398  00379C  0E00               	movlw	0
 16399  00379E  BE8B               	btfsc	3979,7,c	;volatile
 16400  0037A0  0E01               	movlw	1
 16401  0037A2  D02E               	goto	L50
 16402  0037A4                     l8081:
 16403                           
 16404                           ; BSR set to: 0
 16405                           ;main.c: 942: rv = LATCbits.LATC6;
 16406  0037A4  0E00               	movlw	0
 16407  0037A6  BC8B               	btfsc	3979,6,c	;volatile
 16408  0037A8  0E01               	movlw	1
 16409  0037AA  D02A               	goto	L50
 16410  0037AC                     l8083:
 16411                           
 16412                           ; BSR set to: 0
 16413                           ;main.c: 947: rv = LATCbits.LATC5;
 16414  0037AC  0E00               	movlw	0
 16415  0037AE  BA8B               	btfsc	3979,5,c	;volatile
 16416  0037B0  0E01               	movlw	1
 16417  0037B2  D026               	goto	L50
 16418  0037B4                     l8085:
 16419                           
 16420                           ; BSR set to: 0
 16421                           ;main.c: 952: rv = LATCbits.LATC4;
 16422  0037B4  0E00               	movlw	0
 16423  0037B6  B88B               	btfsc	3979,4,c	;volatile
 16424  0037B8  0E01               	movlw	1
 16425  0037BA  D022               	goto	L50
 16426  0037BC                     l288:
 16427                           
 16428                           ; BSR set to: 0
 16429                           ;main.c: 957: rv = 0;
 16430  0037BC  6A0B               	clrf	vscp_readAppReg@rv,c
 16431                           
 16432                           ;main.c: 958: break;
 16433  0037BE  D021               	goto	l8097
 16434  0037C0                     l8089:
 16435                           
 16436                           ; BSR set to: 0
 16437  0037C0  500C               	movf	vscp_readAppReg@reg,w,c
 16438                           
 16439                           ; Switch size 1, requested type "speed"
 16440                           ; Number of cases is 8, Range of values is 2 to 9
 16441                           ; switch strategies available:
 16442                           ; Name         Instructions Cycles
 16443                           ; simple_byte           25    13 (average)
 16444                           ;	Chosen strategy is simple_byte
 16445  0037C2  0A02               	xorlw	2	; case 2
 16446  0037C4  E0DF               	bz	l8073
 16447  0037C6  0A01               	xorlw	1	; case 3
 16448  0037C8  E0E1               	bz	l8075
 16449  0037CA  0A07               	xorlw	7	; case 4
 16450  0037CC  E0E3               	bz	l8077
 16451  0037CE  0A01               	xorlw	1	; case 5
 16452  0037D0  E0E5               	bz	l8079
 16453  0037D2  0A03               	xorlw	3	; case 6
 16454  0037D4  E0E7               	bz	l8081
 16455  0037D6  0A01               	xorlw	1	; case 7
 16456  0037D8  E0E9               	bz	l8083
 16457  0037DA  0A0F               	xorlw	15	; case 8
 16458  0037DC  E0EB               	bz	l8085
 16459  0037DE  0A01               	xorlw	1	; case 9
 16460  0037E0  E0ED               	bz	l288
 16461  0037E2  D00F               	goto	l8097
 16462  0037E4                     l8091:
 16463                           
 16464                           ; BSR set to: 0
 16465                           ;main.c: 962: else if ( ( reg >= 10 ) &&
 16466                           ;main.c: 963: (reg < (72 + 7 * 8 ) ) ) {
 16467  0037E4  0E09               	movlw	9
 16468  0037E6  640C               	cpfsgt	vscp_readAppReg@reg,c
 16469  0037E8  D00C               	goto	l8097
 16470                           
 16471                           ; BSR set to: 0
 16472  0037EA  0E80               	movlw	128
 16473  0037EC  600C               	cpfslt	vscp_readAppReg@reg,c
 16474  0037EE  D009               	goto	l8097
 16475                           
 16476                           ; BSR set to: 0
 16477                           ;main.c: 964: rv = readEEPROM( 0x43 + reg );
 16478  0037F0  0E43               	movlw	67
 16479  0037F2  240C               	addwf	vscp_readAppReg@reg,w,c
 16480  0037F4  6E08               	movwf	?_readEEPROM,c
 16481  0037F6  6A09               	clrf	?_readEEPROM+1,c
 16482  0037F8  0E00               	movlw	0
 16483  0037FA  2209               	addwfc	?_readEEPROM+1,f,c
 16484  0037FC  EC86  F01F         	call	_readEEPROM	;wreg free
 16485  003800                     L50:
 16486  003800  6E0B               	movwf	vscp_readAppReg@rv,c
 16487  003802                     l8097:
 16488                           
 16489                           ;main.c: 965: }
 16490                           ;main.c: 967: return rv;
 16491  003802  500B               	movf	vscp_readAppReg@rv,w,c
 16492  003804  0012               	return	
 16493  003806                     __end_of_vscp_readAppReg:
 16494                           	opt stack 0
 16495                           tblptru	equ	0xFF8
 16496                           tblptrh	equ	0xFF7
 16497                           tblptrl	equ	0xFF6
 16498                           tablat	equ	0xFF5
 16499                           prodh	equ	0xFF4
 16500                           prodl	equ	0xFF3
 16501                           intcon	equ	0xFF2
 16502                           postinc0	equ	0xFEE
 16503                           wreg	equ	0xFE8
 16504                           indf1	equ	0xFE7
 16505                           fsr1h	equ	0xFE2
 16506                           fsr1l	equ	0xFE1
 16507                           indf2	equ	0xFDF
 16508                           postinc2	equ	0xFDE
 16509                           postdec2	equ	0xFDD
 16510                           plusw2	equ	0xFDB
 16511                           fsr2h	equ	0xFDA
 16512                           fsr2l	equ	0xFD9
 16513                           status	equ	0xFD8
 16514                           
 16515 ;; *************** function _readEEPROM *****************
 16516 ;; Defined at:
 16517 ;;		line 92 in file "../../vscp_firmware/pic/common/eeprom.c"
 16518 ;; Parameters:    Size  Location     Type
 16519 ;;  address         2    7[COMRAM] unsigned short 
 16520 ;; Auto vars:     Size  Location     Type
 16521 ;;  data            1    9[COMRAM] unsigned char 
 16522 ;; Return value:  Size  Location     Type
 16523 ;;                  1    wreg      unsigned char 
 16524 ;; Registers used:
 16525 ;;		wreg, status,2
 16526 ;; Tracked objects:
 16527 ;;		On entry : 0/0
 16528 ;;		On exit  : 0/0
 16529 ;;		Unchanged: 0/0
 16530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16531 ;;      Params:         2       0       0       0       0       0       0
 16532 ;;      Locals:         1       0       0       0       0       0       0
 16533 ;;      Temps:          0       0       0       0       0       0       0
 16534 ;;      Totals:         3       0       0       0       0       0       0
 16535 ;;Total ram usage:        3 bytes
 16536 ;; Hardware stack levels used:    1
 16537 ;; Hardware stack levels required when called:    2
 16538 ;; This function calls:
 16539 ;;		Nothing
 16540 ;; This function is called by:
 16541 ;;		_init_app_ram
 16542 ;;		_doApplicationOneSecondWork
 16543 ;;		_vscp_readNicknamePermanent
 16544 ;;		_vscp_getZone
 16545 ;;		_vscp_getSubzone
 16546 ;;		_vscp_readAppReg
 16547 ;;		_vscp_writeAppReg
 16548 ;;		_SendInformationEvent
 16549 ;;		_doDM
 16550 ;;		_doActionOn
 16551 ;;		_doActionOff
 16552 ;;		_doActionPulse
 16553 ;;		_doActionStatus
 16554 ;;		_doActionDisable
 16555 ;;		_doActionToggle
 16556 ;;		_vscp_getGUID
 16557 ;;		_vscp_getUserID
 16558 ;;		_vscp_getManufacturerId
 16559 ;;		_vscp_getSegmentCRC
 16560 ;;		_calculateSetFilterMask
 16561 ;; This function uses a non-reentrant model
 16562 ;;
 16563                           
 16564                           	psect	text75
 16565  003F0C                     __ptext75:
 16566                           	opt stack 0
 16567  003F0C                     _readEEPROM:
 16568                           	opt stack 26
 16569                           
 16570                           ;eeprom.c: 93: uint8_t data;
 16571                           ;eeprom.c: 98: EEADR = address & 0xff;
 16572                           
 16573                           ;incstack = 0
 16574                           ;incstack = 0
 16575  003F0C  C008  FFA9         	movff	readEEPROM@address,4009	;volatile
 16576                           
 16577                           ;eeprom.c: 99: EECON1bits.EEPGD= 0;
 16578  003F10  9EA6               	bcf	4006,7,c	;volatile
 16579                           
 16580                           ;eeprom.c: 100: EECON1bits.CFGS = 0;
 16581  003F12  9CA6               	bcf	4006,6,c	;volatile
 16582                           
 16583                           ;eeprom.c: 101: EECON1bits.RD = 1;
 16584  003F14  80A6               	bsf	4006,0,c	;volatile
 16585                           
 16586                           ;eeprom.c: 102: data = EEDATA;
 16587  003F16  CFA8 F00A          	movff	4008,readEEPROM@data	;volatile
 16588                           
 16589                           ;eeprom.c: 104: return data;
 16590  003F1A  500A               	movf	readEEPROM@data,w,c
 16591  003F1C  0012               	return	
 16592  003F1E                     __end_of_readEEPROM:
 16593                           	opt stack 0
 16594                           tblptru	equ	0xFF8
 16595                           tblptrh	equ	0xFF7
 16596                           tblptrl	equ	0xFF6
 16597                           tablat	equ	0xFF5
 16598                           prodh	equ	0xFF4
 16599                           prodl	equ	0xFF3
 16600                           intcon	equ	0xFF2
 16601                           postinc0	equ	0xFEE
 16602                           wreg	equ	0xFE8
 16603                           indf1	equ	0xFE7
 16604                           fsr1h	equ	0xFE2
 16605                           fsr1l	equ	0xFE1
 16606                           indf2	equ	0xFDF
 16607                           postinc2	equ	0xFDE
 16608                           postdec2	equ	0xFDD
 16609                           plusw2	equ	0xFDB
 16610                           fsr2h	equ	0xFDA
 16611                           fsr2l	equ	0xFD9
 16612                           status	equ	0xFD8
 16613                           
 16614 ;; *************** function _interrupt_at_low_vector *****************
 16615 ;; Defined at:
 16616 ;;		line 134 in file "../main.c"
 16617 ;; Parameters:    Size  Location     Type
 16618 ;;		None
 16619 ;; Auto vars:     Size  Location     Type
 16620 ;;		None
 16621 ;; Return value:  Size  Location     Type
 16622 ;;		None               void
 16623 ;; Registers used:
 16624 ;;		wreg, status,2, status,0, cstack
 16625 ;; Tracked objects:
 16626 ;;		On entry : 0/0
 16627 ;;		On exit  : 0/0
 16628 ;;		Unchanged: 0/0
 16629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16630 ;;      Params:         0       0       0       0       0       0       0
 16631 ;;      Locals:         0       0       0       0       0       0       0
 16632 ;;      Temps:          3       0       0       0       0       0       0
 16633 ;;      Totals:         3       0       0       0       0       0       0
 16634 ;;Total ram usage:        3 bytes
 16635 ;; Hardware stack levels used:    1
 16636 ;; Hardware stack levels required when called:    1
 16637 ;; This function calls:
 16638 ;;		i1_WriteTimer0
 16639 ;; This function is called by:
 16640 ;;		Interrupt level 1
 16641 ;; This function uses a non-reentrant model
 16642 ;;
 16643                           
 16644                           	psect	intcodelo
 16645  000018                     __pintcodelo:
 16646                           	opt stack 0
 16647  000018                     _interrupt_at_low_vector:
 16648                           	opt stack 21
 16649                           
 16650                           ;incstack = 0
 16651  000018  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 16652  00001C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 16653  000020  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 16654  000024                     
 16655                           ;main.c: 141: if ( INTCONbits.TMR0IF ) {
 16656  000024  A4F2               	btfss	intcon,2,c	;volatile
 16657  000026  D001               	goto	i1u782_21
 16658  000028  D001               	goto	i1u782_20
 16659  00002A                     i1u782_21:
 16660  00002A  D03C               	goto	i1l143
 16661  00002C                     i1u782_20:
 16662  00002C                     
 16663                           ;main.c: 144: WriteTimer0(0xfb1d);
 16664  00002C  0EFB               	movlw	251
 16665  00002E  6E02               	movwf	?i1_WriteTimer0+1,c
 16666  000030  0E1D               	movlw	29
 16667  000032  6E01               	movwf	?i1_WriteTimer0,c
 16668  000034  EC8F  F01F         	call	i1_WriteTimer0	;wreg free
 16669  000038                     
 16670                           ;main.c: 146: vscp_timer++;
 16671  000038  0100               	movlb	0	; () banked
 16672  00003A  4B86               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 16673  00003C  2B87               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 16674  00003E                     
 16675                           ; BSR set to: 0
 16676                           ;main.c: 147: measurement_clock++;
 16677  00003E  0E01               	movlw	1
 16678  000040  2780               	addwf	_measurement_clock& (0+255),f,b	;volatile
 16679  000042  0E00               	movlw	0
 16680  000044  2381               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 16681  000046  0E00               	movlw	0
 16682  000048  2382               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 16683  00004A  0E00               	movlw	0
 16684  00004C  2383               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 16685  00004E                     
 16686                           ; BSR set to: 0
 16687                           ;main.c: 150: if ( PORTCbits.RC0 ) {
 16688  00004E  A082               	btfss	3970,0,c	;volatile
 16689  000050  D001               	goto	i1u783_21
 16690  000052  D001               	goto	i1u783_20
 16691  000054                     i1u783_21:
 16692  000054  D002               	goto	i1l7083
 16693  000056                     i1u783_20:
 16694  000056                     
 16695                           ; BSR set to: 0
 16696                           ;main.c: 151: vscp_initbtncnt = 0;
 16697  000056  6B8F               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 16698                           
 16699                           ;main.c: 152: } else {
 16700  000058  D001               	goto	i1l135
 16701  00005A                     i1l7083:
 16702                           
 16703                           ; BSR set to: 0
 16704                           ;main.c: 154: vscp_initbtncnt++;
 16705  00005A  2B8F               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 16706  00005C                     i1l135:
 16707                           
 16708                           ; BSR set to: 0
 16709                           ;main.c: 155: }
 16710                           ;main.c: 158: vscp_statuscnt++;
 16711  00005C  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 16712  00005E                     
 16713                           ; BSR set to: 0
 16714                           ;main.c: 159: if ( ( 0x02 == vscp_initledfunc ) &&
 16715                           ;main.c: 160: ( vscp_statuscnt > 100 ) ) {
 16716  00005E  5056               	movf	_vscp_initledfunc,w,c
 16717  000060  0A02               	xorlw	2
 16718  000062  A4D8               	btfss	status,2,c
 16719  000064  D001               	goto	i1u784_21
 16720  000066  D001               	goto	i1u784_20
 16721  000068                     i1u784_21:
 16722  000068  D00E               	goto	i1l7093
 16723  00006A                     i1u784_20:
 16724  00006A                     
 16725                           ; BSR set to: 0
 16726  00006A  0E64               	movlw	100
 16727  00006C  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 16728  00006E  D001               	goto	i1u785_21
 16729  000070  D001               	goto	i1u785_20
 16730  000072                     i1u785_21:
 16731  000072  D009               	goto	i1l7093
 16732  000074                     i1u785_20:
 16733  000074                     
 16734                           ; BSR set to: 0
 16735                           ;main.c: 162: if ( PORTCbits.RC1 ) {
 16736  000074  A282               	btfss	3970,1,c	;volatile
 16737  000076  D001               	goto	i1u786_21
 16738  000078  D001               	goto	i1u786_20
 16739  00007A                     i1u786_21:
 16740  00007A  D002               	goto	i1l137
 16741  00007C                     i1u786_20:
 16742  00007C                     
 16743                           ; BSR set to: 0
 16744                           ;main.c: 163: PORTCbits.RC1 = 0;
 16745  00007C  9282               	bcf	3970,1,c	;volatile
 16746                           
 16747                           ;main.c: 164: }
 16748  00007E  D001               	goto	i1l138
 16749  000080                     i1l137:
 16750                           
 16751                           ; BSR set to: 0
 16752                           ;main.c: 165: else {
 16753                           ;main.c: 166: PORTCbits.RC1 = 1;
 16754  000080  8282               	bsf	3970,1,c	;volatile
 16755  000082                     i1l138:
 16756                           
 16757                           ; BSR set to: 0
 16758                           ;main.c: 167: }
 16759                           ;main.c: 169: vscp_statuscnt = 0;
 16760  000082  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16761                           
 16762                           ;main.c: 171: }
 16763  000084  D00E               	goto	i1l139
 16764  000086                     i1l7093:
 16765                           
 16766                           ; BSR set to: 0
 16767                           ;main.c: 172: else if (0x01 == vscp_initledfunc) {
 16768  000086  0456               	decf	_vscp_initledfunc,w,c
 16769  000088  A4D8               	btfss	status,2,c
 16770  00008A  D001               	goto	i1u787_21
 16771  00008C  D001               	goto	i1u787_20
 16772  00008E                     i1u787_21:
 16773  00008E  D003               	goto	i1l140
 16774  000090                     i1u787_20:
 16775  000090                     
 16776                           ; BSR set to: 0
 16777                           ;main.c: 173: PORTCbits.RC1 = 1;
 16778  000090  8282               	bsf	3970,1,c	;volatile
 16779                           
 16780                           ;main.c: 174: vscp_statuscnt = 0;
 16781  000092  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16782                           
 16783                           ;main.c: 175: }
 16784  000094  D006               	goto	i1l139
 16785  000096                     i1l140:
 16786                           
 16787                           ; BSR set to: 0
 16788                           ;main.c: 176: else if (0x00 == vscp_initledfunc) {
 16789  000096  6656               	tstfsz	_vscp_initledfunc,c
 16790  000098  D001               	goto	i1u788_21
 16791  00009A  D001               	goto	i1u788_20
 16792  00009C                     i1u788_21:
 16793  00009C  D002               	goto	i1l139
 16794  00009E                     i1u788_20:
 16795  00009E                     
 16796                           ; BSR set to: 0
 16797                           ;main.c: 177: PORTCbits.RC1 = 0;
 16798  00009E  9282               	bcf	3970,1,c	;volatile
 16799                           
 16800                           ;main.c: 178: vscp_statuscnt = 0;
 16801  0000A0  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16802  0000A2                     i1l139:
 16803                           
 16804                           ; BSR set to: 0
 16805                           ;main.c: 179: }
 16806                           ;main.c: 181: INTCONbits.TMR0IF = 0;
 16807  0000A2  94F2               	bcf	intcon,2,c	;volatile
 16808  0000A4                     i1l143:
 16809  0000A4  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 16810  0000A8  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 16811  0000AC  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 16812  0000B0  0010               	retfie	
 16813  0000B2                     __end_of_interrupt_at_low_vector:
 16814                           	opt stack 0
 16815                           tblptru	equ	0xFF8
 16816                           tblptrh	equ	0xFF7
 16817                           tblptrl	equ	0xFF6
 16818                           tablat	equ	0xFF5
 16819                           prodh	equ	0xFF4
 16820                           prodl	equ	0xFF3
 16821                           intcon	equ	0xFF2
 16822                           postinc0	equ	0xFEE
 16823                           wreg	equ	0xFE8
 16824                           indf1	equ	0xFE7
 16825                           fsr1h	equ	0xFE2
 16826                           fsr1l	equ	0xFE1
 16827                           bsr	equ	0xFE0
 16828                           indf2	equ	0xFDF
 16829                           postinc2	equ	0xFDE
 16830                           postdec2	equ	0xFDD
 16831                           plusw2	equ	0xFDB
 16832                           fsr2h	equ	0xFDA
 16833                           fsr2l	equ	0xFD9
 16834                           status	equ	0xFD8
 16835                           
 16836 ;; *************** function i1_WriteTimer0 *****************
 16837 ;; Defined at:
 16838 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16839 ;; Parameters:    Size  Location     Type
 16840 ;;  timer0          2    0[COMRAM] unsigned int 
 16841 ;; Auto vars:     Size  Location     Type
 16842 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 16843 ;; Return value:  Size  Location     Type
 16844 ;;		None               void
 16845 ;; Registers used:
 16846 ;;		None
 16847 ;; Tracked objects:
 16848 ;;		On entry : 0/0
 16849 ;;		On exit  : 0/0
 16850 ;;		Unchanged: 0/0
 16851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16852 ;;      Params:         2       0       0       0       0       0       0
 16853 ;;      Locals:         2       0       0       0       0       0       0
 16854 ;;      Temps:          0       0       0       0       0       0       0
 16855 ;;      Totals:         4       0       0       0       0       0       0
 16856 ;;Total ram usage:        4 bytes
 16857 ;; Hardware stack levels used:    1
 16858 ;; This function calls:
 16859 ;;		Nothing
 16860 ;; This function is called by:
 16861 ;;		_interrupt_at_low_vector
 16862 ;; This function uses a non-reentrant model
 16863 ;;
 16864                           
 16865                           	psect	text77
 16866  003F1E                     __ptext77:
 16867                           	opt stack 0
 16868  003F1E                     i1_WriteTimer0:
 16869                           	opt stack 21
 16870                           
 16871                           ;incstack = 0
 16872                           ;incstack = 0
 16873  003F1E  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 16874  003F22  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 16875  003F26  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 16876  003F2A  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 16877  003F2E  0012               	return	
 16878  003F30                     __end_ofi1_WriteTimer0:
 16879                           	opt stack 0
 16880                           tblptru	equ	0xFF8
 16881                           tblptrh	equ	0xFF7
 16882                           tblptrl	equ	0xFF6
 16883                           tablat	equ	0xFF5
 16884                           prodh	equ	0xFF4
 16885                           prodl	equ	0xFF3
 16886                           intcon	equ	0xFF2
 16887                           postinc0	equ	0xFEE
 16888                           wreg	equ	0xFE8
 16889                           indf1	equ	0xFE7
 16890                           fsr1h	equ	0xFE2
 16891                           fsr1l	equ	0xFE1
 16892                           bsr	equ	0xFE0
 16893                           indf2	equ	0xFDF
 16894                           postinc2	equ	0xFDE
 16895                           postdec2	equ	0xFDD
 16896                           plusw2	equ	0xFDB
 16897                           fsr2h	equ	0xFDA
 16898                           fsr2l	equ	0xFD9
 16899                           status	equ	0xFD8
 16900                           tblptru	equ	0xFF8
 16901                           tblptrh	equ	0xFF7
 16902                           tblptrl	equ	0xFF6
 16903                           tablat	equ	0xFF5
 16904                           prodh	equ	0xFF4
 16905                           prodl	equ	0xFF3
 16906                           intcon	equ	0xFF2
 16907                           postinc0	equ	0xFEE
 16908                           wreg	equ	0xFE8
 16909                           indf1	equ	0xFE7
 16910                           fsr1h	equ	0xFE2
 16911                           fsr1l	equ	0xFE1
 16912                           bsr	equ	0xFE0
 16913                           indf2	equ	0xFDF
 16914                           postinc2	equ	0xFDE
 16915                           postdec2	equ	0xFDD
 16916                           plusw2	equ	0xFDB
 16917                           fsr2h	equ	0xFDA
 16918                           fsr2l	equ	0xFD9
 16919                           status	equ	0xFD8
 16920                           
 16921                           	psect	rparam
 16922  0000                     tblptru	equ	0xFF8
 16923                           tblptrh	equ	0xFF7
 16924                           tblptrl	equ	0xFF6
 16925                           tablat	equ	0xFF5
 16926                           prodh	equ	0xFF4
 16927                           prodl	equ	0xFF3
 16928                           intcon	equ	0xFF2
 16929                           postinc0	equ	0xFEE
 16930                           wreg	equ	0xFE8
 16931                           indf1	equ	0xFE7
 16932                           fsr1h	equ	0xFE2
 16933                           fsr1l	equ	0xFE1
 16934                           bsr	equ	0xFE0
 16935                           indf2	equ	0xFDF
 16936                           postinc2	equ	0xFDE
 16937                           postdec2	equ	0xFDD
 16938                           plusw2	equ	0xFDB
 16939                           fsr2h	equ	0xFDA
 16940                           fsr2l	equ	0xFD9
 16941                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     59     140
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionDisable->_writeEEPROM
    _doActionDisable->_readEEPROM
    _doActionStatus->_SendInformationEvent
    _doActionPulse->_readEEPROM
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeAppReg
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_SendInformationEvent
    _calculateSetFilterMask->__CANIDToRegs
    _SendInformationEvent->_sendVSCPFrame
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_readEEPROM
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   70337
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           6     6      0    7490
                                             27 BANK0      6     6      0
                         _readEEPROM
                        _doActionOff
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2438
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                17    17      0   15663
                                             28 BANK0     17    17      0
                         _readEEPROM
                        _doActionOff
                         _doActionOn
                      _doActionPulse
                     _doActionStatus
                    _doActionDisable
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       7     6      1    3454
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionDisable                                      6     5      1     397
                                             10 COMRAM     6     5      1
                        _writeEEPROM
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _doActionStatus                                       7     6      1    3412
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulse                                        7     6      1     353
                                             10 COMRAM     7     6      1
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           7     6      1    3196
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          6     5      1    3196
                                             80 COMRAM     1     0      1
                                             22 BANK0      5     5      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            27    27      0   34483
                                             32 BANK0     27    27      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   11628
                                             30 BANK0      2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                    18    17      1    2519
                                             14 COMRAM    18    17      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     722
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     180
                                             10 COMRAM     4     4      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     9     8      1    8899
                                             80 COMRAM     1     0      1
                                             22 BANK0      8     8      0
                        _writeEEPROM
                         _readEEPROM
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (4) _calculateSetFilterMask                              50    50      0    1879
                                             17 COMRAM    50    50      0
                         _readEEPROM
               _ECANSetOperationMode
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _SendInformationEvent                                 8     6      2    2567
                                             74 COMRAM     6     6      0
                                             20 BANK0      2     0      2
                         _readEEPROM
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1550
                                             13 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                      2     2      0    1077
                                             11 COMRAM     2     2      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     227
                                             11 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     132
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     197
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                0     0      0      44
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4624
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     263
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _writeEEPROM                                          3     0      3      44
                                              7 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     700
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (5) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         3     3      0     542
                                             10 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     380
                                             10 COMRAM     2     2      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _init_app_ram
     _readEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _readEEPROM
       _calculateSetFilterMask (ARG)
         _readEEPROM
         _ECANSetOperationMode
         __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _SendInformationEvent
           _readEEPROM
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _readEEPROM
         _calculateSetFilterMask (ARG)
           _readEEPROM
           _ECANSetOperationMode
           __CANIDToRegs
       _vscp_writeStdReg
         _vscp_setGUID
           _writeEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_getGUID
           _readEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
             _readEEPROM
     _vscp_writeStdReg
       _vscp_setGUID
         _writeEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_getGUID
         _readEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
           _readEEPROM
     ___lbmod
   _doDM
     _readEEPROM
     _doActionOff
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulse
       _readEEPROM
     _doActionStatus
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionDisable
       _writeEEPROM
       _readEEPROM
     _doActionToggle
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _readEEPROM
     _doActionOff
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _SendInformationEvent
       _readEEPROM
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3B      8C       5       87.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E4       3        0.0%
DATA                 0      0      F0      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Feb 12 23:21:25 2015

                      doActionToggle@val 00CA                  __end_of_vscp_readAppReg 3806  
                  __end_of_sendVSCPFrame 3750             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 0008                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 000B                              __CFG_BORV$3 000000  
                __end_of_vscp_readStdReg 3446                    doActionToggle@dmflags 00C9  
                                    l210 2268                                      l202 2244  
                                    l203 224C                                      l212 226C  
                                    l221 2290                                      l213 2274  
                                    l302 06EE                                      l222 229A  
                                    l206 2254                                      l215 2278  
                                    l207 225C                                      l224 2390  
                                    l216 2280                                      l232 23F8  
                                    l160 34BC                                      l313 07AE  
                                    l209 2260                                      l218 2284  
                                    l323 0876                                      l219 228C  
                                    l147 345E                                      l308 0748  
                                    l156 34A2                                      l333 093E  
                                    l245 3DC8                                      l413 1E5C  
                                    l318 0812                                      l183 1DA0  
                                    l415 1E78                                      l328 08DA  
                                    l440 2492                                      l512 3334  
                                    l249 3DA6                                      l409 2106  
                                    l450 25D2                                      l442 24D2  
                                    l444 2512                                      l437 2452  
                                    l541 308A                                      l470 358A  
                                    l446 2552                                      l550 30AE  
                                    l542 3092                                      l471 358E  
                                    l439 2636                                      l551 30B6  
                                    l288 37BC                                      l472 3592  
                                    l448 2592                                      l544 3096  
                                    l393 0FA4                                      l465 357A  
                                    l553 30BA                                      l545 309E  
                                    l537 307A                                      l650 3B2C  
                                    l466 35B2                                      l490 2958  
                                    l554 30C2                                      l538 3082  
                                    l467 357E                                      l491 2988  
                                    l547 30A2                                      l644 3912  
                                    l468 3582                                      l492 29B8  
                                    l556 30C6                                      l548 30AA  
                                    l469 3586                                      l493 29E8  
                                    l557 30D0                                      l486 28C8  
                                    l655 3C0A                                      l559 311A  
                                    l904 3026                                      l488 28F8  
                                    l489 2928                                      l914 3980  
                                    l850 2D72                                      l842 2CD6  
                      doActionStatus@bOn 00CA                                      l844 2CF4  
                                    l909 2ED6                                      l870 270C  
                                    l862 2870                       vscp_readStdReg@reg 000D  
                                    l855 269C                                      l872 2720  
                                    l865 276A                                      l874 2734  
                                    l866 26EA                                      l876 2744  
                                    l868 26F8                                      l886 27D8  
                                    l878 2754                                      l887 27FC  
                           __CFG_CPB$OFF 000000           __size_of_vscp_handleProbeState 00BA  
                      doActionStatus@arg 0051                           getVSCPFrame@id 0028  
                      doActionStatus@val 00CB            __end_of_vscp_handleProbeState 369A  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                 _calculateSetFilterMask 1606                                      wreg 000FE8  
            ?_doApplicationOneSecondWork 0001                             __CFG_LVP$OFF 000000  
                           __CFG_WDT$OFF 000000                                     l1101 3AAE  
                                   l1105 3E3E                                     l1034 3D40  
                                   l1210 11B0                                     l1052 3684  
                                   l1044 3696                                     l1053 3664  
                                   l1045 3622                                     l1029 3AC2  
                   __size_of_doActionOff 00BA                                     l1312 3E20  
                                   l1313 3E22                                     l1081 3D1C  
                                   l1145 3D84                                     l1234 1340  
                                   l1235 1354                                     l1092 3C34  
                                   l1236 1396                                     l1077 3B70  
                                   l1245 13D2                                     l1087 3BD2  
                                   l1175 2C04                                     l1088 3BDE  
                                   l1293 3CF0                                     l1277 3C5E  
                                   l1269 1604                                     l5621 3DB4  
                                   l7063 3C80                                     l7055 3C6A  
              vscp_getManufacturerId@idx 000B                                     l6601 268A  
                                   l7321 3606                                     l7305 35E2  
                                   l6441 3DD6                                     l9001 3374  
                                   l6611 26B4                                     l5627 3D92  
                                   l9021 33AA                                     l9013 3392  
                                   l9005 337E                                     l4685 1DA2  
                                   l8063 3766                                     l7247 3D2C  
                                   l7343 3640                                     l7319 3600  
                                   l9111 2AC6                                     l9103 2AA8  
                                   l8081 37A4                                     l8073 3784  
                                   l6705 282A                                     l6713 2844  
                                   l6617 26CA                                     l6625 26D8  
                                   l7345 3644                                     l9025 33B6  
                                   l9017 339E                                     l9009 3388  
                                   l9113 2ACA                                     l8083 37AC  
                                   l8075 378C                                     l8091 37E4  
                                   l8067 3776                                     l7275 31F6  
                                   l7259 315C                                     l6731 3E7C  
                                   l6619 26D4                                     l7339 363C  
                                   l9051 340A                                     l9043 33F4  
                                   l9035 33DC                                     l9115 2AE0  
                                   l8085 37B4                                     l8077 3794  
                                   l7269 3186                                     l6493 3BEC  
                                   l6477 38B6                                     l9029 33C6  
                                   l9301 102A                                     l9205 345A  
                                   l8079 379C                                     l7279 324C  
                                   l6719 285A                                     l7375 3688  
                                   l9055 3416                                     l9047 33FE  
                                   l9039 33E8                                     l8511 19EC  
                                   l9127 2B14                                     l9303 1030  
                                   l9223 3492                                     l9215 3480  
                                   l8089 37C0                                     l8097 3802  
                                   l6761 391A                                     l6489 3BE8  
                                   l9065 3438                                     l8505 1950  
                                   l9137 2B76                                     l9225 3496  
                                   l9241 34D8                                     l6771 394A  
                                   l6763 3922                                     l9059 3422  
                                   l9067 3442                                     l8515 1A16  
                                   l9155 2BEC                                     l9147 2BD6  
                                   l9091 2A6C                                     l9235 34B6  
                                   l9227 349C                                     l9219 3488  
                                   l6773 3950                                     l6765 392C  
                                   l6669 277E                                     l8509 19E4  
                                   l9165 2C06                                     l9405 117C  
                                   l9317 1038                                     l9253 3504  
                                   l6775 3956                                     l6767 3936  
                                   l6679 279E                                     l8471 1618  
                                   l9423 11E2                                     l9351 106A  
                                   l9239 34C0                                     l6769 3940  
                                   l6793 2E08                                     l6697 27FE  
                                   l9097 2A8C                                     l9601 1402  
                                   l9433 1240                                     l9417 11B4  
                                   l9337 105E                                     l9281 0FEC  
                                   l8617 28B0                                     l8609 2878  
                                   l9265 3518                                     l6779 3962  
                                   l8491 1932                                     l9611 1424  
                                   l9515 1334                                     l9427 11FA  
                                   l9419 11D2                                     l9283 0FF2  
                                   l9275 0FDA                                     l8901 2D6A  
                                   l9437 1256                                     l9453 1286  
                                   l9357 107E                                     l9277 0FE0  
                                   l8653 2A18                                     l9269 3520  
                                   l8823 3AFA                                     l8487 18A4  
                                   l8479 1892                                     l9623 144A  
                                   l9551 138A                                     l9543 137A  
                                   l9535 135C                                     l9471 12D8  
                                   l9455 1288                                     l9375 10E0  
                                   l9279 0FE6                                     l8655 2A38  
                                   l8727 39C4                                     l8719 3990  
                                   l9711 1DF6                                     l8841 2C60  
                                   l9561 1398                                     l9465 12AC  
                                   l9457 1292                                     l9385 1114  
                                   l8729 39EC                                     l8827 3B28  
                                   l9651 14CC                                     l9643 149E  
                                   l9619 1446                                     l9547 1382  
                                   l9483 12F4                                     l9395 1148  
                                   l7891 3A8E                                     l9803 224E  
                                   l8917 2F4E                                     l9661 14EC  
                                   l9565 13B2                                     l7885 3A84  
                                   l8847 2C70                                     l9903 064E  
                                   l9647 14B4                                     l9639 147E  
                                   l9743 1F94                                     l7895 3A96  
                                   l9831 229E                                     l8881 2D24  
                                   l9673 1542                                     l9753 2042  
                                   l9761 20B6                                     l9841 236A  
                                   l9833 22BA                                     l8875 2CF6  
                                   l8859 2C9A                                     l8955 3B68  
                                   l9915 0696                                     l9907 066E  
                                   l9587 13DA                                     l9499 1314  
                                   l9755 207C                                     l9747 1FCE  
                                   l9739 1F5A                                     l9763 20FC  
                                   l9851 23A2                                     l8869 2CDA  
                                   l9933 06FE                                     l9669 151A  
                                   l9749 2008                                     l9845 237C  
                                   l9773 2114                                     l8895 2D64  
                                   l8991 3E38                                     l9935 0704  
                                   l9927 06C0                                     l9695 15A2  
                                   l9855 23B6                                     l9791 21AC  
                                   l8889 2D42                                     l9793 21EE  
                                   l9857 23F4                                     l9769 210C  
                                   l8899 2D68                                     l9955 075A  
                                   l9947 072E                                     l9883 3596  
                                   l9875 3560                                     l9891 35D6  
                                   l9867 352C                                     l9975 07BE  
                                   l9967 0782                                     l9887 35C4  
                                   l9995 0822                                     l9987 07E6  
            __size_of_vscp_getMatrixInfo 0020                           sendCANFrame@id 0037  
                                   u8034 31AC                                     u8035 31A8  
                                   u7245 2DB6                                     u7255 2DD6  
                                   u7265 2E24                                     u6750 3906  
                                   u6755 38FC                                     u6925 2692  
                                   u6927 2694                           sendCANFrame@rv 003E  
                                   u9900 18C4                                     u9910 18EC  
                                   u9905 18BA                                     u9915 18E2  
                                   u9934 190C                                     u9935 1906  
                                   u9964 1986                                     u9965 1982  
                                   u9885 1702                                     u9974 199E  
                                   u9975 199A                                     u9994 19BE  
                                   u9995 19B8                         ??_ECANInitialize 0009  
                           __CFG_PWRT$ON 000000                vscp_setManufacturerId@idx 000C  
                                   _doDM 1DE8                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 3446  
                                   _init 3B72                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                    __size_of_vscp_getZone 000A  
                    i1WriteTimer0@timer0 0001                         _vscp_writeAppReg 0622  
                            _vscp_minute 0090                              _vscp_second 0095  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 00B2                     doActionPulse@dmflags 000F  
          __size_of_vscp_doOneSecondWork 004E                        vscp_getUserID@idx 000B  
                  __size_of_vscp_setGUID 0022                         _vscp_writeStdReg 2A42  
                        _doActionDisable 398A                              _writeEEPROM 3CD4  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 3914              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 002C                                    l10103 0AD6  
                                  l10015 0886                                    l10007 084A  
                                  l10121 0B40                                    l10131 0B9E  
                                  l10107 0ADC                                    l10035 08EA  
                                  l10027 08AE                                    l10213 0E90  
                                  l10117 0B3A                                    l10135 0BA4  
                                  l10047 0912                                    l10225 0F24  
                                  l10217 0EBC                                    l10145 0C02  
                                  l10065 0986                                    l10057 094E  
                                  l10313 2648                                    l10251 0FB8  
                                  l10219 0EF0                                    l10075 09E4  
                                  l10059 0978                                    l10235 0F5E  
                                  l10245 0F8E                                    l10181 0D7E  
                                  l10173 0CCE                                    l10149 0C08  
                                  l10093 0A78                                    l10165 0C6C  
                                  l10309 2612                                    l10317 265A  
                                  l10341 32BC                                    l10421 30D4  
                                  l10255 0FCC                                    l10183 0DAA  
                                  l10175 0CFA                                    l10191 0E2E  
                                  l10159 0C66                                    l10079 09EA  
                                  l10167 0C96                                    l10343 32C6  
                                  l10335 3292                                    l10327 325E  
                                  l10423 30F0                                    _B0CON 000E20  
                                  l10185 0DD6                                    l10177 0D26  
                                  l10193 0E58                                    l10089 0A48  
                                  l10273 2438                                    l10265 2400  
                                  l10361 3320                                    l10345 32D0  
                                  l10337 32A8                                    l10353 32EE  
                                  l10187 0E02                                    l10179 0D52  
                                  l10451 3D7A                                    l10347 32DA  
                                  l10339 32B2                                    l10355 330A  
                                  l10371 3358                                    l10435 312C  
                                  l10349 32E4                                    l10429 3106  
                                  l10381 3030                                    l10367 3346  
                                  l10439 313E                                    _B1CON 000E30  
                                  l10393 3084                                    ?_doDM 0001  
                                  l10389 3064                                    _B2CON 000E40  
                                  _B3CON 000E50                                    _B4CON 000E60  
          __size_of_SendInformationEvent 006C            __size_of_vscp_getMajorVersion 0002  
                                  _B5CON 000E70               __end_of_vscp_goActiveState 3E08  
          ??_vscp_writeNicknamePermanent 000B                       writeEEPROM@address 0008  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                            i1_WriteTimer0 3F1E  
                                  _EEADR 000FA9                          __end_of___lbmod 3C88  
                _vscp_handleDropNickname 3BB0                                    _BSEL0 000DF8  
                                  u10025 36D6                                    u11160 2B6C  
                                  _T0CON 000FD5                                    u10194 2888  
                                  u10354 39A0                                    u10195 2884  
                                  u10355 399C                                    u12124 218A  
                                  u11165 2B62                                    u12125 2186  
                                  u11190 2BCE                                    u13104 326E  
                                  u12144 21FE                                    u10705 2F38  
                                  u13105 326A                                    u12145 21FA  
                                  u12314 353C                                    u10715 2F62  
                                  u11195 2BC4                                    u12315 3538  
                                  u13204 3040                                    u13205 303C  
                                  u10695 2F12                                    u12954 2410  
                                  u12955 240C                                    i1l140 0096  
                                  i1l135 005C                                    i1l143 00A4  
                                  i1l137 0080                                    i1l138 0082  
                                  i1l139 00A2                          sendCANFrame@dlc 003B  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 3F72               _vscp_readNicknamePermanent 3F68  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                             _vscp_getGUID 3EB0  
                                  doDM@i 00DD                            __CFG_WRTD$OFF 000000  
                         __CFG_EBTRB$OFF 000000                             _vscp_getZone 3F4A  
                     vscp_writeAppReg@rv 00CD                                    _hours 0088  
              _vscp_getRegisterPagesUsed 3F8A                   __size_of_vscp_getEvent 002A  
                           _vscp_setGUID 3DA8                                    tablat 000FF5  
                _vscp_getSubMinorVersion 3F90                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 3CAE  
                   _ECANSetOperationMode 3E70                          __initialization 3D42  
                           __end_of_doDM 2108                             __end_of_main 3526  
                           __end_of_init 3BB0                         ?_vscp_readAppReg 0001  
                _interrupt_at_low_vector 0018                           doDM@class_mask 00D2  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00CD  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 000F                                   ??_main 0052  
                                 ??_init 000E            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 000B                 ??_vscp_setManufacturerId 000C  
               _vscp_handleProtocolEvent 0FD0                            __activetblptr 000002  
                      __RegsToCANID@type 000B               ECANReceiveMessage@msgFlags 0011  
          doApplicationOneSecondWork@bOn 00CF                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                 __size_of_doActionPulse 01D0               ECANReceiveMessage@savedPtr 0012  
                                 _CANCON 000F6F                                   _EEDATA 000FA8  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                          doDM@type_mask 00D5                       vscp_writeStdReg@rv 001F  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                                   i1l7071 0024  
                                 i1l7081 0056                                   i1l7073 002C  
                             _OpenTimer0 3E08                                   i1l7091 007C  
                                 i1l7083 005A                                   i1l7075 0038  
                                 i1l7093 0086                                   i1l7085 005E  
                                 i1l7077 003E                                   i1l7095 0090  
                                 i1l7087 006A                                   i1l7079 004E  
                                 i1l7097 009E                                   i1l7089 0074  
                        _init_app_eeprom 1A72                                   _RXB0IF 007D20  
                                 _RXB1IF 007D21                  __end_of_doActionDisable 39F6  
                                 _RXF1EN 006EA1                   ECANReceiveMessage@data 000F  
                 ECANReceiveMessage@mode 0016                   ECANReceiveMessage@temp 0017  
                      getVSCPFrame@pData 0022                        getVSCPFrame@pSize 0021  
                     _vscp_newNodeOnline 3C0C                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0011   vscp_handleProtocolEvent@page_save_1288 00DA  
                         getCANFrame@pid 001C                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0009                            _vscp_getEvent 3C36  
                                 _doWork 3F88                         OpenTimer0@config 0008  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 000C  
                    vscp_writeAppReg@bOn 00CC          calculateSetFilterMask@rowfilter 003E  
             calculateSetFilterMask@mask 0036                      vscp_writeAppReg@reg 00CE  
             __end_of_vscp_setSegmentCRC 3EE8                      vscp_writeAppReg@val 0051  
                                 clear_0 3D48                                   clear_1 3D54  
                          ?_sendCANFrame 0037             vscp_handleProtocolEvent@byte 00E8  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 0091  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 000B                ??_vscp_getSubMinorVersion 0008  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 000B  
                   ??_vscp_newNodeOnline 004C                          ___lbmod@divisor 0008  
                        doActionToggle@i 00CC                               __accesstop 0060  
                __end_of__initialization 3D5A                          ___lbmod@counter 000A  
          __size_of_vscp_getMinorVersion 0002                          doActionStatus@i 00CC  
                        writeEEPROM@data 000A                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 3D64                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0026                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001                            _doActionPulse 2872  
            __end_of_vscp_check_pstorage 3D42                  __size_of_vscp_setUserID 0018  
                        ??i1_WriteTimer0 0003                      ?_vscp_writeRegister 00CF  
                         ??_sendCANFrame 003E                               _doActionOn 23FA  
                ?_calculateSetFilterMask 0001            calculateSetFilterMask@lastOID 0035  
             __end_of_vscp_getFamilyCode 3F68                            ?__RegsToCANID 0008  
            __size_of_ECANReceiveMessage 020E                       sendVSCPFrame@pData 0045  
             __end_of_vscp_getFamilyType 3F5E          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 00CF          __size_of_vscp_setManufacturerId 0022  
               __end_of_vscp_writeAppReg 0FD0                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 1DE8              __end_of_vscp_setControlByte 3ED6  
               __end_of_vscp_writeStdReg 2C0A            calculateSetFilterMask@rowmask 0031  
                     __RegsToCANID@Value 000E                     ??_vscp_writeRegister 0052  
        __end_of_vscp_handleDropNickname 3BE0                             _getVSCPFrame 389C  
                             __pbssBANK0 0060                              ?_OpenTimer0 0001  
             __end_of_vscp_getBufferSize 3F8E                         ?_doActionDisable 000B  
                  vscp_writeRegister@reg 00D0                   ??_ECANSetOperationMode 0008  
     __size_of_vscp_getRegisterPagesUsed 0002                             ?_writeEEPROM 0008  
                         ?_doActionPulse 000B          __end_of_vscp_getSubMinorVersion 3F92  
               ECANSetOperationMode@mode 0008                                  _B0RXFUL 007107  
                                _B1RXFUL 007187                     __ECANRxFilterHitInfo 0054  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 000B                                  _B5RXFUL 007387  
         __end_of_calculateSetFilterMask 1A72                  __size_of_doActionToggle 0120  
                       WriteTimer0@timer 000A                  __size_of_doActionStatus 010C  
                                _ECANCON 000F77                            ??_WriteTimer0 000A  
                         ??__RegsToCANID 000C                    sendVSCPFrame@priority 0043  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72           SendInformationEvent@eventClass 00C5  
                    vscp_writeStdReg@idx 001D                      vscp_writeStdReg@reg 0020  
           __end_of_vscp_doOneSecondWork 3AB0              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0041                            ??_doActionOff 00C7  
        __end_of_interrupt_at_low_vector 00B2                        sendCANFrame@pdata 003C  
                  _vscp_handleProbeState 35E0                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 3914               __end_of_vscp_getMatrixInfo 3DEA  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                    doActionStatus@dmflags 00C9  
                     _vscp_goActiveState 3DEA                   __size_of_sendVSCPFrame 00B6  
           __end_of_SendInformationEvent 3A62             __end_of_vscp_getMajorVersion 3F96  
                     __size_of_vscp_init 0044                  SendInformationEvent@idx 0050  
              vscp_writeStdReg@code_1268 0019                               _readEEPROM 3F0C  
                 _vscp_getManufacturerId 3E88                   _vscp_setManufacturerId 3D86  
                        _ECANSendMessage 2C0A                      ?_vscp_goActiveState 0001  
                                __Hparam 0000                          ??_vscp_getEvent 002C  
                                __Lparam 0000                       _vscp_node_substate 0093  
             __end_of_vscp_getSegmentCRC 3F7C               ??_vscp_handleProtocolEvent 00D1  
                          ??_getCANFrame 001C                             doActionOff@i 00CB  
               vscp_writeStdReg@idx_1269 001E        __end_of_vscp_getRegisterPagesUsed 3F8C  
               __size_of_vscp_getMDF_URL 0018                                  ___lbmod 3C60  
                        getCANFrame@pdlc 001A                  vscp_writeAppReg@val_677 00CB  
                              _FIFOEMPTY 007BA7                          __size_of_doWork 0002  
                           __psmallconst 0600                     __end_of_init_app_ram 3256  
                     _vscp_sendHeartBeat 3C88                                  __pcinit 3D42  
                         _vscp_deviceURL 0600                              ?_doActionOn 0051  
                                __ramtop 0600                      __size_of_OpenTimer0 001E  
                                __ptext0 3446                                  __ptext1 3F88  
                                __ptext2 2108                                  __ptext3 3A62  
                                __ptext4 3C88                                  __ptext5 3F40  
                                __ptext6 3F4A                                  __ptext7 3F84  
                                __ptext8 1DE8                                  __ptext9 3028  
                         _vscp_getUserID 3E9C                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 004C                         doActionDisable@i 0010  
                  vscp_writeStdReg@value 000F                      ?_vscp_sendHeartBeat 00C5  
               ??_vscp_handleSetNickname 000C                                  _minutes 0089  
                                _seconds 008B                      __end_of_WriteTimer0 3F0C  
                       ?_init_app_eeprom 0001                        vscp_readAppReg@rv 000B  
                     vscp_getMDF_URL@idx 0009            vscp_handleProtocolEvent@bytes 00DE  
                   end_of_initialization 3D5A                      __end_of_doActionOff 35E0  
           __end_of_vscp_handleHeartbeat 3B72                 __size_of_vscp_getSubzone 000A  
                          __Lmediumconst 0000                     __end_of_sendCANFrame 3B34  
              vscp_handleProtocolEvent@i 00EA                vscp_handleProtocolEvent@j 00EB  
              vscp_handleProtocolEvent@k 00E5                          ??_doActionPulse 000C  
                 doActionDisable@dmflags 000E                     ??_vscp_sendHeartBeat 004C  
                         _vscp_sendEvent 3CAE                        ECANSendMessage@id 0012  
                      ECANSendMessage@pb 001B                                  postdec2 000FDD  
                __size_of_ECANInitialize 0096                           _vscp_setUserID 3E40  
                                postinc0 000FEE                                  postinc2 000FDE  
                 __end_of_vscp_deviceURL 0620      __end_of_vscp_writeNicknamePermanent 3EFA  
            _vscp_writeNicknamePermanent 3EE8                       __ECANPointBuffer@b 000B  
                          _sendVSCPFrame 369A                   __end_of_vscp_getUserID 3EB0  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0078CB  
                      __end_of_vscp_init 3AF4                           _vscp_probe_cnt 0094  
                              _PORTCbits 000F82                      __end_of_getCANFrame 3C0C  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
               __size_of_vscp_readAppReg 00B6                         ___lbmod@dividend 0009  
                       doActionPulse@arg 000B                           _vscp_statuscnt 0058  
               __size_of_vscp_readStdReg 00E4                         doActionPulse@val 0010  
                     _vscp_setSegmentCRC 3ED6                        readEEPROM@address 0008  
             vscp_handleProtocolEvent@cb 00E3                  __end_of_ECANSendMessage 2D74  
                      vscp_readStdReg@rv 000C                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 00DC  
                   __end_of__RegsToCANID 2ED8                              ?_readEEPROM 0008  
                    __size_of_doActionOn 026A                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 3CD4                               _vscp_error 3F84  
                   _vscp_doOneSecondWork 3A62                       i1WriteTimer0@timer 0003  
                             _vscp_timer 0086                   __end_of_vscp_setUserID 3E58  
                 vscp_sendHeartBeat@zone 004C                           ?_sendVSCPFrame 003F  
            doApplicationOneSecondWork@i 00D1                           _doActionToggle 3028  
                   __size_of_writeEEPROM 0026                           _doActionStatus 3256  
                        ?_vscp_getUserID 0001                           __end_of_doWork 3F8A  
           __end_of_vscp_getMinorVersion 3F94                              _WriteTimer0 3EFA  
                   _SendInformationEvent 39F6                     _vscp_getMajorVersion 3F94  
                   ??_vscp_setSegmentCRC 000B                        ??_vscp_getMDF_URL 0008  
          ??_vscp_getBootLoaderAlgorithm 0008                        ?_vscp_writeAppReg 0051  
                    start_initialization 3D42                              _doActionOff 3526  
        __size_of_vscp_handleSetNickname 0024                       ??_vscp_writeAppReg 00C7  
                      ?_vscp_writeStdReg 000F                   _relay_protection_timer 0060  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 0008                       ??_vscp_writeStdReg 0010  
                     _vscp_getFamilyCode 3F5E                           ??__CANIDToRegs 000F  
                     _vscp_getFamilyType 3F54                         doDM@class_filter 00D0  
                    sendVSCPFrame@nodeid 0042                        _vscp_readRegister 3E26  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 00E2  
                  ?_vscp_doOneSecondWork 0001                    ECANReceiveMessage@ptr 0018  
                    ?_vscp_getFamilyCode 0008                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 1606                                _doDM$2144 00D6  
                        ?_vscp_setUserID 000B                                _doDM$2145 00D7  
                              _doDM$2146 00D8                                _doDM$2147 00D9  
                              _doDM$2148 00DA                                _doDM$2149 00DB  
                    ?_vscp_getFamilyType 0008                    __size_of_init_app_ram 010E  
               ?_vscp_handleDropNickname 0001                   __end_of_doActionToggle 3148  
                      ??_vscp_getSubzone 000B                   __end_of_doActionStatus 3362  
               __end_of__ECANPointBuffer 398A                        __CANIDToRegs@type 000E  
                            _getCANFrame 3BE0                                 ??_doWork 0008  
                     _vscp_getBufferSize 3F8C              vscp_handleProtocolEvent@len 00DF  
                         doActionOff@arg 0051              vscp_handleProtocolEvent@pos 00DD  
             __end_of_ECANReceiveMessage 2872                           doActionOff@val 00CA  
                    ??_vscp_readRegister 000E           __size_of_vscp_goBootloaderMode 0010  
                  ?_SendInformationEvent 00C5                    ?_vscp_getMajorVersion 0001  
                  __end_ofi1_WriteTimer0 3F30            __end_of_vscp_goBootloaderMode 3F40  
                   _vscp_handleHeartbeat 3B34                       __end_of_OpenTimer0 3E26  
    __size_of_doApplicationOneSecondWork 02F2                      ?_vscp_getBufferSize 0001  
                    __size_of_readEEPROM 0012                           doActionPulse@i 0011  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 000C  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0052  
                   ??_vscp_getFamilyType 000C                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 00B1                         _vscp_alarmstatus 008C  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0040  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 000B  
                          ?_vscp_setGUID 000B              __size_of_vscp_writeRegister 0022  
                       ?_ECANSendMessage 0012                        ??_vscp_readAppReg 000B  
                      sendVSCPFrame@size 0044                __end_of_vscp_readRegister 3E40  
                      _relay_pulse_flags 008A                             _init_app_ram 3148  
                      _relay_pulse_timer 0070             __size_of_vscp_setControlByte 0012  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 000C  
                   ??_vscp_getBufferSize 0008                              ?_vscp_error 0001  
                     _vscp_getMatrixInfo 3DCA                   _vscp_handleSetNickname 3CFA  
          __size_of_ECANSetOperationMode 0018                          ??_sendVSCPFrame 00B1  
                        ?_doActionToggle 0051                           _ECANInitialize 3806  
                        ?_doActionStatus 0051                 __size_of_doActionDisable 006C  
                               ?___lbmod 0008                      ?_vscp_getMatrixInfo 0001  
                calculateSetFilterMask@i 0043                  calculateSetFilterMask@j 0042  
                        vscp_getGUID@idx 000B                              __pintcodelo 0018  
                           ??_doActionOn 00C7                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1278 00E1               vscp_setManufacturerId@data 000B  
                           _sendCANFrame 3AF4                              __smallconst 0600  
                      WriteTimer0@timer0 0008                       _vscp_getSegmentCRC 3F72  
                         ??_vscp_getGUID 000B                           ??_vscp_getZone 000B  
                            doActionOn@i 00CC           __end_of_vscp_getManufacturerId 3E9C  
         __end_of_vscp_setManufacturerId 3DA8                    __size_of__RegsToCANID 0164  
       vscp_handleProtocolEvent@pos_1277 00E0                          doDM@type_filter 00D4  
                         ??_vscp_setGUID 000C                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 0008                         _vscp_configtimer 0084  
                   vscp_writeStdReg@code 0015                       doActionDisable@arg 000B  
                     doActionDisable@val 000F          SendInformationEvent@eventTypeId 00C6  
                 ??_vscp_doOneSecondWork 004D                   sendVSCPFrame@vscpclass 003F  
                               _LATBbits 000F8A                     _vscp_getMinorVersion 3F92  
                               _LATCbits 000F8B                                _sendTimer 0055  
                     __end_of_doActionOn 2664                   __end_of_ECANInitialize 389C  
                               _PIR2bits 000FA1                                 i1u782_20 002C  
                               i1u782_21 002A                                 i1u783_20 0056  
                               i1u783_21 0054                                 i1u784_20 006A  
                               i1u784_21 0068                                 i1u785_20 0074  
                               i1u785_21 0072                                 i1u786_20 007C  
                               i1u786_21 007A                                 i1u787_20 0090  
                               i1u787_21 008E                                 i1u788_20 009E  
                               i1u788_21 009C                         ECANSendMessage@i 0034  
                       ECANSendMessage@j 002F                    __end_of_vscp_getEvent 3C60  
                               _RXF0EIDH 000F02                                 _RXF0EIDL 000F03  
                               _RXB0OVFL 007BA7                                 _RXF1EIDH 000F06  
                               _RXF1EIDL 000F07                                 _RXB1OVFL 007BA6  
                               _RXF0SIDH 000F00                                 _RXF0SIDL 000F01  
                               _RXF1SIDH 000F04                                 _RXF1SIDL 000F05  
                               _RXM0EIDH 000F1A                                 _RXM0EIDL 000F1B  
                        vscp_getEvent@rv 002C                                 _RXM1EIDH 000F1E  
                               _RXM1EIDL 000F1F                     ??_vscp_getSegmentCRC 000B  
                               _RXFBCON0 000DE0                                 _RXFBCON1 000DE1  
                               _RXFBCON2 000DE2                                 _RXFBCON3 000DE3  
                               _RXFBCON4 000DE4                                 _RXFBCON5 000DE5  
                               _RXFBCON6 000DE6                                 _RXFBCON7 000DE7  
                               _RXM0SIDH 000F18                                 _RXM0SIDL 000F19  
                 ??_SendInformationEvent 004B                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 0008                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 004C  
                     vscp_setUserID@data 000B                     __end_of__CANIDToRegs 3028  
                           __RegsToCANID 2D74                       _vscp_probe_address 0057  
                     doActionOff@dmflags 00C9              __size_of_vscp_goActiveState 001E  
                    getVSCPFrame@pNodeId 001F                                _vscp_init 3AB0  
                              _vscp_imsg 0096                                _vscp_hour 008E  
                              _vscp_omsg 00A4                         vscp_setGUID@data 000B  
      __size_of_vscp_handleProtocolEvent 0636                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001                 SendInformationEvent@data 004D  
   __size_of_vscp_writeNicknamePermanent 0012       __end_of_doApplicationOneSecondWork 23FA  
             _doApplicationOneSecondWork 2108                         _vscp_page_select 0052  
             __size_of_vscp_readRegister 001A                        _measurement_clock 0080  
                  ?_vscp_getMinorVersion 0001                             ??_readEEPROM 000A  
               __size_of_init_app_eeprom 0376             __end_of_vscp_restoreDefaults 3F84  
                             _EECON1bits 000FA6                          ?_ECANInitialize 0001  
               ??_calculateSetFilterMask 0012                                 __Hrparam 0000  
                   ECANReceiveMessage@id 0014              __size_of_vscp_sendHeartBeat 0026  
                       ??_vscp_getUserID 000B                          _vscp_getMDF_URL 3E58  
                               __Lrparam 0000                    __end_of_doActionPulse 2A42  
                       __CANIDToRegs@val 000A                         __CANIDToRegs@ptr 0008  
                          doActionOn@arg 0051                            doActionOn@val 00CB  
                       _vscp_initledfunc 0056                         __size_of___lbmod 0028  
                 ??_vscp_handleHeartbeat 000C                         getCANFrame@flags 001D  
                           ?_WriteTimer0 0008                         getCANFrame@pdata 001B  
                      ??_doActionDisable 000C               vscp_writeAppReg@bInfoEvent 00CA  
                     __end_of_readEEPROM 3F1E                               ?_vscp_init 0001  
                           ?_doActionOff 0051                                 __ptext10 398A  
                               __ptext11 3256                                 __ptext20 1A72  
                               __ptext12 2872                                 __ptext21 3F54  
                               __ptext13 23FA                                 __ptext30 3362  
                               __ptext22 3F5E                                 __ptext14 3526  
                               __ptext31 3F8A                                 __ptext23 3E40  
                               __ptext15 0FD0                                 __ptext40 3F94  
                               __ptext32 3F8C                                 __ptext24 3D86  
                               __ptext16 3C60                                 __ptext41 3C0C  
                               __ptext33 3F8E                                 __ptext25 3DA8  
                               __ptext17 3D64                                 __ptext50 3DEA  
                               __ptext42 3BB0                                 __ptext34 3E88  
                               __ptext26 0622                                 __ptext18 2A42  
                               __ptext51 3CAE                                 __ptext43 3AB0  
                               __ptext35 3E9C                                 __ptext27 1606  
                               __ptext19 3F7C                                 __ptext60 2D74  
                               __ptext52 369A                                 __ptext44 3F68  
                               __ptext36 3E58                                 __ptext28 39F6  
                               __ptext61 3914                                 __ptext53 3AF4  
                               __ptext45 3CFA                                 __ptext37 3EB0  
                               __ptext29 3E26                                 __ptext70 3E70  
                               __ptext62 3D1E                                 __ptext54 2C0A  
                               __ptext46 3B34                                 __ptext38 3F90  
                               __ptext71 3E08                                 __ptext63 3EC4  
                               __ptext55 2ED8                                 __ptext47 3DCA  
                               __ptext39 3F92                                 __ptext72 3148  
                               __ptext64 3ED6                                 __ptext56 3C36  
                               __ptext48 3F30                                 __ptext73 3EFA  
                               __ptext65 3F72                                 __ptext57 389C  
                               __ptext49 35E0                                 __ptext74 3750  
                               __ptext66 3EE8                                 __ptext58 3BE0  
                               __ptext75 3F0C                                 __ptext67 3CD4  
                               __ptext59 2664                                 __ptext68 3B72  
                               __ptext77 3F1E                                 __ptext69 3806  
              vscp_sendHeartBeat@subzone 00C5                            ?_getVSCPFrame 001E  
                       ??_vscp_sendEvent 004B                          _vscp_getSubzone 3F40  
           calculateSetFilterMask@filter 003A                         ??_vscp_setUserID 000C  
                          __size_of_doDM 0320                            __size_of_main 00E0  
                          __size_of_init 003E                __size_of_vscp_writeAppReg 09AE  
                    _vscp_check_pstorage 3D1E                            init_app_ram@i 000D  
         vscp_handleProtocolEvent@i_1276 00E7           vscp_handleProtocolEvent@i_1279 00E9  
         vscp_handleProtocolEvent@i_1287 00E4                     __end_of_vscp_getGUID 3EC4  
                          ??_writeEEPROM 000B                __size_of_vscp_writeStdReg 01C8  
                    ECANSendMessage@data 0016                 ECANSendMessage@tempBSEL0 0030  
                           ?_getCANFrame 001A                      ECANSendMessage@mode 002D  
                   __end_of_vscp_getZone 3F54                      ECANSendMessage@temp 0033  
                      ?__ECANPointBuffer 0008                        doActionOn@dmflags 00CA  
                      vscp_setUserID@idx 000C                     __end_of_vscp_setGUID 3DCA  
                     vscp_readAppReg@reg 000C                       ??__ECANPointBuffer 000B  
         vscp_handleProtocolEvent@offset 00DC                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 000C                         init_app_eeprom@i 000D  
                       init_app_eeprom@j 000E                      _vscp_setControlByte 3EC4  
            __size_of_vscp_setSegmentCRC 0012                          _vscp_readAppReg 3750  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000B                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 008D                          _vscp_readStdReg 3362  
           vscp_handleDropNickname@bytes 000C               __end_of_vscp_newNodeOnline 3C36  
                     _ECANReceiveMessage 2664                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 008F                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 3E70  
                   ?_vscp_setControlByte 0001                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001                         ??_doActionToggle 00C7  
       __size_of_vscp_getSubMinorVersion 0002                         ??_doActionStatus 00C7  
                        _vscp_node_state 0092                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019                      vscp_getMatrixInfo@i 0008  
        __size_of_calculateSetFilterMask 046C                  vscp_setControlByte@ctrl 000B  
                     ECANSendMessage@ptr 0035                        ??_init_app_eeprom 000B  
                  __size_of__CANIDToRegs 0150                           readEEPROM@data 000A  
    __size_of_vscp_readNicknamePermanent 000A      __end_of_vscp_getBootLoaderAlgorithm 3F90  
            _vscp_getBootLoaderAlgorithm 3F8E         __size_of_interrupt_at_low_vector 009A  
                 ECANSendMessage@dataLen 0018                      __end_of_writeEEPROM 3CFA  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 000C                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 3F30             __end_of_ECANSetOperationMode 3E88  
                   _vscp_restoreDefaults 3F7C              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000B                  __end_of_vscp_getSubzone 3F4A  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 3D86                       __end_of_vscp_error 3F88  
                 ECANSendMessage@tempPtr 0031           __end_of_vscp_handleSetNickname 3D1E  
     vscp_handleProtocolEvent@bytes_1284 00E6                    ??_vscp_setControlByte 000B  
                   vscp_readRegister@reg 000E             ??_doApplicationOneSecondWork 00CC  
                           __CANIDToRegs 2ED8                   __size_ofi1_WriteTimer0 0012  
      vscp_handleProtocolEvent@page_save 00D8              __size_of_vscp_getBufferSize 0002  
      doApplicationOneSecondWork@ctrlreg 00D0                 __size_of_ECANSendMessage 016A  
                      doActionToggle@bOn 00CB                        doActionToggle@arg 0051  
