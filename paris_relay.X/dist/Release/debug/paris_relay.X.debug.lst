

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Sun Mar 22 23:10:44 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1
    79                           	psect	text67,global,reloc=2,class=CODE,delta=1
    80                           	psect	text68,global,reloc=2,class=CODE,delta=1
    81                           	psect	text69,global,reloc=2,class=CODE,delta=1
    82                           	psect	text70,global,reloc=2,class=CODE,delta=1
    83                           	psect	text71,global,reloc=2,class=CODE,delta=1
    84                           	psect	text72,global,reloc=2,class=CODE,delta=1
    85                           	psect	text73,global,reloc=2,class=CODE,delta=1
    86                           	psect	text74,global,reloc=2,class=CODE,delta=1
    87                           	psect	text75,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    89                           	psect	text77,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    92  0000                     
    93                           	psect	smallconst
    94  000600                     __psmallconst:
    95                           	opt stack 0
    96  000600                     _vscp_deviceURL:
    97                           	opt stack 0
    98  000600  77                 	db	119
    99  000601  77                 	db	119
   100  000602  77                 	db	119
   101  000603  2E                 	db	46
   102  000604  65                 	db	101
   103  000605  75                 	db	117
   104  000606  72                 	db	114
   105  000607  6F                 	db	111
   106  000608  73                 	db	115
   107  000609  6F                 	db	111
   108  00060A  75                 	db	117
   109  00060B  72                 	db	114
   110  00060C  63                 	db	99
   111  00060D  65                 	db	101
   112  00060E  2E                 	db	46
   113  00060F  73                 	db	115
   114  000610  65                 	db	101
   115  000611  2F                 	db	47
   116  000612  70                 	db	112
   117  000613  61                 	db	97
   118  000614  72                 	db	114
   119  000615  69                 	db	105
   120  000616  73                 	db	115
   121  000617  5F                 	db	95
   122  000618  30                 	db	48
   123  000619  31                 	db	49
   124  00061A  30                 	db	48
   125  00061B  2E                 	db	46
   126  00061C  78                 	db	120
   127  00061D  6D                 	db	109
   128  00061E  6C                 	db	108
   129  00061F  00                 	db	0
   130  000620                     __end_of_vscp_deviceURL:
   131                           	opt stack 0
   132  0000                     _BRGCON1	set	3952
   133  0000                     _BRGCON2	set	3953
   134  0000                     _BRGCON3	set	3954
   135  0000                     _BSEL0	set	3576
   136  0000                     _CANCON	set	3951
   137  0000                     _CIOCON	set	3955
   138  0000                     _ECANCON	set	3959
   139  0000                     _EEADR	set	4009
   140  0000                     _EECON1bits	set	4006
   141  0000                     _EECON2	set	4007
   142  0000                     _EEDATA	set	4008
   143  0000                     _INTCONbits	set	4082
   144  0000                     _LATBbits	set	3978
   145  0000                     _LATCbits	set	3979
   146  0000                     _MSEL0	set	3568
   147  0000                     _MSEL1	set	3569
   148  0000                     _MSEL2	set	3570
   149  0000                     _PIR2bits	set	4001
   150  0000                     _PORTA	set	3968
   151  0000                     _PORTB	set	3969
   152  0000                     _PORTC	set	3970
   153  0000                     _PORTCbits	set	3970
   154  0000                     _RXB1CONbits	set	3920
   155  0000                     _RXF0EIDH	set	3842
   156  0000                     _RXF0EIDL	set	3843
   157  0000                     _RXF0SIDH	set	3840
   158  0000                     _RXF0SIDL	set	3841
   159  0000                     _RXF1EIDH	set	3846
   160  0000                     _RXF1EIDL	set	3847
   161  0000                     _RXF1SIDL	set	3845
   162  0000                     _RXFBCON0	set	3552
   163  0000                     _RXFBCON1	set	3553
   164  0000                     _RXFBCON2	set	3554
   165  0000                     _RXFBCON3	set	3555
   166  0000                     _RXFBCON4	set	3556
   167  0000                     _RXFBCON5	set	3557
   168  0000                     _RXFBCON6	set	3558
   169  0000                     _RXFBCON7	set	3559
   170  0000                     _RXFCON0	set	3540
   171  0000                     _RXFCON1	set	3541
   172  0000                     _RXM0EIDH	set	3866
   173  0000                     _RXM0EIDL	set	3867
   174  0000                     _RXM0SIDH	set	3864
   175  0000                     _RXM0SIDL	set	3865
   176  0000                     _RXM1EIDH	set	3870
   177  0000                     _RXM1EIDL	set	3871
   178  0000                     _RXM1SIDL	set	3869
   179  0000                     _T0CON	set	4053
   180  0000                     _T0CONbits	set	4053
   181  0000                     _TMR0H	set	4055
   182  0000                     _TMR0L	set	4054
   183  0000                     _TRISA	set	3986
   184  0000                     _TRISB	set	3987
   185  0000                     _TRISC	set	3988
   186  0000                     _B0RXFUL	set	28935
   187  0000                     _B0TXEN	set	28610
   188  0000                     _B1RXFUL	set	29063
   189  0000                     _B1TXEN	set	28611
   190  0000                     _B2RXFUL	set	29191
   191  0000                     _B2TXEN	set	28612
   192  0000                     _B3RXFUL	set	29319
   193  0000                     _B3TXEN	set	28613
   194  0000                     _B4RXFUL	set	29447
   195  0000                     _B4TXEN	set	28614
   196  0000                     _B5RXFUL	set	29575
   197  0000                     _B5TXEN	set	28615
   198  0000                     _FIFOEMPTY	set	31655
   199  0000                     _IRXIF	set	32039
   200  0000                     _MDSEL0	set	31678
   201  0000                     _MDSEL1	set	31679
   202  0000                     _RXB0FILHIT0	set	31488
   203  0000                     _RXB0FUL	set	31495
   204  0000                     _RXB0IF	set	32032
   205  0000                     _RXB0OVFL	set	31655
   206  0000                     _RXB1IF	set	32033
   207  0000                     _RXB1OVFL	set	31654
   208  0000                     _RXF1EN	set	28321
   209  0000                     _RXM0EXIDM	set	30923
   210  0000                     _RXM1EXIDEN	set	30955
   211  0000                     _B0CON	set	3616
   212  0000                     _B1CON	set	3632
   213  0000                     _B2CON	set	3648
   214  0000                     _B3CON	set	3664
   215  0000                     _B4CON	set	3680
   216  0000                     _B5CON	set	3696
   217  0000                     _RXB0CON	set	3936
   218  0000                     _RXB1CON	set	3920
   219  0000                     _RXF1SIDH	set	3844
   220  0000                     _RXM1SIDH	set	3868
   221  0000                     _TXB0CON	set	3904
   222  0000                     _TXB1CON	set	3888
   223  0000                     _TXB2CON	set	3872
   224  000620  00                 	db	0	; dummy byte at the end
   225  0000                     
   226                           	psect	nvBANK0
   227  0000F1                     __pnvBANK0:
   228                           	opt stack 0
   229  0000F1                     ___DCDelay:
   230                           	opt stack 0
   231  0000F1                     	ds	1
   232                           
   233                           ; #config settings
   234  0000                     
   235                           	psect	cinit
   236  003D20                     __pcinit:
   237                           	opt stack 0
   238  003D20                     start_initialization:
   239                           	opt stack 0
   240  003D20                     __initialization:
   241                           	opt stack 0
   242                           
   243                           ; Clear objects allocated to BANK0 (86 bytes)
   244  003D20  EE00  F060         	lfsr	0,__pbssBANK0
   245  003D24  0E56               	movlw	86
   246  003D26                     clear_0:
   247  003D26  6AEE               	clrf	postinc0,c
   248  003D28  06E8               	decf	wreg,f,c
   249  003D2A  E1FD               	bnz	clear_0
   250                           
   251                           ; Clear objects allocated to COMRAM (7 bytes)
   252  003D2C  EE00  F052         	lfsr	0,__pbssCOMRAM
   253  003D30  0E07               	movlw	7
   254  003D32                     clear_1:
   255  003D32  6AEE               	clrf	postinc0,c
   256  003D34  06E8               	decf	wreg,f,c
   257  003D36  E1FD               	bnz	clear_1
   258  003D38                     end_of_initialization:
   259                           	opt stack 0
   260  003D38                     __end_of__initialization:
   261                           	opt stack 0
   262  003D38  0E00               	movlw	low (__Lmediumconst shr (0+16))
   263  003D3A  6EF8               	movwf	tblptru,c
   264  003D3C  0100               	movlb	0
   265  003D3E  EF12  F01A         	goto	_main	;jump to C main() function
   266                           tblptru	equ	0xFF8
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           
   270                           	psect	bssCOMRAM
   271  000052                     __pbssCOMRAM:
   272                           	opt stack 0
   273  000052                     _vscp_page_select:
   274                           	opt stack 0
   275  000052                     	ds	2
   276  000054                     __ECANRxFilterHitInfo:
   277                           	opt stack 0
   278  000054                     	ds	1
   279  000055                     _sendTimer:
   280                           	opt stack 0
   281  000055                     	ds	1
   282  000056                     _vscp_initledfunc:
   283                           	opt stack 0
   284  000056                     	ds	1
   285  000057                     _vscp_probe_address:
   286                           	opt stack 0
   287  000057                     	ds	1
   288  000058                     _vscp_statuscnt:
   289                           	opt stack 0
   290  000058                     	ds	1
   291                           tblptru	equ	0xFF8
   292                           postinc0	equ	0xFEE
   293                           wreg	equ	0xFE8
   294                           
   295                           	psect	bssBANK0
   296  000060                     __pbssBANK0:
   297                           	opt stack 0
   298  000060                     _relay_protection_timer:
   299                           	opt stack 0
   300  000060                     	ds	16
   301  000070                     _relay_pulse_timer:
   302                           	opt stack 0
   303  000070                     	ds	16
   304  000080                     _measurement_clock:
   305                           	opt stack 0
   306  000080                     	ds	4
   307  000084                     _vscp_configtimer:
   308                           	opt stack 0
   309  000084                     	ds	2
   310  000086                     _vscp_timer:
   311                           	opt stack 0
   312  000086                     	ds	2
   313  000088                     __IT_INT_MASK:
   314                           	opt stack 0
   315  000088                     	ds	1
   316  000089                     __IT_SAVE_BSR:
   317                           	opt stack 0
   318  000089                     	ds	1
   319  00008A                     __IT_SAVE_STATUS:
   320                           	opt stack 0
   321  00008A                     	ds	1
   322  00008B                     __IT_SAVE_WREG:
   323                           	opt stack 0
   324  00008B                     	ds	1
   325  00008C                     ___DCByte:
   326                           	opt stack 0
   327  00008C                     	ds	1
   328  00008D                     _hours:
   329                           	opt stack 0
   330  00008D                     	ds	1
   331  00008E                     _minutes:
   332                           	opt stack 0
   333  00008E                     	ds	1
   334  00008F                     _relay_pulse_flags:
   335                           	opt stack 0
   336  00008F                     	ds	1
   337  000090                     _seconds:
   338                           	opt stack 0
   339  000090                     	ds	1
   340  000091                     _vscp_alarmstatus:
   341                           	opt stack 0
   342  000091                     	ds	1
   343  000092                     _vscp_guid_reset:
   344                           	opt stack 0
   345  000092                     	ds	1
   346  000093                     _vscp_hour:
   347                           	opt stack 0
   348  000093                     	ds	1
   349  000094                     _vscp_initbtncnt:
   350                           	opt stack 0
   351  000094                     	ds	1
   352  000095                     _vscp_minute:
   353                           	opt stack 0
   354  000095                     	ds	1
   355  000096                     _vscp_nickname:
   356                           	opt stack 0
   357  000096                     	ds	1
   358  000097                     _vscp_node_state:
   359                           	opt stack 0
   360  000097                     	ds	1
   361  000098                     _vscp_node_substate:
   362                           	opt stack 0
   363  000098                     	ds	1
   364  000099                     _vscp_probe_cnt:
   365                           	opt stack 0
   366  000099                     	ds	1
   367  00009A                     _vscp_second:
   368                           	opt stack 0
   369  00009A                     	ds	1
   370  00009B                     _vscp_imsg:
   371                           	opt stack 0
   372  00009B                     	ds	14
   373  0000A9                     _vscp_omsg:
   374                           	opt stack 0
   375  0000A9                     	ds	13
   376                           tblptru	equ	0xFF8
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           
   380                           	psect	cstackBANK0
   381  0000B6                     __pcstackBANK0:
   382                           	opt stack 0
   383  0000B6                     ??_sendVSCPFrame:
   384                           
   385                           ; 0 bytes @ 0x0
   386  0000B6                     	ds	20
   387  0000CA                     ?_SendInformationEvent:
   388                           	opt stack 0
   389  0000CA                     ?_vscp_sendHeartBeat:
   390                           	opt stack 0
   391  0000CA                     SendInformationEvent@eventClass:
   392                           	opt stack 0
   393  0000CA                     vscp_sendHeartBeat@subzone:
   394                           	opt stack 0
   395                           
   396                           ; 1 bytes @ 0x14
   397  0000CA                     	ds	1
   398  0000CB                     SendInformationEvent@eventTypeId:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0x15
   402  0000CB                     	ds	1
   403  0000CC                     ??_doActionOff:
   404  0000CC                     ??_doActionOn:
   405  0000CC                     ??_doActionStatus:
   406  0000CC                     ??_doActionToggle:
   407  0000CC                     ??_vscp_writeAppReg:
   408                           
   409                           ; 0 bytes @ 0x16
   410  0000CC                     	ds	2
   411  0000CE                     doActionOff@dmflags:
   412                           	opt stack 0
   413  0000CE                     doActionStatus@dmflags:
   414                           	opt stack 0
   415  0000CE                     doActionToggle@dmflags:
   416                           	opt stack 0
   417                           
   418                           ; 1 bytes @ 0x18
   419  0000CE                     	ds	1
   420  0000CF                     vscp_writeAppReg@bInfoEvent:
   421                           	opt stack 0
   422  0000CF                     doActionOn@dmflags:
   423                           	opt stack 0
   424  0000CF                     doActionOff@val:
   425                           	opt stack 0
   426  0000CF                     doActionStatus@bOn:
   427                           	opt stack 0
   428  0000CF                     doActionToggle@val:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0x19
   432  0000CF                     	ds	1
   433  0000D0                     vscp_writeAppReg@val_678:
   434                           	opt stack 0
   435  0000D0                     doActionOn@val:
   436                           	opt stack 0
   437  0000D0                     doActionOff@i:
   438                           	opt stack 0
   439  0000D0                     doActionStatus@val:
   440                           	opt stack 0
   441  0000D0                     doActionToggle@bOn:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x1A
   445  0000D0                     	ds	1
   446  0000D1                     ??_doApplicationOneSecondWork:
   447  0000D1                     vscp_writeAppReg@bOn:
   448                           	opt stack 0
   449  0000D1                     doActionOn@i:
   450                           	opt stack 0
   451  0000D1                     doActionStatus@i:
   452                           	opt stack 0
   453  0000D1                     doActionToggle@i:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x1B
   457  0000D1                     	ds	1
   458  0000D2                     ??_doDM:
   459  0000D2                     vscp_writeAppReg@rv:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0x1C
   463  0000D2                     	ds	1
   464  0000D3                     vscp_writeAppReg@reg:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0x1D
   468  0000D3                     	ds	1
   469  0000D4                     ?_vscp_writeRegister:
   470                           	opt stack 0
   471  0000D4                     doApplicationOneSecondWork@bOn:
   472                           	opt stack 0
   473  0000D4                     vscp_writeRegister@value:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0x1E
   477  0000D4                     	ds	1
   478  0000D5                     doApplicationOneSecondWork@ctrlreg:
   479                           	opt stack 0
   480  0000D5                     vscp_writeRegister@reg:
   481                           	opt stack 0
   482  0000D5                     doDM@class_filter:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x1F
   486  0000D5                     	ds	1
   487  0000D6                     ??_vscp_handleProtocolEvent:
   488  0000D6                     doApplicationOneSecondWork@i:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x20
   492  0000D6                     	ds	1
   493  0000D7                     doDM@class_mask:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x21
   497  0000D7                     	ds	2
   498  0000D9                     doDM@type_filter:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x23
   502  0000D9                     	ds	1
   503  0000DA                     doDM@type_mask:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x24
   507  0000DA                     	ds	1
   508  0000DB                     _doDM$2154:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x25
   512  0000DB                     	ds	1
   513  0000DC                     _doDM$2155:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x26
   517  0000DC                     	ds	1
   518  0000DD                     _doDM$2156:
   519                           	opt stack 0
   520  0000DD                     vscp_handleProtocolEvent@page_save:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x27
   524  0000DD                     	ds	1
   525  0000DE                     _doDM$2157:
   526                           	opt stack 0
   527                           
   528                           ; 1 bytes @ 0x28
   529  0000DE                     	ds	1
   530  0000DF                     _doDM$2158:
   531                           	opt stack 0
   532  0000DF                     vscp_handleProtocolEvent@page_save_1290:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x29
   536  0000DF                     	ds	1
   537  0000E0                     _doDM$2159:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0x2A
   541  0000E0                     	ds	1
   542  0000E1                     doDM@dmflags:
   543                           	opt stack 0
   544  0000E1                     vscp_handleProtocolEvent@offset:
   545                           	opt stack 0
   546                           
   547                           ; 1 bytes @ 0x2B
   548  0000E1                     	ds	1
   549  0000E2                     doDM@i:
   550                           	opt stack 0
   551  0000E2                     vscp_handleProtocolEvent@pos:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x2C
   555  0000E2                     	ds	1
   556  0000E3                     vscp_handleProtocolEvent@bytes:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x2D
   560  0000E3                     	ds	1
   561  0000E4                     vscp_handleProtocolEvent@len:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x2E
   565  0000E4                     	ds	1
   566  0000E5                     vscp_handleProtocolEvent@pos_1279:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x2F
   570  0000E5                     	ds	1
   571  0000E6                     vscp_handleProtocolEvent@len_1280:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x30
   575  0000E6                     	ds	1
   576  0000E7                     vscp_handleProtocolEvent@bytes_this_time:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x31
   580  0000E7                     	ds	1
   581  0000E8                     vscp_handleProtocolEvent@cb:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x32
   585  0000E8                     	ds	1
   586  0000E9                     vscp_handleProtocolEvent@i_1289:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x33
   590  0000E9                     	ds	1
   591  0000EA                     vscp_handleProtocolEvent@k:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0x34
   595  0000EA                     	ds	1
   596  0000EB                     vscp_handleProtocolEvent@bytes_1286:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x35
   600  0000EB                     	ds	1
   601  0000EC                     vscp_handleProtocolEvent@i_1278:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x36
   605  0000EC                     	ds	1
   606  0000ED                     vscp_handleProtocolEvent@byte:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x37
   610  0000ED                     	ds	1
   611  0000EE                     vscp_handleProtocolEvent@i_1281:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x38
   615  0000EE                     	ds	1
   616  0000EF                     vscp_handleProtocolEvent@i:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x39
   620  0000EF                     	ds	1
   621  0000F0                     vscp_handleProtocolEvent@j:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x3A
   625  0000F0                     	ds	1
   626                           tblptru	equ	0xFF8
   627                           postinc0	equ	0xFEE
   628                           wreg	equ	0xFE8
   629                           
   630                           	psect	cstackCOMRAM
   631  000001                     __pcstackCOMRAM:
   632                           	opt stack 0
   633  000001                     ?i1_WriteTimer0:
   634                           	opt stack 0
   635  000001                     i1WriteTimer0@timer0:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x0
   639  000001                     	ds	2
   640  000003                     i1WriteTimer0@timer:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x2
   644  000003                     	ds	2
   645  000005                     ??_interrupt_at_low_vector:
   646                           
   647                           ; 0 bytes @ 0x4
   648  000005                     	ds	3
   649  000008                     ?_WriteTimer0:
   650                           	opt stack 0
   651  000008                     ?_writeEEPROM:
   652                           	opt stack 0
   653  000008                     ?__CANIDToRegs:
   654                           	opt stack 0
   655  000008                     ?__RegsToCANID:
   656                           	opt stack 0
   657  000008                     ??_vscp_getMDF_URL:
   658  000008                     ?_readEEPROM:
   659                           	opt stack 0
   660  000008                     ?___lbmod:
   661                           	opt stack 0
   662  000008                     ?__ECANPointBuffer:
   663                           	opt stack 0
   664  000008                     ?_vscp_getFamilyCode:
   665                           	opt stack 0
   666  000008                     ?_vscp_getFamilyType:
   667                           	opt stack 0
   668  000008                     vscp_getMatrixInfo@i:
   669                           	opt stack 0
   670  000008                     ECANSetOperationMode@mode:
   671                           	opt stack 0
   672  000008                     OpenTimer0@config:
   673                           	opt stack 0
   674  000008                     ___lbmod@divisor:
   675                           	opt stack 0
   676  000008                     __CANIDToRegs@ptr:
   677                           	opt stack 0
   678  000008                     __RegsToCANID@ptr:
   679                           	opt stack 0
   680  000008                     writeEEPROM@address:
   681                           	opt stack 0
   682  000008                     readEEPROM@address:
   683                           	opt stack 0
   684  000008                     WriteTimer0@timer0:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x7
   688  000008                     	ds	1
   689  000009                     vscp_getMDF_URL@idx:
   690                           	opt stack 0
   691  000009                     ___lbmod@dividend:
   692                           	opt stack 0
   693                           
   694                           ; 1 bytes @ 0x8
   695  000009                     	ds	1
   696  00000A                     __RegsToCANID@val:
   697                           	opt stack 0
   698  00000A                     writeEEPROM@data:
   699                           	opt stack 0
   700  00000A                     readEEPROM@data:
   701                           	opt stack 0
   702  00000A                     ___lbmod@counter:
   703                           	opt stack 0
   704  00000A                     WriteTimer0@timer:
   705                           	opt stack 0
   706  00000A                     __CANIDToRegs@val:
   707                           	opt stack 0
   708                           
   709                           ; 4 bytes @ 0x9
   710  00000A                     	ds	1
   711  00000B                     ??_init_app_eeprom:
   712  00000B                     ??_init_app_ram:
   713  00000B                     ?_doActionPulse:
   714                           	opt stack 0
   715  00000B                     ?_doActionDisable:
   716                           	opt stack 0
   717  00000B                     ?_vscp_setGUID:
   718                           	opt stack 0
   719  00000B                     ?_vscp_setManufacturerId:
   720                           	opt stack 0
   721  00000B                     ?_vscp_setUserID:
   722                           	opt stack 0
   723  00000B                     vscp_setGUID@data:
   724                           	opt stack 0
   725  00000B                     vscp_setManufacturerId@data:
   726                           	opt stack 0
   727  00000B                     vscp_writeNicknamePermanent@nickname:
   728                           	opt stack 0
   729  00000B                     vscp_readAppReg@rv:
   730                           	opt stack 0
   731  00000B                     doActionPulse@arg:
   732                           	opt stack 0
   733  00000B                     doActionDisable@arg:
   734                           	opt stack 0
   735  00000B                     vscp_getGUID@idx:
   736                           	opt stack 0
   737  00000B                     vscp_getUserID@idx:
   738                           	opt stack 0
   739  00000B                     vscp_setUserID@data:
   740                           	opt stack 0
   741  00000B                     vscp_getManufacturerId@idx:
   742                           	opt stack 0
   743  00000B                     vscp_setSegmentCRC@crc:
   744                           	opt stack 0
   745  00000B                     vscp_setControlByte@ctrl:
   746                           	opt stack 0
   747  00000B                     vscp_goBootloaderMode@algorithm:
   748                           	opt stack 0
   749  00000B                     __RegsToCANID@type:
   750                           	opt stack 0
   751  00000B                     __ECANPointBuffer@b:
   752                           	opt stack 0
   753  00000B                     ___lbmod@rem:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0xA
   757  00000B                     	ds	1
   758  00000C                     ??_doActionPulse:
   759  00000C                     ??_doActionDisable:
   760  00000C                     ??__RegsToCANID:
   761  00000C                     vscp_setGUID@idx:
   762                           	opt stack 0
   763  00000C                     vscp_setManufacturerId@idx:
   764                           	opt stack 0
   765  00000C                     vscp_readAppReg@reg:
   766                           	opt stack 0
   767  00000C                     vscp_setUserID@idx:
   768                           	opt stack 0
   769  00000C                     vscp_handleDropNickname@bytes:
   770                           	opt stack 0
   771  00000C                     vscp_readStdReg@rv:
   772                           	opt stack 0
   773  00000C                     __ECANPointBuffer@pt:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0xB
   777  00000C                     	ds	1
   778  00000D                     init_app_ram@i:
   779                           	opt stack 0
   780  00000D                     init_app_eeprom@i:
   781                           	opt stack 0
   782  00000D                     vscp_readStdReg@reg:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0xC
   786  00000D                     	ds	1
   787  00000E                     init_app_eeprom@j:
   788                           	opt stack 0
   789  00000E                     doActionDisable@dmflags:
   790                           	opt stack 0
   791  00000E                     __CANIDToRegs@type:
   792                           	opt stack 0
   793  00000E                     __RegsToCANID@Value:
   794                           	opt stack 0
   795  00000E                     vscp_readRegister@reg:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0xD
   799  00000E                     	ds	1
   800  00000F                     ??__CANIDToRegs:
   801  00000F                     ?_ECANReceiveMessage:
   802                           	opt stack 0
   803  00000F                     ?_vscp_writeStdReg:
   804                           	opt stack 0
   805  00000F                     doActionPulse@dmflags:
   806                           	opt stack 0
   807  00000F                     doActionDisable@val:
   808                           	opt stack 0
   809  00000F                     ECANReceiveMessage@data:
   810                           	opt stack 0
   811  00000F                     vscp_writeStdReg@value:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0xE
   815  00000F                     	ds	1
   816  000010                     ??_vscp_writeStdReg:
   817  000010                     doActionPulse@val:
   818                           	opt stack 0
   819  000010                     doActionDisable@i:
   820                           	opt stack 0
   821  000010                     ECANReceiveMessage@dataLen:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0xF
   825  000010                     	ds	1
   826  000011                     doActionPulse@i:
   827                           	opt stack 0
   828  000011                     ECANReceiveMessage@msgFlags:
   829                           	opt stack 0
   830  000011                     __CANIDToRegs@Value:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x10
   834  000011                     	ds	1
   835  000012                     ??_calculateSetFilterMask:
   836  000012                     ?_ECANSendMessage:
   837                           	opt stack 0
   838  000012                     ECANReceiveMessage@savedPtr:
   839                           	opt stack 0
   840  000012                     ECANSendMessage@id:
   841                           	opt stack 0
   842                           
   843                           ; 4 bytes @ 0x11
   844  000012                     	ds	2
   845  000014                     ECANReceiveMessage@id:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x13
   849  000014                     	ds	1
   850  000015                     ECANReceiveMessage@i:
   851                           	opt stack 0
   852  000015                     vscp_writeStdReg@code:
   853                           	opt stack 0
   854                           
   855                           ; 4 bytes @ 0x14
   856  000015                     	ds	1
   857  000016                     ECANReceiveMessage@mode:
   858                           	opt stack 0
   859  000016                     ECANSendMessage@data:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0x15
   863  000016                     	ds	1
   864  000017                     ECANReceiveMessage@temp:
   865                           	opt stack 0
   866                           
   867                           ; 1 bytes @ 0x16
   868  000017                     	ds	1
   869  000018                     ECANSendMessage@dataLen:
   870                           	opt stack 0
   871  000018                     ECANReceiveMessage@ptr:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x17
   875  000018                     	ds	1
   876  000019                     ECANSendMessage@msgFlags:
   877                           	opt stack 0
   878  000019                     vscp_writeStdReg@code_1270:
   879                           	opt stack 0
   880                           
   881                           ; 4 bytes @ 0x18
   882  000019                     	ds	1
   883  00001A                     ??_ECANSendMessage:
   884  00001A                     ?_getCANFrame:
   885                           	opt stack 0
   886  00001A                     getCANFrame@pdlc:
   887                           	opt stack 0
   888                           
   889                           ; 1 bytes @ 0x19
   890  00001A                     	ds	1
   891  00001B                     getCANFrame@pdata:
   892                           	opt stack 0
   893  00001B                     ECANSendMessage@pb:
   894                           	opt stack 0
   895                           
   896                           ; 18 bytes @ 0x1A
   897  00001B                     	ds	1
   898  00001C                     getCANFrame@pid:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x1B
   902  00001C                     	ds	1
   903  00001D                     getCANFrame@flags:
   904                           	opt stack 0
   905  00001D                     vscp_writeStdReg@idx:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x1C
   909  00001D                     	ds	1
   910  00001E                     ?_getVSCPFrame:
   911                           	opt stack 0
   912  00001E                     getVSCPFrame@pvscptype:
   913                           	opt stack 0
   914  00001E                     vscp_writeStdReg@idx_1271:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x1D
   918  00001E                     	ds	1
   919  00001F                     getVSCPFrame@pNodeId:
   920                           	opt stack 0
   921  00001F                     vscp_writeStdReg@rv:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x1E
   925  00001F                     	ds	1
   926  000020                     getVSCPFrame@pPriority:
   927                           	opt stack 0
   928  000020                     vscp_writeStdReg@reg:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0x1F
   932  000020                     	ds	1
   933  000021                     getVSCPFrame@pSize:
   934                           	opt stack 0
   935                           
   936                           ; 1 bytes @ 0x20
   937  000021                     	ds	1
   938  000022                     getVSCPFrame@pData:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x21
   942  000022                     	ds	1
   943  000023                     ??_getVSCPFrame:
   944                           
   945                           ; 0 bytes @ 0x22
   946  000023                     	ds	4
   947  000027                     getVSCPFrame@pvscpclass:
   948                           	opt stack 0
   949                           
   950                           ; 1 bytes @ 0x26
   951  000027                     	ds	1
   952  000028                     getVSCPFrame@id:
   953                           	opt stack 0
   954                           
   955                           ; 4 bytes @ 0x27
   956  000028                     	ds	4
   957  00002C                     vscp_getEvent@rv:
   958                           	opt stack 0
   959                           
   960                           ; 1 bytes @ 0x2B
   961  00002C                     	ds	1
   962  00002D                     ECANSendMessage@mode:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x2C
   966  00002D                     	ds	1
   967  00002E                     ECANSendMessage@buffers:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0x2D
   971  00002E                     	ds	1
   972  00002F                     ECANSendMessage@j:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0x2E
   976  00002F                     	ds	1
   977  000030                     ECANSendMessage@tempBSEL0:
   978                           	opt stack 0
   979                           
   980                           ; 1 bytes @ 0x2F
   981  000030                     	ds	1
   982  000031                     ECANSendMessage@tempPtr:
   983                           	opt stack 0
   984  000031                     calculateSetFilterMask@rowmask:
   985                           	opt stack 0
   986                           
   987                           ; 4 bytes @ 0x30
   988  000031                     	ds	2
   989  000033                     ECANSendMessage@temp:
   990                           	opt stack 0
   991                           
   992                           ; 1 bytes @ 0x32
   993  000033                     	ds	1
   994  000034                     ECANSendMessage@i:
   995                           	opt stack 0
   996                           
   997                           ; 1 bytes @ 0x33
   998  000034                     	ds	1
   999  000035                     calculateSetFilterMask@lastOID:
  1000                           	opt stack 0
  1001  000035                     ECANSendMessage@ptr:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x34
  1005  000035                     	ds	1
  1006  000036                     calculateSetFilterMask@mask:
  1007                           	opt stack 0
  1008                           
  1009                           ; 4 bytes @ 0x35
  1010  000036                     	ds	1
  1011  000037                     ?_sendCANFrame:
  1012                           	opt stack 0
  1013  000037                     sendCANFrame@id:
  1014                           	opt stack 0
  1015                           
  1016                           ; 4 bytes @ 0x36
  1017  000037                     	ds	3
  1018  00003A                     calculateSetFilterMask@filter:
  1019                           	opt stack 0
  1020                           
  1021                           ; 4 bytes @ 0x39
  1022  00003A                     	ds	1
  1023  00003B                     sendCANFrame@dlc:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x3A
  1027  00003B                     	ds	1
  1028  00003C                     sendCANFrame@pdata:
  1029                           	opt stack 0
  1030                           
  1031                           ; 2 bytes @ 0x3B
  1032  00003C                     	ds	2
  1033  00003E                     sendCANFrame@rv:
  1034                           	opt stack 0
  1035  00003E                     calculateSetFilterMask@rowfilter:
  1036                           	opt stack 0
  1037                           
  1038                           ; 4 bytes @ 0x3D
  1039  00003E                     	ds	1
  1040  00003F                     ?_sendVSCPFrame:
  1041                           	opt stack 0
  1042  00003F                     sendVSCPFrame@vscpclass:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x3E
  1046  00003F                     	ds	2
  1047  000041                     sendVSCPFrame@vscptype:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0x40
  1051  000041                     	ds	1
  1052  000042                     sendVSCPFrame@nodeid:
  1053                           	opt stack 0
  1054  000042                     calculateSetFilterMask@j:
  1055                           	opt stack 0
  1056                           
  1057                           ; 1 bytes @ 0x41
  1058  000042                     	ds	1
  1059  000043                     sendVSCPFrame@priority:
  1060                           	opt stack 0
  1061  000043                     calculateSetFilterMask@i:
  1062                           	opt stack 0
  1063                           
  1064                           ; 1 bytes @ 0x42
  1065  000043                     	ds	1
  1066  000044                     sendVSCPFrame@size:
  1067                           	opt stack 0
  1068                           
  1069                           ; 1 bytes @ 0x43
  1070  000044                     	ds	1
  1071  000045                     sendVSCPFrame@pData:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x44
  1075  000045                     	ds	2
  1076  000047                     sendVSCPFrame@id:
  1077                           	opt stack 0
  1078                           
  1079                           ; 4 bytes @ 0x46
  1080  000047                     	ds	4
  1081  00004B                     ??_SendInformationEvent:
  1082  00004B                     
  1083                           ; 0 bytes @ 0x4A
  1084  00004B                     	ds	1
  1085  00004C                     ??_vscp_newNodeOnline:
  1086  00004C                     vscp_sendHeartBeat@zone:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x4B
  1090  00004C                     	ds	1
  1091  00004D                     ??_vscp_doOneSecondWork:
  1092  00004D                     SendInformationEvent@data:
  1093                           	opt stack 0
  1094                           
  1095                           ; 3 bytes @ 0x4C
  1096  00004D                     	ds	3
  1097  000050                     SendInformationEvent@idx:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x4F
  1101  000050                     	ds	1
  1102  000051                     ?_doActionOff:
  1103                           	opt stack 0
  1104  000051                     ?_doActionOn:
  1105                           	opt stack 0
  1106  000051                     ?_doActionStatus:
  1107                           	opt stack 0
  1108  000051                     ?_doActionToggle:
  1109                           	opt stack 0
  1110  000051                     ?_vscp_writeAppReg:
  1111                           	opt stack 0
  1112  000051                     vscp_writeAppReg@val:
  1113                           	opt stack 0
  1114  000051                     doActionOn@arg:
  1115                           	opt stack 0
  1116  000051                     doActionOff@arg:
  1117                           	opt stack 0
  1118  000051                     doActionStatus@arg:
  1119                           	opt stack 0
  1120  000051                     doActionToggle@arg:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x50
  1124  000051                     	ds	1
  1125  000052                     tblptru	equ	0xFF8
  1126                           postinc0	equ	0xFEE
  1127                           wreg	equ	0xFE8
  1128                           
  1129                           ; 0 bytes @ 0x51
  1130 ;;
  1131 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1132 ;;
  1133 ;; *************** function _main *****************
  1134 ;; Defined at:
  1135 ;;		line 190 in file "../main.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;		None
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;		None
  1140 ;; Return value:  Size  Location     Type
  1141 ;;		None               void
  1142 ;; Registers used:
  1143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : F/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1149 ;;      Params:         0       0       0       0       0       0       0
  1150 ;;      Locals:         0       0       0       0       0       0       0
  1151 ;;      Temps:          0       0       0       0       0       0       0
  1152 ;;      Totals:         0       0       0       0       0       0       0
  1153 ;;Total ram usage:        0 bytes
  1154 ;; Hardware stack levels required when called:   10
  1155 ;; This function calls:
  1156 ;;		_init
  1157 ;;		_vscp_check_pstorage
  1158 ;;		_init_app_eeprom
  1159 ;;		_init_app_ram
  1160 ;;		_vscp_init
  1161 ;;		_writeEEPROM
  1162 ;;		_vscp_getEvent
  1163 ;;		_vscp_goActiveState
  1164 ;;		_vscp_handleProbeState
  1165 ;;		_vscp_handleProtocolEvent
  1166 ;;		_doDM
  1167 ;;		_vscp_error
  1168 ;;		_vscp_doOneSecondWork
  1169 ;;		_doApplicationOneSecondWork
  1170 ;;		_doWork
  1171 ;; This function is called by:
  1172 ;;		Startup code after reset
  1173 ;; This function uses a non-reentrant model
  1174 ;;
  1175                           
  1176                           	psect	text0
  1177  003424                     __ptext0:
  1178                           	opt stack 0
  1179  003424                     _main:
  1180                           	opt stack 20
  1181                           
  1182                           ;main.c: 191: init();
  1183                           
  1184                           ;incstack = 0
  1185                           ;incstack = 0
  1186  003424  ECA8  F01D         	call	_init	;wreg free
  1187                           
  1188                           ;main.c: 195: if ( !vscp_check_pstorage() ) {
  1189  003428  EC7E  F01E         	call	_vscp_check_pstorage	;wreg free
  1190  00342C  0900               	iorlw	0
  1191  00342E  E104               	bnz	l9211
  1192                           
  1193                           ;main.c: 198: init_app_eeprom();
  1194  003430  EC2C  F00D         	call	_init_app_eeprom	;wreg free
  1195                           
  1196                           ;main.c: 199: init_app_ram();
  1197  003434  EC93  F018         	call	_init_app_ram	;wreg free
  1198  003438                     l9211:
  1199                           
  1200                           ;main.c: 202: }
  1201                           ;main.c: 204: vscp_init();
  1202  003438  EC47  F01D         	call	_vscp_init	;wreg free
  1203  00343C                     l149:
  1204                           
  1205                           ; BSR set to: 0
  1206  00343C  0004               	clrwdt		;# 
  1207                           
  1208                           ;main.c: 210: if ( ( vscp_initbtncnt > 250 ) &&
  1209                           ;main.c: 211: ( 0x01 != vscp_node_state ) ) {
  1210  00343E  0EFA               	movlw	250
  1211  003440  0100               	movlb	0	; () banked
  1212  003442  6594               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1213  003444  D00C               	goto	l9221
  1214                           
  1215                           ; BSR set to: 0
  1216  003446  0597               	decf	_vscp_node_state& (0+255),w,b
  1217  003448  E00A               	bz	l9221
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;main.c: 214: vscp_nickname = 0xff;
  1221  00344A  6996               	setf	_vscp_nickname& (0+255),b
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;main.c: 215: writeEEPROM( 0x01, 0xff );
  1225  00344C  6A09               	clrf	?_writeEEPROM+1,c
  1226  00344E  0E01               	movlw	1
  1227  003450  6E08               	movwf	?_writeEEPROM,c
  1228  003452  0EFF               	movlw	255
  1229  003454  680A               	setf	?_writeEEPROM+2,c
  1230  003456  EC59  F01E         	call	_writeEEPROM	;wreg free
  1231                           
  1232                           ;main.c: 216: vscp_init();
  1233  00345A  EC47  F01D         	call	_vscp_init	;wreg free
  1234  00345E                     l9221:
  1235                           
  1236                           ; BSR set to: 0
  1237                           ;main.c: 218: }
  1238                           ;main.c: 221: vscp_imsg.flags = 0;
  1239  00345E  6B9B               	clrf	_vscp_imsg& (0+255),b
  1240                           
  1241                           ; BSR set to: 0
  1242                           ;main.c: 222: vscp_getEvent();
  1243  003460  EC0A  F01E         	call	_vscp_getEvent	;wreg free
  1244                           
  1245                           ;main.c: 224: switch ( vscp_node_state ) {
  1246  003464  D01C               	goto	l9245
  1247  003466                     l9225:
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;main.c: 229: if (0xff == vscp_nickname) {
  1251  003466  2996               	incf	_vscp_nickname& (0+255),w,b
  1252  003468  E103               	bnz	l9229
  1253                           
  1254                           ; BSR set to: 0
  1255                           ;main.c: 231: vscp_node_state = 0x01;
  1256  00346A  0E01               	movlw	1
  1257  00346C  6F97               	movwf	_vscp_node_state& (0+255),b
  1258                           
  1259                           ;main.c: 232: } else {
  1260  00346E  D023               	goto	l9247
  1261  003470                     l9229:
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;main.c: 234: vscp_node_state = 0x03;
  1265  003470  0E03               	movlw	3
  1266  003472  6F97               	movwf	_vscp_node_state& (0+255),b
  1267  003474                     l9231:
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;main.c: 235: vscp_goActiveState();
  1271  003474  ECE4  F01E         	call	_vscp_goActiveState	;wreg free
  1272  003478  D01E               	goto	l9247
  1273  00347A                     l9233:
  1274                           
  1275                           ; BSR set to: 0
  1276                           ;main.c: 240: vscp_handleProbeState();
  1277  00347A  ECDF  F01A         	call	_vscp_handleProbeState	;wreg free
  1278                           
  1279                           ;main.c: 241: break;
  1280  00347E  D01B               	goto	l9247
  1281  003480                     l158:
  1282                           
  1283                           ; BSR set to: 0
  1284                           ;main.c: 250: if (vscp_imsg.flags & 0x80) {
  1285  003480  AF9B               	btfss	_vscp_imsg& (0+255),7,b
  1286  003482  D019               	goto	l9247
  1287                           
  1288                           ; BSR set to: 0
  1289                           ;main.c: 252: if ( 0 == vscp_imsg.vscp_class ) {
  1290  003484  519E               	movf	(_vscp_imsg+3)& (0+255),w,b
  1291  003486  119D               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1292  003488  B4D8               	btfsc	status,2,c
  1293                           
  1294                           ; BSR set to: 0
  1295                           ;main.c: 255: vscp_handleProtocolEvent();
  1296  00348A  ECE8  F007         	call	_vscp_handleProtocolEvent	;wreg free
  1297                           
  1298                           ;main.c: 257: }
  1299                           ;main.c: 259: doDM();
  1300  00348E  ECE7  F00E         	call	_doDM	;wreg free
  1301  003492  D011               	goto	l9247
  1302  003494                     l9241:
  1303                           
  1304                           ; BSR set to: 0
  1305                           ;main.c: 265: vscp_error();
  1306  003494  ECB5  F01F         	call	_vscp_error	;wreg free
  1307                           
  1308                           ;main.c: 266: break;
  1309  003498  D00E               	goto	l9247
  1310  00349A                     l162:
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;main.c: 269: vscp_node_state = 0x00;
  1314  00349A  6B97               	clrf	_vscp_node_state& (0+255),b
  1315                           
  1316                           ;main.c: 270: break;
  1317  00349C  D00C               	goto	l9247
  1318  00349E                     l9245:
  1319  00349E  0100               	movlb	0	; () banked
  1320  0034A0  5197               	movf	_vscp_node_state& (0+255),w,b
  1321                           
  1322                           ; Switch size 1, requested type "speed"
  1323                           ; Number of cases is 5, Range of values is 0 to 4
  1324                           ; switch strategies available:
  1325                           ; Name         Instructions Cycles
  1326                           ; simple_byte           16     9 (average)
  1327                           ;	Chosen strategy is simple_byte
  1328  0034A2  E0E1               	bz	l9225
  1329  0034A4  0A01               	xorlw	1	; case 1
  1330  0034A6  E0E9               	bz	l9233
  1331  0034A8  0A03               	xorlw	3	; case 2
  1332  0034AA  E0E4               	bz	l9231
  1333  0034AC  0A01               	xorlw	1	; case 3
  1334  0034AE  E0E8               	bz	l158
  1335  0034B0  0A07               	xorlw	7	; case 4
  1336  0034B2  E0F0               	bz	l9241
  1337  0034B4  D7F2               	goto	l162
  1338  0034B6                     l9247:
  1339                           
  1340                           ;main.c: 275: if ( measurement_clock > 1000 ) {
  1341  0034B6  0EE9               	movlw	233
  1342  0034B8  0100               	movlb	0	; () banked
  1343  0034BA  5D80               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1344  0034BC  0E03               	movlw	3
  1345  0034BE  5981               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1346  0034C0  0E00               	movlw	0
  1347  0034C2  5982               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1348  0034C4  0E00               	movlw	0
  1349  0034C6  5983               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1350  0034C8  E30C               	bnc	l9259
  1351                           
  1352                           ; BSR set to: 0
  1353                           ;main.c: 277: measurement_clock = 0;
  1354  0034CA  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
  1355  0034CC  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1356  0034CE  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1357  0034D0  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;main.c: 279: sendTimer++;
  1361  0034D2  2A55               	incf	_sendTimer,f,c
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;main.c: 282: vscp_doOneSecondWork();
  1365  0034D4  EC20  F01D         	call	_vscp_doOneSecondWork	;wreg free
  1366                           
  1367                           ; BSR set to: 0
  1368                           ;main.c: 286: if ( 0x03 == vscp_node_state ) {
  1369  0034D8  5197               	movf	_vscp_node_state& (0+255),w,b
  1370  0034DA  0A03               	xorlw	3
  1371  0034DC  B4D8               	btfsc	status,2,c
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;main.c: 289: doApplicationOneSecondWork();
  1375  0034DE  EC73  F010         	call	_doApplicationOneSecondWork	;wreg free
  1376  0034E2                     l9259:
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;main.c: 291: }
  1380                           ;main.c: 293: }
  1381                           ;main.c: 296: if ( seconds > 59 ) {
  1382  0034E2  0E3B               	movlw	59
  1383  0034E4  6590               	cpfsgt	_seconds& (0+255),b
  1384  0034E6  D00B               	goto	l9275
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;main.c: 298: seconds = 0;
  1388  0034E8  6B90               	clrf	_seconds& (0+255),b
  1389                           
  1390                           ; BSR set to: 0
  1391                           ;main.c: 299: minutes++;
  1392  0034EA  2B8E               	incf	_minutes& (0+255),f,b
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;main.c: 301: if ( minutes > 59 ) {
  1396  0034EC  0E3B               	movlw	59
  1397  0034EE  658E               	cpfsgt	_minutes& (0+255),b
  1398  0034F0  D002               	goto	l9271
  1399                           
  1400                           ; BSR set to: 0
  1401                           ;main.c: 302: minutes = 0;
  1402  0034F2  6B8E               	clrf	_minutes& (0+255),b
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;main.c: 303: hours++;
  1406  0034F4  2B8D               	incf	_hours& (0+255),f,b
  1407  0034F6                     l9271:
  1408                           
  1409                           ; BSR set to: 0
  1410                           ;main.c: 304: }
  1411                           ;main.c: 306: if ( hours > 23 ) hours = 0;
  1412  0034F6  0E17               	movlw	23
  1413  0034F8  658D               	cpfsgt	_hours& (0+255),b
  1414  0034FA  D001               	goto	l9275
  1415                           
  1416                           ; BSR set to: 0
  1417  0034FC  6B8D               	clrf	_hours& (0+255),b
  1418  0034FE                     l9275:
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;main.c: 308: }
  1422                           ;main.c: 310: doWork();
  1423  0034FE  ECB7  F01F         	call	_doWork	;wreg free
  1424  003502  D79C               	goto	l149
  1425  003504                     __end_of_main:
  1426                           	opt stack 0
  1427                           tblptru	equ	0xFF8
  1428                           postinc0	equ	0xFEE
  1429                           wreg	equ	0xFE8
  1430                           status	equ	0xFD8
  1431                           
  1432 ;; *************** function _doWork *****************
  1433 ;; Defined at:
  1434 ;;		line 887 in file "../main.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;		None
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;		None
  1439 ;; Return value:  Size  Location     Type
  1440 ;;		None               void
  1441 ;; Registers used:
  1442 ;;		wreg, status,2, status,0
  1443 ;; Tracked objects:
  1444 ;;		On entry : F/0
  1445 ;;		On exit  : F/0
  1446 ;;		Unchanged: F/0
  1447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1448 ;;      Params:         0       0       0       0       0       0       0
  1449 ;;      Locals:         0       0       0       0       0       0       0
  1450 ;;      Temps:          0       0       0       0       0       0       0
  1451 ;;      Totals:         0       0       0       0       0       0       0
  1452 ;;Total ram usage:        0 bytes
  1453 ;; Hardware stack levels used:    1
  1454 ;; Hardware stack levels required when called:    2
  1455 ;; This function calls:
  1456 ;;		Nothing
  1457 ;; This function is called by:
  1458 ;;		_main
  1459 ;; This function uses a non-reentrant model
  1460 ;;
  1461                           
  1462                           	psect	text1
  1463  003F6E                     __ptext1:
  1464                           	opt stack 0
  1465  003F6E                     _doWork:
  1466                           	opt stack 27
  1467                           
  1468                           ; BSR set to: 0
  1469                           
  1470                           ; BSR set to: 0
  1471                           
  1472                           ; BSR set to: 0
  1473                           ;incstack = 0
  1474                           ;incstack = 0
  1475  003F6E  0012               	return	
  1476  003F70                     __end_of_doWork:
  1477                           	opt stack 0
  1478                           tblptru	equ	0xFF8
  1479                           postinc0	equ	0xFEE
  1480                           wreg	equ	0xFE8
  1481                           status	equ	0xFD8
  1482                           
  1483 ;; *************** function _doApplicationOneSecondWork *****************
  1484 ;; Defined at:
  1485 ;;		line 592 in file "../main.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;		None
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  i               1   32[BANK0 ] unsigned char 
  1490 ;;  ctrlreg         1   31[BANK0 ] unsigned char 
  1491 ;;  bOn             1   30[BANK0 ] enum E15660
  1492 ;; Return value:  Size  Location     Type
  1493 ;;		None               void
  1494 ;; Registers used:
  1495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1496 ;; Tracked objects:
  1497 ;;		On entry : F/0
  1498 ;;		On exit  : F/0
  1499 ;;		Unchanged: 0/0
  1500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1501 ;;      Params:         0       0       0       0       0       0       0
  1502 ;;      Locals:         0       3       0       0       0       0       0
  1503 ;;      Temps:          0       3       0       0       0       0       0
  1504 ;;      Totals:         0       6       0       0       0       0       0
  1505 ;;Total ram usage:        6 bytes
  1506 ;; Hardware stack levels used:    1
  1507 ;; Hardware stack levels required when called:    8
  1508 ;; This function calls:
  1509 ;;		_readEEPROM
  1510 ;;		_doActionOff
  1511 ;;		_SendInformationEvent
  1512 ;; This function is called by:
  1513 ;;		_main
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text2
  1518  0020E6                     __ptext2:
  1519                           	opt stack 0
  1520  0020E6                     _doApplicationOneSecondWork:
  1521                           	opt stack 21
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;main.c: 594: uint8_t i;
  1525                           ;main.c: 595: uint8_t ctrlreg;
  1526                           ;main.c: 596: BOOL bOn = 0;
  1527                           
  1528                           ; BSR set to: 0
  1529                           ;incstack = 0
  1530                           ;incstack = 0
  1531  0020E6  6BD4               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1532                           
  1533                           ;main.c: 598: for ( i = 0; i < 8; i++ ) {
  1534  0020E8  6BD6               	clrf	doApplicationOneSecondWork@i& (0+255),b
  1535  0020EA                     l9767:
  1536                           
  1537                           ; BSR set to: 0
  1538  0020EA  0E07               	movlw	7
  1539  0020EC  65D6               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  1540  0020EE  D001               	goto	l9771
  1541  0020F0  D172               	goto	l234
  1542  0020F2                     l9771:
  1543                           
  1544                           ; BSR set to: 0
  1545                           ;main.c: 601: ctrlreg = readEEPROM( 0x43 + 10 + i );
  1546  0020F2  0E4D               	movlw	77
  1547  0020F4  25D6               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1548  0020F6  6E08               	movwf	?_readEEPROM,c
  1549  0020F8  6A09               	clrf	?_readEEPROM+1,c
  1550  0020FA  0E00               	movlw	0
  1551  0020FC  2209               	addwfc	?_readEEPROM+1,f,c
  1552  0020FE  EC81  F01F         	call	_readEEPROM	;wreg free
  1553  002102  0100               	movlb	0	; () banked
  1554  002104  6FD5               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  1555                           
  1556                           ; BSR set to: 0
  1557                           ;main.c: 604: if ( !( ctrlreg & 0x80 ) ) continue;
  1558  002106  AFD5               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  1559  002108  D164               	goto	l9855
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;main.c: 608: if ( relay_protection_timer[ i ] ) {
  1563                           
  1564                           ; BSR set to: 0
  1565  00210A  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1566  00210C  0D02               	mullw	2
  1567  00210E  50F3               	movf	prodl,w,c
  1568  002110  0F60               	addlw	low _relay_protection_timer
  1569  002112  6ED9               	movwf	fsr2l,c
  1570  002114  6ADA               	clrf	fsr2h,c
  1571  002116  50DE               	movf	postinc2,w,c
  1572  002118  10DD               	iorwf	postdec2,w,c
  1573  00211A  E037               	bz	l9789
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;main.c: 610: relay_protection_timer[ i ]--;
  1577  00211C  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1578  00211E  0D02               	mullw	2
  1579  002120  50F3               	movf	prodl,w,c
  1580  002122  0F60               	addlw	low _relay_protection_timer
  1581  002124  6ED9               	movwf	fsr2l,c
  1582  002126  6ADA               	clrf	fsr2h,c
  1583  002128  06DE               	decf	postinc2,f,c
  1584  00212A  0E00               	movlw	0
  1585  00212C  5ADD               	subwfb	postdec2,f,c
  1586                           
  1587                           ;main.c: 613: if ( !relay_protection_timer[ i ] &&
  1588                           ;main.c: 614: ( readEEPROM( 0x43 + 10 + i ) &
  1589                           ;main.c: 615: 0x04 ) ) {
  1590  00212E  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1591  002130  0D02               	mullw	2
  1592  002132  50F3               	movf	prodl,w,c
  1593  002134  0F60               	addlw	low _relay_protection_timer
  1594  002136  6ED9               	movwf	fsr2l,c
  1595  002138  6ADA               	clrf	fsr2h,c
  1596  00213A  50DE               	movf	postinc2,w,c
  1597  00213C  10DD               	iorwf	postdec2,w,c
  1598  00213E  E146               	bnz	l9791
  1599                           
  1600                           ; BSR set to: 0
  1601  002140  0E4D               	movlw	77
  1602  002142  25D6               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1603  002144  6E08               	movwf	?_readEEPROM,c
  1604  002146  6A09               	clrf	?_readEEPROM+1,c
  1605  002148  0E00               	movlw	0
  1606  00214A  2209               	addwfc	?_readEEPROM+1,f,c
  1607  00214C  EC81  F01F         	call	_readEEPROM	;wreg free
  1608  002150  0100               	movlb	0	; () banked
  1609  002152  6FD1               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1610  002154  A5D1               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1611  002156  D03A               	goto	l9791
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;main.c: 618: doActionOff( 0, (1 << i) );
  1615  002158  C0D6  F0D1         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1616  00215C  0E01               	movlw	1
  1617  00215E  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1618  002160  2BD1               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1619  002162  D002               	goto	u12024
  1620  002164                     u12025:
  1621  002164  90D8               	bcf	status,0,c
  1622  002166  37D2               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1623  002168                     u12024:
  1624  002168  2FD1               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1625  00216A  D7FC               	goto	u12025
  1626  00216C  51D2               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1627  00216E  6E51               	movwf	?_doActionOff,c
  1628  002170  0E00               	movlw	0
  1629  002172  EC82  F01A         	call	_doActionOff
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;main.c: 621: if ( ctrlreg & 0x02 ) {
  1633  002176  A3D5               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  1634  002178  D029               	goto	l9791
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;main.c: 622: SendInformationEvent( i, 1,
  1638                           ;main.c: 623: 2 );
  1639  00217A  0E01               	movlw	1
  1640  00217C  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  1641  00217E  0E02               	movlw	2
  1642  002180  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1643  002182  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1644  002184  ECEA  F01C         	call	_SendInformationEvent
  1645  002188  D021               	goto	l9791
  1646  00218A                     l9789:
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;main.c: 628: else {
  1650                           ;main.c: 630: relay_protection_timer[ i ] =
  1651                           ;main.c: 631: readEEPROM(0x43 + 34 + i ) * 256 +
  1652                           ;main.c: 632: readEEPROM(0x43 + 35 + i );
  1653  00218A  0E65               	movlw	101
  1654  00218C  25D6               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1655  00218E  6E08               	movwf	?_readEEPROM,c
  1656  002190  6A09               	clrf	?_readEEPROM+1,c
  1657  002192  0E00               	movlw	0
  1658  002194  2209               	addwfc	?_readEEPROM+1,f,c
  1659  002196  EC81  F01F         	call	_readEEPROM	;wreg free
  1660  00219A  0100               	movlb	0	; () banked
  1661  00219C  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1662  00219E  6BD1               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1663  0021A0  0E66               	movlw	102
  1664  0021A2  25D6               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1665  0021A4  6E08               	movwf	?_readEEPROM,c
  1666  0021A6  6A09               	clrf	?_readEEPROM+1,c
  1667  0021A8  0E00               	movlw	0
  1668  0021AA  2209               	addwfc	?_readEEPROM+1,f,c
  1669  0021AC  EC81  F01F         	call	_readEEPROM	;wreg free
  1670  0021B0  0100               	movlb	0	; () banked
  1671  0021B2  27D1               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1672  0021B4  0E00               	movlw	0
  1673  0021B6  23D2               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1674  0021B8  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1675  0021BA  0D02               	mullw	2
  1676  0021BC  50F3               	movf	prodl,w,c
  1677  0021BE  0F60               	addlw	low _relay_protection_timer
  1678  0021C0  6ED9               	movwf	fsr2l,c
  1679  0021C2  6ADA               	clrf	fsr2h,c
  1680  0021C4  C0D1  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1681  0021C8  C0D2  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1682  0021CC                     l9791:
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;main.c: 633: }
  1686                           ;main.c: 636: if ( relay_pulse_flags & (1 << i) ) {
  1687  0021CC  C0D6  F0D1         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1688  0021D0  0E01               	movlw	1
  1689  0021D2  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1690  0021D4  2BD1               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1691  0021D6  D002               	goto	u12044
  1692  0021D8                     u12045:
  1693  0021D8  90D8               	bcf	status,0,c
  1694  0021DA  37D2               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1695  0021DC                     u12044:
  1696  0021DC  2FD1               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1697  0021DE  D7FC               	goto	u12045
  1698  0021E0  51D2               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1699  0021E2  158F               	andwf	_relay_pulse_flags& (0+255),w,b
  1700  0021E4  E101 D0F5          	bz	l9855
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;main.c: 638: if ( relay_pulse_timer[ i ] ) {
  1704  0021E8  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1705  0021EA  0D02               	mullw	2
  1706  0021EC  50F3               	movf	prodl,w,c
  1707  0021EE  0F70               	addlw	low _relay_pulse_timer
  1708  0021F0  6ED9               	movwf	fsr2l,c
  1709  0021F2  6ADA               	clrf	fsr2h,c
  1710  0021F4  50DE               	movf	postinc2,w,c
  1711  0021F6  10DD               	iorwf	postdec2,w,c
  1712  0021F8  E101 D0CC          	bz	l9853
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;main.c: 640: relay_pulse_timer[ i ]--;
  1716  0021FC  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1717  0021FE  0D02               	mullw	2
  1718  002200  50F3               	movf	prodl,w,c
  1719  002202  0F70               	addlw	low _relay_pulse_timer
  1720  002204  6ED9               	movwf	fsr2l,c
  1721  002206  6ADA               	clrf	fsr2h,c
  1722  002208  06DE               	decf	postinc2,f,c
  1723  00220A  0E00               	movlw	0
  1724  00220C  5ADD               	subwfb	postdec2,f,c
  1725                           
  1726                           ;main.c: 643: if ( !relay_pulse_timer[ i ] ) {
  1727  00220E  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1728  002210  0D02               	mullw	2
  1729  002212  50F3               	movf	prodl,w,c
  1730  002214  0F70               	addlw	low _relay_pulse_timer
  1731  002216  6ED9               	movwf	fsr2l,c
  1732  002218  6ADA               	clrf	fsr2h,c
  1733  00221A  50DE               	movf	postinc2,w,c
  1734  00221C  10DD               	iorwf	postdec2,w,c
  1735  00221E  E02E               	bz	l9829
  1736  002220  D0D8               	goto	l9855
  1737  002222                     l204:
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;main.c: 648: if ( LATBbits.LATB4 ) {
  1741  002222  A88A               	btfss	3978,4,c	;volatile
  1742  002224  D002               	goto	l205
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;main.c: 649: LATBbits.LATB4 = 0;
  1746  002226  988A               	bcf	3978,4,c	;volatile
  1747  002228  D025               	goto	L6
  1748  00222A                     l205:
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;main.c: 652: LATBbits.LATB4 = 1;
  1752  00222A  888A               	bsf	3978,4,c	;volatile
  1753  00222C                     l9801:
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;main.c: 653: bOn = 1;
  1757  00222C  0E01               	movlw	1
  1758  00222E  6FD4               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  1759  002230  D033               	goto	l9831
  1760  002232                     l208:
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;main.c: 658: if ( LATBbits.LATB1 ) {
  1764  002232  A28A               	btfss	3978,1,c	;volatile
  1765  002234  D002               	goto	l209
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;main.c: 659: LATBbits.LATB1 = 0;
  1769  002236  928A               	bcf	3978,1,c	;volatile
  1770  002238  D01D               	goto	L6
  1771  00223A                     l209:
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;main.c: 662: LATBbits.LATB1 = 1;
  1775  00223A  828A               	bsf	3978,1,c	;volatile
  1776  00223C  D7F7               	goto	l9801
  1777  00223E                     l211:
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;main.c: 668: if ( LATBbits.LATB0 ) {
  1781  00223E  A08A               	btfss	3978,0,c	;volatile
  1782  002240  D002               	goto	l212
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;main.c: 669: LATBbits.LATB0 = 0;
  1786  002242  908A               	bcf	3978,0,c	;volatile
  1787  002244  D017               	goto	L6
  1788  002246                     l212:
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;main.c: 672: LATBbits.LATB0 = 1;
  1792  002246  808A               	bsf	3978,0,c	;volatile
  1793  002248  D7F1               	goto	l9801
  1794  00224A                     l214:
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;main.c: 678: if ( LATCbits.LATC7 ) {
  1798  00224A  AE8B               	btfss	3979,7,c	;volatile
  1799  00224C  D002               	goto	l215
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;main.c: 679: LATCbits.LATC7 = 0;
  1803  00224E  9E8B               	bcf	3979,7,c	;volatile
  1804  002250  D011               	goto	L6
  1805  002252                     l215:
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;main.c: 682: LATCbits.LATC7 = 1;
  1809  002252  8E8B               	bsf	3979,7,c	;volatile
  1810  002254  D7EB               	goto	l9801
  1811  002256                     l217:
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;main.c: 688: if ( LATCbits.LATC6 ) {
  1815  002256  AC8B               	btfss	3979,6,c	;volatile
  1816  002258  D002               	goto	l218
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;main.c: 689: LATCbits.LATC6 = 0;
  1820  00225A  9C8B               	bcf	3979,6,c	;volatile
  1821  00225C  D00B               	goto	L6
  1822  00225E                     l218:
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;main.c: 692: LATCbits.LATC6 = 1;
  1826  00225E  8C8B               	bsf	3979,6,c	;volatile
  1827  002260  D7E5               	goto	l9801
  1828  002262                     l220:
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;main.c: 698: if ( LATCbits.LATC5 ) {
  1832  002262  AA8B               	btfss	3979,5,c	;volatile
  1833  002264  D002               	goto	l221
  1834                           
  1835                           ; BSR set to: 0
  1836                           ;main.c: 699: LATCbits.LATC5 = 0;
  1837  002266  9A8B               	bcf	3979,5,c	;volatile
  1838  002268  D005               	goto	L6
  1839  00226A                     l221:
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;main.c: 702: LATCbits.LATC5 = 1;
  1843  00226A  8A8B               	bsf	3979,5,c	;volatile
  1844  00226C  D7DF               	goto	l9801
  1845  00226E                     l223:
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;main.c: 708: if ( LATCbits.LATC4 ) {
  1849  00226E  A88B               	btfss	3979,4,c	;volatile
  1850  002270  D003               	goto	l224
  1851                           
  1852                           ; BSR set to: 0
  1853                           ;main.c: 709: LATCbits.LATC4 = 0;
  1854  002272  988B               	bcf	3979,4,c	;volatile
  1855  002274                     L6:
  1856                           
  1857                           ;main.c: 710: bOn = 0;
  1858  002274  6BD4               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1859                           
  1860                           ;main.c: 711: } else {
  1861  002276  D010               	goto	l9831
  1862  002278                     l224:
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;main.c: 712: LATCbits.LATC4 = 1;
  1866  002278  888B               	bsf	3979,4,c	;volatile
  1867  00227A  D7D8               	goto	l9801
  1868  00227C                     l9829:
  1869                           
  1870                           ; BSR set to: 0
  1871  00227C  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1872                           
  1873                           ; Switch size 1, requested type "speed"
  1874                           ; Number of cases is 7, Range of values is 0 to 6
  1875                           ; switch strategies available:
  1876                           ; Name         Instructions Cycles
  1877                           ; simple_byte           22    12 (average)
  1878                           ;	Chosen strategy is simple_byte
  1879  00227E  E0D1               	bz	l204
  1880  002280  0A01               	xorlw	1	; case 1
  1881  002282  E0D7               	bz	l208
  1882  002284  0A03               	xorlw	3	; case 2
  1883  002286  E0DB               	bz	l211
  1884  002288  0A01               	xorlw	1	; case 3
  1885  00228A  E0DF               	bz	l214
  1886  00228C  0A07               	xorlw	7	; case 4
  1887  00228E  E0E3               	bz	l217
  1888  002290  0A01               	xorlw	1	; case 5
  1889  002292  E0E7               	bz	l220
  1890  002294  0A03               	xorlw	3	; case 6
  1891  002296  E0EB               	bz	l223
  1892  002298                     l9831:
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;main.c: 720: relay_pulse_timer[ i ] =
  1896                           ;main.c: 721: readEEPROM( 0x43 +
  1897                           ;main.c: 722: 18 + 2*i ) * 256 +
  1898                           ;main.c: 723: readEEPROM( 0x43 +
  1899                           ;main.c: 724: 19 + 2*i );
  1900  002298  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1901  00229A  0D02               	mullw	2
  1902  00229C  0E55               	movlw	85
  1903  00229E  24F3               	addwf	prodl,w,c
  1904  0022A0  6E08               	movwf	?_readEEPROM,c
  1905  0022A2  0E00               	movlw	0
  1906  0022A4  20F4               	addwfc	prodh,w,c
  1907  0022A6  6E09               	movwf	?_readEEPROM+1,c
  1908  0022A8  EC81  F01F         	call	_readEEPROM	;wreg free
  1909  0022AC  0100               	movlb	0	; () banked
  1910  0022AE  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1911  0022B0  6BD1               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1912  0022B2  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1913  0022B4  0D02               	mullw	2
  1914  0022B6  0E56               	movlw	86
  1915  0022B8  24F3               	addwf	prodl,w,c
  1916  0022BA  6E08               	movwf	?_readEEPROM,c
  1917  0022BC  0E00               	movlw	0
  1918  0022BE  20F4               	addwfc	prodh,w,c
  1919  0022C0  6E09               	movwf	?_readEEPROM+1,c
  1920  0022C2  EC81  F01F         	call	_readEEPROM	;wreg free
  1921  0022C6  0100               	movlb	0	; () banked
  1922  0022C8  27D1               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1923  0022CA  0E00               	movlw	0
  1924  0022CC  23D2               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1925  0022CE  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1926  0022D0  0D02               	mullw	2
  1927  0022D2  50F3               	movf	prodl,w,c
  1928  0022D4  0F70               	addlw	low _relay_pulse_timer
  1929  0022D6  6ED9               	movwf	fsr2l,c
  1930  0022D8  6ADA               	clrf	fsr2h,c
  1931  0022DA  C0D1  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1932  0022DE  C0D2  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;main.c: 726: if ( bOn ) {
  1936  0022E2  51D4               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  1937  0022E4  E044               	bz	l226
  1938                           
  1939                           ; BSR set to: 0
  1940                           ;main.c: 729: if ( readEEPROM( 0x43 + 10 + i ) & 0x04 ) {
  1941  0022E6  0E4D               	movlw	77
  1942  0022E8  25D6               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1943  0022EA  6E08               	movwf	?_readEEPROM,c
  1944  0022EC  6A09               	clrf	?_readEEPROM+1,c
  1945  0022EE  0E00               	movlw	0
  1946  0022F0  2209               	addwfc	?_readEEPROM+1,f,c
  1947  0022F2  EC81  F01F         	call	_readEEPROM	;wreg free
  1948  0022F6  0100               	movlb	0	; () banked
  1949  0022F8  6FD1               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1950  0022FA  A5D1               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1951  0022FC  D025               	goto	l9839
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;main.c: 730: relay_protection_timer[ i ] =
  1955                           ;main.c: 731: readEEPROM( 0x43 + 34 + 2*i ) * 256 +
  1956                           ;main.c: 732: readEEPROM( 0x43 + 35 + 2*i );
  1957  0022FE  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1958  002300  0D02               	mullw	2
  1959  002302  0E65               	movlw	101
  1960  002304  24F3               	addwf	prodl,w,c
  1961  002306  6E08               	movwf	?_readEEPROM,c
  1962  002308  0E00               	movlw	0
  1963  00230A  20F4               	addwfc	prodh,w,c
  1964  00230C  6E09               	movwf	?_readEEPROM+1,c
  1965  00230E  EC81  F01F         	call	_readEEPROM	;wreg free
  1966  002312  0100               	movlb	0	; () banked
  1967  002314  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1968  002316  6BD1               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1969  002318  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1970  00231A  0D02               	mullw	2
  1971  00231C  0E66               	movlw	102
  1972  00231E  24F3               	addwf	prodl,w,c
  1973  002320  6E08               	movwf	?_readEEPROM,c
  1974  002322  0E00               	movlw	0
  1975  002324  20F4               	addwfc	prodh,w,c
  1976  002326  6E09               	movwf	?_readEEPROM+1,c
  1977  002328  EC81  F01F         	call	_readEEPROM	;wreg free
  1978  00232C  0100               	movlb	0	; () banked
  1979  00232E  27D1               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1980  002330  0E00               	movlw	0
  1981  002332  23D2               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1982  002334  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1983  002336  0D02               	mullw	2
  1984  002338  50F3               	movf	prodl,w,c
  1985  00233A  0F60               	addlw	low _relay_protection_timer
  1986  00233C  6ED9               	movwf	fsr2l,c
  1987  00233E  6ADA               	clrf	fsr2h,c
  1988  002340  C0D1  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1989  002344  C0D2  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1990  002348                     l9839:
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;main.c: 733: }
  1994                           ;main.c: 735: if ( ctrlreg & 0x08 ) {
  1995  002348  A7D5               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  1996  00234A  D007               	goto	l9843
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;main.c: 736: SendInformationEvent( i, 20,
  2000                           ;main.c: 737: 3 );
  2001  00234C  0E14               	movlw	20
  2002  00234E  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  2003  002350  0E03               	movlw	3
  2004  002352  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2005  002354  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2006  002356  ECEA  F01C         	call	_SendInformationEvent
  2007  00235A                     l9843:
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;main.c: 738: }
  2011                           ;main.c: 740: if ( ctrlreg & 0x20 ) {
  2012  00235A  ABD5               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2013  00235C  D03A               	goto	l9855
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;main.c: 741: SendInformationEvent( i, 20,
  2017                           ;main.c: 742: 25 );
  2018  00235E  0E14               	movlw	20
  2019  002360  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  2020  002362  0E19               	movlw	25
  2021  002364  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2022  002366  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2023  002368  ECEA  F01C         	call	_SendInformationEvent
  2024  00236C  D032               	goto	l9855
  2025  00236E                     l226:
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;main.c: 747: if ( ctrlreg & 0x10 ) {
  2029  00236E  A9D5               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2030  002370  D007               	goto	l9849
  2031                           
  2032                           ; BSR set to: 0
  2033                           ;main.c: 748: SendInformationEvent( i, 20,
  2034                           ;main.c: 749: 4 );
  2035  002372  0E14               	movlw	20
  2036  002374  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  2037  002376  0E04               	movlw	4
  2038  002378  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2039  00237A  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2040  00237C  ECEA  F01C         	call	_SendInformationEvent
  2041  002380                     l9849:
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;main.c: 750: }
  2045                           ;main.c: 752: if (ctrlreg & 0x40) {
  2046  002380  ADD5               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),6,b
  2047  002382  D027               	goto	l9855
  2048                           
  2049                           ; BSR set to: 0
  2050                           ;main.c: 753: SendInformationEvent( i, 20,
  2051                           ;main.c: 754: 24 );
  2052  002384  0E14               	movlw	20
  2053  002386  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  2054  002388  0E18               	movlw	24
  2055  00238A  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2056  00238C  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2057  00238E  ECEA  F01C         	call	_SendInformationEvent
  2058  002392  D01F               	goto	l9855
  2059  002394                     l9853:
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;main.c: 761: else {
  2063                           ;main.c: 763: relay_pulse_timer[ 0 ] =
  2064                           ;main.c: 764: readEEPROM( 0x43 + 18 + 2*i ) * 256 +
  2065                           ;main.c: 765: readEEPROM( 0x43 + 19 + 2*i );
  2066  002394  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2067  002396  0D02               	mullw	2
  2068  002398  0E56               	movlw	86
  2069  00239A  24F3               	addwf	prodl,w,c
  2070  00239C  6E08               	movwf	?_readEEPROM,c
  2071  00239E  0E00               	movlw	0
  2072  0023A0  20F4               	addwfc	prodh,w,c
  2073  0023A2  6E09               	movwf	?_readEEPROM+1,c
  2074  0023A4  EC81  F01F         	call	_readEEPROM	;wreg free
  2075  0023A8  0100               	movlb	0	; () banked
  2076  0023AA  6FD1               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2077  0023AC  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2078  0023AE  0D02               	mullw	2
  2079  0023B0  0E55               	movlw	85
  2080  0023B2  24F3               	addwf	prodl,w,c
  2081  0023B4  6E08               	movwf	?_readEEPROM,c
  2082  0023B6  0E00               	movlw	0
  2083  0023B8  20F4               	addwfc	prodh,w,c
  2084  0023BA  6E09               	movwf	?_readEEPROM+1,c
  2085  0023BC  EC81  F01F         	call	_readEEPROM	;wreg free
  2086  0023C0  0100               	movlb	0	; () banked
  2087  0023C2  6FD3               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2088  0023C4  6BD2               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2089  0023C6  51D1               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2090  0023C8  25D2               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2091  0023CA  6F70               	movwf	_relay_pulse_timer& (0+255),b
  2092  0023CC  0E00               	movlw	0
  2093  0023CE  21D3               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2094  0023D0  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  2095  0023D2                     l9855:
  2096                           
  2097                           ; BSR set to: 0
  2098  0023D2  2BD6               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  2099  0023D4  D68A               	goto	l9767
  2100  0023D6                     l234:
  2101                           
  2102                           ; BSR set to: 0
  2103  0023D6  0012               	return	
  2104  0023D8                     __end_of_doApplicationOneSecondWork:
  2105                           	opt stack 0
  2106                           tblptru	equ	0xFF8
  2107                           prodh	equ	0xFF4
  2108                           prodl	equ	0xFF3
  2109                           postinc0	equ	0xFEE
  2110                           wreg	equ	0xFE8
  2111                           postinc2	equ	0xFDE
  2112                           postdec2	equ	0xFDD
  2113                           fsr2h	equ	0xFDA
  2114                           fsr2l	equ	0xFD9
  2115                           status	equ	0xFD8
  2116                           
  2117 ;; *************** function _vscp_doOneSecondWork *****************
  2118 ;; Defined at:
  2119 ;;		line 516 in file "../../vscp_firmware/common/vscp_firmware.c"
  2120 ;; Parameters:    Size  Location     Type
  2121 ;;		None
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;		None
  2124 ;; Return value:  Size  Location     Type
  2125 ;;		None               void
  2126 ;; Registers used:
  2127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2128 ;; Tracked objects:
  2129 ;;		On entry : F/0
  2130 ;;		On exit  : F/0
  2131 ;;		Unchanged: 0/0
  2132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2133 ;;      Params:         0       0       0       0       0       0       0
  2134 ;;      Locals:         0       0       0       0       0       0       0
  2135 ;;      Temps:          1       0       0       0       0       0       0
  2136 ;;      Totals:         1       0       0       0       0       0       0
  2137 ;;Total ram usage:        1 bytes
  2138 ;; Hardware stack levels used:    1
  2139 ;; Hardware stack levels required when called:    8
  2140 ;; This function calls:
  2141 ;;		_vscp_getZone
  2142 ;;		_vscp_getSubzone
  2143 ;;		_vscp_sendHeartBeat
  2144 ;; This function is called by:
  2145 ;;		_main
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149                           	psect	text3
  2150  003A40                     __ptext3:
  2151                           	opt stack 0
  2152  003A40                     _vscp_doOneSecondWork:
  2153                           	opt stack 21
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;vscp_firmware.c: 518: ++vscp_second;
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;incstack = 0
  2160                           ;incstack = 0
  2161  003A40  2B9A               	incf	_vscp_second& (0+255),f,b
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;vscp_firmware.c: 520: if (vscp_second > 59) {
  2165  003A42  0E3B               	movlw	59
  2166  003A44  659A               	cpfsgt	_vscp_second& (0+255),b
  2167  003A46  D00D               	goto	l7891
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;vscp_firmware.c: 521: vscp_second = 0;
  2171  003A48  6B9A               	clrf	_vscp_second& (0+255),b
  2172                           
  2173                           ; BSR set to: 0
  2174                           ;vscp_firmware.c: 522: vscp_minute++;
  2175  003A4A  2B95               	incf	_vscp_minute& (0+255),f,b
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;vscp_firmware.c: 525: if (0x03 == vscp_node_state) {
  2179  003A4C  5197               	movf	_vscp_node_state& (0+255),w,b
  2180  003A4E  0A03               	xorlw	3
  2181  003A50  E108               	bnz	l7891
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;vscp_firmware.c: 526: vscp_sendHeartBeat(vscp_getZone(),
  2185                           ;vscp_firmware.c: 527: vscp_getSubzone());
  2186  003A52  EC93  F01F         	call	_vscp_getSubzone	;wreg free
  2187  003A56  0100               	movlb	0	; () banked
  2188  003A58  6FCA               	movwf	?_vscp_sendHeartBeat& (0+255),b
  2189  003A5A  EC98  F01F         	call	_vscp_getZone	;wreg free
  2190  003A5E  EC33  F01E         	call	_vscp_sendHeartBeat
  2191  003A62                     l7891:
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;vscp_firmware.c: 528: }
  2195                           ;vscp_firmware.c: 529: }
  2196                           ;vscp_firmware.c: 531: if (vscp_minute > 59) {
  2197  003A62  0E3B               	movlw	59
  2198  003A64  6595               	cpfsgt	_vscp_minute& (0+255),b
  2199  003A66  D002               	goto	l7897
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;vscp_firmware.c: 532: vscp_minute = 0;
  2203  003A68  6B95               	clrf	_vscp_minute& (0+255),b
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;vscp_firmware.c: 533: vscp_hour++;
  2207  003A6A  2B93               	incf	_vscp_hour& (0+255),f,b
  2208  003A6C                     l7897:
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;vscp_firmware.c: 534: }
  2212                           ;vscp_firmware.c: 536: if (vscp_hour > 23) vscp_hour = 0;
  2213  003A6C  0E17               	movlw	23
  2214  003A6E  6593               	cpfsgt	_vscp_hour& (0+255),b
  2215  003A70  D001               	goto	l7901
  2216                           
  2217                           ; BSR set to: 0
  2218  003A72  6B93               	clrf	_vscp_hour& (0+255),b
  2219  003A74                     l7901:
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;vscp_firmware.c: 540: if (0x03 == vscp_node_state) {
  2223  003A74  5197               	movf	_vscp_node_state& (0+255),w,b
  2224  003A76  0A03               	xorlw	3
  2225  003A78  E109               	bnz	l1104
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;vscp_firmware.c: 541: vscp_guid_reset++;
  2229  003A7A  2B92               	incf	_vscp_guid_reset& (0+255),f,b
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;vscp_firmware.c: 542: if ((vscp_guid_reset & 0x0f) >= 2) {
  2233  003A7C  C092  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  2234  003A80  0E0F               	movlw	15
  2235  003A82  164D               	andwf	??_vscp_doOneSecondWork,f,c
  2236  003A84  0E02               	movlw	2
  2237  003A86  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  2238  003A88  B0D8               	btfsc	status,0,c
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;vscp_firmware.c: 543: vscp_guid_reset = 0;
  2242  003A8A  6B92               	clrf	_vscp_guid_reset& (0+255),b
  2243  003A8C                     l1104:
  2244                           
  2245                           ; BSR set to: 0
  2246  003A8C  0012               	return	
  2247  003A8E                     __end_of_vscp_doOneSecondWork:
  2248                           	opt stack 0
  2249                           tblptru	equ	0xFF8
  2250                           prodh	equ	0xFF4
  2251                           prodl	equ	0xFF3
  2252                           postinc0	equ	0xFEE
  2253                           wreg	equ	0xFE8
  2254                           postinc2	equ	0xFDE
  2255                           postdec2	equ	0xFDD
  2256                           fsr2h	equ	0xFDA
  2257                           fsr2l	equ	0xFD9
  2258                           status	equ	0xFD8
  2259                           
  2260 ;; *************** function _vscp_sendHeartBeat *****************
  2261 ;; Defined at:
  2262 ;;		line 370 in file "../../vscp_firmware/common/vscp_firmware.c"
  2263 ;; Parameters:    Size  Location     Type
  2264 ;;  zone            1    wreg     unsigned char 
  2265 ;;  subzone         1   20[BANK0 ] unsigned char 
  2266 ;; Auto vars:     Size  Location     Type
  2267 ;;  zone            1   75[COMRAM] unsigned char 
  2268 ;; Return value:  Size  Location     Type
  2269 ;;		None               void
  2270 ;; Registers used:
  2271 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2272 ;; Tracked objects:
  2273 ;;		On entry : 0/0
  2274 ;;		On exit  : F/0
  2275 ;;		Unchanged: 0/0
  2276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2277 ;;      Params:         0       1       0       0       0       0       0
  2278 ;;      Locals:         1       0       0       0       0       0       0
  2279 ;;      Temps:          0       0       0       0       0       0       0
  2280 ;;      Totals:         1       1       0       0       0       0       0
  2281 ;;Total ram usage:        2 bytes
  2282 ;; Hardware stack levels used:    1
  2283 ;; Hardware stack levels required when called:    7
  2284 ;; This function calls:
  2285 ;;		_vscp_sendEvent
  2286 ;; This function is called by:
  2287 ;;		_vscp_doOneSecondWork
  2288 ;; This function uses a non-reentrant model
  2289 ;;
  2290                           
  2291                           	psect	text4
  2292  003C66                     __ptext4:
  2293                           	opt stack 0
  2294  003C66                     _vscp_sendHeartBeat:
  2295                           	opt stack 21
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;incstack = 0
  2299                           ;incstack = 0
  2300                           ;vscp_sendHeartBeat@zone stored from wreg
  2301  003C66  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  2302                           
  2303                           ;vscp_firmware.c: 371: vscp_omsg.flags = 0x80 + 3;
  2304  003C6A  0E83               	movlw	131
  2305  003C6C  0100               	movlb	0	; () banked
  2306  003C6E  6FA9               	movwf	_vscp_omsg& (0+255),b
  2307                           
  2308                           ;vscp_firmware.c: 372: vscp_omsg.priority = 0x07;
  2309  003C70  0E07               	movlw	7
  2310  003C72  6FAA               	movwf	(_vscp_omsg+1)& (0+255),b
  2311                           
  2312                           ;vscp_firmware.c: 373: vscp_omsg.vscp_class = 20;
  2313  003C74  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
  2314  003C76  0E14               	movlw	20
  2315  003C78  6FAB               	movwf	(_vscp_omsg+2)& (0+255),b
  2316                           
  2317                           ;vscp_firmware.c: 374: vscp_omsg.vscp_type = 9;
  2318  003C7A  0E09               	movlw	9
  2319  003C7C  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;vscp_firmware.c: 375: vscp_omsg.data[ 0 ] = 0;
  2323  003C7E  6BAE               	clrf	(_vscp_omsg+5)& (0+255),b
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;vscp_firmware.c: 376: vscp_omsg.data[ 1 ] = zone;
  2327  003C80  C04C  F0AF         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;vscp_firmware.c: 377: vscp_omsg.data[ 2 ] = subzone;
  2331  003C84  C0CA  F0B0         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;vscp_firmware.c: 380: vscp_sendEvent();
  2335  003C88  EF46  F01E         	goto	_vscp_sendEvent	;wreg free
  2336  003C8C                     __end_of_vscp_sendHeartBeat:
  2337                           	opt stack 0
  2338                           tblptru	equ	0xFF8
  2339                           prodh	equ	0xFF4
  2340                           prodl	equ	0xFF3
  2341                           postinc0	equ	0xFEE
  2342                           wreg	equ	0xFE8
  2343                           postinc2	equ	0xFDE
  2344                           postdec2	equ	0xFDD
  2345                           fsr2h	equ	0xFDA
  2346                           fsr2l	equ	0xFD9
  2347                           status	equ	0xFD8
  2348                           
  2349 ;; *************** function _vscp_getSubzone *****************
  2350 ;; Defined at:
  2351 ;;		line 876 in file "../main.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;		None
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;		None
  2356 ;; Return value:  Size  Location     Type
  2357 ;;                  1    wreg      unsigned char 
  2358 ;; Registers used:
  2359 ;;		wreg, status,2, cstack
  2360 ;; Tracked objects:
  2361 ;;		On entry : F/0
  2362 ;;		On exit  : 0/0
  2363 ;;		Unchanged: 0/0
  2364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2365 ;;      Params:         0       0       0       0       0       0       0
  2366 ;;      Locals:         0       0       0       0       0       0       0
  2367 ;;      Temps:          0       0       0       0       0       0       0
  2368 ;;      Totals:         0       0       0       0       0       0       0
  2369 ;;Total ram usage:        0 bytes
  2370 ;; Hardware stack levels used:    1
  2371 ;; Hardware stack levels required when called:    3
  2372 ;; This function calls:
  2373 ;;		_readEEPROM
  2374 ;; This function is called by:
  2375 ;;		_vscp_doOneSecondWork
  2376 ;; This function uses a non-reentrant model
  2377 ;;
  2378                           
  2379                           	psect	text5
  2380  003F26                     __ptext5:
  2381                           	opt stack 0
  2382  003F26                     _vscp_getSubzone:
  2383                           	opt stack 25
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;main.c: 877: return readEEPROM( 0x43 + 1 );
  2387                           
  2388                           ; BSR set to: 0
  2389                           ;incstack = 0
  2390                           ;incstack = 0
  2391  003F26  6A09               	clrf	?_readEEPROM+1,c
  2392  003F28  0E44               	movlw	68
  2393  003F2A  6E08               	movwf	?_readEEPROM,c
  2394  003F2C  EF81  F01F         	goto	_readEEPROM	;wreg free
  2395  003F30                     __end_of_vscp_getSubzone:
  2396                           	opt stack 0
  2397                           tblptru	equ	0xFF8
  2398                           prodh	equ	0xFF4
  2399                           prodl	equ	0xFF3
  2400                           postinc0	equ	0xFEE
  2401                           wreg	equ	0xFE8
  2402                           postinc2	equ	0xFDE
  2403                           postdec2	equ	0xFDD
  2404                           fsr2h	equ	0xFDA
  2405                           fsr2l	equ	0xFD9
  2406                           status	equ	0xFD8
  2407                           
  2408 ;; *************** function _vscp_getZone *****************
  2409 ;; Defined at:
  2410 ;;		line 867 in file "../main.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;		None
  2413 ;; Auto vars:     Size  Location     Type
  2414 ;;		None
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  1    wreg      unsigned char 
  2417 ;; Registers used:
  2418 ;;		wreg, status,2, cstack
  2419 ;; Tracked objects:
  2420 ;;		On entry : F/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2424 ;;      Params:         0       0       0       0       0       0       0
  2425 ;;      Locals:         0       0       0       0       0       0       0
  2426 ;;      Temps:          0       0       0       0       0       0       0
  2427 ;;      Totals:         0       0       0       0       0       0       0
  2428 ;;Total ram usage:        0 bytes
  2429 ;; Hardware stack levels used:    1
  2430 ;; Hardware stack levels required when called:    3
  2431 ;; This function calls:
  2432 ;;		_readEEPROM
  2433 ;; This function is called by:
  2434 ;;		_vscp_doOneSecondWork
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           	psect	text6
  2439  003F30                     __ptext6:
  2440                           	opt stack 0
  2441  003F30                     _vscp_getZone:
  2442                           	opt stack 25
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;main.c: 868: return readEEPROM( 0x43 + 0 );
  2446                           
  2447                           ;incstack = 0
  2448                           ;incstack = 0
  2449  003F30  6A09               	clrf	?_readEEPROM+1,c
  2450  003F32  0E43               	movlw	67
  2451  003F34  6E08               	movwf	?_readEEPROM,c
  2452  003F36  EF81  F01F         	goto	_readEEPROM	;wreg free
  2453  003F3A                     __end_of_vscp_getZone:
  2454                           	opt stack 0
  2455                           tblptru	equ	0xFF8
  2456                           prodh	equ	0xFF4
  2457                           prodl	equ	0xFF3
  2458                           postinc0	equ	0xFEE
  2459                           wreg	equ	0xFE8
  2460                           postinc2	equ	0xFDE
  2461                           postdec2	equ	0xFDD
  2462                           fsr2h	equ	0xFDA
  2463                           fsr2l	equ	0xFD9
  2464                           status	equ	0xFD8
  2465                           
  2466 ;; *************** function _vscp_error *****************
  2467 ;; Defined at:
  2468 ;;		line 191 in file "../../vscp_firmware/common/vscp_firmware.c"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;		None
  2471 ;; Auto vars:     Size  Location     Type
  2472 ;;		None
  2473 ;; Return value:  Size  Location     Type
  2474 ;;		None               void
  2475 ;; Registers used:
  2476 ;;		None
  2477 ;; Tracked objects:
  2478 ;;		On entry : 0/0
  2479 ;;		On exit  : 0/0
  2480 ;;		Unchanged: 0/0
  2481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2482 ;;      Params:         0       0       0       0       0       0       0
  2483 ;;      Locals:         0       0       0       0       0       0       0
  2484 ;;      Temps:          0       0       0       0       0       0       0
  2485 ;;      Totals:         0       0       0       0       0       0       0
  2486 ;;Total ram usage:        0 bytes
  2487 ;; Hardware stack levels used:    1
  2488 ;; Hardware stack levels required when called:    2
  2489 ;; This function calls:
  2490 ;;		Nothing
  2491 ;; This function is called by:
  2492 ;;		_main
  2493 ;; This function uses a non-reentrant model
  2494 ;;
  2495                           
  2496                           	psect	text7
  2497  003F6A                     __ptext7:
  2498                           	opt stack 0
  2499  003F6A                     _vscp_error:
  2500                           	opt stack 27
  2501                           
  2502                           ;vscp_firmware.c: 192: vscp_initledfunc = 0x00;
  2503                           
  2504                           ;incstack = 0
  2505                           ;incstack = 0
  2506  003F6A  6A56               	clrf	_vscp_initledfunc,c
  2507  003F6C  0012               	return	
  2508  003F6E                     __end_of_vscp_error:
  2509                           	opt stack 0
  2510                           tblptru	equ	0xFF8
  2511                           prodh	equ	0xFF4
  2512                           prodl	equ	0xFF3
  2513                           postinc0	equ	0xFEE
  2514                           wreg	equ	0xFE8
  2515                           postinc2	equ	0xFDE
  2516                           postdec2	equ	0xFDD
  2517                           fsr2h	equ	0xFDA
  2518                           fsr2l	equ	0xFD9
  2519                           status	equ	0xFD8
  2520                           
  2521 ;; *************** function _doDM *****************
  2522 ;; Defined at:
  2523 ;;		line 1596 in file "../main.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;		None
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;  class_mask      2   33[BANK0 ] unsigned short 
  2528 ;;  class_filter    2   31[BANK0 ] unsigned short 
  2529 ;;  i               1   44[BANK0 ] unsigned char 
  2530 ;;  dmflags         1   43[BANK0 ] unsigned char 
  2531 ;;  type_mask       1   36[BANK0 ] unsigned char 
  2532 ;;  type_filter     1   35[BANK0 ] unsigned char 
  2533 ;; Return value:  Size  Location     Type
  2534 ;;		None               void
  2535 ;; Registers used:
  2536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2537 ;; Tracked objects:
  2538 ;;		On entry : 0/0
  2539 ;;		On exit  : F/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2542 ;;      Params:         0       0       0       0       0       0       0
  2543 ;;      Locals:         0      14       0       0       0       0       0
  2544 ;;      Temps:          0       3       0       0       0       0       0
  2545 ;;      Totals:         0      17       0       0       0       0       0
  2546 ;;Total ram usage:       17 bytes
  2547 ;; Hardware stack levels used:    1
  2548 ;; Hardware stack levels required when called:    8
  2549 ;; This function calls:
  2550 ;;		_readEEPROM
  2551 ;;		_doActionOff
  2552 ;;		_doActionOn
  2553 ;;		_doActionPulse
  2554 ;;		_doActionStatus
  2555 ;;		_doActionDisable
  2556 ;;		_doActionToggle
  2557 ;; This function is called by:
  2558 ;;		_main
  2559 ;; This function uses a non-reentrant model
  2560 ;;
  2561                           
  2562                           	psect	text8
  2563  001DCE                     __ptext8:
  2564                           	opt stack 0
  2565  001DCE                     _doDM:
  2566                           	opt stack 21
  2567                           
  2568                           ;main.c: 1597: unsigned char i;
  2569                           ;main.c: 1598: unsigned char dmflags;
  2570                           ;main.c: 1599: unsigned short class_filter;
  2571                           ;main.c: 1600: unsigned short class_mask;
  2572                           ;main.c: 1601: unsigned char type_filter;
  2573                           ;main.c: 1602: unsigned char type_mask;
  2574                           ;main.c: 1605: if ( 0 == vscp_imsg.vscp_class ) return;
  2575                           
  2576                           ;incstack = 0
  2577                           ;incstack = 0
  2578  001DCE  0100               	movlb	0	; () banked
  2579  001DD0  519E               	movf	(_vscp_imsg+3)& (0+255),w,b
  2580  001DD2  119D               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2581  001DD4  E101 D186          	bz	l411
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;main.c: 1607: for (i = 0; i < 7; i++) {
  2585  001DD8  6BE2               	clrf	doDM@i& (0+255),b
  2586  001DDA                     l9709:
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;main.c: 1610: dmflags = readEEPROM( 0x43 + 72 + 1 + (8 * i) );
  2590  001DDA  51E2               	movf	doDM@i& (0+255),w,b
  2591  001DDC  6FD2               	movwf	??_doDM& (0+255),b
  2592  001DDE  6BD3               	clrf	(??_doDM+1)& (0+255),b
  2593  001DE0  90D8               	bcf	status,0,c
  2594  001DE2  37D2               	rlcf	??_doDM& (0+255),f,b
  2595  001DE4  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2596  001DE6  90D8               	bcf	status,0,c
  2597  001DE8  37D2               	rlcf	??_doDM& (0+255),f,b
  2598  001DEA  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2599  001DEC  90D8               	bcf	status,0,c
  2600  001DEE  37D2               	rlcf	??_doDM& (0+255),f,b
  2601  001DF0  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2602  001DF2  0E8C               	movlw	140
  2603  001DF4  25D2               	addwf	??_doDM& (0+255),w,b
  2604  001DF6  6E08               	movwf	?_readEEPROM,c
  2605  001DF8  0E00               	movlw	0
  2606  001DFA  21D3               	addwfc	(??_doDM+1)& (0+255),w,b
  2607  001DFC  6E09               	movwf	?_readEEPROM+1,c
  2608  001DFE  EC81  F01F         	call	_readEEPROM	;wreg free
  2609  001E02  0100               	movlb	0	; () banked
  2610  001E04  6FE1               	movwf	doDM@dmflags& (0+255),b
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;main.c: 1613: if ( dmflags & 0x80 ) {
  2614  001E06  AFE1               	btfss	doDM@dmflags& (0+255),7,b
  2615  001E08  D168               	goto	l9761
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;main.c: 1616: if ( ( dmflags & 0x40 ) &&
  2619                           ;main.c: 1617: ( vscp_imsg.oaddr != readEEPROM( 0x43 + 72 + (8 * i) ) ) ) {
  2620  001E0A  ADE1               	btfss	doDM@dmflags& (0+255),6,b
  2621  001E0C  D018               	goto	l415
  2622                           
  2623                           ; BSR set to: 0
  2624  001E0E  51E2               	movf	doDM@i& (0+255),w,b
  2625  001E10  6FD2               	movwf	??_doDM& (0+255),b
  2626  001E12  6BD3               	clrf	(??_doDM+1)& (0+255),b
  2627  001E14  90D8               	bcf	status,0,c
  2628  001E16  37D2               	rlcf	??_doDM& (0+255),f,b
  2629  001E18  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2630  001E1A  90D8               	bcf	status,0,c
  2631  001E1C  37D2               	rlcf	??_doDM& (0+255),f,b
  2632  001E1E  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2633  001E20  90D8               	bcf	status,0,c
  2634  001E22  37D2               	rlcf	??_doDM& (0+255),f,b
  2635  001E24  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2636  001E26  0E8B               	movlw	139
  2637  001E28  25D2               	addwf	??_doDM& (0+255),w,b
  2638  001E2A  6E08               	movwf	?_readEEPROM,c
  2639  001E2C  0E00               	movlw	0
  2640  001E2E  21D3               	addwfc	(??_doDM+1)& (0+255),w,b
  2641  001E30  6E09               	movwf	?_readEEPROM+1,c
  2642  001E32  EC81  F01F         	call	_readEEPROM	;wreg free
  2643  001E36  0100               	movlb	0	; () banked
  2644  001E38  19A0               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2645  001E3A  E001 D14E          	bnz	l9761
  2646  001E3E                     l415:
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;main.c: 1619: }
  2650                           ;main.c: 1622: if ( dmflags & 0x10 ) {
  2651  001E3E  A9E1               	btfss	doDM@dmflags& (0+255),4,b
  2652  001E40  D00B               	goto	l9725
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;main.c: 1623: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2656  001E42  29A2               	incf	(_vscp_imsg+7)& (0+255),w,b
  2657  001E44  E009               	bz	l9725
  2658                           
  2659                           ; BSR set to: 0
  2660                           ;main.c: 1624: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x43 + 0 ) ) {
  2661  001E46  6A09               	clrf	?_readEEPROM+1,c
  2662  001E48  0E43               	movlw	67
  2663  001E4A  6E08               	movwf	?_readEEPROM,c
  2664  001E4C  EC81  F01F         	call	_readEEPROM	;wreg free
  2665  001E50  0100               	movlb	0	; () banked
  2666  001E52  19A2               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2667  001E54  E001 D141          	bnz	l9761
  2668  001E58                     l9725:
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;main.c: 1626: }
  2672                           ;main.c: 1627: }
  2673                           ;main.c: 1628: }
  2674                           ;main.c: 1630: class_filter = ( dmflags & 0x01)*256 +
  2675                           ;main.c: 1631: readEEPROM( 0x43 +
  2676                           ;main.c: 1632: 72 +
  2677                           ;main.c: 1633: (8 * i) +
  2678                           ;main.c: 1634: 3);
  2679  001E58  51E2               	movf	doDM@i& (0+255),w,b
  2680  001E5A  0D08               	mullw	8
  2681  001E5C  0E8E               	movlw	142
  2682  001E5E  24F3               	addwf	prodl,w,c
  2683  001E60  6E08               	movwf	?_readEEPROM,c
  2684  001E62  0E00               	movlw	0
  2685  001E64  20F4               	addwfc	prodh,w,c
  2686  001E66  6E09               	movwf	?_readEEPROM+1,c
  2687  001E68  EC81  F01F         	call	_readEEPROM	;wreg free
  2688  001E6C  0100               	movlb	0	; () banked
  2689  001E6E  6FD2               	movwf	??_doDM& (0+255),b
  2690  001E70  51E1               	movf	doDM@dmflags& (0+255),w,b
  2691  001E72  0B01               	andlw	1
  2692  001E74  6FD4               	movwf	(??_doDM+2)& (0+255),b
  2693  001E76  6BD3               	clrf	(??_doDM+1)& (0+255),b
  2694  001E78  51D2               	movf	??_doDM& (0+255),w,b
  2695  001E7A  25D3               	addwf	(??_doDM+1)& (0+255),w,b
  2696  001E7C  6FD5               	movwf	doDM@class_filter& (0+255),b
  2697  001E7E  0E00               	movlw	0
  2698  001E80  21D4               	addwfc	(??_doDM+2)& (0+255),w,b
  2699  001E82  6FD6               	movwf	(doDM@class_filter+1)& (0+255),b
  2700                           
  2701                           ;main.c: 1635: class_mask = ( dmflags & 0x02)*256 +
  2702                           ;main.c: 1636: readEEPROM( 0x43 +
  2703                           ;main.c: 1637: 72 +
  2704                           ;main.c: 1638: (8 * i) +
  2705                           ;main.c: 1639: 2);
  2706  001E84  51E2               	movf	doDM@i& (0+255),w,b
  2707  001E86  0D08               	mullw	8
  2708  001E88  0E8D               	movlw	141
  2709  001E8A  24F3               	addwf	prodl,w,c
  2710  001E8C  6E08               	movwf	?_readEEPROM,c
  2711  001E8E  0E00               	movlw	0
  2712  001E90  20F4               	addwfc	prodh,w,c
  2713  001E92  6E09               	movwf	?_readEEPROM+1,c
  2714  001E94  EC81  F01F         	call	_readEEPROM	;wreg free
  2715  001E98  0100               	movlb	0	; () banked
  2716  001E9A  6FD2               	movwf	??_doDM& (0+255),b
  2717  001E9C  51E1               	movf	doDM@dmflags& (0+255),w,b
  2718  001E9E  0B02               	andlw	2
  2719  001EA0  6FD4               	movwf	(??_doDM+2)& (0+255),b
  2720  001EA2  6BD3               	clrf	(??_doDM+1)& (0+255),b
  2721  001EA4  51D2               	movf	??_doDM& (0+255),w,b
  2722  001EA6  25D3               	addwf	(??_doDM+1)& (0+255),w,b
  2723  001EA8  6FD7               	movwf	doDM@class_mask& (0+255),b
  2724  001EAA  0E00               	movlw	0
  2725  001EAC  21D4               	addwfc	(??_doDM+2)& (0+255),w,b
  2726  001EAE  6FD8               	movwf	(doDM@class_mask+1)& (0+255),b
  2727                           
  2728                           ; BSR set to: 0
  2729                           ;main.c: 1640: type_filter = readEEPROM( 0x43 +
  2730                           ;main.c: 1641: 72 +
  2731                           ;main.c: 1642: (8 * i) +
  2732                           ;main.c: 1643: 5);
  2733  001EB0  51E2               	movf	doDM@i& (0+255),w,b
  2734  001EB2  6FD2               	movwf	??_doDM& (0+255),b
  2735  001EB4  6BD3               	clrf	(??_doDM+1)& (0+255),b
  2736  001EB6  90D8               	bcf	status,0,c
  2737  001EB8  37D2               	rlcf	??_doDM& (0+255),f,b
  2738  001EBA  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2739  001EBC  90D8               	bcf	status,0,c
  2740  001EBE  37D2               	rlcf	??_doDM& (0+255),f,b
  2741  001EC0  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2742  001EC2  90D8               	bcf	status,0,c
  2743  001EC4  37D2               	rlcf	??_doDM& (0+255),f,b
  2744  001EC6  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2745  001EC8  0E90               	movlw	144
  2746  001ECA  25D2               	addwf	??_doDM& (0+255),w,b
  2747  001ECC  6E08               	movwf	?_readEEPROM,c
  2748  001ECE  0E00               	movlw	0
  2749  001ED0  21D3               	addwfc	(??_doDM+1)& (0+255),w,b
  2750  001ED2  6E09               	movwf	?_readEEPROM+1,c
  2751  001ED4  EC81  F01F         	call	_readEEPROM	;wreg free
  2752  001ED8  0100               	movlb	0	; () banked
  2753  001EDA  6FD9               	movwf	doDM@type_filter& (0+255),b
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;main.c: 1644: type_mask = readEEPROM( 0x43 +
  2757                           ;main.c: 1645: 72 +
  2758                           ;main.c: 1646: (8 * i) +
  2759                           ;main.c: 1647: 4);
  2760  001EDC  51E2               	movf	doDM@i& (0+255),w,b
  2761  001EDE  6FD2               	movwf	??_doDM& (0+255),b
  2762  001EE0  6BD3               	clrf	(??_doDM+1)& (0+255),b
  2763  001EE2  90D8               	bcf	status,0,c
  2764  001EE4  37D2               	rlcf	??_doDM& (0+255),f,b
  2765  001EE6  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2766  001EE8  90D8               	bcf	status,0,c
  2767  001EEA  37D2               	rlcf	??_doDM& (0+255),f,b
  2768  001EEC  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2769  001EEE  90D8               	bcf	status,0,c
  2770  001EF0  37D2               	rlcf	??_doDM& (0+255),f,b
  2771  001EF2  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2772  001EF4  0E8F               	movlw	143
  2773  001EF6  25D2               	addwf	??_doDM& (0+255),w,b
  2774  001EF8  6E08               	movwf	?_readEEPROM,c
  2775  001EFA  0E00               	movlw	0
  2776  001EFC  21D3               	addwfc	(??_doDM+1)& (0+255),w,b
  2777  001EFE  6E09               	movwf	?_readEEPROM+1,c
  2778  001F00  EC81  F01F         	call	_readEEPROM	;wreg free
  2779  001F04  0100               	movlb	0	; () banked
  2780  001F06  6FDA               	movwf	doDM@type_mask& (0+255),b
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;main.c: 1649: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2784                           ;main.c: 1650: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2785  001F08  EE20  F09D         	lfsr	2,_vscp_imsg+2
  2786  001F0C  CFDE F0D2          	movff	postinc2,??_doDM
  2787  001F10  CFDD F0D3          	movff	postdec2,??_doDM+1
  2788  001F14  51D5               	movf	doDM@class_filter& (0+255),w,b
  2789  001F16  1BD2               	xorwf	??_doDM& (0+255),f,b
  2790  001F18  51D6               	movf	(doDM@class_filter+1)& (0+255),w,b
  2791  001F1A  1BD3               	xorwf	(??_doDM+1)& (0+255),f,b
  2792  001F1C  51D7               	movf	doDM@class_mask& (0+255),w,b
  2793  001F1E  17D2               	andwf	??_doDM& (0+255),f,b
  2794  001F20  51D8               	movf	(doDM@class_mask+1)& (0+255),w,b
  2795  001F22  17D3               	andwf	(??_doDM+1)& (0+255),f,b
  2796  001F24  51D3               	movf	(??_doDM+1)& (0+255),w,b
  2797  001F26  11D2               	iorwf	??_doDM& (0+255),w,b
  2798  001F28  E001 D0D7          	bnz	l9761
  2799                           
  2800                           ; BSR set to: 0
  2801  001F2C  519F               	movf	(_vscp_imsg+4)& (0+255),w,b
  2802  001F2E  19D9               	xorwf	doDM@type_filter& (0+255),w,b
  2803  001F30  15DA               	andwf	doDM@type_mask& (0+255),w,b
  2804  001F32  E101 D0AF          	bz	l9759
  2805  001F36  D0D1               	goto	l9761
  2806  001F38                     l9737:
  2807                           
  2808                           ;main.c: 1656: doActionOn( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2809  001F38  0100               	movlb	0	; () banked
  2810  001F3A  51E2               	movf	doDM@i& (0+255),w,b
  2811  001F3C  6FD2               	movwf	??_doDM& (0+255),b
  2812  001F3E  6BD3               	clrf	(??_doDM+1)& (0+255),b
  2813  001F40  90D8               	bcf	status,0,c
  2814  001F42  37D2               	rlcf	??_doDM& (0+255),f,b
  2815  001F44  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2816  001F46  90D8               	bcf	status,0,c
  2817  001F48  37D2               	rlcf	??_doDM& (0+255),f,b
  2818  001F4A  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2819  001F4C  90D8               	bcf	status,0,c
  2820  001F4E  37D2               	rlcf	??_doDM& (0+255),f,b
  2821  001F50  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2822  001F52  0E92               	movlw	146
  2823  001F54  25D2               	addwf	??_doDM& (0+255),w,b
  2824  001F56  6E08               	movwf	?_readEEPROM,c
  2825  001F58  0E00               	movlw	0
  2826  001F5A  21D3               	addwfc	(??_doDM+1)& (0+255),w,b
  2827  001F5C  6E09               	movwf	?_readEEPROM+1,c
  2828  001F5E  EC81  F01F         	call	_readEEPROM	;wreg free
  2829  001F62  0100               	movlb	0	; () banked
  2830  001F64  6FDB               	movwf	_doDM$2154& (0+255),b
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;main.c: 1656: doActionOn( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2834  001F66  C0DB  F051         	movff	_doDM$2154,?_doActionOn
  2835  001F6A  51E1               	movf	doDM@dmflags& (0+255),w,b
  2836  001F6C  ECEC  F011         	call	_doActionOn
  2837                           
  2838                           ;main.c: 1657: break;
  2839  001F70  D0B4               	goto	l9761
  2840  001F72                     l9741:
  2841                           
  2842                           ;main.c: 1660: doActionOff( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2843  001F72  0100               	movlb	0	; () banked
  2844  001F74  51E2               	movf	doDM@i& (0+255),w,b
  2845  001F76  6FD2               	movwf	??_doDM& (0+255),b
  2846  001F78  6BD3               	clrf	(??_doDM+1)& (0+255),b
  2847  001F7A  90D8               	bcf	status,0,c
  2848  001F7C  37D2               	rlcf	??_doDM& (0+255),f,b
  2849  001F7E  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2850  001F80  90D8               	bcf	status,0,c
  2851  001F82  37D2               	rlcf	??_doDM& (0+255),f,b
  2852  001F84  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2853  001F86  90D8               	bcf	status,0,c
  2854  001F88  37D2               	rlcf	??_doDM& (0+255),f,b
  2855  001F8A  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2856  001F8C  0E92               	movlw	146
  2857  001F8E  25D2               	addwf	??_doDM& (0+255),w,b
  2858  001F90  6E08               	movwf	?_readEEPROM,c
  2859  001F92  0E00               	movlw	0
  2860  001F94  21D3               	addwfc	(??_doDM+1)& (0+255),w,b
  2861  001F96  6E09               	movwf	?_readEEPROM+1,c
  2862  001F98  EC81  F01F         	call	_readEEPROM	;wreg free
  2863  001F9C  0100               	movlb	0	; () banked
  2864  001F9E  6FDC               	movwf	_doDM$2155& (0+255),b
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;main.c: 1660: doActionOff( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2868  001FA0  C0DC  F051         	movff	_doDM$2155,?_doActionOff
  2869  001FA4  51E1               	movf	doDM@dmflags& (0+255),w,b
  2870  001FA6  EC82  F01A         	call	_doActionOff
  2871                           
  2872                           ;main.c: 1661: break;
  2873  001FAA  D097               	goto	l9761
  2874  001FAC                     l9745:
  2875                           
  2876                           ;main.c: 1664: doActionPulse( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2877  001FAC  0100               	movlb	0	; () banked
  2878  001FAE  51E2               	movf	doDM@i& (0+255),w,b
  2879  001FB0  6FD2               	movwf	??_doDM& (0+255),b
  2880  001FB2  6BD3               	clrf	(??_doDM+1)& (0+255),b
  2881  001FB4  90D8               	bcf	status,0,c
  2882  001FB6  37D2               	rlcf	??_doDM& (0+255),f,b
  2883  001FB8  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2884  001FBA  90D8               	bcf	status,0,c
  2885  001FBC  37D2               	rlcf	??_doDM& (0+255),f,b
  2886  001FBE  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2887  001FC0  90D8               	bcf	status,0,c
  2888  001FC2  37D2               	rlcf	??_doDM& (0+255),f,b
  2889  001FC4  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2890  001FC6  0E92               	movlw	146
  2891  001FC8  25D2               	addwf	??_doDM& (0+255),w,b
  2892  001FCA  6E08               	movwf	?_readEEPROM,c
  2893  001FCC  0E00               	movlw	0
  2894  001FCE  21D3               	addwfc	(??_doDM+1)& (0+255),w,b
  2895  001FD0  6E09               	movwf	?_readEEPROM+1,c
  2896  001FD2  EC81  F01F         	call	_readEEPROM	;wreg free
  2897  001FD6  0100               	movlb	0	; () banked
  2898  001FD8  6FDD               	movwf	_doDM$2156& (0+255),b
  2899                           
  2900                           ;main.c: 1664: doActionPulse( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2901  001FDA  C0DD  F00B         	movff	_doDM$2156,?_doActionPulse
  2902  001FDE  51E1               	movf	doDM@dmflags& (0+255),w,b
  2903  001FE0  EC28  F014         	call	_doActionPulse
  2904                           
  2905                           ;main.c: 1665: break;
  2906  001FE4  D07A               	goto	l9761
  2907  001FE6                     l9747:
  2908                           
  2909                           ;main.c: 1668: doActionStatus( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2910  001FE6  0100               	movlb	0	; () banked
  2911  001FE8  51E2               	movf	doDM@i& (0+255),w,b
  2912  001FEA  6FD2               	movwf	??_doDM& (0+255),b
  2913  001FEC  6BD3               	clrf	(??_doDM+1)& (0+255),b
  2914  001FEE  90D8               	bcf	status,0,c
  2915  001FF0  37D2               	rlcf	??_doDM& (0+255),f,b
  2916  001FF2  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2917  001FF4  90D8               	bcf	status,0,c
  2918  001FF6  37D2               	rlcf	??_doDM& (0+255),f,b
  2919  001FF8  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2920  001FFA  90D8               	bcf	status,0,c
  2921  001FFC  37D2               	rlcf	??_doDM& (0+255),f,b
  2922  001FFE  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2923  002000  0E92               	movlw	146
  2924  002002  25D2               	addwf	??_doDM& (0+255),w,b
  2925  002004  6E08               	movwf	?_readEEPROM,c
  2926  002006  0E00               	movlw	0
  2927  002008  21D3               	addwfc	(??_doDM+1)& (0+255),w,b
  2928  00200A  6E09               	movwf	?_readEEPROM+1,c
  2929  00200C  EC81  F01F         	call	_readEEPROM	;wreg free
  2930  002010  0100               	movlb	0	; () banked
  2931  002012  6FDE               	movwf	_doDM$2157& (0+255),b
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;main.c: 1668: doActionStatus( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2935  002014  C0DE  F051         	movff	_doDM$2157,?_doActionStatus
  2936  002018  51E1               	movf	doDM@dmflags& (0+255),w,b
  2937  00201A  EC1A  F019         	call	_doActionStatus
  2938                           
  2939                           ;main.c: 1669: break;
  2940  00201E  D05D               	goto	l9761
  2941  002020                     l9751:
  2942                           
  2943                           ;main.c: 1672: doActionDisable( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2944  002020  0100               	movlb	0	; () banked
  2945  002022  51E2               	movf	doDM@i& (0+255),w,b
  2946  002024  6FD2               	movwf	??_doDM& (0+255),b
  2947  002026  6BD3               	clrf	(??_doDM+1)& (0+255),b
  2948  002028  90D8               	bcf	status,0,c
  2949  00202A  37D2               	rlcf	??_doDM& (0+255),f,b
  2950  00202C  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2951  00202E  90D8               	bcf	status,0,c
  2952  002030  37D2               	rlcf	??_doDM& (0+255),f,b
  2953  002032  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2954  002034  90D8               	bcf	status,0,c
  2955  002036  37D2               	rlcf	??_doDM& (0+255),f,b
  2956  002038  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2957  00203A  0E92               	movlw	146
  2958  00203C  25D2               	addwf	??_doDM& (0+255),w,b
  2959  00203E  6E08               	movwf	?_readEEPROM,c
  2960  002040  0E00               	movlw	0
  2961  002042  21D3               	addwfc	(??_doDM+1)& (0+255),w,b
  2962  002044  6E09               	movwf	?_readEEPROM+1,c
  2963  002046  EC81  F01F         	call	_readEEPROM	;wreg free
  2964  00204A  0100               	movlb	0	; () banked
  2965  00204C  6FDF               	movwf	_doDM$2158& (0+255),b
  2966                           
  2967                           ;main.c: 1672: doActionDisable( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2968  00204E  C0DF  F00B         	movff	_doDM$2158,?_doActionDisable
  2969  002052  51E1               	movf	doDM@dmflags& (0+255),w,b
  2970  002054  ECB4  F01C         	call	_doActionDisable
  2971                           
  2972                           ;main.c: 1673: break;
  2973  002058  D040               	goto	l9761
  2974  00205A                     l9753:
  2975                           
  2976                           ;main.c: 1676: doActionToggle( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2977  00205A  0100               	movlb	0	; () banked
  2978  00205C  51E2               	movf	doDM@i& (0+255),w,b
  2979  00205E  6FD2               	movwf	??_doDM& (0+255),b
  2980  002060  6BD3               	clrf	(??_doDM+1)& (0+255),b
  2981  002062  90D8               	bcf	status,0,c
  2982  002064  37D2               	rlcf	??_doDM& (0+255),f,b
  2983  002066  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2984  002068  90D8               	bcf	status,0,c
  2985  00206A  37D2               	rlcf	??_doDM& (0+255),f,b
  2986  00206C  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2987  00206E  90D8               	bcf	status,0,c
  2988  002070  37D2               	rlcf	??_doDM& (0+255),f,b
  2989  002072  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2990  002074  0E92               	movlw	146
  2991  002076  25D2               	addwf	??_doDM& (0+255),w,b
  2992  002078  6E08               	movwf	?_readEEPROM,c
  2993  00207A  0E00               	movlw	0
  2994  00207C  21D3               	addwfc	(??_doDM+1)& (0+255),w,b
  2995  00207E  6E09               	movwf	?_readEEPROM+1,c
  2996  002080  EC81  F01F         	call	_readEEPROM	;wreg free
  2997  002084  0100               	movlb	0	; () banked
  2998  002086  6FE0               	movwf	_doDM$2159& (0+255),b
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;main.c: 1676: doActionToggle( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3002  002088  C0E0  F051         	movff	_doDM$2159,?_doActionToggle
  3003  00208C  51E1               	movf	doDM@dmflags& (0+255),w,b
  3004  00208E  EC03  F018         	call	_doActionToggle
  3005                           
  3006                           ;main.c: 1677: break;
  3007  002092  D023               	goto	l9761
  3008  002094                     l9759:
  3009                           
  3010                           ; BSR set to: 0
  3011  002094  51E2               	movf	doDM@i& (0+255),w,b
  3012  002096  6FD2               	movwf	??_doDM& (0+255),b
  3013  002098  6BD3               	clrf	(??_doDM+1)& (0+255),b
  3014  00209A  90D8               	bcf	status,0,c
  3015  00209C  37D2               	rlcf	??_doDM& (0+255),f,b
  3016  00209E  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  3017  0020A0  90D8               	bcf	status,0,c
  3018  0020A2  37D2               	rlcf	??_doDM& (0+255),f,b
  3019  0020A4  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  3020  0020A6  90D8               	bcf	status,0,c
  3021  0020A8  37D2               	rlcf	??_doDM& (0+255),f,b
  3022  0020AA  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  3023  0020AC  0E91               	movlw	145
  3024  0020AE  25D2               	addwf	??_doDM& (0+255),w,b
  3025  0020B0  6E08               	movwf	?_readEEPROM,c
  3026  0020B2  0E00               	movlw	0
  3027  0020B4  21D3               	addwfc	(??_doDM+1)& (0+255),w,b
  3028  0020B6  6E09               	movwf	?_readEEPROM+1,c
  3029  0020B8  EC81  F01F         	call	_readEEPROM	;wreg free
  3030                           
  3031                           ; Switch size 1, requested type "speed"
  3032                           ; Number of cases is 6, Range of values is 1 to 16
  3033                           ; switch strategies available:
  3034                           ; Name         Instructions Cycles
  3035                           ; simple_byte           19    10 (average)
  3036                           ;	Chosen strategy is simple_byte
  3037  0020BC  0A01               	xorlw	1	; case 1
  3038  0020BE  E101 D73B          	bz	l9737
  3039  0020C2  0A03               	xorlw	3	; case 2
  3040  0020C4  E101 D755          	bz	l9741
  3041  0020C8  0A01               	xorlw	1	; case 3
  3042  0020CA  E101 D76F          	bz	l9745
  3043  0020CE  0A07               	xorlw	7	; case 4
  3044  0020D0  E0C4               	bz	l9753
  3045  0020D2  0A0E               	xorlw	14	; case 10
  3046  0020D4  E088               	bz	l9747
  3047  0020D6  0A1A               	xorlw	26	; case 16
  3048  0020D8  E0A3               	bz	l9751
  3049  0020DA                     l9761:
  3050  0020DA  0100               	movlb	0	; () banked
  3051  0020DC  2BE2               	incf	doDM@i& (0+255),f,b
  3052                           
  3053                           ; BSR set to: 0
  3054  0020DE  0E06               	movlw	6
  3055  0020E0  65E2               	cpfsgt	doDM@i& (0+255),b
  3056  0020E2  D67B               	goto	l9709
  3057  0020E4                     l411:
  3058                           
  3059                           ; BSR set to: 0
  3060  0020E4  0012               	return	
  3061  0020E6                     __end_of_doDM:
  3062                           	opt stack 0
  3063                           tblptru	equ	0xFF8
  3064                           prodh	equ	0xFF4
  3065                           prodl	equ	0xFF3
  3066                           postinc0	equ	0xFEE
  3067                           wreg	equ	0xFE8
  3068                           postinc2	equ	0xFDE
  3069                           postdec2	equ	0xFDD
  3070                           fsr2h	equ	0xFDA
  3071                           fsr2l	equ	0xFD9
  3072                           status	equ	0xFD8
  3073                           
  3074 ;; *************** function _doActionToggle *****************
  3075 ;; Defined at:
  3076 ;;		line 2088 in file "../main.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;  dmflags         1    wreg     unsigned char 
  3079 ;;  arg             1   80[COMRAM] unsigned char 
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3082 ;;  i               1   27[BANK0 ] unsigned char 
  3083 ;;  bOn             1   26[BANK0 ] enum E15660
  3084 ;;  val             1   25[BANK0 ] unsigned char 
  3085 ;; Return value:  Size  Location     Type
  3086 ;;		None               void
  3087 ;; Registers used:
  3088 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3089 ;; Tracked objects:
  3090 ;;		On entry : F/0
  3091 ;;		On exit  : F/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3094 ;;      Params:         1       0       0       0       0       0       0
  3095 ;;      Locals:         0       4       0       0       0       0       0
  3096 ;;      Temps:          0       2       0       0       0       0       0
  3097 ;;      Totals:         1       6       0       0       0       0       0
  3098 ;;Total ram usage:        7 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; Hardware stack levels required when called:    7
  3101 ;; This function calls:
  3102 ;;		_readEEPROM
  3103 ;;		_SendInformationEvent
  3104 ;; This function is called by:
  3105 ;;		_doDM
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           	psect	text9
  3110  003006                     __ptext9:
  3111                           	opt stack 0
  3112  003006                     _doActionToggle:
  3113                           	opt stack 21
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;incstack = 0
  3117                           ;incstack = 0
  3118                           ;doActionToggle@dmflags stored from wreg
  3119  003006  CFE8 F0CE          	movff	wreg,doActionToggle@dmflags
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;main.c: 2090: unsigned char i;
  3123                           ;main.c: 2091: unsigned char val;
  3124                           ;main.c: 2092: BOOL bOn = 0;
  3125  00300A  6BD0               	clrf	doActionToggle@bOn& (0+255),b
  3126                           
  3127                           ;main.c: 2094: for ( i = 0; i < 8; i++ ) {
  3128  00300C  6BD1               	clrf	doActionToggle@i& (0+255),b
  3129  00300E                     l10379:
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;main.c: 2097: if ( !( arg & (1 << i) ) ) continue;
  3133  00300E  C0D1  F0CC         	movff	doActionToggle@i,??_doActionToggle
  3134  003012  0E01               	movlw	1
  3135  003014  6FCD               	movwf	(??_doActionToggle+1)& (0+255),b
  3136  003016  2BCC               	incf	??_doActionToggle& (0+255),f,b
  3137  003018  D002               	goto	u13104
  3138  00301A                     u13105:
  3139  00301A  90D8               	bcf	status,0,c
  3140  00301C  37CD               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3141  00301E                     u13104:
  3142  00301E  2FCC               	decfsz	??_doActionToggle& (0+255),f,b
  3143  003020  D7FC               	goto	u13105
  3144  003022  51CD               	movf	(??_doActionToggle+1)& (0+255),w,b
  3145  003024  1451               	andwf	doActionToggle@arg,w,c
  3146  003026  E07A               	bz	l10437
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;main.c: 2100: if ( dmflags & 0x08 ) {
  3150  003028  A7CE               	btfss	doActionToggle@dmflags& (0+255),3,b
  3151  00302A  D00B               	goto	l10387
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;main.c: 2101: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3155                           ;main.c: 2102: 53 +
  3156                           ;main.c: 2103: i ) ) {
  3157  00302C  0E78               	movlw	120
  3158  00302E  25D1               	addwf	doActionToggle@i& (0+255),w,b
  3159  003030  6E08               	movwf	?_readEEPROM,c
  3160  003032  6A09               	clrf	?_readEEPROM+1,c
  3161  003034  0E00               	movlw	0
  3162  003036  2209               	addwfc	?_readEEPROM+1,f,c
  3163  003038  EC81  F01F         	call	_readEEPROM	;wreg free
  3164  00303C  0100               	movlb	0	; () banked
  3165  00303E  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3166  003040  E16D               	bnz	l10437
  3167  003042                     l10387:
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;main.c: 2105: }
  3171                           ;main.c: 2106: }
  3172                           ;main.c: 2108: val = readEEPROM(0x43 + 10 + i);
  3173  003042  0E4D               	movlw	77
  3174  003044  25D1               	addwf	doActionToggle@i& (0+255),w,b
  3175  003046  6E08               	movwf	?_readEEPROM,c
  3176  003048  6A09               	clrf	?_readEEPROM+1,c
  3177  00304A  0E00               	movlw	0
  3178  00304C  2209               	addwfc	?_readEEPROM+1,f,c
  3179  00304E  EC81  F01F         	call	_readEEPROM	;wreg free
  3180  003052  0100               	movlb	0	; () banked
  3181  003054  6FCF               	movwf	doActionToggle@val& (0+255),b
  3182                           
  3183                           ;main.c: 2110: switch ( i ) {
  3184  003056  D02D               	goto	l10419
  3185  003058                     l539:
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;main.c: 2113: if ( LATBbits.LATB4 ) {
  3189  003058  A88A               	btfss	3978,4,c	;volatile
  3190  00305A  D002               	goto	l540
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;main.c: 2114: LATBbits.LATB4 = 0;
  3194  00305C  988A               	bcf	3978,4,c	;volatile
  3195  00305E  D025               	goto	L12
  3196  003060                     l540:
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;main.c: 2117: LATBbits.LATB4 = 1;
  3200  003060  888A               	bsf	3978,4,c	;volatile
  3201  003062                     l10391:
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;main.c: 2118: bOn = 1;
  3205  003062  0E01               	movlw	1
  3206  003064  6FD0               	movwf	doActionToggle@bOn& (0+255),b
  3207  003066  D033               	goto	l10421
  3208  003068                     l543:
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;main.c: 2123: if ( LATBbits.LATB1 ) {
  3212  003068  A28A               	btfss	3978,1,c	;volatile
  3213  00306A  D002               	goto	l544
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;main.c: 2124: LATBbits.LATB1 = 0;
  3217  00306C  928A               	bcf	3978,1,c	;volatile
  3218  00306E  D01D               	goto	L12
  3219  003070                     l544:
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;main.c: 2127: LATBbits.LATB1 = 1;
  3223  003070  828A               	bsf	3978,1,c	;volatile
  3224  003072  D7F7               	goto	l10391
  3225  003074                     l546:
  3226                           
  3227                           ; BSR set to: 0
  3228                           ;main.c: 2133: if ( LATBbits.LATB0 ) {
  3229  003074  A08A               	btfss	3978,0,c	;volatile
  3230  003076  D002               	goto	l547
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;main.c: 2134: LATBbits.LATB0 = 0;
  3234  003078  908A               	bcf	3978,0,c	;volatile
  3235  00307A  D017               	goto	L12
  3236  00307C                     l547:
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;main.c: 2137: LATBbits.LATB0 = 1;
  3240  00307C  808A               	bsf	3978,0,c	;volatile
  3241  00307E  D7F1               	goto	l10391
  3242  003080                     l549:
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 2143: if ( LATCbits.LATC7 ) {
  3246  003080  AE8B               	btfss	3979,7,c	;volatile
  3247  003082  D002               	goto	l550
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;main.c: 2144: LATCbits.LATC7 = 0;
  3251  003084  9E8B               	bcf	3979,7,c	;volatile
  3252  003086  D011               	goto	L12
  3253  003088                     l550:
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;main.c: 2147: LATCbits.LATC7 = 1;
  3257  003088  8E8B               	bsf	3979,7,c	;volatile
  3258  00308A  D7EB               	goto	l10391
  3259  00308C                     l552:
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;main.c: 2153: if ( LATCbits.LATC6 ) {
  3263  00308C  AC8B               	btfss	3979,6,c	;volatile
  3264  00308E  D002               	goto	l553
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;main.c: 2154: LATCbits.LATC6 = 0;
  3268  003090  9C8B               	bcf	3979,6,c	;volatile
  3269  003092  D00B               	goto	L12
  3270  003094                     l553:
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;main.c: 2157: LATCbits.LATC6 = 1;
  3274  003094  8C8B               	bsf	3979,6,c	;volatile
  3275  003096  D7E5               	goto	l10391
  3276  003098                     l555:
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;main.c: 2163: if ( LATCbits.LATC5 ) {
  3280  003098  AA8B               	btfss	3979,5,c	;volatile
  3281  00309A  D002               	goto	l556
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;main.c: 2164: LATCbits.LATC5 = 0;
  3285  00309C  9A8B               	bcf	3979,5,c	;volatile
  3286  00309E  D005               	goto	L12
  3287  0030A0                     l556:
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;main.c: 2167: LATCbits.LATC5 = 1;
  3291  0030A0  8A8B               	bsf	3979,5,c	;volatile
  3292  0030A2  D7DF               	goto	l10391
  3293  0030A4                     l558:
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;main.c: 2173: if ( LATCbits.LATC4 ) {
  3297  0030A4  A88B               	btfss	3979,4,c	;volatile
  3298  0030A6  D003               	goto	l559
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;main.c: 2174: LATCbits.LATC4 = 0;
  3302  0030A8  988B               	bcf	3979,4,c	;volatile
  3303  0030AA                     L12:
  3304                           
  3305                           ;main.c: 2175: bOn = 0;
  3306  0030AA  6BD0               	clrf	doActionToggle@bOn& (0+255),b
  3307                           
  3308                           ;main.c: 2176: } else {
  3309  0030AC  D010               	goto	l10421
  3310  0030AE                     l559:
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;main.c: 2177: LATCbits.LATC4 = 1;
  3314  0030AE  888B               	bsf	3979,4,c	;volatile
  3315  0030B0  D7D8               	goto	l10391
  3316  0030B2                     l10419:
  3317                           
  3318                           ; BSR set to: 0
  3319  0030B2  51D1               	movf	doActionToggle@i& (0+255),w,b
  3320                           
  3321                           ; Switch size 1, requested type "speed"
  3322                           ; Number of cases is 7, Range of values is 0 to 6
  3323                           ; switch strategies available:
  3324                           ; Name         Instructions Cycles
  3325                           ; simple_byte           22    12 (average)
  3326                           ;	Chosen strategy is simple_byte
  3327  0030B4  E0D1               	bz	l539
  3328  0030B6  0A01               	xorlw	1	; case 1
  3329  0030B8  E0D7               	bz	l543
  3330  0030BA  0A03               	xorlw	3	; case 2
  3331  0030BC  E0DB               	bz	l546
  3332  0030BE  0A01               	xorlw	1	; case 3
  3333  0030C0  E0DF               	bz	l549
  3334  0030C2  0A07               	xorlw	7	; case 4
  3335  0030C4  E0E3               	bz	l552
  3336  0030C6  0A01               	xorlw	1	; case 5
  3337  0030C8  E0E7               	bz	l555
  3338  0030CA  0A03               	xorlw	3	; case 6
  3339  0030CC  E0EB               	bz	l558
  3340  0030CE                     l10421:
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;main.c: 2184: if ( bOn ) {
  3344  0030CE  51D0               	movf	doActionToggle@bOn& (0+255),w,b
  3345  0030D0  E013               	bz	l561
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;main.c: 2187: if ( val & 0x08 ) {
  3349  0030D2  A7CF               	btfss	doActionToggle@val& (0+255),3,b
  3350  0030D4  D007               	goto	l10427
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;main.c: 2188: SendInformationEvent( i, 20, 3 );
  3354  0030D6  0E14               	movlw	20
  3355  0030D8  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  3356  0030DA  0E03               	movlw	3
  3357  0030DC  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3358  0030DE  51D1               	movf	doActionToggle@i& (0+255),w,b
  3359  0030E0  ECEA  F01C         	call	_SendInformationEvent
  3360  0030E4                     l10427:
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;main.c: 2189: }
  3364                           ;main.c: 2192: if ( val & 0x20 ) {
  3365  0030E4  ABCF               	btfss	doActionToggle@val& (0+255),5,b
  3366  0030E6  D01A               	goto	l10437
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;main.c: 2193: SendInformationEvent( i, 20, 25 );
  3370  0030E8  0E14               	movlw	20
  3371  0030EA  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  3372  0030EC  0E19               	movlw	25
  3373  0030EE  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3374  0030F0  51D1               	movf	doActionToggle@i& (0+255),w,b
  3375  0030F2  ECEA  F01C         	call	_SendInformationEvent
  3376  0030F6  D012               	goto	l10437
  3377  0030F8                     l561:
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;main.c: 2197: else {
  3381                           ;main.c: 2200: if ( val & 0x10 ) {
  3382  0030F8  A9CF               	btfss	doActionToggle@val& (0+255),4,b
  3383  0030FA  D007               	goto	l10433
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;main.c: 2201: SendInformationEvent( i, 20, 4 );
  3387  0030FC  0E14               	movlw	20
  3388  0030FE  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  3389  003100  0E04               	movlw	4
  3390  003102  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3391  003104  51D1               	movf	doActionToggle@i& (0+255),w,b
  3392  003106  ECEA  F01C         	call	_SendInformationEvent
  3393  00310A                     l10433:
  3394                           
  3395                           ; BSR set to: 0
  3396                           ;main.c: 2202: }
  3397                           ;main.c: 2205: if (val & 0x40 ) {
  3398  00310A  ADCF               	btfss	doActionToggle@val& (0+255),6,b
  3399  00310C  D007               	goto	l10437
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;main.c: 2206: SendInformationEvent( i, 20, 24 );
  3403  00310E  0E14               	movlw	20
  3404  003110  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  3405  003112  0E18               	movlw	24
  3406  003114  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3407  003116  51D1               	movf	doActionToggle@i& (0+255),w,b
  3408  003118  ECEA  F01C         	call	_SendInformationEvent
  3409  00311C                     l10437:
  3410                           
  3411                           ; BSR set to: 0
  3412  00311C  2BD1               	incf	doActionToggle@i& (0+255),f,b
  3413                           
  3414                           ; BSR set to: 0
  3415  00311E  0E07               	movlw	7
  3416  003120  65D1               	cpfsgt	doActionToggle@i& (0+255),b
  3417  003122  D775               	goto	l10379
  3418                           
  3419                           ; BSR set to: 0
  3420  003124  0C07               	retlw	7
  3421  003126                     __end_of_doActionToggle:
  3422                           	opt stack 0
  3423                           tblptru	equ	0xFF8
  3424                           prodh	equ	0xFF4
  3425                           prodl	equ	0xFF3
  3426                           postinc0	equ	0xFEE
  3427                           wreg	equ	0xFE8
  3428                           postinc2	equ	0xFDE
  3429                           postdec2	equ	0xFDD
  3430                           fsr2h	equ	0xFDA
  3431                           fsr2l	equ	0xFD9
  3432                           status	equ	0xFD8
  3433                           
  3434 ;; *************** function _doActionDisable *****************
  3435 ;; Defined at:
  3436 ;;		line 2058 in file "../main.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;  dmflags         1    wreg     unsigned char 
  3439 ;;  arg             1   10[COMRAM] unsigned char 
  3440 ;; Auto vars:     Size  Location     Type
  3441 ;;  dmflags         1   13[COMRAM] unsigned char 
  3442 ;;  i               1   15[COMRAM] unsigned char 
  3443 ;;  val             1   14[COMRAM] unsigned char 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;		None               void
  3446 ;; Registers used:
  3447 ;;		wreg, status,2, status,0, cstack
  3448 ;; Tracked objects:
  3449 ;;		On entry : F/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3453 ;;      Params:         1       0       0       0       0       0       0
  3454 ;;      Locals:         3       0       0       0       0       0       0
  3455 ;;      Temps:          2       0       0       0       0       0       0
  3456 ;;      Totals:         6       0       0       0       0       0       0
  3457 ;;Total ram usage:        6 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    3
  3460 ;; This function calls:
  3461 ;;		_writeEEPROM
  3462 ;;		_readEEPROM
  3463 ;; This function is called by:
  3464 ;;		_doDM
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           	psect	text10
  3469  003968                     __ptext10:
  3470                           	opt stack 0
  3471  003968                     _doActionDisable:
  3472                           	opt stack 25
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;incstack = 0
  3476                           ;incstack = 0
  3477                           ;doActionDisable@dmflags stored from wreg
  3478  003968  CFE8 F00E          	movff	wreg,doActionDisable@dmflags
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;main.c: 2060: unsigned char i;
  3482                           ;main.c: 2061: unsigned char val;
  3483                           ;main.c: 2063: for ( i = 0; i < 8; i++ ) {
  3484  00396C  6A10               	clrf	doActionDisable@i,c
  3485  00396E                     l8725:
  3486                           
  3487                           ;main.c: 2066: if ( !( arg & (1 << i) ) ) continue;
  3488  00396E  C010  F00C         	movff	doActionDisable@i,??_doActionDisable
  3489  003972  0E01               	movlw	1
  3490  003974  6E0D               	movwf	(??_doActionDisable+1)& (0+255),c
  3491  003976  2A0C               	incf	??_doActionDisable,f,c
  3492  003978  D002               	goto	u10284
  3493  00397A                     u10285:
  3494  00397A  90D8               	bcf	status,0,c
  3495  00397C  360D               	rlcf	??_doActionDisable+1,f,c
  3496  00397E                     u10284:
  3497  00397E  2E0C               	decfsz	??_doActionDisable,f,c
  3498  003980  D7FC               	goto	u10285
  3499  003982  500D               	movf	??_doActionDisable+1,w,c
  3500  003984  140B               	andwf	doActionDisable@arg,w,c
  3501  003986  E021               	bz	l8735
  3502                           
  3503                           ;main.c: 2069: if ( dmflags & 0x08) {
  3504  003988  A60E               	btfss	doActionDisable@dmflags,3,c
  3505  00398A  D00B               	goto	l8733
  3506                           
  3507                           ;main.c: 2070: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3508                           ;main.c: 2071: 53 +
  3509                           ;main.c: 2072: i ) ) {
  3510  00398C  0E78               	movlw	120
  3511  00398E  2410               	addwf	doActionDisable@i,w,c
  3512  003990  6E08               	movwf	?_readEEPROM,c
  3513  003992  6A09               	clrf	?_readEEPROM+1,c
  3514  003994  0E00               	movlw	0
  3515  003996  2209               	addwfc	?_readEEPROM+1,f,c
  3516  003998  EC81  F01F         	call	_readEEPROM	;wreg free
  3517  00399C  0100               	movlb	0	; () banked
  3518  00399E  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3519  0039A0  E114               	bnz	l8735
  3520  0039A2                     l8733:
  3521                           
  3522                           ;main.c: 2074: }
  3523                           ;main.c: 2075: }
  3524                           ;main.c: 2077: val = readEEPROM( 0x43 + 10 + i );
  3525  0039A2  0E4D               	movlw	77
  3526  0039A4  2410               	addwf	doActionDisable@i,w,c
  3527  0039A6  6E08               	movwf	?_readEEPROM,c
  3528  0039A8  6A09               	clrf	?_readEEPROM+1,c
  3529  0039AA  0E00               	movlw	0
  3530  0039AC  2209               	addwfc	?_readEEPROM+1,f,c
  3531  0039AE  EC81  F01F         	call	_readEEPROM	;wreg free
  3532  0039B2  6E0F               	movwf	doActionDisable@val,c
  3533                           
  3534                           ;main.c: 2078: writeEEPROM( 0x43 + 10 + i, val & ~0x80 );
  3535  0039B4  0E4D               	movlw	77
  3536  0039B6  2410               	addwf	doActionDisable@i,w,c
  3537  0039B8  6E08               	movwf	?_writeEEPROM,c
  3538  0039BA  6A09               	clrf	?_writeEEPROM+1,c
  3539  0039BC  0E00               	movlw	0
  3540  0039BE  2209               	addwfc	?_writeEEPROM+1,f,c
  3541  0039C0  500F               	movf	doActionDisable@val,w,c
  3542  0039C2  0B7F               	andlw	127
  3543  0039C4  6E0A               	movwf	?_writeEEPROM+2,c
  3544  0039C6  EC59  F01E         	call	_writeEEPROM	;wreg free
  3545  0039CA                     l8735:
  3546  0039CA  2A10               	incf	doActionDisable@i,f,c
  3547  0039CC  0E07               	movlw	7
  3548  0039CE  6410               	cpfsgt	doActionDisable@i,c
  3549  0039D0  D7CE               	goto	l8725
  3550  0039D2  0C07               	retlw	7
  3551  0039D4                     __end_of_doActionDisable:
  3552                           	opt stack 0
  3553                           tblptru	equ	0xFF8
  3554                           prodh	equ	0xFF4
  3555                           prodl	equ	0xFF3
  3556                           postinc0	equ	0xFEE
  3557                           wreg	equ	0xFE8
  3558                           postinc2	equ	0xFDE
  3559                           postdec2	equ	0xFDD
  3560                           fsr2h	equ	0xFDA
  3561                           fsr2l	equ	0xFD9
  3562                           status	equ	0xFD8
  3563                           
  3564 ;; *************** function _doActionStatus *****************
  3565 ;; Defined at:
  3566 ;;		line 1969 in file "../main.c"
  3567 ;; Parameters:    Size  Location     Type
  3568 ;;  dmflags         1    wreg     unsigned char 
  3569 ;;  arg             1   80[COMRAM] unsigned char 
  3570 ;; Auto vars:     Size  Location     Type
  3571 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3572 ;;  i               1   27[BANK0 ] unsigned char 
  3573 ;;  val             1   26[BANK0 ] unsigned char 
  3574 ;;  bOn             1   25[BANK0 ] enum E15660
  3575 ;; Return value:  Size  Location     Type
  3576 ;;		None               void
  3577 ;; Registers used:
  3578 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3579 ;; Tracked objects:
  3580 ;;		On entry : F/0
  3581 ;;		On exit  : F/0
  3582 ;;		Unchanged: 0/0
  3583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3584 ;;      Params:         1       0       0       0       0       0       0
  3585 ;;      Locals:         0       4       0       0       0       0       0
  3586 ;;      Temps:          0       2       0       0       0       0       0
  3587 ;;      Totals:         1       6       0       0       0       0       0
  3588 ;;Total ram usage:        7 bytes
  3589 ;; Hardware stack levels used:    1
  3590 ;; Hardware stack levels required when called:    7
  3591 ;; This function calls:
  3592 ;;		_readEEPROM
  3593 ;;		_SendInformationEvent
  3594 ;; This function is called by:
  3595 ;;		_doDM
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           	psect	text11
  3600  003234                     __ptext11:
  3601                           	opt stack 0
  3602  003234                     _doActionStatus:
  3603                           	opt stack 21
  3604                           
  3605                           ;incstack = 0
  3606                           ;incstack = 0
  3607                           ;doActionStatus@dmflags stored from wreg
  3608  003234  CFE8 F0CE          	movff	wreg,doActionStatus@dmflags
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;main.c: 1971: unsigned char i;
  3612                           ;main.c: 1972: unsigned char val;
  3613                           ;main.c: 1973: BOOL bOn = 0;
  3614  003238  6BCF               	clrf	doActionStatus@bOn& (0+255),b
  3615                           
  3616                           ;main.c: 1975: for (i = 0; i < 8; i++) {
  3617  00323A  6BD1               	clrf	doActionStatus@i& (0+255),b
  3618  00323C                     l10325:
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;main.c: 1978: if (!(arg & (1 << i))) continue;
  3622  00323C  C0D1  F0CC         	movff	doActionStatus@i,??_doActionStatus
  3623  003240  0E01               	movlw	1
  3624  003242  6FCD               	movwf	(??_doActionStatus+1)& (0+255),b
  3625  003244  2BCC               	incf	??_doActionStatus& (0+255),f,b
  3626  003246  D002               	goto	u13004
  3627  003248                     u13005:
  3628  003248  90D8               	bcf	status,0,c
  3629  00324A  37CD               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3630  00324C                     u13004:
  3631  00324C  2FCC               	decfsz	??_doActionStatus& (0+255),f,b
  3632  00324E  D7FC               	goto	u13005
  3633  003250  51CD               	movf	(??_doActionStatus+1)& (0+255),w,b
  3634  003252  1451               	andwf	doActionStatus@arg,w,c
  3635  003254  E070               	bz	l10369
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;main.c: 1981: if (dmflags & 0x08) {
  3639  003256  A7CE               	btfss	doActionStatus@dmflags& (0+255),3,b
  3640  003258  D00B               	goto	l10333
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;main.c: 1982: if (vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3644                           ;main.c: 1983: 53 +
  3645                           ;main.c: 1984: i ) ) {
  3646  00325A  0E78               	movlw	120
  3647  00325C  25D1               	addwf	doActionStatus@i& (0+255),w,b
  3648  00325E  6E08               	movwf	?_readEEPROM,c
  3649  003260  6A09               	clrf	?_readEEPROM+1,c
  3650  003262  0E00               	movlw	0
  3651  003264  2209               	addwfc	?_readEEPROM+1,f,c
  3652  003266  EC81  F01F         	call	_readEEPROM	;wreg free
  3653  00326A  0100               	movlb	0	; () banked
  3654  00326C  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3655  00326E  E163               	bnz	l10369
  3656  003270                     l10333:
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;main.c: 1986: }
  3660                           ;main.c: 1987: }
  3661                           ;main.c: 1989: val = readEEPROM( 0x43 + 10 + i );
  3662  003270  0E4D               	movlw	77
  3663  003272  25D1               	addwf	doActionStatus@i& (0+255),w,b
  3664  003274  6E08               	movwf	?_readEEPROM,c
  3665  003276  6A09               	clrf	?_readEEPROM+1,c
  3666  003278  0E00               	movlw	0
  3667  00327A  2209               	addwfc	?_readEEPROM+1,f,c
  3668  00327C  EC81  F01F         	call	_readEEPROM	;wreg free
  3669  003280  0100               	movlb	0	; () banked
  3670  003282  6FD0               	movwf	doActionStatus@val& (0+255),b
  3671                           
  3672                           ;main.c: 1991: switch (i) {
  3673  003284  D023               	goto	l10351
  3674  003286                     l10335:
  3675                           
  3676                           ; BSR set to: 0
  3677                           ;main.c: 1994: bOn = LATBbits.LATB4;
  3678  003286  0E00               	movlw	0
  3679  003288  B88A               	btfsc	3978,4,c	;volatile
  3680  00328A  0E01               	movlw	1
  3681  00328C  6FCF               	movwf	doActionStatus@bOn& (0+255),b
  3682                           
  3683                           ;main.c: 1995: break;
  3684  00328E  D02C               	goto	l10353
  3685  003290                     l10337:
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;main.c: 1998: bOn = LATBbits.LATB1;
  3689  003290  0E00               	movlw	0
  3690  003292  B28A               	btfsc	3978,1,c	;volatile
  3691  003294  0E01               	movlw	1
  3692  003296  6FCF               	movwf	doActionStatus@bOn& (0+255),b
  3693                           
  3694                           ;main.c: 1999: break;
  3695  003298  D027               	goto	l10353
  3696  00329A                     l10339:
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;main.c: 2002: bOn = LATBbits.LATB0;
  3700  00329A  0E00               	movlw	0
  3701  00329C  B08A               	btfsc	3978,0,c	;volatile
  3702  00329E  0E01               	movlw	1
  3703  0032A0  6FCF               	movwf	doActionStatus@bOn& (0+255),b
  3704                           
  3705                           ;main.c: 2003: break;
  3706  0032A2  D022               	goto	l10353
  3707  0032A4                     l10341:
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;main.c: 2006: bOn = LATCbits.LATC7;
  3711  0032A4  0E00               	movlw	0
  3712  0032A6  BE8B               	btfsc	3979,7,c	;volatile
  3713  0032A8  0E01               	movlw	1
  3714  0032AA  6FCF               	movwf	doActionStatus@bOn& (0+255),b
  3715                           
  3716                           ;main.c: 2007: break;
  3717  0032AC  D01D               	goto	l10353
  3718  0032AE                     l10343:
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;main.c: 2010: bOn = LATCbits.LATC6;
  3722  0032AE  0E00               	movlw	0
  3723  0032B0  BC8B               	btfsc	3979,6,c	;volatile
  3724  0032B2  0E01               	movlw	1
  3725  0032B4  6FCF               	movwf	doActionStatus@bOn& (0+255),b
  3726                           
  3727                           ;main.c: 2011: break;
  3728  0032B6  D018               	goto	l10353
  3729  0032B8                     l10345:
  3730                           
  3731                           ; BSR set to: 0
  3732                           ;main.c: 2014: bOn = LATCbits.LATC5;
  3733  0032B8  0E00               	movlw	0
  3734  0032BA  BA8B               	btfsc	3979,5,c	;volatile
  3735  0032BC  0E01               	movlw	1
  3736  0032BE  6FCF               	movwf	doActionStatus@bOn& (0+255),b
  3737                           
  3738                           ;main.c: 2015: break;
  3739  0032C0  D013               	goto	l10353
  3740  0032C2                     l10347:
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;main.c: 2018: bOn = LATCbits.LATC4;
  3744  0032C2  0E00               	movlw	0
  3745  0032C4  B88B               	btfsc	3979,4,c	;volatile
  3746  0032C6  0E01               	movlw	1
  3747  0032C8  6FCF               	movwf	doActionStatus@bOn& (0+255),b
  3748                           
  3749                           ;main.c: 2019: break;
  3750  0032CA  D00E               	goto	l10353
  3751  0032CC                     l10351:
  3752                           
  3753                           ; BSR set to: 0
  3754  0032CC  51D1               	movf	doActionStatus@i& (0+255),w,b
  3755                           
  3756                           ; Switch size 1, requested type "speed"
  3757                           ; Number of cases is 7, Range of values is 0 to 6
  3758                           ; switch strategies available:
  3759                           ; Name         Instructions Cycles
  3760                           ; simple_byte           22    12 (average)
  3761                           ;	Chosen strategy is simple_byte
  3762  0032CE  E0DB               	bz	l10335
  3763  0032D0  0A01               	xorlw	1	; case 1
  3764  0032D2  E0DE               	bz	l10337
  3765  0032D4  0A03               	xorlw	3	; case 2
  3766  0032D6  E0E1               	bz	l10339
  3767  0032D8  0A01               	xorlw	1	; case 3
  3768  0032DA  E0E4               	bz	l10341
  3769  0032DC  0A07               	xorlw	7	; case 4
  3770  0032DE  E0E7               	bz	l10343
  3771  0032E0  0A01               	xorlw	1	; case 5
  3772  0032E2  E0EA               	bz	l10345
  3773  0032E4  0A03               	xorlw	3	; case 6
  3774  0032E6  E0ED               	bz	l10347
  3775  0032E8                     l10353:
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;main.c: 2023: if (bOn) {
  3779  0032E8  51CF               	movf	doActionStatus@bOn& (0+255),w,b
  3780  0032EA  E013               	bz	l514
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;main.c: 2026: if ( val & 0x10 ) {
  3784  0032EC  A9D0               	btfss	doActionStatus@val& (0+255),4,b
  3785  0032EE  D007               	goto	l10359
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;main.c: 2027: SendInformationEvent( i, 20, 4 );
  3789  0032F0  0E14               	movlw	20
  3790  0032F2  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  3791  0032F4  0E04               	movlw	4
  3792  0032F6  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3793  0032F8  51D1               	movf	doActionStatus@i& (0+255),w,b
  3794  0032FA  ECEA  F01C         	call	_SendInformationEvent
  3795  0032FE                     l10359:
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;main.c: 2028: }
  3799                           ;main.c: 2031: if ( val & 0x40 ) {
  3800  0032FE  ADD0               	btfss	doActionStatus@val& (0+255),6,b
  3801  003300  D01A               	goto	l10369
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;main.c: 2032: SendInformationEvent( i, 20, 24 );
  3805  003302  0E14               	movlw	20
  3806  003304  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  3807  003306  0E18               	movlw	24
  3808  003308  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3809  00330A  51D1               	movf	doActionStatus@i& (0+255),w,b
  3810  00330C  ECEA  F01C         	call	_SendInformationEvent
  3811  003310  D012               	goto	l10369
  3812  003312                     l514:
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;main.c: 2036: else {
  3816                           ;main.c: 2039: if ( val & 0x10 ) {
  3817  003312  A9D0               	btfss	doActionStatus@val& (0+255),4,b
  3818  003314  D007               	goto	l10365
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;main.c: 2040: SendInformationEvent( i, 20, 4 );
  3822  003316  0E14               	movlw	20
  3823  003318  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  3824  00331A  0E04               	movlw	4
  3825  00331C  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3826  00331E  51D1               	movf	doActionStatus@i& (0+255),w,b
  3827  003320  ECEA  F01C         	call	_SendInformationEvent
  3828  003324                     l10365:
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;main.c: 2041: }
  3832                           ;main.c: 2044: if ( val & 0x40 ) {
  3833  003324  ADD0               	btfss	doActionStatus@val& (0+255),6,b
  3834  003326  D007               	goto	l10369
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;main.c: 2045: SendInformationEvent( i, 20, 24 );
  3838  003328  0E14               	movlw	20
  3839  00332A  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  3840  00332C  0E18               	movlw	24
  3841  00332E  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3842  003330  51D1               	movf	doActionStatus@i& (0+255),w,b
  3843  003332  ECEA  F01C         	call	_SendInformationEvent
  3844  003336                     l10369:
  3845                           
  3846                           ; BSR set to: 0
  3847  003336  2BD1               	incf	doActionStatus@i& (0+255),f,b
  3848                           
  3849                           ; BSR set to: 0
  3850  003338  0E07               	movlw	7
  3851  00333A  65D1               	cpfsgt	doActionStatus@i& (0+255),b
  3852  00333C  D77F               	goto	l10325
  3853                           
  3854                           ; BSR set to: 0
  3855  00333E  0C07               	retlw	7
  3856  003340                     __end_of_doActionStatus:
  3857                           	opt stack 0
  3858                           tblptru	equ	0xFF8
  3859                           prodh	equ	0xFF4
  3860                           prodl	equ	0xFF3
  3861                           postinc0	equ	0xFEE
  3862                           wreg	equ	0xFE8
  3863                           postinc2	equ	0xFDE
  3864                           postdec2	equ	0xFDD
  3865                           fsr2h	equ	0xFDA
  3866                           fsr2l	equ	0xFD9
  3867                           status	equ	0xFD8
  3868                           
  3869 ;; *************** function _doActionPulse *****************
  3870 ;; Defined at:
  3871 ;;		line 1878 in file "../main.c"
  3872 ;; Parameters:    Size  Location     Type
  3873 ;;  dmflags         1    wreg     unsigned char 
  3874 ;;  arg             1   10[COMRAM] unsigned char 
  3875 ;; Auto vars:     Size  Location     Type
  3876 ;;  dmflags         1   14[COMRAM] unsigned char 
  3877 ;;  i               1   16[COMRAM] unsigned char 
  3878 ;;  val             1   15[COMRAM] unsigned char 
  3879 ;; Return value:  Size  Location     Type
  3880 ;;		None               void
  3881 ;; Registers used:
  3882 ;;		wreg, status,2, status,0, cstack
  3883 ;; Tracked objects:
  3884 ;;		On entry : F/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3888 ;;      Params:         1       0       0       0       0       0       0
  3889 ;;      Locals:         3       0       0       0       0       0       0
  3890 ;;      Temps:          3       0       0       0       0       0       0
  3891 ;;      Totals:         7       0       0       0       0       0       0
  3892 ;;Total ram usage:        7 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    3
  3895 ;; This function calls:
  3896 ;;		_readEEPROM
  3897 ;; This function is called by:
  3898 ;;		_doDM
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           	psect	text12
  3903  002850                     __ptext12:
  3904                           	opt stack 0
  3905  002850                     _doActionPulse:
  3906                           	opt stack 25
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;incstack = 0
  3910                           ;incstack = 0
  3911                           ;doActionPulse@dmflags stored from wreg
  3912  002850  CFE8 F00F          	movff	wreg,doActionPulse@dmflags
  3913                           
  3914                           ; BSR set to: 0
  3915                           ;main.c: 1880: unsigned char i;
  3916                           ;main.c: 1881: unsigned char val;
  3917                           ;main.c: 1883: for ( i = 0; i < 8; i++ ) {
  3918  002854  6A11               	clrf	doActionPulse@i,c
  3919  002856                     l8615:
  3920                           
  3921                           ;main.c: 1886: if ( !( arg & ( 1 << i ) ) ) continue;
  3922  002856  C011  F00C         	movff	doActionPulse@i,??_doActionPulse
  3923  00285A  0E01               	movlw	1
  3924  00285C  6E0D               	movwf	(??_doActionPulse+1)& (0+255),c
  3925  00285E  2A0C               	incf	??_doActionPulse,f,c
  3926  002860  D002               	goto	u10124
  3927  002862                     u10125:
  3928  002862  90D8               	bcf	status,0,c
  3929  002864  360D               	rlcf	??_doActionPulse+1,f,c
  3930  002866                     u10124:
  3931  002866  2E0C               	decfsz	??_doActionPulse,f,c
  3932  002868  D7FC               	goto	u10125
  3933  00286A  500D               	movf	??_doActionPulse+1,w,c
  3934  00286C  140B               	andwf	doActionPulse@arg,w,c
  3935  00286E  E101 D0D2          	bz	l8661
  3936                           
  3937                           ;main.c: 1889: if (dmflags & 0x08) {
  3938  002872  A60F               	btfss	doActionPulse@dmflags,3,c
  3939  002874  D00C               	goto	l8623
  3940                           
  3941                           ;main.c: 1890: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3942                           ;main.c: 1891: 53 +
  3943                           ;main.c: 1892: i ) ) {
  3944  002876  0E78               	movlw	120
  3945  002878  2411               	addwf	doActionPulse@i,w,c
  3946  00287A  6E08               	movwf	?_readEEPROM,c
  3947  00287C  6A09               	clrf	?_readEEPROM+1,c
  3948  00287E  0E00               	movlw	0
  3949  002880  2209               	addwfc	?_readEEPROM+1,f,c
  3950  002882  EC81  F01F         	call	_readEEPROM	;wreg free
  3951  002886  0100               	movlb	0	; () banked
  3952  002888  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3953  00288A  E001 D0C4          	bnz	l8661
  3954  00288E                     l8623:
  3955                           
  3956                           ;main.c: 1894: }
  3957                           ;main.c: 1895: }
  3958                           ;main.c: 1897: val = readEEPROM( 0x43 + 10 + i );
  3959  00288E  0E4D               	movlw	77
  3960  002890  2411               	addwf	doActionPulse@i,w,c
  3961  002892  6E08               	movwf	?_readEEPROM,c
  3962  002894  6A09               	clrf	?_readEEPROM+1,c
  3963  002896  0E00               	movlw	0
  3964  002898  2209               	addwfc	?_readEEPROM+1,f,c
  3965  00289A  EC81  F01F         	call	_readEEPROM	;wreg free
  3966  00289E  6E10               	movwf	doActionPulse@val,c
  3967                           
  3968                           ;main.c: 1900: if ( !( val & 0x80 ) ) continue;
  3969  0028A0  AE10               	btfss	doActionPulse@val,7,c
  3970  0028A2  D0B9               	goto	l8661
  3971  0028A4  D0A8               	goto	l8659
  3972  0028A6                     l488:
  3973                           
  3974                           ;main.c: 1905: LATBbits.LATB4 = 0;
  3975  0028A6  988A               	bcf	3978,4,c	;volatile
  3976                           
  3977                           ;main.c: 1906: relay_pulse_flags |= 0x01;
  3978  0028A8  0100               	movlb	0	; () banked
  3979  0028AA  818F               	bsf	_relay_pulse_flags& (0+255),0,b
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;main.c: 1907: relay_pulse_timer[ 0 ] =
  3983                           ;main.c: 1908: readEEPROM( 0x43 + 18 ) * 256 +
  3984                           ;main.c: 1909: readEEPROM( 0x43 + 19 );
  3985  0028AC  6A09               	clrf	?_readEEPROM+1,c
  3986  0028AE  0E56               	movlw	86
  3987  0028B0  6E08               	movwf	?_readEEPROM,c
  3988  0028B2  EC81  F01F         	call	_readEEPROM	;wreg free
  3989  0028B6  6E0C               	movwf	??_doActionPulse& (0+255),c
  3990  0028B8  6A09               	clrf	?_readEEPROM+1,c
  3991  0028BA  0E55               	movlw	85
  3992  0028BC  6E08               	movwf	?_readEEPROM,c
  3993  0028BE  EC81  F01F         	call	_readEEPROM	;wreg free
  3994  0028C2  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  3995  0028C4  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  3996  0028C6  500C               	movf	??_doActionPulse,w,c
  3997  0028C8  240D               	addwf	??_doActionPulse+1,w,c
  3998  0028CA  0100               	movlb	0	; () banked
  3999  0028CC  6F70               	movwf	_relay_pulse_timer& (0+255),b
  4000  0028CE  0E00               	movlw	0
  4001  0028D0  200E               	addwfc	??_doActionPulse+2,w,c
  4002  0028D2  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  4003                           
  4004                           ;main.c: 1910: break;
  4005  0028D4  D0A0               	goto	l8661
  4006  0028D6                     l490:
  4007                           
  4008                           ;main.c: 1913: LATBbits.LATB1 = 0;
  4009  0028D6  928A               	bcf	3978,1,c	;volatile
  4010                           
  4011                           ;main.c: 1914: relay_pulse_flags |= 0x02;
  4012  0028D8  0100               	movlb	0	; () banked
  4013  0028DA  838F               	bsf	_relay_pulse_flags& (0+255),1,b
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;main.c: 1915: relay_pulse_timer[ 1 ] =
  4017                           ;main.c: 1916: readEEPROM( 0x43 + 20 ) * 256 +
  4018                           ;main.c: 1917: readEEPROM( 0x43 + 21 );
  4019  0028DC  6A09               	clrf	?_readEEPROM+1,c
  4020  0028DE  0E58               	movlw	88
  4021  0028E0  6E08               	movwf	?_readEEPROM,c
  4022  0028E2  EC81  F01F         	call	_readEEPROM	;wreg free
  4023  0028E6  6E0C               	movwf	??_doActionPulse& (0+255),c
  4024  0028E8  6A09               	clrf	?_readEEPROM+1,c
  4025  0028EA  0E57               	movlw	87
  4026  0028EC  6E08               	movwf	?_readEEPROM,c
  4027  0028EE  EC81  F01F         	call	_readEEPROM	;wreg free
  4028  0028F2  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4029  0028F4  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4030  0028F6  500C               	movf	??_doActionPulse,w,c
  4031  0028F8  240D               	addwf	??_doActionPulse+1,w,c
  4032  0028FA  0100               	movlb	0	; () banked
  4033  0028FC  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  4034  0028FE  0E00               	movlw	0
  4035  002900  200E               	addwfc	??_doActionPulse+2,w,c
  4036  002902  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  4037                           
  4038                           ;main.c: 1918: break;
  4039  002904  D088               	goto	l8661
  4040  002906                     l491:
  4041                           
  4042                           ;main.c: 1921: LATBbits.LATB0 = 0;
  4043  002906  908A               	bcf	3978,0,c	;volatile
  4044                           
  4045                           ;main.c: 1922: relay_pulse_flags |= 0x04;
  4046  002908  0100               	movlb	0	; () banked
  4047  00290A  858F               	bsf	_relay_pulse_flags& (0+255),2,b
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;main.c: 1923: relay_pulse_timer[ 2 ] =
  4051                           ;main.c: 1924: readEEPROM( 0x43 + 22 ) * 256 +
  4052                           ;main.c: 1925: readEEPROM( 0x43 + 23 );
  4053  00290C  6A09               	clrf	?_readEEPROM+1,c
  4054  00290E  0E5A               	movlw	90
  4055  002910  6E08               	movwf	?_readEEPROM,c
  4056  002912  EC81  F01F         	call	_readEEPROM	;wreg free
  4057  002916  6E0C               	movwf	??_doActionPulse& (0+255),c
  4058  002918  6A09               	clrf	?_readEEPROM+1,c
  4059  00291A  0E59               	movlw	89
  4060  00291C  6E08               	movwf	?_readEEPROM,c
  4061  00291E  EC81  F01F         	call	_readEEPROM	;wreg free
  4062  002922  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4063  002924  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4064  002926  500C               	movf	??_doActionPulse,w,c
  4065  002928  240D               	addwf	??_doActionPulse+1,w,c
  4066  00292A  0100               	movlb	0	; () banked
  4067  00292C  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  4068  00292E  0E00               	movlw	0
  4069  002930  200E               	addwfc	??_doActionPulse+2,w,c
  4070  002932  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  4071                           
  4072                           ;main.c: 1926: break;
  4073  002934  D070               	goto	l8661
  4074  002936                     l492:
  4075                           
  4076                           ;main.c: 1929: LATCbits.LATC7 = 0;
  4077  002936  9E8B               	bcf	3979,7,c	;volatile
  4078                           
  4079                           ;main.c: 1930: relay_pulse_flags |= 0x08;
  4080  002938  0100               	movlb	0	; () banked
  4081  00293A  878F               	bsf	_relay_pulse_flags& (0+255),3,b
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;main.c: 1931: relay_pulse_timer[ 3 ] =
  4085                           ;main.c: 1932: readEEPROM( 0x43 + 24 ) * 256 +
  4086                           ;main.c: 1933: readEEPROM( 0x43 + 25 );
  4087  00293C  6A09               	clrf	?_readEEPROM+1,c
  4088  00293E  0E5C               	movlw	92
  4089  002940  6E08               	movwf	?_readEEPROM,c
  4090  002942  EC81  F01F         	call	_readEEPROM	;wreg free
  4091  002946  6E0C               	movwf	??_doActionPulse& (0+255),c
  4092  002948  6A09               	clrf	?_readEEPROM+1,c
  4093  00294A  0E5B               	movlw	91
  4094  00294C  6E08               	movwf	?_readEEPROM,c
  4095  00294E  EC81  F01F         	call	_readEEPROM	;wreg free
  4096  002952  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4097  002954  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4098  002956  500C               	movf	??_doActionPulse,w,c
  4099  002958  240D               	addwf	??_doActionPulse+1,w,c
  4100  00295A  0100               	movlb	0	; () banked
  4101  00295C  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  4102  00295E  0E00               	movlw	0
  4103  002960  200E               	addwfc	??_doActionPulse+2,w,c
  4104  002962  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  4105                           
  4106                           ;main.c: 1934: break;
  4107  002964  D058               	goto	l8661
  4108  002966                     l493:
  4109                           
  4110                           ;main.c: 1937: LATCbits.LATC6 = 0;
  4111  002966  9C8B               	bcf	3979,6,c	;volatile
  4112                           
  4113                           ;main.c: 1938: relay_pulse_flags |= 0x10;
  4114  002968  0100               	movlb	0	; () banked
  4115  00296A  898F               	bsf	_relay_pulse_flags& (0+255),4,b
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;main.c: 1939: relay_pulse_timer[ 4 ] =
  4119                           ;main.c: 1940: readEEPROM( 0x43 + 26 ) * 256 +
  4120                           ;main.c: 1941: readEEPROM( 0x43 + 27 );
  4121  00296C  6A09               	clrf	?_readEEPROM+1,c
  4122  00296E  0E5E               	movlw	94
  4123  002970  6E08               	movwf	?_readEEPROM,c
  4124  002972  EC81  F01F         	call	_readEEPROM	;wreg free
  4125  002976  6E0C               	movwf	??_doActionPulse& (0+255),c
  4126  002978  6A09               	clrf	?_readEEPROM+1,c
  4127  00297A  0E5D               	movlw	93
  4128  00297C  6E08               	movwf	?_readEEPROM,c
  4129  00297E  EC81  F01F         	call	_readEEPROM	;wreg free
  4130  002982  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4131  002984  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4132  002986  500C               	movf	??_doActionPulse,w,c
  4133  002988  240D               	addwf	??_doActionPulse+1,w,c
  4134  00298A  0100               	movlb	0	; () banked
  4135  00298C  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  4136  00298E  0E00               	movlw	0
  4137  002990  200E               	addwfc	??_doActionPulse+2,w,c
  4138  002992  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  4139                           
  4140                           ;main.c: 1942: break;
  4141  002994  D040               	goto	l8661
  4142  002996                     l494:
  4143                           
  4144                           ;main.c: 1945: LATCbits.LATC5 = 0;
  4145  002996  9A8B               	bcf	3979,5,c	;volatile
  4146                           
  4147                           ;main.c: 1946: relay_pulse_flags |= 0x20;
  4148  002998  0100               	movlb	0	; () banked
  4149  00299A  8B8F               	bsf	_relay_pulse_flags& (0+255),5,b
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;main.c: 1947: relay_pulse_timer[ 5 ] =
  4153                           ;main.c: 1948: readEEPROM( 0x43 + 28 ) * 256 +
  4154                           ;main.c: 1949: readEEPROM( 0x43 + 29 );
  4155  00299C  6A09               	clrf	?_readEEPROM+1,c
  4156  00299E  0E60               	movlw	96
  4157  0029A0  6E08               	movwf	?_readEEPROM,c
  4158  0029A2  EC81  F01F         	call	_readEEPROM	;wreg free
  4159  0029A6  6E0C               	movwf	??_doActionPulse& (0+255),c
  4160  0029A8  6A09               	clrf	?_readEEPROM+1,c
  4161  0029AA  0E5F               	movlw	95
  4162  0029AC  6E08               	movwf	?_readEEPROM,c
  4163  0029AE  EC81  F01F         	call	_readEEPROM	;wreg free
  4164  0029B2  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4165  0029B4  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4166  0029B6  500C               	movf	??_doActionPulse,w,c
  4167  0029B8  240D               	addwf	??_doActionPulse+1,w,c
  4168  0029BA  0100               	movlb	0	; () banked
  4169  0029BC  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  4170  0029BE  0E00               	movlw	0
  4171  0029C0  200E               	addwfc	??_doActionPulse+2,w,c
  4172  0029C2  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  4173                           
  4174                           ;main.c: 1950: break;
  4175  0029C4  D028               	goto	l8661
  4176  0029C6                     l495:
  4177                           
  4178                           ;main.c: 1953: LATCbits.LATC4 = 0;
  4179  0029C6  988B               	bcf	3979,4,c	;volatile
  4180                           
  4181                           ;main.c: 1954: relay_pulse_flags |= 0x40;
  4182  0029C8  0100               	movlb	0	; () banked
  4183  0029CA  8D8F               	bsf	_relay_pulse_flags& (0+255),6,b
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;main.c: 1955: relay_pulse_timer[ 6 ] =
  4187                           ;main.c: 1956: readEEPROM( 0x43 + 30 ) * 256 +
  4188                           ;main.c: 1957: readEEPROM( 0x43 + 31 );
  4189  0029CC  6A09               	clrf	?_readEEPROM+1,c
  4190  0029CE  0E62               	movlw	98
  4191  0029D0  6E08               	movwf	?_readEEPROM,c
  4192  0029D2  EC81  F01F         	call	_readEEPROM	;wreg free
  4193  0029D6  6E0C               	movwf	??_doActionPulse& (0+255),c
  4194  0029D8  6A09               	clrf	?_readEEPROM+1,c
  4195  0029DA  0E61               	movlw	97
  4196  0029DC  6E08               	movwf	?_readEEPROM,c
  4197  0029DE  EC81  F01F         	call	_readEEPROM	;wreg free
  4198  0029E2  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4199  0029E4  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4200  0029E6  500C               	movf	??_doActionPulse,w,c
  4201  0029E8  240D               	addwf	??_doActionPulse+1,w,c
  4202  0029EA  0100               	movlb	0	; () banked
  4203  0029EC  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  4204  0029EE  0E00               	movlw	0
  4205  0029F0  200E               	addwfc	??_doActionPulse+2,w,c
  4206  0029F2  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  4207                           
  4208                           ;main.c: 1958: break;
  4209  0029F4  D010               	goto	l8661
  4210  0029F6                     l8659:
  4211  0029F6  5011               	movf	doActionPulse@i,w,c
  4212                           
  4213                           ; Switch size 1, requested type "speed"
  4214                           ; Number of cases is 7, Range of values is 0 to 6
  4215                           ; switch strategies available:
  4216                           ; Name         Instructions Cycles
  4217                           ; simple_byte           22    12 (average)
  4218                           ;	Chosen strategy is simple_byte
  4219  0029F8  E101 D755          	bz	l488
  4220  0029FC  0A01               	xorlw	1	; case 1
  4221  0029FE  E101 D76A          	bz	l490
  4222  002A02  0A03               	xorlw	3	; case 2
  4223  002A04  E080               	bz	l491
  4224  002A06  0A01               	xorlw	1	; case 3
  4225  002A08  E096               	bz	l492
  4226  002A0A  0A07               	xorlw	7	; case 4
  4227  002A0C  E0AC               	bz	l493
  4228  002A0E  0A01               	xorlw	1	; case 5
  4229  002A10  E0C2               	bz	l494
  4230  002A12  0A03               	xorlw	3	; case 6
  4231  002A14  E0D8               	bz	l495
  4232  002A16                     l8661:
  4233  002A16  2A11               	incf	doActionPulse@i,f,c
  4234  002A18  0E07               	movlw	7
  4235  002A1A  6411               	cpfsgt	doActionPulse@i,c
  4236  002A1C  D71C               	goto	l8615
  4237  002A1E  0C07               	retlw	7
  4238  002A20                     __end_of_doActionPulse:
  4239                           	opt stack 0
  4240                           tblptru	equ	0xFF8
  4241                           prodh	equ	0xFF4
  4242                           prodl	equ	0xFF3
  4243                           postinc0	equ	0xFEE
  4244                           wreg	equ	0xFE8
  4245                           postinc2	equ	0xFDE
  4246                           postdec2	equ	0xFDD
  4247                           fsr2h	equ	0xFDA
  4248                           fsr2l	equ	0xFD9
  4249                           status	equ	0xFD8
  4250                           
  4251 ;; *************** function _doActionOn *****************
  4252 ;; Defined at:
  4253 ;;		line 1690 in file "../main.c"
  4254 ;; Parameters:    Size  Location     Type
  4255 ;;  dmflags         1    wreg     unsigned char 
  4256 ;;  arg             1   80[COMRAM] unsigned char 
  4257 ;; Auto vars:     Size  Location     Type
  4258 ;;  dmflags         1   25[BANK0 ] unsigned char 
  4259 ;;  i               1   27[BANK0 ] unsigned char 
  4260 ;;  val             1   26[BANK0 ] unsigned char 
  4261 ;; Return value:  Size  Location     Type
  4262 ;;		None               void
  4263 ;; Registers used:
  4264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4265 ;; Tracked objects:
  4266 ;;		On entry : F/0
  4267 ;;		On exit  : F/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4270 ;;      Params:         1       0       0       0       0       0       0
  4271 ;;      Locals:         0       3       0       0       0       0       0
  4272 ;;      Temps:          0       3       0       0       0       0       0
  4273 ;;      Totals:         1       6       0       0       0       0       0
  4274 ;;Total ram usage:        7 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    7
  4277 ;; This function calls:
  4278 ;;		_readEEPROM
  4279 ;;		_SendInformationEvent
  4280 ;; This function is called by:
  4281 ;;		_doDM
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           	psect	text13
  4286  0023D8                     __ptext13:
  4287                           	opt stack 0
  4288  0023D8                     _doActionOn:
  4289                           	opt stack 21
  4290                           
  4291                           ;incstack = 0
  4292                           ;incstack = 0
  4293                           ;doActionOn@dmflags stored from wreg
  4294  0023D8  CFE8 F0CF          	movff	wreg,doActionOn@dmflags
  4295                           
  4296                           ; BSR set to: 0
  4297                           ;main.c: 1692: unsigned char i;
  4298                           ;main.c: 1693: unsigned char val;
  4299                           ;main.c: 1695: for (i = 0; i < 8; i++) {
  4300  0023DC  6BD1               	clrf	doActionOn@i& (0+255),b
  4301  0023DE                     l10263:
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;main.c: 1698: if ( !( arg & ( 1 << i ) ) ) continue;
  4305  0023DE  C0D1  F0CC         	movff	doActionOn@i,??_doActionOn
  4306  0023E2  0E01               	movlw	1
  4307  0023E4  6FCD               	movwf	(??_doActionOn+1)& (0+255),b
  4308  0023E6  2BCC               	incf	??_doActionOn& (0+255),f,b
  4309  0023E8  D002               	goto	u12854
  4310  0023EA                     u12855:
  4311  0023EA  90D8               	bcf	status,0,c
  4312  0023EC  37CD               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4313  0023EE                     u12854:
  4314  0023EE  2FCC               	decfsz	??_doActionOn& (0+255),f,b
  4315  0023F0  D7FC               	goto	u12855
  4316  0023F2  51CD               	movf	(??_doActionOn+1)& (0+255),w,b
  4317  0023F4  1451               	andwf	doActionOn@arg,w,c
  4318  0023F6  E101 D11F          	bz	l10315
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;main.c: 1701: if ( dmflags & 0x08 ) {
  4322  0023FA  A7CF               	btfss	doActionOn@dmflags& (0+255),3,b
  4323  0023FC  D00C               	goto	l10271
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;main.c: 1702: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  4327                           ;main.c: 1703: 53 +
  4328                           ;main.c: 1704: i ) ) {
  4329  0023FE  0E78               	movlw	120
  4330  002400  25D1               	addwf	doActionOn@i& (0+255),w,b
  4331  002402  6E08               	movwf	?_readEEPROM,c
  4332  002404  6A09               	clrf	?_readEEPROM+1,c
  4333  002406  0E00               	movlw	0
  4334  002408  2209               	addwfc	?_readEEPROM+1,f,c
  4335  00240A  EC81  F01F         	call	_readEEPROM	;wreg free
  4336  00240E  0100               	movlb	0	; () banked
  4337  002410  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4338  002412  E001 D111          	bnz	l10315
  4339  002416                     l10271:
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;main.c: 1706: }
  4343                           ;main.c: 1707: }
  4344                           ;main.c: 1709: val = readEEPROM( 0x43 + 10 + i );
  4345  002416  0E4D               	movlw	77
  4346  002418  25D1               	addwf	doActionOn@i& (0+255),w,b
  4347  00241A  6E08               	movwf	?_readEEPROM,c
  4348  00241C  6A09               	clrf	?_readEEPROM+1,c
  4349  00241E  0E00               	movlw	0
  4350  002420  2209               	addwfc	?_readEEPROM+1,f,c
  4351  002422  EC81  F01F         	call	_readEEPROM	;wreg free
  4352  002426  0100               	movlb	0	; () banked
  4353  002428  6FD0               	movwf	doActionOn@val& (0+255),b
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;main.c: 1712: if ( !( val & 0x80 ) ) continue;
  4357  00242A  AFD0               	btfss	doActionOn@val& (0+255),7,b
  4358  00242C  D105               	goto	l10315
  4359  00242E  D0E0               	goto	l10307
  4360  002430                     l439:
  4361                           
  4362                           ; BSR set to: 0
  4363                           ;main.c: 1717: LATBbits.LATB4 = 1;
  4364  002430  888A               	bsf	3978,4,c	;volatile
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;main.c: 1719: if (readEEPROM( 0x43 + 10 ) & 0x04 ) {
  4368  002432  6A09               	clrf	?_readEEPROM+1,c
  4369  002434  0E4D               	movlw	77
  4370  002436  6E08               	movwf	?_readEEPROM,c
  4371  002438  EC81  F01F         	call	_readEEPROM	;wreg free
  4372  00243C  0100               	movlb	0	; () banked
  4373  00243E  6FCC               	movwf	??_doActionOn& (0+255),b
  4374  002440  A5CC               	btfss	??_doActionOn& (0+255),2,b
  4375  002442  D0E8               	goto	l441
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;main.c: 1720: relay_protection_timer[ 0 ] =
  4379                           ;main.c: 1721: readEEPROM( 0x43 + 34 ) * 256 +
  4380                           ;main.c: 1722: readEEPROM( 0x43 + 35 );
  4381  002444  6A09               	clrf	?_readEEPROM+1,c
  4382  002446  0E66               	movlw	102
  4383  002448  6E08               	movwf	?_readEEPROM,c
  4384  00244A  EC81  F01F         	call	_readEEPROM	;wreg free
  4385  00244E  0100               	movlb	0	; () banked
  4386  002450  6FCC               	movwf	??_doActionOn& (0+255),b
  4387  002452  6A09               	clrf	?_readEEPROM+1,c
  4388  002454  0E65               	movlw	101
  4389  002456  6E08               	movwf	?_readEEPROM,c
  4390  002458  EC81  F01F         	call	_readEEPROM	;wreg free
  4391  00245C  0100               	movlb	0	; () banked
  4392  00245E  6FCE               	movwf	(??_doActionOn+2)& (0+255),b
  4393  002460  6BCD               	clrf	(??_doActionOn+1)& (0+255),b
  4394  002462  51CC               	movf	??_doActionOn& (0+255),w,b
  4395  002464  25CD               	addwf	(??_doActionOn+1)& (0+255),w,b
  4396  002466  6F60               	movwf	_relay_protection_timer& (0+255),b
  4397  002468  0E00               	movlw	0
  4398  00246A  21CE               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4399  00246C  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  4400  00246E  D0D2               	goto	l441
  4401  002470                     l442:
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;main.c: 1727: LATBbits.LATB1 = 1;
  4405  002470  828A               	bsf	3978,1,c	;volatile
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;main.c: 1729: if (readEEPROM( 0x43 + 11) & 0x04 ) {
  4409  002472  6A09               	clrf	?_readEEPROM+1,c
  4410  002474  0E4E               	movlw	78
  4411  002476  6E08               	movwf	?_readEEPROM,c
  4412  002478  EC81  F01F         	call	_readEEPROM	;wreg free
  4413  00247C  0100               	movlb	0	; () banked
  4414  00247E  6FCC               	movwf	??_doActionOn& (0+255),b
  4415  002480  A5CC               	btfss	??_doActionOn& (0+255),2,b
  4416  002482  D0C8               	goto	l441
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;main.c: 1730: relay_protection_timer[ 1 ] =
  4420                           ;main.c: 1731: readEEPROM( 0x43 + 36 ) * 256 +
  4421                           ;main.c: 1732: readEEPROM( 0x43 + 37 );
  4422  002484  6A09               	clrf	?_readEEPROM+1,c
  4423  002486  0E68               	movlw	104
  4424  002488  6E08               	movwf	?_readEEPROM,c
  4425  00248A  EC81  F01F         	call	_readEEPROM	;wreg free
  4426  00248E  0100               	movlb	0	; () banked
  4427  002490  6FCC               	movwf	??_doActionOn& (0+255),b
  4428  002492  6A09               	clrf	?_readEEPROM+1,c
  4429  002494  0E67               	movlw	103
  4430  002496  6E08               	movwf	?_readEEPROM,c
  4431  002498  EC81  F01F         	call	_readEEPROM	;wreg free
  4432  00249C  0100               	movlb	0	; () banked
  4433  00249E  6FCE               	movwf	(??_doActionOn+2)& (0+255),b
  4434  0024A0  6BCD               	clrf	(??_doActionOn+1)& (0+255),b
  4435  0024A2  51CC               	movf	??_doActionOn& (0+255),w,b
  4436  0024A4  25CD               	addwf	(??_doActionOn+1)& (0+255),w,b
  4437  0024A6  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  4438  0024A8  0E00               	movlw	0
  4439  0024AA  21CE               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4440  0024AC  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  4441  0024AE  D0B2               	goto	l441
  4442  0024B0                     l444:
  4443                           
  4444                           ; BSR set to: 0
  4445                           ;main.c: 1737: LATBbits.LATB0 = 1;
  4446  0024B0  808A               	bsf	3978,0,c	;volatile
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;main.c: 1739: if (readEEPROM( 0x43 + 12) & 0x04 ) {
  4450  0024B2  6A09               	clrf	?_readEEPROM+1,c
  4451  0024B4  0E4F               	movlw	79
  4452  0024B6  6E08               	movwf	?_readEEPROM,c
  4453  0024B8  EC81  F01F         	call	_readEEPROM	;wreg free
  4454  0024BC  0100               	movlb	0	; () banked
  4455  0024BE  6FCC               	movwf	??_doActionOn& (0+255),b
  4456  0024C0  A5CC               	btfss	??_doActionOn& (0+255),2,b
  4457  0024C2  D0A8               	goto	l441
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;main.c: 1740: relay_protection_timer[ 2 ] =
  4461                           ;main.c: 1741: readEEPROM( 0x43 + 38 ) * 256 +
  4462                           ;main.c: 1742: readEEPROM( 0x43 + 39 );
  4463  0024C4  6A09               	clrf	?_readEEPROM+1,c
  4464  0024C6  0E6A               	movlw	106
  4465  0024C8  6E08               	movwf	?_readEEPROM,c
  4466  0024CA  EC81  F01F         	call	_readEEPROM	;wreg free
  4467  0024CE  0100               	movlb	0	; () banked
  4468  0024D0  6FCC               	movwf	??_doActionOn& (0+255),b
  4469  0024D2  6A09               	clrf	?_readEEPROM+1,c
  4470  0024D4  0E69               	movlw	105
  4471  0024D6  6E08               	movwf	?_readEEPROM,c
  4472  0024D8  EC81  F01F         	call	_readEEPROM	;wreg free
  4473  0024DC  0100               	movlb	0	; () banked
  4474  0024DE  6FCE               	movwf	(??_doActionOn+2)& (0+255),b
  4475  0024E0  6BCD               	clrf	(??_doActionOn+1)& (0+255),b
  4476  0024E2  51CC               	movf	??_doActionOn& (0+255),w,b
  4477  0024E4  25CD               	addwf	(??_doActionOn+1)& (0+255),w,b
  4478  0024E6  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  4479  0024E8  0E00               	movlw	0
  4480  0024EA  21CE               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4481  0024EC  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  4482  0024EE  D092               	goto	l441
  4483  0024F0                     l446:
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;main.c: 1747: LATCbits.LATC7 = 1;
  4487  0024F0  8E8B               	bsf	3979,7,c	;volatile
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;main.c: 1749: if ( readEEPROM( 0x43 + 13) & 0x04 ) {
  4491  0024F2  6A09               	clrf	?_readEEPROM+1,c
  4492  0024F4  0E50               	movlw	80
  4493  0024F6  6E08               	movwf	?_readEEPROM,c
  4494  0024F8  EC81  F01F         	call	_readEEPROM	;wreg free
  4495  0024FC  0100               	movlb	0	; () banked
  4496  0024FE  6FCC               	movwf	??_doActionOn& (0+255),b
  4497  002500  A5CC               	btfss	??_doActionOn& (0+255),2,b
  4498  002502  D088               	goto	l441
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;main.c: 1750: relay_protection_timer[ 3 ] =
  4502                           ;main.c: 1751: readEEPROM( 0x43 + 40 ) * 256 +
  4503                           ;main.c: 1752: readEEPROM( 0x43 + 41 );
  4504  002504  6A09               	clrf	?_readEEPROM+1,c
  4505  002506  0E6C               	movlw	108
  4506  002508  6E08               	movwf	?_readEEPROM,c
  4507  00250A  EC81  F01F         	call	_readEEPROM	;wreg free
  4508  00250E  0100               	movlb	0	; () banked
  4509  002510  6FCC               	movwf	??_doActionOn& (0+255),b
  4510  002512  6A09               	clrf	?_readEEPROM+1,c
  4511  002514  0E6B               	movlw	107
  4512  002516  6E08               	movwf	?_readEEPROM,c
  4513  002518  EC81  F01F         	call	_readEEPROM	;wreg free
  4514  00251C  0100               	movlb	0	; () banked
  4515  00251E  6FCE               	movwf	(??_doActionOn+2)& (0+255),b
  4516  002520  6BCD               	clrf	(??_doActionOn+1)& (0+255),b
  4517  002522  51CC               	movf	??_doActionOn& (0+255),w,b
  4518  002524  25CD               	addwf	(??_doActionOn+1)& (0+255),w,b
  4519  002526  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  4520  002528  0E00               	movlw	0
  4521  00252A  21CE               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4522  00252C  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  4523  00252E  D072               	goto	l441
  4524  002530                     l448:
  4525                           
  4526                           ; BSR set to: 0
  4527                           ;main.c: 1757: LATCbits.LATC6 = 1;
  4528  002530  8C8B               	bsf	3979,6,c	;volatile
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;main.c: 1759: if (readEEPROM( 0x43 + 14) & 0x04 ) {
  4532  002532  6A09               	clrf	?_readEEPROM+1,c
  4533  002534  0E51               	movlw	81
  4534  002536  6E08               	movwf	?_readEEPROM,c
  4535  002538  EC81  F01F         	call	_readEEPROM	;wreg free
  4536  00253C  0100               	movlb	0	; () banked
  4537  00253E  6FCC               	movwf	??_doActionOn& (0+255),b
  4538  002540  A5CC               	btfss	??_doActionOn& (0+255),2,b
  4539  002542  D068               	goto	l441
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;main.c: 1760: relay_protection_timer[ 4 ] =
  4543                           ;main.c: 1761: readEEPROM( 0x43 + 42 ) * 256 +
  4544                           ;main.c: 1762: readEEPROM( 0x43 + 43 );
  4545  002544  6A09               	clrf	?_readEEPROM+1,c
  4546  002546  0E6E               	movlw	110
  4547  002548  6E08               	movwf	?_readEEPROM,c
  4548  00254A  EC81  F01F         	call	_readEEPROM	;wreg free
  4549  00254E  0100               	movlb	0	; () banked
  4550  002550  6FCC               	movwf	??_doActionOn& (0+255),b
  4551  002552  6A09               	clrf	?_readEEPROM+1,c
  4552  002554  0E6D               	movlw	109
  4553  002556  6E08               	movwf	?_readEEPROM,c
  4554  002558  EC81  F01F         	call	_readEEPROM	;wreg free
  4555  00255C  0100               	movlb	0	; () banked
  4556  00255E  6FCE               	movwf	(??_doActionOn+2)& (0+255),b
  4557  002560  6BCD               	clrf	(??_doActionOn+1)& (0+255),b
  4558  002562  51CC               	movf	??_doActionOn& (0+255),w,b
  4559  002564  25CD               	addwf	(??_doActionOn+1)& (0+255),w,b
  4560  002566  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  4561  002568  0E00               	movlw	0
  4562  00256A  21CE               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4563  00256C  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  4564  00256E  D052               	goto	l441
  4565  002570                     l450:
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;main.c: 1767: LATCbits.LATC5 = 1;
  4569  002570  8A8B               	bsf	3979,5,c	;volatile
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;main.c: 1769: if (readEEPROM( 0x43 + 15) & 0x04) {
  4573  002572  6A09               	clrf	?_readEEPROM+1,c
  4574  002574  0E52               	movlw	82
  4575  002576  6E08               	movwf	?_readEEPROM,c
  4576  002578  EC81  F01F         	call	_readEEPROM	;wreg free
  4577  00257C  0100               	movlb	0	; () banked
  4578  00257E  6FCC               	movwf	??_doActionOn& (0+255),b
  4579  002580  A5CC               	btfss	??_doActionOn& (0+255),2,b
  4580  002582  D048               	goto	l441
  4581                           
  4582                           ; BSR set to: 0
  4583                           ;main.c: 1770: relay_protection_timer[ 5 ] =
  4584                           ;main.c: 1771: readEEPROM( 0x43 + 44 ) * 256 +
  4585                           ;main.c: 1772: readEEPROM( 0x43 + 45 );
  4586  002584  6A09               	clrf	?_readEEPROM+1,c
  4587  002586  0E70               	movlw	112
  4588  002588  6E08               	movwf	?_readEEPROM,c
  4589  00258A  EC81  F01F         	call	_readEEPROM	;wreg free
  4590  00258E  0100               	movlb	0	; () banked
  4591  002590  6FCC               	movwf	??_doActionOn& (0+255),b
  4592  002592  6A09               	clrf	?_readEEPROM+1,c
  4593  002594  0E6F               	movlw	111
  4594  002596  6E08               	movwf	?_readEEPROM,c
  4595  002598  EC81  F01F         	call	_readEEPROM	;wreg free
  4596  00259C  0100               	movlb	0	; () banked
  4597  00259E  6FCE               	movwf	(??_doActionOn+2)& (0+255),b
  4598  0025A0  6BCD               	clrf	(??_doActionOn+1)& (0+255),b
  4599  0025A2  51CC               	movf	??_doActionOn& (0+255),w,b
  4600  0025A4  25CD               	addwf	(??_doActionOn+1)& (0+255),w,b
  4601  0025A6  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  4602  0025A8  0E00               	movlw	0
  4603  0025AA  21CE               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4604  0025AC  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  4605  0025AE  D032               	goto	l441
  4606  0025B0                     l452:
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;main.c: 1777: LATCbits.LATC4 = 1;
  4610  0025B0  888B               	bsf	3979,4,c	;volatile
  4611                           
  4612                           ; BSR set to: 0
  4613                           ;main.c: 1779: if ( readEEPROM( 0x43 + 16) & 0x04) {
  4614  0025B2  6A09               	clrf	?_readEEPROM+1,c
  4615  0025B4  0E53               	movlw	83
  4616  0025B6  6E08               	movwf	?_readEEPROM,c
  4617  0025B8  EC81  F01F         	call	_readEEPROM	;wreg free
  4618  0025BC  0100               	movlb	0	; () banked
  4619  0025BE  6FCC               	movwf	??_doActionOn& (0+255),b
  4620  0025C0  A5CC               	btfss	??_doActionOn& (0+255),2,b
  4621  0025C2  D028               	goto	l441
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;main.c: 1780: relay_protection_timer[ 6 ] =
  4625                           ;main.c: 1781: readEEPROM( 0x43 + 46 ) * 256 +
  4626                           ;main.c: 1782: readEEPROM( 0x43 + 47 );
  4627  0025C4  6A09               	clrf	?_readEEPROM+1,c
  4628  0025C6  0E72               	movlw	114
  4629  0025C8  6E08               	movwf	?_readEEPROM,c
  4630  0025CA  EC81  F01F         	call	_readEEPROM	;wreg free
  4631  0025CE  0100               	movlb	0	; () banked
  4632  0025D0  6FCC               	movwf	??_doActionOn& (0+255),b
  4633  0025D2  6A09               	clrf	?_readEEPROM+1,c
  4634  0025D4  0E71               	movlw	113
  4635  0025D6  6E08               	movwf	?_readEEPROM,c
  4636  0025D8  EC81  F01F         	call	_readEEPROM	;wreg free
  4637  0025DC  0100               	movlb	0	; () banked
  4638  0025DE  6FCE               	movwf	(??_doActionOn+2)& (0+255),b
  4639  0025E0  6BCD               	clrf	(??_doActionOn+1)& (0+255),b
  4640  0025E2  51CC               	movf	??_doActionOn& (0+255),w,b
  4641  0025E4  25CD               	addwf	(??_doActionOn+1)& (0+255),w,b
  4642  0025E6  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  4643  0025E8  0E00               	movlw	0
  4644  0025EA  21CE               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4645  0025EC  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  4646  0025EE  D012               	goto	l441
  4647  0025F0                     l10307:
  4648                           
  4649                           ; BSR set to: 0
  4650  0025F0  51D1               	movf	doActionOn@i& (0+255),w,b
  4651                           
  4652                           ; Switch size 1, requested type "speed"
  4653                           ; Number of cases is 7, Range of values is 0 to 6
  4654                           ; switch strategies available:
  4655                           ; Name         Instructions Cycles
  4656                           ; simple_byte           22    12 (average)
  4657                           ;	Chosen strategy is simple_byte
  4658  0025F2  E101 D71D          	bz	l439
  4659  0025F6  0A01               	xorlw	1	; case 1
  4660  0025F8  E101 D73A          	bz	l442
  4661  0025FC  0A03               	xorlw	3	; case 2
  4662  0025FE  E101 D757          	bz	l444
  4663  002602  0A01               	xorlw	1	; case 3
  4664  002604  E101 D774          	bz	l446
  4665  002608  0A07               	xorlw	7	; case 4
  4666  00260A  E092               	bz	l448
  4667  00260C  0A01               	xorlw	1	; case 5
  4668  00260E  E0B0               	bz	l450
  4669  002610  0A03               	xorlw	3	; case 6
  4670  002612  E0CE               	bz	l452
  4671  002614                     l441:
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;main.c: 1789: if ( val & 0x08 ) {
  4675  002614  A7D0               	btfss	doActionOn@val& (0+255),3,b
  4676  002616  D007               	goto	l10311
  4677                           
  4678                           ; BSR set to: 0
  4679                           ;main.c: 1790: SendInformationEvent( i, 20, 3 );
  4680  002618  0E14               	movlw	20
  4681  00261A  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  4682  00261C  0E03               	movlw	3
  4683  00261E  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4684  002620  51D1               	movf	doActionOn@i& (0+255),w,b
  4685  002622  ECEA  F01C         	call	_SendInformationEvent
  4686  002626                     l10311:
  4687                           
  4688                           ; BSR set to: 0
  4689                           ;main.c: 1791: }
  4690                           ;main.c: 1794: if ( val & 0x20 ) {
  4691  002626  ABD0               	btfss	doActionOn@val& (0+255),5,b
  4692  002628  D007               	goto	l10315
  4693                           
  4694                           ; BSR set to: 0
  4695                           ;main.c: 1795: SendInformationEvent( i, 20, 25 );
  4696  00262A  0E14               	movlw	20
  4697  00262C  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  4698  00262E  0E19               	movlw	25
  4699  002630  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4700  002632  51D1               	movf	doActionOn@i& (0+255),w,b
  4701  002634  ECEA  F01C         	call	_SendInformationEvent
  4702  002638                     l10315:
  4703                           
  4704                           ; BSR set to: 0
  4705  002638  2BD1               	incf	doActionOn@i& (0+255),f,b
  4706                           
  4707                           ; BSR set to: 0
  4708  00263A  0E07               	movlw	7
  4709  00263C  65D1               	cpfsgt	doActionOn@i& (0+255),b
  4710  00263E  D6CF               	goto	l10263
  4711                           
  4712                           ; BSR set to: 0
  4713  002640  0C07               	retlw	7
  4714  002642                     __end_of_doActionOn:
  4715                           	opt stack 0
  4716                           tblptru	equ	0xFF8
  4717                           prodh	equ	0xFF4
  4718                           prodl	equ	0xFF3
  4719                           postinc0	equ	0xFEE
  4720                           wreg	equ	0xFE8
  4721                           postinc2	equ	0xFDE
  4722                           postdec2	equ	0xFDD
  4723                           fsr2h	equ	0xFDA
  4724                           fsr2l	equ	0xFD9
  4725                           status	equ	0xFD8
  4726                           
  4727 ;; *************** function _doActionOff *****************
  4728 ;; Defined at:
  4729 ;;		line 1805 in file "../main.c"
  4730 ;; Parameters:    Size  Location     Type
  4731 ;;  dmflags         1    wreg     unsigned char 
  4732 ;;  arg             1   80[COMRAM] unsigned char 
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;  dmflags         1   24[BANK0 ] unsigned char 
  4735 ;;  i               1   26[BANK0 ] unsigned char 
  4736 ;;  val             1   25[BANK0 ] unsigned char 
  4737 ;; Return value:  Size  Location     Type
  4738 ;;		None               void
  4739 ;; Registers used:
  4740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4741 ;; Tracked objects:
  4742 ;;		On entry : F/0
  4743 ;;		On exit  : F/0
  4744 ;;		Unchanged: 0/0
  4745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4746 ;;      Params:         1       0       0       0       0       0       0
  4747 ;;      Locals:         0       3       0       0       0       0       0
  4748 ;;      Temps:          0       2       0       0       0       0       0
  4749 ;;      Totals:         1       5       0       0       0       0       0
  4750 ;;Total ram usage:        6 bytes
  4751 ;; Hardware stack levels used:    1
  4752 ;; Hardware stack levels required when called:    7
  4753 ;; This function calls:
  4754 ;;		_readEEPROM
  4755 ;;		_SendInformationEvent
  4756 ;; This function is called by:
  4757 ;;		_doApplicationOneSecondWork
  4758 ;;		_doDM
  4759 ;; This function uses a non-reentrant model
  4760 ;;
  4761                           
  4762                           	psect	text14
  4763  003504                     __ptext14:
  4764                           	opt stack 0
  4765  003504                     _doActionOff:
  4766                           	opt stack 21
  4767                           
  4768                           ; BSR set to: 0
  4769                           ;incstack = 0
  4770                           ;incstack = 0
  4771                           ;doActionOff@dmflags stored from wreg
  4772  003504  CFE8 F0CE          	movff	wreg,doActionOff@dmflags
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;main.c: 1807: unsigned char i;
  4776                           ;main.c: 1808: unsigned char val;
  4777                           ;main.c: 1810: for ( i = 0; i < 8; i++ ) {
  4778  003508  6BD0               	clrf	doActionOff@i& (0+255),b
  4779  00350A                     l9865:
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;main.c: 1813: if ( !( arg & ( 1 << i ) ) ) continue;
  4783  00350A  C0D0  F0CC         	movff	doActionOff@i,??_doActionOff
  4784  00350E  0E01               	movlw	1
  4785  003510  6FCD               	movwf	(??_doActionOff+1)& (0+255),b
  4786  003512  2BCC               	incf	??_doActionOff& (0+255),f,b
  4787  003514  D002               	goto	u12214
  4788  003516                     u12215:
  4789  003516  90D8               	bcf	status,0,c
  4790  003518  37CD               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4791  00351A                     u12214:
  4792  00351A  2FCC               	decfsz	??_doActionOff& (0+255),f,b
  4793  00351C  D7FC               	goto	u12215
  4794  00351E  51CD               	movf	(??_doActionOff+1)& (0+255),w,b
  4795  003520  1451               	andwf	doActionOff@arg,w,c
  4796  003522  E048               	bz	l9889
  4797                           
  4798                           ; BSR set to: 0
  4799                           ;main.c: 1816: if ( dmflags & 0x08 ) {
  4800  003524  A7CE               	btfss	doActionOff@dmflags& (0+255),3,b
  4801  003526  D00B               	goto	l9873
  4802                           
  4803                           ; BSR set to: 0
  4804                           ;main.c: 1817: if ( vscp_imsg.data[ 2 ] != readEEPROM(0x43 +
  4805                           ;main.c: 1818: 53 +
  4806                           ;main.c: 1819: i ) ) {
  4807  003528  0E78               	movlw	120
  4808  00352A  25D0               	addwf	doActionOff@i& (0+255),w,b
  4809  00352C  6E08               	movwf	?_readEEPROM,c
  4810  00352E  6A09               	clrf	?_readEEPROM+1,c
  4811  003530  0E00               	movlw	0
  4812  003532  2209               	addwfc	?_readEEPROM+1,f,c
  4813  003534  EC81  F01F         	call	_readEEPROM	;wreg free
  4814  003538  0100               	movlb	0	; () banked
  4815  00353A  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4816  00353C  E13B               	bnz	l9889
  4817  00353E                     l9873:
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;main.c: 1821: }
  4821                           ;main.c: 1822: }
  4822                           ;main.c: 1824: val = readEEPROM( 0x43 + 10 + i );
  4823  00353E  0E4D               	movlw	77
  4824  003540  25D0               	addwf	doActionOff@i& (0+255),w,b
  4825  003542  6E08               	movwf	?_readEEPROM,c
  4826  003544  6A09               	clrf	?_readEEPROM+1,c
  4827  003546  0E00               	movlw	0
  4828  003548  2209               	addwfc	?_readEEPROM+1,f,c
  4829  00354A  EC81  F01F         	call	_readEEPROM	;wreg free
  4830  00354E  0100               	movlb	0	; () banked
  4831  003550  6FCF               	movwf	doActionOff@val& (0+255),b
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;main.c: 1827: if ( !( val & 0x80 ) ) continue;
  4835  003552  AFCF               	btfss	doActionOff@val& (0+255),7,b
  4836  003554  D02F               	goto	l9889
  4837  003556  D00E               	goto	l9881
  4838  003558                     l467:
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;main.c: 1832: LATBbits.LATB4 = 0;
  4842  003558  988A               	bcf	3978,4,c	;volatile
  4843                           
  4844                           ;main.c: 1833: break;
  4845  00355A  D01A               	goto	l468
  4846  00355C                     l469:
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;main.c: 1836: LATBbits.LATB1 = 0;
  4850  00355C  928A               	bcf	3978,1,c	;volatile
  4851                           
  4852                           ;main.c: 1837: break;
  4853  00355E  D018               	goto	l468
  4854  003560                     l470:
  4855                           
  4856                           ; BSR set to: 0
  4857                           ;main.c: 1840: LATBbits.LATB0 = 0;
  4858  003560  908A               	bcf	3978,0,c	;volatile
  4859                           
  4860                           ;main.c: 1841: break;
  4861  003562  D016               	goto	l468
  4862  003564                     l471:
  4863                           
  4864                           ; BSR set to: 0
  4865                           ;main.c: 1844: LATCbits.LATC7 = 0;
  4866  003564  9E8B               	bcf	3979,7,c	;volatile
  4867                           
  4868                           ;main.c: 1845: break;
  4869  003566  D014               	goto	l468
  4870  003568                     l472:
  4871                           
  4872                           ; BSR set to: 0
  4873                           ;main.c: 1848: LATCbits.LATC6 = 0;
  4874  003568  9C8B               	bcf	3979,6,c	;volatile
  4875                           
  4876                           ;main.c: 1849: break;
  4877  00356A  D012               	goto	l468
  4878  00356C                     l473:
  4879                           
  4880                           ; BSR set to: 0
  4881                           ;main.c: 1852: LATCbits.LATC5 = 0;
  4882  00356C  9A8B               	bcf	3979,5,c	;volatile
  4883                           
  4884                           ;main.c: 1853: break;
  4885  00356E  D010               	goto	l468
  4886  003570                     l474:
  4887                           
  4888                           ; BSR set to: 0
  4889                           ;main.c: 1856: LATCbits.LATC4 = 0;
  4890  003570  988B               	bcf	3979,4,c	;volatile
  4891                           
  4892                           ;main.c: 1857: break;
  4893  003572  D00E               	goto	l468
  4894  003574                     l9881:
  4895                           
  4896                           ; BSR set to: 0
  4897  003574  51D0               	movf	doActionOff@i& (0+255),w,b
  4898                           
  4899                           ; Switch size 1, requested type "speed"
  4900                           ; Number of cases is 7, Range of values is 0 to 6
  4901                           ; switch strategies available:
  4902                           ; Name         Instructions Cycles
  4903                           ; simple_byte           22    12 (average)
  4904                           ;	Chosen strategy is simple_byte
  4905  003576  E0F0               	bz	l467
  4906  003578  0A01               	xorlw	1	; case 1
  4907  00357A  E0F0               	bz	l469
  4908  00357C  0A03               	xorlw	3	; case 2
  4909  00357E  E0F0               	bz	l470
  4910  003580  0A01               	xorlw	1	; case 3
  4911  003582  E0F0               	bz	l471
  4912  003584  0A07               	xorlw	7	; case 4
  4913  003586  E0F0               	bz	l472
  4914  003588  0A01               	xorlw	1	; case 5
  4915  00358A  E0F0               	bz	l473
  4916  00358C  0A03               	xorlw	3	; case 6
  4917  00358E  E0F0               	bz	l474
  4918  003590                     l468:
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;main.c: 1862: if ( val & 0x10 ) {
  4922  003590  A9CF               	btfss	doActionOff@val& (0+255),4,b
  4923  003592  D007               	goto	l9885
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;main.c: 1863: SendInformationEvent( i, 20, 4 );
  4927  003594  0E14               	movlw	20
  4928  003596  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  4929  003598  0E04               	movlw	4
  4930  00359A  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4931  00359C  51D0               	movf	doActionOff@i& (0+255),w,b
  4932  00359E  ECEA  F01C         	call	_SendInformationEvent
  4933  0035A2                     l9885:
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;main.c: 1864: }
  4937                           ;main.c: 1867: if ( val & 0x40 ) {
  4938  0035A2  ADCF               	btfss	doActionOff@val& (0+255),6,b
  4939  0035A4  D007               	goto	l9889
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;main.c: 1868: SendInformationEvent( i, 20, 24 );
  4943  0035A6  0E14               	movlw	20
  4944  0035A8  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  4945  0035AA  0E18               	movlw	24
  4946  0035AC  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4947  0035AE  51D0               	movf	doActionOff@i& (0+255),w,b
  4948  0035B0  ECEA  F01C         	call	_SendInformationEvent
  4949  0035B4                     l9889:
  4950                           
  4951                           ; BSR set to: 0
  4952  0035B4  2BD0               	incf	doActionOff@i& (0+255),f,b
  4953                           
  4954                           ; BSR set to: 0
  4955  0035B6  0E07               	movlw	7
  4956  0035B8  65D0               	cpfsgt	doActionOff@i& (0+255),b
  4957  0035BA  D7A7               	goto	l9865
  4958                           
  4959                           ; BSR set to: 0
  4960  0035BC  0C07               	retlw	7
  4961  0035BE                     __end_of_doActionOff:
  4962                           	opt stack 0
  4963                           tblptru	equ	0xFF8
  4964                           prodh	equ	0xFF4
  4965                           prodl	equ	0xFF3
  4966                           postinc0	equ	0xFEE
  4967                           wreg	equ	0xFE8
  4968                           postinc2	equ	0xFDE
  4969                           postdec2	equ	0xFDD
  4970                           fsr2h	equ	0xFDA
  4971                           fsr2l	equ	0xFD9
  4972                           status	equ	0xFD8
  4973                           
  4974 ;; *************** function _vscp_handleProtocolEvent *****************
  4975 ;; Defined at:
  4976 ;;		line 786 in file "../../vscp_firmware/common/vscp_firmware.c"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;		None
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;  bytes           1   45[BANK0 ] unsigned char 
  4981 ;;  page_save       2   41[BANK0 ] unsigned short 
  4982 ;;  i               1   51[BANK0 ] unsigned char 
  4983 ;;  page_save       2   39[BANK0 ] unsigned short 
  4984 ;;  byte            1   55[BANK0 ] unsigned char 
  4985 ;;  bytes           1   53[BANK0 ] unsigned char 
  4986 ;;  cb              1   50[BANK0 ] unsigned char 
  4987 ;;  bytes_this_t    1   49[BANK0 ] unsigned char 
  4988 ;;  j               1   58[BANK0 ] unsigned char 
  4989 ;;  i               1   56[BANK0 ] unsigned char 
  4990 ;;  k               1   52[BANK0 ] unsigned char 
  4991 ;;  i               1   54[BANK0 ] unsigned char 
  4992 ;;  len             1   48[BANK0 ] unsigned char 
  4993 ;;  pos             1   47[BANK0 ] unsigned char 
  4994 ;;  i               1   57[BANK0 ] unsigned char 
  4995 ;;  len             1   46[BANK0 ] unsigned char 
  4996 ;;  pos             1   44[BANK0 ] unsigned char 
  4997 ;;  offset          1   43[BANK0 ] unsigned char 
  4998 ;; Return value:  Size  Location     Type
  4999 ;;		None               void
  5000 ;; Registers used:
  5001 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5002 ;; Tracked objects:
  5003 ;;		On entry : F/0
  5004 ;;		On exit  : 0/0
  5005 ;;		Unchanged: 0/0
  5006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5007 ;;      Params:         0       0       0       0       0       0       0
  5008 ;;      Locals:         0      20       0       0       0       0       0
  5009 ;;      Temps:          0       7       0       0       0       0       0
  5010 ;;      Totals:         0      27       0       0       0       0       0
  5011 ;;Total ram usage:       27 bytes
  5012 ;; Hardware stack levels used:    1
  5013 ;; Hardware stack levels required when called:    9
  5014 ;; This function calls:
  5015 ;;		_vscp_init
  5016 ;;		_vscp_readAppReg
  5017 ;;		_vscp_writeAppReg
  5018 ;;		_vscp_sendEvent
  5019 ;;		_vscp_getGUID
  5020 ;;		_vscp_getMDF_URL
  5021 ;;		_vscp_goBootloaderMode
  5022 ;;		_vscp_getMatrixInfo
  5023 ;;		_vscp_handleHeartbeat
  5024 ;;		_vscp_handleSetNickname
  5025 ;;		_vscp_handleDropNickname
  5026 ;;		_vscp_newNodeOnline
  5027 ;;		_vscp_readRegister
  5028 ;;		_vscp_readStdReg
  5029 ;;		_vscp_writeRegister
  5030 ;;		_vscp_writeStdReg
  5031 ;;		___lbmod
  5032 ;; This function is called by:
  5033 ;;		_main
  5034 ;; This function uses a non-reentrant model
  5035 ;;
  5036                           
  5037                           	psect	text15
  5038  000FD0                     __ptext15:
  5039                           	opt stack 0
  5040  000FD0                     _vscp_handleProtocolEvent:
  5041                           	opt stack 20
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;vscp_firmware.c: 788: if (0 == vscp_imsg.vscp_class) {
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;incstack = 0
  5048                           ;incstack = 0
  5049  000FD0  519E               	movf	(_vscp_imsg+3)& (0+255),w,b
  5050  000FD2  119D               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  5051  000FD4  E101 D2D8          	bz	l9693
  5052  000FD8  D308               	goto	l1271
  5053  000FDA                     l9281:
  5054                           
  5055                           ; BSR set to: 0
  5056                           ;vscp_firmware.c: 795: vscp_handleHeartbeat();
  5057  000FDA  EC89  F01D         	call	_vscp_handleHeartbeat	;wreg free
  5058                           
  5059                           ;vscp_firmware.c: 796: break;
  5060  000FDE  D305               	goto	l1271
  5061  000FE0                     l9283:
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;vscp_firmware.c: 800: vscp_newNodeOnline();
  5065  000FE0  ECF5  F01D         	call	_vscp_newNodeOnline	;wreg free
  5066                           
  5067                           ;vscp_firmware.c: 801: break;
  5068  000FE4  D302               	goto	l1271
  5069  000FE6                     l9285:
  5070                           
  5071                           ; BSR set to: 0
  5072                           ;vscp_firmware.c: 805: vscp_handleSetNickname();
  5073  000FE6  EC6C  F01E         	call	_vscp_handleSetNickname	;wreg free
  5074                           
  5075                           ;vscp_firmware.c: 806: break;
  5076  000FEA  D2FF               	goto	l1271
  5077  000FEC                     l9287:
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;vscp_firmware.c: 810: vscp_handleDropNickname();
  5081  000FEC  ECC7  F01D         	call	_vscp_handleDropNickname	;wreg free
  5082                           
  5083                           ;vscp_firmware.c: 811: break;
  5084  000FF0  D2FC               	goto	l1271
  5085  000FF2                     l9289:
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;vscp_firmware.c: 815: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  5089                           ;vscp_firmware.c: 816: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5090  000FF2  519B               	movf	_vscp_imsg& (0+255),w,b
  5091  000FF4  0B0F               	andlw	15
  5092  000FF6  0A02               	xorlw	2
  5093  000FF8  E001 D2F7          	bnz	l1271
  5094                           
  5095                           ; BSR set to: 0
  5096  000FFC  5196               	movf	_vscp_nickname& (0+255),w,b
  5097  000FFE  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  5098  001002  62DF               	cpfseq	indf2,c
  5099  001004  D2F2               	goto	l1271
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;vscp_firmware.c: 818: if (vscp_imsg.data[ 1 ] < 0x80) {
  5103  001006  0E80               	movlw	128
  5104  001008  61A2               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5105  00100A  D012               	goto	l9309
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;vscp_firmware.c: 821: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  5109  00100C  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5110  00100E  EC97  F01B         	call	_vscp_readAppReg
  5111  001012                     L13:
  5112  001012  0100               	movlb	0	; () banked
  5113  001014                     L14:
  5114  001014  6FAF               	movwf	(_vscp_omsg+6)& (0+255),b
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;vscp_firmware.c: 824: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  5118  001016  C0A2  F0AE         	movff	_vscp_imsg+7,_vscp_omsg+5
  5119                           
  5120                           ; BSR set to: 0
  5121                           ;vscp_firmware.c: 826: vscp_omsg.priority = 0x03;
  5122  00101A  0E03               	movlw	3
  5123  00101C  6FAA               	movwf	(_vscp_omsg+1)& (0+255),b
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;vscp_firmware.c: 827: vscp_omsg.flags = 0x80 + 2;
  5127  00101E  0E82               	movlw	130
  5128  001020  6FA9               	movwf	_vscp_omsg& (0+255),b
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;vscp_firmware.c: 828: vscp_omsg.vscp_class = 0;
  5132  001022  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
  5133  001024  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;vscp_firmware.c: 829: vscp_omsg.vscp_type = 10;
  5137  001026  0E0A               	movlw	10
  5138  001028  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
  5139  00102A                     l9307:
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;vscp_firmware.c: 832: vscp_sendEvent();
  5143  00102A  EC46  F01E         	call	_vscp_sendEvent	;wreg free
  5144                           
  5145                           ;vscp_firmware.c: 833: } else {
  5146  00102E  D2DD               	goto	l1271
  5147  001030                     l9309:
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;vscp_firmware.c: 836: vscp_omsg.data[ 1 ] =
  5151                           ;vscp_firmware.c: 837: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  5152  001030  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5153  001032  ECA0  F019         	call	_vscp_readStdReg
  5154  001036  D7ED               	goto	L13
  5155  001038                     l9323:
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;vscp_firmware.c: 855: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  5159                           ;vscp_firmware.c: 856: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5160  001038  519B               	movf	_vscp_imsg& (0+255),w,b
  5161  00103A  0B0F               	andlw	15
  5162  00103C  0A03               	xorlw	3
  5163  00103E  E001 D2D4          	bnz	l1271
  5164                           
  5165                           ; BSR set to: 0
  5166  001042  5196               	movf	_vscp_nickname& (0+255),w,b
  5167  001044  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  5168  001048  62DF               	cpfseq	indf2,c
  5169  00104A  D2CF               	goto	l1271
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;vscp_firmware.c: 858: if (vscp_imsg.data[ 1 ] < 0x80) {
  5173  00104C  0E80               	movlw	128
  5174  00104E  61A2               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5175  001050  D006               	goto	l9343
  5176                           
  5177                           ; BSR set to: 0
  5178                           ;vscp_firmware.c: 861: vscp_omsg.data[ 1 ] =
  5179                           ;vscp_firmware.c: 862: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5180  001052  C0A3  F051         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  5181  001056  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5182  001058  EC11  F003         	call	_vscp_writeAppReg
  5183  00105C  D7DB               	goto	L14
  5184  00105E                     l9343:
  5185                           
  5186                           ; BSR set to: 0
  5187                           ;vscp_firmware.c: 878: vscp_omsg.data[ 1 ] =
  5188                           ;vscp_firmware.c: 879: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5189  00105E  C0A3  F00F         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  5190  001062  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5191  001064  EC10  F015         	call	_vscp_writeStdReg
  5192  001068  D7D4               	goto	L13
  5193  00106A                     l9357:
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;vscp_firmware.c: 897: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  5197                           ;vscp_firmware.c: 899: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  5198                           ;vscp_firmware.c: 900: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  5199                           ;vscp_firmware.c: 901: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  5200                           ;vscp_firmware.c: 902: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  5201                           ;vscp_firmware.c: 903: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  5202                           ;vscp_firmware.c: 904: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  5203  00106A  5196               	movf	_vscp_nickname& (0+255),w,b
  5204  00106C  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  5205  001070  62DF               	cpfseq	indf2,c
  5206  001072  D2BB               	goto	l1271
  5207                           
  5208                           ; BSR set to: 0
  5209  001074  0E00               	movlw	0
  5210  001076  EC53  F01F         	call	_vscp_getGUID
  5211  00107A  0100               	movlb	0	; () banked
  5212  00107C  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5213  00107E  E001 D2B4          	bnz	l1271
  5214                           
  5215                           ; BSR set to: 0
  5216  001082  0E03               	movlw	3
  5217  001084  EC53  F01F         	call	_vscp_getGUID
  5218  001088  0100               	movlb	0	; () banked
  5219  00108A  19A4               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5220  00108C  E001 D2AD          	bnz	l1271
  5221                           
  5222                           ; BSR set to: 0
  5223  001090  0E05               	movlw	5
  5224  001092  EC53  F01F         	call	_vscp_getGUID
  5225  001096  0100               	movlb	0	; () banked
  5226  001098  19A5               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5227  00109A  E001 D2A6          	bnz	l1271
  5228                           
  5229                           ; BSR set to: 0
  5230  00109E  0E07               	movlw	7
  5231  0010A0  EC53  F01F         	call	_vscp_getGUID
  5232  0010A4  0100               	movlb	0	; () banked
  5233  0010A6  19A6               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  5234  0010A8  E001 D29F          	bnz	l1271
  5235                           
  5236                           ; BSR set to: 0
  5237  0010AC  5053               	movf	_vscp_page_select+1,w,c
  5238  0010AE  19A7               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  5239  0010B0  E001 D29B          	bnz	l1271
  5240                           
  5241                           ; BSR set to: 0
  5242  0010B4  5052               	movf	_vscp_page_select,w,c
  5243  0010B6  EE20  F0A8         	lfsr	2,_vscp_imsg+13
  5244  0010BA  62DF               	cpfseq	indf2,c
  5245  0010BC  D296               	goto	l1271
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;vscp_firmware.c: 906: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  5249  0010BE  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5250  0010C0  EC27  F01F         	call	_vscp_goBootloaderMode
  5251  0010C4  D292               	goto	l1271
  5252  0010C6                     l9373:
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;vscp_firmware.c: 915: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  5256                           ;vscp_firmware.c: 916: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  5257                           ;vscp_firmware.c: 917: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  5258                           ;vscp_firmware.c: 918: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  5259  0010C6  0E00               	movlw	0
  5260  0010C8  EC53  F01F         	call	_vscp_getGUID
  5261  0010CC  0100               	movlb	0	; () banked
  5262  0010CE  19A2               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5263  0010D0  E173               	bnz	l9417
  5264                           
  5265                           ; BSR set to: 0
  5266  0010D2  0E01               	movlw	1
  5267  0010D4  EC53  F01F         	call	_vscp_getGUID
  5268  0010D8  0100               	movlb	0	; () banked
  5269  0010DA  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5270  0010DC  E16D               	bnz	l9417
  5271                           
  5272                           ; BSR set to: 0
  5273  0010DE  0E02               	movlw	2
  5274  0010E0  EC53  F01F         	call	_vscp_getGUID
  5275  0010E4  0100               	movlb	0	; () banked
  5276  0010E6  19A4               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5277  0010E8  E167               	bnz	l9417
  5278                           
  5279                           ; BSR set to: 0
  5280  0010EA  0E03               	movlw	3
  5281  0010EC  EC53  F01F         	call	_vscp_getGUID
  5282  0010F0  0100               	movlb	0	; () banked
  5283  0010F2  19A5               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5284  0010F4  E161               	bnz	l9417
  5285                           
  5286                           ; BSR set to: 0
  5287                           ;vscp_firmware.c: 919: vscp_guid_reset |= 0x10;
  5288  0010F6  8992               	bsf	_vscp_guid_reset& (0+255),4,b
  5289  0010F8  D05F               	goto	l9417
  5290  0010FA                     l9383:
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;vscp_firmware.c: 924: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  5294                           ;vscp_firmware.c: 925: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  5295                           ;vscp_firmware.c: 926: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  5296                           ;vscp_firmware.c: 927: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  5297  0010FA  0E04               	movlw	4
  5298  0010FC  EC53  F01F         	call	_vscp_getGUID
  5299  001100  0100               	movlb	0	; () banked
  5300  001102  19A2               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5301  001104  E159               	bnz	l9417
  5302                           
  5303                           ; BSR set to: 0
  5304  001106  0E05               	movlw	5
  5305  001108  EC53  F01F         	call	_vscp_getGUID
  5306  00110C  0100               	movlb	0	; () banked
  5307  00110E  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5308  001110  E153               	bnz	l9417
  5309                           
  5310                           ; BSR set to: 0
  5311  001112  0E06               	movlw	6
  5312  001114  EC53  F01F         	call	_vscp_getGUID
  5313  001118  0100               	movlb	0	; () banked
  5314  00111A  19A4               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5315  00111C  E14D               	bnz	l9417
  5316                           
  5317                           ; BSR set to: 0
  5318  00111E  0E07               	movlw	7
  5319  001120  EC53  F01F         	call	_vscp_getGUID
  5320  001124  0100               	movlb	0	; () banked
  5321  001126  19A5               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5322  001128  E147               	bnz	l9417
  5323                           
  5324                           ; BSR set to: 0
  5325                           ;vscp_firmware.c: 928: vscp_guid_reset |= 0x20;
  5326  00112A  8B92               	bsf	_vscp_guid_reset& (0+255),5,b
  5327  00112C  D045               	goto	l9417
  5328  00112E                     l9393:
  5329                           
  5330                           ; BSR set to: 0
  5331                           ;vscp_firmware.c: 933: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  5332                           ;vscp_firmware.c: 934: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  5333                           ;vscp_firmware.c: 935: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  5334                           ;vscp_firmware.c: 936: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  5335  00112E  0E08               	movlw	8
  5336  001130  EC53  F01F         	call	_vscp_getGUID
  5337  001134  0100               	movlb	0	; () banked
  5338  001136  19A2               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5339  001138  E13F               	bnz	l9417
  5340                           
  5341                           ; BSR set to: 0
  5342  00113A  0E09               	movlw	9
  5343  00113C  EC53  F01F         	call	_vscp_getGUID
  5344  001140  0100               	movlb	0	; () banked
  5345  001142  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5346  001144  E139               	bnz	l9417
  5347                           
  5348                           ; BSR set to: 0
  5349  001146  0E0A               	movlw	10
  5350  001148  EC53  F01F         	call	_vscp_getGUID
  5351  00114C  0100               	movlb	0	; () banked
  5352  00114E  19A4               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5353  001150  E133               	bnz	l9417
  5354                           
  5355                           ; BSR set to: 0
  5356  001152  0E0B               	movlw	11
  5357  001154  EC53  F01F         	call	_vscp_getGUID
  5358  001158  0100               	movlb	0	; () banked
  5359  00115A  19A5               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5360  00115C  E12D               	bnz	l9417
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;vscp_firmware.c: 937: vscp_guid_reset |= 0x40;
  5364  00115E  8D92               	bsf	_vscp_guid_reset& (0+255),6,b
  5365  001160  D02B               	goto	l9417
  5366  001162                     l9403:
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;vscp_firmware.c: 942: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  5370                           ;vscp_firmware.c: 943: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  5371                           ;vscp_firmware.c: 944: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  5372                           ;vscp_firmware.c: 945: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  5373  001162  0E0C               	movlw	12
  5374  001164  EC53  F01F         	call	_vscp_getGUID
  5375  001168  0100               	movlb	0	; () banked
  5376  00116A  19A2               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5377  00116C  E125               	bnz	l9417
  5378                           
  5379                           ; BSR set to: 0
  5380  00116E  0E0D               	movlw	13
  5381  001170  EC53  F01F         	call	_vscp_getGUID
  5382  001174  0100               	movlb	0	; () banked
  5383  001176  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5384  001178  E11F               	bnz	l9417
  5385                           
  5386                           ; BSR set to: 0
  5387  00117A  0E0E               	movlw	14
  5388  00117C  EC53  F01F         	call	_vscp_getGUID
  5389  001180  0100               	movlb	0	; () banked
  5390  001182  19A4               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5391  001184  E119               	bnz	l9417
  5392                           
  5393                           ; BSR set to: 0
  5394  001186  0E0F               	movlw	15
  5395  001188  EC53  F01F         	call	_vscp_getGUID
  5396  00118C  0100               	movlb	0	; () banked
  5397  00118E  19A5               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5398  001190  E113               	bnz	l9417
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;vscp_firmware.c: 946: vscp_guid_reset |= 0x80;
  5402  001192  8F92               	bsf	_vscp_guid_reset& (0+255),7,b
  5403  001194  D011               	goto	l9417
  5404  001196                     l1212:
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;vscp_firmware.c: 951: vscp_guid_reset = 0;
  5408  001196  6B92               	clrf	_vscp_guid_reset& (0+255),b
  5409                           
  5410                           ;vscp_firmware.c: 952: break;
  5411  001198  D00F               	goto	l9417
  5412  00119A                     l9415:
  5413                           
  5414                           ; BSR set to: 0
  5415  00119A  39A1               	swapf	(_vscp_imsg+6)& (0+255),w,b
  5416  00119C  0B0F               	andlw	15
  5417  00119E  6FD6               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5418  0011A0  6BD7               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5419                           
  5420                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5421                           ; Switch size 1, requested type "speed"
  5422                           ; Number of cases is 1, Range of values is 0 to 0
  5423                           ; switch strategies available:
  5424                           ; Name         Instructions Cycles
  5425                           ; simple_byte            4     3 (average)
  5426                           ;	Chosen strategy is simple_byte
  5427  0011A2  51D7               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5428  0011A4  E1F8               	bnz	l1212
  5429                           
  5430                           ; BSR set to: 0
  5431                           ; Switch size 1, requested type "speed"
  5432                           ; Number of cases is 4, Range of values is 0 to 3
  5433                           ; switch strategies available:
  5434                           ; Name         Instructions Cycles
  5435                           ; simple_byte           13     7 (average)
  5436                           ;	Chosen strategy is simple_byte
  5437  0011A6  51D6               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5438  0011A8  E08E               	bz	l9373
  5439  0011AA  0A01               	xorlw	1	; case 1
  5440  0011AC  E0A6               	bz	l9383
  5441  0011AE  0A03               	xorlw	3	; case 2
  5442  0011B0  E0BE               	bz	l9393
  5443  0011B2  0A01               	xorlw	1	; case 3
  5444  0011B4  E0D6               	bz	l9403
  5445  0011B6  D7EF               	goto	l1212
  5446  0011B8                     l9417:
  5447                           
  5448                           ; BSR set to: 0
  5449                           ;vscp_firmware.c: 955: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  5450  0011B8  5192               	movf	_vscp_guid_reset& (0+255),w,b
  5451  0011BA  0BF0               	andlw	240
  5452  0011BC  0AF0               	xorlw	240
  5453  0011BE  E001 D214          	bnz	l1271
  5454                           
  5455                           ; BSR set to: 0
  5456                           ;vscp_firmware.c: 957: vscp_init();
  5457  0011C2  EC47  F01D         	call	_vscp_init	;wreg free
  5458  0011C6  D211               	goto	l1271
  5459  0011C8                     l9421:
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;vscp_firmware.c: 963: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5463  0011C8  5196               	movf	_vscp_nickname& (0+255),w,b
  5464  0011CA  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  5465  0011CE  62DF               	cpfseq	indf2,c
  5466  0011D0  D20C               	goto	l1271
  5467                           
  5468                           ; BSR set to: 0
  5469                           ;vscp_firmware.c: 965: uint8_t i;
  5470                           ;vscp_firmware.c: 966: uint8_t pos = 0;
  5471  0011D2  6BE2               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  5472                           
  5473                           ;vscp_firmware.c: 967: uint8_t offset = vscp_imsg.data[ 1 ];
  5474  0011D4  C0A2  F0E1         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  5475                           
  5476                           ;vscp_firmware.c: 968: uint8_t len = vscp_imsg.data[ 2 ];
  5477  0011D8  C0A3  F0E4         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  5478                           
  5479                           ;vscp_firmware.c: 970: for (i = 0; i < len; i++) {
  5480  0011DC  6BEF               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  5481  0011DE  D047               	goto	l9453
  5482  0011E0                     l9425:
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;vscp_firmware.c: 971: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  5486  0011E0  0E07               	movlw	7
  5487  0011E2  6E08               	movwf	?___lbmod,c
  5488  0011E4  51EF               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5489  0011E6  EC1F  F01E         	call	___lbmod
  5490  0011EA  0100               	movlb	0	; () banked
  5491  0011EC  6FD6               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5492  0011EE  51D6               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5493  0011F0  0FAF               	addlw	low (_vscp_omsg+6)
  5494  0011F2  6ED9               	movwf	fsr2l,c
  5495  0011F4  6ADA               	clrf	fsr2h,c
  5496  0011F6  51E1               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  5497  0011F8  25EF               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5498  0011FA  EC02  F01F         	call	_vscp_readRegister
  5499  0011FE  6EDF               	movwf	indf2,c
  5500                           
  5501                           ;vscp_firmware.c: 973: if ((i % 7) == 6 || i == (len - 1)) {
  5502  001200  0E07               	movlw	7
  5503  001202  6E08               	movwf	?___lbmod,c
  5504  001204  0100               	movlb	0	; () banked
  5505  001206  51EF               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5506  001208  EC1F  F01E         	call	___lbmod
  5507  00120C  0A06               	xorlw	6
  5508  00120E  E00B               	bz	l9431
  5509  001210  0EFF               	movlw	255
  5510  001212  0100               	movlb	0	; () banked
  5511  001214  25E4               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  5512  001216  6FD6               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5513  001218  6BD7               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5514  00121A  0EFF               	movlw	255
  5515  00121C  23D7               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  5516  00121E  51EF               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5517  001220  19D6               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5518  001222  11D7               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5519  001224  E123               	bnz	l9451
  5520  001226                     l9431:
  5521                           
  5522                           ;vscp_firmware.c: 974: uint8_t bytes;
  5523                           ;vscp_firmware.c: 976: if ((i % 7) == 6) bytes = 7;
  5524  001226  0E07               	movlw	7
  5525  001228  6E08               	movwf	?___lbmod,c
  5526  00122A  0100               	movlb	0	; () banked
  5527  00122C  51EF               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5528  00122E  EC1F  F01E         	call	___lbmod
  5529  001232  0A06               	xorlw	6
  5530  001234  E103               	bnz	l9435
  5531  001236  0E07               	movlw	7
  5532  001238  0100               	movlb	0	; () banked
  5533  00123A  D009               	goto	L15
  5534  00123C                     l9435:
  5535                           
  5536                           ;vscp_firmware.c: 977: else bytes = (i % 7) + 1;
  5537  00123C  0E07               	movlw	7
  5538  00123E  6E08               	movwf	?___lbmod,c
  5539  001240  0100               	movlb	0	; () banked
  5540  001242  51EF               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5541  001244  EC1F  F01E         	call	___lbmod
  5542  001248  0100               	movlb	0	; () banked
  5543  00124A  6FD6               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5544  00124C  29D6               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5545  00124E                     L15:
  5546  00124E  6FE3               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  5547                           
  5548                           ; BSR set to: 0
  5549                           ;vscp_firmware.c: 979: vscp_omsg.flags = 0x80 + bytes + 1;
  5550  001250  51E3               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  5551  001252  0F81               	addlw	129
  5552  001254  6FA9               	movwf	_vscp_omsg& (0+255),b
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;vscp_firmware.c: 980: vscp_omsg.priority = 0x03;
  5556  001256  0E03               	movlw	3
  5557  001258  6FAA               	movwf	(_vscp_omsg+1)& (0+255),b
  5558                           
  5559                           ; BSR set to: 0
  5560                           ;vscp_firmware.c: 981: vscp_omsg.vscp_class = 0;
  5561  00125A  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
  5562  00125C  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
  5563                           
  5564                           ; BSR set to: 0
  5565                           ;vscp_firmware.c: 982: vscp_omsg.vscp_type = 26;
  5566  00125E  0E1A               	movlw	26
  5567  001260  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;vscp_firmware.c: 983: vscp_omsg.data[ 0 ] = pos;
  5571  001262  C0E2  F0AE         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  5572                           
  5573                           ; BSR set to: 0
  5574                           ;vscp_firmware.c: 986: vscp_sendEvent();
  5575  001266  EC46  F01E         	call	_vscp_sendEvent	;wreg free
  5576                           
  5577                           ; BSR set to: 0
  5578                           ;vscp_firmware.c: 987: pos++;
  5579  00126A  2BE2               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  5580  00126C                     l9451:
  5581                           
  5582                           ; BSR set to: 0
  5583  00126C  2BEF               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  5584  00126E                     l9453:
  5585                           
  5586                           ; BSR set to: 0
  5587  00126E  51E4               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  5588  001270  5DEF               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5589  001272  E301 D1BA          	bc	l1271
  5590  001276  D7B4               	goto	l9425
  5591  001278                     l9455:
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;vscp_firmware.c: 995: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5595  001278  5196               	movf	_vscp_nickname& (0+255),w,b
  5596  00127A  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  5597  00127E  62DF               	cpfseq	indf2,c
  5598  001280  D1B4               	goto	l1271
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;vscp_firmware.c: 996: uint8_t i;
  5602                           ;vscp_firmware.c: 997: uint8_t pos = vscp_imsg.data[ 1 ];
  5603  001282  C0A2  F0E5         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1279
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;vscp_firmware.c: 998: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  5607  001286  519B               	movf	_vscp_imsg& (0+255),w,b
  5608  001288  0FFE               	addlw	254
  5609  00128A  0B07               	andlw	7
  5610  00128C  6FE6               	movwf	vscp_handleProtocolEvent@len_1280& (0+255),b
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;vscp_firmware.c: 1000: for (i = 0; i < len; i++) {
  5614  00128E  6BEC               	clrf	vscp_handleProtocolEvent@i_1278& (0+255),b
  5615  001290  D016               	goto	l9469
  5616  001292                     l9463:
  5617                           
  5618                           ; BSR set to: 0
  5619                           ;vscp_firmware.c: 1002: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  5620  001292  51EC               	movf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5621  001294  0FA3               	addlw	low (_vscp_imsg+8)
  5622  001296  6ED9               	movwf	fsr2l,c
  5623  001298  6ADA               	clrf	fsr2h,c
  5624  00129A  50DF               	movf	indf2,w,c
  5625  00129C  6FD4               	movwf	?_vscp_writeRegister& (0+255),b
  5626  00129E  51E5               	movf	vscp_handleProtocolEvent@pos_1279& (0+255),w,b
  5627  0012A0  25EC               	addwf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5628  0012A2  ECA1  F01E         	call	_vscp_writeRegister
  5629                           
  5630                           ;vscp_firmware.c: 1003: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  5631  0012A6  0100               	movlb	0	; () banked
  5632  0012A8  51EC               	movf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5633  0012AA  0FAF               	addlw	low (_vscp_omsg+6)
  5634  0012AC  6ED9               	movwf	fsr2l,c
  5635  0012AE  6ADA               	clrf	fsr2h,c
  5636  0012B0  51E5               	movf	vscp_handleProtocolEvent@pos_1279& (0+255),w,b
  5637  0012B2  25EC               	addwf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5638  0012B4  EC02  F01F         	call	_vscp_readRegister
  5639  0012B8  6EDF               	movwf	indf2,c
  5640  0012BA  0100               	movlb	0	; () banked
  5641  0012BC  2BEC               	incf	vscp_handleProtocolEvent@i_1278& (0+255),f,b
  5642  0012BE                     l9469:
  5643                           
  5644                           ; BSR set to: 0
  5645  0012BE  51E6               	movf	vscp_handleProtocolEvent@len_1280& (0+255),w,b
  5646  0012C0  5DEC               	subwf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5647  0012C2  E3E7               	bnc	l9463
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;vscp_firmware.c: 1004: }
  5651                           ;vscp_firmware.c: 1006: vscp_omsg.priority = 0x03;
  5652  0012C4  0E03               	movlw	3
  5653  0012C6  6FAA               	movwf	(_vscp_omsg+1)& (0+255),b
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;vscp_firmware.c: 1007: vscp_omsg.vscp_class = 0;
  5657  0012C8  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
  5658  0012CA  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
  5659                           
  5660                           ;vscp_firmware.c: 1008: vscp_omsg.vscp_type = 26;
  5661  0012CC  0E1A               	movlw	26
  5662  0012CE  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
  5663                           
  5664                           ; BSR set to: 0
  5665                           ;vscp_firmware.c: 1009: vscp_omsg.data[ 0 ] = 0;
  5666  0012D0  6BAE               	clrf	(_vscp_omsg+5)& (0+255),b
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;vscp_firmware.c: 1010: vscp_omsg.flags = 0x80 + len + 1;
  5670  0012D2  51E6               	movf	vscp_handleProtocolEvent@len_1280& (0+255),w,b
  5671  0012D4  0F81               	addlw	129
  5672  0012D6  6FA9               	movwf	_vscp_omsg& (0+255),b
  5673  0012D8  D6A8               	goto	l9307
  5674  0012DA                     l9481:
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;vscp_firmware.c: 1020: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5678  0012DA  5196               	movf	_vscp_nickname& (0+255),w,b
  5679  0012DC  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  5680  0012E0  62DF               	cpfseq	indf2,c
  5681  0012E2  D183               	goto	l1271
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;vscp_firmware.c: 1022: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5685                           ;vscp_firmware.c: 1023: vscp_imsg.data[ 1 ],
  5686                           ;vscp_firmware.c: 1024: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  5687  0012E4  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5688  0012E6  EC97  F01B         	call	_vscp_readAppReg
  5689  0012EA  0100               	movlb	0	; () banked
  5690  0012EC  6FD6               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5691  0012EE  29D6               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5692  0012F0  6E51               	movwf	?_vscp_writeAppReg,c
  5693  0012F2  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5694  0012F4  EC11  F003         	call	_vscp_writeAppReg
  5695  0012F8  D68D               	goto	L14
  5696  0012FA                     l9497:
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;vscp_firmware.c: 1040: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5700  0012FA  5196               	movf	_vscp_nickname& (0+255),w,b
  5701  0012FC  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  5702  001300  62DF               	cpfseq	indf2,c
  5703  001302  D173               	goto	l1271
  5704                           
  5705                           ; BSR set to: 0
  5706                           ;vscp_firmware.c: 1042: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5707                           ;vscp_firmware.c: 1043: vscp_imsg.data[ 1 ],
  5708                           ;vscp_firmware.c: 1044: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  5709  001304  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5710  001306  EC97  F01B         	call	_vscp_readAppReg
  5711  00130A  0100               	movlb	0	; () banked
  5712  00130C  6FD6               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5713  00130E  05D6               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  5714  001310  6E51               	movwf	?_vscp_writeAppReg,c
  5715  001312  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5716  001314  EC11  F003         	call	_vscp_writeAppReg
  5717  001318  D67D               	goto	L14
  5718  00131A                     l9513:
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;vscp_firmware.c: 1060: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  5722                           ;vscp_firmware.c: 1061: (0xff == vscp_imsg.data[ 0 ])) {
  5723  00131A  51A1               	movf	(_vscp_imsg+6)& (0+255),w,b
  5724  00131C  1996               	xorwf	_vscp_nickname& (0+255),w,b
  5725  00131E  E003               	bz	l1236
  5726                           
  5727                           ; BSR set to: 0
  5728  001320  29A1               	incf	(_vscp_imsg+6)& (0+255),w,b
  5729  001322  E001 D162          	bnz	l1271
  5730  001326                     l1236:
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;vscp_firmware.c: 1063: uint8_t i, j, k = 0;
  5734  001326  6BEA               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  5735                           
  5736                           ; BSR set to: 0
  5737                           ;vscp_firmware.c: 1067: vscp_omsg.priority = 0x03;
  5738  001328  0E03               	movlw	3
  5739  00132A  6FAA               	movwf	(_vscp_omsg+1)& (0+255),b
  5740                           
  5741                           ;vscp_firmware.c: 1068: vscp_omsg.flags = 0x80 + 8;
  5742  00132C  0E88               	movlw	136
  5743  00132E  6FA9               	movwf	_vscp_omsg& (0+255),b
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;vscp_firmware.c: 1069: vscp_omsg.vscp_class = 0;
  5747  001330  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
  5748  001332  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
  5749                           
  5750                           ;vscp_firmware.c: 1070: vscp_omsg.vscp_type = 32;
  5751  001334  0E20               	movlw	32
  5752  001336  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
  5753                           
  5754                           ; BSR set to: 0
  5755                           ;vscp_firmware.c: 1072: for (i = 0; i < 3; i++)
  5756  001338  6BEE               	clrf	vscp_handleProtocolEvent@i_1281& (0+255),b
  5757  00133A                     l1237:
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;vscp_firmware.c: 1073: {
  5761                           ;vscp_firmware.c: 1074: vscp_omsg.data[0] = i;
  5762  00133A  C0EE  F0AE         	movff	vscp_handleProtocolEvent@i_1281,_vscp_omsg+5
  5763                           
  5764                           ; BSR set to: 0
  5765                           ;vscp_firmware.c: 1076: for (j = 1; j < 8; j++) {
  5766  00133E  0E01               	movlw	1
  5767  001340  6FF0               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  5768  001342                     l9533:
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;vscp_firmware.c: 1077: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  5772  001342  51F0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5773  001344  0FAE               	addlw	low (_vscp_omsg+5)
  5774  001346  6ED9               	movwf	fsr2l,c
  5775  001348  6ADA               	clrf	fsr2h,c
  5776  00134A  51EA               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5777  00134C  080F               	sublw	15
  5778  00134E  EC53  F01F         	call	_vscp_getGUID
  5779  001352  6EDF               	movwf	indf2,c
  5780  001354  0100               	movlb	0	; () banked
  5781  001356  2BEA               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5782                           
  5783                           ; BSR set to: 0
  5784                           ;vscp_firmware.c: 1078: if (k > 16)
  5785  001358  0E10               	movlw	16
  5786  00135A  65EA               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5787  00135C  D001               	goto	l9541
  5788  00135E  D004               	goto	l9545
  5789  001360                     l9541:
  5790                           
  5791                           ; BSR set to: 0
  5792  001360  2BF0               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5793                           
  5794                           ; BSR set to: 0
  5795  001362  0E07               	movlw	7
  5796  001364  65F0               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5797  001366  D7ED               	goto	l9533
  5798  001368                     l9545:
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;vscp_firmware.c: 1080: }
  5802                           ;vscp_firmware.c: 1082: if (k > 16)
  5803  001368  0E10               	movlw	16
  5804  00136A  65EA               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5805  00136C  D001               	goto	l9549
  5806  00136E  D006               	goto	l1238
  5807  001370                     l9549:
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;vscp_firmware.c: 1085: vscp_sendEvent();
  5811  001370  EC46  F01E         	call	_vscp_sendEvent	;wreg free
  5812                           
  5813                           ; BSR set to: 0
  5814  001374  2BEE               	incf	vscp_handleProtocolEvent@i_1281& (0+255),f,b
  5815                           
  5816                           ; BSR set to: 0
  5817  001376  0E02               	movlw	2
  5818  001378  65EE               	cpfsgt	vscp_handleProtocolEvent@i_1281& (0+255),b
  5819  00137A  D7DF               	goto	l1237
  5820  00137C                     l1238:
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;vscp_firmware.c: 1086: }
  5824                           ;vscp_firmware.c: 1088: for (j = 0; j < 5; j++)
  5825  00137C  6BF0               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  5826  00137E                     l9559:
  5827                           
  5828                           ; BSR set to: 0
  5829                           ;vscp_firmware.c: 1089: {
  5830                           ;vscp_firmware.c: 1090: if (vscp_getMDF_URL(j) > 0)
  5831  00137E  51F0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5832  001380  EC1B  F01F         	call	_vscp_getMDF_URL
  5833  001384  0900               	iorlw	0
  5834  001386  E008               	bz	l9563
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;vscp_firmware.c: 1091: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  5838  001388  51F0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5839  00138A  0FB1               	addlw	low (_vscp_omsg+8)
  5840  00138C  6ED9               	movwf	fsr2l,c
  5841  00138E  6ADA               	clrf	fsr2h,c
  5842  001390  51F0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5843  001392  EC1B  F01F         	call	_vscp_getMDF_URL
  5844  001396  D005               	goto	L16
  5845  001398                     l9563:
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;vscp_firmware.c: 1092: else
  5849                           ;vscp_firmware.c: 1093: vscp_omsg.data[3 + j] = 0;
  5850  001398  51F0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5851  00139A  0FB1               	addlw	low (_vscp_omsg+8)
  5852  00139C  6ED9               	movwf	fsr2l,c
  5853  00139E  6ADA               	clrf	fsr2h,c
  5854  0013A0  0E00               	movlw	0
  5855  0013A2                     L16:
  5856  0013A2  6EDF               	movwf	indf2,c
  5857                           
  5858                           ; BSR set to: 0
  5859  0013A4  2BF0               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5860                           
  5861                           ; BSR set to: 0
  5862  0013A6  0E04               	movlw	4
  5863  0013A8  65F0               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5864  0013AA  D7E9               	goto	l9559
  5865                           
  5866                           ; BSR set to: 0
  5867                           ;vscp_firmware.c: 1094: }
  5868                           ;vscp_firmware.c: 1096: vscp_sendEvent();
  5869  0013AC  EC46  F01E         	call	_vscp_sendEvent	;wreg free
  5870                           
  5871                           ; BSR set to: 0
  5872                           ;vscp_firmware.c: 1098: k = 5;
  5873  0013B0  0E05               	movlw	5
  5874  0013B2  6FEA               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;vscp_firmware.c: 1099: for (i = 3; i < 7; i++)
  5878  0013B4  0E03               	movlw	3
  5879  0013B6  6FEE               	movwf	vscp_handleProtocolEvent@i_1281& (0+255),b
  5880  0013B8                     l1247:
  5881                           
  5882                           ; BSR set to: 0
  5883                           ;vscp_firmware.c: 1100: {
  5884                           ;vscp_firmware.c: 1101: vscp_omsg.data[0] = i;
  5885  0013B8  C0EE  F0AE         	movff	vscp_handleProtocolEvent@i_1281,_vscp_omsg+5
  5886                           
  5887                           ; BSR set to: 0
  5888                           ;vscp_firmware.c: 1103: for (j = 1; j < 8; j++) {
  5889  0013BC  0E01               	movlw	1
  5890  0013BE  6FF0               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  5891  0013C0                     l9585:
  5892                           
  5893                           ; BSR set to: 0
  5894                           ;vscp_firmware.c: 1104: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  5895  0013C0  51F0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5896  0013C2  0FAE               	addlw	low (_vscp_omsg+5)
  5897  0013C4  6ED9               	movwf	fsr2l,c
  5898  0013C6  6ADA               	clrf	fsr2h,c
  5899  0013C8  51EA               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5900  0013CA  EC1B  F01F         	call	_vscp_getMDF_URL
  5901  0013CE  6EDF               	movwf	indf2,c
  5902                           
  5903                           ; BSR set to: 0
  5904  0013D0  2BEA               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5905                           
  5906                           ; BSR set to: 0
  5907  0013D2  2BF0               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5908                           
  5909                           ; BSR set to: 0
  5910  0013D4  0E07               	movlw	7
  5911  0013D6  65F0               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5912  0013D8  D7F3               	goto	l9585
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;vscp_firmware.c: 1105: }
  5916                           ;vscp_firmware.c: 1106: vscp_sendEvent();
  5917  0013DA  EC46  F01E         	call	_vscp_sendEvent	;wreg free
  5918                           
  5919                           ; BSR set to: 0
  5920  0013DE  2BEE               	incf	vscp_handleProtocolEvent@i_1281& (0+255),f,b
  5921                           
  5922                           ; BSR set to: 0
  5923  0013E0  0E06               	movlw	6
  5924  0013E2  65EE               	cpfsgt	vscp_handleProtocolEvent@i_1281& (0+255),b
  5925  0013E4  D7E9               	goto	l1247
  5926  0013E6  D101               	goto	l1271
  5927  0013E8                     l9599:
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;vscp_firmware.c: 1115: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5931  0013E8  5196               	movf	_vscp_nickname& (0+255),w,b
  5932  0013EA  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  5933  0013EE  62DF               	cpfseq	indf2,c
  5934  0013F0  D0FC               	goto	l1271
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;vscp_firmware.c: 1117: vscp_omsg.priority = 0x03;
  5938  0013F2  0E03               	movlw	3
  5939  0013F4  6FAA               	movwf	(_vscp_omsg+1)& (0+255),b
  5940                           
  5941                           ;vscp_firmware.c: 1118: vscp_omsg.flags = 0x80 + 7;
  5942  0013F6  0E87               	movlw	135
  5943  0013F8  6FA9               	movwf	_vscp_omsg& (0+255),b
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;vscp_firmware.c: 1119: vscp_omsg.vscp_class = 0;
  5947  0013FA  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
  5948  0013FC  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
  5949                           
  5950                           ;vscp_firmware.c: 1120: vscp_omsg.vscp_type = 34;
  5951  0013FE  0E22               	movlw	34
  5952  001400  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;vscp_firmware.c: 1122: vscp_getMatrixInfo((char *) vscp_omsg.data);
  5956  001402  0EAE               	movlw	(_vscp_omsg+5)& (0+255)
  5957  001404  ECD4  F01E         	call	_vscp_getMatrixInfo
  5958  001408  D610               	goto	l9307
  5959  00140A                     l9609:
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;vscp_firmware.c: 1138: if ( vscp_nickname == vscp_imsg.data[0] ) {
  5963  00140A  5196               	movf	_vscp_nickname& (0+255),w,b
  5964  00140C  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  5965  001410  62DF               	cpfseq	indf2,c
  5966  001412  D0EB               	goto	l1271
  5967                           
  5968                           ; BSR set to: 0
  5969                           ;vscp_firmware.c: 1140: uint16_t page_save;
  5970                           ;vscp_firmware.c: 1141: uint8_t byte = 0, bytes = 0;
  5971  001414  6BED               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  5972                           
  5973                           ; BSR set to: 0
  5974                           ;vscp_firmware.c: 1142: uint8_t bytes_this_time, cb;
  5975                           ;vscp_firmware.c: 1146: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  5976  001416  C09B  F0D6         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  5977  00141A  0E0F               	movlw	15
  5978  00141C  17D6               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  5979  00141E  0E04               	movlw	4
  5980  001420  5DD6               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5981  001422  E304               	bnc	l9617
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;vscp_firmware.c: 1149: bytes = vscp_imsg.data[4];
  5985  001424  C0A5  F0EB         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1286
  5986                           
  5987                           ;vscp_firmware.c: 1151: if ( 0 == bytes ) {
  5988  001428  67EB               	tstfsz	vscp_handleProtocolEvent@bytes_1286& (0+255),b
  5989  00142A  D002               	goto	l9621
  5990  00142C                     l9617:
  5991                           
  5992                           ; BSR set to: 0
  5993                           ;vscp_firmware.c: 1152: bytes = 1;
  5994  00142C  0E01               	movlw	1
  5995  00142E  6FEB               	movwf	vscp_handleProtocolEvent@bytes_1286& (0+255),b
  5996  001430                     l9621:
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;vscp_firmware.c: 1157: }
  6000                           ;vscp_firmware.c: 1160: page_save = vscp_page_select;
  6001  001430  C052  F0DD         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  6002  001434  C053  F0DE         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;vscp_firmware.c: 1165: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  6006  001438  51A3               	movf	(_vscp_imsg+8)& (0+255),w,b
  6007  00143A  C0A2  F0D6         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6008  00143E  6BD7               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6009  001440  C0D6  F0D7         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6010  001444  6BD6               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6011  001446  11D6               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6012  001448  6E52               	movwf	_vscp_page_select,c
  6013  00144A  51D7               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6014  00144C  6E53               	movwf	_vscp_page_select+1,c
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;vscp_firmware.c: 1168: vscp_omsg.priority = 0x03;
  6018  00144E  0E03               	movlw	3
  6019  001450  6FAA               	movwf	(_vscp_omsg+1)& (0+255),b
  6020                           
  6021                           ; BSR set to: 0
  6022                           ;vscp_firmware.c: 1169: vscp_omsg.vscp_class = 0;
  6023  001452  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
  6024  001454  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;vscp_firmware.c: 1170: vscp_omsg.vscp_type = 39;
  6028  001456  0E27               	movlw	39
  6029  001458  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;vscp_firmware.c: 1171: vscp_omsg.data[0] = 0;
  6033  00145A  6BAE               	clrf	(_vscp_omsg+5)& (0+255),b
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;vscp_firmware.c: 1172: vscp_omsg.data[1] = vscp_imsg.data[1];
  6037  00145C  C0A2  F0AF         	movff	_vscp_imsg+7,_vscp_omsg+6
  6038                           
  6039                           ; BSR set to: 0
  6040                           ;vscp_firmware.c: 1173: vscp_omsg.data[2] = vscp_imsg.data[2];
  6041  001460  C0A3  F0B0         	movff	_vscp_imsg+8,_vscp_omsg+7
  6042  001464                     l9637:
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;vscp_firmware.c: 1177: if ( ( bytes - byte ) >= 4 ) {
  6046  001464  51ED               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6047  001466  C0EB  F0D6         	movff	vscp_handleProtocolEvent@bytes_1286,??_vscp_handleProtocolEvent
  6048  00146A  6BD7               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6049  00146C  5FD6               	subwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6050  00146E  0E00               	movlw	0
  6051  001470  5BD7               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6052  001472  51D7               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6053  001474  0A80               	xorlw	128
  6054  001476  0F80               	addlw	-128
  6055  001478  0E04               	movlw	4
  6056  00147A  B4D8               	btfsc	status,2,c
  6057  00147C  5DD6               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6058  00147E  E302               	bnc	l9641
  6059                           
  6060                           ; BSR set to: 0
  6061                           ;vscp_firmware.c: 1178: bytes_this_time = 4;
  6062  001480  0E04               	movlw	4
  6063  001482  D002               	goto	L18
  6064  001484                     l9641:
  6065                           
  6066                           ; BSR set to: 0
  6067                           ;vscp_firmware.c: 1180: else {
  6068                           ;vscp_firmware.c: 1181: bytes_this_time = (bytes - byte);
  6069  001484  51ED               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6070  001486  5DEB               	subwf	vscp_handleProtocolEvent@bytes_1286& (0+255),w,b
  6071  001488                     L18:
  6072  001488  6FE7               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  6073                           
  6074                           ; BSR set to: 0
  6075                           ;vscp_firmware.c: 1182: }
  6076                           ;vscp_firmware.c: 1185: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  6077  00148A  51E7               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6078  00148C  0F84               	addlw	132
  6079  00148E  6FA9               	movwf	_vscp_omsg& (0+255),b
  6080                           
  6081                           ;vscp_firmware.c: 1186: vscp_omsg.data[3] =
  6082                           ;vscp_firmware.c: 1187: vscp_imsg.data[3] + byte;
  6083  001490  51A4               	movf	(_vscp_imsg+9)& (0+255),w,b
  6084  001492  25ED               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6085  001494  6FB1               	movwf	(_vscp_omsg+8)& (0+255),b
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;vscp_firmware.c: 1190: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  6089  001496  6BE8               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  6090  001498  D00C               	goto	l9649
  6091  00149A                     l9645:
  6092                           
  6093                           ; BSR set to: 0
  6094                           ;vscp_firmware.c: 1191: vscp_omsg.data[ (4 + cb) ] =
  6095                           ;vscp_firmware.c: 1192: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  6096  00149A  51E8               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6097  00149C  0FB2               	addlw	low (_vscp_omsg+9)
  6098  00149E  6ED9               	movwf	fsr2l,c
  6099  0014A0  6ADA               	clrf	fsr2h,c
  6100  0014A2  51A4               	movf	(_vscp_imsg+9)& (0+255),w,b
  6101  0014A4  25ED               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6102  0014A6  25E8               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6103  0014A8  EC02  F01F         	call	_vscp_readRegister
  6104  0014AC  6EDF               	movwf	indf2,c
  6105  0014AE  0100               	movlb	0	; () banked
  6106  0014B0  2BE8               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  6107  0014B2                     l9649:
  6108                           
  6109                           ; BSR set to: 0
  6110  0014B2  51E7               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6111  0014B4  5DE8               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6112  0014B6  E3F1               	bnc	l9645
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;vscp_firmware.c: 1193: }
  6116                           ;vscp_firmware.c: 1196: vscp_sendEvent();
  6117  0014B8  EC46  F01E         	call	_vscp_sendEvent	;wreg free
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;vscp_firmware.c: 1199: byte += bytes_this_time;
  6121  0014BC  51E7               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6122  0014BE  27ED               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  6123                           
  6124                           ; BSR set to: 0
  6125                           ;vscp_firmware.c: 1202: vscp_omsg.data[0] += 1;
  6126  0014C0  2BAE               	incf	(_vscp_omsg+5)& (0+255),f,b
  6127                           
  6128                           ; BSR set to: 0
  6129                           ;vscp_firmware.c: 1204: } while (byte < bytes);
  6130  0014C2  51EB               	movf	vscp_handleProtocolEvent@bytes_1286& (0+255),w,b
  6131  0014C4  5DED               	subwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6132  0014C6  E3CE               	bnc	l9637
  6133                           
  6134                           ; BSR set to: 0
  6135                           ;vscp_firmware.c: 1207: vscp_page_select = page_save;
  6136  0014C8  C0DD  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  6137  0014CC  C0DE  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  6138  0014D0  D08C               	goto	l1271
  6139  0014D2                     l9659:
  6140                           
  6141                           ; BSR set to: 0
  6142                           ;vscp_firmware.c: 1214: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  6143  0014D2  5196               	movf	_vscp_nickname& (0+255),w,b
  6144  0014D4  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  6145  0014D8  62DF               	cpfseq	indf2,c
  6146  0014DA  D087               	goto	l1271
  6147                           
  6148                           ; BSR set to: 0
  6149                           ;vscp_firmware.c: 1216: uint8_t i;
  6150                           ;vscp_firmware.c: 1217: uint16_t page_save;
  6151                           ;vscp_firmware.c: 1220: page_save = vscp_page_select;
  6152  0014DC  C052  F0DF         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1290
  6153  0014E0  C053  F0E0         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1290+1
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;vscp_firmware.c: 1224: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  6157  0014E4  51A3               	movf	(_vscp_imsg+8)& (0+255),w,b
  6158  0014E6  C0A2  F0D6         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6159  0014EA  6BD7               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6160  0014EC  C0D6  F0D7         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6161  0014F0  6BD6               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6162  0014F2  11D6               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6163  0014F4  6E52               	movwf	_vscp_page_select,c
  6164  0014F6  51D7               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6165  0014F8  6E53               	movwf	_vscp_page_select+1,c
  6166                           
  6167                           ; BSR set to: 0
  6168                           ;vscp_firmware.c: 1226: for (i = vscp_imsg.data[ 3 ];
  6169  0014FA  C0A4  F0E9         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1289
  6170                           
  6171                           ;vscp_firmware.c: 1229: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  6172                           ;vscp_firmware.c: 1230: i++) {
  6173  0014FE  D014               	goto	l9671
  6174  001500                     l9667:
  6175                           
  6176                           ; BSR set to: 0
  6177                           ;vscp_firmware.c: 1231: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  6178                           ;vscp_firmware.c: 1232: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  6179  001500  51A4               	movf	(_vscp_imsg+9)& (0+255),w,b
  6180  001502  08A5               	sublw	low (_vscp_imsg+10)
  6181  001504  25E9               	addwf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6182  001506  6ED9               	movwf	fsr2l,c
  6183  001508  6ADA               	clrf	fsr2h,c
  6184  00150A  50DF               	movf	indf2,w,c
  6185  00150C  6FD4               	movwf	?_vscp_writeRegister& (0+255),b
  6186  00150E  51E9               	movf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6187  001510  ECA1  F01E         	call	_vscp_writeRegister
  6188  001514  0100               	movlb	0	; () banked
  6189  001516  6FD6               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6190  001518  51A4               	movf	(_vscp_imsg+9)& (0+255),w,b
  6191  00151A  08B2               	sublw	low (_vscp_omsg+9)
  6192  00151C  25E9               	addwf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6193  00151E  6ED9               	movwf	fsr2l,c
  6194  001520  6ADA               	clrf	fsr2h,c
  6195  001522  C0D6  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  6196                           
  6197                           ; BSR set to: 0
  6198  001526  2BE9               	incf	vscp_handleProtocolEvent@i_1289& (0+255),f,b
  6199  001528                     l9671:
  6200                           
  6201                           ; BSR set to: 0
  6202  001528  519B               	movf	_vscp_imsg& (0+255),w,b
  6203  00152A  0B0F               	andlw	15
  6204  00152C  6FD6               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6205  00152E  6BD7               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6206  001530  51A4               	movf	(_vscp_imsg+9)& (0+255),w,b
  6207  001532  27D6               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6208  001534  0E00               	movlw	0
  6209  001536  23D7               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6210  001538  0EFC               	movlw	252
  6211  00153A  25D6               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6212  00153C  6FD8               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  6213  00153E  0EFF               	movlw	255
  6214  001540  21D7               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6215  001542  6FD9               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  6216  001544  51E9               	movf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6217  001546  6FDA               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  6218  001548  6BDB               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  6219  00154A  51DB               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  6220  00154C  0A80               	xorlw	128
  6221  00154E  6FDC               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  6222  001550  51D8               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  6223  001552  5DDA               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  6224  001554  51D9               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  6225  001556  0A80               	xorlw	128
  6226  001558  59DC               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  6227  00155A  E3D2               	bnc	l9667
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;vscp_firmware.c: 1233: }
  6231                           ;vscp_firmware.c: 1236: vscp_page_select = page_save;
  6232  00155C  C0DF  F052         	movff	vscp_handleProtocolEvent@page_save_1290,_vscp_page_select
  6233  001560  C0E0  F053         	movff	vscp_handleProtocolEvent@page_save_1290+1,_vscp_page_select+1
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;vscp_firmware.c: 1238: vscp_omsg.priority = 0x03;
  6237  001564  0E03               	movlw	3
  6238  001566  6FAA               	movwf	(_vscp_omsg+1)& (0+255),b
  6239                           
  6240                           ; BSR set to: 0
  6241                           ;vscp_firmware.c: 1239: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  6242  001568  519B               	movf	_vscp_imsg& (0+255),w,b
  6243  00156A  0B0F               	andlw	15
  6244  00156C  0F80               	addlw	128
  6245  00156E  6FA9               	movwf	_vscp_omsg& (0+255),b
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;vscp_firmware.c: 1240: vscp_omsg.vscp_class = 0;
  6249  001570  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
  6250  001572  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;vscp_firmware.c: 1241: vscp_omsg.vscp_type = 39;
  6254  001574  0E27               	movlw	39
  6255  001576  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
  6256                           
  6257                           ; BSR set to: 0
  6258                           ;vscp_firmware.c: 1242: vscp_omsg.data[0] = 0;
  6259  001578  6BAE               	clrf	(_vscp_omsg+5)& (0+255),b
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;vscp_firmware.c: 1243: vscp_omsg.data[1] = vscp_imsg.data[1];
  6263  00157A  C0A2  F0AF         	movff	_vscp_imsg+7,_vscp_omsg+6
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;vscp_firmware.c: 1244: vscp_omsg.data[2] = vscp_imsg.data[2];
  6267  00157E  C0A3  F0B0         	movff	_vscp_imsg+8,_vscp_omsg+7
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;vscp_firmware.c: 1245: vscp_omsg.data[3] = vscp_imsg.data[3];
  6271  001582  C0A4  F0B1         	movff	_vscp_imsg+9,_vscp_omsg+8
  6272  001586  D551               	goto	l9307
  6273  001588                     l9693:
  6274                           
  6275                           ; BSR set to: 0
  6276  001588  519F               	movf	(_vscp_imsg+4)& (0+255),w,b
  6277                           
  6278                           ; Switch size 1, requested type "speed"
  6279                           ; Number of cases is 16, Range of values is 1 to 38
  6280                           ; switch strategies available:
  6281                           ; Name         Instructions Cycles
  6282                           ; simple_byte           49    25 (average)
  6283                           ;	Chosen strategy is simple_byte
  6284  00158A  0A01               	xorlw	1	; case 1
  6285  00158C  E101 D525          	bz	l9281
  6286  001590  0A03               	xorlw	3	; case 2
  6287  001592  E101 D525          	bz	l9283
  6288  001596  0A04               	xorlw	4	; case 6
  6289  001598  E101 D525          	bz	l9285
  6290  00159C  0A0E               	xorlw	14	; case 8
  6291  00159E  E101 D525          	bz	l9287
  6292  0015A2  0A01               	xorlw	1	; case 9
  6293  0015A4  E101 D525          	bz	l9289
  6294  0015A8  0A02               	xorlw	2	; case 11
  6295  0015AA  E101 D545          	bz	l9323
  6296  0015AE  0A07               	xorlw	7	; case 12
  6297  0015B0  E101 D55B          	bz	l9357
  6298  0015B4  0A1B               	xorlw	27	; case 23
  6299  0015B6  E101 D5F0          	bz	l9415
  6300  0015BA  0A0F               	xorlw	15	; case 24
  6301  0015BC  E101 D604          	bz	l9421
  6302  0015C0  0A01               	xorlw	1	; case 25
  6303  0015C2  E101 D659          	bz	l9455
  6304  0015C6  0A04               	xorlw	4	; case 29
  6305  0015C8  E101 D687          	bz	l9481
  6306  0015CC  0A03               	xorlw	3	; case 30
  6307  0015CE  E101 D694          	bz	l9497
  6308  0015D2  0A01               	xorlw	1	; case 31
  6309  0015D4  E101 D6A1          	bz	l9513
  6310  0015D8  0A3E               	xorlw	62	; case 33
  6311  0015DA  E101 D705          	bz	l9599
  6312  0015DE  0A04               	xorlw	4	; case 37
  6313  0015E0  E101 D713          	bz	l9609
  6314  0015E4  0A03               	xorlw	3	; case 38
  6315  0015E6  E101 D774          	bz	l9659
  6316  0015EA                     l1271:
  6317  0015EA  0012               	return	
  6318  0015EC                     __end_of_vscp_handleProtocolEvent:
  6319                           	opt stack 0
  6320                           tblptru	equ	0xFF8
  6321                           prodh	equ	0xFF4
  6322                           prodl	equ	0xFF3
  6323                           postinc0	equ	0xFEE
  6324                           wreg	equ	0xFE8
  6325                           indf2	equ	0xFDF
  6326                           postinc2	equ	0xFDE
  6327                           postdec2	equ	0xFDD
  6328                           fsr2h	equ	0xFDA
  6329                           fsr2l	equ	0xFD9
  6330                           status	equ	0xFD8
  6331                           
  6332 ;; *************** function ___lbmod *****************
  6333 ;; Defined at:
  6334 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;  dividend        1    wreg     unsigned char 
  6337 ;;  divisor         1    7[COMRAM] unsigned char 
  6338 ;; Auto vars:     Size  Location     Type
  6339 ;;  dividend        1    8[COMRAM] unsigned char 
  6340 ;;  rem             1   10[COMRAM] unsigned char 
  6341 ;;  counter         1    9[COMRAM] unsigned char 
  6342 ;; Return value:  Size  Location     Type
  6343 ;;                  1    wreg      unsigned char 
  6344 ;; Registers used:
  6345 ;;		wreg, status,2, status,0
  6346 ;; Tracked objects:
  6347 ;;		On entry : F/0
  6348 ;;		On exit  : 0/0
  6349 ;;		Unchanged: 0/0
  6350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6351 ;;      Params:         1       0       0       0       0       0       0
  6352 ;;      Locals:         3       0       0       0       0       0       0
  6353 ;;      Temps:          0       0       0       0       0       0       0
  6354 ;;      Totals:         4       0       0       0       0       0       0
  6355 ;;Total ram usage:        4 bytes
  6356 ;; Hardware stack levels used:    1
  6357 ;; Hardware stack levels required when called:    2
  6358 ;; This function calls:
  6359 ;;		Nothing
  6360 ;; This function is called by:
  6361 ;;		_vscp_handleProtocolEvent
  6362 ;; This function uses a non-reentrant model
  6363 ;;
  6364                           
  6365                           	psect	text16
  6366  003C3E                     __ptext16:
  6367                           	opt stack 0
  6368  003C3E                     ___lbmod:
  6369                           	opt stack 26
  6370                           
  6371                           ;incstack = 0
  6372                           ;incstack = 0
  6373                           ;___lbmod@dividend stored from wreg
  6374  003C3E  CFE8 F009          	movff	wreg,___lbmod@dividend
  6375                           
  6376                           ; BSR set to: 0
  6377  003C42  0E08               	movlw	8
  6378  003C44  6E0A               	movwf	___lbmod@counter,c
  6379                           
  6380                           ; BSR set to: 0
  6381  003C46  6A0B               	clrf	___lbmod@rem,c
  6382  003C48                     l7067:
  6383  003C48  90D8               	bcf	status,0,c
  6384  003C4A  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  6385  003C4C  340B               	rlcf	___lbmod@rem& (0+255),w,c
  6386  003C4E  6E0B               	movwf	___lbmod@rem,c
  6387  003C50  90D8               	bcf	status,0,c
  6388  003C52  3609               	rlcf	___lbmod@dividend,f,c
  6389  003C54  5008               	movf	___lbmod@divisor,w,c
  6390  003C56  5C0B               	subwf	___lbmod@rem,w,c
  6391  003C58  E302               	bnc	l7075
  6392  003C5A  5008               	movf	___lbmod@divisor,w,c
  6393  003C5C  5E0B               	subwf	___lbmod@rem,f,c
  6394  003C5E                     l7075:
  6395  003C5E  2E0A               	decfsz	___lbmod@counter,f,c
  6396  003C60  D7F3               	goto	l7067
  6397  003C62  500B               	movf	___lbmod@rem,w,c
  6398  003C64  0012               	return	
  6399  003C66                     __end_of___lbmod:
  6400                           	opt stack 0
  6401                           tblptru	equ	0xFF8
  6402                           prodh	equ	0xFF4
  6403                           prodl	equ	0xFF3
  6404                           postinc0	equ	0xFEE
  6405                           wreg	equ	0xFE8
  6406                           indf2	equ	0xFDF
  6407                           postinc2	equ	0xFDE
  6408                           postdec2	equ	0xFDD
  6409                           fsr2h	equ	0xFDA
  6410                           fsr2l	equ	0xFD9
  6411                           status	equ	0xFD8
  6412                           
  6413 ;; *************** function _vscp_writeRegister *****************
  6414 ;; Defined at:
  6415 ;;		line 678 in file "../../vscp_firmware/common/vscp_firmware.c"
  6416 ;; Parameters:    Size  Location     Type
  6417 ;;  reg             1    wreg     unsigned char 
  6418 ;;  value           1   30[BANK0 ] unsigned char 
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;  reg             1   31[BANK0 ] unsigned char 
  6421 ;; Return value:  Size  Location     Type
  6422 ;;                  1    wreg      unsigned char 
  6423 ;; Registers used:
  6424 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6425 ;; Tracked objects:
  6426 ;;		On entry : F/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6430 ;;      Params:         0       1       0       0       0       0       0
  6431 ;;      Locals:         0       1       0       0       0       0       0
  6432 ;;      Temps:          0       0       0       0       0       0       0
  6433 ;;      Totals:         0       2       0       0       0       0       0
  6434 ;;Total ram usage:        2 bytes
  6435 ;; Hardware stack levels used:    1
  6436 ;; Hardware stack levels required when called:    8
  6437 ;; This function calls:
  6438 ;;		_vscp_writeAppReg
  6439 ;;		_vscp_writeStdReg
  6440 ;; This function is called by:
  6441 ;;		_vscp_handleProtocolEvent
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           	psect	text17
  6446  003D42                     __ptext17:
  6447                           	opt stack 0
  6448  003D42                     _vscp_writeRegister:
  6449                           	opt stack 20
  6450                           
  6451                           ;incstack = 0
  6452                           ;incstack = 0
  6453                           ;vscp_writeRegister@reg stored from wreg
  6454  003D42  CFE8 F0D5          	movff	wreg,vscp_writeRegister@reg
  6455                           
  6456                           ; BSR set to: 0
  6457                           ;vscp_firmware.c: 679: if (reg >= 0x80) {
  6458  003D46  0E7F               	movlw	127
  6459  003D48  65D5               	cpfsgt	vscp_writeRegister@reg& (0+255),b
  6460  003D4A  D006               	goto	l10449
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;vscp_firmware.c: 680: return vscp_writeStdReg(reg, value);
  6464  003D4C  C0D4  F00F         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  6465  003D50  51D5               	movf	vscp_writeRegister@reg& (0+255),w,b
  6466  003D52  EC10  F015         	call	_vscp_writeStdReg
  6467  003D56  D005               	goto	l1148
  6468  003D58                     l10449:
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;vscp_firmware.c: 682: return vscp_writeAppReg(reg, value);
  6472  003D58  C0D4  F051         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  6473  003D5C  51D5               	movf	vscp_writeRegister@reg& (0+255),w,b
  6474  003D5E  EC11  F003         	call	_vscp_writeAppReg
  6475  003D62                     l1148:
  6476  003D62  0012               	return	
  6477  003D64                     __end_of_vscp_writeRegister:
  6478                           	opt stack 0
  6479                           tblptru	equ	0xFF8
  6480                           prodh	equ	0xFF4
  6481                           prodl	equ	0xFF3
  6482                           postinc0	equ	0xFEE
  6483                           wreg	equ	0xFE8
  6484                           indf2	equ	0xFDF
  6485                           postinc2	equ	0xFDE
  6486                           postdec2	equ	0xFDD
  6487                           fsr2h	equ	0xFDA
  6488                           fsr2l	equ	0xFD9
  6489                           status	equ	0xFD8
  6490                           
  6491 ;; *************** function _vscp_writeStdReg *****************
  6492 ;; Defined at:
  6493 ;;		line 691 in file "../../vscp_firmware/common/vscp_firmware.c"
  6494 ;; Parameters:    Size  Location     Type
  6495 ;;  reg             1    wreg     unsigned char 
  6496 ;;  value           1   14[COMRAM] unsigned char 
  6497 ;; Auto vars:     Size  Location     Type
  6498 ;;  reg             1   31[COMRAM] unsigned char 
  6499 ;;  code            4   24[COMRAM] unsigned long 
  6500 ;;  idx             1   29[COMRAM] unsigned char 
  6501 ;;  code            4   20[COMRAM] unsigned long 
  6502 ;;  idx             1   28[COMRAM] unsigned char 
  6503 ;;  rv              1   30[COMRAM] unsigned char 
  6504 ;; Return value:  Size  Location     Type
  6505 ;;                  1    wreg      unsigned char 
  6506 ;; Registers used:
  6507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6508 ;; Tracked objects:
  6509 ;;		On entry : F/0
  6510 ;;		On exit  : 0/0
  6511 ;;		Unchanged: 0/0
  6512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6513 ;;      Params:         1       0       0       0       0       0       0
  6514 ;;      Locals:        12       0       0       0       0       0       0
  6515 ;;      Temps:          5       0       0       0       0       0       0
  6516 ;;      Totals:        18       0       0       0       0       0       0
  6517 ;;Total ram usage:       18 bytes
  6518 ;; Hardware stack levels used:    1
  6519 ;; Hardware stack levels required when called:    5
  6520 ;; This function calls:
  6521 ;;		_vscp_setGUID
  6522 ;;		_vscp_setManufacturerId
  6523 ;;		_vscp_getGUID
  6524 ;;		_vscp_getUserID
  6525 ;;		_vscp_setUserID
  6526 ;;		_vscp_getManufacturerId
  6527 ;;		_vscp_getFamilyCode
  6528 ;;		_vscp_getFamilyType
  6529 ;;		_vscp_restoreDefaults
  6530 ;; This function is called by:
  6531 ;;		_vscp_writeRegister
  6532 ;;		_vscp_handleProtocolEvent
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536                           	psect	text18
  6537  002A20                     __ptext18:
  6538                           	opt stack 0
  6539  002A20                     _vscp_writeStdReg:
  6540                           	opt stack 23
  6541                           
  6542                           ;incstack = 0
  6543                           ;incstack = 0
  6544                           ;vscp_writeStdReg@reg stored from wreg
  6545  002A20  CFE8 F020          	movff	wreg,vscp_writeStdReg@reg
  6546                           
  6547                           ; BSR set to: 0
  6548                           ;vscp_firmware.c: 692: uint8_t rv = ~value;
  6549  002A24  1C0F               	comf	vscp_writeStdReg@value,w,c
  6550  002A26  6E1F               	movwf	vscp_writeStdReg@rv,c
  6551                           
  6552                           ; BSR set to: 0
  6553                           ;vscp_firmware.c: 694: if ((reg > (0x82 + 1)) &&
  6554                           ;vscp_firmware.c: 695: (reg < 0x89)) {
  6555  002A28  0E83               	movlw	131
  6556  002A2A  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6557  002A2C  D00E               	goto	l9097
  6558                           
  6559                           ; BSR set to: 0
  6560  002A2E  0E89               	movlw	137
  6561  002A30  6020               	cpfslt	vscp_writeStdReg@reg,c
  6562  002A32  D00B               	goto	l9097
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;vscp_firmware.c: 698: vscp_setUserID((reg - 0x84), value);
  6566  002A34  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  6567  002A38  5020               	movf	vscp_writeStdReg@reg,w,c
  6568  002A3A  0F7C               	addlw	124
  6569  002A3C  EC0F  F01F         	call	_vscp_setUserID
  6570                           
  6571                           ;vscp_firmware.c: 699: rv = vscp_getUserID((reg - 0x84));
  6572  002A40  5020               	movf	vscp_writeStdReg@reg,w,c
  6573  002A42  0F7C               	addlw	124
  6574  002A44  EC49  F01F         	call	_vscp_getUserID
  6575  002A48  D083               	goto	L23
  6576  002A4A                     l9097:
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;vscp_firmware.c: 702: else if (0x92 == reg) {
  6580  002A4A  5020               	movf	vscp_writeStdReg@reg,w,c
  6581  002A4C  0A92               	xorlw	146
  6582  002A4E  E10D               	bnz	l9103
  6583                           
  6584                           ; BSR set to: 0
  6585                           ;vscp_firmware.c: 705: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  6586  002A50  500F               	movf	vscp_writeStdReg@value,w,c
  6587  002A52  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6588  002A54  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  6589  002A56  5052               	movf	_vscp_page_select,w,c
  6590  002A58  6E12               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  6591  002A5A  6A13               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  6592  002A5C  1010               	iorwf	??_vscp_writeStdReg,w,c
  6593  002A5E  6E52               	movwf	_vscp_page_select,c
  6594  002A60  5011               	movf	??_vscp_writeStdReg+1,w,c
  6595  002A62  1013               	iorwf	??_vscp_writeStdReg+3,w,c
  6596  002A64  6E53               	movwf	_vscp_page_select+1,c
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;vscp_firmware.c: 706: rv = (vscp_page_select >> 8) & 0xff;
  6600  002A66  5053               	movf	_vscp_page_select+1,w,c
  6601  002A68  D073               	goto	L23
  6602  002A6A                     l9103:
  6603                           
  6604                           ; BSR set to: 0
  6605                           ;vscp_firmware.c: 708: else if (0x93 == reg) {
  6606  002A6A  5020               	movf	vscp_writeStdReg@reg,w,c
  6607  002A6C  0A93               	xorlw	147
  6608  002A6E  E10B               	bnz	l9109
  6609                           
  6610                           ; BSR set to: 0
  6611                           ;vscp_firmware.c: 711: vscp_page_select = (vscp_page_select & 0xff00) | value;
  6612  002A70  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  6613  002A72  5053               	movf	_vscp_page_select+1,w,c
  6614  002A74  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6615  002A76  500F               	movf	vscp_writeStdReg@value,w,c
  6616  002A78  1010               	iorwf	??_vscp_writeStdReg,w,c
  6617  002A7A  6E52               	movwf	_vscp_page_select,c
  6618  002A7C  5011               	movf	??_vscp_writeStdReg+1,w,c
  6619  002A7E  6E53               	movwf	_vscp_page_select+1,c
  6620                           
  6621                           ; BSR set to: 0
  6622                           ;vscp_firmware.c: 712: rv = (vscp_page_select & 0xff);
  6623  002A80  C052  F01F         	movff	_vscp_page_select,vscp_writeStdReg@rv
  6624                           
  6625                           ;vscp_firmware.c: 713: }
  6626  002A84  D0AF               	goto	l9171
  6627  002A86                     l9109:
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;vscp_firmware.c: 718: else if ((reg > 0x88) && (reg < 0x91)) {
  6631  002A86  0E88               	movlw	136
  6632  002A88  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6633  002A8A  D019               	goto	l9121
  6634                           
  6635                           ; BSR set to: 0
  6636  002A8C  0E91               	movlw	145
  6637  002A8E  6020               	cpfslt	vscp_writeStdReg@reg,c
  6638  002A90  D016               	goto	l9121
  6639                           
  6640                           ; BSR set to: 0
  6641                           ;vscp_firmware.c: 720: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6642                           ;vscp_firmware.c: 721: (0xff != (vscp_page_select & 0xff))) {
  6643  002A92  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6644  002A96  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6645  002A9A  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6646  002A9C  2811               	incf	??_vscp_writeStdReg+1,w,c
  6647  002A9E  E102               	bnz	l9117
  6648                           
  6649                           ; BSR set to: 0
  6650  002AA0  2852               	incf	_vscp_page_select,w,c
  6651  002AA2  E002               	bz	l9119
  6652  002AA4                     l9117:
  6653                           
  6654                           ; BSR set to: 0
  6655                           ;vscp_firmware.c: 723: rv = ~value;
  6656  002AA4  1C0F               	comf	vscp_writeStdReg@value,w,c
  6657  002AA6  D054               	goto	L23
  6658  002AA8                     l9119:
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;vscp_firmware.c: 726: vscp_setManufacturerId(reg - 0x89, value);
  6662  002AA8  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  6663  002AAC  5020               	movf	vscp_writeStdReg@reg,w,c
  6664  002AAE  0F77               	addlw	119
  6665  002AB0  ECB2  F01E         	call	_vscp_setManufacturerId
  6666                           
  6667                           ;vscp_firmware.c: 727: rv = vscp_getManufacturerId(reg - 0x89);
  6668  002AB4  5020               	movf	vscp_writeStdReg@reg,w,c
  6669  002AB6  0F77               	addlw	119
  6670  002AB8  EC3F  F01F         	call	_vscp_getManufacturerId
  6671  002ABC  D049               	goto	L23
  6672  002ABE                     l9121:
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;vscp_firmware.c: 730: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  6676  002ABE  0ECF               	movlw	207
  6677  002AC0  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6678  002AC2  D017               	goto	l9133
  6679                           
  6680                           ; BSR set to: 0
  6681  002AC4  0EE0               	movlw	224
  6682  002AC6  6020               	cpfslt	vscp_writeStdReg@reg,c
  6683  002AC8  D014               	goto	l9133
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;vscp_firmware.c: 732: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6687                           ;vscp_firmware.c: 733: (0xff != (vscp_page_select & 0xff))) {
  6688  002ACA  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6689  002ACE  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6690  002AD2  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6691  002AD4  2811               	incf	??_vscp_writeStdReg+1,w,c
  6692  002AD6  E1E6               	bnz	l9117
  6693                           
  6694                           ; BSR set to: 0
  6695  002AD8  2852               	incf	_vscp_page_select,w,c
  6696  002ADA  E1E4               	bnz	l9117
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;vscp_firmware.c: 737: else {
  6700                           ;vscp_firmware.c: 738: vscp_setGUID(reg - 0xD0, value);
  6701  002ADC  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  6702  002AE0  5020               	movf	vscp_writeStdReg@reg,w,c
  6703  002AE2  0F30               	addlw	48
  6704  002AE4  ECC3  F01E         	call	_vscp_setGUID
  6705                           
  6706                           ;vscp_firmware.c: 739: rv = vscp_getGUID(reg - 0xD0);
  6707  002AE8  5020               	movf	vscp_writeStdReg@reg,w,c
  6708  002AEA  0F30               	addlw	48
  6709  002AEC  EC53  F01F         	call	_vscp_getGUID
  6710  002AF0  D02F               	goto	L23
  6711  002AF2                     l9133:
  6712                           
  6713                           ; BSR set to: 0
  6714                           ;vscp_firmware.c: 743: else if ( ( reg >= 0x9A ) &&
  6715                           ;vscp_firmware.c: 744: ( reg < 0x9E ) ) {
  6716  002AF2  0E99               	movlw	153
  6717  002AF4  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6718  002AF6  D02E               	goto	l9143
  6719                           
  6720                           ; BSR set to: 0
  6721  002AF8  0E9E               	movlw	158
  6722  002AFA  6020               	cpfslt	vscp_writeStdReg@reg,c
  6723  002AFC  D02B               	goto	l9143
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;vscp_firmware.c: 746: uint32_t code = vscp_getFamilyCode();
  6727  002AFE  ECA2  F01F         	call	_vscp_getFamilyCode	;wreg free
  6728  002B02  C00B  F018         	movff	?_vscp_getFamilyCode+3,vscp_writeStdReg@code+3
  6729  002B06  C00A  F017         	movff	?_vscp_getFamilyCode+2,vscp_writeStdReg@code+2
  6730  002B0A  C009  F016         	movff	?_vscp_getFamilyCode+1,vscp_writeStdReg@code+1
  6731  002B0E  C008  F015         	movff	?_vscp_getFamilyCode,vscp_writeStdReg@code
  6732                           
  6733                           ; BSR set to: 0
  6734                           ;vscp_firmware.c: 747: uint8_t idx = reg - 0x9A;
  6735  002B12  5020               	movf	vscp_writeStdReg@reg,w,c
  6736  002B14  0F66               	addlw	102
  6737  002B16  6E1D               	movwf	vscp_writeStdReg@idx,c
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;vscp_firmware.c: 748: rv = code >> (((3-idx)*8) & 0xff);
  6741  002B18  501D               	movf	vscp_writeStdReg@idx,w,c
  6742  002B1A  0803               	sublw	3
  6743  002B1C  6E10               	movwf	??_vscp_writeStdReg& (0+255),c
  6744  002B1E  90D8               	bcf	status,0,c
  6745  002B20  3610               	rlcf	??_vscp_writeStdReg,f,c
  6746  002B22  90D8               	bcf	status,0,c
  6747  002B24  3610               	rlcf	??_vscp_writeStdReg,f,c
  6748  002B26  90D8               	bcf	status,0,c
  6749  002B28  3610               	rlcf	??_vscp_writeStdReg,f,c
  6750  002B2A  5010               	movf	??_vscp_writeStdReg,w,c
  6751  002B2C  C015  F011         	movff	vscp_writeStdReg@code,??_vscp_writeStdReg+1
  6752  002B30  C016  F012         	movff	vscp_writeStdReg@code+1,??_vscp_writeStdReg+2
  6753  002B34  C017  F013         	movff	vscp_writeStdReg@code+2,??_vscp_writeStdReg+3
  6754  002B38  C018  F014         	movff	vscp_writeStdReg@code+3,??_vscp_writeStdReg+4
  6755  002B3C  2AE8               	incf	wreg,f,c
  6756  002B3E  D005               	goto	u11090
  6757  002B40                     u11095:
  6758  002B40  90D8               	bcf	status,0,c
  6759  002B42  3214               	rrcf	??_vscp_writeStdReg+4,f,c
  6760  002B44  3213               	rrcf	??_vscp_writeStdReg+3,f,c
  6761  002B46  3212               	rrcf	??_vscp_writeStdReg+2,f,c
  6762  002B48  3211               	rrcf	??_vscp_writeStdReg+1,f,c
  6763  002B4A                     u11090:
  6764  002B4A  2EE8               	decfsz	wreg,f,c
  6765  002B4C  D7F9               	goto	u11095
  6766  002B4E  D030               	goto	L24
  6767  002B50                     L23:
  6768  002B50  6E1F               	movwf	vscp_writeStdReg@rv,c
  6769                           
  6770                           ;vscp_firmware.c: 749: }
  6771  002B52  D048               	goto	l9171
  6772  002B54                     l9143:
  6773                           
  6774                           ; BSR set to: 0
  6775                           ;vscp_firmware.c: 750: else if ( ( reg >= 0x9E ) &&
  6776                           ;vscp_firmware.c: 751: ( reg < 0xA2 ) ) {
  6777  002B54  0E9D               	movlw	157
  6778  002B56  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6779  002B58  D02D               	goto	l9153
  6780                           
  6781                           ; BSR set to: 0
  6782  002B5A  0EA2               	movlw	162
  6783  002B5C  6020               	cpfslt	vscp_writeStdReg@reg,c
  6784  002B5E  D02A               	goto	l9153
  6785                           
  6786                           ; BSR set to: 0
  6787                           ;vscp_firmware.c: 753: uint32_t code = vscp_getFamilyType();
  6788  002B60  EC9D  F01F         	call	_vscp_getFamilyType	;wreg free
  6789  002B64  C00B  F01C         	movff	?_vscp_getFamilyType+3,vscp_writeStdReg@code_1270+3
  6790  002B68  C00A  F01B         	movff	?_vscp_getFamilyType+2,vscp_writeStdReg@code_1270+2
  6791  002B6C  C009  F01A         	movff	?_vscp_getFamilyType+1,vscp_writeStdReg@code_1270+1
  6792  002B70  C008  F019         	movff	?_vscp_getFamilyType,vscp_writeStdReg@code_1270
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;vscp_firmware.c: 754: uint8_t idx = reg - 0x9E;
  6796  002B74  5020               	movf	vscp_writeStdReg@reg,w,c
  6797  002B76  0F62               	addlw	98
  6798  002B78  6E1E               	movwf	vscp_writeStdReg@idx_1271,c
  6799                           
  6800                           ; BSR set to: 0
  6801                           ;vscp_firmware.c: 755: rv = code >> (((3-idx)*8) & 0xff);
  6802  002B7A  501E               	movf	vscp_writeStdReg@idx_1271,w,c
  6803  002B7C  0803               	sublw	3
  6804  002B7E  6E10               	movwf	??_vscp_writeStdReg& (0+255),c
  6805  002B80  90D8               	bcf	status,0,c
  6806  002B82  3610               	rlcf	??_vscp_writeStdReg,f,c
  6807  002B84  90D8               	bcf	status,0,c
  6808  002B86  3610               	rlcf	??_vscp_writeStdReg,f,c
  6809  002B88  90D8               	bcf	status,0,c
  6810  002B8A  3610               	rlcf	??_vscp_writeStdReg,f,c
  6811  002B8C  5010               	movf	??_vscp_writeStdReg,w,c
  6812  002B8E  C019  F011         	movff	vscp_writeStdReg@code_1270,??_vscp_writeStdReg+1
  6813  002B92  C01A  F012         	movff	vscp_writeStdReg@code_1270+1,??_vscp_writeStdReg+2
  6814  002B96  C01B  F013         	movff	vscp_writeStdReg@code_1270+2,??_vscp_writeStdReg+3
  6815  002B9A  C01C  F014         	movff	vscp_writeStdReg@code_1270+3,??_vscp_writeStdReg+4
  6816  002B9E  2AE8               	incf	wreg,f,c
  6817  002BA0  D005               	goto	u11120
  6818  002BA2                     u11125:
  6819  002BA2  90D8               	bcf	status,0,c
  6820  002BA4  3214               	rrcf	??_vscp_writeStdReg+4,f,c
  6821  002BA6  3213               	rrcf	??_vscp_writeStdReg+3,f,c
  6822  002BA8  3212               	rrcf	??_vscp_writeStdReg+2,f,c
  6823  002BAA  3211               	rrcf	??_vscp_writeStdReg+1,f,c
  6824  002BAC                     u11120:
  6825  002BAC  2EE8               	decfsz	wreg,f,c
  6826  002BAE  D7F9               	goto	u11125
  6827  002BB0                     L24:
  6828  002BB0  5011               	movf	??_vscp_writeStdReg+1,w,c
  6829  002BB2  D7CE               	goto	L23
  6830  002BB4                     l9153:
  6831                           
  6832                           ; BSR set to: 0
  6833                           ;vscp_firmware.c: 757: else if ( 0xA2 == reg ) {
  6834  002BB4  5020               	movf	vscp_writeStdReg@reg,w,c
  6835  002BB6  0AA2               	xorlw	162
  6836  002BB8  E001 D774          	bnz	l9117
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;vscp_firmware.c: 758: if ( 0x55 == value ) {
  6840  002BBC  500F               	movf	vscp_writeStdReg@value,w,c
  6841  002BBE  0A55               	xorlw	85
  6842  002BC0  E104               	bnz	l9161
  6843                           
  6844                           ; BSR set to: 0
  6845                           ;vscp_firmware.c: 759: vscp_configtimer = 0;
  6846  002BC2  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
  6847  002BC4  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;vscp_firmware.c: 760: rv = 0x55;
  6851  002BC6  0E55               	movlw	85
  6852  002BC8  D7C3               	goto	L23
  6853  002BCA                     l9161:
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;vscp_firmware.c: 762: else if ( 0xaa == value ) {
  6857  002BCA  500F               	movf	vscp_writeStdReg@value,w,c
  6858  002BCC  0AAA               	xorlw	170
  6859  002BCE  E10A               	bnz	l9171
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;vscp_firmware.c: 763: if ( vscp_configtimer < 1000 ) {
  6863  002BD0  0EE8               	movlw	232
  6864  002BD2  5D84               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  6865  002BD4  0E03               	movlw	3
  6866  002BD6  5985               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  6867  002BD8  E204               	bc	l1178
  6868                           
  6869                           ; BSR set to: 0
  6870                           ;vscp_firmware.c: 764: vscp_restoreDefaults();
  6871  002BDA  ECB1  F01F         	call	_vscp_restoreDefaults	;wreg free
  6872                           
  6873                           ;vscp_firmware.c: 765: rv = 0xaa;
  6874  002BDE  0EAA               	movlw	170
  6875  002BE0  D7B7               	goto	L23
  6876  002BE2                     l1178:
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;vscp_firmware.c: 767: else {
  6880                           ;vscp_firmware.c: 768: rv = 0;
  6881  002BE2  6A1F               	clrf	vscp_writeStdReg@rv,c
  6882  002BE4                     l9171:
  6883                           
  6884                           ;vscp_firmware.c: 776: }
  6885                           ;vscp_firmware.c: 778: return rv;
  6886  002BE4  501F               	movf	vscp_writeStdReg@rv,w,c
  6887  002BE6  0012               	return	
  6888  002BE8                     __end_of_vscp_writeStdReg:
  6889                           	opt stack 0
  6890                           tblptru	equ	0xFF8
  6891                           prodh	equ	0xFF4
  6892                           prodl	equ	0xFF3
  6893                           postinc0	equ	0xFEE
  6894                           wreg	equ	0xFE8
  6895                           indf2	equ	0xFDF
  6896                           postinc2	equ	0xFDE
  6897                           postdec2	equ	0xFDD
  6898                           fsr2h	equ	0xFDA
  6899                           fsr2l	equ	0xFD9
  6900                           status	equ	0xFD8
  6901                           
  6902 ;; *************** function _vscp_restoreDefaults *****************
  6903 ;; Defined at:
  6904 ;;		line 2471 in file "../main.c"
  6905 ;; Parameters:    Size  Location     Type
  6906 ;;		None
  6907 ;; Auto vars:     Size  Location     Type
  6908 ;;		None
  6909 ;; Return value:  Size  Location     Type
  6910 ;;		None               void
  6911 ;; Registers used:
  6912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6913 ;; Tracked objects:
  6914 ;;		On entry : F/0
  6915 ;;		On exit  : 0/0
  6916 ;;		Unchanged: 0/0
  6917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6918 ;;      Params:         0       0       0       0       0       0       0
  6919 ;;      Locals:         0       0       0       0       0       0       0
  6920 ;;      Temps:          0       0       0       0       0       0       0
  6921 ;;      Totals:         0       0       0       0       0       0       0
  6922 ;;Total ram usage:        0 bytes
  6923 ;; Hardware stack levels used:    1
  6924 ;; Hardware stack levels required when called:    4
  6925 ;; This function calls:
  6926 ;;		_init_app_eeprom
  6927 ;;		_init_app_ram
  6928 ;; This function is called by:
  6929 ;;		_vscp_writeStdReg
  6930 ;; This function uses a non-reentrant model
  6931 ;;
  6932                           
  6933                           	psect	text19
  6934  003F62                     __ptext19:
  6935                           	opt stack 0
  6936  003F62                     _vscp_restoreDefaults:
  6937                           	opt stack 23
  6938                           
  6939                           ; BSR set to: 0
  6940                           ;main.c: 2472: init_app_eeprom();
  6941                           
  6942                           ;incstack = 0
  6943                           ;incstack = 0
  6944  003F62  EC2C  F00D         	call	_init_app_eeprom	;wreg free
  6945                           
  6946                           ;main.c: 2473: init_app_ram();
  6947  003F66  EF93  F018         	goto	_init_app_ram	;wreg free
  6948  003F6A                     __end_of_vscp_restoreDefaults:
  6949                           	opt stack 0
  6950                           tblptru	equ	0xFF8
  6951                           prodh	equ	0xFF4
  6952                           prodl	equ	0xFF3
  6953                           postinc0	equ	0xFEE
  6954                           wreg	equ	0xFE8
  6955                           indf2	equ	0xFDF
  6956                           postinc2	equ	0xFDE
  6957                           postdec2	equ	0xFDD
  6958                           fsr2h	equ	0xFDA
  6959                           fsr2l	equ	0xFD9
  6960                           status	equ	0xFD8
  6961                           
  6962 ;; *************** function _init_app_eeprom *****************
  6963 ;; Defined at:
  6964 ;;		line 480 in file "../main.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;		None
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;  j               1   13[COMRAM] unsigned char 
  6969 ;;  i               1   12[COMRAM] unsigned char 
  6970 ;; Return value:  Size  Location     Type
  6971 ;;		None               void
  6972 ;; Registers used:
  6973 ;;		wreg, status,2, status,0, cstack
  6974 ;; Tracked objects:
  6975 ;;		On entry : 0/0
  6976 ;;		On exit  : 0/0
  6977 ;;		Unchanged: 0/0
  6978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6979 ;;      Params:         0       0       0       0       0       0       0
  6980 ;;      Locals:         2       0       0       0       0       0       0
  6981 ;;      Temps:          2       0       0       0       0       0       0
  6982 ;;      Totals:         4       0       0       0       0       0       0
  6983 ;;Total ram usage:        4 bytes
  6984 ;; Hardware stack levels used:    1
  6985 ;; Hardware stack levels required when called:    3
  6986 ;; This function calls:
  6987 ;;		_writeEEPROM
  6988 ;; This function is called by:
  6989 ;;		_main
  6990 ;;		_vscp_restoreDefaults
  6991 ;; This function uses a non-reentrant model
  6992 ;;
  6993                           
  6994                           	psect	text20
  6995  001A58                     __ptext20:
  6996                           	opt stack 0
  6997  001A58                     _init_app_eeprom:
  6998                           	opt stack 23
  6999                           
  7000                           ;main.c: 481: unsigned char i, j;
  7001                           ;main.c: 483: writeEEPROM( 0x43 + 0, 0 );
  7002                           
  7003                           ;incstack = 0
  7004                           ;incstack = 0
  7005  001A58  6A09               	clrf	?_writeEEPROM+1,c
  7006  001A5A  0E43               	movlw	67
  7007  001A5C  6E08               	movwf	?_writeEEPROM,c
  7008  001A5E  0E00               	movlw	0
  7009  001A60  6A0A               	clrf	?_writeEEPROM+2,c
  7010  001A62  EC59  F01E         	call	_writeEEPROM	;wreg free
  7011                           
  7012                           ;main.c: 484: writeEEPROM( 0x43 + 1, 0 );
  7013  001A66  6A09               	clrf	?_writeEEPROM+1,c
  7014  001A68  0E44               	movlw	68
  7015  001A6A  6E08               	movwf	?_writeEEPROM,c
  7016  001A6C  0E00               	movlw	0
  7017  001A6E  6A0A               	clrf	?_writeEEPROM+2,c
  7018  001A70  EC59  F01E         	call	_writeEEPROM	;wreg free
  7019                           
  7020                           ;main.c: 486: writeEEPROM( 0x43 + 10,
  7021                           ;main.c: 487: 0x08 |
  7022                           ;main.c: 488: 0x10 |
  7023                           ;main.c: 489: 0x80 );
  7024  001A74  6A09               	clrf	?_writeEEPROM+1,c
  7025  001A76  0E4D               	movlw	77
  7026  001A78  6E08               	movwf	?_writeEEPROM,c
  7027  001A7A  0E98               	movlw	152
  7028  001A7C  6E0A               	movwf	?_writeEEPROM+2,c
  7029  001A7E  EC59  F01E         	call	_writeEEPROM	;wreg free
  7030                           
  7031                           ;main.c: 491: writeEEPROM( 0x43 + 11,
  7032                           ;main.c: 492: 0x08 |
  7033                           ;main.c: 493: 0x10 |
  7034                           ;main.c: 494: 0x80 );
  7035  001A82  6A09               	clrf	?_writeEEPROM+1,c
  7036  001A84  0E4E               	movlw	78
  7037  001A86  6E08               	movwf	?_writeEEPROM,c
  7038  001A88  0E98               	movlw	152
  7039  001A8A  6E0A               	movwf	?_writeEEPROM+2,c
  7040  001A8C  EC59  F01E         	call	_writeEEPROM	;wreg free
  7041                           
  7042                           ;main.c: 496: writeEEPROM( 0x43 + 12,
  7043                           ;main.c: 497: 0x08 |
  7044                           ;main.c: 498: 0x10 |
  7045                           ;main.c: 499: 0x80 );
  7046  001A90  6A09               	clrf	?_writeEEPROM+1,c
  7047  001A92  0E4F               	movlw	79
  7048  001A94  6E08               	movwf	?_writeEEPROM,c
  7049  001A96  0E98               	movlw	152
  7050  001A98  6E0A               	movwf	?_writeEEPROM+2,c
  7051  001A9A  EC59  F01E         	call	_writeEEPROM	;wreg free
  7052                           
  7053                           ;main.c: 501: writeEEPROM( 0x43 + 13,
  7054                           ;main.c: 502: 0x08 |
  7055                           ;main.c: 503: 0x10 |
  7056                           ;main.c: 504: 0x80 );
  7057  001A9E  6A09               	clrf	?_writeEEPROM+1,c
  7058  001AA0  0E50               	movlw	80
  7059  001AA2  6E08               	movwf	?_writeEEPROM,c
  7060  001AA4  0E98               	movlw	152
  7061  001AA6  6E0A               	movwf	?_writeEEPROM+2,c
  7062  001AA8  EC59  F01E         	call	_writeEEPROM	;wreg free
  7063                           
  7064                           ;main.c: 506: writeEEPROM( 0x43 + 14,
  7065                           ;main.c: 507: 0x08 |
  7066                           ;main.c: 508: 0x10 |
  7067                           ;main.c: 509: 0x80 );
  7068  001AAC  6A09               	clrf	?_writeEEPROM+1,c
  7069  001AAE  0E51               	movlw	81
  7070  001AB0  6E08               	movwf	?_writeEEPROM,c
  7071  001AB2  0E98               	movlw	152
  7072  001AB4  6E0A               	movwf	?_writeEEPROM+2,c
  7073  001AB6  EC59  F01E         	call	_writeEEPROM	;wreg free
  7074                           
  7075                           ;main.c: 511: writeEEPROM( 0x43 + 15,
  7076                           ;main.c: 512: 0x08 |
  7077                           ;main.c: 513: 0x10 |
  7078                           ;main.c: 514: 0x80 );
  7079  001ABA  6A09               	clrf	?_writeEEPROM+1,c
  7080  001ABC  0E52               	movlw	82
  7081  001ABE  6E08               	movwf	?_writeEEPROM,c
  7082  001AC0  0E98               	movlw	152
  7083  001AC2  6E0A               	movwf	?_writeEEPROM+2,c
  7084  001AC4  EC59  F01E         	call	_writeEEPROM	;wreg free
  7085                           
  7086                           ;main.c: 516: writeEEPROM( 0x43 + 16,
  7087                           ;main.c: 517: 0x08 |
  7088                           ;main.c: 518: 0x10 |
  7089                           ;main.c: 519: 0x80 );
  7090  001AC8  6A09               	clrf	?_writeEEPROM+1,c
  7091  001ACA  0E53               	movlw	83
  7092  001ACC  6E08               	movwf	?_writeEEPROM,c
  7093  001ACE  0E98               	movlw	152
  7094  001AD0  6E0A               	movwf	?_writeEEPROM+2,c
  7095  001AD2  EC59  F01E         	call	_writeEEPROM	;wreg free
  7096                           
  7097                           ;main.c: 521: writeEEPROM( 0x43 + 17,
  7098                           ;main.c: 522: 0x08 |
  7099                           ;main.c: 523: 0x10 |
  7100                           ;main.c: 524: 0x80 );
  7101  001AD6  6A09               	clrf	?_writeEEPROM+1,c
  7102  001AD8  0E54               	movlw	84
  7103  001ADA  6E08               	movwf	?_writeEEPROM,c
  7104  001ADC  0E98               	movlw	152
  7105  001ADE  6E0A               	movwf	?_writeEEPROM+2,c
  7106  001AE0  EC59  F01E         	call	_writeEEPROM	;wreg free
  7107                           
  7108                           ;main.c: 526: writeEEPROM( 0x43 + 18, 0 );
  7109  001AE4  6A09               	clrf	?_writeEEPROM+1,c
  7110  001AE6  0E55               	movlw	85
  7111  001AE8  6E08               	movwf	?_writeEEPROM,c
  7112  001AEA  0E00               	movlw	0
  7113  001AEC  6A0A               	clrf	?_writeEEPROM+2,c
  7114  001AEE  EC59  F01E         	call	_writeEEPROM	;wreg free
  7115                           
  7116                           ;main.c: 527: writeEEPROM( 0x43 + 19, 0 );
  7117  001AF2  6A09               	clrf	?_writeEEPROM+1,c
  7118  001AF4  0E56               	movlw	86
  7119  001AF6  6E08               	movwf	?_writeEEPROM,c
  7120  001AF8  0E00               	movlw	0
  7121  001AFA  6A0A               	clrf	?_writeEEPROM+2,c
  7122  001AFC  EC59  F01E         	call	_writeEEPROM	;wreg free
  7123                           
  7124                           ;main.c: 528: writeEEPROM( 0x43 + 20, 0 );
  7125  001B00  6A09               	clrf	?_writeEEPROM+1,c
  7126  001B02  0E57               	movlw	87
  7127  001B04  6E08               	movwf	?_writeEEPROM,c
  7128  001B06  0E00               	movlw	0
  7129  001B08  6A0A               	clrf	?_writeEEPROM+2,c
  7130  001B0A  EC59  F01E         	call	_writeEEPROM	;wreg free
  7131                           
  7132                           ;main.c: 529: writeEEPROM( 0x43 + 21, 0 );
  7133  001B0E  6A09               	clrf	?_writeEEPROM+1,c
  7134  001B10  0E58               	movlw	88
  7135  001B12  6E08               	movwf	?_writeEEPROM,c
  7136  001B14  0E00               	movlw	0
  7137  001B16  6A0A               	clrf	?_writeEEPROM+2,c
  7138  001B18  EC59  F01E         	call	_writeEEPROM	;wreg free
  7139                           
  7140                           ;main.c: 530: writeEEPROM( 0x43 + 22, 0 );
  7141  001B1C  6A09               	clrf	?_writeEEPROM+1,c
  7142  001B1E  0E59               	movlw	89
  7143  001B20  6E08               	movwf	?_writeEEPROM,c
  7144  001B22  0E00               	movlw	0
  7145  001B24  6A0A               	clrf	?_writeEEPROM+2,c
  7146  001B26  EC59  F01E         	call	_writeEEPROM	;wreg free
  7147                           
  7148                           ;main.c: 531: writeEEPROM( 0x43 + 23, 0 );
  7149  001B2A  6A09               	clrf	?_writeEEPROM+1,c
  7150  001B2C  0E5A               	movlw	90
  7151  001B2E  6E08               	movwf	?_writeEEPROM,c
  7152  001B30  0E00               	movlw	0
  7153  001B32  6A0A               	clrf	?_writeEEPROM+2,c
  7154  001B34  EC59  F01E         	call	_writeEEPROM	;wreg free
  7155                           
  7156                           ;main.c: 532: writeEEPROM( 0x43 + 24, 0 );
  7157  001B38  6A09               	clrf	?_writeEEPROM+1,c
  7158  001B3A  0E5B               	movlw	91
  7159  001B3C  6E08               	movwf	?_writeEEPROM,c
  7160  001B3E  0E00               	movlw	0
  7161  001B40  6A0A               	clrf	?_writeEEPROM+2,c
  7162  001B42  EC59  F01E         	call	_writeEEPROM	;wreg free
  7163                           
  7164                           ;main.c: 533: writeEEPROM( 0x43 + 25, 0 );
  7165  001B46  6A09               	clrf	?_writeEEPROM+1,c
  7166  001B48  0E5C               	movlw	92
  7167  001B4A  6E08               	movwf	?_writeEEPROM,c
  7168  001B4C  0E00               	movlw	0
  7169  001B4E  6A0A               	clrf	?_writeEEPROM+2,c
  7170  001B50  EC59  F01E         	call	_writeEEPROM	;wreg free
  7171                           
  7172                           ;main.c: 534: writeEEPROM( 0x43 + 26, 0 );
  7173  001B54  6A09               	clrf	?_writeEEPROM+1,c
  7174  001B56  0E5D               	movlw	93
  7175  001B58  6E08               	movwf	?_writeEEPROM,c
  7176  001B5A  0E00               	movlw	0
  7177  001B5C  6A0A               	clrf	?_writeEEPROM+2,c
  7178  001B5E  EC59  F01E         	call	_writeEEPROM	;wreg free
  7179                           
  7180                           ;main.c: 535: writeEEPROM( 0x43 + 27, 0 );
  7181  001B62  6A09               	clrf	?_writeEEPROM+1,c
  7182  001B64  0E5E               	movlw	94
  7183  001B66  6E08               	movwf	?_writeEEPROM,c
  7184  001B68  0E00               	movlw	0
  7185  001B6A  6A0A               	clrf	?_writeEEPROM+2,c
  7186  001B6C  EC59  F01E         	call	_writeEEPROM	;wreg free
  7187                           
  7188                           ;main.c: 536: writeEEPROM( 0x43 + 28, 0 );
  7189  001B70  6A09               	clrf	?_writeEEPROM+1,c
  7190  001B72  0E5F               	movlw	95
  7191  001B74  6E08               	movwf	?_writeEEPROM,c
  7192  001B76  0E00               	movlw	0
  7193  001B78  6A0A               	clrf	?_writeEEPROM+2,c
  7194  001B7A  EC59  F01E         	call	_writeEEPROM	;wreg free
  7195                           
  7196                           ;main.c: 537: writeEEPROM( 0x43 + 29, 0 );
  7197  001B7E  6A09               	clrf	?_writeEEPROM+1,c
  7198  001B80  0E60               	movlw	96
  7199  001B82  6E08               	movwf	?_writeEEPROM,c
  7200  001B84  0E00               	movlw	0
  7201  001B86  6A0A               	clrf	?_writeEEPROM+2,c
  7202  001B88  EC59  F01E         	call	_writeEEPROM	;wreg free
  7203                           
  7204                           ;main.c: 538: writeEEPROM( 0x43 + 30, 0 );
  7205  001B8C  6A09               	clrf	?_writeEEPROM+1,c
  7206  001B8E  0E61               	movlw	97
  7207  001B90  6E08               	movwf	?_writeEEPROM,c
  7208  001B92  0E00               	movlw	0
  7209  001B94  6A0A               	clrf	?_writeEEPROM+2,c
  7210  001B96  EC59  F01E         	call	_writeEEPROM	;wreg free
  7211                           
  7212                           ;main.c: 539: writeEEPROM( 0x43 + 31, 0 );
  7213  001B9A  6A09               	clrf	?_writeEEPROM+1,c
  7214  001B9C  0E62               	movlw	98
  7215  001B9E  6E08               	movwf	?_writeEEPROM,c
  7216  001BA0  0E00               	movlw	0
  7217  001BA2  6A0A               	clrf	?_writeEEPROM+2,c
  7218  001BA4  EC59  F01E         	call	_writeEEPROM	;wreg free
  7219                           
  7220                           ;main.c: 540: writeEEPROM( 0x43 + 32, 0 );
  7221  001BA8  6A09               	clrf	?_writeEEPROM+1,c
  7222  001BAA  0E63               	movlw	99
  7223  001BAC  6E08               	movwf	?_writeEEPROM,c
  7224  001BAE  0E00               	movlw	0
  7225  001BB0  6A0A               	clrf	?_writeEEPROM+2,c
  7226  001BB2  EC59  F01E         	call	_writeEEPROM	;wreg free
  7227                           
  7228                           ;main.c: 541: writeEEPROM( 0x43 + 33, 0 );
  7229  001BB6  6A09               	clrf	?_writeEEPROM+1,c
  7230  001BB8  0E64               	movlw	100
  7231  001BBA  6E08               	movwf	?_writeEEPROM,c
  7232  001BBC  0E00               	movlw	0
  7233  001BBE  6A0A               	clrf	?_writeEEPROM+2,c
  7234  001BC0  EC59  F01E         	call	_writeEEPROM	;wreg free
  7235                           
  7236                           ;main.c: 543: writeEEPROM( 0x43 + 34, 0 );
  7237  001BC4  6A09               	clrf	?_writeEEPROM+1,c
  7238  001BC6  0E65               	movlw	101
  7239  001BC8  6E08               	movwf	?_writeEEPROM,c
  7240  001BCA  0E00               	movlw	0
  7241  001BCC  6A0A               	clrf	?_writeEEPROM+2,c
  7242  001BCE  EC59  F01E         	call	_writeEEPROM	;wreg free
  7243                           
  7244                           ;main.c: 544: writeEEPROM( 0x43 + 35, 0 );
  7245  001BD2  6A09               	clrf	?_writeEEPROM+1,c
  7246  001BD4  0E66               	movlw	102
  7247  001BD6  6E08               	movwf	?_writeEEPROM,c
  7248  001BD8  0E00               	movlw	0
  7249  001BDA  6A0A               	clrf	?_writeEEPROM+2,c
  7250  001BDC  EC59  F01E         	call	_writeEEPROM	;wreg free
  7251                           
  7252                           ;main.c: 545: writeEEPROM( 0x43 + 36, 0 );
  7253  001BE0  6A09               	clrf	?_writeEEPROM+1,c
  7254  001BE2  0E67               	movlw	103
  7255  001BE4  6E08               	movwf	?_writeEEPROM,c
  7256  001BE6  0E00               	movlw	0
  7257  001BE8  6A0A               	clrf	?_writeEEPROM+2,c
  7258  001BEA  EC59  F01E         	call	_writeEEPROM	;wreg free
  7259                           
  7260                           ;main.c: 546: writeEEPROM( 0x43 + 37, 0 );
  7261  001BEE  6A09               	clrf	?_writeEEPROM+1,c
  7262  001BF0  0E68               	movlw	104
  7263  001BF2  6E08               	movwf	?_writeEEPROM,c
  7264  001BF4  0E00               	movlw	0
  7265  001BF6  6A0A               	clrf	?_writeEEPROM+2,c
  7266  001BF8  EC59  F01E         	call	_writeEEPROM	;wreg free
  7267                           
  7268                           ;main.c: 547: writeEEPROM( 0x43 + 38, 0 );
  7269  001BFC  6A09               	clrf	?_writeEEPROM+1,c
  7270  001BFE  0E69               	movlw	105
  7271  001C00  6E08               	movwf	?_writeEEPROM,c
  7272  001C02  0E00               	movlw	0
  7273  001C04  6A0A               	clrf	?_writeEEPROM+2,c
  7274  001C06  EC59  F01E         	call	_writeEEPROM	;wreg free
  7275                           
  7276                           ;main.c: 548: writeEEPROM( 0x43 + 39, 0 );
  7277  001C0A  6A09               	clrf	?_writeEEPROM+1,c
  7278  001C0C  0E6A               	movlw	106
  7279  001C0E  6E08               	movwf	?_writeEEPROM,c
  7280  001C10  0E00               	movlw	0
  7281  001C12  6A0A               	clrf	?_writeEEPROM+2,c
  7282  001C14  EC59  F01E         	call	_writeEEPROM	;wreg free
  7283                           
  7284                           ;main.c: 549: writeEEPROM( 0x43 + 40, 0 );
  7285  001C18  6A09               	clrf	?_writeEEPROM+1,c
  7286  001C1A  0E6B               	movlw	107
  7287  001C1C  6E08               	movwf	?_writeEEPROM,c
  7288  001C1E  0E00               	movlw	0
  7289  001C20  6A0A               	clrf	?_writeEEPROM+2,c
  7290  001C22  EC59  F01E         	call	_writeEEPROM	;wreg free
  7291                           
  7292                           ;main.c: 550: writeEEPROM( 0x43 + 41, 0 );
  7293  001C26  6A09               	clrf	?_writeEEPROM+1,c
  7294  001C28  0E6C               	movlw	108
  7295  001C2A  6E08               	movwf	?_writeEEPROM,c
  7296  001C2C  0E00               	movlw	0
  7297  001C2E  6A0A               	clrf	?_writeEEPROM+2,c
  7298  001C30  EC59  F01E         	call	_writeEEPROM	;wreg free
  7299                           
  7300                           ;main.c: 551: writeEEPROM( 0x43 + 42, 0 );
  7301  001C34  6A09               	clrf	?_writeEEPROM+1,c
  7302  001C36  0E6D               	movlw	109
  7303  001C38  6E08               	movwf	?_writeEEPROM,c
  7304  001C3A  0E00               	movlw	0
  7305  001C3C  6A0A               	clrf	?_writeEEPROM+2,c
  7306  001C3E  EC59  F01E         	call	_writeEEPROM	;wreg free
  7307                           
  7308                           ;main.c: 552: writeEEPROM( 0x43 + 43, 0 );
  7309  001C42  6A09               	clrf	?_writeEEPROM+1,c
  7310  001C44  0E6E               	movlw	110
  7311  001C46  6E08               	movwf	?_writeEEPROM,c
  7312  001C48  0E00               	movlw	0
  7313  001C4A  6A0A               	clrf	?_writeEEPROM+2,c
  7314  001C4C  EC59  F01E         	call	_writeEEPROM	;wreg free
  7315                           
  7316                           ;main.c: 553: writeEEPROM( 0x43 + 44, 0 );
  7317  001C50  6A09               	clrf	?_writeEEPROM+1,c
  7318  001C52  0E6F               	movlw	111
  7319  001C54  6E08               	movwf	?_writeEEPROM,c
  7320  001C56  0E00               	movlw	0
  7321  001C58  6A0A               	clrf	?_writeEEPROM+2,c
  7322  001C5A  EC59  F01E         	call	_writeEEPROM	;wreg free
  7323                           
  7324                           ;main.c: 554: writeEEPROM( 0x43 + 45, 0 );
  7325  001C5E  6A09               	clrf	?_writeEEPROM+1,c
  7326  001C60  0E70               	movlw	112
  7327  001C62  6E08               	movwf	?_writeEEPROM,c
  7328  001C64  0E00               	movlw	0
  7329  001C66  6A0A               	clrf	?_writeEEPROM+2,c
  7330  001C68  EC59  F01E         	call	_writeEEPROM	;wreg free
  7331                           
  7332                           ;main.c: 555: writeEEPROM( 0x43 + 46, 0 );
  7333  001C6C  6A09               	clrf	?_writeEEPROM+1,c
  7334  001C6E  0E71               	movlw	113
  7335  001C70  6E08               	movwf	?_writeEEPROM,c
  7336  001C72  0E00               	movlw	0
  7337  001C74  6A0A               	clrf	?_writeEEPROM+2,c
  7338  001C76  EC59  F01E         	call	_writeEEPROM	;wreg free
  7339                           
  7340                           ;main.c: 556: writeEEPROM( 0x43 + 47, 0 );
  7341  001C7A  6A09               	clrf	?_writeEEPROM+1,c
  7342  001C7C  0E72               	movlw	114
  7343  001C7E  6E08               	movwf	?_writeEEPROM,c
  7344  001C80  0E00               	movlw	0
  7345  001C82  6A0A               	clrf	?_writeEEPROM+2,c
  7346  001C84  EC59  F01E         	call	_writeEEPROM	;wreg free
  7347                           
  7348                           ;main.c: 557: writeEEPROM( 0x43 + 48, 0 );
  7349  001C88  6A09               	clrf	?_writeEEPROM+1,c
  7350  001C8A  0E73               	movlw	115
  7351  001C8C  6E08               	movwf	?_writeEEPROM,c
  7352  001C8E  0E00               	movlw	0
  7353  001C90  6A0A               	clrf	?_writeEEPROM+2,c
  7354  001C92  EC59  F01E         	call	_writeEEPROM	;wreg free
  7355                           
  7356                           ;main.c: 558: writeEEPROM( 0x43 + 49, 0 );
  7357  001C96  6A09               	clrf	?_writeEEPROM+1,c
  7358  001C98  0E74               	movlw	116
  7359  001C9A  6E08               	movwf	?_writeEEPROM,c
  7360  001C9C  0E00               	movlw	0
  7361  001C9E  6A0A               	clrf	?_writeEEPROM+2,c
  7362  001CA0  EC59  F01E         	call	_writeEEPROM	;wreg free
  7363                           
  7364                           ;main.c: 560: writeEEPROM( 0x43 + 50, 0 );
  7365  001CA4  6A09               	clrf	?_writeEEPROM+1,c
  7366  001CA6  0E75               	movlw	117
  7367  001CA8  6E08               	movwf	?_writeEEPROM,c
  7368  001CAA  0E00               	movlw	0
  7369  001CAC  6A0A               	clrf	?_writeEEPROM+2,c
  7370  001CAE  EC59  F01E         	call	_writeEEPROM	;wreg free
  7371                           
  7372                           ;main.c: 561: writeEEPROM( 0x43 + 51, 0 );
  7373  001CB2  6A09               	clrf	?_writeEEPROM+1,c
  7374  001CB4  0E76               	movlw	118
  7375  001CB6  6E08               	movwf	?_writeEEPROM,c
  7376  001CB8  0E00               	movlw	0
  7377  001CBA  6A0A               	clrf	?_writeEEPROM+2,c
  7378  001CBC  EC59  F01E         	call	_writeEEPROM	;wreg free
  7379                           
  7380                           ;main.c: 562: writeEEPROM( 0x43 + 52, 0 );
  7381  001CC0  6A09               	clrf	?_writeEEPROM+1,c
  7382  001CC2  0E77               	movlw	119
  7383  001CC4  6E08               	movwf	?_writeEEPROM,c
  7384  001CC6  0E00               	movlw	0
  7385  001CC8  6A0A               	clrf	?_writeEEPROM+2,c
  7386  001CCA  EC59  F01E         	call	_writeEEPROM	;wreg free
  7387                           
  7388                           ;main.c: 563: writeEEPROM( 0x43 + 53, 0 );
  7389  001CCE  6A09               	clrf	?_writeEEPROM+1,c
  7390  001CD0  0E78               	movlw	120
  7391  001CD2  6E08               	movwf	?_writeEEPROM,c
  7392  001CD4  0E00               	movlw	0
  7393  001CD6  6A0A               	clrf	?_writeEEPROM+2,c
  7394  001CD8  EC59  F01E         	call	_writeEEPROM	;wreg free
  7395                           
  7396                           ;main.c: 564: writeEEPROM( 0x43 + 54, 0 );
  7397  001CDC  6A09               	clrf	?_writeEEPROM+1,c
  7398  001CDE  0E79               	movlw	121
  7399  001CE0  6E08               	movwf	?_writeEEPROM,c
  7400  001CE2  0E00               	movlw	0
  7401  001CE4  6A0A               	clrf	?_writeEEPROM+2,c
  7402  001CE6  EC59  F01E         	call	_writeEEPROM	;wreg free
  7403                           
  7404                           ;main.c: 565: writeEEPROM( 0x43 + 55, 0 );
  7405  001CEA  6A09               	clrf	?_writeEEPROM+1,c
  7406  001CEC  0E7A               	movlw	122
  7407  001CEE  6E08               	movwf	?_writeEEPROM,c
  7408  001CF0  0E00               	movlw	0
  7409  001CF2  6A0A               	clrf	?_writeEEPROM+2,c
  7410  001CF4  EC59  F01E         	call	_writeEEPROM	;wreg free
  7411                           
  7412                           ;main.c: 566: writeEEPROM( 0x43 + 56, 0 );
  7413  001CF8  6A09               	clrf	?_writeEEPROM+1,c
  7414  001CFA  0E7B               	movlw	123
  7415  001CFC  6E08               	movwf	?_writeEEPROM,c
  7416  001CFE  0E00               	movlw	0
  7417  001D00  6A0A               	clrf	?_writeEEPROM+2,c
  7418  001D02  EC59  F01E         	call	_writeEEPROM	;wreg free
  7419                           
  7420                           ;main.c: 567: writeEEPROM( 0x43 + 57, 0 );
  7421  001D06  6A09               	clrf	?_writeEEPROM+1,c
  7422  001D08  0E7C               	movlw	124
  7423  001D0A  6E08               	movwf	?_writeEEPROM,c
  7424  001D0C  0E00               	movlw	0
  7425  001D0E  6A0A               	clrf	?_writeEEPROM+2,c
  7426  001D10  EC59  F01E         	call	_writeEEPROM	;wreg free
  7427                           
  7428                           ;main.c: 568: writeEEPROM( 0x43 + 58, 0 );
  7429  001D14  6A09               	clrf	?_writeEEPROM+1,c
  7430  001D16  0E7D               	movlw	125
  7431  001D18  6E08               	movwf	?_writeEEPROM,c
  7432  001D1A  0E00               	movlw	0
  7433  001D1C  6A0A               	clrf	?_writeEEPROM+2,c
  7434  001D1E  EC59  F01E         	call	_writeEEPROM	;wreg free
  7435                           
  7436                           ;main.c: 569: writeEEPROM( 0x43 + 59, 0 );
  7437  001D22  6A09               	clrf	?_writeEEPROM+1,c
  7438  001D24  0E7E               	movlw	126
  7439  001D26  6E08               	movwf	?_writeEEPROM,c
  7440  001D28  0E00               	movlw	0
  7441  001D2A  6A0A               	clrf	?_writeEEPROM+2,c
  7442  001D2C  EC59  F01E         	call	_writeEEPROM	;wreg free
  7443                           
  7444                           ;main.c: 570: writeEEPROM( 0x43 + 60, 0 );
  7445  001D30  6A09               	clrf	?_writeEEPROM+1,c
  7446  001D32  0E7F               	movlw	127
  7447  001D34  6E08               	movwf	?_writeEEPROM,c
  7448  001D36  0E00               	movlw	0
  7449  001D38  6A0A               	clrf	?_writeEEPROM+2,c
  7450  001D3A  EC59  F01E         	call	_writeEEPROM	;wreg free
  7451                           
  7452                           ;main.c: 571: writeEEPROM( 0x43 + 61, 0 );
  7453  001D3E  6A09               	clrf	?_writeEEPROM+1,c
  7454  001D40  0E80               	movlw	128
  7455  001D42  6E08               	movwf	?_writeEEPROM,c
  7456  001D44  0E00               	movlw	0
  7457  001D46  6A0A               	clrf	?_writeEEPROM+2,c
  7458  001D48  EC59  F01E         	call	_writeEEPROM	;wreg free
  7459                           
  7460                           ;main.c: 572: writeEEPROM( 0x43 + 62, 0 );
  7461  001D4C  6A09               	clrf	?_writeEEPROM+1,c
  7462  001D4E  0E81               	movlw	129
  7463  001D50  6E08               	movwf	?_writeEEPROM,c
  7464  001D52  0E00               	movlw	0
  7465  001D54  6A0A               	clrf	?_writeEEPROM+2,c
  7466  001D56  EC59  F01E         	call	_writeEEPROM	;wreg free
  7467                           
  7468                           ;main.c: 573: writeEEPROM( 0x43 + 63, 0 );
  7469  001D5A  6A09               	clrf	?_writeEEPROM+1,c
  7470  001D5C  0E82               	movlw	130
  7471  001D5E  6E08               	movwf	?_writeEEPROM,c
  7472  001D60  0E00               	movlw	0
  7473  001D62  6A0A               	clrf	?_writeEEPROM+2,c
  7474  001D64  EC59  F01E         	call	_writeEEPROM	;wreg free
  7475                           
  7476                           ;main.c: 574: writeEEPROM( 0x43 + 64, 0 );
  7477  001D68  6A09               	clrf	?_writeEEPROM+1,c
  7478  001D6A  0E83               	movlw	131
  7479  001D6C  6E08               	movwf	?_writeEEPROM,c
  7480  001D6E  0E00               	movlw	0
  7481  001D70  6A0A               	clrf	?_writeEEPROM+2,c
  7482  001D72  EC59  F01E         	call	_writeEEPROM	;wreg free
  7483                           
  7484                           ;main.c: 575: writeEEPROM( 0x43 + 65, 0 );
  7485  001D76  6A09               	clrf	?_writeEEPROM+1,c
  7486  001D78  0E84               	movlw	132
  7487  001D7A  6E08               	movwf	?_writeEEPROM,c
  7488  001D7C  0E00               	movlw	0
  7489  001D7E  6A0A               	clrf	?_writeEEPROM+2,c
  7490  001D80  EC59  F01E         	call	_writeEEPROM	;wreg free
  7491                           
  7492                           ;main.c: 579: for ( i = 0; i < 7; i++ ) {
  7493  001D84  6A0D               	clrf	init_app_eeprom@i,c
  7494  001D86                     l185:
  7495                           
  7496                           ;main.c: 580: for ( j = 0; j < 8; j++ ) {
  7497  001D86  6A0E               	clrf	init_app_eeprom@j,c
  7498  001D88                     l4701:
  7499                           
  7500                           ;main.c: 581: writeEEPROM( 0x43 + 72 + i * 8 + j, 0 );
  7501  001D88  500E               	movf	init_app_eeprom@j,w,c
  7502  001D8A  C00D  F00B         	movff	init_app_eeprom@i,??_init_app_eeprom
  7503  001D8E  6A0C               	clrf	(??_init_app_eeprom+1)& (0+255),c
  7504  001D90  90D8               	bcf	status,0,c
  7505  001D92  360B               	rlcf	??_init_app_eeprom,f,c
  7506  001D94  360C               	rlcf	??_init_app_eeprom+1,f,c
  7507  001D96  90D8               	bcf	status,0,c
  7508  001D98  360B               	rlcf	??_init_app_eeprom,f,c
  7509  001D9A  360C               	rlcf	??_init_app_eeprom+1,f,c
  7510  001D9C  90D8               	bcf	status,0,c
  7511  001D9E  360B               	rlcf	??_init_app_eeprom,f,c
  7512  001DA0  360C               	rlcf	??_init_app_eeprom+1,f,c
  7513  001DA2  260B               	addwf	??_init_app_eeprom,f,c
  7514  001DA4  0E00               	movlw	0
  7515  001DA6  220C               	addwfc	??_init_app_eeprom+1,f,c
  7516  001DA8  0E8B               	movlw	139
  7517  001DAA  240B               	addwf	??_init_app_eeprom,w,c
  7518  001DAC  6E08               	movwf	?_writeEEPROM,c
  7519  001DAE  0E00               	movlw	0
  7520  001DB0  200C               	addwfc	??_init_app_eeprom+1,w,c
  7521  001DB2  6E09               	movwf	?_writeEEPROM+1,c
  7522  001DB4  0E00               	movlw	0
  7523  001DB6  6A0A               	clrf	?_writeEEPROM+2,c
  7524  001DB8  EC59  F01E         	call	_writeEEPROM	;wreg free
  7525  001DBC  2A0E               	incf	init_app_eeprom@j,f,c
  7526  001DBE  0E07               	movlw	7
  7527  001DC0  640E               	cpfsgt	init_app_eeprom@j,c
  7528  001DC2  D7E2               	goto	l4701
  7529  001DC4  2A0D               	incf	init_app_eeprom@i,f,c
  7530  001DC6  0E06               	movlw	6
  7531  001DC8  640D               	cpfsgt	init_app_eeprom@i,c
  7532  001DCA  D7DD               	goto	l185
  7533  001DCC  0C06               	retlw	6
  7534  001DCE                     __end_of_init_app_eeprom:
  7535                           	opt stack 0
  7536                           tblptru	equ	0xFF8
  7537                           prodh	equ	0xFF4
  7538                           prodl	equ	0xFF3
  7539                           postinc0	equ	0xFEE
  7540                           wreg	equ	0xFE8
  7541                           indf2	equ	0xFDF
  7542                           postinc2	equ	0xFDE
  7543                           postdec2	equ	0xFDD
  7544                           fsr2h	equ	0xFDA
  7545                           fsr2l	equ	0xFD9
  7546                           status	equ	0xFD8
  7547                           
  7548 ;; *************** function _vscp_getFamilyType *****************
  7549 ;; Defined at:
  7550 ;;		line 2463 in file "../main.c"
  7551 ;; Parameters:    Size  Location     Type
  7552 ;;		None
  7553 ;; Auto vars:     Size  Location     Type
  7554 ;;		None
  7555 ;; Return value:  Size  Location     Type
  7556 ;;                  4    7[COMRAM] unsigned long 
  7557 ;; Registers used:
  7558 ;;		None
  7559 ;; Tracked objects:
  7560 ;;		On entry : F/0
  7561 ;;		On exit  : F/0
  7562 ;;		Unchanged: F/0
  7563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7564 ;;      Params:         4       0       0       0       0       0       0
  7565 ;;      Locals:         0       0       0       0       0       0       0
  7566 ;;      Temps:          0       0       0       0       0       0       0
  7567 ;;      Totals:         4       0       0       0       0       0       0
  7568 ;;Total ram usage:        4 bytes
  7569 ;; Hardware stack levels used:    1
  7570 ;; Hardware stack levels required when called:    2
  7571 ;; This function calls:
  7572 ;;		Nothing
  7573 ;; This function is called by:
  7574 ;;		_vscp_writeStdReg
  7575 ;; This function uses a non-reentrant model
  7576 ;;
  7577                           
  7578                           	psect	text21
  7579  003F3A                     __ptext21:
  7580                           	opt stack 0
  7581  003F3A                     _vscp_getFamilyType:
  7582                           	opt stack 25
  7583                           
  7584                           ; BSR set to: 0
  7585                           ;main.c: 2464: return 0;
  7586                           
  7587                           ;incstack = 0
  7588                           ;incstack = 0
  7589  003F3A  6A08               	clrf	?_vscp_getFamilyType,c
  7590  003F3C  6A09               	clrf	?_vscp_getFamilyType+1,c
  7591  003F3E  6A0A               	clrf	?_vscp_getFamilyType+2,c
  7592  003F40  6A0B               	clrf	?_vscp_getFamilyType+3,c
  7593                           
  7594                           ; BSR set to: 0
  7595  003F42  0012               	return	
  7596  003F44                     __end_of_vscp_getFamilyType:
  7597                           	opt stack 0
  7598                           tblptru	equ	0xFF8
  7599                           prodh	equ	0xFF4
  7600                           prodl	equ	0xFF3
  7601                           postinc0	equ	0xFEE
  7602                           wreg	equ	0xFE8
  7603                           indf2	equ	0xFDF
  7604                           postinc2	equ	0xFDE
  7605                           postdec2	equ	0xFDD
  7606                           fsr2h	equ	0xFDA
  7607                           fsr2l	equ	0xFD9
  7608                           status	equ	0xFD8
  7609                           
  7610 ;; *************** function _vscp_getFamilyCode *****************
  7611 ;; Defined at:
  7612 ;;		line 2454 in file "../main.c"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;		None
  7615 ;; Auto vars:     Size  Location     Type
  7616 ;;		None
  7617 ;; Return value:  Size  Location     Type
  7618 ;;                  4    7[COMRAM] unsigned long 
  7619 ;; Registers used:
  7620 ;;		None
  7621 ;; Tracked objects:
  7622 ;;		On entry : F/0
  7623 ;;		On exit  : F/0
  7624 ;;		Unchanged: F/0
  7625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7626 ;;      Params:         4       0       0       0       0       0       0
  7627 ;;      Locals:         0       0       0       0       0       0       0
  7628 ;;      Temps:          0       0       0       0       0       0       0
  7629 ;;      Totals:         4       0       0       0       0       0       0
  7630 ;;Total ram usage:        4 bytes
  7631 ;; Hardware stack levels used:    1
  7632 ;; Hardware stack levels required when called:    2
  7633 ;; This function calls:
  7634 ;;		Nothing
  7635 ;; This function is called by:
  7636 ;;		_vscp_writeStdReg
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           	psect	text22
  7641  003F44                     __ptext22:
  7642                           	opt stack 0
  7643  003F44                     _vscp_getFamilyCode:
  7644                           	opt stack 25
  7645                           
  7646                           ; BSR set to: 0
  7647                           ;main.c: 2455: return 0L;
  7648                           
  7649                           ; BSR set to: 0
  7650                           ;incstack = 0
  7651                           ;incstack = 0
  7652  003F44  6A08               	clrf	?_vscp_getFamilyCode,c
  7653  003F46  6A09               	clrf	?_vscp_getFamilyCode+1,c
  7654  003F48  6A0A               	clrf	?_vscp_getFamilyCode+2,c
  7655  003F4A  6A0B               	clrf	?_vscp_getFamilyCode+3,c
  7656                           
  7657                           ; BSR set to: 0
  7658  003F4C  0012               	return	
  7659  003F4E                     __end_of_vscp_getFamilyCode:
  7660                           	opt stack 0
  7661                           tblptru	equ	0xFF8
  7662                           prodh	equ	0xFF4
  7663                           prodl	equ	0xFF3
  7664                           postinc0	equ	0xFEE
  7665                           wreg	equ	0xFE8
  7666                           indf2	equ	0xFDF
  7667                           postinc2	equ	0xFDE
  7668                           postdec2	equ	0xFDD
  7669                           fsr2h	equ	0xFDA
  7670                           fsr2l	equ	0xFD9
  7671                           status	equ	0xFD8
  7672                           
  7673 ;; *************** function _vscp_setUserID *****************
  7674 ;; Defined at:
  7675 ;;		line 2286 in file "../main.c"
  7676 ;; Parameters:    Size  Location     Type
  7677 ;;  idx             1    wreg     unsigned char 
  7678 ;;  data            1   10[COMRAM] unsigned char 
  7679 ;; Auto vars:     Size  Location     Type
  7680 ;;  idx             1   11[COMRAM] unsigned char 
  7681 ;; Return value:  Size  Location     Type
  7682 ;;		None               void
  7683 ;; Registers used:
  7684 ;;		wreg, status,2, status,0, cstack
  7685 ;; Tracked objects:
  7686 ;;		On entry : F/0
  7687 ;;		On exit  : 0/0
  7688 ;;		Unchanged: 0/0
  7689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7690 ;;      Params:         1       0       0       0       0       0       0
  7691 ;;      Locals:         1       0       0       0       0       0       0
  7692 ;;      Temps:          0       0       0       0       0       0       0
  7693 ;;      Totals:         2       0       0       0       0       0       0
  7694 ;;Total ram usage:        2 bytes
  7695 ;; Hardware stack levels used:    1
  7696 ;; Hardware stack levels required when called:    3
  7697 ;; This function calls:
  7698 ;;		_writeEEPROM
  7699 ;; This function is called by:
  7700 ;;		_vscp_writeStdReg
  7701 ;; This function uses a non-reentrant model
  7702 ;;
  7703                           
  7704                           	psect	text23
  7705  003E1E                     __ptext23:
  7706                           	opt stack 0
  7707  003E1E                     _vscp_setUserID:
  7708                           	opt stack 24
  7709                           
  7710                           ; BSR set to: 0
  7711                           ;incstack = 0
  7712                           ;incstack = 0
  7713                           ;vscp_setUserID@idx stored from wreg
  7714  003E1E  CFE8 F00C          	movff	wreg,vscp_setUserID@idx
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;main.c: 2287: writeEEPROM( idx + 0x06, data );
  7718  003E22  0E06               	movlw	6
  7719  003E24  240C               	addwf	vscp_setUserID@idx,w,c
  7720  003E26  6E08               	movwf	?_writeEEPROM,c
  7721  003E28  6A09               	clrf	?_writeEEPROM+1,c
  7722  003E2A  0E00               	movlw	0
  7723  003E2C  2209               	addwfc	?_writeEEPROM+1,f,c
  7724  003E2E  C00B  F00A         	movff	vscp_setUserID@data,?_writeEEPROM+2
  7725  003E32  EF59  F01E         	goto	_writeEEPROM	;wreg free
  7726  003E36                     __end_of_vscp_setUserID:
  7727                           	opt stack 0
  7728                           tblptru	equ	0xFF8
  7729                           prodh	equ	0xFF4
  7730                           prodl	equ	0xFF3
  7731                           postinc0	equ	0xFEE
  7732                           wreg	equ	0xFE8
  7733                           indf2	equ	0xFDF
  7734                           postinc2	equ	0xFDE
  7735                           postdec2	equ	0xFDD
  7736                           fsr2h	equ	0xFDA
  7737                           fsr2l	equ	0xFD9
  7738                           status	equ	0xFD8
  7739                           
  7740 ;; *************** function _vscp_setManufacturerId *****************
  7741 ;; Defined at:
  7742 ;;		line 820 in file "../main.c"
  7743 ;; Parameters:    Size  Location     Type
  7744 ;;  idx             1    wreg     unsigned char 
  7745 ;;  data            1   10[COMRAM] unsigned char 
  7746 ;; Auto vars:     Size  Location     Type
  7747 ;;  idx             1   11[COMRAM] unsigned char 
  7748 ;; Return value:  Size  Location     Type
  7749 ;;		None               void
  7750 ;; Registers used:
  7751 ;;		wreg, status,2, status,0, cstack
  7752 ;; Tracked objects:
  7753 ;;		On entry : F/0
  7754 ;;		On exit  : 0/0
  7755 ;;		Unchanged: 0/0
  7756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7757 ;;      Params:         1       0       0       0       0       0       0
  7758 ;;      Locals:         1       0       0       0       0       0       0
  7759 ;;      Temps:          0       0       0       0       0       0       0
  7760 ;;      Totals:         2       0       0       0       0       0       0
  7761 ;;Total ram usage:        2 bytes
  7762 ;; Hardware stack levels used:    1
  7763 ;; Hardware stack levels required when called:    3
  7764 ;; This function calls:
  7765 ;;		_writeEEPROM
  7766 ;; This function is called by:
  7767 ;;		_vscp_writeStdReg
  7768 ;; This function uses a non-reentrant model
  7769 ;;
  7770                           
  7771                           	psect	text24
  7772  003D64                     __ptext24:
  7773                           	opt stack 0
  7774  003D64                     _vscp_setManufacturerId:
  7775                           	opt stack 24
  7776                           
  7777                           ;incstack = 0
  7778                           ;incstack = 0
  7779                           ;vscp_setManufacturerId@idx stored from wreg
  7780  003D64  CFE8 F00C          	movff	wreg,vscp_setManufacturerId@idx
  7781                           
  7782                           ; BSR set to: 0
  7783                           ;main.c: 821: if ( idx>7 ) return;
  7784  003D68  0E07               	movlw	7
  7785  003D6A  640C               	cpfsgt	vscp_setManufacturerId@idx,c
  7786  003D6C  D001               	goto	l5635
  7787  003D6E  D00A               	goto	l251
  7788  003D70                     l5635:
  7789                           
  7790                           ; BSR set to: 0
  7791                           ;main.c: 822: writeEEPROM(0x0B + idx, data);
  7792  003D70  0E0B               	movlw	11
  7793  003D72  240C               	addwf	vscp_setManufacturerId@idx,w,c
  7794  003D74  6E08               	movwf	?_writeEEPROM,c
  7795  003D76  6A09               	clrf	?_writeEEPROM+1,c
  7796  003D78  0E00               	movlw	0
  7797  003D7A  2209               	addwfc	?_writeEEPROM+1,f,c
  7798  003D7C  C00B  F00A         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
  7799  003D80  EC59  F01E         	call	_writeEEPROM	;wreg free
  7800  003D84                     l251:
  7801  003D84  0012               	return	
  7802  003D86                     __end_of_vscp_setManufacturerId:
  7803                           	opt stack 0
  7804                           tblptru	equ	0xFF8
  7805                           prodh	equ	0xFF4
  7806                           prodl	equ	0xFF3
  7807                           postinc0	equ	0xFEE
  7808                           wreg	equ	0xFE8
  7809                           indf2	equ	0xFDF
  7810                           postinc2	equ	0xFDE
  7811                           postdec2	equ	0xFDD
  7812                           fsr2h	equ	0xFDA
  7813                           fsr2l	equ	0xFD9
  7814                           status	equ	0xFD8
  7815                           
  7816 ;; *************** function _vscp_setGUID *****************
  7817 ;; Defined at:
  7818 ;;		line 808 in file "../main.c"
  7819 ;; Parameters:    Size  Location     Type
  7820 ;;  idx             1    wreg     unsigned char 
  7821 ;;  data            1   10[COMRAM] unsigned char 
  7822 ;; Auto vars:     Size  Location     Type
  7823 ;;  idx             1   11[COMRAM] unsigned char 
  7824 ;; Return value:  Size  Location     Type
  7825 ;;		None               void
  7826 ;; Registers used:
  7827 ;;		wreg, status,2, status,0, cstack
  7828 ;; Tracked objects:
  7829 ;;		On entry : F/0
  7830 ;;		On exit  : 0/0
  7831 ;;		Unchanged: 0/0
  7832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7833 ;;      Params:         1       0       0       0       0       0       0
  7834 ;;      Locals:         1       0       0       0       0       0       0
  7835 ;;      Temps:          0       0       0       0       0       0       0
  7836 ;;      Totals:         2       0       0       0       0       0       0
  7837 ;;Total ram usage:        2 bytes
  7838 ;; Hardware stack levels used:    1
  7839 ;; Hardware stack levels required when called:    3
  7840 ;; This function calls:
  7841 ;;		_writeEEPROM
  7842 ;; This function is called by:
  7843 ;;		_vscp_writeStdReg
  7844 ;; This function uses a non-reentrant model
  7845 ;;
  7846                           
  7847                           	psect	text25
  7848  003D86                     __ptext25:
  7849                           	opt stack 0
  7850  003D86                     _vscp_setGUID:
  7851                           	opt stack 24
  7852                           
  7853                           ;incstack = 0
  7854                           ;incstack = 0
  7855                           ;vscp_setGUID@idx stored from wreg
  7856  003D86  CFE8 F00C          	movff	wreg,vscp_setGUID@idx
  7857                           
  7858                           ; BSR set to: 0
  7859                           ;main.c: 809: if ( idx>15 ) return;
  7860  003D8A  0E0F               	movlw	15
  7861  003D8C  640C               	cpfsgt	vscp_setGUID@idx,c
  7862  003D8E  D001               	goto	l5629
  7863  003D90  D00A               	goto	l247
  7864  003D92                     l5629:
  7865                           
  7866                           ; BSR set to: 0
  7867                           ;main.c: 810: writeEEPROM(0x13 + idx, data);
  7868  003D92  0E13               	movlw	19
  7869  003D94  240C               	addwf	vscp_setGUID@idx,w,c
  7870  003D96  6E08               	movwf	?_writeEEPROM,c
  7871  003D98  6A09               	clrf	?_writeEEPROM+1,c
  7872  003D9A  0E00               	movlw	0
  7873  003D9C  2209               	addwfc	?_writeEEPROM+1,f,c
  7874  003D9E  C00B  F00A         	movff	vscp_setGUID@data,?_writeEEPROM+2
  7875  003DA2  EC59  F01E         	call	_writeEEPROM	;wreg free
  7876  003DA6                     l247:
  7877  003DA6  0012               	return	
  7878  003DA8                     __end_of_vscp_setGUID:
  7879                           	opt stack 0
  7880                           tblptru	equ	0xFF8
  7881                           prodh	equ	0xFF4
  7882                           prodl	equ	0xFF3
  7883                           postinc0	equ	0xFEE
  7884                           wreg	equ	0xFE8
  7885                           indf2	equ	0xFDF
  7886                           postinc2	equ	0xFDE
  7887                           postdec2	equ	0xFDD
  7888                           fsr2h	equ	0xFDA
  7889                           fsr2l	equ	0xFD9
  7890                           status	equ	0xFD8
  7891                           
  7892 ;; *************** function _vscp_writeAppReg *****************
  7893 ;; Defined at:
  7894 ;;		line 971 in file "../main.c"
  7895 ;; Parameters:    Size  Location     Type
  7896 ;;  reg             1    wreg     unsigned char 
  7897 ;;  val             1   80[COMRAM] unsigned char 
  7898 ;; Auto vars:     Size  Location     Type
  7899 ;;  reg             1   29[BANK0 ] unsigned char 
  7900 ;;  val             1   26[BANK0 ] unsigned char 
  7901 ;;  rv              1   28[BANK0 ] unsigned char 
  7902 ;;  bOn             1   27[BANK0 ] enum E15660
  7903 ;;  bInfoEvent      1   25[BANK0 ] enum E15660
  7904 ;; Return value:  Size  Location     Type
  7905 ;;                  1    wreg      unsigned char 
  7906 ;; Registers used:
  7907 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7908 ;; Tracked objects:
  7909 ;;		On entry : F/0
  7910 ;;		On exit  : F/0
  7911 ;;		Unchanged: 0/0
  7912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7913 ;;      Params:         1       0       0       0       0       0       0
  7914 ;;      Locals:         0       5       0       0       0       0       0
  7915 ;;      Temps:          0       3       0       0       0       0       0
  7916 ;;      Totals:         1       8       0       0       0       0       0
  7917 ;;Total ram usage:        9 bytes
  7918 ;; Hardware stack levels used:    1
  7919 ;; Hardware stack levels required when called:    7
  7920 ;; This function calls:
  7921 ;;		_writeEEPROM
  7922 ;;		_readEEPROM
  7923 ;;		_SendInformationEvent
  7924 ;;		_calculateSetFilterMask
  7925 ;; This function is called by:
  7926 ;;		_vscp_writeRegister
  7927 ;;		_vscp_handleProtocolEvent
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931                           	psect	text26
  7932  000622                     __ptext26:
  7933                           	opt stack 0
  7934  000622                     _vscp_writeAppReg:
  7935                           	opt stack 20
  7936                           
  7937                           ;incstack = 0
  7938                           ;incstack = 0
  7939                           ;vscp_writeAppReg@reg stored from wreg
  7940  000622  CFE8 F0D3          	movff	wreg,vscp_writeAppReg@reg
  7941                           
  7942                           ; BSR set to: 0
  7943                           ;main.c: 972: uint8_t rv;
  7944                           ;main.c: 973: BOOL bInfoEvent = 0;
  7945  000626  6BCF               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7946                           
  7947                           ;main.c: 974: BOOL bOn = 0;
  7948  000628  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  7949                           
  7950                           ; BSR set to: 0
  7951                           ;main.c: 976: rv = ~val;
  7952  00062A  1C51               	comf	vscp_writeAppReg@val,w,c
  7953  00062C  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  7954                           
  7955                           ; BSR set to: 0
  7956                           ;main.c: 979: if ( reg == 0 ) {
  7957  00062E  67D3               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  7958  000630  D00E               	goto	l9901
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;main.c: 980: writeEEPROM(0x43 + 0, val);
  7962  000632  6A09               	clrf	?_writeEEPROM+1,c
  7963  000634  0E43               	movlw	67
  7964  000636  6E08               	movwf	?_writeEEPROM,c
  7965  000638  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  7966  00063C  EC59  F01E         	call	_writeEEPROM	;wreg free
  7967                           
  7968                           ;main.c: 981: rv = readEEPROM(0x43 + 0);
  7969  000640  6A09               	clrf	?_readEEPROM+1,c
  7970  000642  0E43               	movlw	67
  7971  000644  6E08               	movwf	?_readEEPROM,c
  7972  000646  EC81  F01F         	call	_readEEPROM	;wreg free
  7973  00064A  EFAD  F007         	goto	L25
  7974  00064E                     l9901:
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;main.c: 983: else if ( reg == 1 ) {
  7978  00064E  05D3               	decf	vscp_writeAppReg@reg& (0+255),w,b
  7979  000650  E10E               	bnz	l9905
  7980                           
  7981                           ; BSR set to: 0
  7982                           ;main.c: 985: writeEEPROM(0x43 + 1, val);
  7983  000652  6A09               	clrf	?_writeEEPROM+1,c
  7984  000654  0E44               	movlw	68
  7985  000656  6E08               	movwf	?_writeEEPROM,c
  7986  000658  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  7987  00065C  EC59  F01E         	call	_writeEEPROM	;wreg free
  7988                           
  7989                           ;main.c: 986: rv = readEEPROM(0x43 + 1);
  7990  000660  6A09               	clrf	?_readEEPROM+1,c
  7991  000662  0E44               	movlw	68
  7992  000664  6E08               	movwf	?_readEEPROM,c
  7993  000666  EC81  F01F         	call	_readEEPROM	;wreg free
  7994  00066A  EFAD  F007         	goto	L25
  7995  00066E                     l9905:
  7996                           
  7997                           ; BSR set to: 0
  7998                           ;main.c: 989: else if ( (reg >= 2) && (reg <= 9) ) {
  7999  00066E  0E01               	movlw	1
  8000  000670  65D3               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8001  000672  D182               	goto	l10057
  8002                           
  8003                           ; BSR set to: 0
  8004  000674  0E0A               	movlw	10
  8005  000676  61D3               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8006  000678  D17F               	goto	l10057
  8007                           
  8008                           ; BSR set to: 0
  8009                           ;main.c: 991: if ( readEEPROM( 0x43 +
  8010                           ;main.c: 992: 10 + reg - 2 ) &
  8011                           ;main.c: 993: 0x80 ) {
  8012  00067A  0E4B               	movlw	75
  8013  00067C  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8014  00067E  6E08               	movwf	?_readEEPROM,c
  8015  000680  6A09               	clrf	?_readEEPROM+1,c
  8016  000682  0E00               	movlw	0
  8017  000684  2209               	addwfc	?_readEEPROM+1,f,c
  8018  000686  EC81  F01F         	call	_readEEPROM	;wreg free
  8019  00068A  0100               	movlb	0	; () banked
  8020  00068C  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8021  00068E  BFCC               	btfsc	??_vscp_writeAppReg& (0+255),7,b
  8022  000690  D15E               	goto	l10055
  8023  000692  EFAF  F007         	goto	l10233
  8024  000696                     l9913:
  8025                           
  8026                           ; BSR set to: 0
  8027                           ;main.c: 1000: bInfoEvent = 1;
  8028  000696  0E01               	movlw	1
  8029  000698  6FCF               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8030                           
  8031                           ; BSR set to: 0
  8032                           ;main.c: 1002: if ( 1 == val ) {
  8033  00069A  0451               	decf	vscp_writeAppReg@val,w,c
  8034  00069C  E128               	bnz	l304
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;main.c: 1004: LATBbits.LATB4 = 1;
  8038  00069E  888A               	bsf	3978,4,c	;volatile
  8039                           
  8040                           ; BSR set to: 0
  8041                           ;main.c: 1005: rv = LATBbits.LATB4;
  8042  0006A0  0E00               	movlw	0
  8043  0006A2  B88A               	btfsc	3978,4,c	;volatile
  8044  0006A4  0E01               	movlw	1
  8045  0006A6  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8046                           
  8047                           ; BSR set to: 0
  8048                           ;main.c: 1006: bOn = 1;
  8049  0006A8  0E01               	movlw	1
  8050  0006AA  6FD1               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8051                           
  8052                           ; BSR set to: 0
  8053                           ;main.c: 1009: if ( readEEPROM( 0x43 + 10 ) & 0x04 ) {
  8054  0006AC  6A09               	clrf	?_readEEPROM+1,c
  8055  0006AE  0E4D               	movlw	77
  8056  0006B0  6E08               	movwf	?_readEEPROM,c
  8057  0006B2  EC81  F01F         	call	_readEEPROM	;wreg free
  8058  0006B6  0100               	movlb	0	; () banked
  8059  0006B8  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8060  0006BA  A5CC               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8061  0006BC  EFAF  F007         	goto	l10233
  8062  0006C0                     l9925:
  8063                           
  8064                           ; BSR set to: 0
  8065                           ;main.c: 1010: relay_protection_timer[ 0 ] =
  8066                           ;main.c: 1011: readEEPROM( 0x43 + 34 ) * 256 +
  8067                           ;main.c: 1012: readEEPROM( 0x43 + 35 );
  8068  0006C0  6A09               	clrf	?_readEEPROM+1,c
  8069  0006C2  0E66               	movlw	102
  8070  0006C4  6E08               	movwf	?_readEEPROM,c
  8071  0006C6  EC81  F01F         	call	_readEEPROM	;wreg free
  8072  0006CA  0100               	movlb	0	; () banked
  8073  0006CC  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8074  0006CE  6A09               	clrf	?_readEEPROM+1,c
  8075  0006D0  0E65               	movlw	101
  8076  0006D2  6E08               	movwf	?_readEEPROM,c
  8077  0006D4  EC81  F01F         	call	_readEEPROM	;wreg free
  8078  0006D8  0100               	movlb	0	; () banked
  8079  0006DA  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8080  0006DC  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8081  0006DE  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8082  0006E0  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8083  0006E2  6F60               	movwf	_relay_protection_timer& (0+255),b
  8084  0006E4  0E00               	movlw	0
  8085  0006E6  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8086  0006E8  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  8087  0006EA  EFAF  F007         	goto	l10233
  8088  0006EE                     l304:
  8089                           
  8090                           ; BSR set to: 0
  8091                           ;main.c: 1016: else if (0 == val) {
  8092  0006EE  6651               	tstfsz	vscp_writeAppReg@val,c
  8093  0006F0  EFAF  F007         	goto	l10233
  8094                           
  8095                           ; BSR set to: 0
  8096                           ;main.c: 1017: LATBbits.LATB4 = 0;
  8097  0006F4  988A               	bcf	3978,4,c	;volatile
  8098                           
  8099                           ; BSR set to: 0
  8100                           ;main.c: 1018: rv = LATBbits.LATB4;
  8101  0006F6  0E00               	movlw	0
  8102  0006F8  B88A               	btfsc	3978,4,c	;volatile
  8103  0006FA  0E01               	movlw	1
  8104  0006FC  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8105  0006FE                     l9931:
  8106                           
  8107                           ; BSR set to: 0
  8108                           ;main.c: 1019: bOn = 0;
  8109  0006FE  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8110  000700  EFAF  F007         	goto	l10233
  8111  000704                     l9933:
  8112                           
  8113                           ; BSR set to: 0
  8114                           ;main.c: 1026: bInfoEvent = 1;
  8115  000704  0E01               	movlw	1
  8116  000706  6FCF               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8117                           
  8118                           ; BSR set to: 0
  8119                           ;main.c: 1028: if (1 == val) {
  8120  000708  0451               	decf	vscp_writeAppReg@val,w,c
  8121  00070A  E11E               	bnz	l310
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;main.c: 1030: LATBbits.LATB1 = 1;
  8125  00070C  828A               	bsf	3978,1,c	;volatile
  8126                           
  8127                           ; BSR set to: 0
  8128                           ;main.c: 1031: rv = LATBbits.LATB1;
  8129  00070E  0E00               	movlw	0
  8130  000710  B28A               	btfsc	3978,1,c	;volatile
  8131  000712  0E01               	movlw	1
  8132  000714  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;main.c: 1032: bOn = 1;
  8136  000716  0E01               	movlw	1
  8137  000718  6FD1               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8138                           
  8139                           ; BSR set to: 0
  8140                           ;main.c: 1034: if (readEEPROM(0x43 + 11) & 0x04) {
  8141  00071A  6A09               	clrf	?_readEEPROM+1,c
  8142  00071C  0E4E               	movlw	78
  8143  00071E  6E08               	movwf	?_readEEPROM,c
  8144  000720  EC81  F01F         	call	_readEEPROM	;wreg free
  8145  000724  0100               	movlb	0	; () banked
  8146  000726  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8147  000728  A5CC               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8148  00072A  EFAF  F007         	goto	l10233
  8149  00072E                     l9945:
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;main.c: 1035: relay_protection_timer[ 1 ] =
  8153                           ;main.c: 1036: readEEPROM(0x43 + 36) * 256 +
  8154                           ;main.c: 1037: readEEPROM(0x43 + 37);
  8155  00072E  6A09               	clrf	?_readEEPROM+1,c
  8156  000730  0E68               	movlw	104
  8157  000732  6E08               	movwf	?_readEEPROM,c
  8158  000734  EC81  F01F         	call	_readEEPROM	;wreg free
  8159  000738  0100               	movlb	0	; () banked
  8160  00073A  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8161  00073C  6A09               	clrf	?_readEEPROM+1,c
  8162  00073E  0E67               	movlw	103
  8163  000740  6E08               	movwf	?_readEEPROM,c
  8164  000742  EC81  F01F         	call	_readEEPROM	;wreg free
  8165  000746  D18E               	goto	L26
  8166  000748                     l310:
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;main.c: 1041: else if (0 == val) {
  8170  000748  6651               	tstfsz	vscp_writeAppReg@val,c
  8171  00074A  EFAF  F007         	goto	l10233
  8172                           
  8173                           ; BSR set to: 0
  8174                           ;main.c: 1042: LATBbits.LATB1 = 0;
  8175  00074E  928A               	bcf	3978,1,c	;volatile
  8176                           
  8177                           ; BSR set to: 0
  8178                           ;main.c: 1043: rv = LATBbits.LATB1;
  8179  000750  0E00               	movlw	0
  8180  000752  B28A               	btfsc	3978,1,c	;volatile
  8181  000754  0E01               	movlw	1
  8182  000756  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8183  000758  D7D2               	goto	l9931
  8184  00075A                     l9953:
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;main.c: 1051: bInfoEvent = 1;
  8188  00075A  0E01               	movlw	1
  8189  00075C  6FCF               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8190                           
  8191                           ; BSR set to: 0
  8192                           ;main.c: 1053: if (1 == val) {
  8193  00075E  0451               	decf	vscp_writeAppReg@val,w,c
  8194  000760  E126               	bnz	l315
  8195                           
  8196                           ; BSR set to: 0
  8197                           ;main.c: 1055: LATBbits.LATB0 = 1;
  8198  000762  808A               	bsf	3978,0,c	;volatile
  8199                           
  8200                           ; BSR set to: 0
  8201                           ;main.c: 1056: rv = LATBbits.LATB0;
  8202  000764  0E00               	movlw	0
  8203  000766  B08A               	btfsc	3978,0,c	;volatile
  8204  000768  0E01               	movlw	1
  8205  00076A  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8206                           
  8207                           ; BSR set to: 0
  8208                           ;main.c: 1057: bOn = 1;
  8209  00076C  0E01               	movlw	1
  8210  00076E  6FD1               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8211                           
  8212                           ; BSR set to: 0
  8213                           ;main.c: 1059: if ( readEEPROM(0x43 + 12) & 0x04) {
  8214  000770  6A09               	clrf	?_readEEPROM+1,c
  8215  000772  0E4F               	movlw	79
  8216  000774  6E08               	movwf	?_readEEPROM,c
  8217  000776  EC81  F01F         	call	_readEEPROM	;wreg free
  8218  00077A  0100               	movlb	0	; () banked
  8219  00077C  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8220  00077E  A5CC               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8221  000780  D3EE               	goto	l10233
  8222  000782                     l9965:
  8223                           
  8224                           ; BSR set to: 0
  8225                           ;main.c: 1060: relay_protection_timer[ 2 ] =
  8226                           ;main.c: 1061: readEEPROM(0x43 + 38) * 256 +
  8227                           ;main.c: 1062: readEEPROM(0x43 + 39);
  8228  000782  6A09               	clrf	?_readEEPROM+1,c
  8229  000784  0E6A               	movlw	106
  8230  000786  6E08               	movwf	?_readEEPROM,c
  8231  000788  EC81  F01F         	call	_readEEPROM	;wreg free
  8232  00078C  0100               	movlb	0	; () banked
  8233  00078E  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8234  000790  6A09               	clrf	?_readEEPROM+1,c
  8235  000792  0E69               	movlw	105
  8236  000794  6E08               	movwf	?_readEEPROM,c
  8237  000796  EC81  F01F         	call	_readEEPROM	;wreg free
  8238  00079A  0100               	movlb	0	; () banked
  8239  00079C  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8240  00079E  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8241  0007A0  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8242  0007A2  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8243  0007A4  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  8244  0007A6  0E00               	movlw	0
  8245  0007A8  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8246  0007AA  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  8247  0007AC  D3D8               	goto	l10233
  8248  0007AE                     l315:
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;main.c: 1066: else if (0 == val) {
  8252  0007AE  6651               	tstfsz	vscp_writeAppReg@val,c
  8253  0007B0  D3D6               	goto	l10233
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;main.c: 1067: LATBbits.LATB0 = 0;
  8257  0007B2  908A               	bcf	3978,0,c	;volatile
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;main.c: 1068: rv = LATBbits.LATB0;
  8261  0007B4  0E00               	movlw	0
  8262  0007B6  B08A               	btfsc	3978,0,c	;volatile
  8263  0007B8  0E01               	movlw	1
  8264  0007BA  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8265  0007BC  D7A0               	goto	l9931
  8266  0007BE                     l9973:
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;main.c: 1077: bInfoEvent = 1;
  8270  0007BE  0E01               	movlw	1
  8271  0007C0  6FCF               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8272                           
  8273                           ; BSR set to: 0
  8274                           ;main.c: 1079: if (1 == val) {
  8275  0007C2  0451               	decf	vscp_writeAppReg@val,w,c
  8276  0007C4  E126               	bnz	l320
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;main.c: 1081: LATCbits.LATC7 = 1;
  8280  0007C6  8E8B               	bsf	3979,7,c	;volatile
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;main.c: 1082: rv = LATCbits.LATC7;
  8284  0007C8  0E00               	movlw	0
  8285  0007CA  BE8B               	btfsc	3979,7,c	;volatile
  8286  0007CC  0E01               	movlw	1
  8287  0007CE  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8288                           
  8289                           ; BSR set to: 0
  8290                           ;main.c: 1083: bOn = 1;
  8291  0007D0  0E01               	movlw	1
  8292  0007D2  6FD1               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8293                           
  8294                           ; BSR set to: 0
  8295                           ;main.c: 1085: if (readEEPROM(0x43 + 13) & 0x04) {
  8296  0007D4  6A09               	clrf	?_readEEPROM+1,c
  8297  0007D6  0E50               	movlw	80
  8298  0007D8  6E08               	movwf	?_readEEPROM,c
  8299  0007DA  EC81  F01F         	call	_readEEPROM	;wreg free
  8300  0007DE  0100               	movlb	0	; () banked
  8301  0007E0  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8302  0007E2  A5CC               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8303  0007E4  D3BC               	goto	l10233
  8304  0007E6                     l9985:
  8305                           
  8306                           ; BSR set to: 0
  8307                           ;main.c: 1086: relay_protection_timer[ 3 ] =
  8308                           ;main.c: 1087: readEEPROM(0x43 + 40) * 256 +
  8309                           ;main.c: 1088: readEEPROM(0x43 + 41);
  8310  0007E6  6A09               	clrf	?_readEEPROM+1,c
  8311  0007E8  0E6C               	movlw	108
  8312  0007EA  6E08               	movwf	?_readEEPROM,c
  8313  0007EC  EC81  F01F         	call	_readEEPROM	;wreg free
  8314  0007F0  0100               	movlb	0	; () banked
  8315  0007F2  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8316  0007F4  6A09               	clrf	?_readEEPROM+1,c
  8317  0007F6  0E6B               	movlw	107
  8318  0007F8  6E08               	movwf	?_readEEPROM,c
  8319  0007FA  EC81  F01F         	call	_readEEPROM	;wreg free
  8320  0007FE  0100               	movlb	0	; () banked
  8321  000800  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8322  000802  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8323  000804  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8324  000806  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8325  000808  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  8326  00080A  0E00               	movlw	0
  8327  00080C  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8328  00080E  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  8329  000810  D3A6               	goto	l10233
  8330  000812                     l320:
  8331                           
  8332                           ; BSR set to: 0
  8333                           ;main.c: 1092: else if (0 == val) {
  8334  000812  6651               	tstfsz	vscp_writeAppReg@val,c
  8335  000814  D3A4               	goto	l10233
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;main.c: 1093: LATCbits.LATC7 = 0;
  8339  000816  9E8B               	bcf	3979,7,c	;volatile
  8340                           
  8341                           ; BSR set to: 0
  8342                           ;main.c: 1094: rv = LATCbits.LATC7;
  8343  000818  0E00               	movlw	0
  8344  00081A  BE8B               	btfsc	3979,7,c	;volatile
  8345  00081C  0E01               	movlw	1
  8346  00081E  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8347  000820  D76E               	goto	l9931
  8348  000822                     l9993:
  8349                           
  8350                           ; BSR set to: 0
  8351                           ;main.c: 1103: bInfoEvent = 1;
  8352  000822  0E01               	movlw	1
  8353  000824  6FCF               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;main.c: 1105: if (1 == val) {
  8357  000826  0451               	decf	vscp_writeAppReg@val,w,c
  8358  000828  E126               	bnz	l325
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;main.c: 1107: LATCbits.LATC6 = 1;
  8362  00082A  8C8B               	bsf	3979,6,c	;volatile
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;main.c: 1108: rv = LATCbits.LATC6;
  8366  00082C  0E00               	movlw	0
  8367  00082E  BC8B               	btfsc	3979,6,c	;volatile
  8368  000830  0E01               	movlw	1
  8369  000832  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;main.c: 1109: bOn = 1;
  8373  000834  0E01               	movlw	1
  8374  000836  6FD1               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;main.c: 1111: if (readEEPROM(0x43 + 14) & 0x04) {
  8378  000838  6A09               	clrf	?_readEEPROM+1,c
  8379  00083A  0E51               	movlw	81
  8380  00083C  6E08               	movwf	?_readEEPROM,c
  8381  00083E  EC81  F01F         	call	_readEEPROM	;wreg free
  8382  000842  0100               	movlb	0	; () banked
  8383  000844  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8384  000846  A5CC               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8385  000848  D38A               	goto	l10233
  8386  00084A                     l10005:
  8387                           
  8388                           ; BSR set to: 0
  8389                           ;main.c: 1112: relay_protection_timer[ 4 ] =
  8390                           ;main.c: 1113: readEEPROM(0x43 + 42) * 256 +
  8391                           ;main.c: 1114: readEEPROM(0x43 + 43);
  8392  00084A  6A09               	clrf	?_readEEPROM+1,c
  8393  00084C  0E6E               	movlw	110
  8394  00084E  6E08               	movwf	?_readEEPROM,c
  8395  000850  EC81  F01F         	call	_readEEPROM	;wreg free
  8396  000854  0100               	movlb	0	; () banked
  8397  000856  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8398  000858  6A09               	clrf	?_readEEPROM+1,c
  8399  00085A  0E6D               	movlw	109
  8400  00085C  6E08               	movwf	?_readEEPROM,c
  8401  00085E  EC81  F01F         	call	_readEEPROM	;wreg free
  8402  000862  0100               	movlb	0	; () banked
  8403  000864  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8404  000866  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8405  000868  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8406  00086A  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8407  00086C  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  8408  00086E  0E00               	movlw	0
  8409  000870  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8410  000872  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  8411  000874  D374               	goto	l10233
  8412  000876                     l325:
  8413                           
  8414                           ; BSR set to: 0
  8415                           ;main.c: 1118: else if (0 == val) {
  8416  000876  6651               	tstfsz	vscp_writeAppReg@val,c
  8417  000878  D372               	goto	l10233
  8418                           
  8419                           ; BSR set to: 0
  8420                           ;main.c: 1119: LATCbits.LATC6 = 0;
  8421  00087A  9C8B               	bcf	3979,6,c	;volatile
  8422                           
  8423                           ; BSR set to: 0
  8424                           ;main.c: 1120: rv = LATCbits.LATC6;
  8425  00087C  0E00               	movlw	0
  8426  00087E  BC8B               	btfsc	3979,6,c	;volatile
  8427  000880  0E01               	movlw	1
  8428  000882  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8429  000884  D73C               	goto	l9931
  8430  000886                     l10013:
  8431                           
  8432                           ; BSR set to: 0
  8433                           ;main.c: 1129: bInfoEvent = 1;
  8434  000886  0E01               	movlw	1
  8435  000888  6FCF               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8436                           
  8437                           ; BSR set to: 0
  8438                           ;main.c: 1131: if (1 == val) {
  8439  00088A  0451               	decf	vscp_writeAppReg@val,w,c
  8440  00088C  E126               	bnz	l330
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;main.c: 1133: LATCbits.LATC5 = 1;
  8444  00088E  8A8B               	bsf	3979,5,c	;volatile
  8445                           
  8446                           ; BSR set to: 0
  8447                           ;main.c: 1134: rv = LATCbits.LATC5;
  8448  000890  0E00               	movlw	0
  8449  000892  BA8B               	btfsc	3979,5,c	;volatile
  8450  000894  0E01               	movlw	1
  8451  000896  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;main.c: 1135: bOn = 1;
  8455  000898  0E01               	movlw	1
  8456  00089A  6FD1               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8457                           
  8458                           ; BSR set to: 0
  8459                           ;main.c: 1137: if (readEEPROM(0x43 + 15) & 0x04) {
  8460  00089C  6A09               	clrf	?_readEEPROM+1,c
  8461  00089E  0E52               	movlw	82
  8462  0008A0  6E08               	movwf	?_readEEPROM,c
  8463  0008A2  EC81  F01F         	call	_readEEPROM	;wreg free
  8464  0008A6  0100               	movlb	0	; () banked
  8465  0008A8  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8466  0008AA  A5CC               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8467  0008AC  D358               	goto	l10233
  8468  0008AE                     l10025:
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;main.c: 1138: relay_protection_timer[ 5 ] =
  8472                           ;main.c: 1139: readEEPROM(0x43 + 44) * 256 +
  8473                           ;main.c: 1140: readEEPROM(0x43 + 45);
  8474  0008AE  6A09               	clrf	?_readEEPROM+1,c
  8475  0008B0  0E70               	movlw	112
  8476  0008B2  6E08               	movwf	?_readEEPROM,c
  8477  0008B4  EC81  F01F         	call	_readEEPROM	;wreg free
  8478  0008B8  0100               	movlb	0	; () banked
  8479  0008BA  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8480  0008BC  6A09               	clrf	?_readEEPROM+1,c
  8481  0008BE  0E6F               	movlw	111
  8482  0008C0  6E08               	movwf	?_readEEPROM,c
  8483  0008C2  EC81  F01F         	call	_readEEPROM	;wreg free
  8484  0008C6  0100               	movlb	0	; () banked
  8485  0008C8  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8486  0008CA  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8487  0008CC  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8488  0008CE  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8489  0008D0  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  8490  0008D2  0E00               	movlw	0
  8491  0008D4  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8492  0008D6  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  8493  0008D8  D342               	goto	l10233
  8494  0008DA                     l330:
  8495                           
  8496                           ; BSR set to: 0
  8497                           ;main.c: 1144: else if (0 == val) {
  8498  0008DA  6651               	tstfsz	vscp_writeAppReg@val,c
  8499  0008DC  D340               	goto	l10233
  8500                           
  8501                           ; BSR set to: 0
  8502                           ;main.c: 1145: LATCbits.LATC5 = 0;
  8503  0008DE  9A8B               	bcf	3979,5,c	;volatile
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;main.c: 1146: rv = LATCbits.LATC5;
  8507  0008E0  0E00               	movlw	0
  8508  0008E2  BA8B               	btfsc	3979,5,c	;volatile
  8509  0008E4  0E01               	movlw	1
  8510  0008E6  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8511  0008E8  D70A               	goto	l9931
  8512  0008EA                     l10033:
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;main.c: 1154: bInfoEvent = 1;
  8516  0008EA  0E01               	movlw	1
  8517  0008EC  6FCF               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8518                           
  8519                           ; BSR set to: 0
  8520                           ;main.c: 1156: if (1 == val) {
  8521  0008EE  0451               	decf	vscp_writeAppReg@val,w,c
  8522  0008F0  E126               	bnz	l335
  8523                           
  8524                           ; BSR set to: 0
  8525                           ;main.c: 1158: LATCbits.LATC4 = 1;
  8526  0008F2  888B               	bsf	3979,4,c	;volatile
  8527                           
  8528                           ; BSR set to: 0
  8529                           ;main.c: 1159: rv = LATCbits.LATC4;
  8530  0008F4  0E00               	movlw	0
  8531  0008F6  B88B               	btfsc	3979,4,c	;volatile
  8532  0008F8  0E01               	movlw	1
  8533  0008FA  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8534                           
  8535                           ; BSR set to: 0
  8536                           ;main.c: 1160: bOn = 1;
  8537  0008FC  0E01               	movlw	1
  8538  0008FE  6FD1               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;main.c: 1162: if (readEEPROM(0x43 + 16) & 0x04) {
  8542  000900  6A09               	clrf	?_readEEPROM+1,c
  8543  000902  0E53               	movlw	83
  8544  000904  6E08               	movwf	?_readEEPROM,c
  8545  000906  EC81  F01F         	call	_readEEPROM	;wreg free
  8546  00090A  0100               	movlb	0	; () banked
  8547  00090C  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8548  00090E  A5CC               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8549  000910  D326               	goto	l10233
  8550  000912                     l10045:
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;main.c: 1163: relay_protection_timer[ 6 ] =
  8554                           ;main.c: 1164: readEEPROM(0x43 + 46) * 256 +
  8555                           ;main.c: 1165: readEEPROM(0x43 + 47);
  8556  000912  6A09               	clrf	?_readEEPROM+1,c
  8557  000914  0E72               	movlw	114
  8558  000916  6E08               	movwf	?_readEEPROM,c
  8559  000918  EC81  F01F         	call	_readEEPROM	;wreg free
  8560  00091C  0100               	movlb	0	; () banked
  8561  00091E  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8562  000920  6A09               	clrf	?_readEEPROM+1,c
  8563  000922  0E71               	movlw	113
  8564  000924  6E08               	movwf	?_readEEPROM,c
  8565  000926  EC81  F01F         	call	_readEEPROM	;wreg free
  8566  00092A  0100               	movlb	0	; () banked
  8567  00092C  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8568  00092E  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8569  000930  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8570  000932  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8571  000934  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  8572  000936  0E00               	movlw	0
  8573  000938  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8574  00093A  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  8575  00093C  D310               	goto	l10233
  8576  00093E                     l335:
  8577                           
  8578                           ; BSR set to: 0
  8579                           ;main.c: 1169: else if (0 == val) {
  8580  00093E  6651               	tstfsz	vscp_writeAppReg@val,c
  8581  000940  D30E               	goto	l10233
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;main.c: 1170: LATCbits.LATC4 = 0;
  8585  000942  988B               	bcf	3979,4,c	;volatile
  8586                           
  8587                           ; BSR set to: 0
  8588                           ;main.c: 1171: rv = LATCbits.LATC4;
  8589  000944  0E00               	movlw	0
  8590  000946  B88B               	btfsc	3979,4,c	;volatile
  8591  000948  0E01               	movlw	1
  8592  00094A  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8593  00094C  D6D8               	goto	l9931
  8594  00094E                     l10055:
  8595                           
  8596                           ; BSR set to: 0
  8597  00094E  51D3               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8598                           
  8599                           ; Switch size 1, requested type "speed"
  8600                           ; Number of cases is 7, Range of values is 2 to 8
  8601                           ; switch strategies available:
  8602                           ; Name         Instructions Cycles
  8603                           ; simple_byte           22    12 (average)
  8604                           ;	Chosen strategy is simple_byte
  8605  000950  0A02               	xorlw	2	; case 2
  8606  000952  E101 D6A0          	bz	l9913
  8607  000956  0A01               	xorlw	1	; case 3
  8608  000958  E101 D6D4          	bz	l9933
  8609  00095C  0A07               	xorlw	7	; case 4
  8610  00095E  E101 D6FC          	bz	l9953
  8611  000962  0A01               	xorlw	1	; case 5
  8612  000964  E101 D72B          	bz	l9973
  8613  000968  0A03               	xorlw	3	; case 6
  8614  00096A  E101 D75A          	bz	l9993
  8615  00096E  0A01               	xorlw	1	; case 7
  8616  000970  E08A               	bz	l10013
  8617  000972  0A0F               	xorlw	15	; case 8
  8618  000974  E0BA               	bz	l10033
  8619                           
  8620                           ; BSR set to: 0
  8621                           ;main.c: 1177: }
  8622                           ;main.c: 1178: }
  8623  000976  D2F3               	goto	l10233
  8624  000978                     l10057:
  8625                           
  8626                           ; BSR set to: 0
  8627                           ;main.c: 1181: else if ( (reg >= 10 ) &&
  8628                           ;main.c: 1182: (reg <= 17) ) {
  8629  000978  0E09               	movlw	9
  8630  00097A  65D3               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8631  00097C  D18C               	goto	l10165
  8632                           
  8633                           ; BSR set to: 0
  8634  00097E  0E12               	movlw	18
  8635  000980  61D3               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8636  000982  D189               	goto	l10165
  8637  000984  D173               	goto	l10163
  8638  000986                     l10063:
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;main.c: 1188: writeEEPROM( 0x43 + reg, val );
  8642  000986  0E43               	movlw	67
  8643  000988  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8644  00098A  6E08               	movwf	?_writeEEPROM,c
  8645  00098C  6A09               	clrf	?_writeEEPROM+1,c
  8646  00098E  0E00               	movlw	0
  8647  000990  2209               	addwfc	?_writeEEPROM+1,f,c
  8648  000992  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8649  000996  EC59  F01E         	call	_writeEEPROM	;wreg free
  8650                           
  8651                           ;main.c: 1189: rv = readEEPROM( 0x43 + reg );
  8652  00099A  0E43               	movlw	67
  8653  00099C  0100               	movlb	0	; () banked
  8654  00099E  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8655  0009A0  6E08               	movwf	?_readEEPROM,c
  8656  0009A2  6A09               	clrf	?_readEEPROM+1,c
  8657  0009A4  0E00               	movlw	0
  8658  0009A6  2209               	addwfc	?_readEEPROM+1,f,c
  8659  0009A8  EC81  F01F         	call	_readEEPROM	;wreg free
  8660  0009AC  0100               	movlb	0	; () banked
  8661  0009AE  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;main.c: 1191: if ( val & 0x01 ) {
  8665  0009B0  A051               	btfss	vscp_writeAppReg@val,0,c
  8666  0009B2  D018               	goto	l10073
  8667                           
  8668                           ; BSR set to: 0
  8669                           ;main.c: 1193: LATBbits.LATB4 = 0;
  8670  0009B4  988A               	bcf	3978,4,c	;volatile
  8671                           
  8672                           ;main.c: 1194: bOn = 0;
  8673  0009B6  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8674                           
  8675                           ; BSR set to: 0
  8676                           ;main.c: 1196: relay_pulse_flags |= 0x01;
  8677  0009B8  818F               	bsf	_relay_pulse_flags& (0+255),0,b
  8678                           
  8679                           ; BSR set to: 0
  8680                           ;main.c: 1197: relay_pulse_timer[ 0 ] =
  8681                           ;main.c: 1198: readEEPROM( 0x43 + 18 ) * 256 +
  8682                           ;main.c: 1199: readEEPROM( 0x43 + 19 );
  8683  0009BA  6A09               	clrf	?_readEEPROM+1,c
  8684  0009BC  0E56               	movlw	86
  8685  0009BE  6E08               	movwf	?_readEEPROM,c
  8686  0009C0  EC81  F01F         	call	_readEEPROM	;wreg free
  8687  0009C4  0100               	movlb	0	; () banked
  8688  0009C6  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8689  0009C8  6A09               	clrf	?_readEEPROM+1,c
  8690  0009CA  0E55               	movlw	85
  8691  0009CC  6E08               	movwf	?_readEEPROM,c
  8692  0009CE  EC81  F01F         	call	_readEEPROM	;wreg free
  8693  0009D2  0100               	movlb	0	; () banked
  8694  0009D4  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8695  0009D6  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8696  0009D8  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8697  0009DA  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8698  0009DC  6F70               	movwf	_relay_pulse_timer& (0+255),b
  8699  0009DE  0E00               	movlw	0
  8700  0009E0  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8701  0009E2  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  8702  0009E4                     l10073:
  8703                           
  8704                           ; BSR set to: 0
  8705                           ;main.c: 1200: }
  8706                           ;main.c: 1202: if ( val & 0x04 ) {
  8707  0009E4  B451               	btfsc	vscp_writeAppReg@val,2,c
  8708  0009E6  D66C               	goto	l9925
  8709  0009E8  D2BA               	goto	l10233
  8710  0009EA                     l10077:
  8711                           
  8712                           ; BSR set to: 0
  8713                           ;main.c: 1211: writeEEPROM( 0x43 + reg, val );
  8714  0009EA  0E43               	movlw	67
  8715  0009EC  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8716  0009EE  6E08               	movwf	?_writeEEPROM,c
  8717  0009F0  6A09               	clrf	?_writeEEPROM+1,c
  8718  0009F2  0E00               	movlw	0
  8719  0009F4  2209               	addwfc	?_writeEEPROM+1,f,c
  8720  0009F6  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8721  0009FA  EC59  F01E         	call	_writeEEPROM	;wreg free
  8722                           
  8723                           ;main.c: 1212: rv = readEEPROM( 0x43 + reg );
  8724  0009FE  0E43               	movlw	67
  8725  000A00  0100               	movlb	0	; () banked
  8726  000A02  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8727  000A04  6E08               	movwf	?_readEEPROM,c
  8728  000A06  6A09               	clrf	?_readEEPROM+1,c
  8729  000A08  0E00               	movlw	0
  8730  000A0A  2209               	addwfc	?_readEEPROM+1,f,c
  8731  000A0C  EC81  F01F         	call	_readEEPROM	;wreg free
  8732  000A10  0100               	movlb	0	; () banked
  8733  000A12  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8734                           
  8735                           ; BSR set to: 0
  8736                           ;main.c: 1214: if ( val & 0x01 ) {
  8737  000A14  A051               	btfss	vscp_writeAppReg@val,0,c
  8738  000A16  D018               	goto	l10087
  8739                           
  8740                           ; BSR set to: 0
  8741                           ;main.c: 1216: LATBbits.LATB1 = 0;
  8742  000A18  928A               	bcf	3978,1,c	;volatile
  8743                           
  8744                           ;main.c: 1217: bOn = 0;
  8745  000A1A  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8746                           
  8747                           ; BSR set to: 0
  8748                           ;main.c: 1219: relay_pulse_flags |= 0x02;
  8749  000A1C  838F               	bsf	_relay_pulse_flags& (0+255),1,b
  8750                           
  8751                           ; BSR set to: 0
  8752                           ;main.c: 1220: relay_pulse_timer[ 1 ] =
  8753                           ;main.c: 1221: readEEPROM( 0x43 + 18) * 256 +
  8754                           ;main.c: 1222: readEEPROM( 0x43 + 19);
  8755  000A1E  6A09               	clrf	?_readEEPROM+1,c
  8756  000A20  0E56               	movlw	86
  8757  000A22  6E08               	movwf	?_readEEPROM,c
  8758  000A24  EC81  F01F         	call	_readEEPROM	;wreg free
  8759  000A28  0100               	movlb	0	; () banked
  8760  000A2A  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8761  000A2C  6A09               	clrf	?_readEEPROM+1,c
  8762  000A2E  0E55               	movlw	85
  8763  000A30  6E08               	movwf	?_readEEPROM,c
  8764  000A32  EC81  F01F         	call	_readEEPROM	;wreg free
  8765  000A36  0100               	movlb	0	; () banked
  8766  000A38  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8767  000A3A  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8768  000A3C  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8769  000A3E  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8770  000A40  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  8771  000A42  0E00               	movlw	0
  8772  000A44  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8773  000A46  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  8774  000A48                     l10087:
  8775                           
  8776                           ; BSR set to: 0
  8777                           ;main.c: 1223: }
  8778                           ;main.c: 1225: if ( val & 0x04 ) {
  8779  000A48  A451               	btfss	vscp_writeAppReg@val,2,c
  8780  000A4A  D289               	goto	l10233
  8781                           
  8782                           ; BSR set to: 0
  8783                           ;main.c: 1226: relay_protection_timer[ 1 ] =
  8784                           ;main.c: 1227: readEEPROM( 0x43 + 34 ) * 256 +
  8785                           ;main.c: 1228: readEEPROM( 0x43 + 35 );
  8786  000A4C  6A09               	clrf	?_readEEPROM+1,c
  8787  000A4E  0E66               	movlw	102
  8788  000A50  6E08               	movwf	?_readEEPROM,c
  8789  000A52  EC81  F01F         	call	_readEEPROM	;wreg free
  8790  000A56  0100               	movlb	0	; () banked
  8791  000A58  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8792  000A5A  6A09               	clrf	?_readEEPROM+1,c
  8793  000A5C  0E65               	movlw	101
  8794  000A5E  6E08               	movwf	?_readEEPROM,c
  8795  000A60  EC81  F01F         	call	_readEEPROM	;wreg free
  8796  000A64                     L26:
  8797  000A64  0100               	movlb	0	; () banked
  8798  000A66  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8799  000A68  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8800  000A6A  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8801  000A6C  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8802  000A6E  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  8803  000A70  0E00               	movlw	0
  8804  000A72  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8805  000A74  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  8806  000A76  D273               	goto	l10233
  8807  000A78                     l10091:
  8808                           
  8809                           ; BSR set to: 0
  8810                           ;main.c: 1234: writeEEPROM( 0x43 + reg, val );
  8811  000A78  0E43               	movlw	67
  8812  000A7A  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8813  000A7C  6E08               	movwf	?_writeEEPROM,c
  8814  000A7E  6A09               	clrf	?_writeEEPROM+1,c
  8815  000A80  0E00               	movlw	0
  8816  000A82  2209               	addwfc	?_writeEEPROM+1,f,c
  8817  000A84  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8818  000A88  EC59  F01E         	call	_writeEEPROM	;wreg free
  8819                           
  8820                           ;main.c: 1235: rv = readEEPROM( 0x43 + reg );
  8821  000A8C  0E43               	movlw	67
  8822  000A8E  0100               	movlb	0	; () banked
  8823  000A90  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8824  000A92  6E08               	movwf	?_readEEPROM,c
  8825  000A94  6A09               	clrf	?_readEEPROM+1,c
  8826  000A96  0E00               	movlw	0
  8827  000A98  2209               	addwfc	?_readEEPROM+1,f,c
  8828  000A9A  EC81  F01F         	call	_readEEPROM	;wreg free
  8829  000A9E  0100               	movlb	0	; () banked
  8830  000AA0  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8831                           
  8832                           ; BSR set to: 0
  8833                           ;main.c: 1237: if ( val & 0x01 ) {
  8834  000AA2  A051               	btfss	vscp_writeAppReg@val,0,c
  8835  000AA4  D018               	goto	l10101
  8836                           
  8837                           ; BSR set to: 0
  8838                           ;main.c: 1239: LATBbits.LATB0 = 0;
  8839  000AA6  908A               	bcf	3978,0,c	;volatile
  8840                           
  8841                           ;main.c: 1240: bOn = 0;
  8842  000AA8  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8843                           
  8844                           ; BSR set to: 0
  8845                           ;main.c: 1242: relay_pulse_flags |= 0x04;
  8846  000AAA  858F               	bsf	_relay_pulse_flags& (0+255),2,b
  8847                           
  8848                           ; BSR set to: 0
  8849                           ;main.c: 1243: relay_pulse_timer[ 2 ] =
  8850                           ;main.c: 1244: readEEPROM( 0x43 + 22) * 256 +
  8851                           ;main.c: 1245: readEEPROM( 0x43 + 23);
  8852  000AAC  6A09               	clrf	?_readEEPROM+1,c
  8853  000AAE  0E5A               	movlw	90
  8854  000AB0  6E08               	movwf	?_readEEPROM,c
  8855  000AB2  EC81  F01F         	call	_readEEPROM	;wreg free
  8856  000AB6  0100               	movlb	0	; () banked
  8857  000AB8  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8858  000ABA  6A09               	clrf	?_readEEPROM+1,c
  8859  000ABC  0E59               	movlw	89
  8860  000ABE  6E08               	movwf	?_readEEPROM,c
  8861  000AC0  EC81  F01F         	call	_readEEPROM	;wreg free
  8862  000AC4  0100               	movlb	0	; () banked
  8863  000AC6  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8864  000AC8  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8865  000ACA  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8866  000ACC  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8867  000ACE  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  8868  000AD0  0E00               	movlw	0
  8869  000AD2  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8870  000AD4  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  8871  000AD6                     l10101:
  8872                           
  8873                           ; BSR set to: 0
  8874                           ;main.c: 1246: }
  8875                           ;main.c: 1248: if ( val & 0x04 ) {
  8876  000AD6  B451               	btfsc	vscp_writeAppReg@val,2,c
  8877  000AD8  D654               	goto	l9965
  8878  000ADA  D241               	goto	l10233
  8879  000ADC                     l10105:
  8880                           
  8881                           ; BSR set to: 0
  8882                           ;main.c: 1257: writeEEPROM( 0x43 + reg, val );
  8883  000ADC  0E43               	movlw	67
  8884  000ADE  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8885  000AE0  6E08               	movwf	?_writeEEPROM,c
  8886  000AE2  6A09               	clrf	?_writeEEPROM+1,c
  8887  000AE4  0E00               	movlw	0
  8888  000AE6  2209               	addwfc	?_writeEEPROM+1,f,c
  8889  000AE8  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8890  000AEC  EC59  F01E         	call	_writeEEPROM	;wreg free
  8891                           
  8892                           ;main.c: 1258: rv = readEEPROM( 0x43 + reg );
  8893  000AF0  0E43               	movlw	67
  8894  000AF2  0100               	movlb	0	; () banked
  8895  000AF4  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8896  000AF6  6E08               	movwf	?_readEEPROM,c
  8897  000AF8  6A09               	clrf	?_readEEPROM+1,c
  8898  000AFA  0E00               	movlw	0
  8899  000AFC  2209               	addwfc	?_readEEPROM+1,f,c
  8900  000AFE  EC81  F01F         	call	_readEEPROM	;wreg free
  8901  000B02  0100               	movlb	0	; () banked
  8902  000B04  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8903                           
  8904                           ; BSR set to: 0
  8905                           ;main.c: 1260: if ( val & 0x01 ) {
  8906  000B06  A051               	btfss	vscp_writeAppReg@val,0,c
  8907  000B08  D018               	goto	l10115
  8908                           
  8909                           ; BSR set to: 0
  8910                           ;main.c: 1262: LATCbits.LATC7 = 0;
  8911  000B0A  9E8B               	bcf	3979,7,c	;volatile
  8912                           
  8913                           ;main.c: 1263: bOn = 0;
  8914  000B0C  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8915                           
  8916                           ; BSR set to: 0
  8917                           ;main.c: 1265: relay_pulse_flags |= 0x08;
  8918  000B0E  878F               	bsf	_relay_pulse_flags& (0+255),3,b
  8919                           
  8920                           ; BSR set to: 0
  8921                           ;main.c: 1266: relay_pulse_timer[ 3 ] =
  8922                           ;main.c: 1267: readEEPROM( 0x43 + 24) * 256 +
  8923                           ;main.c: 1268: readEEPROM( 0x43 + 25);
  8924  000B10  6A09               	clrf	?_readEEPROM+1,c
  8925  000B12  0E5C               	movlw	92
  8926  000B14  6E08               	movwf	?_readEEPROM,c
  8927  000B16  EC81  F01F         	call	_readEEPROM	;wreg free
  8928  000B1A  0100               	movlb	0	; () banked
  8929  000B1C  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8930  000B1E  6A09               	clrf	?_readEEPROM+1,c
  8931  000B20  0E5B               	movlw	91
  8932  000B22  6E08               	movwf	?_readEEPROM,c
  8933  000B24  EC81  F01F         	call	_readEEPROM	;wreg free
  8934  000B28  0100               	movlb	0	; () banked
  8935  000B2A  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8936  000B2C  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8937  000B2E  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8938  000B30  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8939  000B32  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  8940  000B34  0E00               	movlw	0
  8941  000B36  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8942  000B38  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  8943  000B3A                     l10115:
  8944                           
  8945                           ; BSR set to: 0
  8946                           ;main.c: 1269: }
  8947                           ;main.c: 1271: if ( val & 0x04 ) {
  8948  000B3A  B451               	btfsc	vscp_writeAppReg@val,2,c
  8949  000B3C  D654               	goto	l9985
  8950  000B3E  D20F               	goto	l10233
  8951  000B40                     l10119:
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;main.c: 1280: writeEEPROM( 0x43 + reg, val );
  8955  000B40  0E43               	movlw	67
  8956  000B42  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8957  000B44  6E08               	movwf	?_writeEEPROM,c
  8958  000B46  6A09               	clrf	?_writeEEPROM+1,c
  8959  000B48  0E00               	movlw	0
  8960  000B4A  2209               	addwfc	?_writeEEPROM+1,f,c
  8961  000B4C  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8962  000B50  EC59  F01E         	call	_writeEEPROM	;wreg free
  8963                           
  8964                           ;main.c: 1281: rv = readEEPROM( 0x43 + reg );
  8965  000B54  0E43               	movlw	67
  8966  000B56  0100               	movlb	0	; () banked
  8967  000B58  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8968  000B5A  6E08               	movwf	?_readEEPROM,c
  8969  000B5C  6A09               	clrf	?_readEEPROM+1,c
  8970  000B5E  0E00               	movlw	0
  8971  000B60  2209               	addwfc	?_readEEPROM+1,f,c
  8972  000B62  EC81  F01F         	call	_readEEPROM	;wreg free
  8973  000B66  0100               	movlb	0	; () banked
  8974  000B68  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8975                           
  8976                           ; BSR set to: 0
  8977                           ;main.c: 1283: if ( val & 0x01 ) {
  8978  000B6A  A051               	btfss	vscp_writeAppReg@val,0,c
  8979  000B6C  D018               	goto	l10129
  8980                           
  8981                           ; BSR set to: 0
  8982                           ;main.c: 1285: LATCbits.LATC6 = 0;
  8983  000B6E  9C8B               	bcf	3979,6,c	;volatile
  8984                           
  8985                           ;main.c: 1286: bOn = 0;
  8986  000B70  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8987                           
  8988                           ; BSR set to: 0
  8989                           ;main.c: 1288: relay_pulse_flags |= 0x10;
  8990  000B72  898F               	bsf	_relay_pulse_flags& (0+255),4,b
  8991                           
  8992                           ; BSR set to: 0
  8993                           ;main.c: 1289: relay_pulse_timer[ 4 ] =
  8994                           ;main.c: 1290: readEEPROM( 0x43 + 26) * 256 +
  8995                           ;main.c: 1291: readEEPROM( 0x43 + 27);
  8996  000B74  6A09               	clrf	?_readEEPROM+1,c
  8997  000B76  0E5E               	movlw	94
  8998  000B78  6E08               	movwf	?_readEEPROM,c
  8999  000B7A  EC81  F01F         	call	_readEEPROM	;wreg free
  9000  000B7E  0100               	movlb	0	; () banked
  9001  000B80  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9002  000B82  6A09               	clrf	?_readEEPROM+1,c
  9003  000B84  0E5D               	movlw	93
  9004  000B86  6E08               	movwf	?_readEEPROM,c
  9005  000B88  EC81  F01F         	call	_readEEPROM	;wreg free
  9006  000B8C  0100               	movlb	0	; () banked
  9007  000B8E  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9008  000B90  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9009  000B92  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9010  000B94  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9011  000B96  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9012  000B98  0E00               	movlw	0
  9013  000B9A  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9014  000B9C  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9015  000B9E                     l10129:
  9016                           
  9017                           ; BSR set to: 0
  9018                           ;main.c: 1292: }
  9019                           ;main.c: 1294: if ( val & 0x04 ) {
  9020  000B9E  B451               	btfsc	vscp_writeAppReg@val,2,c
  9021  000BA0  D654               	goto	l10005
  9022  000BA2  D1DD               	goto	l10233
  9023  000BA4                     l10133:
  9024                           
  9025                           ; BSR set to: 0
  9026                           ;main.c: 1303: writeEEPROM( 0x43 + reg, val );
  9027  000BA4  0E43               	movlw	67
  9028  000BA6  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9029  000BA8  6E08               	movwf	?_writeEEPROM,c
  9030  000BAA  6A09               	clrf	?_writeEEPROM+1,c
  9031  000BAC  0E00               	movlw	0
  9032  000BAE  2209               	addwfc	?_writeEEPROM+1,f,c
  9033  000BB0  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9034  000BB4  EC59  F01E         	call	_writeEEPROM	;wreg free
  9035                           
  9036                           ;main.c: 1304: rv = readEEPROM( 0x43 + reg );
  9037  000BB8  0E43               	movlw	67
  9038  000BBA  0100               	movlb	0	; () banked
  9039  000BBC  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9040  000BBE  6E08               	movwf	?_readEEPROM,c
  9041  000BC0  6A09               	clrf	?_readEEPROM+1,c
  9042  000BC2  0E00               	movlw	0
  9043  000BC4  2209               	addwfc	?_readEEPROM+1,f,c
  9044  000BC6  EC81  F01F         	call	_readEEPROM	;wreg free
  9045  000BCA  0100               	movlb	0	; () banked
  9046  000BCC  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  9047                           
  9048                           ; BSR set to: 0
  9049                           ;main.c: 1306: if ( val & 0x01 ) {
  9050  000BCE  A051               	btfss	vscp_writeAppReg@val,0,c
  9051  000BD0  D018               	goto	l10143
  9052                           
  9053                           ; BSR set to: 0
  9054                           ;main.c: 1308: LATCbits.LATC5 = 0;
  9055  000BD2  9A8B               	bcf	3979,5,c	;volatile
  9056                           
  9057                           ;main.c: 1309: bOn = 0;
  9058  000BD4  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9059                           
  9060                           ; BSR set to: 0
  9061                           ;main.c: 1311: relay_pulse_flags |= 0x20;
  9062  000BD6  8B8F               	bsf	_relay_pulse_flags& (0+255),5,b
  9063                           
  9064                           ; BSR set to: 0
  9065                           ;main.c: 1312: relay_pulse_timer[ 5 ] =
  9066                           ;main.c: 1313: readEEPROM( 0x43 + 28) * 256 +
  9067                           ;main.c: 1314: readEEPROM( 0x43 + 29);
  9068  000BD8  6A09               	clrf	?_readEEPROM+1,c
  9069  000BDA  0E60               	movlw	96
  9070  000BDC  6E08               	movwf	?_readEEPROM,c
  9071  000BDE  EC81  F01F         	call	_readEEPROM	;wreg free
  9072  000BE2  0100               	movlb	0	; () banked
  9073  000BE4  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9074  000BE6  6A09               	clrf	?_readEEPROM+1,c
  9075  000BE8  0E5F               	movlw	95
  9076  000BEA  6E08               	movwf	?_readEEPROM,c
  9077  000BEC  EC81  F01F         	call	_readEEPROM	;wreg free
  9078  000BF0  0100               	movlb	0	; () banked
  9079  000BF2  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9080  000BF4  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9081  000BF6  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9082  000BF8  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9083  000BFA  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9084  000BFC  0E00               	movlw	0
  9085  000BFE  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9086  000C00  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9087  000C02                     l10143:
  9088                           
  9089                           ; BSR set to: 0
  9090                           ;main.c: 1315: }
  9091                           ;main.c: 1317: if ( val & 0x04 ) {
  9092  000C02  B451               	btfsc	vscp_writeAppReg@val,2,c
  9093  000C04  D654               	goto	l10025
  9094  000C06  D1AB               	goto	l10233
  9095  000C08                     l10147:
  9096                           
  9097                           ; BSR set to: 0
  9098                           ;main.c: 1326: writeEEPROM( 0x43 + reg, val );
  9099  000C08  0E43               	movlw	67
  9100  000C0A  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9101  000C0C  6E08               	movwf	?_writeEEPROM,c
  9102  000C0E  6A09               	clrf	?_writeEEPROM+1,c
  9103  000C10  0E00               	movlw	0
  9104  000C12  2209               	addwfc	?_writeEEPROM+1,f,c
  9105  000C14  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9106  000C18  EC59  F01E         	call	_writeEEPROM	;wreg free
  9107                           
  9108                           ;main.c: 1327: rv = readEEPROM( 0x43 + reg );
  9109  000C1C  0E43               	movlw	67
  9110  000C1E  0100               	movlb	0	; () banked
  9111  000C20  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9112  000C22  6E08               	movwf	?_readEEPROM,c
  9113  000C24  6A09               	clrf	?_readEEPROM+1,c
  9114  000C26  0E00               	movlw	0
  9115  000C28  2209               	addwfc	?_readEEPROM+1,f,c
  9116  000C2A  EC81  F01F         	call	_readEEPROM	;wreg free
  9117  000C2E  0100               	movlb	0	; () banked
  9118  000C30  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  9119                           
  9120                           ; BSR set to: 0
  9121                           ;main.c: 1329: if ( val & 0x01 ) {
  9122  000C32  A051               	btfss	vscp_writeAppReg@val,0,c
  9123  000C34  D018               	goto	l10157
  9124                           
  9125                           ; BSR set to: 0
  9126                           ;main.c: 1331: LATCbits.LATC4 = 0;
  9127  000C36  988B               	bcf	3979,4,c	;volatile
  9128                           
  9129                           ;main.c: 1332: bOn = 0;
  9130  000C38  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9131                           
  9132                           ; BSR set to: 0
  9133                           ;main.c: 1334: relay_pulse_flags |= 0x40;
  9134  000C3A  8D8F               	bsf	_relay_pulse_flags& (0+255),6,b
  9135                           
  9136                           ; BSR set to: 0
  9137                           ;main.c: 1335: relay_pulse_timer[ 6 ] =
  9138                           ;main.c: 1336: readEEPROM( 0x43 + 30) * 256 +
  9139                           ;main.c: 1337: readEEPROM( 0x43 + 31);
  9140  000C3C  6A09               	clrf	?_readEEPROM+1,c
  9141  000C3E  0E62               	movlw	98
  9142  000C40  6E08               	movwf	?_readEEPROM,c
  9143  000C42  EC81  F01F         	call	_readEEPROM	;wreg free
  9144  000C46  0100               	movlb	0	; () banked
  9145  000C48  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9146  000C4A  6A09               	clrf	?_readEEPROM+1,c
  9147  000C4C  0E61               	movlw	97
  9148  000C4E  6E08               	movwf	?_readEEPROM,c
  9149  000C50  EC81  F01F         	call	_readEEPROM	;wreg free
  9150  000C54  0100               	movlb	0	; () banked
  9151  000C56  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9152  000C58  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9153  000C5A  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9154  000C5C  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9155  000C5E  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9156  000C60  0E00               	movlw	0
  9157  000C62  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9158  000C64  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9159  000C66                     l10157:
  9160                           
  9161                           ; BSR set to: 0
  9162                           ;main.c: 1338: }
  9163                           ;main.c: 1340: if ( val & 0x04 ) {
  9164  000C66  B451               	btfsc	vscp_writeAppReg@val,2,c
  9165  000C68  D654               	goto	l10045
  9166  000C6A  D179               	goto	l10233
  9167  000C6C                     l10163:
  9168                           
  9169                           ; BSR set to: 0
  9170  000C6C  51D3               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9171                           
  9172                           ; Switch size 1, requested type "speed"
  9173                           ; Number of cases is 7, Range of values is 10 to 16
  9174                           ; switch strategies available:
  9175                           ; Name         Instructions Cycles
  9176                           ; simple_byte           22    12 (average)
  9177                           ;	Chosen strategy is simple_byte
  9178  000C6E  0A0A               	xorlw	10	; case 10
  9179  000C70  E101 D689          	bz	l10063
  9180  000C74  0A01               	xorlw	1	; case 11
  9181  000C76  E101 D6B8          	bz	l10077
  9182  000C7A  0A07               	xorlw	7	; case 12
  9183  000C7C  E101 D6FC          	bz	l10091
  9184  000C80  0A01               	xorlw	1	; case 13
  9185  000C82  E101 D72B          	bz	l10105
  9186  000C86  0A03               	xorlw	3	; case 14
  9187  000C88  E101 D75A          	bz	l10119
  9188  000C8C  0A01               	xorlw	1	; case 15
  9189  000C8E  E08A               	bz	l10133
  9190  000C90  0A1F               	xorlw	31	; case 16
  9191  000C92  E0BA               	bz	l10147
  9192  000C94  D164               	goto	l10233
  9193  000C96                     l10165:
  9194                           
  9195                           ; BSR set to: 0
  9196                           ;main.c: 1351: else if ( (reg >= 18 ) &&
  9197                           ;main.c: 1352: (reg <= 33 ) ) {
  9198  000C96  0E11               	movlw	17
  9199  000C98  65D3               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9200  000C9A  D0DE               	goto	l10191
  9201                           
  9202                           ; BSR set to: 0
  9203  000C9C  0E22               	movlw	34
  9204  000C9E  61D3               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9205  000CA0  D0DB               	goto	l10191
  9206                           
  9207                           ; BSR set to: 0
  9208                           ;main.c: 1355: writeEEPROM( 0x43 + reg, val );
  9209  000CA2  0E43               	movlw	67
  9210  000CA4  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9211  000CA6  6E08               	movwf	?_writeEEPROM,c
  9212  000CA8  6A09               	clrf	?_writeEEPROM+1,c
  9213  000CAA  0E00               	movlw	0
  9214  000CAC  2209               	addwfc	?_writeEEPROM+1,f,c
  9215  000CAE  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9216  000CB2  EC59  F01E         	call	_writeEEPROM	;wreg free
  9217                           
  9218                           ;main.c: 1356: rv = readEEPROM( 0x43 + reg );
  9219  000CB6  0E43               	movlw	67
  9220  000CB8  0100               	movlb	0	; () banked
  9221  000CBA  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9222  000CBC  6E08               	movwf	?_readEEPROM,c
  9223  000CBE  6A09               	clrf	?_readEEPROM+1,c
  9224  000CC0  0E00               	movlw	0
  9225  000CC2  2209               	addwfc	?_readEEPROM+1,f,c
  9226  000CC4  EC81  F01F         	call	_readEEPROM	;wreg free
  9227  000CC8  0100               	movlb	0	; () banked
  9228  000CCA  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  9229                           
  9230                           ;main.c: 1360: switch ( reg ) {
  9231  000CCC  D0B0               	goto	l10189
  9232  000CCE                     l10171:
  9233                           
  9234                           ; BSR set to: 0
  9235                           ;main.c: 1363: relay_pulse_timer[ 0 ] =
  9236                           ;main.c: 1364: readEEPROM( 0x43 + 18) * 256 +
  9237                           ;main.c: 1365: readEEPROM( 0x43 + 19);
  9238  000CCE  6A09               	clrf	?_readEEPROM+1,c
  9239  000CD0  0E56               	movlw	86
  9240  000CD2  6E08               	movwf	?_readEEPROM,c
  9241  000CD4  EC81  F01F         	call	_readEEPROM	;wreg free
  9242  000CD8  0100               	movlb	0	; () banked
  9243  000CDA  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9244  000CDC  6A09               	clrf	?_readEEPROM+1,c
  9245  000CDE  0E55               	movlw	85
  9246  000CE0  6E08               	movwf	?_readEEPROM,c
  9247  000CE2  EC81  F01F         	call	_readEEPROM	;wreg free
  9248  000CE6  0100               	movlb	0	; () banked
  9249  000CE8  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9250  000CEA  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9251  000CEC  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9252  000CEE  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9253  000CF0  6F70               	movwf	_relay_pulse_timer& (0+255),b
  9254  000CF2  0E00               	movlw	0
  9255  000CF4  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9256  000CF6  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  9257                           
  9258                           ;main.c: 1366: break;
  9259  000CF8  D132               	goto	l10233
  9260  000CFA                     l10173:
  9261                           
  9262                           ; BSR set to: 0
  9263                           ;main.c: 1369: relay_pulse_timer[ 1 ] =
  9264                           ;main.c: 1370: readEEPROM( 0x43 + 20) * 256 +
  9265                           ;main.c: 1371: readEEPROM( 0x43 + 21);
  9266  000CFA  6A09               	clrf	?_readEEPROM+1,c
  9267  000CFC  0E58               	movlw	88
  9268  000CFE  6E08               	movwf	?_readEEPROM,c
  9269  000D00  EC81  F01F         	call	_readEEPROM	;wreg free
  9270  000D04  0100               	movlb	0	; () banked
  9271  000D06  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9272  000D08  6A09               	clrf	?_readEEPROM+1,c
  9273  000D0A  0E57               	movlw	87
  9274  000D0C  6E08               	movwf	?_readEEPROM,c
  9275  000D0E  EC81  F01F         	call	_readEEPROM	;wreg free
  9276  000D12  0100               	movlb	0	; () banked
  9277  000D14  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9278  000D16  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9279  000D18  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9280  000D1A  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9281  000D1C  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  9282  000D1E  0E00               	movlw	0
  9283  000D20  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9284  000D22  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  9285                           
  9286                           ;main.c: 1372: break;
  9287  000D24  D11C               	goto	l10233
  9288  000D26                     l10175:
  9289                           
  9290                           ; BSR set to: 0
  9291                           ;main.c: 1375: relay_pulse_timer[ 2 ] =
  9292                           ;main.c: 1376: readEEPROM( 0x43 + 22) * 256 +
  9293                           ;main.c: 1377: readEEPROM( 0x43 + 23);
  9294  000D26  6A09               	clrf	?_readEEPROM+1,c
  9295  000D28  0E5A               	movlw	90
  9296  000D2A  6E08               	movwf	?_readEEPROM,c
  9297  000D2C  EC81  F01F         	call	_readEEPROM	;wreg free
  9298  000D30  0100               	movlb	0	; () banked
  9299  000D32  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9300  000D34  6A09               	clrf	?_readEEPROM+1,c
  9301  000D36  0E59               	movlw	89
  9302  000D38  6E08               	movwf	?_readEEPROM,c
  9303  000D3A  EC81  F01F         	call	_readEEPROM	;wreg free
  9304  000D3E  0100               	movlb	0	; () banked
  9305  000D40  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9306  000D42  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9307  000D44  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9308  000D46  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9309  000D48  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  9310  000D4A  0E00               	movlw	0
  9311  000D4C  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9312  000D4E  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  9313                           
  9314                           ;main.c: 1378: break;
  9315  000D50  D106               	goto	l10233
  9316  000D52                     l10177:
  9317                           
  9318                           ; BSR set to: 0
  9319                           ;main.c: 1381: relay_pulse_timer[ 3 ] =
  9320                           ;main.c: 1382: readEEPROM( 0x43 + 24) * 256 +
  9321                           ;main.c: 1383: readEEPROM( 0x43 + 25);
  9322  000D52  6A09               	clrf	?_readEEPROM+1,c
  9323  000D54  0E5C               	movlw	92
  9324  000D56  6E08               	movwf	?_readEEPROM,c
  9325  000D58  EC81  F01F         	call	_readEEPROM	;wreg free
  9326  000D5C  0100               	movlb	0	; () banked
  9327  000D5E  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9328  000D60  6A09               	clrf	?_readEEPROM+1,c
  9329  000D62  0E5B               	movlw	91
  9330  000D64  6E08               	movwf	?_readEEPROM,c
  9331  000D66  EC81  F01F         	call	_readEEPROM	;wreg free
  9332  000D6A  0100               	movlb	0	; () banked
  9333  000D6C  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9334  000D6E  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9335  000D70  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9336  000D72  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9337  000D74  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  9338  000D76  0E00               	movlw	0
  9339  000D78  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9340  000D7A  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  9341                           
  9342                           ;main.c: 1384: break;
  9343  000D7C  D0F0               	goto	l10233
  9344  000D7E                     l10179:
  9345                           
  9346                           ; BSR set to: 0
  9347                           ;main.c: 1387: relay_pulse_timer[ 4 ] =
  9348                           ;main.c: 1388: readEEPROM( 0x43 + 26) * 256 +
  9349                           ;main.c: 1389: readEEPROM( 0x43 + 27);
  9350  000D7E  6A09               	clrf	?_readEEPROM+1,c
  9351  000D80  0E5E               	movlw	94
  9352  000D82  6E08               	movwf	?_readEEPROM,c
  9353  000D84  EC81  F01F         	call	_readEEPROM	;wreg free
  9354  000D88  0100               	movlb	0	; () banked
  9355  000D8A  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9356  000D8C  6A09               	clrf	?_readEEPROM+1,c
  9357  000D8E  0E5D               	movlw	93
  9358  000D90  6E08               	movwf	?_readEEPROM,c
  9359  000D92  EC81  F01F         	call	_readEEPROM	;wreg free
  9360  000D96  0100               	movlb	0	; () banked
  9361  000D98  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9362  000D9A  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9363  000D9C  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9364  000D9E  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9365  000DA0  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9366  000DA2  0E00               	movlw	0
  9367  000DA4  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9368  000DA6  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9369                           
  9370                           ;main.c: 1390: break;
  9371  000DA8  D0DA               	goto	l10233
  9372  000DAA                     l10181:
  9373                           
  9374                           ; BSR set to: 0
  9375                           ;main.c: 1393: relay_pulse_timer[ 5 ] =
  9376                           ;main.c: 1394: readEEPROM( 0x43 + 28) * 256 +
  9377                           ;main.c: 1395: readEEPROM( 0x43 + 29);
  9378  000DAA  6A09               	clrf	?_readEEPROM+1,c
  9379  000DAC  0E60               	movlw	96
  9380  000DAE  6E08               	movwf	?_readEEPROM,c
  9381  000DB0  EC81  F01F         	call	_readEEPROM	;wreg free
  9382  000DB4  0100               	movlb	0	; () banked
  9383  000DB6  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9384  000DB8  6A09               	clrf	?_readEEPROM+1,c
  9385  000DBA  0E5F               	movlw	95
  9386  000DBC  6E08               	movwf	?_readEEPROM,c
  9387  000DBE  EC81  F01F         	call	_readEEPROM	;wreg free
  9388  000DC2  0100               	movlb	0	; () banked
  9389  000DC4  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9390  000DC6  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9391  000DC8  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9392  000DCA  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9393  000DCC  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9394  000DCE  0E00               	movlw	0
  9395  000DD0  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9396  000DD2  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9397                           
  9398                           ;main.c: 1396: break;
  9399  000DD4  D0C4               	goto	l10233
  9400  000DD6                     l10183:
  9401                           
  9402                           ; BSR set to: 0
  9403                           ;main.c: 1399: relay_pulse_timer[ 6 ] =
  9404                           ;main.c: 1400: readEEPROM( 0x43 + 30) * 256 +
  9405                           ;main.c: 1401: readEEPROM( 0x43 + 31);
  9406  000DD6  6A09               	clrf	?_readEEPROM+1,c
  9407  000DD8  0E62               	movlw	98
  9408  000DDA  6E08               	movwf	?_readEEPROM,c
  9409  000DDC  EC81  F01F         	call	_readEEPROM	;wreg free
  9410  000DE0  0100               	movlb	0	; () banked
  9411  000DE2  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9412  000DE4  6A09               	clrf	?_readEEPROM+1,c
  9413  000DE6  0E61               	movlw	97
  9414  000DE8  6E08               	movwf	?_readEEPROM,c
  9415  000DEA  EC81  F01F         	call	_readEEPROM	;wreg free
  9416  000DEE  0100               	movlb	0	; () banked
  9417  000DF0  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9418  000DF2  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9419  000DF4  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9420  000DF6  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9421  000DF8  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9422  000DFA  0E00               	movlw	0
  9423  000DFC  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9424  000DFE  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9425                           
  9426                           ;main.c: 1402: break;
  9427  000E00  D0AE               	goto	l10233
  9428  000E02                     l10185:
  9429                           
  9430                           ; BSR set to: 0
  9431                           ;main.c: 1405: relay_pulse_timer[ 7 ] =
  9432                           ;main.c: 1406: readEEPROM( 0x43 + 32) * 256 +
  9433                           ;main.c: 1407: readEEPROM( 0x43 + 33);
  9434  000E02  6A09               	clrf	?_readEEPROM+1,c
  9435  000E04  0E64               	movlw	100
  9436  000E06  6E08               	movwf	?_readEEPROM,c
  9437  000E08  EC81  F01F         	call	_readEEPROM	;wreg free
  9438  000E0C  0100               	movlb	0	; () banked
  9439  000E0E  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9440  000E10  6A09               	clrf	?_readEEPROM+1,c
  9441  000E12  0E63               	movlw	99
  9442  000E14  6E08               	movwf	?_readEEPROM,c
  9443  000E16  EC81  F01F         	call	_readEEPROM	;wreg free
  9444  000E1A  0100               	movlb	0	; () banked
  9445  000E1C  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9446  000E1E  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9447  000E20  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9448  000E22  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9449  000E24  6F7E               	movwf	(_relay_pulse_timer+14)& (0+255),b
  9450  000E26  0E00               	movlw	0
  9451  000E28  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9452  000E2A  6F7F               	movwf	(_relay_pulse_timer+15)& (0+255),b
  9453                           
  9454                           ;main.c: 1408: break;
  9455  000E2C  D098               	goto	l10233
  9456  000E2E                     l10189:
  9457                           
  9458                           ; BSR set to: 0
  9459  000E2E  51D3               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9460                           
  9461                           ; Switch size 1, requested type "speed"
  9462                           ; Number of cases is 8, Range of values is 19 to 33
  9463                           ; switch strategies available:
  9464                           ; Name         Instructions Cycles
  9465                           ; simple_byte           25    13 (average)
  9466                           ;	Chosen strategy is simple_byte
  9467  000E30  0A13               	xorlw	19	; case 19
  9468  000E32  E101 D74C          	bz	l10171
  9469  000E36  0A06               	xorlw	6	; case 21
  9470  000E38  E101 D75F          	bz	l10173
  9471  000E3C  0A02               	xorlw	2	; case 23
  9472  000E3E  E101 D772          	bz	l10175
  9473  000E42  0A0E               	xorlw	14	; case 25
  9474  000E44  E086               	bz	l10177
  9475  000E46  0A02               	xorlw	2	; case 27
  9476  000E48  E09A               	bz	l10179
  9477  000E4A  0A06               	xorlw	6	; case 29
  9478  000E4C  E0AE               	bz	l10181
  9479  000E4E  0A02               	xorlw	2	; case 31
  9480  000E50  E0C2               	bz	l10183
  9481  000E52  0A3E               	xorlw	62	; case 33
  9482  000E54  E0D6               	bz	l10185
  9483  000E56  D083               	goto	l10233
  9484  000E58                     l10191:
  9485                           
  9486                           ; BSR set to: 0
  9487                           ;main.c: 1416: else if ( ( reg >= 34 ) &&
  9488                           ;main.c: 1417: ( reg <= 49 ) ) {
  9489  000E58  0E21               	movlw	33
  9490  000E5A  65D3               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9491  000E5C  D049               	goto	l10217
  9492                           
  9493                           ; BSR set to: 0
  9494  000E5E  0E32               	movlw	50
  9495  000E60  61D3               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9496  000E62  D046               	goto	l10217
  9497                           
  9498                           ; BSR set to: 0
  9499                           ;main.c: 1420: writeEEPROM( 0x43 + reg, val );
  9500  000E64  0E43               	movlw	67
  9501  000E66  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9502  000E68  6E08               	movwf	?_writeEEPROM,c
  9503  000E6A  6A09               	clrf	?_writeEEPROM+1,c
  9504  000E6C  0E00               	movlw	0
  9505  000E6E  2209               	addwfc	?_writeEEPROM+1,f,c
  9506  000E70  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9507  000E74  EC59  F01E         	call	_writeEEPROM	;wreg free
  9508                           
  9509                           ;main.c: 1421: rv = readEEPROM( 0x43 + reg );
  9510  000E78  0E43               	movlw	67
  9511  000E7A  0100               	movlb	0	; () banked
  9512  000E7C  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9513  000E7E  6E08               	movwf	?_readEEPROM,c
  9514  000E80  6A09               	clrf	?_readEEPROM+1,c
  9515  000E82  0E00               	movlw	0
  9516  000E84  2209               	addwfc	?_readEEPROM+1,f,c
  9517  000E86  EC81  F01F         	call	_readEEPROM	;wreg free
  9518  000E8A  0100               	movlb	0	; () banked
  9519  000E8C  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  9520                           
  9521                           ;main.c: 1423: switch ( reg ) {
  9522  000E8E  D016               	goto	l10215
  9523  000E90                     l10211:
  9524                           
  9525                           ; BSR set to: 0
  9526                           ;main.c: 1468: relay_protection_timer[ 7 ] =
  9527                           ;main.c: 1469: readEEPROM( 0x43 + 48 ) * 256 +
  9528                           ;main.c: 1470: readEEPROM( 0x43 + 49 );
  9529  000E90  6A09               	clrf	?_readEEPROM+1,c
  9530  000E92  0E74               	movlw	116
  9531  000E94  6E08               	movwf	?_readEEPROM,c
  9532  000E96  EC81  F01F         	call	_readEEPROM	;wreg free
  9533  000E9A  0100               	movlb	0	; () banked
  9534  000E9C  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9535  000E9E  6A09               	clrf	?_readEEPROM+1,c
  9536  000EA0  0E73               	movlw	115
  9537  000EA2  6E08               	movwf	?_readEEPROM,c
  9538  000EA4  EC81  F01F         	call	_readEEPROM	;wreg free
  9539  000EA8  0100               	movlb	0	; () banked
  9540  000EAA  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9541  000EAC  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9542  000EAE  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9543  000EB0  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9544  000EB2  6F6E               	movwf	(_relay_protection_timer+14)& (0+255),b
  9545  000EB4  0E00               	movlw	0
  9546  000EB6  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9547  000EB8  6F6F               	movwf	(_relay_protection_timer+15)& (0+255),b
  9548                           
  9549                           ;main.c: 1471: break;
  9550  000EBA  D051               	goto	l10233
  9551  000EBC                     l10215:
  9552                           
  9553                           ; BSR set to: 0
  9554  000EBC  51D3               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9555                           
  9556                           ; Switch size 1, requested type "speed"
  9557                           ; Number of cases is 8, Range of values is 35 to 49
  9558                           ; switch strategies available:
  9559                           ; Name         Instructions Cycles
  9560                           ; simple_byte           25    13 (average)
  9561                           ;	Chosen strategy is simple_byte
  9562  000EBE  0A23               	xorlw	35	; case 35
  9563  000EC0  E102 EF60  F003    	bz	l9925
  9564  000EC6  0A06               	xorlw	6	; case 37
  9565  000EC8  E101 D431          	bz	l9945
  9566  000ECC  0A02               	xorlw	2	; case 39
  9567  000ECE  E101 D458          	bz	l9965
  9568  000ED2  0A0E               	xorlw	14	; case 41
  9569  000ED4  E101 D487          	bz	l9985
  9570  000ED8  0A02               	xorlw	2	; case 43
  9571  000EDA  E101 D4B6          	bz	l10005
  9572  000EDE  0A06               	xorlw	6	; case 45
  9573  000EE0  E101 D4E5          	bz	l10025
  9574  000EE4  0A02               	xorlw	2	; case 47
  9575  000EE6  E101 D514          	bz	l10045
  9576  000EEA  0A1E               	xorlw	30	; case 49
  9577  000EEC  E0D1               	bz	l10211
  9578  000EEE  D037               	goto	l10233
  9579  000EF0                     l10217:
  9580                           
  9581                           ; BSR set to: 0
  9582                           ;main.c: 1479: else if ( (reg >= 50 ) && (reg <= 65) ) {
  9583  000EF0  0E31               	movlw	49
  9584  000EF2  65D3               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9585  000EF4  D017               	goto	l10223
  9586                           
  9587                           ; BSR set to: 0
  9588  000EF6  0E42               	movlw	66
  9589  000EF8  61D3               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9590  000EFA  D014               	goto	l10223
  9591                           
  9592                           ; BSR set to: 0
  9593                           ;main.c: 1482: writeEEPROM( 0x43 + reg, val );
  9594  000EFC  0E43               	movlw	67
  9595  000EFE  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9596  000F00  6E08               	movwf	?_writeEEPROM,c
  9597  000F02  6A09               	clrf	?_writeEEPROM+1,c
  9598  000F04  0E00               	movlw	0
  9599  000F06  2209               	addwfc	?_writeEEPROM+1,f,c
  9600  000F08  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9601  000F0C  EC59  F01E         	call	_writeEEPROM	;wreg free
  9602                           
  9603                           ;main.c: 1483: rv = readEEPROM( 0x43 + reg );
  9604  000F10  0E43               	movlw	67
  9605  000F12  0100               	movlb	0	; () banked
  9606  000F14  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9607  000F16  6E08               	movwf	?_readEEPROM,c
  9608  000F18  6A09               	clrf	?_readEEPROM+1,c
  9609  000F1A  0E00               	movlw	0
  9610  000F1C  2209               	addwfc	?_readEEPROM+1,f,c
  9611  000F1E  EC81  F01F         	call	_readEEPROM	;wreg free
  9612  000F22  D01B               	goto	L25
  9613  000F24                     l10223:
  9614                           
  9615                           ; BSR set to: 0
  9616                           ;main.c: 1486: else if ( (reg >= 72) &&
  9617                           ;main.c: 1487: (reg < (72 + 7 * 8)) ) {
  9618  000F24  0E47               	movlw	71
  9619  000F26  65D3               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9620  000F28  D01A               	goto	l10233
  9621                           
  9622                           ; BSR set to: 0
  9623  000F2A  0E80               	movlw	128
  9624  000F2C  61D3               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9625  000F2E  D017               	goto	l10233
  9626                           
  9627                           ; BSR set to: 0
  9628                           ;main.c: 1488: writeEEPROM( 0x43 + reg, val );
  9629  000F30  0E43               	movlw	67
  9630  000F32  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9631  000F34  6E08               	movwf	?_writeEEPROM,c
  9632  000F36  6A09               	clrf	?_writeEEPROM+1,c
  9633  000F38  0E00               	movlw	0
  9634  000F3A  2209               	addwfc	?_writeEEPROM+1,f,c
  9635  000F3C  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9636  000F40  EC59  F01E         	call	_writeEEPROM	;wreg free
  9637                           
  9638                           ;main.c: 1489: calculateSetFilterMask();
  9639  000F44  ECF6  F00A         	call	_calculateSetFilterMask	;wreg free
  9640                           
  9641                           ;main.c: 1490: rv = readEEPROM( 0x43 + reg );
  9642  000F48  0E43               	movlw	67
  9643  000F4A  0100               	movlb	0	; () banked
  9644  000F4C  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9645  000F4E  6E08               	movwf	?_readEEPROM,c
  9646  000F50  6A09               	clrf	?_readEEPROM+1,c
  9647  000F52  0E00               	movlw	0
  9648  000F54  2209               	addwfc	?_readEEPROM+1,f,c
  9649  000F56  EC81  F01F         	call	_readEEPROM	;wreg free
  9650  000F5A                     L25:
  9651  000F5A  0100               	movlb	0	; () banked
  9652  000F5C  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  9653  000F5E                     l10233:
  9654                           
  9655                           ; BSR set to: 0
  9656                           ;main.c: 1491: }
  9657                           ;main.c: 1497: if ( bInfoEvent ) {
  9658  000F5E  51CF               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
  9659  000F60  E035               	bz	l10253
  9660                           
  9661                           ; BSR set to: 0
  9662                           ;main.c: 1499: unsigned char val;
  9663                           ;main.c: 1500: val = readEEPROM( 0x43 +
  9664                           ;main.c: 1501: 10 + (reg - 2) );
  9665  000F62  0E4B               	movlw	75
  9666  000F64  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9667  000F66  6E08               	movwf	?_readEEPROM,c
  9668  000F68  6A09               	clrf	?_readEEPROM+1,c
  9669  000F6A  0E00               	movlw	0
  9670  000F6C  2209               	addwfc	?_readEEPROM+1,f,c
  9671  000F6E  EC81  F01F         	call	_readEEPROM	;wreg free
  9672  000F72  0100               	movlb	0	; () banked
  9673  000F74  6FD0               	movwf	vscp_writeAppReg@val_678& (0+255),b
  9674                           
  9675                           ; BSR set to: 0
  9676                           ;main.c: 1503: if ( bOn ) {
  9677  000F76  51D1               	movf	vscp_writeAppReg@bOn& (0+255),w,b
  9678  000F78  E015               	bz	l395
  9679                           
  9680                           ; BSR set to: 0
  9681                           ;main.c: 1505: if ( val & 0x08 ) {
  9682  000F7A  A7D0               	btfss	vscp_writeAppReg@val_678& (0+255),3,b
  9683  000F7C  D008               	goto	l10243
  9684                           
  9685                           ; BSR set to: 0
  9686                           ;main.c: 1506: SendInformationEvent( reg - 2,
  9687                           ;main.c: 1507: 20,
  9688                           ;main.c: 1508: 3 );
  9689  000F7E  0E14               	movlw	20
  9690  000F80  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  9691  000F82  0E03               	movlw	3
  9692  000F84  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9693  000F86  51D3               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9694  000F88  0FFE               	addlw	254
  9695  000F8A  ECEA  F01C         	call	_SendInformationEvent
  9696  000F8E                     l10243:
  9697                           
  9698                           ; BSR set to: 0
  9699                           ;main.c: 1509: }
  9700                           ;main.c: 1511: if ( val & 0x20 ) {
  9701  000F8E  ABD0               	btfss	vscp_writeAppReg@val_678& (0+255),5,b
  9702  000F90  D01D               	goto	l10253
  9703                           
  9704                           ; BSR set to: 0
  9705                           ;main.c: 1512: SendInformationEvent( reg - 2,
  9706                           ;main.c: 1513: 20,
  9707                           ;main.c: 1514: 25 );
  9708  000F92  0E14               	movlw	20
  9709  000F94  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  9710  000F96  0E19               	movlw	25
  9711  000F98  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9712  000F9A  51D3               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9713  000F9C  0FFE               	addlw	254
  9714  000F9E  ECEA  F01C         	call	_SendInformationEvent
  9715  000FA2  D014               	goto	l10253
  9716  000FA4                     l395:
  9717                           
  9718                           ; BSR set to: 0
  9719                           ;main.c: 1518: else {
  9720                           ;main.c: 1520: if ( val & 0x10 ) {
  9721  000FA4  A9D0               	btfss	vscp_writeAppReg@val_678& (0+255),4,b
  9722  000FA6  D008               	goto	l10249
  9723                           
  9724                           ; BSR set to: 0
  9725                           ;main.c: 1521: SendInformationEvent( reg - 2,
  9726                           ;main.c: 1522: 20,
  9727                           ;main.c: 1523: 4 );
  9728  000FA8  0E14               	movlw	20
  9729  000FAA  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  9730  000FAC  0E04               	movlw	4
  9731  000FAE  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9732  000FB0  51D3               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9733  000FB2  0FFE               	addlw	254
  9734  000FB4  ECEA  F01C         	call	_SendInformationEvent
  9735  000FB8                     l10249:
  9736                           
  9737                           ; BSR set to: 0
  9738                           ;main.c: 1524: }
  9739                           ;main.c: 1526: if ( val & 0x40 ) {
  9740  000FB8  ADD0               	btfss	vscp_writeAppReg@val_678& (0+255),6,b
  9741  000FBA  D008               	goto	l10253
  9742                           
  9743                           ; BSR set to: 0
  9744                           ;main.c: 1527: SendInformationEvent( reg - 2,
  9745                           ;main.c: 1528: 20,
  9746                           ;main.c: 1529: 24 );
  9747  000FBC  0E14               	movlw	20
  9748  000FBE  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  9749  000FC0  0E18               	movlw	24
  9750  000FC2  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9751  000FC4  51D3               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9752  000FC6  0FFE               	addlw	254
  9753  000FC8  ECEA  F01C         	call	_SendInformationEvent
  9754  000FCC                     l10253:
  9755                           
  9756                           ; BSR set to: 0
  9757                           ;main.c: 1530: }
  9758                           ;main.c: 1531: }
  9759                           ;main.c: 1532: }
  9760                           ;main.c: 1534: return rv;
  9761  000FCC  51D2               	movf	vscp_writeAppReg@rv& (0+255),w,b
  9762                           
  9763                           ; BSR set to: 0
  9764  000FCE  0012               	return	
  9765  000FD0                     __end_of_vscp_writeAppReg:
  9766                           	opt stack 0
  9767                           tblptru	equ	0xFF8
  9768                           prodh	equ	0xFF4
  9769                           prodl	equ	0xFF3
  9770                           postinc0	equ	0xFEE
  9771                           wreg	equ	0xFE8
  9772                           indf2	equ	0xFDF
  9773                           postinc2	equ	0xFDE
  9774                           postdec2	equ	0xFDD
  9775                           fsr2h	equ	0xFDA
  9776                           fsr2l	equ	0xFD9
  9777                           status	equ	0xFD8
  9778                           
  9779 ;; *************** function _calculateSetFilterMask *****************
  9780 ;; Defined at:
  9781 ;;		line 2592 in file "../main.c"
  9782 ;; Parameters:    Size  Location     Type
  9783 ;;		None
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;  rowfilter       4   61[COMRAM] unsigned long 
  9786 ;;  filter          4   57[COMRAM] unsigned long 
  9787 ;;  mask            4   53[COMRAM] unsigned long 
  9788 ;;  rowmask         4   48[COMRAM] unsigned long 
  9789 ;;  i               1   66[COMRAM] unsigned char 
  9790 ;;  j               1   65[COMRAM] unsigned char 
  9791 ;;  lastOID         1   52[COMRAM] unsigned char 
  9792 ;; Return value:  Size  Location     Type
  9793 ;;		None               void
  9794 ;; Registers used:
  9795 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9796 ;; Tracked objects:
  9797 ;;		On entry : 0/0
  9798 ;;		On exit  : 0/0
  9799 ;;		Unchanged: 0/0
  9800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9801 ;;      Params:         0       0       0       0       0       0       0
  9802 ;;      Locals:        19       0       0       0       0       0       0
  9803 ;;      Temps:         31       0       0       0       0       0       0
  9804 ;;      Totals:        50       0       0       0       0       0       0
  9805 ;;Total ram usage:       50 bytes
  9806 ;; Hardware stack levels used:    1
  9807 ;; Hardware stack levels required when called:    3
  9808 ;; This function calls:
  9809 ;;		_readEEPROM
  9810 ;;		_ECANSetOperationMode
  9811 ;;		__CANIDToRegs
  9812 ;; This function is called by:
  9813 ;;		_vscp_writeAppReg
  9814 ;; This function uses a non-reentrant model
  9815 ;;
  9816                           
  9817                           	psect	text27
  9818  0015EC                     __ptext27:
  9819                           	opt stack 0
  9820  0015EC                     _calculateSetFilterMask:
  9821                           	opt stack 23
  9822                           
  9823                           ;main.c: 2593: uint8_t i,j;
  9824                           ;main.c: 2594: uint8_t lastOID;
  9825                           ;main.c: 2595: uint32_t rowmask;
  9826                           ;main.c: 2596: uint32_t rowfilter;
  9827                           ;main.c: 2599: uint32_t mask = 0xffffffff;
  9828                           
  9829                           ; BSR set to: 0
  9830                           ;incstack = 0
  9831                           ;incstack = 0
  9832  0015EC  6836               	setf	calculateSetFilterMask@mask,c
  9833  0015EE  6837               	setf	calculateSetFilterMask@mask+1,c
  9834  0015F0  6838               	setf	calculateSetFilterMask@mask+2,c
  9835  0015F2  6839               	setf	calculateSetFilterMask@mask+3,c
  9836                           
  9837                           ;main.c: 2600: uint32_t filter = 0;
  9838  0015F4  6A3A               	clrf	calculateSetFilterMask@filter,c
  9839  0015F6  6A3B               	clrf	calculateSetFilterMask@filter+1,c
  9840  0015F8  6A3C               	clrf	calculateSetFilterMask@filter+2,c
  9841  0015FA  6A3D               	clrf	calculateSetFilterMask@filter+3,c
  9842                           
  9843                           ;main.c: 2603: for ( i=0; i < 7; i++ ) {
  9844  0015FC  6A43               	clrf	calculateSetFilterMask@i,c
  9845  0015FE                     l8477:
  9846                           
  9847                           ;main.c: 2606: if ( readEEPROM( 0x43 + 8*i + 1 ) & 0x80 ) {
  9848  0015FE  5043               	movf	calculateSetFilterMask@i,w,c
  9849  001600  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
  9850  001602  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
  9851  001604  90D8               	bcf	status,0,c
  9852  001606  3612               	rlcf	??_calculateSetFilterMask,f,c
  9853  001608  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9854  00160A  90D8               	bcf	status,0,c
  9855  00160C  3612               	rlcf	??_calculateSetFilterMask,f,c
  9856  00160E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9857  001610  90D8               	bcf	status,0,c
  9858  001612  3612               	rlcf	??_calculateSetFilterMask,f,c
  9859  001614  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9860  001616  0E44               	movlw	68
  9861  001618  2412               	addwf	??_calculateSetFilterMask,w,c
  9862  00161A  6E08               	movwf	?_readEEPROM,c
  9863  00161C  0E00               	movlw	0
  9864  00161E  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9865  001620  6E09               	movwf	?_readEEPROM+1,c
  9866  001622  EC81  F01F         	call	_readEEPROM	;wreg free
  9867  001626  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9868  001628  AE14               	btfss	??_calculateSetFilterMask+2,7,c
  9869  00162A  D1E8               	goto	l8521
  9870                           
  9871                           ;main.c: 2615: rowmask =
  9872                           ;main.c: 2617: ( (uint32_t)( readEEPROM( 0x43 + 8*i + 1 ) & 2 ) << 23 ) |
  9873                           ;main.c: 2619: ( (uint32_t)readEEPROM( 0x43 + 8*i + 2 ) << 16 ) |
  9874                           ;main.c: 2621: ( (uint32_t)readEEPROM( 0x43 + 8*i + 4 ) << 8 ) |
  9875                           ;main.c: 2623: 0xff;
  9876  00162C  5043               	movf	calculateSetFilterMask@i,w,c
  9877  00162E  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
  9878  001630  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
  9879  001632  90D8               	bcf	status,0,c
  9880  001634  3612               	rlcf	??_calculateSetFilterMask,f,c
  9881  001636  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9882  001638  90D8               	bcf	status,0,c
  9883  00163A  3612               	rlcf	??_calculateSetFilterMask,f,c
  9884  00163C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9885  00163E  90D8               	bcf	status,0,c
  9886  001640  3612               	rlcf	??_calculateSetFilterMask,f,c
  9887  001642  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9888  001644  0E47               	movlw	71
  9889  001646  2412               	addwf	??_calculateSetFilterMask,w,c
  9890  001648  6E08               	movwf	?_readEEPROM,c
  9891  00164A  0E00               	movlw	0
  9892  00164C  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9893  00164E  6E09               	movwf	?_readEEPROM+1,c
  9894  001650  EC81  F01F         	call	_readEEPROM	;wreg free
  9895  001654  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9896  001656  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
  9897  00165A  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
  9898  00165C  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
  9899  00165E  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
  9900  001660  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
  9901  001664  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
  9902  001668  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
  9903  00166C  6A15               	clrf	??_calculateSetFilterMask+3,c
  9904  00166E  5043               	movf	calculateSetFilterMask@i,w,c
  9905  001670  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
  9906  001672  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
  9907  001674  90D8               	bcf	status,0,c
  9908  001676  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9909  001678  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9910  00167A  90D8               	bcf	status,0,c
  9911  00167C  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9912  00167E  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9913  001680  90D8               	bcf	status,0,c
  9914  001682  3619               	rlcf	??_calculateSetFilterMask+7,f,c
  9915  001684  361A               	rlcf	??_calculateSetFilterMask+8,f,c
  9916  001686  0E45               	movlw	69
  9917  001688  2419               	addwf	??_calculateSetFilterMask+7,w,c
  9918  00168A  6E08               	movwf	?_readEEPROM,c
  9919  00168C  0E00               	movlw	0
  9920  00168E  201A               	addwfc	??_calculateSetFilterMask+8,w,c
  9921  001690  6E09               	movwf	?_readEEPROM+1,c
  9922  001692  EC81  F01F         	call	_readEEPROM	;wreg free
  9923  001696  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
  9924  001698  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
  9925  00169C  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
  9926  00169E  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
  9927  0016A0  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
  9928  0016A2  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
  9929  0016A6  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
  9930  0016AA  6A1D               	clrf	??_calculateSetFilterMask+11,c
  9931  0016AC  6A1C               	clrf	??_calculateSetFilterMask+10,c
  9932  0016AE  5043               	movf	calculateSetFilterMask@i,w,c
  9933  0016B0  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
  9934  0016B2  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
  9935  0016B4  90D8               	bcf	status,0,c
  9936  0016B6  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9937  0016B8  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9938  0016BA  90D8               	bcf	status,0,c
  9939  0016BC  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9940  0016BE  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9941  0016C0  90D8               	bcf	status,0,c
  9942  0016C2  3620               	rlcf	??_calculateSetFilterMask+14,f,c
  9943  0016C4  3621               	rlcf	??_calculateSetFilterMask+15,f,c
  9944  0016C6  0E44               	movlw	68
  9945  0016C8  2420               	addwf	??_calculateSetFilterMask+14,w,c
  9946  0016CA  6E08               	movwf	?_readEEPROM,c
  9947  0016CC  0E00               	movlw	0
  9948  0016CE  2021               	addwfc	??_calculateSetFilterMask+15,w,c
  9949  0016D0  6E09               	movwf	?_readEEPROM+1,c
  9950  0016D2  EC81  F01F         	call	_readEEPROM	;wreg free
  9951  0016D6  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
  9952  0016D8  0E02               	movlw	2
  9953  0016DA  1622               	andwf	??_calculateSetFilterMask+16,f,c
  9954  0016DC  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
  9955  0016E0  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
  9956  0016E2  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
  9957  0016E4  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
  9958  0016E6  0E17               	movlw	23
  9959  0016E8                     u9815:
  9960  0016E8  90D8               	bcf	status,0,c
  9961  0016EA  3623               	rlcf	??_calculateSetFilterMask+17,f,c
  9962  0016EC  3624               	rlcf	??_calculateSetFilterMask+18,f,c
  9963  0016EE  3625               	rlcf	??_calculateSetFilterMask+19,f,c
  9964  0016F0  3626               	rlcf	??_calculateSetFilterMask+20,f,c
  9965  0016F2  2EE8               	decfsz	wreg,f,c
  9966  0016F4  D7F9               	goto	u9815
  9967  0016F6  501C               	movf	??_calculateSetFilterMask+10,w,c
  9968  0016F8  1023               	iorwf	??_calculateSetFilterMask+17,w,c
  9969  0016FA  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
  9970  0016FC  501D               	movf	??_calculateSetFilterMask+11,w,c
  9971  0016FE  1024               	iorwf	??_calculateSetFilterMask+18,w,c
  9972  001700  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
  9973  001702  501E               	movf	??_calculateSetFilterMask+12,w,c
  9974  001704  1025               	iorwf	??_calculateSetFilterMask+19,w,c
  9975  001706  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
  9976  001708  501F               	movf	??_calculateSetFilterMask+13,w,c
  9977  00170A  1026               	iorwf	??_calculateSetFilterMask+20,w,c
  9978  00170C  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
  9979  00170E  5015               	movf	??_calculateSetFilterMask+3,w,c
  9980  001710  1027               	iorwf	??_calculateSetFilterMask+21,w,c
  9981  001712  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
  9982  001714  5016               	movf	??_calculateSetFilterMask+4,w,c
  9983  001716  1028               	iorwf	??_calculateSetFilterMask+22,w,c
  9984  001718  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
  9985  00171A  5017               	movf	??_calculateSetFilterMask+5,w,c
  9986  00171C  1029               	iorwf	??_calculateSetFilterMask+23,w,c
  9987  00171E  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
  9988  001720  5018               	movf	??_calculateSetFilterMask+6,w,c
  9989  001722  102A               	iorwf	??_calculateSetFilterMask+24,w,c
  9990  001724  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
  9991  001726  0EFF               	movlw	255
  9992  001728  102B               	iorwf	??_calculateSetFilterMask+25,w,c
  9993  00172A  6E31               	movwf	calculateSetFilterMask@rowmask,c
  9994  00172C  502C               	movf	??_calculateSetFilterMask+26,w,c
  9995  00172E  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
  9996  001730  502D               	movf	??_calculateSetFilterMask+27,w,c
  9997  001732  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
  9998  001734  502E               	movf	??_calculateSetFilterMask+28,w,c
  9999  001736  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
 10000                           
 10001                           ;main.c: 2624: ;
 10002                           ;main.c: 2629: rowfilter =
 10003                           ;main.c: 2631: ( (uint32_t)( readEEPROM( 0x43 + 8*i + 1 ) & 1 ) << 24 ) |
 10004                           ;main.c: 2633: ( (uint32_t)readEEPROM( 0x43 + 8*i + 3 ) << 16 ) |
 10005                           ;main.c: 2635: ( (uint32_t)readEEPROM( 0x43 + 8*i + 5 ) << 8 ) |
 10006                           ;main.c: 2638: readEEPROM( 0x43 + 8*i );
 10007  001738  5043               	movf	calculateSetFilterMask@i,w,c
 10008  00173A  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10009  00173C  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10010  00173E  90D8               	bcf	status,0,c
 10011  001740  3612               	rlcf	??_calculateSetFilterMask,f,c
 10012  001742  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10013  001744  90D8               	bcf	status,0,c
 10014  001746  3612               	rlcf	??_calculateSetFilterMask,f,c
 10015  001748  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10016  00174A  90D8               	bcf	status,0,c
 10017  00174C  3612               	rlcf	??_calculateSetFilterMask,f,c
 10018  00174E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10019  001750  0E48               	movlw	72
 10020  001752  2412               	addwf	??_calculateSetFilterMask,w,c
 10021  001754  6E08               	movwf	?_readEEPROM,c
 10022  001756  0E00               	movlw	0
 10023  001758  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10024  00175A  6E09               	movwf	?_readEEPROM+1,c
 10025  00175C  EC81  F01F         	call	_readEEPROM	;wreg free
 10026  001760  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10027  001762  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 10028  001766  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 10029  001768  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10030  00176A  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 10031  00176C  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 10032  001770  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 10033  001774  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 10034  001778  6A15               	clrf	??_calculateSetFilterMask+3,c
 10035  00177A  5043               	movf	calculateSetFilterMask@i,w,c
 10036  00177C  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 10037  00177E  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 10038  001780  90D8               	bcf	status,0,c
 10039  001782  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10040  001784  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10041  001786  90D8               	bcf	status,0,c
 10042  001788  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10043  00178A  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10044  00178C  90D8               	bcf	status,0,c
 10045  00178E  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10046  001790  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10047  001792  0E46               	movlw	70
 10048  001794  2419               	addwf	??_calculateSetFilterMask+7,w,c
 10049  001796  6E08               	movwf	?_readEEPROM,c
 10050  001798  0E00               	movlw	0
 10051  00179A  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 10052  00179C  6E09               	movwf	?_readEEPROM+1,c
 10053  00179E  EC81  F01F         	call	_readEEPROM	;wreg free
 10054  0017A2  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 10055  0017A4  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 10056  0017A8  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 10057  0017AA  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 10058  0017AC  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 10059  0017AE  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 10060  0017B2  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 10061  0017B6  6A1D               	clrf	??_calculateSetFilterMask+11,c
 10062  0017B8  6A1C               	clrf	??_calculateSetFilterMask+10,c
 10063  0017BA  5043               	movf	calculateSetFilterMask@i,w,c
 10064  0017BC  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 10065  0017BE  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 10066  0017C0  90D8               	bcf	status,0,c
 10067  0017C2  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10068  0017C4  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10069  0017C6  90D8               	bcf	status,0,c
 10070  0017C8  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10071  0017CA  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10072  0017CC  90D8               	bcf	status,0,c
 10073  0017CE  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10074  0017D0  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10075  0017D2  0E44               	movlw	68
 10076  0017D4  2420               	addwf	??_calculateSetFilterMask+14,w,c
 10077  0017D6  6E08               	movwf	?_readEEPROM,c
 10078  0017D8  0E00               	movlw	0
 10079  0017DA  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 10080  0017DC  6E09               	movwf	?_readEEPROM+1,c
 10081  0017DE  EC81  F01F         	call	_readEEPROM	;wreg free
 10082  0017E2  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 10083  0017E4  0E01               	movlw	1
 10084  0017E6  1622               	andwf	??_calculateSetFilterMask+16,f,c
 10085  0017E8  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 10086  0017EC  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 10087  0017EE  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 10088  0017F0  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 10089  0017F2  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
 10090  0017F6  6A25               	clrf	??_calculateSetFilterMask+19,c
 10091  0017F8  6A24               	clrf	??_calculateSetFilterMask+18,c
 10092  0017FA  6A23               	clrf	??_calculateSetFilterMask+17,c
 10093  0017FC  501C               	movf	??_calculateSetFilterMask+10,w,c
 10094  0017FE  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 10095  001800  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 10096  001802  501D               	movf	??_calculateSetFilterMask+11,w,c
 10097  001804  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 10098  001806  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 10099  001808  501E               	movf	??_calculateSetFilterMask+12,w,c
 10100  00180A  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 10101  00180C  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 10102  00180E  501F               	movf	??_calculateSetFilterMask+13,w,c
 10103  001810  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 10104  001812  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 10105  001814  5015               	movf	??_calculateSetFilterMask+3,w,c
 10106  001816  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 10107  001818  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 10108  00181A  5016               	movf	??_calculateSetFilterMask+4,w,c
 10109  00181C  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 10110  00181E  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 10111  001820  5017               	movf	??_calculateSetFilterMask+5,w,c
 10112  001822  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 10113  001824  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 10114  001826  5018               	movf	??_calculateSetFilterMask+6,w,c
 10115  001828  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10116  00182A  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10117  00182C  5043               	movf	calculateSetFilterMask@i,w,c
 10118  00182E  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
 10119  001830  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
 10120  001832  90D8               	bcf	status,0,c
 10121  001834  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10122  001836  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10123  001838  90D8               	bcf	status,0,c
 10124  00183A  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10125  00183C  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10126  00183E  90D8               	bcf	status,0,c
 10127  001840  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10128  001842  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10129  001844  0E43               	movlw	67
 10130  001846  242F               	addwf	??_calculateSetFilterMask+29,w,c
 10131  001848  6E08               	movwf	?_readEEPROM,c
 10132  00184A  0E00               	movlw	0
 10133  00184C  2030               	addwfc	??_calculateSetFilterMask+30,w,c
 10134  00184E  6E09               	movwf	?_readEEPROM+1,c
 10135  001850  EC81  F01F         	call	_readEEPROM	;wreg free
 10136  001854  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10137  001856  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
 10138  001858  502C               	movf	??_calculateSetFilterMask+26,w,c
 10139  00185A  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
 10140  00185C  502D               	movf	??_calculateSetFilterMask+27,w,c
 10141  00185E  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
 10142  001860  502E               	movf	??_calculateSetFilterMask+28,w,c
 10143  001862  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
 10144                           
 10145                           ;main.c: 2640: if ( 0 == i ) filter = rowfilter;
 10146  001864  6643               	tstfsz	calculateSetFilterMask@i,c
 10147  001866  D008               	goto	l8485
 10148  001868  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
 10149  00186C  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
 10150  001870  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
 10151  001874  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
 10152  001878                     l8485:
 10153                           
 10154                           ;main.c: 2644: mask &= rowmask;
 10155  001878  5031               	movf	calculateSetFilterMask@rowmask,w,c
 10156  00187A  1636               	andwf	calculateSetFilterMask@mask,f,c
 10157  00187C  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
 10158  00187E  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10159  001880  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
 10160  001882  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10161  001884  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
 10162  001886  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10163                           
 10164                           ;main.c: 2649: for ( j=0; j<32; j++ ) {
 10165  001888  6A42               	clrf	calculateSetFilterMask@j,c
 10166  00188A                     l8493:
 10167                           
 10168                           ;main.c: 2651: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
 10169  00188A  5042               	movf	calculateSetFilterMask@j,w,c
 10170  00188C  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
 10171  001890  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
 10172  001894  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
 10173  001898  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
 10174  00189C  2AE8               	incf	wreg,f,c
 10175  00189E  D005               	goto	u9830
 10176  0018A0                     u9835:
 10177  0018A0  90D8               	bcf	status,0,c
 10178  0018A2  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10179  0018A4  3214               	rrcf	??_calculateSetFilterMask+2,f,c
 10180  0018A6  3213               	rrcf	??_calculateSetFilterMask+1,f,c
 10181  0018A8  3212               	rrcf	??_calculateSetFilterMask,f,c
 10182  0018AA                     u9830:
 10183  0018AA  2EE8               	decfsz	wreg,f,c
 10184  0018AC  D7F9               	goto	u9835
 10185  0018AE  0E01               	movlw	1
 10186  0018B0  1612               	andwf	??_calculateSetFilterMask,f,c
 10187  0018B2  5042               	movf	calculateSetFilterMask@j,w,c
 10188  0018B4  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
 10189  0018B8  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
 10190  0018BC  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
 10191  0018C0  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
 10192  0018C4  2AE8               	incf	wreg,f,c
 10193  0018C6  D005               	goto	u9840
 10194  0018C8                     u9845:
 10195  0018C8  90D8               	bcf	status,0,c
 10196  0018CA  3219               	rrcf	??_calculateSetFilterMask+7,f,c
 10197  0018CC  3218               	rrcf	??_calculateSetFilterMask+6,f,c
 10198  0018CE  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10199  0018D0  3216               	rrcf	??_calculateSetFilterMask+4,f,c
 10200  0018D2                     u9840:
 10201  0018D2  2EE8               	decfsz	wreg,f,c
 10202  0018D4  D7F9               	goto	u9845
 10203  0018D6  5016               	movf	??_calculateSetFilterMask+4,w,c
 10204  0018D8  0B01               	andlw	1
 10205  0018DA  1812               	xorwf	??_calculateSetFilterMask,w,c
 10206  0018DC  E01D               	bz	l8497
 10207                           
 10208                           ;main.c: 2652: mask &= ~(1<<j);
 10209  0018DE  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
 10210  0018E2  0E01               	movlw	1
 10211  0018E4  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10212  0018E6  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10213  0018E8  2A12               	incf	??_calculateSetFilterMask,f,c
 10214  0018EA  D003               	goto	u9864
 10215  0018EC                     u9865:
 10216  0018EC  90D8               	bcf	status,0,c
 10217  0018EE  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10218  0018F0  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10219  0018F2                     u9864:
 10220  0018F2  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10221  0018F4  D7FB               	goto	u9865
 10222  0018F6  1C13               	comf	??_calculateSetFilterMask+1,w,c
 10223  0018F8  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10224  0018FA  1C14               	comf	??_calculateSetFilterMask+2,w,c
 10225  0018FC  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
 10226  0018FE  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10227  001900  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10228  001902  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
 10229  001904  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
 10230  001906  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10231  001908  5015               	movf	??_calculateSetFilterMask+3,w,c
 10232  00190A  1636               	andwf	calculateSetFilterMask@mask,f,c
 10233  00190C  5016               	movf	??_calculateSetFilterMask+4,w,c
 10234  00190E  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10235  001910  5017               	movf	??_calculateSetFilterMask+5,w,c
 10236  001912  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10237  001914  5018               	movf	??_calculateSetFilterMask+6,w,c
 10238  001916  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10239  001918                     l8497:
 10240  001918  2A42               	incf	calculateSetFilterMask@j,f,c
 10241  00191A  0E1F               	movlw	31
 10242  00191C  6442               	cpfsgt	calculateSetFilterMask@j,c
 10243  00191E  D7B5               	goto	l8493
 10244                           
 10245                           ;main.c: 2653: }
 10246                           ;main.c: 2654: }
 10247                           ;main.c: 2660: filter &= rowfilter;
 10248  001920  503E               	movf	calculateSetFilterMask@rowfilter,w,c
 10249  001922  163A               	andwf	calculateSetFilterMask@filter,f,c
 10250  001924  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
 10251  001926  163B               	andwf	calculateSetFilterMask@filter+1,f,c
 10252  001928  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
 10253  00192A  163C               	andwf	calculateSetFilterMask@filter+2,f,c
 10254  00192C  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
 10255  00192E  163D               	andwf	calculateSetFilterMask@filter+3,f,c
 10256                           
 10257                           ;main.c: 2668: }
 10258                           ;main.c: 2670: if (i) {
 10259                           
 10260                           ;main.c: 2663: if ( !readEEPROM( 0x43 + 8*i + 1 ) & 0x40 ) {
 10261  001930  5043               	movf	calculateSetFilterMask@i,w,c
 10262  001932  E04F               	bz	l8517
 10263                           
 10264                           ;main.c: 2673: for (j = 0; j < 8; j++) {
 10265  001934  6A42               	clrf	calculateSetFilterMask@j,c
 10266  001936                     l8511:
 10267                           
 10268                           ;main.c: 2674: if ((lastOID >> i & 1)
 10269                           ;main.c: 2675: != (readEEPROM(0x43 + 8 * i) >> i & 1)) {
 10270  001936  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10271  00193A  5043               	movf	calculateSetFilterMask@i,w,c
 10272  00193C  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10273  00193E  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10274  001940  90D8               	bcf	status,0,c
 10275  001942  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10276  001944  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10277  001946  90D8               	bcf	status,0,c
 10278  001948  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10279  00194A  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10280  00194C  90D8               	bcf	status,0,c
 10281  00194E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10282  001950  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10283  001952  0E43               	movlw	67
 10284  001954  2413               	addwf	??_calculateSetFilterMask+1,w,c
 10285  001956  6E08               	movwf	?_readEEPROM,c
 10286  001958  0E00               	movlw	0
 10287  00195A  2014               	addwfc	??_calculateSetFilterMask+2,w,c
 10288  00195C  6E09               	movwf	?_readEEPROM+1,c
 10289  00195E  EC81  F01F         	call	_readEEPROM	;wreg free
 10290  001962  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10291  001964  2A12               	incf	??_calculateSetFilterMask,f,c
 10292  001966  D002               	goto	u9894
 10293  001968                     u9895:
 10294  001968  90D8               	bcf	status,0,c
 10295  00196A  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10296  00196C                     u9894:
 10297  00196C  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10298  00196E  D7FC               	goto	u9895
 10299  001970  0E01               	movlw	1
 10300  001972  1615               	andwf	??_calculateSetFilterMask+3,f,c
 10301  001974  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 10302  001978  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 10303  00197C  2A16               	incf	??_calculateSetFilterMask+4,f,c
 10304  00197E  D002               	goto	u9904
 10305  001980                     u9905:
 10306  001980  90D8               	bcf	status,0,c
 10307  001982  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10308  001984                     u9904:
 10309  001984  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 10310  001986  D7FC               	goto	u9905
 10311  001988  5017               	movf	??_calculateSetFilterMask+5,w,c
 10312  00198A  0B01               	andlw	1
 10313  00198C  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 10314  00198E  E01D               	bz	l8515
 10315                           
 10316                           ;main.c: 2676: mask &= (1 << i);
 10317  001990  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10318  001994  0E01               	movlw	1
 10319  001996  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10320  001998  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10321  00199A  2A12               	incf	??_calculateSetFilterMask,f,c
 10322  00199C  D003               	goto	u9924
 10323  00199E                     u9925:
 10324  00199E  90D8               	bcf	status,0,c
 10325  0019A0  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10326  0019A2  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10327  0019A4                     u9924:
 10328  0019A4  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10329  0019A6  D7FB               	goto	u9925
 10330  0019A8  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 10331  0019AC  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 10332  0019B0  0E00               	movlw	0
 10333  0019B2  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10334  0019B4  0EFF               	movlw	255
 10335  0019B6  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 10336  0019B8  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10337  0019BA  5015               	movf	??_calculateSetFilterMask+3,w,c
 10338  0019BC  1636               	andwf	calculateSetFilterMask@mask,f,c
 10339  0019BE  5016               	movf	??_calculateSetFilterMask+4,w,c
 10340  0019C0  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10341  0019C2  5017               	movf	??_calculateSetFilterMask+5,w,c
 10342  0019C4  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10343  0019C6  5018               	movf	??_calculateSetFilterMask+6,w,c
 10344  0019C8  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10345  0019CA                     l8515:
 10346  0019CA  2A42               	incf	calculateSetFilterMask@j,f,c
 10347  0019CC  0E07               	movlw	7
 10348  0019CE  6442               	cpfsgt	calculateSetFilterMask@j,c
 10349  0019D0  D7B2               	goto	l8511
 10350  0019D2                     l8517:
 10351                           
 10352                           ;main.c: 2677: }
 10353                           ;main.c: 2678: }
 10354                           ;main.c: 2680: lastOID = readEEPROM(0x43 + 8 * i);
 10355  0019D2  5043               	movf	calculateSetFilterMask@i,w,c
 10356  0019D4  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10357  0019D6  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10358  0019D8  90D8               	bcf	status,0,c
 10359  0019DA  3612               	rlcf	??_calculateSetFilterMask,f,c
 10360  0019DC  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10361  0019DE  90D8               	bcf	status,0,c
 10362  0019E0  3612               	rlcf	??_calculateSetFilterMask,f,c
 10363  0019E2  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10364  0019E4  90D8               	bcf	status,0,c
 10365  0019E6  3612               	rlcf	??_calculateSetFilterMask,f,c
 10366  0019E8  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10367  0019EA  0E43               	movlw	67
 10368  0019EC  2412               	addwf	??_calculateSetFilterMask,w,c
 10369  0019EE  6E08               	movwf	?_readEEPROM,c
 10370  0019F0  0E00               	movlw	0
 10371  0019F2  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10372  0019F4  6E09               	movwf	?_readEEPROM+1,c
 10373  0019F6  EC81  F01F         	call	_readEEPROM	;wreg free
 10374  0019FA  6E35               	movwf	calculateSetFilterMask@lastOID,c
 10375  0019FC                     l8521:
 10376  0019FC  2A43               	incf	calculateSetFilterMask@i,f,c
 10377  0019FE  0E06               	movlw	6
 10378  001A00  6443               	cpfsgt	calculateSetFilterMask@i,c
 10379  001A02  D5FD               	goto	l8477
 10380                           
 10381                           ;main.c: 2685: }
 10382                           ;main.c: 2687: }
 10383                           ;main.c: 2688: }
 10384                           ;main.c: 2691: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 10385  001A04  0E80               	movlw	128
 10386  001A06  EC33  F01F         	call	_ECANSetOperationMode
 10387                           
 10388                           ;main.c: 2694: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 10389  001A0A  010F               	movlb	15	; () banked
 10390  001A0C  0E0F               	movlw	15	;volatile
 10391  001A0E  6E09               	movwf	?__CANIDToRegs+1,c
 10392  001A10  0E1C               	movlw	28	;volatile
 10393  001A12  6E08               	movwf	?__CANIDToRegs,c
 10394  001A14  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 10395  001A18  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 10396  001A1C  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 10397  001A20  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 10398  001A24  0E01               	movlw	1
 10399  001A26  6E0E               	movwf	?__CANIDToRegs+6,c
 10400  001A28  EC5B  F017         	call	__CANIDToRegs	;wreg free
 10401                           
 10402                           ;main.c: 2697: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 10403  001A2C  010D               	movlb	13	; () banked
 10404  001A2E  83D4               	bsf	212,1,b	;volatile
 10405                           
 10406                           ; BSR set to: 13
 10407  001A30  010F               	movlb	15	; () banked
 10408  001A32  0E0F               	movlw	15	;volatile
 10409  001A34  6E09               	movwf	?__CANIDToRegs+1,c
 10410  001A36  0E04               	movlw	4	;volatile
 10411  001A38  6E08               	movwf	?__CANIDToRegs,c
 10412  001A3A  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 10413  001A3E  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 10414  001A42  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 10415  001A46  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 10416  001A4A  0E01               	movlw	1
 10417  001A4C  6E0E               	movwf	?__CANIDToRegs+6,c
 10418  001A4E  EC5B  F017         	call	__CANIDToRegs	;wreg free
 10419                           
 10420                           ;main.c: 2700: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 10421  001A52  0E00               	movlw	0
 10422  001A54  EF33  F01F         	goto	_ECANSetOperationMode
 10423  001A58                     __end_of_calculateSetFilterMask:
 10424                           	opt stack 0
 10425                           tblptru	equ	0xFF8
 10426                           prodh	equ	0xFF4
 10427                           prodl	equ	0xFF3
 10428                           postinc0	equ	0xFEE
 10429                           wreg	equ	0xFE8
 10430                           indf2	equ	0xFDF
 10431                           postinc2	equ	0xFDE
 10432                           postdec2	equ	0xFDD
 10433                           fsr2h	equ	0xFDA
 10434                           fsr2l	equ	0xFD9
 10435                           status	equ	0xFD8
 10436                           
 10437 ;; *************** function _SendInformationEvent *****************
 10438 ;; Defined at:
 10439 ;;		line 1564 in file "../main.c"
 10440 ;; Parameters:    Size  Location     Type
 10441 ;;  idx             1    wreg     unsigned char 
 10442 ;;  eventClass      1   20[BANK0 ] unsigned char 
 10443 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
 10444 ;; Auto vars:     Size  Location     Type
 10445 ;;  idx             1   79[COMRAM] unsigned char 
 10446 ;;  data            3   76[COMRAM] unsigned char [3]
 10447 ;; Return value:  Size  Location     Type
 10448 ;;		None               void
 10449 ;; Registers used:
 10450 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10451 ;; Tracked objects:
 10452 ;;		On entry : F/0
 10453 ;;		On exit  : F/0
 10454 ;;		Unchanged: 0/0
 10455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10456 ;;      Params:         0       2       0       0       0       0       0
 10457 ;;      Locals:         4       0       0       0       0       0       0
 10458 ;;      Temps:          2       0       0       0       0       0       0
 10459 ;;      Totals:         6       2       0       0       0       0       0
 10460 ;;Total ram usage:        8 bytes
 10461 ;; Hardware stack levels used:    1
 10462 ;; Hardware stack levels required when called:    6
 10463 ;; This function calls:
 10464 ;;		_readEEPROM
 10465 ;;		_sendVSCPFrame
 10466 ;; This function is called by:
 10467 ;;		_doApplicationOneSecondWork
 10468 ;;		_vscp_writeAppReg
 10469 ;;		_doActionOn
 10470 ;;		_doActionOff
 10471 ;;		_doActionStatus
 10472 ;;		_doActionToggle
 10473 ;; This function uses a non-reentrant model
 10474 ;;
 10475                           
 10476                           	psect	text28
 10477  0039D4                     __ptext28:
 10478                           	opt stack 0
 10479  0039D4                     _SendInformationEvent:
 10480                           	opt stack 22
 10481                           
 10482                           ;incstack = 0
 10483                           ;incstack = 0
 10484                           ;SendInformationEvent@idx stored from wreg
 10485  0039D4  CFE8 F050          	movff	wreg,SendInformationEvent@idx
 10486                           
 10487                           ; BSR set to: 0
 10488                           ;main.c: 1565: uint8_t data[3];
 10489                           ;main.c: 1578: data[ 0 ] = idx;
 10490  0039D8  C050  F04D         	movff	SendInformationEvent@idx,SendInformationEvent@data
 10491                           
 10492                           ; BSR set to: 0
 10493                           ;main.c: 1579: data[ 1 ] = readEEPROM( 0x43 + 50 + 2*idx );
 10494  0039DC  90D8               	bcf	status,0,c
 10495  0039DE  3450               	rlcf	SendInformationEvent@idx,w,c
 10496  0039E0  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10497  0039E2  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10498  0039E4  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10499  0039E6  0E75               	movlw	117
 10500  0039E8  244B               	addwf	??_SendInformationEvent,w,c
 10501  0039EA  6E08               	movwf	?_readEEPROM,c
 10502  0039EC  0E00               	movlw	0
 10503  0039EE  204C               	addwfc	??_SendInformationEvent+1,w,c
 10504  0039F0  6E09               	movwf	?_readEEPROM+1,c
 10505  0039F2  EC81  F01F         	call	_readEEPROM	;wreg free
 10506  0039F6  6E4E               	movwf	SendInformationEvent@data+1,c
 10507                           
 10508                           ;main.c: 1580: data[ 2 ] = readEEPROM( 0x43 + 51 + 2*idx );
 10509  0039F8  90D8               	bcf	status,0,c
 10510  0039FA  3450               	rlcf	SendInformationEvent@idx,w,c
 10511  0039FC  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10512  0039FE  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10513  003A00  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10514  003A02  0E76               	movlw	118
 10515  003A04  244B               	addwf	??_SendInformationEvent,w,c
 10516  003A06  6E08               	movwf	?_readEEPROM,c
 10517  003A08  0E00               	movlw	0
 10518  003A0A  204C               	addwfc	??_SendInformationEvent+1,w,c
 10519  003A0C  6E09               	movwf	?_readEEPROM+1,c
 10520  003A0E  EC81  F01F         	call	_readEEPROM	;wreg free
 10521  003A12  6E4F               	movwf	SendInformationEvent@data+2,c
 10522                           
 10523                           ;main.c: 1581: sendVSCPFrame( eventClass,
 10524                           ;main.c: 1582: eventTypeId,
 10525                           ;main.c: 1583: vscp_nickname,
 10526                           ;main.c: 1584: 0x03,
 10527                           ;main.c: 1585: 3,
 10528                           ;main.c: 1586: data );
 10529  003A14  0100               	movlb	0	; () banked
 10530  003A16  C0CA  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
 10531  003A1A  6A40               	clrf	?_sendVSCPFrame+1,c
 10532  003A1C  C0CB  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
 10533  003A20  C096  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 10534  003A24  0E03               	movlw	3
 10535  003A26  6E43               	movwf	?_sendVSCPFrame+4,c
 10536  003A28  6E44               	movwf	?_sendVSCPFrame+5,c
 10537  003A2A  0E4D               	movlw	low SendInformationEvent@data
 10538  003A2C  6E45               	movwf	?_sendVSCPFrame+6,c
 10539  003A2E  0E00               	movlw	high SendInformationEvent@data
 10540  003A30  6E46               	movwf	?_sendVSCPFrame+7,c
 10541  003A32  0E0F               	movlw	15
 10542  003A34  6E46               	movwf	?_sendVSCPFrame+7,c
 10543  003A36  0E5F               	movlw	__accesstop+-1
 10544  003A38  6445               	cpfsgt	?_sendVSCPFrame+6,c
 10545  003A3A  6A46               	clrf	?_sendVSCPFrame+7,c
 10546  003A3C  EF3C  F01B         	goto	_sendVSCPFrame	;wreg free
 10547  003A40                     __end_of_SendInformationEvent:
 10548                           	opt stack 0
 10549                           tblptru	equ	0xFF8
 10550                           prodh	equ	0xFF4
 10551                           prodl	equ	0xFF3
 10552                           postinc0	equ	0xFEE
 10553                           wreg	equ	0xFE8
 10554                           indf2	equ	0xFDF
 10555                           postinc2	equ	0xFDE
 10556                           postdec2	equ	0xFDD
 10557                           fsr2h	equ	0xFDA
 10558                           fsr2l	equ	0xFD9
 10559                           status	equ	0xFD8
 10560                           
 10561 ;; *************** function _vscp_readRegister *****************
 10562 ;; Defined at:
 10563 ;;		line 553 in file "../../vscp_firmware/common/vscp_firmware.c"
 10564 ;; Parameters:    Size  Location     Type
 10565 ;;  reg             1    wreg     unsigned char 
 10566 ;; Auto vars:     Size  Location     Type
 10567 ;;  reg             1   13[COMRAM] unsigned char 
 10568 ;; Return value:  Size  Location     Type
 10569 ;;                  1    wreg      unsigned char 
 10570 ;; Registers used:
 10571 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10572 ;; Tracked objects:
 10573 ;;		On entry : F/0
 10574 ;;		On exit  : 0/0
 10575 ;;		Unchanged: 0/0
 10576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10577 ;;      Params:         0       0       0       0       0       0       0
 10578 ;;      Locals:         1       0       0       0       0       0       0
 10579 ;;      Temps:          0       0       0       0       0       0       0
 10580 ;;      Totals:         1       0       0       0       0       0       0
 10581 ;;Total ram usage:        1 bytes
 10582 ;; Hardware stack levels used:    1
 10583 ;; Hardware stack levels required when called:    5
 10584 ;; This function calls:
 10585 ;;		_vscp_readAppReg
 10586 ;;		_vscp_readStdReg
 10587 ;; This function is called by:
 10588 ;;		_vscp_handleProtocolEvent
 10589 ;; This function uses a non-reentrant model
 10590 ;;
 10591                           
 10592                           	psect	text29
 10593  003E04                     __ptext29:
 10594                           	opt stack 0
 10595  003E04                     _vscp_readRegister:
 10596                           	opt stack 23
 10597                           
 10598                           ; BSR set to: 0
 10599                           ;incstack = 0
 10600                           ;incstack = 0
 10601                           ;vscp_readRegister@reg stored from wreg
 10602  003E04  CFE8 F00E          	movff	wreg,vscp_readRegister@reg
 10603                           
 10604                           ; BSR set to: 0
 10605                           ;vscp_firmware.c: 554: if (reg >= 0x80) {
 10606  003E08  0E7F               	movlw	127
 10607  003E0A  640E               	cpfsgt	vscp_readRegister@reg,c
 10608  003E0C  D004               	goto	l8997
 10609                           
 10610                           ; BSR set to: 0
 10611                           ;vscp_firmware.c: 555: return vscp_readStdReg(reg);
 10612  003E0E  500E               	movf	vscp_readRegister@reg,w,c
 10613  003E10  ECA0  F019         	call	_vscp_readStdReg
 10614  003E14  D003               	goto	l1108
 10615  003E16                     l8997:
 10616                           
 10617                           ; BSR set to: 0
 10618                           ;vscp_firmware.c: 557: return vscp_readAppReg(reg);
 10619  003E16  500E               	movf	vscp_readRegister@reg,w,c
 10620  003E18  EC97  F01B         	call	_vscp_readAppReg
 10621  003E1C                     l1108:
 10622  003E1C  0012               	return	
 10623  003E1E                     __end_of_vscp_readRegister:
 10624                           	opt stack 0
 10625                           tblptru	equ	0xFF8
 10626                           prodh	equ	0xFF4
 10627                           prodl	equ	0xFF3
 10628                           postinc0	equ	0xFEE
 10629                           wreg	equ	0xFE8
 10630                           indf2	equ	0xFDF
 10631                           postinc2	equ	0xFDE
 10632                           postdec2	equ	0xFDD
 10633                           fsr2h	equ	0xFDA
 10634                           fsr2l	equ	0xFD9
 10635                           status	equ	0xFD8
 10636                           
 10637 ;; *************** function _vscp_readStdReg *****************
 10638 ;; Defined at:
 10639 ;;		line 566 in file "../../vscp_firmware/common/vscp_firmware.c"
 10640 ;; Parameters:    Size  Location     Type
 10641 ;;  reg             1    wreg     unsigned char 
 10642 ;; Auto vars:     Size  Location     Type
 10643 ;;  reg             1   12[COMRAM] unsigned char 
 10644 ;;  rv              1   11[COMRAM] unsigned char 
 10645 ;; Return value:  Size  Location     Type
 10646 ;;                  1    wreg      unsigned char 
 10647 ;; Registers used:
 10648 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10649 ;; Tracked objects:
 10650 ;;		On entry : F/0
 10651 ;;		On exit  : 0/0
 10652 ;;		Unchanged: 0/0
 10653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10654 ;;      Params:         0       0       0       0       0       0       0
 10655 ;;      Locals:         2       0       0       0       0       0       0
 10656 ;;      Temps:          0       0       0       0       0       0       0
 10657 ;;      Totals:         2       0       0       0       0       0       0
 10658 ;;Total ram usage:        2 bytes
 10659 ;; Hardware stack levels used:    1
 10660 ;; Hardware stack levels required when called:    4
 10661 ;; This function calls:
 10662 ;;		_vscp_getMajorVersion
 10663 ;;		_vscp_getMinorVersion
 10664 ;;		_vscp_getSubMinorVersion
 10665 ;;		_vscp_getGUID
 10666 ;;		_vscp_getMDF_URL
 10667 ;;		_vscp_getUserID
 10668 ;;		_vscp_getManufacturerId
 10669 ;;		_vscp_getBootLoaderAlgorithm
 10670 ;;		_vscp_getBufferSize
 10671 ;;		_vscp_getRegisterPagesUsed
 10672 ;; This function is called by:
 10673 ;;		_vscp_readRegister
 10674 ;;		_vscp_handleProtocolEvent
 10675 ;; This function uses a non-reentrant model
 10676 ;;
 10677                           
 10678                           	psect	text30
 10679  003340                     __ptext30:
 10680                           	opt stack 0
 10681  003340                     _vscp_readStdReg:
 10682                           	opt stack 24
 10683                           
 10684                           ;incstack = 0
 10685                           ;incstack = 0
 10686                           ;vscp_readStdReg@reg stored from wreg
 10687  003340  CFE8 F00D          	movff	wreg,vscp_readStdReg@reg
 10688                           
 10689                           ; BSR set to: 0
 10690                           ;vscp_firmware.c: 569: if (0x80 == reg) {
 10691                           
 10692                           ; BSR set to: 0
 10693  003344  500D               	movf	vscp_readStdReg@reg,w,c
 10694  003346  0A80               	xorlw	128
 10695  003348  E104               	bnz	l9007
 10696                           
 10697                           ; BSR set to: 0
 10698                           ;vscp_firmware.c: 572: rv = vscp_alarmstatus;
 10699  00334A  C091  F00C         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 10700                           
 10701                           ;vscp_firmware.c: 573: vscp_alarmstatus = 0x00;
 10702  00334E  6B91               	clrf	_vscp_alarmstatus& (0+255),b
 10703                           
 10704                           ;vscp_firmware.c: 575: }
 10705  003350  D067               	goto	l9073
 10706  003352                     l9007:
 10707                           
 10708                           ; BSR set to: 0
 10709                           ;vscp_firmware.c: 576: else if (0x81 == reg) {
 10710  003352  500D               	movf	vscp_readStdReg@reg,w,c
 10711  003354  0A81               	xorlw	129
 10712  003356  E102               	bnz	l9011
 10713                           
 10714                           ; BSR set to: 0
 10715                           ;vscp_firmware.c: 579: rv = 1;
 10716  003358  0E01               	movlw	1
 10717  00335A  D061               	goto	L27
 10718  00335C                     l9011:
 10719                           
 10720                           ; BSR set to: 0
 10721                           ;vscp_firmware.c: 582: else if (0x82 == reg) {
 10722  00335C  500D               	movf	vscp_readStdReg@reg,w,c
 10723  00335E  0A82               	xorlw	130
 10724  003360  E102               	bnz	l9015
 10725                           
 10726                           ; BSR set to: 0
 10727                           ;vscp_firmware.c: 585: rv = 5;
 10728  003362  0E05               	movlw	5
 10729  003364  D05C               	goto	L27
 10730  003366                     l9015:
 10731                           
 10732                           ; BSR set to: 0
 10733                           ;vscp_firmware.c: 588: else if (0x83 == reg) {
 10734  003366  500D               	movf	vscp_readStdReg@reg,w,c
 10735  003368  0A83               	xorlw	131
 10736  00336A  E102               	bnz	l9019
 10737                           
 10738                           ; BSR set to: 0
 10739                           ;vscp_firmware.c: 591: rv = 0;
 10740  00336C  6A0C               	clrf	vscp_readStdReg@rv,c
 10741                           
 10742                           ;vscp_firmware.c: 593: }
 10743  00336E  D058               	goto	l9073
 10744  003370                     l9019:
 10745                           
 10746                           ; BSR set to: 0
 10747                           ;vscp_firmware.c: 594: else if (0x94 == reg) {
 10748  003370  500D               	movf	vscp_readStdReg@reg,w,c
 10749  003372  0A94               	xorlw	148
 10750  003374  E103               	bnz	l9023
 10751                           
 10752                           ; BSR set to: 0
 10753                           ;vscp_firmware.c: 597: rv = vscp_getMajorVersion();
 10754  003376  ECBD  F01F         	call	_vscp_getMajorVersion	;wreg free
 10755  00337A  D051               	goto	L27
 10756  00337C                     l9023:
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;vscp_firmware.c: 600: else if (0x95 == reg) {
 10760  00337C  500D               	movf	vscp_readStdReg@reg,w,c
 10761  00337E  0A95               	xorlw	149
 10762  003380  E103               	bnz	l9027
 10763                           
 10764                           ; BSR set to: 0
 10765                           ;vscp_firmware.c: 603: rv = vscp_getMinorVersion();
 10766  003382  ECBC  F01F         	call	_vscp_getMinorVersion	;wreg free
 10767  003386  D04B               	goto	L27
 10768  003388                     l9027:
 10769                           
 10770                           ; BSR set to: 0
 10771                           ;vscp_firmware.c: 606: else if (0x96 == reg) {
 10772  003388  500D               	movf	vscp_readStdReg@reg,w,c
 10773  00338A  0A96               	xorlw	150
 10774  00338C  E103               	bnz	l9031
 10775                           
 10776                           ; BSR set to: 0
 10777                           ;vscp_firmware.c: 609: rv = vscp_getSubMinorVersion();
 10778  00338E  ECBB  F01F         	call	_vscp_getSubMinorVersion	;wreg free
 10779  003392  D045               	goto	L27
 10780  003394                     l9031:
 10781                           
 10782                           ; BSR set to: 0
 10783                           ;vscp_firmware.c: 612: else if (reg < 0x89) {
 10784  003394  0E89               	movlw	137
 10785  003396  600D               	cpfslt	vscp_readStdReg@reg,c
 10786  003398  D005               	goto	l9035
 10787                           
 10788                           ; BSR set to: 0
 10789                           ;vscp_firmware.c: 615: rv = vscp_getUserID(reg - 0x84);
 10790  00339A  500D               	movf	vscp_readStdReg@reg,w,c
 10791  00339C  0F7C               	addlw	124
 10792  00339E  EC49  F01F         	call	_vscp_getUserID
 10793  0033A2  D03D               	goto	L27
 10794  0033A4                     l9035:
 10795                           
 10796                           ; BSR set to: 0
 10797                           ;vscp_firmware.c: 618: else if ((reg > 0x88) &&
 10798                           ;vscp_firmware.c: 619: (reg < 0x91)) {
 10799  0033A4  0E88               	movlw	136
 10800  0033A6  640D               	cpfsgt	vscp_readStdReg@reg,c
 10801  0033A8  D008               	goto	l9041
 10802                           
 10803                           ; BSR set to: 0
 10804  0033AA  0E91               	movlw	145
 10805  0033AC  600D               	cpfslt	vscp_readStdReg@reg,c
 10806  0033AE  D005               	goto	l9041
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;vscp_firmware.c: 622: rv = vscp_getManufacturerId(reg - 0x89);
 10810  0033B0  500D               	movf	vscp_readStdReg@reg,w,c
 10811  0033B2  0F77               	addlw	119
 10812  0033B4  EC3F  F01F         	call	_vscp_getManufacturerId
 10813  0033B8  D032               	goto	L27
 10814  0033BA                     l9041:
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;vscp_firmware.c: 625: else if (0x91 == reg) {
 10818  0033BA  500D               	movf	vscp_readStdReg@reg,w,c
 10819  0033BC  0A91               	xorlw	145
 10820  0033BE  E103               	bnz	l9045
 10821                           
 10822                           ; BSR set to: 0
 10823                           ;vscp_firmware.c: 628: rv = vscp_nickname;
 10824  0033C0  C096  F00C         	movff	_vscp_nickname,vscp_readStdReg@rv
 10825                           
 10826                           ;vscp_firmware.c: 630: }
 10827  0033C4  D02D               	goto	l9073
 10828  0033C6                     l9045:
 10829                           
 10830                           ; BSR set to: 0
 10831                           ;vscp_firmware.c: 631: else if (0x93 == reg) {
 10832  0033C6  500D               	movf	vscp_readStdReg@reg,w,c
 10833  0033C8  0A93               	xorlw	147
 10834  0033CA  E103               	bnz	l9049
 10835                           
 10836                           ; BSR set to: 0
 10837                           ;vscp_firmware.c: 634: rv = (vscp_page_select & 0xff);
 10838  0033CC  C052  F00C         	movff	_vscp_page_select,vscp_readStdReg@rv
 10839                           
 10840                           ;vscp_firmware.c: 636: }
 10841  0033D0  D027               	goto	l9073
 10842  0033D2                     l9049:
 10843                           
 10844                           ; BSR set to: 0
 10845                           ;vscp_firmware.c: 638: else if (0x92 == reg) {
 10846  0033D2  500D               	movf	vscp_readStdReg@reg,w,c
 10847  0033D4  0A92               	xorlw	146
 10848  0033D6  E102               	bnz	l9053
 10849                           
 10850                           ; BSR set to: 0
 10851                           ;vscp_firmware.c: 641: rv = (vscp_page_select >> 8) & 0xff;
 10852  0033D8  5053               	movf	_vscp_page_select+1,w,c
 10853  0033DA  D021               	goto	L27
 10854  0033DC                     l9053:
 10855                           
 10856                           ; BSR set to: 0
 10857                           ;vscp_firmware.c: 644: else if (0x97 == reg) {
 10858  0033DC  500D               	movf	vscp_readStdReg@reg,w,c
 10859  0033DE  0A97               	xorlw	151
 10860  0033E0  E103               	bnz	l9057
 10861                           
 10862                           ; BSR set to: 0
 10863                           ;vscp_firmware.c: 646: rv = vscp_getBootLoaderAlgorithm();
 10864  0033E2  ECBA  F01F         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 10865  0033E6  D01B               	goto	L27
 10866  0033E8                     l9057:
 10867                           
 10868                           ; BSR set to: 0
 10869                           ;vscp_firmware.c: 648: else if (0x98 == reg) {
 10870  0033E8  500D               	movf	vscp_readStdReg@reg,w,c
 10871  0033EA  0A98               	xorlw	152
 10872  0033EC  E103               	bnz	l9061
 10873                           
 10874                           ; BSR set to: 0
 10875                           ;vscp_firmware.c: 650: rv = vscp_getBufferSize();
 10876  0033EE  ECB9  F01F         	call	_vscp_getBufferSize	;wreg free
 10877  0033F2  D015               	goto	L27
 10878  0033F4                     l9061:
 10879                           
 10880                           ; BSR set to: 0
 10881                           ;vscp_firmware.c: 652: else if (0x99 == reg) {
 10882  0033F4  500D               	movf	vscp_readStdReg@reg,w,c
 10883  0033F6  0A99               	xorlw	153
 10884  0033F8  E103               	bnz	l9065
 10885                           
 10886                           ; BSR set to: 0
 10887                           ;vscp_firmware.c: 654: rv = vscp_getRegisterPagesUsed();
 10888  0033FA  ECB8  F01F         	call	_vscp_getRegisterPagesUsed	;wreg free
 10889  0033FE  D00F               	goto	L27
 10890  003400                     l9065:
 10891                           
 10892                           ; BSR set to: 0
 10893                           ;vscp_firmware.c: 656: else if ((reg > (0xD0 - 1)) &&
 10894                           ;vscp_firmware.c: 657: (reg < 0xE0)) {
 10895  003400  0ECF               	movlw	207
 10896  003402  640D               	cpfsgt	vscp_readStdReg@reg,c
 10897  003404  D008               	goto	l9071
 10898                           
 10899                           ; BSR set to: 0
 10900  003406  0EE0               	movlw	224
 10901  003408  600D               	cpfslt	vscp_readStdReg@reg,c
 10902  00340A  D005               	goto	l9071
 10903                           
 10904                           ; BSR set to: 0
 10905                           ;vscp_firmware.c: 660: rv = vscp_getGUID(reg - 0xD0);
 10906  00340C  500D               	movf	vscp_readStdReg@reg,w,c
 10907  00340E  0F30               	addlw	48
 10908  003410  EC53  F01F         	call	_vscp_getGUID
 10909  003414  D004               	goto	L27
 10910  003416                     l9071:
 10911                           
 10912                           ; BSR set to: 0
 10913                           ;vscp_firmware.c: 663: else {
 10914                           ;vscp_firmware.c: 666: rv = vscp_getMDF_URL(reg - 0xE0);
 10915  003416  500D               	movf	vscp_readStdReg@reg,w,c
 10916  003418  0F20               	addlw	32
 10917  00341A  EC1B  F01F         	call	_vscp_getMDF_URL
 10918  00341E                     L27:
 10919  00341E  6E0C               	movwf	vscp_readStdReg@rv,c
 10920  003420                     l9073:
 10921                           
 10922                           ;vscp_firmware.c: 668: }
 10923                           ;vscp_firmware.c: 670: return rv;
 10924  003420  500C               	movf	vscp_readStdReg@rv,w,c
 10925  003422  0012               	return	
 10926  003424                     __end_of_vscp_readStdReg:
 10927                           	opt stack 0
 10928                           tblptru	equ	0xFF8
 10929                           prodh	equ	0xFF4
 10930                           prodl	equ	0xFF3
 10931                           postinc0	equ	0xFEE
 10932                           wreg	equ	0xFE8
 10933                           indf2	equ	0xFDF
 10934                           postinc2	equ	0xFDE
 10935                           postdec2	equ	0xFDD
 10936                           fsr2h	equ	0xFDA
 10937                           fsr2l	equ	0xFD9
 10938                           status	equ	0xFD8
 10939                           
 10940 ;; *************** function _vscp_getRegisterPagesUsed *****************
 10941 ;; Defined at:
 10942 ;;		line 2482 in file "../main.c"
 10943 ;; Parameters:    Size  Location     Type
 10944 ;;		None
 10945 ;; Auto vars:     Size  Location     Type
 10946 ;;		None
 10947 ;; Return value:  Size  Location     Type
 10948 ;;                  1    wreg      unsigned char 
 10949 ;; Registers used:
 10950 ;;		wreg
 10951 ;; Tracked objects:
 10952 ;;		On entry : F/0
 10953 ;;		On exit  : F/0
 10954 ;;		Unchanged: F/0
 10955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10956 ;;      Params:         0       0       0       0       0       0       0
 10957 ;;      Locals:         0       0       0       0       0       0       0
 10958 ;;      Temps:          0       0       0       0       0       0       0
 10959 ;;      Totals:         0       0       0       0       0       0       0
 10960 ;;Total ram usage:        0 bytes
 10961 ;; Hardware stack levels used:    1
 10962 ;; Hardware stack levels required when called:    2
 10963 ;; This function calls:
 10964 ;;		Nothing
 10965 ;; This function is called by:
 10966 ;;		_vscp_readStdReg
 10967 ;; This function uses a non-reentrant model
 10968 ;;
 10969                           
 10970                           	psect	text31
 10971  003F70                     __ptext31:
 10972                           	opt stack 0
 10973  003F70                     _vscp_getRegisterPagesUsed:
 10974                           	opt stack 25
 10975                           
 10976                           ; BSR set to: 0
 10977                           
 10978                           ; BSR set to: 0
 10979                           ;main.c: 2483: return 1;
 10980                           
 10981                           ;incstack = 0
 10982                           ;incstack = 0
 10983  003F70  0C01               	retlw	1
 10984  003F72                     __end_of_vscp_getRegisterPagesUsed:
 10985                           	opt stack 0
 10986                           tblptru	equ	0xFF8
 10987                           prodh	equ	0xFF4
 10988                           prodl	equ	0xFF3
 10989                           postinc0	equ	0xFEE
 10990                           wreg	equ	0xFE8
 10991                           indf2	equ	0xFDF
 10992                           postinc2	equ	0xFDE
 10993                           postdec2	equ	0xFDD
 10994                           fsr2h	equ	0xFDA
 10995                           fsr2l	equ	0xFD9
 10996                           status	equ	0xFD8
 10997                           
 10998 ;; *************** function _vscp_getBufferSize *****************
 10999 ;; Defined at:
 11000 ;;		line 2315 in file "../main.c"
 11001 ;; Parameters:    Size  Location     Type
 11002 ;;		None
 11003 ;; Auto vars:     Size  Location     Type
 11004 ;;		None
 11005 ;; Return value:  Size  Location     Type
 11006 ;;                  1    wreg      unsigned char 
 11007 ;; Registers used:
 11008 ;;		wreg
 11009 ;; Tracked objects:
 11010 ;;		On entry : F/0
 11011 ;;		On exit  : F/0
 11012 ;;		Unchanged: F/0
 11013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11014 ;;      Params:         0       0       0       0       0       0       0
 11015 ;;      Locals:         0       0       0       0       0       0       0
 11016 ;;      Temps:          0       0       0       0       0       0       0
 11017 ;;      Totals:         0       0       0       0       0       0       0
 11018 ;;Total ram usage:        0 bytes
 11019 ;; Hardware stack levels used:    1
 11020 ;; Hardware stack levels required when called:    2
 11021 ;; This function calls:
 11022 ;;		Nothing
 11023 ;; This function is called by:
 11024 ;;		_vscp_readStdReg
 11025 ;; This function uses a non-reentrant model
 11026 ;;
 11027                           
 11028                           	psect	text32
 11029  003F72                     __ptext32:
 11030                           	opt stack 0
 11031  003F72                     _vscp_getBufferSize:
 11032                           	opt stack 25
 11033                           
 11034                           ; BSR set to: 0
 11035                           
 11036                           ; BSR set to: 0
 11037                           ;main.c: 2316: return 8;
 11038                           
 11039                           ; BSR set to: 0
 11040                           ;incstack = 0
 11041                           ;incstack = 0
 11042  003F72  0C08               	retlw	8
 11043  003F74                     __end_of_vscp_getBufferSize:
 11044                           	opt stack 0
 11045                           tblptru	equ	0xFF8
 11046                           prodh	equ	0xFF4
 11047                           prodl	equ	0xFF3
 11048                           postinc0	equ	0xFEE
 11049                           wreg	equ	0xFE8
 11050                           indf2	equ	0xFDF
 11051                           postinc2	equ	0xFDE
 11052                           postdec2	equ	0xFDD
 11053                           fsr2h	equ	0xFDA
 11054                           fsr2l	equ	0xFD9
 11055                           status	equ	0xFD8
 11056                           
 11057 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 11058 ;; Defined at:
 11059 ;;		line 2306 in file "../main.c"
 11060 ;; Parameters:    Size  Location     Type
 11061 ;;		None
 11062 ;; Auto vars:     Size  Location     Type
 11063 ;;		None
 11064 ;; Return value:  Size  Location     Type
 11065 ;;                  1    wreg      unsigned char 
 11066 ;; Registers used:
 11067 ;;		wreg
 11068 ;; Tracked objects:
 11069 ;;		On entry : F/0
 11070 ;;		On exit  : F/0
 11071 ;;		Unchanged: F/0
 11072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11073 ;;      Params:         0       0       0       0       0       0       0
 11074 ;;      Locals:         0       0       0       0       0       0       0
 11075 ;;      Temps:          0       0       0       0       0       0       0
 11076 ;;      Totals:         0       0       0       0       0       0       0
 11077 ;;Total ram usage:        0 bytes
 11078 ;; Hardware stack levels used:    1
 11079 ;; Hardware stack levels required when called:    2
 11080 ;; This function calls:
 11081 ;;		Nothing
 11082 ;; This function is called by:
 11083 ;;		_vscp_readStdReg
 11084 ;; This function uses a non-reentrant model
 11085 ;;
 11086                           
 11087                           	psect	text33
 11088  003F74                     __ptext33:
 11089                           	opt stack 0
 11090  003F74                     _vscp_getBootLoaderAlgorithm:
 11091                           	opt stack 25
 11092                           
 11093                           ; BSR set to: 0
 11094                           
 11095                           ; BSR set to: 0
 11096                           ;main.c: 2307: return 0x01;
 11097                           
 11098                           ; BSR set to: 0
 11099                           ;incstack = 0
 11100                           ;incstack = 0
 11101  003F74  0C01               	retlw	1
 11102  003F76                     __end_of_vscp_getBootLoaderAlgorithm:
 11103                           	opt stack 0
 11104                           tblptru	equ	0xFF8
 11105                           prodh	equ	0xFF4
 11106                           prodl	equ	0xFF3
 11107                           postinc0	equ	0xFEE
 11108                           wreg	equ	0xFE8
 11109                           indf2	equ	0xFDF
 11110                           postinc2	equ	0xFDE
 11111                           postdec2	equ	0xFDD
 11112                           fsr2h	equ	0xFDA
 11113                           fsr2l	equ	0xFD9
 11114                           status	equ	0xFD8
 11115                           
 11116 ;; *************** function _vscp_getManufacturerId *****************
 11117 ;; Defined at:
 11118 ;;		line 2297 in file "../main.c"
 11119 ;; Parameters:    Size  Location     Type
 11120 ;;  idx             1    wreg     unsigned char 
 11121 ;; Auto vars:     Size  Location     Type
 11122 ;;  idx             1   10[COMRAM] unsigned char 
 11123 ;; Return value:  Size  Location     Type
 11124 ;;                  1    wreg      unsigned char 
 11125 ;; Registers used:
 11126 ;;		wreg, status,2, status,0, cstack
 11127 ;; Tracked objects:
 11128 ;;		On entry : 0/0
 11129 ;;		On exit  : 0/0
 11130 ;;		Unchanged: 0/0
 11131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11132 ;;      Params:         0       0       0       0       0       0       0
 11133 ;;      Locals:         1       0       0       0       0       0       0
 11134 ;;      Temps:          0       0       0       0       0       0       0
 11135 ;;      Totals:         1       0       0       0       0       0       0
 11136 ;;Total ram usage:        1 bytes
 11137 ;; Hardware stack levels used:    1
 11138 ;; Hardware stack levels required when called:    3
 11139 ;; This function calls:
 11140 ;;		_readEEPROM
 11141 ;; This function is called by:
 11142 ;;		_vscp_readStdReg
 11143 ;;		_vscp_writeStdReg
 11144 ;; This function uses a non-reentrant model
 11145 ;;
 11146                           
 11147                           	psect	text34
 11148  003E7E                     __ptext34:
 11149                           	opt stack 0
 11150  003E7E                     _vscp_getManufacturerId:
 11151                           	opt stack 24
 11152                           
 11153                           ; BSR set to: 0
 11154                           ;incstack = 0
 11155                           ;incstack = 0
 11156                           ;vscp_getManufacturerId@idx stored from wreg
 11157  003E7E  CFE8 F00B          	movff	wreg,vscp_getManufacturerId@idx
 11158                           
 11159                           ;main.c: 2298: return readEEPROM( 0x0B + idx );
 11160  003E82  0E0B               	movlw	11
 11161  003E84  240B               	addwf	vscp_getManufacturerId@idx,w,c
 11162  003E86  6E08               	movwf	?_readEEPROM,c
 11163  003E88  6A09               	clrf	?_readEEPROM+1,c
 11164  003E8A  0E00               	movlw	0
 11165  003E8C  2209               	addwfc	?_readEEPROM+1,f,c
 11166  003E8E  EF81  F01F         	goto	_readEEPROM	;wreg free
 11167  003E92                     __end_of_vscp_getManufacturerId:
 11168                           	opt stack 0
 11169                           tblptru	equ	0xFF8
 11170                           prodh	equ	0xFF4
 11171                           prodl	equ	0xFF3
 11172                           postinc0	equ	0xFEE
 11173                           wreg	equ	0xFE8
 11174                           indf2	equ	0xFDF
 11175                           postinc2	equ	0xFDE
 11176                           postdec2	equ	0xFDD
 11177                           fsr2h	equ	0xFDA
 11178                           fsr2l	equ	0xFD9
 11179                           status	equ	0xFD8
 11180                           
 11181 ;; *************** function _vscp_getUserID *****************
 11182 ;; Defined at:
 11183 ;;		line 2277 in file "../main.c"
 11184 ;; Parameters:    Size  Location     Type
 11185 ;;  idx             1    wreg     unsigned char 
 11186 ;; Auto vars:     Size  Location     Type
 11187 ;;  idx             1   10[COMRAM] unsigned char 
 11188 ;; Return value:  Size  Location     Type
 11189 ;;                  1    wreg      unsigned char 
 11190 ;; Registers used:
 11191 ;;		wreg, status,2, status,0, cstack
 11192 ;; Tracked objects:
 11193 ;;		On entry : 0/0
 11194 ;;		On exit  : 0/0
 11195 ;;		Unchanged: 0/0
 11196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11197 ;;      Params:         0       0       0       0       0       0       0
 11198 ;;      Locals:         1       0       0       0       0       0       0
 11199 ;;      Temps:          0       0       0       0       0       0       0
 11200 ;;      Totals:         1       0       0       0       0       0       0
 11201 ;;Total ram usage:        1 bytes
 11202 ;; Hardware stack levels used:    1
 11203 ;; Hardware stack levels required when called:    3
 11204 ;; This function calls:
 11205 ;;		_readEEPROM
 11206 ;; This function is called by:
 11207 ;;		_vscp_readStdReg
 11208 ;;		_vscp_writeStdReg
 11209 ;; This function uses a non-reentrant model
 11210 ;;
 11211                           
 11212                           	psect	text35
 11213  003E92                     __ptext35:
 11214                           	opt stack 0
 11215  003E92                     _vscp_getUserID:
 11216                           	opt stack 24
 11217                           
 11218                           ;incstack = 0
 11219                           ;incstack = 0
 11220                           ;vscp_getUserID@idx stored from wreg
 11221  003E92  CFE8 F00B          	movff	wreg,vscp_getUserID@idx
 11222                           
 11223                           ;main.c: 2278: return readEEPROM( 0x06 + idx );
 11224  003E96  0E06               	movlw	6
 11225  003E98  240B               	addwf	vscp_getUserID@idx,w,c
 11226  003E9A  6E08               	movwf	?_readEEPROM,c
 11227  003E9C  6A09               	clrf	?_readEEPROM+1,c
 11228  003E9E  0E00               	movlw	0
 11229  003EA0  2209               	addwfc	?_readEEPROM+1,f,c
 11230  003EA2  EF81  F01F         	goto	_readEEPROM	;wreg free
 11231  003EA6                     __end_of_vscp_getUserID:
 11232                           	opt stack 0
 11233                           tblptru	equ	0xFF8
 11234                           prodh	equ	0xFF4
 11235                           prodl	equ	0xFF3
 11236                           postinc0	equ	0xFEE
 11237                           wreg	equ	0xFE8
 11238                           indf2	equ	0xFDF
 11239                           postinc2	equ	0xFDE
 11240                           postdec2	equ	0xFDD
 11241                           fsr2h	equ	0xFDA
 11242                           fsr2l	equ	0xFD9
 11243                           status	equ	0xFD8
 11244                           
 11245 ;; *************** function _vscp_getMDF_URL *****************
 11246 ;; Defined at:
 11247 ;;		line 2268 in file "../main.c"
 11248 ;; Parameters:    Size  Location     Type
 11249 ;;  idx             1    wreg     unsigned char 
 11250 ;; Auto vars:     Size  Location     Type
 11251 ;;  idx             1    8[COMRAM] unsigned char 
 11252 ;; Return value:  Size  Location     Type
 11253 ;;                  1    wreg      unsigned char 
 11254 ;; Registers used:
 11255 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11256 ;; Tracked objects:
 11257 ;;		On entry : F/0
 11258 ;;		On exit  : F/0
 11259 ;;		Unchanged: F/0
 11260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11261 ;;      Params:         0       0       0       0       0       0       0
 11262 ;;      Locals:         1       0       0       0       0       0       0
 11263 ;;      Temps:          1       0       0       0       0       0       0
 11264 ;;      Totals:         2       0       0       0       0       0       0
 11265 ;;Total ram usage:        2 bytes
 11266 ;; Hardware stack levels used:    1
 11267 ;; Hardware stack levels required when called:    2
 11268 ;; This function calls:
 11269 ;;		Nothing
 11270 ;; This function is called by:
 11271 ;;		_vscp_readStdReg
 11272 ;;		_vscp_handleProtocolEvent
 11273 ;; This function uses a non-reentrant model
 11274 ;;
 11275                           
 11276                           	psect	text36
 11277  003E36                     __ptext36:
 11278                           	opt stack 0
 11279  003E36                     _vscp_getMDF_URL:
 11280                           	opt stack 25
 11281                           
 11282                           ;incstack = 0
 11283                           ;incstack = 0
 11284                           ;vscp_getMDF_URL@idx stored from wreg
 11285  003E36  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 11286                           
 11287                           ; BSR set to: 0
 11288                           ;main.c: 2269: return vscp_deviceURL[ idx ];
 11289  003E3A  5009               	movf	vscp_getMDF_URL@idx,w,c
 11290  003E3C  0F00               	addlw	low _vscp_deviceURL
 11291  003E3E  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 11292  003E40  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 11293  003E44  0E06               	movlw	high __smallconst
 11294  003E46  6EF7               	movwf	tblptrh,c
 11295  003E48  0008               	tblrd		*
 11296  003E4A  50F5               	movf	tablat,w,c
 11297                           
 11298                           ; BSR set to: 0
 11299  003E4C  0012               	return	
 11300  003E4E                     __end_of_vscp_getMDF_URL:
 11301                           	opt stack 0
 11302                           tblptru	equ	0xFF8
 11303                           tblptrh	equ	0xFF7
 11304                           tblptrl	equ	0xFF6
 11305                           tablat	equ	0xFF5
 11306                           prodh	equ	0xFF4
 11307                           prodl	equ	0xFF3
 11308                           postinc0	equ	0xFEE
 11309                           wreg	equ	0xFE8
 11310                           indf2	equ	0xFDF
 11311                           postinc2	equ	0xFDE
 11312                           postdec2	equ	0xFDD
 11313                           fsr2h	equ	0xFDA
 11314                           fsr2l	equ	0xFD9
 11315                           status	equ	0xFD8
 11316                           
 11317 ;; *************** function _vscp_getGUID *****************
 11318 ;; Defined at:
 11319 ;;		line 2256 in file "../main.c"
 11320 ;; Parameters:    Size  Location     Type
 11321 ;;  idx             1    wreg     unsigned char 
 11322 ;; Auto vars:     Size  Location     Type
 11323 ;;  idx             1   10[COMRAM] unsigned char 
 11324 ;; Return value:  Size  Location     Type
 11325 ;;                  1    wreg      unsigned char 
 11326 ;; Registers used:
 11327 ;;		wreg, status,2, status,0, cstack
 11328 ;; Tracked objects:
 11329 ;;		On entry : 0/0
 11330 ;;		On exit  : 0/0
 11331 ;;		Unchanged: 0/0
 11332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11333 ;;      Params:         0       0       0       0       0       0       0
 11334 ;;      Locals:         1       0       0       0       0       0       0
 11335 ;;      Temps:          0       0       0       0       0       0       0
 11336 ;;      Totals:         1       0       0       0       0       0       0
 11337 ;;Total ram usage:        1 bytes
 11338 ;; Hardware stack levels used:    1
 11339 ;; Hardware stack levels required when called:    3
 11340 ;; This function calls:
 11341 ;;		_readEEPROM
 11342 ;; This function is called by:
 11343 ;;		_vscp_readStdReg
 11344 ;;		_vscp_writeStdReg
 11345 ;;		_vscp_handleProtocolEvent
 11346 ;; This function uses a non-reentrant model
 11347 ;;
 11348                           
 11349                           	psect	text37
 11350  003EA6                     __ptext37:
 11351                           	opt stack 0
 11352  003EA6                     _vscp_getGUID:
 11353                           	opt stack 24
 11354                           
 11355                           ; BSR set to: 0
 11356                           ;incstack = 0
 11357                           ;incstack = 0
 11358                           ;vscp_getGUID@idx stored from wreg
 11359  003EA6  CFE8 F00B          	movff	wreg,vscp_getGUID@idx
 11360                           
 11361                           ;main.c: 2257: return readEEPROM( 0x13 + idx );
 11362  003EAA  0E13               	movlw	19
 11363  003EAC  240B               	addwf	vscp_getGUID@idx,w,c
 11364  003EAE  6E08               	movwf	?_readEEPROM,c
 11365  003EB0  6A09               	clrf	?_readEEPROM+1,c
 11366  003EB2  0E00               	movlw	0
 11367  003EB4  2209               	addwfc	?_readEEPROM+1,f,c
 11368  003EB6  EF81  F01F         	goto	_readEEPROM	;wreg free
 11369  003EBA                     __end_of_vscp_getGUID:
 11370                           	opt stack 0
 11371                           tblptru	equ	0xFF8
 11372                           tblptrh	equ	0xFF7
 11373                           tblptrl	equ	0xFF6
 11374                           tablat	equ	0xFF5
 11375                           prodh	equ	0xFF4
 11376                           prodl	equ	0xFF3
 11377                           postinc0	equ	0xFEE
 11378                           wreg	equ	0xFE8
 11379                           indf2	equ	0xFDF
 11380                           postinc2	equ	0xFDE
 11381                           postdec2	equ	0xFDD
 11382                           fsr2h	equ	0xFDA
 11383                           fsr2l	equ	0xFD9
 11384                           status	equ	0xFD8
 11385                           
 11386 ;; *************** function _vscp_getSubMinorVersion *****************
 11387 ;; Defined at:
 11388 ;;		line 2245 in file "../main.c"
 11389 ;; Parameters:    Size  Location     Type
 11390 ;;		None
 11391 ;; Auto vars:     Size  Location     Type
 11392 ;;		None
 11393 ;; Return value:  Size  Location     Type
 11394 ;;                  1    wreg      unsigned char 
 11395 ;; Registers used:
 11396 ;;		wreg
 11397 ;; Tracked objects:
 11398 ;;		On entry : F/0
 11399 ;;		On exit  : F/0
 11400 ;;		Unchanged: F/0
 11401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11402 ;;      Params:         0       0       0       0       0       0       0
 11403 ;;      Locals:         0       0       0       0       0       0       0
 11404 ;;      Temps:          0       0       0       0       0       0       0
 11405 ;;      Totals:         0       0       0       0       0       0       0
 11406 ;;Total ram usage:        0 bytes
 11407 ;; Hardware stack levels used:    1
 11408 ;; Hardware stack levels required when called:    2
 11409 ;; This function calls:
 11410 ;;		Nothing
 11411 ;; This function is called by:
 11412 ;;		_vscp_readStdReg
 11413 ;; This function uses a non-reentrant model
 11414 ;;
 11415                           
 11416                           	psect	text38
 11417  003F76                     __ptext38:
 11418                           	opt stack 0
 11419  003F76                     _vscp_getSubMinorVersion:
 11420                           	opt stack 25
 11421                           
 11422                           ; BSR set to: 0
 11423                           
 11424                           ; BSR set to: 0
 11425                           ;main.c: 2246: return 0;
 11426                           
 11427                           ;incstack = 0
 11428                           ;incstack = 0
 11429  003F76  0C00               	retlw	0
 11430  003F78                     __end_of_vscp_getSubMinorVersion:
 11431                           	opt stack 0
 11432                           tblptru	equ	0xFF8
 11433                           tblptrh	equ	0xFF7
 11434                           tblptrl	equ	0xFF6
 11435                           tablat	equ	0xFF5
 11436                           prodh	equ	0xFF4
 11437                           prodl	equ	0xFF3
 11438                           postinc0	equ	0xFEE
 11439                           wreg	equ	0xFE8
 11440                           indf2	equ	0xFDF
 11441                           postinc2	equ	0xFDE
 11442                           postdec2	equ	0xFDD
 11443                           fsr2h	equ	0xFDA
 11444                           fsr2l	equ	0xFD9
 11445                           status	equ	0xFD8
 11446                           
 11447 ;; *************** function _vscp_getMinorVersion *****************
 11448 ;; Defined at:
 11449 ;;		line 2236 in file "../main.c"
 11450 ;; Parameters:    Size  Location     Type
 11451 ;;		None
 11452 ;; Auto vars:     Size  Location     Type
 11453 ;;		None
 11454 ;; Return value:  Size  Location     Type
 11455 ;;                  1    wreg      unsigned char 
 11456 ;; Registers used:
 11457 ;;		wreg
 11458 ;; Tracked objects:
 11459 ;;		On entry : F/0
 11460 ;;		On exit  : F/0
 11461 ;;		Unchanged: F/0
 11462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11463 ;;      Params:         0       0       0       0       0       0       0
 11464 ;;      Locals:         0       0       0       0       0       0       0
 11465 ;;      Temps:          0       0       0       0       0       0       0
 11466 ;;      Totals:         0       0       0       0       0       0       0
 11467 ;;Total ram usage:        0 bytes
 11468 ;; Hardware stack levels used:    1
 11469 ;; Hardware stack levels required when called:    2
 11470 ;; This function calls:
 11471 ;;		Nothing
 11472 ;; This function is called by:
 11473 ;;		_vscp_readStdReg
 11474 ;; This function uses a non-reentrant model
 11475 ;;
 11476                           
 11477                           	psect	text39
 11478  003F78                     __ptext39:
 11479                           	opt stack 0
 11480  003F78                     _vscp_getMinorVersion:
 11481                           	opt stack 25
 11482                           
 11483                           ; BSR set to: 0
 11484                           
 11485                           ; BSR set to: 0
 11486                           ;main.c: 2237: return 1;
 11487                           
 11488                           ; BSR set to: 0
 11489                           ;incstack = 0
 11490                           ;incstack = 0
 11491  003F78  0C01               	retlw	1
 11492  003F7A                     __end_of_vscp_getMinorVersion:
 11493                           	opt stack 0
 11494                           tblptru	equ	0xFF8
 11495                           tblptrh	equ	0xFF7
 11496                           tblptrl	equ	0xFF6
 11497                           tablat	equ	0xFF5
 11498                           prodh	equ	0xFF4
 11499                           prodl	equ	0xFF3
 11500                           postinc0	equ	0xFEE
 11501                           wreg	equ	0xFE8
 11502                           indf2	equ	0xFDF
 11503                           postinc2	equ	0xFDE
 11504                           postdec2	equ	0xFDD
 11505                           fsr2h	equ	0xFDA
 11506                           fsr2l	equ	0xFD9
 11507                           status	equ	0xFD8
 11508                           
 11509 ;; *************** function _vscp_getMajorVersion *****************
 11510 ;; Defined at:
 11511 ;;		line 2227 in file "../main.c"
 11512 ;; Parameters:    Size  Location     Type
 11513 ;;		None
 11514 ;; Auto vars:     Size  Location     Type
 11515 ;;		None
 11516 ;; Return value:  Size  Location     Type
 11517 ;;                  1    wreg      unsigned char 
 11518 ;; Registers used:
 11519 ;;		wreg
 11520 ;; Tracked objects:
 11521 ;;		On entry : F/0
 11522 ;;		On exit  : F/0
 11523 ;;		Unchanged: F/0
 11524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11525 ;;      Params:         0       0       0       0       0       0       0
 11526 ;;      Locals:         0       0       0       0       0       0       0
 11527 ;;      Temps:          0       0       0       0       0       0       0
 11528 ;;      Totals:         0       0       0       0       0       0       0
 11529 ;;Total ram usage:        0 bytes
 11530 ;; Hardware stack levels used:    1
 11531 ;; Hardware stack levels required when called:    2
 11532 ;; This function calls:
 11533 ;;		Nothing
 11534 ;; This function is called by:
 11535 ;;		_vscp_readStdReg
 11536 ;; This function uses a non-reentrant model
 11537 ;;
 11538                           
 11539                           	psect	text40
 11540  003F7A                     __ptext40:
 11541                           	opt stack 0
 11542  003F7A                     _vscp_getMajorVersion:
 11543                           	opt stack 25
 11544                           
 11545                           ; BSR set to: 0
 11546                           
 11547                           ; BSR set to: 0
 11548                           ;main.c: 2228: return 1;
 11549                           
 11550                           ; BSR set to: 0
 11551                           ;incstack = 0
 11552                           ;incstack = 0
 11553  003F7A  0C01               	retlw	1
 11554  003F7C                     __end_of_vscp_getMajorVersion:
 11555                           	opt stack 0
 11556                           tblptru	equ	0xFF8
 11557                           tblptrh	equ	0xFF7
 11558                           tblptrl	equ	0xFF6
 11559                           tablat	equ	0xFF5
 11560                           prodh	equ	0xFF4
 11561                           prodl	equ	0xFF3
 11562                           postinc0	equ	0xFEE
 11563                           wreg	equ	0xFE8
 11564                           indf2	equ	0xFDF
 11565                           postinc2	equ	0xFDE
 11566                           postdec2	equ	0xFDD
 11567                           fsr2h	equ	0xFDA
 11568                           fsr2l	equ	0xFD9
 11569                           status	equ	0xFD8
 11570                           
 11571 ;; *************** function _vscp_newNodeOnline *****************
 11572 ;; Defined at:
 11573 ;;		line 494 in file "../../vscp_firmware/common/vscp_firmware.c"
 11574 ;; Parameters:    Size  Location     Type
 11575 ;;		None
 11576 ;; Auto vars:     Size  Location     Type
 11577 ;;		None
 11578 ;; Return value:  Size  Location     Type
 11579 ;;		None               void
 11580 ;; Registers used:
 11581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11582 ;; Tracked objects:
 11583 ;;		On entry : F/0
 11584 ;;		On exit  : F/0
 11585 ;;		Unchanged: 0/0
 11586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11587 ;;      Params:         0       0       0       0       0       0       0
 11588 ;;      Locals:         0       0       0       0       0       0       0
 11589 ;;      Temps:          1       0       0       0       0       0       0
 11590 ;;      Totals:         1       0       0       0       0       0       0
 11591 ;;Total ram usage:        1 bytes
 11592 ;; Hardware stack levels used:    1
 11593 ;; Hardware stack levels required when called:    7
 11594 ;; This function calls:
 11595 ;;		_vscp_sendEvent
 11596 ;; This function is called by:
 11597 ;;		_vscp_handleProtocolEvent
 11598 ;; This function uses a non-reentrant model
 11599 ;;
 11600                           
 11601                           	psect	text41
 11602  003BEA                     __ptext41:
 11603                           	opt stack 0
 11604  003BEA                     _vscp_newNodeOnline:
 11605                           	opt stack 21
 11606                           
 11607                           ; BSR set to: 0
 11608                           ;vscp_firmware.c: 495: if ((1 == (vscp_imsg.flags & 0x0f)) &&
 11609                           ;vscp_firmware.c: 496: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11610                           
 11611                           ; BSR set to: 0
 11612                           ;incstack = 0
 11613                           ;incstack = 0
 11614  003BEA  C09B  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 11615  003BEE  0E0F               	movlw	15
 11616  003BF0  164C               	andwf	??_vscp_newNodeOnline,f,c
 11617  003BF2  044C               	decf	??_vscp_newNodeOnline,w,c
 11618  003BF4  E10E               	bnz	l1095
 11619                           
 11620                           ; BSR set to: 0
 11621  003BF6  5196               	movf	_vscp_nickname& (0+255),w,b
 11622  003BF8  EE20  F0A1         	lfsr	2,_vscp_imsg+6
 11623  003BFC  62DF               	cpfseq	indf2,c
 11624  003BFE  D009               	goto	l1095
 11625                           
 11626                           ; BSR set to: 0
 11627                           ;vscp_firmware.c: 502: vscp_omsg.flags = 0x80;
 11628  003C00  0E80               	movlw	128
 11629  003C02  6FA9               	movwf	_vscp_omsg& (0+255),b
 11630                           
 11631                           ; BSR set to: 0
 11632                           ;vscp_firmware.c: 503: vscp_omsg.priority = 0x00;
 11633  003C04  6BAA               	clrf	(_vscp_omsg+1)& (0+255),b
 11634                           
 11635                           ; BSR set to: 0
 11636                           ;vscp_firmware.c: 504: vscp_omsg.vscp_class = 0;
 11637  003C06  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
 11638  003C08  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
 11639                           
 11640                           ;vscp_firmware.c: 505: vscp_omsg.vscp_type = 3;
 11641  003C0A  0E03               	movlw	3
 11642  003C0C  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
 11643                           
 11644                           ; BSR set to: 0
 11645                           ;vscp_firmware.c: 506: vscp_sendEvent();
 11646  003C0E  EC46  F01E         	call	_vscp_sendEvent	;wreg free
 11647  003C12                     l1095:
 11648                           
 11649                           ; BSR set to: 0
 11650  003C12  0012               	return	
 11651  003C14                     __end_of_vscp_newNodeOnline:
 11652                           	opt stack 0
 11653                           tblptru	equ	0xFF8
 11654                           tblptrh	equ	0xFF7
 11655                           tblptrl	equ	0xFF6
 11656                           tablat	equ	0xFF5
 11657                           prodh	equ	0xFF4
 11658                           prodl	equ	0xFF3
 11659                           postinc0	equ	0xFEE
 11660                           wreg	equ	0xFE8
 11661                           indf2	equ	0xFDF
 11662                           postinc2	equ	0xFDE
 11663                           postdec2	equ	0xFDD
 11664                           fsr2h	equ	0xFDA
 11665                           fsr2l	equ	0xFD9
 11666                           status	equ	0xFD8
 11667                           
 11668 ;; *************** function _vscp_handleDropNickname *****************
 11669 ;; Defined at:
 11670 ;;		line 430 in file "../../vscp_firmware/common/vscp_firmware.c"
 11671 ;; Parameters:    Size  Location     Type
 11672 ;;		None
 11673 ;; Auto vars:     Size  Location     Type
 11674 ;;  bytes           1   11[COMRAM] unsigned char 
 11675 ;; Return value:  Size  Location     Type
 11676 ;;		None               void
 11677 ;; Registers used:
 11678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11679 ;; Tracked objects:
 11680 ;;		On entry : F/0
 11681 ;;		On exit  : F/0
 11682 ;;		Unchanged: 0/0
 11683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11684 ;;      Params:         0       0       0       0       0       0       0
 11685 ;;      Locals:         1       0       0       0       0       0       0
 11686 ;;      Temps:          0       0       0       0       0       0       0
 11687 ;;      Totals:         1       0       0       0       0       0       0
 11688 ;;Total ram usage:        1 bytes
 11689 ;; Hardware stack levels used:    1
 11690 ;; Hardware stack levels required when called:    5
 11691 ;; This function calls:
 11692 ;;		_vscp_init
 11693 ;;		_vscp_writeNicknamePermanent
 11694 ;; This function is called by:
 11695 ;;		_vscp_handleProtocolEvent
 11696 ;; This function uses a non-reentrant model
 11697 ;;
 11698                           
 11699                           	psect	text42
 11700  003B8E                     __ptext42:
 11701                           	opt stack 0
 11702  003B8E                     _vscp_handleDropNickname:
 11703                           	opt stack 23
 11704                           
 11705                           ; BSR set to: 0
 11706                           ;vscp_firmware.c: 431: uint8_t bytes = vscp_imsg.flags & 0x0f;
 11707                           
 11708                           ; BSR set to: 0
 11709                           ;incstack = 0
 11710                           ;incstack = 0
 11711  003B8E  519B               	movf	_vscp_imsg& (0+255),w,b
 11712  003B90  0B0F               	andlw	15
 11713  003B92  6E0C               	movwf	vscp_handleDropNickname@bytes,c
 11714                           
 11715                           ; BSR set to: 0
 11716                           ;vscp_firmware.c: 437: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11717  003B94  500C               	movf	vscp_handleDropNickname@bytes,w,c
 11718  003B96  E012               	bz	l1091
 11719                           
 11720                           ; BSR set to: 0
 11721  003B98  5196               	movf	_vscp_nickname& (0+255),w,b
 11722  003B9A  EE20  F0A1         	lfsr	2,_vscp_imsg+6
 11723  003B9E  62DF               	cpfseq	indf2,c
 11724  003BA0  D00D               	goto	l1091
 11725                           
 11726                           ; BSR set to: 0
 11727                           ;vscp_firmware.c: 469: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 11728  003BA2  040C               	decf	vscp_handleDropNickname@bytes,w,c
 11729  003BA4  E005               	bz	l1090
 11730                           
 11731                           ; BSR set to: 0
 11732  003BA6  0E01               	movlw	1
 11733  003BA8  640C               	cpfsgt	vscp_handleDropNickname@bytes,c
 11734  003BAA  D008               	goto	l1091
 11735                           
 11736                           ; BSR set to: 0
 11737  003BAC  67A2               	tstfsz	(_vscp_imsg+7)& (0+255),b
 11738  003BAE  D006               	goto	l1091
 11739  003BB0                     l1090:
 11740                           
 11741                           ; BSR set to: 0
 11742                           ;vscp_firmware.c: 471: vscp_nickname = 0xff;
 11743  003BB0  6996               	setf	_vscp_nickname& (0+255),b
 11744                           
 11745                           ; BSR set to: 0
 11746                           ;vscp_firmware.c: 472: vscp_writeNicknamePermanent(0xff);
 11747  003BB2  0EFF               	movlw	255
 11748  003BB4  EC6F  F01F         	call	_vscp_writeNicknamePermanent
 11749                           
 11750                           ;vscp_firmware.c: 473: vscp_init();
 11751  003BB8  EC47  F01D         	call	_vscp_init	;wreg free
 11752  003BBC                     l1091:
 11753                           
 11754                           ; BSR set to: 0
 11755  003BBC  0012               	return	
 11756  003BBE                     __end_of_vscp_handleDropNickname:
 11757                           	opt stack 0
 11758                           tblptru	equ	0xFF8
 11759                           tblptrh	equ	0xFF7
 11760                           tblptrl	equ	0xFF6
 11761                           tablat	equ	0xFF5
 11762                           prodh	equ	0xFF4
 11763                           prodl	equ	0xFF3
 11764                           postinc0	equ	0xFEE
 11765                           wreg	equ	0xFE8
 11766                           indf2	equ	0xFDF
 11767                           postinc2	equ	0xFDE
 11768                           postdec2	equ	0xFDD
 11769                           fsr2h	equ	0xFDA
 11770                           fsr2l	equ	0xFD9
 11771                           status	equ	0xFD8
 11772                           
 11773 ;; *************** function _vscp_init *****************
 11774 ;; Defined at:
 11775 ;;		line 117 in file "../../vscp_firmware/common/vscp_firmware.c"
 11776 ;; Parameters:    Size  Location     Type
 11777 ;;		None
 11778 ;; Auto vars:     Size  Location     Type
 11779 ;;		None
 11780 ;; Return value:  Size  Location     Type
 11781 ;;		None               void
 11782 ;; Registers used:
 11783 ;;		wreg, status,2, cstack
 11784 ;; Tracked objects:
 11785 ;;		On entry : 0/0
 11786 ;;		On exit  : F/0
 11787 ;;		Unchanged: 0/0
 11788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11789 ;;      Params:         0       0       0       0       0       0       0
 11790 ;;      Locals:         0       0       0       0       0       0       0
 11791 ;;      Temps:          0       0       0       0       0       0       0
 11792 ;;      Totals:         0       0       0       0       0       0       0
 11793 ;;Total ram usage:        0 bytes
 11794 ;; Hardware stack levels used:    1
 11795 ;; Hardware stack levels required when called:    4
 11796 ;; This function calls:
 11797 ;;		_vscp_readNicknamePermanent
 11798 ;; This function is called by:
 11799 ;;		_main
 11800 ;;		_vscp_handleDropNickname
 11801 ;;		_vscp_handleProtocolEvent
 11802 ;; This function uses a non-reentrant model
 11803 ;;
 11804                           
 11805                           	psect	text43
 11806  003A8E                     __ptext43:
 11807                           	opt stack 0
 11808  003A8E                     _vscp_init:
 11809                           	opt stack 23
 11810                           
 11811                           ;vscp_firmware.c: 118: vscp_initledfunc = 0x02;
 11812                           
 11813                           ; BSR set to: 0
 11814                           ;incstack = 0
 11815                           ;incstack = 0
 11816  003A8E  0E02               	movlw	2
 11817  003A90  6E56               	movwf	_vscp_initledfunc,c
 11818                           
 11819                           ;vscp_firmware.c: 121: vscp_nickname = vscp_readNicknamePermanent();
 11820  003A92  ECA7  F01F         	call	_vscp_readNicknamePermanent	;wreg free
 11821  003A96  0100               	movlb	0	; () banked
 11822  003A98  6F96               	movwf	_vscp_nickname& (0+255),b
 11823                           
 11824                           ; BSR set to: 0
 11825                           ;vscp_firmware.c: 124: if (!vscp_nickname) vscp_nickname = 0xff;
 11826  003A9A  6796               	tstfsz	_vscp_nickname& (0+255),b
 11827  003A9C  D001               	goto	l1032
 11828                           
 11829                           ; BSR set to: 0
 11830  003A9E  6996               	setf	_vscp_nickname& (0+255),b
 11831  003AA0                     l1032:
 11832                           
 11833                           ; BSR set to: 0
 11834                           ;vscp_firmware.c: 127: vscp_imsg.flags = 0;
 11835  003AA0  6B9B               	clrf	_vscp_imsg& (0+255),b
 11836                           
 11837                           ;vscp_firmware.c: 128: vscp_imsg.priority = 0;
 11838  003AA2  6B9C               	clrf	(_vscp_imsg+1)& (0+255),b
 11839                           
 11840                           ;vscp_firmware.c: 129: vscp_imsg.vscp_class = 0;
 11841  003AA4  6B9D               	clrf	(_vscp_imsg+2)& (0+255),b
 11842  003AA6  6B9E               	clrf	(_vscp_imsg+3)& (0+255),b
 11843                           
 11844                           ;vscp_firmware.c: 130: vscp_imsg.vscp_type = 0;
 11845  003AA8  6B9F               	clrf	(_vscp_imsg+4)& (0+255),b
 11846                           
 11847                           ;vscp_firmware.c: 133: vscp_omsg.flags = 0;
 11848  003AAA  6BA9               	clrf	_vscp_omsg& (0+255),b
 11849                           
 11850                           ;vscp_firmware.c: 134: vscp_omsg.priority = 0;
 11851  003AAC  6BAA               	clrf	(_vscp_omsg+1)& (0+255),b
 11852                           
 11853                           ;vscp_firmware.c: 135: vscp_omsg.vscp_class = 0;
 11854  003AAE  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
 11855  003AB0  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
 11856                           
 11857                           ;vscp_firmware.c: 138: vscp_errorcnt = 0;
 11858  003AB2  6BAD               	clrf	(_vscp_omsg+4)& (0+255),b
 11859                           
 11860                           ;vscp_firmware.c: 139: vscp_alarmstatus = 0;
 11861  003AB4  6B91               	clrf	_vscp_alarmstatus& (0+255),b
 11862                           
 11863                           ;vscp_firmware.c: 141: vscp_probe_address = 0;
 11864  003AB6  6A57               	clrf	_vscp_probe_address,c
 11865                           
 11866                           ;vscp_firmware.c: 144: vscp_node_state = 0x00;
 11867  003AB8  6B97               	clrf	_vscp_node_state& (0+255),b
 11868                           
 11869                           ;vscp_firmware.c: 145: vscp_node_substate = 0x00;
 11870  003ABA  6B98               	clrf	_vscp_node_substate& (0+255),b
 11871                           
 11872                           ;vscp_firmware.c: 147: vscp_probe_cnt = 0;
 11873  003ABC  6B99               	clrf	_vscp_probe_cnt& (0+255),b
 11874                           
 11875                           ;vscp_firmware.c: 148: vscp_page_select = 0;
 11876  003ABE  6A52               	clrf	_vscp_page_select,c
 11877  003AC0  6A53               	clrf	_vscp_page_select+1,c
 11878                           
 11879                           ;vscp_firmware.c: 151: vscp_timer = 0;
 11880  003AC2  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 11881  003AC4  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 11882                           
 11883                           ;vscp_firmware.c: 152: vscp_configtimer = 0;
 11884  003AC6  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
 11885  003AC8  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 11886                           
 11887                           ;vscp_firmware.c: 153: vscp_second = 0;
 11888  003ACA  6B9A               	clrf	_vscp_second& (0+255),b
 11889                           
 11890                           ;vscp_firmware.c: 154: vscp_minute = 0;
 11891  003ACC  6B95               	clrf	_vscp_minute& (0+255),b
 11892                           
 11893                           ;vscp_firmware.c: 155: vscp_hour = 0;
 11894  003ACE  6B93               	clrf	_vscp_hour& (0+255),b
 11895                           
 11896                           ; BSR set to: 0
 11897  003AD0  0012               	return	
 11898  003AD2                     __end_of_vscp_init:
 11899                           	opt stack 0
 11900                           tblptru	equ	0xFF8
 11901                           tblptrh	equ	0xFF7
 11902                           tblptrl	equ	0xFF6
 11903                           tablat	equ	0xFF5
 11904                           prodh	equ	0xFF4
 11905                           prodl	equ	0xFF3
 11906                           postinc0	equ	0xFEE
 11907                           wreg	equ	0xFE8
 11908                           indf2	equ	0xFDF
 11909                           postinc2	equ	0xFDE
 11910                           postdec2	equ	0xFDD
 11911                           fsr2h	equ	0xFDA
 11912                           fsr2l	equ	0xFD9
 11913                           status	equ	0xFD8
 11914                           
 11915 ;; *************** function _vscp_readNicknamePermanent *****************
 11916 ;; Defined at:
 11917 ;;		line 849 in file "../main.c"
 11918 ;; Parameters:    Size  Location     Type
 11919 ;;		None
 11920 ;; Auto vars:     Size  Location     Type
 11921 ;;		None
 11922 ;; Return value:  Size  Location     Type
 11923 ;;                  1    wreg      unsigned char 
 11924 ;; Registers used:
 11925 ;;		wreg, status,2, cstack
 11926 ;; Tracked objects:
 11927 ;;		On entry : 0/0
 11928 ;;		On exit  : 0/0
 11929 ;;		Unchanged: 0/0
 11930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11931 ;;      Params:         0       0       0       0       0       0       0
 11932 ;;      Locals:         0       0       0       0       0       0       0
 11933 ;;      Temps:          0       0       0       0       0       0       0
 11934 ;;      Totals:         0       0       0       0       0       0       0
 11935 ;;Total ram usage:        0 bytes
 11936 ;; Hardware stack levels used:    1
 11937 ;; Hardware stack levels required when called:    3
 11938 ;; This function calls:
 11939 ;;		_readEEPROM
 11940 ;; This function is called by:
 11941 ;;		_vscp_init
 11942 ;; This function uses a non-reentrant model
 11943 ;;
 11944                           
 11945                           	psect	text44
 11946  003F4E                     __ptext44:
 11947                           	opt stack 0
 11948  003F4E                     _vscp_readNicknamePermanent:
 11949                           	opt stack 23
 11950                           
 11951                           ;main.c: 850: return readEEPROM( 0x01 );
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;incstack = 0
 11955                           ;incstack = 0
 11956  003F4E  6A09               	clrf	?_readEEPROM+1,c
 11957  003F50  0E01               	movlw	1
 11958  003F52  6E08               	movwf	?_readEEPROM,c
 11959  003F54  EF81  F01F         	goto	_readEEPROM	;wreg free
 11960  003F58                     __end_of_vscp_readNicknamePermanent:
 11961                           	opt stack 0
 11962                           tblptru	equ	0xFF8
 11963                           tblptrh	equ	0xFF7
 11964                           tblptrl	equ	0xFF6
 11965                           tablat	equ	0xFF5
 11966                           prodh	equ	0xFF4
 11967                           prodl	equ	0xFF3
 11968                           postinc0	equ	0xFEE
 11969                           wreg	equ	0xFE8
 11970                           indf2	equ	0xFDF
 11971                           postinc2	equ	0xFDE
 11972                           postdec2	equ	0xFDD
 11973                           fsr2h	equ	0xFDA
 11974                           fsr2l	equ	0xFD9
 11975                           status	equ	0xFD8
 11976                           
 11977 ;; *************** function _vscp_handleSetNickname *****************
 11978 ;; Defined at:
 11979 ;;		line 414 in file "../../vscp_firmware/common/vscp_firmware.c"
 11980 ;; Parameters:    Size  Location     Type
 11981 ;;		None
 11982 ;; Auto vars:     Size  Location     Type
 11983 ;;		None
 11984 ;; Return value:  Size  Location     Type
 11985 ;;		None               void
 11986 ;; Registers used:
 11987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11988 ;; Tracked objects:
 11989 ;;		On entry : F/0
 11990 ;;		On exit  : 0/0
 11991 ;;		Unchanged: 0/0
 11992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11993 ;;      Params:         0       0       0       0       0       0       0
 11994 ;;      Locals:         0       0       0       0       0       0       0
 11995 ;;      Temps:          0       0       0       0       0       0       0
 11996 ;;      Totals:         0       0       0       0       0       0       0
 11997 ;;Total ram usage:        0 bytes
 11998 ;; Hardware stack levels used:    1
 11999 ;; Hardware stack levels required when called:    4
 12000 ;; This function calls:
 12001 ;;		_vscp_writeNicknamePermanent
 12002 ;;		_vscp_setSegmentCRC
 12003 ;; This function is called by:
 12004 ;;		_vscp_handleProtocolEvent
 12005 ;; This function uses a non-reentrant model
 12006 ;;
 12007                           
 12008                           	psect	text45
 12009  003CD8                     __ptext45:
 12010                           	opt stack 0
 12011  003CD8                     _vscp_handleSetNickname:
 12012                           	opt stack 24
 12013                           
 12014                           ; BSR set to: 0
 12015                           ;vscp_firmware.c: 415: if ((2 == (vscp_imsg.flags & 0x0f)) &&
 12016                           ;vscp_firmware.c: 416: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12017                           
 12018                           ;incstack = 0
 12019                           ;incstack = 0
 12020  003CD8  519B               	movf	_vscp_imsg& (0+255),w,b
 12021  003CDA  0B0F               	andlw	15
 12022  003CDC  0A02               	xorlw	2
 12023  003CDE  E10D               	bnz	l1084
 12024                           
 12025                           ; BSR set to: 0
 12026  003CE0  5196               	movf	_vscp_nickname& (0+255),w,b
 12027  003CE2  EE20  F0A1         	lfsr	2,_vscp_imsg+6
 12028  003CE6  62DF               	cpfseq	indf2,c
 12029  003CE8  D008               	goto	l1084
 12030                           
 12031                           ; BSR set to: 0
 12032                           ;vscp_firmware.c: 419: vscp_nickname = vscp_imsg.data[ 1 ];
 12033  003CEA  C0A2  F096         	movff	_vscp_imsg+7,_vscp_nickname
 12034                           
 12035                           ; BSR set to: 0
 12036                           ;vscp_firmware.c: 420: vscp_writeNicknamePermanent(vscp_nickname);
 12037  003CEE  5196               	movf	_vscp_nickname& (0+255),w,b
 12038  003CF0  EC6F  F01F         	call	_vscp_writeNicknamePermanent
 12039                           
 12040                           ;vscp_firmware.c: 421: vscp_setSegmentCRC(0x40);
 12041  003CF4  0E40               	movlw	64
 12042  003CF6  EC66  F01F         	call	_vscp_setSegmentCRC
 12043  003CFA                     l1084:
 12044  003CFA  0012               	return	
 12045  003CFC                     __end_of_vscp_handleSetNickname:
 12046                           	opt stack 0
 12047                           tblptru	equ	0xFF8
 12048                           tblptrh	equ	0xFF7
 12049                           tblptrl	equ	0xFF6
 12050                           tablat	equ	0xFF5
 12051                           prodh	equ	0xFF4
 12052                           prodl	equ	0xFF3
 12053                           postinc0	equ	0xFEE
 12054                           wreg	equ	0xFE8
 12055                           indf2	equ	0xFDF
 12056                           postinc2	equ	0xFDE
 12057                           postdec2	equ	0xFDD
 12058                           fsr2h	equ	0xFDA
 12059                           fsr2l	equ	0xFD9
 12060                           status	equ	0xFD8
 12061                           
 12062 ;; *************** function _vscp_handleHeartbeat *****************
 12063 ;; Defined at:
 12064 ;;		line 388 in file "../../vscp_firmware/common/vscp_firmware.c"
 12065 ;; Parameters:    Size  Location     Type
 12066 ;;		None
 12067 ;; Auto vars:     Size  Location     Type
 12068 ;;		None
 12069 ;; Return value:  Size  Location     Type
 12070 ;;		None               void
 12071 ;; Registers used:
 12072 ;;		wreg, status,2, status,0, cstack
 12073 ;; Tracked objects:
 12074 ;;		On entry : F/0
 12075 ;;		On exit  : 0/0
 12076 ;;		Unchanged: 0/0
 12077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12078 ;;      Params:         0       0       0       0       0       0       0
 12079 ;;      Locals:         0       0       0       0       0       0       0
 12080 ;;      Temps:          0       0       0       0       0       0       0
 12081 ;;      Totals:         0       0       0       0       0       0       0
 12082 ;;Total ram usage:        0 bytes
 12083 ;; Hardware stack levels used:    1
 12084 ;; Hardware stack levels required when called:    4
 12085 ;; This function calls:
 12086 ;;		_vscp_writeNicknamePermanent
 12087 ;;		_vscp_getSegmentCRC
 12088 ;;		_vscp_setSegmentCRC
 12089 ;; This function is called by:
 12090 ;;		_vscp_handleProtocolEvent
 12091 ;; This function uses a non-reentrant model
 12092 ;;
 12093                           
 12094                           	psect	text46
 12095  003B12                     __ptext46:
 12096                           	opt stack 0
 12097  003B12                     _vscp_handleHeartbeat:
 12098                           	opt stack 24
 12099                           
 12100                           ; BSR set to: 0
 12101                           ;vscp_firmware.c: 389: if ( !vscp_getSegmentCRC() ) {
 12102                           
 12103                           ;incstack = 0
 12104                           ;incstack = 0
 12105  003B12  ECAC  F01F         	call	_vscp_getSegmentCRC	;wreg free
 12106  003B16  0900               	iorlw	0
 12107  003B18  E116               	bnz	l8961
 12108                           
 12109                           ;vscp_firmware.c: 390: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 12110                           ;vscp_firmware.c: 391: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 12111  003B1A  0100               	movlb	0	; () banked
 12112  003B1C  519B               	movf	_vscp_imsg& (0+255),w,b
 12113  003B1E  0B0F               	andlw	15
 12114  003B20  0A05               	xorlw	5
 12115  003B22  E115               	bnz	l1080
 12116                           
 12117                           ; BSR set to: 0
 12118  003B24  ECAC  F01F         	call	_vscp_getSegmentCRC	;wreg free
 12119  003B28  0100               	movlb	0	; () banked
 12120  003B2A  19A1               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 12121  003B2C  E010               	bz	l1080
 12122                           
 12123                           ; BSR set to: 0
 12124                           ;vscp_firmware.c: 395: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12125  003B2E  51A1               	movf	(_vscp_imsg+6)& (0+255),w,b
 12126  003B30  EC66  F01F         	call	_vscp_setSegmentCRC
 12127                           
 12128                           ;vscp_firmware.c: 398: vscp_nickname = 0xff;
 12129  003B34  0100               	movlb	0	; () banked
 12130  003B36  6996               	setf	_vscp_nickname& (0+255),b
 12131                           
 12132                           ;vscp_firmware.c: 399: vscp_writeNicknamePermanent(0xff);
 12133  003B38  0EFF               	movlw	255
 12134  003B3A  EC6F  F01F         	call	_vscp_writeNicknamePermanent
 12135                           
 12136                           ;vscp_firmware.c: 400: vscp_node_state = 0x01;
 12137  003B3E  0E01               	movlw	1
 12138  003B40  0100               	movlb	0	; () banked
 12139  003B42  6F97               	movwf	_vscp_node_state& (0+255),b
 12140  003B44  D004               	goto	l1080
 12141  003B46                     l8961:
 12142                           
 12143                           ;vscp_firmware.c: 403: else {
 12144                           ;vscp_firmware.c: 405: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12145  003B46  0100               	movlb	0	; () banked
 12146  003B48  51A1               	movf	(_vscp_imsg+6)& (0+255),w,b
 12147  003B4A  EC66  F01F         	call	_vscp_setSegmentCRC
 12148  003B4E                     l1080:
 12149  003B4E  0012               	return	
 12150  003B50                     __end_of_vscp_handleHeartbeat:
 12151                           	opt stack 0
 12152                           tblptru	equ	0xFF8
 12153                           tblptrh	equ	0xFF7
 12154                           tblptrl	equ	0xFF6
 12155                           tablat	equ	0xFF5
 12156                           prodh	equ	0xFF4
 12157                           prodl	equ	0xFF3
 12158                           postinc0	equ	0xFEE
 12159                           wreg	equ	0xFE8
 12160                           indf2	equ	0xFDF
 12161                           postinc2	equ	0xFDE
 12162                           postdec2	equ	0xFDD
 12163                           fsr2h	equ	0xFDA
 12164                           fsr2l	equ	0xFD9
 12165                           status	equ	0xFD8
 12166                           
 12167 ;; *************** function _vscp_getMatrixInfo *****************
 12168 ;; Defined at:
 12169 ;;		line 2437 in file "../main.c"
 12170 ;; Parameters:    Size  Location     Type
 12171 ;;  pData           1    wreg     PTR unsigned char 
 12172 ;;		 -> vscp_omsg(13), 
 12173 ;; Auto vars:     Size  Location     Type
 12174 ;;  pData           1    0[COMRAM] PTR unsigned char 
 12175 ;;		 -> vscp_omsg(13), 
 12176 ;;  i               1    7[COMRAM] unsigned char 
 12177 ;; Return value:  Size  Location     Type
 12178 ;;		None               void
 12179 ;; Registers used:
 12180 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12181 ;; Tracked objects:
 12182 ;;		On entry : F/0
 12183 ;;		On exit  : F/0
 12184 ;;		Unchanged: 0/0
 12185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12186 ;;      Params:         0       0       0       0       0       0       0
 12187 ;;      Locals:         1       0       0       0       0       0       0
 12188 ;;      Temps:          0       0       0       0       0       0       0
 12189 ;;      Totals:         1       0       0       0       0       0       0
 12190 ;;Total ram usage:        1 bytes
 12191 ;; Hardware stack levels used:    1
 12192 ;; Hardware stack levels required when called:    2
 12193 ;; This function calls:
 12194 ;;		Nothing
 12195 ;; This function is called by:
 12196 ;;		_vscp_handleProtocolEvent
 12197 ;; This function uses a non-reentrant model
 12198 ;;
 12199                           
 12200                           	psect	text47
 12201  003DA8                     __ptext47:
 12202                           	opt stack 0
 12203  003DA8                     _vscp_getMatrixInfo:
 12204                           	opt stack 26
 12205                           
 12206                           ; BSR set to: 0
 12207                           ;main.c: 2438: uint8_t i;
 12208                           ;main.c: 2440: vscp_omsg.data[ 0 ] = 7;
 12209                           
 12210                           ;incstack = 0
 12211                           ;incstack = 0
 12212  003DA8  0E07               	movlw	7
 12213  003DAA  6FAE               	movwf	(_vscp_omsg+5)& (0+255),b
 12214                           
 12215                           ;main.c: 2441: vscp_omsg.data[ 1 ] = 72;
 12216  003DAC  0E48               	movlw	72
 12217  003DAE  6FAF               	movwf	(_vscp_omsg+6)& (0+255),b
 12218                           
 12219                           ;main.c: 2444: for ( i = 2; i < 8; i++ ) {
 12220  003DB0  0E02               	movlw	2
 12221  003DB2  6E08               	movwf	vscp_getMatrixInfo@i,c
 12222  003DB4                     l6453:
 12223                           
 12224                           ; BSR set to: 0
 12225                           ;main.c: 2445: vscp_omsg.data[ i ] = 0;
 12226  003DB4  5008               	movf	vscp_getMatrixInfo@i,w,c
 12227  003DB6  0FAE               	addlw	low (_vscp_omsg+5)
 12228  003DB8  6ED9               	movwf	fsr2l,c
 12229  003DBA  6ADA               	clrf	fsr2h,c
 12230  003DBC  6ADF               	clrf	indf2,c
 12231                           
 12232                           ; BSR set to: 0
 12233  003DBE  2A08               	incf	vscp_getMatrixInfo@i,f,c
 12234                           
 12235                           ; BSR set to: 0
 12236  003DC0  0E07               	movlw	7
 12237  003DC2  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 12238  003DC4  D7F7               	goto	l6453
 12239                           
 12240                           ; BSR set to: 0
 12241  003DC6  0C07               	retlw	7
 12242  003DC8                     __end_of_vscp_getMatrixInfo:
 12243                           	opt stack 0
 12244                           tblptru	equ	0xFF8
 12245                           tblptrh	equ	0xFF7
 12246                           tblptrl	equ	0xFF6
 12247                           tablat	equ	0xFF5
 12248                           prodh	equ	0xFF4
 12249                           prodl	equ	0xFF3
 12250                           postinc0	equ	0xFEE
 12251                           wreg	equ	0xFE8
 12252                           indf2	equ	0xFDF
 12253                           postinc2	equ	0xFDE
 12254                           postdec2	equ	0xFDD
 12255                           fsr2h	equ	0xFDA
 12256                           fsr2l	equ	0xFD9
 12257                           status	equ	0xFD8
 12258                           
 12259 ;; *************** function _vscp_goBootloaderMode *****************
 12260 ;; Defined at:
 12261 ;;		line 2421 in file "../main.c"
 12262 ;; Parameters:    Size  Location     Type
 12263 ;;  algorithm       1    wreg     unsigned char 
 12264 ;; Auto vars:     Size  Location     Type
 12265 ;;  algorithm       1   10[COMRAM] unsigned char 
 12266 ;; Return value:  Size  Location     Type
 12267 ;;		None               void
 12268 ;; Registers used:
 12269 ;;		wreg, status,2, status,0, cstack
 12270 ;; Tracked objects:
 12271 ;;		On entry : F/0
 12272 ;;		On exit  : 0/0
 12273 ;;		Unchanged: 0/0
 12274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12275 ;;      Params:         0       0       0       0       0       0       0
 12276 ;;      Locals:         1       0       0       0       0       0       0
 12277 ;;      Temps:          0       0       0       0       0       0       0
 12278 ;;      Totals:         1       0       0       0       0       0       0
 12279 ;;Total ram usage:        1 bytes
 12280 ;; Hardware stack levels used:    1
 12281 ;; Hardware stack levels required when called:    3
 12282 ;; This function calls:
 12283 ;;		_writeEEPROM
 12284 ;; This function is called by:
 12285 ;;		_vscp_handleProtocolEvent
 12286 ;; This function uses a non-reentrant model
 12287 ;;
 12288                           
 12289                           	psect	text48
 12290  003E4E                     __ptext48:
 12291                           	opt stack 0
 12292  003E4E                     _vscp_goBootloaderMode:
 12293                           	opt stack 25
 12294                           
 12295                           ; BSR set to: 0
 12296                           ;incstack = 0
 12297                           ;incstack = 0
 12298                           ;vscp_goBootloaderMode@algorithm stored from wreg
 12299  003E4E  CFE8 F00B          	movff	wreg,vscp_goBootloaderMode@algorithm
 12300                           
 12301                           ; BSR set to: 0
 12302                           ;main.c: 2422: if ( 0x01 != algorithm ) return;
 12303  003E52  040B               	decf	vscp_goBootloaderMode@algorithm,w,c
 12304  003E54  E107               	bnz	l622
 12305                           
 12306                           ; BSR set to: 0
 12307                           ;main.c: 2426: writeEEPROM(0x00, 0xff);
 12308  003E56  6A09               	clrf	?_writeEEPROM+1,c
 12309  003E58  6A08               	clrf	?_writeEEPROM,c
 12310  003E5A  0EFF               	movlw	255
 12311  003E5C  680A               	setf	?_writeEEPROM+2,c
 12312  003E5E  EC59  F01E         	call	_writeEEPROM	;wreg free
 12313  003E62  00FF               	reset		;# 
 12314  003E64                     l622:
 12315  003E64  0012               	return	
 12316  003E66                     __end_of_vscp_goBootloaderMode:
 12317                           	opt stack 0
 12318                           tblptru	equ	0xFF8
 12319                           tblptrh	equ	0xFF7
 12320                           tblptrl	equ	0xFF6
 12321                           tablat	equ	0xFF5
 12322                           prodh	equ	0xFF4
 12323                           prodl	equ	0xFF3
 12324                           postinc0	equ	0xFEE
 12325                           wreg	equ	0xFE8
 12326                           indf2	equ	0xFDF
 12327                           postinc2	equ	0xFDE
 12328                           postdec2	equ	0xFDD
 12329                           fsr2h	equ	0xFDA
 12330                           fsr2l	equ	0xFD9
 12331                           status	equ	0xFD8
 12332                           
 12333 ;; *************** function _vscp_handleProbeState *****************
 12334 ;; Defined at:
 12335 ;;		line 200 in file "../../vscp_firmware/common/vscp_firmware.c"
 12336 ;; Parameters:    Size  Location     Type
 12337 ;;		None
 12338 ;; Auto vars:     Size  Location     Type
 12339 ;;		None
 12340 ;; Return value:  Size  Location     Type
 12341 ;;		None               void
 12342 ;; Registers used:
 12343 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12344 ;; Tracked objects:
 12345 ;;		On entry : 0/0
 12346 ;;		On exit  : F/0
 12347 ;;		Unchanged: 0/0
 12348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12349 ;;      Params:         0       0       0       0       0       0       0
 12350 ;;      Locals:         0       0       0       0       0       0       0
 12351 ;;      Temps:          0       0       0       0       0       0       0
 12352 ;;      Totals:         0       0       0       0       0       0       0
 12353 ;;Total ram usage:        0 bytes
 12354 ;; Hardware stack levels used:    1
 12355 ;; Hardware stack levels required when called:    8
 12356 ;; This function calls:
 12357 ;;		_vscp_goActiveState
 12358 ;;		_vscp_writeNicknamePermanent
 12359 ;;		_vscp_sendEvent
 12360 ;;		_vscp_setSegmentCRC
 12361 ;; This function is called by:
 12362 ;;		_main
 12363 ;; This function uses a non-reentrant model
 12364 ;;
 12365                           
 12366                           	psect	text49
 12367  0035BE                     __ptext49:
 12368                           	opt stack 0
 12369  0035BE                     _vscp_handleProbeState:
 12370                           	opt stack 21
 12371                           
 12372                           ;vscp_firmware.c: 201: switch (vscp_node_substate) {
 12373                           
 12374                           ;incstack = 0
 12375                           ;incstack = 0
 12376  0035BE  D053               	goto	l7389
 12377  0035C0                     l7319:
 12378                           
 12379                           ; BSR set to: 0
 12380                           ;vscp_firmware.c: 205: if (0xff != vscp_probe_address) {
 12381  0035C0  2857               	incf	_vscp_probe_address,w,c
 12382  0035C2  E010               	bz	l7335
 12383                           
 12384                           ; BSR set to: 0
 12385                           ;vscp_firmware.c: 207: vscp_omsg.flags = 0x80 + 1;
 12386  0035C4  0E81               	movlw	129
 12387  0035C6  6FA9               	movwf	_vscp_omsg& (0+255),b
 12388                           
 12389                           ; BSR set to: 0
 12390                           ;vscp_firmware.c: 208: vscp_omsg.priority = 0x00;
 12391  0035C8  6BAA               	clrf	(_vscp_omsg+1)& (0+255),b
 12392                           
 12393                           ; BSR set to: 0
 12394                           ;vscp_firmware.c: 209: vscp_omsg.vscp_class = 0;
 12395  0035CA  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
 12396  0035CC  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
 12397                           
 12398                           ;vscp_firmware.c: 210: vscp_omsg.vscp_type = 2;
 12399  0035CE  0E02               	movlw	2
 12400  0035D0  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
 12401                           
 12402                           ; BSR set to: 0
 12403                           ;vscp_firmware.c: 211: vscp_omsg.data[ 0 ] = vscp_probe_address;
 12404  0035D2  C057  F0AE         	movff	_vscp_probe_address,_vscp_omsg+5
 12405                           
 12406                           ; BSR set to: 0
 12407                           ;vscp_firmware.c: 214: vscp_sendEvent();
 12408  0035D6  EC46  F01E         	call	_vscp_sendEvent	;wreg free
 12409                           
 12410                           ; BSR set to: 0
 12411                           ;vscp_firmware.c: 216: vscp_node_substate = 0x01;
 12412  0035DA  0E01               	movlw	1
 12413  0035DC  6F98               	movwf	_vscp_node_substate& (0+255),b
 12414  0035DE                     l7333:
 12415                           
 12416                           ; BSR set to: 0
 12417                           ;vscp_firmware.c: 217: vscp_timer = 0;
 12418  0035DE  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12419  0035E0  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12420                           
 12421                           ;vscp_firmware.c: 219: } else {
 12422  0035E2  D048               	goto	l1047
 12423  0035E4                     l7335:
 12424                           
 12425                           ; BSR set to: 0
 12426                           ;vscp_firmware.c: 222: vscp_node_state = 0x04;
 12427  0035E4  0E04               	movlw	4
 12428  0035E6  6F97               	movwf	_vscp_node_state& (0+255),b
 12429                           
 12430                           ;vscp_firmware.c: 225: vscp_omsg.flags = 0x80 + 1;
 12431  0035E8  0E81               	movlw	129
 12432  0035EA  6FA9               	movwf	_vscp_omsg& (0+255),b
 12433                           
 12434                           ; BSR set to: 0
 12435                           ;vscp_firmware.c: 226: vscp_omsg.data[ 0 ] = 0xff;
 12436  0035EC  69AE               	setf	(_vscp_omsg+5)& (0+255),b
 12437                           
 12438                           ;vscp_firmware.c: 227: vscp_omsg.priority = 0x07;
 12439  0035EE  0E07               	movlw	7
 12440  0035F0  6FAA               	movwf	(_vscp_omsg+1)& (0+255),b
 12441                           
 12442                           ; BSR set to: 0
 12443                           ;vscp_firmware.c: 228: vscp_omsg.vscp_class = 0;
 12444  0035F2  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
 12445  0035F4  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
 12446                           
 12447                           ;vscp_firmware.c: 229: vscp_omsg.vscp_type = 3;
 12448  0035F6  0E03               	movlw	3
 12449  0035F8  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
 12450                           
 12451                           ; BSR set to: 0
 12452                           ;vscp_firmware.c: 232: vscp_sendEvent();
 12453  0035FA  EC46  F01E         	call	_vscp_sendEvent	;wreg free
 12454  0035FE  D03A               	goto	l1047
 12455  003600                     l1048:
 12456                           
 12457                           ; BSR set to: 0
 12458                           ;vscp_firmware.c: 239: if (vscp_imsg.flags & 0x80) {
 12459  003600  AF9B               	btfss	_vscp_imsg& (0+255),7,b
 12460  003602  D00F               	goto	l7359
 12461                           
 12462                           ; BSR set to: 0
 12463                           ;vscp_firmware.c: 242: if ((0 == vscp_imsg.vscp_class) &&
 12464                           ;vscp_firmware.c: 243: (3 == vscp_imsg.vscp_type)) {
 12465  003604  519E               	movf	(_vscp_imsg+3)& (0+255),w,b
 12466  003606  119D               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 12467  003608  E135               	bnz	l1047
 12468                           
 12469                           ; BSR set to: 0
 12470  00360A  519F               	movf	(_vscp_imsg+4)& (0+255),w,b
 12471  00360C  0A03               	xorlw	3
 12472  00360E  E132               	bnz	l1047
 12473                           
 12474                           ; BSR set to: 0
 12475                           ;vscp_firmware.c: 246: if (0 == vscp_probe_address) {
 12476  003610  6657               	tstfsz	_vscp_probe_address,c
 12477  003612  D003               	goto	l7353
 12478                           
 12479                           ; BSR set to: 0
 12480                           ;vscp_firmware.c: 250: vscp_node_state = 0x02;
 12481  003614  0E02               	movlw	2
 12482  003616  6F97               	movwf	_vscp_node_state& (0+255),b
 12483  003618  D7E2               	goto	l7333
 12484  00361A                     l7353:
 12485                           
 12486                           ; BSR set to: 0
 12487                           ;vscp_firmware.c: 256: vscp_probe_address++;
 12488  00361A  2A57               	incf	_vscp_probe_address,f,c
 12489                           
 12490                           ; BSR set to: 0
 12491                           ;vscp_firmware.c: 257: vscp_node_substate = 0x00;
 12492  00361C  6B98               	clrf	_vscp_node_substate& (0+255),b
 12493  00361E                     l7357:
 12494                           
 12495                           ; BSR set to: 0
 12496                           ;vscp_firmware.c: 258: vscp_probe_cnt = 0;
 12497  00361E  6B99               	clrf	_vscp_probe_cnt& (0+255),b
 12498  003620  D029               	goto	l1047
 12499  003622                     l7359:
 12500                           
 12501                           ; BSR set to: 0
 12502                           ;vscp_firmware.c: 264: if (vscp_timer > 1000) {
 12503  003622  0EE9               	movlw	233
 12504  003624  5D86               	subwf	_vscp_timer& (0+255),w,b	;volatile
 12505  003626  0E03               	movlw	3
 12506  003628  5987               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 12507  00362A  E324               	bnc	l1047
 12508                           
 12509                           ; BSR set to: 0
 12510                           ;vscp_firmware.c: 266: vscp_probe_cnt++;
 12511  00362C  2B99               	incf	_vscp_probe_cnt& (0+255),f,b
 12512                           
 12513                           ; BSR set to: 0
 12514                           ;vscp_firmware.c: 268: if (vscp_probe_cnt >= 3) {
 12515  00362E  0E02               	movlw	2
 12516  003630  6599               	cpfsgt	_vscp_probe_cnt& (0+255),b
 12517  003632  D017               	goto	l1055
 12518                           
 12519                           ; BSR set to: 0
 12520                           ;vscp_firmware.c: 271: if (0 == vscp_probe_address) {
 12521  003634  6657               	tstfsz	_vscp_probe_address,c
 12522  003636  D005               	goto	l1056
 12523                           
 12524                           ; BSR set to: 0
 12525                           ;vscp_firmware.c: 274: vscp_probe_address++;
 12526  003638  2A57               	incf	_vscp_probe_address,f,c
 12527                           
 12528                           ; BSR set to: 0
 12529                           ;vscp_firmware.c: 275: vscp_node_substate = 0x00;
 12530  00363A  6B98               	clrf	_vscp_node_substate& (0+255),b
 12531                           
 12532                           ; BSR set to: 0
 12533                           ;vscp_firmware.c: 276: vscp_timer = 0;
 12534  00363C  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12535  00363E  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12536  003640  D7EE               	goto	l7357
 12537  003642                     l1056:
 12538                           
 12539                           ; BSR set to: 0
 12540                           ;vscp_firmware.c: 282: vscp_nickname = vscp_probe_address;
 12541  003642  C057  F096         	movff	_vscp_probe_address,_vscp_nickname
 12542                           
 12543                           ; BSR set to: 0
 12544                           ;vscp_firmware.c: 283: vscp_node_state = 0x03;
 12545  003646  0E03               	movlw	3
 12546  003648  6F97               	movwf	_vscp_node_state& (0+255),b
 12547                           
 12548                           ; BSR set to: 0
 12549                           ;vscp_firmware.c: 284: vscp_node_substate = 0x00;
 12550  00364A  6B98               	clrf	_vscp_node_substate& (0+255),b
 12551                           
 12552                           ; BSR set to: 0
 12553                           ;vscp_firmware.c: 285: vscp_writeNicknamePermanent(vscp_nickname);
 12554  00364C  5196               	movf	_vscp_nickname& (0+255),w,b
 12555  00364E  EC6F  F01F         	call	_vscp_writeNicknamePermanent
 12556                           
 12557                           ;vscp_firmware.c: 286: vscp_setSegmentCRC(0x40);
 12558  003652  0E40               	movlw	64
 12559  003654  EC66  F01F         	call	_vscp_setSegmentCRC
 12560                           
 12561                           ;vscp_firmware.c: 289: vscp_probe_cnt = 0;
 12562  003658  0100               	movlb	0	; () banked
 12563  00365A  6B99               	clrf	_vscp_probe_cnt& (0+255),b
 12564                           
 12565                           ; BSR set to: 0
 12566                           ;vscp_firmware.c: 290: vscp_goActiveState();
 12567  00365C  ECE4  F01E         	call	_vscp_goActiveState	;wreg free
 12568  003660  D009               	goto	l1047
 12569  003662                     l1055:
 12570                           
 12571                           ; BSR set to: 0
 12572                           ;vscp_firmware.c: 294: vscp_node_substate = 0x00;
 12573  003662  6B98               	clrf	_vscp_node_substate& (0+255),b
 12574  003664  D007               	goto	l1047
 12575  003666                     l7389:
 12576  003666  0100               	movlb	0	; () banked
 12577  003668  5198               	movf	_vscp_node_substate& (0+255),w,b
 12578                           
 12579                           ; Switch size 1, requested type "speed"
 12580                           ; Number of cases is 3, Range of values is 0 to 2
 12581                           ; switch strategies available:
 12582                           ; Name         Instructions Cycles
 12583                           ; simple_byte           10     6 (average)
 12584                           ;	Chosen strategy is simple_byte
 12585  00366A  E0AA               	bz	l7319
 12586  00366C  0A01               	xorlw	1	; case 1
 12587  00366E  E0C8               	bz	l1048
 12588  003670  0A03               	xorlw	3	; case 2
 12589  003672  E1F7               	bnz	l1055
 12590  003674                     l1047:
 12591                           
 12592                           ; BSR set to: 0
 12593                           ;vscp_firmware.c: 309: vscp_imsg.flags = 0;
 12594  003674  6B9B               	clrf	_vscp_imsg& (0+255),b
 12595                           
 12596                           ; BSR set to: 0
 12597  003676  0012               	return	
 12598  003678                     __end_of_vscp_handleProbeState:
 12599                           	opt stack 0
 12600                           tblptru	equ	0xFF8
 12601                           tblptrh	equ	0xFF7
 12602                           tblptrl	equ	0xFF6
 12603                           tablat	equ	0xFF5
 12604                           prodh	equ	0xFF4
 12605                           prodl	equ	0xFF3
 12606                           postinc0	equ	0xFEE
 12607                           wreg	equ	0xFE8
 12608                           indf2	equ	0xFDF
 12609                           postinc2	equ	0xFDE
 12610                           postdec2	equ	0xFDD
 12611                           fsr2h	equ	0xFDA
 12612                           fsr2l	equ	0xFD9
 12613                           status	equ	0xFD8
 12614                           
 12615 ;; *************** function _vscp_goActiveState *****************
 12616 ;; Defined at:
 12617 ;;		line 350 in file "../../vscp_firmware/common/vscp_firmware.c"
 12618 ;; Parameters:    Size  Location     Type
 12619 ;;		None
 12620 ;; Auto vars:     Size  Location     Type
 12621 ;;		None
 12622 ;; Return value:  Size  Location     Type
 12623 ;;		None               void
 12624 ;; Registers used:
 12625 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12626 ;; Tracked objects:
 12627 ;;		On entry : 0/0
 12628 ;;		On exit  : F/0
 12629 ;;		Unchanged: 0/0
 12630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12631 ;;      Params:         0       0       0       0       0       0       0
 12632 ;;      Locals:         0       0       0       0       0       0       0
 12633 ;;      Temps:          0       0       0       0       0       0       0
 12634 ;;      Totals:         0       0       0       0       0       0       0
 12635 ;;Total ram usage:        0 bytes
 12636 ;; Hardware stack levels used:    1
 12637 ;; Hardware stack levels required when called:    7
 12638 ;; This function calls:
 12639 ;;		_vscp_sendEvent
 12640 ;; This function is called by:
 12641 ;;		_main
 12642 ;;		_vscp_handleProbeState
 12643 ;; This function uses a non-reentrant model
 12644 ;;
 12645                           
 12646                           	psect	text50
 12647  003DC8                     __ptext50:
 12648                           	opt stack 0
 12649  003DC8                     _vscp_goActiveState:
 12650                           	opt stack 21
 12651                           
 12652                           ;vscp_firmware.c: 351: vscp_omsg.flags = 0x80 + 1;
 12653                           
 12654                           ; BSR set to: 0
 12655                           ;incstack = 0
 12656                           ;incstack = 0
 12657  003DC8  0E81               	movlw	129
 12658  003DCA  0100               	movlb	0	; () banked
 12659  003DCC  6FA9               	movwf	_vscp_omsg& (0+255),b
 12660                           
 12661                           ; BSR set to: 0
 12662                           ;vscp_firmware.c: 352: vscp_omsg.priority = 0x00;
 12663  003DCE  6BAA               	clrf	(_vscp_omsg+1)& (0+255),b
 12664                           
 12665                           ; BSR set to: 0
 12666                           ;vscp_firmware.c: 353: vscp_omsg.vscp_class = 0;
 12667  003DD0  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
 12668  003DD2  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
 12669                           
 12670                           ;vscp_firmware.c: 354: vscp_omsg.vscp_type = 2;
 12671  003DD4  0E02               	movlw	2
 12672  003DD6  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
 12673                           
 12674                           ; BSR set to: 0
 12675                           ;vscp_firmware.c: 355: vscp_omsg.data[ 0 ] = vscp_nickname;
 12676  003DD8  C096  F0AE         	movff	_vscp_nickname,_vscp_omsg+5
 12677                           
 12678                           ; BSR set to: 0
 12679                           ;vscp_firmware.c: 358: vscp_sendEvent();
 12680  003DDC  EC46  F01E         	call	_vscp_sendEvent	;wreg free
 12681                           
 12682                           ; BSR set to: 0
 12683                           ;vscp_firmware.c: 360: vscp_initledfunc = 0x01;
 12684  003DE0  0E01               	movlw	1
 12685  003DE2  6E56               	movwf	_vscp_initledfunc,c
 12686                           
 12687                           ; BSR set to: 0
 12688  003DE4  0C01               	retlw	1
 12689  003DE6                     __end_of_vscp_goActiveState:
 12690                           	opt stack 0
 12691                           tblptru	equ	0xFF8
 12692                           tblptrh	equ	0xFF7
 12693                           tblptrl	equ	0xFF6
 12694                           tablat	equ	0xFF5
 12695                           prodh	equ	0xFF4
 12696                           prodl	equ	0xFF3
 12697                           postinc0	equ	0xFEE
 12698                           wreg	equ	0xFE8
 12699                           indf2	equ	0xFDF
 12700                           postinc2	equ	0xFDE
 12701                           postdec2	equ	0xFDD
 12702                           fsr2h	equ	0xFDA
 12703                           fsr2l	equ	0xFD9
 12704                           status	equ	0xFD8
 12705                           
 12706 ;; *************** function _vscp_sendEvent *****************
 12707 ;; Defined at:
 12708 ;;		line 1270 in file "../../vscp_firmware/common/vscp_firmware.c"
 12709 ;; Parameters:    Size  Location     Type
 12710 ;;		None
 12711 ;; Auto vars:     Size  Location     Type
 12712 ;;  rv              1    0        unsigned char 
 12713 ;; Return value:  Size  Location     Type
 12714 ;;                  1    wreg      unsigned char 
 12715 ;; Registers used:
 12716 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12717 ;; Tracked objects:
 12718 ;;		On entry : F/0
 12719 ;;		On exit  : F/0
 12720 ;;		Unchanged: 0/0
 12721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12722 ;;      Params:         0       0       0       0       0       0       0
 12723 ;;      Locals:         1       0       0       0       0       0       0
 12724 ;;      Temps:          0       0       0       0       0       0       0
 12725 ;;      Totals:         1       0       0       0       0       0       0
 12726 ;;Total ram usage:        1 bytes
 12727 ;; Hardware stack levels used:    1
 12728 ;; Hardware stack levels required when called:    6
 12729 ;; This function calls:
 12730 ;;		_sendVSCPFrame
 12731 ;; This function is called by:
 12732 ;;		_vscp_handleProbeState
 12733 ;;		_vscp_goActiveState
 12734 ;;		_vscp_sendHeartBeat
 12735 ;;		_vscp_newNodeOnline
 12736 ;;		_vscp_handleProtocolEvent
 12737 ;; This function uses a non-reentrant model
 12738 ;;
 12739                           
 12740                           	psect	text51
 12741  003C8C                     __ptext51:
 12742                           	opt stack 0
 12743  003C8C                     _vscp_sendEvent:
 12744                           	opt stack 21
 12745                           
 12746                           ; BSR set to: 0
 12747                           
 12748                           ; BSR set to: 0
 12749                           ;incstack = 0
 12750                           ;incstack = 0
 12751  003C8C  C0AB  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 12752  003C90  C0AC  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 12753  003C94  C0AD  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 12754  003C98  C096  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 12755  003C9C  C0AA  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 12756  003CA0  51A9               	movf	_vscp_omsg& (0+255),w,b
 12757  003CA2  0B0F               	andlw	15
 12758  003CA4  6E44               	movwf	?_sendVSCPFrame+5,c
 12759  003CA6  0E00               	movlw	high (_vscp_omsg+5)
 12760  003CA8  6E46               	movwf	?_sendVSCPFrame+7,c
 12761  003CAA  0EAE               	movlw	low (_vscp_omsg+5)
 12762  003CAC  6E45               	movwf	?_sendVSCPFrame+6,c
 12763  003CAE  EF3C  F01B         	goto	_sendVSCPFrame	;wreg free
 12764  003CB2                     __end_of_vscp_sendEvent:
 12765                           	opt stack 0
 12766                           tblptru	equ	0xFF8
 12767                           tblptrh	equ	0xFF7
 12768                           tblptrl	equ	0xFF6
 12769                           tablat	equ	0xFF5
 12770                           prodh	equ	0xFF4
 12771                           prodl	equ	0xFF3
 12772                           postinc0	equ	0xFEE
 12773                           wreg	equ	0xFE8
 12774                           indf2	equ	0xFDF
 12775                           postinc2	equ	0xFDE
 12776                           postdec2	equ	0xFDD
 12777                           fsr2h	equ	0xFDA
 12778                           fsr2l	equ	0xFD9
 12779                           status	equ	0xFD8
 12780                           
 12781 ;; *************** function _sendVSCPFrame *****************
 12782 ;; Defined at:
 12783 ;;		line 2496 in file "../main.c"
 12784 ;; Parameters:    Size  Location     Type
 12785 ;;  vscpclass       2   62[COMRAM] unsigned short 
 12786 ;;  vscptype        1   64[COMRAM] unsigned char 
 12787 ;;  nodeid          1   65[COMRAM] unsigned char 
 12788 ;;  priority        1   66[COMRAM] unsigned char 
 12789 ;;  size            1   67[COMRAM] unsigned char 
 12790 ;;  pData           2   68[COMRAM] PTR unsigned char 
 12791 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 12792 ;; Auto vars:     Size  Location     Type
 12793 ;;  id              4   70[COMRAM] unsigned long 
 12794 ;; Return value:  Size  Location     Type
 12795 ;;                  1    wreg      unsigned char 
 12796 ;; Registers used:
 12797 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12798 ;; Tracked objects:
 12799 ;;		On entry : F/0
 12800 ;;		On exit  : F/0
 12801 ;;		Unchanged: 0/0
 12802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12803 ;;      Params:         8       0       0       0       0       0       0
 12804 ;;      Locals:         4       0       0       0       0       0       0
 12805 ;;      Temps:          0      20       0       0       0       0       0
 12806 ;;      Totals:        12      20       0       0       0       0       0
 12807 ;;Total ram usage:       32 bytes
 12808 ;; Hardware stack levels used:    1
 12809 ;; Hardware stack levels required when called:    5
 12810 ;; This function calls:
 12811 ;;		_sendCANFrame
 12812 ;; This function is called by:
 12813 ;;		_SendInformationEvent
 12814 ;;		_vscp_sendEvent
 12815 ;; This function uses a non-reentrant model
 12816 ;;
 12817                           
 12818                           	psect	text52
 12819  003678                     __ptext52:
 12820                           	opt stack 0
 12821  003678                     _sendVSCPFrame:
 12822                           	opt stack 22
 12823                           
 12824                           ; BSR set to: 0
 12825                           ;main.c: 2497: uint32_t id = ( (uint32_t)priority << 26 ) |
 12826                           ;main.c: 2498: ( (uint32_t)vscpclass << 16 ) |
 12827                           ;main.c: 2499: ( (uint32_t)vscptype << 8 ) |
 12828                           ;main.c: 2500: nodeid;
 12829                           
 12830                           ; BSR set to: 0
 12831                           ;incstack = 0
 12832                           ;incstack = 0
 12833  003678  C041  F0B6         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 12834  00367C  6BB7               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 12835  00367E  6BB8               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 12836  003680  6BB9               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 12837  003682  C0B8  F0B9         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 12838  003686  C0B7  F0B8         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 12839  00368A  C0B6  F0B7         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 12840  00368E  6BB6               	clrf	??_sendVSCPFrame& (0+255),b
 12841  003690  503F               	movf	sendVSCPFrame@vscpclass,w,c
 12842  003692  6FBA               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 12843  003694  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 12844  003696  6FBB               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 12845  003698  6BBC               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 12846  00369A  6BBD               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 12847  00369C  C0BB  F0BD         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 12848  0036A0  C0BA  F0BC         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 12849  0036A4  6BBB               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 12850  0036A6  6BBA               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 12851  0036A8  C043  F0BE         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 12852  0036AC  6BBF               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 12853  0036AE  6BC0               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 12854  0036B0  6BC1               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 12855  0036B2  0E1A               	movlw	26
 12856  0036B4                     u9955:
 12857  0036B4  90D8               	bcf	status,0,c
 12858  0036B6  37BE               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 12859  0036B8  37BF               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 12860  0036BA  37C0               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 12861  0036BC  37C1               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 12862  0036BE  2EE8               	decfsz	wreg,f,c
 12863  0036C0  D7F9               	goto	u9955
 12864  0036C2  51BA               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 12865  0036C4  11BE               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 12866  0036C6  6FC2               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 12867  0036C8  51BB               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 12868  0036CA  11BF               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 12869  0036CC  6FC3               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 12870  0036CE  51BC               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 12871  0036D0  11C0               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 12872  0036D2  6FC4               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 12873  0036D4  51BD               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 12874  0036D6  11C1               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 12875  0036D8  6FC5               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 12876  0036DA  51B6               	movf	??_sendVSCPFrame& (0+255),w,b
 12877  0036DC  11C2               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 12878  0036DE  6FC6               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 12879  0036E0  51B7               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 12880  0036E2  11C3               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 12881  0036E4  6FC7               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 12882  0036E6  51B8               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 12883  0036E8  11C4               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 12884  0036EA  6FC8               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 12885  0036EC  51B9               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 12886  0036EE  11C5               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 12887  0036F0  6FC9               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 12888  0036F2  5042               	movf	sendVSCPFrame@nodeid,w,c
 12889  0036F4  11C6               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 12890  0036F6  6E47               	movwf	sendVSCPFrame@id,c
 12891  0036F8  51C7               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 12892  0036FA  6E48               	movwf	sendVSCPFrame@id+1,c
 12893  0036FC  51C8               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 12894  0036FE  6E49               	movwf	sendVSCPFrame@id+2,c
 12895  003700  51C9               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 12896  003702  6E4A               	movwf	sendVSCPFrame@id+3,c
 12897                           
 12898                           ; BSR set to: 0
 12899                           ;main.c: 2502: if ( !sendCANFrame( id, size, pData ) ) {
 12900  003704  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 12901  003708  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 12902  00370C  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 12903  003710  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 12904  003714  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 12905  003718  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 12906  00371C  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 12907  003720  EC69  F01D         	call	_sendCANFrame	;wreg free
 12908  003724  0900               	iorlw	0
 12909                           
 12910                           ; BSR set to: 0
 12911                           ;main.c: 2503: return 0;
 12912  003726  0E00               	movlw	0
 12913  003728  A4D8               	btfss	status,2,c
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;main.c: 2504: }
 12917                           ;main.c: 2506: return 1;
 12918  00372A  0E01               	movlw	1
 12919                           
 12920                           ; BSR set to: 0
 12921  00372C  0012               	return	
 12922  00372E                     __end_of_sendVSCPFrame:
 12923                           	opt stack 0
 12924                           tblptru	equ	0xFF8
 12925                           tblptrh	equ	0xFF7
 12926                           tblptrl	equ	0xFF6
 12927                           tablat	equ	0xFF5
 12928                           prodh	equ	0xFF4
 12929                           prodl	equ	0xFF3
 12930                           postinc0	equ	0xFEE
 12931                           wreg	equ	0xFE8
 12932                           indf2	equ	0xFDF
 12933                           postinc2	equ	0xFDE
 12934                           postdec2	equ	0xFDD
 12935                           fsr2h	equ	0xFDA
 12936                           fsr2l	equ	0xFD9
 12937                           status	equ	0xFD8
 12938                           
 12939 ;; *************** function _sendCANFrame *****************
 12940 ;; Defined at:
 12941 ;;		line 2541 in file "../main.c"
 12942 ;; Parameters:    Size  Location     Type
 12943 ;;  id              4   54[COMRAM] unsigned long 
 12944 ;;  dlc             1   58[COMRAM] unsigned char 
 12945 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 12946 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 12947 ;; Auto vars:     Size  Location     Type
 12948 ;;  rv              1   61[COMRAM] unsigned char 
 12949 ;; Return value:  Size  Location     Type
 12950 ;;                  1    wreg      unsigned char 
 12951 ;; Registers used:
 12952 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12953 ;; Tracked objects:
 12954 ;;		On entry : F/0
 12955 ;;		On exit  : F/0
 12956 ;;		Unchanged: 0/0
 12957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12958 ;;      Params:         7       0       0       0       0       0       0
 12959 ;;      Locals:         1       0       0       0       0       0       0
 12960 ;;      Temps:          0       0       0       0       0       0       0
 12961 ;;      Totals:         8       0       0       0       0       0       0
 12962 ;;Total ram usage:        8 bytes
 12963 ;; Hardware stack levels used:    1
 12964 ;; Hardware stack levels required when called:    4
 12965 ;; This function calls:
 12966 ;;		_ECANSendMessage
 12967 ;; This function is called by:
 12968 ;;		_sendVSCPFrame
 12969 ;; This function uses a non-reentrant model
 12970 ;;
 12971                           
 12972                           	psect	text53
 12973  003AD2                     __ptext53:
 12974                           	opt stack 0
 12975  003AD2                     _sendCANFrame:
 12976                           	opt stack 22
 12977                           
 12978                           ; BSR set to: 0
 12979                           ;main.c: 2542: uint8_t rv = 0;
 12980                           
 12981                           ; BSR set to: 0
 12982                           ;incstack = 0
 12983                           ;incstack = 0
 12984  003AD2  6A3E               	clrf	sendCANFrame@rv,c
 12985                           
 12986                           ;main.c: 2543: sendTimer = 0;
 12987  003AD4  6A55               	clrf	_sendTimer,c
 12988                           
 12989                           ;main.c: 2545: while ( sendTimer < 1 ) {
 12990  003AD6  D017               	goto	l8833
 12991  003AD8                     l8829:
 12992                           
 12993                           ;main.c: 2546: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 12994  003AD8  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 12995  003ADC  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 12996  003AE0  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 12997  003AE4  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 12998  003AE8  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 12999  003AEC  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 13000  003AF0  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 13001  003AF4  0E20               	movlw	32
 13002  003AF6  6E19               	movwf	?_ECANSendMessage+7,c
 13003  003AF8  ECF4  F015         	call	_ECANSendMessage	;wreg free
 13004  003AFC  0900               	iorlw	0
 13005  003AFE  E003               	bz	l8833
 13006                           
 13007                           ;main.c: 2547: rv = 1;
 13008  003B00  0E01               	movlw	1
 13009  003B02  6E3E               	movwf	sendCANFrame@rv,c
 13010                           
 13011                           ;main.c: 2548: break;
 13012  003B04  D002               	goto	l653
 13013  003B06                     l8833:
 13014  003B06  5055               	movf	_sendTimer,w,c
 13015  003B08  E0E7               	bz	l8829
 13016  003B0A                     l653:
 13017                           
 13018                           ;main.c: 2549: }
 13019                           ;main.c: 2550: }
 13020                           ;main.c: 2552: vscp_omsg.flags = 0;
 13021  003B0A  0100               	movlb	0	; () banked
 13022  003B0C  6BA9               	clrf	_vscp_omsg& (0+255),b
 13023                           
 13024                           ; BSR set to: 0
 13025                           ;main.c: 2554: return rv;
 13026  003B0E  503E               	movf	sendCANFrame@rv,w,c
 13027                           
 13028                           ; BSR set to: 0
 13029  003B10  0012               	return	
 13030  003B12                     __end_of_sendCANFrame:
 13031                           	opt stack 0
 13032                           tblptru	equ	0xFF8
 13033                           tblptrh	equ	0xFF7
 13034                           tblptrl	equ	0xFF6
 13035                           tablat	equ	0xFF5
 13036                           prodh	equ	0xFF4
 13037                           prodl	equ	0xFF3
 13038                           postinc0	equ	0xFEE
 13039                           wreg	equ	0xFE8
 13040                           indf2	equ	0xFDF
 13041                           postinc2	equ	0xFDE
 13042                           postdec2	equ	0xFDD
 13043                           fsr2h	equ	0xFDA
 13044                           fsr2l	equ	0xFD9
 13045                           status	equ	0xFD8
 13046                           
 13047 ;; *************** function _ECANSendMessage *****************
 13048 ;; Defined at:
 13049 ;;		line 617 in file "../ECAN.c"
 13050 ;; Parameters:    Size  Location     Type
 13051 ;;  id              4   17[COMRAM] unsigned long 
 13052 ;;  data            2   21[COMRAM] PTR unsigned char 
 13053 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13054 ;;  dataLen         1   23[COMRAM] unsigned char 
 13055 ;;  msgFlags        1   24[COMRAM] enum E16315
 13056 ;; Auto vars:     Size  Location     Type
 13057 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 13058 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13059 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13060 ;;		 -> B0CON(1), 
 13061 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 13062 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13063 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13064 ;;		 -> B0CON(1), 
 13065 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 13066 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13067 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13068 ;;		 -> B0CON(1), 
 13069 ;;  i               1   51[COMRAM] unsigned char 
 13070 ;;  temp            1   50[COMRAM] unsigned char 
 13071 ;;  tempBSEL0       1   47[COMRAM] struct .
 13072 ;;  j               1   46[COMRAM] unsigned char 
 13073 ;;  buffers         1   45[COMRAM] unsigned char 
 13074 ;;  mode            1   44[COMRAM] unsigned char 
 13075 ;; Return value:  Size  Location     Type
 13076 ;;                  1    wreg      enum E15660
 13077 ;; Registers used:
 13078 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13079 ;; Tracked objects:
 13080 ;;		On entry : 0/0
 13081 ;;		On exit  : 0/0
 13082 ;;		Unchanged: 0/0
 13083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13084 ;;      Params:         8       0       0       0       0       0       0
 13085 ;;      Locals:        28       0       0       0       0       0       0
 13086 ;;      Temps:          1       0       0       0       0       0       0
 13087 ;;      Totals:        37       0       0       0       0       0       0
 13088 ;;Total ram usage:       37 bytes
 13089 ;; Hardware stack levels used:    1
 13090 ;; Hardware stack levels required when called:    3
 13091 ;; This function calls:
 13092 ;;		__CANIDToRegs
 13093 ;; This function is called by:
 13094 ;;		_sendCANFrame
 13095 ;; This function uses a non-reentrant model
 13096 ;;
 13097                           
 13098                           	psect	text54
 13099  002BE8                     __ptext54:
 13100                           	opt stack 0
 13101  002BE8                     _ECANSendMessage:
 13102                           	opt stack 22
 13103                           
 13104                           ;ECAN.c: 619: BYTE mode;
 13105                           ;ECAN.c: 620: BYTE buffers;
 13106                           ;ECAN.c: 628: BYTE i,j;
 13107                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 13108                           ;ECAN.c: 630: BYTE* pb[9];
 13109                           ;ECAN.c: 631: BYTE temp;
 13110                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 13111                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 13112                           
 13113                           ; BSR set to: 0
 13114                           ;incstack = 0
 13115                           ;incstack = 0
 13116  002BE8  0E0F               	movlw	15	;volatile
 13117  002BEA  6E1C               	movwf	ECANSendMessage@pb+1,c
 13118  002BEC  0E40               	movlw	64	;volatile
 13119  002BEE  6E1B               	movwf	ECANSendMessage@pb,c
 13120                           
 13121                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 13122  002BF0  0E0F               	movlw	15	;volatile
 13123  002BF2  6E1E               	movwf	ECANSendMessage@pb+3,c
 13124  002BF4  0E30               	movlw	48	;volatile
 13125  002BF6  6E1D               	movwf	ECANSendMessage@pb+2,c
 13126                           
 13127                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 13128  002BF8  0E0F               	movlw	15	;volatile
 13129  002BFA  6E20               	movwf	ECANSendMessage@pb+5,c
 13130  002BFC  0E20               	movlw	32	;volatile
 13131  002BFE  6E1F               	movwf	ECANSendMessage@pb+4,c
 13132                           
 13133                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 13134  002C00  0E0E               	movlw	14	;volatile
 13135  002C02  6E22               	movwf	ECANSendMessage@pb+7,c
 13136  002C04  0E20               	movlw	32	;volatile
 13137  002C06  6E21               	movwf	ECANSendMessage@pb+6,c
 13138                           
 13139                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 13140  002C08  0E0E               	movlw	14	;volatile
 13141  002C0A  6E24               	movwf	ECANSendMessage@pb+9,c
 13142  002C0C  0E30               	movlw	48	;volatile
 13143  002C0E  6E23               	movwf	ECANSendMessage@pb+8,c
 13144                           
 13145                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 13146  002C10  0E0E               	movlw	14	;volatile
 13147  002C12  6E26               	movwf	ECANSendMessage@pb+11,c
 13148  002C14  0E40               	movlw	64	;volatile
 13149  002C16  6E25               	movwf	ECANSendMessage@pb+10,c
 13150                           
 13151                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 13152  002C18  0E0E               	movlw	14	;volatile
 13153  002C1A  6E28               	movwf	ECANSendMessage@pb+13,c
 13154  002C1C  0E50               	movlw	80	;volatile
 13155  002C1E  6E27               	movwf	ECANSendMessage@pb+12,c
 13156                           
 13157                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 13158  002C20  0E0E               	movlw	14	;volatile
 13159  002C22  6E2A               	movwf	ECANSendMessage@pb+15,c
 13160  002C24  0E60               	movlw	96	;volatile
 13161  002C26  6E29               	movwf	ECANSendMessage@pb+14,c
 13162                           
 13163                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 13164  002C28  0E0E               	movlw	14	;volatile
 13165  002C2A  6E2C               	movwf	ECANSendMessage@pb+17,c
 13166  002C2C  0E70               	movlw	112	;volatile
 13167  002C2E  6E2B               	movwf	ECANSendMessage@pb+16,c
 13168                           
 13169                           ; BSR set to: 14
 13170                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 13171  002C30  5077               	movf	3959,w,c	;volatile
 13172  002C32  0BC0               	andlw	192
 13173  002C34  6E2D               	movwf	ECANSendMessage@mode,c
 13174                           
 13175                           ; BSR set to: 14
 13176                           ;ECAN.c: 660: if ( mode == 0x00 )
 13177  002C36  662D               	tstfsz	ECANSendMessage@mode,c
 13178  002C38  D002               	goto	l8847
 13179                           
 13180                           ; BSR set to: 14
 13181                           ;ECAN.c: 661: buffers = 2;
 13182  002C3A  0E02               	movlw	2
 13183  002C3C  D001               	goto	L28
 13184  002C3E                     l8847:
 13185                           
 13186                           ; BSR set to: 14
 13187                           ;ECAN.c: 662: else
 13188                           ;ECAN.c: 663: buffers = 8;
 13189  002C3E  0E08               	movlw	8
 13190  002C40                     L28:
 13191  002C40  6E2E               	movwf	ECANSendMessage@buffers,c
 13192                           
 13193                           ; BSR set to: 14
 13194                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 13195  002C42  010D               	movlb	13	; () banked
 13196  002C44  90D8               	bcf	status,0,c
 13197  002C46  31F8               	rrcf	248,w,b	;volatile
 13198  002C48  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 13199                           
 13200                           ; BSR set to: 13
 13201                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 13202  002C4A  6A34               	clrf	ECANSendMessage@i,c
 13203  002C4C  D07D               	goto	l8907
 13204  002C4E                     l8853:
 13205                           
 13206                           ;ECAN.c: 688: {
 13207                           ;ECAN.c: 693: ptr = pb[i];
 13208  002C4E  5034               	movf	ECANSendMessage@i,w,c
 13209  002C50  0D02               	mullw	2
 13210  002C52  50F3               	movf	prodl,w,c
 13211  002C54  0F1B               	addlw	low ECANSendMessage@pb
 13212  002C56  6ED9               	movwf	fsr2l,c
 13213  002C58  6ADA               	clrf	fsr2h,c
 13214  002C5A  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 13215  002C5E  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 13216                           
 13217                           ;ECAN.c: 694: tempPtr = ptr;
 13218  002C62  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 13219  002C66  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 13220                           
 13221                           ;ECAN.c: 702: if ( i > 2 )
 13222  002C6A  0E02               	movlw	2
 13223  002C6C  6434               	cpfsgt	ECANSendMessage@i,c
 13224  002C6E  D004               	goto	l8865
 13225                           
 13226                           ;ECAN.c: 703: {
 13227                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 13228  002C70  90D8               	bcf	status,0,c
 13229  002C72  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 13230                           
 13231                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 13232  002C74  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 13233  002C76  D067               	goto	l8905
 13234  002C78                     l8865:
 13235                           
 13236                           ;ECAN.c: 714: }
 13237                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 13238  002C78  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13239  002C7C  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13240  002C80  50DF               	movf	indf2,w,c
 13241  002C82  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13242  002C84  B61A               	btfsc	??_ECANSendMessage,3,c
 13243  002C86  D05F               	goto	l8905
 13244                           
 13245                           ;ECAN.c: 721: {
 13246                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 13247  002C88  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13248  002C8C  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13249  002C90  0EFC               	movlw	252
 13250  002C92  16DF               	andwf	indf2,f,c
 13251                           
 13252                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 13253  002C94  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 13254  002C98  0E03               	movlw	3
 13255  002C9A  161A               	andwf	??_ECANSendMessage,f,c
 13256  002C9C  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13257  002CA0  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13258  002CA4  501A               	movf	??_ECANSendMessage,w,c
 13259  002CA6  12DF               	iorwf	indf2,f,c
 13260                           
 13261                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 13262  002CA8  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 13263  002CAA  D004               	goto	l845
 13264                           
 13265                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 13266  002CAC  5018               	movf	ECANSendMessage@dataLen,w,c
 13267  002CAE  0940               	iorlw	64
 13268  002CB0  6E33               	movwf	ECANSendMessage@temp,c
 13269  002CB2  D002               	goto	l8875
 13270  002CB4                     l845:
 13271                           
 13272                           ;ECAN.c: 729: else
 13273                           ;ECAN.c: 730: temp = dataLen;
 13274  002CB4  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 13275  002CB8                     l8875:
 13276                           
 13277                           ;ECAN.c: 732: *(ptr+5) = temp;
 13278  002CB8  EE20 F005          	lfsr	2,5
 13279  002CBC  5035               	movf	ECANSendMessage@ptr,w,c
 13280  002CBE  26D9               	addwf	fsr2l,f,c
 13281  002CC0  5036               	movf	ECANSendMessage@ptr+1,w,c
 13282  002CC2  22DA               	addwfc	fsr2h,f,c
 13283  002CC4  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 13284                           
 13285                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 13286  002CC8  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 13287  002CCA  D003               	goto	l847
 13288                           
 13289                           ;ECAN.c: 736: temp = 1;
 13290  002CCC  0E01               	movlw	1
 13291  002CCE  6E33               	movwf	ECANSendMessage@temp,c
 13292  002CD0  D001               	goto	l8881
 13293  002CD2                     l847:
 13294                           
 13295                           ;ECAN.c: 738: else
 13296                           ;ECAN.c: 739: temp = 0;
 13297  002CD2  6A33               	clrf	ECANSendMessage@temp,c
 13298  002CD4                     l8881:
 13299                           
 13300                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 13301  002CD4  2835               	incf	ECANSendMessage@ptr,w,c
 13302  002CD6  6E08               	movwf	?__CANIDToRegs,c
 13303  002CD8  0E00               	movlw	0
 13304  002CDA  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 13305  002CDC  6E09               	movwf	?__CANIDToRegs+1,c
 13306  002CDE  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 13307  002CE2  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 13308  002CE6  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 13309  002CEA  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 13310  002CEE  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 13311  002CF2  EC5B  F017         	call	__CANIDToRegs	;wreg free
 13312                           
 13313                           ;ECAN.c: 745: ptr += 6;
 13314  002CF6  0E06               	movlw	6
 13315  002CF8  2635               	addwf	ECANSendMessage@ptr,f,c
 13316  002CFA  0E00               	movlw	0
 13317  002CFC  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 13318                           
 13319                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 13320  002CFE  6A2F               	clrf	ECANSendMessage@j,c
 13321  002D00  D00F               	goto	l8895
 13322  002D02                     l8887:
 13323                           
 13324                           ;ECAN.c: 748: *ptr++ = *data++;
 13325  002D02  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 13326  002D06  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 13327  002D0A  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 13328  002D0E  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 13329  002D12  CFDF FFE7          	movff	indf2,indf1
 13330  002D16  4A16               	infsnz	ECANSendMessage@data,f,c
 13331  002D18  2A17               	incf	ECANSendMessage@data+1,f,c
 13332  002D1A  4A35               	infsnz	ECANSendMessage@ptr,f,c
 13333  002D1C  2A36               	incf	ECANSendMessage@ptr+1,f,c
 13334  002D1E  2A2F               	incf	ECANSendMessage@j,f,c
 13335  002D20                     l8895:
 13336  002D20  5018               	movf	ECANSendMessage@dataLen,w,c
 13337  002D22  5C2F               	subwf	ECANSendMessage@j,w,c
 13338  002D24  E3EE               	bnc	l8887
 13339                           
 13340                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 13341  002D26  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13342  002D2A  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13343  002D2E  50DF               	movf	indf2,w,c
 13344  002D30  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13345  002D32  B41A               	btfsc	??_ECANSendMessage,2,c
 13346  002D34  D006               	goto	l8901
 13347                           
 13348                           ;ECAN.c: 753: *tempPtr |= 0x08;
 13349  002D36  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13350  002D3A  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13351  002D3E  0E00               	movlw	0
 13352  002D40  86DB               	bsf	plusw2,3,c
 13353  002D42                     l8901:
 13354                           
 13355                           ;ECAN.c: 755: return TRUE;
 13356  002D42  0E01               	movlw	1
 13357  002D44  D005               	goto	l853
 13358  002D46                     l8905:
 13359  002D46  2A34               	incf	ECANSendMessage@i,f,c
 13360  002D48                     l8907:
 13361  002D48  502E               	movf	ECANSendMessage@buffers,w,c
 13362  002D4A  5C34               	subwf	ECANSendMessage@i,w,c
 13363  002D4C  E380               	bnc	l8853
 13364                           
 13365                           ;ECAN.c: 756: }
 13366                           ;ECAN.c: 757: }
 13367                           ;ECAN.c: 760: return FALSE;
 13368  002D4E  0E00               	movlw	0
 13369  002D50                     l853:
 13370  002D50  0012               	return	
 13371  002D52                     __end_of_ECANSendMessage:
 13372                           	opt stack 0
 13373                           tblptru	equ	0xFF8
 13374                           tblptrh	equ	0xFF7
 13375                           tblptrl	equ	0xFF6
 13376                           tablat	equ	0xFF5
 13377                           prodh	equ	0xFF4
 13378                           prodl	equ	0xFF3
 13379                           postinc0	equ	0xFEE
 13380                           wreg	equ	0xFE8
 13381                           indf1	equ	0xFE7
 13382                           fsr1h	equ	0xFE2
 13383                           fsr1l	equ	0xFE1
 13384                           indf2	equ	0xFDF
 13385                           postinc2	equ	0xFDE
 13386                           postdec2	equ	0xFDD
 13387                           plusw2	equ	0xFDB
 13388                           fsr2h	equ	0xFDA
 13389                           fsr2l	equ	0xFD9
 13390                           status	equ	0xFD8
 13391                           
 13392 ;; *************** function __CANIDToRegs *****************
 13393 ;; Defined at:
 13394 ;;		line 1099 in file "../ECAN.c"
 13395 ;; Parameters:    Size  Location     Type
 13396 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 13397 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13398 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13399 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
 13400 ;;  val             4    9[COMRAM] unsigned long 
 13401 ;;  type            1   13[COMRAM] unsigned char 
 13402 ;; Auto vars:     Size  Location     Type
 13403 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 13404 ;;		 -> _CANIDToRegs@val(4), 
 13405 ;; Return value:  Size  Location     Type
 13406 ;;		None               void
 13407 ;; Registers used:
 13408 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13409 ;; Tracked objects:
 13410 ;;		On entry : 0/F
 13411 ;;		On exit  : 0/0
 13412 ;;		Unchanged: 0/0
 13413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13414 ;;      Params:         7       0       0       0       0       0       0
 13415 ;;      Locals:         1       0       0       0       0       0       0
 13416 ;;      Temps:          2       0       0       0       0       0       0
 13417 ;;      Totals:        10       0       0       0       0       0       0
 13418 ;;Total ram usage:       10 bytes
 13419 ;; Hardware stack levels used:    1
 13420 ;; Hardware stack levels required when called:    2
 13421 ;; This function calls:
 13422 ;;		Nothing
 13423 ;; This function is called by:
 13424 ;;		_calculateSetFilterMask
 13425 ;;		_ECANSendMessage
 13426 ;; This function uses a non-reentrant model
 13427 ;;
 13428                           
 13429                           	psect	text55
 13430  002EB6                     __ptext55:
 13431                           	opt stack 0
 13432  002EB6                     __CANIDToRegs:
 13433                           	opt stack 22
 13434                           
 13435                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 13436                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 13437                           
 13438                           ;incstack = 0
 13439                           ;incstack = 0
 13440  002EB6  0E0A               	movlw	low __CANIDToRegs@val
 13441  002EB8  6E11               	movwf	__CANIDToRegs@Value,c
 13442                           
 13443                           ;ECAN.c: 1104: if ( type == 0 )
 13444  002EBA  660E               	tstfsz	__CANIDToRegs@type,c
 13445  002EBC  D037               	goto	l8923
 13446                           
 13447                           ;ECAN.c: 1105: {
 13448                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 13449  002EBE  5011               	movf	__CANIDToRegs@Value,w,c
 13450  002EC0  6ED9               	movwf	fsr2l,c
 13451  002EC2  6ADA               	clrf	fsr2h,c
 13452  002EC4  50DF               	movf	indf2,w,c
 13453  002EC6  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13454  002EC8  90D8               	bcf	status,0,c
 13455  002ECA  320F               	rrcf	??__CANIDToRegs,f,c
 13456  002ECC  90D8               	bcf	status,0,c
 13457  002ECE  320F               	rrcf	??__CANIDToRegs,f,c
 13458  002ED0  90D8               	bcf	status,0,c
 13459  002ED2  300F               	rrcf	??__CANIDToRegs,w,c
 13460  002ED4  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13461  002ED8  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13462  002EDC  6EDF               	movwf	indf2,c
 13463                           
 13464                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 13465  002EDE  5011               	movf	__CANIDToRegs@Value,w,c
 13466  002EE0  6ED9               	movwf	fsr2l,c
 13467  002EE2  6ADA               	clrf	fsr2h,c
 13468  002EE4  2AD9               	incf	fsr2l,f,c
 13469  002EE6  6ADA               	clrf	fsr2h,c
 13470  002EE8  50DF               	movf	indf2,w,c
 13471  002EEA  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13472  002EEC  0E05               	movlw	5
 13473  002EEE  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13474  002EF0                     u10625:
 13475  002EF0  90D8               	bcf	status,0,c
 13476  002EF2  360F               	rlcf	??__CANIDToRegs,f,c
 13477  002EF4  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13478  002EF6  D7FC               	goto	u10625
 13479  002EF8  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13480  002EFC  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13481  002F00  500F               	movf	??__CANIDToRegs,w,c
 13482  002F02  12DF               	iorwf	indf2,f,c
 13483                           
 13484                           ;ECAN.c: 1109: ptr++;
 13485  002F04  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13486  002F06  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13487                           
 13488                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 13489  002F08  5011               	movf	__CANIDToRegs@Value,w,c
 13490  002F0A  6ED9               	movwf	fsr2l,c
 13491  002F0C  6ADA               	clrf	fsr2h,c
 13492  002F0E  50DF               	movf	indf2,w,c
 13493  002F10  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13494  002F12  0E05               	movlw	5
 13495  002F14  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13496  002F16                     u10635:
 13497  002F16  90D8               	bcf	status,0,c
 13498  002F18  360F               	rlcf	??__CANIDToRegs,f,c
 13499  002F1A  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13500  002F1C  D7FC               	goto	u10635
 13501  002F1E  500F               	movf	??__CANIDToRegs,w,c
 13502  002F20  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13503  002F24  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13504  002F28  6EDF               	movwf	indf2,c
 13505                           
 13506                           ;ECAN.c: 1111: }
 13507  002F2A  D06C               	goto	l907
 13508  002F2C                     l8923:
 13509                           
 13510                           ;ECAN.c: 1112: else
 13511                           ;ECAN.c: 1113: {
 13512                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 13513  002F2C  5011               	movf	__CANIDToRegs@Value,w,c
 13514  002F2E  6ED9               	movwf	fsr2l,c
 13515  002F30  6ADA               	clrf	fsr2h,c
 13516  002F32  0E02               	movlw	2
 13517  002F34  26D9               	addwf	fsr2l,f,c
 13518  002F36  6ADA               	clrf	fsr2h,c
 13519  002F38  50DF               	movf	indf2,w,c
 13520  002F3A  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13521  002F3C  0E05               	movlw	5
 13522  002F3E  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13523  002F40                     u10645:
 13524  002F40  90D8               	bcf	status,0,c
 13525  002F42  320F               	rrcf	??__CANIDToRegs,f,c
 13526  002F44  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13527  002F46  D7FC               	goto	u10645
 13528  002F48  500F               	movf	??__CANIDToRegs,w,c
 13529  002F4A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13530  002F4E  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13531  002F52  6EDF               	movwf	indf2,c
 13532                           
 13533                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 13534  002F54  5011               	movf	__CANIDToRegs@Value,w,c
 13535  002F56  6ED9               	movwf	fsr2l,c
 13536  002F58  6ADA               	clrf	fsr2h,c
 13537  002F5A  0E03               	movlw	3
 13538  002F5C  26D9               	addwf	fsr2l,f,c
 13539  002F5E  6ADA               	clrf	fsr2h,c
 13540  002F60  50DF               	movf	indf2,w,c
 13541  002F62  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13542  002F64  90D8               	bcf	status,0,c
 13543  002F66  360F               	rlcf	??__CANIDToRegs,f,c
 13544  002F68  90D8               	bcf	status,0,c
 13545  002F6A  360F               	rlcf	??__CANIDToRegs,f,c
 13546  002F6C  90D8               	bcf	status,0,c
 13547  002F6E  360F               	rlcf	??__CANIDToRegs,f,c
 13548  002F70  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13549  002F74  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13550  002F78  500F               	movf	??__CANIDToRegs,w,c
 13551  002F7A  12DF               	iorwf	indf2,f,c
 13552                           
 13553                           ;ECAN.c: 1117: ptr++;
 13554  002F7C  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13555  002F7E  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13556                           
 13557                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 13558  002F80  5011               	movf	__CANIDToRegs@Value,w,c
 13559  002F82  6ED9               	movwf	fsr2l,c
 13560  002F84  6ADA               	clrf	fsr2h,c
 13561  002F86  0E02               	movlw	2
 13562  002F88  26D9               	addwf	fsr2l,f,c
 13563  002F8A  6ADA               	clrf	fsr2h,c
 13564  002F8C  50DF               	movf	indf2,w,c
 13565  002F8E  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13566  002F90  90D8               	bcf	status,0,c
 13567  002F92  360F               	rlcf	??__CANIDToRegs,f,c
 13568  002F94  90D8               	bcf	status,0,c
 13569  002F96  360F               	rlcf	??__CANIDToRegs,f,c
 13570  002F98  90D8               	bcf	status,0,c
 13571  002F9A  340F               	rlcf	??__CANIDToRegs,w,c
 13572  002F9C  0BE0               	andlw	224
 13573  002F9E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13574  002FA2  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13575  002FA6  6EDF               	movwf	indf2,c
 13576                           
 13577                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 13578  002FA8  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13579  002FAC  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13580  002FB0  0E00               	movlw	0
 13581  002FB2  86DB               	bsf	plusw2,3,c
 13582                           
 13583                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 13584  002FB4  5011               	movf	__CANIDToRegs@Value,w,c
 13585  002FB6  6ED9               	movwf	fsr2l,c
 13586  002FB8  6ADA               	clrf	fsr2h,c
 13587  002FBA  0E02               	movlw	2
 13588  002FBC  26D9               	addwf	fsr2l,f,c
 13589  002FBE  6ADA               	clrf	fsr2h,c
 13590  002FC0  50DF               	movf	indf2,w,c
 13591  002FC2  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13592  002FC4  0E03               	movlw	3
 13593  002FC6  160F               	andwf	??__CANIDToRegs,f,c
 13594  002FC8  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13595  002FCC  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13596  002FD0  500F               	movf	??__CANIDToRegs,w,c
 13597  002FD2  12DF               	iorwf	indf2,f,c
 13598                           
 13599                           ;ECAN.c: 1122: ptr++;
 13600  002FD4  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13601  002FD6  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13602                           
 13603                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 13604  002FD8  5011               	movf	__CANIDToRegs@Value,w,c
 13605  002FDA  6ED9               	movwf	fsr2l,c
 13606  002FDC  6ADA               	clrf	fsr2h,c
 13607  002FDE  2AD9               	incf	fsr2l,f,c
 13608  002FE0  6ADA               	clrf	fsr2h,c
 13609  002FE2  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13610  002FE6  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13611  002FEA  CFDF FFE7          	movff	indf2,indf1
 13612                           
 13613                           ;ECAN.c: 1124: ptr++;
 13614  002FEE  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13615  002FF0  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13616                           
 13617                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 13618  002FF2  5011               	movf	__CANIDToRegs@Value,w,c
 13619  002FF4  6ED9               	movwf	fsr2l,c
 13620  002FF6  6ADA               	clrf	fsr2h,c
 13621  002FF8  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13622  002FFC  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13623  003000  CFDF FFE7          	movff	indf2,indf1
 13624  003004                     l907:
 13625  003004  0012               	return	
 13626  003006                     __end_of__CANIDToRegs:
 13627                           	opt stack 0
 13628                           tblptru	equ	0xFF8
 13629                           tblptrh	equ	0xFF7
 13630                           tblptrl	equ	0xFF6
 13631                           tablat	equ	0xFF5
 13632                           prodh	equ	0xFF4
 13633                           prodl	equ	0xFF3
 13634                           postinc0	equ	0xFEE
 13635                           wreg	equ	0xFE8
 13636                           indf1	equ	0xFE7
 13637                           fsr1h	equ	0xFE2
 13638                           fsr1l	equ	0xFE1
 13639                           indf2	equ	0xFDF
 13640                           postinc2	equ	0xFDE
 13641                           postdec2	equ	0xFDD
 13642                           plusw2	equ	0xFDB
 13643                           fsr2h	equ	0xFDA
 13644                           fsr2l	equ	0xFD9
 13645                           status	equ	0xFD8
 13646                           
 13647 ;; *************** function _vscp_getEvent *****************
 13648 ;; Defined at:
 13649 ;;		line 1290 in file "../../vscp_firmware/common/vscp_firmware.c"
 13650 ;; Parameters:    Size  Location     Type
 13651 ;;		None
 13652 ;; Auto vars:     Size  Location     Type
 13653 ;;  rv              1   43[COMRAM] unsigned char 
 13654 ;; Return value:  Size  Location     Type
 13655 ;;                  1    wreg      unsigned char 
 13656 ;; Registers used:
 13657 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13658 ;; Tracked objects:
 13659 ;;		On entry : F/0
 13660 ;;		On exit  : 0/0
 13661 ;;		Unchanged: 0/0
 13662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13663 ;;      Params:         0       0       0       0       0       0       0
 13664 ;;      Locals:         1       0       0       0       0       0       0
 13665 ;;      Temps:          0       0       0       0       0       0       0
 13666 ;;      Totals:         1       0       0       0       0       0       0
 13667 ;;Total ram usage:        1 bytes
 13668 ;; Hardware stack levels used:    1
 13669 ;; Hardware stack levels required when called:    6
 13670 ;; This function calls:
 13671 ;;		_getVSCPFrame
 13672 ;; This function is called by:
 13673 ;;		_main
 13674 ;; This function uses a non-reentrant model
 13675 ;;
 13676                           
 13677                           	psect	text56
 13678  003C14                     __ptext56:
 13679                           	opt stack 0
 13680  003C14                     _vscp_getEvent:
 13681                           	opt stack 23
 13682                           
 13683                           ; BSR set to: 0
 13684                           ;vscp_firmware.c: 1291: int8_t rv;
 13685                           ;vscp_firmware.c: 1297: if (vscp_imsg.flags & 0x80) return !0;
 13686                           
 13687                           ;incstack = 0
 13688                           ;incstack = 0
 13689  003C14  BF9B               	btfsc	_vscp_imsg& (0+255),7,b
 13690  003C16  D012               	goto	l1279
 13691                           
 13692                           ; BSR set to: 0
 13693                           ;vscp_firmware.c: 1300: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
 13694                           ;vscp_firmware.c: 1301: &vscp_imsg.vscp_type,
 13695                           ;vscp_firmware.c: 1302: &vscp_imsg.oaddr,
 13696                           ;vscp_firmware.c: 1303: &vscp_imsg.priority,
 13697                           ;vscp_firmware.c: 1304: &vscp_imsg.flags,
 13698                           ;vscp_firmware.c: 1305: vscp_imsg.data))) {
 13699  003C18  0E9F               	movlw	low (_vscp_imsg+4)
 13700  003C1A  6E1E               	movwf	?_getVSCPFrame,c
 13701  003C1C  0EA0               	movlw	low (_vscp_imsg+5)
 13702  003C1E  6E1F               	movwf	?_getVSCPFrame+1,c
 13703  003C20  0E9C               	movlw	low (_vscp_imsg+1)
 13704  003C22  6E20               	movwf	?_getVSCPFrame+2,c
 13705  003C24  0E9B               	movlw	low _vscp_imsg
 13706  003C26  6E21               	movwf	?_getVSCPFrame+3,c
 13707  003C28  0EA1               	movlw	low (_vscp_imsg+6)
 13708  003C2A  6E22               	movwf	?_getVSCPFrame+4,c
 13709  003C2C  0E9D               	movlw	(_vscp_imsg+2)& (0+255)
 13710  003C2E  EC3D  F01C         	call	_getVSCPFrame
 13711  003C32  6E2C               	movwf	vscp_getEvent@rv,c
 13712  003C34  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 13713  003C36  E002               	bz	l1279
 13714                           
 13715                           ;vscp_firmware.c: 1307: vscp_imsg.flags |= 0x80;
 13716  003C38  0100               	movlb	0	; () banked
 13717  003C3A  8F9B               	bsf	_vscp_imsg& (0+255),7,b
 13718  003C3C                     l1279:
 13719  003C3C  0012               	return	
 13720  003C3E                     __end_of_vscp_getEvent:
 13721                           	opt stack 0
 13722                           tblptru	equ	0xFF8
 13723                           tblptrh	equ	0xFF7
 13724                           tblptrl	equ	0xFF6
 13725                           tablat	equ	0xFF5
 13726                           prodh	equ	0xFF4
 13727                           prodl	equ	0xFF3
 13728                           postinc0	equ	0xFEE
 13729                           wreg	equ	0xFE8
 13730                           indf1	equ	0xFE7
 13731                           fsr1h	equ	0xFE2
 13732                           fsr1l	equ	0xFE1
 13733                           indf2	equ	0xFDF
 13734                           postinc2	equ	0xFDE
 13735                           postdec2	equ	0xFDD
 13736                           plusw2	equ	0xFDB
 13737                           fsr2h	equ	0xFDA
 13738                           fsr2l	equ	0xFD9
 13739                           status	equ	0xFD8
 13740                           
 13741 ;; *************** function _getVSCPFrame *****************
 13742 ;; Defined at:
 13743 ;;		line 2520 in file "../main.c"
 13744 ;; Parameters:    Size  Location     Type
 13745 ;;  pvscpclass      1    wreg     PTR unsigned short 
 13746 ;;		 -> vscp_imsg(14), 
 13747 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 13748 ;;		 -> vscp_imsg(14), 
 13749 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 13750 ;;		 -> vscp_imsg(14), 
 13751 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 13752 ;;		 -> vscp_imsg(14), 
 13753 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 13754 ;;		 -> vscp_imsg(14), 
 13755 ;;  pData           1   33[COMRAM] PTR unsigned char 
 13756 ;;		 -> vscp_imsg(14), 
 13757 ;; Auto vars:     Size  Location     Type
 13758 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 13759 ;;		 -> vscp_imsg(14), 
 13760 ;;  id              4   39[COMRAM] unsigned long 
 13761 ;; Return value:  Size  Location     Type
 13762 ;;                  1    wreg      unsigned char 
 13763 ;; Registers used:
 13764 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13765 ;; Tracked objects:
 13766 ;;		On entry : F/0
 13767 ;;		On exit  : 0/0
 13768 ;;		Unchanged: 0/0
 13769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13770 ;;      Params:         5       0       0       0       0       0       0
 13771 ;;      Locals:         5       0       0       0       0       0       0
 13772 ;;      Temps:          4       0       0       0       0       0       0
 13773 ;;      Totals:        14       0       0       0       0       0       0
 13774 ;;Total ram usage:       14 bytes
 13775 ;; Hardware stack levels used:    1
 13776 ;; Hardware stack levels required when called:    5
 13777 ;; This function calls:
 13778 ;;		_getCANFrame
 13779 ;; This function is called by:
 13780 ;;		_vscp_getEvent
 13781 ;; This function uses a non-reentrant model
 13782 ;;
 13783                           
 13784                           	psect	text57
 13785  00387A                     __ptext57:
 13786                           	opt stack 0
 13787  00387A                     _getVSCPFrame:
 13788                           	opt stack 23
 13789                           
 13790                           ;incstack = 0
 13791                           ;incstack = 0
 13792                           ;getVSCPFrame@pvscpclass stored from wreg
 13793  00387A  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 13794                           
 13795                           ; BSR set to: 0
 13796                           ;main.c: 2521: uint32_t id;
 13797                           ;main.c: 2523: if ( !getCANFrame(&id, pSize, pData) ) {
 13798  00387E  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 13799  003882  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 13800  003886  0E28               	movlw	getVSCPFrame@id& (0+255)
 13801  003888  ECDF  F01D         	call	_getCANFrame
 13802  00388C  0900               	iorlw	0
 13803  00388E  E102               	bnz	l6489
 13804                           
 13805                           ;main.c: 2524: return 0;
 13806  003890  0E00               	movlw	0
 13807  003892  D02E               	goto	l647
 13808  003894                     l6489:
 13809                           
 13810                           ;main.c: 2525: }
 13811                           ;main.c: 2527: *pNodeId = id & 0x0ff;
 13812  003894  501F               	movf	getVSCPFrame@pNodeId,w,c
 13813  003896  6ED9               	movwf	fsr2l,c
 13814  003898  6ADA               	clrf	fsr2h,c
 13815  00389A  C028  FFDF         	movff	getVSCPFrame@id,indf2
 13816                           
 13817                           ;main.c: 2528: *pvscptype = (id >> 8) & 0xff;
 13818  00389E  501E               	movf	getVSCPFrame@pvscptype,w,c
 13819  0038A0  6ED9               	movwf	fsr2l,c
 13820  0038A2  6ADA               	clrf	fsr2h,c
 13821  0038A4  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 13822                           
 13823                           ;main.c: 2529: *pvscpclass = (id >> 16) & 0x1ff;
 13824  0038A8  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 13825  0038AA  6E23               	movwf	??_getVSCPFrame& (0+255),c
 13826  0038AC  0E01               	movlw	1
 13827  0038AE  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 13828  0038B0  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 13829  0038B2  5027               	movf	getVSCPFrame@pvscpclass,w,c
 13830  0038B4  6ED9               	movwf	fsr2l,c
 13831  0038B6  6ADA               	clrf	fsr2h,c
 13832  0038B8  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 13833  0038BC  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 13834                           
 13835                           ;main.c: 2530: *pPriority = (uint16_t) (0x07 & (id >> 26));
 13836  0038C0  5020               	movf	getVSCPFrame@pPriority,w,c
 13837  0038C2  6ED9               	movwf	fsr2l,c
 13838  0038C4  6ADA               	clrf	fsr2h,c
 13839  0038C6  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 13840  0038CA  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 13841  0038CE  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 13842  0038D2  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 13843  0038D6  0E1B               	movlw	27
 13844  0038D8  D005               	goto	u6710
 13845  0038DA                     u6715:
 13846  0038DA  90D8               	bcf	status,0,c
 13847  0038DC  3226               	rrcf	??_getVSCPFrame+3,f,c
 13848  0038DE  3225               	rrcf	??_getVSCPFrame+2,f,c
 13849  0038E0  3224               	rrcf	??_getVSCPFrame+1,f,c
 13850  0038E2  3223               	rrcf	??_getVSCPFrame,f,c
 13851  0038E4                     u6710:
 13852  0038E4  2EE8               	decfsz	wreg,f,c
 13853  0038E6  D7F9               	goto	u6715
 13854  0038E8  5023               	movf	??_getVSCPFrame,w,c
 13855  0038EA  0B07               	andlw	7
 13856  0038EC  6EDF               	movwf	indf2,c
 13857                           
 13858                           ;main.c: 2532: return 1;
 13859  0038EE  0E01               	movlw	1
 13860  0038F0                     l647:
 13861  0038F0  0012               	return	
 13862  0038F2                     __end_of_getVSCPFrame:
 13863                           	opt stack 0
 13864                           tblptru	equ	0xFF8
 13865                           tblptrh	equ	0xFF7
 13866                           tblptrl	equ	0xFF6
 13867                           tablat	equ	0xFF5
 13868                           prodh	equ	0xFF4
 13869                           prodl	equ	0xFF3
 13870                           postinc0	equ	0xFEE
 13871                           wreg	equ	0xFE8
 13872                           indf1	equ	0xFE7
 13873                           fsr1h	equ	0xFE2
 13874                           fsr1l	equ	0xFE1
 13875                           indf2	equ	0xFDF
 13876                           postinc2	equ	0xFDE
 13877                           postdec2	equ	0xFDD
 13878                           plusw2	equ	0xFDB
 13879                           fsr2h	equ	0xFDA
 13880                           fsr2l	equ	0xFD9
 13881                           status	equ	0xFD8
 13882                           
 13883 ;; *************** function _getCANFrame *****************
 13884 ;; Defined at:
 13885 ;;		line 2562 in file "../main.c"
 13886 ;; Parameters:    Size  Location     Type
 13887 ;;  pid             1    wreg     PTR unsigned long 
 13888 ;;		 -> getVSCPFrame@id(4), 
 13889 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 13890 ;;		 -> vscp_imsg(14), 
 13891 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 13892 ;;		 -> vscp_imsg(14), 
 13893 ;; Auto vars:     Size  Location     Type
 13894 ;;  pid             1   27[COMRAM] PTR unsigned long 
 13895 ;;		 -> getVSCPFrame@id(4), 
 13896 ;;  flags           1   28[COMRAM] enum E16358
 13897 ;; Return value:  Size  Location     Type
 13898 ;;                  1    wreg      unsigned char 
 13899 ;; Registers used:
 13900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13901 ;; Tracked objects:
 13902 ;;		On entry : F/0
 13903 ;;		On exit  : 0/0
 13904 ;;		Unchanged: 0/0
 13905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13906 ;;      Params:         2       0       0       0       0       0       0
 13907 ;;      Locals:         2       0       0       0       0       0       0
 13908 ;;      Temps:          0       0       0       0       0       0       0
 13909 ;;      Totals:         4       0       0       0       0       0       0
 13910 ;;Total ram usage:        4 bytes
 13911 ;; Hardware stack levels used:    1
 13912 ;; Hardware stack levels required when called:    4
 13913 ;; This function calls:
 13914 ;;		_ECANReceiveMessage
 13915 ;; This function is called by:
 13916 ;;		_getVSCPFrame
 13917 ;; This function uses a non-reentrant model
 13918 ;;
 13919                           
 13920                           	psect	text58
 13921  003BBE                     __ptext58:
 13922                           	opt stack 0
 13923  003BBE                     _getCANFrame:
 13924                           	opt stack 23
 13925                           
 13926                           ;incstack = 0
 13927                           ;incstack = 0
 13928                           ;getCANFrame@pid stored from wreg
 13929  003BBE  CFE8 F01C          	movff	wreg,getCANFrame@pid
 13930                           
 13931                           ; BSR set to: 0
 13932                           ;main.c: 2563: ECAN_RX_MSG_FLAGS flags;
 13933                           ;main.c: 2567: if (vscp_imsg.flags & 0x80) return 0;
 13934  003BC2  AF9B               	btfss	_vscp_imsg& (0+255),7,b
 13935  003BC4  D002               	goto	l6505
 13936  003BC6                     l6501:
 13937  003BC6  0E00               	movlw	0
 13938  003BC8  D00F               	goto	l658
 13939  003BCA                     l6505:
 13940                           
 13941                           ; BSR set to: 0
 13942                           ;main.c: 2569: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 13943  003BCA  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 13944  003BCE  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 13945  003BD2  0E1D               	movlw	low getCANFrame@flags
 13946  003BD4  6E11               	movwf	?_ECANReceiveMessage+2,c
 13947  003BD6  501C               	movf	getCANFrame@pid,w,c
 13948  003BD8  EC21  F013         	call	_ECANReceiveMessage
 13949  003BDC  0900               	iorlw	0
 13950  003BDE  E0F3               	bz	l6501
 13951                           
 13952                           ;main.c: 2572: if (flags & ECAN_RX_RTR_FRAME) return 0;
 13953  003BE0  AC1D               	btfss	getCANFrame@flags,6,c
 13954                           
 13955                           ;main.c: 2575: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 13956  003BE2  AA1D               	btfss	getCANFrame@flags,5,c
 13957  003BE4  D7F0               	goto	l6501
 13958                           
 13959                           ;main.c: 2577: return 1;
 13960  003BE6  0E01               	movlw	1
 13961  003BE8                     l658:
 13962  003BE8  0012               	return	
 13963  003BEA                     __end_of_getCANFrame:
 13964                           	opt stack 0
 13965                           tblptru	equ	0xFF8
 13966                           tblptrh	equ	0xFF7
 13967                           tblptrl	equ	0xFF6
 13968                           tablat	equ	0xFF5
 13969                           prodh	equ	0xFF4
 13970                           prodl	equ	0xFF3
 13971                           postinc0	equ	0xFEE
 13972                           wreg	equ	0xFE8
 13973                           indf1	equ	0xFE7
 13974                           fsr1h	equ	0xFE2
 13975                           fsr1l	equ	0xFE1
 13976                           indf2	equ	0xFDF
 13977                           postinc2	equ	0xFDE
 13978                           postdec2	equ	0xFDD
 13979                           plusw2	equ	0xFDB
 13980                           fsr2h	equ	0xFDA
 13981                           fsr2l	equ	0xFD9
 13982                           status	equ	0xFD8
 13983                           
 13984 ;; *************** function _ECANReceiveMessage *****************
 13985 ;; Defined at:
 13986 ;;		line 803 in file "../ECAN.c"
 13987 ;; Parameters:    Size  Location     Type
 13988 ;;  id              1    wreg     PTR unsigned long 
 13989 ;;		 -> getVSCPFrame@id(4), 
 13990 ;;  data            1   14[COMRAM] PTR unsigned char 
 13991 ;;		 -> vscp_imsg(14), 
 13992 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 13993 ;;		 -> vscp_imsg(14), 
 13994 ;;  msgFlags        1   16[COMRAM] PTR enum E16333
 13995 ;;		 -> getCANFrame@flags(1), 
 13996 ;; Auto vars:     Size  Location     Type
 13997 ;;  id              1   19[COMRAM] PTR unsigned long 
 13998 ;;		 -> getVSCPFrame@id(4), 
 13999 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 14000 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14001 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14002 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 14003 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14004 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14005 ;;  temp            1   22[COMRAM] struct .
 14006 ;;  mode            1   21[COMRAM] unsigned char 
 14007 ;;  i               1   20[COMRAM] unsigned char 
 14008 ;; Return value:  Size  Location     Type
 14009 ;;                  1    wreg      enum E15660
 14010 ;; Registers used:
 14011 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14012 ;; Tracked objects:
 14013 ;;		On entry : F/0
 14014 ;;		On exit  : 0/0
 14015 ;;		Unchanged: 0/0
 14016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14017 ;;      Params:         3       0       0       0       0       0       0
 14018 ;;      Locals:         8       0       0       0       0       0       0
 14019 ;;      Temps:          0       0       0       0       0       0       0
 14020 ;;      Totals:        11       0       0       0       0       0       0
 14021 ;;Total ram usage:       11 bytes
 14022 ;; Hardware stack levels used:    1
 14023 ;; Hardware stack levels required when called:    3
 14024 ;; This function calls:
 14025 ;;		__ECANPointBuffer
 14026 ;;		__RegsToCANID
 14027 ;; This function is called by:
 14028 ;;		_getCANFrame
 14029 ;; This function uses a non-reentrant model
 14030 ;;
 14031                           
 14032                           	psect	text59
 14033  002642                     __ptext59:
 14034                           	opt stack 0
 14035  002642                     _ECANReceiveMessage:
 14036                           	opt stack 23
 14037                           
 14038                           ;incstack = 0
 14039                           ;incstack = 0
 14040                           ;ECANReceiveMessage@id stored from wreg
 14041  002642  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 14042                           
 14043                           ; BSR set to: 0
 14044                           ;ECAN.c: 805: BYTE mode;
 14045                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 14046                           ;ECAN.c: 809: char i;
 14047                           ;ECAN.c: 810: BYTE_VAL temp;
 14048                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 14049  002646  6A54               	clrf	__ECANRxFilterHitInfo,c
 14050                           
 14051                           ; BSR set to: 0
 14052                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 14053  002648  5077               	movf	3959,w,c	;volatile
 14054  00264A  0BC0               	andlw	192
 14055  00264C  6E16               	movwf	ECANReceiveMessage@mode,c
 14056                           
 14057                           ; BSR set to: 0
 14058                           ;ECAN.c: 816: if ( mode == 0x00 )
 14059  00264E  6616               	tstfsz	ECANReceiveMessage@mode,c
 14060  002650  D032               	goto	l6637
 14061                           
 14062                           ; BSR set to: 0
 14063                           ;ECAN.c: 822: {
 14064                           ;ECAN.c: 824: if ( RXB0FUL )
 14065  002652  AE60               	btfss	3936,7,c	;volatile
 14066  002654  D012               	goto	l858
 14067                           
 14068                           ; BSR set to: 0
 14069                           ;ECAN.c: 825: {
 14070                           ;ECAN.c: 827: RXB0IF = 0;
 14071  002656  90A4               	bcf	4004,0,c	;volatile
 14072                           
 14073                           ;ECAN.c: 830: if ( RXB0OVFL )
 14074  002658  AE74               	btfss	3956,7,c	;volatile
 14075  00265A  D006               	goto	l6613
 14076                           
 14077                           ; BSR set to: 0
 14078                           ;ECAN.c: 831: {
 14079                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 14080  00265C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14081  00265E  6ED9               	movwf	fsr2l,c
 14082  002660  6ADA               	clrf	fsr2h,c
 14083  002662  0E00               	movlw	0
 14084  002664  86DB               	bsf	plusw2,3,c
 14085                           
 14086                           ; BSR set to: 0
 14087                           ;ECAN.c: 833: RXB0OVFL = 0;
 14088  002666  9E74               	bcf	3956,7,c	;volatile
 14089  002668                     l6613:
 14090                           
 14091                           ; BSR set to: 0
 14092                           ;ECAN.c: 834: }
 14093                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 14094  002668  A060               	btfss	3936,0,c	;volatile
 14095  00266A  D002               	bra	u6885
 14096  00266C  8054               	bsf	__ECANRxFilterHitInfo,0,c
 14097  00266E  D001               	bra	u6887
 14098  002670                     u6885:
 14099  002670  9054               	bcf	__ECANRxFilterHitInfo,0,c
 14100  002672                     u6887:
 14101                           
 14102                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 14103  002672  0E0F               	movlw	15	;volatile
 14104  002674  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14105  002676  0E60               	movlw	96	;volatile
 14106  002678  D01A               	goto	L29
 14107  00267A                     l858:
 14108                           
 14109                           ; BSR set to: 0
 14110                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 14111  00267A  010F               	movlb	15	; () banked
 14112  00267C  AF50               	btfss	80,7,b	;volatile
 14113  00267E  D019               	goto	l6631
 14114                           
 14115                           ; BSR set to: 15
 14116                           ;ECAN.c: 842: {
 14117                           ;ECAN.c: 844: RXB1IF = 0;
 14118  002680  92A4               	bcf	4004,1,c	;volatile
 14119                           
 14120                           ;ECAN.c: 847: if ( RXB1OVFL )
 14121  002682  AC74               	btfss	3956,6,c	;volatile
 14122  002684  D006               	goto	l6623
 14123                           
 14124                           ; BSR set to: 15
 14125                           ;ECAN.c: 848: {
 14126                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 14127  002686  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14128  002688  6ED9               	movwf	fsr2l,c
 14129  00268A  6ADA               	clrf	fsr2h,c
 14130  00268C  0E00               	movlw	0
 14131  00268E  86DB               	bsf	plusw2,3,c
 14132                           
 14133                           ; BSR set to: 15
 14134                           ;ECAN.c: 850: RXB1OVFL = 0;
 14135  002690  9C74               	bcf	3956,6,c	;volatile
 14136  002692                     l6623:
 14137                           
 14138                           ; BSR set to: 15
 14139                           ;ECAN.c: 851: }
 14140                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 14141  002692  5150               	movf	80,w,b	;volatile
 14142  002694  0B07               	andlw	7
 14143  002696  6E54               	movwf	__ECANRxFilterHitInfo,c
 14144                           
 14145                           ; BSR set to: 15
 14146                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 14147  002698  0E02               	movlw	2
 14148  00269A  6054               	cpfslt	__ECANRxFilterHitInfo,c
 14149  00269C  D005               	goto	l6629
 14150                           
 14151                           ; BSR set to: 15
 14152                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 14153  00269E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14154  0026A0  6ED9               	movwf	fsr2l,c
 14155  0026A2  6ADA               	clrf	fsr2h,c
 14156  0026A4  0E00               	movlw	0
 14157  0026A6  8EDB               	bsf	plusw2,7,c
 14158  0026A8                     l6629:
 14159                           
 14160                           ; BSR set to: 15
 14161                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 14162  0026A8  0E0F               	movlw	15	;volatile
 14163  0026AA  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14164  0026AC  0E50               	movlw	80	;volatile
 14165  0026AE                     L29:
 14166  0026AE  6E18               	movwf	ECANReceiveMessage@ptr,c
 14167                           
 14168                           ;ECAN.c: 860: }
 14169  0026B0  D065               	goto	l6691
 14170  0026B2                     l6631:
 14171                           
 14172                           ;ECAN.c: 861: else
 14173                           ;ECAN.c: 862: return FALSE;
 14174  0026B2  0E00               	movlw	0
 14175  0026B4  D0CC               	goto	l865
 14176  0026B6                     l6637:
 14177                           
 14178                           ; BSR set to: 0
 14179                           ;ECAN.c: 869: else if ( mode == 0x40 )
 14180  0026B6  5016               	movf	ECANReceiveMessage@mode,w,c
 14181  0026B8  0A40               	xorlw	64
 14182  0026BA  E146               	bnz	l868
 14183                           
 14184                           ; BSR set to: 0
 14185                           ;ECAN.c: 875: {
 14186                           ;ECAN.c: 876: if ( RXB0FUL )
 14187  0026BC  AE60               	btfss	3936,7,c	;volatile
 14188  0026BE  D004               	goto	l869
 14189                           
 14190                           ; BSR set to: 0
 14191                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 14192  0026C0  0E0F               	movlw	15	;volatile
 14193  0026C2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14194  0026C4  0E60               	movlw	96	;volatile
 14195  0026C6  D03E               	goto	L36
 14196  0026C8                     l869:
 14197                           
 14198                           ; BSR set to: 0
 14199                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 14200  0026C8  010F               	movlb	15	; () banked
 14201  0026CA  AF50               	btfss	80,7,b	;volatile
 14202  0026CC  D004               	goto	l871
 14203                           
 14204                           ; BSR set to: 15
 14205                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 14206  0026CE  0E0F               	movlw	15	;volatile
 14207  0026D0  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14208  0026D2  0E50               	movlw	80	;volatile
 14209  0026D4  D037               	goto	L36
 14210  0026D6                     l871:
 14211                           
 14212                           ; BSR set to: 15
 14213                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 14214  0026D6  010D               	movlb	13
 14215  0026D8  B5F8               	btfsc	248,2,b	;volatile
 14216  0026DA  D007               	goto	l873
 14217  0026DC  010E               	movlb	14
 14218  0026DE  AF20               	btfss	32,7,b	;volatile
 14219  0026E0  D004               	goto	l873
 14220                           
 14221                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 14222  0026E2  0E0E               	movlw	14	;volatile
 14223  0026E4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14224  0026E6  0E20               	movlw	32	;volatile
 14225  0026E8  D02D               	goto	L36
 14226  0026EA                     l873:
 14227                           
 14228                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 14229  0026EA  010D               	movlb	13
 14230  0026EC  B7F8               	btfsc	248,3,b	;volatile
 14231  0026EE  D007               	goto	l875
 14232  0026F0  010E               	movlb	14
 14233  0026F2  AF30               	btfss	48,7,b	;volatile
 14234  0026F4  D004               	goto	l875
 14235                           
 14236                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 14237  0026F6  0E0E               	movlw	14	;volatile
 14238  0026F8  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14239  0026FA  0E30               	movlw	48	;volatile
 14240  0026FC  D023               	goto	L36
 14241  0026FE                     l875:
 14242                           
 14243                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 14244  0026FE  010D               	movlb	13
 14245  002700  B9F8               	btfsc	248,4,b	;volatile
 14246  002702  D007               	goto	l877
 14247  002704  010E               	movlb	14
 14248  002706  AF40               	btfss	64,7,b	;volatile
 14249  002708  D004               	goto	l877
 14250                           
 14251                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 14252  00270A  0E0E               	movlw	14	;volatile
 14253  00270C  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14254  00270E  0E40               	movlw	64	;volatile
 14255  002710  D019               	goto	L36
 14256  002712                     l877:
 14257                           
 14258                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 14259  002712  010D               	movlb	13
 14260  002714  BBF8               	btfsc	248,5,b	;volatile
 14261  002716  D005               	goto	l879
 14262  002718  010E               	movlb	14
 14263  00271A  AF50               	btfss	80,7,b	;volatile
 14264  00271C  D002               	goto	l879
 14265                           
 14266                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 14267  00271E  0E0E               	movlw	14	;volatile
 14268  002720  D7D7               	goto	L37
 14269  002722                     l879:
 14270                           
 14271                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 14272  002722  010D               	movlb	13
 14273  002724  BDF8               	btfsc	248,6,b	;volatile
 14274  002726  D005               	goto	l881
 14275  002728  010E               	movlb	14
 14276  00272A  AF60               	btfss	96,7,b	;volatile
 14277  00272C  D002               	goto	l881
 14278                           
 14279                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 14280  00272E  0E0E               	movlw	14	;volatile
 14281  002730  D7C8               	goto	L38
 14282  002732                     l881:
 14283                           
 14284                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 14285  002732  010D               	movlb	13
 14286  002734  BFF8               	btfsc	248,7,b	;volatile
 14287  002736  D7BD               	goto	l6631
 14288  002738  010E               	movlb	14
 14289  00273A  AF70               	btfss	112,7,b	;volatile
 14290  00273C  D7BA               	goto	l6631
 14291                           
 14292                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 14293  00273E  0E0E               	movlw	14	;volatile
 14294  002740  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14295  002742  0E70               	movlw	112	;volatile
 14296  002744                     L36:
 14297  002744  6E18               	movwf	ECANReceiveMessage@ptr,c
 14298  002746  D00A               	goto	l6681
 14299  002748                     l868:
 14300                           
 14301                           ; BSR set to: 0
 14302                           ;ECAN.c: 910: else
 14303                           ;ECAN.c: 915: {
 14304                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 14305  002748  AE74               	btfss	3956,7,c	;volatile
 14306  00274A  D7B3               	goto	l6631
 14307                           
 14308                           ; BSR set to: 0
 14309                           ;ECAN.c: 917: {
 14310                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 14311  00274C  506F               	movf	3951,w,c	;volatile
 14312  00274E  0B07               	andlw	7
 14313  002750  EC79  F01C         	call	__ECANPointBuffer
 14314  002754  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 14315  002758  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 14316  00275C                     l6681:
 14317                           
 14318                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 14319  00275C  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14320  002760  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14321  002764  50DF               	movf	indf2,w,c
 14322  002766  0B1F               	andlw	31
 14323  002768  6E54               	movwf	__ECANRxFilterHitInfo,c
 14324                           
 14325                           ;ECAN.c: 932: RXB1IF = 0;
 14326  00276A  92A4               	bcf	4004,1,c	;volatile
 14327                           
 14328                           ;ECAN.c: 934: if ( RXB1OVFL )
 14329  00276C  AC74               	btfss	3956,6,c	;volatile
 14330  00276E  D006               	goto	l6691
 14331                           
 14332                           ;ECAN.c: 935: {
 14333                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 14334  002770  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14335  002772  6ED9               	movwf	fsr2l,c
 14336  002774  6ADA               	clrf	fsr2h,c
 14337  002776  0E00               	movlw	0
 14338  002778  86DB               	bsf	plusw2,3,c
 14339                           
 14340                           ;ECAN.c: 937: RXB1OVFL = 0;
 14341  00277A  9C74               	bcf	3956,6,c	;volatile
 14342  00277C                     l6691:
 14343                           
 14344                           ;ECAN.c: 942: savedPtr = ptr;
 14345  00277C  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 14346  002780  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 14347                           
 14348                           ;ECAN.c: 943: *msgFlags = 0;
 14349  002784  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14350  002786  6ED9               	movwf	fsr2l,c
 14351  002788  6ADA               	clrf	fsr2h,c
 14352  00278A  6ADF               	clrf	indf2,c
 14353                           
 14354                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 14355  00278C  EE20 F005          	lfsr	2,5
 14356  002790  5018               	movf	ECANReceiveMessage@ptr,w,c
 14357  002792  26D9               	addwf	fsr2l,f,c
 14358  002794  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14359  002796  22DA               	addwfc	fsr2h,f,c
 14360  002798  50DF               	movf	indf2,w,c
 14361  00279A  6E17               	movwf	ECANReceiveMessage@temp,c
 14362                           
 14363                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 14364  00279C  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14365  00279E  6ED9               	movwf	fsr2l,c
 14366  0027A0  6ADA               	clrf	fsr2h,c
 14367  0027A2  5017               	movf	ECANReceiveMessage@temp,w,c
 14368  0027A4  0B0F               	andlw	15
 14369  0027A6  6EDF               	movwf	indf2,c
 14370                           
 14371                           ;ECAN.c: 950: if ( temp.bits.b6 )
 14372  0027A8  AC17               	btfss	ECANReceiveMessage@temp,6,c
 14373  0027AA  D005               	goto	l889
 14374                           
 14375                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 14376  0027AC  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14377  0027AE  6ED9               	movwf	fsr2l,c
 14378  0027B0  6ADA               	clrf	fsr2h,c
 14379  0027B2  0E00               	movlw	0
 14380  0027B4  8CDB               	bsf	plusw2,6,c
 14381  0027B6                     l889:
 14382                           
 14383                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 14384  0027B6  EE20 F002          	lfsr	2,2
 14385  0027BA  5018               	movf	ECANReceiveMessage@ptr,w,c
 14386  0027BC  26D9               	addwf	fsr2l,f,c
 14387  0027BE  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14388  0027C0  22DA               	addwfc	fsr2h,f,c
 14389  0027C2  50DF               	movf	indf2,w,c
 14390  0027C4  6E17               	movwf	ECANReceiveMessage@temp,c
 14391                           
 14392                           ;ECAN.c: 955: if ( temp.bits.b3 )
 14393  0027C6  A617               	btfss	ECANReceiveMessage@temp,3,c
 14394  0027C8  D008               	goto	l890
 14395                           
 14396                           ;ECAN.c: 956: {
 14397                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 14398  0027CA  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14399  0027CC  6ED9               	movwf	fsr2l,c
 14400  0027CE  6ADA               	clrf	fsr2h,c
 14401  0027D0  0E00               	movlw	0
 14402  0027D2  8ADB               	bsf	plusw2,5,c
 14403                           
 14404                           ;ECAN.c: 958: temp.Val = 1;
 14405  0027D4  0E01               	movlw	1
 14406  0027D6  6E17               	movwf	ECANReceiveMessage@temp,c
 14407                           
 14408                           ;ECAN.c: 959: }
 14409  0027D8  D001               	goto	l6709
 14410  0027DA                     l890:
 14411                           
 14412                           ;ECAN.c: 960: else
 14413                           ;ECAN.c: 961: temp.Val = 0;
 14414  0027DA  6A17               	clrf	ECANReceiveMessage@temp,c
 14415  0027DC                     l6709:
 14416                           
 14417                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 14418  0027DC  2818               	incf	ECANReceiveMessage@ptr,w,c
 14419  0027DE  6E08               	movwf	?__RegsToCANID,c
 14420  0027E0  0E00               	movlw	0
 14421  0027E2  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 14422  0027E4  6E09               	movwf	?__RegsToCANID+1,c
 14423  0027E6  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 14424  0027EA  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 14425  0027EE  ECA9  F016         	call	__RegsToCANID	;wreg free
 14426                           
 14427                           ;ECAN.c: 966: ptr += 6;
 14428  0027F2  0E06               	movlw	6
 14429  0027F4  2618               	addwf	ECANReceiveMessage@ptr,f,c
 14430  0027F6  0E00               	movlw	0
 14431  0027F8  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 14432                           
 14433                           ;ECAN.c: 967: temp.Val = *dataLen;
 14434  0027FA  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14435  0027FC  6ED9               	movwf	fsr2l,c
 14436  0027FE  6ADA               	clrf	fsr2h,c
 14437  002800  50DF               	movf	indf2,w,c
 14438  002802  6E17               	movwf	ECANReceiveMessage@temp,c
 14439                           
 14440                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 14441  002804  6A15               	clrf	ECANReceiveMessage@i,c
 14442  002806  D00D               	goto	l6725
 14443  002808                     l6717:
 14444                           
 14445                           ;ECAN.c: 969: *data++ = *ptr++;
 14446  002808  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14447  00280C  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14448  002810  500F               	movf	ECANReceiveMessage@data,w,c
 14449  002812  6EE1               	movwf	fsr1l,c
 14450  002814  6AE2               	clrf	fsr1h,c
 14451  002816  CFDF FFE7          	movff	indf2,indf1
 14452  00281A  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 14453  00281C  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 14454  00281E  2A0F               	incf	ECANReceiveMessage@data,f,c
 14455  002820  2A15               	incf	ECANReceiveMessage@i,f,c
 14456  002822                     l6725:
 14457  002822  5017               	movf	ECANReceiveMessage@temp,w,c
 14458  002824  5C15               	subwf	ECANReceiveMessage@i,w,c
 14459  002826  E3F0               	bnc	l6717
 14460                           
 14461                           ;ECAN.c: 972: if ( IRXIF )
 14462  002828  AEA4               	btfss	4004,7,c	;volatile
 14463  00282A  D006               	goto	l6731
 14464                           
 14465                           ;ECAN.c: 973: {
 14466                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 14467  00282C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14468  00282E  6ED9               	movwf	fsr2l,c
 14469  002830  6ADA               	clrf	fsr2h,c
 14470  002832  0E00               	movlw	0
 14471  002834  88DB               	bsf	plusw2,4,c
 14472                           
 14473                           ;ECAN.c: 975: IRXIF = 0;
 14474  002836  9EA4               	bcf	4004,7,c	;volatile
 14475  002838                     l6731:
 14476                           
 14477                           ;ECAN.c: 976: }
 14478                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 14479  002838  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 14480  00283C  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 14481  002840  0E7F               	movlw	127
 14482  002842  16DF               	andwf	indf2,f,c
 14483                           
 14484                           ;ECAN.c: 983: if ( mode == 0x80 )
 14485  002844  5016               	movf	ECANReceiveMessage@mode,w,c
 14486  002846  0A80               	xorlw	128
 14487  002848  B4D8               	btfsc	status,2,c
 14488                           
 14489                           ;ECAN.c: 984: FIFOEMPTY = 0;
 14490  00284A  9E74               	bcf	3956,7,c	;volatile
 14491                           
 14492                           ;ECAN.c: 990: return TRUE;
 14493  00284C  0E01               	movlw	1
 14494  00284E                     l865:
 14495  00284E  0012               	return	
 14496  002850                     __end_of_ECANReceiveMessage:
 14497                           	opt stack 0
 14498                           tblptru	equ	0xFF8
 14499                           tblptrh	equ	0xFF7
 14500                           tblptrl	equ	0xFF6
 14501                           tablat	equ	0xFF5
 14502                           prodh	equ	0xFF4
 14503                           prodl	equ	0xFF3
 14504                           postinc0	equ	0xFEE
 14505                           wreg	equ	0xFE8
 14506                           indf1	equ	0xFE7
 14507                           fsr1h	equ	0xFE2
 14508                           fsr1l	equ	0xFE1
 14509                           indf2	equ	0xFDF
 14510                           postinc2	equ	0xFDE
 14511                           postdec2	equ	0xFDD
 14512                           plusw2	equ	0xFDB
 14513                           fsr2h	equ	0xFDA
 14514                           fsr2l	equ	0xFD9
 14515                           status	equ	0xFD8
 14516                           
 14517 ;; *************** function __RegsToCANID *****************
 14518 ;; Defined at:
 14519 ;;		line 1156 in file "../ECAN.c"
 14520 ;; Parameters:    Size  Location     Type
 14521 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 14522 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14523 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14524 ;;  val             1    9[COMRAM] PTR unsigned long 
 14525 ;;		 -> getVSCPFrame@id(4), 
 14526 ;;  type            1   10[COMRAM] unsigned char 
 14527 ;; Auto vars:     Size  Location     Type
 14528 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 14529 ;;		 -> getVSCPFrame@id(4), 
 14530 ;; Return value:  Size  Location     Type
 14531 ;;		None               void
 14532 ;; Registers used:
 14533 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14534 ;; Tracked objects:
 14535 ;;		On entry : 0/0
 14536 ;;		On exit  : 0/0
 14537 ;;		Unchanged: 0/0
 14538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14539 ;;      Params:         4       0       0       0       0       0       0
 14540 ;;      Locals:         1       0       0       0       0       0       0
 14541 ;;      Temps:          2       0       0       0       0       0       0
 14542 ;;      Totals:         7       0       0       0       0       0       0
 14543 ;;Total ram usage:        7 bytes
 14544 ;; Hardware stack levels used:    1
 14545 ;; Hardware stack levels required when called:    2
 14546 ;; This function calls:
 14547 ;;		Nothing
 14548 ;; This function is called by:
 14549 ;;		_ECANReceiveMessage
 14550 ;; This function uses a non-reentrant model
 14551 ;;
 14552                           
 14553                           	psect	text60
 14554  002D52                     __ptext60:
 14555                           	opt stack 0
 14556  002D52                     __RegsToCANID:
 14557                           	opt stack 23
 14558                           
 14559                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 14560                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 14561                           
 14562                           ;incstack = 0
 14563                           ;incstack = 0
 14564  002D52  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 14565                           
 14566                           ;ECAN.c: 1161: if ( type == 0 )
 14567  002D56  660B               	tstfsz	__RegsToCANID@type,c
 14568  002D58  D046               	goto	l6805
 14569                           
 14570                           ;ECAN.c: 1162: {
 14571                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 14572  002D5A  500E               	movf	__RegsToCANID@Value,w,c
 14573  002D5C  6ED9               	movwf	fsr2l,c
 14574  002D5E  6ADA               	clrf	fsr2h,c
 14575  002D60  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14576  002D64  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14577  002D68  50E7               	movf	indf1,w,c
 14578  002D6A  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14579  002D6C  90D8               	bcf	status,0,c
 14580  002D6E  360C               	rlcf	??__RegsToCANID,f,c
 14581  002D70  90D8               	bcf	status,0,c
 14582  002D72  360C               	rlcf	??__RegsToCANID,f,c
 14583  002D74  90D8               	bcf	status,0,c
 14584  002D76  340C               	rlcf	??__RegsToCANID,w,c
 14585  002D78  6EDF               	movwf	indf2,c
 14586                           
 14587                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 14588  002D7A  500E               	movf	__RegsToCANID@Value,w,c
 14589  002D7C  6ED9               	movwf	fsr2l,c
 14590  002D7E  6ADA               	clrf	fsr2h,c
 14591  002D80  2AD9               	incf	fsr2l,f,c
 14592  002D82  6ADA               	clrf	fsr2h,c
 14593  002D84  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14594  002D88  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14595  002D8C  50E7               	movf	indf1,w,c
 14596  002D8E  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14597  002D90  0E05               	movlw	5
 14598  002D92  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14599  002D94                     u7205:
 14600  002D94  90D8               	bcf	status,0,c
 14601  002D96  320C               	rrcf	??__RegsToCANID,f,c
 14602  002D98  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14603  002D9A  D7FC               	goto	u7205
 14604  002D9C  500C               	movf	??__RegsToCANID,w,c
 14605  002D9E  6EDF               	movwf	indf2,c
 14606                           
 14607                           ;ECAN.c: 1166: ptr++;
 14608  002DA0  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14609  002DA2  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14610                           
 14611                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 14612  002DA4  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14613  002DA8  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14614  002DAC  50DF               	movf	indf2,w,c
 14615  002DAE  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14616  002DB0  0E05               	movlw	5
 14617  002DB2  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14618  002DB4                     u7215:
 14619  002DB4  90D8               	bcf	status,0,c
 14620  002DB6  320C               	rrcf	??__RegsToCANID,f,c
 14621  002DB8  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14622  002DBA  D7FC               	goto	u7215
 14623  002DBC  500E               	movf	__RegsToCANID@Value,w,c
 14624  002DBE  6ED9               	movwf	fsr2l,c
 14625  002DC0  6ADA               	clrf	fsr2h,c
 14626  002DC2  500C               	movf	??__RegsToCANID,w,c
 14627  002DC4  12DF               	iorwf	indf2,f,c
 14628                           
 14629                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 14630  002DC6  500E               	movf	__RegsToCANID@Value,w,c
 14631  002DC8  6ED9               	movwf	fsr2l,c
 14632  002DCA  6ADA               	clrf	fsr2h,c
 14633  002DCC  0E02               	movlw	2
 14634  002DCE  26D9               	addwf	fsr2l,f,c
 14635  002DD0  6ADA               	clrf	fsr2h,c
 14636  002DD2  6ADF               	clrf	indf2,c
 14637                           
 14638                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 14639  002DD4  500E               	movf	__RegsToCANID@Value,w,c
 14640  002DD6  6ED9               	movwf	fsr2l,c
 14641  002DD8  6ADA               	clrf	fsr2h,c
 14642  002DDA  0E03               	movlw	3
 14643  002DDC  26D9               	addwf	fsr2l,f,c
 14644  002DDE  6ADA               	clrf	fsr2h,c
 14645  002DE0  0E00               	movlw	0
 14646  002DE2  6EDF               	movwf	indf2,c
 14647                           
 14648                           ;ECAN.c: 1170: }
 14649  002DE4  D067               	goto	l912
 14650  002DE6                     l6805:
 14651                           
 14652                           ;ECAN.c: 1171: else
 14653                           ;ECAN.c: 1172: {
 14654                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 14655  002DE6  500E               	movf	__RegsToCANID@Value,w,c
 14656  002DE8  6ED9               	movwf	fsr2l,c
 14657  002DEA  6ADA               	clrf	fsr2h,c
 14658  002DEC  0E02               	movlw	2
 14659  002DEE  26D9               	addwf	fsr2l,f,c
 14660  002DF0  6ADA               	clrf	fsr2h,c
 14661  002DF2  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14662  002DF6  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14663  002DFA  50E7               	movf	indf1,w,c
 14664  002DFC  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14665  002DFE  0E05               	movlw	5
 14666  002E00  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14667  002E02                     u7225:
 14668  002E02  90D8               	bcf	status,0,c
 14669  002E04  360C               	rlcf	??__RegsToCANID,f,c
 14670  002E06  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14671  002E08  D7FC               	goto	u7225
 14672  002E0A  500C               	movf	??__RegsToCANID,w,c
 14673  002E0C  6EDF               	movwf	indf2,c
 14674                           
 14675                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 14676  002E0E  500E               	movf	__RegsToCANID@Value,w,c
 14677  002E10  6ED9               	movwf	fsr2l,c
 14678  002E12  6ADA               	clrf	fsr2h,c
 14679  002E14  0E03               	movlw	3
 14680  002E16  26D9               	addwf	fsr2l,f,c
 14681  002E18  6ADA               	clrf	fsr2h,c
 14682  002E1A  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14683  002E1E  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14684  002E22  50E7               	movf	indf1,w,c
 14685  002E24  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14686  002E26  90D8               	bcf	status,0,c
 14687  002E28  320C               	rrcf	??__RegsToCANID,f,c
 14688  002E2A  90D8               	bcf	status,0,c
 14689  002E2C  320C               	rrcf	??__RegsToCANID,f,c
 14690  002E2E  90D8               	bcf	status,0,c
 14691  002E30  300C               	rrcf	??__RegsToCANID,w,c
 14692  002E32  6EDF               	movwf	indf2,c
 14693                           
 14694                           ;ECAN.c: 1176: ptr++;
 14695  002E34  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14696  002E36  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14697                           
 14698                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 14699  002E38  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14700  002E3C  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14701  002E40  50DF               	movf	indf2,w,c
 14702  002E42  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14703  002E44  0E03               	movlw	3
 14704  002E46  160C               	andwf	??__RegsToCANID,f,c
 14705  002E48  500E               	movf	__RegsToCANID@Value,w,c
 14706  002E4A  6ED9               	movwf	fsr2l,c
 14707  002E4C  6ADA               	clrf	fsr2h,c
 14708  002E4E  0E02               	movlw	2
 14709  002E50  26D9               	addwf	fsr2l,f,c
 14710  002E52  6ADA               	clrf	fsr2h,c
 14711  002E54  500C               	movf	??__RegsToCANID,w,c
 14712  002E56  12DF               	iorwf	indf2,f,c
 14713                           
 14714                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 14715  002E58  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14716  002E5C  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14717  002E60  50DF               	movf	indf2,w,c
 14718  002E62  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14719  002E64  90D8               	bcf	status,0,c
 14720  002E66  320C               	rrcf	??__RegsToCANID,f,c
 14721  002E68  90D8               	bcf	status,0,c
 14722  002E6A  320C               	rrcf	??__RegsToCANID,f,c
 14723  002E6C  90D8               	bcf	status,0,c
 14724  002E6E  320C               	rrcf	??__RegsToCANID,f,c
 14725  002E70  0E1C               	movlw	28
 14726  002E72  160C               	andwf	??__RegsToCANID,f,c
 14727  002E74  500E               	movf	__RegsToCANID@Value,w,c
 14728  002E76  6ED9               	movwf	fsr2l,c
 14729  002E78  6ADA               	clrf	fsr2h,c
 14730  002E7A  0E02               	movlw	2
 14731  002E7C  26D9               	addwf	fsr2l,f,c
 14732  002E7E  6ADA               	clrf	fsr2h,c
 14733  002E80  500C               	movf	??__RegsToCANID,w,c
 14734  002E82  12DF               	iorwf	indf2,f,c
 14735                           
 14736                           ;ECAN.c: 1180: ptr++;
 14737  002E84  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14738  002E86  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14739                           
 14740                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 14741  002E88  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14742  002E8C  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14743  002E90  500E               	movf	__RegsToCANID@Value,w,c
 14744  002E92  6EE1               	movwf	fsr1l,c
 14745  002E94  6AE2               	clrf	fsr1h,c
 14746  002E96  2AE1               	incf	fsr1l,f,c
 14747  002E98  6AE2               	clrf	fsr1h,c
 14748  002E9A  CFDF FFE7          	movff	indf2,indf1
 14749                           
 14750                           ;ECAN.c: 1182: ptr++;
 14751  002E9E  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14752  002EA0  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14753                           
 14754                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 14755  002EA2  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14756  002EA6  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14757  002EAA  500E               	movf	__RegsToCANID@Value,w,c
 14758  002EAC  6EE1               	movwf	fsr1l,c
 14759  002EAE  6AE2               	clrf	fsr1h,c
 14760  002EB0  CFDF FFE7          	movff	indf2,indf1
 14761  002EB4                     l912:
 14762  002EB4  0012               	return	
 14763  002EB6                     __end_of__RegsToCANID:
 14764                           	opt stack 0
 14765                           tblptru	equ	0xFF8
 14766                           tblptrh	equ	0xFF7
 14767                           tblptrl	equ	0xFF6
 14768                           tablat	equ	0xFF5
 14769                           prodh	equ	0xFF4
 14770                           prodl	equ	0xFF3
 14771                           postinc0	equ	0xFEE
 14772                           wreg	equ	0xFE8
 14773                           indf1	equ	0xFE7
 14774                           fsr1h	equ	0xFE2
 14775                           fsr1l	equ	0xFE1
 14776                           indf2	equ	0xFDF
 14777                           postinc2	equ	0xFDE
 14778                           postdec2	equ	0xFDD
 14779                           plusw2	equ	0xFDB
 14780                           fsr2h	equ	0xFDA
 14781                           fsr2l	equ	0xFD9
 14782                           status	equ	0xFD8
 14783                           
 14784 ;; *************** function __ECANPointBuffer *****************
 14785 ;; Defined at:
 14786 ;;		line 1207 in file "../ECAN.c"
 14787 ;; Parameters:    Size  Location     Type
 14788 ;;  b               1    wreg     unsigned char 
 14789 ;; Auto vars:     Size  Location     Type
 14790 ;;  b               1   10[COMRAM] unsigned char 
 14791 ;;  pt              2   11[COMRAM] PTR unsigned char 
 14792 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14793 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14794 ;; Return value:  Size  Location     Type
 14795 ;;                  2    7[COMRAM] PTR unsigned char 
 14796 ;; Registers used:
 14797 ;;		wreg, status,2, status,0
 14798 ;; Tracked objects:
 14799 ;;		On entry : F/0
 14800 ;;		On exit  : 0/0
 14801 ;;		Unchanged: 0/0
 14802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14803 ;;      Params:         3       0       0       0       0       0       0
 14804 ;;      Locals:         3       0       0       0       0       0       0
 14805 ;;      Temps:          0       0       0       0       0       0       0
 14806 ;;      Totals:         6       0       0       0       0       0       0
 14807 ;;Total ram usage:        6 bytes
 14808 ;; Hardware stack levels used:    1
 14809 ;; Hardware stack levels required when called:    2
 14810 ;; This function calls:
 14811 ;;		Nothing
 14812 ;; This function is called by:
 14813 ;;		_ECANReceiveMessage
 14814 ;; This function uses a non-reentrant model
 14815 ;;
 14816                           
 14817                           	psect	text61
 14818  0038F2                     __ptext61:
 14819                           	opt stack 0
 14820  0038F2                     __ECANPointBuffer:
 14821                           	opt stack 23
 14822                           
 14823                           ;incstack = 0
 14824                           ;incstack = 0
 14825                           ;__ECANPointBuffer@b stored from wreg
 14826  0038F2  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 14827                           
 14828                           ; BSR set to: 0
 14829                           ;ECAN.c: 1208: BYTE* pt;
 14830                           ;ECAN.c: 1210: switch(b)
 14831  0038F6  D024               	goto	l6791
 14832  0038F8                     l6773:
 14833                           
 14834                           ; BSR set to: 0
 14835                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 14836  0038F8  0E0F               	movlw	15	;volatile
 14837  0038FA  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14838  0038FC  0E60               	movlw	96	;volatile
 14839  0038FE  D01E               	goto	L45
 14840  003900                     l6775:
 14841                           
 14842                           ; BSR set to: 0
 14843                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 14844  003900  010F               	movlb	15	; () banked
 14845  003902  0E0F               	movlw	15	;volatile
 14846  003904  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14847  003906  0E50               	movlw	80	;volatile
 14848  003908  D019               	goto	L45
 14849  00390A                     l6777:
 14850                           
 14851                           ; BSR set to: 0
 14852                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 14853  00390A  010E               	movlb	14	; () banked
 14854  00390C  0E0E               	movlw	14	;volatile
 14855  00390E  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14856  003910  0E20               	movlw	32	;volatile
 14857  003912  D014               	goto	L45
 14858  003914                     l6779:
 14859                           
 14860                           ; BSR set to: 0
 14861                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 14862  003914  010E               	movlb	14	; () banked
 14863  003916  0E0E               	movlw	14	;volatile
 14864  003918  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14865  00391A  0E30               	movlw	48	;volatile
 14866  00391C  D00F               	goto	L45
 14867  00391E                     l6781:
 14868                           
 14869                           ; BSR set to: 0
 14870                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 14871  00391E  010E               	movlb	14	; () banked
 14872  003920  0E0E               	movlw	14	;volatile
 14873  003922  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14874  003924  0E40               	movlw	64	;volatile
 14875  003926  D00A               	goto	L45
 14876  003928                     l6783:
 14877                           
 14878                           ; BSR set to: 0
 14879                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 14880  003928  010E               	movlb	14	; () banked
 14881  00392A  0E0E               	movlw	14	;volatile
 14882  00392C  D7EB               	goto	L46
 14883  00392E                     l6785:
 14884                           
 14885                           ; BSR set to: 0
 14886                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 14887  00392E  010E               	movlb	14	; () banked
 14888  003930  0E0E               	movlw	14	;volatile
 14889  003932  D7E3               	goto	L47
 14890  003934                     l6787:
 14891                           
 14892                           ; BSR set to: 0
 14893                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 14894  003934  010E               	movlb	14	; () banked
 14895  003936  0E0E               	movlw	14	;volatile
 14896  003938  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14897  00393A  0E70               	movlw	112	;volatile
 14898  00393C                     L45:
 14899  00393C  6E0C               	movwf	__ECANPointBuffer@pt,c
 14900                           
 14901                           ;ECAN.c: 1235: break;
 14902  00393E  D00F               	goto	l917
 14903  003940                     l6791:
 14904                           
 14905                           ; BSR set to: 0
 14906  003940  500B               	movf	__ECANPointBuffer@b,w,c
 14907                           
 14908                           ; Switch size 1, requested type "speed"
 14909                           ; Number of cases is 7, Range of values is 0 to 6
 14910                           ; switch strategies available:
 14911                           ; Name         Instructions Cycles
 14912                           ; simple_byte           22    12 (average)
 14913                           ;	Chosen strategy is simple_byte
 14914  003942  E0DA               	bz	l6773
 14915  003944  0A01               	xorlw	1	; case 1
 14916  003946  E0DC               	bz	l6775
 14917  003948  0A03               	xorlw	3	; case 2
 14918  00394A  E0DF               	bz	l6777
 14919  00394C  0A01               	xorlw	1	; case 3
 14920  00394E  E0E2               	bz	l6779
 14921  003950  0A07               	xorlw	7	; case 4
 14922  003952  E0E5               	bz	l6781
 14923  003954  0A01               	xorlw	1	; case 5
 14924  003956  E0E8               	bz	l6783
 14925  003958  0A03               	xorlw	3	; case 6
 14926  00395A  E0E9               	bz	l6785
 14927  00395C  D7EB               	goto	l6787
 14928  00395E                     l917:
 14929                           
 14930                           ;ECAN.c: 1237: return (pt);
 14931  00395E  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 14932  003962  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 14933  003966  0012               	return	
 14934  003968                     __end_of__ECANPointBuffer:
 14935                           	opt stack 0
 14936                           tblptru	equ	0xFF8
 14937                           tblptrh	equ	0xFF7
 14938                           tblptrl	equ	0xFF6
 14939                           tablat	equ	0xFF5
 14940                           prodh	equ	0xFF4
 14941                           prodl	equ	0xFF3
 14942                           postinc0	equ	0xFEE
 14943                           wreg	equ	0xFE8
 14944                           indf1	equ	0xFE7
 14945                           fsr1h	equ	0xFE2
 14946                           fsr1l	equ	0xFE1
 14947                           indf2	equ	0xFDF
 14948                           postinc2	equ	0xFDE
 14949                           postdec2	equ	0xFDD
 14950                           plusw2	equ	0xFDB
 14951                           fsr2h	equ	0xFDA
 14952                           fsr2l	equ	0xFD9
 14953                           status	equ	0xFD8
 14954                           
 14955 ;; *************** function _vscp_check_pstorage *****************
 14956 ;; Defined at:
 14957 ;;		line 166 in file "../../vscp_firmware/common/vscp_firmware.c"
 14958 ;; Parameters:    Size  Location     Type
 14959 ;;		None
 14960 ;; Auto vars:     Size  Location     Type
 14961 ;;		None
 14962 ;; Return value:  Size  Location     Type
 14963 ;;                  1    wreg      unsigned char 
 14964 ;; Registers used:
 14965 ;;		wreg, status,2, status,0, cstack
 14966 ;; Tracked objects:
 14967 ;;		On entry : 0/0
 14968 ;;		On exit  : 0/0
 14969 ;;		Unchanged: 0/0
 14970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14971 ;;      Params:         0       0       0       0       0       0       0
 14972 ;;      Locals:         0       0       0       0       0       0       0
 14973 ;;      Temps:          0       0       0       0       0       0       0
 14974 ;;      Totals:         0       0       0       0       0       0       0
 14975 ;;Total ram usage:        0 bytes
 14976 ;; Hardware stack levels used:    1
 14977 ;; Hardware stack levels required when called:    4
 14978 ;; This function calls:
 14979 ;;		_vscp_writeNicknamePermanent
 14980 ;;		_vscp_getSegmentCRC
 14981 ;;		_vscp_setSegmentCRC
 14982 ;;		_vscp_setControlByte
 14983 ;; This function is called by:
 14984 ;;		_main
 14985 ;; This function uses a non-reentrant model
 14986 ;;
 14987                           
 14988                           	psect	text62
 14989  003CFC                     __ptext62:
 14990                           	opt stack 0
 14991  003CFC                     _vscp_check_pstorage:
 14992                           	opt stack 25
 14993                           
 14994                           ;vscp_firmware.c: 169: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 14995                           
 14996                           ;incstack = 0
 14997                           ;incstack = 0
 14998  003CFC  ECAC  F01F         	call	_vscp_getSegmentCRC	;wreg free
 14999  003D00  0BC0               	andlw	192
 15000  003D02  0A40               	xorlw	64
 15001  003D04  E102               	bnz	l7261
 15002                           
 15003                           ;vscp_firmware.c: 170: return !0;
 15004  003D06  0E01               	movlw	1
 15005  003D08  D00A               	goto	l1037
 15006  003D0A                     l7261:
 15007                           
 15008                           ;vscp_firmware.c: 171: }
 15009                           ;vscp_firmware.c: 174: vscp_writeNicknamePermanent(0xff);
 15010  003D0A  0EFF               	movlw	255
 15011  003D0C  EC6F  F01F         	call	_vscp_writeNicknamePermanent
 15012                           
 15013                           ;vscp_firmware.c: 177: vscp_setSegmentCRC(0x00);
 15014  003D10  0E00               	movlw	0
 15015  003D12  EC66  F01F         	call	_vscp_setSegmentCRC
 15016                           
 15017                           ;vscp_firmware.c: 181: vscp_setControlByte(0xA0);
 15018  003D16  0EA0               	movlw	160
 15019  003D18  EC5D  F01F         	call	_vscp_setControlByte
 15020                           
 15021                           ;vscp_firmware.c: 183: return 0;
 15022  003D1C  0E00               	movlw	0
 15023  003D1E                     l1037:
 15024  003D1E  0012               	return	
 15025  003D20                     __end_of_vscp_check_pstorage:
 15026                           	opt stack 0
 15027                           tblptru	equ	0xFF8
 15028                           tblptrh	equ	0xFF7
 15029                           tblptrl	equ	0xFF6
 15030                           tablat	equ	0xFF5
 15031                           prodh	equ	0xFF4
 15032                           prodl	equ	0xFF3
 15033                           postinc0	equ	0xFEE
 15034                           wreg	equ	0xFE8
 15035                           indf1	equ	0xFE7
 15036                           fsr1h	equ	0xFE2
 15037                           fsr1l	equ	0xFE1
 15038                           indf2	equ	0xFDF
 15039                           postinc2	equ	0xFDE
 15040                           postdec2	equ	0xFDD
 15041                           plusw2	equ	0xFDB
 15042                           fsr2h	equ	0xFDA
 15043                           fsr2l	equ	0xFD9
 15044                           status	equ	0xFD8
 15045                           
 15046 ;; *************** function _vscp_setControlByte *****************
 15047 ;; Defined at:
 15048 ;;		line 2361 in file "../main.c"
 15049 ;; Parameters:    Size  Location     Type
 15050 ;;  ctrl            1    wreg     unsigned char 
 15051 ;; Auto vars:     Size  Location     Type
 15052 ;;  ctrl            1   10[COMRAM] unsigned char 
 15053 ;; Return value:  Size  Location     Type
 15054 ;;		None               void
 15055 ;; Registers used:
 15056 ;;		wreg, status,2, cstack
 15057 ;; Tracked objects:
 15058 ;;		On entry : 0/0
 15059 ;;		On exit  : 0/0
 15060 ;;		Unchanged: 0/0
 15061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15062 ;;      Params:         0       0       0       0       0       0       0
 15063 ;;      Locals:         1       0       0       0       0       0       0
 15064 ;;      Temps:          0       0       0       0       0       0       0
 15065 ;;      Totals:         1       0       0       0       0       0       0
 15066 ;;Total ram usage:        1 bytes
 15067 ;; Hardware stack levels used:    1
 15068 ;; Hardware stack levels required when called:    3
 15069 ;; This function calls:
 15070 ;;		_writeEEPROM
 15071 ;; This function is called by:
 15072 ;;		_vscp_check_pstorage
 15073 ;; This function uses a non-reentrant model
 15074 ;;
 15075                           
 15076                           	psect	text63
 15077  003EBA                     __ptext63:
 15078                           	opt stack 0
 15079  003EBA                     _vscp_setControlByte:
 15080                           	opt stack 25
 15081                           
 15082                           ;incstack = 0
 15083                           ;incstack = 0
 15084                           ;vscp_setControlByte@ctrl stored from wreg
 15085  003EBA  CFE8 F00B          	movff	wreg,vscp_setControlByte@ctrl
 15086                           
 15087                           ;main.c: 2362: writeEEPROM(0x03, ctrl);
 15088  003EBE  6A09               	clrf	?_writeEEPROM+1,c
 15089  003EC0  0E03               	movlw	3
 15090  003EC2  6E08               	movwf	?_writeEEPROM,c
 15091  003EC4  C00B  F00A         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 15092  003EC8  EF59  F01E         	goto	_writeEEPROM	;wreg free
 15093  003ECC                     __end_of_vscp_setControlByte:
 15094                           	opt stack 0
 15095                           tblptru	equ	0xFF8
 15096                           tblptrh	equ	0xFF7
 15097                           tblptrl	equ	0xFF6
 15098                           tablat	equ	0xFF5
 15099                           prodh	equ	0xFF4
 15100                           prodl	equ	0xFF3
 15101                           postinc0	equ	0xFEE
 15102                           wreg	equ	0xFE8
 15103                           indf1	equ	0xFE7
 15104                           fsr1h	equ	0xFE2
 15105                           fsr1l	equ	0xFE1
 15106                           indf2	equ	0xFDF
 15107                           postinc2	equ	0xFDE
 15108                           postdec2	equ	0xFDD
 15109                           plusw2	equ	0xFDB
 15110                           fsr2h	equ	0xFDA
 15111                           fsr2l	equ	0xFD9
 15112                           status	equ	0xFD8
 15113                           
 15114 ;; *************** function _vscp_setSegmentCRC *****************
 15115 ;; Defined at:
 15116 ;;		line 2352 in file "../main.c"
 15117 ;; Parameters:    Size  Location     Type
 15118 ;;  crc             1    wreg     unsigned char 
 15119 ;; Auto vars:     Size  Location     Type
 15120 ;;  crc             1   10[COMRAM] unsigned char 
 15121 ;; Return value:  Size  Location     Type
 15122 ;;		None               void
 15123 ;; Registers used:
 15124 ;;		wreg, status,2, cstack
 15125 ;; Tracked objects:
 15126 ;;		On entry : 0/0
 15127 ;;		On exit  : 0/0
 15128 ;;		Unchanged: 0/0
 15129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15130 ;;      Params:         0       0       0       0       0       0       0
 15131 ;;      Locals:         1       0       0       0       0       0       0
 15132 ;;      Temps:          0       0       0       0       0       0       0
 15133 ;;      Totals:         1       0       0       0       0       0       0
 15134 ;;Total ram usage:        1 bytes
 15135 ;; Hardware stack levels used:    1
 15136 ;; Hardware stack levels required when called:    3
 15137 ;; This function calls:
 15138 ;;		_writeEEPROM
 15139 ;; This function is called by:
 15140 ;;		_vscp_check_pstorage
 15141 ;;		_vscp_handleProbeState
 15142 ;;		_vscp_handleHeartbeat
 15143 ;;		_vscp_handleSetNickname
 15144 ;; This function uses a non-reentrant model
 15145 ;;
 15146                           
 15147                           	psect	text64
 15148  003ECC                     __ptext64:
 15149                           	opt stack 0
 15150  003ECC                     _vscp_setSegmentCRC:
 15151                           	opt stack 24
 15152                           
 15153                           ;incstack = 0
 15154                           ;incstack = 0
 15155                           ;vscp_setSegmentCRC@crc stored from wreg
 15156  003ECC  CFE8 F00B          	movff	wreg,vscp_setSegmentCRC@crc
 15157                           
 15158                           ;main.c: 2353: writeEEPROM( 0x02, crc );
 15159  003ED0  6A09               	clrf	?_writeEEPROM+1,c
 15160  003ED2  0E02               	movlw	2
 15161  003ED4  6E08               	movwf	?_writeEEPROM,c
 15162  003ED6  C00B  F00A         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 15163  003EDA  EF59  F01E         	goto	_writeEEPROM	;wreg free
 15164  003EDE                     __end_of_vscp_setSegmentCRC:
 15165                           	opt stack 0
 15166                           tblptru	equ	0xFF8
 15167                           tblptrh	equ	0xFF7
 15168                           tblptrl	equ	0xFF6
 15169                           tablat	equ	0xFF5
 15170                           prodh	equ	0xFF4
 15171                           prodl	equ	0xFF3
 15172                           postinc0	equ	0xFEE
 15173                           wreg	equ	0xFE8
 15174                           indf1	equ	0xFE7
 15175                           fsr1h	equ	0xFE2
 15176                           fsr1l	equ	0xFE1
 15177                           indf2	equ	0xFDF
 15178                           postinc2	equ	0xFDE
 15179                           postdec2	equ	0xFDD
 15180                           plusw2	equ	0xFDB
 15181                           fsr2h	equ	0xFDA
 15182                           fsr2l	equ	0xFD9
 15183                           status	equ	0xFD8
 15184                           
 15185 ;; *************** function _vscp_getSegmentCRC *****************
 15186 ;; Defined at:
 15187 ;;		line 2343 in file "../main.c"
 15188 ;; Parameters:    Size  Location     Type
 15189 ;;		None
 15190 ;; Auto vars:     Size  Location     Type
 15191 ;;		None
 15192 ;; Return value:  Size  Location     Type
 15193 ;;                  1    wreg      unsigned char 
 15194 ;; Registers used:
 15195 ;;		wreg, status,2, cstack
 15196 ;; Tracked objects:
 15197 ;;		On entry : 0/0
 15198 ;;		On exit  : 0/0
 15199 ;;		Unchanged: 0/0
 15200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15201 ;;      Params:         0       0       0       0       0       0       0
 15202 ;;      Locals:         0       0       0       0       0       0       0
 15203 ;;      Temps:          0       0       0       0       0       0       0
 15204 ;;      Totals:         0       0       0       0       0       0       0
 15205 ;;Total ram usage:        0 bytes
 15206 ;; Hardware stack levels used:    1
 15207 ;; Hardware stack levels required when called:    3
 15208 ;; This function calls:
 15209 ;;		_readEEPROM
 15210 ;; This function is called by:
 15211 ;;		_vscp_check_pstorage
 15212 ;;		_vscp_handleHeartbeat
 15213 ;; This function uses a non-reentrant model
 15214 ;;
 15215                           
 15216                           	psect	text65
 15217  003F58                     __ptext65:
 15218                           	opt stack 0
 15219  003F58                     _vscp_getSegmentCRC:
 15220                           	opt stack 24
 15221                           
 15222                           ;main.c: 2344: return readEEPROM( 0x02 );
 15223                           
 15224                           ;incstack = 0
 15225                           ;incstack = 0
 15226  003F58  6A09               	clrf	?_readEEPROM+1,c
 15227  003F5A  0E02               	movlw	2
 15228  003F5C  6E08               	movwf	?_readEEPROM,c
 15229  003F5E  EF81  F01F         	goto	_readEEPROM	;wreg free
 15230  003F62                     __end_of_vscp_getSegmentCRC:
 15231                           	opt stack 0
 15232                           tblptru	equ	0xFF8
 15233                           tblptrh	equ	0xFF7
 15234                           tblptrl	equ	0xFF6
 15235                           tablat	equ	0xFF5
 15236                           prodh	equ	0xFF4
 15237                           prodl	equ	0xFF3
 15238                           postinc0	equ	0xFEE
 15239                           wreg	equ	0xFE8
 15240                           indf1	equ	0xFE7
 15241                           fsr1h	equ	0xFE2
 15242                           fsr1l	equ	0xFE1
 15243                           indf2	equ	0xFDF
 15244                           postinc2	equ	0xFDE
 15245                           postdec2	equ	0xFDD
 15246                           plusw2	equ	0xFDB
 15247                           fsr2h	equ	0xFDA
 15248                           fsr2l	equ	0xFD9
 15249                           status	equ	0xFD8
 15250                           
 15251 ;; *************** function _vscp_writeNicknamePermanent *****************
 15252 ;; Defined at:
 15253 ;;		line 858 in file "../main.c"
 15254 ;; Parameters:    Size  Location     Type
 15255 ;;  nickname        1    wreg     unsigned char 
 15256 ;; Auto vars:     Size  Location     Type
 15257 ;;  nickname        1   10[COMRAM] unsigned char 
 15258 ;; Return value:  Size  Location     Type
 15259 ;;		None               void
 15260 ;; Registers used:
 15261 ;;		wreg, status,2, cstack
 15262 ;; Tracked objects:
 15263 ;;		On entry : 0/0
 15264 ;;		On exit  : 0/0
 15265 ;;		Unchanged: 0/0
 15266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15267 ;;      Params:         0       0       0       0       0       0       0
 15268 ;;      Locals:         1       0       0       0       0       0       0
 15269 ;;      Temps:          0       0       0       0       0       0       0
 15270 ;;      Totals:         1       0       0       0       0       0       0
 15271 ;;Total ram usage:        1 bytes
 15272 ;; Hardware stack levels used:    1
 15273 ;; Hardware stack levels required when called:    3
 15274 ;; This function calls:
 15275 ;;		_writeEEPROM
 15276 ;; This function is called by:
 15277 ;;		_vscp_check_pstorage
 15278 ;;		_vscp_handleProbeState
 15279 ;;		_vscp_handleHeartbeat
 15280 ;;		_vscp_handleSetNickname
 15281 ;;		_vscp_handleDropNickname
 15282 ;; This function uses a non-reentrant model
 15283 ;;
 15284                           
 15285                           	psect	text66
 15286  003EDE                     __ptext66:
 15287                           	opt stack 0
 15288  003EDE                     _vscp_writeNicknamePermanent:
 15289                           	opt stack 24
 15290                           
 15291                           ;incstack = 0
 15292                           ;incstack = 0
 15293                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 15294  003EDE  CFE8 F00B          	movff	wreg,vscp_writeNicknamePermanent@nickname
 15295                           
 15296                           ;main.c: 859: writeEEPROM( 0x01, nickname );
 15297  003EE2  6A09               	clrf	?_writeEEPROM+1,c
 15298  003EE4  0E01               	movlw	1
 15299  003EE6  6E08               	movwf	?_writeEEPROM,c
 15300  003EE8  C00B  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 15301  003EEC  EF59  F01E         	goto	_writeEEPROM	;wreg free
 15302  003EF0                     __end_of_vscp_writeNicknamePermanent:
 15303                           	opt stack 0
 15304                           tblptru	equ	0xFF8
 15305                           tblptrh	equ	0xFF7
 15306                           tblptrl	equ	0xFF6
 15307                           tablat	equ	0xFF5
 15308                           prodh	equ	0xFF4
 15309                           prodl	equ	0xFF3
 15310                           postinc0	equ	0xFEE
 15311                           wreg	equ	0xFE8
 15312                           indf1	equ	0xFE7
 15313                           fsr1h	equ	0xFE2
 15314                           fsr1l	equ	0xFE1
 15315                           indf2	equ	0xFDF
 15316                           postinc2	equ	0xFDE
 15317                           postdec2	equ	0xFDD
 15318                           plusw2	equ	0xFDB
 15319                           fsr2h	equ	0xFDA
 15320                           fsr2l	equ	0xFD9
 15321                           status	equ	0xFD8
 15322                           
 15323 ;; *************** function _writeEEPROM *****************
 15324 ;; Defined at:
 15325 ;;		line 23 in file "../../vscp_firmware/pic/common/eeprom.c"
 15326 ;; Parameters:    Size  Location     Type
 15327 ;;  address         2    7[COMRAM] unsigned short 
 15328 ;;  data            1    9[COMRAM] unsigned char 
 15329 ;; Auto vars:     Size  Location     Type
 15330 ;;		None
 15331 ;; Return value:  Size  Location     Type
 15332 ;;		None               void
 15333 ;; Registers used:
 15334 ;;		wreg, status,2
 15335 ;; Tracked objects:
 15336 ;;		On entry : 0/0
 15337 ;;		On exit  : 0/0
 15338 ;;		Unchanged: 0/0
 15339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15340 ;;      Params:         3       0       0       0       0       0       0
 15341 ;;      Locals:         0       0       0       0       0       0       0
 15342 ;;      Temps:          0       0       0       0       0       0       0
 15343 ;;      Totals:         3       0       0       0       0       0       0
 15344 ;;Total ram usage:        3 bytes
 15345 ;; Hardware stack levels used:    1
 15346 ;; Hardware stack levels required when called:    2
 15347 ;; This function calls:
 15348 ;;		Nothing
 15349 ;; This function is called by:
 15350 ;;		_main
 15351 ;;		_init_app_eeprom
 15352 ;;		_vscp_setGUID
 15353 ;;		_vscp_setManufacturerId
 15354 ;;		_vscp_writeNicknamePermanent
 15355 ;;		_vscp_writeAppReg
 15356 ;;		_doActionDisable
 15357 ;;		_vscp_setUserID
 15358 ;;		_vscp_setSegmentCRC
 15359 ;;		_vscp_setControlByte
 15360 ;;		_vscp_goBootloaderMode
 15361 ;; This function uses a non-reentrant model
 15362 ;;
 15363                           
 15364                           	psect	text67
 15365  003CB2                     __ptext67:
 15366                           	opt stack 0
 15367  003CB2                     _writeEEPROM:
 15368                           	opt stack 25
 15369                           
 15370                           ;eeprom.c: 29: EEADR = address & 0xff;
 15371                           
 15372                           ;incstack = 0
 15373                           ;incstack = 0
 15374  003CB2  C008  FFA9         	movff	writeEEPROM@address,4009	;volatile
 15375                           
 15376                           ;eeprom.c: 30: EEDATA = data;
 15377  003CB6  C00A  FFA8         	movff	writeEEPROM@data,4008	;volatile
 15378                           
 15379                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 15380  003CBA  9EA6               	bcf	4006,7,c	;volatile
 15381                           
 15382                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 15383  003CBC  9CA6               	bcf	4006,6,c	;volatile
 15384                           
 15385                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 15386  003CBE  84A6               	bsf	4006,2,c	;volatile
 15387                           
 15388                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 15389  003CC0  9EF2               	bcf	intcon,7,c	;volatile
 15390                           
 15391                           ;eeprom.c: 37: EECON2 = 0x55;
 15392  003CC2  0E55               	movlw	85
 15393  003CC4  6EA7               	movwf	4007,c	;volatile
 15394                           
 15395                           ;eeprom.c: 38: EECON2 = 0xaa;
 15396  003CC6  0EAA               	movlw	170
 15397  003CC8  6EA7               	movwf	4007,c	;volatile
 15398                           
 15399                           ;eeprom.c: 39: EECON1bits.WR = 1;
 15400  003CCA  82A6               	bsf	4006,1,c	;volatile
 15401                           
 15402                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 15403  003CCC  8EF2               	bsf	intcon,7,c	;volatile
 15404  003CCE                     l1295:
 15405  003CCE  A8A1               	btfss	4001,4,c	;volatile
 15406  003CD0  D7FE               	goto	l1295
 15407                           
 15408                           ;eeprom.c: 47: PIR2bits.EEIF = 0;
 15409  003CD2  98A1               	bcf	4001,4,c	;volatile
 15410                           
 15411                           ;eeprom.c: 49: EECON1bits.WREN = 0;
 15412  003CD4  94A6               	bcf	4006,2,c	;volatile
 15413  003CD6  0012               	return	
 15414  003CD8                     __end_of_writeEEPROM:
 15415                           	opt stack 0
 15416                           tblptru	equ	0xFF8
 15417                           tblptrh	equ	0xFF7
 15418                           tblptrl	equ	0xFF6
 15419                           tablat	equ	0xFF5
 15420                           prodh	equ	0xFF4
 15421                           prodl	equ	0xFF3
 15422                           intcon	equ	0xFF2
 15423                           postinc0	equ	0xFEE
 15424                           wreg	equ	0xFE8
 15425                           indf1	equ	0xFE7
 15426                           fsr1h	equ	0xFE2
 15427                           fsr1l	equ	0xFE1
 15428                           indf2	equ	0xFDF
 15429                           postinc2	equ	0xFDE
 15430                           postdec2	equ	0xFDD
 15431                           plusw2	equ	0xFDB
 15432                           fsr2h	equ	0xFDA
 15433                           fsr2l	equ	0xFD9
 15434                           status	equ	0xFD8
 15435                           
 15436 ;; *************** function _init *****************
 15437 ;; Defined at:
 15438 ;;		line 320 in file "../main.c"
 15439 ;; Parameters:    Size  Location     Type
 15440 ;;		None
 15441 ;; Auto vars:     Size  Location     Type
 15442 ;;		None
 15443 ;; Return value:  Size  Location     Type
 15444 ;;		None               void
 15445 ;; Registers used:
 15446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15447 ;; Tracked objects:
 15448 ;;		On entry : 0/0
 15449 ;;		On exit  : 0/0
 15450 ;;		Unchanged: 0/0
 15451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15452 ;;      Params:         0       0       0       0       0       0       0
 15453 ;;      Locals:         0       0       0       0       0       0       0
 15454 ;;      Temps:          0       0       0       0       0       0       0
 15455 ;;      Totals:         0       0       0       0       0       0       0
 15456 ;;Total ram usage:        0 bytes
 15457 ;; Hardware stack levels used:    1
 15458 ;; Hardware stack levels required when called:    4
 15459 ;; This function calls:
 15460 ;;		_WriteTimer0
 15461 ;;		_init_app_ram
 15462 ;;		_OpenTimer0
 15463 ;;		_ECANInitialize
 15464 ;; This function is called by:
 15465 ;;		_main
 15466 ;; This function uses a non-reentrant model
 15467 ;;
 15468                           
 15469                           	psect	text68
 15470  003B50                     __ptext68:
 15471                           	opt stack 0
 15472  003B50                     _init:
 15473                           	opt stack 25
 15474                           
 15475                           ;main.c: 325: init_app_ram();
 15476                           
 15477                           ;incstack = 0
 15478                           ;incstack = 0
 15479  003B50  EC93  F018         	call	_init_app_ram	;wreg free
 15480                           
 15481                           ;main.c: 336: TRISA = 0x00;
 15482  003B54  6A92               	clrf	3986,c	;volatile
 15483                           
 15484                           ;main.c: 337: PORTA = 0x00;
 15485  003B56  6A80               	clrf	3968,c	;volatile
 15486                           
 15487                           ;main.c: 349: TRISB = 0b00001000;
 15488  003B58  0E08               	movlw	8
 15489  003B5A  6E93               	movwf	3987,c	;volatile
 15490                           
 15491                           ;main.c: 350: PORTB = 0x00;
 15492  003B5C  6A81               	clrf	3969,c	;volatile
 15493                           
 15494                           ;main.c: 360: TRISC = 0b00000001;
 15495  003B5E  0E01               	movlw	1
 15496  003B60  6E94               	movwf	3988,c	;volatile
 15497                           
 15498                           ;main.c: 361: PORTC = 0x00;
 15499  003B62  6A82               	clrf	3970,c	;volatile
 15500                           
 15501                           ;main.c: 387: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 15502  003B64  0E92               	movlw	146
 15503  003B66  ECF3  F01E         	call	_OpenTimer0
 15504                           
 15505                           ;main.c: 388: WriteTimer0( 0xfb1d );
 15506  003B6A  0EFB               	movlw	251
 15507  003B6C  6E09               	movwf	?_WriteTimer0+1,c
 15508  003B6E  0E1D               	movlw	29
 15509  003B70  6E08               	movwf	?_WriteTimer0,c
 15510  003B72  EC78  F01F         	call	_WriteTimer0	;wreg free
 15511                           
 15512                           ;main.c: 391: LATBbits.LATB4 = 0;
 15513  003B76  988A               	bcf	3978,4,c	;volatile
 15514                           
 15515                           ;main.c: 392: LATBbits.LATB1 = 0;
 15516  003B78  928A               	bcf	3978,1,c	;volatile
 15517                           
 15518                           ;main.c: 393: LATBbits.LATB0 = 0;
 15519  003B7A  908A               	bcf	3978,0,c	;volatile
 15520                           
 15521                           ;main.c: 394: LATCbits.LATC7 = 0;
 15522  003B7C  9E8B               	bcf	3979,7,c	;volatile
 15523                           
 15524                           ;main.c: 395: LATCbits.LATC6 = 0;
 15525  003B7E  9C8B               	bcf	3979,6,c	;volatile
 15526                           
 15527                           ;main.c: 396: LATCbits.LATC5 = 0;
 15528  003B80  9A8B               	bcf	3979,5,c	;volatile
 15529                           
 15530                           ;main.c: 397: LATCbits.LATC4 = 0;
 15531  003B82  988B               	bcf	3979,4,c	;volatile
 15532                           
 15533                           ;main.c: 400: ECANInitialize();
 15534  003B84  ECF2  F01B         	call	_ECANInitialize	;wreg free
 15535                           
 15536                           ;main.c: 421: INTCONbits.PEIE = 1;
 15537  003B88  8CF2               	bsf	intcon,6,c	;volatile
 15538                           
 15539                           ;main.c: 424: INTCONbits.GIE = 1;
 15540  003B8A  8EF2               	bsf	intcon,7,c	;volatile
 15541  003B8C  0012               	return	
 15542  003B8E                     __end_of_init:
 15543                           	opt stack 0
 15544                           tblptru	equ	0xFF8
 15545                           tblptrh	equ	0xFF7
 15546                           tblptrl	equ	0xFF6
 15547                           tablat	equ	0xFF5
 15548                           prodh	equ	0xFF4
 15549                           prodl	equ	0xFF3
 15550                           intcon	equ	0xFF2
 15551                           postinc0	equ	0xFEE
 15552                           wreg	equ	0xFE8
 15553                           indf1	equ	0xFE7
 15554                           fsr1h	equ	0xFE2
 15555                           fsr1l	equ	0xFE1
 15556                           indf2	equ	0xFDF
 15557                           postinc2	equ	0xFDE
 15558                           postdec2	equ	0xFDD
 15559                           plusw2	equ	0xFDB
 15560                           fsr2h	equ	0xFDA
 15561                           fsr2l	equ	0xFD9
 15562                           status	equ	0xFD8
 15563                           
 15564 ;; *************** function _ECANInitialize *****************
 15565 ;; Defined at:
 15566 ;;		line 168 in file "../ECAN.c"
 15567 ;; Parameters:    Size  Location     Type
 15568 ;;		None
 15569 ;; Auto vars:     Size  Location     Type
 15570 ;;		None
 15571 ;; Return value:  Size  Location     Type
 15572 ;;		None               void
 15573 ;; Registers used:
 15574 ;;		wreg, status,2, status,0, cstack
 15575 ;; Tracked objects:
 15576 ;;		On entry : 0/0
 15577 ;;		On exit  : 0/0
 15578 ;;		Unchanged: 0/0
 15579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15580 ;;      Params:         0       0       0       0       0       0       0
 15581 ;;      Locals:         0       0       0       0       0       0       0
 15582 ;;      Temps:          0       0       0       0       0       0       0
 15583 ;;      Totals:         0       0       0       0       0       0       0
 15584 ;;Total ram usage:        0 bytes
 15585 ;; Hardware stack levels used:    1
 15586 ;; Hardware stack levels required when called:    3
 15587 ;; This function calls:
 15588 ;;		_ECANSetOperationMode
 15589 ;; This function is called by:
 15590 ;;		_init
 15591 ;; This function uses a non-reentrant model
 15592 ;;
 15593                           
 15594                           	psect	text69
 15595  0037E4                     __ptext69:
 15596                           	opt stack 0
 15597  0037E4                     _ECANInitialize:
 15598                           	opt stack 25
 15599                           
 15600                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 15601                           
 15602                           ;incstack = 0
 15603                           ;incstack = 0
 15604  0037E4  0E80               	movlw	128
 15605  0037E6  EC33  F01F         	call	_ECANSetOperationMode
 15606                           
 15607                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 15608  0037EA  0E09               	movlw	9
 15609  0037EC  6E70               	movwf	3952,c	;volatile
 15610                           
 15611                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 15612  0037EE  0EFC               	movlw	252
 15613  0037F0  6E71               	movwf	3953,c	;volatile
 15614                           
 15615                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 15616                           ;ECAN.c: 181: (0 << 6) |
 15617                           ;ECAN.c: 182: (2-1);
 15618  0037F2  0E01               	movlw	1
 15619  0037F4  6E72               	movwf	3954,c	;volatile
 15620                           
 15621                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 15622  0037F6  0E20               	movlw	32
 15623  0037F8  6E73               	movwf	3955,c	;volatile
 15624                           
 15625                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 15626  0037FA  8E77               	bsf	3959,7,c	;volatile
 15627                           
 15628                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 15629  0037FC  9C77               	bcf	3959,6,c	;volatile
 15630                           
 15631                           ;ECAN.c: 205: RXB0CON = 0;
 15632  0037FE  6A60               	clrf	3936,c	;volatile
 15633                           
 15634                           ;ECAN.c: 211: RXB1CON = 0;
 15635  003800  010F               	movlb	15	; () banked
 15636  003802  6B50               	clrf	80,b	;volatile
 15637                           
 15638                           ; BSR set to: 15
 15639                           ;ECAN.c: 221: B0CON = 0;
 15640  003804  010E               	movlb	14	; () banked
 15641  003806  6B20               	clrf	32,b	;volatile
 15642                           
 15643                           ; BSR set to: 14
 15644                           ;ECAN.c: 231: B1CON = 0;
 15645  003808  6B30               	clrf	48,b	;volatile
 15646                           
 15647                           ; BSR set to: 14
 15648                           ;ECAN.c: 241: B2CON = 0;
 15649  00380A  6B40               	clrf	64,b	;volatile
 15650                           
 15651                           ; BSR set to: 14
 15652                           ;ECAN.c: 254: B3CON = 0 << 2;
 15653  00380C  6B50               	clrf	80,b	;volatile
 15654                           
 15655                           ; BSR set to: 14
 15656                           ;ECAN.c: 264: B4CON = 0 << 2;
 15657  00380E  6B60               	clrf	96,b	;volatile
 15658                           
 15659                           ; BSR set to: 14
 15660                           ;ECAN.c: 274: B5CON = 0 << 2;
 15661  003810  6B70               	clrf	112,b	;volatile
 15662                           
 15663                           ; BSR set to: 14
 15664                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 15665  003812  0EE0               	movlw	224
 15666  003814  010D               	movlb	13	; () banked
 15667  003816  6FF8               	movwf	248,b	;volatile
 15668                           
 15669                           ; BSR set to: 13
 15670                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 15671  003818  010F               	movlb	15	; () banked
 15672  00381A  6B00               	clrf	0,b	;volatile
 15673                           
 15674                           ; BSR set to: 15
 15675  00381C  0E08               	movlw	8
 15676  00381E  6F01               	movwf	1,b	;volatile
 15677                           
 15678                           ; BSR set to: 15
 15679  003820  6B02               	clrf	2,b	;volatile
 15680                           
 15681                           ; BSR set to: 15
 15682  003822  6B03               	clrf	3,b	;volatile
 15683                           
 15684                           ; BSR set to: 15
 15685                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 15686  003824  6B04               	clrf	4,b	;volatile
 15687                           
 15688                           ; BSR set to: 15
 15689  003826  0EE8               	movlw	232
 15690  003828  6F05               	movwf	5,b	;volatile
 15691                           
 15692                           ; BSR set to: 15
 15693  00382A  0E1A               	movlw	26
 15694  00382C  6F06               	movwf	6,b	;volatile
 15695                           
 15696                           ; BSR set to: 15
 15697  00382E  6B07               	clrf	7,b	;volatile
 15698                           
 15699                           ; BSR set to: 15
 15700                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 15701  003830  0E03               	movlw	3
 15702  003832  010D               	movlb	13	; () banked
 15703  003834  6FD4               	movwf	212,b	;volatile
 15704                           
 15705                           ; BSR set to: 13
 15706                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 15707  003836  6BD5               	clrf	213,b	;volatile
 15708                           
 15709                           ; BSR set to: 13
 15710                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 15711  003838  6BE0               	clrf	224,b	;volatile
 15712                           
 15713                           ; BSR set to: 13
 15714                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 15715  00383A  0E11               	movlw	17
 15716  00383C  6FE1               	movwf	225,b	;volatile
 15717                           
 15718                           ; BSR set to: 13
 15719                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 15720  00383E  6FE2               	movwf	226,b	;volatile
 15721                           
 15722                           ; BSR set to: 13
 15723                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 15724  003840  6BE3               	clrf	227,b	;volatile
 15725                           
 15726                           ; BSR set to: 13
 15727                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 15728  003842  6BE4               	clrf	228,b	;volatile
 15729                           
 15730                           ; BSR set to: 13
 15731                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 15732  003844  6BE5               	clrf	229,b	;volatile
 15733                           
 15734                           ; BSR set to: 13
 15735                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 15736  003846  6BE6               	clrf	230,b	;volatile
 15737                           
 15738                           ; BSR set to: 13
 15739                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 15740  003848  6BE7               	clrf	231,b	;volatile
 15741                           
 15742                           ; BSR set to: 13
 15743                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 15744  00384A  0E54               	movlw	84
 15745  00384C  6FF0               	movwf	240,b	;volatile
 15746                           
 15747                           ; BSR set to: 13
 15748                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 15749  00384E  0E05               	movlw	5
 15750  003850  6FF1               	movwf	241,b	;volatile
 15751                           
 15752                           ; BSR set to: 13
 15753                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15754  003852  6BF2               	clrf	242,b	;volatile
 15755                           
 15756                           ; BSR set to: 13
 15757                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15758  003854  6BF2               	clrf	242,b	;volatile
 15759                           
 15760                           ; BSR set to: 13
 15761                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 15762  003856  0E0F               	movlw	15
 15763  003858  010F               	movlb	15	; () banked
 15764  00385A  6F18               	movwf	24,b	;volatile
 15765                           
 15766                           ; BSR set to: 15
 15767  00385C  0EE0               	movlw	224
 15768  00385E  6F19               	movwf	25,b	;volatile
 15769                           
 15770                           ; BSR set to: 15
 15771  003860  6B1A               	clrf	26,b	;volatile
 15772                           
 15773                           ; BSR set to: 15
 15774  003862  6B1B               	clrf	27,b	;volatile
 15775                           
 15776                           ; BSR set to: 15
 15777                           ;ECAN.c: 482: RXM0EXIDM = 1;
 15778  003864  8719               	bsf	25,3,b	;volatile
 15779                           
 15780                           ; BSR set to: 15
 15781                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 15782  003866  0E0F               	movlw	15
 15783  003868  6F1C               	movwf	28,b	;volatile
 15784                           
 15785                           ; BSR set to: 15
 15786  00386A  0EE0               	movlw	224
 15787  00386C  6F1D               	movwf	29,b	;volatile
 15788                           
 15789                           ; BSR set to: 15
 15790  00386E  691E               	setf	30,b	;volatile
 15791                           
 15792                           ; BSR set to: 15
 15793  003870  6B1F               	clrf	31,b	;volatile
 15794                           
 15795                           ; BSR set to: 15
 15796                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 15797  003872  871D               	bsf	29,3,b	;volatile
 15798                           
 15799                           ; BSR set to: 15
 15800                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 15801  003874  0E00               	movlw	0
 15802  003876  EF33  F01F         	goto	_ECANSetOperationMode
 15803  00387A                     __end_of_ECANInitialize:
 15804                           	opt stack 0
 15805                           tblptru	equ	0xFF8
 15806                           tblptrh	equ	0xFF7
 15807                           tblptrl	equ	0xFF6
 15808                           tablat	equ	0xFF5
 15809                           prodh	equ	0xFF4
 15810                           prodl	equ	0xFF3
 15811                           intcon	equ	0xFF2
 15812                           postinc0	equ	0xFEE
 15813                           wreg	equ	0xFE8
 15814                           indf1	equ	0xFE7
 15815                           fsr1h	equ	0xFE2
 15816                           fsr1l	equ	0xFE1
 15817                           indf2	equ	0xFDF
 15818                           postinc2	equ	0xFDE
 15819                           postdec2	equ	0xFDD
 15820                           plusw2	equ	0xFDB
 15821                           fsr2h	equ	0xFDA
 15822                           fsr2l	equ	0xFD9
 15823                           status	equ	0xFD8
 15824                           
 15825 ;; *************** function _ECANSetOperationMode *****************
 15826 ;; Defined at:
 15827 ;;		line 1012 in file "../ECAN.c"
 15828 ;; Parameters:    Size  Location     Type
 15829 ;;  mode            1    wreg     enum E16346
 15830 ;; Auto vars:     Size  Location     Type
 15831 ;;  mode            1    7[COMRAM] enum E16346
 15832 ;; Return value:  Size  Location     Type
 15833 ;;		None               void
 15834 ;; Registers used:
 15835 ;;		wreg, status,2, status,0
 15836 ;; Tracked objects:
 15837 ;;		On entry : 0/0
 15838 ;;		On exit  : 0/0
 15839 ;;		Unchanged: 0/0
 15840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15841 ;;      Params:         0       0       0       0       0       0       0
 15842 ;;      Locals:         1       0       0       0       0       0       0
 15843 ;;      Temps:          0       0       0       0       0       0       0
 15844 ;;      Totals:         1       0       0       0       0       0       0
 15845 ;;Total ram usage:        1 bytes
 15846 ;; Hardware stack levels used:    1
 15847 ;; Hardware stack levels required when called:    2
 15848 ;; This function calls:
 15849 ;;		Nothing
 15850 ;; This function is called by:
 15851 ;;		_calculateSetFilterMask
 15852 ;;		_ECANInitialize
 15853 ;; This function uses a non-reentrant model
 15854 ;;
 15855                           
 15856                           	psect	text70
 15857  003E66                     __ptext70:
 15858                           	opt stack 0
 15859  003E66                     _ECANSetOperationMode:
 15860                           	opt stack 23
 15861                           
 15862                           ;incstack = 0
 15863                           ;incstack = 0
 15864                           ;ECANSetOperationMode@mode stored from wreg
 15865  003E66  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 15866                           
 15867                           ;ECAN.c: 1013: CANCON &= 0x1F;
 15868  003E6A  0E1F               	movlw	31
 15869  003E6C  166F               	andwf	3951,f,c	;volatile
 15870                           
 15871                           ;ECAN.c: 1014: CANCON |= mode;
 15872  003E6E  5008               	movf	ECANSetOperationMode@mode,w,c
 15873  003E70  126F               	iorwf	3951,f,c	;volatile
 15874  003E72                     l6743:
 15875  003E72  506F               	movf	3951,w,c	;volatile
 15876  003E74  0BE0               	andlw	224
 15877  003E76  1808               	xorwf	ECANSetOperationMode@mode,w,c
 15878  003E78  B4D8               	btfsc	status,2,c
 15879  003E7A  0012               	return	
 15880  003E7C  D7FA               	goto	l6743
 15881  003E7E                     __end_of_ECANSetOperationMode:
 15882                           	opt stack 0
 15883                           tblptru	equ	0xFF8
 15884                           tblptrh	equ	0xFF7
 15885                           tblptrl	equ	0xFF6
 15886                           tablat	equ	0xFF5
 15887                           prodh	equ	0xFF4
 15888                           prodl	equ	0xFF3
 15889                           intcon	equ	0xFF2
 15890                           postinc0	equ	0xFEE
 15891                           wreg	equ	0xFE8
 15892                           indf1	equ	0xFE7
 15893                           fsr1h	equ	0xFE2
 15894                           fsr1l	equ	0xFE1
 15895                           indf2	equ	0xFDF
 15896                           postinc2	equ	0xFDE
 15897                           postdec2	equ	0xFDD
 15898                           plusw2	equ	0xFDB
 15899                           fsr2h	equ	0xFDA
 15900                           fsr2l	equ	0xFD9
 15901                           status	equ	0xFD8
 15902                           
 15903 ;; *************** function _OpenTimer0 *****************
 15904 ;; Defined at:
 15905 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 15906 ;; Parameters:    Size  Location     Type
 15907 ;;  config          1    wreg     unsigned char 
 15908 ;; Auto vars:     Size  Location     Type
 15909 ;;  config          1    7[COMRAM] unsigned char 
 15910 ;; Return value:  Size  Location     Type
 15911 ;;		None               void
 15912 ;; Registers used:
 15913 ;;		wreg, status,2, status,0
 15914 ;; Tracked objects:
 15915 ;;		On entry : 0/0
 15916 ;;		On exit  : 0/0
 15917 ;;		Unchanged: 0/0
 15918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15919 ;;      Params:         0       0       0       0       0       0       0
 15920 ;;      Locals:         1       0       0       0       0       0       0
 15921 ;;      Temps:          0       0       0       0       0       0       0
 15922 ;;      Totals:         1       0       0       0       0       0       0
 15923 ;;Total ram usage:        1 bytes
 15924 ;; Hardware stack levels used:    1
 15925 ;; Hardware stack levels required when called:    2
 15926 ;; This function calls:
 15927 ;;		Nothing
 15928 ;; This function is called by:
 15929 ;;		_init
 15930 ;; This function uses a non-reentrant model
 15931 ;;
 15932                           
 15933                           	psect	text71
 15934  003DE6                     __ptext71:
 15935                           	opt stack 0
 15936  003DE6                     _OpenTimer0:
 15937                           	opt stack 26
 15938                           
 15939                           ;incstack = 0
 15940                           ;incstack = 0
 15941                           ;OpenTimer0@config stored from wreg
 15942  003DE6  CFE8 F008          	movff	wreg,OpenTimer0@config
 15943  003DEA  5008               	movf	OpenTimer0@config,w,c
 15944  003DEC  0B7F               	andlw	127
 15945  003DEE  6ED5               	movwf	4053,c	;volatile
 15946  003DF0  6AD7               	clrf	4055,c	;volatile
 15947  003DF2  6AD6               	clrf	4054,c	;volatile
 15948  003DF4  94F2               	bcf	intcon,2,c	;volatile
 15949  003DF6  AE08               	btfss	OpenTimer0@config,7,c
 15950  003DF8  D002               	goto	l1314
 15951  003DFA  8AF2               	bsf	intcon,5,c	;volatile
 15952  003DFC  D001               	goto	l1315
 15953  003DFE                     l1314:
 15954  003DFE  9AF2               	bcf	intcon,5,c	;volatile
 15955  003E00                     l1315:
 15956  003E00  8ED5               	bsf	4053,7,c	;volatile
 15957  003E02  0012               	return	
 15958  003E04                     __end_of_OpenTimer0:
 15959                           	opt stack 0
 15960                           tblptru	equ	0xFF8
 15961                           tblptrh	equ	0xFF7
 15962                           tblptrl	equ	0xFF6
 15963                           tablat	equ	0xFF5
 15964                           prodh	equ	0xFF4
 15965                           prodl	equ	0xFF3
 15966                           intcon	equ	0xFF2
 15967                           postinc0	equ	0xFEE
 15968                           wreg	equ	0xFE8
 15969                           indf1	equ	0xFE7
 15970                           fsr1h	equ	0xFE2
 15971                           fsr1l	equ	0xFE1
 15972                           indf2	equ	0xFDF
 15973                           postinc2	equ	0xFDE
 15974                           postdec2	equ	0xFDD
 15975                           plusw2	equ	0xFDB
 15976                           fsr2h	equ	0xFDA
 15977                           fsr2l	equ	0xFD9
 15978                           status	equ	0xFD8
 15979                           
 15980 ;; *************** function _init_app_ram *****************
 15981 ;; Defined at:
 15982 ;;		line 434 in file "../main.c"
 15983 ;; Parameters:    Size  Location     Type
 15984 ;;		None
 15985 ;; Auto vars:     Size  Location     Type
 15986 ;;  i               1   12[COMRAM] unsigned char 
 15987 ;; Return value:  Size  Location     Type
 15988 ;;		None               void
 15989 ;; Registers used:
 15990 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15991 ;; Tracked objects:
 15992 ;;		On entry : 0/0
 15993 ;;		On exit  : 0/0
 15994 ;;		Unchanged: 0/0
 15995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15996 ;;      Params:         0       0       0       0       0       0       0
 15997 ;;      Locals:         1       0       0       0       0       0       0
 15998 ;;      Temps:          2       0       0       0       0       0       0
 15999 ;;      Totals:         3       0       0       0       0       0       0
 16000 ;;Total ram usage:        3 bytes
 16001 ;; Hardware stack levels used:    1
 16002 ;; Hardware stack levels required when called:    3
 16003 ;; This function calls:
 16004 ;;		_readEEPROM
 16005 ;; This function is called by:
 16006 ;;		_main
 16007 ;;		_init
 16008 ;;		_vscp_restoreDefaults
 16009 ;; This function uses a non-reentrant model
 16010 ;;
 16011                           
 16012                           	psect	text72
 16013  003126                     __ptext72:
 16014                           	opt stack 0
 16015  003126                     _init_app_ram:
 16016                           	opt stack 23
 16017                           
 16018                           ;main.c: 435: uint8_t i;
 16019                           ;main.c: 437: measurement_clock = 0;
 16020                           
 16021                           ;incstack = 0
 16022                           ;incstack = 0
 16023  003126  0100               	movlb	0	; () banked
 16024  003128  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
 16025  00312A  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 16026  00312C  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 16027  00312E  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 16028                           
 16029                           ;main.c: 439: seconds = 0;
 16030  003130  6B90               	clrf	_seconds& (0+255),b
 16031                           
 16032                           ;main.c: 440: minutes = 0;
 16033  003132  6B8E               	clrf	_minutes& (0+255),b
 16034                           
 16035                           ;main.c: 441: hours = 0;
 16036  003134  6B8D               	clrf	_hours& (0+255),b
 16037                           
 16038                           ;main.c: 443: relay_pulse_flags = 0;
 16039  003136  6B8F               	clrf	_relay_pulse_flags& (0+255),b
 16040                           
 16041                           ;main.c: 446: for ( i = 0; i < 8; i++ ) {
 16042  003138  6A0D               	clrf	init_app_ram@i,c
 16043  00313A                     l7273:
 16044                           
 16045                           ; BSR set to: 0
 16046                           ;main.c: 447: relay_pulse_timer[ i ] = 0;
 16047  00313A  500D               	movf	init_app_ram@i,w,c
 16048  00313C  0D02               	mullw	2
 16049  00313E  50F3               	movf	prodl,w,c
 16050  003140  0F70               	addlw	low _relay_pulse_timer
 16051  003142  6ED9               	movwf	fsr2l,c
 16052  003144  6ADA               	clrf	fsr2h,c
 16053  003146  6ADE               	clrf	postinc2,c
 16054  003148  6ADD               	clrf	postdec2,c
 16055                           
 16056                           ;main.c: 448: relay_protection_timer[ i ] = 0;
 16057  00314A  500D               	movf	init_app_ram@i,w,c
 16058  00314C  0D02               	mullw	2
 16059  00314E  50F3               	movf	prodl,w,c
 16060  003150  0F60               	addlw	low _relay_protection_timer
 16061  003152  6ED9               	movwf	fsr2l,c
 16062  003154  6ADA               	clrf	fsr2h,c
 16063  003156  6ADE               	clrf	postinc2,c
 16064  003158  6ADD               	clrf	postdec2,c
 16065                           
 16066                           ; BSR set to: 0
 16067  00315A  2A0D               	incf	init_app_ram@i,f,c
 16068                           
 16069                           ; BSR set to: 0
 16070  00315C  0E07               	movlw	7
 16071  00315E  640D               	cpfsgt	init_app_ram@i,c
 16072  003160  D7EC               	goto	l7273
 16073                           
 16074                           ; BSR set to: 0
 16075                           ;main.c: 449: }
 16076                           ;main.c: 451: for ( i=0; i<7; i++ ) {
 16077  003162  6A0D               	clrf	init_app_ram@i,c
 16078  003164                     l7283:
 16079                           
 16080                           ;main.c: 454: if ( readEEPROM( 0x43 + 10 + i ) &
 16081                           ;main.c: 455: 0x01 ) {
 16082  003164  0E4D               	movlw	77
 16083  003166  240D               	addwf	init_app_ram@i,w,c
 16084  003168  6E08               	movwf	?_readEEPROM,c
 16085  00316A  6A09               	clrf	?_readEEPROM+1,c
 16086  00316C  0E00               	movlw	0
 16087  00316E  2209               	addwfc	?_readEEPROM+1,f,c
 16088  003170  EC81  F01F         	call	_readEEPROM	;wreg free
 16089  003174  6E0B               	movwf	??_init_app_ram& (0+255),c
 16090  003176  A00B               	btfss	??_init_app_ram,0,c
 16091  003178  D02D               	goto	l7289
 16092                           
 16093                           ;main.c: 457: relay_pulse_flags |= (1<<i);
 16094  00317A  C00D  F00B         	movff	init_app_ram@i,??_init_app_ram
 16095  00317E  0E01               	movlw	1
 16096  003180  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16097  003182  2A0B               	incf	??_init_app_ram,f,c
 16098  003184  D002               	goto	u7994
 16099  003186                     u7995:
 16100  003186  90D8               	bcf	status,0,c
 16101  003188  360C               	rlcf	??_init_app_ram+1,f,c
 16102  00318A                     u7994:
 16103  00318A  2E0B               	decfsz	??_init_app_ram,f,c
 16104  00318C  D7FC               	goto	u7995
 16105  00318E  500C               	movf	??_init_app_ram+1,w,c
 16106  003190  0100               	movlb	0	; () banked
 16107  003192  138F               	iorwf	_relay_pulse_flags& (0+255),f,b
 16108                           
 16109                           ; BSR set to: 0
 16110                           ;main.c: 458: relay_pulse_timer[ i ] =
 16111                           ;main.c: 459: readEEPROM( 0x43 + 18 + i ) * 256 +
 16112                           ;main.c: 460: readEEPROM( 0x43 + 19 + i );
 16113  003194  0E55               	movlw	85
 16114  003196  240D               	addwf	init_app_ram@i,w,c
 16115  003198  6E08               	movwf	?_readEEPROM,c
 16116  00319A  6A09               	clrf	?_readEEPROM+1,c
 16117  00319C  0E00               	movlw	0
 16118  00319E  2209               	addwfc	?_readEEPROM+1,f,c
 16119  0031A0  EC81  F01F         	call	_readEEPROM	;wreg free
 16120  0031A4  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16121  0031A6  6A0B               	clrf	??_init_app_ram& (0+255),c
 16122  0031A8  0E56               	movlw	86
 16123  0031AA  240D               	addwf	init_app_ram@i,w,c
 16124  0031AC  6E08               	movwf	?_readEEPROM,c
 16125  0031AE  6A09               	clrf	?_readEEPROM+1,c
 16126  0031B0  0E00               	movlw	0
 16127  0031B2  2209               	addwfc	?_readEEPROM+1,f,c
 16128  0031B4  EC81  F01F         	call	_readEEPROM	;wreg free
 16129  0031B8  260B               	addwf	??_init_app_ram,f,c
 16130  0031BA  0E00               	movlw	0
 16131  0031BC  220C               	addwfc	??_init_app_ram+1,f,c
 16132  0031BE  500D               	movf	init_app_ram@i,w,c
 16133  0031C0  0D02               	mullw	2
 16134  0031C2  50F3               	movf	prodl,w,c
 16135  0031C4  0100               	movlb	0	; () banked
 16136  0031C6  0F70               	addlw	low _relay_pulse_timer
 16137  0031C8  6ED9               	movwf	fsr2l,c
 16138  0031CA  6ADA               	clrf	fsr2h,c
 16139  0031CC  C00B  FFDE         	movff	??_init_app_ram,postinc2
 16140  0031D0  C00C  FFDD         	movff	??_init_app_ram+1,postdec2
 16141  0031D4                     l7289:
 16142                           
 16143                           ;main.c: 461: }
 16144                           ;main.c: 464: if ( readEEPROM(0x43 + 15 + i ) & 0x04) {
 16145  0031D4  0E52               	movlw	82
 16146  0031D6  240D               	addwf	init_app_ram@i,w,c
 16147  0031D8  6E08               	movwf	?_readEEPROM,c
 16148  0031DA  6A09               	clrf	?_readEEPROM+1,c
 16149  0031DC  0E00               	movlw	0
 16150  0031DE  2209               	addwfc	?_readEEPROM+1,f,c
 16151  0031E0  EC81  F01F         	call	_readEEPROM	;wreg free
 16152  0031E4  6E0B               	movwf	??_init_app_ram& (0+255),c
 16153  0031E6  A40B               	btfss	??_init_app_ram,2,c
 16154  0031E8  D020               	goto	l7293
 16155                           
 16156                           ;main.c: 465: relay_protection_timer[ i ] =
 16157                           ;main.c: 466: readEEPROM(0x43 + 44 + i ) * 256 +
 16158                           ;main.c: 467: readEEPROM(0x43 + 45 + i );
 16159  0031EA  0E6F               	movlw	111
 16160  0031EC  240D               	addwf	init_app_ram@i,w,c
 16161  0031EE  6E08               	movwf	?_readEEPROM,c
 16162  0031F0  6A09               	clrf	?_readEEPROM+1,c
 16163  0031F2  0E00               	movlw	0
 16164  0031F4  2209               	addwfc	?_readEEPROM+1,f,c
 16165  0031F6  EC81  F01F         	call	_readEEPROM	;wreg free
 16166  0031FA  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16167  0031FC  6A0B               	clrf	??_init_app_ram& (0+255),c
 16168  0031FE  0E70               	movlw	112
 16169  003200  240D               	addwf	init_app_ram@i,w,c
 16170  003202  6E08               	movwf	?_readEEPROM,c
 16171  003204  6A09               	clrf	?_readEEPROM+1,c
 16172  003206  0E00               	movlw	0
 16173  003208  2209               	addwfc	?_readEEPROM+1,f,c
 16174  00320A  EC81  F01F         	call	_readEEPROM	;wreg free
 16175  00320E  260B               	addwf	??_init_app_ram,f,c
 16176  003210  0E00               	movlw	0
 16177  003212  220C               	addwfc	??_init_app_ram+1,f,c
 16178  003214  500D               	movf	init_app_ram@i,w,c
 16179  003216  0D02               	mullw	2
 16180  003218  50F3               	movf	prodl,w,c
 16181  00321A  0100               	movlb	0	; () banked
 16182  00321C  0F60               	addlw	low _relay_protection_timer
 16183  00321E  6ED9               	movwf	fsr2l,c
 16184  003220  6ADA               	clrf	fsr2h,c
 16185  003222  C00B  FFDE         	movff	??_init_app_ram,postinc2
 16186  003226  C00C  FFDD         	movff	??_init_app_ram+1,postdec2
 16187  00322A                     l7293:
 16188  00322A  2A0D               	incf	init_app_ram@i,f,c
 16189  00322C  0E06               	movlw	6
 16190  00322E  640D               	cpfsgt	init_app_ram@i,c
 16191  003230  D799               	goto	l7283
 16192  003232  0C06               	retlw	6
 16193  003234                     __end_of_init_app_ram:
 16194                           	opt stack 0
 16195                           tblptru	equ	0xFF8
 16196                           tblptrh	equ	0xFF7
 16197                           tblptrl	equ	0xFF6
 16198                           tablat	equ	0xFF5
 16199                           prodh	equ	0xFF4
 16200                           prodl	equ	0xFF3
 16201                           intcon	equ	0xFF2
 16202                           postinc0	equ	0xFEE
 16203                           wreg	equ	0xFE8
 16204                           indf1	equ	0xFE7
 16205                           fsr1h	equ	0xFE2
 16206                           fsr1l	equ	0xFE1
 16207                           indf2	equ	0xFDF
 16208                           postinc2	equ	0xFDE
 16209                           postdec2	equ	0xFDD
 16210                           plusw2	equ	0xFDB
 16211                           fsr2h	equ	0xFDA
 16212                           fsr2l	equ	0xFD9
 16213                           status	equ	0xFD8
 16214                           
 16215 ;; *************** function _WriteTimer0 *****************
 16216 ;; Defined at:
 16217 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16218 ;; Parameters:    Size  Location     Type
 16219 ;;  timer0          2    7[COMRAM] unsigned int 
 16220 ;; Auto vars:     Size  Location     Type
 16221 ;;  timer           2    9[COMRAM] struct Timers
 16222 ;; Return value:  Size  Location     Type
 16223 ;;		None               void
 16224 ;; Registers used:
 16225 ;;		None
 16226 ;; Tracked objects:
 16227 ;;		On entry : 0/0
 16228 ;;		On exit  : 0/0
 16229 ;;		Unchanged: 0/0
 16230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16231 ;;      Params:         2       0       0       0       0       0       0
 16232 ;;      Locals:         2       0       0       0       0       0       0
 16233 ;;      Temps:          0       0       0       0       0       0       0
 16234 ;;      Totals:         4       0       0       0       0       0       0
 16235 ;;Total ram usage:        4 bytes
 16236 ;; Hardware stack levels used:    1
 16237 ;; Hardware stack levels required when called:    2
 16238 ;; This function calls:
 16239 ;;		Nothing
 16240 ;; This function is called by:
 16241 ;;		_init
 16242 ;; This function uses a non-reentrant model
 16243 ;;
 16244                           
 16245                           	psect	text73
 16246  003EF0                     __ptext73:
 16247                           	opt stack 0
 16248  003EF0                     _WriteTimer0:
 16249                           	opt stack 26
 16250                           
 16251                           ;incstack = 0
 16252                           ;incstack = 0
 16253  003EF0  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 16254  003EF4  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 16255  003EF8  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 16256  003EFC  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 16257  003F00  0012               	return	
 16258  003F02                     __end_of_WriteTimer0:
 16259                           	opt stack 0
 16260                           tblptru	equ	0xFF8
 16261                           tblptrh	equ	0xFF7
 16262                           tblptrl	equ	0xFF6
 16263                           tablat	equ	0xFF5
 16264                           prodh	equ	0xFF4
 16265                           prodl	equ	0xFF3
 16266                           intcon	equ	0xFF2
 16267                           postinc0	equ	0xFEE
 16268                           wreg	equ	0xFE8
 16269                           indf1	equ	0xFE7
 16270                           fsr1h	equ	0xFE2
 16271                           fsr1l	equ	0xFE1
 16272                           indf2	equ	0xFDF
 16273                           postinc2	equ	0xFDE
 16274                           postdec2	equ	0xFDD
 16275                           plusw2	equ	0xFDB
 16276                           fsr2h	equ	0xFDA
 16277                           fsr2l	equ	0xFD9
 16278                           status	equ	0xFD8
 16279                           
 16280 ;; *************** function _vscp_readAppReg *****************
 16281 ;; Defined at:
 16282 ;;		line 898 in file "../main.c"
 16283 ;; Parameters:    Size  Location     Type
 16284 ;;  reg             1    wreg     unsigned char 
 16285 ;; Auto vars:     Size  Location     Type
 16286 ;;  reg             1   11[COMRAM] unsigned char 
 16287 ;;  rv              1   10[COMRAM] unsigned char 
 16288 ;; Return value:  Size  Location     Type
 16289 ;;                  1    wreg      unsigned char 
 16290 ;; Registers used:
 16291 ;;		wreg, status,2, status,0, cstack
 16292 ;; Tracked objects:
 16293 ;;		On entry : F/0
 16294 ;;		On exit  : 0/0
 16295 ;;		Unchanged: 0/0
 16296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16297 ;;      Params:         0       0       0       0       0       0       0
 16298 ;;      Locals:         2       0       0       0       0       0       0
 16299 ;;      Temps:          0       0       0       0       0       0       0
 16300 ;;      Totals:         2       0       0       0       0       0       0
 16301 ;;Total ram usage:        2 bytes
 16302 ;; Hardware stack levels used:    1
 16303 ;; Hardware stack levels required when called:    3
 16304 ;; This function calls:
 16305 ;;		_readEEPROM
 16306 ;; This function is called by:
 16307 ;;		_vscp_readRegister
 16308 ;;		_vscp_handleProtocolEvent
 16309 ;; This function uses a non-reentrant model
 16310 ;;
 16311                           
 16312                           	psect	text74
 16313  00372E                     __ptext74:
 16314                           	opt stack 0
 16315  00372E                     _vscp_readAppReg:
 16316                           	opt stack 24
 16317                           
 16318                           ;incstack = 0
 16319                           ;incstack = 0
 16320                           ;vscp_readAppReg@reg stored from wreg
 16321  00372E  CFE8 F00C          	movff	wreg,vscp_readAppReg@reg
 16322                           
 16323                           ; BSR set to: 0
 16324                           ;main.c: 899: uint8_t rv;
 16325                           ;main.c: 901: rv = 0x00;
 16326  003732  6A0B               	clrf	vscp_readAppReg@rv,c
 16327                           
 16328                           ; BSR set to: 0
 16329                           ;main.c: 904: if ( reg == 0x00 ) {
 16330  003734  660C               	tstfsz	vscp_readAppReg@reg,c
 16331  003736  D006               	goto	l8069
 16332                           
 16333                           ; BSR set to: 0
 16334                           ;main.c: 905: rv = readEEPROM(0x43 + 0);
 16335  003738  6A09               	clrf	?_readEEPROM+1,c
 16336  00373A  0E43               	movlw	67
 16337  00373C  6E08               	movwf	?_readEEPROM,c
 16338  00373E  EC81  F01F         	call	_readEEPROM	;wreg free
 16339  003742  D04D               	goto	L50
 16340  003744                     l8069:
 16341                           
 16342                           ; BSR set to: 0
 16343                           ;main.c: 908: else if ( reg == 0x01 ) {
 16344  003744  040C               	decf	vscp_readAppReg@reg,w,c
 16345  003746  E106               	bnz	l8073
 16346                           
 16347                           ; BSR set to: 0
 16348                           ;main.c: 909: rv = readEEPROM(0x43 + 1);
 16349  003748  6A09               	clrf	?_readEEPROM+1,c
 16350  00374A  0E44               	movlw	68
 16351  00374C  6E08               	movwf	?_readEEPROM,c
 16352  00374E  EC81  F01F         	call	_readEEPROM	;wreg free
 16353  003752  D045               	goto	L50
 16354  003754                     l8073:
 16355                           
 16356                           ; BSR set to: 0
 16357                           ;main.c: 911: else if ( (reg >= 2) && (reg < 10) ) {
 16358  003754  0E01               	movlw	1
 16359  003756  640C               	cpfsgt	vscp_readAppReg@reg,c
 16360  003758  D034               	goto	l8097
 16361                           
 16362                           ; BSR set to: 0
 16363  00375A  0E0A               	movlw	10
 16364  00375C  600C               	cpfslt	vscp_readAppReg@reg,c
 16365  00375E  D031               	goto	l8097
 16366  003760  D01E               	goto	l8095
 16367  003762                     l8079:
 16368                           
 16369                           ; BSR set to: 0
 16370                           ;main.c: 917: rv = LATBbits.LATB4;
 16371  003762  0E00               	movlw	0
 16372  003764  B88A               	btfsc	3978,4,c	;volatile
 16373  003766  0E01               	movlw	1
 16374  003768  D03A               	goto	L50
 16375  00376A                     l8081:
 16376                           
 16377                           ; BSR set to: 0
 16378                           ;main.c: 922: rv = LATBbits.LATB1;
 16379  00376A  0E00               	movlw	0
 16380  00376C  B28A               	btfsc	3978,1,c	;volatile
 16381  00376E  0E01               	movlw	1
 16382  003770  D036               	goto	L50
 16383  003772                     l8083:
 16384                           
 16385                           ; BSR set to: 0
 16386                           ;main.c: 927: rv = LATBbits.LATB0;
 16387  003772  0E00               	movlw	0
 16388  003774  B08A               	btfsc	3978,0,c	;volatile
 16389  003776  0E01               	movlw	1
 16390  003778  D032               	goto	L50
 16391  00377A                     l8085:
 16392                           
 16393                           ; BSR set to: 0
 16394                           ;main.c: 932: rv = LATCbits.LATC7;
 16395  00377A  0E00               	movlw	0
 16396  00377C  BE8B               	btfsc	3979,7,c	;volatile
 16397  00377E  0E01               	movlw	1
 16398  003780  D02E               	goto	L50
 16399  003782                     l8087:
 16400                           
 16401                           ; BSR set to: 0
 16402                           ;main.c: 937: rv = LATCbits.LATC6;
 16403  003782  0E00               	movlw	0
 16404  003784  BC8B               	btfsc	3979,6,c	;volatile
 16405  003786  0E01               	movlw	1
 16406  003788  D02A               	goto	L50
 16407  00378A                     l8089:
 16408                           
 16409                           ; BSR set to: 0
 16410                           ;main.c: 942: rv = LATCbits.LATC5;
 16411  00378A  0E00               	movlw	0
 16412  00378C  BA8B               	btfsc	3979,5,c	;volatile
 16413  00378E  0E01               	movlw	1
 16414  003790  D026               	goto	L50
 16415  003792                     l8091:
 16416                           
 16417                           ; BSR set to: 0
 16418                           ;main.c: 947: rv = LATCbits.LATC4;
 16419  003792  0E00               	movlw	0
 16420  003794  B88B               	btfsc	3979,4,c	;volatile
 16421  003796  0E01               	movlw	1
 16422  003798  D022               	goto	L50
 16423  00379A                     l290:
 16424                           
 16425                           ; BSR set to: 0
 16426                           ;main.c: 952: rv = 0;
 16427  00379A  6A0B               	clrf	vscp_readAppReg@rv,c
 16428                           
 16429                           ;main.c: 953: break;
 16430  00379C  D021               	goto	l8103
 16431  00379E                     l8095:
 16432                           
 16433                           ; BSR set to: 0
 16434  00379E  500C               	movf	vscp_readAppReg@reg,w,c
 16435                           
 16436                           ; Switch size 1, requested type "speed"
 16437                           ; Number of cases is 8, Range of values is 2 to 9
 16438                           ; switch strategies available:
 16439                           ; Name         Instructions Cycles
 16440                           ; simple_byte           25    13 (average)
 16441                           ;	Chosen strategy is simple_byte
 16442  0037A0  0A02               	xorlw	2	; case 2
 16443  0037A2  E0DF               	bz	l8079
 16444  0037A4  0A01               	xorlw	1	; case 3
 16445  0037A6  E0E1               	bz	l8081
 16446  0037A8  0A07               	xorlw	7	; case 4
 16447  0037AA  E0E3               	bz	l8083
 16448  0037AC  0A01               	xorlw	1	; case 5
 16449  0037AE  E0E5               	bz	l8085
 16450  0037B0  0A03               	xorlw	3	; case 6
 16451  0037B2  E0E7               	bz	l8087
 16452  0037B4  0A01               	xorlw	1	; case 7
 16453  0037B6  E0E9               	bz	l8089
 16454  0037B8  0A0F               	xorlw	15	; case 8
 16455  0037BA  E0EB               	bz	l8091
 16456  0037BC  0A01               	xorlw	1	; case 9
 16457  0037BE  E0ED               	bz	l290
 16458  0037C0  D00F               	goto	l8103
 16459  0037C2                     l8097:
 16460                           
 16461                           ; BSR set to: 0
 16462                           ;main.c: 957: else if ( ( reg >= 10 ) &&
 16463                           ;main.c: 958: (reg < (72 + 7 * 8 ) ) ) {
 16464  0037C2  0E09               	movlw	9
 16465  0037C4  640C               	cpfsgt	vscp_readAppReg@reg,c
 16466  0037C6  D00C               	goto	l8103
 16467                           
 16468                           ; BSR set to: 0
 16469  0037C8  0E80               	movlw	128
 16470  0037CA  600C               	cpfslt	vscp_readAppReg@reg,c
 16471  0037CC  D009               	goto	l8103
 16472                           
 16473                           ; BSR set to: 0
 16474                           ;main.c: 959: rv = readEEPROM( 0x43 + reg );
 16475  0037CE  0E43               	movlw	67
 16476  0037D0  240C               	addwf	vscp_readAppReg@reg,w,c
 16477  0037D2  6E08               	movwf	?_readEEPROM,c
 16478  0037D4  6A09               	clrf	?_readEEPROM+1,c
 16479  0037D6  0E00               	movlw	0
 16480  0037D8  2209               	addwfc	?_readEEPROM+1,f,c
 16481  0037DA  EC81  F01F         	call	_readEEPROM	;wreg free
 16482  0037DE                     L50:
 16483  0037DE  6E0B               	movwf	vscp_readAppReg@rv,c
 16484  0037E0                     l8103:
 16485                           
 16486                           ;main.c: 960: }
 16487                           ;main.c: 962: return rv;
 16488  0037E0  500B               	movf	vscp_readAppReg@rv,w,c
 16489  0037E2  0012               	return	
 16490  0037E4                     __end_of_vscp_readAppReg:
 16491                           	opt stack 0
 16492                           tblptru	equ	0xFF8
 16493                           tblptrh	equ	0xFF7
 16494                           tblptrl	equ	0xFF6
 16495                           tablat	equ	0xFF5
 16496                           prodh	equ	0xFF4
 16497                           prodl	equ	0xFF3
 16498                           intcon	equ	0xFF2
 16499                           postinc0	equ	0xFEE
 16500                           wreg	equ	0xFE8
 16501                           indf1	equ	0xFE7
 16502                           fsr1h	equ	0xFE2
 16503                           fsr1l	equ	0xFE1
 16504                           indf2	equ	0xFDF
 16505                           postinc2	equ	0xFDE
 16506                           postdec2	equ	0xFDD
 16507                           plusw2	equ	0xFDB
 16508                           fsr2h	equ	0xFDA
 16509                           fsr2l	equ	0xFD9
 16510                           status	equ	0xFD8
 16511                           
 16512 ;; *************** function _readEEPROM *****************
 16513 ;; Defined at:
 16514 ;;		line 92 in file "../../vscp_firmware/pic/common/eeprom.c"
 16515 ;; Parameters:    Size  Location     Type
 16516 ;;  address         2    7[COMRAM] unsigned short 
 16517 ;; Auto vars:     Size  Location     Type
 16518 ;;  data            1    9[COMRAM] unsigned char 
 16519 ;; Return value:  Size  Location     Type
 16520 ;;                  1    wreg      unsigned char 
 16521 ;; Registers used:
 16522 ;;		wreg, status,2
 16523 ;; Tracked objects:
 16524 ;;		On entry : 0/0
 16525 ;;		On exit  : 0/0
 16526 ;;		Unchanged: 0/0
 16527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16528 ;;      Params:         2       0       0       0       0       0       0
 16529 ;;      Locals:         1       0       0       0       0       0       0
 16530 ;;      Temps:          0       0       0       0       0       0       0
 16531 ;;      Totals:         3       0       0       0       0       0       0
 16532 ;;Total ram usage:        3 bytes
 16533 ;; Hardware stack levels used:    1
 16534 ;; Hardware stack levels required when called:    2
 16535 ;; This function calls:
 16536 ;;		Nothing
 16537 ;; This function is called by:
 16538 ;;		_init_app_ram
 16539 ;;		_doApplicationOneSecondWork
 16540 ;;		_vscp_readNicknamePermanent
 16541 ;;		_vscp_getZone
 16542 ;;		_vscp_getSubzone
 16543 ;;		_vscp_readAppReg
 16544 ;;		_vscp_writeAppReg
 16545 ;;		_SendInformationEvent
 16546 ;;		_doDM
 16547 ;;		_doActionOn
 16548 ;;		_doActionOff
 16549 ;;		_doActionPulse
 16550 ;;		_doActionStatus
 16551 ;;		_doActionDisable
 16552 ;;		_doActionToggle
 16553 ;;		_vscp_getGUID
 16554 ;;		_vscp_getUserID
 16555 ;;		_vscp_getManufacturerId
 16556 ;;		_vscp_getSegmentCRC
 16557 ;;		_calculateSetFilterMask
 16558 ;; This function uses a non-reentrant model
 16559 ;;
 16560                           
 16561                           	psect	text75
 16562  003F02                     __ptext75:
 16563                           	opt stack 0
 16564  003F02                     _readEEPROM:
 16565                           	opt stack 25
 16566                           
 16567                           ;eeprom.c: 93: uint8_t data;
 16568                           ;eeprom.c: 98: EEADR = address & 0xff;
 16569                           
 16570                           ;incstack = 0
 16571                           ;incstack = 0
 16572  003F02  C008  FFA9         	movff	readEEPROM@address,4009	;volatile
 16573                           
 16574                           ;eeprom.c: 99: EECON1bits.EEPGD= 0;
 16575  003F06  9EA6               	bcf	4006,7,c	;volatile
 16576                           
 16577                           ;eeprom.c: 100: EECON1bits.CFGS = 0;
 16578  003F08  9CA6               	bcf	4006,6,c	;volatile
 16579                           
 16580                           ;eeprom.c: 101: EECON1bits.RD = 1;
 16581  003F0A  80A6               	bsf	4006,0,c	;volatile
 16582                           
 16583                           ;eeprom.c: 102: data = EEDATA;
 16584  003F0C  CFA8 F00A          	movff	4008,readEEPROM@data	;volatile
 16585                           
 16586                           ;eeprom.c: 104: return data;
 16587  003F10  500A               	movf	readEEPROM@data,w,c
 16588  003F12  0012               	return	
 16589  003F14                     __end_of_readEEPROM:
 16590                           	opt stack 0
 16591                           tblptru	equ	0xFF8
 16592                           tblptrh	equ	0xFF7
 16593                           tblptrl	equ	0xFF6
 16594                           tablat	equ	0xFF5
 16595                           prodh	equ	0xFF4
 16596                           prodl	equ	0xFF3
 16597                           intcon	equ	0xFF2
 16598                           postinc0	equ	0xFEE
 16599                           wreg	equ	0xFE8
 16600                           indf1	equ	0xFE7
 16601                           fsr1h	equ	0xFE2
 16602                           fsr1l	equ	0xFE1
 16603                           indf2	equ	0xFDF
 16604                           postinc2	equ	0xFDE
 16605                           postdec2	equ	0xFDD
 16606                           plusw2	equ	0xFDB
 16607                           fsr2h	equ	0xFDA
 16608                           fsr2l	equ	0xFD9
 16609                           status	equ	0xFD8
 16610                           
 16611 ;; *************** function _interrupt_at_low_vector *****************
 16612 ;; Defined at:
 16613 ;;		line 134 in file "../main.c"
 16614 ;; Parameters:    Size  Location     Type
 16615 ;;		None
 16616 ;; Auto vars:     Size  Location     Type
 16617 ;;		None
 16618 ;; Return value:  Size  Location     Type
 16619 ;;		None               void
 16620 ;; Registers used:
 16621 ;;		wreg, status,2, status,0, cstack
 16622 ;; Tracked objects:
 16623 ;;		On entry : 0/0
 16624 ;;		On exit  : 0/0
 16625 ;;		Unchanged: 0/0
 16626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16627 ;;      Params:         0       0       0       0       0       0       0
 16628 ;;      Locals:         0       0       0       0       0       0       0
 16629 ;;      Temps:          3       0       0       0       0       0       0
 16630 ;;      Totals:         3       0       0       0       0       0       0
 16631 ;;Total ram usage:        3 bytes
 16632 ;; Hardware stack levels used:    1
 16633 ;; Hardware stack levels required when called:    1
 16634 ;; This function calls:
 16635 ;;		i1_WriteTimer0
 16636 ;; This function is called by:
 16637 ;;		Interrupt level 1
 16638 ;; This function uses a non-reentrant model
 16639 ;;
 16640                           
 16641                           	psect	intcodelo
 16642  000018                     __pintcodelo:
 16643                           	opt stack 0
 16644  000018                     _interrupt_at_low_vector:
 16645                           	opt stack 20
 16646                           
 16647                           ;incstack = 0
 16648  000018  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 16649  00001C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 16650  000020  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 16651  000024                     
 16652                           ;main.c: 136: if ( INTCONbits.TMR0IF ) {
 16653  000024  A4F2               	btfss	intcon,2,c	;volatile
 16654  000026  D001               	goto	i1u778_21
 16655  000028  D001               	goto	i1u778_20
 16656  00002A                     i1u778_21:
 16657  00002A  D03E               	goto	i1l145
 16658  00002C                     i1u778_20:
 16659  00002C                     
 16660                           ;main.c: 139: WriteTimer0(0xfb1d);
 16661  00002C  0EFB               	movlw	251
 16662  00002E  6E02               	movwf	?i1_WriteTimer0+1,c
 16663  000030  0E1D               	movlw	29
 16664  000032  6E01               	movwf	?i1_WriteTimer0,c
 16665  000034  EC8A  F01F         	call	i1_WriteTimer0	;wreg free
 16666  000038                     
 16667                           ;main.c: 141: vscp_timer++;
 16668  000038  0100               	movlb	0	; () banked
 16669  00003A  4B86               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 16670  00003C  2B87               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 16671  00003E                     
 16672                           ; BSR set to: 0
 16673                           ;main.c: 142: vscp_configtimer++;
 16674  00003E  4B84               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 16675  000040  2B85               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 16676  000042                     
 16677                           ; BSR set to: 0
 16678                           ;main.c: 143: measurement_clock++;
 16679  000042  0E01               	movlw	1
 16680  000044  2780               	addwf	_measurement_clock& (0+255),f,b	;volatile
 16681  000046  0E00               	movlw	0
 16682  000048  2381               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 16683  00004A  0E00               	movlw	0
 16684  00004C  2382               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 16685  00004E  0E00               	movlw	0
 16686  000050  2383               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 16687  000052                     
 16688                           ; BSR set to: 0
 16689                           ;main.c: 146: if ( PORTCbits.RC0 ) {
 16690  000052  A082               	btfss	3970,0,c	;volatile
 16691  000054  D001               	goto	i1u779_21
 16692  000056  D001               	goto	i1u779_20
 16693  000058                     i1u779_21:
 16694  000058  D002               	goto	i1l7097
 16695  00005A                     i1u779_20:
 16696  00005A                     
 16697                           ; BSR set to: 0
 16698                           ;main.c: 147: vscp_initbtncnt = 0;
 16699  00005A  6B94               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 16700                           
 16701                           ;main.c: 148: } else {
 16702  00005C  D001               	goto	i1l137
 16703  00005E                     i1l7097:
 16704                           
 16705                           ; BSR set to: 0
 16706                           ;main.c: 150: vscp_initbtncnt++;
 16707  00005E  2B94               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 16708  000060                     i1l137:
 16709                           
 16710                           ; BSR set to: 0
 16711                           ;main.c: 151: }
 16712                           ;main.c: 154: vscp_statuscnt++;
 16713  000060  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 16714  000062                     
 16715                           ; BSR set to: 0
 16716                           ;main.c: 155: if ( ( 0x02 == vscp_initledfunc ) &&
 16717                           ;main.c: 156: ( vscp_statuscnt > 100 ) ) {
 16718  000062  5056               	movf	_vscp_initledfunc,w,c
 16719  000064  0A02               	xorlw	2
 16720  000066  A4D8               	btfss	status,2,c
 16721  000068  D001               	goto	i1u780_21
 16722  00006A  D001               	goto	i1u780_20
 16723  00006C                     i1u780_21:
 16724  00006C  D00E               	goto	i1l7107
 16725  00006E                     i1u780_20:
 16726  00006E                     
 16727                           ; BSR set to: 0
 16728  00006E  0E64               	movlw	100
 16729  000070  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 16730  000072  D001               	goto	i1u781_21
 16731  000074  D001               	goto	i1u781_20
 16732  000076                     i1u781_21:
 16733  000076  D009               	goto	i1l7107
 16734  000078                     i1u781_20:
 16735  000078                     
 16736                           ; BSR set to: 0
 16737                           ;main.c: 158: if ( PORTCbits.RC1 ) {
 16738  000078  A282               	btfss	3970,1,c	;volatile
 16739  00007A  D001               	goto	i1u782_21
 16740  00007C  D001               	goto	i1u782_20
 16741  00007E                     i1u782_21:
 16742  00007E  D002               	goto	i1l139
 16743  000080                     i1u782_20:
 16744  000080                     
 16745                           ; BSR set to: 0
 16746                           ;main.c: 159: PORTCbits.RC1 = 0;
 16747  000080  9282               	bcf	3970,1,c	;volatile
 16748                           
 16749                           ;main.c: 160: }
 16750  000082  D001               	goto	i1l140
 16751  000084                     i1l139:
 16752                           
 16753                           ; BSR set to: 0
 16754                           ;main.c: 161: else {
 16755                           ;main.c: 162: PORTCbits.RC1 = 1;
 16756  000084  8282               	bsf	3970,1,c	;volatile
 16757  000086                     i1l140:
 16758                           
 16759                           ; BSR set to: 0
 16760                           ;main.c: 163: }
 16761                           ;main.c: 165: vscp_statuscnt = 0;
 16762  000086  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16763                           
 16764                           ;main.c: 167: }
 16765  000088  D00E               	goto	i1l141
 16766  00008A                     i1l7107:
 16767                           
 16768                           ; BSR set to: 0
 16769                           ;main.c: 168: else if (0x01 == vscp_initledfunc) {
 16770  00008A  0456               	decf	_vscp_initledfunc,w,c
 16771  00008C  A4D8               	btfss	status,2,c
 16772  00008E  D001               	goto	i1u783_21
 16773  000090  D001               	goto	i1u783_20
 16774  000092                     i1u783_21:
 16775  000092  D003               	goto	i1l142
 16776  000094                     i1u783_20:
 16777  000094                     
 16778                           ; BSR set to: 0
 16779                           ;main.c: 169: PORTCbits.RC1 = 1;
 16780  000094  8282               	bsf	3970,1,c	;volatile
 16781                           
 16782                           ;main.c: 170: vscp_statuscnt = 0;
 16783  000096  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16784                           
 16785                           ;main.c: 171: }
 16786  000098  D006               	goto	i1l141
 16787  00009A                     i1l142:
 16788                           
 16789                           ; BSR set to: 0
 16790                           ;main.c: 172: else if (0x00 == vscp_initledfunc) {
 16791  00009A  6656               	tstfsz	_vscp_initledfunc,c
 16792  00009C  D001               	goto	i1u784_21
 16793  00009E  D001               	goto	i1u784_20
 16794  0000A0                     i1u784_21:
 16795  0000A0  D002               	goto	i1l141
 16796  0000A2                     i1u784_20:
 16797  0000A2                     
 16798                           ; BSR set to: 0
 16799                           ;main.c: 173: PORTCbits.RC1 = 0;
 16800  0000A2  9282               	bcf	3970,1,c	;volatile
 16801                           
 16802                           ;main.c: 174: vscp_statuscnt = 0;
 16803  0000A4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16804  0000A6                     i1l141:
 16805                           
 16806                           ; BSR set to: 0
 16807                           ;main.c: 175: }
 16808                           ;main.c: 177: INTCONbits.TMR0IF = 0;
 16809  0000A6  94F2               	bcf	intcon,2,c	;volatile
 16810  0000A8                     i1l145:
 16811  0000A8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 16812  0000AC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 16813  0000B0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 16814  0000B4  0010               	retfie	
 16815  0000B6                     __end_of_interrupt_at_low_vector:
 16816                           	opt stack 0
 16817                           tblptru	equ	0xFF8
 16818                           tblptrh	equ	0xFF7
 16819                           tblptrl	equ	0xFF6
 16820                           tablat	equ	0xFF5
 16821                           prodh	equ	0xFF4
 16822                           prodl	equ	0xFF3
 16823                           intcon	equ	0xFF2
 16824                           postinc0	equ	0xFEE
 16825                           wreg	equ	0xFE8
 16826                           indf1	equ	0xFE7
 16827                           fsr1h	equ	0xFE2
 16828                           fsr1l	equ	0xFE1
 16829                           bsr	equ	0xFE0
 16830                           indf2	equ	0xFDF
 16831                           postinc2	equ	0xFDE
 16832                           postdec2	equ	0xFDD
 16833                           plusw2	equ	0xFDB
 16834                           fsr2h	equ	0xFDA
 16835                           fsr2l	equ	0xFD9
 16836                           status	equ	0xFD8
 16837                           
 16838 ;; *************** function i1_WriteTimer0 *****************
 16839 ;; Defined at:
 16840 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16841 ;; Parameters:    Size  Location     Type
 16842 ;;  timer0          2    0[COMRAM] unsigned int 
 16843 ;; Auto vars:     Size  Location     Type
 16844 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 16845 ;; Return value:  Size  Location     Type
 16846 ;;		None               void
 16847 ;; Registers used:
 16848 ;;		None
 16849 ;; Tracked objects:
 16850 ;;		On entry : 0/0
 16851 ;;		On exit  : 0/0
 16852 ;;		Unchanged: 0/0
 16853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16854 ;;      Params:         2       0       0       0       0       0       0
 16855 ;;      Locals:         2       0       0       0       0       0       0
 16856 ;;      Temps:          0       0       0       0       0       0       0
 16857 ;;      Totals:         4       0       0       0       0       0       0
 16858 ;;Total ram usage:        4 bytes
 16859 ;; Hardware stack levels used:    1
 16860 ;; This function calls:
 16861 ;;		Nothing
 16862 ;; This function is called by:
 16863 ;;		_interrupt_at_low_vector
 16864 ;; This function uses a non-reentrant model
 16865 ;;
 16866                           
 16867                           	psect	text77
 16868  003F14                     __ptext77:
 16869                           	opt stack 0
 16870  003F14                     i1_WriteTimer0:
 16871                           	opt stack 20
 16872                           
 16873                           ;incstack = 0
 16874                           ;incstack = 0
 16875  003F14  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 16876  003F18  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 16877  003F1C  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 16878  003F20  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 16879  003F24  0012               	return	
 16880  003F26                     __end_ofi1_WriteTimer0:
 16881                           	opt stack 0
 16882                           tblptru	equ	0xFF8
 16883                           tblptrh	equ	0xFF7
 16884                           tblptrl	equ	0xFF6
 16885                           tablat	equ	0xFF5
 16886                           prodh	equ	0xFF4
 16887                           prodl	equ	0xFF3
 16888                           intcon	equ	0xFF2
 16889                           postinc0	equ	0xFEE
 16890                           wreg	equ	0xFE8
 16891                           indf1	equ	0xFE7
 16892                           fsr1h	equ	0xFE2
 16893                           fsr1l	equ	0xFE1
 16894                           bsr	equ	0xFE0
 16895                           indf2	equ	0xFDF
 16896                           postinc2	equ	0xFDE
 16897                           postdec2	equ	0xFDD
 16898                           plusw2	equ	0xFDB
 16899                           fsr2h	equ	0xFDA
 16900                           fsr2l	equ	0xFD9
 16901                           status	equ	0xFD8
 16902                           tblptru	equ	0xFF8
 16903                           tblptrh	equ	0xFF7
 16904                           tblptrl	equ	0xFF6
 16905                           tablat	equ	0xFF5
 16906                           prodh	equ	0xFF4
 16907                           prodl	equ	0xFF3
 16908                           intcon	equ	0xFF2
 16909                           postinc0	equ	0xFEE
 16910                           wreg	equ	0xFE8
 16911                           indf1	equ	0xFE7
 16912                           fsr1h	equ	0xFE2
 16913                           fsr1l	equ	0xFE1
 16914                           bsr	equ	0xFE0
 16915                           indf2	equ	0xFDF
 16916                           postinc2	equ	0xFDE
 16917                           postdec2	equ	0xFDD
 16918                           plusw2	equ	0xFDB
 16919                           fsr2h	equ	0xFDA
 16920                           fsr2l	equ	0xFD9
 16921                           status	equ	0xFD8
 16922                           
 16923                           	psect	rparam
 16924  0000                     tblptru	equ	0xFF8
 16925                           tblptrh	equ	0xFF7
 16926                           tblptrl	equ	0xFF6
 16927                           tablat	equ	0xFF5
 16928                           prodh	equ	0xFF4
 16929                           prodl	equ	0xFF3
 16930                           intcon	equ	0xFF2
 16931                           postinc0	equ	0xFEE
 16932                           wreg	equ	0xFE8
 16933                           indf1	equ	0xFE7
 16934                           fsr1h	equ	0xFE2
 16935                           fsr1l	equ	0xFE1
 16936                           bsr	equ	0xFE0
 16937                           indf2	equ	0xFDF
 16938                           postinc2	equ	0xFDE
 16939                           postdec2	equ	0xFDD
 16940                           plusw2	equ	0xFDB
 16941                           fsr2h	equ	0xFDA
 16942                           fsr2l	equ	0xFD9
 16943                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         93
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     59     146
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionDisable->_writeEEPROM
    _doActionDisable->_readEEPROM
    _doActionStatus->_SendInformationEvent
    _doActionPulse->_readEEPROM
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeAppReg
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_SendInformationEvent
    _calculateSetFilterMask->__CANIDToRegs
    _SendInformationEvent->_sendVSCPFrame
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_readEEPROM
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   70359
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           6     6      0    7490
                                             27 BANK0      6     6      0
                         _readEEPROM
                        _doActionOff
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2438
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                17    17      0   15663
                                             28 BANK0     17    17      0
                         _readEEPROM
                        _doActionOff
                         _doActionOn
                      _doActionPulse
                     _doActionStatus
                    _doActionDisable
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       7     6      1    3454
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionDisable                                      6     5      1     397
                                             10 COMRAM     6     5      1
                        _writeEEPROM
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _doActionStatus                                       7     6      1    3412
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulse                                        7     6      1     353
                                             10 COMRAM     7     6      1
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           7     6      1    3196
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          6     5      1    3196
                                             80 COMRAM     1     0      1
                                             22 BANK0      5     5      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            27    27      0   34505
                                             32 BANK0     27    27      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   11628
                                             30 BANK0      2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                    18    17      1    2519
                                             14 COMRAM    18    17      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     722
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     180
                                             10 COMRAM     4     4      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     9     8      1    8899
                                             80 COMRAM     1     0      1
                                             22 BANK0      8     8      0
                        _writeEEPROM
                         _readEEPROM
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (4) _calculateSetFilterMask                              50    50      0    1879
                                             17 COMRAM    50    50      0
                         _readEEPROM
               _ECANSetOperationMode
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _SendInformationEvent                                 8     6      2    2567
                                             74 COMRAM     6     6      0
                                             20 BANK0      2     0      2
                         _readEEPROM
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1550
                                             13 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                      2     2      0    1077
                                             11 COMRAM     2     2      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     227
                                             11 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     132
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     197
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4624
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     263
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _writeEEPROM                                          3     0      3      44
                                              7 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     700
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (5) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         3     3      0     542
                                             10 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     380
                                             10 COMRAM     2     2      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _init_app_ram
     _readEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _readEEPROM
       _calculateSetFilterMask (ARG)
         _readEEPROM
         _ECANSetOperationMode
         __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _SendInformationEvent
           _readEEPROM
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _readEEPROM
         _calculateSetFilterMask (ARG)
           _readEEPROM
           _ECANSetOperationMode
           __CANIDToRegs
       _vscp_writeStdReg
         _vscp_setGUID
           _writeEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_getGUID
           _readEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
             _readEEPROM
     _vscp_writeStdReg
       _vscp_setGUID
         _writeEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_getGUID
         _readEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
           _readEEPROM
     ___lbmod
   _doDM
     _readEEPROM
     _doActionOff
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulse
       _readEEPROM
     _doActionStatus
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionDisable
       _writeEEPROM
       _readEEPROM
     _doActionToggle
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _readEEPROM
     _doActionOff
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _SendInformationEvent
       _readEEPROM
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     3B      92       4       91.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EA      15        0.0%
DATA                 0      0      F6      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sun Mar 22 23:10:44 2015

                      doActionToggle@val 00CF                  __end_of_vscp_readAppReg 37E4  
                  __end_of_sendVSCPFrame 372E                              __CFG_CPB$ON 000000  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000B  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 3424  
                  doActionToggle@dmflags 00CE                              __CFG_LVP$ON 000000  
                            __CFG_WDT$ON 000000                                      l211 223E  
                                    l220 2262                                      l212 2246  
                                    l204 2222                                      l221 226A  
                                    l205 222A                                      l310 0748  
                                    l214 224A                                      l223 226E  
                                    l215 2252                                      l320 0812  
                                    l304 06EE                                      l224 2278  
                                    l208 2232                                      l217 2256  
                                    l209 223A                                      l330 08DA  
                                    l226 236E                                      l218 225E  
                                    l234 23D6                                      l162 349A  
                                    l315 07AE                                      l251 3D84  
                                    l411 20E4                                      l325 0876  
                                    l149 343C                                      l158 3480  
                                    l335 093E                                      l247 3DA6  
                                    l415 1E3E                                      l185 1D86  
                                    l441 2614                                      l290 379A  
                                    l450 2570                                      l442 2470  
                                    l514 3312                                      l452 25B0  
                                    l444 24B0                                      l540 3060  
                                    l622 3E64                                      l470 3560  
                                    l446 24F0                                      l550 3088  
                                    l471 3564                                      l439 2430  
                                    l543 3068                                      l472 3568  
                                    l448 2530                                      l552 308C  
                                    l544 3070                                      l473 356C  
                                    l561 30F8                                      l553 3094  
                                    l474 3570                                      l490 28D6  
                                    l546 3074                                      l395 0FA4  
                                    l467 3558                                      l491 2906  
                                    l555 3098                                      l547 307C  
                                    l539 3058                                      l468 3590  
                                    l492 2936                                      l556 30A0  
                                    l653 3B0A                                      l469 355C  
                                    l493 2966                                      l549 3080  
                                    l494 2996                                      l558 30A4  
                                    l647 38F0                                      l495 29C6  
                                    l559 30AE                                      l912 2EB4  
                                    l488 28A6                                      l658 3BE8  
                                    l907 3004                        doActionStatus@bOn 00CF  
                                    l917 395E                                      l853 2D50  
                                    l845 2CB4                       vscp_readStdReg@reg 000D  
                                    l871 26D6                                      l847 2CD2  
                                    l881 2732                                      l873 26EA  
                                    l865 284E                                      l890 27DA  
                                    l858 267A                                      l875 26FE  
                                    l868 2748                                      l877 2712  
                                    l869 26C8                                      l879 2722  
                                    l889 27B6           __size_of_vscp_handleProbeState 00BA  
                      doActionStatus@arg 0051                           getVSCPFrame@id 0028  
                      doActionStatus@val 00D0            __end_of_vscp_handleProbeState 3678  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                 _calculateSetFilterMask 15EC                                      wreg 000FE8  
            ?_doApplicationOneSecondWork 0001                                     l1032 3AA0  
                                   l1104 3A8C                                     l1108 3E1C  
                                   l1212 1196                                     l1037 3D1E  
                   __size_of_doActionOff 00BA                                     l1055 3662  
                                   l1047 3674                                     l1056 3642  
                                   l1048 3600                                     l1080 3B4E  
                                   l1314 3DFE                                     l1090 3BB0  
                                   l1315 3E00                                     l1091 3BBC  
                                   l1084 3CFA                                     l1148 3D62  
                                   l1236 1326                                     l1237 133A  
                                   l1238 137C                                     l1095 3C12  
                                   l1247 13B8                                     l1271 15EA  
                                   l1178 2BE2                                     l1295 3CCE  
                                   l1279 3C3C                                     l4701 1D88  
                                   l6501 3BC6                                     l8103 37E0  
              vscp_getManufacturerId@idx 000B                                     l6505 3BCA  
                                   l9011 335C                                     l5635 3D70  
                                   l7075 3C5E                                     l7067 3C48  
                                   l7261 3D0A                                     l6613 2668  
                                   l7333 35DE                                     l6453 3DB4  
                                   l5629 3D92                                     l6623 2692  
                                   l6631 26B2                                     l7335 35E4  
                                   l7319 35C0                                     l9031 3394  
                                   l9023 337C                                     l9015 3366  
                                   l9007 3352                                     l9103 2A6A  
                                   l8081 376A                                     l8073 3754  
                                   l7273 313A                                     l7353 361A  
                                   l9041 33BA                                     l9121 2ABE  
                                   l8091 3792                                     l8083 3772  
                                   l7283 3164                                     l6731 2838  
                                   l9035 33A4                                     l9027 3388  
                                   l9019 3370                                     l9211 3438  
                                   l8085 377A                                     l8069 3744  
                                   l7293 322A                                     l6805 2DE6  
                                   l6717 2808                                     l6725 2822  
                                   l6709 27DC                                     l6629 26A8  
                                   l6637 26B6                                     l7357 361E  
                                   l9061 33F4                                     l9053 33DC  
                                   l9045 33C6                                     l9133 2AF2  
                                   l9117 2AA4                                     l9109 2A86  
                                   l9221 345E                                     l8087 3782  
                                   l8079 3762                                     l8095 379E  
                                   l6743 3E72                                     l7359 3622  
                                   l9071 3416                                     l8511 1936  
                                   l9143 2B54                                     l9119 2AA8  
                                   l9231 3474                                     l8089 378A  
                                   l8097 37C2                                     l7289 31D4  
                                   l6681 275C                                     l6489 3894  
                                   l9065 3400                                     l9057 33E8  
                                   l9049 33D2                                     l9073 3420  
                                   l8521 19FC                                     l9161 2BCA  
                                   l9153 2BB4                                     l9241 3494  
                                   l9233 347A                                     l9225 3466  
                                   l6691 277C                                     l8515 19CA  
                                   l9171 2BE4                                     l9403 1162  
                                   l9323 1038                                     l9307 102A  
                                   l6781 391E                                     l6773 38F8  
                                   l7389 3666                                     l8517 19D2  
                                   l9421 11C8                                     l9309 1030  
                                   l7901 3A74                                     l9229 3470  
                                   l9245 349E                                     l6783 3928  
                                   l6775 3900                                     l6791 3940  
                                   l9431 1226                                     l9415 119A  
                                   l9343 105E                                     l8623 288E  
                                   l8615 2856                                     l9271 34F6  
                                   l9247 34B6                                     l6785 392E  
                                   l6777 390A                                     l9097 2A4A  
                                   l9513 131A                                     l9425 11E0  
                                   l9417 11B8                                     l9281 0FDA  
                                   l6787 3934                                     l6779 3914  
                                   l9435 123C                                     l9451 126C  
                                   l9283 0FE0                                     l9275 34FE  
                                   l9259 34E2                                     l8901 2D42  
                                   l8493 188A                                     l8485 1878  
                                   l8477 15FE                                     l9621 1430  
                                   l9541 1360                                     l9533 1342  
                                   l9453 126E                                     l9373 10C6  
                                   l9357 106A                                     l9285 0FE6  
                                   l8661 2A16                                     l8733 39A2  
                                   l8725 396E                                     l9463 1292  
                                   l9455 1278                                     l9383 10FA  
                                   l9287 0FEC                                     l8735 39CA  
                                   l8905 2D46                                     l8833 3B06  
                                   l8497 1918                                     l9641 1484  
                                   l9617 142C                                     l9609 140A  
                                   l9545 1368                                     l9481 12DA  
                                   l9393 112E                                     l9289 0FF2  
                                   l9801 222C                                     l8923 2F2C  
                                   l8907 2D48                                     l9563 1398  
                                   l8659 29F6                                     l7891 3A62  
                                   l8853 2C4E                                     l8829 3AD8  
                                   l9901 064E                                     l9645 149A  
                                   l9637 1464                                     l9549 1370  
                                   l9469 12BE                                     l9741 1F72  
                                   l9725 1E58                                     l9709 1DDA  
                                   l8847 2C3E                                     l9671 1528  
                                   l9559 137E                                     l9751 2020  
                                   l9831 2298                                     l8881 2CD4  
                                   l8865 2C78                                     l8961 3B46  
                                   l9913 0696                                     l9905 066E  
                                   l9649 14B2                                     l9585 13C0  
                                   l9497 12FA                                     l9753 205A  
                                   l9745 1FAC                                     l9737 1F38  
                                   l9761 20DA                                     l7897 3A6C  
                                   l8875 2CB8                                     l9931 06FE  
                                   l9667 1500                                     l9659 14D2  
                                   l9747 1FE6                                     l9843 235A  
                                   l9771 20F2                                     l9933 0704  
                                   l9925 06C0                                     l9693 1588  
                                   l9829 227C                                     l9853 2394  
                                   l8887 2D02                                     l8895 2D20  
                                   l9599 13E8                                     l9759 2094  
                                   l9839 2348                                     l9791 21CC  
                                   l9855 23D2                                     l9767 20EA  
                                   l9953 075A                                     l9945 072E  
                                   l9881 3574                                     l9873 353E  
                                   l9865 350A                                     l9849 2380  
                                   l8997 3E16                                     l9973 07BE  
                                   l9965 0782                                     l9885 35A2  
                                   l9789 218A                                     l9993 0822  
                                   l9985 07E6                                     l9889 35B4  
            __size_of_vscp_getMatrixInfo 0020                           sendCANFrame@id 0037  
                                   u7205 2D94                                     u7215 2DB4  
                                   u7225 2E02                                     u6710 38E4  
                                   u6715 38DA                           sendCANFrame@rv 003E  
                                   u6885 2670                                     u6887 2672  
                                   u9830 18AA                                     u9815 16E8  
                                   u9904 1984                                     u9840 18D2  
                                   u9905 1980                                     u7994 318A  
                                   u7995 3186                                     u9835 18A0  
                                   u9924 19A4                                     u9925 199E  
                                   u9845 18C8                                     u9864 18F2  
                                   u9865 18EC                                     u9955 36B4  
                                   u9894 196C                                     u9895 1968  
                       ??_ECANInitialize 0009                vscp_setManufacturerId@idx 000C  
                                   ___IT 000101                                     _doDM 1DCE  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 3424                                     _init 3B50  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 0622                              _vscp_minute 0095  
                            _vscp_second 009A                                     prodh 000FF4  
                                   prodl 000FF3                                     start 00B6  
                   doActionPulse@dmflags 000F            __size_of_vscp_doOneSecondWork 004E  
                      vscp_getUserID@idx 000B                    __size_of_vscp_setGUID 0022  
                       _vscp_writeStdReg 2A20                          _doActionDisable 3968  
                            _writeEEPROM 3CB2                ECANReceiveMessage@dataLen 0010  
                  getVSCPFrame@pPriority 0020                     __end_of_getVSCPFrame 38F2  
            __size_of_vscp_getSegmentCRC 000A                         __RegsToCANID@val 000A  
                       __RegsToCANID@ptr 0008                     __size_of_getCANFrame 002C  
                                  l10101 0AD6                                    l10013 0886  
                                  l10005 084A                                    l10105 0ADC  
                                  l10033 08EA                                    l10025 08AE  
                                  l10211 0E90                                    l10115 0B3A  
                                  l10133 0BA4                                    l10045 0912  
                                  l10223 0F24                                    l10215 0EBC  
                                  l10143 0C02                                    l10119 0B40  
                                  l10063 0986                                    l10055 094E  
                                  l10311 2626                                    l10217 0EF0  
                                  l10129 0B9E                                    l10073 09E4  
                                  l10057 0978                                    l10233 0F5E  
                                  l10243 0F8E                                    l10171 0CCE  
                                  l10147 0C08                                    l10091 0A78  
                                  l10163 0C6C                                    l10307 25F0  
                                  l10315 2638                                    l10253 0FCC  
                                  l10181 0DAA                                    l10173 0CFA  
                                  l10157 0C66                                    l10077 09EA  
                                  l10165 0C96                                    l10341 32A4  
                                  l10333 3270                                    l10325 323C  
                                  l10421 30CE                                    l10183 0DD6  
                                  l10175 0D26                                    l10191 0E58  
                                  l10087 0A48                                    l10271 2416  
                                  l10263 23DE                                    l10343 32AE  
                                  l10335 3286                                    l10351 32CC  
                                  _B0CON 000E20                                    l10249 0FB8  
                                  l10185 0E02                                    l10177 0D52  
                                  l10345 32B8                                    l10337 3290  
                                  l10353 32E8                                    l10433 310A  
                                  l10179 0D7E                                    l10347 32C2  
                                  l10339 329A                                    l10427 30E4  
                                  l10419 30B2                                    l10189 0E2E  
                                  l10365 3324                                    l10437 311C  
                                  l10359 32FE                                    l10391 3062  
                                  _B1CON 000E30                                    l10449 3D58  
                                  l10369 3336                                    ?_doDM 0001  
                                  l10387 3042                                    l10379 300E  
                                  _B2CON 000E40                                    _B3CON 000E50  
                                  _B4CON 000E60            __size_of_SendInformationEvent 006C  
          __size_of_vscp_getMajorVersion 0002                                    _B5CON 000E70  
             __end_of_vscp_goActiveState 3DE6            ??_vscp_writeNicknamePermanent 000B  
                     writeEEPROM@address 0008                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                          i1_WriteTimer0 3F14                                    _EEADR 000FA9  
                        __end_of___lbmod 3C66                  _vscp_handleDropNickname 3B8E  
                                  _BSEL0 000DF8                                    u10124 2866  
                                  u10125 2862                                    u11120 2BAC  
                                  u11125 2BA2                                    u12024 2168  
                                  _T0CON 000FD5                                    u12025 2164  
                                  u11090 2B4A                                    u13004 324C  
                                  u10284 397E                                    u12044 21DC  
                                  u13005 3248                                    u10285 397A  
                                  u12045 21D8                                    u12214 351A  
                                  u11095 2B40                                    u12215 3516  
                                  u13104 301E                                    u10625 2EF0  
                                  u13105 301A                                    u10635 2F16  
                                  u10645 2F40                                    u12854 23EE  
                                  u12855 23EA                                    i1l140 0086  
                                  i1l141 00A6                                    i1l142 009A  
                                  i1l137 0060                                    i1l145 00A8  
                                  i1l139 0084                          sendCANFrame@dlc 003B  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 3F58               _vscp_readNicknamePermanent 3F4E  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                             _vscp_getGUID 3EA6  
                                  doDM@i 00E2                            __CFG_WRTD$OFF 000000  
                         __CFG_EBTRB$OFF 000000                             _vscp_getZone 3F30  
                     vscp_writeAppReg@rv 00D2                                    _hours 008D  
              _vscp_getRegisterPagesUsed 3F70                   __size_of_vscp_getEvent 002A  
                           _vscp_setGUID 3D86                                    tablat 000FF5  
                _vscp_getSubMinorVersion 3F76                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 3C8C  
                   _ECANSetOperationMode 3E66                          __initialization 3D20  
                           __end_of_doDM 20E6                             __end_of_main 3504  
                           __end_of_init 3B8E                         ?_vscp_readAppReg 0001  
                _interrupt_at_low_vector 0018                           doDM@class_mask 00D7  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00D2  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 000F                                   ??_main 0052  
                                 ??_init 000E            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 000B                 ??_vscp_setManufacturerId 000C  
               _vscp_handleProtocolEvent 0FD0                            __activetblptr 000002  
                      __RegsToCANID@type 000B               ECANReceiveMessage@msgFlags 0011  
          doApplicationOneSecondWork@bOn 00D4                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                 __size_of_doActionPulse 01D0               ECANReceiveMessage@savedPtr 0012  
                                 _CANCON 000F6F                                   _EEDATA 000FA8  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                        __CFG_BBSIZ$2048 000000                            doDM@type_mask 00DA  
                     vscp_writeStdReg@rv 001F                            ?_init_app_ram 0001  
                                 _MDSEL0 007BBE                                   _MDSEL1 007BBF  
                                 i1l7101 006E                                   i1l7111 00A2  
                                 i1l7103 0078                                   i1l7105 0080  
                                 i1l7107 008A                                   i1l7109 0094  
                             _OpenTimer0 3DE6                                   i1l7091 0042  
                                 i1l7083 0024                                   i1l7093 0052  
                                 i1l7085 002C                                   i1l7095 005A  
                                 i1l7087 0038                                   i1l7097 005E  
                                 i1l7089 003E                                   i1l7099 0062  
                        _init_app_eeprom 1A58                                   _RXB0IF 007D20  
                                 _RXB1IF 007D21                  __end_of_doActionDisable 39D4  
                         __CFG_WDTPS$128 000000                                   _RXF1EN 006EA1  
                 ECANReceiveMessage@data 000F                   ECANReceiveMessage@mode 0016  
                 ECANReceiveMessage@temp 0017                        getVSCPFrame@pData 0022  
                      getVSCPFrame@pSize 0021                       _vscp_newNodeOnline 3BEA  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0011  
 vscp_handleProtocolEvent@page_save_1290 00DF                           getCANFrame@pid 001C  
                         __CFG_STVREN$ON 000000                                ??___lbmod 0009  
                          _vscp_getEvent 3C14                                   _doWork 3F6E  
                       OpenTimer0@config 0008                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 000C                      vscp_writeAppReg@bOn 00D1  
        calculateSetFilterMask@rowfilter 003E               calculateSetFilterMask@mask 0036  
                    vscp_writeAppReg@reg 00D3               __end_of_vscp_setSegmentCRC 3EDE  
                    vscp_writeAppReg@val 0051                                   clear_0 3D26  
                                 clear_1 3D32                            ?_sendCANFrame 0037  
           vscp_handleProtocolEvent@byte 00ED                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 0096                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 000B  
              ??_vscp_getSubMinorVersion 0008     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 000B                     ??_vscp_newNodeOnline 004C  
                        ___lbmod@divisor 0008                          doActionToggle@i 00D1  
                             __accesstop 0060                  __end_of__initialization 3D38  
                        ___lbmod@counter 000A            __size_of_vscp_getMinorVersion 0002  
                        doActionStatus@i 00D1                          writeEEPROM@data 000A  
                  __size_of_getVSCPFrame 0078                       _vscp_writeRegister 3D42  
              ??_interrupt_at_low_vector 0005                  __size_of_vscp_sendEvent 0026  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                          _doActionPulse 2850              __end_of_vscp_check_pstorage 3D20  
                __size_of_vscp_setUserID 0018                          ??i1_WriteTimer0 0003  
                    ?_vscp_writeRegister 00D4                           ??_sendCANFrame 003E  
                             _doActionOn 23D8                  ?_calculateSetFilterMask 0001  
          calculateSetFilterMask@lastOID 0035               __end_of_vscp_getFamilyCode 3F4E  
                          ?__RegsToCANID 0008              __size_of_ECANReceiveMessage 020E  
                     sendVSCPFrame@pData 0045               __end_of_vscp_getFamilyType 3F44  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 00D4  
        __size_of_vscp_setManufacturerId 0022                 __end_of_vscp_writeAppReg 0FD0  
                 getVSCPFrame@pvscpclass 0027                  __end_of_init_app_eeprom 1DCE  
            __end_of_vscp_setControlByte 3ECC                 __end_of_vscp_writeStdReg 2BE8  
          calculateSetFilterMask@rowmask 0031                       __RegsToCANID@Value 000E  
                   ??_vscp_writeRegister 0052          __end_of_vscp_handleDropNickname 3BBE  
                           _getVSCPFrame 387A                               __pbssBANK0 0060  
                            ?_OpenTimer0 0001               __end_of_vscp_getBufferSize 3F74  
                       ?_doActionDisable 000B                    vscp_writeRegister@reg 00D5  
                 ??_ECANSetOperationMode 0008                             __IT_INT_MASK 0088  
                           __IT_SAVE_BSR 0089       __size_of_vscp_getRegisterPagesUsed 0002  
                           ?_writeEEPROM 0008                           ?_doActionPulse 000B  
        __end_of_vscp_getSubMinorVersion 3F78                 ECANSetOperationMode@mode 0008  
                                _B0RXFUL 007107                                  _B1RXFUL 007187  
                   __ECANRxFilterHitInfo 0054                                  _B2RXFUL 007207  
                                _B3RXFUL 007287                                  _B4RXFUL 007307  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 000B  
                                _B5RXFUL 007387           __end_of_calculateSetFilterMask 1A58  
                __size_of_doActionToggle 0120                         WriteTimer0@timer 000A  
                __size_of_doActionStatus 010C                                  _ECANCON 000F77  
                          ??_WriteTimer0 000A                           ??__RegsToCANID 000C  
                  sendVSCPFrame@priority 0043                                  _BRGCON1 000F70  
                                _BRGCON2 000F71                                  _BRGCON3 000F72  
         SendInformationEvent@eventClass 00CA                      vscp_writeStdReg@idx 001D  
                    vscp_writeStdReg@reg 0020             __end_of_vscp_doOneSecondWork 3A8E  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0041  
                          ??_doActionOff 00CC          __end_of_interrupt_at_low_vector 00B6  
                      sendCANFrame@pdata 003C                    _vscp_handleProbeState 35BE  
                                _RXB0CON 000F60                                  _RXB1CON 000F50  
                                _RXB0FUL 007B07                         __ECANPointBuffer 38F2  
             __end_of_vscp_getMatrixInfo 3DC8                                  _TXB0CON 000F40  
                                _TXB1CON 000F30                                  _TXB2CON 000F20  
                                _RXFCON0 000DD4                                  _RXFCON1 000DD5  
                  doActionStatus@dmflags 00CE                       _vscp_goActiveState 3DC8  
                 __size_of_sendVSCPFrame 00B6             __end_of_SendInformationEvent 3A40  
           __end_of_vscp_getMajorVersion 3F7C                       __size_of_vscp_init 0044  
                SendInformationEvent@idx 0050                vscp_writeStdReg@code_1270 0019  
                             _readEEPROM 3F02                   _vscp_getManufacturerId 3E7E  
                 _vscp_setManufacturerId 3D64                          _ECANSendMessage 2BE8  
                    ?_vscp_goActiveState 0001                                  __Hparam 0000  
                        ??_vscp_getEvent 002C                                  __Lparam 0000  
                     _vscp_node_substate 0098               __end_of_vscp_getSegmentCRC 3F62  
             ??_vscp_handleProtocolEvent 00D6                            ??_getCANFrame 001C  
                           doActionOff@i 00D0                 vscp_writeStdReg@idx_1271 001E  
      __end_of_vscp_getRegisterPagesUsed 3F72                 __size_of_vscp_getMDF_URL 0018  
                                ___lbmod 3C3E                          getCANFrame@pdlc 001A  
                vscp_writeAppReg@val_678 00D0                                _FIFOEMPTY 007BA7  
                        __size_of_doWork 0002                             __psmallconst 0600  
                   __end_of_init_app_ram 3234                       _vscp_sendHeartBeat 3C66  
                                __pcinit 3D20                           _vscp_deviceURL 0600  
                            ?_doActionOn 0051                                  __ramtop 0600  
                    __size_of_OpenTimer0 001E                                  __ptext0 3424  
                                __ptext1 3F6E                                  __ptext2 20E6  
                                __ptext3 3A40                                  __ptext4 3C66  
                                __ptext5 3F26                                  __ptext6 3F30  
                                __ptext7 3F6A                                  __ptext8 1DCE  
                                __ptext9 3006                           _vscp_getUserID 3E92  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 004C  
                       doActionDisable@i 0010                    vscp_writeStdReg@value 000F  
                    ?_vscp_sendHeartBeat 00CA                 ??_vscp_handleSetNickname 000C  
                                _minutes 008E                                  _seconds 0090  
                    __end_of_WriteTimer0 3F02                         ?_init_app_eeprom 0001  
                      vscp_readAppReg@rv 000B                       vscp_getMDF_URL@idx 0009  
          vscp_handleProtocolEvent@bytes 00E3                     end_of_initialization 3D38  
                    __end_of_doActionOff 35BE             __end_of_vscp_handleHeartbeat 3B50  
               __size_of_vscp_getSubzone 000A                            __Lmediumconst 0000  
                   __end_of_sendCANFrame 3B12                vscp_handleProtocolEvent@i 00EF  
              vscp_handleProtocolEvent@j 00F0                vscp_handleProtocolEvent@k 00EA  
                        ??_doActionPulse 000C                   doActionDisable@dmflags 000E  
                   ??_vscp_sendHeartBeat 004C                           _vscp_sendEvent 3C8C  
                      ECANSendMessage@id 0012                        ECANSendMessage@pb 001B  
                                postdec2 000FDD                  __size_of_ECANInitialize 0096  
                         _vscp_setUserID 3E1E                                  postinc0 000FEE  
                                postinc2 000FDE                   __end_of_vscp_deviceURL 0620  
    __end_of_vscp_writeNicknamePermanent 3EF0              _vscp_writeNicknamePermanent 3EDE  
                     __ECANPointBuffer@b 000B                            _sendVSCPFrame 3678  
                 __end_of_vscp_getUserID 3EA6             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0078CB                        __end_of_vscp_init 3AD2  
                         _vscp_probe_cnt 0099                                _PORTCbits 000F82  
                    __end_of_getCANFrame 3BEA            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                 __size_of_vscp_readAppReg 00B6  
                       ___lbmod@dividend 0009                         doActionPulse@arg 000B  
                         _vscp_statuscnt 0058                 __size_of_vscp_readStdReg 00E4  
                       doActionPulse@val 0010                       _vscp_setSegmentCRC 3ECC  
                      readEEPROM@address 0008               vscp_handleProtocolEvent@cb 00E8  
                __end_of_ECANSendMessage 2D52                        vscp_readStdReg@rv 000C  
                            ___lbmod@rem 000B                            ?__CANIDToRegs 0008  
                            doDM@dmflags 00E1                     __end_of__RegsToCANID 2EB6  
                            ?_readEEPROM 0008                      __size_of_doActionOn 026A  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 3CB2  
                             _vscp_error 3F6A                     _vscp_doOneSecondWork 3A40  
                     i1WriteTimer0@timer 0003                               _vscp_timer 0086  
                 __end_of_vscp_setUserID 3E36                   vscp_sendHeartBeat@zone 004C  
                         ?_sendVSCPFrame 003F              doApplicationOneSecondWork@i 00D6  
                         _doActionToggle 3006                     __size_of_writeEEPROM 0026  
                         _doActionStatus 3234                          ?_vscp_getUserID 0001  
                         __end_of_doWork 3F70             __end_of_vscp_getMinorVersion 3F7A  
                            _WriteTimer0 3EF0                     _SendInformationEvent 39D4  
                   _vscp_getMajorVersion 3F7A                     ??_vscp_setSegmentCRC 000B  
                      ??_vscp_getMDF_URL 0008            ??_vscp_getBootLoaderAlgorithm 0008  
                              ___DCDelay 00F1                        ?_vscp_writeAppReg 0051  
                    start_initialization 3D20                              _doActionOff 3504  
        __size_of_vscp_handleSetNickname 0024                       ??_vscp_writeAppReg 00CC  
                      ?_vscp_writeStdReg 000F                   _relay_protection_timer 0060  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 0008                       ??_vscp_writeStdReg 0010  
                     _vscp_getFamilyCode 3F44                           ??__CANIDToRegs 000F  
                     _vscp_getFamilyType 3F3A                         doDM@class_filter 00D5  
                    sendVSCPFrame@nodeid 0042                        _vscp_readRegister 3E04  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 00E7  
                  ?_vscp_doOneSecondWork 0001                    ECANReceiveMessage@ptr 0018  
                    ?_vscp_getFamilyCode 0008                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 15EC                          ?_vscp_setUserID 000B  
                              _doDM$2154 00DB                                _doDM$2155 00DC  
                              _doDM$2156 00DD                                _doDM$2157 00DE  
                              _doDM$2158 00DF                                _doDM$2159 00E0  
                    ?_vscp_getFamilyType 0008                    __size_of_init_app_ram 010E  
               ?_vscp_handleDropNickname 0001                   __end_of_doActionToggle 3126  
                      ??_vscp_getSubzone 000B                   __end_of_doActionStatus 3340  
               __end_of__ECANPointBuffer 3968                        __CANIDToRegs@type 000E  
                            _getCANFrame 3BBE                                 ??_doWork 0008  
                     _vscp_getBufferSize 3F72              vscp_handleProtocolEvent@len 00E4  
                         doActionOff@arg 0051              vscp_handleProtocolEvent@pos 00E2  
             __end_of_ECANReceiveMessage 2850                           doActionOff@val 00CF  
                    ??_vscp_readRegister 000E           __size_of_vscp_goBootloaderMode 0018  
                  ?_SendInformationEvent 00CA                    ?_vscp_getMajorVersion 0001  
                  __end_ofi1_WriteTimer0 3F26            __end_of_vscp_goBootloaderMode 3E66  
                   _vscp_handleHeartbeat 3B12                       __end_of_OpenTimer0 3E04  
    __size_of_doApplicationOneSecondWork 02F2                      ?_vscp_getBufferSize 0001  
                    __size_of_readEEPROM 0012                           doActionPulse@i 0011  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 000C  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0052  
                   ??_vscp_getFamilyType 000C                          __IT_SAVE_STATUS 008A  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 00B6  
                       _vscp_alarmstatus 0091                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 0040                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 000B                            ?_vscp_setGUID 000B  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0012  
                      ??_vscp_readAppReg 000B                        sendVSCPFrame@size 0044  
              __end_of_vscp_readRegister 3E1E                        _relay_pulse_flags 008F  
                           _init_app_ram 3126                        _relay_pulse_timer 0070  
           __size_of_vscp_setControlByte 0012                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 000C                     ??_vscp_getBufferSize 0008  
                              __pnvBANK0 00F1                            __IT_SAVE_WREG 008B  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 3DA8  
                 _vscp_handleSetNickname 3CD8            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 00B6                          ?_doActionToggle 0051  
                         _ECANInitialize 37E4                          ?_doActionStatus 0051  
               __size_of_doActionDisable 006C                                 ?___lbmod 0008  
                    ?_vscp_getMatrixInfo 0001                  calculateSetFilterMask@i 0043  
                calculateSetFilterMask@j 0042                          vscp_getGUID@idx 000B  
                            __pintcodelo 0018                             ??_doActionOn 00CC  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1280 00E6  
             vscp_setManufacturerId@data 000B                             _sendCANFrame 3AD2  
                            __smallconst 0600                        WriteTimer0@timer0 0008  
                     _vscp_getSegmentCRC 3F58                           ??_vscp_getGUID 000B  
                         ??_vscp_getZone 000B                              doActionOn@i 00D1  
         __end_of_vscp_getManufacturerId 3E92           __end_of_vscp_setManufacturerId 3D86  
                  __size_of__RegsToCANID 0164         vscp_handleProtocolEvent@pos_1279 00E5  
                        doDM@type_filter 00D9                           ??_vscp_setGUID 000C  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 0008  
                       _vscp_configtimer 0084                     vscp_writeStdReg@code 0015  
                     doActionDisable@arg 000B                       doActionDisable@val 000F  
        SendInformationEvent@eventTypeId 00CB                   ??_vscp_doOneSecondWork 004D  
                 sendVSCPFrame@vscpclass 003F                                 _LATBbits 000F8A  
                   _vscp_getMinorVersion 3F78                                 _LATCbits 000F8B  
                              _sendTimer 0055                       __end_of_doActionOn 2642  
                 __end_of_ECANInitialize 387A                                 _PIR2bits 000FA1  
                               i1u780_20 006E                                 i1u780_21 006C  
                               i1u781_20 0078                                 i1u781_21 0076  
                               i1u782_20 0080                                 i1u782_21 007E  
                               i1u783_20 0094                                 i1u783_21 0092  
                               i1u784_20 00A2                                 i1u784_21 00A0  
                               i1u778_20 002C                                 i1u778_21 002A  
                               i1u779_20 005A                                 i1u779_21 0058  
                       ECANSendMessage@i 0034                         ECANSendMessage@j 002F  
                  __end_of_vscp_getEvent 3C3E                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 002C  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 000B                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                   ??_SendInformationEvent 004B  
                               _RXM1SIDH 000F1C                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000F1D               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000B  
                   __end_of__CANIDToRegs 3006                             __RegsToCANID 2D52  
                     _vscp_probe_address 0057                       doActionOff@dmflags 00CE  
            __size_of_vscp_goActiveState 001E                      getVSCPFrame@pNodeId 001F  
                              _vscp_init 3A8E                                _vscp_imsg 009B  
                              _vscp_hour 0093                                _vscp_omsg 00A9  
                       vscp_setGUID@data 000B        __size_of_vscp_handleProtocolEvent 061C  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
               SendInformationEvent@data 004D     __size_of_vscp_writeNicknamePermanent 0012  
     __end_of_doApplicationOneSecondWork 23D8               _doApplicationOneSecondWork 20E6  
                       _vscp_page_select 0052               __size_of_vscp_readRegister 001A  
                               ___DCByte 008C                        _measurement_clock 0080  
                  ?_vscp_getMinorVersion 0001                             ??_readEEPROM 000A  
               __size_of_init_app_eeprom 0376             __end_of_vscp_restoreDefaults 3F6A  
                             _EECON1bits 000FA6                          ?_ECANInitialize 0001  
               ??_calculateSetFilterMask 0012                                 __Hrparam 0000  
                   ECANReceiveMessage@id 0014              __size_of_vscp_sendHeartBeat 0026  
                       ??_vscp_getUserID 000B                          _vscp_getMDF_URL 3E36  
                               __Lrparam 0000                    __end_of_doActionPulse 2A20  
                       __CANIDToRegs@val 000A                         __CANIDToRegs@ptr 0008  
                          doActionOn@arg 0051                            doActionOn@val 00D0  
                       _vscp_initledfunc 0056                         __size_of___lbmod 0028  
                 ??_vscp_handleHeartbeat 000C                         getCANFrame@flags 001D  
                           ?_WriteTimer0 0008                         getCANFrame@pdata 001B  
                      ??_doActionDisable 000C               vscp_writeAppReg@bInfoEvent 00CF  
                     __end_of_readEEPROM 3F14                               ?_vscp_init 0001  
                           ?_doActionOff 0051                                 __ptext10 3968  
                               __ptext11 3234                                 __ptext20 1A58  
                               __ptext12 2850                                 __ptext21 3F3A  
                               __ptext13 23D8                                 __ptext30 3340  
                               __ptext22 3F44                                 __ptext14 3504  
                               __ptext31 3F70                                 __ptext23 3E1E  
                               __ptext15 0FD0                                 __ptext40 3F7A  
                               __ptext32 3F72                                 __ptext24 3D64  
                               __ptext16 3C3E                                 __ptext41 3BEA  
                               __ptext33 3F74                                 __ptext25 3D86  
                               __ptext17 3D42                                 __ptext50 3DC8  
                               __ptext42 3B8E                                 __ptext34 3E7E  
                               __ptext26 0622                                 __ptext18 2A20  
                               __ptext51 3C8C                                 __ptext43 3A8E  
                               __ptext35 3E92                                 __ptext27 15EC  
                               __ptext19 3F62                                 __ptext60 2D52  
                               __ptext52 3678                                 __ptext44 3F4E  
                               __ptext36 3E36                                 __ptext28 39D4  
                               __ptext61 38F2                                 __ptext53 3AD2  
                               __ptext45 3CD8                                 __ptext37 3EA6  
                               __ptext29 3E04                                 __ptext70 3E66  
                               __ptext62 3CFC                                 __ptext54 2BE8  
                               __ptext46 3B12                                 __ptext38 3F76  
                               __ptext71 3DE6                                 __ptext63 3EBA  
                               __ptext55 2EB6                                 __ptext47 3DA8  
                               __ptext39 3F78                                 __ptext72 3126  
                               __ptext64 3ECC                                 __ptext56 3C14  
                               __ptext48 3E4E                                 __ptext73 3EF0  
                               __ptext65 3F58                                 __ptext57 387A  
                               __ptext49 35BE                                 __ptext74 372E  
                               __ptext66 3EDE                                 __ptext58 3BBE  
                               __ptext75 3F02                                 __ptext67 3CB2  
                               __ptext59 2642                                 __ptext68 3B50  
                               __ptext77 3F14                                 __ptext69 37E4  
         vscp_goBootloaderMode@algorithm 000B                vscp_sendHeartBeat@subzone 00CA  
                          ?_getVSCPFrame 001E                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 3F26             calculateSetFilterMask@filter 003A  
                       ??_vscp_setUserID 000C                            __size_of_doDM 0318  
                          __size_of_main 00E0                            __size_of_init 003E  
              __size_of_vscp_writeAppReg 09AE                      _vscp_check_pstorage 3CFC  
                          init_app_ram@i 000D           vscp_handleProtocolEvent@i_1281 00EE  
         vscp_handleProtocolEvent@i_1278 00EC           vscp_handleProtocolEvent@i_1289 00E9  
                   __end_of_vscp_getGUID 3EBA                            ??_writeEEPROM 000B  
              __size_of_vscp_writeStdReg 01C8                      ECANSendMessage@data 0016  
               ECANSendMessage@tempBSEL0 0030                             ?_getCANFrame 001A  
                    ECANSendMessage@mode 002D                     __end_of_vscp_getZone 3F3A  
                    ECANSendMessage@temp 0033                        ?__ECANPointBuffer 0008  
                      doActionOn@dmflags 00CF                        vscp_setUserID@idx 000C  
                   __end_of_vscp_setGUID 3DA8                       vscp_readAppReg@reg 000C  
                     ??__ECANPointBuffer 000B           vscp_handleProtocolEvent@offset 00E1  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 000C  
                       init_app_eeprom@i 000D                         init_app_eeprom@j 000E  
                    _vscp_setControlByte 3EBA              __size_of_vscp_setSegmentCRC 0012  
                        _vscp_readAppReg 372E                     ?_vscp_check_pstorage 0001  
                            _RXB1CONbits 000F50         __size_of_vscp_handleDropNickname 0030  
                             _INTCONbits 000FF2             ??_vscp_readNicknamePermanent 000B  
                    ECANReceiveMessage@i 0015                          _vscp_guid_reset 0092  
                        _vscp_readStdReg 3340             vscp_handleDropNickname@bytes 000C  
             __end_of_vscp_newNodeOnline 3C14                       _ECANReceiveMessage 2642  
                         ??_getVSCPFrame 0023                          _vscp_initbtncnt 0094  
                        sendVSCPFrame@id 0047                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 0008                  vscp_getMatrixInfo@pData 0001  
                __end_of_vscp_getMDF_URL 3E4E                     ?_vscp_setControlByte 0001  
                    ?_ECANReceiveMessage 000F                  ?_vscp_handleSetNickname 0001  
                       ??_doActionToggle 00CC         __size_of_vscp_getSubMinorVersion 0002  
                       ??_doActionStatus 00CC                          _vscp_node_state 0097  
                           ??_vscp_error 0008                  ECANSendMessage@msgFlags 0019  
                    vscp_getMatrixInfo@i 0008          __size_of_calculateSetFilterMask 046C  
                vscp_setControlByte@ctrl 000B                       ECANSendMessage@ptr 0035  
                      ??_init_app_eeprom 000B                    __size_of__CANIDToRegs 0150  
                         readEEPROM@data 000A      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 3F76              _vscp_getBootLoaderAlgorithm 3F74  
       __size_of_interrupt_at_low_vector 009E                   ECANSendMessage@dataLen 0018  
                    __end_of_writeEEPROM 3CD8                      __ECANPointBuffer@pt 000C  
                   ??_ECANReceiveMessage 0012                    ??_vscp_check_pstorage 000C  
                 ECANSendMessage@buffers 002E                    _vscp_goBootloaderMode 3E4E  
           __end_of_ECANSetOperationMode 3E7E                     _vscp_restoreDefaults 3F62  
            __size_of_vscp_getFamilyCode 000A                              ??_vscp_init 000B  
                __end_of_vscp_getSubzone 3F30              __size_of_vscp_getFamilyType 000A  
                             _RXM1EXIDEN 0078EB               __end_of_vscp_writeRegister 3D64  
                     __end_of_vscp_error 3F6E                   ECANSendMessage@tempPtr 0031  
         __end_of_vscp_handleSetNickname 3CFC       vscp_handleProtocolEvent@bytes_1286 00EB  
                  ??_vscp_setControlByte 000B                     vscp_readRegister@reg 000E  
           ??_doApplicationOneSecondWork 00D1                             __CANIDToRegs 2EB6  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00DD  
            __size_of_vscp_getBufferSize 0002        doApplicationOneSecondWork@ctrlreg 00D5  
               __size_of_ECANSendMessage 016A                        doActionToggle@bOn 00D0  
                      doActionToggle@arg 0051  
